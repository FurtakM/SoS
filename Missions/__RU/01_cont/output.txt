// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13183 0 0
// PrepareAmericans ;
  28: CALL 12753 0 0
// CreateNature ;
  32: CALL 13887 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 37
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 7 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 38
 454: PUSH
 455: LD_INT 4
 457: PUSH
 458: LD_INT 5
 460: PUSH
 461: LD_INT 7
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 39
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 40
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 41
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 42
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 43
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 44
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 35
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 40
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 40
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 49
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 49
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 49
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 49
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 49
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 49
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1016: LD_ADDR_EXP 26
1020: PUSH
1021: LD_INT 24
1023: PPUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 25
1036: PUSH
1037: LD_INT 12
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 70
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1058: LD_EXP 49
1062: PPUSH
1063: LD_INT 74
1065: PPUSH
1066: LD_INT 88
1068: PPUSH
1069: CALL_OW 297
1073: PUSH
1074: LD_INT 5
1076: LESS
1077: PUSH
1078: LD_EXP 3
1082: AND
1083: IFFALSE 1108
1085: GO 1087
1087: DISABLE
// begin spotWaterfall = true ;
1088: LD_ADDR_EXP 7
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1096: LD_EXP 49
1100: PPUSH
1101: LD_STRING DWaterfall-Bur-1
1103: PPUSH
1104: CALL_OW 88
// end ;
1108: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1109: LD_EXP 49
1113: PPUSH
1114: LD_INT 130
1116: PPUSH
1117: LD_INT 96
1119: PPUSH
1120: CALL_OW 297
1124: PUSH
1125: LD_INT 5
1127: LESS
1128: PUSH
1129: LD_EXP 3
1133: AND
1134: IFFALSE 1151
1136: GO 1138
1138: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1139: LD_EXP 49
1143: PPUSH
1144: LD_STRING DCorpse-Bur-1
1146: PPUSH
1147: CALL_OW 88
1151: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1152: LD_EXP 4
1156: NOT
1157: IFFALSE 1251
1159: GO 1161
1161: DISABLE
1162: LD_INT 0
1164: PPUSH
// begin enable ;
1165: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1166: LD_ADDR_VAR 0 1
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 25
1183: PUSH
1184: LD_INT 12
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: PUSH
1200: FOR_IN
1201: IFFALSE 1249
// if GetDistUnits ( apeman , Burlak ) < 7 then
1203: LD_VAR 0 1
1207: PPUSH
1208: LD_EXP 49
1212: PPUSH
1213: CALL_OW 296
1217: PUSH
1218: LD_INT 7
1220: LESS
1221: IFFALSE 1247
// begin apemansContact = true ;
1223: LD_ADDR_EXP 4
1227: PUSH
1228: LD_INT 1
1230: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1231: LD_EXP 49
1235: PPUSH
1236: LD_STRING D2-Bur-1
1238: PPUSH
1239: CALL_OW 88
// exit ;
1243: POP
1244: POP
1245: GO 1251
// end ;
1247: GO 1200
1249: POP
1250: POP
// end ;
1251: PPOPN 1
1253: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1254: LD_EXP 5
1258: NOT
1259: IFFALSE 1375
1261: GO 1263
1263: DISABLE
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
// begin enable ;
1268: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1269: LD_ADDR_VAR 0 2
1273: PUSH
1274: LD_INT 22
1276: PUSH
1277: LD_INT 0
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 25
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: PUSH
1303: FOR_IN
1304: IFFALSE 1373
// if Attacks ( apeman ) then
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 320
1315: IFFALSE 1371
// if GetSide ( Attacks ( apeman ) ) = 3 then
1317: LD_VAR 0 2
1321: PPUSH
1322: CALL_OW 320
1326: PPUSH
1327: CALL_OW 255
1331: PUSH
1332: LD_INT 3
1334: EQUAL
1335: IFFALSE 1371
// begin attackedByApeman = true ;
1337: LD_ADDR_EXP 5
1341: PUSH
1342: LD_INT 1
1344: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1345: LD_ADDR_EXP 8
1349: PUSH
1350: LD_VAR 0 2
1354: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1355: LD_EXP 49
1359: PPUSH
1360: LD_STRING D2-Bur-1a
1362: PPUSH
1363: CALL_OW 88
// exit ;
1367: POP
1368: POP
1369: GO 1375
// end ;
1371: GO 1303
1373: POP
1374: POP
// end ;
1375: PPOPN 2
1377: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1378: LD_EXP 6
1382: NOT
1383: IFFALSE 1480
1385: GO 1387
1387: DISABLE
1388: LD_INT 0
1390: PPUSH
1391: PPUSH
// begin enable ;
1392: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1393: LD_ADDR_VAR 0 2
1397: PUSH
1398: LD_INT 24
1400: PPUSH
1401: LD_INT 22
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 25
1413: PUSH
1414: LD_INT 12
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PPUSH
1425: CALL_OW 70
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1478
// if Attacks ( apeman ) then
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 320
1442: IFFALSE 1476
// if GetSide ( Attacks ( apeman ) ) = 3 then
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 320
1453: PPUSH
1454: CALL_OW 255
1458: PUSH
1459: LD_INT 3
1461: EQUAL
1462: IFFALSE 1476
// begin attackedByApemanNearLake = true ;
1464: LD_ADDR_EXP 6
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// exit ;
1472: POP
1473: POP
1474: GO 1480
// end ;
1476: GO 1430
1478: POP
1479: POP
// end ;
1480: PPOPN 2
1482: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1483: LD_EXP 9
1487: PPUSH
1488: CALL_OW 303
1492: IFFALSE 1526
1494: GO 1496
1496: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1497: LD_ADDR_EXP 10
1501: PUSH
1502: LD_EXP 9
1506: PPUSH
1507: CALL_OW 250
1511: PUSH
1512: LD_EXP 9
1516: PPUSH
1517: CALL_OW 251
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: ST_TO_ADDR
1526: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1527: LD_EXP 9
1531: PPUSH
1532: CALL_OW 303
1536: PUSH
1537: LD_INT 3
1539: PPUSH
1540: LD_EXP 10
1544: PUSH
1545: LD_INT 1
1547: ARRAY
1548: PPUSH
1549: LD_EXP 10
1553: PUSH
1554: LD_INT 2
1556: ARRAY
1557: PPUSH
1558: CALL_OW 293
1562: AND
1563: IFFALSE 1882
1565: GO 1567
1567: DISABLE
1568: LD_INT 0
1570: PPUSH
// begin wait ( 0 0$2 ) ;
1571: LD_INT 70
1573: PPUSH
1574: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1578: LD_EXP 49
1582: PPUSH
1583: LD_STRING D2a-Bur-1
1585: PPUSH
1586: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1590: LD_INT 22
1592: PUSH
1593: LD_INT 3
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 21
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PPUSH
1614: CALL_OW 69
1618: PUSH
1619: LD_INT 1
1621: EQUAL
1622: IFFALSE 1638
// Say ( Burlak , D2a-Bur-2 ) else
1624: LD_EXP 49
1628: PPUSH
1629: LD_STRING D2a-Bur-2
1631: PPUSH
1632: CALL_OW 88
1636: GO 1882
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_INT 22
1645: PUSH
1646: LD_INT 3
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 21
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: PUSH
1672: LD_EXP 49
1676: PUSH
1677: LD_EXP 57
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: DIFF
1686: PPUSH
1687: LD_EXP 10
1691: PUSH
1692: LD_INT 1
1694: ARRAY
1695: PPUSH
1696: LD_EXP 10
1700: PUSH
1701: LD_INT 2
1703: ARRAY
1704: PPUSH
1705: CALL_OW 73
1709: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1710: LD_ADDR_EXP 11
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_EXP 10
1729: PUSH
1730: LD_INT 1
1732: ARRAY
1733: PPUSH
1734: LD_EXP 10
1738: PUSH
1739: LD_INT 2
1741: ARRAY
1742: PPUSH
1743: CALL_OW 111
// case nearUnit of Belkov :
1747: LD_VAR 0 1
1751: PUSH
1752: LD_EXP 54
1756: DOUBLE
1757: EQUAL
1758: IFTRUE 1762
1760: GO 1777
1762: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1763: LD_EXP 54
1767: PPUSH
1768: LD_STRING D2a-Bel-1
1770: PPUSH
1771: CALL_OW 88
1775: GO 1844
1777: LD_EXP 56
1781: DOUBLE
1782: EQUAL
1783: IFTRUE 1787
1785: GO 1802
1787: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1788: LD_EXP 56
1792: PPUSH
1793: LD_STRING D2a-Kir-1
1795: PPUSH
1796: CALL_OW 88
1800: GO 1844
1802: POP
// if GetSex ( nearUnit ) = sex_male then
1803: LD_VAR 0 1
1807: PPUSH
1808: CALL_OW 258
1812: PUSH
1813: LD_INT 1
1815: EQUAL
1816: IFFALSE 1832
// Say ( nearUnit , D2a-RSol1-1 ) else
1818: LD_VAR 0 1
1822: PPUSH
1823: LD_STRING D2a-RSol1-1
1825: PPUSH
1826: CALL_OW 88
1830: GO 1844
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_STRING D2a-RFSol1-1
1839: PPUSH
1840: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1844: LD_EXP 57
1848: PPUSH
1849: CALL_OW 255
1853: PUSH
1854: LD_INT 3
1856: EQUAL
1857: PUSH
1858: LD_EXP 57
1862: PPUSH
1863: CALL_OW 302
1867: AND
1868: IFFALSE 1882
// Say ( Gnyevko , D2a-Gny-1 ) ;
1870: LD_EXP 57
1874: PPUSH
1875: LD_STRING D2a-Gny-1
1877: PPUSH
1878: CALL_OW 88
// end ; end ;
1882: PPOPN 1
1884: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1885: LD_EXP 12
1889: NOT
1890: PUSH
1891: LD_EXP 43
1895: PUSH
1896: LD_INT 70
1898: GREATER
1899: AND
1900: IFFALSE 1920
1902: GO 1904
1904: DISABLE
// begin enable ;
1905: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1906: LD_EXP 57
1910: PPUSH
1911: LD_EXP 42
1915: PPUSH
1916: CALL_OW 234
// end ;
1920: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1921: LD_INT 3
1923: PPUSH
1924: LD_EXP 57
1928: PPUSH
1929: CALL_OW 292
1933: IFFALSE 2545
1935: GO 1937
1937: DISABLE
1938: LD_INT 0
1940: PPUSH
1941: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1942: LD_EXP 57
1946: PPUSH
1947: CALL_OW 87
// DialogueOn ;
1951: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1955: LD_ADDR_VAR 0 1
1959: PUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 21
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 69
1988: PPUSH
1989: LD_EXP 57
1993: PPUSH
1994: CALL_OW 74
1998: ST_TO_ADDR
// if nearUnit = Burlak then
1999: LD_VAR 0 1
2003: PUSH
2004: LD_EXP 49
2008: EQUAL
2009: IFFALSE 2371
// begin Say ( Burlak , D3-Bur-1 ) ;
2011: LD_EXP 49
2015: PPUSH
2016: LD_STRING D3-Bur-1
2018: PPUSH
2019: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2023: LD_EXP 57
2027: PPUSH
2028: LD_STRING D3-Gny-1
2030: PPUSH
2031: CALL_OW 88
// if apeWithRadioKiller then
2035: LD_EXP 11
2039: IFFALSE 2079
// begin if apeWithRadioKiller = Burlak then
2041: LD_EXP 11
2045: PUSH
2046: LD_EXP 49
2050: EQUAL
2051: IFFALSE 2067
// Say ( Burlak , D3-Bur-2 ) else
2053: LD_EXP 49
2057: PPUSH
2058: LD_STRING D3-Bur-2
2060: PPUSH
2061: CALL_OW 88
2065: GO 2079
// Say ( Burlak , D3-Bur-2a ) ;
2067: LD_EXP 49
2071: PPUSH
2072: LD_STRING D3-Bur-2a
2074: PPUSH
2075: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2079: LD_EXP 49
2083: PPUSH
2084: LD_STRING D3-Bur-2b
2086: PPUSH
2087: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2091: LD_INT 22
2093: PUSH
2094: LD_INT 3
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 21
2103: PUSH
2104: LD_INT 1
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PPUSH
2115: CALL_OW 69
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: PUSH
2124: LD_EXP 14
2128: NOT
2129: AND
2130: IFFALSE 2182
// begin Say ( Burlak , D3-Bur-2c ) ;
2132: LD_EXP 49
2136: PPUSH
2137: LD_STRING D3-Bur-2c
2139: PPUSH
2140: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2144: LD_EXP 57
2148: PPUSH
2149: LD_STRING D3-Gny-2
2151: PPUSH
2152: CALL_OW 88
// DialogueOff ;
2156: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2160: LD_EXP 57
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 235
// gnyevkoSaved = true ;
2172: LD_ADDR_EXP 12
2176: PUSH
2177: LD_INT 1
2179: ST_TO_ADDR
// exit ;
2180: GO 2545
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2182: LD_INT 22
2184: PUSH
2185: LD_INT 3
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PUSH
2192: LD_INT 21
2194: PUSH
2195: LD_INT 1
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 69
2210: PUSH
2211: LD_INT 1
2213: GREATER
2214: PUSH
2215: LD_EXP 14
2219: OR
2220: PUSH
2221: LD_EXP 22
2225: NOT
2226: AND
2227: IFFALSE 2279
// begin Say ( Burlak , D3-Bur-2d ) ;
2229: LD_EXP 49
2233: PPUSH
2234: LD_STRING D3-Bur-2d
2236: PPUSH
2237: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2241: LD_EXP 57
2245: PPUSH
2246: LD_STRING D3-Gny-2
2248: PPUSH
2249: CALL_OW 88
// DialogueOff ;
2253: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2257: LD_EXP 57
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: CALL_OW 235
// gnyevkoSaved = true ;
2269: LD_ADDR_EXP 12
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// exit ;
2277: GO 2545
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2279: LD_INT 22
2281: PUSH
2282: LD_INT 3
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 21
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PPUSH
2303: CALL_OW 69
2307: PUSH
2308: LD_INT 1
2310: GREATER
2311: PUSH
2312: LD_EXP 22
2316: AND
2317: IFFALSE 2369
// begin Say ( Burlak , D3-Bur-2e ) ;
2319: LD_EXP 49
2323: PPUSH
2324: LD_STRING D3-Bur-2e
2326: PPUSH
2327: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2331: LD_EXP 57
2335: PPUSH
2336: LD_STRING D3-Gny-2
2338: PPUSH
2339: CALL_OW 88
// DialogueOff ;
2343: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2347: LD_EXP 57
2351: PPUSH
2352: LD_INT 3
2354: PPUSH
2355: CALL_OW 235
// gnyevkoSaved = true ;
2359: LD_ADDR_EXP 12
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// exit ;
2367: GO 2545
// end ; end else
2369: GO 2545
// begin if GetSex ( nearUnit ) = sex_male then
2371: LD_VAR 0 1
2375: PPUSH
2376: CALL_OW 258
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2400
// Say ( nearUnit , D3-RSol1-1 ) else
2386: LD_VAR 0 1
2390: PPUSH
2391: LD_STRING D3-RSol1-1
2393: PPUSH
2394: CALL_OW 88
2398: GO 2412
// Say ( nearUnit , D3-RFSol1-1 ) ;
2400: LD_VAR 0 1
2404: PPUSH
2405: LD_STRING D3-RFSol1-1
2407: PPUSH
2408: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2412: LD_EXP 57
2416: PPUSH
2417: LD_STRING D3-Gny-1
2419: PPUSH
2420: CALL_OW 88
// if apeWithRadioKiller then
2424: LD_EXP 11
2428: IFFALSE 2468
// begin if apeWithRadioKiller = Burlak then
2430: LD_EXP 11
2434: PUSH
2435: LD_EXP 49
2439: EQUAL
2440: IFFALSE 2456
// Say ( Burlak , D3-Bur-2 ) else
2442: LD_EXP 49
2446: PPUSH
2447: LD_STRING D3-Bur-2
2449: PPUSH
2450: CALL_OW 88
2454: GO 2468
// Say ( Burlak , D3-Bur-2a ) ;
2456: LD_EXP 49
2460: PPUSH
2461: LD_STRING D3-Bur-2a
2463: PPUSH
2464: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2468: LD_VAR 0 1
2472: PPUSH
2473: CALL_OW 258
2477: PUSH
2478: LD_INT 1
2480: EQUAL
2481: IFFALSE 2497
// Say ( nearUnit , D3-RSol1-2 ) else
2483: LD_VAR 0 1
2487: PPUSH
2488: LD_STRING D3-RSol1-2
2490: PPUSH
2491: CALL_OW 88
2495: GO 2509
// Say ( nearUnit , D3-RFSol1-2 ) ;
2497: LD_VAR 0 1
2501: PPUSH
2502: LD_STRING D3-RFSol1-2
2504: PPUSH
2505: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2509: LD_EXP 57
2513: PPUSH
2514: LD_STRING D3-Gny-2a
2516: PPUSH
2517: CALL_OW 88
// DialogueOff ;
2521: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2525: LD_EXP 57
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 235
// gnyevkoSaved = true ;
2537: LD_ADDR_EXP 12
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// end ; end ;
2545: PPOPN 2
2547: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2548: LD_EXP 12
2552: NOT
2553: PUSH
2554: LD_EXP 21
2558: NOT
2559: OR
2560: IFFALSE 2755
2562: GO 2564
2564: DISABLE
2565: LD_INT 0
2567: PPUSH
// begin enable ;
2568: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2569: LD_EXP 12
2573: NOT
2574: PUSH
2575: LD_EXP 43
2579: PUSH
2580: LD_INT 70
2582: GREATER
2583: AND
2584: IFFALSE 2662
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2586: LD_ADDR_VAR 0 1
2590: PUSH
2591: LD_INT 22
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 25
2603: PUSH
2604: LD_INT 12
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 69
2619: PUSH
2620: FOR_IN
2621: IFFALSE 2660
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2623: LD_VAR 0 1
2627: PPUSH
2628: LD_EXP 57
2632: PPUSH
2633: CALL_OW 250
2637: PPUSH
2638: LD_EXP 57
2642: PPUSH
2643: CALL_OW 251
2647: PPUSH
2648: LD_INT 10
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL 9036 0 5
2658: GO 2620
2660: POP
2661: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2662: LD_EXP 21
2666: NOT
2667: PUSH
2668: LD_EXP 44
2672: PUSH
2673: LD_INT 70
2675: GREATER
2676: AND
2677: IFFALSE 2755
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2679: LD_ADDR_VAR 0 1
2683: PUSH
2684: LD_INT 22
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 25
2696: PUSH
2697: LD_INT 12
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2753
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_EXP 56
2725: PPUSH
2726: CALL_OW 250
2730: PPUSH
2731: LD_EXP 56
2735: PPUSH
2736: CALL_OW 251
2740: PPUSH
2741: LD_INT 10
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL 9036 0 5
2751: GO 2713
2753: POP
2754: POP
// end ;
2755: PPOPN 1
2757: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2758: LD_EXP 12
2762: NOT
2763: PUSH
2764: LD_EXP 21
2768: NOT
2769: OR
2770: IFFALSE 2881
2772: GO 2774
2774: DISABLE
// begin enable ;
2775: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2776: LD_EXP 12
2780: NOT
2781: PUSH
2782: LD_EXP 43
2786: PUSH
2787: LD_INT 0
2789: GREATER
2790: AND
2791: IFFALSE 2807
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2793: LD_ADDR_EXP 43
2797: PUSH
2798: LD_EXP 43
2802: PUSH
2803: LD_INT 35
2805: MINUS
2806: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2807: LD_EXP 56
2811: PPUSH
2812: CALL_OW 305
2816: PUSH
2817: LD_EXP 21
2821: NOT
2822: AND
2823: PUSH
2824: LD_EXP 44
2828: PUSH
2829: LD_INT 0
2831: GREATER
2832: AND
2833: IFFALSE 2849
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2835: LD_ADDR_EXP 44
2839: PUSH
2840: LD_EXP 44
2844: PUSH
2845: LD_INT 35
2847: MINUS
2848: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2849: LD_EXP 56
2853: PPUSH
2854: CALL_OW 305
2858: PUSH
2859: LD_EXP 21
2863: NOT
2864: AND
2865: IFFALSE 2881
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2867: LD_ADDR_EXP 29
2871: PUSH
2872: LD_EXP 29
2876: PUSH
2877: LD_INT 35
2879: PLUS
2880: ST_TO_ADDR
// end ;
2881: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2882: LD_INT 3
2884: PPUSH
2885: LD_EXP 50
2889: PPUSH
2890: CALL_OW 292
2894: PUSH
2895: LD_INT 6
2897: PPUSH
2898: LD_EXP 49
2902: PPUSH
2903: CALL_OW 292
2907: OR
2908: PUSH
2909: LD_EXP 57
2913: PPUSH
2914: CALL_OW 255
2918: PUSH
2919: LD_INT 3
2921: EQUAL
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 57
2930: PPUSH
2931: CALL_OW 292
2935: AND
2936: OR
2937: PUSH
2938: LD_EXP 14
2942: NOT
2943: AND
2944: IFFALSE 3797
2946: GO 2948
2948: DISABLE
// begin enable ;
2949: ENABLE
// InGameOn ;
2950: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2954: LD_EXP 50
2958: PPUSH
2959: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2963: LD_EXP 57
2967: PPUSH
2968: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2972: LD_EXP 49
2976: PUSH
2977: LD_EXP 57
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PPUSH
2986: CALL_OW 200
// DialogueOn ;
2990: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2994: LD_EXP 13
2998: IFFALSE 3262
// begin meetPokryshkin = true ;
3000: LD_ADDR_EXP 14
3004: PUSH
3005: LD_INT 1
3007: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3008: LD_INT 6
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 343
// DialogueOff ;
3018: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3022: LD_EXP 49
3026: PPUSH
3027: LD_EXP 50
3031: PPUSH
3032: CALL_OW 250
3036: PPUSH
3037: LD_EXP 50
3041: PPUSH
3042: CALL_OW 251
3046: PPUSH
3047: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3051: LD_EXP 49
3055: PPUSH
3056: LD_EXP 50
3060: PPUSH
3061: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3065: LD_EXP 50
3069: PPUSH
3070: LD_EXP 49
3074: PPUSH
3075: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3079: LD_EXP 57
3083: PPUSH
3084: LD_STRING D4-Gny-3
3086: PPUSH
3087: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3091: LD_EXP 49
3095: PPUSH
3096: LD_STRING D4-Bur-3
3098: PPUSH
3099: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3103: LD_EXP 50
3107: PPUSH
3108: LD_STRING D4-Pok-4
3110: PPUSH
3111: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3115: LD_EXP 45
3119: PPUSH
3120: LD_INT 18
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 49
// wait ( 0 0$2 ) ;
3130: LD_INT 70
3132: PPUSH
3133: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3137: LD_EXP 49
3141: PPUSH
3142: LD_STRING D4-Bur-4
3144: PPUSH
3145: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3149: LD_EXP 50
3153: PPUSH
3154: LD_STRING D4-Pok-5
3156: PPUSH
3157: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3161: LD_EXP 45
3165: PPUSH
3166: LD_STRING D4-Sol1-5
3168: PPUSH
3169: LD_INT 0
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: LD_INT 0
3180: PPUSH
3181: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3185: LD_EXP 50
3189: PPUSH
3190: LD_STRING D4-Pok-6
3192: PPUSH
3193: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3197: LD_EXP 50
3201: PPUSH
3202: LD_STRING D4-Pok-6a
3204: PPUSH
3205: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3209: LD_EXP 49
3213: PPUSH
3214: LD_STRING D4-Bur-6
3216: PPUSH
3217: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-7
3228: PPUSH
3229: CALL_OW 88
// DialogueOff ;
3233: CALL_OW 7
// InGameOff ;
3237: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3241: LD_STRING M2
3243: PPUSH
3244: CALL_OW 337
// goToHill = true ;
3248: LD_ADDR_EXP 15
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// MoveToHill ;
3256: CALL 10916 0 0
// exit ;
3260: GO 3797
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3262: LD_EXP 49
3266: PUSH
3267: LD_EXP 57
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3280: LD_EXP 50
3284: PPUSH
3285: LD_STRING D4-Pok-1
3287: PPUSH
3288: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3292: LD_EXP 57
3296: PPUSH
3297: LD_EXP 50
3301: PPUSH
3302: CALL_OW 296
3306: PUSH
3307: LD_INT 15
3309: LESSEQUAL
3310: PUSH
3311: LD_EXP 49
3315: PPUSH
3316: LD_EXP 50
3320: PPUSH
3321: CALL_OW 296
3325: PUSH
3326: LD_INT 20
3328: GREATER
3329: AND
3330: IFFALSE 3440
// begin ComWalk ( Gnyevko ) ;
3332: LD_EXP 57
3336: PPUSH
3337: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3341: LD_EXP 57
3345: PPUSH
3346: LD_STRING D4-Gny-1
3348: PPUSH
3349: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3353: LD_EXP 50
3357: PPUSH
3358: LD_STRING D4-Pok-2
3360: PPUSH
3361: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-2
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-3
3384: PPUSH
3385: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3389: LD_ADDR_EXP 13
3393: PUSH
3394: LD_INT 1
3396: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3397: LD_EXP 57
3401: PPUSH
3402: LD_INT 6
3404: PPUSH
3405: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3409: LD_EXP 57
3413: PPUSH
3414: LD_EXP 50
3418: PPUSH
3419: CALL_OW 250
3423: PPUSH
3424: LD_EXP 50
3428: PPUSH
3429: CALL_OW 251
3433: PPUSH
3434: CALL_OW 171
// end else
3438: GO 3789
// begin meetPokryshkin = true ;
3440: LD_ADDR_EXP 14
3444: PUSH
3445: LD_INT 1
3447: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3448: LD_INT 6
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: CALL_OW 343
// DialogueOff ;
3458: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3462: LD_EXP 57
3466: PPUSH
3467: CALL_OW 255
3471: PUSH
3472: LD_INT 3
3474: EQUAL
3475: PUSH
3476: LD_EXP 57
3480: PPUSH
3481: CALL_OW 302
3485: AND
3486: IFFALSE 3563
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3488: LD_EXP 49
3492: PUSH
3493: LD_EXP 57
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PPUSH
3502: LD_EXP 50
3506: PPUSH
3507: CALL_OW 250
3511: PPUSH
3512: LD_EXP 50
3516: PPUSH
3517: CALL_OW 251
3521: PPUSH
3522: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3526: LD_EXP 49
3530: PUSH
3531: LD_EXP 57
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PPUSH
3540: LD_EXP 50
3544: PPUSH
3545: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3549: LD_EXP 57
3553: PPUSH
3554: LD_INT 6
3556: PPUSH
3557: CALL_OW 235
// end else
3561: GO 3606
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3563: LD_EXP 49
3567: PPUSH
3568: LD_EXP 50
3572: PPUSH
3573: CALL_OW 250
3577: PPUSH
3578: LD_EXP 50
3582: PPUSH
3583: CALL_OW 251
3587: PPUSH
3588: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3592: LD_EXP 49
3596: PPUSH
3597: LD_EXP 50
3601: PPUSH
3602: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3606: LD_EXP 50
3610: PPUSH
3611: LD_EXP 49
3615: PPUSH
3616: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3620: LD_EXP 49
3624: PPUSH
3625: LD_STRING D4-Bur-3
3627: PPUSH
3628: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3632: LD_EXP 50
3636: PPUSH
3637: LD_STRING D4-Pok-4
3639: PPUSH
3640: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3644: LD_EXP 45
3648: PPUSH
3649: LD_INT 18
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: CALL_OW 49
// wait ( 0 0$2 ) ;
3659: LD_INT 70
3661: PPUSH
3662: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3666: LD_EXP 49
3670: PPUSH
3671: LD_STRING D4-Bur-4
3673: PPUSH
3674: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3678: LD_EXP 50
3682: PPUSH
3683: LD_STRING D4-Pok-5
3685: PPUSH
3686: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3690: LD_EXP 45
3694: PPUSH
3695: LD_STRING D4-Sol1-5
3697: PPUSH
3698: LD_INT 0
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: LD_INT 1
3706: PPUSH
3707: LD_INT 0
3709: PPUSH
3710: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3714: LD_EXP 50
3718: PPUSH
3719: LD_STRING D4-Pok-6
3721: PPUSH
3722: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3726: LD_EXP 50
3730: PPUSH
3731: LD_STRING D4-Pok-6a
3733: PPUSH
3734: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3738: LD_EXP 49
3742: PPUSH
3743: LD_STRING D4-Bur-6
3745: PPUSH
3746: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-7
3757: PPUSH
3758: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3762: LD_STRING M2
3764: PPUSH
3765: CALL_OW 337
// goToHill = true ;
3769: LD_ADDR_EXP 15
3773: PUSH
3774: LD_INT 1
3776: ST_TO_ADDR
// DialogueOff ;
3777: CALL_OW 7
// InGameOff ;
3781: CALL_OW 9
// MoveToHill ;
3785: CALL 10916 0 0
// end ; DialogueOff ;
3789: CALL_OW 7
// InGameOff ;
3793: CALL_OW 9
// end ;
3797: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3798: LD_EXP 49
3802: PPUSH
3803: LD_EXP 50
3807: PPUSH
3808: CALL_OW 296
3812: PUSH
3813: LD_INT 10
3815: GREATER
3816: PUSH
3817: LD_EXP 15
3821: AND
3822: PUSH
3823: LD_EXP 18
3827: NOT
3828: AND
3829: IFFALSE 4030
3831: GO 3833
3833: DISABLE
3834: LD_INT 0
3836: PPUSH
// begin enable ;
3837: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3838: LD_ADDR_VAR 0 1
3842: PUSH
3843: LD_EXP 50
3847: PUSH
3848: LD_EXP 51
3852: PUSH
3853: LD_EXP 52
3857: PUSH
3858: LD_EXP 53
3862: PUSH
3863: LD_EXP 54
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3875: LD_EXP 57
3879: PPUSH
3880: CALL_OW 255
3884: PUSH
3885: LD_INT 6
3887: EQUAL
3888: PUSH
3889: LD_EXP 12
3893: AND
3894: IFFALSE 3912
// ruSolds = ruSolds ^ Gnyevko ;
3896: LD_ADDR_VAR 0 1
3900: PUSH
3901: LD_VAR 0 1
3905: PUSH
3906: LD_EXP 57
3910: ADD
3911: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3921: LD_EXP 49
3925: PPUSH
3926: CALL_OW 87
// DialogueOn ;
3930: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3934: LD_EXP 50
3938: PPUSH
3939: LD_STRING DSplit-Pok-1
3941: PPUSH
3942: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3946: LD_EXP 49
3950: PPUSH
3951: LD_STRING DSplit-Bur-1
3953: PPUSH
3954: CALL_OW 88
// DialogueOff ;
3958: CALL_OW 7
// InGameOn ;
3962: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3966: LD_EXP 49
3970: PPUSH
3971: LD_EXP 50
3975: PPUSH
3976: CALL_OW 250
3980: PPUSH
3981: LD_EXP 50
3985: PPUSH
3986: CALL_OW 251
3990: PPUSH
3991: CALL_OW 111
// wait ( 0 0$1 ) ;
3995: LD_INT 35
3997: PPUSH
3998: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4002: LD_EXP 49
4006: PPUSH
4007: LD_EXP 50
4011: PPUSH
4012: CALL_OW 296
4016: PUSH
4017: LD_INT 6
4019: LESS
4020: IFFALSE 3966
// InGameOff ;
4022: CALL_OW 9
// MoveToHill ;
4026: CALL 10916 0 0
// end ;
4030: PPOPN 1
4032: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4033: LD_INT 0
4035: PPUSH
4036: PPUSH
// traitor = true ;
4037: LD_ADDR_EXP 18
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// DialogueOn ;
4045: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4049: LD_EXP 50
4053: PPUSH
4054: LD_STRING DAttack-Pok-1
4056: PPUSH
4057: CALL_OW 88
// DialogueOff ;
4061: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4065: LD_INT 3
4067: PPUSH
4068: LD_INT 6
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4081: LD_INT 22
4083: PUSH
4084: LD_INT 6
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 21
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 69
4109: PPUSH
4110: LD_EXP 49
4114: PPUSH
4115: CALL_OW 115
// end ;
4119: LD_VAR 0 1
4123: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4124: LD_EXP 50
4128: PPUSH
4129: LD_INT 65
4131: PPUSH
4132: LD_INT 59
4134: PPUSH
4135: CALL_OW 297
4139: PUSH
4140: LD_INT 4
4142: LESS
4143: PUSH
4144: LD_EXP 18
4148: NOT
4149: AND
4150: IFFALSE 4347
4152: GO 4154
4154: DISABLE
// begin InGameOn ;
4155: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4159: LD_INT 55
4161: PPUSH
4162: LD_INT 50
4164: PPUSH
4165: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4169: LD_EXP 49
4173: PPUSH
4174: LD_INT 66
4176: PPUSH
4177: LD_INT 57
4179: PPUSH
4180: CALL_OW 111
// AddComHold ( Burlak ) ;
4184: LD_EXP 49
4188: PPUSH
4189: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4193: LD_EXP 45
4197: PPUSH
4198: LD_INT 59
4200: PPUSH
4201: LD_INT 55
4203: PPUSH
4204: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4208: LD_INT 35
4210: PPUSH
4211: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4215: LD_INT 1
4217: PPUSH
4218: LD_EXP 50
4222: PPUSH
4223: CALL_OW 292
4227: IFFALSE 4208
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4229: LD_EXP 45
4233: PUSH
4234: LD_EXP 50
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 87
// ComStop ( Charles ) ;
4247: LD_EXP 45
4251: PPUSH
4252: CALL_OW 141
// AddComHold ( Charles ) ;
4256: LD_EXP 45
4260: PPUSH
4261: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4265: LD_EXP 45
4269: PPUSH
4270: LD_EXP 50
4274: PPUSH
4275: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4279: LD_EXP 45
4283: PPUSH
4284: LD_STRING D5-Sol1-1
4286: PPUSH
4287: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4291: LD_EXP 50
4295: PPUSH
4296: LD_STRING D5-Pok-1
4298: PPUSH
4299: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 6
4308: PPUSH
4309: LD_INT 2
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4319: LD_INT 1
4321: PPUSH
4322: LD_INT 3
4324: PPUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4335: LD_EXP 45
4339: PPUSH
4340: LD_STRING D5-Sol1-2
4342: PPUSH
4343: CALL_OW 88
// end ;
4347: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4348: LD_EXP 45
4352: PPUSH
4353: CALL_OW 301
4357: PUSH
4358: LD_EXP 15
4362: AND
4363: IFFALSE 4954
4365: GO 4367
4367: DISABLE
4368: LD_INT 0
4370: PPUSH
// begin InGameOn ;
4371: CALL_OW 8
// goToHill = false ;
4375: LD_ADDR_EXP 15
4379: PUSH
4380: LD_INT 0
4382: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4383: LD_INT 22
4385: PUSH
4386: LD_INT 6
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PPUSH
4412: CALL_OW 141
// wait ( 0 0$1 ) ;
4416: LD_INT 35
4418: PPUSH
4419: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4423: LD_INT 22
4425: PUSH
4426: LD_INT 6
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 21
4435: PUSH
4436: LD_INT 1
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 69
4451: PPUSH
4452: CALL_OW 138
// wait ( 0 0$1 ) ;
4456: LD_INT 35
4458: PPUSH
4459: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4463: LD_INT 55
4465: PPUSH
4466: LD_INT 50
4468: PPUSH
4469: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4473: LD_EXP 49
4477: PPUSH
4478: LD_INT 56
4480: PPUSH
4481: LD_INT 56
4483: PPUSH
4484: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4488: LD_INT 22
4490: PUSH
4491: LD_INT 6
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 21
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: PPUSH
4517: LD_INT 56
4519: PPUSH
4520: LD_INT 56
4522: PPUSH
4523: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4527: LD_EXP 49
4531: PPUSH
4532: LD_STRING D5-Bur-2
4534: PPUSH
4535: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4539: LD_EXP 50
4543: PPUSH
4544: LD_STRING D5-Pok-2
4546: PPUSH
4547: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4551: LD_EXP 54
4555: PPUSH
4556: LD_STRING D5-Bel-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-3
4570: PPUSH
4571: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4575: LD_EXP 57
4579: PPUSH
4580: CALL_OW 255
4584: PUSH
4585: LD_INT 6
4587: EQUAL
4588: IFFALSE 4602
// Say ( Gnyevko , D5-Gny-3 ) ;
4590: LD_EXP 57
4594: PPUSH
4595: LD_STRING D5-Gny-3
4597: PPUSH
4598: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4602: LD_EXP 49
4606: PPUSH
4607: LD_STRING D5-Bur-3
4609: PPUSH
4610: CALL_OW 88
// interface_hidden = true ;
4614: LD_ADDR_OWVAR 54
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// IngameOff ;
4622: CALL_OW 9
// wait ( 0 0$2 ) ;
4626: LD_INT 70
4628: PPUSH
4629: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4633: LD_EXP 49
4637: PPUSH
4638: LD_INT 85
4640: PPUSH
4641: LD_INT 64
4643: PPUSH
4644: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4648: LD_INT 22
4650: PUSH
4651: LD_INT 6
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 21
4660: PUSH
4661: LD_INT 1
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 69
4676: PPUSH
4677: LD_INT 85
4679: PPUSH
4680: LD_INT 64
4682: PPUSH
4683: CALL_OW 111
// interface_hidden = false ;
4687: LD_ADDR_OWVAR 54
4691: PUSH
4692: LD_INT 0
4694: ST_TO_ADDR
// InGameOn ;
4695: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4699: LD_EXP 49
4703: PPUSH
4704: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4708: LD_EXP 50
4712: PPUSH
4713: LD_STRING D6-Pok-1
4715: PPUSH
4716: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4720: LD_EXP 49
4724: PPUSH
4725: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4729: LD_EXP 49
4733: PPUSH
4734: LD_STRING D6-Bur-1
4736: PPUSH
4737: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4741: LD_EXP 49
4745: PPUSH
4746: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4750: LD_EXP 50
4754: PPUSH
4755: LD_STRING D6-Pok-2
4757: PPUSH
4758: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4762: LD_EXP 49
4766: PPUSH
4767: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4771: LD_EXP 54
4775: PPUSH
4776: LD_STRING D6-Bel-2
4778: PPUSH
4779: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4783: LD_EXP 49
4787: PPUSH
4788: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4792: LD_EXP 49
4796: PPUSH
4797: LD_STRING D6-Bur-2
4799: PPUSH
4800: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4804: LD_EXP 49
4808: PPUSH
4809: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4813: LD_EXP 50
4817: PPUSH
4818: LD_STRING D6-Pok-3
4820: PPUSH
4821: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4825: LD_EXP 49
4829: PPUSH
4830: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4834: LD_EXP 58
4838: PPUSH
4839: LD_STRING D6-Kur-3
4841: PPUSH
4842: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4846: LD_EXP 49
4850: PPUSH
4851: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4855: LD_EXP 50
4859: PPUSH
4860: LD_STRING D6-Pok-4
4862: PPUSH
4863: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4867: LD_EXP 49
4871: PPUSH
4872: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4876: LD_EXP 54
4880: PPUSH
4881: LD_STRING D6-Bel-4
4883: PPUSH
4884: CALL_OW 88
// InGameOff ;
4888: CALL_OW 9
// interface_hidden = false ;
4892: LD_ADDR_OWVAR 54
4896: PUSH
4897: LD_INT 0
4899: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4900: LD_EXP 50
4904: PPUSH
4905: LD_INT 27
4907: PPUSH
4908: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4912: LD_INT 22
4914: PUSH
4915: LD_INT 6
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: LD_INT 21
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: LD_EXP 50
4945: DIFF
4946: PPUSH
4947: LD_INT 27
4949: PPUSH
4950: CALL_OW 113
// end ;
4954: PPOPN 1
4956: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4957: LD_EXP 50
4961: PPUSH
4962: LD_INT 27
4964: PPUSH
4965: CALL_OW 308
4969: IFFALSE 5052
4971: GO 4973
4973: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4974: LD_EXP 50
4978: PPUSH
4979: LD_STRING D7-Pok-1
4981: PPUSH
4982: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
4986: LD_EXP 50
4990: PPUSH
4991: LD_INT 23
4993: PPUSH
4994: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
4998: LD_INT 22
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PPUSH
5022: CALL_OW 69
5026: PUSH
5027: LD_EXP 50
5031: DIFF
5032: PPUSH
5033: LD_INT 23
5035: PPUSH
5036: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5040: LD_INT 1
5042: PPUSH
5043: LD_EXP 57
5047: PPUSH
5048: CALL_OW 471
// end ;
5052: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5053: LD_INT 1
5055: PPUSH
5056: LD_EXP 50
5060: PPUSH
5061: CALL_OW 292
5065: PUSH
5066: LD_EXP 45
5070: PPUSH
5071: CALL_OW 301
5075: AND
5076: IFFALSE 5095
5078: GO 5080
5080: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5081: LD_EXP 46
5085: PPUSH
5086: LD_EXP 50
5090: PPUSH
5091: CALL_OW 115
5095: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5096: LD_INT 3
5098: PPUSH
5099: LD_INT 23
5101: PPUSH
5102: CALL_OW 292
5106: IFFALSE 5123
5108: GO 5110
5110: DISABLE
// begin SayNoName ( Johanna , D7-FSol1-1 ) ;
5111: LD_EXP 46
5115: PPUSH
5116: LD_STRING D7-FSol1-1
5118: PPUSH
5119: CALL_OW 90
// end ;
5123: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5124: LD_EXP 50
5128: PPUSH
5129: CALL_OW 303
5133: IFFALSE 5665
5135: GO 5137
5137: DISABLE
5138: LD_INT 0
5140: PPUSH
5141: PPUSH
5142: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: LD_INT 22
5150: PUSH
5151: LD_INT 6
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 50
5170: PUSH
5171: EMPTY
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: PPUSH
5179: CALL_OW 69
5183: PUSH
5184: LD_EXP 54
5188: DIFF
5189: ST_TO_ADDR
// DialogueOn ;
5190: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5194: LD_EXP 54
5198: PPUSH
5199: LD_STRING D7a-Bel-1
5201: PPUSH
5202: CALL_OW 88
// DialogueOff ;
5206: CALL_OW 7
// for i := 1 to ruSolds do
5210: LD_ADDR_VAR 0 1
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_VAR 0 3
5224: PUSH
5225: FOR_TO
5226: IFFALSE 5284
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5228: LD_VAR 0 3
5232: PUSH
5233: LD_VAR 0 1
5237: ARRAY
5238: PPUSH
5239: LD_INT 87
5241: PUSH
5242: LD_VAR 0 1
5246: PLUS
5247: PPUSH
5248: LD_INT 63
5250: PUSH
5251: LD_VAR 0 1
5255: PLUS
5256: PPUSH
5257: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5261: LD_VAR 0 3
5265: PUSH
5266: LD_VAR 0 1
5270: ARRAY
5271: PPUSH
5272: LD_INT 89
5274: PPUSH
5275: LD_INT 67
5277: PPUSH
5278: CALL_OW 178
// end ;
5282: GO 5225
5284: POP
5285: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5286: LD_EXP 54
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5301: LD_EXP 54
5305: PPUSH
5306: LD_INT 88
5308: PPUSH
5309: LD_INT 66
5311: PPUSH
5312: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5316: LD_EXP 51
5320: PPUSH
5321: LD_STRING D7a-RSol1-1
5323: PPUSH
5324: CALL_OW 88
// SayNoName ( Johanna , D7a-FSol1-1 ) ;
5328: LD_EXP 46
5332: PPUSH
5333: LD_STRING D7a-FSol1-1
5335: PPUSH
5336: CALL_OW 90
// wait ( 0 0$12 ) ;
5340: LD_INT 420
5342: PPUSH
5343: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5347: LD_EXP 54
5351: PPUSH
5352: LD_STRING D7b-Bel-1
5354: PPUSH
5355: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5359: LD_EXP 52
5363: PPUSH
5364: LD_STRING D7b-FSol1-1
5366: PPUSH
5367: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-2
5378: PPUSH
5379: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5383: LD_EXP 51
5387: PPUSH
5388: LD_STRING D7b-RSol1-2
5390: PPUSH
5391: CALL_OW 88
// for unit in ruSolds do
5395: LD_ADDR_VAR 0 2
5399: PUSH
5400: LD_VAR 0 3
5404: PUSH
5405: FOR_IN
5406: IFFALSE 5639
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5408: LD_EXP 49
5412: PPUSH
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 296
5422: PUSH
5423: LD_INT 7
5425: LESS
5426: IFFALSE 5637
// begin InGameOn ;
5428: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5432: LD_EXP 54
5436: PUSH
5437: LD_EXP 51
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5450: LD_EXP 49
5454: PPUSH
5455: LD_INT 88
5457: PPUSH
5458: LD_INT 66
5460: PPUSH
5461: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5465: LD_EXP 54
5469: PPUSH
5470: LD_EXP 49
5474: PPUSH
5475: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5479: LD_EXP 49
5483: PPUSH
5484: LD_INT 90
5486: PPUSH
5487: LD_INT 66
5489: PPUSH
5490: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5494: LD_EXP 49
5498: PPUSH
5499: LD_STRING D7b-Bur-3
5501: PPUSH
5502: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5506: LD_EXP 54
5510: PPUSH
5511: LD_STRING D7b-Bel-4
5513: PPUSH
5514: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-4
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-5
5537: PPUSH
5538: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5542: LD_EXP 52
5546: PPUSH
5547: LD_STRING D7b-FSol1-5
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-6
5561: PPUSH
5562: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5566: LD_EXP 49
5570: PPUSH
5571: LD_STRING D7b-Bur-6
5573: PPUSH
5574: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5578: LD_EXP 51
5582: PPUSH
5583: LD_STRING D7b-RSol1-6
5585: PPUSH
5586: CALL_OW 88
// InGameOff ;
5590: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_INT 3
5601: PPUSH
5602: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5606: LD_EXP 54
5610: PPUSH
5611: LD_INT 3
5613: PPUSH
5614: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5618: LD_STRING M3
5620: PPUSH
5621: CALL_OW 337
// secondAttack = true ;
5625: LD_ADDR_EXP 17
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// exit ;
5633: POP
5634: POP
5635: GO 5665
// end ;
5637: GO 5405
5639: POP
5640: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5641: LD_EXP 54
5645: PPUSH
5646: LD_STRING D7b-Bel-3
5648: PPUSH
5649: CALL_OW 88
// InGameOff ;
5653: CALL_OW 9
// belkovWaitForGorky = true ;
5657: LD_ADDR_EXP 16
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// end ;
5665: PPOPN 3
5667: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5668: LD_EXP 16
5672: PUSH
5673: LD_EXP 18
5677: NOT
5678: AND
5679: IFFALSE 5989
5681: GO 5683
5683: DISABLE
5684: LD_INT 0
5686: PPUSH
5687: PPUSH
// begin enable ;
5688: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: LD_INT 22
5696: PUSH
5697: LD_INT 6
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 21
5706: PUSH
5707: LD_INT 1
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PPUSH
5718: CALL_OW 69
5722: ST_TO_ADDR
// for unit in ruSolds do
5723: LD_ADDR_VAR 0 1
5727: PUSH
5728: LD_VAR 0 2
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5987
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5736: LD_EXP 49
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 296
5750: PUSH
5751: LD_INT 7
5753: LESS
5754: IFFALSE 5985
// begin belkovWaitForGorky = false ;
5756: LD_ADDR_EXP 16
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// InGameOn ;
5764: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5768: LD_EXP 54
5772: PUSH
5773: LD_EXP 51
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PPUSH
5782: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5786: LD_EXP 49
5790: PPUSH
5791: LD_INT 88
5793: PPUSH
5794: LD_INT 66
5796: PPUSH
5797: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5801: LD_EXP 54
5805: PPUSH
5806: LD_EXP 49
5810: PPUSH
5811: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5815: LD_EXP 49
5819: PPUSH
5820: LD_INT 90
5822: PPUSH
5823: LD_INT 66
5825: PPUSH
5826: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5830: LD_EXP 54
5834: PPUSH
5835: LD_STRING D7b-Bel-3a
5837: PPUSH
5838: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5842: LD_EXP 49
5846: PPUSH
5847: LD_STRING D7b-Bur-3
5849: PPUSH
5850: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-4
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-4
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-5
5885: PPUSH
5886: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5890: LD_EXP 52
5894: PPUSH
5895: LD_STRING D7b-FSol1-5
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-6
5909: PPUSH
5910: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5914: LD_EXP 49
5918: PPUSH
5919: LD_STRING D7b-Bur-6
5921: PPUSH
5922: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5926: LD_EXP 51
5930: PPUSH
5931: LD_STRING D7a-RSol1-6
5933: PPUSH
5934: CALL_OW 88
// InGameOff ;
5938: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5942: LD_VAR 0 2
5946: PPUSH
5947: LD_INT 3
5949: PPUSH
5950: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5954: LD_EXP 54
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5966: LD_STRING M3
5968: PPUSH
5969: CALL_OW 337
// secondAttack = true ;
5973: LD_ADDR_EXP 17
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// exit ;
5981: POP
5982: POP
5983: GO 5989
// end ;
5985: GO 5733
5987: POP
5988: POP
// end ;
5989: PPOPN 2
5991: END
// export function Dial_SecondAttack ; var units , i ; begin
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
5996: PPUSH
// SayEX ( Johanna , D8-FSol1-1 , true , false , false , false ) ;
5997: LD_EXP 46
6001: PPUSH
6002: LD_STRING D8-FSol1-1
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: CALL_OW 587
// SayEX ( Gladstone , D8-Glad-1 , false , false , false , false ) ;
6021: LD_EXP 47
6025: PPUSH
6026: LD_STRING D8-Glad-1
6028: PPUSH
6029: LD_INT 0
6031: PPUSH
6032: LD_INT 0
6034: PPUSH
6035: LD_INT 0
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 587
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6408
6381: GO 6383
6383: DISABLE
// SayEX ( Johanna , D8-FSol1-2 , true , false , false , false ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: LD_INT 0
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 587
6408: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6409: LD_INT 23
6411: PPUSH
6412: CALL_OW 303
6416: PUSH
6417: LD_INT 22
6419: PPUSH
6420: CALL_OW 302
6424: AND
6425: PUSH
6426: LD_EXP 24
6430: NOT
6431: AND
6432: IFFALSE 6502
6434: GO 6436
6436: DISABLE
// begin amRetreat = true ;
6437: LD_ADDR_EXP 24
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// SayNoName ( Johanna , D8-FSol1-2a ) ;
6445: LD_EXP 46
6449: PPUSH
6450: LD_STRING D8-FSol1-2a
6452: PPUSH
6453: CALL_OW 90
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6457: LD_EXP 47
6461: PUSH
6462: LD_EXP 46
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PPUSH
6471: LD_INT 21
6473: PPUSH
6474: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6478: LD_EXP 47
6482: PPUSH
6483: LD_STRING D8-Glad-2
6485: PPUSH
6486: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6490: LD_EXP 49
6494: PPUSH
6495: LD_STRING D8-Bur-2
6497: PPUSH
6498: CALL_OW 88
// end ;
6502: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6503: LD_INT 22
6505: PPUSH
6506: CALL_OW 303
6510: PUSH
6511: LD_INT 23
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_EXP 24
6524: NOT
6525: AND
6526: IFFALSE 6608
6528: GO 6530
6530: DISABLE
// begin amRetreat = true ;
6531: LD_ADDR_EXP 24
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6539: LD_EXP 46
6543: PPUSH
6544: LD_STRING D8-FSol1-2a
6546: PPUSH
6547: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6551: LD_EXP 47
6555: PUSH
6556: LD_EXP 46
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PPUSH
6565: LD_INT 21
6567: PPUSH
6568: CALL_OW 113
// SayEX ( Gladstone , D8-Glad-2 , true , false , false , false ) ;
6572: LD_EXP 47
6576: PPUSH
6577: LD_STRING D8-Glad-2
6579: PPUSH
6580: LD_INT 1
6582: PPUSH
6583: LD_INT 0
6585: PPUSH
6586: LD_INT 0
6588: PPUSH
6589: LD_INT 0
6591: PPUSH
6592: CALL_OW 587
// Say ( Burlak , D8-Bur-2 ) ;
6596: LD_EXP 49
6600: PPUSH
6601: LD_STRING D8-Bur-2
6603: PPUSH
6604: CALL_OW 88
// end ;
6608: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty = 3 ) and not amRetreat do
6609: LD_EXP 48
6613: PPUSH
6614: CALL_OW 301
6618: PUSH
6619: LD_OWVAR 67
6623: PUSH
6624: LD_INT 3
6626: EQUAL
6627: AND
6628: PUSH
6629: LD_EXP 24
6633: NOT
6634: AND
6635: IFFALSE 6717
6637: GO 6639
6639: DISABLE
// begin amRetreat = true ;
6640: LD_ADDR_EXP 24
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// SayEX ( Johanna , D8-FSol1-2a , true , false , false , false ) ;
6648: LD_EXP 46
6652: PPUSH
6653: LD_STRING D8-FSol1-2a
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 0
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: LD_INT 0
6667: PPUSH
6668: CALL_OW 587
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6672: LD_EXP 47
6676: PUSH
6677: LD_EXP 46
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PPUSH
6686: LD_INT 21
6688: PPUSH
6689: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6693: LD_EXP 47
6697: PPUSH
6698: LD_STRING D8-Glad-2
6700: PPUSH
6701: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6705: LD_EXP 49
6709: PPUSH
6710: LD_STRING D8-Bur-2
6712: PPUSH
6713: CALL_OW 88
// end ;
6717: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6718: LD_INT 23
6720: PPUSH
6721: CALL_OW 256
6725: PUSH
6726: LD_INT 500
6728: LESS
6729: PUSH
6730: LD_OWVAR 67
6734: PUSH
6735: LD_INT 3
6737: EQUAL
6738: AND
6739: PUSH
6740: LD_EXP 24
6744: NOT
6745: AND
6746: IFFALSE 6828
6748: GO 6750
6750: DISABLE
// begin amRetreat = true ;
6751: LD_ADDR_EXP 24
6755: PUSH
6756: LD_INT 1
6758: ST_TO_ADDR
// SayEX ( Johanna , D8-FSol1-2a , true , false , false , false ) ;
6759: LD_EXP 46
6763: PPUSH
6764: LD_STRING D8-FSol1-2a
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 0
6772: PPUSH
6773: LD_INT 0
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 587
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6783: LD_EXP 47
6787: PUSH
6788: LD_EXP 46
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: LD_INT 21
6799: PPUSH
6800: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6804: LD_EXP 47
6808: PPUSH
6809: LD_STRING D8-Glad-2
6811: PPUSH
6812: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6816: LD_EXP 49
6820: PPUSH
6821: LD_STRING D8-Bur-2
6823: PPUSH
6824: CALL_OW 88
// end ;
6828: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6829: LD_INT 22
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 21
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 50
6851: PUSH
6852: EMPTY
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: PUSH
6865: LD_INT 0
6867: GREATER
6868: IFFALSE 6996
6870: GO 6872
6872: DISABLE
6873: LD_INT 0
6875: PPUSH
// begin enable ;
6876: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6877: LD_ADDR_VAR 0 1
6881: PUSH
6882: LD_INT 21
6884: PPUSH
6885: LD_INT 22
6887: PUSH
6888: LD_INT 1
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PPUSH
6909: CALL_OW 70
6913: PUSH
6914: FOR_IN
6915: IFFALSE 6994
// begin if unit = Gladstone then
6917: LD_VAR 0 1
6921: PUSH
6922: LD_EXP 47
6926: EQUAL
6927: IFFALSE 6957
// begin gladstoneEscape = true ;
6929: LD_ADDR_EXP 19
6933: PUSH
6934: LD_INT 1
6936: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6937: LD_EXP 47
6941: PPUSH
6942: LD_EXP 33
6946: PUSH
6947: LD_STRING Gladstone
6949: STR
6950: PPUSH
6951: CALL_OW 38
// end else
6955: GO 6983
// begin JohannaEscape = true ;
6957: LD_ADDR_EXP 20
6961: PUSH
6962: LD_INT 1
6964: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6965: LD_EXP 46
6969: PPUSH
6970: LD_EXP 33
6974: PUSH
6975: LD_STRING Johanna
6977: STR
6978: PPUSH
6979: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 64
// end ;
6992: GO 6914
6994: POP
6995: POP
// end ;
6996: PPOPN 1
6998: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6999: LD_EXP 47
7003: PPUSH
7004: CALL_OW 301
7008: PUSH
7009: LD_EXP 46
7013: PPUSH
7014: CALL_OW 301
7018: AND
7019: IFFALSE 7036
7021: GO 7023
7023: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
7024: LD_EXP 49
7028: PPUSH
7029: LD_STRING D9-Bur-1
7031: PPUSH
7032: CALL_OW 88
7036: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
7037: LD_EXP 46
7041: PPUSH
7042: CALL_OW 301
7046: PUSH
7047: LD_EXP 19
7051: AND
7052: PUSH
7053: LD_EXP 20
7057: NOT
7058: AND
7059: IFFALSE 7076
7061: GO 7063
7063: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7064: LD_EXP 49
7068: PPUSH
7069: LD_STRING D9-Bur-1a
7071: PPUSH
7072: CALL_OW 88
7076: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7077: LD_EXP 47
7081: PPUSH
7082: CALL_OW 301
7086: PUSH
7087: LD_EXP 19
7091: NOT
7092: AND
7093: PUSH
7094: LD_EXP 20
7098: AND
7099: IFFALSE 7116
7101: GO 7103
7103: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7104: LD_EXP 49
7108: PPUSH
7109: LD_STRING D9-Bur-1b
7111: PPUSH
7112: CALL_OW 88
7116: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7117: LD_EXP 19
7121: PUSH
7122: LD_EXP 20
7126: AND
7127: IFFALSE 7144
7129: GO 7131
7131: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7132: LD_EXP 49
7136: PPUSH
7137: LD_STRING D9-Bur-1c
7139: PPUSH
7140: CALL_OW 88
7144: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7145: LD_INT 22
7147: PUSH
7148: LD_INT 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: LD_INT 50
7167: PUSH
7168: EMPTY
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: PPUSH
7176: CALL_OW 69
7180: PUSH
7181: LD_INT 0
7183: EQUAL
7184: IFFALSE 7432
7186: GO 7188
7188: DISABLE
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7193: LD_ADDR_VAR 0 1
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 21
7210: PUSH
7211: LD_INT 1
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 50
7220: PUSH
7221: EMPTY
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: PPUSH
7229: CALL_OW 69
7233: PUSH
7234: LD_EXP 49
7238: PUSH
7239: LD_EXP 57
7243: PUSH
7244: LD_EXP 54
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: DIFF
7254: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7255: LD_ADDR_VAR 0 2
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: LD_INT 26
7267: PUSH
7268: LD_INT 1
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 72
7279: ST_TO_ADDR
// DialogueOn ;
7280: CALL_OW 6
// if IsOK ( Belkov ) then
7284: LD_EXP 54
7288: PPUSH
7289: CALL_OW 302
7293: IFFALSE 7307
// Say ( Belkov , D10-Bel-1 ) ;
7295: LD_EXP 54
7299: PPUSH
7300: LD_STRING D10-Bel-1
7302: PPUSH
7303: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7307: LD_VAR 0 1
7311: PUSH
7312: LD_INT 0
7314: GREATER
7315: PUSH
7316: LD_VAR 0 2
7320: PUSH
7321: LD_INT 0
7323: GREATER
7324: PUSH
7325: LD_EXP 54
7329: PPUSH
7330: CALL_OW 302
7334: OR
7335: AND
7336: IFFALSE 7403
// begin Say ( Burlak , D10-Bur-1 ) ;
7338: LD_EXP 49
7342: PPUSH
7343: LD_STRING D10-Bur-1
7345: PPUSH
7346: CALL_OW 88
// if IsOK ( Belkov ) then
7350: LD_EXP 54
7354: PPUSH
7355: CALL_OW 302
7359: IFFALSE 7375
// Say ( Belkov , D10-Bel-1a ) else
7361: LD_EXP 54
7365: PPUSH
7366: LD_STRING D10-Bel-1a
7368: PPUSH
7369: CALL_OW 88
7373: GO 7391
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7375: LD_VAR 0 2
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: LD_STRING D10-RSol1-1
7386: PPUSH
7387: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7391: LD_EXP 49
7395: PPUSH
7396: LD_STRING D10-Bur-2
7398: PPUSH
7399: CALL_OW 88
// end ; DialogueOff ;
7403: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7407: LD_STRING M4a
7409: PPUSH
7410: CALL_OW 337
// evacuationAvailable = true ;
7414: LD_ADDR_EXP 22
7418: PUSH
7419: LD_INT 1
7421: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7422: LD_INT 1
7424: PPUSH
7425: LD_INT 1
7427: PPUSH
7428: CALL_OW 424
// end ;
7432: PPOPN 2
7434: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7435: LD_EXP 22
7439: PUSH
7440: LD_EXP 25
7444: NOT
7445: AND
7446: IFFALSE 8056
7448: GO 7450
7450: DISABLE
7451: LD_INT 0
7453: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7454: LD_EXP 56
7458: PPUSH
7459: LD_INT 22
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: CALL_OW 49
// wait ( 0 0$3 ) ;
7469: LD_INT 105
7471: PPUSH
7472: CALL_OW 67
// jelenaSpawned = true ;
7476: LD_ADDR_EXP 25
7480: PUSH
7481: LD_INT 1
7483: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7484: LD_INT 22
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 50
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 69
7519: PPUSH
7520: LD_EXP 56
7524: PPUSH
7525: CALL_OW 74
7529: PPUSH
7530: LD_EXP 56
7534: PPUSH
7535: CALL_OW 296
7539: PUSH
7540: LD_INT 20
7542: LESS
7543: IFFALSE 7547
// exit ;
7545: GO 8056
// DialogueOn ;
7547: CALL_OW 6
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7551: LD_EXP 56
7555: PPUSH
7556: LD_STRING D11b-Kir-1
7558: PPUSH
7559: CALL_OW 586
// if IsOK ( Belkov ) then
7563: LD_EXP 54
7567: PPUSH
7568: CALL_OW 302
7572: IFFALSE 7600
// begin Say ( Belkov , D11b-Bel-1 ) ;
7574: LD_EXP 54
7578: PPUSH
7579: LD_STRING D11b-Bel-1
7581: PPUSH
7582: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7586: LD_EXP 54
7590: PPUSH
7591: LD_STRING D11b-Bel-1a
7593: PPUSH
7594: CALL_OW 94
// end else
7598: GO 7655
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7600: LD_ADDR_VAR 0 1
7604: PUSH
7605: LD_INT 22
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 21
7617: PUSH
7618: LD_INT 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 50
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PPUSH
7641: LD_STRING D11b-RSol1-1
7643: PPUSH
7644: LD_STRING D11b-RFSol1-1
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: CALL 8652 0 4
7654: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7655: LD_INT 24
7657: PPUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 0
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 25
7670: PUSH
7671: LD_INT 12
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 70
7686: PUSH
7687: LD_INT 0
7689: GREATER
7690: IFFALSE 7706
// SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) else
7692: LD_EXP 56
7696: PPUSH
7697: LD_STRING D11b1-Kir-1
7699: PPUSH
7700: CALL_OW 586
7704: GO 7718
// SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7706: LD_EXP 56
7710: PPUSH
7711: LD_STRING D11b2-Kir-1
7713: PPUSH
7714: CALL_OW 586
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7718: LD_EXP 6
7722: PUSH
7723: LD_INT 24
7725: PPUSH
7726: LD_INT 22
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 25
7738: PUSH
7739: LD_INT 12
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 70
7754: PUSH
7755: LD_INT 0
7757: GREATER
7758: AND
7759: IFFALSE 7894
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7761: LD_EXP 49
7765: PPUSH
7766: LD_STRING D11b1-Bur-1
7768: PPUSH
7769: CALL_OW 88
// if IsOk ( Belkov ) then
7773: LD_EXP 54
7777: PPUSH
7778: CALL_OW 302
7782: IFFALSE 7798
// Say ( Belkov , D11b2-Bel-1 ) else
7784: LD_EXP 54
7788: PPUSH
7789: LD_STRING D11b2-Bel-1
7791: PPUSH
7792: CALL_OW 88
7796: GO 7839
// begin if GetSex ( randomSold ) = sex_male then
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 258
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7827
// Say ( randomSold , D11b1-RSol1-1 ) else
7813: LD_VAR 0 1
7817: PPUSH
7818: LD_STRING D11b1-RSol1-1
7820: PPUSH
7821: CALL_OW 88
7825: GO 7839
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7827: LD_VAR 0 1
7831: PPUSH
7832: LD_STRING D11b1-RFSol1-1
7834: PPUSH
7835: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7839: LD_INT 22
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: LD_INT 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 50
7861: PUSH
7862: EMPTY
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: PPUSH
7870: CALL_OW 69
7874: PPUSH
7875: LD_STRING D11b1-RSol1-1
7877: PPUSH
7878: LD_STRING D11b1-RFSol1-1
7880: PPUSH
7881: LD_INT 0
7883: PPUSH
7884: CALL 8652 0 4
// DialogueOff ;
7888: CALL_OW 7
// exit ;
7892: GO 8056
// end ; if spotWaterfall then
7894: LD_EXP 7
7898: IFFALSE 7984
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7900: LD_EXP 49
7904: PPUSH
7905: LD_STRING D11b1-Bur-1a
7907: PPUSH
7908: CALL_OW 88
// if IsOk ( Belkov ) then
7912: LD_EXP 54
7916: PPUSH
7917: CALL_OW 302
7921: IFFALSE 7937
// Say ( Belkov , D11b2-Bel-1 ) else
7923: LD_EXP 54
7927: PPUSH
7928: LD_STRING D11b2-Bel-1
7930: PPUSH
7931: CALL_OW 88
7935: GO 7978
// begin if GetSex ( randomSold ) = sex_male then
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 258
7946: PUSH
7947: LD_INT 1
7949: EQUAL
7950: IFFALSE 7966
// Say ( randomSold , D11b1-RSol1-1 ) else
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_STRING D11b1-RSol1-1
7959: PPUSH
7960: CALL_OW 88
7964: GO 7978
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7966: LD_VAR 0 1
7970: PPUSH
7971: LD_STRING D11b1-RFSol1-1
7973: PPUSH
7974: CALL_OW 88
// end ; DialogueOff ;
7978: CALL_OW 7
// exit ;
7982: GO 8056
// end ; if IsOk ( Belkov ) then
7984: LD_EXP 54
7988: PPUSH
7989: CALL_OW 302
7993: IFFALSE 8009
// Say ( Belkov , D11b1-Bel-1 ) else
7995: LD_EXP 54
7999: PPUSH
8000: LD_STRING D11b1-Bel-1
8002: PPUSH
8003: CALL_OW 88
8007: GO 8050
// begin if GetSex ( randomSold ) = sex_male then
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 258
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8038
// Say ( randomSold , D11b1-RSol1-1 ) else
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_STRING D11b1-RSol1-1
8031: PPUSH
8032: CALL_OW 88
8036: GO 8050
// Say ( randomSold , D11b1-RFSol1-1 ) ;
8038: LD_VAR 0 1
8042: PPUSH
8043: LD_STRING D11b1-RFSol1-1
8045: PPUSH
8046: CALL_OW 88
// end ; DialogueOff ;
8050: CALL_OW 7
// exit ;
8054: GO 8056
// end ;
8056: PPOPN 1
8058: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8059: LD_INT 24
8061: PPUSH
8062: LD_INT 22
8064: PUSH
8065: LD_INT 3
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 70
8076: IFFALSE 8275
8078: GO 8080
8080: DISABLE
8081: LD_INT 0
8083: PPUSH
8084: PPUSH
// begin if not LakeApes then
8085: LD_EXP 26
8089: NOT
8090: IFFALSE 8094
// exit ;
8092: GO 8275
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8094: LD_INT 24
8096: PPUSH
8097: LD_INT 22
8099: PUSH
8100: LD_INT 3
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PPUSH
8107: CALL_OW 70
8111: PUSH
8112: LD_INT 2
8114: GREATER
8115: IFFALSE 8274
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8117: LD_EXP 26
8121: PUSH
8122: LD_INT 1
8124: ARRAY
8125: PPUSH
8126: LD_EXP 28
8130: PPUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: ARRAY
8139: PPUSH
8140: CALL_OW 74
8144: PPUSH
8145: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8149: LD_EXP 26
8153: PUSH
8154: LD_EXP 26
8158: PUSH
8159: LD_INT 1
8161: ARRAY
8162: DIFF
8163: PPUSH
8164: LD_INT 28
8166: PPUSH
8167: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8171: LD_EXP 26
8175: PUSH
8176: LD_EXP 26
8180: PUSH
8181: LD_INT 1
8183: ARRAY
8184: DIFF
8185: PPUSH
8186: LD_INT 35
8188: PPUSH
8189: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8193: LD_INT 10
8195: PPUSH
8196: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8200: LD_ADDR_VAR 0 2
8204: PUSH
8205: LD_INT 28
8207: PPUSH
8208: LD_INT 22
8210: PUSH
8211: LD_INT 0
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 70
8222: ST_TO_ADDR
// for un in saved do
8223: LD_ADDR_VAR 0 1
8227: PUSH
8228: LD_VAR 0 2
8232: PUSH
8233: FOR_IN
8234: IFFALSE 8263
// begin RemoveUnit ( un ) ;
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 64
// LakeApes := LakeApes diff un ;
8245: LD_ADDR_EXP 26
8249: PUSH
8250: LD_EXP 26
8254: PUSH
8255: LD_VAR 0 1
8259: DIFF
8260: ST_TO_ADDR
// end ;
8261: GO 8233
8263: POP
8264: POP
// until not LakeApes ;
8265: LD_EXP 26
8269: NOT
8270: IFFALSE 8193
// end else
8272: GO 8275
// enable ;
8274: ENABLE
// end ;
8275: PPOPN 2
8277: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8278: LD_INT 3
8280: PPUSH
8281: LD_EXP 56
8285: PPUSH
8286: CALL_OW 292
8290: PUSH
8291: LD_EXP 25
8295: AND
8296: IFFALSE 8532
8298: GO 8300
8300: DISABLE
8301: LD_INT 0
8303: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8304: LD_EXP 56
8308: PPUSH
8309: LD_INT 3
8311: PPUSH
8312: CALL_OW 235
// jelenaSaved = true ;
8316: LD_ADDR_EXP 21
8320: PUSH
8321: LD_INT 1
8323: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8324: LD_EXP 56
8328: PPUSH
8329: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_INT 22
8340: PUSH
8341: LD_INT 3
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 1
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 50
8360: PUSH
8361: EMPTY
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 56
8378: DIFF
8379: PPUSH
8380: LD_EXP 56
8384: PPUSH
8385: CALL_OW 74
8389: ST_TO_ADDR
// DialogueOn ;
8390: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8394: LD_EXP 56
8398: PPUSH
8399: LD_STRING D11a-Kir-1
8401: PPUSH
8402: CALL_OW 88
// if nearUnit = Belkov then
8406: LD_VAR 0 1
8410: PUSH
8411: LD_EXP 54
8415: EQUAL
8416: IFFALSE 8456
// begin Say ( Belkov , D11a-Bel-1 ) ;
8418: LD_EXP 54
8422: PPUSH
8423: LD_STRING D11a-Bel-1
8425: PPUSH
8426: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8430: LD_EXP 56
8434: PPUSH
8435: LD_STRING D11a-Kir-2
8437: PPUSH
8438: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8442: LD_EXP 54
8446: PPUSH
8447: LD_STRING D11a-Bel-2
8449: PPUSH
8450: CALL_OW 88
// end else
8454: GO 8497
// begin if GetSex ( nearUnit ) = sex_male then
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 258
8465: PUSH
8466: LD_INT 1
8468: EQUAL
8469: IFFALSE 8485
// Say ( nearUnit , D11a-RSol1-2 ) else
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_STRING D11a-RSol1-2
8478: PPUSH
8479: CALL_OW 88
8483: GO 8497
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_STRING D11a-RFSol1-2
8492: PPUSH
8493: CALL_OW 88
// end ; DialogueOff ;
8497: CALL_OW 7
// wait ( 0 0$5 ) ;
8501: LD_INT 175
8503: PPUSH
8504: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8508: LD_EXP 56
8512: PPUSH
8513: LD_STRING D11c-Kir-1
8515: PPUSH
8516: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8520: LD_EXP 49
8524: PPUSH
8525: LD_STRING D11c-Bur-1
8527: PPUSH
8528: CALL_OW 88
// end ;
8532: PPOPN 1
8534: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8535: LD_EXP 22
8539: PUSH
8540: LD_INT 1
8542: PPUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 3
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 21
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL_OW 70
8571: PUSH
8572: LD_INT 0
8574: GREATER
8575: AND
8576: IFFALSE 8588
8578: GO 8580
8580: DISABLE
// begin Query ( QExit1 ) ;
8581: LD_STRING QExit1
8583: PPUSH
8584: CALL_OW 97
// end ; end_of_file
8588: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
// if exist_mode then
8593: LD_VAR 0 2
8597: IFFALSE 8622
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8599: LD_ADDR_VAR 0 4
8603: PUSH
8604: LD_EXP 34
8608: PUSH
8609: LD_VAR 0 1
8613: STR
8614: PPUSH
8615: CALL_OW 34
8619: ST_TO_ADDR
8620: GO 8637
// unit := NewCharacter ( ident ) ;
8622: LD_ADDR_VAR 0 4
8626: PUSH
8627: LD_VAR 0 1
8631: PPUSH
8632: CALL_OW 25
8636: ST_TO_ADDR
// result := unit ;
8637: LD_ADDR_VAR 0 3
8641: PUSH
8642: LD_VAR 0 4
8646: ST_TO_ADDR
// end ;
8647: LD_VAR 0 3
8651: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8652: LD_INT 0
8654: PPUSH
8655: PPUSH
8656: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: LD_VAR 0 1
8666: PUSH
8667: LD_EXP 49
8671: PUSH
8672: LD_EXP 57
8676: PUSH
8677: LD_EXP 54
8681: PUSH
8682: LD_EXP 56
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: DIFF
8693: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8694: LD_ADDR_VAR 0 7
8698: PUSH
8699: LD_VAR 0 1
8703: PUSH
8704: LD_INT 1
8706: PPUSH
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 12
8716: ARRAY
8717: ST_TO_ADDR
// if radio then
8718: LD_VAR 0 4
8722: IFFALSE 8771
// begin if GetSex ( speaker ) = sex_male then
8724: LD_VAR 0 7
8728: PPUSH
8729: CALL_OW 258
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: IFFALSE 8755
// SayRadio ( speaker , dialogMID ) else
8739: LD_VAR 0 7
8743: PPUSH
8744: LD_VAR 0 2
8748: PPUSH
8749: CALL_OW 94
8753: GO 8769
// SayRadio ( speaker , dialogFID ) ;
8755: LD_VAR 0 7
8759: PPUSH
8760: LD_VAR 0 3
8764: PPUSH
8765: CALL_OW 94
// end else
8769: GO 8816
// begin if GetSex ( speaker ) = sex_male then
8771: LD_VAR 0 7
8775: PPUSH
8776: CALL_OW 258
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: IFFALSE 8802
// Say ( speaker , dialogMID ) else
8786: LD_VAR 0 7
8790: PPUSH
8791: LD_VAR 0 2
8795: PPUSH
8796: CALL_OW 88
8800: GO 8816
// Say ( speaker , dialogFID ) ;
8802: LD_VAR 0 7
8806: PPUSH
8807: LD_VAR 0 3
8811: PPUSH
8812: CALL_OW 88
// end ; result := speaker ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 7
8825: ST_TO_ADDR
// end ;
8826: LD_VAR 0 5
8830: RET
// export function Length ( tab ) ; var i , count ; begin
8831: LD_INT 0
8833: PPUSH
8834: PPUSH
8835: PPUSH
// for i in tab do
8836: LD_ADDR_VAR 0 3
8840: PUSH
8841: LD_VAR 0 1
8845: PUSH
8846: FOR_IN
8847: IFFALSE 8865
// count = count + 1 ;
8849: LD_ADDR_VAR 0 4
8853: PUSH
8854: LD_VAR 0 4
8858: PUSH
8859: LD_INT 1
8861: PLUS
8862: ST_TO_ADDR
8863: GO 8846
8865: POP
8866: POP
// Result := count ;
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: LD_VAR 0 4
8876: ST_TO_ADDR
// end ;
8877: LD_VAR 0 2
8881: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8882: LD_INT 0
8884: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 255
8894: PUSH
8895: LD_OWVAR 2
8899: EQUAL
8900: PUSH
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 302
8910: AND
8911: IFFALSE 8933
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8913: LD_VAR 0 1
8917: PPUSH
8918: LD_EXP 33
8922: PUSH
8923: LD_VAR 0 2
8927: STR
8928: PPUSH
8929: CALL_OW 38
// end ;
8933: LD_VAR 0 3
8937: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
8942: PPUSH
// resultCharactersToSave = [ ] ;
8943: LD_ADDR_VAR 0 5
8947: PUSH
8948: EMPTY
8949: ST_TO_ADDR
// for unit in characters do
8950: LD_ADDR_VAR 0 4
8954: PUSH
8955: LD_VAR 0 1
8959: PUSH
8960: FOR_IN
8961: IFFALSE 9009
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8963: LD_VAR 0 4
8967: PPUSH
8968: CALL_OW 255
8972: PUSH
8973: LD_OWVAR 2
8977: EQUAL
8978: PUSH
8979: LD_VAR 0 4
8983: PPUSH
8984: CALL_OW 302
8988: AND
8989: IFFALSE 9007
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8991: LD_ADDR_VAR 0 5
8995: PUSH
8996: LD_VAR 0 5
9000: PUSH
9001: LD_VAR 0 4
9005: ADD
9006: ST_TO_ADDR
9007: GO 8960
9009: POP
9010: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_EXP 33
9020: PUSH
9021: LD_VAR 0 2
9025: STR
9026: PPUSH
9027: CALL_OW 38
// end ;
9031: LD_VAR 0 3
9035: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9036: LD_INT 0
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
9046: PPUSH
9047: PPUSH
9048: PPUSH
9049: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9050: LD_VAR 0 1
9054: PPUSH
9055: CALL_OW 302
9059: NOT
9060: PUSH
9061: LD_VAR 0 4
9065: PUSH
9066: LD_INT 1
9068: EQUAL
9069: OR
9070: PUSH
9071: LD_VAR 0 2
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: CALL_OW 488
9085: NOT
9086: OR
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_VAR 0 2
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: CALL_OW 297
9107: PUSH
9108: LD_VAR 0 4
9112: GREATEREQUAL
9113: OR
9114: PUSH
9115: LD_VAR 0 5
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: LD_INT 0
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: IN
9130: NOT
9131: OR
9132: IFFALSE 9136
// exit ;
9134: GO 10693
// attempts = 0 ;
9136: LD_ADDR_VAR 0 17
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9144: LD_ADDR_VAR 0 7
9148: PUSH
9149: EMPTY
9150: ST_TO_ADDR
// list_coords = [ ] ;
9151: LD_ADDR_VAR 0 8
9155: PUSH
9156: EMPTY
9157: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9158: LD_ADDR_VAR 0 9
9162: PUSH
9163: LD_VAR 0 2
9167: PPUSH
9168: LD_VAR 0 3
9172: PPUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: CALL_OW 250
9182: PPUSH
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 251
9192: PPUSH
9193: CALL 10698 0 4
9197: ST_TO_ADDR
// if attempts = 0 then
9198: LD_VAR 0 17
9202: PUSH
9203: LD_INT 0
9205: EQUAL
9206: IFFALSE 9314
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9208: LD_ADDR_VAR 0 10
9212: PUSH
9213: LD_VAR 0 9
9217: PUSH
9218: LD_VAR 0 9
9222: PUSH
9223: LD_INT 1
9225: PLUS
9226: PUSH
9227: LD_VAR 0 9
9231: PUSH
9232: LD_INT 1
9234: MINUS
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9241: LD_VAR 0 10
9245: PUSH
9246: LD_INT 2
9248: ARRAY
9249: PUSH
9250: LD_INT 6
9252: EQUAL
9253: IFFALSE 9276
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9255: LD_ADDR_VAR 0 10
9259: PUSH
9260: LD_VAR 0 10
9264: PPUSH
9265: LD_INT 2
9267: PPUSH
9268: LD_INT 0
9270: PPUSH
9271: CALL_OW 1
9275: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 3
9283: ARRAY
9284: PUSH
9285: LD_INT 1
9287: NEG
9288: EQUAL
9289: IFFALSE 9312
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9291: LD_ADDR_VAR 0 10
9295: PUSH
9296: LD_VAR 0 10
9300: PPUSH
9301: LD_INT 3
9303: PPUSH
9304: LD_INT 5
9306: PPUSH
9307: CALL_OW 1
9311: ST_TO_ADDR
// end else
9312: GO 9351
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9314: LD_ADDR_VAR 0 10
9318: PUSH
9319: LD_INT 0
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: LD_INT 2
9327: PUSH
9328: LD_INT 3
9330: PUSH
9331: LD_INT 4
9333: PUSH
9334: LD_INT 5
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_VAR 0 9
9349: DIFF
9350: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9351: LD_ADDR_VAR 0 14
9355: PUSH
9356: DOUBLE
9357: LD_INT 1
9359: DEC
9360: ST_TO_ADDR
9361: LD_VAR 0 10
9365: PUSH
9366: LD_INT 0
9368: PLUS
9369: PUSH
9370: FOR_TO
9371: IFFALSE 9693
// case dir_list [ c ] of 0 :
9373: LD_VAR 0 10
9377: PUSH
9378: LD_VAR 0 14
9382: ARRAY
9383: PUSH
9384: LD_INT 0
9386: DOUBLE
9387: EQUAL
9388: IFTRUE 9392
9390: GO 9433
9392: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9393: LD_ADDR_VAR 0 8
9397: PUSH
9398: LD_VAR 0 8
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: LD_VAR 0 2
9410: PUSH
9411: LD_VAR 0 3
9415: PUSH
9416: LD_VAR 0 4
9420: MINUS
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 2
9430: ST_TO_ADDR
9431: GO 9691
9433: LD_INT 1
9435: DOUBLE
9436: EQUAL
9437: IFTRUE 9441
9439: GO 9482
9441: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9442: LD_ADDR_VAR 0 8
9446: PUSH
9447: LD_VAR 0 8
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: LD_VAR 0 2
9459: PUSH
9460: LD_VAR 0 4
9464: PLUS
9465: PUSH
9466: LD_VAR 0 3
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 2
9479: ST_TO_ADDR
9480: GO 9691
9482: LD_INT 2
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9537
9490: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9491: LD_ADDR_VAR 0 8
9495: PUSH
9496: LD_VAR 0 8
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: LD_VAR 0 2
9508: PUSH
9509: LD_VAR 0 4
9513: PLUS
9514: PUSH
9515: LD_VAR 0 3
9519: PUSH
9520: LD_VAR 0 4
9524: PLUS
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 2
9534: ST_TO_ADDR
9535: GO 9691
9537: LD_INT 3
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9586
9545: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9546: LD_ADDR_VAR 0 8
9550: PUSH
9551: LD_VAR 0 8
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_VAR 0 2
9563: PUSH
9564: LD_VAR 0 3
9568: PUSH
9569: LD_VAR 0 4
9573: PLUS
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PPUSH
9579: CALL_OW 2
9583: ST_TO_ADDR
9584: GO 9691
9586: LD_INT 4
9588: DOUBLE
9589: EQUAL
9590: IFTRUE 9594
9592: GO 9635
9594: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9595: LD_ADDR_VAR 0 8
9599: PUSH
9600: LD_VAR 0 8
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: LD_VAR 0 2
9612: PUSH
9613: LD_VAR 0 4
9617: MINUS
9618: PUSH
9619: LD_VAR 0 3
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 2
9632: ST_TO_ADDR
9633: GO 9691
9635: LD_INT 5
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9690
9643: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9644: LD_ADDR_VAR 0 8
9648: PUSH
9649: LD_VAR 0 8
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: LD_VAR 0 2
9661: PUSH
9662: LD_VAR 0 4
9666: MINUS
9667: PUSH
9668: LD_VAR 0 3
9672: PUSH
9673: LD_VAR 0 4
9677: MINUS
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 2
9687: ST_TO_ADDR
9688: GO 9691
9690: POP
9691: GO 9370
9693: POP
9694: POP
// if dist < 30 then
9695: LD_VAR 0 4
9699: PUSH
9700: LD_INT 30
9702: LESS
9703: IFFALSE 9715
// c = 1 else
9705: LD_ADDR_VAR 0 14
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
9713: GO 9723
// c = 2 ;
9715: LD_ADDR_VAR 0 14
9719: PUSH
9720: LD_INT 2
9722: ST_TO_ADDR
// b = 1 ;
9723: LD_ADDR_VAR 0 11
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9731: LD_VAR 0 11
9735: PUSH
9736: LD_VAR 0 4
9740: PUSH
9741: LD_INT 1
9743: MINUS
9744: LESSEQUAL
9745: IFFALSE 10173
// begin if 0 in dir_list and 1 in dir_list then
9747: LD_INT 0
9749: PUSH
9750: LD_VAR 0 10
9754: IN
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: LD_VAR 0 10
9763: IN
9764: AND
9765: IFFALSE 9817
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9767: LD_ADDR_VAR 0 8
9771: PUSH
9772: LD_VAR 0 8
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: LD_VAR 0 2
9784: PUSH
9785: LD_VAR 0 11
9789: PLUS
9790: PUSH
9791: LD_VAR 0 3
9795: PUSH
9796: LD_VAR 0 4
9800: MINUS
9801: PUSH
9802: LD_VAR 0 11
9806: PLUS
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL_OW 2
9816: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9817: LD_INT 1
9819: PUSH
9820: LD_VAR 0 10
9824: IN
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: LD_VAR 0 10
9833: IN
9834: AND
9835: IFFALSE 9881
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9837: LD_ADDR_VAR 0 8
9841: PUSH
9842: LD_VAR 0 8
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_VAR 0 2
9854: PUSH
9855: LD_VAR 0 4
9859: PLUS
9860: PUSH
9861: LD_VAR 0 3
9865: PUSH
9866: LD_VAR 0 11
9870: PLUS
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 2
9880: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9881: LD_INT 2
9883: PUSH
9884: LD_VAR 0 10
9888: IN
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: LD_VAR 0 10
9897: IN
9898: AND
9899: IFFALSE 9951
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9901: LD_ADDR_VAR 0 8
9905: PUSH
9906: LD_VAR 0 8
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: LD_VAR 0 2
9918: PUSH
9919: LD_VAR 0 4
9923: PLUS
9924: PUSH
9925: LD_VAR 0 11
9929: MINUS
9930: PUSH
9931: LD_VAR 0 3
9935: PUSH
9936: LD_VAR 0 4
9940: PLUS
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PPUSH
9946: CALL_OW 2
9950: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9951: LD_INT 3
9953: PUSH
9954: LD_VAR 0 10
9958: IN
9959: PUSH
9960: LD_INT 4
9962: PUSH
9963: LD_VAR 0 10
9967: IN
9968: AND
9969: IFFALSE 10021
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9971: LD_ADDR_VAR 0 8
9975: PUSH
9976: LD_VAR 0 8
9980: PPUSH
9981: LD_INT 1
9983: PPUSH
9984: LD_VAR 0 2
9988: PUSH
9989: LD_VAR 0 11
9993: MINUS
9994: PUSH
9995: LD_VAR 0 3
9999: PUSH
10000: LD_VAR 0 4
10004: PLUS
10005: PUSH
10006: LD_VAR 0 11
10010: MINUS
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PPUSH
10016: CALL_OW 2
10020: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10021: LD_INT 4
10023: PUSH
10024: LD_VAR 0 10
10028: IN
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: LD_VAR 0 10
10037: IN
10038: AND
10039: IFFALSE 10085
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10041: LD_ADDR_VAR 0 8
10045: PUSH
10046: LD_VAR 0 8
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_VAR 0 2
10058: PUSH
10059: LD_VAR 0 4
10063: MINUS
10064: PUSH
10065: LD_VAR 0 3
10069: PUSH
10070: LD_VAR 0 11
10074: MINUS
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 2
10084: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10085: LD_INT 5
10087: PUSH
10088: LD_VAR 0 10
10092: IN
10093: PUSH
10094: LD_INT 0
10096: PUSH
10097: LD_VAR 0 10
10101: IN
10102: AND
10103: IFFALSE 10155
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10105: LD_ADDR_VAR 0 8
10109: PUSH
10110: LD_VAR 0 8
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: LD_VAR 0 2
10122: PUSH
10123: LD_VAR 0 4
10127: MINUS
10128: PUSH
10129: LD_VAR 0 11
10133: PLUS
10134: PUSH
10135: LD_VAR 0 3
10139: PUSH
10140: LD_VAR 0 4
10144: MINUS
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PPUSH
10150: CALL_OW 2
10154: ST_TO_ADDR
// b = b + c end ;
10155: LD_ADDR_VAR 0 11
10159: PUSH
10160: LD_VAR 0 11
10164: PUSH
10165: LD_VAR 0 14
10169: PLUS
10170: ST_TO_ADDR
10171: GO 9731
// if list_coords = 0 then
10173: LD_VAR 0 8
10177: PUSH
10178: LD_INT 0
10180: EQUAL
10181: IFFALSE 10185
// exit ;
10183: GO 10693
// repeat min_dist = 5000 ;
10185: LD_ADDR_VAR 0 12
10189: PUSH
10190: LD_INT 5000
10192: ST_TO_ADDR
// for b in list_coords do
10193: LD_ADDR_VAR 0 11
10197: PUSH
10198: LD_VAR 0 8
10202: PUSH
10203: FOR_IN
10204: IFFALSE 10263
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10206: LD_ADDR_VAR 0 13
10210: PUSH
10211: LD_VAR 0 1
10215: PPUSH
10216: LD_VAR 0 11
10220: PUSH
10221: LD_INT 1
10223: ARRAY
10224: PPUSH
10225: LD_VAR 0 11
10229: PUSH
10230: LD_INT 2
10232: ARRAY
10233: PPUSH
10234: CALL_OW 297
10238: ST_TO_ADDR
// if temp_dist < min_dist then
10239: LD_VAR 0 13
10243: PUSH
10244: LD_VAR 0 12
10248: LESS
10249: IFFALSE 10261
// min_dist = temp_dist ;
10251: LD_ADDR_VAR 0 12
10255: PUSH
10256: LD_VAR 0 13
10260: ST_TO_ADDR
// end ;
10261: GO 10203
10263: POP
10264: POP
// c = 0 ;
10265: LD_ADDR_VAR 0 14
10269: PUSH
10270: LD_INT 0
10272: ST_TO_ADDR
// repeat c = c + 1 ;
10273: LD_ADDR_VAR 0 14
10277: PUSH
10278: LD_VAR 0 14
10282: PUSH
10283: LD_INT 1
10285: PLUS
10286: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10287: LD_VAR 0 1
10291: PPUSH
10292: LD_VAR 0 8
10296: PUSH
10297: LD_VAR 0 14
10301: ARRAY
10302: PUSH
10303: LD_INT 1
10305: ARRAY
10306: PPUSH
10307: LD_VAR 0 8
10311: PUSH
10312: LD_VAR 0 14
10316: ARRAY
10317: PUSH
10318: LD_INT 2
10320: ARRAY
10321: PPUSH
10322: CALL_OW 297
10326: PUSH
10327: LD_VAR 0 12
10331: EQUAL
10332: IFFALSE 10397
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10334: LD_ADDR_VAR 0 7
10338: PUSH
10339: LD_VAR 0 7
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_VAR 0 8
10351: PUSH
10352: LD_VAR 0 14
10356: ARRAY
10357: PPUSH
10358: CALL_OW 2
10362: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10363: LD_ADDR_VAR 0 8
10367: PUSH
10368: LD_VAR 0 8
10372: PPUSH
10373: LD_VAR 0 14
10377: PPUSH
10378: CALL_OW 3
10382: ST_TO_ADDR
// c = c - 1 ;
10383: LD_ADDR_VAR 0 14
10387: PUSH
10388: LD_VAR 0 14
10392: PUSH
10393: LD_INT 1
10395: MINUS
10396: ST_TO_ADDR
// end ; until c = list_coords ;
10397: LD_VAR 0 14
10401: PUSH
10402: LD_VAR 0 8
10406: EQUAL
10407: IFFALSE 10273
// c = 0 ;
10409: LD_ADDR_VAR 0 14
10413: PUSH
10414: LD_INT 0
10416: ST_TO_ADDR
// if list_nearest > 0 then
10417: LD_VAR 0 7
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10567
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10427: LD_ADDR_VAR 0 15
10431: PUSH
10432: LD_INT 1
10434: PPUSH
10435: LD_VAR 0 7
10439: PPUSH
10440: CALL_OW 12
10444: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10445: LD_ADDR_VAR 0 16
10449: PUSH
10450: LD_VAR 0 7
10454: PUSH
10455: LD_VAR 0 15
10459: ARRAY
10460: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10461: LD_VAR 0 16
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PPUSH
10470: LD_VAR 0 16
10474: PUSH
10475: LD_INT 2
10477: ARRAY
10478: PPUSH
10479: CALL_OW 488
10483: PUSH
10484: LD_INT 0
10486: GREATER
10487: PUSH
10488: LD_VAR 0 16
10492: PUSH
10493: LD_INT 1
10495: ARRAY
10496: PPUSH
10497: LD_VAR 0 16
10501: PUSH
10502: LD_INT 2
10504: ARRAY
10505: PPUSH
10506: CALL_OW 428
10510: PUSH
10511: LD_INT 0
10513: EQUAL
10514: AND
10515: IFFALSE 10527
// c = 1 else
10517: LD_ADDR_VAR 0 14
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
10525: GO 10547
// list_nearest = Delete ( list_nearest , rand_num ) ;
10527: LD_ADDR_VAR 0 7
10531: PUSH
10532: LD_VAR 0 7
10536: PPUSH
10537: LD_VAR 0 15
10541: PPUSH
10542: CALL_OW 3
10546: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10547: LD_VAR 0 14
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: PUSH
10556: LD_VAR 0 7
10560: PUSH
10561: LD_INT 0
10563: EQUAL
10564: OR
10565: IFFALSE 10427
// end ; until c = 1 or list_coords = 0 ;
10567: LD_VAR 0 14
10571: PUSH
10572: LD_INT 1
10574: EQUAL
10575: PUSH
10576: LD_VAR 0 8
10580: PUSH
10581: LD_INT 0
10583: EQUAL
10584: OR
10585: IFFALSE 10185
// attempts = attempts + 1 ;
10587: LD_ADDR_VAR 0 17
10591: PUSH
10592: LD_VAR 0 17
10596: PUSH
10597: LD_INT 1
10599: PLUS
10600: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10601: LD_VAR 0 14
10605: PUSH
10606: LD_INT 1
10608: EQUAL
10609: PUSH
10610: LD_VAR 0 17
10614: PUSH
10615: LD_INT 1
10617: GREATER
10618: OR
10619: IFFALSE 9144
// if c = 1 then
10621: LD_VAR 0 14
10625: PUSH
10626: LD_INT 1
10628: EQUAL
10629: IFFALSE 10693
// if add then
10631: LD_VAR 0 5
10635: IFFALSE 10666
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10637: LD_VAR 0 1
10641: PPUSH
10642: LD_VAR 0 16
10646: PUSH
10647: LD_INT 1
10649: ARRAY
10650: PPUSH
10651: LD_VAR 0 16
10655: PUSH
10656: LD_INT 2
10658: ARRAY
10659: PPUSH
10660: CALL_OW 171
10664: GO 10693
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10666: LD_VAR 0 1
10670: PPUSH
10671: LD_VAR 0 16
10675: PUSH
10676: LD_INT 1
10678: ARRAY
10679: PPUSH
10680: LD_VAR 0 16
10684: PUSH
10685: LD_INT 2
10687: ARRAY
10688: PPUSH
10689: CALL_OW 111
// end ;
10693: LD_VAR 0 6
10697: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10698: LD_INT 0
10700: PPUSH
10701: PPUSH
10702: PPUSH
10703: PPUSH
10704: PPUSH
10705: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_VAR 0 2
10715: PPUSH
10716: CALL_OW 488
10720: NOT
10721: PUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_VAR 0 4
10731: PPUSH
10732: CALL_OW 488
10736: NOT
10737: OR
10738: IFFALSE 10751
// begin result = - 1 ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 1
10747: NEG
10748: ST_TO_ADDR
// exit ;
10749: GO 10911
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10751: LD_ADDR_VAR 0 6
10755: PUSH
10756: LD_VAR 0 1
10760: PPUSH
10761: LD_VAR 0 2
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 298
10780: ST_TO_ADDR
// dist_2 = 99999 ;
10781: LD_ADDR_VAR 0 7
10785: PUSH
10786: LD_INT 99999
10788: ST_TO_ADDR
// for b = 0 to 5 do
10789: LD_ADDR_VAR 0 8
10793: PUSH
10794: DOUBLE
10795: LD_INT 0
10797: DEC
10798: ST_TO_ADDR
10799: LD_INT 5
10801: PUSH
10802: FOR_TO
10803: IFFALSE 10899
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10805: LD_ADDR_VAR 0 9
10809: PUSH
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_VAR 0 8
10819: PPUSH
10820: LD_VAR 0 6
10824: PPUSH
10825: CALL_OW 272
10829: PPUSH
10830: LD_VAR 0 2
10834: PPUSH
10835: LD_VAR 0 8
10839: PPUSH
10840: LD_VAR 0 6
10844: PPUSH
10845: CALL_OW 273
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_VAR 0 4
10859: PPUSH
10860: CALL_OW 298
10864: ST_TO_ADDR
// if temp_dist < dist_2 then
10865: LD_VAR 0 9
10869: PUSH
10870: LD_VAR 0 7
10874: LESS
10875: IFFALSE 10897
// begin dist_2 = temp_dist ;
10877: LD_ADDR_VAR 0 7
10881: PUSH
10882: LD_VAR 0 9
10886: ST_TO_ADDR
// dir = b ;
10887: LD_ADDR_VAR 0 10
10891: PUSH
10892: LD_VAR 0 8
10896: ST_TO_ADDR
// end ; end ;
10897: GO 10802
10899: POP
10900: POP
// result = dir ;
10901: LD_ADDR_VAR 0 5
10905: PUSH
10906: LD_VAR 0 10
10910: ST_TO_ADDR
// end ;
10911: LD_VAR 0 5
10915: RET
// export function MoveToHill ; begin
10916: LD_INT 0
10918: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10919: LD_EXP 50
10923: PPUSH
10924: LD_INT 65
10926: PPUSH
10927: LD_INT 59
10929: PPUSH
10930: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10934: LD_EXP 50
10938: PPUSH
10939: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10943: LD_EXP 51
10947: PPUSH
10948: LD_INT 65
10950: PPUSH
10951: LD_INT 58
10953: PPUSH
10954: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10958: LD_EXP 51
10962: PPUSH
10963: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10967: LD_EXP 52
10971: PPUSH
10972: LD_INT 64
10974: PPUSH
10975: LD_INT 57
10977: PPUSH
10978: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10982: LD_EXP 52
10986: PPUSH
10987: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10991: LD_EXP 53
10995: PPUSH
10996: LD_INT 64
10998: PPUSH
10999: LD_INT 56
11001: PPUSH
11002: CALL_OW 111
// AddComCrawl ( Balei ) ;
11006: LD_EXP 53
11010: PPUSH
11011: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
11015: LD_EXP 54
11019: PPUSH
11020: LD_INT 63
11022: PPUSH
11023: LD_INT 55
11025: PPUSH
11026: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11030: LD_EXP 54
11034: PPUSH
11035: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11039: LD_EXP 55
11043: PPUSH
11044: LD_INT 66
11046: PPUSH
11047: LD_INT 58
11049: PPUSH
11050: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11054: LD_EXP 55
11058: PPUSH
11059: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11063: LD_EXP 57
11067: PPUSH
11068: CALL_OW 255
11072: PUSH
11073: LD_INT 6
11075: EQUAL
11076: PUSH
11077: LD_EXP 12
11081: AND
11082: IFFALSE 11108
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11084: LD_EXP 57
11088: PPUSH
11089: LD_INT 63
11091: PPUSH
11092: LD_INT 54
11094: PPUSH
11095: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11099: LD_EXP 57
11103: PPUSH
11104: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11108: LD_EXP 50
11112: PPUSH
11113: LD_INT 65
11115: PPUSH
11116: LD_INT 59
11118: PPUSH
11119: CALL_OW 297
11123: PUSH
11124: LD_INT 7
11126: LESS
11127: IFFALSE 11153
// begin ComCrawl ( Pokryshkin ) ;
11129: LD_EXP 50
11133: PPUSH
11134: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11138: LD_EXP 50
11142: PPUSH
11143: LD_INT 65
11145: PPUSH
11146: LD_INT 59
11148: PPUSH
11149: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11153: LD_EXP 51
11157: PPUSH
11158: LD_INT 65
11160: PPUSH
11161: LD_INT 58
11163: PPUSH
11164: CALL_OW 297
11168: PUSH
11169: LD_INT 7
11171: LESS
11172: IFFALSE 11198
// begin ComCrawl ( Saseda ) ;
11174: LD_EXP 51
11178: PPUSH
11179: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11183: LD_EXP 51
11187: PPUSH
11188: LD_INT 65
11190: PPUSH
11191: LD_INT 58
11193: PPUSH
11194: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11198: LD_EXP 52
11202: PPUSH
11203: LD_INT 64
11205: PPUSH
11206: LD_INT 57
11208: PPUSH
11209: CALL_OW 297
11213: PUSH
11214: LD_INT 7
11216: LESS
11217: IFFALSE 11243
// begin ComCrawl ( Jaworska ) ;
11219: LD_EXP 52
11223: PPUSH
11224: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11228: LD_EXP 52
11232: PPUSH
11233: LD_INT 64
11235: PPUSH
11236: LD_INT 57
11238: PPUSH
11239: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11243: LD_EXP 53
11247: PPUSH
11248: LD_INT 64
11250: PPUSH
11251: LD_INT 56
11253: PPUSH
11254: CALL_OW 297
11258: PUSH
11259: LD_INT 7
11261: LESS
11262: IFFALSE 11288
// begin ComCrawl ( Balei ) ;
11264: LD_EXP 53
11268: PPUSH
11269: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11273: LD_EXP 53
11277: PPUSH
11278: LD_INT 64
11280: PPUSH
11281: LD_INT 56
11283: PPUSH
11284: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11288: LD_EXP 54
11292: PPUSH
11293: LD_INT 63
11295: PPUSH
11296: LD_INT 55
11298: PPUSH
11299: CALL_OW 297
11303: PUSH
11304: LD_INT 7
11306: LESS
11307: IFFALSE 11333
// begin ComCrawl ( Belkov ) ;
11309: LD_EXP 54
11313: PPUSH
11314: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11318: LD_EXP 54
11322: PPUSH
11323: LD_INT 63
11325: PPUSH
11326: LD_INT 55
11328: PPUSH
11329: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11333: LD_EXP 55
11337: PPUSH
11338: LD_INT 66
11340: PPUSH
11341: LD_INT 58
11343: PPUSH
11344: CALL_OW 297
11348: PUSH
11349: LD_INT 7
11351: LESS
11352: IFFALSE 11378
// begin ComCrawl ( Jaunzeme ) ;
11354: LD_EXP 55
11358: PPUSH
11359: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11363: LD_EXP 55
11367: PPUSH
11368: LD_INT 66
11370: PPUSH
11371: LD_INT 58
11373: PPUSH
11374: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11378: LD_EXP 57
11382: PPUSH
11383: LD_INT 63
11385: PPUSH
11386: LD_INT 54
11388: PPUSH
11389: CALL_OW 297
11393: PUSH
11394: LD_INT 7
11396: LESS
11397: PUSH
11398: LD_EXP 57
11402: PPUSH
11403: CALL_OW 255
11407: PUSH
11408: LD_INT 6
11410: EQUAL
11411: AND
11412: PUSH
11413: LD_EXP 12
11417: AND
11418: IFFALSE 11444
// begin ComCrawl ( Gnyevko ) ;
11420: LD_EXP 57
11424: PPUSH
11425: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11429: LD_EXP 57
11433: PPUSH
11434: LD_INT 63
11436: PPUSH
11437: LD_INT 54
11439: PPUSH
11440: CALL_OW 171
// end ; end ;
11444: LD_VAR 0 1
11448: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11449: LD_EXP 45
11453: PPUSH
11454: CALL_OW 303
11458: NOT
11459: PUSH
11460: LD_EXP 45
11464: PPUSH
11465: CALL_OW 301
11469: NOT
11470: OR
11471: PUSH
11472: LD_EXP 15
11476: AND
11477: IFFALSE 11818
11479: GO 11481
11481: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11482: LD_EXP 50
11486: PPUSH
11487: LD_INT 65
11489: PPUSH
11490: LD_INT 59
11492: PPUSH
11493: CALL_OW 297
11497: PUSH
11498: LD_INT 7
11500: LESS
11501: IFFALSE 11527
// begin ComCrawl ( Pokryshkin ) ;
11503: LD_EXP 50
11507: PPUSH
11508: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11512: LD_EXP 50
11516: PPUSH
11517: LD_INT 65
11519: PPUSH
11520: LD_INT 59
11522: PPUSH
11523: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11527: LD_EXP 51
11531: PPUSH
11532: LD_INT 65
11534: PPUSH
11535: LD_INT 58
11537: PPUSH
11538: CALL_OW 297
11542: PUSH
11543: LD_INT 7
11545: LESS
11546: IFFALSE 11572
// begin ComCrawl ( Saseda ) ;
11548: LD_EXP 51
11552: PPUSH
11553: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11557: LD_EXP 51
11561: PPUSH
11562: LD_INT 65
11564: PPUSH
11565: LD_INT 58
11567: PPUSH
11568: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11572: LD_EXP 52
11576: PPUSH
11577: LD_INT 64
11579: PPUSH
11580: LD_INT 57
11582: PPUSH
11583: CALL_OW 297
11587: PUSH
11588: LD_INT 7
11590: LESS
11591: IFFALSE 11617
// begin ComCrawl ( Jaworska ) ;
11593: LD_EXP 52
11597: PPUSH
11598: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11602: LD_EXP 52
11606: PPUSH
11607: LD_INT 64
11609: PPUSH
11610: LD_INT 57
11612: PPUSH
11613: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11617: LD_EXP 53
11621: PPUSH
11622: LD_INT 64
11624: PPUSH
11625: LD_INT 56
11627: PPUSH
11628: CALL_OW 297
11632: PUSH
11633: LD_INT 7
11635: LESS
11636: IFFALSE 11662
// begin ComCrawl ( Balei ) ;
11638: LD_EXP 53
11642: PPUSH
11643: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11647: LD_EXP 53
11651: PPUSH
11652: LD_INT 64
11654: PPUSH
11655: LD_INT 56
11657: PPUSH
11658: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11662: LD_EXP 54
11666: PPUSH
11667: LD_INT 63
11669: PPUSH
11670: LD_INT 55
11672: PPUSH
11673: CALL_OW 297
11677: PUSH
11678: LD_INT 7
11680: LESS
11681: IFFALSE 11707
// begin ComCrawl ( Belkov ) ;
11683: LD_EXP 54
11687: PPUSH
11688: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11692: LD_EXP 54
11696: PPUSH
11697: LD_INT 63
11699: PPUSH
11700: LD_INT 55
11702: PPUSH
11703: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11707: LD_EXP 55
11711: PPUSH
11712: LD_INT 66
11714: PPUSH
11715: LD_INT 58
11717: PPUSH
11718: CALL_OW 297
11722: PUSH
11723: LD_INT 7
11725: LESS
11726: IFFALSE 11752
// begin ComCrawl ( Jaunzeme ) ;
11728: LD_EXP 55
11732: PPUSH
11733: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11737: LD_EXP 55
11741: PPUSH
11742: LD_INT 66
11744: PPUSH
11745: LD_INT 58
11747: PPUSH
11748: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11752: LD_EXP 57
11756: PPUSH
11757: LD_INT 63
11759: PPUSH
11760: LD_INT 54
11762: PPUSH
11763: CALL_OW 297
11767: PUSH
11768: LD_INT 7
11770: LESS
11771: PUSH
11772: LD_EXP 57
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 6
11784: EQUAL
11785: AND
11786: PUSH
11787: LD_EXP 12
11791: AND
11792: IFFALSE 11818
// begin ComCrawl ( Gnyevko ) ;
11794: LD_EXP 57
11798: PPUSH
11799: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11803: LD_EXP 57
11807: PPUSH
11808: LD_INT 63
11810: PPUSH
11811: LD_INT 54
11813: PPUSH
11814: CALL_OW 171
// end ; end ; end_of_file
11818: END
// export function BurlakDying ; begin
11819: LD_INT 0
11821: PPUSH
// YouLost ( Burlak ) ;
11822: LD_STRING Burlak
11824: PPUSH
11825: CALL_OW 104
// end ;
11829: LD_VAR 0 1
11833: RET
// every 0 0$1 trigger kirovSolds = 0 do
11834: LD_EXP 59
11838: PUSH
11839: LD_INT 0
11841: EQUAL
11842: IFFALSE 11854
11844: GO 11846
11846: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11847: LD_STRING KirovSoldsDie
11849: PPUSH
11850: CALL_OW 104
11854: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11855: LD_EXP 22
11859: PUSH
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 22
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 71
11891: PUSH
11892: LD_INT 0
11894: EQUAL
11895: AND
11896: IFFALSE 12213
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11904: LD_EXP 56
11908: PPUSH
11909: CALL_OW 302
11913: PUSH
11914: LD_EXP 56
11918: PPUSH
11919: CALL_OW 255
11923: PUSH
11924: LD_INT 8
11926: EQUAL
11927: AND
11928: PUSH
11929: LD_EXP 12
11933: NOT
11934: OR
11935: IFFALSE 12124
// begin case Query ( QExit2 ) of 1 :
11937: LD_STRING QExit2
11939: PPUSH
11940: CALL_OW 97
11944: PUSH
11945: LD_INT 1
11947: DOUBLE
11948: EQUAL
11949: IFTRUE 11953
11951: GO 12102
11953: POP
// begin if IsOk ( Belkov ) then
11954: LD_EXP 54
11958: PPUSH
11959: CALL_OW 302
11963: IFFALSE 11979
// Say ( Belkov , D12-Bel-1 ) else
11965: LD_EXP 54
11969: PPUSH
11970: LD_STRING D12-Bel-1
11972: PPUSH
11973: CALL_OW 88
11977: GO 12039
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11979: LD_INT 22
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 50
12001: PUSH
12002: EMPTY
12003: LIST
12004: PUSH
12005: LD_INT 26
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PPUSH
12026: LD_STRING D12-RSol1-1
12028: PPUSH
12029: LD_STRING 
12031: PPUSH
12032: LD_INT 0
12034: PPUSH
12035: CALL 8652 0 4
// if not gnyevkoSaved then
12039: LD_EXP 12
12043: NOT
12044: IFFALSE 12096
// begin Say ( Burlak , D12-Bur-1 ) ;
12046: LD_EXP 49
12050: PPUSH
12051: LD_STRING D12-Bur-1
12053: PPUSH
12054: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12058: LD_EXP 54
12062: PPUSH
12063: CALL_OW 255
12067: PUSH
12068: LD_INT 3
12070: EQUAL
12071: PUSH
12072: LD_EXP 54
12076: PPUSH
12077: CALL_OW 302
12081: AND
12082: IFFALSE 12096
// Say ( Belkov , D12-Bel-2 ) ;
12084: LD_EXP 54
12088: PPUSH
12089: LD_STRING D12-Bel-2
12091: PPUSH
12092: CALL_OW 88
// end ; FinishMission ;
12096: CALL 12216 0 0
// end ; 2 :
12100: GO 12122
12102: LD_INT 2
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12121
12110: POP
// begin wait ( 0 0$5 ) ;
12111: LD_INT 175
12113: PPUSH
12114: CALL_OW 67
// enable ;
12118: ENABLE
// end ; end ;
12119: GO 12122
12121: POP
// end else
12122: GO 12213
// begin if IsOk ( Belkov ) then
12124: LD_EXP 54
12128: PPUSH
12129: CALL_OW 302
12133: IFFALSE 12149
// Say ( Belkov , D12-Bel-1 ) else
12135: LD_EXP 54
12139: PPUSH
12140: LD_STRING D12-Bel-1
12142: PPUSH
12143: CALL_OW 88
12147: GO 12209
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12149: LD_INT 22
12151: PUSH
12152: LD_INT 3
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 50
12171: PUSH
12172: EMPTY
12173: LIST
12174: PUSH
12175: LD_INT 26
12177: PUSH
12178: LD_INT 1
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 69
12195: PPUSH
12196: LD_STRING D12-RSol1-1
12198: PPUSH
12199: LD_STRING 
12201: PPUSH
12202: LD_INT 0
12204: PPUSH
12205: CALL 8652 0 4
// FinishMission ;
12209: CALL 12216 0 0
// end ; end ;
12213: PPOPN 1
12215: END
// function FinishMission ; begin
12216: LD_INT 0
12218: PPUSH
// SetRewards ;
12219: CALL 12240 0 0
// SavePlayerCharacters ;
12223: CALL 12591 0 0
// SaveGlobalVariables ;
12227: CALL 12721 0 0
// YouWin ;
12231: CALL_OW 103
// end ;
12235: LD_VAR 0 1
12239: RET
// function SetRewards ; begin
12240: LD_INT 0
12242: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12243: LD_EXP 19
12247: NOT
12248: PUSH
12249: LD_EXP 20
12253: NOT
12254: AND
12255: IFFALSE 12267
// AddMedal ( NoEscape , 1 ) ;
12257: LD_STRING NoEscape
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12267: LD_EXP 19
12271: PUSH
12272: LD_EXP 20
12276: NOT
12277: AND
12278: IFFALSE 12291
// AddMedal ( NoEscape , - 1 ) ;
12280: LD_STRING NoEscape
12282: PPUSH
12283: LD_INT 1
12285: NEG
12286: PPUSH
12287: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12291: LD_EXP 19
12295: NOT
12296: PUSH
12297: LD_EXP 20
12301: AND
12302: IFFALSE 12315
// AddMedal ( NoEscape , - 2 ) ;
12304: LD_STRING NoEscape
12306: PPUSH
12307: LD_INT 2
12309: NEG
12310: PPUSH
12311: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12315: LD_EXP 19
12319: PUSH
12320: LD_EXP 20
12324: AND
12325: IFFALSE 12338
// AddMedal ( NoEscape , - 3 ) ;
12327: LD_STRING NoEscape
12329: PPUSH
12330: LD_INT 3
12332: NEG
12333: PPUSH
12334: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12338: LD_EXP 12
12342: PUSH
12343: LD_EXP 57
12347: PPUSH
12348: CALL_OW 302
12352: AND
12353: PUSH
12354: LD_EXP 21
12358: AND
12359: PUSH
12360: LD_EXP 56
12364: PPUSH
12365: CALL_OW 302
12369: AND
12370: IFFALSE 12382
// AddMedal ( Gnyevko , 1 ) ;
12372: LD_STRING Gnyevko
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12382: LD_EXP 12
12386: NOT
12387: PUSH
12388: LD_EXP 21
12392: AND
12393: PUSH
12394: LD_EXP 56
12398: PPUSH
12399: CALL_OW 302
12403: AND
12404: IFFALSE 12417
// AddMedal ( Gnyevko , - 1 ) ;
12406: LD_STRING Gnyevko
12408: PPUSH
12409: LD_INT 1
12411: NEG
12412: PPUSH
12413: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12417: LD_EXP 12
12421: PUSH
12422: LD_EXP 21
12426: NOT
12427: PUSH
12428: LD_EXP 57
12432: PPUSH
12433: CALL_OW 302
12437: NOT
12438: OR
12439: PUSH
12440: LD_EXP 56
12444: PPUSH
12445: CALL_OW 302
12449: NOT
12450: OR
12451: AND
12452: IFFALSE 12465
// AddMedal ( Gnyevko , - 2 ) ;
12454: LD_STRING Gnyevko
12456: PPUSH
12457: LD_INT 2
12459: NEG
12460: PPUSH
12461: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12465: LD_EXP 12
12469: NOT
12470: PUSH
12471: LD_EXP 21
12475: NOT
12476: AND
12477: PUSH
12478: LD_EXP 57
12482: PPUSH
12483: CALL_OW 302
12487: NOT
12488: PUSH
12489: LD_EXP 56
12493: PPUSH
12494: CALL_OW 302
12498: NOT
12499: AND
12500: OR
12501: IFFALSE 12514
// AddMedal ( Gnyevko , - 3 ) ;
12503: LD_STRING Gnyevko
12505: PPUSH
12506: LD_INT 3
12508: NEG
12509: PPUSH
12510: CALL_OW 101
// if lostComradesCounter = 0 then
12514: LD_EXP 23
12518: PUSH
12519: LD_INT 0
12521: EQUAL
12522: IFFALSE 12536
// AddMedal ( NoLosses , 1 ) else
12524: LD_STRING NoLosses
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 101
12534: GO 12546
// AddMedal ( NoLosses , 0 ) ;
12536: LD_STRING NoLosses
12538: PPUSH
12539: LD_INT 0
12541: PPUSH
12542: CALL_OW 101
// GiveMedals ( Main ) ;
12546: LD_STRING Main
12548: PPUSH
12549: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12553: LD_INT 22
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 21
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 69
12581: PPUSH
12582: CALL_OW 43
// end ;
12586: LD_VAR 0 1
12590: RET
// function SavePlayerCharacters ; var others ; begin
12591: LD_INT 0
12593: PPUSH
12594: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12595: LD_EXP 49
12599: PPUSH
12600: LD_STRING Burlak
12602: PPUSH
12603: CALL 8882 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12607: LD_EXP 57
12611: PPUSH
12612: LD_STRING Gnyevko
12614: PPUSH
12615: CALL 8882 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12619: LD_EXP 54
12623: PPUSH
12624: LD_STRING Belkov
12626: PPUSH
12627: CALL 8882 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12631: LD_EXP 56
12635: PPUSH
12636: LD_STRING Kirilenkova
12638: PPUSH
12639: CALL 8882 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12643: LD_ADDR_VAR 0 2
12647: PUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 3
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: LD_EXP 49
12681: PUSH
12682: LD_EXP 57
12686: PUSH
12687: LD_EXP 54
12691: PUSH
12692: LD_EXP 56
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: DIFF
12703: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12704: LD_VAR 0 2
12708: PPUSH
12709: LD_STRING OtherSurvivors
12711: PPUSH
12712: CALL 8938 0 2
// end ;
12716: LD_VAR 0 1
12720: RET
// function SaveGlobalVariables ; begin
12721: LD_INT 0
12723: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12724: LD_EXP 1
12728: PPUSH
12729: LD_STRING 01_GladstoneStatus
12731: PPUSH
12732: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12736: LD_EXP 2
12740: PPUSH
12741: LD_STRING 01_JohannaStatus
12743: PPUSH
12744: CALL_OW 39
// end ; end_of_file
12748: LD_VAR 0 1
12752: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12753: LD_INT 0
12755: PPUSH
12756: PPUSH
12757: PPUSH
// uc_side = 1 ;
12758: LD_ADDR_OWVAR 20
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// hc_class := 1 ;
12766: LD_ADDR_OWVAR 28
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// hc_sex := sex_male ;
12774: LD_ADDR_OWVAR 27
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12782: LD_ADDR_OWVAR 33
12786: PUSH
12787: LD_STRING AmGalRemake
12789: ST_TO_ADDR
// hc_face_number := 1 ;
12790: LD_ADDR_OWVAR 34
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// hc_name := Charles Brown ;
12798: LD_ADDR_OWVAR 26
12802: PUSH
12803: LD_STRING Charles Brown
12805: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12806: LD_ADDR_OWVAR 29
12810: PUSH
12811: LD_INT 12
12813: PUSH
12814: LD_INT 11
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12821: LD_ADDR_OWVAR 31
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: LD_INT 0
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: ST_TO_ADDR
// Charles = CreateHuman ;
12844: LD_ADDR_EXP 45
12848: PUSH
12849: CALL_OW 44
12853: ST_TO_ADDR
// hc_class := 1 ;
12854: LD_ADDR_OWVAR 28
12858: PUSH
12859: LD_INT 1
12861: ST_TO_ADDR
// hc_sex := sex_female ;
12862: LD_ADDR_OWVAR 27
12866: PUSH
12867: LD_INT 2
12869: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12870: LD_ADDR_OWVAR 33
12874: PUSH
12875: LD_STRING AmGalRemake
12877: ST_TO_ADDR
// hc_face_number := 2 ;
12878: LD_ADDR_OWVAR 34
12882: PUSH
12883: LD_INT 2
12885: ST_TO_ADDR
// hc_name := Johanna Holland ;
12886: LD_ADDR_OWVAR 26
12890: PUSH
12891: LD_STRING Johanna Holland
12893: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12894: LD_ADDR_OWVAR 29
12898: PUSH
12899: LD_INT 12
12901: PUSH
12902: LD_INT 11
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12909: LD_ADDR_OWVAR 31
12913: PUSH
12914: LD_EXP 39
12918: PUSH
12919: LD_INT 0
12921: PPUSH
12922: LD_INT 2
12924: PPUSH
12925: CALL_OW 12
12929: PUSH
12930: LD_INT 0
12932: PPUSH
12933: LD_INT 2
12935: PPUSH
12936: CALL_OW 12
12940: PUSH
12941: LD_INT 0
12943: PPUSH
12944: LD_INT 2
12946: PPUSH
12947: CALL_OW 12
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: ST_TO_ADDR
// Johanna = CreateHuman ;
12958: LD_ADDR_EXP 46
12962: PUSH
12963: CALL_OW 44
12967: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12968: LD_EXP 46
12972: PPUSH
12973: LD_INT 19
12975: PPUSH
12976: LD_INT 0
12978: PPUSH
12979: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12983: LD_EXP 46
12987: PPUSH
12988: LD_INT 23
12990: PPUSH
12991: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12995: LD_ADDR_EXP 47
12999: PUSH
13000: LD_STRING Gladstone
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL 8589 0 2
13010: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13011: LD_EXP 47
13015: PPUSH
13016: LD_INT 22
13018: PPUSH
13019: CALL_OW 52
// amApemans = [ ] ;
13023: LD_ADDR_EXP 48
13027: PUSH
13028: EMPTY
13029: ST_TO_ADDR
// for i := 1 to amApeAmount do
13030: LD_ADDR_VAR 0 2
13034: PUSH
13035: DOUBLE
13036: LD_INT 1
13038: DEC
13039: ST_TO_ADDR
13040: LD_EXP 38
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13164
// begin hc_class := class_apeman ;
13048: LD_ADDR_OWVAR 28
13052: PUSH
13053: LD_INT 12
13055: ST_TO_ADDR
// hc_gallery :=  ;
13056: LD_ADDR_OWVAR 33
13060: PUSH
13061: LD_STRING 
13063: ST_TO_ADDR
// hc_name :=  ;
13064: LD_ADDR_OWVAR 26
13068: PUSH
13069: LD_STRING 
13071: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13072: LD_ADDR_OWVAR 31
13076: PUSH
13077: LD_EXP 39
13081: PUSH
13082: LD_INT 0
13084: PPUSH
13085: LD_INT 2
13087: PPUSH
13088: CALL_OW 12
13092: PUSH
13093: LD_INT 0
13095: PPUSH
13096: LD_INT 2
13098: PPUSH
13099: CALL_OW 12
13103: PUSH
13104: LD_INT 0
13106: PPUSH
13107: LD_INT 2
13109: PPUSH
13110: CALL_OW 12
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: ST_TO_ADDR
// ape = CreateHuman ;
13121: LD_ADDR_VAR 0 3
13125: PUSH
13126: CALL_OW 44
13130: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 29
13138: PPUSH
13139: LD_INT 0
13141: PPUSH
13142: CALL_OW 49
// amApemans = amApemans ^ ape ;
13146: LD_ADDR_EXP 48
13150: PUSH
13151: LD_EXP 48
13155: PUSH
13156: LD_VAR 0 3
13160: ADD
13161: ST_TO_ADDR
// end ;
13162: GO 13045
13164: POP
13165: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13166: LD_INT 23
13168: PPUSH
13169: LD_EXP 36
13173: PPUSH
13174: CALL_OW 234
// end ; end_of_file
13178: LD_VAR 0 1
13182: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13183: LD_INT 0
13185: PPUSH
// PrepareHero ;
13186: CALL 13211 0 0
// PreparePokryshkinTeams ;
13190: CALL 13305 0 0
// PrepareJelena ;
13194: CALL 13570 0 0
// PrepareGnyevko ;
13198: CALL 13602 0 0
// PrepareKurin ;
13202: CALL 13273 0 0
// end ;
13206: LD_VAR 0 1
13210: RET
// function PrepareHero ; begin
13211: LD_INT 0
13213: PPUSH
// uc_side = 3 ;
13214: LD_ADDR_OWVAR 20
13218: PUSH
13219: LD_INT 3
13221: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13222: LD_ADDR_EXP 49
13226: PUSH
13227: LD_STRING Burlak
13229: PPUSH
13230: LD_INT 0
13232: PPUSH
13233: CALL 8589 0 2
13237: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13238: LD_EXP 49
13242: PPUSH
13243: LD_EXP 40
13247: PUSH
13248: LD_INT 1
13250: ARRAY
13251: PPUSH
13252: LD_EXP 40
13256: PUSH
13257: LD_INT 2
13259: ARRAY
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 48
// end ;
13268: LD_VAR 0 1
13272: RET
// function PrepareKurin ; begin
13273: LD_INT 0
13275: PPUSH
// uc_side = 6 ;
13276: LD_ADDR_OWVAR 20
13280: PUSH
13281: LD_INT 6
13283: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13284: LD_ADDR_EXP 58
13288: PUSH
13289: LD_STRING Kurin
13291: PPUSH
13292: LD_INT 0
13294: PPUSH
13295: CALL 8589 0 2
13299: ST_TO_ADDR
// end ;
13300: LD_VAR 0 1
13304: RET
// function PreparePokryshkinTeams ; begin
13305: LD_INT 0
13307: PPUSH
// uc_side = 6 ;
13308: LD_ADDR_OWVAR 20
13312: PUSH
13313: LD_INT 6
13315: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13316: LD_ADDR_EXP 50
13320: PUSH
13321: LD_STRING Pokryshkin
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL 8589 0 2
13331: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13332: LD_ADDR_EXP 51
13336: PUSH
13337: LD_STRING Saseda
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL 8589 0 2
13347: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13348: LD_ADDR_EXP 52
13352: PUSH
13353: LD_STRING Jaworska
13355: PPUSH
13356: LD_INT 0
13358: PPUSH
13359: CALL 8589 0 2
13363: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13364: LD_ADDR_EXP 53
13368: PUSH
13369: LD_STRING Balei
13371: PPUSH
13372: LD_INT 0
13374: PPUSH
13375: CALL 8589 0 2
13379: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13380: LD_ADDR_EXP 54
13384: PUSH
13385: LD_STRING Belkov
13387: PPUSH
13388: LD_INT 0
13390: PPUSH
13391: CALL 8589 0 2
13395: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13396: LD_EXP 50
13400: PPUSH
13401: LD_INT 25
13403: PPUSH
13404: LD_INT 0
13406: PPUSH
13407: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13411: LD_EXP 51
13415: PPUSH
13416: LD_INT 17
13418: PPUSH
13419: LD_INT 0
13421: PPUSH
13422: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13426: LD_EXP 52
13430: PPUSH
13431: LD_INT 17
13433: PPUSH
13434: LD_INT 0
13436: PPUSH
13437: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13441: LD_EXP 53
13445: PPUSH
13446: LD_INT 17
13448: PPUSH
13449: LD_INT 0
13451: PPUSH
13452: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13456: LD_EXP 54
13460: PPUSH
13461: LD_INT 17
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13471: LD_ADDR_EXP 59
13475: PUSH
13476: LD_EXP 50
13480: PUSH
13481: LD_EXP 51
13485: PUSH
13486: LD_EXP 53
13490: PUSH
13491: LD_EXP 54
13495: PUSH
13496: LD_EXP 52
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: ST_TO_ADDR
// if Difficulty < 3 then
13508: LD_OWVAR 67
13512: PUSH
13513: LD_INT 3
13515: LESS
13516: IFFALSE 13565
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13518: LD_ADDR_EXP 55
13522: PUSH
13523: LD_STRING Jaunzeme
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL 8589 0 2
13533: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13534: LD_EXP 55
13538: PPUSH
13539: LD_INT 26
13541: PPUSH
13542: LD_INT 0
13544: PPUSH
13545: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13549: LD_ADDR_EXP 59
13553: PUSH
13554: LD_EXP 59
13558: PUSH
13559: LD_EXP 55
13563: ADD
13564: ST_TO_ADDR
// end ; end ;
13565: LD_VAR 0 1
13569: RET
// function PrepareJelena ; begin
13570: LD_INT 0
13572: PPUSH
// uc_side = 5 ;
13573: LD_ADDR_OWVAR 20
13577: PUSH
13578: LD_INT 5
13580: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13581: LD_ADDR_EXP 56
13585: PUSH
13586: LD_STRING Kirilenkova
13588: PPUSH
13589: LD_INT 0
13591: PPUSH
13592: CALL 8589 0 2
13596: ST_TO_ADDR
// end ;
13597: LD_VAR 0 1
13601: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13602: LD_INT 0
13604: PPUSH
13605: PPUSH
13606: PPUSH
13607: PPUSH
// uc_side = 5 ;
13608: LD_ADDR_OWVAR 20
13612: PUSH
13613: LD_INT 5
13615: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13616: LD_ADDR_EXP 57
13620: PUSH
13621: LD_STRING Gnyevko
13623: PPUSH
13624: LD_INT 0
13626: PPUSH
13627: CALL 8589 0 2
13631: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13632: LD_ADDR_VAR 0 4
13636: PUSH
13637: LD_EXP 41
13641: PUSH
13642: LD_INT 1
13644: PPUSH
13645: LD_EXP 41
13649: PPUSH
13650: CALL_OW 12
13654: ARRAY
13655: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13656: LD_EXP 57
13660: PPUSH
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 2
13677: ARRAY
13678: PPUSH
13679: LD_INT 0
13681: PPUSH
13682: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13686: LD_EXP 57
13690: PPUSH
13691: LD_EXP 42
13695: PPUSH
13696: CALL_OW 234
// ComHold ( Gnyevko ) ;
13700: LD_EXP 57
13704: PPUSH
13705: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13709: LD_ADDR_VAR 0 3
13713: PUSH
13714: DOUBLE
13715: LD_INT 1
13717: DEC
13718: ST_TO_ADDR
13719: LD_EXP 30
13723: PUSH
13724: LD_INT 1
13726: ARRAY
13727: PUSH
13728: LD_INT 3
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 1
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_OWVAR 67
13746: ARRAY
13747: MINUS
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13880
// begin uc_side = 0 ;
13752: LD_ADDR_OWVAR 20
13756: PUSH
13757: LD_INT 0
13759: ST_TO_ADDR
// uc_nation = nation_nature ;
13760: LD_ADDR_OWVAR 21
13764: PUSH
13765: LD_INT 0
13767: ST_TO_ADDR
// hc_class = class_apeman ;
13768: LD_ADDR_OWVAR 28
13772: PUSH
13773: LD_INT 12
13775: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13776: LD_ADDR_OWVAR 31
13780: PUSH
13781: LD_EXP 31
13785: PUSH
13786: LD_INT 1
13788: ARRAY
13789: PUSH
13790: LD_EXP 31
13794: PUSH
13795: LD_INT 2
13797: ARRAY
13798: PUSH
13799: LD_EXP 31
13803: PUSH
13804: LD_INT 3
13806: ARRAY
13807: PUSH
13808: LD_EXP 31
13812: PUSH
13813: LD_INT 4
13815: ARRAY
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13823: LD_ADDR_OWVAR 35
13827: PUSH
13828: LD_EXP 37
13832: ST_TO_ADDR
// un = CreateHuman ;
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: CALL_OW 44
13842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_EXP 57
13852: PPUSH
13853: CALL_OW 250
13857: PPUSH
13858: LD_EXP 57
13862: PPUSH
13863: CALL_OW 251
13867: PPUSH
13868: LD_INT 8
13870: PPUSH
13871: LD_INT 0
13873: PPUSH
13874: CALL_OW 50
// end ;
13878: GO 13749
13880: POP
13881: POP
// end ; end_of_file
13882: LD_VAR 0 1
13886: RET
// export function CreateNature ; var i , un ; begin
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
13891: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: DOUBLE
13898: LD_INT 1
13900: DEC
13901: ST_TO_ADDR
13902: LD_EXP 30
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: PUSH
13911: FOR_TO
13912: IFFALSE 14022
// begin uc_side = 0 ;
13914: LD_ADDR_OWVAR 20
13918: PUSH
13919: LD_INT 0
13921: ST_TO_ADDR
// uc_nation = nation_nature ;
13922: LD_ADDR_OWVAR 21
13926: PUSH
13927: LD_INT 0
13929: ST_TO_ADDR
// hc_class = class_apeman ;
13930: LD_ADDR_OWVAR 28
13934: PUSH
13935: LD_INT 12
13937: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13938: LD_ADDR_OWVAR 31
13942: PUSH
13943: LD_EXP 31
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PUSH
13952: LD_EXP 31
13956: PUSH
13957: LD_INT 2
13959: ARRAY
13960: PUSH
13961: LD_EXP 31
13965: PUSH
13966: LD_INT 3
13968: ARRAY
13969: PUSH
13970: LD_EXP 31
13974: PUSH
13975: LD_INT 4
13977: ARRAY
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13985: LD_ADDR_OWVAR 35
13989: PUSH
13990: LD_EXP 37
13994: ST_TO_ADDR
// un = CreateHuman ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: CALL_OW 44
14004: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 16
14012: PPUSH
14013: LD_INT 0
14015: PPUSH
14016: CALL_OW 49
// end ;
14020: GO 13911
14022: POP
14023: POP
// for i := 1 to animalsAmount [ 2 ] do
14024: LD_ADDR_VAR 0 2
14028: PUSH
14029: DOUBLE
14030: LD_INT 1
14032: DEC
14033: ST_TO_ADDR
14034: LD_EXP 30
14038: PUSH
14039: LD_INT 2
14041: ARRAY
14042: PUSH
14043: FOR_TO
14044: IFFALSE 14154
// begin uc_side = 0 ;
14046: LD_ADDR_OWVAR 20
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// uc_nation = nation_nature ;
14054: LD_ADDR_OWVAR 21
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// hc_class = class_phororhacos ;
14062: LD_ADDR_OWVAR 28
14066: PUSH
14067: LD_INT 18
14069: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14070: LD_ADDR_OWVAR 31
14074: PUSH
14075: LD_EXP 31
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: PUSH
14084: LD_EXP 31
14088: PUSH
14089: LD_INT 2
14091: ARRAY
14092: PUSH
14093: LD_EXP 31
14097: PUSH
14098: LD_INT 3
14100: ARRAY
14101: PUSH
14102: LD_EXP 31
14106: PUSH
14107: LD_INT 4
14109: ARRAY
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14117: LD_ADDR_OWVAR 35
14121: PUSH
14122: LD_EXP 32
14126: ST_TO_ADDR
// un = CreateHuman ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: CALL_OW 44
14136: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_INT 15
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 49
// end ;
14152: GO 14043
14154: POP
14155: POP
// for i := 1 to animalsAmount [ 3 ] do
14156: LD_ADDR_VAR 0 2
14160: PUSH
14161: DOUBLE
14162: LD_INT 1
14164: DEC
14165: ST_TO_ADDR
14166: LD_EXP 30
14170: PUSH
14171: LD_INT 3
14173: ARRAY
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14286
// begin uc_side = 0 ;
14178: LD_ADDR_OWVAR 20
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// uc_nation = nation_nature ;
14186: LD_ADDR_OWVAR 21
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// hc_class = class_tiger ;
14194: LD_ADDR_OWVAR 28
14198: PUSH
14199: LD_INT 14
14201: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14202: LD_ADDR_OWVAR 31
14206: PUSH
14207: LD_EXP 31
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PUSH
14216: LD_EXP 31
14220: PUSH
14221: LD_INT 2
14223: ARRAY
14224: PUSH
14225: LD_EXP 31
14229: PUSH
14230: LD_INT 3
14232: ARRAY
14233: PUSH
14234: LD_EXP 31
14238: PUSH
14239: LD_INT 4
14241: ARRAY
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14249: LD_ADDR_OWVAR 35
14253: PUSH
14254: LD_EXP 32
14258: ST_TO_ADDR
// un = CreateHuman ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: CALL_OW 44
14268: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: LD_INT 15
14276: PPUSH
14277: LD_INT 0
14279: PPUSH
14280: CALL_OW 49
// end ;
14284: GO 14175
14286: POP
14287: POP
// for i := 1 to animalsAmount [ 4 ] do
14288: LD_ADDR_VAR 0 2
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_EXP 30
14302: PUSH
14303: LD_INT 4
14305: ARRAY
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14418
// begin uc_side = 0 ;
14310: LD_ADDR_OWVAR 20
14314: PUSH
14315: LD_INT 0
14317: ST_TO_ADDR
// uc_nation = nation_nature ;
14318: LD_ADDR_OWVAR 21
14322: PUSH
14323: LD_INT 0
14325: ST_TO_ADDR
// hc_class = 21 ;
14326: LD_ADDR_OWVAR 28
14330: PUSH
14331: LD_INT 21
14333: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14334: LD_ADDR_OWVAR 31
14338: PUSH
14339: LD_EXP 31
14343: PUSH
14344: LD_INT 1
14346: ARRAY
14347: PUSH
14348: LD_EXP 31
14352: PUSH
14353: LD_INT 2
14355: ARRAY
14356: PUSH
14357: LD_EXP 31
14361: PUSH
14362: LD_INT 3
14364: ARRAY
14365: PUSH
14366: LD_EXP 31
14370: PUSH
14371: LD_INT 4
14373: ARRAY
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14381: LD_ADDR_OWVAR 35
14385: PUSH
14386: LD_EXP 32
14390: ST_TO_ADDR
// un = CreateHuman ;
14391: LD_ADDR_VAR 0 3
14395: PUSH
14396: CALL_OW 44
14400: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 15
14408: PPUSH
14409: LD_INT 0
14411: PPUSH
14412: CALL_OW 49
// end ;
14416: GO 14307
14418: POP
14419: POP
// end ; end_of_file
14420: LD_VAR 0 1
14424: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14425: LD_VAR 0 1
14429: PUSH
14430: LD_EXP 49
14434: EQUAL
14435: PUSH
14436: LD_EXP 56
14440: PPUSH
14441: CALL_OW 255
14445: PUSH
14446: LD_INT 3
14448: EQUAL
14449: NOT
14450: AND
14451: PUSH
14452: LD_EXP 56
14456: PPUSH
14457: CALL_OW 302
14461: NOT
14462: AND
14463: IFFALSE 14469
// BurlakDying ;
14465: CALL 11819 0 0
// if unit = Gladstone then
14469: LD_VAR 0 1
14473: PUSH
14474: LD_EXP 47
14478: EQUAL
14479: IFFALSE 14489
// gladstoneStatus = 0 ;
14481: LD_ADDR_EXP 1
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// if unit = Johanna then
14489: LD_VAR 0 1
14493: PUSH
14494: LD_EXP 46
14498: EQUAL
14499: IFFALSE 14509
// johannaStatus = 0 ;
14501: LD_ADDR_EXP 2
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// end ;
14509: PPOPN 1
14511: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
14512: LD_VAR 0 1
14516: PUSH
14517: LD_EXP 49
14521: EQUAL
14522: IFFALSE 14528
// BurlakDying ;
14524: CALL 11819 0 0
// if GetSide ( unit ) = 3 then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 3
14540: EQUAL
14541: IFFALSE 14557
// lostComradesCounter = lostComradesCounter + 1 ;
14543: LD_ADDR_EXP 23
14547: PUSH
14548: LD_EXP 23
14552: PUSH
14553: LD_INT 1
14555: PLUS
14556: ST_TO_ADDR
// if unit in kirovSolds then
14557: LD_VAR 0 1
14561: PUSH
14562: LD_EXP 59
14566: IN
14567: IFFALSE 14585
// kirovSolds = kirovSolds diff unit ;
14569: LD_ADDR_EXP 59
14573: PUSH
14574: LD_EXP 59
14578: PUSH
14579: LD_VAR 0 1
14583: DIFF
14584: ST_TO_ADDR
// end ;
14585: PPOPN 1
14587: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14588: LD_VAR 0 1
14592: PUSH
14593: LD_INT 3
14595: EQUAL
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 1
14604: EQUAL
14605: AND
14606: PUSH
14607: LD_VAR 0 1
14611: PUSH
14612: LD_INT 1
14614: EQUAL
14615: PUSH
14616: LD_VAR 0 2
14620: PUSH
14621: LD_INT 3
14623: EQUAL
14624: AND
14625: PUSH
14626: LD_EXP 17
14630: PUSH
14631: LD_INT 1
14633: EQUAL
14634: AND
14635: OR
14636: IFFALSE 14642
// Dial_SecondAttack ;
14638: CALL 5992 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14642: LD_VAR 0 1
14646: PUSH
14647: LD_INT 3
14649: EQUAL
14650: PUSH
14651: LD_VAR 0 2
14655: PUSH
14656: LD_INT 6
14658: EQUAL
14659: AND
14660: PUSH
14661: LD_EXP 18
14665: NOT
14666: AND
14667: IFFALSE 14673
// Dialogue_AttackComrade ;
14669: CALL 4033 0 0
// end ; end_of_file
14673: PPOPN 2
14675: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14676: LD_EXP 56
14680: PPUSH
14681: CALL_OW 255
14685: PUSH
14686: LD_INT 3
14688: EQUAL
14689: PUSH
14690: LD_EXP 29
14694: PUSH
14695: LD_INT 525
14697: LESS
14698: AND
14699: IFFALSE 14711
14701: GO 14703
14703: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14704: LD_STRING ACH_YELENA
14706: PPUSH
14707: CALL_OW 543
14711: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14712: LD_INT 23
14714: PUSH
14715: LD_INT 0
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 14
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 25
14737: PUSH
14738: LD_INT 18
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 25
14747: PUSH
14748: LD_INT 12
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: NOT
14770: IFFALSE 14782
14772: GO 14774
14774: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14775: LD_STRING ACH_NATURE
14777: PPUSH
14778: CALL_OW 543
14782: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14783: LD_INT 0
14785: PPUSH
// if p2 = 100 then
14786: LD_VAR 0 2
14790: PUSH
14791: LD_INT 100
14793: EQUAL
14794: IFFALSE 15797
// begin if not StreamModeActive then
14796: LD_EXP 60
14800: NOT
14801: IFFALSE 14811
// StreamModeActive := true ;
14803: LD_ADDR_EXP 60
14807: PUSH
14808: LD_INT 1
14810: ST_TO_ADDR
// if p3 = 0 then
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 0
14818: EQUAL
14819: IFFALSE 14825
// InitStreamMode ;
14821: CALL 15957 0 0
// if p3 = 1 then
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 1
14832: EQUAL
14833: IFFALSE 14843
// sRocket := true ;
14835: LD_ADDR_EXP 65
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// if p3 = 2 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 2
14850: EQUAL
14851: IFFALSE 14861
// sSpeed := true ;
14853: LD_ADDR_EXP 64
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// if p3 = 3 then
14861: LD_VAR 0 3
14865: PUSH
14866: LD_INT 3
14868: EQUAL
14869: IFFALSE 14879
// sEngine := true ;
14871: LD_ADDR_EXP 66
14875: PUSH
14876: LD_INT 1
14878: ST_TO_ADDR
// if p3 = 4 then
14879: LD_VAR 0 3
14883: PUSH
14884: LD_INT 4
14886: EQUAL
14887: IFFALSE 14897
// sSpec := true ;
14889: LD_ADDR_EXP 63
14893: PUSH
14894: LD_INT 1
14896: ST_TO_ADDR
// if p3 = 5 then
14897: LD_VAR 0 3
14901: PUSH
14902: LD_INT 5
14904: EQUAL
14905: IFFALSE 14915
// sLevel := true ;
14907: LD_ADDR_EXP 67
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// if p3 = 6 then
14915: LD_VAR 0 3
14919: PUSH
14920: LD_INT 6
14922: EQUAL
14923: IFFALSE 14933
// sArmoury := true ;
14925: LD_ADDR_EXP 68
14929: PUSH
14930: LD_INT 1
14932: ST_TO_ADDR
// if p3 = 7 then
14933: LD_VAR 0 3
14937: PUSH
14938: LD_INT 7
14940: EQUAL
14941: IFFALSE 14951
// sRadar := true ;
14943: LD_ADDR_EXP 69
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// if p3 = 8 then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 8
14958: EQUAL
14959: IFFALSE 14969
// sBunker := true ;
14961: LD_ADDR_EXP 70
14965: PUSH
14966: LD_INT 1
14968: ST_TO_ADDR
// if p3 = 9 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 9
14976: EQUAL
14977: IFFALSE 14987
// sHack := true ;
14979: LD_ADDR_EXP 71
14983: PUSH
14984: LD_INT 1
14986: ST_TO_ADDR
// if p3 = 10 then
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 10
14994: EQUAL
14995: IFFALSE 15005
// sFire := true ;
14997: LD_ADDR_EXP 72
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// if p3 = 11 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 11
15012: EQUAL
15013: IFFALSE 15023
// sRefresh := true ;
15015: LD_ADDR_EXP 73
15019: PUSH
15020: LD_INT 1
15022: ST_TO_ADDR
// if p3 = 12 then
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 12
15030: EQUAL
15031: IFFALSE 15041
// sExp := true ;
15033: LD_ADDR_EXP 74
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// if p3 = 13 then
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 13
15048: EQUAL
15049: IFFALSE 15059
// sDepot := true ;
15051: LD_ADDR_EXP 75
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if p3 = 14 then
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 14
15066: EQUAL
15067: IFFALSE 15077
// sFlag := true ;
15069: LD_ADDR_EXP 76
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// if p3 = 15 then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 15
15084: EQUAL
15085: IFFALSE 15095
// sKamikadze := true ;
15087: LD_ADDR_EXP 84
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 16 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 16
15102: EQUAL
15103: IFFALSE 15113
// sTroll := true ;
15105: LD_ADDR_EXP 85
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// if p3 = 17 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 17
15120: EQUAL
15121: IFFALSE 15131
// sSlow := true ;
15123: LD_ADDR_EXP 86
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 18 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 18
15138: EQUAL
15139: IFFALSE 15149
// sLack := true ;
15141: LD_ADDR_EXP 87
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// if p3 = 19 then
15149: LD_VAR 0 3
15153: PUSH
15154: LD_INT 19
15156: EQUAL
15157: IFFALSE 15167
// sTank := true ;
15159: LD_ADDR_EXP 89
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// if p3 = 20 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_INT 20
15174: EQUAL
15175: IFFALSE 15185
// sRemote := true ;
15177: LD_ADDR_EXP 90
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 21 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 21
15192: EQUAL
15193: IFFALSE 15203
// sPowell := true ;
15195: LD_ADDR_EXP 91
15199: PUSH
15200: LD_INT 1
15202: ST_TO_ADDR
// if p3 = 22 then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_INT 22
15210: EQUAL
15211: IFFALSE 15221
// sTeleport := true ;
15213: LD_ADDR_EXP 94
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// if p3 = 23 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 23
15228: EQUAL
15229: IFFALSE 15239
// sOilTower := true ;
15231: LD_ADDR_EXP 96
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 24 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 24
15246: EQUAL
15247: IFFALSE 15257
// sShovel := true ;
15249: LD_ADDR_EXP 97
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 25 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 25
15264: EQUAL
15265: IFFALSE 15275
// sSheik := true ;
15267: LD_ADDR_EXP 98
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 26 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 26
15282: EQUAL
15283: IFFALSE 15293
// sEarthquake := true ;
15285: LD_ADDR_EXP 100
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 27 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 27
15300: EQUAL
15301: IFFALSE 15311
// sAI := true ;
15303: LD_ADDR_EXP 101
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 28 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 28
15318: EQUAL
15319: IFFALSE 15329
// sCargo := true ;
15321: LD_ADDR_EXP 104
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 29 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 29
15336: EQUAL
15337: IFFALSE 15347
// sDLaser := true ;
15339: LD_ADDR_EXP 105
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 30 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 30
15354: EQUAL
15355: IFFALSE 15365
// sExchange := true ;
15357: LD_ADDR_EXP 106
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 31 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 31
15372: EQUAL
15373: IFFALSE 15383
// sFac := true ;
15375: LD_ADDR_EXP 107
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 32 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 32
15390: EQUAL
15391: IFFALSE 15401
// sPower := true ;
15393: LD_ADDR_EXP 108
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 33 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 33
15408: EQUAL
15409: IFFALSE 15419
// sRandom := true ;
15411: LD_ADDR_EXP 109
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 34 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 34
15426: EQUAL
15427: IFFALSE 15437
// sShield := true ;
15429: LD_ADDR_EXP 110
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 35 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 35
15444: EQUAL
15445: IFFALSE 15455
// sTime := true ;
15447: LD_ADDR_EXP 111
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 36 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 36
15462: EQUAL
15463: IFFALSE 15473
// sTools := true ;
15465: LD_ADDR_EXP 112
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 101 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 101
15480: EQUAL
15481: IFFALSE 15491
// sSold := true ;
15483: LD_ADDR_EXP 77
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 102 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 102
15498: EQUAL
15499: IFFALSE 15509
// sDiff := true ;
15501: LD_ADDR_EXP 78
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 103 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 103
15516: EQUAL
15517: IFFALSE 15527
// sFog := true ;
15519: LD_ADDR_EXP 81
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 104 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 104
15534: EQUAL
15535: IFFALSE 15545
// sReset := true ;
15537: LD_ADDR_EXP 82
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 105 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 105
15552: EQUAL
15553: IFFALSE 15563
// sSun := true ;
15555: LD_ADDR_EXP 83
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if p3 = 106 then
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 106
15570: EQUAL
15571: IFFALSE 15581
// sTiger := true ;
15573: LD_ADDR_EXP 79
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if p3 = 107 then
15581: LD_VAR 0 3
15585: PUSH
15586: LD_INT 107
15588: EQUAL
15589: IFFALSE 15599
// sBomb := true ;
15591: LD_ADDR_EXP 80
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// if p3 = 108 then
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 108
15606: EQUAL
15607: IFFALSE 15617
// sWound := true ;
15609: LD_ADDR_EXP 88
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// if p3 = 109 then
15617: LD_VAR 0 3
15621: PUSH
15622: LD_INT 109
15624: EQUAL
15625: IFFALSE 15635
// sBetray := true ;
15627: LD_ADDR_EXP 92
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// if p3 = 110 then
15635: LD_VAR 0 3
15639: PUSH
15640: LD_INT 110
15642: EQUAL
15643: IFFALSE 15653
// sContamin := true ;
15645: LD_ADDR_EXP 93
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// if p3 = 111 then
15653: LD_VAR 0 3
15657: PUSH
15658: LD_INT 111
15660: EQUAL
15661: IFFALSE 15671
// sOil := true ;
15663: LD_ADDR_EXP 95
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// if p3 = 112 then
15671: LD_VAR 0 3
15675: PUSH
15676: LD_INT 112
15678: EQUAL
15679: IFFALSE 15689
// sStu := true ;
15681: LD_ADDR_EXP 99
15685: PUSH
15686: LD_INT 1
15688: ST_TO_ADDR
// if p3 = 113 then
15689: LD_VAR 0 3
15693: PUSH
15694: LD_INT 113
15696: EQUAL
15697: IFFALSE 15707
// sBazooka := true ;
15699: LD_ADDR_EXP 102
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
// if p3 = 114 then
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 114
15714: EQUAL
15715: IFFALSE 15725
// sMortar := true ;
15717: LD_ADDR_EXP 103
15721: PUSH
15722: LD_INT 1
15724: ST_TO_ADDR
// if p3 = 115 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 115
15732: EQUAL
15733: IFFALSE 15743
// sRanger := true ;
15735: LD_ADDR_EXP 113
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 116 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 116
15750: EQUAL
15751: IFFALSE 15761
// sComputer := true ;
15753: LD_ADDR_EXP 114
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 117 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 117
15768: EQUAL
15769: IFFALSE 15779
// s30 := true ;
15771: LD_ADDR_EXP 115
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 118 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 118
15786: EQUAL
15787: IFFALSE 15797
// s60 := true ;
15789: LD_ADDR_EXP 116
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// end ; if p2 = 101 then
15797: LD_VAR 0 2
15801: PUSH
15802: LD_INT 101
15804: EQUAL
15805: IFFALSE 15933
// begin case p3 of 1 :
15807: LD_VAR 0 3
15811: PUSH
15812: LD_INT 1
15814: DOUBLE
15815: EQUAL
15816: IFTRUE 15820
15818: GO 15827
15820: POP
// hHackUnlimitedResources ; 2 :
15821: CALL 27529 0 0
15825: GO 15933
15827: LD_INT 2
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 15842
15835: POP
// hHackSetLevel10 ; 3 :
15836: CALL 27662 0 0
15840: GO 15933
15842: LD_INT 3
15844: DOUBLE
15845: EQUAL
15846: IFTRUE 15850
15848: GO 15857
15850: POP
// hHackSetLevel10YourUnits ; 4 :
15851: CALL 27747 0 0
15855: GO 15933
15857: LD_INT 4
15859: DOUBLE
15860: EQUAL
15861: IFTRUE 15865
15863: GO 15872
15865: POP
// hHackInvincible ; 5 :
15866: CALL 28195 0 0
15870: GO 15933
15872: LD_INT 5
15874: DOUBLE
15875: EQUAL
15876: IFTRUE 15880
15878: GO 15887
15880: POP
// hHackInvisible ; 6 :
15881: CALL 28306 0 0
15885: GO 15933
15887: LD_INT 6
15889: DOUBLE
15890: EQUAL
15891: IFTRUE 15895
15893: GO 15902
15895: POP
// hHackChangeYourSide ; 7 :
15896: CALL 28363 0 0
15900: GO 15933
15902: LD_INT 7
15904: DOUBLE
15905: EQUAL
15906: IFTRUE 15910
15908: GO 15917
15910: POP
// hHackChangeUnitSide ; 8 :
15911: CALL 28405 0 0
15915: GO 15933
15917: LD_INT 8
15919: DOUBLE
15920: EQUAL
15921: IFTRUE 15925
15923: GO 15932
15925: POP
// hHackFog ; end ;
15926: CALL 28506 0 0
15930: GO 15933
15932: POP
// end ; end ;
15933: LD_VAR 0 7
15937: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15938: GO 15940
15940: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15941: LD_STRING initStreamRollete();
15943: PPUSH
15944: CALL_OW 559
// InitStreamMode ;
15948: CALL 15957 0 0
// DefineStreamItems ( ) ;
15952: CALL 16421 0 0
// end ;
15956: END
// function InitStreamMode ; begin
15957: LD_INT 0
15959: PPUSH
// streamModeActive := false ;
15960: LD_ADDR_EXP 60
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// normalCounter := 36 ;
15968: LD_ADDR_EXP 61
15972: PUSH
15973: LD_INT 36
15975: ST_TO_ADDR
// hardcoreCounter := 16 ;
15976: LD_ADDR_EXP 62
15980: PUSH
15981: LD_INT 16
15983: ST_TO_ADDR
// sRocket := false ;
15984: LD_ADDR_EXP 65
15988: PUSH
15989: LD_INT 0
15991: ST_TO_ADDR
// sSpeed := false ;
15992: LD_ADDR_EXP 64
15996: PUSH
15997: LD_INT 0
15999: ST_TO_ADDR
// sEngine := false ;
16000: LD_ADDR_EXP 66
16004: PUSH
16005: LD_INT 0
16007: ST_TO_ADDR
// sSpec := false ;
16008: LD_ADDR_EXP 63
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// sLevel := false ;
16016: LD_ADDR_EXP 67
16020: PUSH
16021: LD_INT 0
16023: ST_TO_ADDR
// sArmoury := false ;
16024: LD_ADDR_EXP 68
16028: PUSH
16029: LD_INT 0
16031: ST_TO_ADDR
// sRadar := false ;
16032: LD_ADDR_EXP 69
16036: PUSH
16037: LD_INT 0
16039: ST_TO_ADDR
// sBunker := false ;
16040: LD_ADDR_EXP 70
16044: PUSH
16045: LD_INT 0
16047: ST_TO_ADDR
// sHack := false ;
16048: LD_ADDR_EXP 71
16052: PUSH
16053: LD_INT 0
16055: ST_TO_ADDR
// sFire := false ;
16056: LD_ADDR_EXP 72
16060: PUSH
16061: LD_INT 0
16063: ST_TO_ADDR
// sRefresh := false ;
16064: LD_ADDR_EXP 73
16068: PUSH
16069: LD_INT 0
16071: ST_TO_ADDR
// sExp := false ;
16072: LD_ADDR_EXP 74
16076: PUSH
16077: LD_INT 0
16079: ST_TO_ADDR
// sDepot := false ;
16080: LD_ADDR_EXP 75
16084: PUSH
16085: LD_INT 0
16087: ST_TO_ADDR
// sFlag := false ;
16088: LD_ADDR_EXP 76
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
// sKamikadze := false ;
16096: LD_ADDR_EXP 84
16100: PUSH
16101: LD_INT 0
16103: ST_TO_ADDR
// sTroll := false ;
16104: LD_ADDR_EXP 85
16108: PUSH
16109: LD_INT 0
16111: ST_TO_ADDR
// sSlow := false ;
16112: LD_ADDR_EXP 86
16116: PUSH
16117: LD_INT 0
16119: ST_TO_ADDR
// sLack := false ;
16120: LD_ADDR_EXP 87
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// sTank := false ;
16128: LD_ADDR_EXP 89
16132: PUSH
16133: LD_INT 0
16135: ST_TO_ADDR
// sRemote := false ;
16136: LD_ADDR_EXP 90
16140: PUSH
16141: LD_INT 0
16143: ST_TO_ADDR
// sPowell := false ;
16144: LD_ADDR_EXP 91
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// sTeleport := false ;
16152: LD_ADDR_EXP 94
16156: PUSH
16157: LD_INT 0
16159: ST_TO_ADDR
// sOilTower := false ;
16160: LD_ADDR_EXP 96
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// sShovel := false ;
16168: LD_ADDR_EXP 97
16172: PUSH
16173: LD_INT 0
16175: ST_TO_ADDR
// sSheik := false ;
16176: LD_ADDR_EXP 98
16180: PUSH
16181: LD_INT 0
16183: ST_TO_ADDR
// sEarthquake := false ;
16184: LD_ADDR_EXP 100
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// sAI := false ;
16192: LD_ADDR_EXP 101
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
// sCargo := false ;
16200: LD_ADDR_EXP 104
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// sDLaser := false ;
16208: LD_ADDR_EXP 105
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// sExchange := false ;
16216: LD_ADDR_EXP 106
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// sFac := false ;
16224: LD_ADDR_EXP 107
16228: PUSH
16229: LD_INT 0
16231: ST_TO_ADDR
// sPower := false ;
16232: LD_ADDR_EXP 108
16236: PUSH
16237: LD_INT 0
16239: ST_TO_ADDR
// sRandom := false ;
16240: LD_ADDR_EXP 109
16244: PUSH
16245: LD_INT 0
16247: ST_TO_ADDR
// sShield := false ;
16248: LD_ADDR_EXP 110
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// sTime := false ;
16256: LD_ADDR_EXP 111
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
// sTools := false ;
16264: LD_ADDR_EXP 112
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// sSold := false ;
16272: LD_ADDR_EXP 77
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// sDiff := false ;
16280: LD_ADDR_EXP 78
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// sFog := false ;
16288: LD_ADDR_EXP 81
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// sReset := false ;
16296: LD_ADDR_EXP 82
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// sSun := false ;
16304: LD_ADDR_EXP 83
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sTiger := false ;
16312: LD_ADDR_EXP 79
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sBomb := false ;
16320: LD_ADDR_EXP 80
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sWound := false ;
16328: LD_ADDR_EXP 88
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// sBetray := false ;
16336: LD_ADDR_EXP 92
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// sContamin := false ;
16344: LD_ADDR_EXP 93
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// sOil := false ;
16352: LD_ADDR_EXP 95
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// sStu := false ;
16360: LD_ADDR_EXP 99
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// sBazooka := false ;
16368: LD_ADDR_EXP 102
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// sMortar := false ;
16376: LD_ADDR_EXP 103
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// sRanger := false ;
16384: LD_ADDR_EXP 113
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// sComputer := false ;
16392: LD_ADDR_EXP 114
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// s30 := false ;
16400: LD_ADDR_EXP 115
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// s60 := false ;
16408: LD_ADDR_EXP 116
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// end ;
16416: LD_VAR 0 1
16420: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16421: LD_INT 0
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
// result := [ ] ;
16428: LD_ADDR_VAR 0 1
16432: PUSH
16433: EMPTY
16434: ST_TO_ADDR
// if campaign_id = 1 then
16435: LD_OWVAR 69
16439: PUSH
16440: LD_INT 1
16442: EQUAL
16443: IFFALSE 19609
// begin case mission_number of 1 :
16445: LD_OWVAR 70
16449: PUSH
16450: LD_INT 1
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16534
16458: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16459: LD_ADDR_VAR 0 1
16463: PUSH
16464: LD_INT 2
16466: PUSH
16467: LD_INT 4
16469: PUSH
16470: LD_INT 11
16472: PUSH
16473: LD_INT 12
16475: PUSH
16476: LD_INT 15
16478: PUSH
16479: LD_INT 16
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_INT 23
16487: PUSH
16488: LD_INT 26
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 101
16504: PUSH
16505: LD_INT 102
16507: PUSH
16508: LD_INT 106
16510: PUSH
16511: LD_INT 116
16513: PUSH
16514: LD_INT 117
16516: PUSH
16517: LD_INT 118
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: ST_TO_ADDR
16532: GO 19607
16534: LD_INT 2
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16626
16542: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16543: LD_ADDR_VAR 0 1
16547: PUSH
16548: LD_INT 2
16550: PUSH
16551: LD_INT 4
16553: PUSH
16554: LD_INT 11
16556: PUSH
16557: LD_INT 12
16559: PUSH
16560: LD_INT 15
16562: PUSH
16563: LD_INT 16
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_INT 23
16571: PUSH
16572: LD_INT 26
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 101
16588: PUSH
16589: LD_INT 102
16591: PUSH
16592: LD_INT 105
16594: PUSH
16595: LD_INT 106
16597: PUSH
16598: LD_INT 108
16600: PUSH
16601: LD_INT 116
16603: PUSH
16604: LD_INT 117
16606: PUSH
16607: LD_INT 118
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: ST_TO_ADDR
16624: GO 19607
16626: LD_INT 3
16628: DOUBLE
16629: EQUAL
16630: IFTRUE 16634
16632: GO 16722
16634: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16635: LD_ADDR_VAR 0 1
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 4
16645: PUSH
16646: LD_INT 5
16648: PUSH
16649: LD_INT 11
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 15
16657: PUSH
16658: LD_INT 16
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_INT 26
16666: PUSH
16667: LD_INT 36
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 101
16684: PUSH
16685: LD_INT 102
16687: PUSH
16688: LD_INT 105
16690: PUSH
16691: LD_INT 106
16693: PUSH
16694: LD_INT 108
16696: PUSH
16697: LD_INT 116
16699: PUSH
16700: LD_INT 117
16702: PUSH
16703: LD_INT 118
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: ST_TO_ADDR
16720: GO 19607
16722: LD_INT 4
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16826
16730: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: LD_INT 11
16750: PUSH
16751: LD_INT 12
16753: PUSH
16754: LD_INT 15
16756: PUSH
16757: LD_INT 16
16759: PUSH
16760: LD_INT 22
16762: PUSH
16763: LD_INT 23
16765: PUSH
16766: LD_INT 26
16768: PUSH
16769: LD_INT 36
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 101
16788: PUSH
16789: LD_INT 102
16791: PUSH
16792: LD_INT 105
16794: PUSH
16795: LD_INT 106
16797: PUSH
16798: LD_INT 108
16800: PUSH
16801: LD_INT 116
16803: PUSH
16804: LD_INT 117
16806: PUSH
16807: LD_INT 118
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: ST_TO_ADDR
16824: GO 19607
16826: LD_INT 5
16828: DOUBLE
16829: EQUAL
16830: IFTRUE 16834
16832: GO 16946
16834: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16835: LD_ADDR_VAR 0 1
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: LD_INT 4
16845: PUSH
16846: LD_INT 5
16848: PUSH
16849: LD_INT 6
16851: PUSH
16852: LD_INT 8
16854: PUSH
16855: LD_INT 11
16857: PUSH
16858: LD_INT 12
16860: PUSH
16861: LD_INT 15
16863: PUSH
16864: LD_INT 16
16866: PUSH
16867: LD_INT 22
16869: PUSH
16870: LD_INT 23
16872: PUSH
16873: LD_INT 25
16875: PUSH
16876: LD_INT 26
16878: PUSH
16879: LD_INT 36
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 101
16900: PUSH
16901: LD_INT 102
16903: PUSH
16904: LD_INT 105
16906: PUSH
16907: LD_INT 106
16909: PUSH
16910: LD_INT 108
16912: PUSH
16913: LD_INT 109
16915: PUSH
16916: LD_INT 112
16918: PUSH
16919: LD_INT 116
16921: PUSH
16922: LD_INT 117
16924: PUSH
16925: LD_INT 118
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: ST_TO_ADDR
16944: GO 19607
16946: LD_INT 6
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 17086
16954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: LD_INT 4
16965: PUSH
16966: LD_INT 5
16968: PUSH
16969: LD_INT 6
16971: PUSH
16972: LD_INT 8
16974: PUSH
16975: LD_INT 11
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: LD_INT 15
16983: PUSH
16984: LD_INT 16
16986: PUSH
16987: LD_INT 20
16989: PUSH
16990: LD_INT 21
16992: PUSH
16993: LD_INT 22
16995: PUSH
16996: LD_INT 23
16998: PUSH
16999: LD_INT 25
17001: PUSH
17002: LD_INT 26
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 31
17010: PUSH
17011: LD_INT 32
17013: PUSH
17014: LD_INT 36
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 101
17040: PUSH
17041: LD_INT 102
17043: PUSH
17044: LD_INT 105
17046: PUSH
17047: LD_INT 106
17049: PUSH
17050: LD_INT 108
17052: PUSH
17053: LD_INT 109
17055: PUSH
17056: LD_INT 112
17058: PUSH
17059: LD_INT 116
17061: PUSH
17062: LD_INT 117
17064: PUSH
17065: LD_INT 118
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
17084: GO 19607
17086: LD_INT 7
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17206
17094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 4
17105: PUSH
17106: LD_INT 5
17108: PUSH
17109: LD_INT 7
17111: PUSH
17112: LD_INT 11
17114: PUSH
17115: LD_INT 12
17117: PUSH
17118: LD_INT 15
17120: PUSH
17121: LD_INT 16
17123: PUSH
17124: LD_INT 20
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_INT 23
17135: PUSH
17136: LD_INT 25
17138: PUSH
17139: LD_INT 26
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 101
17160: PUSH
17161: LD_INT 102
17163: PUSH
17164: LD_INT 103
17166: PUSH
17167: LD_INT 105
17169: PUSH
17170: LD_INT 106
17172: PUSH
17173: LD_INT 108
17175: PUSH
17176: LD_INT 112
17178: PUSH
17179: LD_INT 116
17181: PUSH
17182: LD_INT 117
17184: PUSH
17185: LD_INT 118
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: ST_TO_ADDR
17204: GO 19607
17206: LD_INT 8
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17354
17214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17215: LD_ADDR_VAR 0 1
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: LD_INT 4
17225: PUSH
17226: LD_INT 5
17228: PUSH
17229: LD_INT 6
17231: PUSH
17232: LD_INT 7
17234: PUSH
17235: LD_INT 8
17237: PUSH
17238: LD_INT 11
17240: PUSH
17241: LD_INT 12
17243: PUSH
17244: LD_INT 15
17246: PUSH
17247: LD_INT 16
17249: PUSH
17250: LD_INT 20
17252: PUSH
17253: LD_INT 21
17255: PUSH
17256: LD_INT 22
17258: PUSH
17259: LD_INT 23
17261: PUSH
17262: LD_INT 25
17264: PUSH
17265: LD_INT 26
17267: PUSH
17268: LD_INT 30
17270: PUSH
17271: LD_INT 31
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: LD_INT 36
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 101
17304: PUSH
17305: LD_INT 102
17307: PUSH
17308: LD_INT 103
17310: PUSH
17311: LD_INT 105
17313: PUSH
17314: LD_INT 106
17316: PUSH
17317: LD_INT 108
17319: PUSH
17320: LD_INT 109
17322: PUSH
17323: LD_INT 112
17325: PUSH
17326: LD_INT 116
17328: PUSH
17329: LD_INT 117
17331: PUSH
17332: LD_INT 118
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: ST_TO_ADDR
17352: GO 19607
17354: LD_INT 9
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17510
17362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 4
17373: PUSH
17374: LD_INT 5
17376: PUSH
17377: LD_INT 6
17379: PUSH
17380: LD_INT 7
17382: PUSH
17383: LD_INT 8
17385: PUSH
17386: LD_INT 11
17388: PUSH
17389: LD_INT 12
17391: PUSH
17392: LD_INT 15
17394: PUSH
17395: LD_INT 16
17397: PUSH
17398: LD_INT 20
17400: PUSH
17401: LD_INT 21
17403: PUSH
17404: LD_INT 22
17406: PUSH
17407: LD_INT 23
17409: PUSH
17410: LD_INT 25
17412: PUSH
17413: LD_INT 26
17415: PUSH
17416: LD_INT 28
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_INT 31
17424: PUSH
17425: LD_INT 32
17427: PUSH
17428: LD_INT 36
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 101
17456: PUSH
17457: LD_INT 102
17459: PUSH
17460: LD_INT 103
17462: PUSH
17463: LD_INT 105
17465: PUSH
17466: LD_INT 106
17468: PUSH
17469: LD_INT 108
17471: PUSH
17472: LD_INT 109
17474: PUSH
17475: LD_INT 112
17477: PUSH
17478: LD_INT 114
17480: PUSH
17481: LD_INT 116
17483: PUSH
17484: LD_INT 117
17486: PUSH
17487: LD_INT 118
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: ST_TO_ADDR
17508: GO 19607
17510: LD_INT 10
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17518
17516: GO 17714
17518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17519: LD_ADDR_VAR 0 1
17523: PUSH
17524: LD_INT 2
17526: PUSH
17527: LD_INT 4
17529: PUSH
17530: LD_INT 5
17532: PUSH
17533: LD_INT 6
17535: PUSH
17536: LD_INT 7
17538: PUSH
17539: LD_INT 8
17541: PUSH
17542: LD_INT 9
17544: PUSH
17545: LD_INT 10
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: LD_INT 15
17562: PUSH
17563: LD_INT 16
17565: PUSH
17566: LD_INT 17
17568: PUSH
17569: LD_INT 18
17571: PUSH
17572: LD_INT 19
17574: PUSH
17575: LD_INT 20
17577: PUSH
17578: LD_INT 21
17580: PUSH
17581: LD_INT 22
17583: PUSH
17584: LD_INT 23
17586: PUSH
17587: LD_INT 24
17589: PUSH
17590: LD_INT 25
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: LD_INT 28
17598: PUSH
17599: LD_INT 30
17601: PUSH
17602: LD_INT 31
17604: PUSH
17605: LD_INT 32
17607: PUSH
17608: LD_INT 36
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 101
17644: PUSH
17645: LD_INT 102
17647: PUSH
17648: LD_INT 103
17650: PUSH
17651: LD_INT 104
17653: PUSH
17654: LD_INT 105
17656: PUSH
17657: LD_INT 106
17659: PUSH
17660: LD_INT 107
17662: PUSH
17663: LD_INT 108
17665: PUSH
17666: LD_INT 109
17668: PUSH
17669: LD_INT 110
17671: PUSH
17672: LD_INT 111
17674: PUSH
17675: LD_INT 112
17677: PUSH
17678: LD_INT 114
17680: PUSH
17681: LD_INT 116
17683: PUSH
17684: LD_INT 117
17686: PUSH
17687: LD_INT 118
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: ST_TO_ADDR
17712: GO 19607
17714: LD_INT 11
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17926
17722: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 3
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: LD_INT 5
17739: PUSH
17740: LD_INT 6
17742: PUSH
17743: LD_INT 7
17745: PUSH
17746: LD_INT 8
17748: PUSH
17749: LD_INT 9
17751: PUSH
17752: LD_INT 10
17754: PUSH
17755: LD_INT 11
17757: PUSH
17758: LD_INT 12
17760: PUSH
17761: LD_INT 13
17763: PUSH
17764: LD_INT 14
17766: PUSH
17767: LD_INT 15
17769: PUSH
17770: LD_INT 16
17772: PUSH
17773: LD_INT 17
17775: PUSH
17776: LD_INT 18
17778: PUSH
17779: LD_INT 19
17781: PUSH
17782: LD_INT 20
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_INT 23
17793: PUSH
17794: LD_INT 24
17796: PUSH
17797: LD_INT 25
17799: PUSH
17800: LD_INT 26
17802: PUSH
17803: LD_INT 28
17805: PUSH
17806: LD_INT 30
17808: PUSH
17809: LD_INT 31
17811: PUSH
17812: LD_INT 32
17814: PUSH
17815: LD_INT 34
17817: PUSH
17818: LD_INT 36
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 101
17856: PUSH
17857: LD_INT 102
17859: PUSH
17860: LD_INT 103
17862: PUSH
17863: LD_INT 104
17865: PUSH
17866: LD_INT 105
17868: PUSH
17869: LD_INT 106
17871: PUSH
17872: LD_INT 107
17874: PUSH
17875: LD_INT 108
17877: PUSH
17878: LD_INT 109
17880: PUSH
17881: LD_INT 110
17883: PUSH
17884: LD_INT 111
17886: PUSH
17887: LD_INT 112
17889: PUSH
17890: LD_INT 114
17892: PUSH
17893: LD_INT 116
17895: PUSH
17896: LD_INT 117
17898: PUSH
17899: LD_INT 118
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: ST_TO_ADDR
17924: GO 19607
17926: LD_INT 12
17928: DOUBLE
17929: EQUAL
17930: IFTRUE 17934
17932: GO 18154
17934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17935: LD_ADDR_VAR 0 1
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: LD_INT 2
17945: PUSH
17946: LD_INT 3
17948: PUSH
17949: LD_INT 4
17951: PUSH
17952: LD_INT 5
17954: PUSH
17955: LD_INT 6
17957: PUSH
17958: LD_INT 7
17960: PUSH
17961: LD_INT 8
17963: PUSH
17964: LD_INT 9
17966: PUSH
17967: LD_INT 10
17969: PUSH
17970: LD_INT 11
17972: PUSH
17973: LD_INT 12
17975: PUSH
17976: LD_INT 13
17978: PUSH
17979: LD_INT 14
17981: PUSH
17982: LD_INT 15
17984: PUSH
17985: LD_INT 16
17987: PUSH
17988: LD_INT 17
17990: PUSH
17991: LD_INT 18
17993: PUSH
17994: LD_INT 19
17996: PUSH
17997: LD_INT 20
17999: PUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 22
18005: PUSH
18006: LD_INT 23
18008: PUSH
18009: LD_INT 24
18011: PUSH
18012: LD_INT 25
18014: PUSH
18015: LD_INT 26
18017: PUSH
18018: LD_INT 27
18020: PUSH
18021: LD_INT 28
18023: PUSH
18024: LD_INT 30
18026: PUSH
18027: LD_INT 31
18029: PUSH
18030: LD_INT 32
18032: PUSH
18033: LD_INT 33
18035: PUSH
18036: LD_INT 34
18038: PUSH
18039: LD_INT 36
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 101
18080: PUSH
18081: LD_INT 102
18083: PUSH
18084: LD_INT 103
18086: PUSH
18087: LD_INT 104
18089: PUSH
18090: LD_INT 105
18092: PUSH
18093: LD_INT 106
18095: PUSH
18096: LD_INT 107
18098: PUSH
18099: LD_INT 108
18101: PUSH
18102: LD_INT 109
18104: PUSH
18105: LD_INT 110
18107: PUSH
18108: LD_INT 111
18110: PUSH
18111: LD_INT 112
18113: PUSH
18114: LD_INT 113
18116: PUSH
18117: LD_INT 114
18119: PUSH
18120: LD_INT 116
18122: PUSH
18123: LD_INT 117
18125: PUSH
18126: LD_INT 118
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: ST_TO_ADDR
18152: GO 19607
18154: LD_INT 13
18156: DOUBLE
18157: EQUAL
18158: IFTRUE 18162
18160: GO 18370
18162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18163: LD_ADDR_VAR 0 1
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 3
18176: PUSH
18177: LD_INT 4
18179: PUSH
18180: LD_INT 5
18182: PUSH
18183: LD_INT 8
18185: PUSH
18186: LD_INT 9
18188: PUSH
18189: LD_INT 10
18191: PUSH
18192: LD_INT 11
18194: PUSH
18195: LD_INT 12
18197: PUSH
18198: LD_INT 14
18200: PUSH
18201: LD_INT 15
18203: PUSH
18204: LD_INT 16
18206: PUSH
18207: LD_INT 17
18209: PUSH
18210: LD_INT 18
18212: PUSH
18213: LD_INT 19
18215: PUSH
18216: LD_INT 20
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 22
18224: PUSH
18225: LD_INT 23
18227: PUSH
18228: LD_INT 24
18230: PUSH
18231: LD_INT 25
18233: PUSH
18234: LD_INT 26
18236: PUSH
18237: LD_INT 27
18239: PUSH
18240: LD_INT 28
18242: PUSH
18243: LD_INT 30
18245: PUSH
18246: LD_INT 31
18248: PUSH
18249: LD_INT 32
18251: PUSH
18252: LD_INT 33
18254: PUSH
18255: LD_INT 34
18257: PUSH
18258: LD_INT 36
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 101
18296: PUSH
18297: LD_INT 102
18299: PUSH
18300: LD_INT 103
18302: PUSH
18303: LD_INT 104
18305: PUSH
18306: LD_INT 105
18308: PUSH
18309: LD_INT 106
18311: PUSH
18312: LD_INT 107
18314: PUSH
18315: LD_INT 108
18317: PUSH
18318: LD_INT 109
18320: PUSH
18321: LD_INT 110
18323: PUSH
18324: LD_INT 111
18326: PUSH
18327: LD_INT 112
18329: PUSH
18330: LD_INT 113
18332: PUSH
18333: LD_INT 114
18335: PUSH
18336: LD_INT 116
18338: PUSH
18339: LD_INT 117
18341: PUSH
18342: LD_INT 118
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: ST_TO_ADDR
18368: GO 19607
18370: LD_INT 14
18372: DOUBLE
18373: EQUAL
18374: IFTRUE 18378
18376: GO 18602
18378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18379: LD_ADDR_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 4
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: LD_INT 6
18401: PUSH
18402: LD_INT 7
18404: PUSH
18405: LD_INT 8
18407: PUSH
18408: LD_INT 9
18410: PUSH
18411: LD_INT 10
18413: PUSH
18414: LD_INT 11
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: LD_INT 13
18422: PUSH
18423: LD_INT 14
18425: PUSH
18426: LD_INT 15
18428: PUSH
18429: LD_INT 16
18431: PUSH
18432: LD_INT 17
18434: PUSH
18435: LD_INT 18
18437: PUSH
18438: LD_INT 19
18440: PUSH
18441: LD_INT 20
18443: PUSH
18444: LD_INT 21
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 24
18455: PUSH
18456: LD_INT 25
18458: PUSH
18459: LD_INT 26
18461: PUSH
18462: LD_INT 27
18464: PUSH
18465: LD_INT 28
18467: PUSH
18468: LD_INT 29
18470: PUSH
18471: LD_INT 30
18473: PUSH
18474: LD_INT 31
18476: PUSH
18477: LD_INT 32
18479: PUSH
18480: LD_INT 33
18482: PUSH
18483: LD_INT 34
18485: PUSH
18486: LD_INT 36
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 101
18528: PUSH
18529: LD_INT 102
18531: PUSH
18532: LD_INT 103
18534: PUSH
18535: LD_INT 104
18537: PUSH
18538: LD_INT 105
18540: PUSH
18541: LD_INT 106
18543: PUSH
18544: LD_INT 107
18546: PUSH
18547: LD_INT 108
18549: PUSH
18550: LD_INT 109
18552: PUSH
18553: LD_INT 110
18555: PUSH
18556: LD_INT 111
18558: PUSH
18559: LD_INT 112
18561: PUSH
18562: LD_INT 113
18564: PUSH
18565: LD_INT 114
18567: PUSH
18568: LD_INT 116
18570: PUSH
18571: LD_INT 117
18573: PUSH
18574: LD_INT 118
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: ST_TO_ADDR
18600: GO 19607
18602: LD_INT 15
18604: DOUBLE
18605: EQUAL
18606: IFTRUE 18610
18608: GO 18834
18610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18611: LD_ADDR_VAR 0 1
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 3
18624: PUSH
18625: LD_INT 4
18627: PUSH
18628: LD_INT 5
18630: PUSH
18631: LD_INT 6
18633: PUSH
18634: LD_INT 7
18636: PUSH
18637: LD_INT 8
18639: PUSH
18640: LD_INT 9
18642: PUSH
18643: LD_INT 10
18645: PUSH
18646: LD_INT 11
18648: PUSH
18649: LD_INT 12
18651: PUSH
18652: LD_INT 13
18654: PUSH
18655: LD_INT 14
18657: PUSH
18658: LD_INT 15
18660: PUSH
18661: LD_INT 16
18663: PUSH
18664: LD_INT 17
18666: PUSH
18667: LD_INT 18
18669: PUSH
18670: LD_INT 19
18672: PUSH
18673: LD_INT 20
18675: PUSH
18676: LD_INT 21
18678: PUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 23
18684: PUSH
18685: LD_INT 24
18687: PUSH
18688: LD_INT 25
18690: PUSH
18691: LD_INT 26
18693: PUSH
18694: LD_INT 27
18696: PUSH
18697: LD_INT 28
18699: PUSH
18700: LD_INT 29
18702: PUSH
18703: LD_INT 30
18705: PUSH
18706: LD_INT 31
18708: PUSH
18709: LD_INT 32
18711: PUSH
18712: LD_INT 33
18714: PUSH
18715: LD_INT 34
18717: PUSH
18718: LD_INT 36
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 101
18760: PUSH
18761: LD_INT 102
18763: PUSH
18764: LD_INT 103
18766: PUSH
18767: LD_INT 104
18769: PUSH
18770: LD_INT 105
18772: PUSH
18773: LD_INT 106
18775: PUSH
18776: LD_INT 107
18778: PUSH
18779: LD_INT 108
18781: PUSH
18782: LD_INT 109
18784: PUSH
18785: LD_INT 110
18787: PUSH
18788: LD_INT 111
18790: PUSH
18791: LD_INT 112
18793: PUSH
18794: LD_INT 113
18796: PUSH
18797: LD_INT 114
18799: PUSH
18800: LD_INT 116
18802: PUSH
18803: LD_INT 117
18805: PUSH
18806: LD_INT 118
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: ST_TO_ADDR
18832: GO 19607
18834: LD_INT 16
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18978
18842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18843: LD_ADDR_VAR 0 1
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 4
18853: PUSH
18854: LD_INT 5
18856: PUSH
18857: LD_INT 7
18859: PUSH
18860: LD_INT 11
18862: PUSH
18863: LD_INT 12
18865: PUSH
18866: LD_INT 15
18868: PUSH
18869: LD_INT 16
18871: PUSH
18872: LD_INT 20
18874: PUSH
18875: LD_INT 21
18877: PUSH
18878: LD_INT 22
18880: PUSH
18881: LD_INT 23
18883: PUSH
18884: LD_INT 25
18886: PUSH
18887: LD_INT 26
18889: PUSH
18890: LD_INT 30
18892: PUSH
18893: LD_INT 31
18895: PUSH
18896: LD_INT 32
18898: PUSH
18899: LD_INT 33
18901: PUSH
18902: LD_INT 34
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 101
18928: PUSH
18929: LD_INT 102
18931: PUSH
18932: LD_INT 103
18934: PUSH
18935: LD_INT 106
18937: PUSH
18938: LD_INT 108
18940: PUSH
18941: LD_INT 112
18943: PUSH
18944: LD_INT 113
18946: PUSH
18947: LD_INT 114
18949: PUSH
18950: LD_INT 116
18952: PUSH
18953: LD_INT 117
18955: PUSH
18956: LD_INT 118
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: ST_TO_ADDR
18976: GO 19607
18978: LD_INT 17
18980: DOUBLE
18981: EQUAL
18982: IFTRUE 18986
18984: GO 19210
18986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18987: LD_ADDR_VAR 0 1
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 3
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: LD_INT 5
19006: PUSH
19007: LD_INT 6
19009: PUSH
19010: LD_INT 7
19012: PUSH
19013: LD_INT 8
19015: PUSH
19016: LD_INT 9
19018: PUSH
19019: LD_INT 10
19021: PUSH
19022: LD_INT 11
19024: PUSH
19025: LD_INT 12
19027: PUSH
19028: LD_INT 13
19030: PUSH
19031: LD_INT 14
19033: PUSH
19034: LD_INT 15
19036: PUSH
19037: LD_INT 16
19039: PUSH
19040: LD_INT 17
19042: PUSH
19043: LD_INT 18
19045: PUSH
19046: LD_INT 19
19048: PUSH
19049: LD_INT 20
19051: PUSH
19052: LD_INT 21
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 23
19060: PUSH
19061: LD_INT 24
19063: PUSH
19064: LD_INT 25
19066: PUSH
19067: LD_INT 26
19069: PUSH
19070: LD_INT 27
19072: PUSH
19073: LD_INT 28
19075: PUSH
19076: LD_INT 29
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 31
19084: PUSH
19085: LD_INT 32
19087: PUSH
19088: LD_INT 33
19090: PUSH
19091: LD_INT 34
19093: PUSH
19094: LD_INT 36
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 101
19136: PUSH
19137: LD_INT 102
19139: PUSH
19140: LD_INT 103
19142: PUSH
19143: LD_INT 104
19145: PUSH
19146: LD_INT 105
19148: PUSH
19149: LD_INT 106
19151: PUSH
19152: LD_INT 107
19154: PUSH
19155: LD_INT 108
19157: PUSH
19158: LD_INT 109
19160: PUSH
19161: LD_INT 110
19163: PUSH
19164: LD_INT 111
19166: PUSH
19167: LD_INT 112
19169: PUSH
19170: LD_INT 113
19172: PUSH
19173: LD_INT 114
19175: PUSH
19176: LD_INT 116
19178: PUSH
19179: LD_INT 117
19181: PUSH
19182: LD_INT 118
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: ST_TO_ADDR
19208: GO 19607
19210: LD_INT 18
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19366
19218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19219: LD_ADDR_VAR 0 1
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: LD_INT 4
19229: PUSH
19230: LD_INT 5
19232: PUSH
19233: LD_INT 7
19235: PUSH
19236: LD_INT 11
19238: PUSH
19239: LD_INT 12
19241: PUSH
19242: LD_INT 15
19244: PUSH
19245: LD_INT 16
19247: PUSH
19248: LD_INT 20
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 22
19256: PUSH
19257: LD_INT 23
19259: PUSH
19260: LD_INT 25
19262: PUSH
19263: LD_INT 26
19265: PUSH
19266: LD_INT 30
19268: PUSH
19269: LD_INT 31
19271: PUSH
19272: LD_INT 32
19274: PUSH
19275: LD_INT 33
19277: PUSH
19278: LD_INT 34
19280: PUSH
19281: LD_INT 35
19283: PUSH
19284: LD_INT 36
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 101
19312: PUSH
19313: LD_INT 102
19315: PUSH
19316: LD_INT 103
19318: PUSH
19319: LD_INT 106
19321: PUSH
19322: LD_INT 108
19324: PUSH
19325: LD_INT 112
19327: PUSH
19328: LD_INT 113
19330: PUSH
19331: LD_INT 114
19333: PUSH
19334: LD_INT 115
19336: PUSH
19337: LD_INT 116
19339: PUSH
19340: LD_INT 117
19342: PUSH
19343: LD_INT 118
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19607
19366: LD_INT 19
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19606
19374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19375: LD_ADDR_VAR 0 1
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: LD_INT 6
19397: PUSH
19398: LD_INT 7
19400: PUSH
19401: LD_INT 8
19403: PUSH
19404: LD_INT 9
19406: PUSH
19407: LD_INT 10
19409: PUSH
19410: LD_INT 11
19412: PUSH
19413: LD_INT 12
19415: PUSH
19416: LD_INT 13
19418: PUSH
19419: LD_INT 14
19421: PUSH
19422: LD_INT 15
19424: PUSH
19425: LD_INT 16
19427: PUSH
19428: LD_INT 17
19430: PUSH
19431: LD_INT 18
19433: PUSH
19434: LD_INT 19
19436: PUSH
19437: LD_INT 20
19439: PUSH
19440: LD_INT 21
19442: PUSH
19443: LD_INT 22
19445: PUSH
19446: LD_INT 23
19448: PUSH
19449: LD_INT 24
19451: PUSH
19452: LD_INT 25
19454: PUSH
19455: LD_INT 26
19457: PUSH
19458: LD_INT 27
19460: PUSH
19461: LD_INT 28
19463: PUSH
19464: LD_INT 29
19466: PUSH
19467: LD_INT 30
19469: PUSH
19470: LD_INT 31
19472: PUSH
19473: LD_INT 32
19475: PUSH
19476: LD_INT 33
19478: PUSH
19479: LD_INT 34
19481: PUSH
19482: LD_INT 35
19484: PUSH
19485: LD_INT 36
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 101
19528: PUSH
19529: LD_INT 102
19531: PUSH
19532: LD_INT 103
19534: PUSH
19535: LD_INT 104
19537: PUSH
19538: LD_INT 105
19540: PUSH
19541: LD_INT 106
19543: PUSH
19544: LD_INT 107
19546: PUSH
19547: LD_INT 108
19549: PUSH
19550: LD_INT 109
19552: PUSH
19553: LD_INT 110
19555: PUSH
19556: LD_INT 111
19558: PUSH
19559: LD_INT 112
19561: PUSH
19562: LD_INT 113
19564: PUSH
19565: LD_INT 114
19567: PUSH
19568: LD_INT 115
19570: PUSH
19571: LD_INT 116
19573: PUSH
19574: LD_INT 117
19576: PUSH
19577: LD_INT 118
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: ST_TO_ADDR
19604: GO 19607
19606: POP
// end else
19607: GO 19838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19609: LD_ADDR_VAR 0 1
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: LD_INT 3
19622: PUSH
19623: LD_INT 4
19625: PUSH
19626: LD_INT 5
19628: PUSH
19629: LD_INT 6
19631: PUSH
19632: LD_INT 7
19634: PUSH
19635: LD_INT 8
19637: PUSH
19638: LD_INT 9
19640: PUSH
19641: LD_INT 10
19643: PUSH
19644: LD_INT 11
19646: PUSH
19647: LD_INT 12
19649: PUSH
19650: LD_INT 13
19652: PUSH
19653: LD_INT 14
19655: PUSH
19656: LD_INT 15
19658: PUSH
19659: LD_INT 16
19661: PUSH
19662: LD_INT 17
19664: PUSH
19665: LD_INT 18
19667: PUSH
19668: LD_INT 19
19670: PUSH
19671: LD_INT 20
19673: PUSH
19674: LD_INT 21
19676: PUSH
19677: LD_INT 22
19679: PUSH
19680: LD_INT 23
19682: PUSH
19683: LD_INT 24
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 26
19691: PUSH
19692: LD_INT 27
19694: PUSH
19695: LD_INT 28
19697: PUSH
19698: LD_INT 29
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 31
19706: PUSH
19707: LD_INT 32
19709: PUSH
19710: LD_INT 33
19712: PUSH
19713: LD_INT 34
19715: PUSH
19716: LD_INT 35
19718: PUSH
19719: LD_INT 36
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 101
19762: PUSH
19763: LD_INT 102
19765: PUSH
19766: LD_INT 103
19768: PUSH
19769: LD_INT 104
19771: PUSH
19772: LD_INT 105
19774: PUSH
19775: LD_INT 106
19777: PUSH
19778: LD_INT 107
19780: PUSH
19781: LD_INT 108
19783: PUSH
19784: LD_INT 109
19786: PUSH
19787: LD_INT 110
19789: PUSH
19790: LD_INT 111
19792: PUSH
19793: LD_INT 112
19795: PUSH
19796: LD_INT 113
19798: PUSH
19799: LD_INT 114
19801: PUSH
19802: LD_INT 115
19804: PUSH
19805: LD_INT 116
19807: PUSH
19808: LD_INT 117
19810: PUSH
19811: LD_INT 118
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: ST_TO_ADDR
// if result then
19838: LD_VAR 0 1
19842: IFFALSE 20131
// begin normal :=  ;
19844: LD_ADDR_VAR 0 3
19848: PUSH
19849: LD_STRING 
19851: ST_TO_ADDR
// hardcore :=  ;
19852: LD_ADDR_VAR 0 4
19856: PUSH
19857: LD_STRING 
19859: ST_TO_ADDR
// for i = 1 to normalCounter do
19860: LD_ADDR_VAR 0 5
19864: PUSH
19865: DOUBLE
19866: LD_INT 1
19868: DEC
19869: ST_TO_ADDR
19870: LD_EXP 61
19874: PUSH
19875: FOR_TO
19876: IFFALSE 19977
// begin tmp := 0 ;
19878: LD_ADDR_VAR 0 2
19882: PUSH
19883: LD_STRING 0
19885: ST_TO_ADDR
// if result [ 1 ] then
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: IFFALSE 19959
// if result [ 1 ] [ 1 ] = i then
19896: LD_VAR 0 1
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PUSH
19905: LD_INT 1
19907: ARRAY
19908: PUSH
19909: LD_VAR 0 5
19913: EQUAL
19914: IFFALSE 19959
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19916: LD_ADDR_VAR 0 1
19920: PUSH
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: LD_VAR 0 1
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_INT 1
19940: PPUSH
19941: CALL_OW 3
19945: PPUSH
19946: CALL_OW 1
19950: ST_TO_ADDR
// tmp := 1 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_STRING 1
19958: ST_TO_ADDR
// end ; normal := normal & tmp ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_VAR 0 3
19968: PUSH
19969: LD_VAR 0 2
19973: STR
19974: ST_TO_ADDR
// end ;
19975: GO 19875
19977: POP
19978: POP
// for i = 1 to hardcoreCounter do
19979: LD_ADDR_VAR 0 5
19983: PUSH
19984: DOUBLE
19985: LD_INT 1
19987: DEC
19988: ST_TO_ADDR
19989: LD_EXP 62
19993: PUSH
19994: FOR_TO
19995: IFFALSE 20100
// begin tmp := 0 ;
19997: LD_ADDR_VAR 0 2
20001: PUSH
20002: LD_STRING 0
20004: ST_TO_ADDR
// if result [ 2 ] then
20005: LD_VAR 0 1
20009: PUSH
20010: LD_INT 2
20012: ARRAY
20013: IFFALSE 20082
// if result [ 2 ] [ 1 ] = 100 + i then
20015: LD_VAR 0 1
20019: PUSH
20020: LD_INT 2
20022: ARRAY
20023: PUSH
20024: LD_INT 1
20026: ARRAY
20027: PUSH
20028: LD_INT 100
20030: PUSH
20031: LD_VAR 0 5
20035: PLUS
20036: EQUAL
20037: IFFALSE 20082
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20039: LD_ADDR_VAR 0 1
20043: PUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_INT 2
20051: PPUSH
20052: LD_VAR 0 1
20056: PUSH
20057: LD_INT 2
20059: ARRAY
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 3
20068: PPUSH
20069: CALL_OW 1
20073: ST_TO_ADDR
// tmp := 1 ;
20074: LD_ADDR_VAR 0 2
20078: PUSH
20079: LD_STRING 1
20081: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20082: LD_ADDR_VAR 0 4
20086: PUSH
20087: LD_VAR 0 4
20091: PUSH
20092: LD_VAR 0 2
20096: STR
20097: ST_TO_ADDR
// end ;
20098: GO 19994
20100: POP
20101: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20102: LD_STRING getStreamItemsFromMission("
20104: PUSH
20105: LD_VAR 0 3
20109: STR
20110: PUSH
20111: LD_STRING ","
20113: STR
20114: PUSH
20115: LD_VAR 0 4
20119: STR
20120: PUSH
20121: LD_STRING ")
20123: STR
20124: PPUSH
20125: CALL_OW 559
// end else
20129: GO 20138
// ToLua ( getStreamItemsFromMission("","") ) ;
20131: LD_STRING getStreamItemsFromMission("","")
20133: PPUSH
20134: CALL_OW 559
// end ;
20138: LD_VAR 0 1
20142: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20143: LD_EXP 60
20147: PUSH
20148: LD_EXP 65
20152: AND
20153: IFFALSE 20277
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
// begin enable ;
20162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 34
20185: PUSH
20186: LD_INT 7
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 34
20195: PUSH
20196: LD_INT 45
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 34
20205: PUSH
20206: LD_INT 28
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 34
20215: PUSH
20216: LD_INT 47
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: ST_TO_ADDR
// if not tmp then
20239: LD_VAR 0 2
20243: NOT
20244: IFFALSE 20248
// exit ;
20246: GO 20277
// for i in tmp do
20248: LD_ADDR_VAR 0 1
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: FOR_IN
20259: IFFALSE 20275
// begin SetLives ( i , 0 ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 0
20268: PPUSH
20269: CALL_OW 234
// end ;
20273: GO 20258
20275: POP
20276: POP
// end ;
20277: PPOPN 2
20279: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20280: LD_EXP 60
20284: PUSH
20285: LD_EXP 66
20289: AND
20290: IFFALSE 20374
20292: GO 20294
20294: DISABLE
20295: LD_INT 0
20297: PPUSH
20298: PPUSH
// begin enable ;
20299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20300: LD_ADDR_VAR 0 2
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_OWVAR 2
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 32
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 69
20335: ST_TO_ADDR
// if not tmp then
20336: LD_VAR 0 2
20340: NOT
20341: IFFALSE 20345
// exit ;
20343: GO 20374
// for i in tmp do
20345: LD_ADDR_VAR 0 1
20349: PUSH
20350: LD_VAR 0 2
20354: PUSH
20355: FOR_IN
20356: IFFALSE 20372
// begin SetLives ( i , 0 ) ;
20358: LD_VAR 0 1
20362: PPUSH
20363: LD_INT 0
20365: PPUSH
20366: CALL_OW 234
// end ;
20370: GO 20355
20372: POP
20373: POP
// end ;
20374: PPOPN 2
20376: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20377: LD_EXP 60
20381: PUSH
20382: LD_EXP 63
20386: AND
20387: IFFALSE 20480
20389: GO 20391
20391: DISABLE
20392: LD_INT 0
20394: PPUSH
// begin enable ;
20395: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20396: LD_ADDR_VAR 0 1
20400: PUSH
20401: LD_INT 22
20403: PUSH
20404: LD_OWVAR 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 5
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 25
20428: PUSH
20429: LD_INT 9
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 25
20438: PUSH
20439: LD_INT 8
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: PUSH
20461: FOR_IN
20462: IFFALSE 20478
// begin SetClass ( i , 1 ) ;
20464: LD_VAR 0 1
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL_OW 336
// end ;
20476: GO 20461
20478: POP
20479: POP
// end ;
20480: PPOPN 1
20482: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20483: LD_EXP 60
20487: PUSH
20488: LD_EXP 64
20492: AND
20493: PUSH
20494: LD_OWVAR 65
20498: PUSH
20499: LD_INT 7
20501: LESS
20502: AND
20503: IFFALSE 20517
20505: GO 20507
20507: DISABLE
// begin enable ;
20508: ENABLE
// game_speed := 7 ;
20509: LD_ADDR_OWVAR 65
20513: PUSH
20514: LD_INT 7
20516: ST_TO_ADDR
// end ;
20517: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20518: LD_EXP 60
20522: PUSH
20523: LD_EXP 67
20527: AND
20528: IFFALSE 20730
20530: GO 20532
20532: DISABLE
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
20537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20538: LD_ADDR_VAR 0 3
20542: PUSH
20543: LD_INT 81
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 69
20573: ST_TO_ADDR
// if not tmp then
20574: LD_VAR 0 3
20578: NOT
20579: IFFALSE 20583
// exit ;
20581: GO 20730
// if tmp > 5 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 5
20590: GREATER
20591: IFFALSE 20603
// k := 5 else
20593: LD_ADDR_VAR 0 2
20597: PUSH
20598: LD_INT 5
20600: ST_TO_ADDR
20601: GO 20613
// k := tmp ;
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_VAR 0 3
20612: ST_TO_ADDR
// for i := 1 to k do
20613: LD_ADDR_VAR 0 1
20617: PUSH
20618: DOUBLE
20619: LD_INT 1
20621: DEC
20622: ST_TO_ADDR
20623: LD_VAR 0 2
20627: PUSH
20628: FOR_TO
20629: IFFALSE 20728
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_VAR 0 1
20640: ARRAY
20641: PPUSH
20642: LD_VAR 0 1
20646: PUSH
20647: LD_INT 4
20649: MOD
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: PPUSH
20655: CALL_OW 259
20659: PUSH
20660: LD_INT 10
20662: LESS
20663: IFFALSE 20726
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20665: LD_VAR 0 3
20669: PUSH
20670: LD_VAR 0 1
20674: ARRAY
20675: PPUSH
20676: LD_VAR 0 1
20680: PUSH
20681: LD_INT 4
20683: MOD
20684: PUSH
20685: LD_INT 1
20687: PLUS
20688: PPUSH
20689: LD_VAR 0 3
20693: PUSH
20694: LD_VAR 0 1
20698: ARRAY
20699: PPUSH
20700: LD_VAR 0 1
20704: PUSH
20705: LD_INT 4
20707: MOD
20708: PUSH
20709: LD_INT 1
20711: PLUS
20712: PPUSH
20713: CALL_OW 259
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: PPUSH
20722: CALL_OW 237
20726: GO 20628
20728: POP
20729: POP
// end ;
20730: PPOPN 3
20732: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20733: LD_EXP 60
20737: PUSH
20738: LD_EXP 68
20742: AND
20743: IFFALSE 20763
20745: GO 20747
20747: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20748: LD_INT 4
20750: PPUSH
20751: LD_OWVAR 2
20755: PPUSH
20756: LD_INT 0
20758: PPUSH
20759: CALL_OW 324
20763: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20764: LD_EXP 60
20768: PUSH
20769: LD_EXP 97
20773: AND
20774: IFFALSE 20794
20776: GO 20778
20778: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20779: LD_INT 19
20781: PPUSH
20782: LD_OWVAR 2
20786: PPUSH
20787: LD_INT 0
20789: PPUSH
20790: CALL_OW 324
20794: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20795: LD_EXP 60
20799: PUSH
20800: LD_EXP 69
20804: AND
20805: IFFALSE 20907
20807: GO 20809
20809: DISABLE
20810: LD_INT 0
20812: PPUSH
20813: PPUSH
// begin enable ;
20814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_OWVAR 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 34
20837: PUSH
20838: LD_INT 11
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 34
20847: PUSH
20848: LD_INT 30
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PPUSH
20864: CALL_OW 69
20868: ST_TO_ADDR
// if not tmp then
20869: LD_VAR 0 2
20873: NOT
20874: IFFALSE 20878
// exit ;
20876: GO 20907
// for i in tmp do
20878: LD_ADDR_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20905
// begin SetLives ( i , 0 ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_INT 0
20898: PPUSH
20899: CALL_OW 234
// end ;
20903: GO 20888
20905: POP
20906: POP
// end ;
20907: PPOPN 2
20909: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20910: LD_EXP 60
20914: PUSH
20915: LD_EXP 70
20919: AND
20920: IFFALSE 20940
20922: GO 20924
20924: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20925: LD_INT 32
20927: PPUSH
20928: LD_OWVAR 2
20932: PPUSH
20933: LD_INT 0
20935: PPUSH
20936: CALL_OW 324
20940: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20941: LD_EXP 60
20945: PUSH
20946: LD_EXP 71
20950: AND
20951: IFFALSE 21132
20953: GO 20955
20955: DISABLE
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
20960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20961: LD_ADDR_VAR 0 2
20965: PUSH
20966: LD_INT 22
20968: PUSH
20969: LD_OWVAR 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 33
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: ST_TO_ADDR
// if not tmp then
20997: LD_VAR 0 2
21001: NOT
21002: IFFALSE 21006
// exit ;
21004: GO 21132
// side := 0 ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 0
21013: ST_TO_ADDR
// for i := 1 to 8 do
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_INT 8
21026: PUSH
21027: FOR_TO
21028: IFFALSE 21076
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21030: LD_OWVAR 2
21034: PUSH
21035: LD_VAR 0 1
21039: NONEQUAL
21040: PUSH
21041: LD_OWVAR 2
21045: PPUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 81
21055: PUSH
21056: LD_INT 2
21058: EQUAL
21059: AND
21060: IFFALSE 21074
// begin side := i ;
21062: LD_ADDR_VAR 0 3
21066: PUSH
21067: LD_VAR 0 1
21071: ST_TO_ADDR
// break ;
21072: GO 21076
// end ;
21074: GO 21027
21076: POP
21077: POP
// if not side then
21078: LD_VAR 0 3
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21132
// for i := 1 to tmp do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: DOUBLE
21093: LD_INT 1
21095: DEC
21096: ST_TO_ADDR
21097: LD_VAR 0 2
21101: PUSH
21102: FOR_TO
21103: IFFALSE 21130
// if Prob ( 60 ) then
21105: LD_INT 60
21107: PPUSH
21108: CALL_OW 13
21112: IFFALSE 21128
// SetSide ( i , side ) ;
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: CALL_OW 235
21128: GO 21102
21130: POP
21131: POP
// end ;
21132: PPOPN 3
21134: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21135: LD_EXP 60
21139: PUSH
21140: LD_EXP 73
21144: AND
21145: IFFALSE 21264
21147: GO 21149
21149: DISABLE
21150: LD_INT 0
21152: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: LD_INT 22
21160: PUSH
21161: LD_OWVAR 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 21
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21262
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 257
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: LD_INT 4
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: IN
21238: IFFALSE 21260
// SetClass ( un , rand ( 1 , 4 ) ) ;
21240: LD_VAR 0 1
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: LD_INT 4
21250: PPUSH
21251: CALL_OW 12
21255: PPUSH
21256: CALL_OW 336
21260: GO 21207
21262: POP
21263: POP
// end ;
21264: PPOPN 1
21266: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21267: LD_EXP 60
21271: PUSH
21272: LD_EXP 72
21276: AND
21277: IFFALSE 21356
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_OWVAR 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 21
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: ST_TO_ADDR
// if not tmp then
21321: LD_VAR 0 1
21325: NOT
21326: IFFALSE 21330
// exit ;
21328: GO 21356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21330: LD_VAR 0 1
21334: PUSH
21335: LD_INT 1
21337: PPUSH
21338: LD_VAR 0 1
21342: PPUSH
21343: CALL_OW 12
21347: ARRAY
21348: PPUSH
21349: LD_INT 100
21351: PPUSH
21352: CALL_OW 234
// end ;
21356: PPOPN 1
21358: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21359: LD_EXP 60
21363: PUSH
21364: LD_EXP 74
21368: AND
21369: IFFALSE 21467
21371: GO 21373
21373: DISABLE
21374: LD_INT 0
21376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21377: LD_ADDR_VAR 0 1
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_OWVAR 2
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 69
21412: ST_TO_ADDR
// if not tmp then
21413: LD_VAR 0 1
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 21467
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 12
21439: ARRAY
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: LD_INT 4
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: LD_INT 3000
21454: PPUSH
21455: LD_INT 9000
21457: PPUSH
21458: CALL_OW 12
21462: PPUSH
21463: CALL_OW 492
// end ;
21467: PPOPN 1
21469: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21470: LD_EXP 60
21474: PUSH
21475: LD_EXP 75
21479: AND
21480: IFFALSE 21500
21482: GO 21484
21484: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21485: LD_INT 1
21487: PPUSH
21488: LD_OWVAR 2
21492: PPUSH
21493: LD_INT 0
21495: PPUSH
21496: CALL_OW 324
21500: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21501: LD_EXP 60
21505: PUSH
21506: LD_EXP 76
21510: AND
21511: IFFALSE 21594
21513: GO 21515
21515: DISABLE
21516: LD_INT 0
21518: PPUSH
21519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21520: LD_ADDR_VAR 0 2
21524: PUSH
21525: LD_INT 22
21527: PUSH
21528: LD_OWVAR 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 21
21539: PUSH
21540: LD_INT 3
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PPUSH
21551: CALL_OW 69
21555: ST_TO_ADDR
// if not tmp then
21556: LD_VAR 0 2
21560: NOT
21561: IFFALSE 21565
// exit ;
21563: GO 21594
// for i in tmp do
21565: LD_ADDR_VAR 0 1
21569: PUSH
21570: LD_VAR 0 2
21574: PUSH
21575: FOR_IN
21576: IFFALSE 21592
// SetBLevel ( i , 10 ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_INT 10
21585: PPUSH
21586: CALL_OW 241
21590: GO 21575
21592: POP
21593: POP
// end ;
21594: PPOPN 2
21596: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21597: LD_EXP 60
21601: PUSH
21602: LD_EXP 77
21606: AND
21607: IFFALSE 21718
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
21615: PPUSH
21616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21617: LD_ADDR_VAR 0 3
21621: PUSH
21622: LD_INT 22
21624: PUSH
21625: LD_OWVAR 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 25
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 69
21652: ST_TO_ADDR
// if not tmp then
21653: LD_VAR 0 3
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21718
// un := tmp [ rand ( 1 , tmp ) ] ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 1
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: CALL_OW 12
21684: ARRAY
21685: ST_TO_ADDR
// if Crawls ( un ) then
21686: LD_VAR 0 2
21690: PPUSH
21691: CALL_OW 318
21695: IFFALSE 21706
// ComWalk ( un ) ;
21697: LD_VAR 0 2
21701: PPUSH
21702: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21706: LD_VAR 0 2
21710: PPUSH
21711: LD_INT 5
21713: PPUSH
21714: CALL_OW 336
// end ;
21718: PPOPN 3
21720: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21721: LD_EXP 60
21725: PUSH
21726: LD_EXP 78
21730: AND
21731: PUSH
21732: LD_OWVAR 67
21736: PUSH
21737: LD_INT 4
21739: LESS
21740: AND
21741: IFFALSE 21760
21743: GO 21745
21745: DISABLE
// begin Difficulty := Difficulty + 1 ;
21746: LD_ADDR_OWVAR 67
21750: PUSH
21751: LD_OWVAR 67
21755: PUSH
21756: LD_INT 1
21758: PLUS
21759: ST_TO_ADDR
// end ;
21760: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21761: LD_EXP 60
21765: PUSH
21766: LD_EXP 79
21770: AND
21771: IFFALSE 21874
21773: GO 21775
21775: DISABLE
21776: LD_INT 0
21778: PPUSH
// begin for i := 1 to 5 do
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: DOUBLE
21785: LD_INT 1
21787: DEC
21788: ST_TO_ADDR
21789: LD_INT 5
21791: PUSH
21792: FOR_TO
21793: IFFALSE 21872
// begin uc_nation := nation_nature ;
21795: LD_ADDR_OWVAR 21
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// uc_side := 0 ;
21803: LD_ADDR_OWVAR 20
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21811: LD_ADDR_OWVAR 29
21815: PUSH
21816: LD_INT 12
21818: PUSH
21819: LD_INT 12
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: ST_TO_ADDR
// hc_agressivity := 20 ;
21826: LD_ADDR_OWVAR 35
21830: PUSH
21831: LD_INT 20
21833: ST_TO_ADDR
// hc_class := class_tiger ;
21834: LD_ADDR_OWVAR 28
21838: PUSH
21839: LD_INT 14
21841: ST_TO_ADDR
// hc_gallery :=  ;
21842: LD_ADDR_OWVAR 33
21846: PUSH
21847: LD_STRING 
21849: ST_TO_ADDR
// hc_name :=  ;
21850: LD_ADDR_OWVAR 26
21854: PUSH
21855: LD_STRING 
21857: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21858: CALL_OW 44
21862: PPUSH
21863: LD_INT 0
21865: PPUSH
21866: CALL_OW 51
// end ;
21870: GO 21792
21872: POP
21873: POP
// end ;
21874: PPOPN 1
21876: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21877: LD_EXP 60
21881: PUSH
21882: LD_EXP 80
21886: AND
21887: IFFALSE 21896
21889: GO 21891
21891: DISABLE
// StreamSibBomb ;
21892: CALL 21897 0 0
21896: END
// export function StreamSibBomb ; var i , x , y ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
// result := false ;
21903: LD_ADDR_VAR 0 1
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// for i := 1 to 16 do
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: DOUBLE
21917: LD_INT 1
21919: DEC
21920: ST_TO_ADDR
21921: LD_INT 16
21923: PUSH
21924: FOR_TO
21925: IFFALSE 22124
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_INT 10
21934: PUSH
21935: LD_INT 20
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: LD_INT 40
21943: PUSH
21944: LD_INT 50
21946: PUSH
21947: LD_INT 60
21949: PUSH
21950: LD_INT 70
21952: PUSH
21953: LD_INT 80
21955: PUSH
21956: LD_INT 90
21958: PUSH
21959: LD_INT 100
21961: PUSH
21962: LD_INT 110
21964: PUSH
21965: LD_INT 120
21967: PUSH
21968: LD_INT 130
21970: PUSH
21971: LD_INT 140
21973: PUSH
21974: LD_INT 150
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: PPUSH
21997: LD_INT 15
21999: PPUSH
22000: CALL_OW 12
22004: ARRAY
22005: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22006: LD_ADDR_VAR 0 4
22010: PUSH
22011: LD_INT 10
22013: PUSH
22014: LD_INT 20
22016: PUSH
22017: LD_INT 30
22019: PUSH
22020: LD_INT 40
22022: PUSH
22023: LD_INT 50
22025: PUSH
22026: LD_INT 60
22028: PUSH
22029: LD_INT 70
22031: PUSH
22032: LD_INT 80
22034: PUSH
22035: LD_INT 90
22037: PUSH
22038: LD_INT 100
22040: PUSH
22041: LD_INT 110
22043: PUSH
22044: LD_INT 120
22046: PUSH
22047: LD_INT 130
22049: PUSH
22050: LD_INT 140
22052: PUSH
22053: LD_INT 150
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 15
22078: PPUSH
22079: CALL_OW 12
22083: ARRAY
22084: ST_TO_ADDR
// if ValidHex ( x , y ) then
22085: LD_VAR 0 3
22089: PPUSH
22090: LD_VAR 0 4
22094: PPUSH
22095: CALL_OW 488
22099: IFFALSE 22122
// begin result := [ x , y ] ;
22101: LD_ADDR_VAR 0 1
22105: PUSH
22106: LD_VAR 0 3
22110: PUSH
22111: LD_VAR 0 4
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: ST_TO_ADDR
// break ;
22120: GO 22124
// end ; end ;
22122: GO 21924
22124: POP
22125: POP
// if result then
22126: LD_VAR 0 1
22130: IFFALSE 22190
// begin ToLua ( playSibBomb() ) ;
22132: LD_STRING playSibBomb()
22134: PPUSH
22135: CALL_OW 559
// wait ( 0 0$14 ) ;
22139: LD_INT 490
22141: PPUSH
22142: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22146: LD_VAR 0 1
22150: PUSH
22151: LD_INT 1
22153: ARRAY
22154: PPUSH
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 2
22162: ARRAY
22163: PPUSH
22164: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22168: LD_VAR 0 1
22172: PUSH
22173: LD_INT 1
22175: ARRAY
22176: PPUSH
22177: LD_VAR 0 1
22181: PUSH
22182: LD_INT 2
22184: ARRAY
22185: PPUSH
22186: CALL_OW 429
// end ; end ;
22190: LD_VAR 0 1
22194: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22195: LD_EXP 60
22199: PUSH
22200: LD_EXP 82
22204: AND
22205: IFFALSE 22217
22207: GO 22209
22209: DISABLE
// YouLost (  ) ;
22210: LD_STRING 
22212: PPUSH
22213: CALL_OW 104
22217: END
// every 0 0$1 trigger StreamModeActive and sFog do
22218: LD_EXP 60
22222: PUSH
22223: LD_EXP 81
22227: AND
22228: IFFALSE 22242
22230: GO 22232
22232: DISABLE
// FogOff ( your_side ) ;
22233: LD_OWVAR 2
22237: PPUSH
22238: CALL_OW 344
22242: END
// every 0 0$1 trigger StreamModeActive and sSun do
22243: LD_EXP 60
22247: PUSH
22248: LD_EXP 83
22252: AND
22253: IFFALSE 22281
22255: GO 22257
22257: DISABLE
// begin solar_recharge_percent := 0 ;
22258: LD_ADDR_OWVAR 79
22262: PUSH
22263: LD_INT 0
22265: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22266: LD_INT 10500
22268: PPUSH
22269: CALL_OW 67
// solar_recharge_percent := 100 ;
22273: LD_ADDR_OWVAR 79
22277: PUSH
22278: LD_INT 100
22280: ST_TO_ADDR
// end ;
22281: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22282: LD_EXP 60
22286: PUSH
22287: LD_EXP 84
22291: AND
22292: IFFALSE 22531
22294: GO 22296
22296: DISABLE
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
22301: PPUSH
// begin tmp := [ ] ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: EMPTY
22308: ST_TO_ADDR
// for i := 1 to 6 do
22309: LD_ADDR_VAR 0 1
22313: PUSH
22314: DOUBLE
22315: LD_INT 1
22317: DEC
22318: ST_TO_ADDR
22319: LD_INT 6
22321: PUSH
22322: FOR_TO
22323: IFFALSE 22428
// begin uc_nation := nation_nature ;
22325: LD_ADDR_OWVAR 21
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// uc_side := 0 ;
22333: LD_ADDR_OWVAR 20
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22341: LD_ADDR_OWVAR 29
22345: PUSH
22346: LD_INT 12
22348: PUSH
22349: LD_INT 12
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
// hc_agressivity := 20 ;
22356: LD_ADDR_OWVAR 35
22360: PUSH
22361: LD_INT 20
22363: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22364: LD_ADDR_OWVAR 28
22368: PUSH
22369: LD_INT 17
22371: ST_TO_ADDR
// hc_gallery :=  ;
22372: LD_ADDR_OWVAR 33
22376: PUSH
22377: LD_STRING 
22379: ST_TO_ADDR
// hc_name :=  ;
22380: LD_ADDR_OWVAR 26
22384: PUSH
22385: LD_STRING 
22387: ST_TO_ADDR
// un := CreateHuman ;
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: CALL_OW 44
22397: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22398: LD_VAR 0 2
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: CALL_OW 51
// tmp := tmp ^ un ;
22410: LD_ADDR_VAR 0 3
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_VAR 0 2
22424: ADD
22425: ST_TO_ADDR
// end ;
22426: GO 22322
22428: POP
22429: POP
// repeat wait ( 0 0$1 ) ;
22430: LD_INT 35
22432: PPUSH
22433: CALL_OW 67
// for un in tmp do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_VAR 0 3
22446: PUSH
22447: FOR_IN
22448: IFFALSE 22522
// begin if IsDead ( un ) then
22450: LD_VAR 0 2
22454: PPUSH
22455: CALL_OW 301
22459: IFFALSE 22479
// begin tmp := tmp diff un ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 2
22475: DIFF
22476: ST_TO_ADDR
// continue ;
22477: GO 22447
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22479: LD_VAR 0 2
22483: PPUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: PPUSH
22506: LD_VAR 0 2
22510: PPUSH
22511: CALL_OW 74
22515: PPUSH
22516: CALL_OW 115
// end ;
22520: GO 22447
22522: POP
22523: POP
// until not tmp ;
22524: LD_VAR 0 3
22528: NOT
22529: IFFALSE 22430
// end ;
22531: PPOPN 3
22533: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22534: LD_EXP 60
22538: PUSH
22539: LD_EXP 85
22543: AND
22544: IFFALSE 22598
22546: GO 22548
22548: DISABLE
// begin ToLua ( displayTroll(); ) ;
22549: LD_STRING displayTroll();
22551: PPUSH
22552: CALL_OW 559
// wait ( 3 3$00 ) ;
22556: LD_INT 6300
22558: PPUSH
22559: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22563: LD_STRING hideTroll();
22565: PPUSH
22566: CALL_OW 559
// wait ( 1 1$00 ) ;
22570: LD_INT 2100
22572: PPUSH
22573: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22577: LD_STRING displayTroll();
22579: PPUSH
22580: CALL_OW 559
// wait ( 1 1$00 ) ;
22584: LD_INT 2100
22586: PPUSH
22587: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22591: LD_STRING hideTroll();
22593: PPUSH
22594: CALL_OW 559
// end ;
22598: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22599: LD_EXP 60
22603: PUSH
22604: LD_EXP 86
22608: AND
22609: IFFALSE 22672
22611: GO 22613
22613: DISABLE
22614: LD_INT 0
22616: PPUSH
// begin p := 0 ;
22617: LD_ADDR_VAR 0 1
22621: PUSH
22622: LD_INT 0
22624: ST_TO_ADDR
// repeat game_speed := 1 ;
22625: LD_ADDR_OWVAR 65
22629: PUSH
22630: LD_INT 1
22632: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22633: LD_INT 35
22635: PPUSH
22636: CALL_OW 67
// p := p + 1 ;
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_VAR 0 1
22649: PUSH
22650: LD_INT 1
22652: PLUS
22653: ST_TO_ADDR
// until p >= 60 ;
22654: LD_VAR 0 1
22658: PUSH
22659: LD_INT 60
22661: GREATEREQUAL
22662: IFFALSE 22625
// game_speed := 4 ;
22664: LD_ADDR_OWVAR 65
22668: PUSH
22669: LD_INT 4
22671: ST_TO_ADDR
// end ;
22672: PPOPN 1
22674: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22675: LD_EXP 60
22679: PUSH
22680: LD_EXP 87
22684: AND
22685: IFFALSE 22831
22687: GO 22689
22689: DISABLE
22690: LD_INT 0
22692: PPUSH
22693: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_OWVAR 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 30
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 69
22747: ST_TO_ADDR
// if not depot then
22748: LD_VAR 0 1
22752: NOT
22753: IFFALSE 22757
// exit ;
22755: GO 22831
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: LD_VAR 0 1
22766: PUSH
22767: LD_INT 1
22769: PPUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 12
22779: ARRAY
22780: PPUSH
22781: CALL_OW 274
22785: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22786: LD_VAR 0 2
22790: PPUSH
22791: LD_INT 1
22793: PPUSH
22794: LD_INT 0
22796: PPUSH
22797: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22801: LD_VAR 0 2
22805: PPUSH
22806: LD_INT 2
22808: PPUSH
22809: LD_INT 0
22811: PPUSH
22812: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22816: LD_VAR 0 2
22820: PPUSH
22821: LD_INT 3
22823: PPUSH
22824: LD_INT 0
22826: PPUSH
22827: CALL_OW 277
// end ;
22831: PPOPN 2
22833: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22834: LD_EXP 60
22838: PUSH
22839: LD_EXP 88
22843: AND
22844: IFFALSE 22941
22846: GO 22848
22848: DISABLE
22849: LD_INT 0
22851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22852: LD_ADDR_VAR 0 1
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_OWVAR 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 21
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 3
22881: PUSH
22882: LD_INT 23
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: PPUSH
22901: CALL_OW 69
22905: ST_TO_ADDR
// if not tmp then
22906: LD_VAR 0 1
22910: NOT
22911: IFFALSE 22915
// exit ;
22913: GO 22941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_VAR 0 1
22927: PPUSH
22928: CALL_OW 12
22932: ARRAY
22933: PPUSH
22934: LD_INT 200
22936: PPUSH
22937: CALL_OW 234
// end ;
22941: PPOPN 1
22943: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22944: LD_EXP 60
22948: PUSH
22949: LD_EXP 89
22953: AND
22954: IFFALSE 23033
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22962: LD_ADDR_VAR 0 1
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: LD_OWVAR 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 21
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PPUSH
22993: CALL_OW 69
22997: ST_TO_ADDR
// if not tmp then
22998: LD_VAR 0 1
23002: NOT
23003: IFFALSE 23007
// exit ;
23005: GO 23033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23007: LD_VAR 0 1
23011: PUSH
23012: LD_INT 1
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 12
23024: ARRAY
23025: PPUSH
23026: LD_INT 60
23028: PPUSH
23029: CALL_OW 234
// end ;
23033: PPOPN 1
23035: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23036: LD_EXP 60
23040: PUSH
23041: LD_EXP 90
23045: AND
23046: IFFALSE 23145
23048: GO 23050
23050: DISABLE
23051: LD_INT 0
23053: PPUSH
23054: PPUSH
// begin enable ;
23055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23056: LD_ADDR_VAR 0 1
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_OWVAR 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 61
23075: PUSH
23076: EMPTY
23077: LIST
23078: PUSH
23079: LD_INT 33
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: ST_TO_ADDR
// if not tmp then
23099: LD_VAR 0 1
23103: NOT
23104: IFFALSE 23108
// exit ;
23106: GO 23145
// for i in tmp do
23108: LD_ADDR_VAR 0 2
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: FOR_IN
23119: IFFALSE 23143
// if IsControledBy ( i ) then
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 312
23130: IFFALSE 23141
// ComUnlink ( i ) ;
23132: LD_VAR 0 2
23136: PPUSH
23137: CALL_OW 136
23141: GO 23118
23143: POP
23144: POP
// end ;
23145: PPOPN 2
23147: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23148: LD_EXP 60
23152: PUSH
23153: LD_EXP 91
23157: AND
23158: IFFALSE 23298
23160: GO 23162
23162: DISABLE
23163: LD_INT 0
23165: PPUSH
23166: PPUSH
// begin ToLua ( displayPowell(); ) ;
23167: LD_STRING displayPowell();
23169: PPUSH
23170: CALL_OW 559
// uc_side := 0 ;
23174: LD_ADDR_OWVAR 20
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// uc_nation := 2 ;
23182: LD_ADDR_OWVAR 21
23186: PUSH
23187: LD_INT 2
23189: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23190: LD_ADDR_OWVAR 37
23194: PUSH
23195: LD_INT 14
23197: ST_TO_ADDR
// vc_engine := engine_siberite ;
23198: LD_ADDR_OWVAR 39
23202: PUSH
23203: LD_INT 3
23205: ST_TO_ADDR
// vc_control := control_apeman ;
23206: LD_ADDR_OWVAR 38
23210: PUSH
23211: LD_INT 5
23213: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23214: LD_ADDR_OWVAR 40
23218: PUSH
23219: LD_INT 29
23221: ST_TO_ADDR
// un := CreateVehicle ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: CALL_OW 45
23231: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_INT 1
23239: PPUSH
23240: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23244: LD_INT 35
23246: PPUSH
23247: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23251: LD_VAR 0 2
23255: PPUSH
23256: LD_INT 22
23258: PUSH
23259: LD_OWVAR 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PPUSH
23268: CALL_OW 69
23272: PPUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 74
23282: PPUSH
23283: CALL_OW 115
// until IsDead ( un ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: CALL_OW 301
23296: IFFALSE 23244
// end ;
23298: PPOPN 2
23300: END
// every 0 0$1 trigger StreamModeActive and sStu do
23301: LD_EXP 60
23305: PUSH
23306: LD_EXP 99
23310: AND
23311: IFFALSE 23327
23313: GO 23315
23315: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23316: LD_STRING displayStucuk();
23318: PPUSH
23319: CALL_OW 559
// ResetFog ;
23323: CALL_OW 335
// end ;
23327: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23328: LD_EXP 60
23332: PUSH
23333: LD_EXP 92
23337: AND
23338: IFFALSE 23479
23340: GO 23342
23342: DISABLE
23343: LD_INT 0
23345: PPUSH
23346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: LD_INT 22
23354: PUSH
23355: LD_OWVAR 2
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PPUSH
23378: CALL_OW 69
23382: ST_TO_ADDR
// if not tmp then
23383: LD_VAR 0 2
23387: NOT
23388: IFFALSE 23392
// exit ;
23390: GO 23479
// un := tmp [ rand ( 1 , tmp ) ] ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_VAR 0 2
23401: PUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_VAR 0 2
23409: PPUSH
23410: CALL_OW 12
23414: ARRAY
23415: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23416: LD_VAR 0 1
23420: PPUSH
23421: LD_INT 0
23423: PPUSH
23424: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23428: LD_VAR 0 1
23432: PPUSH
23433: LD_OWVAR 3
23437: PUSH
23438: LD_VAR 0 1
23442: DIFF
23443: PPUSH
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 74
23453: PPUSH
23454: CALL_OW 115
// wait ( 0 0$20 ) ;
23458: LD_INT 700
23460: PPUSH
23461: CALL_OW 67
// SetSide ( un , your_side ) ;
23465: LD_VAR 0 1
23469: PPUSH
23470: LD_OWVAR 2
23474: PPUSH
23475: CALL_OW 235
// end ;
23479: PPOPN 2
23481: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23482: LD_EXP 60
23486: PUSH
23487: LD_EXP 93
23491: AND
23492: IFFALSE 23598
23494: GO 23496
23496: DISABLE
23497: LD_INT 0
23499: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_OWVAR 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 30
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// if not depot then
23554: LD_VAR 0 1
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 23598
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23563: LD_VAR 0 1
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: CALL_OW 250
23576: PPUSH
23577: LD_VAR 0 1
23581: PUSH
23582: LD_INT 1
23584: ARRAY
23585: PPUSH
23586: CALL_OW 251
23590: PPUSH
23591: LD_INT 70
23593: PPUSH
23594: CALL_OW 495
// end ;
23598: PPOPN 1
23600: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23601: LD_EXP 60
23605: PUSH
23606: LD_EXP 94
23610: AND
23611: IFFALSE 23822
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23623: LD_ADDR_VAR 0 5
23627: PUSH
23628: LD_INT 22
23630: PUSH
23631: LD_OWVAR 2
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 21
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL_OW 69
23658: ST_TO_ADDR
// if not tmp then
23659: LD_VAR 0 5
23663: NOT
23664: IFFALSE 23668
// exit ;
23666: GO 23822
// for i in tmp do
23668: LD_ADDR_VAR 0 1
23672: PUSH
23673: LD_VAR 0 5
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23820
// begin d := rand ( 0 , 5 ) ;
23681: LD_ADDR_VAR 0 4
23685: PUSH
23686: LD_INT 0
23688: PPUSH
23689: LD_INT 5
23691: PPUSH
23692: CALL_OW 12
23696: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 250
23711: PPUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 12
23722: PPUSH
23723: CALL_OW 12
23727: PPUSH
23728: CALL_OW 272
23732: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 251
23747: PPUSH
23748: LD_VAR 0 4
23752: PPUSH
23753: LD_INT 3
23755: PPUSH
23756: LD_INT 12
23758: PPUSH
23759: CALL_OW 12
23763: PPUSH
23764: CALL_OW 273
23768: ST_TO_ADDR
// if ValidHex ( x , y ) then
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: CALL_OW 488
23783: IFFALSE 23818
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23785: LD_VAR 0 1
23789: PPUSH
23790: LD_VAR 0 2
23794: PPUSH
23795: LD_VAR 0 3
23799: PPUSH
23800: LD_INT 3
23802: PPUSH
23803: LD_INT 6
23805: PPUSH
23806: CALL_OW 12
23810: PPUSH
23811: LD_INT 1
23813: PPUSH
23814: CALL_OW 483
// end ;
23818: GO 23678
23820: POP
23821: POP
// end ;
23822: PPOPN 5
23824: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23825: LD_EXP 60
23829: PUSH
23830: LD_EXP 95
23834: AND
23835: IFFALSE 23929
23837: GO 23839
23839: DISABLE
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 32
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 69
23890: ST_TO_ADDR
// if not tmp then
23891: LD_VAR 0 2
23895: NOT
23896: IFFALSE 23900
// exit ;
23898: GO 23929
// for i in tmp do
23900: LD_ADDR_VAR 0 1
23904: PUSH
23905: LD_VAR 0 2
23909: PUSH
23910: FOR_IN
23911: IFFALSE 23927
// SetFuel ( i , 0 ) ;
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_INT 0
23920: PPUSH
23921: CALL_OW 240
23925: GO 23910
23927: POP
23928: POP
// end ;
23929: PPOPN 2
23931: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23932: LD_EXP 60
23936: PUSH
23937: LD_EXP 96
23941: AND
23942: IFFALSE 24008
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23950: LD_ADDR_VAR 0 1
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_OWVAR 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 30
23969: PUSH
23970: LD_INT 29
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PPUSH
23981: CALL_OW 69
23985: ST_TO_ADDR
// if not tmp then
23986: LD_VAR 0 1
23990: NOT
23991: IFFALSE 23995
// exit ;
23993: GO 24008
// DestroyUnit ( tmp [ 1 ] ) ;
23995: LD_VAR 0 1
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: PPUSH
24004: CALL_OW 65
// end ;
24008: PPOPN 1
24010: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24011: LD_EXP 60
24015: PUSH
24016: LD_EXP 98
24020: AND
24021: IFFALSE 24150
24023: GO 24025
24025: DISABLE
24026: LD_INT 0
24028: PPUSH
// begin uc_side := 0 ;
24029: LD_ADDR_OWVAR 20
24033: PUSH
24034: LD_INT 0
24036: ST_TO_ADDR
// uc_nation := nation_arabian ;
24037: LD_ADDR_OWVAR 21
24041: PUSH
24042: LD_INT 2
24044: ST_TO_ADDR
// hc_gallery :=  ;
24045: LD_ADDR_OWVAR 33
24049: PUSH
24050: LD_STRING 
24052: ST_TO_ADDR
// hc_name :=  ;
24053: LD_ADDR_OWVAR 26
24057: PUSH
24058: LD_STRING 
24060: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24061: LD_INT 1
24063: PPUSH
24064: LD_INT 11
24066: PPUSH
24067: LD_INT 10
24069: PPUSH
24070: CALL_OW 380
// un := CreateHuman ;
24074: LD_ADDR_VAR 0 1
24078: PUSH
24079: CALL_OW 44
24083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24084: LD_VAR 0 1
24088: PPUSH
24089: LD_INT 1
24091: PPUSH
24092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24096: LD_INT 35
24098: PPUSH
24099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24103: LD_VAR 0 1
24107: PPUSH
24108: LD_INT 22
24110: PUSH
24111: LD_OWVAR 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PPUSH
24120: CALL_OW 69
24124: PPUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 74
24134: PPUSH
24135: CALL_OW 115
// until IsDead ( un ) ;
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 301
24148: IFFALSE 24096
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24153: LD_EXP 60
24157: PUSH
24158: LD_EXP 100
24162: AND
24163: IFFALSE 24175
24165: GO 24167
24167: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24168: LD_STRING earthquake(getX(game), 0, 32)
24170: PPUSH
24171: CALL_OW 559
24175: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24176: LD_EXP 60
24180: PUSH
24181: LD_EXP 101
24185: AND
24186: IFFALSE 24277
24188: GO 24190
24190: DISABLE
24191: LD_INT 0
24193: PPUSH
// begin enable ;
24194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24195: LD_ADDR_VAR 0 1
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_OWVAR 2
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 21
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 33
24224: PUSH
24225: LD_INT 3
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: PPUSH
24237: CALL_OW 69
24241: ST_TO_ADDR
// if not tmp then
24242: LD_VAR 0 1
24246: NOT
24247: IFFALSE 24251
// exit ;
24249: GO 24277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24251: LD_VAR 0 1
24255: PUSH
24256: LD_INT 1
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL_OW 12
24268: ARRAY
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 234
// end ;
24277: PPOPN 1
24279: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24280: LD_EXP 60
24284: PUSH
24285: LD_EXP 102
24289: AND
24290: IFFALSE 24431
24292: GO 24294
24294: DISABLE
24295: LD_INT 0
24297: PPUSH
24298: PPUSH
24299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24300: LD_ADDR_VAR 0 3
24304: PUSH
24305: LD_INT 22
24307: PUSH
24308: LD_OWVAR 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 25
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PPUSH
24331: CALL_OW 69
24335: ST_TO_ADDR
// if not tmp then
24336: LD_VAR 0 3
24340: NOT
24341: IFFALSE 24345
// exit ;
24343: GO 24431
// un := tmp [ rand ( 1 , tmp ) ] ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_VAR 0 3
24354: PUSH
24355: LD_INT 1
24357: PPUSH
24358: LD_VAR 0 3
24362: PPUSH
24363: CALL_OW 12
24367: ARRAY
24368: ST_TO_ADDR
// if Crawls ( un ) then
24369: LD_VAR 0 2
24373: PPUSH
24374: CALL_OW 318
24378: IFFALSE 24389
// ComWalk ( un ) ;
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24389: LD_VAR 0 2
24393: PPUSH
24394: LD_INT 9
24396: PPUSH
24397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24401: LD_INT 28
24403: PPUSH
24404: LD_OWVAR 2
24408: PPUSH
24409: LD_INT 2
24411: PPUSH
24412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24416: LD_INT 29
24418: PPUSH
24419: LD_OWVAR 2
24423: PPUSH
24424: LD_INT 2
24426: PPUSH
24427: CALL_OW 322
// end ;
24431: PPOPN 3
24433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24434: LD_EXP 60
24438: PUSH
24439: LD_EXP 103
24443: AND
24444: IFFALSE 24555
24446: GO 24448
24448: DISABLE
24449: LD_INT 0
24451: PPUSH
24452: PPUSH
24453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24454: LD_ADDR_VAR 0 3
24458: PUSH
24459: LD_INT 22
24461: PUSH
24462: LD_OWVAR 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 25
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PPUSH
24485: CALL_OW 69
24489: ST_TO_ADDR
// if not tmp then
24490: LD_VAR 0 3
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24555
// un := tmp [ rand ( 1 , tmp ) ] ;
24499: LD_ADDR_VAR 0 2
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_INT 1
24511: PPUSH
24512: LD_VAR 0 3
24516: PPUSH
24517: CALL_OW 12
24521: ARRAY
24522: ST_TO_ADDR
// if Crawls ( un ) then
24523: LD_VAR 0 2
24527: PPUSH
24528: CALL_OW 318
24532: IFFALSE 24543
// ComWalk ( un ) ;
24534: LD_VAR 0 2
24538: PPUSH
24539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 8
24550: PPUSH
24551: CALL_OW 336
// end ;
24555: PPOPN 3
24557: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24558: LD_EXP 60
24562: PUSH
24563: LD_EXP 104
24567: AND
24568: IFFALSE 24712
24570: GO 24572
24572: DISABLE
24573: LD_INT 0
24575: PPUSH
24576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_OWVAR 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 34
24609: PUSH
24610: LD_INT 12
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 34
24619: PUSH
24620: LD_INT 51
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 34
24629: PUSH
24630: LD_INT 32
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: PPUSH
24648: CALL_OW 69
24652: ST_TO_ADDR
// if not tmp then
24653: LD_VAR 0 2
24657: NOT
24658: IFFALSE 24662
// exit ;
24660: GO 24712
// for i in tmp do
24662: LD_ADDR_VAR 0 1
24666: PUSH
24667: LD_VAR 0 2
24671: PUSH
24672: FOR_IN
24673: IFFALSE 24710
// if GetCargo ( i , mat_artifact ) = 0 then
24675: LD_VAR 0 1
24679: PPUSH
24680: LD_INT 4
24682: PPUSH
24683: CALL_OW 289
24687: PUSH
24688: LD_INT 0
24690: EQUAL
24691: IFFALSE 24708
// SetCargo ( i , mat_siberit , 100 ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_INT 3
24700: PPUSH
24701: LD_INT 100
24703: PPUSH
24704: CALL_OW 290
24708: GO 24672
24710: POP
24711: POP
// end ;
24712: PPOPN 2
24714: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24715: LD_EXP 60
24719: PUSH
24720: LD_EXP 105
24724: AND
24725: IFFALSE 24908
24727: GO 24729
24729: DISABLE
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24734: LD_ADDR_VAR 0 2
24738: PUSH
24739: LD_INT 22
24741: PUSH
24742: LD_OWVAR 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: ST_TO_ADDR
// if not tmp then
24756: LD_VAR 0 2
24760: NOT
24761: IFFALSE 24765
// exit ;
24763: GO 24908
// for i := 1 to 2 do
24765: LD_ADDR_VAR 0 1
24769: PUSH
24770: DOUBLE
24771: LD_INT 1
24773: DEC
24774: ST_TO_ADDR
24775: LD_INT 2
24777: PUSH
24778: FOR_TO
24779: IFFALSE 24906
// begin uc_side := your_side ;
24781: LD_ADDR_OWVAR 20
24785: PUSH
24786: LD_OWVAR 2
24790: ST_TO_ADDR
// uc_nation := nation_american ;
24791: LD_ADDR_OWVAR 21
24795: PUSH
24796: LD_INT 1
24798: ST_TO_ADDR
// vc_chassis := us_morphling ;
24799: LD_ADDR_OWVAR 37
24803: PUSH
24804: LD_INT 5
24806: ST_TO_ADDR
// vc_engine := engine_siberite ;
24807: LD_ADDR_OWVAR 39
24811: PUSH
24812: LD_INT 3
24814: ST_TO_ADDR
// vc_control := control_computer ;
24815: LD_ADDR_OWVAR 38
24819: PUSH
24820: LD_INT 3
24822: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24823: LD_ADDR_OWVAR 40
24827: PUSH
24828: LD_INT 10
24830: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24831: LD_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PPUSH
24840: CALL_OW 310
24844: NOT
24845: IFFALSE 24892
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24847: CALL_OW 45
24851: PPUSH
24852: LD_VAR 0 2
24856: PUSH
24857: LD_INT 1
24859: ARRAY
24860: PPUSH
24861: CALL_OW 250
24865: PPUSH
24866: LD_VAR 0 2
24870: PUSH
24871: LD_INT 1
24873: ARRAY
24874: PPUSH
24875: CALL_OW 251
24879: PPUSH
24880: LD_INT 12
24882: PPUSH
24883: LD_INT 1
24885: PPUSH
24886: CALL_OW 50
24890: GO 24904
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24892: CALL_OW 45
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: CALL_OW 51
// end ;
24904: GO 24778
24906: POP
24907: POP
// end ;
24908: PPOPN 2
24910: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24911: LD_EXP 60
24915: PUSH
24916: LD_EXP 106
24920: AND
24921: IFFALSE 25143
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24934: LD_ADDR_VAR 0 6
24938: PUSH
24939: LD_INT 22
24941: PUSH
24942: LD_OWVAR 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 21
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 23
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 69
24987: ST_TO_ADDR
// if not tmp then
24988: LD_VAR 0 6
24992: NOT
24993: IFFALSE 24997
// exit ;
24995: GO 25143
// s1 := rand ( 1 , 4 ) ;
24997: LD_ADDR_VAR 0 2
25001: PUSH
25002: LD_INT 1
25004: PPUSH
25005: LD_INT 4
25007: PPUSH
25008: CALL_OW 12
25012: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25013: LD_ADDR_VAR 0 4
25017: PUSH
25018: LD_VAR 0 6
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: PPUSH
25027: LD_VAR 0 2
25031: PPUSH
25032: CALL_OW 259
25036: ST_TO_ADDR
// if s1 = 1 then
25037: LD_VAR 0 2
25041: PUSH
25042: LD_INT 1
25044: EQUAL
25045: IFFALSE 25065
// s2 := rand ( 2 , 4 ) else
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 2
25054: PPUSH
25055: LD_INT 4
25057: PPUSH
25058: CALL_OW 12
25062: ST_TO_ADDR
25063: GO 25073
// s2 := 1 ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_INT 1
25072: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25073: LD_ADDR_VAR 0 5
25077: PUSH
25078: LD_VAR 0 6
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: CALL_OW 259
25096: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25097: LD_VAR 0 6
25101: PUSH
25102: LD_INT 1
25104: ARRAY
25105: PPUSH
25106: LD_VAR 0 2
25110: PPUSH
25111: LD_VAR 0 5
25115: PPUSH
25116: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25120: LD_VAR 0 6
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PPUSH
25129: LD_VAR 0 3
25133: PPUSH
25134: LD_VAR 0 4
25138: PPUSH
25139: CALL_OW 237
// end ;
25143: PPOPN 6
25145: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25146: LD_EXP 60
25150: PUSH
25151: LD_EXP 107
25155: AND
25156: IFFALSE 25235
25158: GO 25160
25160: DISABLE
25161: LD_INT 0
25163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25164: LD_ADDR_VAR 0 1
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_OWVAR 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 69
25199: ST_TO_ADDR
// if not tmp then
25200: LD_VAR 0 1
25204: NOT
25205: IFFALSE 25209
// exit ;
25207: GO 25235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25209: LD_VAR 0 1
25213: PUSH
25214: LD_INT 1
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL_OW 12
25226: ARRAY
25227: PPUSH
25228: LD_INT 1
25230: PPUSH
25231: CALL_OW 234
// end ;
25235: PPOPN 1
25237: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25238: LD_EXP 60
25242: PUSH
25243: LD_EXP 108
25247: AND
25248: IFFALSE 25360
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25257: LD_ADDR_VAR 0 2
25261: PUSH
25262: LD_INT 22
25264: PUSH
25265: LD_OWVAR 2
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 27
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 30
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 30
25299: PUSH
25300: LD_INT 28
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: ST_TO_ADDR
// if not tmp then
25322: LD_VAR 0 2
25326: NOT
25327: IFFALSE 25331
// exit ;
25329: GO 25360
// for i in tmp do
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25358
// SetLives ( i , 1 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: CALL_OW 234
25356: GO 25341
25358: POP
25359: POP
// end ;
25360: PPOPN 2
25362: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25363: LD_EXP 60
25367: PUSH
25368: LD_EXP 109
25372: AND
25373: IFFALSE 25660
25375: GO 25377
25377: DISABLE
25378: LD_INT 0
25380: PPUSH
25381: PPUSH
25382: PPUSH
// begin i := rand ( 1 , 7 ) ;
25383: LD_ADDR_VAR 0 1
25387: PUSH
25388: LD_INT 1
25390: PPUSH
25391: LD_INT 7
25393: PPUSH
25394: CALL_OW 12
25398: ST_TO_ADDR
// case i of 1 :
25399: LD_VAR 0 1
25403: PUSH
25404: LD_INT 1
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25422
25412: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25413: LD_STRING earthquake(getX(game), 0, 32)
25415: PPUSH
25416: CALL_OW 559
25420: GO 25660
25422: LD_INT 2
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25444
25430: POP
// begin ToLua ( displayStucuk(); ) ;
25431: LD_STRING displayStucuk();
25433: PPUSH
25434: CALL_OW 559
// ResetFog ;
25438: CALL_OW 335
// end ; 3 :
25442: GO 25660
25444: LD_INT 3
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 25556
25452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25453: LD_ADDR_VAR 0 2
25457: PUSH
25458: LD_INT 22
25460: PUSH
25461: LD_OWVAR 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 25
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PPUSH
25484: CALL_OW 69
25488: ST_TO_ADDR
// if not tmp then
25489: LD_VAR 0 2
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25660
// un := tmp [ rand ( 1 , tmp ) ] ;
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_VAR 0 2
25507: PUSH
25508: LD_INT 1
25510: PPUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: CALL_OW 12
25520: ARRAY
25521: ST_TO_ADDR
// if Crawls ( un ) then
25522: LD_VAR 0 3
25526: PPUSH
25527: CALL_OW 318
25531: IFFALSE 25542
// ComWalk ( un ) ;
25533: LD_VAR 0 3
25537: PPUSH
25538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25542: LD_VAR 0 3
25546: PPUSH
25547: LD_INT 8
25549: PPUSH
25550: CALL_OW 336
// end ; 4 :
25554: GO 25660
25556: LD_INT 4
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25638
25564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25565: LD_ADDR_VAR 0 2
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_OWVAR 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 29
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: ST_TO_ADDR
// if not tmp then
25601: LD_VAR 0 2
25605: NOT
25606: IFFALSE 25610
// exit ;
25608: GO 25660
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25610: LD_VAR 0 2
25614: PUSH
25615: LD_INT 1
25617: ARRAY
25618: PPUSH
25619: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25623: LD_VAR 0 2
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: CALL_OW 65
// end ; 5 .. 7 :
25636: GO 25660
25638: LD_INT 5
25640: DOUBLE
25641: GREATEREQUAL
25642: IFFALSE 25650
25644: LD_INT 7
25646: DOUBLE
25647: LESSEQUAL
25648: IFTRUE 25652
25650: GO 25659
25652: POP
// StreamSibBomb ; end ;
25653: CALL 21897 0 0
25657: GO 25660
25659: POP
// end ;
25660: PPOPN 3
25662: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25663: LD_EXP 60
25667: PUSH
25668: LD_EXP 110
25672: AND
25673: IFFALSE 25829
25675: GO 25677
25677: DISABLE
25678: LD_INT 0
25680: PPUSH
25681: PPUSH
25682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25683: LD_ADDR_VAR 0 2
25687: PUSH
25688: LD_INT 81
25690: PUSH
25691: LD_OWVAR 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 21
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 21
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PPUSH
25732: CALL_OW 69
25736: ST_TO_ADDR
// if not tmp then
25737: LD_VAR 0 2
25741: NOT
25742: IFFALSE 25746
// exit ;
25744: GO 25829
// p := 0 ;
25746: LD_ADDR_VAR 0 3
25750: PUSH
25751: LD_INT 0
25753: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25754: LD_INT 35
25756: PPUSH
25757: CALL_OW 67
// p := p + 1 ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_VAR 0 3
25770: PUSH
25771: LD_INT 1
25773: PLUS
25774: ST_TO_ADDR
// for i in tmp do
25775: LD_ADDR_VAR 0 1
25779: PUSH
25780: LD_VAR 0 2
25784: PUSH
25785: FOR_IN
25786: IFFALSE 25817
// if GetLives ( i ) < 1000 then
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 256
25797: PUSH
25798: LD_INT 1000
25800: LESS
25801: IFFALSE 25815
// SetLives ( i , 1000 ) ;
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_INT 1000
25810: PPUSH
25811: CALL_OW 234
25815: GO 25785
25817: POP
25818: POP
// until p > 20 ;
25819: LD_VAR 0 3
25823: PUSH
25824: LD_INT 20
25826: GREATER
25827: IFFALSE 25754
// end ;
25829: PPOPN 3
25831: END
// every 0 0$1 trigger StreamModeActive and sTime do
25832: LD_EXP 60
25836: PUSH
25837: LD_EXP 111
25841: AND
25842: IFFALSE 25877
25844: GO 25846
25846: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25847: LD_INT 28
25849: PPUSH
25850: LD_OWVAR 2
25854: PPUSH
25855: LD_INT 2
25857: PPUSH
25858: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25862: LD_INT 30
25864: PPUSH
25865: LD_OWVAR 2
25869: PPUSH
25870: LD_INT 2
25872: PPUSH
25873: CALL_OW 322
// end ;
25877: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25878: LD_EXP 60
25882: PUSH
25883: LD_EXP 112
25887: AND
25888: IFFALSE 26009
25890: GO 25892
25892: DISABLE
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25897: LD_ADDR_VAR 0 2
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_OWVAR 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 21
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 3
25926: PUSH
25927: LD_INT 23
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: ST_TO_ADDR
// if not tmp then
25951: LD_VAR 0 2
25955: NOT
25956: IFFALSE 25960
// exit ;
25958: GO 26009
// for i in tmp do
25960: LD_ADDR_VAR 0 1
25964: PUSH
25965: LD_VAR 0 2
25969: PUSH
25970: FOR_IN
25971: IFFALSE 26007
// begin if Crawls ( i ) then
25973: LD_VAR 0 1
25977: PPUSH
25978: CALL_OW 318
25982: IFFALSE 25993
// ComWalk ( i ) ;
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL_OW 138
// SetClass ( i , 2 ) ;
25993: LD_VAR 0 1
25997: PPUSH
25998: LD_INT 2
26000: PPUSH
26001: CALL_OW 336
// end ;
26005: GO 25970
26007: POP
26008: POP
// end ;
26009: PPOPN 2
26011: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26012: LD_EXP 60
26016: PUSH
26017: LD_EXP 113
26021: AND
26022: IFFALSE 26310
26024: GO 26026
26026: DISABLE
26027: LD_INT 0
26029: PPUSH
26030: PPUSH
26031: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26032: LD_OWVAR 2
26036: PPUSH
26037: LD_INT 9
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: LD_INT 1
26045: PPUSH
26046: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26050: LD_INT 9
26052: PPUSH
26053: LD_OWVAR 2
26057: PPUSH
26058: CALL_OW 343
// uc_side := 9 ;
26062: LD_ADDR_OWVAR 20
26066: PUSH
26067: LD_INT 9
26069: ST_TO_ADDR
// uc_nation := 2 ;
26070: LD_ADDR_OWVAR 21
26074: PUSH
26075: LD_INT 2
26077: ST_TO_ADDR
// hc_name := Dark Warrior ;
26078: LD_ADDR_OWVAR 26
26082: PUSH
26083: LD_STRING Dark Warrior
26085: ST_TO_ADDR
// hc_gallery :=  ;
26086: LD_ADDR_OWVAR 33
26090: PUSH
26091: LD_STRING 
26093: ST_TO_ADDR
// hc_noskilllimit := true ;
26094: LD_ADDR_OWVAR 76
26098: PUSH
26099: LD_INT 1
26101: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26102: LD_ADDR_OWVAR 31
26106: PUSH
26107: LD_INT 30
26109: PUSH
26110: LD_INT 30
26112: PUSH
26113: LD_INT 30
26115: PUSH
26116: LD_INT 30
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// un := CreateHuman ;
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: CALL_OW 44
26134: ST_TO_ADDR
// hc_noskilllimit := false ;
26135: LD_ADDR_OWVAR 76
26139: PUSH
26140: LD_INT 0
26142: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26143: LD_VAR 0 3
26147: PPUSH
26148: LD_INT 1
26150: PPUSH
26151: CALL_OW 51
// ToLua ( playRanger() ) ;
26155: LD_STRING playRanger()
26157: PPUSH
26158: CALL_OW 559
// p := 0 ;
26162: LD_ADDR_VAR 0 2
26166: PUSH
26167: LD_INT 0
26169: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26170: LD_INT 35
26172: PPUSH
26173: CALL_OW 67
// p := p + 1 ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_VAR 0 2
26186: PUSH
26187: LD_INT 1
26189: PLUS
26190: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26191: LD_VAR 0 3
26195: PPUSH
26196: CALL_OW 256
26200: PUSH
26201: LD_INT 1000
26203: LESS
26204: IFFALSE 26218
// SetLives ( un , 1000 ) ;
26206: LD_VAR 0 3
26210: PPUSH
26211: LD_INT 1000
26213: PPUSH
26214: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26218: LD_VAR 0 3
26222: PPUSH
26223: LD_INT 81
26225: PUSH
26226: LD_OWVAR 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 91
26237: PUSH
26238: LD_VAR 0 3
26242: PUSH
26243: LD_INT 30
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PPUSH
26255: CALL_OW 69
26259: PPUSH
26260: LD_VAR 0 3
26264: PPUSH
26265: CALL_OW 74
26269: PPUSH
26270: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26274: LD_VAR 0 2
26278: PUSH
26279: LD_INT 80
26281: GREATER
26282: PUSH
26283: LD_VAR 0 3
26287: PPUSH
26288: CALL_OW 301
26292: OR
26293: IFFALSE 26170
// if un then
26295: LD_VAR 0 3
26299: IFFALSE 26310
// RemoveUnit ( un ) ;
26301: LD_VAR 0 3
26305: PPUSH
26306: CALL_OW 64
// end ;
26310: PPOPN 3
26312: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26313: LD_EXP 114
26317: IFFALSE 26433
26319: GO 26321
26321: DISABLE
26322: LD_INT 0
26324: PPUSH
26325: PPUSH
26326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_INT 81
26334: PUSH
26335: LD_OWVAR 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26363: LD_STRING playComputer()
26365: PPUSH
26366: CALL_OW 559
// if not tmp then
26370: LD_VAR 0 2
26374: NOT
26375: IFFALSE 26379
// exit ;
26377: GO 26433
// for i in tmp do
26379: LD_ADDR_VAR 0 1
26383: PUSH
26384: LD_VAR 0 2
26388: PUSH
26389: FOR_IN
26390: IFFALSE 26431
// for j := 1 to 4 do
26392: LD_ADDR_VAR 0 3
26396: PUSH
26397: DOUBLE
26398: LD_INT 1
26400: DEC
26401: ST_TO_ADDR
26402: LD_INT 4
26404: PUSH
26405: FOR_TO
26406: IFFALSE 26427
// SetSkill ( i , j , 10 ) ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 3
26417: PPUSH
26418: LD_INT 10
26420: PPUSH
26421: CALL_OW 237
26425: GO 26405
26427: POP
26428: POP
26429: GO 26389
26431: POP
26432: POP
// end ;
26433: PPOPN 3
26435: END
// every 0 0$1 trigger s30 do var i , tmp ;
26436: LD_EXP 115
26440: IFFALSE 26509
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26449: LD_ADDR_VAR 0 2
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_OWVAR 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 69
26470: ST_TO_ADDR
// if not tmp then
26471: LD_VAR 0 2
26475: NOT
26476: IFFALSE 26480
// exit ;
26478: GO 26509
// for i in tmp do
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_VAR 0 2
26489: PUSH
26490: FOR_IN
26491: IFFALSE 26507
// SetLives ( i , 300 ) ;
26493: LD_VAR 0 1
26497: PPUSH
26498: LD_INT 300
26500: PPUSH
26501: CALL_OW 234
26505: GO 26490
26507: POP
26508: POP
// end ;
26509: PPOPN 2
26511: END
// every 0 0$1 trigger s60 do var i , tmp ;
26512: LD_EXP 116
26516: IFFALSE 26585
26518: GO 26520
26520: DISABLE
26521: LD_INT 0
26523: PPUSH
26524: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26525: LD_ADDR_VAR 0 2
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: LD_OWVAR 2
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PPUSH
26542: CALL_OW 69
26546: ST_TO_ADDR
// if not tmp then
26547: LD_VAR 0 2
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26585
// for i in tmp do
26556: LD_ADDR_VAR 0 1
26560: PUSH
26561: LD_VAR 0 2
26565: PUSH
26566: FOR_IN
26567: IFFALSE 26583
// SetLives ( i , 600 ) ;
26569: LD_VAR 0 1
26573: PPUSH
26574: LD_INT 600
26576: PPUSH
26577: CALL_OW 234
26581: GO 26566
26583: POP
26584: POP
// end ;
26585: PPOPN 2
26587: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26588: LD_INT 0
26590: PPUSH
// case cmd of 301 :
26591: LD_VAR 0 1
26595: PUSH
26596: LD_INT 301
26598: DOUBLE
26599: EQUAL
26600: IFTRUE 26604
26602: GO 26636
26604: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26605: LD_VAR 0 6
26609: PPUSH
26610: LD_VAR 0 7
26614: PPUSH
26615: LD_VAR 0 8
26619: PPUSH
26620: LD_VAR 0 4
26624: PPUSH
26625: LD_VAR 0 5
26629: PPUSH
26630: CALL 27837 0 5
26634: GO 26757
26636: LD_INT 302
26638: DOUBLE
26639: EQUAL
26640: IFTRUE 26644
26642: GO 26681
26644: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26645: LD_VAR 0 6
26649: PPUSH
26650: LD_VAR 0 7
26654: PPUSH
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_VAR 0 9
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: CALL 27928 0 6
26679: GO 26757
26681: LD_INT 303
26683: DOUBLE
26684: EQUAL
26685: IFTRUE 26689
26687: GO 26726
26689: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26690: LD_VAR 0 6
26694: PPUSH
26695: LD_VAR 0 7
26699: PPUSH
26700: LD_VAR 0 8
26704: PPUSH
26705: LD_VAR 0 9
26709: PPUSH
26710: LD_VAR 0 4
26714: PPUSH
26715: LD_VAR 0 5
26719: PPUSH
26720: CALL 26762 0 6
26724: GO 26757
26726: LD_INT 304
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26756
26734: POP
// hHackTeleport ( unit , x , y ) ; end ;
26735: LD_VAR 0 2
26739: PPUSH
26740: LD_VAR 0 4
26744: PPUSH
26745: LD_VAR 0 5
26749: PPUSH
26750: CALL 28521 0 3
26754: GO 26757
26756: POP
// end ;
26757: LD_VAR 0 12
26761: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26762: LD_INT 0
26764: PPUSH
26765: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 1
26773: LESS
26774: PUSH
26775: LD_VAR 0 1
26779: PUSH
26780: LD_INT 3
26782: GREATER
26783: OR
26784: PUSH
26785: LD_VAR 0 5
26789: PPUSH
26790: LD_VAR 0 6
26794: PPUSH
26795: CALL_OW 428
26799: OR
26800: IFFALSE 26804
// exit ;
26802: GO 27524
// uc_side := your_side ;
26804: LD_ADDR_OWVAR 20
26808: PUSH
26809: LD_OWVAR 2
26813: ST_TO_ADDR
// uc_nation := nation ;
26814: LD_ADDR_OWVAR 21
26818: PUSH
26819: LD_VAR 0 1
26823: ST_TO_ADDR
// bc_level = 1 ;
26824: LD_ADDR_OWVAR 43
26828: PUSH
26829: LD_INT 1
26831: ST_TO_ADDR
// case btype of 1 :
26832: LD_VAR 0 2
26836: PUSH
26837: LD_INT 1
26839: DOUBLE
26840: EQUAL
26841: IFTRUE 26845
26843: GO 26856
26845: POP
// bc_type := b_depot ; 2 :
26846: LD_ADDR_OWVAR 42
26850: PUSH
26851: LD_INT 0
26853: ST_TO_ADDR
26854: GO 27468
26856: LD_INT 2
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26864
26862: GO 26875
26864: POP
// bc_type := b_warehouse ; 3 :
26865: LD_ADDR_OWVAR 42
26869: PUSH
26870: LD_INT 1
26872: ST_TO_ADDR
26873: GO 27468
26875: LD_INT 3
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26894
26883: POP
// bc_type := b_lab ; 4 .. 9 :
26884: LD_ADDR_OWVAR 42
26888: PUSH
26889: LD_INT 6
26891: ST_TO_ADDR
26892: GO 27468
26894: LD_INT 4
26896: DOUBLE
26897: GREATEREQUAL
26898: IFFALSE 26906
26900: LD_INT 9
26902: DOUBLE
26903: LESSEQUAL
26904: IFTRUE 26908
26906: GO 26960
26908: POP
// begin bc_type := b_lab_half ;
26909: LD_ADDR_OWVAR 42
26913: PUSH
26914: LD_INT 7
26916: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26917: LD_ADDR_OWVAR 44
26921: PUSH
26922: LD_INT 10
26924: PUSH
26925: LD_INT 11
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: LD_INT 15
26933: PUSH
26934: LD_INT 14
26936: PUSH
26937: LD_INT 13
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: PUSH
26948: LD_VAR 0 2
26952: PUSH
26953: LD_INT 3
26955: MINUS
26956: ARRAY
26957: ST_TO_ADDR
// end ; 10 .. 13 :
26958: GO 27468
26960: LD_INT 10
26962: DOUBLE
26963: GREATEREQUAL
26964: IFFALSE 26972
26966: LD_INT 13
26968: DOUBLE
26969: LESSEQUAL
26970: IFTRUE 26974
26972: GO 27051
26974: POP
// begin bc_type := b_lab_full ;
26975: LD_ADDR_OWVAR 42
26979: PUSH
26980: LD_INT 8
26982: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26983: LD_ADDR_OWVAR 44
26987: PUSH
26988: LD_INT 10
26990: PUSH
26991: LD_INT 12
26993: PUSH
26994: LD_INT 14
26996: PUSH
26997: LD_INT 13
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: PUSH
27006: LD_VAR 0 2
27010: PUSH
27011: LD_INT 9
27013: MINUS
27014: ARRAY
27015: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27016: LD_ADDR_OWVAR 45
27020: PUSH
27021: LD_INT 11
27023: PUSH
27024: LD_INT 15
27026: PUSH
27027: LD_INT 12
27029: PUSH
27030: LD_INT 15
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: PUSH
27039: LD_VAR 0 2
27043: PUSH
27044: LD_INT 9
27046: MINUS
27047: ARRAY
27048: ST_TO_ADDR
// end ; 14 :
27049: GO 27468
27051: LD_INT 14
27053: DOUBLE
27054: EQUAL
27055: IFTRUE 27059
27057: GO 27070
27059: POP
// bc_type := b_workshop ; 15 :
27060: LD_ADDR_OWVAR 42
27064: PUSH
27065: LD_INT 2
27067: ST_TO_ADDR
27068: GO 27468
27070: LD_INT 15
27072: DOUBLE
27073: EQUAL
27074: IFTRUE 27078
27076: GO 27089
27078: POP
// bc_type := b_factory ; 16 :
27079: LD_ADDR_OWVAR 42
27083: PUSH
27084: LD_INT 3
27086: ST_TO_ADDR
27087: GO 27468
27089: LD_INT 16
27091: DOUBLE
27092: EQUAL
27093: IFTRUE 27097
27095: GO 27108
27097: POP
// bc_type := b_ext_gun ; 17 :
27098: LD_ADDR_OWVAR 42
27102: PUSH
27103: LD_INT 17
27105: ST_TO_ADDR
27106: GO 27468
27108: LD_INT 17
27110: DOUBLE
27111: EQUAL
27112: IFTRUE 27116
27114: GO 27144
27116: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27117: LD_ADDR_OWVAR 42
27121: PUSH
27122: LD_INT 19
27124: PUSH
27125: LD_INT 23
27127: PUSH
27128: LD_INT 19
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: PUSH
27136: LD_VAR 0 1
27140: ARRAY
27141: ST_TO_ADDR
27142: GO 27468
27144: LD_INT 18
27146: DOUBLE
27147: EQUAL
27148: IFTRUE 27152
27150: GO 27163
27152: POP
// bc_type := b_ext_radar ; 19 :
27153: LD_ADDR_OWVAR 42
27157: PUSH
27158: LD_INT 20
27160: ST_TO_ADDR
27161: GO 27468
27163: LD_INT 19
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27182
27171: POP
// bc_type := b_ext_radio ; 20 :
27172: LD_ADDR_OWVAR 42
27176: PUSH
27177: LD_INT 22
27179: ST_TO_ADDR
27180: GO 27468
27182: LD_INT 20
27184: DOUBLE
27185: EQUAL
27186: IFTRUE 27190
27188: GO 27201
27190: POP
// bc_type := b_ext_siberium ; 21 :
27191: LD_ADDR_OWVAR 42
27195: PUSH
27196: LD_INT 21
27198: ST_TO_ADDR
27199: GO 27468
27201: LD_INT 21
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27220
27209: POP
// bc_type := b_ext_computer ; 22 :
27210: LD_ADDR_OWVAR 42
27214: PUSH
27215: LD_INT 24
27217: ST_TO_ADDR
27218: GO 27468
27220: LD_INT 22
27222: DOUBLE
27223: EQUAL
27224: IFTRUE 27228
27226: GO 27239
27228: POP
// bc_type := b_ext_track ; 23 :
27229: LD_ADDR_OWVAR 42
27233: PUSH
27234: LD_INT 16
27236: ST_TO_ADDR
27237: GO 27468
27239: LD_INT 23
27241: DOUBLE
27242: EQUAL
27243: IFTRUE 27247
27245: GO 27258
27247: POP
// bc_type := b_ext_laser ; 24 :
27248: LD_ADDR_OWVAR 42
27252: PUSH
27253: LD_INT 25
27255: ST_TO_ADDR
27256: GO 27468
27258: LD_INT 24
27260: DOUBLE
27261: EQUAL
27262: IFTRUE 27266
27264: GO 27277
27266: POP
// bc_type := b_control_tower ; 25 :
27267: LD_ADDR_OWVAR 42
27271: PUSH
27272: LD_INT 36
27274: ST_TO_ADDR
27275: GO 27468
27277: LD_INT 25
27279: DOUBLE
27280: EQUAL
27281: IFTRUE 27285
27283: GO 27296
27285: POP
// bc_type := b_breastwork ; 26 :
27286: LD_ADDR_OWVAR 42
27290: PUSH
27291: LD_INT 31
27293: ST_TO_ADDR
27294: GO 27468
27296: LD_INT 26
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27315
27304: POP
// bc_type := b_bunker ; 27 :
27305: LD_ADDR_OWVAR 42
27309: PUSH
27310: LD_INT 32
27312: ST_TO_ADDR
27313: GO 27468
27315: LD_INT 27
27317: DOUBLE
27318: EQUAL
27319: IFTRUE 27323
27321: GO 27334
27323: POP
// bc_type := b_turret ; 28 :
27324: LD_ADDR_OWVAR 42
27328: PUSH
27329: LD_INT 33
27331: ST_TO_ADDR
27332: GO 27468
27334: LD_INT 28
27336: DOUBLE
27337: EQUAL
27338: IFTRUE 27342
27340: GO 27353
27342: POP
// bc_type := b_armoury ; 29 :
27343: LD_ADDR_OWVAR 42
27347: PUSH
27348: LD_INT 4
27350: ST_TO_ADDR
27351: GO 27468
27353: LD_INT 29
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27372
27361: POP
// bc_type := b_barracks ; 30 :
27362: LD_ADDR_OWVAR 42
27366: PUSH
27367: LD_INT 5
27369: ST_TO_ADDR
27370: GO 27468
27372: LD_INT 30
27374: DOUBLE
27375: EQUAL
27376: IFTRUE 27380
27378: GO 27391
27380: POP
// bc_type := b_solar_power ; 31 :
27381: LD_ADDR_OWVAR 42
27385: PUSH
27386: LD_INT 27
27388: ST_TO_ADDR
27389: GO 27468
27391: LD_INT 31
27393: DOUBLE
27394: EQUAL
27395: IFTRUE 27399
27397: GO 27410
27399: POP
// bc_type := b_oil_power ; 32 :
27400: LD_ADDR_OWVAR 42
27404: PUSH
27405: LD_INT 26
27407: ST_TO_ADDR
27408: GO 27468
27410: LD_INT 32
27412: DOUBLE
27413: EQUAL
27414: IFTRUE 27418
27416: GO 27429
27418: POP
// bc_type := b_siberite_power ; 33 :
27419: LD_ADDR_OWVAR 42
27423: PUSH
27424: LD_INT 28
27426: ST_TO_ADDR
27427: GO 27468
27429: LD_INT 33
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27448
27437: POP
// bc_type := b_oil_mine ; 34 :
27438: LD_ADDR_OWVAR 42
27442: PUSH
27443: LD_INT 29
27445: ST_TO_ADDR
27446: GO 27468
27448: LD_INT 34
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27456
27454: GO 27467
27456: POP
// bc_type := b_siberite_mine ; end ;
27457: LD_ADDR_OWVAR 42
27461: PUSH
27462: LD_INT 30
27464: ST_TO_ADDR
27465: GO 27468
27467: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27468: LD_ADDR_VAR 0 8
27472: PUSH
27473: LD_VAR 0 5
27477: PPUSH
27478: LD_VAR 0 6
27482: PPUSH
27483: LD_VAR 0 3
27487: PPUSH
27488: CALL_OW 47
27492: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27493: LD_OWVAR 42
27497: PUSH
27498: LD_INT 32
27500: PUSH
27501: LD_INT 33
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: IN
27508: IFFALSE 27524
// PlaceWeaponTurret ( b , weapon ) ;
27510: LD_VAR 0 8
27514: PPUSH
27515: LD_VAR 0 4
27519: PPUSH
27520: CALL_OW 431
// end ;
27524: LD_VAR 0 7
27528: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27529: LD_INT 0
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27535: LD_ADDR_VAR 0 4
27539: PUSH
27540: LD_INT 22
27542: PUSH
27543: LD_OWVAR 2
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 30
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 30
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: ST_TO_ADDR
// if not tmp then
27589: LD_VAR 0 4
27593: NOT
27594: IFFALSE 27598
// exit ;
27596: GO 27657
// for i in tmp do
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: LD_VAR 0 4
27607: PUSH
27608: FOR_IN
27609: IFFALSE 27655
// for j = 1 to 3 do
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: DOUBLE
27617: LD_INT 1
27619: DEC
27620: ST_TO_ADDR
27621: LD_INT 3
27623: PUSH
27624: FOR_TO
27625: IFFALSE 27651
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27627: LD_VAR 0 2
27631: PPUSH
27632: CALL_OW 274
27636: PPUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: LD_INT 99999
27644: PPUSH
27645: CALL_OW 277
27649: GO 27624
27651: POP
27652: POP
27653: GO 27608
27655: POP
27656: POP
// end ;
27657: LD_VAR 0 1
27661: RET
// export function hHackSetLevel10 ; var i , j ; begin
27662: LD_INT 0
27664: PPUSH
27665: PPUSH
27666: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27667: LD_ADDR_VAR 0 2
27671: PUSH
27672: LD_INT 21
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PPUSH
27682: CALL_OW 69
27686: PUSH
27687: FOR_IN
27688: IFFALSE 27740
// if IsSelected ( i ) then
27690: LD_VAR 0 2
27694: PPUSH
27695: CALL_OW 306
27699: IFFALSE 27738
// begin for j := 1 to 4 do
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: DOUBLE
27707: LD_INT 1
27709: DEC
27710: ST_TO_ADDR
27711: LD_INT 4
27713: PUSH
27714: FOR_TO
27715: IFFALSE 27736
// SetSkill ( i , j , 10 ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_VAR 0 3
27726: PPUSH
27727: LD_INT 10
27729: PPUSH
27730: CALL_OW 237
27734: GO 27714
27736: POP
27737: POP
// end ;
27738: GO 27687
27740: POP
27741: POP
// end ;
27742: LD_VAR 0 1
27746: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
27751: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 21
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: PUSH
27788: FOR_IN
27789: IFFALSE 27830
// begin for j := 1 to 4 do
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: DOUBLE
27797: LD_INT 1
27799: DEC
27800: ST_TO_ADDR
27801: LD_INT 4
27803: PUSH
27804: FOR_TO
27805: IFFALSE 27826
// SetSkill ( i , j , 10 ) ;
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 3
27816: PPUSH
27817: LD_INT 10
27819: PPUSH
27820: CALL_OW 237
27824: GO 27804
27826: POP
27827: POP
// end ;
27828: GO 27788
27830: POP
27831: POP
// end ;
27832: LD_VAR 0 1
27836: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27837: LD_INT 0
27839: PPUSH
// uc_side := your_side ;
27840: LD_ADDR_OWVAR 20
27844: PUSH
27845: LD_OWVAR 2
27849: ST_TO_ADDR
// uc_nation := nation ;
27850: LD_ADDR_OWVAR 21
27854: PUSH
27855: LD_VAR 0 1
27859: ST_TO_ADDR
// InitHc ;
27860: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27864: LD_INT 0
27866: PPUSH
27867: LD_VAR 0 2
27871: PPUSH
27872: LD_VAR 0 3
27876: PPUSH
27877: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27881: LD_VAR 0 4
27885: PPUSH
27886: LD_VAR 0 5
27890: PPUSH
27891: CALL_OW 428
27895: PUSH
27896: LD_INT 0
27898: EQUAL
27899: IFFALSE 27923
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27901: CALL_OW 44
27905: PPUSH
27906: LD_VAR 0 4
27910: PPUSH
27911: LD_VAR 0 5
27915: PPUSH
27916: LD_INT 1
27918: PPUSH
27919: CALL_OW 48
// end ;
27923: LD_VAR 0 6
27927: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
// uc_side := your_side ;
27932: LD_ADDR_OWVAR 20
27936: PUSH
27937: LD_OWVAR 2
27941: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27942: LD_VAR 0 1
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 4
27958: PUSH
27959: LD_INT 5
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: IN
27969: IFFALSE 27981
// uc_nation := nation_american else
27971: LD_ADDR_OWVAR 21
27975: PUSH
27976: LD_INT 1
27978: ST_TO_ADDR
27979: GO 28024
// if chassis in [ 11 , 12 , 13 , 14 ] then
27981: LD_VAR 0 1
27985: PUSH
27986: LD_INT 11
27988: PUSH
27989: LD_INT 12
27991: PUSH
27992: LD_INT 13
27994: PUSH
27995: LD_INT 14
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: IN
28004: IFFALSE 28016
// uc_nation := nation_arabian else
28006: LD_ADDR_OWVAR 21
28010: PUSH
28011: LD_INT 2
28013: ST_TO_ADDR
28014: GO 28024
// uc_nation := nation_russian ;
28016: LD_ADDR_OWVAR 21
28020: PUSH
28021: LD_INT 3
28023: ST_TO_ADDR
// vc_chassis := chassis ;
28024: LD_ADDR_OWVAR 37
28028: PUSH
28029: LD_VAR 0 1
28033: ST_TO_ADDR
// vc_engine := engine ;
28034: LD_ADDR_OWVAR 39
28038: PUSH
28039: LD_VAR 0 2
28043: ST_TO_ADDR
// vc_control := control ;
28044: LD_ADDR_OWVAR 38
28048: PUSH
28049: LD_VAR 0 3
28053: ST_TO_ADDR
// vc_weapon := weapon ;
28054: LD_ADDR_OWVAR 40
28058: PUSH
28059: LD_VAR 0 4
28063: ST_TO_ADDR
// un := CreateVehicle ;
28064: LD_ADDR_VAR 0 8
28068: PUSH
28069: CALL_OW 45
28073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28074: LD_VAR 0 8
28078: PPUSH
28079: LD_INT 0
28081: PPUSH
28082: LD_INT 5
28084: PPUSH
28085: CALL_OW 12
28089: PPUSH
28090: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28094: LD_VAR 0 8
28098: PPUSH
28099: LD_VAR 0 5
28103: PPUSH
28104: LD_VAR 0 6
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 48
// end ;
28116: LD_VAR 0 7
28120: RET
// export hInvincible ; every 1 do
28121: GO 28123
28123: DISABLE
// hInvincible := [ ] ;
28124: LD_ADDR_EXP 117
28128: PUSH
28129: EMPTY
28130: ST_TO_ADDR
28131: END
// every 10 do var i ;
28132: GO 28134
28134: DISABLE
28135: LD_INT 0
28137: PPUSH
// begin enable ;
28138: ENABLE
// if not hInvincible then
28139: LD_EXP 117
28143: NOT
28144: IFFALSE 28148
// exit ;
28146: GO 28192
// for i in hInvincible do
28148: LD_ADDR_VAR 0 1
28152: PUSH
28153: LD_EXP 117
28157: PUSH
28158: FOR_IN
28159: IFFALSE 28190
// if GetLives ( i ) < 1000 then
28161: LD_VAR 0 1
28165: PPUSH
28166: CALL_OW 256
28170: PUSH
28171: LD_INT 1000
28173: LESS
28174: IFFALSE 28188
// SetLives ( i , 1000 ) ;
28176: LD_VAR 0 1
28180: PPUSH
28181: LD_INT 1000
28183: PPUSH
28184: CALL_OW 234
28188: GO 28158
28190: POP
28191: POP
// end ;
28192: PPOPN 1
28194: END
// export function hHackInvincible ; var i ; begin
28195: LD_INT 0
28197: PPUSH
28198: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28199: LD_ADDR_VAR 0 2
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: LD_INT 21
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 21
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: PPUSH
28232: CALL_OW 69
28236: PUSH
28237: FOR_IN
28238: IFFALSE 28299
// if IsSelected ( i ) then
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 306
28249: IFFALSE 28297
// begin if i in hInvincible then
28251: LD_VAR 0 2
28255: PUSH
28256: LD_EXP 117
28260: IN
28261: IFFALSE 28281
// hInvincible := hInvincible diff i else
28263: LD_ADDR_EXP 117
28267: PUSH
28268: LD_EXP 117
28272: PUSH
28273: LD_VAR 0 2
28277: DIFF
28278: ST_TO_ADDR
28279: GO 28297
// hInvincible := hInvincible union i ;
28281: LD_ADDR_EXP 117
28285: PUSH
28286: LD_EXP 117
28290: PUSH
28291: LD_VAR 0 2
28295: UNION
28296: ST_TO_ADDR
// end ;
28297: GO 28237
28299: POP
28300: POP
// end ;
28301: LD_VAR 0 1
28305: RET
// export function hHackInvisible ; var i , j ; begin
28306: LD_INT 0
28308: PPUSH
28309: PPUSH
28310: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28311: LD_ADDR_VAR 0 2
28315: PUSH
28316: LD_INT 21
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 69
28330: PUSH
28331: FOR_IN
28332: IFFALSE 28356
// if IsSelected ( i ) then
28334: LD_VAR 0 2
28338: PPUSH
28339: CALL_OW 306
28343: IFFALSE 28354
// ComForceInvisible ( i ) ;
28345: LD_VAR 0 2
28349: PPUSH
28350: CALL_OW 496
28354: GO 28331
28356: POP
28357: POP
// end ;
28358: LD_VAR 0 1
28362: RET
// export function hHackChangeYourSide ; begin
28363: LD_INT 0
28365: PPUSH
// if your_side = 8 then
28366: LD_OWVAR 2
28370: PUSH
28371: LD_INT 8
28373: EQUAL
28374: IFFALSE 28386
// your_side := 0 else
28376: LD_ADDR_OWVAR 2
28380: PUSH
28381: LD_INT 0
28383: ST_TO_ADDR
28384: GO 28400
// your_side := your_side + 1 ;
28386: LD_ADDR_OWVAR 2
28390: PUSH
28391: LD_OWVAR 2
28395: PUSH
28396: LD_INT 1
28398: PLUS
28399: ST_TO_ADDR
// end ;
28400: LD_VAR 0 1
28404: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28405: LD_INT 0
28407: PPUSH
28408: PPUSH
28409: PPUSH
// for i in all_units do
28410: LD_ADDR_VAR 0 2
28414: PUSH
28415: LD_OWVAR 3
28419: PUSH
28420: FOR_IN
28421: IFFALSE 28499
// if IsSelected ( i ) then
28423: LD_VAR 0 2
28427: PPUSH
28428: CALL_OW 306
28432: IFFALSE 28497
// begin j := GetSide ( i ) ;
28434: LD_ADDR_VAR 0 3
28438: PUSH
28439: LD_VAR 0 2
28443: PPUSH
28444: CALL_OW 255
28448: ST_TO_ADDR
// if j = 8 then
28449: LD_VAR 0 3
28453: PUSH
28454: LD_INT 8
28456: EQUAL
28457: IFFALSE 28469
// j := 0 else
28459: LD_ADDR_VAR 0 3
28463: PUSH
28464: LD_INT 0
28466: ST_TO_ADDR
28467: GO 28483
// j := j + 1 ;
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: LD_VAR 0 3
28478: PUSH
28479: LD_INT 1
28481: PLUS
28482: ST_TO_ADDR
// SetSide ( i , j ) ;
28483: LD_VAR 0 2
28487: PPUSH
28488: LD_VAR 0 3
28492: PPUSH
28493: CALL_OW 235
// end ;
28497: GO 28420
28499: POP
28500: POP
// end ;
28501: LD_VAR 0 1
28505: RET
// export function hHackFog ; begin
28506: LD_INT 0
28508: PPUSH
// FogOff ( true ) ;
28509: LD_INT 1
28511: PPUSH
28512: CALL_OW 344
// end ;
28516: LD_VAR 0 1
28520: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28521: LD_INT 0
28523: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28524: LD_VAR 0 1
28528: PPUSH
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_VAR 0 3
28538: PPUSH
28539: LD_INT 1
28541: PPUSH
28542: LD_INT 1
28544: PPUSH
28545: CALL_OW 483
// CenterOnXY ( x , y ) ;
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_VAR 0 3
28558: PPUSH
28559: CALL_OW 84
// end ; end_of_file
28563: LD_VAR 0 4
28567: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28568: LD_INT 0
28570: PPUSH
28571: PPUSH
28572: PPUSH
28573: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 264
28583: PUSH
28584: LD_EXP 134
28588: EQUAL
28589: IFFALSE 28661
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28591: LD_INT 68
28593: PPUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: CALL_OW 255
28603: PPUSH
28604: CALL_OW 321
28608: PUSH
28609: LD_INT 2
28611: EQUAL
28612: IFFALSE 28624
// eff := 70 else
28614: LD_ADDR_VAR 0 4
28618: PUSH
28619: LD_INT 70
28621: ST_TO_ADDR
28622: GO 28632
// eff := 30 ;
28624: LD_ADDR_VAR 0 4
28628: PUSH
28629: LD_INT 30
28631: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28632: LD_VAR 0 1
28636: PPUSH
28637: CALL_OW 250
28641: PPUSH
28642: LD_VAR 0 1
28646: PPUSH
28647: CALL_OW 251
28651: PPUSH
28652: LD_VAR 0 4
28656: PPUSH
28657: CALL_OW 495
// end ; end ;
28661: LD_VAR 0 2
28665: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28666: LD_INT 0
28668: PPUSH
// end ;
28669: LD_VAR 0 4
28673: RET
// export function SOS_Command ( cmd ) ; begin
28674: LD_INT 0
28676: PPUSH
// end ;
28677: LD_VAR 0 2
28681: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28682: LD_INT 0
28684: PPUSH
// end ;
28685: LD_VAR 0 6
28689: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28690: LD_INT 0
28692: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28693: LD_VAR 0 1
28697: PUSH
28698: LD_INT 250
28700: EQUAL
28701: PUSH
28702: LD_VAR 0 2
28706: PPUSH
28707: CALL_OW 264
28711: PUSH
28712: LD_EXP 137
28716: EQUAL
28717: AND
28718: IFFALSE 28739
// MinerPlaceMine ( unit , x , y ) ;
28720: LD_VAR 0 2
28724: PPUSH
28725: LD_VAR 0 4
28729: PPUSH
28730: LD_VAR 0 5
28734: PPUSH
28735: CALL 31088 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28739: LD_VAR 0 1
28743: PUSH
28744: LD_INT 251
28746: EQUAL
28747: PUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 264
28757: PUSH
28758: LD_EXP 137
28762: EQUAL
28763: AND
28764: IFFALSE 28785
// MinerDetonateMine ( unit , x , y ) ;
28766: LD_VAR 0 2
28770: PPUSH
28771: LD_VAR 0 4
28775: PPUSH
28776: LD_VAR 0 5
28780: PPUSH
28781: CALL 31365 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28785: LD_VAR 0 1
28789: PUSH
28790: LD_INT 252
28792: EQUAL
28793: PUSH
28794: LD_VAR 0 2
28798: PPUSH
28799: CALL_OW 264
28803: PUSH
28804: LD_EXP 137
28808: EQUAL
28809: AND
28810: IFFALSE 28831
// MinerCreateMinefield ( unit , x , y ) ;
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 4
28821: PPUSH
28822: LD_VAR 0 5
28826: PPUSH
28827: CALL 31782 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28831: LD_VAR 0 1
28835: PUSH
28836: LD_INT 253
28838: EQUAL
28839: PUSH
28840: LD_VAR 0 2
28844: PPUSH
28845: CALL_OW 257
28849: PUSH
28850: LD_INT 5
28852: EQUAL
28853: AND
28854: IFFALSE 28875
// ComBinocular ( unit , x , y ) ;
28856: LD_VAR 0 2
28860: PPUSH
28861: LD_VAR 0 4
28865: PPUSH
28866: LD_VAR 0 5
28870: PPUSH
28871: CALL 32153 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28875: LD_VAR 0 1
28879: PUSH
28880: LD_INT 254
28882: EQUAL
28883: PUSH
28884: LD_VAR 0 2
28888: PPUSH
28889: CALL_OW 264
28893: PUSH
28894: LD_EXP 132
28898: EQUAL
28899: AND
28900: PUSH
28901: LD_VAR 0 3
28905: PPUSH
28906: CALL_OW 263
28910: PUSH
28911: LD_INT 3
28913: EQUAL
28914: AND
28915: IFFALSE 28931
// HackDestroyVehicle ( unit , selectedUnit ) ;
28917: LD_VAR 0 2
28921: PPUSH
28922: LD_VAR 0 3
28926: PPUSH
28927: CALL 30448 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28931: LD_VAR 0 1
28935: PUSH
28936: LD_INT 255
28938: EQUAL
28939: PUSH
28940: LD_VAR 0 2
28944: PPUSH
28945: CALL_OW 264
28949: PUSH
28950: LD_INT 14
28952: PUSH
28953: LD_INT 53
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: IN
28960: AND
28961: PUSH
28962: LD_VAR 0 4
28966: PPUSH
28967: LD_VAR 0 5
28971: PPUSH
28972: CALL_OW 488
28976: AND
28977: IFFALSE 29001
// CutTreeXYR ( unit , x , y , 12 ) ;
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 4
28988: PPUSH
28989: LD_VAR 0 5
28993: PPUSH
28994: LD_INT 12
28996: PPUSH
28997: CALL 29014 0 4
// end ;
29001: LD_VAR 0 6
29005: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29006: LD_INT 0
29008: PPUSH
// end ;
29009: LD_VAR 0 4
29013: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
29021: PPUSH
29022: PPUSH
29023: PPUSH
29024: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29025: LD_VAR 0 1
29029: NOT
29030: PUSH
29031: LD_VAR 0 2
29035: PPUSH
29036: LD_VAR 0 3
29040: PPUSH
29041: CALL_OW 488
29045: NOT
29046: OR
29047: PUSH
29048: LD_VAR 0 4
29052: NOT
29053: OR
29054: IFFALSE 29058
// exit ;
29056: GO 29398
// list := [ ] ;
29058: LD_ADDR_VAR 0 13
29062: PUSH
29063: EMPTY
29064: ST_TO_ADDR
// if x - r < 0 then
29065: LD_VAR 0 2
29069: PUSH
29070: LD_VAR 0 4
29074: MINUS
29075: PUSH
29076: LD_INT 0
29078: LESS
29079: IFFALSE 29091
// min_x := 0 else
29081: LD_ADDR_VAR 0 7
29085: PUSH
29086: LD_INT 0
29088: ST_TO_ADDR
29089: GO 29107
// min_x := x - r ;
29091: LD_ADDR_VAR 0 7
29095: PUSH
29096: LD_VAR 0 2
29100: PUSH
29101: LD_VAR 0 4
29105: MINUS
29106: ST_TO_ADDR
// if y - r < 0 then
29107: LD_VAR 0 3
29111: PUSH
29112: LD_VAR 0 4
29116: MINUS
29117: PUSH
29118: LD_INT 0
29120: LESS
29121: IFFALSE 29133
// min_y := 0 else
29123: LD_ADDR_VAR 0 8
29127: PUSH
29128: LD_INT 0
29130: ST_TO_ADDR
29131: GO 29149
// min_y := y - r ;
29133: LD_ADDR_VAR 0 8
29137: PUSH
29138: LD_VAR 0 3
29142: PUSH
29143: LD_VAR 0 4
29147: MINUS
29148: ST_TO_ADDR
// max_x := x + r ;
29149: LD_ADDR_VAR 0 9
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_VAR 0 4
29163: PLUS
29164: ST_TO_ADDR
// max_y := y + r ;
29165: LD_ADDR_VAR 0 10
29169: PUSH
29170: LD_VAR 0 3
29174: PUSH
29175: LD_VAR 0 4
29179: PLUS
29180: ST_TO_ADDR
// for _x = min_x to max_x do
29181: LD_ADDR_VAR 0 11
29185: PUSH
29186: DOUBLE
29187: LD_VAR 0 7
29191: DEC
29192: ST_TO_ADDR
29193: LD_VAR 0 9
29197: PUSH
29198: FOR_TO
29199: IFFALSE 29316
// for _y = min_y to max_y do
29201: LD_ADDR_VAR 0 12
29205: PUSH
29206: DOUBLE
29207: LD_VAR 0 8
29211: DEC
29212: ST_TO_ADDR
29213: LD_VAR 0 10
29217: PUSH
29218: FOR_TO
29219: IFFALSE 29312
// begin if not ValidHex ( _x , _y ) then
29221: LD_VAR 0 11
29225: PPUSH
29226: LD_VAR 0 12
29230: PPUSH
29231: CALL_OW 488
29235: NOT
29236: IFFALSE 29240
// continue ;
29238: GO 29218
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29240: LD_VAR 0 11
29244: PPUSH
29245: LD_VAR 0 12
29249: PPUSH
29250: CALL_OW 351
29254: PUSH
29255: LD_VAR 0 11
29259: PPUSH
29260: LD_VAR 0 12
29264: PPUSH
29265: CALL_OW 554
29269: AND
29270: IFFALSE 29310
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29272: LD_ADDR_VAR 0 13
29276: PUSH
29277: LD_VAR 0 13
29281: PPUSH
29282: LD_VAR 0 13
29286: PUSH
29287: LD_INT 1
29289: PLUS
29290: PPUSH
29291: LD_VAR 0 11
29295: PUSH
29296: LD_VAR 0 12
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PPUSH
29305: CALL_OW 2
29309: ST_TO_ADDR
// end ;
29310: GO 29218
29312: POP
29313: POP
29314: GO 29198
29316: POP
29317: POP
// if not list then
29318: LD_VAR 0 13
29322: NOT
29323: IFFALSE 29327
// exit ;
29325: GO 29398
// for i in list do
29327: LD_ADDR_VAR 0 6
29331: PUSH
29332: LD_VAR 0 13
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29396
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29340: LD_VAR 0 1
29344: PPUSH
29345: LD_STRING M
29347: PUSH
29348: LD_VAR 0 6
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PUSH
29357: LD_VAR 0 6
29361: PUSH
29362: LD_INT 2
29364: ARRAY
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: PPUSH
29390: CALL_OW 447
29394: GO 29337
29396: POP
29397: POP
// end ;
29398: LD_VAR 0 5
29402: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29403: LD_EXP 120
29407: NOT
29408: IFFALSE 29458
29410: GO 29412
29412: DISABLE
// begin initHack := true ;
29413: LD_ADDR_EXP 120
29417: PUSH
29418: LD_INT 1
29420: ST_TO_ADDR
// hackTanks := [ ] ;
29421: LD_ADDR_EXP 121
29425: PUSH
29426: EMPTY
29427: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29428: LD_ADDR_EXP 122
29432: PUSH
29433: EMPTY
29434: ST_TO_ADDR
// hackLimit := 3 ;
29435: LD_ADDR_EXP 123
29439: PUSH
29440: LD_INT 3
29442: ST_TO_ADDR
// hackDist := 12 ;
29443: LD_ADDR_EXP 124
29447: PUSH
29448: LD_INT 12
29450: ST_TO_ADDR
// hackCounter := [ ] ;
29451: LD_ADDR_EXP 125
29455: PUSH
29456: EMPTY
29457: ST_TO_ADDR
// end ;
29458: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29459: LD_EXP 120
29463: PUSH
29464: LD_INT 34
29466: PUSH
29467: LD_EXP 132
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: AND
29481: IFFALSE 29736
29483: GO 29485
29485: DISABLE
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
// begin enable ;
29490: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29491: LD_ADDR_VAR 0 1
29495: PUSH
29496: LD_INT 34
29498: PUSH
29499: LD_EXP 132
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PPUSH
29508: CALL_OW 69
29512: PUSH
29513: FOR_IN
29514: IFFALSE 29734
// begin if not i in hackTanks then
29516: LD_VAR 0 1
29520: PUSH
29521: LD_EXP 121
29525: IN
29526: NOT
29527: IFFALSE 29610
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29529: LD_ADDR_EXP 121
29533: PUSH
29534: LD_EXP 121
29538: PPUSH
29539: LD_EXP 121
29543: PUSH
29544: LD_INT 1
29546: PLUS
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 1
29557: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29558: LD_ADDR_EXP 122
29562: PUSH
29563: LD_EXP 122
29567: PPUSH
29568: LD_EXP 122
29572: PUSH
29573: LD_INT 1
29575: PLUS
29576: PPUSH
29577: EMPTY
29578: PPUSH
29579: CALL_OW 1
29583: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29584: LD_ADDR_EXP 125
29588: PUSH
29589: LD_EXP 125
29593: PPUSH
29594: LD_EXP 125
29598: PUSH
29599: LD_INT 1
29601: PLUS
29602: PPUSH
29603: EMPTY
29604: PPUSH
29605: CALL_OW 1
29609: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 302
29619: NOT
29620: IFFALSE 29633
// begin HackUnlinkAll ( i ) ;
29622: LD_VAR 0 1
29626: PPUSH
29627: CALL 29739 0 1
// continue ;
29631: GO 29513
// end ; HackCheckCapturedStatus ( i ) ;
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL 30182 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29642: LD_ADDR_VAR 0 2
29646: PUSH
29647: LD_INT 81
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 255
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 33
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 91
29676: PUSH
29677: LD_VAR 0 1
29681: PUSH
29682: LD_EXP 124
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 50
29694: PUSH
29695: EMPTY
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 69
29708: ST_TO_ADDR
// if not tmp then
29709: LD_VAR 0 2
29713: NOT
29714: IFFALSE 29718
// continue ;
29716: GO 29513
// HackLink ( i , tmp ) ;
29718: LD_VAR 0 1
29722: PPUSH
29723: LD_VAR 0 2
29727: PPUSH
29728: CALL 29875 0 2
// end ;
29732: GO 29513
29734: POP
29735: POP
// end ;
29736: PPOPN 2
29738: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29739: LD_INT 0
29741: PPUSH
29742: PPUSH
29743: PPUSH
// if not hack in hackTanks then
29744: LD_VAR 0 1
29748: PUSH
29749: LD_EXP 121
29753: IN
29754: NOT
29755: IFFALSE 29759
// exit ;
29757: GO 29870
// index := GetElementIndex ( hackTanks , hack ) ;
29759: LD_ADDR_VAR 0 4
29763: PUSH
29764: LD_EXP 121
29768: PPUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL 37675 0 2
29778: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29779: LD_EXP 122
29783: PUSH
29784: LD_VAR 0 4
29788: ARRAY
29789: IFFALSE 29870
// begin for i in hackTanksCaptured [ index ] do
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_EXP 122
29800: PUSH
29801: LD_VAR 0 4
29805: ARRAY
29806: PUSH
29807: FOR_IN
29808: IFFALSE 29834
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29810: LD_VAR 0 3
29814: PUSH
29815: LD_INT 1
29817: ARRAY
29818: PPUSH
29819: LD_VAR 0 3
29823: PUSH
29824: LD_INT 2
29826: ARRAY
29827: PPUSH
29828: CALL_OW 235
29832: GO 29807
29834: POP
29835: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29836: LD_ADDR_EXP 122
29840: PUSH
29841: LD_EXP 122
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: EMPTY
29852: PPUSH
29853: CALL_OW 1
29857: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29858: LD_VAR 0 1
29862: PPUSH
29863: LD_INT 0
29865: PPUSH
29866: CALL_OW 505
// end ; end ;
29870: LD_VAR 0 2
29874: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29875: LD_INT 0
29877: PPUSH
29878: PPUSH
29879: PPUSH
// if not hack in hackTanks or not vehicles then
29880: LD_VAR 0 1
29884: PUSH
29885: LD_EXP 121
29889: IN
29890: NOT
29891: PUSH
29892: LD_VAR 0 2
29896: NOT
29897: OR
29898: IFFALSE 29902
// exit ;
29900: GO 30177
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29902: LD_ADDR_VAR 0 2
29906: PUSH
29907: LD_VAR 0 1
29911: PPUSH
29912: LD_VAR 0 2
29916: PPUSH
29917: LD_INT 1
29919: PPUSH
29920: LD_INT 1
29922: PPUSH
29923: CALL 38325 0 4
29927: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29928: LD_ADDR_VAR 0 5
29932: PUSH
29933: LD_EXP 121
29937: PPUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL 37675 0 2
29947: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29948: LD_EXP 122
29952: PUSH
29953: LD_VAR 0 5
29957: ARRAY
29958: PUSH
29959: LD_EXP 123
29963: LESS
29964: IFFALSE 30153
// begin for i := 1 to vehicles do
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: DOUBLE
29972: LD_INT 1
29974: DEC
29975: ST_TO_ADDR
29976: LD_VAR 0 2
29980: PUSH
29981: FOR_TO
29982: IFFALSE 30151
// begin if hackTanksCaptured [ index ] = hackLimit then
29984: LD_EXP 122
29988: PUSH
29989: LD_VAR 0 5
29993: ARRAY
29994: PUSH
29995: LD_EXP 123
29999: EQUAL
30000: IFFALSE 30004
// break ;
30002: GO 30151
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30004: LD_ADDR_EXP 125
30008: PUSH
30009: LD_EXP 125
30013: PPUSH
30014: LD_VAR 0 5
30018: PPUSH
30019: LD_EXP 125
30023: PUSH
30024: LD_VAR 0 5
30028: ARRAY
30029: PUSH
30030: LD_INT 1
30032: PLUS
30033: PPUSH
30034: CALL_OW 1
30038: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30039: LD_ADDR_EXP 122
30043: PUSH
30044: LD_EXP 122
30048: PPUSH
30049: LD_VAR 0 5
30053: PUSH
30054: LD_EXP 122
30058: PUSH
30059: LD_VAR 0 5
30063: ARRAY
30064: PUSH
30065: LD_INT 1
30067: PLUS
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: LD_VAR 0 2
30077: PUSH
30078: LD_VAR 0 4
30082: ARRAY
30083: PUSH
30084: LD_VAR 0 2
30088: PUSH
30089: LD_VAR 0 4
30093: ARRAY
30094: PPUSH
30095: CALL_OW 255
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PPUSH
30104: CALL 37890 0 3
30108: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30109: LD_VAR 0 2
30113: PUSH
30114: LD_VAR 0 4
30118: ARRAY
30119: PPUSH
30120: LD_VAR 0 1
30124: PPUSH
30125: CALL_OW 255
30129: PPUSH
30130: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30134: LD_VAR 0 2
30138: PUSH
30139: LD_VAR 0 4
30143: ARRAY
30144: PPUSH
30145: CALL_OW 141
// end ;
30149: GO 29981
30151: POP
30152: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30153: LD_VAR 0 1
30157: PPUSH
30158: LD_EXP 122
30162: PUSH
30163: LD_VAR 0 5
30167: ARRAY
30168: PUSH
30169: LD_INT 0
30171: PLUS
30172: PPUSH
30173: CALL_OW 505
// end ;
30177: LD_VAR 0 3
30181: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30182: LD_INT 0
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
// if not hack in hackTanks then
30188: LD_VAR 0 1
30192: PUSH
30193: LD_EXP 121
30197: IN
30198: NOT
30199: IFFALSE 30203
// exit ;
30201: GO 30443
// index := GetElementIndex ( hackTanks , hack ) ;
30203: LD_ADDR_VAR 0 4
30207: PUSH
30208: LD_EXP 121
30212: PPUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL 37675 0 2
30222: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30223: LD_ADDR_VAR 0 3
30227: PUSH
30228: DOUBLE
30229: LD_EXP 122
30233: PUSH
30234: LD_VAR 0 4
30238: ARRAY
30239: INC
30240: ST_TO_ADDR
30241: LD_INT 1
30243: PUSH
30244: FOR_DOWNTO
30245: IFFALSE 30417
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30247: LD_ADDR_VAR 0 5
30251: PUSH
30252: LD_EXP 122
30256: PUSH
30257: LD_VAR 0 4
30261: ARRAY
30262: PUSH
30263: LD_VAR 0 3
30267: ARRAY
30268: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30269: LD_VAR 0 5
30273: PUSH
30274: LD_INT 1
30276: ARRAY
30277: PPUSH
30278: CALL_OW 302
30282: NOT
30283: PUSH
30284: LD_VAR 0 5
30288: PUSH
30289: LD_INT 1
30291: ARRAY
30292: PPUSH
30293: CALL_OW 255
30297: PUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL_OW 255
30307: NONEQUAL
30308: OR
30309: IFFALSE 30415
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30311: LD_VAR 0 5
30315: PUSH
30316: LD_INT 1
30318: ARRAY
30319: PPUSH
30320: CALL_OW 305
30324: PUSH
30325: LD_VAR 0 5
30329: PUSH
30330: LD_INT 1
30332: ARRAY
30333: PPUSH
30334: CALL_OW 255
30338: PUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 255
30348: EQUAL
30349: AND
30350: IFFALSE 30374
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30352: LD_VAR 0 5
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: LD_VAR 0 5
30365: PUSH
30366: LD_INT 2
30368: ARRAY
30369: PPUSH
30370: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30374: LD_ADDR_EXP 122
30378: PUSH
30379: LD_EXP 122
30383: PPUSH
30384: LD_VAR 0 4
30388: PPUSH
30389: LD_EXP 122
30393: PUSH
30394: LD_VAR 0 4
30398: ARRAY
30399: PPUSH
30400: LD_VAR 0 3
30404: PPUSH
30405: CALL_OW 3
30409: PPUSH
30410: CALL_OW 1
30414: ST_TO_ADDR
// end ; end ;
30415: GO 30244
30417: POP
30418: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30419: LD_VAR 0 1
30423: PPUSH
30424: LD_EXP 122
30428: PUSH
30429: LD_VAR 0 4
30433: ARRAY
30434: PUSH
30435: LD_INT 0
30437: PLUS
30438: PPUSH
30439: CALL_OW 505
// end ;
30443: LD_VAR 0 2
30447: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30448: LD_INT 0
30450: PPUSH
30451: PPUSH
30452: PPUSH
30453: PPUSH
// if not hack in hackTanks then
30454: LD_VAR 0 1
30458: PUSH
30459: LD_EXP 121
30463: IN
30464: NOT
30465: IFFALSE 30469
// exit ;
30467: GO 30554
// index := GetElementIndex ( hackTanks , hack ) ;
30469: LD_ADDR_VAR 0 5
30473: PUSH
30474: LD_EXP 121
30478: PPUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: CALL 37675 0 2
30488: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30489: LD_ADDR_VAR 0 4
30493: PUSH
30494: DOUBLE
30495: LD_INT 1
30497: DEC
30498: ST_TO_ADDR
30499: LD_EXP 122
30503: PUSH
30504: LD_VAR 0 5
30508: ARRAY
30509: PUSH
30510: FOR_TO
30511: IFFALSE 30552
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30513: LD_EXP 122
30517: PUSH
30518: LD_VAR 0 5
30522: ARRAY
30523: PUSH
30524: LD_VAR 0 4
30528: ARRAY
30529: PUSH
30530: LD_INT 1
30532: ARRAY
30533: PUSH
30534: LD_VAR 0 2
30538: EQUAL
30539: IFFALSE 30550
// KillUnit ( vehicle ) ;
30541: LD_VAR 0 2
30545: PPUSH
30546: CALL_OW 66
30550: GO 30510
30552: POP
30553: POP
// end ;
30554: LD_VAR 0 3
30558: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30559: LD_EXP 126
30563: NOT
30564: IFFALSE 30599
30566: GO 30568
30568: DISABLE
// begin initMiner := true ;
30569: LD_ADDR_EXP 126
30573: PUSH
30574: LD_INT 1
30576: ST_TO_ADDR
// minersList := [ ] ;
30577: LD_ADDR_EXP 127
30581: PUSH
30582: EMPTY
30583: ST_TO_ADDR
// minerMinesList := [ ] ;
30584: LD_ADDR_EXP 128
30588: PUSH
30589: EMPTY
30590: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30591: LD_ADDR_EXP 129
30595: PUSH
30596: LD_INT 5
30598: ST_TO_ADDR
// end ;
30599: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30600: LD_EXP 126
30604: PUSH
30605: LD_INT 34
30607: PUSH
30608: LD_EXP 137
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PPUSH
30617: CALL_OW 69
30621: AND
30622: IFFALSE 31085
30624: GO 30626
30626: DISABLE
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
30631: PPUSH
30632: PPUSH
// begin enable ;
30633: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30634: LD_ADDR_VAR 0 1
30638: PUSH
30639: LD_INT 34
30641: PUSH
30642: LD_EXP 137
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PPUSH
30651: CALL_OW 69
30655: PUSH
30656: FOR_IN
30657: IFFALSE 30729
// begin if not i in minersList then
30659: LD_VAR 0 1
30663: PUSH
30664: LD_EXP 127
30668: IN
30669: NOT
30670: IFFALSE 30727
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30672: LD_ADDR_EXP 127
30676: PUSH
30677: LD_EXP 127
30681: PPUSH
30682: LD_EXP 127
30686: PUSH
30687: LD_INT 1
30689: PLUS
30690: PPUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 1
30700: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30701: LD_ADDR_EXP 128
30705: PUSH
30706: LD_EXP 128
30710: PPUSH
30711: LD_EXP 128
30715: PUSH
30716: LD_INT 1
30718: PLUS
30719: PPUSH
30720: EMPTY
30721: PPUSH
30722: CALL_OW 1
30726: ST_TO_ADDR
// end end ;
30727: GO 30656
30729: POP
30730: POP
// for i := minerMinesList downto 1 do
30731: LD_ADDR_VAR 0 1
30735: PUSH
30736: DOUBLE
30737: LD_EXP 128
30741: INC
30742: ST_TO_ADDR
30743: LD_INT 1
30745: PUSH
30746: FOR_DOWNTO
30747: IFFALSE 31083
// begin if IsLive ( minersList [ i ] ) then
30749: LD_EXP 127
30753: PUSH
30754: LD_VAR 0 1
30758: ARRAY
30759: PPUSH
30760: CALL_OW 300
30764: IFFALSE 30792
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30766: LD_EXP 127
30770: PUSH
30771: LD_VAR 0 1
30775: ARRAY
30776: PPUSH
30777: LD_EXP 128
30781: PUSH
30782: LD_VAR 0 1
30786: ARRAY
30787: PPUSH
30788: CALL_OW 505
// if not minerMinesList [ i ] then
30792: LD_EXP 128
30796: PUSH
30797: LD_VAR 0 1
30801: ARRAY
30802: NOT
30803: IFFALSE 30807
// continue ;
30805: GO 30746
// for j := minerMinesList [ i ] downto 1 do
30807: LD_ADDR_VAR 0 2
30811: PUSH
30812: DOUBLE
30813: LD_EXP 128
30817: PUSH
30818: LD_VAR 0 1
30822: ARRAY
30823: INC
30824: ST_TO_ADDR
30825: LD_INT 1
30827: PUSH
30828: FOR_DOWNTO
30829: IFFALSE 31079
// begin side := GetSide ( minersList [ i ] ) ;
30831: LD_ADDR_VAR 0 3
30835: PUSH
30836: LD_EXP 127
30840: PUSH
30841: LD_VAR 0 1
30845: ARRAY
30846: PPUSH
30847: CALL_OW 255
30851: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30852: LD_ADDR_VAR 0 4
30856: PUSH
30857: LD_EXP 128
30861: PUSH
30862: LD_VAR 0 1
30866: ARRAY
30867: PUSH
30868: LD_VAR 0 2
30872: ARRAY
30873: PUSH
30874: LD_INT 1
30876: ARRAY
30877: PPUSH
30878: LD_EXP 128
30882: PUSH
30883: LD_VAR 0 1
30887: ARRAY
30888: PUSH
30889: LD_VAR 0 2
30893: ARRAY
30894: PUSH
30895: LD_INT 2
30897: ARRAY
30898: PPUSH
30899: CALL_OW 428
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 4
30908: NOT
30909: IFFALSE 30913
// continue ;
30911: GO 30828
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30913: LD_VAR 0 4
30917: PUSH
30918: LD_INT 81
30920: PUSH
30921: LD_VAR 0 3
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: IN
30935: PUSH
30936: LD_EXP 128
30940: PUSH
30941: LD_VAR 0 1
30945: ARRAY
30946: PUSH
30947: LD_VAR 0 2
30951: ARRAY
30952: PUSH
30953: LD_INT 1
30955: ARRAY
30956: PPUSH
30957: LD_EXP 128
30961: PUSH
30962: LD_VAR 0 1
30966: ARRAY
30967: PUSH
30968: LD_VAR 0 2
30972: ARRAY
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PPUSH
30978: CALL_OW 458
30982: AND
30983: IFFALSE 31077
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30985: LD_EXP 128
30989: PUSH
30990: LD_VAR 0 1
30994: ARRAY
30995: PUSH
30996: LD_VAR 0 2
31000: ARRAY
31001: PUSH
31002: LD_INT 1
31004: ARRAY
31005: PPUSH
31006: LD_EXP 128
31010: PUSH
31011: LD_VAR 0 1
31015: ARRAY
31016: PUSH
31017: LD_VAR 0 2
31021: ARRAY
31022: PUSH
31023: LD_INT 2
31025: ARRAY
31026: PPUSH
31027: LD_VAR 0 3
31031: PPUSH
31032: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31036: LD_ADDR_EXP 128
31040: PUSH
31041: LD_EXP 128
31045: PPUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_EXP 128
31055: PUSH
31056: LD_VAR 0 1
31060: ARRAY
31061: PPUSH
31062: LD_VAR 0 2
31066: PPUSH
31067: CALL_OW 3
31071: PPUSH
31072: CALL_OW 1
31076: ST_TO_ADDR
// end ; end ;
31077: GO 30828
31079: POP
31080: POP
// end ;
31081: GO 30746
31083: POP
31084: POP
// end ;
31085: PPOPN 4
31087: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31088: LD_INT 0
31090: PPUSH
31091: PPUSH
// result := false ;
31092: LD_ADDR_VAR 0 4
31096: PUSH
31097: LD_INT 0
31099: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 264
31109: PUSH
31110: LD_EXP 137
31114: EQUAL
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31360
// index := GetElementIndex ( minersList , unit ) ;
31120: LD_ADDR_VAR 0 5
31124: PUSH
31125: LD_EXP 127
31129: PPUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL 37675 0 2
31139: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31140: LD_EXP 128
31144: PUSH
31145: LD_VAR 0 5
31149: ARRAY
31150: PUSH
31151: LD_EXP 129
31155: GREATEREQUAL
31156: IFFALSE 31160
// exit ;
31158: GO 31360
// ComMoveXY ( unit , x , y ) ;
31160: LD_VAR 0 1
31164: PPUSH
31165: LD_VAR 0 2
31169: PPUSH
31170: LD_VAR 0 3
31174: PPUSH
31175: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31179: LD_INT 35
31181: PPUSH
31182: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31186: LD_VAR 0 1
31190: PPUSH
31191: LD_VAR 0 2
31195: PPUSH
31196: LD_VAR 0 3
31200: PPUSH
31201: CALL 68447 0 3
31205: NOT
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 314
31216: AND
31217: IFFALSE 31221
// exit ;
31219: GO 31360
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 428
31235: PUSH
31236: LD_VAR 0 1
31240: EQUAL
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 314
31251: NOT
31252: AND
31253: IFFALSE 31179
// PlaySoundXY ( x , y , PlantMine ) ;
31255: LD_VAR 0 2
31259: PPUSH
31260: LD_VAR 0 3
31264: PPUSH
31265: LD_STRING PlantMine
31267: PPUSH
31268: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_VAR 0 3
31281: PPUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 255
31291: PPUSH
31292: LD_INT 0
31294: PPUSH
31295: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31299: LD_ADDR_EXP 128
31303: PUSH
31304: LD_EXP 128
31308: PPUSH
31309: LD_VAR 0 5
31313: PUSH
31314: LD_EXP 128
31318: PUSH
31319: LD_VAR 0 5
31323: ARRAY
31324: PUSH
31325: LD_INT 1
31327: PLUS
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PPUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 3
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL 37890 0 3
31351: ST_TO_ADDR
// result := true ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_INT 1
31359: ST_TO_ADDR
// end ;
31360: LD_VAR 0 4
31364: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31365: LD_INT 0
31367: PPUSH
31368: PPUSH
31369: PPUSH
// if not unit in minersList then
31370: LD_VAR 0 1
31374: PUSH
31375: LD_EXP 127
31379: IN
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31777
// index := GetElementIndex ( minersList , unit ) ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_EXP 127
31394: PPUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL 37675 0 2
31404: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31405: LD_ADDR_VAR 0 5
31409: PUSH
31410: DOUBLE
31411: LD_EXP 128
31415: PUSH
31416: LD_VAR 0 6
31420: ARRAY
31421: INC
31422: ST_TO_ADDR
31423: LD_INT 1
31425: PUSH
31426: FOR_DOWNTO
31427: IFFALSE 31588
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31429: LD_EXP 128
31433: PUSH
31434: LD_VAR 0 6
31438: ARRAY
31439: PUSH
31440: LD_VAR 0 5
31444: ARRAY
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PUSH
31450: LD_VAR 0 2
31454: EQUAL
31455: PUSH
31456: LD_EXP 128
31460: PUSH
31461: LD_VAR 0 6
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 5
31471: ARRAY
31472: PUSH
31473: LD_INT 2
31475: ARRAY
31476: PUSH
31477: LD_VAR 0 3
31481: EQUAL
31482: AND
31483: IFFALSE 31586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31485: LD_EXP 128
31489: PUSH
31490: LD_VAR 0 6
31494: ARRAY
31495: PUSH
31496: LD_VAR 0 5
31500: ARRAY
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PPUSH
31506: LD_EXP 128
31510: PUSH
31511: LD_VAR 0 6
31515: ARRAY
31516: PUSH
31517: LD_VAR 0 5
31521: ARRAY
31522: PUSH
31523: LD_INT 2
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 255
31536: PPUSH
31537: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31541: LD_ADDR_EXP 128
31545: PUSH
31546: LD_EXP 128
31550: PPUSH
31551: LD_VAR 0 6
31555: PPUSH
31556: LD_EXP 128
31560: PUSH
31561: LD_VAR 0 6
31565: ARRAY
31566: PPUSH
31567: LD_VAR 0 5
31571: PPUSH
31572: CALL_OW 3
31576: PPUSH
31577: CALL_OW 1
31581: ST_TO_ADDR
// exit ;
31582: POP
31583: POP
31584: GO 31777
// end ; end ;
31586: GO 31426
31588: POP
31589: POP
// for i := minerMinesList [ index ] downto 1 do
31590: LD_ADDR_VAR 0 5
31594: PUSH
31595: DOUBLE
31596: LD_EXP 128
31600: PUSH
31601: LD_VAR 0 6
31605: ARRAY
31606: INC
31607: ST_TO_ADDR
31608: LD_INT 1
31610: PUSH
31611: FOR_DOWNTO
31612: IFFALSE 31775
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31614: LD_EXP 128
31618: PUSH
31619: LD_VAR 0 6
31623: ARRAY
31624: PUSH
31625: LD_VAR 0 5
31629: ARRAY
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: LD_EXP 128
31639: PUSH
31640: LD_VAR 0 6
31644: ARRAY
31645: PUSH
31646: LD_VAR 0 5
31650: ARRAY
31651: PUSH
31652: LD_INT 2
31654: ARRAY
31655: PPUSH
31656: LD_VAR 0 2
31660: PPUSH
31661: LD_VAR 0 3
31665: PPUSH
31666: CALL_OW 298
31670: PUSH
31671: LD_INT 6
31673: LESS
31674: IFFALSE 31773
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31676: LD_EXP 128
31680: PUSH
31681: LD_VAR 0 6
31685: ARRAY
31686: PUSH
31687: LD_VAR 0 5
31691: ARRAY
31692: PUSH
31693: LD_INT 1
31695: ARRAY
31696: PPUSH
31697: LD_EXP 128
31701: PUSH
31702: LD_VAR 0 6
31706: ARRAY
31707: PUSH
31708: LD_VAR 0 5
31712: ARRAY
31713: PUSH
31714: LD_INT 2
31716: ARRAY
31717: PPUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL_OW 255
31727: PPUSH
31728: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31732: LD_ADDR_EXP 128
31736: PUSH
31737: LD_EXP 128
31741: PPUSH
31742: LD_VAR 0 6
31746: PPUSH
31747: LD_EXP 128
31751: PUSH
31752: LD_VAR 0 6
31756: ARRAY
31757: PPUSH
31758: LD_VAR 0 5
31762: PPUSH
31763: CALL_OW 3
31767: PPUSH
31768: CALL_OW 1
31772: ST_TO_ADDR
// end ; end ;
31773: GO 31611
31775: POP
31776: POP
// end ;
31777: LD_VAR 0 4
31781: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31782: LD_INT 0
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 264
31802: PUSH
31803: LD_EXP 137
31807: EQUAL
31808: NOT
31809: PUSH
31810: LD_VAR 0 1
31814: PUSH
31815: LD_EXP 127
31819: IN
31820: NOT
31821: OR
31822: IFFALSE 31826
// exit ;
31824: GO 32148
// index := GetElementIndex ( minersList , unit ) ;
31826: LD_ADDR_VAR 0 6
31830: PUSH
31831: LD_EXP 127
31835: PPUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL 37675 0 2
31845: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31846: LD_ADDR_VAR 0 8
31850: PUSH
31851: LD_EXP 129
31855: PUSH
31856: LD_EXP 128
31860: PUSH
31861: LD_VAR 0 6
31865: ARRAY
31866: MINUS
31867: ST_TO_ADDR
// if not minesFreeAmount then
31868: LD_VAR 0 8
31872: NOT
31873: IFFALSE 31877
// exit ;
31875: GO 32148
// tmp := [ ] ;
31877: LD_ADDR_VAR 0 7
31881: PUSH
31882: EMPTY
31883: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31884: LD_ADDR_VAR 0 5
31888: PUSH
31889: DOUBLE
31890: LD_INT 1
31892: DEC
31893: ST_TO_ADDR
31894: LD_VAR 0 8
31898: PUSH
31899: FOR_TO
31900: IFFALSE 32095
// begin _d := rand ( 0 , 5 ) ;
31902: LD_ADDR_VAR 0 11
31906: PUSH
31907: LD_INT 0
31909: PPUSH
31910: LD_INT 5
31912: PPUSH
31913: CALL_OW 12
31917: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31918: LD_ADDR_VAR 0 12
31922: PUSH
31923: LD_INT 2
31925: PPUSH
31926: LD_INT 6
31928: PPUSH
31929: CALL_OW 12
31933: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31934: LD_ADDR_VAR 0 9
31938: PUSH
31939: LD_VAR 0 2
31943: PPUSH
31944: LD_VAR 0 11
31948: PPUSH
31949: LD_VAR 0 12
31953: PPUSH
31954: CALL_OW 272
31958: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31959: LD_ADDR_VAR 0 10
31963: PUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: LD_VAR 0 11
31973: PPUSH
31974: LD_VAR 0 12
31978: PPUSH
31979: CALL_OW 273
31983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31984: LD_VAR 0 9
31988: PPUSH
31989: LD_VAR 0 10
31993: PPUSH
31994: CALL_OW 488
31998: PUSH
31999: LD_VAR 0 9
32003: PUSH
32004: LD_VAR 0 10
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_VAR 0 7
32017: IN
32018: NOT
32019: AND
32020: PUSH
32021: LD_VAR 0 9
32025: PPUSH
32026: LD_VAR 0 10
32030: PPUSH
32031: CALL_OW 458
32035: NOT
32036: AND
32037: IFFALSE 32079
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32039: LD_ADDR_VAR 0 7
32043: PUSH
32044: LD_VAR 0 7
32048: PPUSH
32049: LD_VAR 0 7
32053: PUSH
32054: LD_INT 1
32056: PLUS
32057: PPUSH
32058: LD_VAR 0 9
32062: PUSH
32063: LD_VAR 0 10
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PPUSH
32072: CALL_OW 1
32076: ST_TO_ADDR
32077: GO 32093
// i := i - 1 ;
32079: LD_ADDR_VAR 0 5
32083: PUSH
32084: LD_VAR 0 5
32088: PUSH
32089: LD_INT 1
32091: MINUS
32092: ST_TO_ADDR
// end ;
32093: GO 31899
32095: POP
32096: POP
// for i in tmp do
32097: LD_ADDR_VAR 0 5
32101: PUSH
32102: LD_VAR 0 7
32106: PUSH
32107: FOR_IN
32108: IFFALSE 32146
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32110: LD_VAR 0 1
32114: PPUSH
32115: LD_VAR 0 5
32119: PUSH
32120: LD_INT 1
32122: ARRAY
32123: PPUSH
32124: LD_VAR 0 5
32128: PUSH
32129: LD_INT 2
32131: ARRAY
32132: PPUSH
32133: CALL 31088 0 3
32137: NOT
32138: IFFALSE 32144
// exit ;
32140: POP
32141: POP
32142: GO 32148
32144: GO 32107
32146: POP
32147: POP
// end ;
32148: LD_VAR 0 4
32152: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32153: LD_INT 0
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
// if not GetClass ( unit ) = class_sniper then
32162: LD_VAR 0 1
32166: PPUSH
32167: CALL_OW 257
32171: PUSH
32172: LD_INT 5
32174: EQUAL
32175: NOT
32176: IFFALSE 32180
// exit ;
32178: GO 32568
// dist := 8 ;
32180: LD_ADDR_VAR 0 5
32184: PUSH
32185: LD_INT 8
32187: ST_TO_ADDR
// viewRange := 12 ;
32188: LD_ADDR_VAR 0 7
32192: PUSH
32193: LD_INT 12
32195: ST_TO_ADDR
// side := GetSide ( unit ) ;
32196: LD_ADDR_VAR 0 6
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 255
32210: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32211: LD_INT 61
32213: PPUSH
32214: LD_VAR 0 6
32218: PPUSH
32219: CALL_OW 321
32223: PUSH
32224: LD_INT 2
32226: EQUAL
32227: IFFALSE 32237
// viewRange := 16 ;
32229: LD_ADDR_VAR 0 7
32233: PUSH
32234: LD_INT 16
32236: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32237: LD_VAR 0 1
32241: PPUSH
32242: LD_VAR 0 2
32246: PPUSH
32247: LD_VAR 0 3
32251: PPUSH
32252: CALL_OW 297
32256: PUSH
32257: LD_VAR 0 5
32261: GREATER
32262: IFFALSE 32341
// begin ComMoveXY ( unit , x , y ) ;
32264: LD_VAR 0 1
32268: PPUSH
32269: LD_VAR 0 2
32273: PPUSH
32274: LD_VAR 0 3
32278: PPUSH
32279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32283: LD_INT 35
32285: PPUSH
32286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: LD_VAR 0 3
32304: PPUSH
32305: CALL 68447 0 3
32309: NOT
32310: IFFALSE 32314
// exit ;
32312: GO 32568
// until GetDistUnitXY ( unit , x , y ) < dist ;
32314: LD_VAR 0 1
32318: PPUSH
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_VAR 0 3
32328: PPUSH
32329: CALL_OW 297
32333: PUSH
32334: LD_VAR 0 5
32338: LESS
32339: IFFALSE 32283
// end ; ComTurnXY ( unit , x , y ) ;
32341: LD_VAR 0 1
32345: PPUSH
32346: LD_VAR 0 2
32350: PPUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: CALL_OW 118
// wait ( 5 ) ;
32360: LD_INT 5
32362: PPUSH
32363: CALL_OW 67
// _d := GetDir ( unit ) ;
32367: LD_ADDR_VAR 0 10
32371: PUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: CALL_OW 254
32381: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32382: LD_ADDR_VAR 0 8
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 250
32396: PPUSH
32397: LD_VAR 0 10
32401: PPUSH
32402: LD_VAR 0 5
32406: PPUSH
32407: CALL_OW 272
32411: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32412: LD_ADDR_VAR 0 9
32416: PUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 251
32426: PPUSH
32427: LD_VAR 0 10
32431: PPUSH
32432: LD_VAR 0 5
32436: PPUSH
32437: CALL_OW 273
32441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32442: LD_VAR 0 8
32446: PPUSH
32447: LD_VAR 0 9
32451: PPUSH
32452: CALL_OW 488
32456: NOT
32457: IFFALSE 32461
// exit ;
32459: GO 32568
// ComAnimCustom ( unit , 1 ) ;
32461: LD_VAR 0 1
32465: PPUSH
32466: LD_INT 1
32468: PPUSH
32469: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32473: LD_VAR 0 8
32477: PPUSH
32478: LD_VAR 0 9
32482: PPUSH
32483: LD_VAR 0 6
32487: PPUSH
32488: LD_VAR 0 7
32492: PPUSH
32493: CALL_OW 330
// repeat wait ( 1 ) ;
32497: LD_INT 1
32499: PPUSH
32500: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32504: LD_VAR 0 1
32508: PPUSH
32509: CALL_OW 316
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 314
32523: OR
32524: PUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 302
32534: NOT
32535: OR
32536: PUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 301
32546: OR
32547: IFFALSE 32497
// RemoveSeeing ( _x , _y , side ) ;
32549: LD_VAR 0 8
32553: PPUSH
32554: LD_VAR 0 9
32558: PPUSH
32559: LD_VAR 0 6
32563: PPUSH
32564: CALL_OW 331
// end ; end_of_file
32568: LD_VAR 0 4
32572: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32573: LD_VAR 0 1
32577: PUSH
32578: LD_INT 200
32580: DOUBLE
32581: GREATEREQUAL
32582: IFFALSE 32590
32584: LD_INT 299
32586: DOUBLE
32587: LESSEQUAL
32588: IFTRUE 32592
32590: GO 32624
32592: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32593: LD_VAR 0 1
32597: PPUSH
32598: LD_VAR 0 2
32602: PPUSH
32603: LD_VAR 0 3
32607: PPUSH
32608: LD_VAR 0 4
32612: PPUSH
32613: LD_VAR 0 5
32617: PPUSH
32618: CALL 28690 0 5
32622: GO 32701
32624: LD_INT 300
32626: DOUBLE
32627: GREATEREQUAL
32628: IFFALSE 32636
32630: LD_INT 399
32632: DOUBLE
32633: LESSEQUAL
32634: IFTRUE 32638
32636: GO 32700
32638: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32639: LD_VAR 0 1
32643: PPUSH
32644: LD_VAR 0 2
32648: PPUSH
32649: LD_VAR 0 3
32653: PPUSH
32654: LD_VAR 0 4
32658: PPUSH
32659: LD_VAR 0 5
32663: PPUSH
32664: LD_VAR 0 6
32668: PPUSH
32669: LD_VAR 0 7
32673: PPUSH
32674: LD_VAR 0 8
32678: PPUSH
32679: LD_VAR 0 9
32683: PPUSH
32684: LD_VAR 0 10
32688: PPUSH
32689: LD_VAR 0 11
32693: PPUSH
32694: CALL 26588 0 11
32698: GO 32701
32700: POP
// end ;
32701: PPOPN 11
32703: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32704: LD_VAR 0 1
32708: PPUSH
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL 28682 0 5
// end ; end_of_file end_of_file
32733: PPOPN 5
32735: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
32736: LD_INT 0
32738: PPUSH
// ar_miner := 81 ;
32739: LD_ADDR_EXP 137
32743: PUSH
32744: LD_INT 81
32746: ST_TO_ADDR
// ar_crane := 88 ;
32747: LD_ADDR_EXP 136
32751: PUSH
32752: LD_INT 88
32754: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32755: LD_ADDR_EXP 131
32759: PUSH
32760: LD_INT 89
32762: ST_TO_ADDR
// us_hack := 99 ;
32763: LD_ADDR_EXP 132
32767: PUSH
32768: LD_INT 99
32770: ST_TO_ADDR
// us_artillery := 97 ;
32771: LD_ADDR_EXP 133
32775: PUSH
32776: LD_INT 97
32778: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32779: LD_ADDR_EXP 134
32783: PUSH
32784: LD_INT 91
32786: ST_TO_ADDR
// ar_mortar := 92 ;
32787: LD_ADDR_EXP 135
32791: PUSH
32792: LD_INT 92
32794: ST_TO_ADDR
// ru_radar := 98 ;
32795: LD_ADDR_EXP 130
32799: PUSH
32800: LD_INT 98
32802: ST_TO_ADDR
// tech_Artillery := 80 ;
32803: LD_ADDR_EXP 138
32807: PUSH
32808: LD_INT 80
32810: ST_TO_ADDR
// tech_RadMat := 81 ;
32811: LD_ADDR_EXP 139
32815: PUSH
32816: LD_INT 81
32818: ST_TO_ADDR
// tech_BasicTools := 82 ;
32819: LD_ADDR_EXP 140
32823: PUSH
32824: LD_INT 82
32826: ST_TO_ADDR
// tech_Cargo := 83 ;
32827: LD_ADDR_EXP 141
32831: PUSH
32832: LD_INT 83
32834: ST_TO_ADDR
// tech_Track := 84 ;
32835: LD_ADDR_EXP 142
32839: PUSH
32840: LD_INT 84
32842: ST_TO_ADDR
// tech_Crane := 85 ;
32843: LD_ADDR_EXP 143
32847: PUSH
32848: LD_INT 85
32850: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32851: LD_ADDR_EXP 144
32855: PUSH
32856: LD_INT 86
32858: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32859: LD_ADDR_EXP 145
32863: PUSH
32864: LD_INT 87
32866: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
32867: LD_ADDR_EXP 146
32871: PUSH
32872: LD_INT 88
32874: ST_TO_ADDR
// class_mastodont := 31 ;
32875: LD_ADDR_EXP 147
32879: PUSH
32880: LD_INT 31
32882: ST_TO_ADDR
// class_horse := 21 ;
32883: LD_ADDR_EXP 148
32887: PUSH
32888: LD_INT 21
32890: ST_TO_ADDR
// end ;
32891: LD_VAR 0 1
32895: RET
// every 1 do
32896: GO 32898
32898: DISABLE
// InitGlobalVariables ; end_of_file
32899: CALL 32736 0 0
32903: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32904: LD_INT 0
32906: PPUSH
32907: PPUSH
// if exist_mode then
32908: LD_VAR 0 2
32912: IFFALSE 32937
// unit := CreateCharacter ( prefix & ident ) else
32914: LD_ADDR_VAR 0 5
32918: PUSH
32919: LD_VAR 0 3
32923: PUSH
32924: LD_VAR 0 1
32928: STR
32929: PPUSH
32930: CALL_OW 34
32934: ST_TO_ADDR
32935: GO 32952
// unit := NewCharacter ( ident ) ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 25
32951: ST_TO_ADDR
// result := unit ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_VAR 0 5
32961: ST_TO_ADDR
// end ;
32962: LD_VAR 0 4
32966: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32967: LD_INT 0
32969: PPUSH
32970: PPUSH
// if not side or not nation then
32971: LD_VAR 0 1
32975: NOT
32976: PUSH
32977: LD_VAR 0 2
32981: NOT
32982: OR
32983: IFFALSE 32987
// exit ;
32985: GO 33755
// case nation of nation_american :
32987: LD_VAR 0 2
32991: PUSH
32992: LD_INT 1
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33214
33000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33001: LD_ADDR_VAR 0 4
33005: PUSH
33006: LD_INT 35
33008: PUSH
33009: LD_INT 45
33011: PUSH
33012: LD_INT 46
33014: PUSH
33015: LD_INT 47
33017: PUSH
33018: LD_INT 82
33020: PUSH
33021: LD_INT 83
33023: PUSH
33024: LD_INT 84
33026: PUSH
33027: LD_INT 85
33029: PUSH
33030: LD_INT 86
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 6
33041: PUSH
33042: LD_INT 15
33044: PUSH
33045: LD_INT 16
33047: PUSH
33048: LD_INT 7
33050: PUSH
33051: LD_INT 12
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: LD_INT 10
33059: PUSH
33060: LD_INT 14
33062: PUSH
33063: LD_INT 20
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 25
33074: PUSH
33075: LD_INT 32
33077: PUSH
33078: LD_INT 27
33080: PUSH
33081: LD_INT 36
33083: PUSH
33084: LD_INT 69
33086: PUSH
33087: LD_INT 39
33089: PUSH
33090: LD_INT 34
33092: PUSH
33093: LD_INT 40
33095: PUSH
33096: LD_INT 48
33098: PUSH
33099: LD_INT 49
33101: PUSH
33102: LD_INT 50
33104: PUSH
33105: LD_INT 51
33107: PUSH
33108: LD_INT 52
33110: PUSH
33111: LD_INT 53
33113: PUSH
33114: LD_INT 54
33116: PUSH
33117: LD_INT 55
33119: PUSH
33120: LD_INT 56
33122: PUSH
33123: LD_INT 57
33125: PUSH
33126: LD_INT 58
33128: PUSH
33129: LD_INT 59
33131: PUSH
33132: LD_INT 60
33134: PUSH
33135: LD_INT 61
33137: PUSH
33138: LD_INT 62
33140: PUSH
33141: LD_INT 80
33143: PUSH
33144: LD_INT 82
33146: PUSH
33147: LD_INT 83
33149: PUSH
33150: LD_INT 84
33152: PUSH
33153: LD_INT 85
33155: PUSH
33156: LD_INT 86
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
33212: GO 33679
33214: LD_INT 2
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33448
33222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: LD_INT 35
33230: PUSH
33231: LD_INT 45
33233: PUSH
33234: LD_INT 46
33236: PUSH
33237: LD_INT 47
33239: PUSH
33240: LD_INT 82
33242: PUSH
33243: LD_INT 83
33245: PUSH
33246: LD_INT 84
33248: PUSH
33249: LD_INT 85
33251: PUSH
33252: LD_INT 87
33254: PUSH
33255: LD_INT 70
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 11
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: LD_INT 5
33272: PUSH
33273: LD_INT 6
33275: PUSH
33276: LD_INT 15
33278: PUSH
33279: LD_INT 18
33281: PUSH
33282: LD_INT 7
33284: PUSH
33285: LD_INT 17
33287: PUSH
33288: LD_INT 8
33290: PUSH
33291: LD_INT 20
33293: PUSH
33294: LD_INT 21
33296: PUSH
33297: LD_INT 22
33299: PUSH
33300: LD_INT 72
33302: PUSH
33303: LD_INT 26
33305: PUSH
33306: LD_INT 69
33308: PUSH
33309: LD_INT 39
33311: PUSH
33312: LD_INT 40
33314: PUSH
33315: LD_INT 41
33317: PUSH
33318: LD_INT 42
33320: PUSH
33321: LD_INT 43
33323: PUSH
33324: LD_INT 48
33326: PUSH
33327: LD_INT 49
33329: PUSH
33330: LD_INT 50
33332: PUSH
33333: LD_INT 51
33335: PUSH
33336: LD_INT 52
33338: PUSH
33339: LD_INT 53
33341: PUSH
33342: LD_INT 54
33344: PUSH
33345: LD_INT 55
33347: PUSH
33348: LD_INT 56
33350: PUSH
33351: LD_INT 60
33353: PUSH
33354: LD_INT 61
33356: PUSH
33357: LD_INT 62
33359: PUSH
33360: LD_INT 66
33362: PUSH
33363: LD_INT 67
33365: PUSH
33366: LD_INT 68
33368: PUSH
33369: LD_INT 81
33371: PUSH
33372: LD_INT 82
33374: PUSH
33375: LD_INT 83
33377: PUSH
33378: LD_INT 84
33380: PUSH
33381: LD_INT 85
33383: PUSH
33384: LD_INT 87
33386: PUSH
33387: LD_INT 88
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
33446: GO 33679
33448: LD_INT 3
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33678
33456: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33457: LD_ADDR_VAR 0 4
33461: PUSH
33462: LD_INT 46
33464: PUSH
33465: LD_INT 47
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 82
33476: PUSH
33477: LD_INT 83
33479: PUSH
33480: LD_INT 84
33482: PUSH
33483: LD_INT 85
33485: PUSH
33486: LD_INT 86
33488: PUSH
33489: LD_INT 11
33491: PUSH
33492: LD_INT 9
33494: PUSH
33495: LD_INT 20
33497: PUSH
33498: LD_INT 19
33500: PUSH
33501: LD_INT 21
33503: PUSH
33504: LD_INT 24
33506: PUSH
33507: LD_INT 22
33509: PUSH
33510: LD_INT 25
33512: PUSH
33513: LD_INT 28
33515: PUSH
33516: LD_INT 29
33518: PUSH
33519: LD_INT 30
33521: PUSH
33522: LD_INT 31
33524: PUSH
33525: LD_INT 37
33527: PUSH
33528: LD_INT 38
33530: PUSH
33531: LD_INT 32
33533: PUSH
33534: LD_INT 27
33536: PUSH
33537: LD_INT 33
33539: PUSH
33540: LD_INT 69
33542: PUSH
33543: LD_INT 39
33545: PUSH
33546: LD_INT 34
33548: PUSH
33549: LD_INT 40
33551: PUSH
33552: LD_INT 71
33554: PUSH
33555: LD_INT 23
33557: PUSH
33558: LD_INT 44
33560: PUSH
33561: LD_INT 48
33563: PUSH
33564: LD_INT 49
33566: PUSH
33567: LD_INT 50
33569: PUSH
33570: LD_INT 51
33572: PUSH
33573: LD_INT 52
33575: PUSH
33576: LD_INT 53
33578: PUSH
33579: LD_INT 54
33581: PUSH
33582: LD_INT 55
33584: PUSH
33585: LD_INT 56
33587: PUSH
33588: LD_INT 57
33590: PUSH
33591: LD_INT 58
33593: PUSH
33594: LD_INT 59
33596: PUSH
33597: LD_INT 63
33599: PUSH
33600: LD_INT 64
33602: PUSH
33603: LD_INT 65
33605: PUSH
33606: LD_INT 82
33608: PUSH
33609: LD_INT 83
33611: PUSH
33612: LD_INT 84
33614: PUSH
33615: LD_INT 85
33617: PUSH
33618: LD_INT 86
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
33676: GO 33679
33678: POP
// if state > - 1 and state < 3 then
33679: LD_VAR 0 3
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: GREATER
33688: PUSH
33689: LD_VAR 0 3
33693: PUSH
33694: LD_INT 3
33696: LESS
33697: AND
33698: IFFALSE 33755
// for i in result do
33700: LD_ADDR_VAR 0 5
33704: PUSH
33705: LD_VAR 0 4
33709: PUSH
33710: FOR_IN
33711: IFFALSE 33753
// if GetTech ( i , side ) <> state then
33713: LD_VAR 0 5
33717: PPUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 321
33727: PUSH
33728: LD_VAR 0 3
33732: NONEQUAL
33733: IFFALSE 33751
// result := result diff i ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: LD_VAR 0 4
33744: PUSH
33745: LD_VAR 0 5
33749: DIFF
33750: ST_TO_ADDR
33751: GO 33710
33753: POP
33754: POP
// end ;
33755: LD_VAR 0 4
33759: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33760: LD_INT 0
33762: PPUSH
33763: PPUSH
33764: PPUSH
// result := true ;
33765: LD_ADDR_VAR 0 3
33769: PUSH
33770: LD_INT 1
33772: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33773: LD_ADDR_VAR 0 5
33777: PUSH
33778: LD_VAR 0 2
33782: PPUSH
33783: CALL_OW 480
33787: ST_TO_ADDR
// if not tmp then
33788: LD_VAR 0 5
33792: NOT
33793: IFFALSE 33797
// exit ;
33795: GO 33846
// for i in tmp do
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: LD_VAR 0 5
33806: PUSH
33807: FOR_IN
33808: IFFALSE 33844
// if GetTech ( i , side ) <> state_researched then
33810: LD_VAR 0 4
33814: PPUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 321
33824: PUSH
33825: LD_INT 2
33827: NONEQUAL
33828: IFFALSE 33842
// begin result := false ;
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 0
33837: ST_TO_ADDR
// exit ;
33838: POP
33839: POP
33840: GO 33846
// end ;
33842: GO 33807
33844: POP
33845: POP
// end ;
33846: LD_VAR 0 3
33850: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33866: LD_VAR 0 1
33870: NOT
33871: PUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 257
33881: PUSH
33882: LD_INT 9
33884: NONEQUAL
33885: OR
33886: IFFALSE 33890
// exit ;
33888: GO 34463
// side := GetSide ( unit ) ;
33890: LD_ADDR_VAR 0 9
33894: PUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 255
33904: ST_TO_ADDR
// tech_space := tech_spacanom ;
33905: LD_ADDR_VAR 0 12
33909: PUSH
33910: LD_INT 29
33912: ST_TO_ADDR
// tech_time := tech_taurad ;
33913: LD_ADDR_VAR 0 13
33917: PUSH
33918: LD_INT 28
33920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33921: LD_ADDR_VAR 0 11
33925: PUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 310
33935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33936: LD_VAR 0 11
33940: PPUSH
33941: CALL_OW 247
33945: PUSH
33946: LD_INT 2
33948: EQUAL
33949: IFFALSE 33953
// exit ;
33951: GO 34463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33953: LD_ADDR_VAR 0 8
33957: PUSH
33958: LD_INT 81
33960: PUSH
33961: LD_VAR 0 9
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: LD_INT 21
33975: PUSH
33976: LD_INT 3
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PPUSH
33991: CALL_OW 69
33995: ST_TO_ADDR
// if not tmp then
33996: LD_VAR 0 8
34000: NOT
34001: IFFALSE 34005
// exit ;
34003: GO 34463
// if in_unit then
34005: LD_VAR 0 11
34009: IFFALSE 34033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34011: LD_ADDR_VAR 0 10
34015: PUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: LD_VAR 0 11
34025: PPUSH
34026: CALL_OW 74
34030: ST_TO_ADDR
34031: GO 34053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34033: LD_ADDR_VAR 0 10
34037: PUSH
34038: LD_VAR 0 8
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 74
34052: ST_TO_ADDR
// if not enemy then
34053: LD_VAR 0 10
34057: NOT
34058: IFFALSE 34062
// exit ;
34060: GO 34463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34062: LD_VAR 0 11
34066: PUSH
34067: LD_VAR 0 11
34071: PPUSH
34072: LD_VAR 0 10
34076: PPUSH
34077: CALL_OW 296
34081: PUSH
34082: LD_INT 13
34084: GREATER
34085: AND
34086: PUSH
34087: LD_VAR 0 1
34091: PPUSH
34092: LD_VAR 0 10
34096: PPUSH
34097: CALL_OW 296
34101: PUSH
34102: LD_INT 12
34104: GREATER
34105: OR
34106: IFFALSE 34110
// exit ;
34108: GO 34463
// missile := [ 1 ] ;
34110: LD_ADDR_VAR 0 14
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34121: LD_VAR 0 9
34125: PPUSH
34126: LD_VAR 0 12
34130: PPUSH
34131: CALL_OW 325
34135: IFFALSE 34164
// missile := Insert ( missile , missile + 1 , 2 ) ;
34137: LD_ADDR_VAR 0 14
34141: PUSH
34142: LD_VAR 0 14
34146: PPUSH
34147: LD_VAR 0 14
34151: PUSH
34152: LD_INT 1
34154: PLUS
34155: PPUSH
34156: LD_INT 2
34158: PPUSH
34159: CALL_OW 2
34163: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34164: LD_VAR 0 9
34168: PPUSH
34169: LD_VAR 0 13
34173: PPUSH
34174: CALL_OW 325
34178: PUSH
34179: LD_VAR 0 10
34183: PPUSH
34184: CALL_OW 255
34188: PPUSH
34189: LD_VAR 0 13
34193: PPUSH
34194: CALL_OW 325
34198: NOT
34199: AND
34200: IFFALSE 34229
// missile := Insert ( missile , missile + 1 , 3 ) ;
34202: LD_ADDR_VAR 0 14
34206: PUSH
34207: LD_VAR 0 14
34211: PPUSH
34212: LD_VAR 0 14
34216: PUSH
34217: LD_INT 1
34219: PLUS
34220: PPUSH
34221: LD_INT 3
34223: PPUSH
34224: CALL_OW 2
34228: ST_TO_ADDR
// if missile < 2 then
34229: LD_VAR 0 14
34233: PUSH
34234: LD_INT 2
34236: LESS
34237: IFFALSE 34241
// exit ;
34239: GO 34463
// x := GetX ( enemy ) ;
34241: LD_ADDR_VAR 0 4
34245: PUSH
34246: LD_VAR 0 10
34250: PPUSH
34251: CALL_OW 250
34255: ST_TO_ADDR
// y := GetY ( enemy ) ;
34256: LD_ADDR_VAR 0 5
34260: PUSH
34261: LD_VAR 0 10
34265: PPUSH
34266: CALL_OW 251
34270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34271: LD_ADDR_VAR 0 6
34275: PUSH
34276: LD_VAR 0 4
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PPUSH
34285: LD_INT 1
34287: PPUSH
34288: CALL_OW 12
34292: PLUS
34293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34294: LD_ADDR_VAR 0 7
34298: PUSH
34299: LD_VAR 0 5
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PPUSH
34308: LD_INT 1
34310: PPUSH
34311: CALL_OW 12
34315: PLUS
34316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34317: LD_VAR 0 6
34321: PPUSH
34322: LD_VAR 0 7
34326: PPUSH
34327: CALL_OW 488
34331: NOT
34332: IFFALSE 34354
// begin _x := x ;
34334: LD_ADDR_VAR 0 6
34338: PUSH
34339: LD_VAR 0 4
34343: ST_TO_ADDR
// _y := y ;
34344: LD_ADDR_VAR 0 7
34348: PUSH
34349: LD_VAR 0 5
34353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 1
34361: PPUSH
34362: LD_VAR 0 14
34366: PPUSH
34367: CALL_OW 12
34371: ST_TO_ADDR
// case i of 1 :
34372: LD_VAR 0 3
34376: PUSH
34377: LD_INT 1
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34402
34385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34386: LD_VAR 0 1
34390: PPUSH
34391: LD_VAR 0 10
34395: PPUSH
34396: CALL_OW 115
34400: GO 34463
34402: LD_INT 2
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34432
34410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 6
34420: PPUSH
34421: LD_VAR 0 7
34425: PPUSH
34426: CALL_OW 153
34430: GO 34463
34432: LD_INT 3
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34462
34440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34441: LD_VAR 0 1
34445: PPUSH
34446: LD_VAR 0 6
34450: PPUSH
34451: LD_VAR 0 7
34455: PPUSH
34456: CALL_OW 154
34460: GO 34463
34462: POP
// end ;
34463: LD_VAR 0 2
34467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
// if not unit or not building then
34476: LD_VAR 0 1
34480: NOT
34481: PUSH
34482: LD_VAR 0 2
34486: NOT
34487: OR
34488: IFFALSE 34492
// exit ;
34490: GO 34650
// x := GetX ( building ) ;
34492: LD_ADDR_VAR 0 5
34496: PUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: CALL_OW 250
34506: ST_TO_ADDR
// y := GetY ( building ) ;
34507: LD_ADDR_VAR 0 6
34511: PUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: CALL_OW 251
34521: ST_TO_ADDR
// for i = 0 to 5 do
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: DOUBLE
34528: LD_INT 0
34530: DEC
34531: ST_TO_ADDR
34532: LD_INT 5
34534: PUSH
34535: FOR_TO
34536: IFFALSE 34648
// begin _x := ShiftX ( x , i , 3 ) ;
34538: LD_ADDR_VAR 0 7
34542: PUSH
34543: LD_VAR 0 5
34547: PPUSH
34548: LD_VAR 0 4
34552: PPUSH
34553: LD_INT 3
34555: PPUSH
34556: CALL_OW 272
34560: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34561: LD_ADDR_VAR 0 8
34565: PUSH
34566: LD_VAR 0 6
34570: PPUSH
34571: LD_VAR 0 4
34575: PPUSH
34576: LD_INT 3
34578: PPUSH
34579: CALL_OW 273
34583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34584: LD_VAR 0 7
34588: PPUSH
34589: LD_VAR 0 8
34593: PPUSH
34594: CALL_OW 488
34598: NOT
34599: IFFALSE 34603
// continue ;
34601: GO 34535
// if HexInfo ( _x , _y ) = 0 then
34603: LD_VAR 0 7
34607: PPUSH
34608: LD_VAR 0 8
34612: PPUSH
34613: CALL_OW 428
34617: PUSH
34618: LD_INT 0
34620: EQUAL
34621: IFFALSE 34646
// begin ComMoveXY ( unit , _x , _y ) ;
34623: LD_VAR 0 1
34627: PPUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: LD_VAR 0 8
34637: PPUSH
34638: CALL_OW 111
// exit ;
34642: POP
34643: POP
34644: GO 34650
// end ; end ;
34646: GO 34535
34648: POP
34649: POP
// end ;
34650: LD_VAR 0 3
34654: RET
// export function ScanBase ( side , base_area ) ; begin
34655: LD_INT 0
34657: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_INT 81
34670: PUSH
34671: LD_VAR 0 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PPUSH
34680: CALL_OW 70
34684: ST_TO_ADDR
// end ;
34685: LD_VAR 0 3
34689: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
// result := false ;
34696: LD_ADDR_VAR 0 2
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// side := GetSide ( unit ) ;
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 255
34718: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34719: LD_ADDR_VAR 0 4
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 248
34733: ST_TO_ADDR
// case nat of 1 :
34734: LD_VAR 0 4
34738: PUSH
34739: LD_INT 1
34741: DOUBLE
34742: EQUAL
34743: IFTRUE 34747
34745: GO 34758
34747: POP
// tech := tech_lassight ; 2 :
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: LD_INT 12
34755: ST_TO_ADDR
34756: GO 34797
34758: LD_INT 2
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34777
34766: POP
// tech := tech_mortar ; 3 :
34767: LD_ADDR_VAR 0 5
34771: PUSH
34772: LD_INT 41
34774: ST_TO_ADDR
34775: GO 34797
34777: LD_INT 3
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34785
34783: GO 34796
34785: POP
// tech := tech_bazooka ; end ;
34786: LD_ADDR_VAR 0 5
34790: PUSH
34791: LD_INT 44
34793: ST_TO_ADDR
34794: GO 34797
34796: POP
// if Researched ( side , tech ) then
34797: LD_VAR 0 3
34801: PPUSH
34802: LD_VAR 0 5
34806: PPUSH
34807: CALL_OW 325
34811: IFFALSE 34838
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: LD_INT 8
34823: PUSH
34824: LD_INT 9
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: PUSH
34832: LD_VAR 0 4
34836: ARRAY
34837: ST_TO_ADDR
// end ;
34838: LD_VAR 0 2
34842: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
34847: PPUSH
// if not mines then
34848: LD_VAR 0 2
34852: NOT
34853: IFFALSE 34857
// exit ;
34855: GO 35001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34857: LD_ADDR_VAR 0 5
34861: PUSH
34862: LD_INT 81
34864: PUSH
34865: LD_VAR 0 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 3
34876: PUSH
34877: LD_INT 21
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 69
34899: ST_TO_ADDR
// for i in mines do
34900: LD_ADDR_VAR 0 4
34904: PUSH
34905: LD_VAR 0 2
34909: PUSH
34910: FOR_IN
34911: IFFALSE 34999
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34913: LD_VAR 0 4
34917: PUSH
34918: LD_INT 1
34920: ARRAY
34921: PPUSH
34922: LD_VAR 0 4
34926: PUSH
34927: LD_INT 2
34929: ARRAY
34930: PPUSH
34931: CALL_OW 458
34935: NOT
34936: IFFALSE 34940
// continue ;
34938: GO 34910
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 1
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 4
34953: PUSH
34954: LD_INT 2
34956: ARRAY
34957: PPUSH
34958: CALL_OW 428
34962: PUSH
34963: LD_VAR 0 5
34967: IN
34968: IFFALSE 34997
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34970: LD_VAR 0 4
34974: PUSH
34975: LD_INT 1
34977: ARRAY
34978: PPUSH
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 2
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 456
// end ;
34997: GO 34910
34999: POP
35000: POP
// end ;
35001: LD_VAR 0 3
35005: RET
// export function Count ( array ) ; var i ; begin
35006: LD_INT 0
35008: PPUSH
35009: PPUSH
// result := 0 ;
35010: LD_ADDR_VAR 0 2
35014: PUSH
35015: LD_INT 0
35017: ST_TO_ADDR
// for i in array do
35018: LD_ADDR_VAR 0 3
35022: PUSH
35023: LD_VAR 0 1
35027: PUSH
35028: FOR_IN
35029: IFFALSE 35053
// if i then
35031: LD_VAR 0 3
35035: IFFALSE 35051
// result := result + 1 ;
35037: LD_ADDR_VAR 0 2
35041: PUSH
35042: LD_VAR 0 2
35046: PUSH
35047: LD_INT 1
35049: PLUS
35050: ST_TO_ADDR
35051: GO 35028
35053: POP
35054: POP
// end ;
35055: LD_VAR 0 2
35059: RET
// export function IsEmpty ( building ) ; begin
35060: LD_INT 0
35062: PPUSH
// if not building then
35063: LD_VAR 0 1
35067: NOT
35068: IFFALSE 35072
// exit ;
35070: GO 35115
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35072: LD_ADDR_VAR 0 2
35076: PUSH
35077: LD_VAR 0 1
35081: PUSH
35082: LD_INT 22
35084: PUSH
35085: LD_VAR 0 1
35089: PPUSH
35090: CALL_OW 255
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 58
35101: PUSH
35102: EMPTY
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PPUSH
35109: CALL_OW 69
35113: IN
35114: ST_TO_ADDR
// end ;
35115: LD_VAR 0 2
35119: RET
// export function IsNotFull ( building ) ; begin
35120: LD_INT 0
35122: PPUSH
// if not building then
35123: LD_VAR 0 1
35127: NOT
35128: IFFALSE 35132
// exit ;
35130: GO 35151
// result := UnitsInside ( building ) < 6 ;
35132: LD_ADDR_VAR 0 2
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: CALL_OW 313
35146: PUSH
35147: LD_INT 6
35149: LESS
35150: ST_TO_ADDR
// end ;
35151: LD_VAR 0 2
35155: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35156: LD_INT 0
35158: PPUSH
35159: PPUSH
35160: PPUSH
35161: PPUSH
// tmp := [ ] ;
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: EMPTY
35168: ST_TO_ADDR
// list := [ ] ;
35169: LD_ADDR_VAR 0 5
35173: PUSH
35174: EMPTY
35175: ST_TO_ADDR
// for i = 16 to 25 do
35176: LD_ADDR_VAR 0 4
35180: PUSH
35181: DOUBLE
35182: LD_INT 16
35184: DEC
35185: ST_TO_ADDR
35186: LD_INT 25
35188: PUSH
35189: FOR_TO
35190: IFFALSE 35263
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_VAR 0 3
35201: PUSH
35202: LD_INT 22
35204: PUSH
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 255
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 91
35221: PUSH
35222: LD_VAR 0 1
35226: PUSH
35227: LD_INT 6
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 30
35237: PUSH
35238: LD_VAR 0 4
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: PUSH
35252: EMPTY
35253: LIST
35254: PPUSH
35255: CALL_OW 69
35259: ADD
35260: ST_TO_ADDR
35261: GO 35189
35263: POP
35264: POP
// for i = 1 to tmp do
35265: LD_ADDR_VAR 0 4
35269: PUSH
35270: DOUBLE
35271: LD_INT 1
35273: DEC
35274: ST_TO_ADDR
35275: LD_VAR 0 3
35279: PUSH
35280: FOR_TO
35281: IFFALSE 35369
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35283: LD_ADDR_VAR 0 5
35287: PUSH
35288: LD_VAR 0 5
35292: PUSH
35293: LD_VAR 0 3
35297: PUSH
35298: LD_VAR 0 4
35302: ARRAY
35303: PPUSH
35304: CALL_OW 266
35308: PUSH
35309: LD_VAR 0 3
35313: PUSH
35314: LD_VAR 0 4
35318: ARRAY
35319: PPUSH
35320: CALL_OW 250
35324: PUSH
35325: LD_VAR 0 3
35329: PUSH
35330: LD_VAR 0 4
35334: ARRAY
35335: PPUSH
35336: CALL_OW 251
35340: PUSH
35341: LD_VAR 0 3
35345: PUSH
35346: LD_VAR 0 4
35350: ARRAY
35351: PPUSH
35352: CALL_OW 254
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: ADD
35366: ST_TO_ADDR
35367: GO 35280
35369: POP
35370: POP
// result := list ;
35371: LD_ADDR_VAR 0 2
35375: PUSH
35376: LD_VAR 0 5
35380: ST_TO_ADDR
// end ;
35381: LD_VAR 0 2
35385: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35386: LD_INT 0
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
// if not factory then
35395: LD_VAR 0 1
35399: NOT
35400: IFFALSE 35404
// exit ;
35402: GO 35997
// if control = control_apeman then
35404: LD_VAR 0 4
35408: PUSH
35409: LD_INT 5
35411: EQUAL
35412: IFFALSE 35521
// begin tmp := UnitsInside ( factory ) ;
35414: LD_ADDR_VAR 0 8
35418: PUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 313
35428: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35429: LD_VAR 0 8
35433: PPUSH
35434: LD_INT 25
35436: PUSH
35437: LD_INT 12
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PPUSH
35444: CALL_OW 72
35448: NOT
35449: IFFALSE 35459
// control := control_manual ;
35451: LD_ADDR_VAR 0 4
35455: PUSH
35456: LD_INT 1
35458: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35459: LD_ADDR_VAR 0 8
35463: PUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL 35156 0 1
35473: ST_TO_ADDR
// if tmp then
35474: LD_VAR 0 8
35478: IFFALSE 35521
// begin for i in tmp do
35480: LD_ADDR_VAR 0 7
35484: PUSH
35485: LD_VAR 0 8
35489: PUSH
35490: FOR_IN
35491: IFFALSE 35519
// if i [ 1 ] = b_ext_radio then
35493: LD_VAR 0 7
35497: PUSH
35498: LD_INT 1
35500: ARRAY
35501: PUSH
35502: LD_INT 22
35504: EQUAL
35505: IFFALSE 35517
// begin control := control_remote ;
35507: LD_ADDR_VAR 0 4
35511: PUSH
35512: LD_INT 2
35514: ST_TO_ADDR
// break ;
35515: GO 35519
// end ;
35517: GO 35490
35519: POP
35520: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35521: LD_VAR 0 1
35525: PPUSH
35526: LD_VAR 0 2
35530: PPUSH
35531: LD_VAR 0 3
35535: PPUSH
35536: LD_VAR 0 4
35540: PPUSH
35541: LD_VAR 0 5
35545: PPUSH
35546: CALL_OW 448
35550: IFFALSE 35585
// begin result := [ chassis , engine , control , weapon ] ;
35552: LD_ADDR_VAR 0 6
35556: PUSH
35557: LD_VAR 0 2
35561: PUSH
35562: LD_VAR 0 3
35566: PUSH
35567: LD_VAR 0 4
35571: PUSH
35572: LD_VAR 0 5
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// exit ;
35583: GO 35997
// end ; _chassis := AvailableChassisList ( factory ) ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL_OW 475
35599: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35600: LD_ADDR_VAR 0 11
35604: PUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 476
35614: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35615: LD_ADDR_VAR 0 12
35619: PUSH
35620: LD_VAR 0 1
35624: PPUSH
35625: CALL_OW 477
35629: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35630: LD_ADDR_VAR 0 10
35634: PUSH
35635: LD_VAR 0 1
35639: PPUSH
35640: CALL_OW 478
35644: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35645: LD_VAR 0 9
35649: NOT
35650: PUSH
35651: LD_VAR 0 11
35655: NOT
35656: OR
35657: PUSH
35658: LD_VAR 0 12
35662: NOT
35663: OR
35664: PUSH
35665: LD_VAR 0 10
35669: NOT
35670: OR
35671: IFFALSE 35706
// begin result := [ chassis , engine , control , weapon ] ;
35673: LD_ADDR_VAR 0 6
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 3
35687: PUSH
35688: LD_VAR 0 4
35692: PUSH
35693: LD_VAR 0 5
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// exit ;
35704: GO 35997
// end ; if not chassis in _chassis then
35706: LD_VAR 0 2
35710: PUSH
35711: LD_VAR 0 9
35715: IN
35716: NOT
35717: IFFALSE 35743
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35719: LD_ADDR_VAR 0 2
35723: PUSH
35724: LD_VAR 0 9
35728: PUSH
35729: LD_INT 1
35731: PPUSH
35732: LD_VAR 0 9
35736: PPUSH
35737: CALL_OW 12
35741: ARRAY
35742: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35743: LD_VAR 0 2
35747: PPUSH
35748: LD_VAR 0 3
35752: PPUSH
35753: CALL 36002 0 2
35757: NOT
35758: IFFALSE 35817
// repeat engine := _engine [ 1 ] ;
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 11
35769: PUSH
35770: LD_INT 1
35772: ARRAY
35773: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35774: LD_ADDR_VAR 0 11
35778: PUSH
35779: LD_VAR 0 11
35783: PPUSH
35784: LD_INT 1
35786: PPUSH
35787: CALL_OW 3
35791: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35792: LD_VAR 0 2
35796: PPUSH
35797: LD_VAR 0 3
35801: PPUSH
35802: CALL 36002 0 2
35806: PUSH
35807: LD_VAR 0 11
35811: PUSH
35812: EMPTY
35813: EQUAL
35814: OR
35815: IFFALSE 35760
// if not control in _control then
35817: LD_VAR 0 4
35821: PUSH
35822: LD_VAR 0 12
35826: IN
35827: NOT
35828: IFFALSE 35854
// control := _control [ rand ( 1 , _control ) ] ;
35830: LD_ADDR_VAR 0 4
35834: PUSH
35835: LD_VAR 0 12
35839: PUSH
35840: LD_INT 1
35842: PPUSH
35843: LD_VAR 0 12
35847: PPUSH
35848: CALL_OW 12
35852: ARRAY
35853: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35854: LD_VAR 0 2
35858: PPUSH
35859: LD_VAR 0 5
35863: PPUSH
35864: CALL 36222 0 2
35868: NOT
35869: IFFALSE 35928
// repeat weapon := _weapon [ 1 ] ;
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 10
35880: PUSH
35881: LD_INT 1
35883: ARRAY
35884: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35885: LD_ADDR_VAR 0 10
35889: PUSH
35890: LD_VAR 0 10
35894: PPUSH
35895: LD_INT 1
35897: PPUSH
35898: CALL_OW 3
35902: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 5
35912: PPUSH
35913: CALL 36222 0 2
35917: PUSH
35918: LD_VAR 0 10
35922: PUSH
35923: EMPTY
35924: EQUAL
35925: OR
35926: IFFALSE 35871
// result := [ ] ;
35928: LD_ADDR_VAR 0 6
35932: PUSH
35933: EMPTY
35934: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35935: LD_VAR 0 1
35939: PPUSH
35940: LD_VAR 0 2
35944: PPUSH
35945: LD_VAR 0 3
35949: PPUSH
35950: LD_VAR 0 4
35954: PPUSH
35955: LD_VAR 0 5
35959: PPUSH
35960: CALL_OW 448
35964: IFFALSE 35997
// result := [ chassis , engine , control , weapon ] ;
35966: LD_ADDR_VAR 0 6
35970: PUSH
35971: LD_VAR 0 2
35975: PUSH
35976: LD_VAR 0 3
35980: PUSH
35981: LD_VAR 0 4
35985: PUSH
35986: LD_VAR 0 5
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// end ;
35997: LD_VAR 0 6
36001: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36002: LD_INT 0
36004: PPUSH
// if not chassis or not engine then
36005: LD_VAR 0 1
36009: NOT
36010: PUSH
36011: LD_VAR 0 2
36015: NOT
36016: OR
36017: IFFALSE 36021
// exit ;
36019: GO 36217
// case engine of engine_solar :
36021: LD_VAR 0 2
36025: PUSH
36026: LD_INT 2
36028: DOUBLE
36029: EQUAL
36030: IFTRUE 36034
36032: GO 36072
36034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36035: LD_ADDR_VAR 0 3
36039: PUSH
36040: LD_INT 11
36042: PUSH
36043: LD_INT 12
36045: PUSH
36046: LD_INT 13
36048: PUSH
36049: LD_INT 14
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
36070: GO 36201
36072: LD_INT 1
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36142
36080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_INT 11
36088: PUSH
36089: LD_INT 12
36091: PUSH
36092: LD_INT 13
36094: PUSH
36095: LD_INT 14
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: LD_INT 4
36109: PUSH
36110: LD_INT 5
36112: PUSH
36113: LD_INT 21
36115: PUSH
36116: LD_INT 23
36118: PUSH
36119: LD_INT 22
36121: PUSH
36122: LD_INT 24
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: ST_TO_ADDR
36140: GO 36201
36142: LD_INT 3
36144: DOUBLE
36145: EQUAL
36146: IFTRUE 36150
36148: GO 36200
36150: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36151: LD_ADDR_VAR 0 3
36155: PUSH
36156: LD_INT 13
36158: PUSH
36159: LD_INT 14
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: LD_INT 4
36170: PUSH
36171: LD_INT 5
36173: PUSH
36174: LD_INT 21
36176: PUSH
36177: LD_INT 22
36179: PUSH
36180: LD_INT 23
36182: PUSH
36183: LD_INT 24
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: ST_TO_ADDR
36198: GO 36201
36200: POP
// result := ( chassis in result ) ;
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_VAR 0 1
36210: PUSH
36211: LD_VAR 0 3
36215: IN
36216: ST_TO_ADDR
// end ;
36217: LD_VAR 0 3
36221: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36222: LD_INT 0
36224: PPUSH
// if not chassis or not weapon then
36225: LD_VAR 0 1
36229: NOT
36230: PUSH
36231: LD_VAR 0 2
36235: NOT
36236: OR
36237: IFFALSE 36241
// exit ;
36239: GO 37303
// case weapon of us_machine_gun :
36241: LD_VAR 0 2
36245: PUSH
36246: LD_INT 2
36248: DOUBLE
36249: EQUAL
36250: IFTRUE 36254
36252: GO 36284
36254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36255: LD_ADDR_VAR 0 3
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: LD_INT 4
36271: PUSH
36272: LD_INT 5
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: ST_TO_ADDR
36282: GO 37287
36284: LD_INT 3
36286: DOUBLE
36287: EQUAL
36288: IFTRUE 36292
36290: GO 36322
36292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 4
36309: PUSH
36310: LD_INT 5
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
36320: GO 37287
36322: LD_INT 11
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36330
36328: GO 36360
36330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36331: LD_ADDR_VAR 0 3
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 3
36344: PUSH
36345: LD_INT 4
36347: PUSH
36348: LD_INT 5
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
36358: GO 37287
36360: LD_INT 4
36362: DOUBLE
36363: EQUAL
36364: IFTRUE 36368
36366: GO 36394
36368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36369: LD_ADDR_VAR 0 3
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 3
36379: PUSH
36380: LD_INT 4
36382: PUSH
36383: LD_INT 5
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: ST_TO_ADDR
36392: GO 37287
36394: LD_INT 5
36396: DOUBLE
36397: EQUAL
36398: IFTRUE 36402
36400: GO 36428
36402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36403: LD_ADDR_VAR 0 3
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: LD_INT 4
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: ST_TO_ADDR
36426: GO 37287
36428: LD_INT 9
36430: DOUBLE
36431: EQUAL
36432: IFTRUE 36436
36434: GO 36462
36436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36437: LD_ADDR_VAR 0 3
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 4
36450: PUSH
36451: LD_INT 5
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
36460: GO 37287
36462: LD_INT 7
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36470
36468: GO 36496
36470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36471: LD_ADDR_VAR 0 3
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 4
36484: PUSH
36485: LD_INT 5
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
36494: GO 37287
36496: LD_INT 12
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36504
36502: GO 36530
36504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36505: LD_ADDR_VAR 0 3
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 3
36515: PUSH
36516: LD_INT 4
36518: PUSH
36519: LD_INT 5
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: ST_TO_ADDR
36528: GO 37287
36530: LD_INT 13
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36538
36536: GO 36564
36538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36539: LD_ADDR_VAR 0 3
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: LD_INT 4
36552: PUSH
36553: LD_INT 5
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
36562: GO 37287
36564: LD_INT 14
36566: DOUBLE
36567: EQUAL
36568: IFTRUE 36572
36570: GO 36590
36572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36573: LD_ADDR_VAR 0 3
36577: PUSH
36578: LD_INT 4
36580: PUSH
36581: LD_INT 5
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: ST_TO_ADDR
36588: GO 37287
36590: LD_INT 6
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36616
36598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_INT 4
36606: PUSH
36607: LD_INT 5
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: ST_TO_ADDR
36614: GO 37287
36616: LD_INT 10
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 36642
36624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36625: LD_ADDR_VAR 0 3
36629: PUSH
36630: LD_INT 4
36632: PUSH
36633: LD_INT 5
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: ST_TO_ADDR
36640: GO 37287
36642: LD_INT 22
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36650
36648: GO 36676
36650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36651: LD_ADDR_VAR 0 3
36655: PUSH
36656: LD_INT 11
36658: PUSH
36659: LD_INT 12
36661: PUSH
36662: LD_INT 13
36664: PUSH
36665: LD_INT 14
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
36674: GO 37287
36676: LD_INT 23
36678: DOUBLE
36679: EQUAL
36680: IFTRUE 36684
36682: GO 36710
36684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36685: LD_ADDR_VAR 0 3
36689: PUSH
36690: LD_INT 11
36692: PUSH
36693: LD_INT 12
36695: PUSH
36696: LD_INT 13
36698: PUSH
36699: LD_INT 14
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
36708: GO 37287
36710: LD_INT 24
36712: DOUBLE
36713: EQUAL
36714: IFTRUE 36718
36716: GO 36744
36718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_INT 11
36726: PUSH
36727: LD_INT 12
36729: PUSH
36730: LD_INT 13
36732: PUSH
36733: LD_INT 14
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
36742: GO 37287
36744: LD_INT 30
36746: DOUBLE
36747: EQUAL
36748: IFTRUE 36752
36750: GO 36778
36752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36753: LD_ADDR_VAR 0 3
36757: PUSH
36758: LD_INT 11
36760: PUSH
36761: LD_INT 12
36763: PUSH
36764: LD_INT 13
36766: PUSH
36767: LD_INT 14
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
36776: GO 37287
36778: LD_INT 25
36780: DOUBLE
36781: EQUAL
36782: IFTRUE 36786
36784: GO 36804
36786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36787: LD_ADDR_VAR 0 3
36791: PUSH
36792: LD_INT 13
36794: PUSH
36795: LD_INT 14
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: ST_TO_ADDR
36802: GO 37287
36804: LD_INT 27
36806: DOUBLE
36807: EQUAL
36808: IFTRUE 36812
36810: GO 36830
36812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36813: LD_ADDR_VAR 0 3
36817: PUSH
36818: LD_INT 13
36820: PUSH
36821: LD_INT 14
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: ST_TO_ADDR
36828: GO 37287
36830: LD_EXP 135
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 36866
36840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: LD_INT 11
36848: PUSH
36849: LD_INT 12
36851: PUSH
36852: LD_INT 13
36854: PUSH
36855: LD_INT 14
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
36864: GO 37287
36866: LD_INT 28
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36874
36872: GO 36892
36874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_INT 13
36882: PUSH
36883: LD_INT 14
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: ST_TO_ADDR
36890: GO 37287
36892: LD_INT 29
36894: DOUBLE
36895: EQUAL
36896: IFTRUE 36900
36898: GO 36918
36900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36901: LD_ADDR_VAR 0 3
36905: PUSH
36906: LD_INT 13
36908: PUSH
36909: LD_INT 14
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: ST_TO_ADDR
36916: GO 37287
36918: LD_INT 31
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36944
36926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 13
36934: PUSH
36935: LD_INT 14
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: ST_TO_ADDR
36942: GO 37287
36944: LD_INT 26
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36952
36950: GO 36970
36952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_INT 13
36960: PUSH
36961: LD_INT 14
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: ST_TO_ADDR
36968: GO 37287
36970: LD_INT 42
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 37004
36978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36979: LD_ADDR_VAR 0 3
36983: PUSH
36984: LD_INT 21
36986: PUSH
36987: LD_INT 22
36989: PUSH
36990: LD_INT 23
36992: PUSH
36993: LD_INT 24
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
37002: GO 37287
37004: LD_INT 43
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37012
37010: GO 37038
37012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_INT 21
37020: PUSH
37021: LD_INT 22
37023: PUSH
37024: LD_INT 23
37026: PUSH
37027: LD_INT 24
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
37036: GO 37287
37038: LD_INT 44
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37072
37046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37047: LD_ADDR_VAR 0 3
37051: PUSH
37052: LD_INT 21
37054: PUSH
37055: LD_INT 22
37057: PUSH
37058: LD_INT 23
37060: PUSH
37061: LD_INT 24
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
37070: GO 37287
37072: LD_INT 45
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37080
37078: GO 37106
37080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37081: LD_ADDR_VAR 0 3
37085: PUSH
37086: LD_INT 21
37088: PUSH
37089: LD_INT 22
37091: PUSH
37092: LD_INT 23
37094: PUSH
37095: LD_INT 24
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
37104: GO 37287
37106: LD_INT 49
37108: DOUBLE
37109: EQUAL
37110: IFTRUE 37114
37112: GO 37140
37114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37115: LD_ADDR_VAR 0 3
37119: PUSH
37120: LD_INT 21
37122: PUSH
37123: LD_INT 22
37125: PUSH
37126: LD_INT 23
37128: PUSH
37129: LD_INT 24
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
37138: GO 37287
37140: LD_INT 51
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37148
37146: GO 37174
37148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37149: LD_ADDR_VAR 0 3
37153: PUSH
37154: LD_INT 21
37156: PUSH
37157: LD_INT 22
37159: PUSH
37160: LD_INT 23
37162: PUSH
37163: LD_INT 24
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
37172: GO 37287
37174: LD_INT 52
37176: DOUBLE
37177: EQUAL
37178: IFTRUE 37182
37180: GO 37208
37182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37183: LD_ADDR_VAR 0 3
37187: PUSH
37188: LD_INT 21
37190: PUSH
37191: LD_INT 22
37193: PUSH
37194: LD_INT 23
37196: PUSH
37197: LD_INT 24
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
37206: GO 37287
37208: LD_INT 53
37210: DOUBLE
37211: EQUAL
37212: IFTRUE 37216
37214: GO 37234
37216: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37217: LD_ADDR_VAR 0 3
37221: PUSH
37222: LD_INT 23
37224: PUSH
37225: LD_INT 24
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: ST_TO_ADDR
37232: GO 37287
37234: LD_INT 46
37236: DOUBLE
37237: EQUAL
37238: IFTRUE 37242
37240: GO 37260
37242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37243: LD_ADDR_VAR 0 3
37247: PUSH
37248: LD_INT 23
37250: PUSH
37251: LD_INT 24
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: ST_TO_ADDR
37258: GO 37287
37260: LD_INT 47
37262: DOUBLE
37263: EQUAL
37264: IFTRUE 37268
37266: GO 37286
37268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37269: LD_ADDR_VAR 0 3
37273: PUSH
37274: LD_INT 23
37276: PUSH
37277: LD_INT 24
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: ST_TO_ADDR
37284: GO 37287
37286: POP
// result := ( chassis in result ) ;
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_VAR 0 1
37296: PUSH
37297: LD_VAR 0 3
37301: IN
37302: ST_TO_ADDR
// end ;
37303: LD_VAR 0 3
37307: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37308: LD_INT 0
37310: PPUSH
37311: PPUSH
37312: PPUSH
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
// result := array ;
37317: LD_ADDR_VAR 0 5
37321: PUSH
37322: LD_VAR 0 1
37326: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37327: LD_VAR 0 1
37331: NOT
37332: PUSH
37333: LD_VAR 0 2
37337: NOT
37338: OR
37339: PUSH
37340: LD_VAR 0 3
37344: NOT
37345: OR
37346: PUSH
37347: LD_VAR 0 2
37351: PUSH
37352: LD_VAR 0 1
37356: GREATER
37357: OR
37358: PUSH
37359: LD_VAR 0 3
37363: PUSH
37364: LD_VAR 0 1
37368: GREATER
37369: OR
37370: IFFALSE 37374
// exit ;
37372: GO 37670
// if direction then
37374: LD_VAR 0 4
37378: IFFALSE 37442
// begin d := 1 ;
37380: LD_ADDR_VAR 0 9
37384: PUSH
37385: LD_INT 1
37387: ST_TO_ADDR
// if i_from > i_to then
37388: LD_VAR 0 2
37392: PUSH
37393: LD_VAR 0 3
37397: GREATER
37398: IFFALSE 37424
// length := ( array - i_from ) + i_to else
37400: LD_ADDR_VAR 0 11
37404: PUSH
37405: LD_VAR 0 1
37409: PUSH
37410: LD_VAR 0 2
37414: MINUS
37415: PUSH
37416: LD_VAR 0 3
37420: PLUS
37421: ST_TO_ADDR
37422: GO 37440
// length := i_to - i_from ;
37424: LD_ADDR_VAR 0 11
37428: PUSH
37429: LD_VAR 0 3
37433: PUSH
37434: LD_VAR 0 2
37438: MINUS
37439: ST_TO_ADDR
// end else
37440: GO 37503
// begin d := - 1 ;
37442: LD_ADDR_VAR 0 9
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: ST_TO_ADDR
// if i_from > i_to then
37451: LD_VAR 0 2
37455: PUSH
37456: LD_VAR 0 3
37460: GREATER
37461: IFFALSE 37481
// length := i_from - i_to else
37463: LD_ADDR_VAR 0 11
37467: PUSH
37468: LD_VAR 0 2
37472: PUSH
37473: LD_VAR 0 3
37477: MINUS
37478: ST_TO_ADDR
37479: GO 37503
// length := ( array - i_to ) + i_from ;
37481: LD_ADDR_VAR 0 11
37485: PUSH
37486: LD_VAR 0 1
37490: PUSH
37491: LD_VAR 0 3
37495: MINUS
37496: PUSH
37497: LD_VAR 0 2
37501: PLUS
37502: ST_TO_ADDR
// end ; if not length then
37503: LD_VAR 0 11
37507: NOT
37508: IFFALSE 37512
// exit ;
37510: GO 37670
// tmp := array ;
37512: LD_ADDR_VAR 0 10
37516: PUSH
37517: LD_VAR 0 1
37521: ST_TO_ADDR
// for i = 1 to length do
37522: LD_ADDR_VAR 0 6
37526: PUSH
37527: DOUBLE
37528: LD_INT 1
37530: DEC
37531: ST_TO_ADDR
37532: LD_VAR 0 11
37536: PUSH
37537: FOR_TO
37538: IFFALSE 37658
// begin for j = 1 to array do
37540: LD_ADDR_VAR 0 7
37544: PUSH
37545: DOUBLE
37546: LD_INT 1
37548: DEC
37549: ST_TO_ADDR
37550: LD_VAR 0 1
37554: PUSH
37555: FOR_TO
37556: IFFALSE 37644
// begin k := j + d ;
37558: LD_ADDR_VAR 0 8
37562: PUSH
37563: LD_VAR 0 7
37567: PUSH
37568: LD_VAR 0 9
37572: PLUS
37573: ST_TO_ADDR
// if k > array then
37574: LD_VAR 0 8
37578: PUSH
37579: LD_VAR 0 1
37583: GREATER
37584: IFFALSE 37594
// k := 1 ;
37586: LD_ADDR_VAR 0 8
37590: PUSH
37591: LD_INT 1
37593: ST_TO_ADDR
// if not k then
37594: LD_VAR 0 8
37598: NOT
37599: IFFALSE 37611
// k := array ;
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_VAR 0 1
37610: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37611: LD_ADDR_VAR 0 10
37615: PUSH
37616: LD_VAR 0 10
37620: PPUSH
37621: LD_VAR 0 8
37625: PPUSH
37626: LD_VAR 0 1
37630: PUSH
37631: LD_VAR 0 7
37635: ARRAY
37636: PPUSH
37637: CALL_OW 1
37641: ST_TO_ADDR
// end ;
37642: GO 37555
37644: POP
37645: POP
// array := tmp ;
37646: LD_ADDR_VAR 0 1
37650: PUSH
37651: LD_VAR 0 10
37655: ST_TO_ADDR
// end ;
37656: GO 37537
37658: POP
37659: POP
// result := array ;
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: LD_VAR 0 1
37669: ST_TO_ADDR
// end ;
37670: LD_VAR 0 5
37674: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37675: LD_INT 0
37677: PPUSH
37678: PPUSH
// result := 0 ;
37679: LD_ADDR_VAR 0 3
37683: PUSH
37684: LD_INT 0
37686: ST_TO_ADDR
// if not array or not value in array then
37687: LD_VAR 0 1
37691: NOT
37692: PUSH
37693: LD_VAR 0 2
37697: PUSH
37698: LD_VAR 0 1
37702: IN
37703: NOT
37704: OR
37705: IFFALSE 37709
// exit ;
37707: GO 37763
// for i = 1 to array do
37709: LD_ADDR_VAR 0 4
37713: PUSH
37714: DOUBLE
37715: LD_INT 1
37717: DEC
37718: ST_TO_ADDR
37719: LD_VAR 0 1
37723: PUSH
37724: FOR_TO
37725: IFFALSE 37761
// if value = array [ i ] then
37727: LD_VAR 0 2
37731: PUSH
37732: LD_VAR 0 1
37736: PUSH
37737: LD_VAR 0 4
37741: ARRAY
37742: EQUAL
37743: IFFALSE 37759
// begin result := i ;
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_VAR 0 4
37754: ST_TO_ADDR
// exit ;
37755: POP
37756: POP
37757: GO 37763
// end ;
37759: GO 37724
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 3
37767: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37768: LD_INT 0
37770: PPUSH
// vc_chassis := chassis ;
37771: LD_ADDR_OWVAR 37
37775: PUSH
37776: LD_VAR 0 1
37780: ST_TO_ADDR
// vc_engine := engine ;
37781: LD_ADDR_OWVAR 39
37785: PUSH
37786: LD_VAR 0 2
37790: ST_TO_ADDR
// vc_control := control ;
37791: LD_ADDR_OWVAR 38
37795: PUSH
37796: LD_VAR 0 3
37800: ST_TO_ADDR
// vc_weapon := weapon ;
37801: LD_ADDR_OWVAR 40
37805: PUSH
37806: LD_VAR 0 4
37810: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37811: LD_ADDR_OWVAR 41
37815: PUSH
37816: LD_VAR 0 5
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 6
37825: RET
// export function WantPlant ( unit ) ; var task ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
// result := false ;
37830: LD_ADDR_VAR 0 2
37834: PUSH
37835: LD_INT 0
37837: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37838: LD_ADDR_VAR 0 3
37842: PUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: CALL_OW 437
37852: ST_TO_ADDR
// if task then
37853: LD_VAR 0 3
37857: IFFALSE 37885
// if task [ 1 ] [ 1 ] = p then
37859: LD_VAR 0 3
37863: PUSH
37864: LD_INT 1
37866: ARRAY
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: PUSH
37872: LD_STRING p
37874: EQUAL
37875: IFFALSE 37885
// result := true ;
37877: LD_ADDR_VAR 0 2
37881: PUSH
37882: LD_INT 1
37884: ST_TO_ADDR
// end ;
37885: LD_VAR 0 2
37889: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37890: LD_INT 0
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
// if pos < 1 then
37896: LD_VAR 0 2
37900: PUSH
37901: LD_INT 1
37903: LESS
37904: IFFALSE 37908
// exit ;
37906: GO 38211
// if pos = 1 then
37908: LD_VAR 0 2
37912: PUSH
37913: LD_INT 1
37915: EQUAL
37916: IFFALSE 37949
// result := Replace ( arr , pos [ 1 ] , value ) else
37918: LD_ADDR_VAR 0 4
37922: PUSH
37923: LD_VAR 0 1
37927: PPUSH
37928: LD_VAR 0 2
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL_OW 1
37946: ST_TO_ADDR
37947: GO 38211
// begin tmp := arr ;
37949: LD_ADDR_VAR 0 6
37953: PUSH
37954: LD_VAR 0 1
37958: ST_TO_ADDR
// s_arr := [ tmp ] ;
37959: LD_ADDR_VAR 0 7
37963: PUSH
37964: LD_VAR 0 6
37968: PUSH
37969: EMPTY
37970: LIST
37971: ST_TO_ADDR
// for i = 1 to pos - 1 do
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: DOUBLE
37978: LD_INT 1
37980: DEC
37981: ST_TO_ADDR
37982: LD_VAR 0 2
37986: PUSH
37987: LD_INT 1
37989: MINUS
37990: PUSH
37991: FOR_TO
37992: IFFALSE 38037
// begin tmp := tmp [ pos [ i ] ] ;
37994: LD_ADDR_VAR 0 6
37998: PUSH
37999: LD_VAR 0 6
38003: PUSH
38004: LD_VAR 0 2
38008: PUSH
38009: LD_VAR 0 5
38013: ARRAY
38014: ARRAY
38015: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38016: LD_ADDR_VAR 0 7
38020: PUSH
38021: LD_VAR 0 7
38025: PUSH
38026: LD_VAR 0 6
38030: PUSH
38031: EMPTY
38032: LIST
38033: ADD
38034: ST_TO_ADDR
// end ;
38035: GO 37991
38037: POP
38038: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38039: LD_ADDR_VAR 0 6
38043: PUSH
38044: LD_VAR 0 6
38048: PPUSH
38049: LD_VAR 0 2
38053: PUSH
38054: LD_VAR 0 2
38058: ARRAY
38059: PPUSH
38060: LD_VAR 0 3
38064: PPUSH
38065: CALL_OW 1
38069: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38070: LD_ADDR_VAR 0 7
38074: PUSH
38075: LD_VAR 0 7
38079: PPUSH
38080: LD_VAR 0 7
38084: PPUSH
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 1
38094: ST_TO_ADDR
// for i = s_arr downto 2 do
38095: LD_ADDR_VAR 0 5
38099: PUSH
38100: DOUBLE
38101: LD_VAR 0 7
38105: INC
38106: ST_TO_ADDR
38107: LD_INT 2
38109: PUSH
38110: FOR_DOWNTO
38111: IFFALSE 38195
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_VAR 0 7
38122: PUSH
38123: LD_VAR 0 5
38127: PUSH
38128: LD_INT 1
38130: MINUS
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 2
38137: PUSH
38138: LD_VAR 0 5
38142: PUSH
38143: LD_INT 1
38145: MINUS
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 7
38152: PUSH
38153: LD_VAR 0 5
38157: ARRAY
38158: PPUSH
38159: CALL_OW 1
38163: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38164: LD_ADDR_VAR 0 7
38168: PUSH
38169: LD_VAR 0 7
38173: PPUSH
38174: LD_VAR 0 5
38178: PUSH
38179: LD_INT 1
38181: MINUS
38182: PPUSH
38183: LD_VAR 0 6
38187: PPUSH
38188: CALL_OW 1
38192: ST_TO_ADDR
// end ;
38193: GO 38110
38195: POP
38196: POP
// result := s_arr [ 1 ] ;
38197: LD_ADDR_VAR 0 4
38201: PUSH
38202: LD_VAR 0 7
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: ST_TO_ADDR
// end ; end ;
38211: LD_VAR 0 4
38215: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
// if not list then
38220: LD_VAR 0 1
38224: NOT
38225: IFFALSE 38229
// exit ;
38227: GO 38320
// i := list [ pos1 ] ;
38229: LD_ADDR_VAR 0 5
38233: PUSH
38234: LD_VAR 0 1
38238: PUSH
38239: LD_VAR 0 2
38243: ARRAY
38244: ST_TO_ADDR
// if not i then
38245: LD_VAR 0 5
38249: NOT
38250: IFFALSE 38254
// exit ;
38252: GO 38320
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38254: LD_ADDR_VAR 0 1
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: LD_VAR 0 1
38273: PUSH
38274: LD_VAR 0 3
38278: ARRAY
38279: PPUSH
38280: CALL_OW 1
38284: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38285: LD_ADDR_VAR 0 1
38289: PUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: LD_VAR 0 3
38299: PPUSH
38300: LD_VAR 0 5
38304: PPUSH
38305: CALL_OW 1
38309: ST_TO_ADDR
// result := list ;
38310: LD_ADDR_VAR 0 4
38314: PUSH
38315: LD_VAR 0 1
38319: ST_TO_ADDR
// end ;
38320: LD_VAR 0 4
38324: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38325: LD_INT 0
38327: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38328: LD_ADDR_VAR 0 5
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 250
38342: PPUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 251
38352: PPUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: LD_VAR 0 4
38367: PPUSH
38368: CALL 38378 0 5
38372: ST_TO_ADDR
// end ;
38373: LD_VAR 0 5
38377: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
// if not list then
38384: LD_VAR 0 3
38388: NOT
38389: IFFALSE 38393
// exit ;
38391: GO 38781
// result := [ ] ;
38393: LD_ADDR_VAR 0 6
38397: PUSH
38398: EMPTY
38399: ST_TO_ADDR
// for i in list do
38400: LD_ADDR_VAR 0 7
38404: PUSH
38405: LD_VAR 0 3
38409: PUSH
38410: FOR_IN
38411: IFFALSE 38613
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38413: LD_ADDR_VAR 0 9
38417: PUSH
38418: LD_VAR 0 7
38422: PPUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: LD_VAR 0 2
38432: PPUSH
38433: CALL_OW 297
38437: ST_TO_ADDR
// if not result then
38438: LD_VAR 0 6
38442: NOT
38443: IFFALSE 38469
// result := [ [ i , tmp ] ] else
38445: LD_ADDR_VAR 0 6
38449: PUSH
38450: LD_VAR 0 7
38454: PUSH
38455: LD_VAR 0 9
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: ST_TO_ADDR
38467: GO 38611
// begin if result [ result ] [ 2 ] < tmp then
38469: LD_VAR 0 6
38473: PUSH
38474: LD_VAR 0 6
38478: ARRAY
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: PUSH
38484: LD_VAR 0 9
38488: LESS
38489: IFFALSE 38531
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38491: LD_ADDR_VAR 0 6
38495: PUSH
38496: LD_VAR 0 6
38500: PPUSH
38501: LD_VAR 0 6
38505: PUSH
38506: LD_INT 1
38508: PLUS
38509: PPUSH
38510: LD_VAR 0 7
38514: PUSH
38515: LD_VAR 0 9
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PPUSH
38524: CALL_OW 2
38528: ST_TO_ADDR
38529: GO 38611
// for j = 1 to result do
38531: LD_ADDR_VAR 0 8
38535: PUSH
38536: DOUBLE
38537: LD_INT 1
38539: DEC
38540: ST_TO_ADDR
38541: LD_VAR 0 6
38545: PUSH
38546: FOR_TO
38547: IFFALSE 38609
// begin if tmp < result [ j ] [ 2 ] then
38549: LD_VAR 0 9
38553: PUSH
38554: LD_VAR 0 6
38558: PUSH
38559: LD_VAR 0 8
38563: ARRAY
38564: PUSH
38565: LD_INT 2
38567: ARRAY
38568: LESS
38569: IFFALSE 38607
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38571: LD_ADDR_VAR 0 6
38575: PUSH
38576: LD_VAR 0 6
38580: PPUSH
38581: LD_VAR 0 8
38585: PPUSH
38586: LD_VAR 0 7
38590: PUSH
38591: LD_VAR 0 9
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PPUSH
38600: CALL_OW 2
38604: ST_TO_ADDR
// break ;
38605: GO 38609
// end ; end ;
38607: GO 38546
38609: POP
38610: POP
// end ; end ;
38611: GO 38410
38613: POP
38614: POP
// if result and not asc then
38615: LD_VAR 0 6
38619: PUSH
38620: LD_VAR 0 4
38624: NOT
38625: AND
38626: IFFALSE 38701
// begin tmp := result ;
38628: LD_ADDR_VAR 0 9
38632: PUSH
38633: LD_VAR 0 6
38637: ST_TO_ADDR
// for i = tmp downto 1 do
38638: LD_ADDR_VAR 0 7
38642: PUSH
38643: DOUBLE
38644: LD_VAR 0 9
38648: INC
38649: ST_TO_ADDR
38650: LD_INT 1
38652: PUSH
38653: FOR_DOWNTO
38654: IFFALSE 38699
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38656: LD_ADDR_VAR 0 6
38660: PUSH
38661: LD_VAR 0 6
38665: PPUSH
38666: LD_VAR 0 9
38670: PUSH
38671: LD_VAR 0 7
38675: MINUS
38676: PUSH
38677: LD_INT 1
38679: PLUS
38680: PPUSH
38681: LD_VAR 0 9
38685: PUSH
38686: LD_VAR 0 7
38690: ARRAY
38691: PPUSH
38692: CALL_OW 1
38696: ST_TO_ADDR
38697: GO 38653
38699: POP
38700: POP
// end ; tmp := [ ] ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: EMPTY
38707: ST_TO_ADDR
// if mode then
38708: LD_VAR 0 5
38712: IFFALSE 38781
// begin for i = 1 to result do
38714: LD_ADDR_VAR 0 7
38718: PUSH
38719: DOUBLE
38720: LD_INT 1
38722: DEC
38723: ST_TO_ADDR
38724: LD_VAR 0 6
38728: PUSH
38729: FOR_TO
38730: IFFALSE 38769
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38732: LD_ADDR_VAR 0 9
38736: PUSH
38737: LD_VAR 0 9
38741: PPUSH
38742: LD_VAR 0 7
38746: PPUSH
38747: LD_VAR 0 6
38751: PUSH
38752: LD_VAR 0 7
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PPUSH
38762: CALL_OW 1
38766: ST_TO_ADDR
38767: GO 38729
38769: POP
38770: POP
// result := tmp ;
38771: LD_ADDR_VAR 0 6
38775: PUSH
38776: LD_VAR 0 9
38780: ST_TO_ADDR
// end ; end ;
38781: LD_VAR 0 6
38785: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38786: LD_INT 0
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38794: LD_ADDR_VAR 0 5
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// if not x or not y then
38816: LD_VAR 0 2
38820: NOT
38821: PUSH
38822: LD_VAR 0 3
38826: NOT
38827: OR
38828: IFFALSE 38832
// exit ;
38830: GO 40484
// if not range then
38832: LD_VAR 0 4
38836: NOT
38837: IFFALSE 38847
// range := 10 ;
38839: LD_ADDR_VAR 0 4
38843: PUSH
38844: LD_INT 10
38846: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38847: LD_ADDR_VAR 0 8
38851: PUSH
38852: LD_INT 81
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 92
38866: PUSH
38867: LD_VAR 0 2
38871: PUSH
38872: LD_VAR 0 3
38876: PUSH
38877: LD_VAR 0 4
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 21
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL_OW 69
38914: ST_TO_ADDR
// if not tmp then
38915: LD_VAR 0 8
38919: NOT
38920: IFFALSE 38924
// exit ;
38922: GO 40484
// for i in tmp do
38924: LD_ADDR_VAR 0 6
38928: PUSH
38929: LD_VAR 0 8
38933: PUSH
38934: FOR_IN
38935: IFFALSE 40459
// begin points := [ 0 , 0 , 0 ] ;
38937: LD_ADDR_VAR 0 9
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// bpoints := 1 ;
38956: LD_ADDR_VAR 0 10
38960: PUSH
38961: LD_INT 1
38963: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38964: LD_VAR 0 6
38968: PPUSH
38969: CALL_OW 247
38973: PUSH
38974: LD_INT 1
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39560
38982: POP
// begin if GetClass ( i ) = 1 then
38983: LD_VAR 0 6
38987: PPUSH
38988: CALL_OW 257
38992: PUSH
38993: LD_INT 1
38995: EQUAL
38996: IFFALSE 39017
// points := [ 10 , 5 , 3 ] ;
38998: LD_ADDR_VAR 0 9
39002: PUSH
39003: LD_INT 10
39005: PUSH
39006: LD_INT 5
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39017: LD_VAR 0 6
39021: PPUSH
39022: CALL_OW 257
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 4
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: IN
39041: IFFALSE 39062
// points := [ 3 , 2 , 1 ] ;
39043: LD_ADDR_VAR 0 9
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39062: LD_VAR 0 6
39066: PPUSH
39067: CALL_OW 257
39071: PUSH
39072: LD_INT 5
39074: EQUAL
39075: IFFALSE 39096
// points := [ 130 , 5 , 2 ] ;
39077: LD_ADDR_VAR 0 9
39081: PUSH
39082: LD_INT 130
39084: PUSH
39085: LD_INT 5
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39096: LD_VAR 0 6
39100: PPUSH
39101: CALL_OW 257
39105: PUSH
39106: LD_INT 8
39108: EQUAL
39109: IFFALSE 39130
// points := [ 35 , 35 , 30 ] ;
39111: LD_ADDR_VAR 0 9
39115: PUSH
39116: LD_INT 35
39118: PUSH
39119: LD_INT 35
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 257
39139: PUSH
39140: LD_INT 9
39142: EQUAL
39143: IFFALSE 39164
// points := [ 20 , 55 , 40 ] ;
39145: LD_ADDR_VAR 0 9
39149: PUSH
39150: LD_INT 20
39152: PUSH
39153: LD_INT 55
39155: PUSH
39156: LD_INT 40
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39164: LD_VAR 0 6
39168: PPUSH
39169: CALL_OW 257
39173: PUSH
39174: LD_INT 12
39176: PUSH
39177: LD_INT 16
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: IN
39184: IFFALSE 39205
// points := [ 5 , 3 , 2 ] ;
39186: LD_ADDR_VAR 0 9
39190: PUSH
39191: LD_INT 5
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39205: LD_VAR 0 6
39209: PPUSH
39210: CALL_OW 257
39214: PUSH
39215: LD_INT 17
39217: EQUAL
39218: IFFALSE 39239
// points := [ 100 , 50 , 75 ] ;
39220: LD_ADDR_VAR 0 9
39224: PUSH
39225: LD_INT 100
39227: PUSH
39228: LD_INT 50
39230: PUSH
39231: LD_INT 75
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39239: LD_VAR 0 6
39243: PPUSH
39244: CALL_OW 257
39248: PUSH
39249: LD_INT 15
39251: EQUAL
39252: IFFALSE 39273
// points := [ 10 , 5 , 3 ] ;
39254: LD_ADDR_VAR 0 9
39258: PUSH
39259: LD_INT 10
39261: PUSH
39262: LD_INT 5
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39273: LD_VAR 0 6
39277: PPUSH
39278: CALL_OW 257
39282: PUSH
39283: LD_INT 14
39285: EQUAL
39286: IFFALSE 39307
// points := [ 10 , 0 , 0 ] ;
39288: LD_ADDR_VAR 0 9
39292: PUSH
39293: LD_INT 10
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39307: LD_VAR 0 6
39311: PPUSH
39312: CALL_OW 257
39316: PUSH
39317: LD_INT 11
39319: EQUAL
39320: IFFALSE 39341
// points := [ 30 , 10 , 5 ] ;
39322: LD_ADDR_VAR 0 9
39326: PUSH
39327: LD_INT 30
39329: PUSH
39330: LD_INT 10
39332: PUSH
39333: LD_INT 5
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39341: LD_VAR 0 1
39345: PPUSH
39346: LD_INT 5
39348: PPUSH
39349: CALL_OW 321
39353: PUSH
39354: LD_INT 2
39356: EQUAL
39357: IFFALSE 39374
// bpoints := bpoints * 1.8 ;
39359: LD_ADDR_VAR 0 10
39363: PUSH
39364: LD_VAR 0 10
39368: PUSH
39369: LD_REAL  1.80000000000000E+0000
39372: MUL
39373: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39374: LD_VAR 0 6
39378: PPUSH
39379: CALL_OW 257
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 3
39392: PUSH
39393: LD_INT 4
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: IN
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: LD_INT 51
39410: PPUSH
39411: CALL_OW 321
39415: PUSH
39416: LD_INT 2
39418: EQUAL
39419: AND
39420: IFFALSE 39437
// bpoints := bpoints * 1.2 ;
39422: LD_ADDR_VAR 0 10
39426: PUSH
39427: LD_VAR 0 10
39431: PUSH
39432: LD_REAL  1.20000000000000E+0000
39435: MUL
39436: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39437: LD_VAR 0 6
39441: PPUSH
39442: CALL_OW 257
39446: PUSH
39447: LD_INT 5
39449: PUSH
39450: LD_INT 7
39452: PUSH
39453: LD_INT 9
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: IN
39461: PUSH
39462: LD_VAR 0 1
39466: PPUSH
39467: LD_INT 52
39469: PPUSH
39470: CALL_OW 321
39474: PUSH
39475: LD_INT 2
39477: EQUAL
39478: AND
39479: IFFALSE 39496
// bpoints := bpoints * 1.5 ;
39481: LD_ADDR_VAR 0 10
39485: PUSH
39486: LD_VAR 0 10
39490: PUSH
39491: LD_REAL  1.50000000000000E+0000
39494: MUL
39495: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39496: LD_VAR 0 1
39500: PPUSH
39501: LD_INT 66
39503: PPUSH
39504: CALL_OW 321
39508: PUSH
39509: LD_INT 2
39511: EQUAL
39512: IFFALSE 39529
// bpoints := bpoints * 1.1 ;
39514: LD_ADDR_VAR 0 10
39518: PUSH
39519: LD_VAR 0 10
39523: PUSH
39524: LD_REAL  1.10000000000000E+0000
39527: MUL
39528: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39529: LD_ADDR_VAR 0 10
39533: PUSH
39534: LD_VAR 0 10
39538: PUSH
39539: LD_VAR 0 6
39543: PPUSH
39544: LD_INT 1
39546: PPUSH
39547: CALL_OW 259
39551: PUSH
39552: LD_REAL  1.15000000000000E+0000
39555: MUL
39556: MUL
39557: ST_TO_ADDR
// end ; unit_vehicle :
39558: GO 40388
39560: LD_INT 2
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 40376
39568: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39569: LD_VAR 0 6
39573: PPUSH
39574: CALL_OW 264
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 42
39584: PUSH
39585: LD_INT 24
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: IN
39593: IFFALSE 39614
// points := [ 25 , 5 , 3 ] ;
39595: LD_ADDR_VAR 0 9
39599: PUSH
39600: LD_INT 25
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39614: LD_VAR 0 6
39618: PPUSH
39619: CALL_OW 264
39623: PUSH
39624: LD_INT 4
39626: PUSH
39627: LD_INT 43
39629: PUSH
39630: LD_INT 25
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: IN
39638: IFFALSE 39659
// points := [ 40 , 15 , 5 ] ;
39640: LD_ADDR_VAR 0 9
39644: PUSH
39645: LD_INT 40
39647: PUSH
39648: LD_INT 15
39650: PUSH
39651: LD_INT 5
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39659: LD_VAR 0 6
39663: PPUSH
39664: CALL_OW 264
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 23
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: IN
39679: IFFALSE 39700
// points := [ 7 , 25 , 8 ] ;
39681: LD_ADDR_VAR 0 9
39685: PUSH
39686: LD_INT 7
39688: PUSH
39689: LD_INT 25
39691: PUSH
39692: LD_INT 8
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39700: LD_VAR 0 6
39704: PPUSH
39705: CALL_OW 264
39709: PUSH
39710: LD_INT 5
39712: PUSH
39713: LD_INT 27
39715: PUSH
39716: LD_INT 44
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: IN
39724: IFFALSE 39745
// points := [ 14 , 50 , 16 ] ;
39726: LD_ADDR_VAR 0 9
39730: PUSH
39731: LD_INT 14
39733: PUSH
39734: LD_INT 50
39736: PUSH
39737: LD_INT 16
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39745: LD_VAR 0 6
39749: PPUSH
39750: CALL_OW 264
39754: PUSH
39755: LD_INT 6
39757: PUSH
39758: LD_INT 46
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: IN
39765: IFFALSE 39786
// points := [ 32 , 120 , 70 ] ;
39767: LD_ADDR_VAR 0 9
39771: PUSH
39772: LD_INT 32
39774: PUSH
39775: LD_INT 120
39777: PUSH
39778: LD_INT 70
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39786: LD_VAR 0 6
39790: PPUSH
39791: CALL_OW 264
39795: PUSH
39796: LD_INT 7
39798: PUSH
39799: LD_INT 28
39801: PUSH
39802: LD_INT 45
39804: PUSH
39805: LD_EXP 135
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: IN
39816: IFFALSE 39837
// points := [ 35 , 20 , 45 ] ;
39818: LD_ADDR_VAR 0 9
39822: PUSH
39823: LD_INT 35
39825: PUSH
39826: LD_INT 20
39828: PUSH
39829: LD_INT 45
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39837: LD_VAR 0 6
39841: PPUSH
39842: CALL_OW 264
39846: PUSH
39847: LD_INT 47
39849: PUSH
39850: EMPTY
39851: LIST
39852: IN
39853: IFFALSE 39874
// points := [ 67 , 45 , 75 ] ;
39855: LD_ADDR_VAR 0 9
39859: PUSH
39860: LD_INT 67
39862: PUSH
39863: LD_INT 45
39865: PUSH
39866: LD_INT 75
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39874: LD_VAR 0 6
39878: PPUSH
39879: CALL_OW 264
39883: PUSH
39884: LD_INT 26
39886: PUSH
39887: EMPTY
39888: LIST
39889: IN
39890: IFFALSE 39911
// points := [ 120 , 30 , 80 ] ;
39892: LD_ADDR_VAR 0 9
39896: PUSH
39897: LD_INT 120
39899: PUSH
39900: LD_INT 30
39902: PUSH
39903: LD_INT 80
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39911: LD_VAR 0 6
39915: PPUSH
39916: CALL_OW 264
39920: PUSH
39921: LD_INT 22
39923: PUSH
39924: EMPTY
39925: LIST
39926: IN
39927: IFFALSE 39948
// points := [ 40 , 1 , 1 ] ;
39929: LD_ADDR_VAR 0 9
39933: PUSH
39934: LD_INT 40
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39948: LD_VAR 0 6
39952: PPUSH
39953: CALL_OW 264
39957: PUSH
39958: LD_INT 29
39960: PUSH
39961: EMPTY
39962: LIST
39963: IN
39964: IFFALSE 39985
// points := [ 70 , 200 , 400 ] ;
39966: LD_ADDR_VAR 0 9
39970: PUSH
39971: LD_INT 70
39973: PUSH
39974: LD_INT 200
39976: PUSH
39977: LD_INT 400
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39985: LD_VAR 0 6
39989: PPUSH
39990: CALL_OW 264
39994: PUSH
39995: LD_INT 14
39997: PUSH
39998: LD_INT 53
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: IN
40005: IFFALSE 40026
// points := [ 40 , 10 , 20 ] ;
40007: LD_ADDR_VAR 0 9
40011: PUSH
40012: LD_INT 40
40014: PUSH
40015: LD_INT 10
40017: PUSH
40018: LD_INT 20
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40026: LD_VAR 0 6
40030: PPUSH
40031: CALL_OW 264
40035: PUSH
40036: LD_INT 9
40038: PUSH
40039: EMPTY
40040: LIST
40041: IN
40042: IFFALSE 40063
// points := [ 5 , 70 , 20 ] ;
40044: LD_ADDR_VAR 0 9
40048: PUSH
40049: LD_INT 5
40051: PUSH
40052: LD_INT 70
40054: PUSH
40055: LD_INT 20
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40063: LD_VAR 0 6
40067: PPUSH
40068: CALL_OW 264
40072: PUSH
40073: LD_INT 10
40075: PUSH
40076: EMPTY
40077: LIST
40078: IN
40079: IFFALSE 40100
// points := [ 35 , 110 , 70 ] ;
40081: LD_ADDR_VAR 0 9
40085: PUSH
40086: LD_INT 35
40088: PUSH
40089: LD_INT 110
40091: PUSH
40092: LD_INT 70
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40100: LD_VAR 0 6
40104: PPUSH
40105: CALL_OW 265
40109: PUSH
40110: LD_INT 25
40112: EQUAL
40113: IFFALSE 40134
// points := [ 80 , 65 , 100 ] ;
40115: LD_ADDR_VAR 0 9
40119: PUSH
40120: LD_INT 80
40122: PUSH
40123: LD_INT 65
40125: PUSH
40126: LD_INT 100
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40134: LD_VAR 0 6
40138: PPUSH
40139: CALL_OW 263
40143: PUSH
40144: LD_INT 1
40146: EQUAL
40147: IFFALSE 40182
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40149: LD_ADDR_VAR 0 10
40153: PUSH
40154: LD_VAR 0 10
40158: PUSH
40159: LD_VAR 0 6
40163: PPUSH
40164: CALL_OW 311
40168: PPUSH
40169: LD_INT 3
40171: PPUSH
40172: CALL_OW 259
40176: PUSH
40177: LD_INT 4
40179: MUL
40180: MUL
40181: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40182: LD_VAR 0 6
40186: PPUSH
40187: CALL_OW 263
40191: PUSH
40192: LD_INT 2
40194: EQUAL
40195: IFFALSE 40246
// begin j := IsControledBy ( i ) ;
40197: LD_ADDR_VAR 0 7
40201: PUSH
40202: LD_VAR 0 6
40206: PPUSH
40207: CALL_OW 312
40211: ST_TO_ADDR
// if j then
40212: LD_VAR 0 7
40216: IFFALSE 40246
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40218: LD_ADDR_VAR 0 10
40222: PUSH
40223: LD_VAR 0 10
40227: PUSH
40228: LD_VAR 0 7
40232: PPUSH
40233: LD_INT 3
40235: PPUSH
40236: CALL_OW 259
40240: PUSH
40241: LD_INT 3
40243: MUL
40244: MUL
40245: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40246: LD_VAR 0 6
40250: PPUSH
40251: CALL_OW 264
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: LD_INT 6
40261: PUSH
40262: LD_INT 46
40264: PUSH
40265: LD_INT 44
40267: PUSH
40268: LD_INT 47
40270: PUSH
40271: LD_INT 45
40273: PUSH
40274: LD_INT 28
40276: PUSH
40277: LD_INT 7
40279: PUSH
40280: LD_INT 27
40282: PUSH
40283: LD_INT 29
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: IN
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: LD_INT 52
40306: PPUSH
40307: CALL_OW 321
40311: PUSH
40312: LD_INT 2
40314: EQUAL
40315: AND
40316: IFFALSE 40333
// bpoints := bpoints * 1.2 ;
40318: LD_ADDR_VAR 0 10
40322: PUSH
40323: LD_VAR 0 10
40327: PUSH
40328: LD_REAL  1.20000000000000E+0000
40331: MUL
40332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 264
40342: PUSH
40343: LD_INT 6
40345: PUSH
40346: LD_INT 46
40348: PUSH
40349: LD_INT 47
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: IN
40357: IFFALSE 40374
// bpoints := bpoints * 1.2 ;
40359: LD_ADDR_VAR 0 10
40363: PUSH
40364: LD_VAR 0 10
40368: PUSH
40369: LD_REAL  1.20000000000000E+0000
40372: MUL
40373: ST_TO_ADDR
// end ; unit_building :
40374: GO 40388
40376: LD_INT 3
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 40387
40384: POP
// ; end ;
40385: GO 40388
40387: POP
// for j = 1 to 3 do
40388: LD_ADDR_VAR 0 7
40392: PUSH
40393: DOUBLE
40394: LD_INT 1
40396: DEC
40397: ST_TO_ADDR
40398: LD_INT 3
40400: PUSH
40401: FOR_TO
40402: IFFALSE 40455
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40404: LD_ADDR_VAR 0 5
40408: PUSH
40409: LD_VAR 0 5
40413: PPUSH
40414: LD_VAR 0 7
40418: PPUSH
40419: LD_VAR 0 5
40423: PUSH
40424: LD_VAR 0 7
40428: ARRAY
40429: PUSH
40430: LD_VAR 0 9
40434: PUSH
40435: LD_VAR 0 7
40439: ARRAY
40440: PUSH
40441: LD_VAR 0 10
40445: MUL
40446: PLUS
40447: PPUSH
40448: CALL_OW 1
40452: ST_TO_ADDR
40453: GO 40401
40455: POP
40456: POP
// end ;
40457: GO 38934
40459: POP
40460: POP
// result := Replace ( result , 4 , tmp ) ;
40461: LD_ADDR_VAR 0 5
40465: PUSH
40466: LD_VAR 0 5
40470: PPUSH
40471: LD_INT 4
40473: PPUSH
40474: LD_VAR 0 8
40478: PPUSH
40479: CALL_OW 1
40483: ST_TO_ADDR
// end ;
40484: LD_VAR 0 5
40488: RET
// export function DangerAtRange ( unit , range ) ; begin
40489: LD_INT 0
40491: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40492: LD_ADDR_VAR 0 3
40496: PUSH
40497: LD_VAR 0 1
40501: PPUSH
40502: CALL_OW 255
40506: PPUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: CALL_OW 250
40516: PPUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 251
40526: PPUSH
40527: LD_VAR 0 2
40531: PPUSH
40532: CALL 38786 0 4
40536: ST_TO_ADDR
// end ;
40537: LD_VAR 0 3
40541: RET
// export function DangerInArea ( side , area ) ; begin
40542: LD_INT 0
40544: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40545: LD_ADDR_VAR 0 3
40549: PUSH
40550: LD_VAR 0 2
40554: PPUSH
40555: LD_INT 81
40557: PUSH
40558: LD_VAR 0 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PPUSH
40567: CALL_OW 70
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function IsExtension ( b ) ; begin
40577: LD_INT 0
40579: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40580: LD_ADDR_VAR 0 2
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: LD_INT 23
40592: PUSH
40593: LD_INT 20
40595: PUSH
40596: LD_INT 22
40598: PUSH
40599: LD_INT 17
40601: PUSH
40602: LD_INT 24
40604: PUSH
40605: LD_INT 21
40607: PUSH
40608: LD_INT 19
40610: PUSH
40611: LD_INT 16
40613: PUSH
40614: LD_INT 25
40616: PUSH
40617: LD_INT 18
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: IN
40632: ST_TO_ADDR
// end ;
40633: LD_VAR 0 2
40637: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
// result := [ ] ;
40643: LD_ADDR_VAR 0 4
40647: PUSH
40648: EMPTY
40649: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40650: LD_ADDR_VAR 0 5
40654: PUSH
40655: LD_VAR 0 2
40659: PPUSH
40660: LD_INT 21
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PPUSH
40670: CALL_OW 70
40674: ST_TO_ADDR
// if not tmp then
40675: LD_VAR 0 5
40679: NOT
40680: IFFALSE 40684
// exit ;
40682: GO 40748
// if checkLink then
40684: LD_VAR 0 3
40688: IFFALSE 40738
// begin for i in tmp do
40690: LD_ADDR_VAR 0 6
40694: PUSH
40695: LD_VAR 0 5
40699: PUSH
40700: FOR_IN
40701: IFFALSE 40736
// if GetBase ( i ) <> base then
40703: LD_VAR 0 6
40707: PPUSH
40708: CALL_OW 274
40712: PUSH
40713: LD_VAR 0 1
40717: NONEQUAL
40718: IFFALSE 40734
// ComLinkToBase ( base , i ) ;
40720: LD_VAR 0 1
40724: PPUSH
40725: LD_VAR 0 6
40729: PPUSH
40730: CALL_OW 169
40734: GO 40700
40736: POP
40737: POP
// end ; result := tmp ;
40738: LD_ADDR_VAR 0 4
40742: PUSH
40743: LD_VAR 0 5
40747: ST_TO_ADDR
// end ;
40748: LD_VAR 0 4
40752: RET
// export function ComComplete ( units , b ) ; var i ; begin
40753: LD_INT 0
40755: PPUSH
40756: PPUSH
// if not units then
40757: LD_VAR 0 1
40761: NOT
40762: IFFALSE 40766
// exit ;
40764: GO 40856
// for i in units do
40766: LD_ADDR_VAR 0 4
40770: PUSH
40771: LD_VAR 0 1
40775: PUSH
40776: FOR_IN
40777: IFFALSE 40854
// if BuildingStatus ( b ) = bs_build then
40779: LD_VAR 0 2
40783: PPUSH
40784: CALL_OW 461
40788: PUSH
40789: LD_INT 1
40791: EQUAL
40792: IFFALSE 40852
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40794: LD_VAR 0 4
40798: PPUSH
40799: LD_STRING h
40801: PUSH
40802: LD_VAR 0 2
40806: PPUSH
40807: CALL_OW 250
40811: PUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: CALL_OW 251
40821: PUSH
40822: LD_VAR 0 2
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: PPUSH
40848: CALL_OW 446
40852: GO 40776
40854: POP
40855: POP
// end ;
40856: LD_VAR 0 3
40860: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40861: LD_INT 0
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40869: LD_VAR 0 1
40873: NOT
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 263
40884: PUSH
40885: LD_INT 2
40887: NONEQUAL
40888: OR
40889: IFFALSE 40893
// exit ;
40891: GO 41209
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40893: LD_ADDR_VAR 0 6
40897: PUSH
40898: LD_INT 22
40900: PUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 255
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: LD_INT 36
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 34
40930: PUSH
40931: LD_INT 31
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PPUSH
40947: CALL_OW 69
40951: ST_TO_ADDR
// if not tmp then
40952: LD_VAR 0 6
40956: NOT
40957: IFFALSE 40961
// exit ;
40959: GO 41209
// result := [ ] ;
40961: LD_ADDR_VAR 0 2
40965: PUSH
40966: EMPTY
40967: ST_TO_ADDR
// for i in tmp do
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_VAR 0 6
40977: PUSH
40978: FOR_IN
40979: IFFALSE 41050
// begin t := UnitsInside ( i ) ;
40981: LD_ADDR_VAR 0 4
40985: PUSH
40986: LD_VAR 0 3
40990: PPUSH
40991: CALL_OW 313
40995: ST_TO_ADDR
// if t then
40996: LD_VAR 0 4
41000: IFFALSE 41048
// for j in t do
41002: LD_ADDR_VAR 0 7
41006: PUSH
41007: LD_VAR 0 4
41011: PUSH
41012: FOR_IN
41013: IFFALSE 41046
// result := Replace ( result , result + 1 , j ) ;
41015: LD_ADDR_VAR 0 2
41019: PUSH
41020: LD_VAR 0 2
41024: PPUSH
41025: LD_VAR 0 2
41029: PUSH
41030: LD_INT 1
41032: PLUS
41033: PPUSH
41034: LD_VAR 0 7
41038: PPUSH
41039: CALL_OW 1
41043: ST_TO_ADDR
41044: GO 41012
41046: POP
41047: POP
// end ;
41048: GO 40978
41050: POP
41051: POP
// if not result then
41052: LD_VAR 0 2
41056: NOT
41057: IFFALSE 41061
// exit ;
41059: GO 41209
// mech := result [ 1 ] ;
41061: LD_ADDR_VAR 0 5
41065: PUSH
41066: LD_VAR 0 2
41070: PUSH
41071: LD_INT 1
41073: ARRAY
41074: ST_TO_ADDR
// if result > 1 then
41075: LD_VAR 0 2
41079: PUSH
41080: LD_INT 1
41082: GREATER
41083: IFFALSE 41195
// begin for i = 2 to result do
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: DOUBLE
41091: LD_INT 2
41093: DEC
41094: ST_TO_ADDR
41095: LD_VAR 0 2
41099: PUSH
41100: FOR_TO
41101: IFFALSE 41193
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41103: LD_ADDR_VAR 0 4
41107: PUSH
41108: LD_VAR 0 2
41112: PUSH
41113: LD_VAR 0 3
41117: ARRAY
41118: PPUSH
41119: LD_INT 3
41121: PPUSH
41122: CALL_OW 259
41126: PUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_VAR 0 3
41136: ARRAY
41137: PPUSH
41138: CALL_OW 432
41142: MINUS
41143: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41144: LD_VAR 0 4
41148: PUSH
41149: LD_VAR 0 5
41153: PPUSH
41154: LD_INT 3
41156: PPUSH
41157: CALL_OW 259
41161: PUSH
41162: LD_VAR 0 5
41166: PPUSH
41167: CALL_OW 432
41171: MINUS
41172: GREATEREQUAL
41173: IFFALSE 41191
// mech := result [ i ] ;
41175: LD_ADDR_VAR 0 5
41179: PUSH
41180: LD_VAR 0 2
41184: PUSH
41185: LD_VAR 0 3
41189: ARRAY
41190: ST_TO_ADDR
// end ;
41191: GO 41100
41193: POP
41194: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41195: LD_VAR 0 1
41199: PPUSH
41200: LD_VAR 0 5
41204: PPUSH
41205: CALL_OW 135
// end ;
41209: LD_VAR 0 2
41213: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
// result := [ ] ;
41229: LD_ADDR_VAR 0 7
41233: PUSH
41234: EMPTY
41235: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 266
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: IN
41256: NOT
41257: IFFALSE 41261
// exit ;
41259: GO 42895
// if name then
41261: LD_VAR 0 3
41265: IFFALSE 41281
// SetBName ( base_dep , name ) ;
41267: LD_VAR 0 1
41271: PPUSH
41272: LD_VAR 0 3
41276: PPUSH
41277: CALL_OW 500
// base := GetBase ( base_dep ) ;
41281: LD_ADDR_VAR 0 15
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 274
41295: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41296: LD_ADDR_VAR 0 16
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 255
41310: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41311: LD_ADDR_VAR 0 17
41315: PUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 248
41325: ST_TO_ADDR
// if sources then
41326: LD_VAR 0 5
41330: IFFALSE 41377
// for i = 1 to 3 do
41332: LD_ADDR_VAR 0 8
41336: PUSH
41337: DOUBLE
41338: LD_INT 1
41340: DEC
41341: ST_TO_ADDR
41342: LD_INT 3
41344: PUSH
41345: FOR_TO
41346: IFFALSE 41375
// AddResourceType ( base , i , sources [ i ] ) ;
41348: LD_VAR 0 15
41352: PPUSH
41353: LD_VAR 0 8
41357: PPUSH
41358: LD_VAR 0 5
41362: PUSH
41363: LD_VAR 0 8
41367: ARRAY
41368: PPUSH
41369: CALL_OW 276
41373: GO 41345
41375: POP
41376: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41377: LD_ADDR_VAR 0 18
41381: PUSH
41382: LD_VAR 0 15
41386: PPUSH
41387: LD_VAR 0 2
41391: PPUSH
41392: LD_INT 1
41394: PPUSH
41395: CALL 40638 0 3
41399: ST_TO_ADDR
// InitHc ;
41400: CALL_OW 19
// InitUc ;
41404: CALL_OW 18
// uc_side := side ;
41408: LD_ADDR_OWVAR 20
41412: PUSH
41413: LD_VAR 0 16
41417: ST_TO_ADDR
// uc_nation := nation ;
41418: LD_ADDR_OWVAR 21
41422: PUSH
41423: LD_VAR 0 17
41427: ST_TO_ADDR
// if buildings then
41428: LD_VAR 0 18
41432: IFFALSE 42754
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41434: LD_ADDR_VAR 0 19
41438: PUSH
41439: LD_VAR 0 18
41443: PPUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 30
41449: PUSH
41450: LD_INT 29
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 30
41459: PUSH
41460: LD_INT 30
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: PPUSH
41472: CALL_OW 72
41476: ST_TO_ADDR
// if tmp then
41477: LD_VAR 0 19
41481: IFFALSE 41529
// for i in tmp do
41483: LD_ADDR_VAR 0 8
41487: PUSH
41488: LD_VAR 0 19
41492: PUSH
41493: FOR_IN
41494: IFFALSE 41527
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41496: LD_VAR 0 8
41500: PPUSH
41501: CALL_OW 250
41505: PPUSH
41506: LD_VAR 0 8
41510: PPUSH
41511: CALL_OW 251
41515: PPUSH
41516: LD_VAR 0 16
41520: PPUSH
41521: CALL_OW 441
41525: GO 41493
41527: POP
41528: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41529: LD_VAR 0 18
41533: PPUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 30
41539: PUSH
41540: LD_INT 32
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 30
41549: PUSH
41550: LD_INT 33
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: PPUSH
41562: CALL_OW 72
41566: IFFALSE 41654
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41568: LD_ADDR_VAR 0 8
41572: PUSH
41573: LD_VAR 0 18
41577: PPUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 30
41583: PUSH
41584: LD_INT 32
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 30
41593: PUSH
41594: LD_INT 33
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: PPUSH
41606: CALL_OW 72
41610: PUSH
41611: FOR_IN
41612: IFFALSE 41652
// begin if not GetBWeapon ( i ) then
41614: LD_VAR 0 8
41618: PPUSH
41619: CALL_OW 269
41623: NOT
41624: IFFALSE 41650
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41626: LD_VAR 0 8
41630: PPUSH
41631: LD_VAR 0 8
41635: PPUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: CALL 42900 0 2
41645: PPUSH
41646: CALL_OW 431
// end ;
41650: GO 41611
41652: POP
41653: POP
// end ; for i = 1 to personel do
41654: LD_ADDR_VAR 0 8
41658: PUSH
41659: DOUBLE
41660: LD_INT 1
41662: DEC
41663: ST_TO_ADDR
41664: LD_VAR 0 6
41668: PUSH
41669: FOR_TO
41670: IFFALSE 42734
// begin if i > 4 then
41672: LD_VAR 0 8
41676: PUSH
41677: LD_INT 4
41679: GREATER
41680: IFFALSE 41684
// break ;
41682: GO 42734
// case i of 1 :
41684: LD_VAR 0 8
41688: PUSH
41689: LD_INT 1
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41777
41697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41698: LD_ADDR_VAR 0 12
41702: PUSH
41703: LD_VAR 0 18
41707: PPUSH
41708: LD_INT 22
41710: PUSH
41711: LD_VAR 0 16
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 58
41722: PUSH
41723: EMPTY
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 30
41731: PUSH
41732: LD_INT 32
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 30
41741: PUSH
41742: LD_INT 4
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 30
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: PPUSH
41770: CALL_OW 72
41774: ST_TO_ADDR
41775: GO 41999
41777: LD_INT 2
41779: DOUBLE
41780: EQUAL
41781: IFTRUE 41785
41783: GO 41847
41785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41786: LD_ADDR_VAR 0 12
41790: PUSH
41791: LD_VAR 0 18
41795: PPUSH
41796: LD_INT 22
41798: PUSH
41799: LD_VAR 0 16
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 30
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 30
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PPUSH
41840: CALL_OW 72
41844: ST_TO_ADDR
41845: GO 41999
41847: LD_INT 3
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41917
41855: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41856: LD_ADDR_VAR 0 12
41860: PUSH
41861: LD_VAR 0 18
41865: PPUSH
41866: LD_INT 22
41868: PUSH
41869: LD_VAR 0 16
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 30
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 30
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PPUSH
41910: CALL_OW 72
41914: ST_TO_ADDR
41915: GO 41999
41917: LD_INT 4
41919: DOUBLE
41920: EQUAL
41921: IFTRUE 41925
41923: GO 41998
41925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41926: LD_ADDR_VAR 0 12
41930: PUSH
41931: LD_VAR 0 18
41935: PPUSH
41936: LD_INT 22
41938: PUSH
41939: LD_VAR 0 16
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 30
41953: PUSH
41954: LD_INT 6
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 30
41963: PUSH
41964: LD_INT 7
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 30
41973: PUSH
41974: LD_INT 8
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: CALL_OW 72
41995: ST_TO_ADDR
41996: GO 41999
41998: POP
// if i = 1 then
41999: LD_VAR 0 8
42003: PUSH
42004: LD_INT 1
42006: EQUAL
42007: IFFALSE 42118
// begin tmp := [ ] ;
42009: LD_ADDR_VAR 0 19
42013: PUSH
42014: EMPTY
42015: ST_TO_ADDR
// for j in f do
42016: LD_ADDR_VAR 0 9
42020: PUSH
42021: LD_VAR 0 12
42025: PUSH
42026: FOR_IN
42027: IFFALSE 42100
// if GetBType ( j ) = b_bunker then
42029: LD_VAR 0 9
42033: PPUSH
42034: CALL_OW 266
42038: PUSH
42039: LD_INT 32
42041: EQUAL
42042: IFFALSE 42069
// tmp := Insert ( tmp , 1 , j ) else
42044: LD_ADDR_VAR 0 19
42048: PUSH
42049: LD_VAR 0 19
42053: PPUSH
42054: LD_INT 1
42056: PPUSH
42057: LD_VAR 0 9
42061: PPUSH
42062: CALL_OW 2
42066: ST_TO_ADDR
42067: GO 42098
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42069: LD_ADDR_VAR 0 19
42073: PUSH
42074: LD_VAR 0 19
42078: PPUSH
42079: LD_VAR 0 19
42083: PUSH
42084: LD_INT 1
42086: PLUS
42087: PPUSH
42088: LD_VAR 0 9
42092: PPUSH
42093: CALL_OW 2
42097: ST_TO_ADDR
42098: GO 42026
42100: POP
42101: POP
// if tmp then
42102: LD_VAR 0 19
42106: IFFALSE 42118
// f := tmp ;
42108: LD_ADDR_VAR 0 12
42112: PUSH
42113: LD_VAR 0 19
42117: ST_TO_ADDR
// end ; x := personel [ i ] ;
42118: LD_ADDR_VAR 0 13
42122: PUSH
42123: LD_VAR 0 6
42127: PUSH
42128: LD_VAR 0 8
42132: ARRAY
42133: ST_TO_ADDR
// if x = - 1 then
42134: LD_VAR 0 13
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: EQUAL
42143: IFFALSE 42352
// begin for j in f do
42145: LD_ADDR_VAR 0 9
42149: PUSH
42150: LD_VAR 0 12
42154: PUSH
42155: FOR_IN
42156: IFFALSE 42348
// repeat InitHc ;
42158: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42162: LD_VAR 0 9
42166: PPUSH
42167: CALL_OW 266
42171: PUSH
42172: LD_INT 5
42174: EQUAL
42175: IFFALSE 42245
// begin if UnitsInside ( j ) < 3 then
42177: LD_VAR 0 9
42181: PPUSH
42182: CALL_OW 313
42186: PUSH
42187: LD_INT 3
42189: LESS
42190: IFFALSE 42226
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42192: LD_INT 0
42194: PPUSH
42195: LD_INT 5
42197: PUSH
42198: LD_INT 8
42200: PUSH
42201: LD_INT 9
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: PUSH
42209: LD_VAR 0 17
42213: ARRAY
42214: PPUSH
42215: LD_VAR 0 4
42219: PPUSH
42220: CALL_OW 380
42224: GO 42243
// PrepareHuman ( false , i , skill ) ;
42226: LD_INT 0
42228: PPUSH
42229: LD_VAR 0 8
42233: PPUSH
42234: LD_VAR 0 4
42238: PPUSH
42239: CALL_OW 380
// end else
42243: GO 42262
// PrepareHuman ( false , i , skill ) ;
42245: LD_INT 0
42247: PPUSH
42248: LD_VAR 0 8
42252: PPUSH
42253: LD_VAR 0 4
42257: PPUSH
42258: CALL_OW 380
// un := CreateHuman ;
42262: LD_ADDR_VAR 0 14
42266: PUSH
42267: CALL_OW 44
42271: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42272: LD_ADDR_VAR 0 7
42276: PUSH
42277: LD_VAR 0 7
42281: PPUSH
42282: LD_INT 1
42284: PPUSH
42285: LD_VAR 0 14
42289: PPUSH
42290: CALL_OW 2
42294: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42295: LD_VAR 0 14
42299: PPUSH
42300: LD_VAR 0 9
42304: PPUSH
42305: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42309: LD_VAR 0 9
42313: PPUSH
42314: CALL_OW 313
42318: PUSH
42319: LD_INT 6
42321: EQUAL
42322: PUSH
42323: LD_VAR 0 9
42327: PPUSH
42328: CALL_OW 266
42332: PUSH
42333: LD_INT 32
42335: PUSH
42336: LD_INT 31
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: IN
42343: OR
42344: IFFALSE 42158
42346: GO 42155
42348: POP
42349: POP
// end else
42350: GO 42732
// for j = 1 to x do
42352: LD_ADDR_VAR 0 9
42356: PUSH
42357: DOUBLE
42358: LD_INT 1
42360: DEC
42361: ST_TO_ADDR
42362: LD_VAR 0 13
42366: PUSH
42367: FOR_TO
42368: IFFALSE 42730
// begin InitHc ;
42370: CALL_OW 19
// if not f then
42374: LD_VAR 0 12
42378: NOT
42379: IFFALSE 42468
// begin PrepareHuman ( false , i , skill ) ;
42381: LD_INT 0
42383: PPUSH
42384: LD_VAR 0 8
42388: PPUSH
42389: LD_VAR 0 4
42393: PPUSH
42394: CALL_OW 380
// un := CreateHuman ;
42398: LD_ADDR_VAR 0 14
42402: PUSH
42403: CALL_OW 44
42407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42408: LD_ADDR_VAR 0 7
42412: PUSH
42413: LD_VAR 0 7
42417: PPUSH
42418: LD_INT 1
42420: PPUSH
42421: LD_VAR 0 14
42425: PPUSH
42426: CALL_OW 2
42430: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42431: LD_VAR 0 14
42435: PPUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: CALL_OW 250
42445: PPUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 251
42455: PPUSH
42456: LD_INT 10
42458: PPUSH
42459: LD_INT 0
42461: PPUSH
42462: CALL_OW 50
// continue ;
42466: GO 42367
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42468: LD_VAR 0 12
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: PPUSH
42477: CALL_OW 313
42481: PUSH
42482: LD_VAR 0 12
42486: PUSH
42487: LD_INT 1
42489: ARRAY
42490: PPUSH
42491: CALL_OW 266
42495: PUSH
42496: LD_INT 32
42498: PUSH
42499: LD_INT 31
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: IN
42506: AND
42507: PUSH
42508: LD_VAR 0 12
42512: PUSH
42513: LD_INT 1
42515: ARRAY
42516: PPUSH
42517: CALL_OW 313
42521: PUSH
42522: LD_INT 6
42524: EQUAL
42525: OR
42526: IFFALSE 42546
// f := Delete ( f , 1 ) ;
42528: LD_ADDR_VAR 0 12
42532: PUSH
42533: LD_VAR 0 12
42537: PPUSH
42538: LD_INT 1
42540: PPUSH
42541: CALL_OW 3
42545: ST_TO_ADDR
// if not f then
42546: LD_VAR 0 12
42550: NOT
42551: IFFALSE 42569
// begin x := x + 2 ;
42553: LD_ADDR_VAR 0 13
42557: PUSH
42558: LD_VAR 0 13
42562: PUSH
42563: LD_INT 2
42565: PLUS
42566: ST_TO_ADDR
// continue ;
42567: GO 42367
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42569: LD_VAR 0 12
42573: PUSH
42574: LD_INT 1
42576: ARRAY
42577: PPUSH
42578: CALL_OW 266
42582: PUSH
42583: LD_INT 5
42585: EQUAL
42586: IFFALSE 42660
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42588: LD_VAR 0 12
42592: PUSH
42593: LD_INT 1
42595: ARRAY
42596: PPUSH
42597: CALL_OW 313
42601: PUSH
42602: LD_INT 3
42604: LESS
42605: IFFALSE 42641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42607: LD_INT 0
42609: PPUSH
42610: LD_INT 5
42612: PUSH
42613: LD_INT 8
42615: PUSH
42616: LD_INT 9
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: PUSH
42624: LD_VAR 0 17
42628: ARRAY
42629: PPUSH
42630: LD_VAR 0 4
42634: PPUSH
42635: CALL_OW 380
42639: GO 42658
// PrepareHuman ( false , i , skill ) ;
42641: LD_INT 0
42643: PPUSH
42644: LD_VAR 0 8
42648: PPUSH
42649: LD_VAR 0 4
42653: PPUSH
42654: CALL_OW 380
// end else
42658: GO 42677
// PrepareHuman ( false , i , skill ) ;
42660: LD_INT 0
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: LD_VAR 0 4
42672: PPUSH
42673: CALL_OW 380
// un := CreateHuman ;
42677: LD_ADDR_VAR 0 14
42681: PUSH
42682: CALL_OW 44
42686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42687: LD_ADDR_VAR 0 7
42691: PUSH
42692: LD_VAR 0 7
42696: PPUSH
42697: LD_INT 1
42699: PPUSH
42700: LD_VAR 0 14
42704: PPUSH
42705: CALL_OW 2
42709: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42710: LD_VAR 0 14
42714: PPUSH
42715: LD_VAR 0 12
42719: PUSH
42720: LD_INT 1
42722: ARRAY
42723: PPUSH
42724: CALL_OW 52
// end ;
42728: GO 42367
42730: POP
42731: POP
// end ;
42732: GO 41669
42734: POP
42735: POP
// result := result ^ buildings ;
42736: LD_ADDR_VAR 0 7
42740: PUSH
42741: LD_VAR 0 7
42745: PUSH
42746: LD_VAR 0 18
42750: ADD
42751: ST_TO_ADDR
// end else
42752: GO 42895
// begin for i = 1 to personel do
42754: LD_ADDR_VAR 0 8
42758: PUSH
42759: DOUBLE
42760: LD_INT 1
42762: DEC
42763: ST_TO_ADDR
42764: LD_VAR 0 6
42768: PUSH
42769: FOR_TO
42770: IFFALSE 42893
// begin if i > 4 then
42772: LD_VAR 0 8
42776: PUSH
42777: LD_INT 4
42779: GREATER
42780: IFFALSE 42784
// break ;
42782: GO 42893
// x := personel [ i ] ;
42784: LD_ADDR_VAR 0 13
42788: PUSH
42789: LD_VAR 0 6
42793: PUSH
42794: LD_VAR 0 8
42798: ARRAY
42799: ST_TO_ADDR
// if x = - 1 then
42800: LD_VAR 0 13
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: EQUAL
42809: IFFALSE 42813
// continue ;
42811: GO 42769
// PrepareHuman ( false , i , skill ) ;
42813: LD_INT 0
42815: PPUSH
42816: LD_VAR 0 8
42820: PPUSH
42821: LD_VAR 0 4
42825: PPUSH
42826: CALL_OW 380
// un := CreateHuman ;
42830: LD_ADDR_VAR 0 14
42834: PUSH
42835: CALL_OW 44
42839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42840: LD_VAR 0 14
42844: PPUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 250
42854: PPUSH
42855: LD_VAR 0 1
42859: PPUSH
42860: CALL_OW 251
42864: PPUSH
42865: LD_INT 10
42867: PPUSH
42868: LD_INT 0
42870: PPUSH
42871: CALL_OW 50
// result := result ^ un ;
42875: LD_ADDR_VAR 0 7
42879: PUSH
42880: LD_VAR 0 7
42884: PUSH
42885: LD_VAR 0 14
42889: ADD
42890: ST_TO_ADDR
// end ;
42891: GO 42769
42893: POP
42894: POP
// end ; end ;
42895: LD_VAR 0 7
42899: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
// result := false ;
42918: LD_ADDR_VAR 0 3
42922: PUSH
42923: LD_INT 0
42925: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42926: LD_VAR 0 1
42930: NOT
42931: PUSH
42932: LD_VAR 0 1
42936: PPUSH
42937: CALL_OW 266
42941: PUSH
42942: LD_INT 32
42944: PUSH
42945: LD_INT 33
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: IN
42952: NOT
42953: OR
42954: IFFALSE 42958
// exit ;
42956: GO 44067
// nat := GetNation ( tower ) ;
42958: LD_ADDR_VAR 0 12
42962: PUSH
42963: LD_VAR 0 1
42967: PPUSH
42968: CALL_OW 248
42972: ST_TO_ADDR
// side := GetSide ( tower ) ;
42973: LD_ADDR_VAR 0 16
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 255
42987: ST_TO_ADDR
// x := GetX ( tower ) ;
42988: LD_ADDR_VAR 0 10
42992: PUSH
42993: LD_VAR 0 1
42997: PPUSH
42998: CALL_OW 250
43002: ST_TO_ADDR
// y := GetY ( tower ) ;
43003: LD_ADDR_VAR 0 11
43007: PUSH
43008: LD_VAR 0 1
43012: PPUSH
43013: CALL_OW 251
43017: ST_TO_ADDR
// if not x or not y then
43018: LD_VAR 0 10
43022: NOT
43023: PUSH
43024: LD_VAR 0 11
43028: NOT
43029: OR
43030: IFFALSE 43034
// exit ;
43032: GO 44067
// weapon := 0 ;
43034: LD_ADDR_VAR 0 18
43038: PUSH
43039: LD_INT 0
43041: ST_TO_ADDR
// fac_list := [ ] ;
43042: LD_ADDR_VAR 0 17
43046: PUSH
43047: EMPTY
43048: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43049: LD_ADDR_VAR 0 6
43053: PUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 274
43063: PPUSH
43064: LD_VAR 0 2
43068: PPUSH
43069: LD_INT 0
43071: PPUSH
43072: CALL 40638 0 3
43076: PPUSH
43077: LD_INT 30
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PPUSH
43087: CALL_OW 72
43091: ST_TO_ADDR
// if not factories then
43092: LD_VAR 0 6
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 44067
// for i in factories do
43101: LD_ADDR_VAR 0 8
43105: PUSH
43106: LD_VAR 0 6
43110: PUSH
43111: FOR_IN
43112: IFFALSE 43137
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43114: LD_ADDR_VAR 0 17
43118: PUSH
43119: LD_VAR 0 17
43123: PUSH
43124: LD_VAR 0 8
43128: PPUSH
43129: CALL_OW 478
43133: UNION
43134: ST_TO_ADDR
43135: GO 43111
43137: POP
43138: POP
// if not fac_list then
43139: LD_VAR 0 17
43143: NOT
43144: IFFALSE 43148
// exit ;
43146: GO 44067
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43148: LD_ADDR_VAR 0 5
43152: PUSH
43153: LD_INT 4
43155: PUSH
43156: LD_INT 5
43158: PUSH
43159: LD_INT 9
43161: PUSH
43162: LD_INT 10
43164: PUSH
43165: LD_INT 6
43167: PUSH
43168: LD_INT 7
43170: PUSH
43171: LD_INT 11
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 27
43185: PUSH
43186: LD_INT 28
43188: PUSH
43189: LD_INT 26
43191: PUSH
43192: LD_INT 30
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 43
43203: PUSH
43204: LD_INT 44
43206: PUSH
43207: LD_INT 46
43209: PUSH
43210: LD_INT 45
43212: PUSH
43213: LD_INT 47
43215: PUSH
43216: LD_INT 49
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: PUSH
43232: LD_VAR 0 12
43236: ARRAY
43237: ST_TO_ADDR
// list := list isect fac_list ;
43238: LD_ADDR_VAR 0 5
43242: PUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_VAR 0 17
43252: ISECT
43253: ST_TO_ADDR
// if not list then
43254: LD_VAR 0 5
43258: NOT
43259: IFFALSE 43263
// exit ;
43261: GO 44067
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43263: LD_VAR 0 12
43267: PUSH
43268: LD_INT 3
43270: EQUAL
43271: PUSH
43272: LD_INT 49
43274: PUSH
43275: LD_VAR 0 5
43279: IN
43280: AND
43281: PUSH
43282: LD_INT 31
43284: PPUSH
43285: LD_VAR 0 16
43289: PPUSH
43290: CALL_OW 321
43294: PUSH
43295: LD_INT 2
43297: EQUAL
43298: AND
43299: IFFALSE 43359
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43301: LD_INT 22
43303: PUSH
43304: LD_VAR 0 16
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 35
43315: PUSH
43316: LD_INT 49
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 91
43325: PUSH
43326: LD_VAR 0 1
43330: PUSH
43331: LD_INT 10
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: PPUSH
43344: CALL_OW 69
43348: NOT
43349: IFFALSE 43359
// weapon := ru_time_lapser ;
43351: LD_ADDR_VAR 0 18
43355: PUSH
43356: LD_INT 49
43358: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43359: LD_VAR 0 12
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: IN
43374: PUSH
43375: LD_INT 11
43377: PUSH
43378: LD_VAR 0 5
43382: IN
43383: PUSH
43384: LD_INT 30
43386: PUSH
43387: LD_VAR 0 5
43391: IN
43392: OR
43393: AND
43394: PUSH
43395: LD_INT 6
43397: PPUSH
43398: LD_VAR 0 16
43402: PPUSH
43403: CALL_OW 321
43407: PUSH
43408: LD_INT 2
43410: EQUAL
43411: AND
43412: IFFALSE 43577
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43414: LD_INT 22
43416: PUSH
43417: LD_VAR 0 16
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 35
43431: PUSH
43432: LD_INT 11
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 35
43441: PUSH
43442: LD_INT 30
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 91
43456: PUSH
43457: LD_VAR 0 1
43461: PUSH
43462: LD_INT 18
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 69
43479: NOT
43480: PUSH
43481: LD_INT 22
43483: PUSH
43484: LD_VAR 0 16
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 30
43498: PUSH
43499: LD_INT 32
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 30
43508: PUSH
43509: LD_INT 33
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 91
43523: PUSH
43524: LD_VAR 0 1
43528: PUSH
43529: LD_INT 12
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: PPUSH
43545: CALL_OW 69
43549: PUSH
43550: LD_INT 2
43552: GREATER
43553: AND
43554: IFFALSE 43577
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43556: LD_ADDR_VAR 0 18
43560: PUSH
43561: LD_INT 11
43563: PUSH
43564: LD_INT 30
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_VAR 0 12
43575: ARRAY
43576: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43577: LD_VAR 0 18
43581: NOT
43582: PUSH
43583: LD_INT 40
43585: PPUSH
43586: LD_VAR 0 16
43590: PPUSH
43591: CALL_OW 321
43595: PUSH
43596: LD_INT 2
43598: EQUAL
43599: AND
43600: PUSH
43601: LD_INT 7
43603: PUSH
43604: LD_VAR 0 5
43608: IN
43609: PUSH
43610: LD_INT 28
43612: PUSH
43613: LD_VAR 0 5
43617: IN
43618: OR
43619: PUSH
43620: LD_INT 45
43622: PUSH
43623: LD_VAR 0 5
43627: IN
43628: OR
43629: AND
43630: IFFALSE 43884
// begin hex := GetHexInfo ( x , y ) ;
43632: LD_ADDR_VAR 0 4
43636: PUSH
43637: LD_VAR 0 10
43641: PPUSH
43642: LD_VAR 0 11
43646: PPUSH
43647: CALL_OW 546
43651: ST_TO_ADDR
// if hex [ 1 ] then
43652: LD_VAR 0 4
43656: PUSH
43657: LD_INT 1
43659: ARRAY
43660: IFFALSE 43664
// exit ;
43662: GO 44067
// height := hex [ 2 ] ;
43664: LD_ADDR_VAR 0 15
43668: PUSH
43669: LD_VAR 0 4
43673: PUSH
43674: LD_INT 2
43676: ARRAY
43677: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43678: LD_ADDR_VAR 0 14
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 5
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// for i in tmp do
43701: LD_ADDR_VAR 0 8
43705: PUSH
43706: LD_VAR 0 14
43710: PUSH
43711: FOR_IN
43712: IFFALSE 43882
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43714: LD_ADDR_VAR 0 9
43718: PUSH
43719: LD_VAR 0 10
43723: PPUSH
43724: LD_VAR 0 8
43728: PPUSH
43729: LD_INT 5
43731: PPUSH
43732: CALL_OW 272
43736: PUSH
43737: LD_VAR 0 11
43741: PPUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_INT 5
43749: PPUSH
43750: CALL_OW 273
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43759: LD_VAR 0 9
43763: PUSH
43764: LD_INT 1
43766: ARRAY
43767: PPUSH
43768: LD_VAR 0 9
43772: PUSH
43773: LD_INT 2
43775: ARRAY
43776: PPUSH
43777: CALL_OW 488
43781: IFFALSE 43880
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43783: LD_ADDR_VAR 0 4
43787: PUSH
43788: LD_VAR 0 9
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PPUSH
43797: LD_VAR 0 9
43801: PUSH
43802: LD_INT 2
43804: ARRAY
43805: PPUSH
43806: CALL_OW 546
43810: ST_TO_ADDR
// if hex [ 1 ] then
43811: LD_VAR 0 4
43815: PUSH
43816: LD_INT 1
43818: ARRAY
43819: IFFALSE 43823
// continue ;
43821: GO 43711
// h := hex [ 2 ] ;
43823: LD_ADDR_VAR 0 13
43827: PUSH
43828: LD_VAR 0 4
43832: PUSH
43833: LD_INT 2
43835: ARRAY
43836: ST_TO_ADDR
// if h + 7 < height then
43837: LD_VAR 0 13
43841: PUSH
43842: LD_INT 7
43844: PLUS
43845: PUSH
43846: LD_VAR 0 15
43850: LESS
43851: IFFALSE 43880
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43853: LD_ADDR_VAR 0 18
43857: PUSH
43858: LD_INT 7
43860: PUSH
43861: LD_INT 28
43863: PUSH
43864: LD_INT 45
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: PUSH
43872: LD_VAR 0 12
43876: ARRAY
43877: ST_TO_ADDR
// break ;
43878: GO 43882
// end ; end ; end ;
43880: GO 43711
43882: POP
43883: POP
// end ; if not weapon then
43884: LD_VAR 0 18
43888: NOT
43889: IFFALSE 43949
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43891: LD_ADDR_VAR 0 5
43895: PUSH
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 11
43903: PUSH
43904: LD_INT 30
43906: PUSH
43907: LD_INT 49
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: DIFF
43915: ST_TO_ADDR
// if not list then
43916: LD_VAR 0 5
43920: NOT
43921: IFFALSE 43925
// exit ;
43923: GO 44067
// weapon := list [ rand ( 1 , list ) ] ;
43925: LD_ADDR_VAR 0 18
43929: PUSH
43930: LD_VAR 0 5
43934: PUSH
43935: LD_INT 1
43937: PPUSH
43938: LD_VAR 0 5
43942: PPUSH
43943: CALL_OW 12
43947: ARRAY
43948: ST_TO_ADDR
// end ; if weapon then
43949: LD_VAR 0 18
43953: IFFALSE 44067
// begin tmp := CostOfWeapon ( weapon ) ;
43955: LD_ADDR_VAR 0 14
43959: PUSH
43960: LD_VAR 0 18
43964: PPUSH
43965: CALL_OW 451
43969: ST_TO_ADDR
// j := GetBase ( tower ) ;
43970: LD_ADDR_VAR 0 9
43974: PUSH
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 274
43984: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43985: LD_VAR 0 9
43989: PPUSH
43990: LD_INT 1
43992: PPUSH
43993: CALL_OW 275
43997: PUSH
43998: LD_VAR 0 14
44002: PUSH
44003: LD_INT 1
44005: ARRAY
44006: GREATEREQUAL
44007: PUSH
44008: LD_VAR 0 9
44012: PPUSH
44013: LD_INT 2
44015: PPUSH
44016: CALL_OW 275
44020: PUSH
44021: LD_VAR 0 14
44025: PUSH
44026: LD_INT 2
44028: ARRAY
44029: GREATEREQUAL
44030: AND
44031: PUSH
44032: LD_VAR 0 9
44036: PPUSH
44037: LD_INT 3
44039: PPUSH
44040: CALL_OW 275
44044: PUSH
44045: LD_VAR 0 14
44049: PUSH
44050: LD_INT 3
44052: ARRAY
44053: GREATEREQUAL
44054: AND
44055: IFFALSE 44067
// result := weapon ;
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_VAR 0 18
44066: ST_TO_ADDR
// end ; end ;
44067: LD_VAR 0 3
44071: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44072: LD_INT 0
44074: PPUSH
44075: PPUSH
// result := true ;
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_INT 1
44083: ST_TO_ADDR
// if array1 = array2 then
44084: LD_VAR 0 1
44088: PUSH
44089: LD_VAR 0 2
44093: EQUAL
44094: IFFALSE 44154
// begin for i = 1 to array1 do
44096: LD_ADDR_VAR 0 4
44100: PUSH
44101: DOUBLE
44102: LD_INT 1
44104: DEC
44105: ST_TO_ADDR
44106: LD_VAR 0 1
44110: PUSH
44111: FOR_TO
44112: IFFALSE 44150
// if array1 [ i ] <> array2 [ i ] then
44114: LD_VAR 0 1
44118: PUSH
44119: LD_VAR 0 4
44123: ARRAY
44124: PUSH
44125: LD_VAR 0 2
44129: PUSH
44130: LD_VAR 0 4
44134: ARRAY
44135: NONEQUAL
44136: IFFALSE 44148
// begin result := false ;
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 0
44145: ST_TO_ADDR
// break ;
44146: GO 44150
// end ;
44148: GO 44111
44150: POP
44151: POP
// end else
44152: GO 44162
// result := false ;
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 0
44161: ST_TO_ADDR
// end ;
44162: LD_VAR 0 3
44166: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44167: LD_INT 0
44169: PPUSH
44170: PPUSH
// if not array1 or not array2 then
44171: LD_VAR 0 1
44175: NOT
44176: PUSH
44177: LD_VAR 0 2
44181: NOT
44182: OR
44183: IFFALSE 44187
// exit ;
44185: GO 44251
// result := true ;
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 1
44194: ST_TO_ADDR
// for i = 1 to array1 do
44195: LD_ADDR_VAR 0 4
44199: PUSH
44200: DOUBLE
44201: LD_INT 1
44203: DEC
44204: ST_TO_ADDR
44205: LD_VAR 0 1
44209: PUSH
44210: FOR_TO
44211: IFFALSE 44249
// if array1 [ i ] <> array2 [ i ] then
44213: LD_VAR 0 1
44217: PUSH
44218: LD_VAR 0 4
44222: ARRAY
44223: PUSH
44224: LD_VAR 0 2
44228: PUSH
44229: LD_VAR 0 4
44233: ARRAY
44234: NONEQUAL
44235: IFFALSE 44247
// begin result := false ;
44237: LD_ADDR_VAR 0 3
44241: PUSH
44242: LD_INT 0
44244: ST_TO_ADDR
// break ;
44245: GO 44249
// end ;
44247: GO 44210
44249: POP
44250: POP
// end ;
44251: LD_VAR 0 3
44255: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44256: LD_INT 0
44258: PPUSH
44259: PPUSH
44260: PPUSH
// pom := GetBase ( fac ) ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 1
44270: PPUSH
44271: CALL_OW 274
44275: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44276: LD_ADDR_VAR 0 4
44280: PUSH
44281: LD_VAR 0 2
44285: PUSH
44286: LD_INT 1
44288: ARRAY
44289: PPUSH
44290: LD_VAR 0 2
44294: PUSH
44295: LD_INT 2
44297: ARRAY
44298: PPUSH
44299: LD_VAR 0 2
44303: PUSH
44304: LD_INT 3
44306: ARRAY
44307: PPUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 4
44315: ARRAY
44316: PPUSH
44317: CALL_OW 449
44321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_VAR 0 5
44331: PPUSH
44332: LD_INT 1
44334: PPUSH
44335: CALL_OW 275
44339: PUSH
44340: LD_VAR 0 4
44344: PUSH
44345: LD_INT 1
44347: ARRAY
44348: GREATEREQUAL
44349: PUSH
44350: LD_VAR 0 5
44354: PPUSH
44355: LD_INT 2
44357: PPUSH
44358: CALL_OW 275
44362: PUSH
44363: LD_VAR 0 4
44367: PUSH
44368: LD_INT 2
44370: ARRAY
44371: GREATEREQUAL
44372: AND
44373: PUSH
44374: LD_VAR 0 5
44378: PPUSH
44379: LD_INT 3
44381: PPUSH
44382: CALL_OW 275
44386: PUSH
44387: LD_VAR 0 4
44391: PUSH
44392: LD_INT 3
44394: ARRAY
44395: GREATEREQUAL
44396: AND
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 3
44402: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44403: LD_INT 0
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
// pom := GetBase ( building ) ;
44409: LD_ADDR_VAR 0 3
44413: PUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: CALL_OW 274
44423: ST_TO_ADDR
// if not pom then
44424: LD_VAR 0 3
44428: NOT
44429: IFFALSE 44433
// exit ;
44431: GO 44603
// btype := GetBType ( building ) ;
44433: LD_ADDR_VAR 0 5
44437: PUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 266
44447: ST_TO_ADDR
// if btype = b_armoury then
44448: LD_VAR 0 5
44452: PUSH
44453: LD_INT 4
44455: EQUAL
44456: IFFALSE 44466
// btype := b_barracks ;
44458: LD_ADDR_VAR 0 5
44462: PUSH
44463: LD_INT 5
44465: ST_TO_ADDR
// if btype = b_depot then
44466: LD_VAR 0 5
44470: PUSH
44471: LD_INT 0
44473: EQUAL
44474: IFFALSE 44484
// btype := b_warehouse ;
44476: LD_ADDR_VAR 0 5
44480: PUSH
44481: LD_INT 1
44483: ST_TO_ADDR
// if btype = b_workshop then
44484: LD_VAR 0 5
44488: PUSH
44489: LD_INT 2
44491: EQUAL
44492: IFFALSE 44502
// btype := b_factory ;
44494: LD_ADDR_VAR 0 5
44498: PUSH
44499: LD_INT 3
44501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44502: LD_ADDR_VAR 0 4
44506: PUSH
44507: LD_VAR 0 5
44511: PPUSH
44512: LD_VAR 0 1
44516: PPUSH
44517: CALL_OW 248
44521: PPUSH
44522: CALL_OW 450
44526: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44527: LD_ADDR_VAR 0 2
44531: PUSH
44532: LD_VAR 0 3
44536: PPUSH
44537: LD_INT 1
44539: PPUSH
44540: CALL_OW 275
44544: PUSH
44545: LD_VAR 0 4
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: GREATEREQUAL
44554: PUSH
44555: LD_VAR 0 3
44559: PPUSH
44560: LD_INT 2
44562: PPUSH
44563: CALL_OW 275
44567: PUSH
44568: LD_VAR 0 4
44572: PUSH
44573: LD_INT 2
44575: ARRAY
44576: GREATEREQUAL
44577: AND
44578: PUSH
44579: LD_VAR 0 3
44583: PPUSH
44584: LD_INT 3
44586: PPUSH
44587: CALL_OW 275
44591: PUSH
44592: LD_VAR 0 4
44596: PUSH
44597: LD_INT 3
44599: ARRAY
44600: GREATEREQUAL
44601: AND
44602: ST_TO_ADDR
// end ;
44603: LD_VAR 0 2
44607: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
44612: PPUSH
// pom := GetBase ( building ) ;
44613: LD_ADDR_VAR 0 4
44617: PUSH
44618: LD_VAR 0 1
44622: PPUSH
44623: CALL_OW 274
44627: ST_TO_ADDR
// if not pom then
44628: LD_VAR 0 4
44632: NOT
44633: IFFALSE 44637
// exit ;
44635: GO 44738
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44637: LD_ADDR_VAR 0 5
44641: PUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: LD_VAR 0 1
44651: PPUSH
44652: CALL_OW 248
44656: PPUSH
44657: CALL_OW 450
44661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44662: LD_ADDR_VAR 0 3
44666: PUSH
44667: LD_VAR 0 4
44671: PPUSH
44672: LD_INT 1
44674: PPUSH
44675: CALL_OW 275
44679: PUSH
44680: LD_VAR 0 5
44684: PUSH
44685: LD_INT 1
44687: ARRAY
44688: GREATEREQUAL
44689: PUSH
44690: LD_VAR 0 4
44694: PPUSH
44695: LD_INT 2
44697: PPUSH
44698: CALL_OW 275
44702: PUSH
44703: LD_VAR 0 5
44707: PUSH
44708: LD_INT 2
44710: ARRAY
44711: GREATEREQUAL
44712: AND
44713: PUSH
44714: LD_VAR 0 4
44718: PPUSH
44719: LD_INT 3
44721: PPUSH
44722: CALL_OW 275
44726: PUSH
44727: LD_VAR 0 5
44731: PUSH
44732: LD_INT 3
44734: ARRAY
44735: GREATEREQUAL
44736: AND
44737: ST_TO_ADDR
// end ;
44738: LD_VAR 0 3
44742: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44743: LD_INT 0
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
// result := false ;
44756: LD_ADDR_VAR 0 8
44760: PUSH
44761: LD_INT 0
44763: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44764: LD_VAR 0 5
44768: NOT
44769: PUSH
44770: LD_VAR 0 1
44774: NOT
44775: OR
44776: PUSH
44777: LD_VAR 0 2
44781: NOT
44782: OR
44783: PUSH
44784: LD_VAR 0 3
44788: NOT
44789: OR
44790: IFFALSE 44794
// exit ;
44792: GO 45608
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44794: LD_ADDR_VAR 0 14
44798: PUSH
44799: LD_VAR 0 1
44803: PPUSH
44804: LD_VAR 0 2
44808: PPUSH
44809: LD_VAR 0 3
44813: PPUSH
44814: LD_VAR 0 4
44818: PPUSH
44819: LD_VAR 0 5
44823: PUSH
44824: LD_INT 1
44826: ARRAY
44827: PPUSH
44828: CALL_OW 248
44832: PPUSH
44833: LD_INT 0
44835: PPUSH
44836: CALL 46845 0 6
44840: ST_TO_ADDR
// if not hexes then
44841: LD_VAR 0 14
44845: NOT
44846: IFFALSE 44850
// exit ;
44848: GO 45608
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44850: LD_ADDR_VAR 0 17
44854: PUSH
44855: LD_VAR 0 5
44859: PPUSH
44860: LD_INT 22
44862: PUSH
44863: LD_VAR 0 13
44867: PPUSH
44868: CALL_OW 255
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 30
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 30
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PPUSH
44909: CALL_OW 72
44913: ST_TO_ADDR
// for i = 1 to hexes do
44914: LD_ADDR_VAR 0 9
44918: PUSH
44919: DOUBLE
44920: LD_INT 1
44922: DEC
44923: ST_TO_ADDR
44924: LD_VAR 0 14
44928: PUSH
44929: FOR_TO
44930: IFFALSE 45606
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44932: LD_ADDR_VAR 0 13
44936: PUSH
44937: LD_VAR 0 14
44941: PUSH
44942: LD_VAR 0 9
44946: ARRAY
44947: PUSH
44948: LD_INT 1
44950: ARRAY
44951: PPUSH
44952: LD_VAR 0 14
44956: PUSH
44957: LD_VAR 0 9
44961: ARRAY
44962: PUSH
44963: LD_INT 2
44965: ARRAY
44966: PPUSH
44967: CALL_OW 428
44971: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44972: LD_VAR 0 14
44976: PUSH
44977: LD_VAR 0 9
44981: ARRAY
44982: PUSH
44983: LD_INT 1
44985: ARRAY
44986: PPUSH
44987: LD_VAR 0 14
44991: PUSH
44992: LD_VAR 0 9
44996: ARRAY
44997: PUSH
44998: LD_INT 2
45000: ARRAY
45001: PPUSH
45002: CALL_OW 351
45006: PUSH
45007: LD_VAR 0 14
45011: PUSH
45012: LD_VAR 0 9
45016: ARRAY
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PPUSH
45022: LD_VAR 0 14
45026: PUSH
45027: LD_VAR 0 9
45031: ARRAY
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: PPUSH
45037: CALL_OW 488
45041: NOT
45042: OR
45043: PUSH
45044: LD_VAR 0 13
45048: PPUSH
45049: CALL_OW 247
45053: PUSH
45054: LD_INT 3
45056: EQUAL
45057: OR
45058: IFFALSE 45064
// exit ;
45060: POP
45061: POP
45062: GO 45608
// if not tmp then
45064: LD_VAR 0 13
45068: NOT
45069: IFFALSE 45073
// continue ;
45071: GO 44929
// result := true ;
45073: LD_ADDR_VAR 0 8
45077: PUSH
45078: LD_INT 1
45080: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45081: LD_VAR 0 6
45085: PUSH
45086: LD_VAR 0 13
45090: PPUSH
45091: CALL_OW 247
45095: PUSH
45096: LD_INT 2
45098: EQUAL
45099: AND
45100: PUSH
45101: LD_VAR 0 13
45105: PPUSH
45106: CALL_OW 263
45110: PUSH
45111: LD_INT 1
45113: EQUAL
45114: AND
45115: IFFALSE 45279
// begin if IsDrivenBy ( tmp ) then
45117: LD_VAR 0 13
45121: PPUSH
45122: CALL_OW 311
45126: IFFALSE 45130
// continue ;
45128: GO 44929
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45130: LD_VAR 0 6
45134: PPUSH
45135: LD_INT 3
45137: PUSH
45138: LD_INT 60
45140: PUSH
45141: EMPTY
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: LD_INT 55
45153: PUSH
45154: EMPTY
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PPUSH
45165: CALL_OW 72
45169: IFFALSE 45277
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45171: LD_ADDR_VAR 0 18
45175: PUSH
45176: LD_VAR 0 6
45180: PPUSH
45181: LD_INT 3
45183: PUSH
45184: LD_INT 60
45186: PUSH
45187: EMPTY
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 55
45199: PUSH
45200: EMPTY
45201: LIST
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PPUSH
45211: CALL_OW 72
45215: PUSH
45216: LD_INT 1
45218: ARRAY
45219: ST_TO_ADDR
// if IsInUnit ( driver ) then
45220: LD_VAR 0 18
45224: PPUSH
45225: CALL_OW 310
45229: IFFALSE 45240
// ComExit ( driver ) ;
45231: LD_VAR 0 18
45235: PPUSH
45236: CALL 70029 0 1
// AddComEnterUnit ( driver , tmp ) ;
45240: LD_VAR 0 18
45244: PPUSH
45245: LD_VAR 0 13
45249: PPUSH
45250: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45254: LD_VAR 0 18
45258: PPUSH
45259: LD_VAR 0 7
45263: PPUSH
45264: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45268: LD_VAR 0 18
45272: PPUSH
45273: CALL_OW 181
// end ; continue ;
45277: GO 44929
// end ; if not cleaners or not tmp in cleaners then
45279: LD_VAR 0 6
45283: NOT
45284: PUSH
45285: LD_VAR 0 13
45289: PUSH
45290: LD_VAR 0 6
45294: IN
45295: NOT
45296: OR
45297: IFFALSE 45604
// begin if dep then
45299: LD_VAR 0 17
45303: IFFALSE 45439
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45305: LD_ADDR_VAR 0 16
45309: PUSH
45310: LD_VAR 0 17
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PPUSH
45319: CALL_OW 250
45323: PPUSH
45324: LD_VAR 0 17
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: CALL_OW 254
45337: PPUSH
45338: LD_INT 5
45340: PPUSH
45341: CALL_OW 272
45345: PUSH
45346: LD_VAR 0 17
45350: PUSH
45351: LD_INT 1
45353: ARRAY
45354: PPUSH
45355: CALL_OW 251
45359: PPUSH
45360: LD_VAR 0 17
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PPUSH
45369: CALL_OW 254
45373: PPUSH
45374: LD_INT 5
45376: PPUSH
45377: CALL_OW 273
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45386: LD_VAR 0 16
45390: PUSH
45391: LD_INT 1
45393: ARRAY
45394: PPUSH
45395: LD_VAR 0 16
45399: PUSH
45400: LD_INT 2
45402: ARRAY
45403: PPUSH
45404: CALL_OW 488
45408: IFFALSE 45439
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45410: LD_VAR 0 13
45414: PPUSH
45415: LD_VAR 0 16
45419: PUSH
45420: LD_INT 1
45422: ARRAY
45423: PPUSH
45424: LD_VAR 0 16
45428: PUSH
45429: LD_INT 2
45431: ARRAY
45432: PPUSH
45433: CALL_OW 111
// continue ;
45437: GO 44929
// end ; end ; r := GetDir ( tmp ) ;
45439: LD_ADDR_VAR 0 15
45443: PUSH
45444: LD_VAR 0 13
45448: PPUSH
45449: CALL_OW 254
45453: ST_TO_ADDR
// if r = 5 then
45454: LD_VAR 0 15
45458: PUSH
45459: LD_INT 5
45461: EQUAL
45462: IFFALSE 45472
// r := 0 ;
45464: LD_ADDR_VAR 0 15
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// for j = r to 5 do
45472: LD_ADDR_VAR 0 10
45476: PUSH
45477: DOUBLE
45478: LD_VAR 0 15
45482: DEC
45483: ST_TO_ADDR
45484: LD_INT 5
45486: PUSH
45487: FOR_TO
45488: IFFALSE 45602
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45490: LD_ADDR_VAR 0 11
45494: PUSH
45495: LD_VAR 0 13
45499: PPUSH
45500: CALL_OW 250
45504: PPUSH
45505: LD_VAR 0 10
45509: PPUSH
45510: LD_INT 2
45512: PPUSH
45513: CALL_OW 272
45517: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45518: LD_ADDR_VAR 0 12
45522: PUSH
45523: LD_VAR 0 13
45527: PPUSH
45528: CALL_OW 251
45532: PPUSH
45533: LD_VAR 0 10
45537: PPUSH
45538: LD_INT 2
45540: PPUSH
45541: CALL_OW 273
45545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45546: LD_VAR 0 11
45550: PPUSH
45551: LD_VAR 0 12
45555: PPUSH
45556: CALL_OW 488
45560: PUSH
45561: LD_VAR 0 11
45565: PPUSH
45566: LD_VAR 0 12
45570: PPUSH
45571: CALL_OW 428
45575: NOT
45576: AND
45577: IFFALSE 45600
// begin ComMoveXY ( tmp , _x , _y ) ;
45579: LD_VAR 0 13
45583: PPUSH
45584: LD_VAR 0 11
45588: PPUSH
45589: LD_VAR 0 12
45593: PPUSH
45594: CALL_OW 111
// break ;
45598: GO 45602
// end ; end ;
45600: GO 45487
45602: POP
45603: POP
// end ; end ;
45604: GO 44929
45606: POP
45607: POP
// end ;
45608: LD_VAR 0 8
45612: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45613: LD_INT 0
45615: PPUSH
// result := true ;
45616: LD_ADDR_VAR 0 3
45620: PUSH
45621: LD_INT 1
45623: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45624: LD_VAR 0 2
45628: PUSH
45629: LD_INT 24
45631: DOUBLE
45632: EQUAL
45633: IFTRUE 45643
45635: LD_INT 33
45637: DOUBLE
45638: EQUAL
45639: IFTRUE 45643
45641: GO 45668
45643: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45644: LD_ADDR_VAR 0 3
45648: PUSH
45649: LD_INT 32
45651: PPUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: CALL_OW 321
45661: PUSH
45662: LD_INT 2
45664: EQUAL
45665: ST_TO_ADDR
45666: GO 45988
45668: LD_INT 20
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45676
45674: GO 45701
45676: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_INT 6
45684: PPUSH
45685: LD_VAR 0 1
45689: PPUSH
45690: CALL_OW 321
45694: PUSH
45695: LD_INT 2
45697: EQUAL
45698: ST_TO_ADDR
45699: GO 45988
45701: LD_INT 22
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45715
45707: LD_INT 36
45709: DOUBLE
45710: EQUAL
45711: IFTRUE 45715
45713: GO 45740
45715: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_INT 15
45723: PPUSH
45724: LD_VAR 0 1
45728: PPUSH
45729: CALL_OW 321
45733: PUSH
45734: LD_INT 2
45736: EQUAL
45737: ST_TO_ADDR
45738: GO 45988
45740: LD_INT 30
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45748
45746: GO 45773
45748: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45749: LD_ADDR_VAR 0 3
45753: PUSH
45754: LD_INT 20
45756: PPUSH
45757: LD_VAR 0 1
45761: PPUSH
45762: CALL_OW 321
45766: PUSH
45767: LD_INT 2
45769: EQUAL
45770: ST_TO_ADDR
45771: GO 45988
45773: LD_INT 28
45775: DOUBLE
45776: EQUAL
45777: IFTRUE 45787
45779: LD_INT 21
45781: DOUBLE
45782: EQUAL
45783: IFTRUE 45787
45785: GO 45812
45787: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45788: LD_ADDR_VAR 0 3
45792: PUSH
45793: LD_INT 21
45795: PPUSH
45796: LD_VAR 0 1
45800: PPUSH
45801: CALL_OW 321
45805: PUSH
45806: LD_INT 2
45808: EQUAL
45809: ST_TO_ADDR
45810: GO 45988
45812: LD_INT 16
45814: DOUBLE
45815: EQUAL
45816: IFTRUE 45820
45818: GO 45847
45820: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45821: LD_ADDR_VAR 0 3
45825: PUSH
45826: LD_EXP 142
45830: PPUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: CALL_OW 321
45840: PUSH
45841: LD_INT 2
45843: EQUAL
45844: ST_TO_ADDR
45845: GO 45988
45847: LD_INT 19
45849: DOUBLE
45850: EQUAL
45851: IFTRUE 45861
45853: LD_INT 23
45855: DOUBLE
45856: EQUAL
45857: IFTRUE 45861
45859: GO 45888
45861: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45862: LD_ADDR_VAR 0 3
45866: PUSH
45867: LD_EXP 141
45871: PPUSH
45872: LD_VAR 0 1
45876: PPUSH
45877: CALL_OW 321
45881: PUSH
45882: LD_INT 2
45884: EQUAL
45885: ST_TO_ADDR
45886: GO 45988
45888: LD_INT 17
45890: DOUBLE
45891: EQUAL
45892: IFTRUE 45896
45894: GO 45921
45896: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_INT 39
45904: PPUSH
45905: LD_VAR 0 1
45909: PPUSH
45910: CALL_OW 321
45914: PUSH
45915: LD_INT 2
45917: EQUAL
45918: ST_TO_ADDR
45919: GO 45988
45921: LD_INT 18
45923: DOUBLE
45924: EQUAL
45925: IFTRUE 45929
45927: GO 45954
45929: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 40
45937: PPUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: CALL_OW 321
45947: PUSH
45948: LD_INT 2
45950: EQUAL
45951: ST_TO_ADDR
45952: GO 45988
45954: LD_INT 27
45956: DOUBLE
45957: EQUAL
45958: IFTRUE 45962
45960: GO 45987
45962: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45963: LD_ADDR_VAR 0 3
45967: PUSH
45968: LD_INT 35
45970: PPUSH
45971: LD_VAR 0 1
45975: PPUSH
45976: CALL_OW 321
45980: PUSH
45981: LD_INT 2
45983: EQUAL
45984: ST_TO_ADDR
45985: GO 45988
45987: POP
// end ;
45988: LD_VAR 0 3
45992: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45993: LD_INT 0
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
// result := false ;
46006: LD_ADDR_VAR 0 6
46010: PUSH
46011: LD_INT 0
46013: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46014: LD_VAR 0 1
46018: NOT
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 266
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: IN
46040: NOT
46041: OR
46042: PUSH
46043: LD_VAR 0 2
46047: NOT
46048: OR
46049: PUSH
46050: LD_VAR 0 5
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: LD_INT 4
46069: PUSH
46070: LD_INT 5
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: IN
46081: NOT
46082: OR
46083: PUSH
46084: LD_VAR 0 3
46088: PPUSH
46089: LD_VAR 0 4
46093: PPUSH
46094: CALL_OW 488
46098: NOT
46099: OR
46100: IFFALSE 46104
// exit ;
46102: GO 46840
// side := GetSide ( depot ) ;
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: LD_VAR 0 1
46113: PPUSH
46114: CALL_OW 255
46118: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46119: LD_VAR 0 9
46123: PPUSH
46124: LD_VAR 0 2
46128: PPUSH
46129: CALL 45613 0 2
46133: NOT
46134: IFFALSE 46138
// exit ;
46136: GO 46840
// pom := GetBase ( depot ) ;
46138: LD_ADDR_VAR 0 10
46142: PUSH
46143: LD_VAR 0 1
46147: PPUSH
46148: CALL_OW 274
46152: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46153: LD_ADDR_VAR 0 11
46157: PUSH
46158: LD_VAR 0 2
46162: PPUSH
46163: LD_VAR 0 1
46167: PPUSH
46168: CALL_OW 248
46172: PPUSH
46173: CALL_OW 450
46177: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46178: LD_VAR 0 10
46182: PPUSH
46183: LD_INT 1
46185: PPUSH
46186: CALL_OW 275
46190: PUSH
46191: LD_VAR 0 11
46195: PUSH
46196: LD_INT 1
46198: ARRAY
46199: GREATEREQUAL
46200: PUSH
46201: LD_VAR 0 10
46205: PPUSH
46206: LD_INT 2
46208: PPUSH
46209: CALL_OW 275
46213: PUSH
46214: LD_VAR 0 11
46218: PUSH
46219: LD_INT 2
46221: ARRAY
46222: GREATEREQUAL
46223: AND
46224: PUSH
46225: LD_VAR 0 10
46229: PPUSH
46230: LD_INT 3
46232: PPUSH
46233: CALL_OW 275
46237: PUSH
46238: LD_VAR 0 11
46242: PUSH
46243: LD_INT 3
46245: ARRAY
46246: GREATEREQUAL
46247: AND
46248: NOT
46249: IFFALSE 46253
// exit ;
46251: GO 46840
// if GetBType ( depot ) = b_depot then
46253: LD_VAR 0 1
46257: PPUSH
46258: CALL_OW 266
46262: PUSH
46263: LD_INT 0
46265: EQUAL
46266: IFFALSE 46278
// dist := 28 else
46268: LD_ADDR_VAR 0 14
46272: PUSH
46273: LD_INT 28
46275: ST_TO_ADDR
46276: GO 46286
// dist := 36 ;
46278: LD_ADDR_VAR 0 14
46282: PUSH
46283: LD_INT 36
46285: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46286: LD_VAR 0 1
46290: PPUSH
46291: LD_VAR 0 3
46295: PPUSH
46296: LD_VAR 0 4
46300: PPUSH
46301: CALL_OW 297
46305: PUSH
46306: LD_VAR 0 14
46310: GREATER
46311: IFFALSE 46315
// exit ;
46313: GO 46840
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46315: LD_ADDR_VAR 0 12
46319: PUSH
46320: LD_VAR 0 2
46324: PPUSH
46325: LD_VAR 0 3
46329: PPUSH
46330: LD_VAR 0 4
46334: PPUSH
46335: LD_VAR 0 5
46339: PPUSH
46340: LD_VAR 0 1
46344: PPUSH
46345: CALL_OW 248
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL 46845 0 6
46357: ST_TO_ADDR
// if not hexes then
46358: LD_VAR 0 12
46362: NOT
46363: IFFALSE 46367
// exit ;
46365: GO 46840
// hex := GetHexInfo ( x , y ) ;
46367: LD_ADDR_VAR 0 15
46371: PUSH
46372: LD_VAR 0 3
46376: PPUSH
46377: LD_VAR 0 4
46381: PPUSH
46382: CALL_OW 546
46386: ST_TO_ADDR
// if hex [ 1 ] then
46387: LD_VAR 0 15
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: IFFALSE 46399
// exit ;
46397: GO 46840
// height := hex [ 2 ] ;
46399: LD_ADDR_VAR 0 13
46403: PUSH
46404: LD_VAR 0 15
46408: PUSH
46409: LD_INT 2
46411: ARRAY
46412: ST_TO_ADDR
// for i = 1 to hexes do
46413: LD_ADDR_VAR 0 7
46417: PUSH
46418: DOUBLE
46419: LD_INT 1
46421: DEC
46422: ST_TO_ADDR
46423: LD_VAR 0 12
46427: PUSH
46428: FOR_TO
46429: IFFALSE 46759
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46431: LD_VAR 0 12
46435: PUSH
46436: LD_VAR 0 7
46440: ARRAY
46441: PUSH
46442: LD_INT 1
46444: ARRAY
46445: PPUSH
46446: LD_VAR 0 12
46450: PUSH
46451: LD_VAR 0 7
46455: ARRAY
46456: PUSH
46457: LD_INT 2
46459: ARRAY
46460: PPUSH
46461: CALL_OW 488
46465: NOT
46466: PUSH
46467: LD_VAR 0 12
46471: PUSH
46472: LD_VAR 0 7
46476: ARRAY
46477: PUSH
46478: LD_INT 1
46480: ARRAY
46481: PPUSH
46482: LD_VAR 0 12
46486: PUSH
46487: LD_VAR 0 7
46491: ARRAY
46492: PUSH
46493: LD_INT 2
46495: ARRAY
46496: PPUSH
46497: CALL_OW 428
46501: PUSH
46502: LD_INT 0
46504: GREATER
46505: OR
46506: PUSH
46507: LD_VAR 0 12
46511: PUSH
46512: LD_VAR 0 7
46516: ARRAY
46517: PUSH
46518: LD_INT 1
46520: ARRAY
46521: PPUSH
46522: LD_VAR 0 12
46526: PUSH
46527: LD_VAR 0 7
46531: ARRAY
46532: PUSH
46533: LD_INT 2
46535: ARRAY
46536: PPUSH
46537: CALL_OW 351
46541: OR
46542: IFFALSE 46548
// exit ;
46544: POP
46545: POP
46546: GO 46840
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46548: LD_ADDR_VAR 0 8
46552: PUSH
46553: LD_VAR 0 12
46557: PUSH
46558: LD_VAR 0 7
46562: ARRAY
46563: PUSH
46564: LD_INT 1
46566: ARRAY
46567: PPUSH
46568: LD_VAR 0 12
46572: PUSH
46573: LD_VAR 0 7
46577: ARRAY
46578: PUSH
46579: LD_INT 2
46581: ARRAY
46582: PPUSH
46583: CALL_OW 546
46587: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46588: LD_VAR 0 8
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PUSH
46597: LD_VAR 0 8
46601: PUSH
46602: LD_INT 2
46604: ARRAY
46605: PUSH
46606: LD_VAR 0 13
46610: PUSH
46611: LD_INT 2
46613: PLUS
46614: GREATER
46615: OR
46616: PUSH
46617: LD_VAR 0 8
46621: PUSH
46622: LD_INT 2
46624: ARRAY
46625: PUSH
46626: LD_VAR 0 13
46630: PUSH
46631: LD_INT 2
46633: MINUS
46634: LESS
46635: OR
46636: PUSH
46637: LD_VAR 0 8
46641: PUSH
46642: LD_INT 3
46644: ARRAY
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 8
46651: PUSH
46652: LD_INT 9
46654: PUSH
46655: LD_INT 10
46657: PUSH
46658: LD_INT 11
46660: PUSH
46661: LD_INT 12
46663: PUSH
46664: LD_INT 13
46666: PUSH
46667: LD_INT 16
46669: PUSH
46670: LD_INT 17
46672: PUSH
46673: LD_INT 18
46675: PUSH
46676: LD_INT 19
46678: PUSH
46679: LD_INT 20
46681: PUSH
46682: LD_INT 21
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: IN
46700: NOT
46701: OR
46702: PUSH
46703: LD_VAR 0 8
46707: PUSH
46708: LD_INT 5
46710: ARRAY
46711: NOT
46712: OR
46713: PUSH
46714: LD_VAR 0 8
46718: PUSH
46719: LD_INT 6
46721: ARRAY
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 7
46731: PUSH
46732: LD_INT 9
46734: PUSH
46735: LD_INT 10
46737: PUSH
46738: LD_INT 11
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: IN
46749: NOT
46750: OR
46751: IFFALSE 46757
// exit ;
46753: POP
46754: POP
46755: GO 46840
// end ;
46757: GO 46428
46759: POP
46760: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46761: LD_VAR 0 9
46765: PPUSH
46766: LD_VAR 0 3
46770: PPUSH
46771: LD_VAR 0 4
46775: PPUSH
46776: LD_INT 20
46778: PPUSH
46779: CALL 38786 0 4
46783: PUSH
46784: LD_INT 4
46786: ARRAY
46787: IFFALSE 46791
// exit ;
46789: GO 46840
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46791: LD_VAR 0 2
46795: PUSH
46796: LD_INT 29
46798: PUSH
46799: LD_INT 30
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: IN
46806: PUSH
46807: LD_VAR 0 3
46811: PPUSH
46812: LD_VAR 0 4
46816: PPUSH
46817: LD_VAR 0 9
46821: PPUSH
46822: CALL_OW 440
46826: NOT
46827: AND
46828: IFFALSE 46832
// exit ;
46830: GO 46840
// result := true ;
46832: LD_ADDR_VAR 0 6
46836: PUSH
46837: LD_INT 1
46839: ST_TO_ADDR
// end ;
46840: LD_VAR 0 6
46844: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46845: LD_INT 0
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
46860: PPUSH
46861: PPUSH
46862: PPUSH
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
46882: PPUSH
46883: PPUSH
46884: PPUSH
46885: PPUSH
46886: PPUSH
46887: PPUSH
46888: PPUSH
46889: PPUSH
46890: PPUSH
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
// result = [ ] ;
46905: LD_ADDR_VAR 0 7
46909: PUSH
46910: EMPTY
46911: ST_TO_ADDR
// temp_list = [ ] ;
46912: LD_ADDR_VAR 0 9
46916: PUSH
46917: EMPTY
46918: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46919: LD_VAR 0 4
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: LD_INT 4
46938: PUSH
46939: LD_INT 5
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: IN
46950: NOT
46951: PUSH
46952: LD_VAR 0 1
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: IN
46967: PUSH
46968: LD_VAR 0 5
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: IN
46987: NOT
46988: AND
46989: OR
46990: IFFALSE 46994
// exit ;
46992: GO 65385
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46994: LD_VAR 0 1
46998: PUSH
46999: LD_INT 6
47001: PUSH
47002: LD_INT 7
47004: PUSH
47005: LD_INT 8
47007: PUSH
47008: LD_INT 13
47010: PUSH
47011: LD_INT 12
47013: PUSH
47014: LD_INT 15
47016: PUSH
47017: LD_INT 11
47019: PUSH
47020: LD_INT 14
47022: PUSH
47023: LD_INT 10
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: IN
47037: IFFALSE 47047
// btype = b_lab ;
47039: LD_ADDR_VAR 0 1
47043: PUSH
47044: LD_INT 6
47046: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47047: LD_VAR 0 6
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: IN
47066: NOT
47067: PUSH
47068: LD_VAR 0 1
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: LD_INT 6
47087: PUSH
47088: LD_INT 36
47090: PUSH
47091: LD_INT 4
47093: PUSH
47094: LD_INT 5
47096: PUSH
47097: LD_INT 31
47099: PUSH
47100: LD_INT 32
47102: PUSH
47103: LD_INT 33
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: IN
47119: NOT
47120: PUSH
47121: LD_VAR 0 6
47125: PUSH
47126: LD_INT 1
47128: EQUAL
47129: AND
47130: OR
47131: PUSH
47132: LD_VAR 0 1
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: IN
47147: NOT
47148: PUSH
47149: LD_VAR 0 6
47153: PUSH
47154: LD_INT 2
47156: EQUAL
47157: AND
47158: OR
47159: IFFALSE 47169
// mode = 0 ;
47161: LD_ADDR_VAR 0 6
47165: PUSH
47166: LD_INT 0
47168: ST_TO_ADDR
// case mode of 0 :
47169: LD_VAR 0 6
47173: PUSH
47174: LD_INT 0
47176: DOUBLE
47177: EQUAL
47178: IFTRUE 47182
47180: GO 58635
47182: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47183: LD_ADDR_VAR 0 11
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47376: LD_ADDR_VAR 0 12
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47572: LD_ADDR_VAR 0 13
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 3
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47771: LD_ADDR_VAR 0 14
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47967: LD_ADDR_VAR 0 15
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48160: LD_ADDR_VAR 0 16
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48353: LD_ADDR_VAR 0 17
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48583: LD_ADDR_VAR 0 18
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48813: LD_ADDR_VAR 0 19
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49043: LD_ADDR_VAR 0 20
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49273: LD_ADDR_VAR 0 21
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49503: LD_ADDR_VAR 0 22
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49733: LD_ADDR_VAR 0 23
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50013: LD_ADDR_VAR 0 24
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50289: LD_ADDR_VAR 0 25
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 3
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50563: LD_ADDR_VAR 0 26
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50839: LD_ADDR_VAR 0 27
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51119: LD_ADDR_VAR 0 28
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51401: LD_ADDR_VAR 0 29
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51680: LD_ADDR_VAR 0 30
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51958: LD_ADDR_VAR 0 31
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52236: LD_ADDR_VAR 0 32
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52514: LD_ADDR_VAR 0 33
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52793: LD_ADDR_VAR 0 34
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53073: LD_ADDR_VAR 0 35
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53185: LD_ADDR_VAR 0 36
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53297: LD_ADDR_VAR 0 37
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53409: LD_ADDR_VAR 0 38
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53521: LD_ADDR_VAR 0 39
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53633: LD_ADDR_VAR 0 40
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53745: LD_ADDR_VAR 0 41
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54095: LD_ADDR_VAR 0 42
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 3
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: LD_INT 3
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54445: LD_ADDR_VAR 0 43
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54793: LD_ADDR_VAR 0 44
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55143: LD_ADDR_VAR 0 45
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55493: LD_ADDR_VAR 0 46
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55841: LD_ADDR_VAR 0 47
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55992: LD_ADDR_VAR 0 48
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56139: LD_ADDR_VAR 0 49
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56283: LD_ADDR_VAR 0 50
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56427: LD_ADDR_VAR 0 51
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56574: LD_ADDR_VAR 0 52
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56725: LD_ADDR_VAR 0 53
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56955: LD_ADDR_VAR 0 54
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57185: LD_ADDR_VAR 0 55
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57415: LD_ADDR_VAR 0 56
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57645: LD_ADDR_VAR 0 57
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57875: LD_ADDR_VAR 0 58
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58105: LD_ADDR_VAR 0 59
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58193: LD_ADDR_VAR 0 60
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58281: LD_ADDR_VAR 0 61
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58369: LD_ADDR_VAR 0 62
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58457: LD_ADDR_VAR 0 63
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58545: LD_ADDR_VAR 0 64
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// end ; 1 :
58633: GO 64530
58635: LD_INT 1
58637: DOUBLE
58638: EQUAL
58639: IFTRUE 58643
58641: GO 61266
58643: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58644: LD_ADDR_VAR 0 11
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58688: LD_ADDR_VAR 0 12
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58729: LD_ADDR_VAR 0 13
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58769: LD_ADDR_VAR 0 14
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58810: LD_ADDR_VAR 0 15
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58854: LD_ADDR_VAR 0 16
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58900: LD_ADDR_VAR 0 17
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58944: LD_ADDR_VAR 0 18
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58985: LD_ADDR_VAR 0 19
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59025: LD_ADDR_VAR 0 20
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59066: LD_ADDR_VAR 0 21
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59110: LD_ADDR_VAR 0 22
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59156: LD_ADDR_VAR 0 23
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 3
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59200: LD_ADDR_VAR 0 24
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59241: LD_ADDR_VAR 0 25
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59281: LD_ADDR_VAR 0 26
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59322: LD_ADDR_VAR 0 27
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 4
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59366: LD_ADDR_VAR 0 28
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59412: LD_ADDR_VAR 0 29
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 3
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 5
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 5
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 4
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 6
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 6
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 5
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59567: LD_ADDR_VAR 0 30
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 4
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 5
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 5
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 6
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 6
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59710: LD_ADDR_VAR 0 31
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 6
59807: PUSH
59808: LD_INT 5
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 6
59817: PUSH
59818: LD_INT 6
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: LD_INT 6
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59849: LD_ADDR_VAR 0 32
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 4
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 4
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 5
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 6
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 6
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 5
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59992: LD_ADDR_VAR 0 33
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: NEG
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 4
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 5
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 5
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 6
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 6
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60147: LD_ADDR_VAR 0 34
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: LD_INT 4
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 4
60214: NEG
60215: PUSH
60216: LD_INT 4
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: LD_INT 5
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 5
60238: NEG
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 5
60250: NEG
60251: PUSH
60252: LD_INT 5
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 5
60262: NEG
60263: PUSH
60264: LD_INT 6
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 6
60274: NEG
60275: PUSH
60276: LD_INT 5
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 6
60286: NEG
60287: PUSH
60288: LD_INT 6
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60310: LD_ADDR_VAR 0 41
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60354: LD_ADDR_VAR 0 42
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60395: LD_ADDR_VAR 0 43
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60435: LD_ADDR_VAR 0 44
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60476: LD_ADDR_VAR 0 45
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60520: LD_ADDR_VAR 0 46
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60566: LD_ADDR_VAR 0 47
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60599: LD_ADDR_VAR 0 48
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60630: LD_ADDR_VAR 0 49
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60659: LD_ADDR_VAR 0 50
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60688: LD_ADDR_VAR 0 51
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60719: LD_ADDR_VAR 0 52
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60752: LD_ADDR_VAR 0 53
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60796: LD_ADDR_VAR 0 54
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60837: LD_ADDR_VAR 0 55
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60877: LD_ADDR_VAR 0 56
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60918: LD_ADDR_VAR 0 57
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60962: LD_ADDR_VAR 0 58
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61008: LD_ADDR_VAR 0 59
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61052: LD_ADDR_VAR 0 60
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61093: LD_ADDR_VAR 0 61
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61133: LD_ADDR_VAR 0 62
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61174: LD_ADDR_VAR 0 63
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61218: LD_ADDR_VAR 0 64
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// end ; 2 :
61264: GO 64530
61266: LD_INT 2
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61274
61272: GO 64529
61274: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61275: LD_ADDR_VAR 0 29
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 4
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 5
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 5
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: LD_INT 4
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 4
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 5
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 4
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 5
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 4
61614: NEG
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: NEG
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 4
61637: NEG
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 4
61660: NEG
61661: PUSH
61662: LD_INT 4
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 4
61672: NEG
61673: PUSH
61674: LD_INT 5
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: NEG
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 5
61720: NEG
61721: PUSH
61722: LD_INT 4
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 5
61732: NEG
61733: PUSH
61734: LD_INT 5
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 5
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 5
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61813: LD_ADDR_VAR 0 30
61817: PUSH
61818: LD_INT 4
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 5
61840: PUSH
61841: LD_INT 4
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 5
61850: PUSH
61851: LD_INT 5
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: LD_INT 5
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: LD_INT 4
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 5
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 5
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 4
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 4
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 4
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 4
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 5
62059: NEG
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 5
62070: NEG
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 5
62082: NEG
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 4
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: LD_INT 4
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 4
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 5
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 4
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 4
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 5
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 5
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62360: LD_ADDR_VAR 0 31
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 4
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: LD_INT 4
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 5
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 5
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 4
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 5
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 3
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 4
62516: NEG
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 4
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 4
62539: NEG
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 4
62562: NEG
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 4
62574: NEG
62575: PUSH
62576: LD_INT 5
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: LD_INT 3
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 5
62622: NEG
62623: PUSH
62624: LD_INT 4
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 5
62634: NEG
62635: PUSH
62636: LD_INT 5
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: NEG
62647: PUSH
62648: LD_INT 5
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 5
62658: NEG
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 4
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 4
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 5
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 5
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 3
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62910: LD_ADDR_VAR 0 32
62914: PUSH
62915: LD_INT 4
62917: NEG
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 4
62962: NEG
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 5
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 5
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 5
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: NEG
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: NEG
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: NEG
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 4
63079: NEG
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 4
63091: NEG
63092: PUSH
63093: LD_INT 4
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 4
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 4
63115: NEG
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 4
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 5
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 4
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 5
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: LD_INT 5
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 4
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 4
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: LD_INT 4
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 5
63342: PUSH
63343: LD_INT 4
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 5
63352: PUSH
63353: LD_INT 5
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 4
63362: PUSH
63363: LD_INT 5
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: LD_INT 4
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 5
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: LD_INT 5
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63457: LD_ADDR_VAR 0 33
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: LD_INT 4
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 4
63476: NEG
63477: PUSH
63478: LD_INT 5
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: LD_INT 4
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 4
63512: NEG
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 5
63524: NEG
63525: PUSH
63526: LD_INT 4
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 5
63536: NEG
63537: PUSH
63538: LD_INT 5
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: LD_INT 5
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 5
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 4
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 4
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 4
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 4
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 4
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 5
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 5
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 4
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 5
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 4
63797: PUSH
63798: LD_INT 4
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: LD_INT 4
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 4
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 4
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 4
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 3
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 4
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 5
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 5
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 4
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 5
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63995: LD_ADDR_VAR 0 34
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 4
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 5
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 4
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 3
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 3
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 4
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 5
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 3
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 4
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 4
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: LD_INT 2
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 4
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 5
64217: PUSH
64218: LD_INT 4
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 5
64227: PUSH
64228: LD_INT 5
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 4
64237: PUSH
64238: LD_INT 5
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: LD_INT 4
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: LD_INT 3
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 5
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 5
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 3
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 4
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 4
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: LD_INT 4
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 4
64380: NEG
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 4
64391: NEG
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 3
64414: NEG
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 4
64425: NEG
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 5
64436: NEG
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 5
64447: NEG
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 5
64459: NEG
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// end ; end ;
64527: GO 64530
64529: POP
// case btype of b_depot , b_warehouse :
64530: LD_VAR 0 1
64534: PUSH
64535: LD_INT 0
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64549
64541: LD_INT 1
64543: DOUBLE
64544: EQUAL
64545: IFTRUE 64549
64547: GO 64750
64549: POP
// case nation of nation_american :
64550: LD_VAR 0 5
64554: PUSH
64555: LD_INT 1
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64563
64561: GO 64619
64563: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64564: LD_ADDR_VAR 0 9
64568: PUSH
64569: LD_VAR 0 11
64573: PUSH
64574: LD_VAR 0 12
64578: PUSH
64579: LD_VAR 0 13
64583: PUSH
64584: LD_VAR 0 14
64588: PUSH
64589: LD_VAR 0 15
64593: PUSH
64594: LD_VAR 0 16
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: PUSH
64607: LD_VAR 0 4
64611: PUSH
64612: LD_INT 1
64614: PLUS
64615: ARRAY
64616: ST_TO_ADDR
64617: GO 64748
64619: LD_INT 2
64621: DOUBLE
64622: EQUAL
64623: IFTRUE 64627
64625: GO 64683
64627: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64628: LD_ADDR_VAR 0 9
64632: PUSH
64633: LD_VAR 0 17
64637: PUSH
64638: LD_VAR 0 18
64642: PUSH
64643: LD_VAR 0 19
64647: PUSH
64648: LD_VAR 0 20
64652: PUSH
64653: LD_VAR 0 21
64657: PUSH
64658: LD_VAR 0 22
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: PUSH
64671: LD_VAR 0 4
64675: PUSH
64676: LD_INT 1
64678: PLUS
64679: ARRAY
64680: ST_TO_ADDR
64681: GO 64748
64683: LD_INT 3
64685: DOUBLE
64686: EQUAL
64687: IFTRUE 64691
64689: GO 64747
64691: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64692: LD_ADDR_VAR 0 9
64696: PUSH
64697: LD_VAR 0 23
64701: PUSH
64702: LD_VAR 0 24
64706: PUSH
64707: LD_VAR 0 25
64711: PUSH
64712: LD_VAR 0 26
64716: PUSH
64717: LD_VAR 0 27
64721: PUSH
64722: LD_VAR 0 28
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: PUSH
64735: LD_VAR 0 4
64739: PUSH
64740: LD_INT 1
64742: PLUS
64743: ARRAY
64744: ST_TO_ADDR
64745: GO 64748
64747: POP
64748: GO 65303
64750: LD_INT 2
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64764
64756: LD_INT 3
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64820
64764: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64765: LD_ADDR_VAR 0 9
64769: PUSH
64770: LD_VAR 0 29
64774: PUSH
64775: LD_VAR 0 30
64779: PUSH
64780: LD_VAR 0 31
64784: PUSH
64785: LD_VAR 0 32
64789: PUSH
64790: LD_VAR 0 33
64794: PUSH
64795: LD_VAR 0 34
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: LD_VAR 0 4
64812: PUSH
64813: LD_INT 1
64815: PLUS
64816: ARRAY
64817: ST_TO_ADDR
64818: GO 65303
64820: LD_INT 16
64822: DOUBLE
64823: EQUAL
64824: IFTRUE 64882
64826: LD_INT 17
64828: DOUBLE
64829: EQUAL
64830: IFTRUE 64882
64832: LD_INT 18
64834: DOUBLE
64835: EQUAL
64836: IFTRUE 64882
64838: LD_INT 19
64840: DOUBLE
64841: EQUAL
64842: IFTRUE 64882
64844: LD_INT 22
64846: DOUBLE
64847: EQUAL
64848: IFTRUE 64882
64850: LD_INT 20
64852: DOUBLE
64853: EQUAL
64854: IFTRUE 64882
64856: LD_INT 21
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64882
64862: LD_INT 23
64864: DOUBLE
64865: EQUAL
64866: IFTRUE 64882
64868: LD_INT 24
64870: DOUBLE
64871: EQUAL
64872: IFTRUE 64882
64874: LD_INT 25
64876: DOUBLE
64877: EQUAL
64878: IFTRUE 64882
64880: GO 64938
64882: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64883: LD_ADDR_VAR 0 9
64887: PUSH
64888: LD_VAR 0 35
64892: PUSH
64893: LD_VAR 0 36
64897: PUSH
64898: LD_VAR 0 37
64902: PUSH
64903: LD_VAR 0 38
64907: PUSH
64908: LD_VAR 0 39
64912: PUSH
64913: LD_VAR 0 40
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: PUSH
64926: LD_VAR 0 4
64930: PUSH
64931: LD_INT 1
64933: PLUS
64934: ARRAY
64935: ST_TO_ADDR
64936: GO 65303
64938: LD_INT 6
64940: DOUBLE
64941: EQUAL
64942: IFTRUE 64994
64944: LD_INT 7
64946: DOUBLE
64947: EQUAL
64948: IFTRUE 64994
64950: LD_INT 8
64952: DOUBLE
64953: EQUAL
64954: IFTRUE 64994
64956: LD_INT 13
64958: DOUBLE
64959: EQUAL
64960: IFTRUE 64994
64962: LD_INT 12
64964: DOUBLE
64965: EQUAL
64966: IFTRUE 64994
64968: LD_INT 15
64970: DOUBLE
64971: EQUAL
64972: IFTRUE 64994
64974: LD_INT 11
64976: DOUBLE
64977: EQUAL
64978: IFTRUE 64994
64980: LD_INT 14
64982: DOUBLE
64983: EQUAL
64984: IFTRUE 64994
64986: LD_INT 10
64988: DOUBLE
64989: EQUAL
64990: IFTRUE 64994
64992: GO 65050
64994: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64995: LD_ADDR_VAR 0 9
64999: PUSH
65000: LD_VAR 0 41
65004: PUSH
65005: LD_VAR 0 42
65009: PUSH
65010: LD_VAR 0 43
65014: PUSH
65015: LD_VAR 0 44
65019: PUSH
65020: LD_VAR 0 45
65024: PUSH
65025: LD_VAR 0 46
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: LD_VAR 0 4
65042: PUSH
65043: LD_INT 1
65045: PLUS
65046: ARRAY
65047: ST_TO_ADDR
65048: GO 65303
65050: LD_INT 36
65052: DOUBLE
65053: EQUAL
65054: IFTRUE 65058
65056: GO 65114
65058: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65059: LD_ADDR_VAR 0 9
65063: PUSH
65064: LD_VAR 0 47
65068: PUSH
65069: LD_VAR 0 48
65073: PUSH
65074: LD_VAR 0 49
65078: PUSH
65079: LD_VAR 0 50
65083: PUSH
65084: LD_VAR 0 51
65088: PUSH
65089: LD_VAR 0 52
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: LD_VAR 0 4
65106: PUSH
65107: LD_INT 1
65109: PLUS
65110: ARRAY
65111: ST_TO_ADDR
65112: GO 65303
65114: LD_INT 4
65116: DOUBLE
65117: EQUAL
65118: IFTRUE 65140
65120: LD_INT 5
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65140
65126: LD_INT 34
65128: DOUBLE
65129: EQUAL
65130: IFTRUE 65140
65132: LD_INT 37
65134: DOUBLE
65135: EQUAL
65136: IFTRUE 65140
65138: GO 65196
65140: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65141: LD_ADDR_VAR 0 9
65145: PUSH
65146: LD_VAR 0 53
65150: PUSH
65151: LD_VAR 0 54
65155: PUSH
65156: LD_VAR 0 55
65160: PUSH
65161: LD_VAR 0 56
65165: PUSH
65166: LD_VAR 0 57
65170: PUSH
65171: LD_VAR 0 58
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: PUSH
65184: LD_VAR 0 4
65188: PUSH
65189: LD_INT 1
65191: PLUS
65192: ARRAY
65193: ST_TO_ADDR
65194: GO 65303
65196: LD_INT 31
65198: DOUBLE
65199: EQUAL
65200: IFTRUE 65246
65202: LD_INT 32
65204: DOUBLE
65205: EQUAL
65206: IFTRUE 65246
65208: LD_INT 33
65210: DOUBLE
65211: EQUAL
65212: IFTRUE 65246
65214: LD_INT 27
65216: DOUBLE
65217: EQUAL
65218: IFTRUE 65246
65220: LD_INT 26
65222: DOUBLE
65223: EQUAL
65224: IFTRUE 65246
65226: LD_INT 28
65228: DOUBLE
65229: EQUAL
65230: IFTRUE 65246
65232: LD_INT 29
65234: DOUBLE
65235: EQUAL
65236: IFTRUE 65246
65238: LD_INT 30
65240: DOUBLE
65241: EQUAL
65242: IFTRUE 65246
65244: GO 65302
65246: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65247: LD_ADDR_VAR 0 9
65251: PUSH
65252: LD_VAR 0 59
65256: PUSH
65257: LD_VAR 0 60
65261: PUSH
65262: LD_VAR 0 61
65266: PUSH
65267: LD_VAR 0 62
65271: PUSH
65272: LD_VAR 0 63
65276: PUSH
65277: LD_VAR 0 64
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: PUSH
65290: LD_VAR 0 4
65294: PUSH
65295: LD_INT 1
65297: PLUS
65298: ARRAY
65299: ST_TO_ADDR
65300: GO 65303
65302: POP
// temp_list2 = [ ] ;
65303: LD_ADDR_VAR 0 10
65307: PUSH
65308: EMPTY
65309: ST_TO_ADDR
// for i in temp_list do
65310: LD_ADDR_VAR 0 8
65314: PUSH
65315: LD_VAR 0 9
65319: PUSH
65320: FOR_IN
65321: IFFALSE 65373
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65323: LD_ADDR_VAR 0 10
65327: PUSH
65328: LD_VAR 0 10
65332: PUSH
65333: LD_VAR 0 8
65337: PUSH
65338: LD_INT 1
65340: ARRAY
65341: PUSH
65342: LD_VAR 0 2
65346: PLUS
65347: PUSH
65348: LD_VAR 0 8
65352: PUSH
65353: LD_INT 2
65355: ARRAY
65356: PUSH
65357: LD_VAR 0 3
65361: PLUS
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: ADD
65370: ST_TO_ADDR
65371: GO 65320
65373: POP
65374: POP
// result = temp_list2 ;
65375: LD_ADDR_VAR 0 7
65379: PUSH
65380: LD_VAR 0 10
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 7
65389: RET
// export function EnemyInRange ( unit , dist ) ; begin
65390: LD_INT 0
65392: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65393: LD_ADDR_VAR 0 3
65397: PUSH
65398: LD_VAR 0 1
65402: PPUSH
65403: CALL_OW 255
65407: PPUSH
65408: LD_VAR 0 1
65412: PPUSH
65413: CALL_OW 250
65417: PPUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: CALL_OW 251
65427: PPUSH
65428: LD_VAR 0 2
65432: PPUSH
65433: CALL 38786 0 4
65437: PUSH
65438: LD_INT 4
65440: ARRAY
65441: ST_TO_ADDR
// end ;
65442: LD_VAR 0 3
65446: RET
// export function PlayerSeeMe ( unit ) ; begin
65447: LD_INT 0
65449: PPUSH
// result := See ( your_side , unit ) ;
65450: LD_ADDR_VAR 0 2
65454: PUSH
65455: LD_OWVAR 2
65459: PPUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: CALL_OW 292
65469: ST_TO_ADDR
// end ;
65470: LD_VAR 0 2
65474: RET
// export function ReverseDir ( unit ) ; begin
65475: LD_INT 0
65477: PPUSH
// if not unit then
65478: LD_VAR 0 1
65482: NOT
65483: IFFALSE 65487
// exit ;
65485: GO 65510
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65487: LD_ADDR_VAR 0 2
65491: PUSH
65492: LD_VAR 0 1
65496: PPUSH
65497: CALL_OW 254
65501: PUSH
65502: LD_INT 3
65504: PLUS
65505: PUSH
65506: LD_INT 6
65508: MOD
65509: ST_TO_ADDR
// end ;
65510: LD_VAR 0 2
65514: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65515: LD_INT 0
65517: PPUSH
65518: PPUSH
65519: PPUSH
65520: PPUSH
65521: PPUSH
// if not hexes then
65522: LD_VAR 0 2
65526: NOT
65527: IFFALSE 65531
// exit ;
65529: GO 65679
// dist := 9999 ;
65531: LD_ADDR_VAR 0 5
65535: PUSH
65536: LD_INT 9999
65538: ST_TO_ADDR
// for i = 1 to hexes do
65539: LD_ADDR_VAR 0 4
65543: PUSH
65544: DOUBLE
65545: LD_INT 1
65547: DEC
65548: ST_TO_ADDR
65549: LD_VAR 0 2
65553: PUSH
65554: FOR_TO
65555: IFFALSE 65667
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65557: LD_VAR 0 1
65561: PPUSH
65562: LD_VAR 0 2
65566: PUSH
65567: LD_VAR 0 4
65571: ARRAY
65572: PUSH
65573: LD_INT 1
65575: ARRAY
65576: PPUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_VAR 0 4
65586: ARRAY
65587: PUSH
65588: LD_INT 2
65590: ARRAY
65591: PPUSH
65592: CALL_OW 297
65596: PUSH
65597: LD_VAR 0 5
65601: LESS
65602: IFFALSE 65665
// begin hex := hexes [ i ] ;
65604: LD_ADDR_VAR 0 7
65608: PUSH
65609: LD_VAR 0 2
65613: PUSH
65614: LD_VAR 0 4
65618: ARRAY
65619: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65620: LD_ADDR_VAR 0 5
65624: PUSH
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 2
65634: PUSH
65635: LD_VAR 0 4
65639: ARRAY
65640: PUSH
65641: LD_INT 1
65643: ARRAY
65644: PPUSH
65645: LD_VAR 0 2
65649: PUSH
65650: LD_VAR 0 4
65654: ARRAY
65655: PUSH
65656: LD_INT 2
65658: ARRAY
65659: PPUSH
65660: CALL_OW 297
65664: ST_TO_ADDR
// end ; end ;
65665: GO 65554
65667: POP
65668: POP
// result := hex ;
65669: LD_ADDR_VAR 0 3
65673: PUSH
65674: LD_VAR 0 7
65678: ST_TO_ADDR
// end ;
65679: LD_VAR 0 3
65683: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65684: LD_INT 0
65686: PPUSH
65687: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65688: LD_VAR 0 1
65692: NOT
65693: PUSH
65694: LD_VAR 0 1
65698: PUSH
65699: LD_INT 21
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 23
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PPUSH
65723: CALL_OW 69
65727: IN
65728: NOT
65729: OR
65730: IFFALSE 65734
// exit ;
65732: GO 65781
// for i = 1 to 3 do
65734: LD_ADDR_VAR 0 3
65738: PUSH
65739: DOUBLE
65740: LD_INT 1
65742: DEC
65743: ST_TO_ADDR
65744: LD_INT 3
65746: PUSH
65747: FOR_TO
65748: IFFALSE 65779
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65750: LD_VAR 0 1
65754: PPUSH
65755: CALL_OW 250
65759: PPUSH
65760: LD_VAR 0 1
65764: PPUSH
65765: CALL_OW 251
65769: PPUSH
65770: LD_INT 1
65772: PPUSH
65773: CALL_OW 453
65777: GO 65747
65779: POP
65780: POP
// end ;
65781: LD_VAR 0 2
65785: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65786: LD_INT 0
65788: PPUSH
65789: PPUSH
65790: PPUSH
65791: PPUSH
65792: PPUSH
65793: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65794: LD_VAR 0 1
65798: NOT
65799: PUSH
65800: LD_VAR 0 2
65804: NOT
65805: OR
65806: PUSH
65807: LD_VAR 0 1
65811: PPUSH
65812: CALL_OW 314
65816: OR
65817: IFFALSE 65821
// exit ;
65819: GO 66262
// x := GetX ( enemy_unit ) ;
65821: LD_ADDR_VAR 0 7
65825: PUSH
65826: LD_VAR 0 2
65830: PPUSH
65831: CALL_OW 250
65835: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65836: LD_ADDR_VAR 0 8
65840: PUSH
65841: LD_VAR 0 2
65845: PPUSH
65846: CALL_OW 251
65850: ST_TO_ADDR
// if not x or not y then
65851: LD_VAR 0 7
65855: NOT
65856: PUSH
65857: LD_VAR 0 8
65861: NOT
65862: OR
65863: IFFALSE 65867
// exit ;
65865: GO 66262
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65867: LD_ADDR_VAR 0 6
65871: PUSH
65872: LD_VAR 0 7
65876: PPUSH
65877: LD_INT 0
65879: PPUSH
65880: LD_INT 4
65882: PPUSH
65883: CALL_OW 272
65887: PUSH
65888: LD_VAR 0 8
65892: PPUSH
65893: LD_INT 0
65895: PPUSH
65896: LD_INT 4
65898: PPUSH
65899: CALL_OW 273
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_VAR 0 7
65912: PPUSH
65913: LD_INT 1
65915: PPUSH
65916: LD_INT 4
65918: PPUSH
65919: CALL_OW 272
65923: PUSH
65924: LD_VAR 0 8
65928: PPUSH
65929: LD_INT 1
65931: PPUSH
65932: LD_INT 4
65934: PPUSH
65935: CALL_OW 273
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_VAR 0 7
65948: PPUSH
65949: LD_INT 2
65951: PPUSH
65952: LD_INT 4
65954: PPUSH
65955: CALL_OW 272
65959: PUSH
65960: LD_VAR 0 8
65964: PPUSH
65965: LD_INT 2
65967: PPUSH
65968: LD_INT 4
65970: PPUSH
65971: CALL_OW 273
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_VAR 0 7
65984: PPUSH
65985: LD_INT 3
65987: PPUSH
65988: LD_INT 4
65990: PPUSH
65991: CALL_OW 272
65995: PUSH
65996: LD_VAR 0 8
66000: PPUSH
66001: LD_INT 3
66003: PPUSH
66004: LD_INT 4
66006: PPUSH
66007: CALL_OW 273
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_VAR 0 7
66020: PPUSH
66021: LD_INT 4
66023: PPUSH
66024: LD_INT 4
66026: PPUSH
66027: CALL_OW 272
66031: PUSH
66032: LD_VAR 0 8
66036: PPUSH
66037: LD_INT 4
66039: PPUSH
66040: LD_INT 4
66042: PPUSH
66043: CALL_OW 273
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_VAR 0 7
66056: PPUSH
66057: LD_INT 5
66059: PPUSH
66060: LD_INT 4
66062: PPUSH
66063: CALL_OW 272
66067: PUSH
66068: LD_VAR 0 8
66072: PPUSH
66073: LD_INT 5
66075: PPUSH
66076: LD_INT 4
66078: PPUSH
66079: CALL_OW 273
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// for i = tmp downto 1 do
66096: LD_ADDR_VAR 0 4
66100: PUSH
66101: DOUBLE
66102: LD_VAR 0 6
66106: INC
66107: ST_TO_ADDR
66108: LD_INT 1
66110: PUSH
66111: FOR_DOWNTO
66112: IFFALSE 66213
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66114: LD_VAR 0 6
66118: PUSH
66119: LD_VAR 0 4
66123: ARRAY
66124: PUSH
66125: LD_INT 1
66127: ARRAY
66128: PPUSH
66129: LD_VAR 0 6
66133: PUSH
66134: LD_VAR 0 4
66138: ARRAY
66139: PUSH
66140: LD_INT 2
66142: ARRAY
66143: PPUSH
66144: CALL_OW 488
66148: NOT
66149: PUSH
66150: LD_VAR 0 6
66154: PUSH
66155: LD_VAR 0 4
66159: ARRAY
66160: PUSH
66161: LD_INT 1
66163: ARRAY
66164: PPUSH
66165: LD_VAR 0 6
66169: PUSH
66170: LD_VAR 0 4
66174: ARRAY
66175: PUSH
66176: LD_INT 2
66178: ARRAY
66179: PPUSH
66180: CALL_OW 428
66184: PUSH
66185: LD_INT 0
66187: NONEQUAL
66188: OR
66189: IFFALSE 66211
// tmp := Delete ( tmp , i ) ;
66191: LD_ADDR_VAR 0 6
66195: PUSH
66196: LD_VAR 0 6
66200: PPUSH
66201: LD_VAR 0 4
66205: PPUSH
66206: CALL_OW 3
66210: ST_TO_ADDR
66211: GO 66111
66213: POP
66214: POP
// j := GetClosestHex ( unit , tmp ) ;
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: LD_VAR 0 1
66224: PPUSH
66225: LD_VAR 0 6
66229: PPUSH
66230: CALL 65515 0 2
66234: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66235: LD_VAR 0 1
66239: PPUSH
66240: LD_VAR 0 5
66244: PUSH
66245: LD_INT 1
66247: ARRAY
66248: PPUSH
66249: LD_VAR 0 5
66253: PUSH
66254: LD_INT 2
66256: ARRAY
66257: PPUSH
66258: CALL_OW 111
// end ;
66262: LD_VAR 0 3
66266: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66267: LD_INT 0
66269: PPUSH
66270: PPUSH
66271: PPUSH
// uc_side = 0 ;
66272: LD_ADDR_OWVAR 20
66276: PUSH
66277: LD_INT 0
66279: ST_TO_ADDR
// uc_nation = 0 ;
66280: LD_ADDR_OWVAR 21
66284: PUSH
66285: LD_INT 0
66287: ST_TO_ADDR
// InitHc_All ( ) ;
66288: CALL_OW 584
// InitVc ;
66292: CALL_OW 20
// if mastodonts then
66296: LD_VAR 0 6
66300: IFFALSE 66367
// for i = 1 to mastodonts do
66302: LD_ADDR_VAR 0 11
66306: PUSH
66307: DOUBLE
66308: LD_INT 1
66310: DEC
66311: ST_TO_ADDR
66312: LD_VAR 0 6
66316: PUSH
66317: FOR_TO
66318: IFFALSE 66365
// begin vc_chassis := 31 ;
66320: LD_ADDR_OWVAR 37
66324: PUSH
66325: LD_INT 31
66327: ST_TO_ADDR
// vc_control := control_rider ;
66328: LD_ADDR_OWVAR 38
66332: PUSH
66333: LD_INT 4
66335: ST_TO_ADDR
// animal := CreateVehicle ;
66336: LD_ADDR_VAR 0 12
66340: PUSH
66341: CALL_OW 45
66345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66346: LD_VAR 0 12
66350: PPUSH
66351: LD_VAR 0 8
66355: PPUSH
66356: LD_INT 0
66358: PPUSH
66359: CALL 68555 0 3
// end ;
66363: GO 66317
66365: POP
66366: POP
// if horses then
66367: LD_VAR 0 5
66371: IFFALSE 66438
// for i = 1 to horses do
66373: LD_ADDR_VAR 0 11
66377: PUSH
66378: DOUBLE
66379: LD_INT 1
66381: DEC
66382: ST_TO_ADDR
66383: LD_VAR 0 5
66387: PUSH
66388: FOR_TO
66389: IFFALSE 66436
// begin hc_class := 21 ;
66391: LD_ADDR_OWVAR 28
66395: PUSH
66396: LD_INT 21
66398: ST_TO_ADDR
// hc_gallery :=  ;
66399: LD_ADDR_OWVAR 33
66403: PUSH
66404: LD_STRING 
66406: ST_TO_ADDR
// animal := CreateHuman ;
66407: LD_ADDR_VAR 0 12
66411: PUSH
66412: CALL_OW 44
66416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66417: LD_VAR 0 12
66421: PPUSH
66422: LD_VAR 0 8
66426: PPUSH
66427: LD_INT 0
66429: PPUSH
66430: CALL 68555 0 3
// end ;
66434: GO 66388
66436: POP
66437: POP
// if birds then
66438: LD_VAR 0 1
66442: IFFALSE 66509
// for i = 1 to birds do
66444: LD_ADDR_VAR 0 11
66448: PUSH
66449: DOUBLE
66450: LD_INT 1
66452: DEC
66453: ST_TO_ADDR
66454: LD_VAR 0 1
66458: PUSH
66459: FOR_TO
66460: IFFALSE 66507
// begin hc_class = 18 ;
66462: LD_ADDR_OWVAR 28
66466: PUSH
66467: LD_INT 18
66469: ST_TO_ADDR
// hc_gallery =  ;
66470: LD_ADDR_OWVAR 33
66474: PUSH
66475: LD_STRING 
66477: ST_TO_ADDR
// animal := CreateHuman ;
66478: LD_ADDR_VAR 0 12
66482: PUSH
66483: CALL_OW 44
66487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66488: LD_VAR 0 12
66492: PPUSH
66493: LD_VAR 0 8
66497: PPUSH
66498: LD_INT 0
66500: PPUSH
66501: CALL 68555 0 3
// end ;
66505: GO 66459
66507: POP
66508: POP
// if tigers then
66509: LD_VAR 0 2
66513: IFFALSE 66597
// for i = 1 to tigers do
66515: LD_ADDR_VAR 0 11
66519: PUSH
66520: DOUBLE
66521: LD_INT 1
66523: DEC
66524: ST_TO_ADDR
66525: LD_VAR 0 2
66529: PUSH
66530: FOR_TO
66531: IFFALSE 66595
// begin hc_class = class_tiger ;
66533: LD_ADDR_OWVAR 28
66537: PUSH
66538: LD_INT 14
66540: ST_TO_ADDR
// hc_gallery =  ;
66541: LD_ADDR_OWVAR 33
66545: PUSH
66546: LD_STRING 
66548: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66549: LD_ADDR_OWVAR 35
66553: PUSH
66554: LD_INT 7
66556: NEG
66557: PPUSH
66558: LD_INT 7
66560: PPUSH
66561: CALL_OW 12
66565: ST_TO_ADDR
// animal := CreateHuman ;
66566: LD_ADDR_VAR 0 12
66570: PUSH
66571: CALL_OW 44
66575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66576: LD_VAR 0 12
66580: PPUSH
66581: LD_VAR 0 8
66585: PPUSH
66586: LD_INT 0
66588: PPUSH
66589: CALL 68555 0 3
// end ;
66593: GO 66530
66595: POP
66596: POP
// if apemans then
66597: LD_VAR 0 3
66601: IFFALSE 66724
// for i = 1 to apemans do
66603: LD_ADDR_VAR 0 11
66607: PUSH
66608: DOUBLE
66609: LD_INT 1
66611: DEC
66612: ST_TO_ADDR
66613: LD_VAR 0 3
66617: PUSH
66618: FOR_TO
66619: IFFALSE 66722
// begin hc_class = class_apeman ;
66621: LD_ADDR_OWVAR 28
66625: PUSH
66626: LD_INT 12
66628: ST_TO_ADDR
// hc_gallery =  ;
66629: LD_ADDR_OWVAR 33
66633: PUSH
66634: LD_STRING 
66636: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66637: LD_ADDR_OWVAR 35
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PPUSH
66646: LD_INT 2
66648: PPUSH
66649: CALL_OW 12
66653: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66654: LD_ADDR_OWVAR 31
66658: PUSH
66659: LD_INT 1
66661: PPUSH
66662: LD_INT 3
66664: PPUSH
66665: CALL_OW 12
66669: PUSH
66670: LD_INT 1
66672: PPUSH
66673: LD_INT 3
66675: PPUSH
66676: CALL_OW 12
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// animal := CreateHuman ;
66693: LD_ADDR_VAR 0 12
66697: PUSH
66698: CALL_OW 44
66702: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66703: LD_VAR 0 12
66707: PPUSH
66708: LD_VAR 0 8
66712: PPUSH
66713: LD_INT 0
66715: PPUSH
66716: CALL 68555 0 3
// end ;
66720: GO 66618
66722: POP
66723: POP
// if enchidnas then
66724: LD_VAR 0 4
66728: IFFALSE 66795
// for i = 1 to enchidnas do
66730: LD_ADDR_VAR 0 11
66734: PUSH
66735: DOUBLE
66736: LD_INT 1
66738: DEC
66739: ST_TO_ADDR
66740: LD_VAR 0 4
66744: PUSH
66745: FOR_TO
66746: IFFALSE 66793
// begin hc_class = 13 ;
66748: LD_ADDR_OWVAR 28
66752: PUSH
66753: LD_INT 13
66755: ST_TO_ADDR
// hc_gallery =  ;
66756: LD_ADDR_OWVAR 33
66760: PUSH
66761: LD_STRING 
66763: ST_TO_ADDR
// animal := CreateHuman ;
66764: LD_ADDR_VAR 0 12
66768: PUSH
66769: CALL_OW 44
66773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66774: LD_VAR 0 12
66778: PPUSH
66779: LD_VAR 0 8
66783: PPUSH
66784: LD_INT 0
66786: PPUSH
66787: CALL 68555 0 3
// end ;
66791: GO 66745
66793: POP
66794: POP
// if fishes then
66795: LD_VAR 0 7
66799: IFFALSE 66866
// for i = 1 to fishes do
66801: LD_ADDR_VAR 0 11
66805: PUSH
66806: DOUBLE
66807: LD_INT 1
66809: DEC
66810: ST_TO_ADDR
66811: LD_VAR 0 7
66815: PUSH
66816: FOR_TO
66817: IFFALSE 66864
// begin hc_class = 20 ;
66819: LD_ADDR_OWVAR 28
66823: PUSH
66824: LD_INT 20
66826: ST_TO_ADDR
// hc_gallery =  ;
66827: LD_ADDR_OWVAR 33
66831: PUSH
66832: LD_STRING 
66834: ST_TO_ADDR
// animal := CreateHuman ;
66835: LD_ADDR_VAR 0 12
66839: PUSH
66840: CALL_OW 44
66844: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66845: LD_VAR 0 12
66849: PPUSH
66850: LD_VAR 0 9
66854: PPUSH
66855: LD_INT 0
66857: PPUSH
66858: CALL 68555 0 3
// end ;
66862: GO 66816
66864: POP
66865: POP
// end ;
66866: LD_VAR 0 10
66870: RET
// export function WantHeal ( sci , unit ) ; begin
66871: LD_INT 0
66873: PPUSH
// if GetTaskList ( sci ) > 0 then
66874: LD_VAR 0 1
66878: PPUSH
66879: CALL_OW 437
66883: PUSH
66884: LD_INT 0
66886: GREATER
66887: IFFALSE 66957
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66889: LD_VAR 0 1
66893: PPUSH
66894: CALL_OW 437
66898: PUSH
66899: LD_INT 1
66901: ARRAY
66902: PUSH
66903: LD_INT 1
66905: ARRAY
66906: PUSH
66907: LD_STRING l
66909: EQUAL
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 437
66920: PUSH
66921: LD_INT 1
66923: ARRAY
66924: PUSH
66925: LD_INT 4
66927: ARRAY
66928: PUSH
66929: LD_VAR 0 2
66933: EQUAL
66934: AND
66935: IFFALSE 66947
// result := true else
66937: LD_ADDR_VAR 0 3
66941: PUSH
66942: LD_INT 1
66944: ST_TO_ADDR
66945: GO 66955
// result := false ;
66947: LD_ADDR_VAR 0 3
66951: PUSH
66952: LD_INT 0
66954: ST_TO_ADDR
// end else
66955: GO 66965
// result := false ;
66957: LD_ADDR_VAR 0 3
66961: PUSH
66962: LD_INT 0
66964: ST_TO_ADDR
// end ;
66965: LD_VAR 0 3
66969: RET
// export function HealTarget ( sci ) ; begin
66970: LD_INT 0
66972: PPUSH
// if not sci then
66973: LD_VAR 0 1
66977: NOT
66978: IFFALSE 66982
// exit ;
66980: GO 67047
// result := 0 ;
66982: LD_ADDR_VAR 0 2
66986: PUSH
66987: LD_INT 0
66989: ST_TO_ADDR
// if GetTaskList ( sci ) then
66990: LD_VAR 0 1
66994: PPUSH
66995: CALL_OW 437
66999: IFFALSE 67047
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67001: LD_VAR 0 1
67005: PPUSH
67006: CALL_OW 437
67010: PUSH
67011: LD_INT 1
67013: ARRAY
67014: PUSH
67015: LD_INT 1
67017: ARRAY
67018: PUSH
67019: LD_STRING l
67021: EQUAL
67022: IFFALSE 67047
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 437
67038: PUSH
67039: LD_INT 1
67041: ARRAY
67042: PUSH
67043: LD_INT 4
67045: ARRAY
67046: ST_TO_ADDR
// end ;
67047: LD_VAR 0 2
67051: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67052: LD_INT 0
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
// if not base_units then
67058: LD_VAR 0 1
67062: NOT
67063: IFFALSE 67067
// exit ;
67065: GO 67154
// result := false ;
67067: LD_ADDR_VAR 0 2
67071: PUSH
67072: LD_INT 0
67074: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67075: LD_ADDR_VAR 0 5
67079: PUSH
67080: LD_VAR 0 1
67084: PPUSH
67085: LD_INT 21
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PPUSH
67095: CALL_OW 72
67099: ST_TO_ADDR
// if not tmp then
67100: LD_VAR 0 5
67104: NOT
67105: IFFALSE 67109
// exit ;
67107: GO 67154
// for i in tmp do
67109: LD_ADDR_VAR 0 3
67113: PUSH
67114: LD_VAR 0 5
67118: PUSH
67119: FOR_IN
67120: IFFALSE 67152
// begin result := EnemyInRange ( i , 22 ) ;
67122: LD_ADDR_VAR 0 2
67126: PUSH
67127: LD_VAR 0 3
67131: PPUSH
67132: LD_INT 22
67134: PPUSH
67135: CALL 65390 0 2
67139: ST_TO_ADDR
// if result then
67140: LD_VAR 0 2
67144: IFFALSE 67150
// exit ;
67146: POP
67147: POP
67148: GO 67154
// end ;
67150: GO 67119
67152: POP
67153: POP
// end ;
67154: LD_VAR 0 2
67158: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67159: LD_INT 0
67161: PPUSH
67162: PPUSH
// if not units then
67163: LD_VAR 0 1
67167: NOT
67168: IFFALSE 67172
// exit ;
67170: GO 67242
// result := [ ] ;
67172: LD_ADDR_VAR 0 3
67176: PUSH
67177: EMPTY
67178: ST_TO_ADDR
// for i in units do
67179: LD_ADDR_VAR 0 4
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: FOR_IN
67190: IFFALSE 67240
// if GetTag ( i ) = tag then
67192: LD_VAR 0 4
67196: PPUSH
67197: CALL_OW 110
67201: PUSH
67202: LD_VAR 0 2
67206: EQUAL
67207: IFFALSE 67238
// result := Replace ( result , result + 1 , i ) ;
67209: LD_ADDR_VAR 0 3
67213: PUSH
67214: LD_VAR 0 3
67218: PPUSH
67219: LD_VAR 0 3
67223: PUSH
67224: LD_INT 1
67226: PLUS
67227: PPUSH
67228: LD_VAR 0 4
67232: PPUSH
67233: CALL_OW 1
67237: ST_TO_ADDR
67238: GO 67189
67240: POP
67241: POP
// end ;
67242: LD_VAR 0 3
67246: RET
// export function IsDriver ( un ) ; begin
67247: LD_INT 0
67249: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67250: LD_ADDR_VAR 0 2
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: LD_INT 55
67262: PUSH
67263: EMPTY
67264: LIST
67265: PPUSH
67266: CALL_OW 69
67270: IN
67271: ST_TO_ADDR
// end ;
67272: LD_VAR 0 2
67276: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67277: LD_INT 0
67279: PPUSH
67280: PPUSH
// list := [ ] ;
67281: LD_ADDR_VAR 0 5
67285: PUSH
67286: EMPTY
67287: ST_TO_ADDR
// case d of 0 :
67288: LD_VAR 0 3
67292: PUSH
67293: LD_INT 0
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67434
67301: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_INT 4
67314: MINUS
67315: PUSH
67316: LD_VAR 0 2
67320: PUSH
67321: LD_INT 4
67323: MINUS
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: PUSH
67333: LD_VAR 0 1
67337: PUSH
67338: LD_INT 3
67340: MINUS
67341: PUSH
67342: LD_VAR 0 2
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: PUSH
67355: LD_VAR 0 1
67359: PUSH
67360: LD_INT 4
67362: PLUS
67363: PUSH
67364: LD_VAR 0 2
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: PUSH
67377: LD_VAR 0 1
67381: PUSH
67382: LD_INT 3
67384: PLUS
67385: PUSH
67386: LD_VAR 0 2
67390: PUSH
67391: LD_INT 3
67393: PLUS
67394: PUSH
67395: LD_INT 5
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: PUSH
67403: LD_VAR 0 1
67407: PUSH
67408: LD_VAR 0 2
67412: PUSH
67413: LD_INT 4
67415: PLUS
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: ST_TO_ADDR
// end ; 1 :
67432: GO 68132
67434: LD_INT 1
67436: DOUBLE
67437: EQUAL
67438: IFTRUE 67442
67440: GO 67575
67442: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67443: LD_ADDR_VAR 0 5
67447: PUSH
67448: LD_VAR 0 1
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: LD_INT 4
67460: MINUS
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: PUSH
67470: LD_VAR 0 1
67474: PUSH
67475: LD_INT 3
67477: MINUS
67478: PUSH
67479: LD_VAR 0 2
67483: PUSH
67484: LD_INT 3
67486: MINUS
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: PUSH
67496: LD_VAR 0 1
67500: PUSH
67501: LD_INT 4
67503: MINUS
67504: PUSH
67505: LD_VAR 0 2
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: PUSH
67518: LD_VAR 0 1
67522: PUSH
67523: LD_VAR 0 2
67527: PUSH
67528: LD_INT 3
67530: PLUS
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: PUSH
67540: LD_VAR 0 1
67544: PUSH
67545: LD_INT 4
67547: PLUS
67548: PUSH
67549: LD_VAR 0 2
67553: PUSH
67554: LD_INT 4
67556: PLUS
67557: PUSH
67558: LD_INT 5
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: ST_TO_ADDR
// end ; 2 :
67573: GO 68132
67575: LD_INT 2
67577: DOUBLE
67578: EQUAL
67579: IFTRUE 67583
67581: GO 67712
67583: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67584: LD_ADDR_VAR 0 5
67588: PUSH
67589: LD_VAR 0 1
67593: PUSH
67594: LD_VAR 0 2
67598: PUSH
67599: LD_INT 3
67601: MINUS
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: LIST
67610: PUSH
67611: LD_VAR 0 1
67615: PUSH
67616: LD_INT 4
67618: PLUS
67619: PUSH
67620: LD_VAR 0 2
67624: PUSH
67625: LD_INT 4
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: LD_VAR 0 1
67637: PUSH
67638: LD_VAR 0 2
67642: PUSH
67643: LD_INT 4
67645: PLUS
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: LIST
67654: PUSH
67655: LD_VAR 0 1
67659: PUSH
67660: LD_INT 3
67662: MINUS
67663: PUSH
67664: LD_VAR 0 2
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: LIST
67676: PUSH
67677: LD_VAR 0 1
67681: PUSH
67682: LD_INT 4
67684: MINUS
67685: PUSH
67686: LD_VAR 0 2
67690: PUSH
67691: LD_INT 4
67693: MINUS
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// end ; 3 :
67710: GO 68132
67712: LD_INT 3
67714: DOUBLE
67715: EQUAL
67716: IFTRUE 67720
67718: GO 67853
67720: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67721: LD_ADDR_VAR 0 5
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_INT 3
67733: PLUS
67734: PUSH
67735: LD_VAR 0 2
67739: PUSH
67740: LD_INT 4
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: LIST
67747: PUSH
67748: LD_VAR 0 1
67752: PUSH
67753: LD_INT 4
67755: PLUS
67756: PUSH
67757: LD_VAR 0 2
67761: PUSH
67762: LD_INT 4
67764: PLUS
67765: PUSH
67766: LD_INT 5
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: PUSH
67774: LD_VAR 0 1
67778: PUSH
67779: LD_INT 4
67781: MINUS
67782: PUSH
67783: LD_VAR 0 2
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: LD_VAR 0 2
67805: PUSH
67806: LD_INT 4
67808: MINUS
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: LIST
67817: PUSH
67818: LD_VAR 0 1
67822: PUSH
67823: LD_INT 3
67825: MINUS
67826: PUSH
67827: LD_VAR 0 2
67831: PUSH
67832: LD_INT 3
67834: MINUS
67835: PUSH
67836: LD_INT 2
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: ST_TO_ADDR
// end ; 4 :
67851: GO 68132
67853: LD_INT 4
67855: DOUBLE
67856: EQUAL
67857: IFTRUE 67861
67859: GO 67994
67861: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67862: LD_ADDR_VAR 0 5
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_VAR 0 2
67876: PUSH
67877: LD_INT 4
67879: PLUS
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: PUSH
67889: LD_VAR 0 1
67893: PUSH
67894: LD_INT 3
67896: PLUS
67897: PUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_INT 3
67905: PLUS
67906: PUSH
67907: LD_INT 5
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: PUSH
67915: LD_VAR 0 1
67919: PUSH
67920: LD_INT 4
67922: PLUS
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: PUSH
67937: LD_VAR 0 1
67941: PUSH
67942: LD_VAR 0 2
67946: PUSH
67947: LD_INT 3
67949: MINUS
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: PUSH
67959: LD_VAR 0 1
67963: PUSH
67964: LD_INT 4
67966: MINUS
67967: PUSH
67968: LD_VAR 0 2
67972: PUSH
67973: LD_INT 4
67975: MINUS
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// end ; 5 :
67992: GO 68132
67994: LD_INT 5
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68002
68000: GO 68131
68002: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68003: LD_ADDR_VAR 0 5
68007: PUSH
68008: LD_VAR 0 1
68012: PUSH
68013: LD_INT 4
68015: MINUS
68016: PUSH
68017: LD_VAR 0 2
68021: PUSH
68022: LD_INT 1
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: LIST
68029: PUSH
68030: LD_VAR 0 1
68034: PUSH
68035: LD_VAR 0 2
68039: PUSH
68040: LD_INT 4
68042: MINUS
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: PUSH
68052: LD_VAR 0 1
68056: PUSH
68057: LD_INT 4
68059: PLUS
68060: PUSH
68061: LD_VAR 0 2
68065: PUSH
68066: LD_INT 4
68068: PLUS
68069: PUSH
68070: LD_INT 5
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: PUSH
68078: LD_VAR 0 1
68082: PUSH
68083: LD_INT 3
68085: PLUS
68086: PUSH
68087: LD_VAR 0 2
68091: PUSH
68092: LD_INT 4
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: PUSH
68100: LD_VAR 0 1
68104: PUSH
68105: LD_VAR 0 2
68109: PUSH
68110: LD_INT 3
68112: PLUS
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// end ; end ;
68129: GO 68132
68131: POP
// result := list ;
68132: LD_ADDR_VAR 0 4
68136: PUSH
68137: LD_VAR 0 5
68141: ST_TO_ADDR
// end ;
68142: LD_VAR 0 4
68146: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68152: LD_VAR 0 1
68156: NOT
68157: PUSH
68158: LD_VAR 0 2
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: IN
68181: NOT
68182: OR
68183: IFFALSE 68187
// exit ;
68185: GO 68279
// tmp := [ ] ;
68187: LD_ADDR_VAR 0 5
68191: PUSH
68192: EMPTY
68193: ST_TO_ADDR
// for i in units do
68194: LD_ADDR_VAR 0 4
68198: PUSH
68199: LD_VAR 0 1
68203: PUSH
68204: FOR_IN
68205: IFFALSE 68248
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68207: LD_ADDR_VAR 0 5
68211: PUSH
68212: LD_VAR 0 5
68216: PPUSH
68217: LD_VAR 0 5
68221: PUSH
68222: LD_INT 1
68224: PLUS
68225: PPUSH
68226: LD_VAR 0 4
68230: PPUSH
68231: LD_VAR 0 2
68235: PPUSH
68236: CALL_OW 259
68240: PPUSH
68241: CALL_OW 2
68245: ST_TO_ADDR
68246: GO 68204
68248: POP
68249: POP
// if not tmp then
68250: LD_VAR 0 5
68254: NOT
68255: IFFALSE 68259
// exit ;
68257: GO 68279
// result := SortListByListDesc ( units , tmp ) ;
68259: LD_ADDR_VAR 0 3
68263: PUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 5
68273: PPUSH
68274: CALL_OW 77
68278: ST_TO_ADDR
// end ;
68279: LD_VAR 0 3
68283: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68284: LD_INT 0
68286: PPUSH
68287: PPUSH
68288: PPUSH
// result := false ;
68289: LD_ADDR_VAR 0 3
68293: PUSH
68294: LD_INT 0
68296: ST_TO_ADDR
// x := GetX ( building ) ;
68297: LD_ADDR_VAR 0 4
68301: PUSH
68302: LD_VAR 0 2
68306: PPUSH
68307: CALL_OW 250
68311: ST_TO_ADDR
// y := GetY ( building ) ;
68312: LD_ADDR_VAR 0 5
68316: PUSH
68317: LD_VAR 0 2
68321: PPUSH
68322: CALL_OW 251
68326: ST_TO_ADDR
// if not building or not x or not y then
68327: LD_VAR 0 2
68331: NOT
68332: PUSH
68333: LD_VAR 0 4
68337: NOT
68338: OR
68339: PUSH
68340: LD_VAR 0 5
68344: NOT
68345: OR
68346: IFFALSE 68350
// exit ;
68348: GO 68442
// if GetTaskList ( unit ) then
68350: LD_VAR 0 1
68354: PPUSH
68355: CALL_OW 437
68359: IFFALSE 68442
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68361: LD_STRING e
68363: PUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL_OW 437
68373: PUSH
68374: LD_INT 1
68376: ARRAY
68377: PUSH
68378: LD_INT 1
68380: ARRAY
68381: EQUAL
68382: PUSH
68383: LD_VAR 0 4
68387: PUSH
68388: LD_VAR 0 1
68392: PPUSH
68393: CALL_OW 437
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PUSH
68402: LD_INT 2
68404: ARRAY
68405: EQUAL
68406: AND
68407: PUSH
68408: LD_VAR 0 5
68412: PUSH
68413: LD_VAR 0 1
68417: PPUSH
68418: CALL_OW 437
68422: PUSH
68423: LD_INT 1
68425: ARRAY
68426: PUSH
68427: LD_INT 3
68429: ARRAY
68430: EQUAL
68431: AND
68432: IFFALSE 68442
// result := true end ;
68434: LD_ADDR_VAR 0 3
68438: PUSH
68439: LD_INT 1
68441: ST_TO_ADDR
// end ;
68442: LD_VAR 0 3
68446: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68447: LD_INT 0
68449: PPUSH
// result := false ;
68450: LD_ADDR_VAR 0 4
68454: PUSH
68455: LD_INT 0
68457: ST_TO_ADDR
// if GetTaskList ( unit ) then
68458: LD_VAR 0 1
68462: PPUSH
68463: CALL_OW 437
68467: IFFALSE 68550
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68469: LD_STRING M
68471: PUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: CALL_OW 437
68481: PUSH
68482: LD_INT 1
68484: ARRAY
68485: PUSH
68486: LD_INT 1
68488: ARRAY
68489: EQUAL
68490: PUSH
68491: LD_VAR 0 2
68495: PUSH
68496: LD_VAR 0 1
68500: PPUSH
68501: CALL_OW 437
68505: PUSH
68506: LD_INT 1
68508: ARRAY
68509: PUSH
68510: LD_INT 2
68512: ARRAY
68513: EQUAL
68514: AND
68515: PUSH
68516: LD_VAR 0 3
68520: PUSH
68521: LD_VAR 0 1
68525: PPUSH
68526: CALL_OW 437
68530: PUSH
68531: LD_INT 1
68533: ARRAY
68534: PUSH
68535: LD_INT 3
68537: ARRAY
68538: EQUAL
68539: AND
68540: IFFALSE 68550
// result := true ;
68542: LD_ADDR_VAR 0 4
68546: PUSH
68547: LD_INT 1
68549: ST_TO_ADDR
// end ; end ;
68550: LD_VAR 0 4
68554: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
68559: PPUSH
68560: PPUSH
// if not unit or not area then
68561: LD_VAR 0 1
68565: NOT
68566: PUSH
68567: LD_VAR 0 2
68571: NOT
68572: OR
68573: IFFALSE 68577
// exit ;
68575: GO 68741
// tmp := AreaToList ( area , i ) ;
68577: LD_ADDR_VAR 0 6
68581: PUSH
68582: LD_VAR 0 2
68586: PPUSH
68587: LD_VAR 0 5
68591: PPUSH
68592: CALL_OW 517
68596: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68597: LD_ADDR_VAR 0 5
68601: PUSH
68602: DOUBLE
68603: LD_INT 1
68605: DEC
68606: ST_TO_ADDR
68607: LD_VAR 0 6
68611: PUSH
68612: LD_INT 1
68614: ARRAY
68615: PUSH
68616: FOR_TO
68617: IFFALSE 68739
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68619: LD_ADDR_VAR 0 7
68623: PUSH
68624: LD_VAR 0 6
68628: PUSH
68629: LD_INT 1
68631: ARRAY
68632: PUSH
68633: LD_VAR 0 5
68637: ARRAY
68638: PUSH
68639: LD_VAR 0 6
68643: PUSH
68644: LD_INT 2
68646: ARRAY
68647: PUSH
68648: LD_VAR 0 5
68652: ARRAY
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68658: LD_VAR 0 7
68662: PUSH
68663: LD_INT 1
68665: ARRAY
68666: PPUSH
68667: LD_VAR 0 7
68671: PUSH
68672: LD_INT 2
68674: ARRAY
68675: PPUSH
68676: CALL_OW 428
68680: PUSH
68681: LD_INT 0
68683: EQUAL
68684: IFFALSE 68737
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68686: LD_VAR 0 1
68690: PPUSH
68691: LD_VAR 0 7
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PPUSH
68700: LD_VAR 0 7
68704: PUSH
68705: LD_INT 2
68707: ARRAY
68708: PPUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: CALL_OW 48
// result := IsPlaced ( unit ) ;
68718: LD_ADDR_VAR 0 4
68722: PUSH
68723: LD_VAR 0 1
68727: PPUSH
68728: CALL_OW 305
68732: ST_TO_ADDR
// exit ;
68733: POP
68734: POP
68735: GO 68741
// end ; end ;
68737: GO 68616
68739: POP
68740: POP
// end ;
68741: LD_VAR 0 4
68745: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68746: LD_INT 0
68748: PPUSH
68749: PPUSH
68750: PPUSH
// if not side or side > 8 then
68751: LD_VAR 0 1
68755: NOT
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 8
68764: GREATER
68765: OR
68766: IFFALSE 68770
// exit ;
68768: GO 68957
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68770: LD_ADDR_VAR 0 4
68774: PUSH
68775: LD_INT 22
68777: PUSH
68778: LD_VAR 0 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 21
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PPUSH
68801: CALL_OW 69
68805: ST_TO_ADDR
// if not tmp then
68806: LD_VAR 0 4
68810: NOT
68811: IFFALSE 68815
// exit ;
68813: GO 68957
// enable_addtolog := true ;
68815: LD_ADDR_OWVAR 81
68819: PUSH
68820: LD_INT 1
68822: ST_TO_ADDR
// AddToLog ( [ ) ;
68823: LD_STRING [
68825: PPUSH
68826: CALL_OW 561
// for i in tmp do
68830: LD_ADDR_VAR 0 3
68834: PUSH
68835: LD_VAR 0 4
68839: PUSH
68840: FOR_IN
68841: IFFALSE 68948
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68843: LD_STRING [
68845: PUSH
68846: LD_VAR 0 3
68850: PPUSH
68851: CALL_OW 266
68855: STR
68856: PUSH
68857: LD_STRING , 
68859: STR
68860: PUSH
68861: LD_VAR 0 3
68865: PPUSH
68866: CALL_OW 250
68870: STR
68871: PUSH
68872: LD_STRING , 
68874: STR
68875: PUSH
68876: LD_VAR 0 3
68880: PPUSH
68881: CALL_OW 251
68885: STR
68886: PUSH
68887: LD_STRING , 
68889: STR
68890: PUSH
68891: LD_VAR 0 3
68895: PPUSH
68896: CALL_OW 254
68900: STR
68901: PUSH
68902: LD_STRING , 
68904: STR
68905: PUSH
68906: LD_VAR 0 3
68910: PPUSH
68911: LD_INT 1
68913: PPUSH
68914: CALL_OW 268
68918: STR
68919: PUSH
68920: LD_STRING , 
68922: STR
68923: PUSH
68924: LD_VAR 0 3
68928: PPUSH
68929: LD_INT 2
68931: PPUSH
68932: CALL_OW 268
68936: STR
68937: PUSH
68938: LD_STRING ],
68940: STR
68941: PPUSH
68942: CALL_OW 561
// end ;
68946: GO 68840
68948: POP
68949: POP
// AddToLog ( ]; ) ;
68950: LD_STRING ];
68952: PPUSH
68953: CALL_OW 561
// end ;
68957: LD_VAR 0 2
68961: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68962: LD_INT 0
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
// if not area or not rate or not max then
68969: LD_VAR 0 1
68973: NOT
68974: PUSH
68975: LD_VAR 0 2
68979: NOT
68980: OR
68981: PUSH
68982: LD_VAR 0 4
68986: NOT
68987: OR
68988: IFFALSE 68992
// exit ;
68990: GO 69184
// while 1 do
68992: LD_INT 1
68994: IFFALSE 69184
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68996: LD_ADDR_VAR 0 9
69000: PUSH
69001: LD_VAR 0 1
69005: PPUSH
69006: LD_INT 1
69008: PPUSH
69009: CALL_OW 287
69013: PUSH
69014: LD_INT 10
69016: MUL
69017: ST_TO_ADDR
// r := rate / 10 ;
69018: LD_ADDR_VAR 0 7
69022: PUSH
69023: LD_VAR 0 2
69027: PUSH
69028: LD_INT 10
69030: DIVREAL
69031: ST_TO_ADDR
// time := 1 1$00 ;
69032: LD_ADDR_VAR 0 8
69036: PUSH
69037: LD_INT 2100
69039: ST_TO_ADDR
// if amount < min then
69040: LD_VAR 0 9
69044: PUSH
69045: LD_VAR 0 3
69049: LESS
69050: IFFALSE 69068
// r := r * 2 else
69052: LD_ADDR_VAR 0 7
69056: PUSH
69057: LD_VAR 0 7
69061: PUSH
69062: LD_INT 2
69064: MUL
69065: ST_TO_ADDR
69066: GO 69094
// if amount > max then
69068: LD_VAR 0 9
69072: PUSH
69073: LD_VAR 0 4
69077: GREATER
69078: IFFALSE 69094
// r := r / 2 ;
69080: LD_ADDR_VAR 0 7
69084: PUSH
69085: LD_VAR 0 7
69089: PUSH
69090: LD_INT 2
69092: DIVREAL
69093: ST_TO_ADDR
// time := time / r ;
69094: LD_ADDR_VAR 0 8
69098: PUSH
69099: LD_VAR 0 8
69103: PUSH
69104: LD_VAR 0 7
69108: DIVREAL
69109: ST_TO_ADDR
// if time < 0 then
69110: LD_VAR 0 8
69114: PUSH
69115: LD_INT 0
69117: LESS
69118: IFFALSE 69135
// time := time * - 1 ;
69120: LD_ADDR_VAR 0 8
69124: PUSH
69125: LD_VAR 0 8
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: MUL
69134: ST_TO_ADDR
// wait ( time ) ;
69135: LD_VAR 0 8
69139: PPUSH
69140: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69144: LD_INT 35
69146: PPUSH
69147: LD_INT 875
69149: PPUSH
69150: CALL_OW 12
69154: PPUSH
69155: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69159: LD_INT 1
69161: PPUSH
69162: LD_INT 5
69164: PPUSH
69165: CALL_OW 12
69169: PPUSH
69170: LD_VAR 0 1
69174: PPUSH
69175: LD_INT 1
69177: PPUSH
69178: CALL_OW 55
// end ;
69182: GO 68992
// end ;
69184: LD_VAR 0 5
69188: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69189: LD_INT 0
69191: PPUSH
69192: PPUSH
69193: PPUSH
69194: PPUSH
69195: PPUSH
69196: PPUSH
69197: PPUSH
69198: PPUSH
// if not turrets or not factories then
69199: LD_VAR 0 1
69203: NOT
69204: PUSH
69205: LD_VAR 0 2
69209: NOT
69210: OR
69211: IFFALSE 69215
// exit ;
69213: GO 69522
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69215: LD_ADDR_VAR 0 10
69219: PUSH
69220: LD_INT 5
69222: PUSH
69223: LD_INT 6
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 4
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: LD_INT 5
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 24
69257: PUSH
69258: LD_INT 25
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 23
69267: PUSH
69268: LD_INT 27
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 42
69281: PUSH
69282: LD_INT 43
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 44
69291: PUSH
69292: LD_INT 46
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 45
69301: PUSH
69302: LD_INT 47
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: LIST
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: LIST
69318: ST_TO_ADDR
// result := [ ] ;
69319: LD_ADDR_VAR 0 3
69323: PUSH
69324: EMPTY
69325: ST_TO_ADDR
// for i in turrets do
69326: LD_ADDR_VAR 0 4
69330: PUSH
69331: LD_VAR 0 1
69335: PUSH
69336: FOR_IN
69337: IFFALSE 69520
// begin nat := GetNation ( i ) ;
69339: LD_ADDR_VAR 0 7
69343: PUSH
69344: LD_VAR 0 4
69348: PPUSH
69349: CALL_OW 248
69353: ST_TO_ADDR
// weapon := 0 ;
69354: LD_ADDR_VAR 0 8
69358: PUSH
69359: LD_INT 0
69361: ST_TO_ADDR
// if not nat then
69362: LD_VAR 0 7
69366: NOT
69367: IFFALSE 69371
// continue ;
69369: GO 69336
// for j in list [ nat ] do
69371: LD_ADDR_VAR 0 5
69375: PUSH
69376: LD_VAR 0 10
69380: PUSH
69381: LD_VAR 0 7
69385: ARRAY
69386: PUSH
69387: FOR_IN
69388: IFFALSE 69429
// if GetBWeapon ( i ) = j [ 1 ] then
69390: LD_VAR 0 4
69394: PPUSH
69395: CALL_OW 269
69399: PUSH
69400: LD_VAR 0 5
69404: PUSH
69405: LD_INT 1
69407: ARRAY
69408: EQUAL
69409: IFFALSE 69427
// begin weapon := j [ 2 ] ;
69411: LD_ADDR_VAR 0 8
69415: PUSH
69416: LD_VAR 0 5
69420: PUSH
69421: LD_INT 2
69423: ARRAY
69424: ST_TO_ADDR
// break ;
69425: GO 69429
// end ;
69427: GO 69387
69429: POP
69430: POP
// if not weapon then
69431: LD_VAR 0 8
69435: NOT
69436: IFFALSE 69440
// continue ;
69438: GO 69336
// for k in factories do
69440: LD_ADDR_VAR 0 6
69444: PUSH
69445: LD_VAR 0 2
69449: PUSH
69450: FOR_IN
69451: IFFALSE 69516
// begin weapons := AvailableWeaponList ( k ) ;
69453: LD_ADDR_VAR 0 9
69457: PUSH
69458: LD_VAR 0 6
69462: PPUSH
69463: CALL_OW 478
69467: ST_TO_ADDR
// if not weapons then
69468: LD_VAR 0 9
69472: NOT
69473: IFFALSE 69477
// continue ;
69475: GO 69450
// if weapon in weapons then
69477: LD_VAR 0 8
69481: PUSH
69482: LD_VAR 0 9
69486: IN
69487: IFFALSE 69514
// begin result := [ i , weapon ] ;
69489: LD_ADDR_VAR 0 3
69493: PUSH
69494: LD_VAR 0 4
69498: PUSH
69499: LD_VAR 0 8
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: ST_TO_ADDR
// exit ;
69508: POP
69509: POP
69510: POP
69511: POP
69512: GO 69522
// end ; end ;
69514: GO 69450
69516: POP
69517: POP
// end ;
69518: GO 69336
69520: POP
69521: POP
// end ;
69522: LD_VAR 0 3
69526: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69527: LD_INT 0
69529: PPUSH
// if not side or side > 8 then
69530: LD_VAR 0 3
69534: NOT
69535: PUSH
69536: LD_VAR 0 3
69540: PUSH
69541: LD_INT 8
69543: GREATER
69544: OR
69545: IFFALSE 69549
// exit ;
69547: GO 69608
// if not range then
69549: LD_VAR 0 4
69553: NOT
69554: IFFALSE 69565
// range := - 12 ;
69556: LD_ADDR_VAR 0 4
69560: PUSH
69561: LD_INT 12
69563: NEG
69564: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69565: LD_VAR 0 1
69569: PPUSH
69570: LD_VAR 0 2
69574: PPUSH
69575: LD_VAR 0 3
69579: PPUSH
69580: LD_VAR 0 4
69584: PPUSH
69585: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69589: LD_VAR 0 1
69593: PPUSH
69594: LD_VAR 0 2
69598: PPUSH
69599: LD_VAR 0 3
69603: PPUSH
69604: CALL_OW 331
// end ;
69608: LD_VAR 0 5
69612: RET
// export function Video ( mode ) ; begin
69613: LD_INT 0
69615: PPUSH
// ingame_video = mode ;
69616: LD_ADDR_OWVAR 52
69620: PUSH
69621: LD_VAR 0 1
69625: ST_TO_ADDR
// interface_hidden = mode ;
69626: LD_ADDR_OWVAR 54
69630: PUSH
69631: LD_VAR 0 1
69635: ST_TO_ADDR
// end ;
69636: LD_VAR 0 2
69640: RET
// export function Join ( array , element ) ; begin
69641: LD_INT 0
69643: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69644: LD_ADDR_VAR 0 3
69648: PUSH
69649: LD_VAR 0 1
69653: PPUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_INT 1
69661: PLUS
69662: PPUSH
69663: LD_VAR 0 2
69667: PPUSH
69668: CALL_OW 1
69672: ST_TO_ADDR
// end ;
69673: LD_VAR 0 3
69677: RET
// export function JoinUnion ( array , element ) ; begin
69678: LD_INT 0
69680: PPUSH
// result := array union element ;
69681: LD_ADDR_VAR 0 3
69685: PUSH
69686: LD_VAR 0 1
69690: PUSH
69691: LD_VAR 0 2
69695: UNION
69696: ST_TO_ADDR
// end ;
69697: LD_VAR 0 3
69701: RET
// export function GetBehemoths ( side ) ; begin
69702: LD_INT 0
69704: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69705: LD_ADDR_VAR 0 2
69709: PUSH
69710: LD_INT 22
69712: PUSH
69713: LD_VAR 0 1
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 31
69724: PUSH
69725: LD_INT 25
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PPUSH
69736: CALL_OW 69
69740: ST_TO_ADDR
// end ;
69741: LD_VAR 0 2
69745: RET
// export function Shuffle ( array ) ; var i , index ; begin
69746: LD_INT 0
69748: PPUSH
69749: PPUSH
69750: PPUSH
// result := [ ] ;
69751: LD_ADDR_VAR 0 2
69755: PUSH
69756: EMPTY
69757: ST_TO_ADDR
// if not array then
69758: LD_VAR 0 1
69762: NOT
69763: IFFALSE 69767
// exit ;
69765: GO 69866
// Randomize ;
69767: CALL_OW 10
// for i = array downto 1 do
69771: LD_ADDR_VAR 0 3
69775: PUSH
69776: DOUBLE
69777: LD_VAR 0 1
69781: INC
69782: ST_TO_ADDR
69783: LD_INT 1
69785: PUSH
69786: FOR_DOWNTO
69787: IFFALSE 69864
// begin index := rand ( 1 , array ) ;
69789: LD_ADDR_VAR 0 4
69793: PUSH
69794: LD_INT 1
69796: PPUSH
69797: LD_VAR 0 1
69801: PPUSH
69802: CALL_OW 12
69806: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69807: LD_ADDR_VAR 0 2
69811: PUSH
69812: LD_VAR 0 2
69816: PPUSH
69817: LD_VAR 0 2
69821: PUSH
69822: LD_INT 1
69824: PLUS
69825: PPUSH
69826: LD_VAR 0 1
69830: PUSH
69831: LD_VAR 0 4
69835: ARRAY
69836: PPUSH
69837: CALL_OW 2
69841: ST_TO_ADDR
// array := Delete ( array , index ) ;
69842: LD_ADDR_VAR 0 1
69846: PUSH
69847: LD_VAR 0 1
69851: PPUSH
69852: LD_VAR 0 4
69856: PPUSH
69857: CALL_OW 3
69861: ST_TO_ADDR
// end ;
69862: GO 69786
69864: POP
69865: POP
// end ;
69866: LD_VAR 0 2
69870: RET
// export function GetBaseMaterials ( base ) ; begin
69871: LD_INT 0
69873: PPUSH
// result := [ 0 , 0 , 0 ] ;
69874: LD_ADDR_VAR 0 2
69878: PUSH
69879: LD_INT 0
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: LIST
69892: ST_TO_ADDR
// if not base then
69893: LD_VAR 0 1
69897: NOT
69898: IFFALSE 69902
// exit ;
69900: GO 69951
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69902: LD_ADDR_VAR 0 2
69906: PUSH
69907: LD_VAR 0 1
69911: PPUSH
69912: LD_INT 1
69914: PPUSH
69915: CALL_OW 275
69919: PUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: LD_INT 2
69927: PPUSH
69928: CALL_OW 275
69932: PUSH
69933: LD_VAR 0 1
69937: PPUSH
69938: LD_INT 3
69940: PPUSH
69941: CALL_OW 275
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: ST_TO_ADDR
// end ;
69951: LD_VAR 0 2
69955: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69956: LD_INT 0
69958: PPUSH
69959: PPUSH
// result := array ;
69960: LD_ADDR_VAR 0 3
69964: PUSH
69965: LD_VAR 0 1
69969: ST_TO_ADDR
// if size > 0 then
69970: LD_VAR 0 2
69974: PUSH
69975: LD_INT 0
69977: GREATER
69978: IFFALSE 70024
// for i := array downto size do
69980: LD_ADDR_VAR 0 4
69984: PUSH
69985: DOUBLE
69986: LD_VAR 0 1
69990: INC
69991: ST_TO_ADDR
69992: LD_VAR 0 2
69996: PUSH
69997: FOR_DOWNTO
69998: IFFALSE 70022
// result := Delete ( result , result ) ;
70000: LD_ADDR_VAR 0 3
70004: PUSH
70005: LD_VAR 0 3
70009: PPUSH
70010: LD_VAR 0 3
70014: PPUSH
70015: CALL_OW 3
70019: ST_TO_ADDR
70020: GO 69997
70022: POP
70023: POP
// end ;
70024: LD_VAR 0 3
70028: RET
// export function ComExit ( unit ) ; var tmp ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
// if not IsInUnit ( unit ) then
70033: LD_VAR 0 1
70037: PPUSH
70038: CALL_OW 310
70042: NOT
70043: IFFALSE 70047
// exit ;
70045: GO 70107
// tmp := IsInUnit ( unit ) ;
70047: LD_ADDR_VAR 0 3
70051: PUSH
70052: LD_VAR 0 1
70056: PPUSH
70057: CALL_OW 310
70061: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70062: LD_VAR 0 3
70066: PPUSH
70067: CALL_OW 247
70071: PUSH
70072: LD_INT 2
70074: EQUAL
70075: IFFALSE 70088
// ComExitVehicle ( unit ) else
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 121
70086: GO 70097
// ComExitBuilding ( unit ) ;
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL_OW 122
// result := tmp ;
70097: LD_ADDR_VAR 0 2
70101: PUSH
70102: LD_VAR 0 3
70106: ST_TO_ADDR
// end ;
70107: LD_VAR 0 2
70111: RET
// export function ComExitAll ( units ) ; var i ; begin
70112: LD_INT 0
70114: PPUSH
70115: PPUSH
// if not units then
70116: LD_VAR 0 1
70120: NOT
70121: IFFALSE 70125
// exit ;
70123: GO 70151
// for i in units do
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_VAR 0 1
70134: PUSH
70135: FOR_IN
70136: IFFALSE 70149
// ComExit ( i ) ;
70138: LD_VAR 0 3
70142: PPUSH
70143: CALL 70029 0 1
70147: GO 70135
70149: POP
70150: POP
// end ;
70151: LD_VAR 0 2
70155: RET
// export function ResetHc ; begin
70156: LD_INT 0
70158: PPUSH
// InitHc ;
70159: CALL_OW 19
// hc_importance := 0 ;
70163: LD_ADDR_OWVAR 32
70167: PUSH
70168: LD_INT 0
70170: ST_TO_ADDR
// end ;
70171: LD_VAR 0 1
70175: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70176: LD_INT 0
70178: PPUSH
70179: PPUSH
70180: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70181: LD_ADDR_VAR 0 6
70185: PUSH
70186: LD_VAR 0 1
70190: PUSH
70191: LD_VAR 0 3
70195: PLUS
70196: PUSH
70197: LD_INT 2
70199: DIV
70200: ST_TO_ADDR
// if _x < 0 then
70201: LD_VAR 0 6
70205: PUSH
70206: LD_INT 0
70208: LESS
70209: IFFALSE 70226
// _x := _x * - 1 ;
70211: LD_ADDR_VAR 0 6
70215: PUSH
70216: LD_VAR 0 6
70220: PUSH
70221: LD_INT 1
70223: NEG
70224: MUL
70225: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70226: LD_ADDR_VAR 0 7
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: LD_VAR 0 4
70240: PLUS
70241: PUSH
70242: LD_INT 2
70244: DIV
70245: ST_TO_ADDR
// if _y < 0 then
70246: LD_VAR 0 7
70250: PUSH
70251: LD_INT 0
70253: LESS
70254: IFFALSE 70271
// _y := _y * - 1 ;
70256: LD_ADDR_VAR 0 7
70260: PUSH
70261: LD_VAR 0 7
70265: PUSH
70266: LD_INT 1
70268: NEG
70269: MUL
70270: ST_TO_ADDR
// result := [ _x , _y ] ;
70271: LD_ADDR_VAR 0 5
70275: PUSH
70276: LD_VAR 0 6
70280: PUSH
70281: LD_VAR 0 7
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: ST_TO_ADDR
// end ;
70290: LD_VAR 0 5
70294: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70295: LD_INT 0
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
// task := GetTaskList ( unit ) ;
70301: LD_ADDR_VAR 0 7
70305: PUSH
70306: LD_VAR 0 1
70310: PPUSH
70311: CALL_OW 437
70315: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70316: LD_VAR 0 7
70320: NOT
70321: PUSH
70322: LD_VAR 0 1
70326: PPUSH
70327: LD_VAR 0 2
70331: PPUSH
70332: CALL_OW 308
70336: NOT
70337: AND
70338: IFFALSE 70342
// exit ;
70340: GO 70460
// if IsInArea ( unit , area ) then
70342: LD_VAR 0 1
70346: PPUSH
70347: LD_VAR 0 2
70351: PPUSH
70352: CALL_OW 308
70356: IFFALSE 70374
// begin ComMoveToArea ( unit , goAway ) ;
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_VAR 0 3
70367: PPUSH
70368: CALL_OW 113
// exit ;
70372: GO 70460
// end ; if task [ 1 ] [ 1 ] <> M then
70374: LD_VAR 0 7
70378: PUSH
70379: LD_INT 1
70381: ARRAY
70382: PUSH
70383: LD_INT 1
70385: ARRAY
70386: PUSH
70387: LD_STRING M
70389: NONEQUAL
70390: IFFALSE 70394
// exit ;
70392: GO 70460
// x := task [ 1 ] [ 2 ] ;
70394: LD_ADDR_VAR 0 5
70398: PUSH
70399: LD_VAR 0 7
70403: PUSH
70404: LD_INT 1
70406: ARRAY
70407: PUSH
70408: LD_INT 2
70410: ARRAY
70411: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70412: LD_ADDR_VAR 0 6
70416: PUSH
70417: LD_VAR 0 7
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PUSH
70426: LD_INT 3
70428: ARRAY
70429: ST_TO_ADDR
// if InArea ( x , y , area ) then
70430: LD_VAR 0 5
70434: PPUSH
70435: LD_VAR 0 6
70439: PPUSH
70440: LD_VAR 0 2
70444: PPUSH
70445: CALL_OW 309
70449: IFFALSE 70460
// ComStop ( unit ) ;
70451: LD_VAR 0 1
70455: PPUSH
70456: CALL_OW 141
// end ;
70460: LD_VAR 0 4
70464: RET
// export function Abs ( value ) ; begin
70465: LD_INT 0
70467: PPUSH
// result := value ;
70468: LD_ADDR_VAR 0 2
70472: PUSH
70473: LD_VAR 0 1
70477: ST_TO_ADDR
// if value < 0 then
70478: LD_VAR 0 1
70482: PUSH
70483: LD_INT 0
70485: LESS
70486: IFFALSE 70503
// result := value * - 1 ;
70488: LD_ADDR_VAR 0 2
70492: PUSH
70493: LD_VAR 0 1
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: MUL
70502: ST_TO_ADDR
// end ;
70503: LD_VAR 0 2
70507: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70508: LD_INT 0
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
70517: PPUSH
// if not unit or not building then
70518: LD_VAR 0 1
70522: NOT
70523: PUSH
70524: LD_VAR 0 2
70528: NOT
70529: OR
70530: IFFALSE 70534
// exit ;
70532: GO 70760
// x := GetX ( building ) ;
70534: LD_ADDR_VAR 0 4
70538: PUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: CALL_OW 250
70548: ST_TO_ADDR
// y := GetY ( building ) ;
70549: LD_ADDR_VAR 0 6
70553: PUSH
70554: LD_VAR 0 2
70558: PPUSH
70559: CALL_OW 251
70563: ST_TO_ADDR
// d := GetDir ( building ) ;
70564: LD_ADDR_VAR 0 8
70568: PUSH
70569: LD_VAR 0 2
70573: PPUSH
70574: CALL_OW 254
70578: ST_TO_ADDR
// r := 4 ;
70579: LD_ADDR_VAR 0 9
70583: PUSH
70584: LD_INT 4
70586: ST_TO_ADDR
// for i := 1 to 5 do
70587: LD_ADDR_VAR 0 10
70591: PUSH
70592: DOUBLE
70593: LD_INT 1
70595: DEC
70596: ST_TO_ADDR
70597: LD_INT 5
70599: PUSH
70600: FOR_TO
70601: IFFALSE 70758
// begin _x := ShiftX ( x , d , r + i ) ;
70603: LD_ADDR_VAR 0 5
70607: PUSH
70608: LD_VAR 0 4
70612: PPUSH
70613: LD_VAR 0 8
70617: PPUSH
70618: LD_VAR 0 9
70622: PUSH
70623: LD_VAR 0 10
70627: PLUS
70628: PPUSH
70629: CALL_OW 272
70633: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70634: LD_ADDR_VAR 0 7
70638: PUSH
70639: LD_VAR 0 6
70643: PPUSH
70644: LD_VAR 0 8
70648: PPUSH
70649: LD_VAR 0 9
70653: PUSH
70654: LD_VAR 0 10
70658: PLUS
70659: PPUSH
70660: CALL_OW 273
70664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70665: LD_VAR 0 5
70669: PPUSH
70670: LD_VAR 0 7
70674: PPUSH
70675: CALL_OW 488
70679: PUSH
70680: LD_VAR 0 5
70684: PPUSH
70685: LD_VAR 0 7
70689: PPUSH
70690: CALL_OW 428
70694: PPUSH
70695: CALL_OW 247
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 2
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: IN
70710: NOT
70711: AND
70712: IFFALSE 70756
// begin ComMoveXY ( unit , _x , _y ) ;
70714: LD_VAR 0 1
70718: PPUSH
70719: LD_VAR 0 5
70723: PPUSH
70724: LD_VAR 0 7
70728: PPUSH
70729: CALL_OW 111
// result := [ _x , _y ] ;
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 5
70742: PUSH
70743: LD_VAR 0 7
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: ST_TO_ADDR
// exit ;
70752: POP
70753: POP
70754: GO 70760
// end ; end ;
70756: GO 70600
70758: POP
70759: POP
// end ;
70760: LD_VAR 0 3
70764: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70765: LD_INT 0
70767: PPUSH
70768: PPUSH
70769: PPUSH
// result := 0 ;
70770: LD_ADDR_VAR 0 3
70774: PUSH
70775: LD_INT 0
70777: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70778: LD_VAR 0 1
70782: PUSH
70783: LD_INT 0
70785: LESS
70786: PUSH
70787: LD_VAR 0 1
70791: PUSH
70792: LD_INT 8
70794: GREATER
70795: OR
70796: PUSH
70797: LD_VAR 0 2
70801: PUSH
70802: LD_INT 0
70804: LESS
70805: OR
70806: PUSH
70807: LD_VAR 0 2
70811: PUSH
70812: LD_INT 8
70814: GREATER
70815: OR
70816: IFFALSE 70820
// exit ;
70818: GO 70895
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70820: LD_ADDR_VAR 0 4
70824: PUSH
70825: LD_INT 22
70827: PUSH
70828: LD_VAR 0 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PPUSH
70837: CALL_OW 69
70841: PUSH
70842: FOR_IN
70843: IFFALSE 70893
// begin un := UnitShoot ( i ) ;
70845: LD_ADDR_VAR 0 5
70849: PUSH
70850: LD_VAR 0 4
70854: PPUSH
70855: CALL_OW 504
70859: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70860: LD_VAR 0 5
70864: PPUSH
70865: CALL_OW 255
70869: PUSH
70870: LD_VAR 0 1
70874: EQUAL
70875: IFFALSE 70891
// begin result := un ;
70877: LD_ADDR_VAR 0 3
70881: PUSH
70882: LD_VAR 0 5
70886: ST_TO_ADDR
// exit ;
70887: POP
70888: POP
70889: GO 70895
// end ; end ;
70891: GO 70842
70893: POP
70894: POP
// end ;
70895: LD_VAR 0 3
70899: RET
// export function GetCargoBay ( units ) ; begin
70900: LD_INT 0
70902: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70903: LD_ADDR_VAR 0 2
70907: PUSH
70908: LD_VAR 0 1
70912: PPUSH
70913: LD_INT 2
70915: PUSH
70916: LD_INT 34
70918: PUSH
70919: LD_INT 12
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 34
70928: PUSH
70929: LD_INT 51
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 34
70938: PUSH
70939: LD_INT 32
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 34
70948: PUSH
70949: LD_EXP 131
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: PPUSH
70965: CALL_OW 72
70969: ST_TO_ADDR
// end ;
70970: LD_VAR 0 2
70974: RET
// export function Negate ( value ) ; begin
70975: LD_INT 0
70977: PPUSH
// result := not value ;
70978: LD_ADDR_VAR 0 2
70982: PUSH
70983: LD_VAR 0 1
70987: NOT
70988: ST_TO_ADDR
// end ;
70989: LD_VAR 0 2
70993: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70994: LD_INT 0
70996: PPUSH
70997: PPUSH
70998: PPUSH
70999: PPUSH
71000: PPUSH
71001: PPUSH
71002: PPUSH
71003: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_VAR 0 2
71013: PPUSH
71014: CALL_OW 488
71018: NOT
71019: PUSH
71020: LD_VAR 0 3
71024: PPUSH
71025: LD_VAR 0 4
71029: PPUSH
71030: CALL_OW 488
71034: NOT
71035: OR
71036: IFFALSE 71049
// begin result := - 1 ;
71038: LD_ADDR_VAR 0 5
71042: PUSH
71043: LD_INT 1
71045: NEG
71046: ST_TO_ADDR
// exit ;
71047: GO 71284
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71049: LD_ADDR_VAR 0 12
71053: PUSH
71054: LD_VAR 0 1
71058: PPUSH
71059: LD_VAR 0 2
71063: PPUSH
71064: LD_VAR 0 3
71068: PPUSH
71069: LD_VAR 0 4
71073: PPUSH
71074: CALL 70176 0 4
71078: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71079: LD_ADDR_VAR 0 11
71083: PUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: LD_VAR 0 2
71093: PPUSH
71094: LD_VAR 0 12
71098: PUSH
71099: LD_INT 1
71101: ARRAY
71102: PPUSH
71103: LD_VAR 0 12
71107: PUSH
71108: LD_INT 2
71110: ARRAY
71111: PPUSH
71112: CALL_OW 298
71116: ST_TO_ADDR
// distance := 9999 ;
71117: LD_ADDR_VAR 0 10
71121: PUSH
71122: LD_INT 9999
71124: ST_TO_ADDR
// for i := 0 to 5 do
71125: LD_ADDR_VAR 0 6
71129: PUSH
71130: DOUBLE
71131: LD_INT 0
71133: DEC
71134: ST_TO_ADDR
71135: LD_INT 5
71137: PUSH
71138: FOR_TO
71139: IFFALSE 71282
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71141: LD_ADDR_VAR 0 7
71145: PUSH
71146: LD_VAR 0 1
71150: PPUSH
71151: LD_VAR 0 6
71155: PPUSH
71156: LD_VAR 0 11
71160: PPUSH
71161: CALL_OW 272
71165: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71166: LD_ADDR_VAR 0 8
71170: PUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: LD_VAR 0 6
71180: PPUSH
71181: LD_VAR 0 11
71185: PPUSH
71186: CALL_OW 273
71190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71191: LD_VAR 0 7
71195: PPUSH
71196: LD_VAR 0 8
71200: PPUSH
71201: CALL_OW 488
71205: NOT
71206: IFFALSE 71210
// continue ;
71208: GO 71138
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71210: LD_ADDR_VAR 0 9
71214: PUSH
71215: LD_VAR 0 12
71219: PUSH
71220: LD_INT 1
71222: ARRAY
71223: PPUSH
71224: LD_VAR 0 12
71228: PUSH
71229: LD_INT 2
71231: ARRAY
71232: PPUSH
71233: LD_VAR 0 7
71237: PPUSH
71238: LD_VAR 0 8
71242: PPUSH
71243: CALL_OW 298
71247: ST_TO_ADDR
// if tmp < distance then
71248: LD_VAR 0 9
71252: PUSH
71253: LD_VAR 0 10
71257: LESS
71258: IFFALSE 71280
// begin result := i ;
71260: LD_ADDR_VAR 0 5
71264: PUSH
71265: LD_VAR 0 6
71269: ST_TO_ADDR
// distance := tmp ;
71270: LD_ADDR_VAR 0 10
71274: PUSH
71275: LD_VAR 0 9
71279: ST_TO_ADDR
// end ; end ;
71280: GO 71138
71282: POP
71283: POP
// end ;
71284: LD_VAR 0 5
71288: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71289: LD_INT 0
71291: PPUSH
71292: PPUSH
// if not driver or not IsInUnit ( driver ) then
71293: LD_VAR 0 1
71297: NOT
71298: PUSH
71299: LD_VAR 0 1
71303: PPUSH
71304: CALL_OW 310
71308: NOT
71309: OR
71310: IFFALSE 71314
// exit ;
71312: GO 71404
// vehicle := IsInUnit ( driver ) ;
71314: LD_ADDR_VAR 0 3
71318: PUSH
71319: LD_VAR 0 1
71323: PPUSH
71324: CALL_OW 310
71328: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71329: LD_VAR 0 1
71333: PPUSH
71334: LD_STRING \
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: LD_STRING E
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_VAR 0 3
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 0
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PPUSH
71400: CALL_OW 446
// end ;
71404: LD_VAR 0 2
71408: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71409: LD_INT 0
71411: PPUSH
71412: PPUSH
// if not driver or not IsInUnit ( driver ) then
71413: LD_VAR 0 1
71417: NOT
71418: PUSH
71419: LD_VAR 0 1
71423: PPUSH
71424: CALL_OW 310
71428: NOT
71429: OR
71430: IFFALSE 71434
// exit ;
71432: GO 71524
// vehicle := IsInUnit ( driver ) ;
71434: LD_ADDR_VAR 0 3
71438: PUSH
71439: LD_VAR 0 1
71443: PPUSH
71444: CALL_OW 310
71448: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71449: LD_VAR 0 1
71453: PPUSH
71454: LD_STRING \
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: LD_STRING E
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: LD_VAR 0 3
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: LD_INT 0
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PPUSH
71520: CALL_OW 447
// end ;
71524: LD_VAR 0 2
71528: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71529: LD_INT 0
71531: PPUSH
71532: PPUSH
71533: PPUSH
// tmp := [ ] ;
71534: LD_ADDR_VAR 0 5
71538: PUSH
71539: EMPTY
71540: ST_TO_ADDR
// for i in units do
71541: LD_ADDR_VAR 0 4
71545: PUSH
71546: LD_VAR 0 1
71550: PUSH
71551: FOR_IN
71552: IFFALSE 71590
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71554: LD_ADDR_VAR 0 5
71558: PUSH
71559: LD_VAR 0 5
71563: PPUSH
71564: LD_VAR 0 5
71568: PUSH
71569: LD_INT 1
71571: PLUS
71572: PPUSH
71573: LD_VAR 0 4
71577: PPUSH
71578: CALL_OW 256
71582: PPUSH
71583: CALL_OW 2
71587: ST_TO_ADDR
71588: GO 71551
71590: POP
71591: POP
// if not tmp then
71592: LD_VAR 0 5
71596: NOT
71597: IFFALSE 71601
// exit ;
71599: GO 71649
// if asc then
71601: LD_VAR 0 2
71605: IFFALSE 71629
// result := SortListByListAsc ( units , tmp ) else
71607: LD_ADDR_VAR 0 3
71611: PUSH
71612: LD_VAR 0 1
71616: PPUSH
71617: LD_VAR 0 5
71621: PPUSH
71622: CALL_OW 76
71626: ST_TO_ADDR
71627: GO 71649
// result := SortListByListDesc ( units , tmp ) ;
71629: LD_ADDR_VAR 0 3
71633: PUSH
71634: LD_VAR 0 1
71638: PPUSH
71639: LD_VAR 0 5
71643: PPUSH
71644: CALL_OW 77
71648: ST_TO_ADDR
// end ;
71649: LD_VAR 0 3
71653: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71654: LD_INT 0
71656: PPUSH
71657: PPUSH
// task := GetTaskList ( mech ) ;
71658: LD_ADDR_VAR 0 4
71662: PUSH
71663: LD_VAR 0 1
71667: PPUSH
71668: CALL_OW 437
71672: ST_TO_ADDR
// if not task then
71673: LD_VAR 0 4
71677: NOT
71678: IFFALSE 71682
// exit ;
71680: GO 71724
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71682: LD_ADDR_VAR 0 3
71686: PUSH
71687: LD_VAR 0 4
71691: PUSH
71692: LD_INT 1
71694: ARRAY
71695: PUSH
71696: LD_INT 1
71698: ARRAY
71699: PUSH
71700: LD_STRING r
71702: EQUAL
71703: PUSH
71704: LD_VAR 0 4
71708: PUSH
71709: LD_INT 1
71711: ARRAY
71712: PUSH
71713: LD_INT 4
71715: ARRAY
71716: PUSH
71717: LD_VAR 0 2
71721: EQUAL
71722: AND
71723: ST_TO_ADDR
// end ;
71724: LD_VAR 0 3
71728: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71729: LD_INT 0
71731: PPUSH
// SetDir ( unit , d ) ;
71732: LD_VAR 0 1
71736: PPUSH
71737: LD_VAR 0 4
71741: PPUSH
71742: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71746: LD_VAR 0 1
71750: PPUSH
71751: LD_VAR 0 2
71755: PPUSH
71756: LD_VAR 0 3
71760: PPUSH
71761: LD_VAR 0 5
71765: PPUSH
71766: CALL_OW 48
// end ;
71770: LD_VAR 0 6
71774: RET
// export function ToNaturalNumber ( number ) ; begin
71775: LD_INT 0
71777: PPUSH
// result := number div 1 ;
71778: LD_ADDR_VAR 0 2
71782: PUSH
71783: LD_VAR 0 1
71787: PUSH
71788: LD_INT 1
71790: DIV
71791: ST_TO_ADDR
// if number < 0 then
71792: LD_VAR 0 1
71796: PUSH
71797: LD_INT 0
71799: LESS
71800: IFFALSE 71810
// result := 0 ;
71802: LD_ADDR_VAR 0 2
71806: PUSH
71807: LD_INT 0
71809: ST_TO_ADDR
// end ;
71810: LD_VAR 0 2
71814: RET
// export function SortByClass ( units , class ) ; var un ; begin
71815: LD_INT 0
71817: PPUSH
71818: PPUSH
// if not units or not class then
71819: LD_VAR 0 1
71823: NOT
71824: PUSH
71825: LD_VAR 0 2
71829: NOT
71830: OR
71831: IFFALSE 71835
// exit ;
71833: GO 71930
// result := [ ] ;
71835: LD_ADDR_VAR 0 3
71839: PUSH
71840: EMPTY
71841: ST_TO_ADDR
// for un in units do
71842: LD_ADDR_VAR 0 4
71846: PUSH
71847: LD_VAR 0 1
71851: PUSH
71852: FOR_IN
71853: IFFALSE 71928
// if GetClass ( un ) = class then
71855: LD_VAR 0 4
71859: PPUSH
71860: CALL_OW 257
71864: PUSH
71865: LD_VAR 0 2
71869: EQUAL
71870: IFFALSE 71897
// result := Insert ( result , 1 , un ) else
71872: LD_ADDR_VAR 0 3
71876: PUSH
71877: LD_VAR 0 3
71881: PPUSH
71882: LD_INT 1
71884: PPUSH
71885: LD_VAR 0 4
71889: PPUSH
71890: CALL_OW 2
71894: ST_TO_ADDR
71895: GO 71926
// result := Replace ( result , result + 1 , un ) ;
71897: LD_ADDR_VAR 0 3
71901: PUSH
71902: LD_VAR 0 3
71906: PPUSH
71907: LD_VAR 0 3
71911: PUSH
71912: LD_INT 1
71914: PLUS
71915: PPUSH
71916: LD_VAR 0 4
71920: PPUSH
71921: CALL_OW 1
71925: ST_TO_ADDR
71926: GO 71852
71928: POP
71929: POP
// end ;
71930: LD_VAR 0 3
71934: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71935: LD_INT 0
71937: PPUSH
71938: PPUSH
71939: PPUSH
71940: PPUSH
71941: PPUSH
71942: PPUSH
71943: PPUSH
// result := [ ] ;
71944: LD_ADDR_VAR 0 4
71948: PUSH
71949: EMPTY
71950: ST_TO_ADDR
// if x - r < 0 then
71951: LD_VAR 0 1
71955: PUSH
71956: LD_VAR 0 3
71960: MINUS
71961: PUSH
71962: LD_INT 0
71964: LESS
71965: IFFALSE 71977
// min_x := 0 else
71967: LD_ADDR_VAR 0 8
71971: PUSH
71972: LD_INT 0
71974: ST_TO_ADDR
71975: GO 71993
// min_x := x - r ;
71977: LD_ADDR_VAR 0 8
71981: PUSH
71982: LD_VAR 0 1
71986: PUSH
71987: LD_VAR 0 3
71991: MINUS
71992: ST_TO_ADDR
// if y - r < 0 then
71993: LD_VAR 0 2
71997: PUSH
71998: LD_VAR 0 3
72002: MINUS
72003: PUSH
72004: LD_INT 0
72006: LESS
72007: IFFALSE 72019
// min_y := 0 else
72009: LD_ADDR_VAR 0 7
72013: PUSH
72014: LD_INT 0
72016: ST_TO_ADDR
72017: GO 72035
// min_y := y - r ;
72019: LD_ADDR_VAR 0 7
72023: PUSH
72024: LD_VAR 0 2
72028: PUSH
72029: LD_VAR 0 3
72033: MINUS
72034: ST_TO_ADDR
// max_x := x + r ;
72035: LD_ADDR_VAR 0 9
72039: PUSH
72040: LD_VAR 0 1
72044: PUSH
72045: LD_VAR 0 3
72049: PLUS
72050: ST_TO_ADDR
// max_y := y + r ;
72051: LD_ADDR_VAR 0 10
72055: PUSH
72056: LD_VAR 0 2
72060: PUSH
72061: LD_VAR 0 3
72065: PLUS
72066: ST_TO_ADDR
// for _x = min_x to max_x do
72067: LD_ADDR_VAR 0 5
72071: PUSH
72072: DOUBLE
72073: LD_VAR 0 8
72077: DEC
72078: ST_TO_ADDR
72079: LD_VAR 0 9
72083: PUSH
72084: FOR_TO
72085: IFFALSE 72186
// for _y = min_y to max_y do
72087: LD_ADDR_VAR 0 6
72091: PUSH
72092: DOUBLE
72093: LD_VAR 0 7
72097: DEC
72098: ST_TO_ADDR
72099: LD_VAR 0 10
72103: PUSH
72104: FOR_TO
72105: IFFALSE 72182
// begin if not ValidHex ( _x , _y ) then
72107: LD_VAR 0 5
72111: PPUSH
72112: LD_VAR 0 6
72116: PPUSH
72117: CALL_OW 488
72121: NOT
72122: IFFALSE 72126
// continue ;
72124: GO 72104
// if GetResourceTypeXY ( _x , _y ) then
72126: LD_VAR 0 5
72130: PPUSH
72131: LD_VAR 0 6
72135: PPUSH
72136: CALL_OW 283
72140: IFFALSE 72180
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72142: LD_ADDR_VAR 0 4
72146: PUSH
72147: LD_VAR 0 4
72151: PPUSH
72152: LD_VAR 0 4
72156: PUSH
72157: LD_INT 1
72159: PLUS
72160: PPUSH
72161: LD_VAR 0 5
72165: PUSH
72166: LD_VAR 0 6
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PPUSH
72175: CALL_OW 1
72179: ST_TO_ADDR
// end ;
72180: GO 72104
72182: POP
72183: POP
72184: GO 72084
72186: POP
72187: POP
// end ;
72188: LD_VAR 0 4
72192: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72193: LD_INT 0
72195: PPUSH
72196: PPUSH
72197: PPUSH
72198: PPUSH
72199: PPUSH
72200: PPUSH
72201: PPUSH
72202: PPUSH
// if not units then
72203: LD_VAR 0 1
72207: NOT
72208: IFFALSE 72212
// exit ;
72210: GO 72637
// result := UnitFilter ( units , [ f_ok ] ) ;
72212: LD_ADDR_VAR 0 3
72216: PUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: LD_INT 50
72224: PUSH
72225: EMPTY
72226: LIST
72227: PPUSH
72228: CALL_OW 72
72232: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72233: LD_ADDR_VAR 0 8
72237: PUSH
72238: LD_VAR 0 1
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PPUSH
72247: CALL_OW 255
72251: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72252: LD_ADDR_VAR 0 10
72256: PUSH
72257: LD_INT 29
72259: PUSH
72260: LD_EXP 134
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: ST_TO_ADDR
// if not result then
72269: LD_VAR 0 3
72273: NOT
72274: IFFALSE 72278
// exit ;
72276: GO 72637
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72278: LD_ADDR_VAR 0 5
72282: PUSH
72283: LD_INT 81
72285: PUSH
72286: LD_VAR 0 8
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PPUSH
72295: CALL_OW 69
72299: ST_TO_ADDR
// for i in result do
72300: LD_ADDR_VAR 0 4
72304: PUSH
72305: LD_VAR 0 3
72309: PUSH
72310: FOR_IN
72311: IFFALSE 72635
// begin tag := GetTag ( i ) + 1 ;
72313: LD_ADDR_VAR 0 9
72317: PUSH
72318: LD_VAR 0 4
72322: PPUSH
72323: CALL_OW 110
72327: PUSH
72328: LD_INT 1
72330: PLUS
72331: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72332: LD_ADDR_VAR 0 7
72336: PUSH
72337: LD_VAR 0 4
72341: PPUSH
72342: CALL_OW 250
72346: PPUSH
72347: LD_VAR 0 4
72351: PPUSH
72352: CALL_OW 251
72356: PPUSH
72357: LD_INT 6
72359: PPUSH
72360: CALL 71935 0 3
72364: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72365: LD_VAR 0 7
72369: PUSH
72370: LD_VAR 0 4
72374: PPUSH
72375: CALL_OW 264
72379: PUSH
72380: LD_VAR 0 10
72384: IN
72385: NOT
72386: AND
72387: IFFALSE 72426
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72389: LD_VAR 0 4
72393: PPUSH
72394: LD_VAR 0 7
72398: PUSH
72399: LD_INT 1
72401: ARRAY
72402: PUSH
72403: LD_INT 1
72405: ARRAY
72406: PPUSH
72407: LD_VAR 0 7
72411: PUSH
72412: LD_INT 1
72414: ARRAY
72415: PUSH
72416: LD_INT 2
72418: ARRAY
72419: PPUSH
72420: CALL_OW 116
72424: GO 72633
// if path > tag then
72426: LD_VAR 0 2
72430: PUSH
72431: LD_VAR 0 9
72435: GREATER
72436: IFFALSE 72603
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
72438: LD_ADDR_VAR 0 6
72442: PUSH
72443: LD_VAR 0 5
72447: PPUSH
72448: LD_INT 91
72450: PUSH
72451: LD_VAR 0 4
72455: PUSH
72456: LD_INT 12
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: PPUSH
72464: CALL_OW 72
72468: ST_TO_ADDR
// if nearEnemy then
72469: LD_VAR 0 6
72473: IFFALSE 72501
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72475: LD_VAR 0 4
72479: PPUSH
72480: LD_VAR 0 6
72484: PPUSH
72485: LD_VAR 0 4
72489: PPUSH
72490: CALL_OW 74
72494: PPUSH
72495: CALL_OW 115
72499: GO 72601
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72501: LD_VAR 0 4
72505: PPUSH
72506: LD_VAR 0 2
72510: PUSH
72511: LD_VAR 0 9
72515: ARRAY
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 2
72525: PUSH
72526: LD_VAR 0 9
72530: ARRAY
72531: PUSH
72532: LD_INT 2
72534: ARRAY
72535: PPUSH
72536: CALL_OW 297
72540: PUSH
72541: LD_INT 6
72543: GREATER
72544: IFFALSE 72587
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72546: LD_VAR 0 4
72550: PPUSH
72551: LD_VAR 0 2
72555: PUSH
72556: LD_VAR 0 9
72560: ARRAY
72561: PUSH
72562: LD_INT 1
72564: ARRAY
72565: PPUSH
72566: LD_VAR 0 2
72570: PUSH
72571: LD_VAR 0 9
72575: ARRAY
72576: PUSH
72577: LD_INT 2
72579: ARRAY
72580: PPUSH
72581: CALL_OW 114
72585: GO 72601
// SetTag ( i , tag ) ;
72587: LD_VAR 0 4
72591: PPUSH
72592: LD_VAR 0 9
72596: PPUSH
72597: CALL_OW 109
// end else
72601: GO 72633
// if enemy then
72603: LD_VAR 0 5
72607: IFFALSE 72633
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72609: LD_VAR 0 4
72613: PPUSH
72614: LD_VAR 0 5
72618: PPUSH
72619: LD_VAR 0 4
72623: PPUSH
72624: CALL_OW 74
72628: PPUSH
72629: CALL_OW 115
// end ;
72633: GO 72310
72635: POP
72636: POP
// end ;
72637: LD_VAR 0 3
72641: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72642: LD_INT 0
72644: PPUSH
72645: PPUSH
72646: PPUSH
// if not unit or IsInUnit ( unit ) then
72647: LD_VAR 0 1
72651: NOT
72652: PUSH
72653: LD_VAR 0 1
72657: PPUSH
72658: CALL_OW 310
72662: OR
72663: IFFALSE 72667
// exit ;
72665: GO 72758
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72667: LD_ADDR_VAR 0 4
72671: PUSH
72672: LD_VAR 0 1
72676: PPUSH
72677: CALL_OW 250
72681: PPUSH
72682: LD_VAR 0 2
72686: PPUSH
72687: LD_INT 1
72689: PPUSH
72690: CALL_OW 272
72694: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72695: LD_ADDR_VAR 0 5
72699: PUSH
72700: LD_VAR 0 1
72704: PPUSH
72705: CALL_OW 251
72709: PPUSH
72710: LD_VAR 0 2
72714: PPUSH
72715: LD_INT 1
72717: PPUSH
72718: CALL_OW 273
72722: ST_TO_ADDR
// if ValidHex ( x , y ) then
72723: LD_VAR 0 4
72727: PPUSH
72728: LD_VAR 0 5
72732: PPUSH
72733: CALL_OW 488
72737: IFFALSE 72758
// ComTurnXY ( unit , x , y ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 4
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: CALL_OW 118
// end ;
72758: LD_VAR 0 3
72762: RET
