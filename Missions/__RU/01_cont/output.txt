// starting begin ResetFog ;
   0: CALL_OW 335
// Triggers ;
   4: CALL 21 0 0
// PrepareAliance ;
   8: CALL 37 0 0
// VehicleXCombatFunction ;
  12: CALL 589 0 0
// StartMission ;
  16: CALL 918 0 0
// end ;
  20: END
// export Main_Obj , event ; function Triggers ; begin
  21: LD_INT 0
  23: PPUSH
// Main_Obj = false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// end ; end_of_file
  32: LD_VAR 0 1
  36: RET
// export gos , tim , john , robert , lee , kir ; export function PrepareAliance ; begin
  37: LD_INT 0
  39: PPUSH
// uc_side = 7 ;
  40: LD_ADDR_OWVAR 20
  44: PUSH
  45: LD_INT 7
  47: ST_TO_ADDR
// uc_nation = nation_russian ;
  48: LD_ADDR_OWVAR 21
  52: PUSH
  53: LD_INT 3
  55: ST_TO_ADDR
// hc_gallery = sandal ;
  56: LD_ADDR_OWVAR 33
  60: PUSH
  61: LD_STRING sandal
  63: ST_TO_ADDR
// hc_name = Prof. Gossudarov ;
  64: LD_ADDR_OWVAR 26
  68: PUSH
  69: LD_STRING Prof. Gossudarov
  71: ST_TO_ADDR
// hc_face_number = 2 ;
  72: LD_ADDR_OWVAR 34
  76: PUSH
  77: LD_INT 2
  79: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
  80: LD_ADDR_OWVAR 29
  84: PUSH
  85: LD_INT 9
  87: PPUSH
  88: LD_INT 11
  90: PPUSH
  91: CALL_OW 12
  95: PUSH
  96: LD_INT 10
  98: PPUSH
  99: LD_INT 12
 101: PPUSH
 102: CALL_OW 12
 106: PUSH
 107: EMPTY
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// hc_skills = [ 10 , 10 , 10 , 10 ] ;
 111: LD_ADDR_OWVAR 31
 115: PUSH
 116: LD_INT 10
 118: PUSH
 119: LD_INT 10
 121: PUSH
 122: LD_INT 10
 124: PUSH
 125: LD_INT 10
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: LIST
 132: LIST
 133: ST_TO_ADDR
// hc_sex = sex_male ;
 134: LD_ADDR_OWVAR 27
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// hc_class = 4 ;
 142: LD_ADDR_OWVAR 28
 146: PUSH
 147: LD_INT 4
 149: ST_TO_ADDR
// gos := CreateHuman ;
 150: LD_ADDR_EXP 3
 154: PUSH
 155: CALL_OW 44
 159: ST_TO_ADDR
// hc_gallery = sandal ;
 160: LD_ADDR_OWVAR 33
 164: PUSH
 165: LD_STRING sandal
 167: ST_TO_ADDR
// hc_name = Grigori Timelkov ;
 168: LD_ADDR_OWVAR 26
 172: PUSH
 173: LD_STRING Grigori Timelkov
 175: ST_TO_ADDR
// hc_face_number = 1 ;
 176: LD_ADDR_OWVAR 34
 180: PUSH
 181: LD_INT 1
 183: ST_TO_ADDR
// hc_attr = [ 10 , 11 ] ;
 184: LD_ADDR_OWVAR 29
 188: PUSH
 189: LD_INT 10
 191: PUSH
 192: LD_INT 11
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 8 , 4 ] ;
 199: LD_ADDR_OWVAR 31
 203: PUSH
 204: LD_INT 10
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 4
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: ST_TO_ADDR
// hc_sex = sex_male ;
 222: LD_ADDR_OWVAR 27
 226: PUSH
 227: LD_INT 1
 229: ST_TO_ADDR
// hc_class = class_bazooker ;
 230: LD_ADDR_OWVAR 28
 234: PUSH
 235: LD_INT 9
 237: ST_TO_ADDR
// hc_importance := 100 ;
 238: LD_ADDR_OWVAR 32
 242: PUSH
 243: LD_INT 100
 245: ST_TO_ADDR
// tim := CreateHuman ;
 246: LD_ADDR_EXP 4
 250: PUSH
 251: CALL_OW 44
 255: ST_TO_ADDR
// PlaceHumanInUnit ( tim , veh2 ) ;
 256: LD_EXP 4
 260: PPUSH
 261: LD_INT 48
 263: PPUSH
 264: CALL_OW 52
// hc_importance := 20 ;
 268: LD_ADDR_OWVAR 32
 272: PUSH
 273: LD_INT 20
 275: ST_TO_ADDR
// hc_gallery = sandal ;
 276: LD_ADDR_OWVAR 33
 280: PUSH
 281: LD_STRING sandal
 283: ST_TO_ADDR
// hc_name = Jelena Kirlienkova ;
 284: LD_ADDR_OWVAR 26
 288: PUSH
 289: LD_STRING Jelena Kirlienkova
 291: ST_TO_ADDR
// hc_face_number = 3 ;
 292: LD_ADDR_OWVAR 34
 296: PUSH
 297: LD_INT 3
 299: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
 300: LD_ADDR_OWVAR 29
 304: PUSH
 305: LD_INT 11
 307: PUSH
 308: LD_INT 10
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// hc_skills = [ 5 , 7 , 7 , 10 ] ;
 315: LD_ADDR_OWVAR 31
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: LD_INT 7
 325: PUSH
 326: LD_INT 7
 328: PUSH
 329: LD_INT 10
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: LIST
 336: LIST
 337: ST_TO_ADDR
// hc_sex = sex_female ;
 338: LD_ADDR_OWVAR 27
 342: PUSH
 343: LD_INT 2
 345: ST_TO_ADDR
// hc_class = 4 ;
 346: LD_ADDR_OWVAR 28
 350: PUSH
 351: LD_INT 4
 353: ST_TO_ADDR
// kir := CreateHuman ;
 354: LD_ADDR_EXP 8
 358: PUSH
 359: CALL_OW 44
 363: ST_TO_ADDR
// PlaceHumanInUnit ( kir , veh1 ) ;
 364: LD_EXP 8
 368: PPUSH
 369: LD_INT 54
 371: PPUSH
 372: CALL_OW 52
// uc_nation = nation_american ;
 376: LD_ADDR_OWVAR 21
 380: PUSH
 381: LD_INT 1
 383: ST_TO_ADDR
// hc_gallery = sandal ;
 384: LD_ADDR_OWVAR 33
 388: PUSH
 389: LD_STRING sandal
 391: ST_TO_ADDR
// hc_name = Susana Johnson ;
 392: LD_ADDR_OWVAR 26
 396: PUSH
 397: LD_STRING Susana Johnson
 399: ST_TO_ADDR
// hc_face_number = 5 ;
 400: LD_ADDR_OWVAR 34
 404: PUSH
 405: LD_INT 5
 407: ST_TO_ADDR
// hc_attr = [ 9 , 12 ] ;
 408: LD_ADDR_OWVAR 29
 412: PUSH
 413: LD_INT 9
 415: PUSH
 416: LD_INT 12
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: ST_TO_ADDR
// hc_skills = [ 4 , 5 , 9 , 9 ] ;
 423: LD_ADDR_OWVAR 31
 427: PUSH
 428: LD_INT 4
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: LD_INT 9
 436: PUSH
 437: LD_INT 9
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// hc_sex = sex_female ;
 446: LD_ADDR_OWVAR 27
 450: PUSH
 451: LD_INT 2
 453: ST_TO_ADDR
// hc_class = 3 ;
 454: LD_ADDR_OWVAR 28
 458: PUSH
 459: LD_INT 3
 461: ST_TO_ADDR
// john := CreateHuman ;
 462: LD_ADDR_EXP 5
 466: PUSH
 467: CALL_OW 44
 471: ST_TO_ADDR
// PlaceHumanInUnit ( john , veh4 ) ;
 472: LD_EXP 5
 476: PPUSH
 477: LD_INT 34
 479: PPUSH
 480: CALL_OW 52
// hc_gallery = sandal ;
 484: LD_ADDR_OWVAR 33
 488: PUSH
 489: LD_STRING sandal
 491: ST_TO_ADDR
// hc_name = Edward Lee Jr. ;
 492: LD_ADDR_OWVAR 26
 496: PUSH
 497: LD_STRING Edward Lee Jr.
 499: ST_TO_ADDR
// hc_face_number = 4 ;
 500: LD_ADDR_OWVAR 34
 504: PUSH
 505: LD_INT 4
 507: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
 508: LD_ADDR_OWVAR 29
 512: PUSH
 513: LD_INT 11
 515: PUSH
 516: LD_INT 11
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: ST_TO_ADDR
// hc_skills = [ 5 , 8 , 10 , 6 ] ;
 523: LD_ADDR_OWVAR 31
 527: PUSH
 528: LD_INT 5
 530: PUSH
 531: LD_INT 8
 533: PUSH
 534: LD_INT 10
 536: PUSH
 537: LD_INT 6
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: ST_TO_ADDR
// hc_sex = sex_male ;
 546: LD_ADDR_OWVAR 27
 550: PUSH
 551: LD_INT 1
 553: ST_TO_ADDR
// hc_class = 3 ;
 554: LD_ADDR_OWVAR 28
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// lee := CreateHuman ;
 562: LD_ADDR_EXP 7
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// PlaceHumanInUnit ( lee , veh5 ) ;
 572: LD_EXP 7
 576: PPUSH
 577: LD_INT 56
 579: PPUSH
 580: CALL_OW 52
// end ; end_of_file
 584: LD_VAR 0 1
 588: RET
// export old_side , vx_limit , vx_capture , vx_list ; export function VehicleXCombatFunction ; begin
 589: LD_INT 0
 591: PPUSH
// vx_list = [ ] ;
 592: LD_ADDR_EXP 12
 596: PUSH
 597: EMPTY
 598: ST_TO_ADDR
// vx_limit = 3 ;
 599: LD_ADDR_EXP 10
 603: PUSH
 604: LD_INT 3
 606: ST_TO_ADDR
// vx_capture = 0 ;
 607: LD_ADDR_EXP 11
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$01 do var i , enemy_veh ;
 620: GO 622
 622: DISABLE
 623: LD_INT 0
 625: PPUSH
 626: PPUSH
// begin enable ;
 627: ENABLE
// enemy_veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_computer ] ] ) ;
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 33
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PPUSH
 657: CALL_OW 69
 661: ST_TO_ADDR
// for i in enemy_veh do
 662: LD_ADDR_VAR 0 1
 666: PUSH
 667: LD_VAR 0 2
 671: PUSH
 672: FOR_IN
 673: IFFALSE 788
// begin if GetDistUnits ( vehx , i ) <= 12 and vx_capture < 3 then
 675: LD_INT 37
 677: PPUSH
 678: LD_VAR 0 1
 682: PPUSH
 683: CALL_OW 296
 687: PUSH
 688: LD_INT 12
 690: LESSEQUAL
 691: PUSH
 692: LD_EXP 11
 696: PUSH
 697: LD_INT 3
 699: LESS
 700: AND
 701: IFFALSE 786
// begin old_side = GetSide ( i ) ;
 703: LD_ADDR_EXP 9
 707: PUSH
 708: LD_VAR 0 1
 712: PPUSH
 713: CALL_OW 255
 717: ST_TO_ADDR
// vx_capture = vx_capture + 1 ;
 718: LD_ADDR_EXP 11
 722: PUSH
 723: LD_EXP 11
 727: PUSH
 728: LD_INT 1
 730: PLUS
 731: ST_TO_ADDR
// SetSide ( i , GetSide ( vehx ) ) ;
 732: LD_VAR 0 1
 736: PPUSH
 737: LD_INT 37
 739: PPUSH
 740: CALL_OW 255
 744: PPUSH
 745: CALL_OW 235
// ComStop ( i ) ;
 749: LD_VAR 0 1
 753: PPUSH
 754: CALL_OW 141
// SetUnitDisplayNumber ( vehx , vx_capture ) ;
 758: LD_INT 37
 760: PPUSH
 761: LD_EXP 11
 765: PPUSH
 766: CALL_OW 505
// vx_list = vx_list ^ i ;
 770: LD_ADDR_EXP 12
 774: PUSH
 775: LD_EXP 12
 779: PUSH
 780: LD_VAR 0 1
 784: ADD
 785: ST_TO_ADDR
// end ; end ;
 786: GO 672
 788: POP
 789: POP
// end ;
 790: PPOPN 2
 792: END
// on UnitDestroyed ( un ) do begin if un = vehx then
 793: LD_VAR 0 1
 797: PUSH
 798: LD_INT 37
 800: EQUAL
 801: IFFALSE 817
// begin SetSide ( vx_list , old_side ) ;
 803: LD_EXP 12
 807: PPUSH
 808: LD_EXP 9
 812: PPUSH
 813: CALL_OW 235
// end ; if un in vx_list then
 817: LD_VAR 0 1
 821: PUSH
 822: LD_EXP 12
 826: IN
 827: IFFALSE 875
// begin vx_list = Delete ( vx_list , un ) ;
 829: LD_ADDR_EXP 12
 833: PUSH
 834: LD_EXP 12
 838: PPUSH
 839: LD_VAR 0 1
 843: PPUSH
 844: CALL_OW 3
 848: ST_TO_ADDR
// vx_capture = vx_capture - 1 ;
 849: LD_ADDR_EXP 11
 853: PUSH
 854: LD_EXP 11
 858: PUSH
 859: LD_INT 1
 861: MINUS
 862: ST_TO_ADDR
// SetUnitDisplayNumber ( vehx , vx_capture ) ;
 863: LD_INT 37
 865: PPUSH
 866: LD_EXP 11
 870: PPUSH
 871: CALL_OW 505
// end ; if un in [ tim , lee , john , kir ] then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_EXP 4
 884: PUSH
 885: LD_EXP 7
 889: PUSH
 890: LD_EXP 5
 894: PUSH
 895: LD_EXP 8
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: IN
 906: IFFALSE 915
// begin YouLost ( Dead ) ;
 908: LD_STRING Dead
 910: PPUSH
 911: CALL_OW 104
// end ; end ; end_of_file
 915: PPOPN 1
 917: END
// export function StartMission ; var i ; begin
 918: LD_INT 0
 920: PPUSH
 921: PPUSH
// InGameOn ;
 922: CALL_OW 8
// CenterNowOnXY ( 117 , 111 ) ;
 926: LD_INT 117
 928: PPUSH
 929: LD_INT 111
 931: PPUSH
 932: CALL_OW 86
// music_nat = 1 ;
 936: LD_ADDR_OWVAR 71
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// Say ( lee , DL-1 ) ;
 944: LD_EXP 7
 948: PPUSH
 949: LD_STRING DL-1
 951: PPUSH
 952: CALL_OW 88
// Say ( tim , DT-1 ) ;
 956: LD_EXP 4
 960: PPUSH
 961: LD_STRING DT-1
 963: PPUSH
 964: CALL_OW 88
// Say ( john , DJ-1 ) ;
 968: LD_EXP 5
 972: PPUSH
 973: LD_STRING DJ-1
 975: PPUSH
 976: CALL_OW 88
// Say ( tim , DT-2 ) ;
 980: LD_EXP 4
 984: PPUSH
 985: LD_STRING DT-2
 987: PPUSH
 988: CALL_OW 88
// Say ( kir , DK-1 ) ;
 992: LD_EXP 8
 996: PPUSH
 997: LD_STRING DK-1
 999: PPUSH
1000: CALL_OW 88
// Say ( tim , DT-3 ) ;
1004: LD_EXP 4
1008: PPUSH
1009: LD_STRING DT-3
1011: PPUSH
1012: CALL_OW 88
// InGameOff ;
1016: CALL_OW 9
// ChangeMissionObjectives ( FindRoth ) ;
1020: LD_STRING FindRoth
1022: PPUSH
1023: CALL_OW 337
// end ;
1027: LD_VAR 0 1
1031: RET
// every 0 0$02 trigger IsInArea ( veh2 , are1 ) do
1032: LD_INT 48
1034: PPUSH
1035: LD_INT 6
1037: PPUSH
1038: CALL_OW 308
1042: IFFALSE 1097
1044: GO 1046
1046: DISABLE
// begin CenterOnUnits ( veh2 ) ;
1047: LD_INT 48
1049: PPUSH
1050: CALL_OW 85
// Say ( lee , DL-2 ) ;
1054: LD_EXP 7
1058: PPUSH
1059: LD_STRING DL-2
1061: PPUSH
1062: CALL_OW 88
// Say ( john , DJ-2 ) ;
1066: LD_EXP 5
1070: PPUSH
1071: LD_STRING DJ-2
1073: PPUSH
1074: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
1078: LD_INT 10
1080: PPUSH
1081: CALL_OW 67
// Say ( tim , DT-4 ) ;
1085: LD_EXP 4
1089: PPUSH
1090: LD_STRING DT-4
1092: PPUSH
1093: CALL_OW 88
// end ;
1097: END
// every 0 0$03 trigger IsInArea ( veh2 , are2 ) and FilterUnitsInArea ( are2 , [ f_side , 7 ] ) > 5 do
1098: LD_INT 48
1100: PPUSH
1101: LD_INT 7
1103: PPUSH
1104: CALL_OW 308
1108: PUSH
1109: LD_INT 7
1111: PPUSH
1112: LD_INT 22
1114: PUSH
1115: LD_INT 7
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PPUSH
1122: CALL_OW 70
1126: PUSH
1127: LD_INT 5
1129: GREATER
1130: AND
1131: IFFALSE 1547
1133: GO 1135
1135: DISABLE
// begin InGameOn ;
1136: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 7 ] ) , 56 , 6 ) ;
1140: LD_INT 22
1142: PUSH
1143: LD_INT 7
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 69
1154: PPUSH
1155: LD_INT 56
1157: PPUSH
1158: LD_INT 6
1160: PPUSH
1161: CALL_OW 111
// CenterOnXY ( GetX ( tim ) , GetY ( tim ) ) ;
1165: LD_EXP 4
1169: PPUSH
1170: CALL_OW 250
1174: PPUSH
1175: LD_EXP 4
1179: PPUSH
1180: CALL_OW 251
1184: PPUSH
1185: CALL_OW 84
// Wait ( 0 0$02 ) ;
1189: LD_INT 70
1191: PPUSH
1192: CALL_OW 67
// CenterOnXY ( GetX ( tim ) , GetY ( tim ) ) ;
1196: LD_EXP 4
1200: PPUSH
1201: CALL_OW 250
1205: PPUSH
1206: LD_EXP 4
1210: PPUSH
1211: CALL_OW 251
1215: PPUSH
1216: CALL_OW 84
// Wait ( 0 0$02 ) ;
1220: LD_INT 70
1222: PPUSH
1223: CALL_OW 67
// CenterOnXY ( GetX ( tim ) , GetY ( tim ) ) ;
1227: LD_EXP 4
1231: PPUSH
1232: CALL_OW 250
1236: PPUSH
1237: LD_EXP 4
1241: PPUSH
1242: CALL_OW 251
1246: PPUSH
1247: CALL_OW 84
// Wait ( 0 0$02 ) ;
1251: LD_INT 70
1253: PPUSH
1254: CALL_OW 67
// CenterOnXY ( GetX ( tim ) , GetY ( tim ) ) ;
1258: LD_EXP 4
1262: PPUSH
1263: CALL_OW 250
1267: PPUSH
1268: LD_EXP 4
1272: PPUSH
1273: CALL_OW 251
1277: PPUSH
1278: CALL_OW 84
// Wait ( 0 0$02 ) ;
1282: LD_INT 70
1284: PPUSH
1285: CALL_OW 67
// CenterOnXY ( 53 , 5 ) ;
1289: LD_INT 53
1291: PPUSH
1292: LD_INT 5
1294: PPUSH
1295: CALL_OW 84
// Say ( tim , DT-5 ) ;
1299: LD_EXP 4
1303: PPUSH
1304: LD_STRING DT-5
1306: PPUSH
1307: CALL_OW 88
// Say ( lee , DL-3 ) ;
1311: LD_EXP 7
1315: PPUSH
1316: LD_STRING DL-3
1318: PPUSH
1319: CALL_OW 88
// Say ( john , DJ-3 ) ;
1323: LD_EXP 5
1327: PPUSH
1328: LD_STRING DJ-3
1330: PPUSH
1331: CALL_OW 88
// Say ( lee , DL-4 ) ;
1335: LD_EXP 7
1339: PPUSH
1340: LD_STRING DL-4
1342: PPUSH
1343: CALL_OW 88
// Say ( john , DJ-4 ) ;
1347: LD_EXP 5
1351: PPUSH
1352: LD_STRING DJ-4
1354: PPUSH
1355: CALL_OW 88
// Say ( lee , DL-5 ) ;
1359: LD_EXP 7
1363: PPUSH
1364: LD_STRING DL-5
1366: PPUSH
1367: CALL_OW 88
// Say ( john , DJ-5 ) ;
1371: LD_EXP 5
1375: PPUSH
1376: LD_STRING DJ-5
1378: PPUSH
1379: CALL_OW 88
// Say ( tim , DT-6 ) ;
1383: LD_EXP 4
1387: PPUSH
1388: LD_STRING DT-6
1390: PPUSH
1391: CALL_OW 88
// Say ( kir , DK-2 ) ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_STRING DK-2
1402: PPUSH
1403: CALL_OW 88
// PrepareUSTanks ;
1407: CALL 1840 0 0
// ChangeSideFog ( 7 , 1 ) ;
1411: LD_INT 7
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: CALL_OW 343
// CenterNowOnXY ( 35 , 33 ) ;
1421: LD_INT 35
1423: PPUSH
1424: LD_INT 33
1426: PPUSH
1427: CALL_OW 86
// Wait ( 0 0$1.2 ) ;
1431: LD_INT 42
1433: PPUSH
1434: CALL_OW 67
// CenterOnXY ( 89 , 8 ) ;
1438: LD_INT 89
1440: PPUSH
1441: LD_INT 8
1443: PPUSH
1444: CALL_OW 84
// Wait ( 0 0$1.1 ) ;
1448: LD_INT 39
1450: PPUSH
1451: CALL_OW 67
// CenterOnXY ( 53 , 5 ) ;
1455: LD_INT 53
1457: PPUSH
1458: LD_INT 5
1460: PPUSH
1461: CALL_OW 84
// Say ( tim , DT-7 ) ;
1465: LD_EXP 4
1469: PPUSH
1470: LD_STRING DT-7
1472: PPUSH
1473: CALL_OW 88
// SayRadio ( ussold , DUs-1 ) ;
1477: LD_EXP 14
1481: PPUSH
1482: LD_STRING DUs-1
1484: PPUSH
1485: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
1489: LD_INT 10
1491: PPUSH
1492: CALL_OW 67
// SetLives ( trap , 0 ) ;
1496: LD_INT 13
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 234
// Say ( tim , DT-8 ) ;
1506: LD_EXP 4
1510: PPUSH
1511: LD_STRING DT-8
1513: PPUSH
1514: CALL_OW 88
// ChangeSideFog ( 7 , 7 ) ;
1518: LD_INT 7
1520: PPUSH
1521: LD_INT 7
1523: PPUSH
1524: CALL_OW 343
// InGameOff ;
1528: CALL_OW 9
// ChangeMissionObjectives ( LeaveMap ) ;
1532: LD_STRING LeaveMap
1534: PPUSH
1535: CALL_OW 337
// Main_Obj = true ;
1539: LD_ADDR_EXP 1
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// end ;
1547: END
// export counter ; every 1 do
1548: GO 1550
1550: DISABLE
// counter := 0 ;
1551: LD_ADDR_EXP 13
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
1559: END
// every 0 0$01 trigger Main_Obj do
1560: LD_EXP 1
1564: IFFALSE 1584
1566: GO 1568
1568: DISABLE
// begin enable ;
1569: ENABLE
// counter := counter + 1 ;
1570: LD_ADDR_EXP 13
1574: PUSH
1575: LD_EXP 13
1579: PUSH
1580: LD_INT 1
1582: PLUS
1583: ST_TO_ADDR
// end ;
1584: END
// every 0 0$01 trigger FilterUnitsInArea ( spawnarea , [ f_side , 7 ] ) > 4 and Main_Obj do
1585: LD_INT 4
1587: PPUSH
1588: LD_INT 22
1590: PUSH
1591: LD_INT 7
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PPUSH
1598: CALL_OW 70
1602: PUSH
1603: LD_INT 4
1605: GREATER
1606: PUSH
1607: LD_EXP 1
1611: AND
1612: IFFALSE 1839
1614: GO 1616
1616: DISABLE
// begin DialogueOn ;
1617: CALL_OW 6
// InGameOn ;
1621: CALL_OW 8
// Say ( tim , DT-Run ) ;
1625: LD_EXP 4
1629: PPUSH
1630: LD_STRING DT-Run
1632: PPUSH
1633: CALL_OW 88
// AddMedal ( med , 1 ) ;
1637: LD_STRING med
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL_OW 101
// if counter <= [ 150 , 100 , 80 ] [ Difficulty ] then
1647: LD_EXP 13
1651: PUSH
1652: LD_INT 150
1654: PUSH
1655: LD_INT 100
1657: PUSH
1658: LD_INT 80
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PUSH
1666: LD_OWVAR 67
1670: ARRAY
1671: LESSEQUAL
1672: IFFALSE 1686
// AddMedal ( counter , 1 ) else
1674: LD_STRING counter
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 101
1684: GO 1697
// AddMedal ( counter , - 1 ) ;
1686: LD_STRING counter
1688: PPUSH
1689: LD_INT 1
1691: NEG
1692: PPUSH
1693: CALL_OW 101
// if IsLive ( vehx ) then
1697: LD_INT 37
1699: PPUSH
1700: CALL_OW 300
1704: IFFALSE 1728
// begin SaveVariable ( 1 , hackveh-save ) ;
1706: LD_INT 1
1708: PPUSH
1709: LD_STRING hackveh-save
1711: PPUSH
1712: CALL_OW 39
// AddMedal ( hack , 1 ) ;
1716: LD_STRING hack
1718: PPUSH
1719: LD_INT 1
1721: PPUSH
1722: CALL_OW 101
// end else
1726: GO 1739
// AddMedal ( hack , - 1 ) ;
1728: LD_STRING hack
1730: PPUSH
1731: LD_INT 1
1733: NEG
1734: PPUSH
1735: CALL_OW 101
// GiveMedals ( MAIN ) ;
1739: LD_STRING MAIN
1741: PPUSH
1742: CALL_OW 102
// RewardPeople ( [ tim , kir , john , lee ] ) ;
1746: LD_EXP 4
1750: PUSH
1751: LD_EXP 8
1755: PUSH
1756: LD_EXP 5
1760: PUSH
1761: LD_EXP 7
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 43
// SaveCharacters ( tim , tim ) ;
1776: LD_EXP 4
1780: PPUSH
1781: LD_STRING tim
1783: PPUSH
1784: CALL_OW 38
// SaveCharacters ( kir , kir ) ;
1788: LD_EXP 8
1792: PPUSH
1793: LD_STRING kir
1795: PPUSH
1796: CALL_OW 38
// SaveCharacters ( john , john ) ;
1800: LD_EXP 5
1804: PPUSH
1805: LD_STRING john
1807: PPUSH
1808: CALL_OW 38
// SaveCharacters ( lee , lee ) ;
1812: LD_EXP 7
1816: PPUSH
1817: LD_STRING lee
1819: PPUSH
1820: CALL_OW 38
// YouWin ;
1824: CALL_OW 103
// SetNextMission ( 1 ) ;
1828: LD_INT 1
1830: PPUSH
1831: CALL_OW 536
// InGameOff ;
1835: CALL_OW 9
// end ; end_of_file
1839: END
// export ussold ; export function PrepareUSTanks ; var i , veh , force ; begin
1840: LD_INT 0
1842: PPUSH
1843: PPUSH
1844: PPUSH
1845: PPUSH
// uc_side = 1 ;
1846: LD_ADDR_OWVAR 20
1850: PUSH
1851: LD_INT 1
1853: ST_TO_ADDR
// uc_nation = 1 ;
1854: LD_ADDR_OWVAR 21
1858: PUSH
1859: LD_INT 1
1861: ST_TO_ADDR
// hc_name =  ;
1862: LD_ADDR_OWVAR 26
1866: PUSH
1867: LD_STRING 
1869: ST_TO_ADDR
// hc_gallery =  ;
1870: LD_ADDR_OWVAR 33
1874: PUSH
1875: LD_STRING 
1877: ST_TO_ADDR
// hc_class = 1 ;
1878: LD_ADDR_OWVAR 28
1882: PUSH
1883: LD_INT 1
1885: ST_TO_ADDR
// hc_importance = 0 ;
1886: LD_ADDR_OWVAR 32
1890: PUSH
1891: LD_INT 0
1893: ST_TO_ADDR
// ussold = CreateHuman ;
1894: LD_ADDR_EXP 14
1898: PUSH
1899: CALL_OW 44
1903: ST_TO_ADDR
// force = [ ] ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: EMPTY
1910: ST_TO_ADDR
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1934
// SetTech ( tech_comp3 , 1 , state_researched ) ;
1921: LD_INT 59
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: LD_INT 2
1929: PPUSH
1930: CALL_OW 322
// if Difficulty > 2 then
1934: LD_OWVAR 67
1938: PUSH
1939: LD_INT 2
1941: GREATER
1942: IFFALSE 1957
// SetTech ( tech_weap3 , 1 , state_researched ) ;
1944: LD_INT 53
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 2
1952: PPUSH
1953: CALL_OW 322
// for i = 1 to 10 + [ 0 , 2 , 4 ] [ Difficulty ] do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 10
1969: PUSH
1970: LD_INT 0
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: LD_INT 4
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_OWVAR 67
1988: ARRAY
1989: PLUS
1990: PUSH
1991: FOR_TO
1992: IFFALSE 2142
// begin vc_chassis = [ us_medium_wheeled , us_morphling , us_morphling ] [ Difficulty ] ;
1994: LD_ADDR_OWVAR 37
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: LD_INT 5
2004: PUSH
2005: LD_INT 5
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_OWVAR 67
2017: ARRAY
2018: ST_TO_ADDR
// vc_engine = engine_siberite ;
2019: LD_ADDR_OWVAR 39
2023: PUSH
2024: LD_INT 3
2026: ST_TO_ADDR
// vc_control = control_computer ;
2027: LD_ADDR_OWVAR 38
2031: PUSH
2032: LD_INT 3
2034: ST_TO_ADDR
// vc_weapon = [ us_laser , us_laser , us_heavy_gun ] [ Difficulty ] ;
2035: LD_ADDR_OWVAR 40
2039: PUSH
2040: LD_INT 9
2042: PUSH
2043: LD_INT 9
2045: PUSH
2046: LD_INT 6
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_OWVAR 67
2058: ARRAY
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// if i <= 6 then
2070: LD_VAR 0 2
2074: PUSH
2075: LD_INT 6
2077: LESSEQUAL
2078: IFFALSE 2097
// PlaceUnitArea ( veh , amspawn , false ) else
2080: LD_VAR 0 3
2084: PPUSH
2085: LD_INT 5
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL_OW 49
2095: GO 2124
// begin SetDir ( veh , 4 ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: CALL_OW 233
// PlaceUnitArea ( veh , amspawn4 , false ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 10
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: CALL_OW 49
// end ; force = force ^ veh ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: LD_VAR 0 4
2133: PUSH
2134: LD_VAR 0 3
2138: ADD
2139: ST_TO_ADDR
// end ;
2140: GO 1991
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// every 0 0$02 trigger Main_Obj do var un ;
2149: LD_EXP 1
2153: IFFALSE 2237
2155: GO 2157
2157: DISABLE
2158: LD_INT 0
2160: PPUSH
// begin enable ;
2161: ENABLE
// for un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
2162: LD_ADDR_VAR 0 1
2166: PUSH
2167: LD_INT 22
2169: PUSH
2170: LD_INT 1
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 21
2179: PUSH
2180: LD_INT 2
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PPUSH
2191: CALL_OW 69
2195: PUSH
2196: FOR_IN
2197: IFFALSE 2235
// begin ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , un ) ) ;
2199: LD_VAR 0 1
2203: PPUSH
2204: LD_INT 22
2206: PUSH
2207: LD_INT 7
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 69
2218: PPUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: CALL_OW 74
2228: PPUSH
2229: CALL_OW 115
// end ;
2233: GO 2196
2235: POP
2236: POP
// end ;
2237: PPOPN 1
2239: END
// every 0 0$45 trigger Main_Obj do var veh , i ;
2240: LD_EXP 1
2244: IFFALSE 2440
2246: GO 2248
2248: DISABLE
2249: LD_INT 0
2251: PPUSH
2252: PPUSH
// begin enable ;
2253: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$11 ) ) ;
2254: LD_INT 35
2256: PPUSH
2257: LD_INT 385
2259: PPUSH
2260: CALL_OW 12
2264: PPUSH
2265: CALL_OW 67
// for i = 1 to 4 + [ 0 , 2 , 3 ] [ Difficulty ] do
2269: LD_ADDR_VAR 0 2
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_INT 4
2281: PUSH
2282: LD_INT 0
2284: PUSH
2285: LD_INT 2
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: LD_OWVAR 67
2300: ARRAY
2301: PLUS
2302: PUSH
2303: FOR_TO
2304: IFFALSE 2438
// begin vc_chassis = [ us_heavy_tracked , us_morphling , us_morphling ] [ Rand ( 1 , 3 ) ] ;
2306: LD_ADDR_OWVAR 37
2310: PUSH
2311: LD_INT 4
2313: PUSH
2314: LD_INT 5
2316: PUSH
2317: LD_INT 5
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 3
2330: PPUSH
2331: CALL_OW 12
2335: ARRAY
2336: ST_TO_ADDR
// vc_engine = engine_siberite ;
2337: LD_ADDR_OWVAR 39
2341: PUSH
2342: LD_INT 3
2344: ST_TO_ADDR
// vc_control = control_computer ;
2345: LD_ADDR_OWVAR 38
2349: PUSH
2350: LD_INT 3
2352: ST_TO_ADDR
// vc_weapon = [ us_laser , us_heavy_gun , us_double_laser , us_rocket_launcher ] [ Rand ( 1 , 4 ) ] ;
2353: LD_ADDR_OWVAR 40
2357: PUSH
2358: LD_INT 9
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: LD_INT 10
2366: PUSH
2367: LD_INT 7
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 4
2381: PPUSH
2382: CALL_OW 12
2386: ARRAY
2387: ST_TO_ADDR
// veh = CreateVehicle ;
2388: LD_ADDR_VAR 0 1
2392: PUSH
2393: CALL_OW 45
2397: ST_TO_ADDR
// PlaceUnitArea ( veh , [ spawnarea , amspawn2 , amspawn3 ] [ Rand ( 1 , 3 ) ] , false ) ;
2398: LD_VAR 0 1
2402: PPUSH
2403: LD_INT 4
2405: PUSH
2406: LD_INT 8
2408: PUSH
2409: LD_INT 9
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 1
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: CALL_OW 12
2427: ARRAY
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 49
// end ;
2436: GO 2303
2438: POP
2439: POP
// end ;
2440: PPOPN 2
2442: END
