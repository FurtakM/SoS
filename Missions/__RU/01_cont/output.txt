// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareNature ;
  24: CALL 12100 0 0
// PrepareRussian ;
  28: CALL 11398 0 0
// PrepareAmericans ;
  32: CALL 10971 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 24
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 26
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 27
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 30
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 31
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 32
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 33
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 34
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 35
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 36
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 37
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 38
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 29
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 34
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 34
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 43
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 43
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 43
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 43
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 43
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 43
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 43
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 43
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 43
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 43
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 43
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 43
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1911
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 43
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 43
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1911
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PPUSH
1612: LD_EXP 10
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_EXP 10
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL_OW 73
1634: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_EXP 10
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: LD_EXP 10
1653: PUSH
1654: LD_INT 2
1656: ARRAY
1657: PPUSH
1658: CALL_OW 111
// case nearUnit of Burlak :
1662: LD_VAR 0 1
1666: PUSH
1667: LD_EXP 43
1671: DOUBLE
1672: EQUAL
1673: IFTRUE 1677
1675: GO 1692
1677: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1678: LD_EXP 43
1682: PPUSH
1683: LD_STRING D3-Bur-2a
1685: PPUSH
1686: CALL_OW 88
1690: GO 1784
1692: LD_EXP 48
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1702
1700: GO 1717
1702: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1703: LD_EXP 48
1707: PPUSH
1708: LD_STRING D2a-Bel-1
1710: PPUSH
1711: CALL_OW 88
1715: GO 1784
1717: LD_EXP 50
1721: DOUBLE
1722: EQUAL
1723: IFTRUE 1727
1725: GO 1742
1727: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1728: LD_EXP 50
1732: PPUSH
1733: LD_STRING D2a-Kir-1
1735: PPUSH
1736: CALL_OW 88
1740: GO 1784
1742: POP
// if GetSex ( nearUnit ) = sex_male then
1743: LD_VAR 0 1
1747: PPUSH
1748: CALL_OW 258
1752: PUSH
1753: LD_INT 1
1755: EQUAL
1756: IFFALSE 1772
// Say ( nearUnit , D2a-RSol1-1 ) else
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_STRING D2a-RSol1-1
1765: PPUSH
1766: CALL_OW 88
1770: GO 1784
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1772: LD_VAR 0 1
1776: PPUSH
1777: LD_STRING D2a-RFSol1-1
1779: PPUSH
1780: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1784: LD_EXP 51
1788: PPUSH
1789: CALL_OW 255
1793: PUSH
1794: LD_INT 3
1796: EQUAL
1797: PUSH
1798: LD_EXP 51
1802: PPUSH
1803: CALL_OW 302
1807: AND
1808: IFFALSE 1822
// Say ( Gnyevko , D2a-Gny-1 ) ;
1810: LD_EXP 51
1814: PPUSH
1815: LD_STRING D2a-Gny-1
1817: PPUSH
1818: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1822: LD_EXP 9
1826: PUSH
1827: LD_EXP 8
1831: EQUAL
1832: IFFALSE 1846
// Say ( Burlak , D3-Bur-2 ) ;
1834: LD_EXP 43
1838: PPUSH
1839: LD_STRING D3-Bur-2
1841: PPUSH
1842: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1846: LD_EXP 51
1850: PPUSH
1851: CALL_OW 255
1855: PUSH
1856: LD_INT 8
1858: EQUAL
1859: IFFALSE 1911
// begin Say ( Burlak , D12-Bur-1 ) ;
1861: LD_EXP 43
1865: PPUSH
1866: LD_STRING D12-Bur-1
1868: PPUSH
1869: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1873: LD_EXP 48
1877: PPUSH
1878: CALL_OW 255
1882: PUSH
1883: LD_INT 3
1885: EQUAL
1886: PUSH
1887: LD_EXP 48
1891: PPUSH
1892: CALL_OW 302
1896: AND
1897: IFFALSE 1911
// Say ( Belkov , D12-Bel-2 ) ;
1899: LD_EXP 48
1903: PPUSH
1904: LD_STRING D12-Bel-2
1906: PPUSH
1907: CALL_OW 88
// end ; end ; end ;
1911: PPOPN 1
1913: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1914: LD_INT 3
1916: PPUSH
1917: LD_EXP 51
1921: PPUSH
1922: CALL_OW 292
1926: IFFALSE 2464
1928: GO 1930
1930: DISABLE
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1935: LD_EXP 51
1939: PPUSH
1940: LD_EXP 36
1944: PPUSH
1945: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1949: LD_EXP 51
1953: PPUSH
1954: CALL_OW 87
// DialogueOn ;
1958: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 3
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 51
2000: PPUSH
2001: CALL_OW 74
2005: ST_TO_ADDR
// if nearUnit = Burlak then
2006: LD_VAR 0 1
2010: PUSH
2011: LD_EXP 43
2015: EQUAL
2016: IFFALSE 2334
// begin Say ( Burlak , D3-Bur-1 ) ;
2018: LD_EXP 43
2022: PPUSH
2023: LD_STRING D3-Bur-1
2025: PPUSH
2026: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2030: LD_EXP 51
2034: PPUSH
2035: LD_STRING D3-Gny-1
2037: PPUSH
2038: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2042: LD_EXP 43
2046: PPUSH
2047: LD_STRING D3-Bur-2b
2049: PPUSH
2050: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 21
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PPUSH
2078: CALL_OW 69
2082: PUSH
2083: LD_INT 1
2085: EQUAL
2086: PUSH
2087: LD_EXP 13
2091: NOT
2092: AND
2093: IFFALSE 2145
// begin Say ( Burlak , D3-Bur-2c ) ;
2095: LD_EXP 43
2099: PPUSH
2100: LD_STRING D3-Bur-2c
2102: PPUSH
2103: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2107: LD_EXP 51
2111: PPUSH
2112: LD_STRING D3-Gny-2
2114: PPUSH
2115: CALL_OW 88
// DialogueOff ;
2119: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2123: LD_EXP 51
2127: PPUSH
2128: LD_INT 3
2130: PPUSH
2131: CALL_OW 235
// gnyevkoSaved = true ;
2135: LD_ADDR_EXP 11
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// exit ;
2143: GO 2464
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2145: LD_INT 22
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 69
2173: PUSH
2174: LD_INT 1
2176: GREATER
2177: PUSH
2178: LD_EXP 13
2182: OR
2183: PUSH
2184: LD_EXP 21
2188: NOT
2189: AND
2190: IFFALSE 2242
// begin Say ( Burlak , D3-Bur-2d ) ;
2192: LD_EXP 43
2196: PPUSH
2197: LD_STRING D3-Bur-2d
2199: PPUSH
2200: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2204: LD_EXP 51
2208: PPUSH
2209: LD_STRING D3-Gny-2
2211: PPUSH
2212: CALL_OW 88
// DialogueOff ;
2216: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2220: LD_EXP 51
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: CALL_OW 235
// gnyevkoSaved = true ;
2232: LD_ADDR_EXP 11
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// exit ;
2240: GO 2464
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: LD_INT 1
2273: GREATER
2274: PUSH
2275: LD_EXP 21
2279: AND
2280: IFFALSE 2332
// begin Say ( Burlak , D3-Bur-2e ) ;
2282: LD_EXP 43
2286: PPUSH
2287: LD_STRING D3-Bur-2e
2289: PPUSH
2290: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2294: LD_EXP 51
2298: PPUSH
2299: LD_STRING D3-Gny-2
2301: PPUSH
2302: CALL_OW 88
// DialogueOff ;
2306: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2310: LD_EXP 51
2314: PPUSH
2315: LD_INT 3
2317: PPUSH
2318: CALL_OW 235
// gnyevkoSaved = true ;
2322: LD_ADDR_EXP 11
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// exit ;
2330: GO 2464
// end ; end else
2332: GO 2464
// begin if GetSex ( nearUnit ) = sex_male then
2334: LD_VAR 0 1
2338: PPUSH
2339: CALL_OW 258
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2363
// Say ( nearUnit , D3-RSol1-1 ) else
2349: LD_VAR 0 1
2353: PPUSH
2354: LD_STRING D3-RSol1-1
2356: PPUSH
2357: CALL_OW 88
2361: GO 2375
// Say ( nearUnit , D3-RFSol1-1 ) ;
2363: LD_VAR 0 1
2367: PPUSH
2368: LD_STRING D3-RFSol1-1
2370: PPUSH
2371: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2375: LD_EXP 51
2379: PPUSH
2380: LD_STRING D3-Gny-1
2382: PPUSH
2383: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2387: LD_VAR 0 1
2391: PPUSH
2392: CALL_OW 258
2396: PUSH
2397: LD_INT 1
2399: EQUAL
2400: IFFALSE 2416
// Say ( nearUnit , D3-RSol1-2 ) else
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_STRING D3-RSol1-2
2409: PPUSH
2410: CALL_OW 88
2414: GO 2428
// Say ( nearUnit , D3-RFSol1-2 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_STRING D3-RFSol1-2
2423: PPUSH
2424: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2428: LD_EXP 51
2432: PPUSH
2433: LD_STRING D3-Gny-2a
2435: PPUSH
2436: CALL_OW 88
// DialogueOff ;
2440: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2444: LD_EXP 51
2448: PPUSH
2449: LD_INT 3
2451: PPUSH
2452: CALL_OW 235
// gnyevkoSaved = true ;
2456: LD_ADDR_EXP 11
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// end ; end ;
2464: PPOPN 2
2466: END
// every 1 trigger not gnyevkoSaved and not jelenaSaved do var ape ;
2467: LD_EXP 11
2471: NOT
2472: PUSH
2473: LD_EXP 20
2477: NOT
2478: AND
2479: IFFALSE 2674
2481: GO 2483
2483: DISABLE
2484: LD_INT 0
2486: PPUSH
// begin enable ;
2487: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2488: LD_EXP 11
2492: NOT
2493: PUSH
2494: LD_EXP 37
2498: PUSH
2499: LD_INT 70
2501: GREATER
2502: AND
2503: IFFALSE 2581
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 25
2522: PUSH
2523: LD_INT 12
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PPUSH
2534: CALL_OW 69
2538: PUSH
2539: FOR_IN
2540: IFFALSE 2579
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2542: LD_VAR 0 1
2546: PPUSH
2547: LD_EXP 51
2551: PPUSH
2552: CALL_OW 250
2556: PPUSH
2557: LD_EXP 51
2561: PPUSH
2562: CALL_OW 251
2566: PPUSH
2567: LD_INT 10
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 8153 0 5
2577: GO 2539
2579: POP
2580: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2581: LD_EXP 20
2585: NOT
2586: PUSH
2587: LD_EXP 38
2591: PUSH
2592: LD_INT 70
2594: GREATER
2595: AND
2596: IFFALSE 2674
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 25
2615: PUSH
2616: LD_INT 12
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2672
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2635: LD_VAR 0 1
2639: PPUSH
2640: LD_EXP 50
2644: PPUSH
2645: CALL_OW 250
2649: PPUSH
2650: LD_EXP 50
2654: PPUSH
2655: CALL_OW 251
2659: PPUSH
2660: LD_INT 10
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL 8153 0 5
2670: GO 2632
2672: POP
2673: POP
// end ;
2674: PPOPN 1
2676: END
// every 0 0$1 trigger not gnyevkoSaved and not jelenaSaved do
2677: LD_EXP 11
2681: NOT
2682: PUSH
2683: LD_EXP 20
2687: NOT
2688: AND
2689: IFFALSE 2768
2691: GO 2693
2693: DISABLE
// begin enable ;
2694: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2695: LD_EXP 11
2699: NOT
2700: PUSH
2701: LD_EXP 37
2705: PUSH
2706: LD_INT 0
2708: GREATER
2709: AND
2710: IFFALSE 2726
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2712: LD_ADDR_EXP 37
2716: PUSH
2717: LD_EXP 37
2721: PUSH
2722: LD_INT 35
2724: MINUS
2725: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2726: LD_EXP 50
2730: PPUSH
2731: CALL_OW 305
2735: PUSH
2736: LD_EXP 20
2740: NOT
2741: AND
2742: PUSH
2743: LD_EXP 38
2747: PUSH
2748: LD_INT 0
2750: GREATER
2751: AND
2752: IFFALSE 2768
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2754: LD_ADDR_EXP 38
2758: PUSH
2759: LD_EXP 38
2763: PUSH
2764: LD_INT 35
2766: MINUS
2767: ST_TO_ADDR
// end ;
2768: END
// every 0 0$1 trigger not meetPokryshkin and FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var unitInArea ;
2769: LD_EXP 13
2773: NOT
2774: PUSH
2775: LD_INT 23
2777: PPUSH
2778: LD_INT 22
2780: PUSH
2781: LD_INT 3
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 21
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PPUSH
2802: CALL_OW 70
2806: PUSH
2807: LD_INT 0
2809: GREATER
2810: AND
2811: IFFALSE 2894
2813: GO 2815
2815: DISABLE
2816: LD_INT 0
2818: PPUSH
// begin enable ;
2819: ENABLE
// unitInArea = FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
2820: LD_ADDR_VAR 0 1
2824: PUSH
2825: LD_INT 23
2827: PPUSH
2828: LD_INT 22
2830: PUSH
2831: LD_INT 3
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 21
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 70
2856: ST_TO_ADDR
// ComMoveXY ( Pokryshkin , GetX ( unitInArea [ 1 ] ) , GetY ( unitInArea [ 1 ] ) ) ;
2857: LD_EXP 44
2861: PPUSH
2862: LD_VAR 0 1
2866: PUSH
2867: LD_INT 1
2869: ARRAY
2870: PPUSH
2871: CALL_OW 250
2875: PPUSH
2876: LD_VAR 0 1
2880: PUSH
2881: LD_INT 1
2883: ARRAY
2884: PPUSH
2885: CALL_OW 251
2889: PPUSH
2890: CALL_OW 111
// end ;
2894: PPOPN 1
2896: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2897: LD_INT 3
2899: PPUSH
2900: LD_EXP 44
2904: PPUSH
2905: CALL_OW 292
2909: PUSH
2910: LD_EXP 13
2914: NOT
2915: AND
2916: IFFALSE 3769
2918: GO 2920
2920: DISABLE
// begin enable ;
2921: ENABLE
// InGameOn ;
2922: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2926: LD_EXP 44
2930: PPUSH
2931: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2935: LD_EXP 51
2939: PPUSH
2940: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2944: LD_EXP 43
2948: PUSH
2949: LD_EXP 51
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: CALL_OW 200
// DialogueOn ;
2962: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2966: LD_EXP 12
2970: IFFALSE 3222
// begin meetPokryshkin = true ;
2972: LD_ADDR_EXP 13
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2980: LD_INT 6
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 343
// DialogueOff ;
2990: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2994: LD_EXP 43
2998: PPUSH
2999: LD_EXP 44
3003: PPUSH
3004: CALL_OW 250
3008: PPUSH
3009: LD_EXP 44
3013: PPUSH
3014: CALL_OW 251
3018: PPUSH
3019: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3023: LD_EXP 43
3027: PPUSH
3028: LD_EXP 44
3032: PPUSH
3033: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3037: LD_EXP 44
3041: PPUSH
3042: LD_EXP 43
3046: PPUSH
3047: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3051: LD_EXP 51
3055: PPUSH
3056: LD_STRING D4-Gny-3
3058: PPUSH
3059: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3063: LD_EXP 43
3067: PPUSH
3068: LD_STRING D4-Bur-3
3070: PPUSH
3071: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3075: LD_EXP 44
3079: PPUSH
3080: LD_STRING D4-Pok-4
3082: PPUSH
3083: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3087: LD_EXP 39
3091: PPUSH
3092: LD_INT 18
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 49
// wait ( 0 0$2 ) ;
3102: LD_INT 70
3104: PPUSH
3105: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3109: LD_EXP 43
3113: PPUSH
3114: LD_STRING D4-Bur-4
3116: PPUSH
3117: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3121: LD_EXP 44
3125: PPUSH
3126: LD_STRING D4-Pok-5
3128: PPUSH
3129: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3133: LD_EXP 39
3137: PPUSH
3138: LD_STRING D4-Sol1-5
3140: PPUSH
3141: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3145: LD_EXP 44
3149: PPUSH
3150: LD_STRING D4-Pok-6
3152: PPUSH
3153: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3157: LD_EXP 44
3161: PPUSH
3162: LD_STRING D4-Pok-6a
3164: PPUSH
3165: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3169: LD_EXP 43
3173: PPUSH
3174: LD_STRING D4-Bur-6
3176: PPUSH
3177: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3181: LD_EXP 44
3185: PPUSH
3186: LD_STRING D4-Pok-7
3188: PPUSH
3189: CALL_OW 88
// DialogueOff ;
3193: CALL_OW 7
// InGameOff ;
3197: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3201: LD_STRING M2
3203: PPUSH
3204: CALL_OW 337
// goToHill = true ;
3208: LD_ADDR_EXP 14
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// MoveToHill ;
3216: CALL 10033 0 0
// exit ;
3220: GO 3769
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3222: LD_EXP 43
3226: PUSH
3227: LD_EXP 51
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3240: LD_EXP 44
3244: PPUSH
3245: LD_STRING D4-Pok-1
3247: PPUSH
3248: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3252: LD_EXP 51
3256: PPUSH
3257: CALL_OW 255
3261: PUSH
3262: LD_INT 3
3264: EQUAL
3265: PUSH
3266: LD_EXP 51
3270: PPUSH
3271: CALL_OW 302
3275: AND
3276: IFFALSE 3290
// Say ( Gnyevko , D4-Gny-1 ) ;
3278: LD_EXP 51
3282: PPUSH
3283: LD_STRING D4-Gny-1
3285: PPUSH
3286: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3290: LD_EXP 43
3294: PPUSH
3295: LD_EXP 51
3299: PPUSH
3300: CALL_OW 296
3304: PUSH
3305: LD_INT 8
3307: GREATER
3308: PUSH
3309: LD_EXP 51
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 3
3321: EQUAL
3322: AND
3323: PUSH
3324: LD_EXP 51
3328: PPUSH
3329: CALL_OW 302
3333: AND
3334: IFFALSE 3432
// begin ComWalk ( Gnyevko ) ;
3336: LD_EXP 51
3340: PPUSH
3341: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3345: LD_EXP 44
3349: PPUSH
3350: LD_STRING D4-Pok-2
3352: PPUSH
3353: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3357: LD_EXP 51
3361: PPUSH
3362: LD_STRING D4-Gny-2
3364: PPUSH
3365: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3369: LD_EXP 44
3373: PPUSH
3374: LD_STRING D4-Pok-3
3376: PPUSH
3377: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3381: LD_ADDR_EXP 12
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3389: LD_EXP 51
3393: PPUSH
3394: LD_INT 6
3396: PPUSH
3397: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3401: LD_EXP 51
3405: PPUSH
3406: LD_EXP 44
3410: PPUSH
3411: CALL_OW 250
3415: PPUSH
3416: LD_EXP 44
3420: PPUSH
3421: CALL_OW 251
3425: PPUSH
3426: CALL_OW 171
// end else
3430: GO 3761
// begin meetPokryshkin = true ;
3432: LD_ADDR_EXP 13
3436: PUSH
3437: LD_INT 1
3439: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3440: LD_INT 6
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: CALL_OW 343
// DialogueOff ;
3450: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3454: LD_EXP 51
3458: PPUSH
3459: CALL_OW 255
3463: PUSH
3464: LD_INT 3
3466: EQUAL
3467: PUSH
3468: LD_EXP 51
3472: PPUSH
3473: CALL_OW 302
3477: AND
3478: IFFALSE 3555
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3480: LD_EXP 43
3484: PUSH
3485: LD_EXP 51
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: LD_EXP 44
3498: PPUSH
3499: CALL_OW 250
3503: PPUSH
3504: LD_EXP 44
3508: PPUSH
3509: CALL_OW 251
3513: PPUSH
3514: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3518: LD_EXP 43
3522: PUSH
3523: LD_EXP 51
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: LD_EXP 44
3536: PPUSH
3537: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3541: LD_EXP 51
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL_OW 235
// end else
3553: GO 3598
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3555: LD_EXP 43
3559: PPUSH
3560: LD_EXP 44
3564: PPUSH
3565: CALL_OW 250
3569: PPUSH
3570: LD_EXP 44
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3584: LD_EXP 43
3588: PPUSH
3589: LD_EXP 44
3593: PPUSH
3594: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3598: LD_EXP 44
3602: PPUSH
3603: LD_EXP 43
3607: PPUSH
3608: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3612: LD_EXP 43
3616: PPUSH
3617: LD_STRING D4-Bur-3
3619: PPUSH
3620: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3624: LD_EXP 44
3628: PPUSH
3629: LD_STRING D4-Pok-4
3631: PPUSH
3632: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3636: LD_EXP 39
3640: PPUSH
3641: LD_INT 18
3643: PPUSH
3644: LD_INT 1
3646: PPUSH
3647: CALL_OW 49
// wait ( 0 0$2 ) ;
3651: LD_INT 70
3653: PPUSH
3654: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3658: LD_EXP 43
3662: PPUSH
3663: LD_STRING D4-Bur-4
3665: PPUSH
3666: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3670: LD_EXP 44
3674: PPUSH
3675: LD_STRING D4-Pok-5
3677: PPUSH
3678: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3682: LD_EXP 39
3686: PPUSH
3687: LD_STRING D4-Sol1-5
3689: PPUSH
3690: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3694: LD_EXP 44
3698: PPUSH
3699: LD_STRING D4-Pok-6
3701: PPUSH
3702: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3706: LD_EXP 44
3710: PPUSH
3711: LD_STRING D4-Pok-6a
3713: PPUSH
3714: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3718: LD_EXP 43
3722: PPUSH
3723: LD_STRING D4-Bur-6
3725: PPUSH
3726: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3730: LD_EXP 44
3734: PPUSH
3735: LD_STRING D4-Pok-7
3737: PPUSH
3738: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3742: LD_STRING M2
3744: PPUSH
3745: CALL_OW 337
// goToHill = true ;
3749: LD_ADDR_EXP 14
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// MoveToHill ;
3757: CALL 10033 0 0
// end ; DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// end ;
3769: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3770: LD_EXP 43
3774: PPUSH
3775: LD_EXP 44
3779: PPUSH
3780: CALL_OW 296
3784: PUSH
3785: LD_INT 10
3787: GREATER
3788: PUSH
3789: LD_EXP 14
3793: AND
3794: PUSH
3795: LD_EXP 17
3799: NOT
3800: AND
3801: IFFALSE 4002
3803: GO 3805
3805: DISABLE
3806: LD_INT 0
3808: PPUSH
// begin enable ;
3809: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3810: LD_ADDR_VAR 0 1
3814: PUSH
3815: LD_EXP 44
3819: PUSH
3820: LD_EXP 45
3824: PUSH
3825: LD_EXP 46
3829: PUSH
3830: LD_EXP 47
3834: PUSH
3835: LD_EXP 48
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3847: LD_EXP 51
3851: PPUSH
3852: CALL_OW 255
3856: PUSH
3857: LD_INT 6
3859: EQUAL
3860: PUSH
3861: LD_EXP 11
3865: AND
3866: IFFALSE 3884
// ruSolds = ruSolds ^ Gnyevko ;
3868: LD_ADDR_VAR 0 1
3872: PUSH
3873: LD_VAR 0 1
3877: PUSH
3878: LD_EXP 51
3882: ADD
3883: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3893: LD_EXP 43
3897: PPUSH
3898: CALL_OW 87
// DialogueOn ;
3902: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3906: LD_EXP 44
3910: PPUSH
3911: LD_STRING DSplit-Pok-1
3913: PPUSH
3914: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3918: LD_EXP 43
3922: PPUSH
3923: LD_STRING DSplit-Bur-1
3925: PPUSH
3926: CALL_OW 88
// DialogueOff ;
3930: CALL_OW 7
// InGameOn ;
3934: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3938: LD_EXP 43
3942: PPUSH
3943: LD_EXP 44
3947: PPUSH
3948: CALL_OW 250
3952: PPUSH
3953: LD_EXP 44
3957: PPUSH
3958: CALL_OW 251
3962: PPUSH
3963: CALL_OW 111
// wait ( 0 0$1 ) ;
3967: LD_INT 35
3969: PPUSH
3970: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3974: LD_EXP 43
3978: PPUSH
3979: LD_EXP 44
3983: PPUSH
3984: CALL_OW 296
3988: PUSH
3989: LD_INT 6
3991: LESS
3992: IFFALSE 3938
// InGameOff ;
3994: CALL_OW 9
// MoveToHill ;
3998: CALL 10033 0 0
// end ;
4002: PPOPN 1
4004: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
// traitor = true ;
4009: LD_ADDR_EXP 17
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// DialogueOn ;
4017: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4021: LD_EXP 44
4025: PPUSH
4026: LD_STRING DAttack-Pok-1
4028: PPUSH
4029: CALL_OW 88
// DialogueOff ;
4033: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4037: LD_INT 3
4039: PPUSH
4040: LD_INT 6
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4053: LD_INT 22
4055: PUSH
4056: LD_INT 6
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 69
4081: PPUSH
4082: LD_EXP 43
4086: PPUSH
4087: CALL_OW 115
// end ;
4091: LD_VAR 0 1
4095: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4096: LD_EXP 44
4100: PPUSH
4101: LD_INT 65
4103: PPUSH
4104: LD_INT 59
4106: PPUSH
4107: CALL_OW 297
4111: PUSH
4112: LD_INT 4
4114: LESS
4115: PUSH
4116: LD_EXP 17
4120: NOT
4121: AND
4122: IFFALSE 4319
4124: GO 4126
4126: DISABLE
// begin InGameOn ;
4127: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4131: LD_INT 55
4133: PPUSH
4134: LD_INT 50
4136: PPUSH
4137: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4141: LD_EXP 43
4145: PPUSH
4146: LD_INT 66
4148: PPUSH
4149: LD_INT 57
4151: PPUSH
4152: CALL_OW 111
// AddComHold ( Burlak ) ;
4156: LD_EXP 43
4160: PPUSH
4161: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4165: LD_EXP 39
4169: PPUSH
4170: LD_INT 59
4172: PPUSH
4173: LD_INT 55
4175: PPUSH
4176: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4180: LD_INT 35
4182: PPUSH
4183: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4187: LD_INT 1
4189: PPUSH
4190: LD_EXP 44
4194: PPUSH
4195: CALL_OW 292
4199: IFFALSE 4180
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4201: LD_EXP 39
4205: PUSH
4206: LD_EXP 44
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PPUSH
4215: CALL_OW 87
// ComStop ( Charles ) ;
4219: LD_EXP 39
4223: PPUSH
4224: CALL_OW 141
// AddComHold ( Charles ) ;
4228: LD_EXP 39
4232: PPUSH
4233: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4237: LD_EXP 39
4241: PPUSH
4242: LD_EXP 44
4246: PPUSH
4247: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4251: LD_EXP 39
4255: PPUSH
4256: LD_STRING D5-Sol1-1
4258: PPUSH
4259: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4263: LD_EXP 44
4267: PPUSH
4268: LD_STRING D5-Pok-1
4270: PPUSH
4271: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4275: LD_INT 1
4277: PPUSH
4278: LD_INT 6
4280: PPUSH
4281: LD_INT 2
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_INT 2
4299: PPUSH
4300: LD_INT 1
4302: PPUSH
4303: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4307: LD_EXP 39
4311: PPUSH
4312: LD_STRING D5-Sol1-2
4314: PPUSH
4315: CALL_OW 88
// end ;
4319: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4320: LD_EXP 39
4324: PPUSH
4325: CALL_OW 301
4329: PUSH
4330: LD_EXP 14
4334: AND
4335: IFFALSE 4863
4337: GO 4339
4339: DISABLE
4340: LD_INT 0
4342: PPUSH
// begin goToHill = false ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_INT 0
4350: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 6
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 21
4363: PUSH
4364: LD_INT 1
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 69
4379: PPUSH
4380: CALL_OW 138
// wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4391: LD_INT 55
4393: PPUSH
4394: LD_INT 50
4396: PPUSH
4397: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4401: LD_EXP 43
4405: PPUSH
4406: LD_INT 56
4408: PPUSH
4409: LD_INT 56
4411: PPUSH
4412: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4416: LD_INT 22
4418: PUSH
4419: LD_INT 6
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 21
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: PPUSH
4445: LD_INT 56
4447: PPUSH
4448: LD_INT 56
4450: PPUSH
4451: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4455: LD_EXP 43
4459: PPUSH
4460: LD_STRING D5-Bur-2
4462: PPUSH
4463: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4467: LD_EXP 44
4471: PPUSH
4472: LD_STRING D5-Pok-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4479: LD_EXP 48
4483: PPUSH
4484: LD_STRING D5-Bel-2
4486: PPUSH
4487: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4491: LD_EXP 44
4495: PPUSH
4496: LD_STRING D5-Pok-3
4498: PPUSH
4499: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4503: LD_EXP 51
4507: PPUSH
4508: CALL_OW 255
4512: PUSH
4513: LD_INT 6
4515: EQUAL
4516: IFFALSE 4530
// Say ( Gnyevko , D5-Gny-3 ) ;
4518: LD_EXP 51
4522: PPUSH
4523: LD_STRING D5-Gny-3
4525: PPUSH
4526: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4530: LD_EXP 43
4534: PPUSH
4535: LD_STRING D5-Bur-3
4537: PPUSH
4538: CALL_OW 88
// wait ( 0 0$2 ) ;
4542: LD_INT 70
4544: PPUSH
4545: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4549: LD_EXP 43
4553: PPUSH
4554: LD_INT 85
4556: PPUSH
4557: LD_INT 64
4559: PPUSH
4560: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4564: LD_INT 22
4566: PUSH
4567: LD_INT 6
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 21
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 69
4592: PPUSH
4593: LD_INT 85
4595: PPUSH
4596: LD_INT 64
4598: PPUSH
4599: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
4603: LD_EXP 43
4607: PPUSH
4608: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4612: LD_EXP 44
4616: PPUSH
4617: LD_STRING D6-Pok-1
4619: PPUSH
4620: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4624: LD_EXP 43
4628: PPUSH
4629: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4633: LD_EXP 43
4637: PPUSH
4638: LD_STRING D6-Bur-1
4640: PPUSH
4641: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4645: LD_EXP 43
4649: PPUSH
4650: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4654: LD_EXP 44
4658: PPUSH
4659: LD_STRING D6-Pok-2
4661: PPUSH
4662: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4666: LD_EXP 43
4670: PPUSH
4671: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4675: LD_EXP 48
4679: PPUSH
4680: LD_STRING D6-Bel-2
4682: PPUSH
4683: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4687: LD_EXP 43
4691: PPUSH
4692: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4696: LD_EXP 43
4700: PPUSH
4701: LD_STRING D6-Bur-2
4703: PPUSH
4704: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4708: LD_EXP 43
4712: PPUSH
4713: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4717: LD_EXP 44
4721: PPUSH
4722: LD_STRING D6-Pok-3
4724: PPUSH
4725: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4729: LD_EXP 43
4733: PPUSH
4734: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4738: LD_EXP 52
4742: PPUSH
4743: LD_STRING D6-Kur-3
4745: PPUSH
4746: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4750: LD_EXP 43
4754: PPUSH
4755: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4759: LD_EXP 44
4763: PPUSH
4764: LD_STRING D6-Pok-4
4766: PPUSH
4767: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4771: LD_EXP 43
4775: PPUSH
4776: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4780: LD_EXP 48
4784: PPUSH
4785: LD_STRING D6-Bel-4
4787: PPUSH
4788: CALL_OW 88
// InGameOff ;
4792: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4796: LD_EXP 44
4800: PPUSH
4801: LD_INT 23
4803: PPUSH
4804: CALL_OW 115
// wait ( 0 0$5 ) ;
4808: LD_INT 175
4810: PPUSH
4811: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 21
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 69
4843: PPUSH
4844: LD_INT 23
4846: PPUSH
4847: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4851: LD_INT 1
4853: PPUSH
4854: LD_EXP 51
4858: PPUSH
4859: CALL_OW 471
// end ;
4863: PPOPN 1
4865: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4866: LD_INT 1
4868: PPUSH
4869: LD_EXP 44
4873: PPUSH
4874: CALL_OW 292
4878: PUSH
4879: LD_EXP 39
4883: PPUSH
4884: CALL_OW 301
4888: AND
4889: IFFALSE 4908
4891: GO 4893
4893: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4894: LD_EXP 40
4898: PPUSH
4899: LD_EXP 44
4903: PPUSH
4904: CALL_OW 115
4908: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4909: LD_INT 3
4911: PPUSH
4912: LD_INT 23
4914: PPUSH
4915: CALL_OW 292
4919: IFFALSE 4948
4921: GO 4923
4923: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4924: LD_EXP 44
4928: PPUSH
4929: LD_STRING D7-Pok-1
4931: PPUSH
4932: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4936: LD_EXP 40
4940: PPUSH
4941: LD_STRING D7-FSol1-1
4943: PPUSH
4944: CALL_OW 88
// end ;
4948: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4949: LD_EXP 44
4953: PPUSH
4954: CALL_OW 303
4958: IFFALSE 5490
4960: GO 4962
4962: DISABLE
4963: LD_INT 0
4965: PPUSH
4966: PPUSH
4967: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: LD_INT 22
4975: PUSH
4976: LD_INT 6
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 21
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 50
4995: PUSH
4996: EMPTY
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: PPUSH
5004: CALL_OW 69
5008: PUSH
5009: LD_EXP 48
5013: DIFF
5014: ST_TO_ADDR
// DialogueOn ;
5015: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5019: LD_EXP 48
5023: PPUSH
5024: LD_STRING D7a-Bel-1
5026: PPUSH
5027: CALL_OW 88
// DialogueOff ;
5031: CALL_OW 7
// for i := 1 to ruSolds do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: DOUBLE
5041: LD_INT 1
5043: DEC
5044: ST_TO_ADDR
5045: LD_VAR 0 3
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5109
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5053: LD_VAR 0 3
5057: PUSH
5058: LD_VAR 0 1
5062: ARRAY
5063: PPUSH
5064: LD_INT 87
5066: PUSH
5067: LD_VAR 0 1
5071: PLUS
5072: PPUSH
5073: LD_INT 63
5075: PUSH
5076: LD_VAR 0 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5086: LD_VAR 0 3
5090: PUSH
5091: LD_VAR 0 1
5095: ARRAY
5096: PPUSH
5097: LD_INT 89
5099: PPUSH
5100: LD_INT 67
5102: PPUSH
5103: CALL_OW 178
// end ;
5107: GO 5050
5109: POP
5110: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5111: LD_EXP 48
5115: PPUSH
5116: LD_INT 89
5118: PPUSH
5119: LD_INT 67
5121: PPUSH
5122: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5126: LD_EXP 48
5130: PPUSH
5131: LD_INT 88
5133: PPUSH
5134: LD_INT 66
5136: PPUSH
5137: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5141: LD_EXP 45
5145: PPUSH
5146: LD_STRING D7a-RSol1-1
5148: PPUSH
5149: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5153: LD_EXP 40
5157: PPUSH
5158: LD_STRING D7a-FSol1-1
5160: PPUSH
5161: CALL_OW 88
// wait ( 0 0$12 ) ;
5165: LD_INT 420
5167: PPUSH
5168: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5172: LD_EXP 48
5176: PPUSH
5177: LD_STRING D7b-Bel-1
5179: PPUSH
5180: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5184: LD_EXP 46
5188: PPUSH
5189: LD_STRING D7b-FSol1-1
5191: PPUSH
5192: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5196: LD_EXP 48
5200: PPUSH
5201: LD_STRING D7b-Bel-2
5203: PPUSH
5204: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5208: LD_EXP 45
5212: PPUSH
5213: LD_STRING D7b-RSol1-2
5215: PPUSH
5216: CALL_OW 88
// for unit in ruSolds do
5220: LD_ADDR_VAR 0 2
5224: PUSH
5225: LD_VAR 0 3
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5464
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5233: LD_EXP 43
5237: PPUSH
5238: LD_VAR 0 2
5242: PPUSH
5243: CALL_OW 296
5247: PUSH
5248: LD_INT 7
5250: LESS
5251: IFFALSE 5462
// begin InGameOn ;
5253: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5257: LD_EXP 48
5261: PUSH
5262: LD_EXP 45
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5275: LD_EXP 43
5279: PPUSH
5280: LD_INT 88
5282: PPUSH
5283: LD_INT 66
5285: PPUSH
5286: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5290: LD_EXP 48
5294: PPUSH
5295: LD_EXP 43
5299: PPUSH
5300: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5304: LD_EXP 43
5308: PPUSH
5309: LD_INT 90
5311: PPUSH
5312: LD_INT 66
5314: PPUSH
5315: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5319: LD_EXP 43
5323: PPUSH
5324: LD_STRING D7b-Bur-3
5326: PPUSH
5327: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5331: LD_EXP 48
5335: PPUSH
5336: LD_STRING D7b-Bel-4
5338: PPUSH
5339: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5343: LD_EXP 43
5347: PPUSH
5348: LD_STRING D7b-Bur-4
5350: PPUSH
5351: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5355: LD_EXP 48
5359: PPUSH
5360: LD_STRING D7b-Bel-5
5362: PPUSH
5363: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5367: LD_EXP 46
5371: PPUSH
5372: LD_STRING D7b-FSol1-5
5374: PPUSH
5375: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5379: LD_EXP 48
5383: PPUSH
5384: LD_STRING D7b-Bel-6
5386: PPUSH
5387: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5391: LD_EXP 43
5395: PPUSH
5396: LD_STRING D7b-Bur-6
5398: PPUSH
5399: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5403: LD_EXP 45
5407: PPUSH
5408: LD_STRING D7b-RSol1-6
5410: PPUSH
5411: CALL_OW 88
// InGameOff ;
5415: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 3
5426: PPUSH
5427: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5431: LD_EXP 48
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5443: LD_STRING M3
5445: PPUSH
5446: CALL_OW 337
// secondAttack = true ;
5450: LD_ADDR_EXP 16
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// exit ;
5458: POP
5459: POP
5460: GO 5490
// end ;
5462: GO 5230
5464: POP
5465: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5466: LD_EXP 48
5470: PPUSH
5471: LD_STRING D7b-Bel-3
5473: PPUSH
5474: CALL_OW 88
// InGameOff ;
5478: CALL_OW 9
// belkovWaitForGorky = true ;
5482: LD_ADDR_EXP 15
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// end ;
5490: PPOPN 3
5492: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5493: LD_EXP 15
5497: IFFALSE 5807
5499: GO 5501
5501: DISABLE
5502: LD_INT 0
5504: PPUSH
5505: PPUSH
// begin enable ;
5506: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 22
5514: PUSH
5515: LD_INT 6
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 21
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 69
5540: ST_TO_ADDR
// for unit in ruSolds do
5541: LD_ADDR_VAR 0 1
5545: PUSH
5546: LD_VAR 0 2
5550: PUSH
5551: FOR_IN
5552: IFFALSE 5805
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5554: LD_EXP 43
5558: PPUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: CALL_OW 296
5568: PUSH
5569: LD_INT 7
5571: LESS
5572: IFFALSE 5803
// begin belkovWaitForGorky = false ;
5574: LD_ADDR_EXP 15
5578: PUSH
5579: LD_INT 0
5581: ST_TO_ADDR
// InGameOn ;
5582: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5586: LD_EXP 48
5590: PUSH
5591: LD_EXP 45
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5604: LD_EXP 43
5608: PPUSH
5609: LD_INT 88
5611: PPUSH
5612: LD_INT 66
5614: PPUSH
5615: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5619: LD_EXP 48
5623: PPUSH
5624: LD_EXP 43
5628: PPUSH
5629: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5633: LD_EXP 43
5637: PPUSH
5638: LD_INT 90
5640: PPUSH
5641: LD_INT 66
5643: PPUSH
5644: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5648: LD_EXP 48
5652: PPUSH
5653: LD_STRING D7b-Bel-3a
5655: PPUSH
5656: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5660: LD_EXP 43
5664: PPUSH
5665: LD_STRING D7b-Bur-3
5667: PPUSH
5668: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5672: LD_EXP 48
5676: PPUSH
5677: LD_STRING D7b-Bel-4
5679: PPUSH
5680: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5684: LD_EXP 43
5688: PPUSH
5689: LD_STRING D7b-Bur-4
5691: PPUSH
5692: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5696: LD_EXP 48
5700: PPUSH
5701: LD_STRING D7b-Bel-5
5703: PPUSH
5704: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5708: LD_EXP 46
5712: PPUSH
5713: LD_STRING D7b-FSol1-5
5715: PPUSH
5716: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5720: LD_EXP 48
5724: PPUSH
5725: LD_STRING D7b-Bel-6
5727: PPUSH
5728: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5732: LD_EXP 43
5736: PPUSH
5737: LD_STRING D7b-Bur-6
5739: PPUSH
5740: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5744: LD_EXP 45
5748: PPUSH
5749: LD_STRING D7a-RSol1-6
5751: PPUSH
5752: CALL_OW 88
// InGameOff ;
5756: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5772: LD_EXP 48
5776: PPUSH
5777: LD_INT 3
5779: PPUSH
5780: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5784: LD_STRING M3
5786: PPUSH
5787: CALL_OW 337
// secondAttack = true ;
5791: LD_ADDR_EXP 16
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// exit ;
5799: POP
5800: POP
5801: GO 5807
// end ;
5803: GO 5551
5805: POP
5806: POP
// end ;
5807: PPOPN 2
5809: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
// DialogueOn ;
5814: CALL_OW 6
// Say ( Johanna , D8-FSol1-1 ) ;
5818: LD_EXP 40
5822: PPUSH
5823: LD_STRING D8-FSol1-1
5825: PPUSH
5826: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5830: LD_EXP 41
5834: PPUSH
5835: LD_STRING D8-Glad-1
5837: PPUSH
5838: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5842: LD_EXP 43
5846: PPUSH
5847: LD_STRING D8-Bur-1
5849: PPUSH
5850: CALL_OW 88
// DialogueOff ;
5854: CALL_OW 7
// secondAttack = false ;
5858: LD_ADDR_EXP 16
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5866: LD_ADDR_VAR 0 2
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 3
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 1
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PPUSH
5900: LD_INT 23
5902: PPUSH
5903: CALL_OW 74
5907: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5908: LD_EXP 42
5912: PPUSH
5913: CALL_OW 122
// wait ( 0 0$1 ) ;
5917: LD_INT 35
5919: PPUSH
5920: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5924: LD_EXP 42
5928: PPUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: CALL_OW 175
// end ;
5938: LD_VAR 0 1
5942: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5943: LD_INT 23
5945: PPUSH
5946: CALL_OW 256
5950: PUSH
5951: LD_INT 350
5953: LESS
5954: PUSH
5955: LD_INT 23
5957: PPUSH
5958: CALL_OW 256
5962: PUSH
5963: LD_INT 250
5965: GREATER
5966: AND
5967: PUSH
5968: LD_INT 20
5970: PPUSH
5971: LD_INT 22
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 21
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 70
5999: PUSH
6000: LD_INT 0
6002: GREATER
6003: AND
6004: PUSH
6005: LD_EXP 23
6009: NOT
6010: AND
6011: IFFALSE 6028
6013: GO 6015
6015: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6016: LD_EXP 40
6020: PPUSH
6021: LD_STRING D8-FSol1-2
6023: PPUSH
6024: CALL_OW 88
6028: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6029: LD_INT 23
6031: PPUSH
6032: CALL_OW 303
6036: PUSH
6037: LD_INT 22
6039: PPUSH
6040: CALL_OW 302
6044: AND
6045: PUSH
6046: LD_EXP 23
6050: NOT
6051: AND
6052: IFFALSE 6122
6054: GO 6056
6056: DISABLE
// begin amRetreat = true ;
6057: LD_ADDR_EXP 23
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6065: LD_EXP 40
6069: PPUSH
6070: LD_STRING D8-FSol1-2a
6072: PPUSH
6073: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6077: LD_EXP 41
6081: PUSH
6082: LD_EXP 40
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: LD_INT 21
6093: PPUSH
6094: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6098: LD_EXP 41
6102: PPUSH
6103: LD_STRING D8-Glad-2
6105: PPUSH
6106: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6110: LD_EXP 43
6114: PPUSH
6115: LD_STRING D8-Bur-2
6117: PPUSH
6118: CALL_OW 88
// end ;
6122: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6123: LD_INT 22
6125: PPUSH
6126: CALL_OW 303
6130: PUSH
6131: LD_INT 23
6133: PPUSH
6134: CALL_OW 302
6138: AND
6139: PUSH
6140: LD_EXP 23
6144: NOT
6145: AND
6146: IFFALSE 6216
6148: GO 6150
6150: DISABLE
// begin amRetreat = true ;
6151: LD_ADDR_EXP 23
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6159: LD_EXP 40
6163: PPUSH
6164: LD_STRING D8-FSol1-2a
6166: PPUSH
6167: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6171: LD_EXP 41
6175: PUSH
6176: LD_EXP 40
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PPUSH
6185: LD_INT 21
6187: PPUSH
6188: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6192: LD_EXP 41
6196: PPUSH
6197: LD_STRING D8-Glad-2
6199: PPUSH
6200: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6204: LD_EXP 43
6208: PPUSH
6209: LD_STRING D8-Bur-2
6211: PPUSH
6212: CALL_OW 88
// end ;
6216: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and not amRetreat do
6217: LD_INT 23
6219: PPUSH
6220: CALL_OW 256
6224: PUSH
6225: LD_INT 500
6227: LESS
6228: PUSH
6229: LD_EXP 23
6233: NOT
6234: AND
6235: IFFALSE 6305
6237: GO 6239
6239: DISABLE
// begin amRetreat = true ;
6240: LD_ADDR_EXP 23
6244: PUSH
6245: LD_INT 1
6247: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6248: LD_EXP 40
6252: PPUSH
6253: LD_STRING D8-FSol1-2a
6255: PPUSH
6256: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6260: LD_EXP 41
6264: PUSH
6265: LD_EXP 40
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: LD_INT 21
6276: PPUSH
6277: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6281: LD_EXP 41
6285: PPUSH
6286: LD_STRING D8-Glad-2
6288: PPUSH
6289: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6293: LD_EXP 43
6297: PPUSH
6298: LD_STRING D8-Bur-2
6300: PPUSH
6301: CALL_OW 88
// end ;
6305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6306: LD_INT 22
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 21
6318: PUSH
6319: LD_INT 1
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 50
6328: PUSH
6329: EMPTY
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 69
6341: PUSH
6342: LD_INT 0
6344: GREATER
6345: IFFALSE 6473
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin enable ;
6353: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6354: LD_ADDR_VAR 0 1
6358: PUSH
6359: LD_INT 21
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 70
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6471
// begin if unit = Gladstone then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 41
6403: EQUAL
6404: IFFALSE 6434
// begin gladstoneEscape = true ;
6406: LD_ADDR_EXP 18
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6414: LD_EXP 41
6418: PPUSH
6419: LD_EXP 27
6423: PUSH
6424: LD_STRING Gladstone
6426: STR
6427: PPUSH
6428: CALL_OW 38
// end else
6432: GO 6460
// begin JohannaEscape = true ;
6434: LD_ADDR_EXP 19
6438: PUSH
6439: LD_INT 1
6441: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6442: LD_EXP 40
6446: PPUSH
6447: LD_EXP 27
6451: PUSH
6452: LD_STRING Johanna
6454: STR
6455: PPUSH
6456: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 64
// end ;
6469: GO 6391
6471: POP
6472: POP
// end ;
6473: PPOPN 1
6475: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6476: LD_EXP 41
6480: PPUSH
6481: CALL_OW 301
6485: PUSH
6486: LD_EXP 40
6490: PPUSH
6491: CALL_OW 301
6495: AND
6496: IFFALSE 6513
6498: GO 6500
6500: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6501: LD_EXP 43
6505: PPUSH
6506: LD_STRING D9-Bur-1
6508: PPUSH
6509: CALL_OW 88
6513: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6514: LD_EXP 40
6518: PPUSH
6519: CALL_OW 301
6523: PUSH
6524: LD_EXP 18
6528: AND
6529: PUSH
6530: LD_EXP 19
6534: NOT
6535: AND
6536: IFFALSE 6553
6538: GO 6540
6540: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6541: LD_EXP 43
6545: PPUSH
6546: LD_STRING D9-Bur-1a
6548: PPUSH
6549: CALL_OW 88
6553: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6554: LD_EXP 41
6558: PPUSH
6559: CALL_OW 301
6563: PUSH
6564: LD_EXP 18
6568: NOT
6569: AND
6570: PUSH
6571: LD_EXP 19
6575: AND
6576: IFFALSE 6593
6578: GO 6580
6580: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6581: LD_EXP 43
6585: PPUSH
6586: LD_STRING D9-Bur-1b
6588: PPUSH
6589: CALL_OW 88
6593: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6594: LD_EXP 18
6598: PUSH
6599: LD_EXP 19
6603: AND
6604: IFFALSE 6621
6606: GO 6608
6608: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6609: LD_EXP 43
6613: PPUSH
6614: LD_STRING D9-Bur-1c
6616: PPUSH
6617: CALL_OW 88
6621: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6622: LD_INT 22
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 21
6634: PUSH
6635: LD_INT 3
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 50
6644: PUSH
6645: EMPTY
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_INT 0
6660: EQUAL
6661: IFFALSE 6909
6663: GO 6665
6665: DISABLE
6666: LD_INT 0
6668: PPUSH
6669: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 21
6687: PUSH
6688: LD_INT 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 50
6697: PUSH
6698: EMPTY
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: PPUSH
6706: CALL_OW 69
6710: PUSH
6711: LD_EXP 43
6715: PUSH
6716: LD_EXP 51
6720: PUSH
6721: LD_EXP 48
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: DIFF
6731: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 1
6741: PPUSH
6742: LD_INT 26
6744: PUSH
6745: LD_INT 1
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL_OW 72
6756: ST_TO_ADDR
// DialogueOn ;
6757: CALL_OW 6
// if IsOK ( Belkov ) then
6761: LD_EXP 48
6765: PPUSH
6766: CALL_OW 302
6770: IFFALSE 6784
// Say ( Belkov , D10-Bel-1 ) ;
6772: LD_EXP 48
6776: PPUSH
6777: LD_STRING D10-Bel-1
6779: PPUSH
6780: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6784: LD_VAR 0 1
6788: PUSH
6789: LD_INT 0
6791: GREATER
6792: PUSH
6793: LD_VAR 0 2
6797: PUSH
6798: LD_INT 0
6800: GREATER
6801: PUSH
6802: LD_EXP 48
6806: PPUSH
6807: CALL_OW 302
6811: OR
6812: AND
6813: IFFALSE 6880
// begin Say ( Burlak , D10-Bur-1 ) ;
6815: LD_EXP 43
6819: PPUSH
6820: LD_STRING D10-Bur-1
6822: PPUSH
6823: CALL_OW 88
// if IsOK ( Belkov ) then
6827: LD_EXP 48
6831: PPUSH
6832: CALL_OW 302
6836: IFFALSE 6852
// Say ( Belkov , D10-Bel-1a ) else
6838: LD_EXP 48
6842: PPUSH
6843: LD_STRING D10-Bel-1a
6845: PPUSH
6846: CALL_OW 88
6850: GO 6868
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: ARRAY
6860: PPUSH
6861: LD_STRING D10-RSol1-1
6863: PPUSH
6864: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6868: LD_EXP 43
6872: PPUSH
6873: LD_STRING D10-Bur-2
6875: PPUSH
6876: CALL_OW 88
// end ; DialogueOff ;
6880: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6884: LD_STRING M4a
6886: PPUSH
6887: CALL_OW 337
// evacuationAvailable = true ;
6891: LD_ADDR_EXP 21
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6899: LD_INT 1
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 424
// end ;
6909: PPOPN 2
6911: END
// every 0 0$15 trigger evacuationAvailable do var randomSold ;
6912: LD_EXP 21
6916: IFFALSE 7455
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6924: LD_EXP 50
6928: PPUSH
6929: LD_INT 22
6931: PPUSH
6932: LD_INT 1
6934: PPUSH
6935: CALL_OW 49
// wait ( 0 0$3 ) ;
6939: LD_INT 105
6941: PPUSH
6942: CALL_OW 67
// DialogueOn ;
6946: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6950: LD_EXP 50
6954: PPUSH
6955: LD_STRING D11b-Kir-1
6957: PPUSH
6958: CALL_OW 94
// if IsOK ( Belkov ) then
6962: LD_EXP 48
6966: PPUSH
6967: CALL_OW 302
6971: IFFALSE 6999
// begin Say ( Belkov , D11b-Bel-1 ) ;
6973: LD_EXP 48
6977: PPUSH
6978: LD_STRING D11b-Bel-1
6980: PPUSH
6981: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6985: LD_EXP 48
6989: PPUSH
6990: LD_STRING D11b-Bel-1a
6992: PPUSH
6993: CALL_OW 94
// end else
6997: GO 7054
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
6999: LD_ADDR_VAR 0 1
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 21
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 50
7026: PUSH
7027: EMPTY
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 69
7039: PPUSH
7040: LD_STRING D11b-RSol1-1
7042: PPUSH
7043: LD_STRING D11b-RFSol1-1
7045: PPUSH
7046: LD_INT 0
7048: PPUSH
7049: CALL 7820 0 4
7053: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7054: LD_INT 24
7056: PPUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 0
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 25
7069: PUSH
7070: LD_INT 12
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 70
7085: PUSH
7086: LD_INT 0
7088: GREATER
7089: IFFALSE 7105
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7091: LD_EXP 50
7095: PPUSH
7096: LD_STRING D11b1-Kir-1
7098: PPUSH
7099: CALL_OW 94
7103: GO 7117
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7105: LD_EXP 50
7109: PPUSH
7110: LD_STRING D11b2-Kir-1
7112: PPUSH
7113: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7117: LD_EXP 6
7121: PUSH
7122: LD_INT 24
7124: PPUSH
7125: LD_INT 22
7127: PUSH
7128: LD_INT 0
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 25
7137: PUSH
7138: LD_INT 12
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 70
7153: PUSH
7154: LD_INT 0
7156: GREATER
7157: AND
7158: IFFALSE 7293
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7160: LD_EXP 43
7164: PPUSH
7165: LD_STRING D11b1-Bur-1
7167: PPUSH
7168: CALL_OW 88
// if IsOk ( Belkov ) then
7172: LD_EXP 48
7176: PPUSH
7177: CALL_OW 302
7181: IFFALSE 7197
// Say ( Belkov , D11b2-Bel-1 ) else
7183: LD_EXP 48
7187: PPUSH
7188: LD_STRING D11b2-Bel-1
7190: PPUSH
7191: CALL_OW 88
7195: GO 7238
// begin if GetSex ( randomSold ) = sex_male then
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 258
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7226
// Say ( randomSold , D11b1-RSol1-1 ) else
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_STRING D11b1-RSol1-1
7219: PPUSH
7220: CALL_OW 88
7224: GO 7238
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: LD_STRING D11b1-RFSol1-1
7233: PPUSH
7234: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7238: LD_INT 22
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 21
7250: PUSH
7251: LD_INT 1
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 50
7260: PUSH
7261: EMPTY
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 69
7273: PPUSH
7274: LD_STRING D11b1-RSol1-1
7276: PPUSH
7277: LD_STRING D11b1-RFSol1-1
7279: PPUSH
7280: LD_INT 0
7282: PPUSH
7283: CALL 7820 0 4
// DialogueOff ;
7287: CALL_OW 7
// exit ;
7291: GO 7455
// end ; if spotWaterfall then
7293: LD_EXP 7
7297: IFFALSE 7383
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7299: LD_EXP 43
7303: PPUSH
7304: LD_STRING D11b1-Bur-1a
7306: PPUSH
7307: CALL_OW 88
// if IsOk ( Belkov ) then
7311: LD_EXP 48
7315: PPUSH
7316: CALL_OW 302
7320: IFFALSE 7336
// Say ( Belkov , D11b2-Bel-1 ) else
7322: LD_EXP 48
7326: PPUSH
7327: LD_STRING D11b2-Bel-1
7329: PPUSH
7330: CALL_OW 88
7334: GO 7377
// begin if GetSex ( randomSold ) = sex_male then
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 258
7345: PUSH
7346: LD_INT 1
7348: EQUAL
7349: IFFALSE 7365
// Say ( randomSold , D11b1-RSol1-1 ) else
7351: LD_VAR 0 1
7355: PPUSH
7356: LD_STRING D11b1-RSol1-1
7358: PPUSH
7359: CALL_OW 88
7363: GO 7377
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7365: LD_VAR 0 1
7369: PPUSH
7370: LD_STRING D11b1-RFSol1-1
7372: PPUSH
7373: CALL_OW 88
// end ; DialogueOff ;
7377: CALL_OW 7
// exit ;
7381: GO 7455
// end ; if IsOk ( Belkov ) then
7383: LD_EXP 48
7387: PPUSH
7388: CALL_OW 302
7392: IFFALSE 7408
// Say ( Belkov , D11b1-Bel-1 ) else
7394: LD_EXP 48
7398: PPUSH
7399: LD_STRING D11b1-Bel-1
7401: PPUSH
7402: CALL_OW 88
7406: GO 7449
// begin if GetSex ( randomSold ) = sex_male then
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 258
7417: PUSH
7418: LD_INT 1
7420: EQUAL
7421: IFFALSE 7437
// Say ( randomSold , D11b1-RSol1-1 ) else
7423: LD_VAR 0 1
7427: PPUSH
7428: LD_STRING D11b1-RSol1-1
7430: PPUSH
7431: CALL_OW 88
7435: GO 7449
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7437: LD_VAR 0 1
7441: PPUSH
7442: LD_STRING D11b1-RFSol1-1
7444: PPUSH
7445: CALL_OW 88
// end ; DialogueOff ;
7449: CALL_OW 7
// exit ;
7453: GO 7455
// end ;
7455: PPOPN 1
7457: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7458: LD_INT 3
7460: PPUSH
7461: LD_EXP 50
7465: PPUSH
7466: CALL_OW 292
7470: IFFALSE 7700
7472: GO 7474
7474: DISABLE
7475: LD_INT 0
7477: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
7478: LD_EXP 50
7482: PPUSH
7483: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7487: LD_ADDR_VAR 0 1
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 21
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 50
7514: PUSH
7515: EMPTY
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 69
7527: PPUSH
7528: LD_EXP 50
7532: PPUSH
7533: CALL_OW 74
7537: ST_TO_ADDR
// DialogueOn ;
7538: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7542: LD_EXP 50
7546: PPUSH
7547: LD_STRING D11a-Kir-1
7549: PPUSH
7550: CALL_OW 88
// if nearUnit = Belkov then
7554: LD_VAR 0 1
7558: PUSH
7559: LD_EXP 48
7563: EQUAL
7564: IFFALSE 7604
// begin Say ( Belkov , D11a-Bel-1 ) ;
7566: LD_EXP 48
7570: PPUSH
7571: LD_STRING D11a-Bel-1
7573: PPUSH
7574: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7578: LD_EXP 50
7582: PPUSH
7583: LD_STRING D11a-Kir-2
7585: PPUSH
7586: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7590: LD_EXP 48
7594: PPUSH
7595: LD_STRING D11a-Bel-2
7597: PPUSH
7598: CALL_OW 88
// end else
7602: GO 7645
// begin if GetSex ( nearUnit ) = sex_male then
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 258
7613: PUSH
7614: LD_INT 1
7616: EQUAL
7617: IFFALSE 7633
// Say ( nearUnit , D11a-RSol1-2 ) else
7619: LD_VAR 0 1
7623: PPUSH
7624: LD_STRING D11a-RSol1-2
7626: PPUSH
7627: CALL_OW 88
7631: GO 7645
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_STRING D11a-RFSol1-2
7640: PPUSH
7641: CALL_OW 88
// end ; DialogueOff ;
7645: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
7649: LD_EXP 50
7653: PPUSH
7654: LD_INT 3
7656: PPUSH
7657: CALL_OW 235
// jelenaSaved = true ;
7661: LD_ADDR_EXP 20
7665: PUSH
7666: LD_INT 1
7668: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7669: LD_INT 175
7671: PPUSH
7672: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7676: LD_EXP 50
7680: PPUSH
7681: LD_STRING D11c-Kir-1
7683: PPUSH
7684: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7688: LD_EXP 43
7692: PPUSH
7693: LD_STRING D11c-Bur-1
7695: PPUSH
7696: CALL_OW 88
// end ;
7700: PPOPN 1
7702: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7703: LD_EXP 21
7707: PUSH
7708: LD_INT 1
7710: PPUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 3
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL_OW 70
7739: PUSH
7740: LD_INT 0
7742: GREATER
7743: AND
7744: IFFALSE 7756
7746: GO 7748
7748: DISABLE
// begin Query ( QExit1 ) ;
7749: LD_STRING QExit1
7751: PPUSH
7752: CALL_OW 97
// end ; end_of_file
7756: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7757: LD_INT 0
7759: PPUSH
7760: PPUSH
// if exist_mode then
7761: LD_VAR 0 2
7765: IFFALSE 7790
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7767: LD_ADDR_VAR 0 4
7771: PUSH
7772: LD_EXP 28
7776: PUSH
7777: LD_VAR 0 1
7781: STR
7782: PPUSH
7783: CALL_OW 34
7787: ST_TO_ADDR
7788: GO 7805
// unit := NewCharacter ( ident ) ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: LD_VAR 0 1
7799: PPUSH
7800: CALL_OW 25
7804: ST_TO_ADDR
// result := unit ;
7805: LD_ADDR_VAR 0 3
7809: PUSH
7810: LD_VAR 0 4
7814: ST_TO_ADDR
// end ;
7815: LD_VAR 0 3
7819: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
7824: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7825: LD_ADDR_VAR 0 1
7829: PUSH
7830: LD_VAR 0 1
7834: PUSH
7835: LD_EXP 43
7839: PUSH
7840: LD_EXP 51
7844: PUSH
7845: LD_EXP 48
7849: PUSH
7850: LD_EXP 50
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: DIFF
7861: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7862: LD_ADDR_VAR 0 7
7866: PUSH
7867: LD_VAR 0 1
7871: PUSH
7872: LD_INT 1
7874: PPUSH
7875: LD_VAR 0 1
7879: PPUSH
7880: CALL_OW 12
7884: ARRAY
7885: ST_TO_ADDR
// if radio then
7886: LD_VAR 0 4
7890: IFFALSE 7939
// begin if GetSex ( speaker ) = sex_male then
7892: LD_VAR 0 7
7896: PPUSH
7897: CALL_OW 258
7901: PUSH
7902: LD_INT 1
7904: EQUAL
7905: IFFALSE 7923
// SayRadio ( speaker , dialogMID ) else
7907: LD_VAR 0 7
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 94
7921: GO 7937
// SayRadio ( speaker , dialogFID ) ;
7923: LD_VAR 0 7
7927: PPUSH
7928: LD_VAR 0 3
7932: PPUSH
7933: CALL_OW 94
// end else
7937: GO 7984
// begin if GetSex ( speaker ) = sex_male then
7939: LD_VAR 0 7
7943: PPUSH
7944: CALL_OW 258
7948: PUSH
7949: LD_INT 1
7951: EQUAL
7952: IFFALSE 7970
// Say ( speaker , dialogMID ) else
7954: LD_VAR 0 7
7958: PPUSH
7959: LD_VAR 0 2
7963: PPUSH
7964: CALL_OW 88
7968: GO 7984
// Say ( speaker , dialogFID ) ;
7970: LD_VAR 0 7
7974: PPUSH
7975: LD_VAR 0 3
7979: PPUSH
7980: CALL_OW 88
// end ; result := speaker ;
7984: LD_ADDR_VAR 0 5
7988: PUSH
7989: LD_VAR 0 7
7993: ST_TO_ADDR
// end ;
7994: LD_VAR 0 5
7998: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7999: LD_INT 0
8001: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 255
8011: PUSH
8012: LD_OWVAR 2
8016: EQUAL
8017: PUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 302
8027: AND
8028: IFFALSE 8050
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8030: LD_VAR 0 1
8034: PPUSH
8035: LD_EXP 27
8039: PUSH
8040: LD_VAR 0 2
8044: STR
8045: PPUSH
8046: CALL_OW 38
// end ;
8050: LD_VAR 0 3
8054: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
// resultCharactersToSave = [ ] ;
8060: LD_ADDR_VAR 0 5
8064: PUSH
8065: EMPTY
8066: ST_TO_ADDR
// for unit in characters do
8067: LD_ADDR_VAR 0 4
8071: PUSH
8072: LD_VAR 0 1
8076: PUSH
8077: FOR_IN
8078: IFFALSE 8126
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8080: LD_VAR 0 4
8084: PPUSH
8085: CALL_OW 255
8089: PUSH
8090: LD_OWVAR 2
8094: EQUAL
8095: PUSH
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 302
8105: AND
8106: IFFALSE 8124
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8108: LD_ADDR_VAR 0 5
8112: PUSH
8113: LD_VAR 0 5
8117: PUSH
8118: LD_VAR 0 4
8122: ADD
8123: ST_TO_ADDR
8124: GO 8077
8126: POP
8127: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8128: LD_VAR 0 5
8132: PPUSH
8133: LD_EXP 27
8137: PUSH
8138: LD_VAR 0 2
8142: STR
8143: PPUSH
8144: CALL_OW 38
// end ;
8148: LD_VAR 0 3
8152: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8153: LD_INT 0
8155: PPUSH
8156: PPUSH
8157: PPUSH
8158: PPUSH
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 302
8176: NOT
8177: PUSH
8178: LD_VAR 0 4
8182: PUSH
8183: LD_INT 1
8185: EQUAL
8186: OR
8187: PUSH
8188: LD_VAR 0 2
8192: PPUSH
8193: LD_VAR 0 3
8197: PPUSH
8198: CALL_OW 488
8202: NOT
8203: OR
8204: PUSH
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 2
8214: PPUSH
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL_OW 297
8224: PUSH
8225: LD_VAR 0 4
8229: GREATEREQUAL
8230: OR
8231: PUSH
8232: LD_VAR 0 5
8236: PUSH
8237: LD_INT 1
8239: PUSH
8240: LD_INT 0
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: IN
8247: NOT
8248: OR
8249: IFFALSE 8253
// exit ;
8251: GO 9810
// attempts = 0 ;
8253: LD_ADDR_VAR 0 17
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8261: LD_ADDR_VAR 0 7
8265: PUSH
8266: EMPTY
8267: ST_TO_ADDR
// list_coords = [ ] ;
8268: LD_ADDR_VAR 0 8
8272: PUSH
8273: EMPTY
8274: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8275: LD_ADDR_VAR 0 9
8279: PUSH
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_VAR 0 3
8289: PPUSH
8290: LD_VAR 0 1
8294: PPUSH
8295: CALL_OW 250
8299: PPUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 251
8309: PPUSH
8310: CALL 9815 0 4
8314: ST_TO_ADDR
// if attempts = 0 then
8315: LD_VAR 0 17
8319: PUSH
8320: LD_INT 0
8322: EQUAL
8323: IFFALSE 8431
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8325: LD_ADDR_VAR 0 10
8329: PUSH
8330: LD_VAR 0 9
8334: PUSH
8335: LD_VAR 0 9
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: PUSH
8344: LD_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: MINUS
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8358: LD_VAR 0 10
8362: PUSH
8363: LD_INT 2
8365: ARRAY
8366: PUSH
8367: LD_INT 6
8369: EQUAL
8370: IFFALSE 8393
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8372: LD_ADDR_VAR 0 10
8376: PUSH
8377: LD_VAR 0 10
8381: PPUSH
8382: LD_INT 2
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 1
8392: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8393: LD_VAR 0 10
8397: PUSH
8398: LD_INT 3
8400: ARRAY
8401: PUSH
8402: LD_INT 1
8404: NEG
8405: EQUAL
8406: IFFALSE 8429
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8408: LD_ADDR_VAR 0 10
8412: PUSH
8413: LD_VAR 0 10
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 5
8423: PPUSH
8424: CALL_OW 1
8428: ST_TO_ADDR
// end else
8429: GO 8468
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8431: LD_ADDR_VAR 0 10
8435: PUSH
8436: LD_INT 0
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: LD_INT 3
8447: PUSH
8448: LD_INT 4
8450: PUSH
8451: LD_INT 5
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_VAR 0 9
8466: DIFF
8467: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8468: LD_ADDR_VAR 0 14
8472: PUSH
8473: DOUBLE
8474: LD_INT 1
8476: DEC
8477: ST_TO_ADDR
8478: LD_VAR 0 10
8482: PUSH
8483: LD_INT 0
8485: PLUS
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8810
// case dir_list [ c ] of 0 :
8490: LD_VAR 0 10
8494: PUSH
8495: LD_VAR 0 14
8499: ARRAY
8500: PUSH
8501: LD_INT 0
8503: DOUBLE
8504: EQUAL
8505: IFTRUE 8509
8507: GO 8550
8509: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8510: LD_ADDR_VAR 0 8
8514: PUSH
8515: LD_VAR 0 8
8519: PPUSH
8520: LD_INT 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_VAR 0 3
8532: PUSH
8533: LD_VAR 0 4
8537: MINUS
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 2
8547: ST_TO_ADDR
8548: GO 8808
8550: LD_INT 1
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8599
8558: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8559: LD_ADDR_VAR 0 8
8563: PUSH
8564: LD_VAR 0 8
8568: PPUSH
8569: LD_INT 1
8571: PPUSH
8572: LD_VAR 0 2
8576: PUSH
8577: LD_VAR 0 4
8581: PLUS
8582: PUSH
8583: LD_VAR 0 3
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PPUSH
8592: CALL_OW 2
8596: ST_TO_ADDR
8597: GO 8808
8599: LD_INT 2
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8607
8605: GO 8654
8607: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8608: LD_ADDR_VAR 0 8
8612: PUSH
8613: LD_VAR 0 8
8617: PPUSH
8618: LD_INT 1
8620: PPUSH
8621: LD_VAR 0 2
8625: PUSH
8626: LD_VAR 0 4
8630: PLUS
8631: PUSH
8632: LD_VAR 0 3
8636: PUSH
8637: LD_VAR 0 4
8641: PLUS
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 2
8651: ST_TO_ADDR
8652: GO 8808
8654: LD_INT 3
8656: DOUBLE
8657: EQUAL
8658: IFTRUE 8662
8660: GO 8703
8662: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8663: LD_ADDR_VAR 0 8
8667: PUSH
8668: LD_VAR 0 8
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: LD_VAR 0 2
8680: PUSH
8681: LD_VAR 0 3
8685: PUSH
8686: LD_VAR 0 4
8690: PLUS
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 2
8700: ST_TO_ADDR
8701: GO 8808
8703: LD_INT 4
8705: DOUBLE
8706: EQUAL
8707: IFTRUE 8711
8709: GO 8752
8711: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8712: LD_ADDR_VAR 0 8
8716: PUSH
8717: LD_VAR 0 8
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: LD_VAR 0 2
8729: PUSH
8730: LD_VAR 0 4
8734: MINUS
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 2
8749: ST_TO_ADDR
8750: GO 8808
8752: LD_INT 5
8754: DOUBLE
8755: EQUAL
8756: IFTRUE 8760
8758: GO 8807
8760: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8761: LD_ADDR_VAR 0 8
8765: PUSH
8766: LD_VAR 0 8
8770: PPUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 2
8778: PUSH
8779: LD_VAR 0 4
8783: MINUS
8784: PUSH
8785: LD_VAR 0 3
8789: PUSH
8790: LD_VAR 0 4
8794: MINUS
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 2
8804: ST_TO_ADDR
8805: GO 8808
8807: POP
8808: GO 8487
8810: POP
8811: POP
// if dist < 30 then
8812: LD_VAR 0 4
8816: PUSH
8817: LD_INT 30
8819: LESS
8820: IFFALSE 8832
// c = 1 else
8822: LD_ADDR_VAR 0 14
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
8830: GO 8840
// c = 2 ;
8832: LD_ADDR_VAR 0 14
8836: PUSH
8837: LD_INT 2
8839: ST_TO_ADDR
// b = 1 ;
8840: LD_ADDR_VAR 0 11
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8848: LD_VAR 0 11
8852: PUSH
8853: LD_VAR 0 4
8857: PUSH
8858: LD_INT 1
8860: MINUS
8861: LESSEQUAL
8862: IFFALSE 9290
// begin if 0 in dir_list and 1 in dir_list then
8864: LD_INT 0
8866: PUSH
8867: LD_VAR 0 10
8871: IN
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: LD_VAR 0 10
8880: IN
8881: AND
8882: IFFALSE 8934
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8884: LD_ADDR_VAR 0 8
8888: PUSH
8889: LD_VAR 0 8
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: LD_VAR 0 2
8901: PUSH
8902: LD_VAR 0 11
8906: PLUS
8907: PUSH
8908: LD_VAR 0 3
8912: PUSH
8913: LD_VAR 0 4
8917: MINUS
8918: PUSH
8919: LD_VAR 0 11
8923: PLUS
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 2
8933: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8934: LD_INT 1
8936: PUSH
8937: LD_VAR 0 10
8941: IN
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_VAR 0 10
8950: IN
8951: AND
8952: IFFALSE 8998
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8954: LD_ADDR_VAR 0 8
8958: PUSH
8959: LD_VAR 0 8
8963: PPUSH
8964: LD_INT 1
8966: PPUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_VAR 0 4
8976: PLUS
8977: PUSH
8978: LD_VAR 0 3
8982: PUSH
8983: LD_VAR 0 11
8987: PLUS
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PPUSH
8993: CALL_OW 2
8997: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
8998: LD_INT 2
9000: PUSH
9001: LD_VAR 0 10
9005: IN
9006: PUSH
9007: LD_INT 3
9009: PUSH
9010: LD_VAR 0 10
9014: IN
9015: AND
9016: IFFALSE 9068
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9018: LD_ADDR_VAR 0 8
9022: PUSH
9023: LD_VAR 0 8
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 2
9035: PUSH
9036: LD_VAR 0 4
9040: PLUS
9041: PUSH
9042: LD_VAR 0 11
9046: MINUS
9047: PUSH
9048: LD_VAR 0 3
9052: PUSH
9053: LD_VAR 0 4
9057: PLUS
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 2
9067: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9068: LD_INT 3
9070: PUSH
9071: LD_VAR 0 10
9075: IN
9076: PUSH
9077: LD_INT 4
9079: PUSH
9080: LD_VAR 0 10
9084: IN
9085: AND
9086: IFFALSE 9138
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9088: LD_ADDR_VAR 0 8
9092: PUSH
9093: LD_VAR 0 8
9097: PPUSH
9098: LD_INT 1
9100: PPUSH
9101: LD_VAR 0 2
9105: PUSH
9106: LD_VAR 0 11
9110: MINUS
9111: PUSH
9112: LD_VAR 0 3
9116: PUSH
9117: LD_VAR 0 4
9121: PLUS
9122: PUSH
9123: LD_VAR 0 11
9127: MINUS
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 2
9137: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9138: LD_INT 4
9140: PUSH
9141: LD_VAR 0 10
9145: IN
9146: PUSH
9147: LD_INT 5
9149: PUSH
9150: LD_VAR 0 10
9154: IN
9155: AND
9156: IFFALSE 9202
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9158: LD_ADDR_VAR 0 8
9162: PUSH
9163: LD_VAR 0 8
9167: PPUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_VAR 0 2
9175: PUSH
9176: LD_VAR 0 4
9180: MINUS
9181: PUSH
9182: LD_VAR 0 3
9186: PUSH
9187: LD_VAR 0 11
9191: MINUS
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: CALL_OW 2
9201: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9202: LD_INT 5
9204: PUSH
9205: LD_VAR 0 10
9209: IN
9210: PUSH
9211: LD_INT 0
9213: PUSH
9214: LD_VAR 0 10
9218: IN
9219: AND
9220: IFFALSE 9272
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9222: LD_ADDR_VAR 0 8
9226: PUSH
9227: LD_VAR 0 8
9231: PPUSH
9232: LD_INT 1
9234: PPUSH
9235: LD_VAR 0 2
9239: PUSH
9240: LD_VAR 0 4
9244: MINUS
9245: PUSH
9246: LD_VAR 0 11
9250: PLUS
9251: PUSH
9252: LD_VAR 0 3
9256: PUSH
9257: LD_VAR 0 4
9261: MINUS
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 2
9271: ST_TO_ADDR
// b = b + c end ;
9272: LD_ADDR_VAR 0 11
9276: PUSH
9277: LD_VAR 0 11
9281: PUSH
9282: LD_VAR 0 14
9286: PLUS
9287: ST_TO_ADDR
9288: GO 8848
// if list_coords = 0 then
9290: LD_VAR 0 8
9294: PUSH
9295: LD_INT 0
9297: EQUAL
9298: IFFALSE 9302
// exit ;
9300: GO 9810
// repeat min_dist = 5000 ;
9302: LD_ADDR_VAR 0 12
9306: PUSH
9307: LD_INT 5000
9309: ST_TO_ADDR
// for b in list_coords do
9310: LD_ADDR_VAR 0 11
9314: PUSH
9315: LD_VAR 0 8
9319: PUSH
9320: FOR_IN
9321: IFFALSE 9380
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9323: LD_ADDR_VAR 0 13
9327: PUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_VAR 0 11
9337: PUSH
9338: LD_INT 1
9340: ARRAY
9341: PPUSH
9342: LD_VAR 0 11
9346: PUSH
9347: LD_INT 2
9349: ARRAY
9350: PPUSH
9351: CALL_OW 297
9355: ST_TO_ADDR
// if temp_dist < min_dist then
9356: LD_VAR 0 13
9360: PUSH
9361: LD_VAR 0 12
9365: LESS
9366: IFFALSE 9378
// min_dist = temp_dist ;
9368: LD_ADDR_VAR 0 12
9372: PUSH
9373: LD_VAR 0 13
9377: ST_TO_ADDR
// end ;
9378: GO 9320
9380: POP
9381: POP
// c = 0 ;
9382: LD_ADDR_VAR 0 14
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// repeat c = c + 1 ;
9390: LD_ADDR_VAR 0 14
9394: PUSH
9395: LD_VAR 0 14
9399: PUSH
9400: LD_INT 1
9402: PLUS
9403: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9404: LD_VAR 0 1
9408: PPUSH
9409: LD_VAR 0 8
9413: PUSH
9414: LD_VAR 0 14
9418: ARRAY
9419: PUSH
9420: LD_INT 1
9422: ARRAY
9423: PPUSH
9424: LD_VAR 0 8
9428: PUSH
9429: LD_VAR 0 14
9433: ARRAY
9434: PUSH
9435: LD_INT 2
9437: ARRAY
9438: PPUSH
9439: CALL_OW 297
9443: PUSH
9444: LD_VAR 0 12
9448: EQUAL
9449: IFFALSE 9514
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: LD_VAR 0 7
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 8
9468: PUSH
9469: LD_VAR 0 14
9473: ARRAY
9474: PPUSH
9475: CALL_OW 2
9479: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9480: LD_ADDR_VAR 0 8
9484: PUSH
9485: LD_VAR 0 8
9489: PPUSH
9490: LD_VAR 0 14
9494: PPUSH
9495: CALL_OW 3
9499: ST_TO_ADDR
// c = c - 1 ;
9500: LD_ADDR_VAR 0 14
9504: PUSH
9505: LD_VAR 0 14
9509: PUSH
9510: LD_INT 1
9512: MINUS
9513: ST_TO_ADDR
// end ; until c = list_coords ;
9514: LD_VAR 0 14
9518: PUSH
9519: LD_VAR 0 8
9523: EQUAL
9524: IFFALSE 9390
// c = 0 ;
9526: LD_ADDR_VAR 0 14
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// if list_nearest > 0 then
9534: LD_VAR 0 7
9538: PUSH
9539: LD_INT 0
9541: GREATER
9542: IFFALSE 9684
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9544: LD_ADDR_VAR 0 15
9548: PUSH
9549: LD_INT 1
9551: PPUSH
9552: LD_VAR 0 7
9556: PPUSH
9557: CALL_OW 12
9561: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9562: LD_ADDR_VAR 0 16
9566: PUSH
9567: LD_VAR 0 7
9571: PUSH
9572: LD_VAR 0 15
9576: ARRAY
9577: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9578: LD_VAR 0 16
9582: PUSH
9583: LD_INT 1
9585: ARRAY
9586: PPUSH
9587: LD_VAR 0 16
9591: PUSH
9592: LD_INT 2
9594: ARRAY
9595: PPUSH
9596: CALL_OW 488
9600: PUSH
9601: LD_INT 0
9603: GREATER
9604: PUSH
9605: LD_VAR 0 16
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: LD_VAR 0 16
9618: PUSH
9619: LD_INT 2
9621: ARRAY
9622: PPUSH
9623: CALL_OW 428
9627: PUSH
9628: LD_INT 0
9630: EQUAL
9631: AND
9632: IFFALSE 9644
// c = 1 else
9634: LD_ADDR_VAR 0 14
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
9642: GO 9664
// list_nearest = Delete ( list_nearest , rand_num ) ;
9644: LD_ADDR_VAR 0 7
9648: PUSH
9649: LD_VAR 0 7
9653: PPUSH
9654: LD_VAR 0 15
9658: PPUSH
9659: CALL_OW 3
9663: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9664: LD_VAR 0 14
9668: PUSH
9669: LD_INT 1
9671: EQUAL
9672: PUSH
9673: LD_VAR 0 7
9677: PUSH
9678: LD_INT 0
9680: EQUAL
9681: OR
9682: IFFALSE 9544
// end ; until c = 1 or list_coords = 0 ;
9684: LD_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: EQUAL
9692: PUSH
9693: LD_VAR 0 8
9697: PUSH
9698: LD_INT 0
9700: EQUAL
9701: OR
9702: IFFALSE 9302
// attempts = attempts + 1 ;
9704: LD_ADDR_VAR 0 17
9708: PUSH
9709: LD_VAR 0 17
9713: PUSH
9714: LD_INT 1
9716: PLUS
9717: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9718: LD_VAR 0 14
9722: PUSH
9723: LD_INT 1
9725: EQUAL
9726: PUSH
9727: LD_VAR 0 17
9731: PUSH
9732: LD_INT 1
9734: GREATER
9735: OR
9736: IFFALSE 8261
// if c = 1 then
9738: LD_VAR 0 14
9742: PUSH
9743: LD_INT 1
9745: EQUAL
9746: IFFALSE 9810
// if add then
9748: LD_VAR 0 5
9752: IFFALSE 9783
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_VAR 0 16
9763: PUSH
9764: LD_INT 1
9766: ARRAY
9767: PPUSH
9768: LD_VAR 0 16
9772: PUSH
9773: LD_INT 2
9775: ARRAY
9776: PPUSH
9777: CALL_OW 171
9781: GO 9810
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_VAR 0 16
9792: PUSH
9793: LD_INT 1
9795: ARRAY
9796: PPUSH
9797: LD_VAR 0 16
9801: PUSH
9802: LD_INT 2
9804: ARRAY
9805: PPUSH
9806: CALL_OW 111
// end ;
9810: LD_VAR 0 6
9814: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9815: LD_INT 0
9817: PPUSH
9818: PPUSH
9819: PPUSH
9820: PPUSH
9821: PPUSH
9822: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9823: LD_VAR 0 1
9827: PPUSH
9828: LD_VAR 0 2
9832: PPUSH
9833: CALL_OW 488
9837: NOT
9838: PUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: CALL_OW 488
9853: NOT
9854: OR
9855: IFFALSE 9868
// begin result = - 1 ;
9857: LD_ADDR_VAR 0 5
9861: PUSH
9862: LD_INT 1
9864: NEG
9865: ST_TO_ADDR
// exit ;
9866: GO 10028
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9868: LD_ADDR_VAR 0 6
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_VAR 0 2
9882: PPUSH
9883: LD_VAR 0 3
9887: PPUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: CALL_OW 298
9897: ST_TO_ADDR
// dist_2 = 99999 ;
9898: LD_ADDR_VAR 0 7
9902: PUSH
9903: LD_INT 99999
9905: ST_TO_ADDR
// for b = 0 to 5 do
9906: LD_ADDR_VAR 0 8
9910: PUSH
9911: DOUBLE
9912: LD_INT 0
9914: DEC
9915: ST_TO_ADDR
9916: LD_INT 5
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10016
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9922: LD_ADDR_VAR 0 9
9926: PUSH
9927: LD_VAR 0 1
9931: PPUSH
9932: LD_VAR 0 8
9936: PPUSH
9937: LD_VAR 0 6
9941: PPUSH
9942: CALL_OW 272
9946: PPUSH
9947: LD_VAR 0 2
9951: PPUSH
9952: LD_VAR 0 8
9956: PPUSH
9957: LD_VAR 0 6
9961: PPUSH
9962: CALL_OW 273
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_VAR 0 4
9976: PPUSH
9977: CALL_OW 298
9981: ST_TO_ADDR
// if temp_dist < dist_2 then
9982: LD_VAR 0 9
9986: PUSH
9987: LD_VAR 0 7
9991: LESS
9992: IFFALSE 10014
// begin dist_2 = temp_dist ;
9994: LD_ADDR_VAR 0 7
9998: PUSH
9999: LD_VAR 0 9
10003: ST_TO_ADDR
// dir = b ;
10004: LD_ADDR_VAR 0 10
10008: PUSH
10009: LD_VAR 0 8
10013: ST_TO_ADDR
// end ; end ;
10014: GO 9919
10016: POP
10017: POP
// result = dir ;
10018: LD_ADDR_VAR 0 5
10022: PUSH
10023: LD_VAR 0 10
10027: ST_TO_ADDR
// end ;
10028: LD_VAR 0 5
10032: RET
// export function MoveToHill ; begin
10033: LD_INT 0
10035: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10036: LD_EXP 44
10040: PPUSH
10041: LD_INT 65
10043: PPUSH
10044: LD_INT 59
10046: PPUSH
10047: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10051: LD_EXP 44
10055: PPUSH
10056: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10060: LD_EXP 45
10064: PPUSH
10065: LD_INT 65
10067: PPUSH
10068: LD_INT 58
10070: PPUSH
10071: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10075: LD_EXP 45
10079: PPUSH
10080: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10084: LD_EXP 46
10088: PPUSH
10089: LD_INT 64
10091: PPUSH
10092: LD_INT 57
10094: PPUSH
10095: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10099: LD_EXP 46
10103: PPUSH
10104: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10108: LD_EXP 47
10112: PPUSH
10113: LD_INT 64
10115: PPUSH
10116: LD_INT 56
10118: PPUSH
10119: CALL_OW 111
// AddComCrawl ( Balei ) ;
10123: LD_EXP 47
10127: PPUSH
10128: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10132: LD_EXP 48
10136: PPUSH
10137: LD_INT 63
10139: PPUSH
10140: LD_INT 55
10142: PPUSH
10143: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10147: LD_EXP 48
10151: PPUSH
10152: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10156: LD_EXP 49
10160: PPUSH
10161: LD_INT 66
10163: PPUSH
10164: LD_INT 58
10166: PPUSH
10167: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10171: LD_EXP 49
10175: PPUSH
10176: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10180: LD_EXP 51
10184: PPUSH
10185: CALL_OW 255
10189: PUSH
10190: LD_INT 6
10192: EQUAL
10193: PUSH
10194: LD_EXP 11
10198: AND
10199: IFFALSE 10225
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10201: LD_EXP 51
10205: PPUSH
10206: LD_INT 63
10208: PPUSH
10209: LD_INT 54
10211: PPUSH
10212: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10216: LD_EXP 51
10220: PPUSH
10221: CALL_OW 197
// end ; end ; end_of_file
10225: LD_VAR 0 1
10229: RET
// export function BurlakDying ; begin
10230: LD_INT 0
10232: PPUSH
// YouLost ( Burlak ) ;
10233: LD_STRING Burlak
10235: PPUSH
10236: CALL_OW 104
// end ;
10240: LD_VAR 0 1
10244: RET
// every 0 0$1 trigger kirovSolds = 0 do
10245: LD_EXP 53
10249: PUSH
10250: LD_INT 0
10252: EQUAL
10253: IFFALSE 10265
10255: GO 10257
10257: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10258: LD_STRING KirovSoldsDie
10260: PPUSH
10261: CALL_OW 104
10265: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10266: LD_EXP 21
10270: PUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 21
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 71
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: AND
10307: IFFALSE 10455
10309: GO 10311
10311: DISABLE
10312: LD_INT 0
10314: PPUSH
// begin case Query ( QExit2 ) of 1 :
10315: LD_STRING QExit2
10317: PPUSH
10318: CALL_OW 97
10322: PUSH
10323: LD_INT 1
10325: DOUBLE
10326: EQUAL
10327: IFTRUE 10331
10329: GO 10435
10331: POP
// begin if IsOk ( Belkov ) then
10332: LD_EXP 48
10336: PPUSH
10337: CALL_OW 302
10341: IFFALSE 10357
// Say ( Belkov , D12-Bel-1 ) else
10343: LD_EXP 48
10347: PPUSH
10348: LD_STRING D12-Bel-1
10350: PPUSH
10351: CALL_OW 88
10355: GO 10417
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10357: LD_INT 22
10359: PUSH
10360: LD_INT 3
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 50
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: LD_INT 26
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PPUSH
10404: LD_STRING D12-RSol1-1
10406: PPUSH
10407: LD_STRING 
10409: PPUSH
10410: LD_INT 0
10412: PPUSH
10413: CALL 7820 0 4
// SetRewards ;
10417: CALL 10458 0 0
// SavePlayerCharacters ;
10421: CALL 10809 0 0
// SaveGlobalVariables ;
10425: CALL 10939 0 0
// YouWin ;
10429: CALL_OW 103
// end ; 2 :
10433: GO 10455
10435: LD_INT 2
10437: DOUBLE
10438: EQUAL
10439: IFTRUE 10443
10441: GO 10454
10443: POP
// begin wait ( 0 0$5 ) ;
10444: LD_INT 175
10446: PPUSH
10447: CALL_OW 67
// enable ;
10451: ENABLE
// end ; end ;
10452: GO 10455
10454: POP
// end ;
10455: PPOPN 1
10457: END
// function SetRewards ; begin
10458: LD_INT 0
10460: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10461: LD_EXP 18
10465: NOT
10466: PUSH
10467: LD_EXP 19
10471: NOT
10472: AND
10473: IFFALSE 10485
// AddMedal ( NoEscape , 1 ) ;
10475: LD_STRING NoEscape
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10485: LD_EXP 18
10489: PUSH
10490: LD_EXP 19
10494: NOT
10495: AND
10496: IFFALSE 10509
// AddMedal ( NoEscape , - 1 ) ;
10498: LD_STRING NoEscape
10500: PPUSH
10501: LD_INT 1
10503: NEG
10504: PPUSH
10505: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10509: LD_EXP 18
10513: NOT
10514: PUSH
10515: LD_EXP 19
10519: AND
10520: IFFALSE 10533
// AddMedal ( NoEscape , - 2 ) ;
10522: LD_STRING NoEscape
10524: PPUSH
10525: LD_INT 2
10527: NEG
10528: PPUSH
10529: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10533: LD_EXP 18
10537: PUSH
10538: LD_EXP 19
10542: AND
10543: IFFALSE 10556
// AddMedal ( NoEscape , - 3 ) ;
10545: LD_STRING NoEscape
10547: PPUSH
10548: LD_INT 3
10550: NEG
10551: PPUSH
10552: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10556: LD_EXP 11
10560: PUSH
10561: LD_EXP 51
10565: PPUSH
10566: CALL_OW 302
10570: AND
10571: PUSH
10572: LD_EXP 20
10576: AND
10577: PUSH
10578: LD_EXP 50
10582: PPUSH
10583: CALL_OW 302
10587: AND
10588: IFFALSE 10600
// AddMedal ( Gnyevko , 1 ) ;
10590: LD_STRING Gnyevko
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10600: LD_EXP 11
10604: NOT
10605: PUSH
10606: LD_EXP 20
10610: AND
10611: PUSH
10612: LD_EXP 50
10616: PPUSH
10617: CALL_OW 302
10621: AND
10622: IFFALSE 10635
// AddMedal ( Gnyevko , - 1 ) ;
10624: LD_STRING Gnyevko
10626: PPUSH
10627: LD_INT 1
10629: NEG
10630: PPUSH
10631: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10635: LD_EXP 11
10639: PUSH
10640: LD_EXP 20
10644: NOT
10645: PUSH
10646: LD_EXP 51
10650: PPUSH
10651: CALL_OW 302
10655: NOT
10656: OR
10657: PUSH
10658: LD_EXP 50
10662: PPUSH
10663: CALL_OW 302
10667: NOT
10668: OR
10669: AND
10670: IFFALSE 10683
// AddMedal ( Gnyevko , - 2 ) ;
10672: LD_STRING Gnyevko
10674: PPUSH
10675: LD_INT 2
10677: NEG
10678: PPUSH
10679: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10683: LD_EXP 11
10687: NOT
10688: PUSH
10689: LD_EXP 20
10693: NOT
10694: AND
10695: PUSH
10696: LD_EXP 51
10700: PPUSH
10701: CALL_OW 302
10705: NOT
10706: PUSH
10707: LD_EXP 50
10711: PPUSH
10712: CALL_OW 302
10716: NOT
10717: AND
10718: OR
10719: IFFALSE 10732
// AddMedal ( Gnyevko , - 3 ) ;
10721: LD_STRING Gnyevko
10723: PPUSH
10724: LD_INT 3
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// if lostComradesCounter = 0 then
10732: LD_EXP 22
10736: PUSH
10737: LD_INT 0
10739: EQUAL
10740: IFFALSE 10754
// AddMedal ( NoLosses , 1 ) else
10742: LD_STRING NoLosses
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 101
10752: GO 10764
// AddMedal ( NoLosses , 0 ) ;
10754: LD_STRING NoLosses
10756: PPUSH
10757: LD_INT 0
10759: PPUSH
10760: CALL_OW 101
// GiveMedals ( Main ) ;
10764: LD_STRING Main
10766: PPUSH
10767: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10771: LD_INT 22
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 21
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: PPUSH
10800: CALL_OW 43
// end ;
10804: LD_VAR 0 1
10808: RET
// function SavePlayerCharacters ; var others ; begin
10809: LD_INT 0
10811: PPUSH
10812: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10813: LD_EXP 43
10817: PPUSH
10818: LD_STRING Burlak
10820: PPUSH
10821: CALL 7999 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10825: LD_EXP 51
10829: PPUSH
10830: LD_STRING Gnyevko
10832: PPUSH
10833: CALL 7999 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10837: LD_EXP 48
10841: PPUSH
10842: LD_STRING Belkov
10844: PPUSH
10845: CALL 7999 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10849: LD_EXP 50
10853: PPUSH
10854: LD_STRING Kirilenkova
10856: PPUSH
10857: CALL 7999 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: LD_INT 22
10868: PUSH
10869: LD_INT 3
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 21
10878: PUSH
10879: LD_INT 1
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 69
10894: PUSH
10895: LD_EXP 43
10899: PUSH
10900: LD_EXP 51
10904: PUSH
10905: LD_EXP 48
10909: PUSH
10910: LD_EXP 50
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: DIFF
10921: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
10922: LD_VAR 0 2
10926: PPUSH
10927: LD_STRING other_survivors
10929: PPUSH
10930: CALL 8055 0 2
// end ;
10934: LD_VAR 0 1
10938: RET
// function SaveGlobalVariables ; begin
10939: LD_INT 0
10941: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
10942: LD_EXP 1
10946: PPUSH
10947: LD_STRING 01_GladstoneStatus
10949: PPUSH
10950: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
10954: LD_EXP 2
10958: PPUSH
10959: LD_STRING 01_JohannaStatus
10961: PPUSH
10962: CALL_OW 39
// end ; end_of_file
10966: LD_VAR 0 1
10970: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
10971: LD_INT 0
10973: PPUSH
10974: PPUSH
10975: PPUSH
// uc_side = 1 ;
10976: LD_ADDR_OWVAR 20
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// hc_class := 1 ;
10984: LD_ADDR_OWVAR 28
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// hc_sex := sex_male ;
10992: LD_ADDR_OWVAR 27
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11000: LD_ADDR_OWVAR 33
11004: PUSH
11005: LD_STRING AmGalRemake
11007: ST_TO_ADDR
// hc_face_number := 1 ;
11008: LD_ADDR_OWVAR 34
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// hc_name := Charles Brown ;
11016: LD_ADDR_OWVAR 26
11020: PUSH
11021: LD_STRING Charles Brown
11023: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11024: LD_ADDR_OWVAR 29
11028: PUSH
11029: LD_INT 12
11031: PUSH
11032: LD_INT 11
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11039: LD_ADDR_OWVAR 31
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 0
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: ST_TO_ADDR
// Charles = CreateHuman ;
11062: LD_ADDR_EXP 39
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// hc_class := 1 ;
11072: LD_ADDR_OWVAR 28
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// hc_sex := sex_female ;
11080: LD_ADDR_OWVAR 27
11084: PUSH
11085: LD_INT 2
11087: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11088: LD_ADDR_OWVAR 33
11092: PUSH
11093: LD_STRING AmGalRemake
11095: ST_TO_ADDR
// hc_face_number := 2 ;
11096: LD_ADDR_OWVAR 34
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_name := Johanna Holland ;
11104: LD_ADDR_OWVAR 26
11108: PUSH
11109: LD_STRING Johanna Holland
11111: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11112: LD_ADDR_OWVAR 29
11116: PUSH
11117: LD_INT 12
11119: PUSH
11120: LD_INT 11
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_EXP 33
11136: PUSH
11137: LD_INT 0
11139: PPUSH
11140: LD_INT 2
11142: PPUSH
11143: CALL_OW 12
11147: PUSH
11148: LD_INT 0
11150: PPUSH
11151: LD_INT 2
11153: PPUSH
11154: CALL_OW 12
11158: PUSH
11159: LD_INT 0
11161: PPUSH
11162: LD_INT 2
11164: PPUSH
11165: CALL_OW 12
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: ST_TO_ADDR
// Johanna = CreateHuman ;
11176: LD_ADDR_EXP 40
11180: PUSH
11181: CALL_OW 44
11185: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11186: LD_EXP 40
11190: PPUSH
11191: LD_INT 19
11193: PPUSH
11194: LD_INT 0
11196: PPUSH
11197: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11201: LD_EXP 40
11205: PPUSH
11206: LD_INT 23
11208: PPUSH
11209: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11213: LD_ADDR_EXP 41
11217: PUSH
11218: LD_STRING Gladstone
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL 7757 0 2
11228: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11229: LD_EXP 41
11233: PPUSH
11234: LD_INT 22
11236: PPUSH
11237: CALL_OW 52
// amApemans = [ ] ;
11241: LD_ADDR_EXP 42
11245: PUSH
11246: EMPTY
11247: ST_TO_ADDR
// for i := 1 to amApeAmount do
11248: LD_ADDR_VAR 0 2
11252: PUSH
11253: DOUBLE
11254: LD_INT 1
11256: DEC
11257: ST_TO_ADDR
11258: LD_EXP 32
11262: PUSH
11263: FOR_TO
11264: IFFALSE 11379
// begin hc_class := class_apeman ;
11266: LD_ADDR_OWVAR 28
11270: PUSH
11271: LD_INT 12
11273: ST_TO_ADDR
// hc_gallery :=  ;
11274: LD_ADDR_OWVAR 33
11278: PUSH
11279: LD_STRING 
11281: ST_TO_ADDR
// hc_name :=  ;
11282: LD_ADDR_OWVAR 26
11286: PUSH
11287: LD_STRING 
11289: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11290: LD_ADDR_OWVAR 31
11294: PUSH
11295: LD_EXP 33
11299: PUSH
11300: LD_INT 0
11302: PPUSH
11303: LD_INT 2
11305: PPUSH
11306: CALL_OW 12
11310: PUSH
11311: LD_INT 0
11313: PPUSH
11314: LD_INT 2
11316: PPUSH
11317: CALL_OW 12
11321: PUSH
11322: LD_INT 0
11324: PPUSH
11325: LD_INT 2
11327: PPUSH
11328: CALL_OW 12
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: ST_TO_ADDR
// ape = CreateHuman ;
11339: LD_ADDR_VAR 0 3
11343: PUSH
11344: CALL_OW 44
11348: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 22
11356: PPUSH
11357: CALL_OW 52
// amApemans = amApemans ^ ape ;
11361: LD_ADDR_EXP 42
11365: PUSH
11366: LD_EXP 42
11370: PUSH
11371: LD_VAR 0 3
11375: ADD
11376: ST_TO_ADDR
// end ;
11377: GO 11263
11379: POP
11380: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11381: LD_INT 23
11383: PPUSH
11384: LD_EXP 30
11388: PPUSH
11389: CALL_OW 234
// end ; end_of_file
11393: LD_VAR 0 1
11397: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11398: LD_INT 0
11400: PPUSH
// PrepareHero ;
11401: CALL 11426 0 0
// PreparePokryshkinTeams ;
11405: CALL 11520 0 0
// PrepareJelena ;
11409: CALL 11785 0 0
// PrepareGnyevko ;
11413: CALL 11817 0 0
// PrepareKurin ;
11417: CALL 11488 0 0
// end ;
11421: LD_VAR 0 1
11425: RET
// function PrepareHero ; begin
11426: LD_INT 0
11428: PPUSH
// uc_side = 3 ;
11429: LD_ADDR_OWVAR 20
11433: PUSH
11434: LD_INT 3
11436: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11437: LD_ADDR_EXP 43
11441: PUSH
11442: LD_STRING Burlak
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: CALL 7757 0 2
11452: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11453: LD_EXP 43
11457: PPUSH
11458: LD_EXP 34
11462: PUSH
11463: LD_INT 1
11465: ARRAY
11466: PPUSH
11467: LD_EXP 34
11471: PUSH
11472: LD_INT 2
11474: ARRAY
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 48
// end ;
11483: LD_VAR 0 1
11487: RET
// function PrepareKurin ; begin
11488: LD_INT 0
11490: PPUSH
// uc_side = 6 ;
11491: LD_ADDR_OWVAR 20
11495: PUSH
11496: LD_INT 6
11498: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11499: LD_ADDR_EXP 52
11503: PUSH
11504: LD_STRING Kurin
11506: PPUSH
11507: LD_INT 0
11509: PPUSH
11510: CALL 7757 0 2
11514: ST_TO_ADDR
// end ;
11515: LD_VAR 0 1
11519: RET
// function PreparePokryshkinTeams ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side = 6 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 6
11530: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11531: LD_ADDR_EXP 44
11535: PUSH
11536: LD_STRING Pokryshkin
11538: PPUSH
11539: LD_INT 0
11541: PPUSH
11542: CALL 7757 0 2
11546: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11547: LD_ADDR_EXP 45
11551: PUSH
11552: LD_STRING Saseda
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL 7757 0 2
11562: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11563: LD_ADDR_EXP 46
11567: PUSH
11568: LD_STRING Jaworska
11570: PPUSH
11571: LD_INT 0
11573: PPUSH
11574: CALL 7757 0 2
11578: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11579: LD_ADDR_EXP 47
11583: PUSH
11584: LD_STRING Balei
11586: PPUSH
11587: LD_INT 0
11589: PPUSH
11590: CALL 7757 0 2
11594: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11595: LD_ADDR_EXP 48
11599: PUSH
11600: LD_STRING Belkov
11602: PPUSH
11603: LD_INT 0
11605: PPUSH
11606: CALL 7757 0 2
11610: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
11611: LD_EXP 44
11615: PPUSH
11616: LD_INT 17
11618: PPUSH
11619: LD_INT 0
11621: PPUSH
11622: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11626: LD_EXP 45
11630: PPUSH
11631: LD_INT 17
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11641: LD_EXP 46
11645: PPUSH
11646: LD_INT 17
11648: PPUSH
11649: LD_INT 0
11651: PPUSH
11652: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11656: LD_EXP 47
11660: PPUSH
11661: LD_INT 17
11663: PPUSH
11664: LD_INT 0
11666: PPUSH
11667: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11671: LD_EXP 48
11675: PPUSH
11676: LD_INT 17
11678: PPUSH
11679: LD_INT 0
11681: PPUSH
11682: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11686: LD_ADDR_EXP 53
11690: PUSH
11691: LD_EXP 44
11695: PUSH
11696: LD_EXP 45
11700: PUSH
11701: LD_EXP 47
11705: PUSH
11706: LD_EXP 48
11710: PUSH
11711: LD_EXP 46
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: ST_TO_ADDR
// if Difficulty < 3 then
11723: LD_OWVAR 67
11727: PUSH
11728: LD_INT 3
11730: LESS
11731: IFFALSE 11780
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11733: LD_ADDR_EXP 49
11737: PUSH
11738: LD_STRING Jaunzeme
11740: PPUSH
11741: LD_INT 0
11743: PPUSH
11744: CALL 7757 0 2
11748: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
11749: LD_EXP 49
11753: PPUSH
11754: LD_INT 17
11756: PPUSH
11757: LD_INT 0
11759: PPUSH
11760: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11764: LD_ADDR_EXP 53
11768: PUSH
11769: LD_EXP 53
11773: PUSH
11774: LD_EXP 49
11778: ADD
11779: ST_TO_ADDR
// end ; end ;
11780: LD_VAR 0 1
11784: RET
// function PrepareJelena ; begin
11785: LD_INT 0
11787: PPUSH
// uc_side = 8 ;
11788: LD_ADDR_OWVAR 20
11792: PUSH
11793: LD_INT 8
11795: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11796: LD_ADDR_EXP 50
11800: PUSH
11801: LD_STRING Kirilenkova
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: CALL 7757 0 2
11811: ST_TO_ADDR
// end ;
11812: LD_VAR 0 1
11816: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11817: LD_INT 0
11819: PPUSH
11820: PPUSH
11821: PPUSH
11822: PPUSH
// uc_side = 8 ;
11823: LD_ADDR_OWVAR 20
11827: PUSH
11828: LD_INT 8
11830: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11831: LD_ADDR_EXP 51
11835: PUSH
11836: LD_STRING Gnyevko
11838: PPUSH
11839: LD_INT 0
11841: PPUSH
11842: CALL 7757 0 2
11846: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11847: LD_ADDR_VAR 0 4
11851: PUSH
11852: LD_EXP 35
11856: PUSH
11857: LD_INT 1
11859: PPUSH
11860: LD_EXP 35
11864: PPUSH
11865: CALL_OW 12
11869: ARRAY
11870: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11871: LD_EXP 51
11875: PPUSH
11876: LD_VAR 0 4
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: LD_VAR 0 4
11889: PUSH
11890: LD_INT 2
11892: ARRAY
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11901: LD_EXP 51
11905: PPUSH
11906: LD_INT 500
11908: PPUSH
11909: CALL_OW 234
// ComHold ( Gnyevko ) ;
11913: LD_EXP 51
11917: PPUSH
11918: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: DOUBLE
11928: LD_INT 1
11930: DEC
11931: ST_TO_ADDR
11932: LD_EXP 24
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_OWVAR 67
11959: ARRAY
11960: MINUS
11961: PUSH
11962: FOR_TO
11963: IFFALSE 12093
// begin uc_side = 0 ;
11965: LD_ADDR_OWVAR 20
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// uc_nation = nation_nature ;
11973: LD_ADDR_OWVAR 21
11977: PUSH
11978: LD_INT 0
11980: ST_TO_ADDR
// hc_class = class_apeman ;
11981: LD_ADDR_OWVAR 28
11985: PUSH
11986: LD_INT 12
11988: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11989: LD_ADDR_OWVAR 31
11993: PUSH
11994: LD_EXP 25
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PUSH
12003: LD_EXP 25
12007: PUSH
12008: LD_INT 2
12010: ARRAY
12011: PUSH
12012: LD_EXP 25
12016: PUSH
12017: LD_INT 3
12019: ARRAY
12020: PUSH
12021: LD_EXP 25
12025: PUSH
12026: LD_INT 4
12028: ARRAY
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12036: LD_ADDR_OWVAR 35
12040: PUSH
12041: LD_EXP 31
12045: ST_TO_ADDR
// un = CreateHuman ;
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: CALL_OW 44
12055: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12056: LD_VAR 0 2
12060: PPUSH
12061: LD_EXP 51
12065: PPUSH
12066: CALL_OW 250
12070: PPUSH
12071: LD_EXP 51
12075: PPUSH
12076: CALL_OW 251
12080: PPUSH
12081: LD_INT 8
12083: PPUSH
12084: LD_INT 0
12086: PPUSH
12087: CALL_OW 50
// end ;
12091: GO 11962
12093: POP
12094: POP
// end ; end_of_file
12095: LD_VAR 0 1
12099: RET
// export function PrepareNature ; var i , un ; begin
12100: LD_INT 0
12102: PPUSH
12103: PPUSH
12104: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12105: LD_ADDR_VAR 0 2
12109: PUSH
12110: DOUBLE
12111: LD_INT 1
12113: DEC
12114: ST_TO_ADDR
12115: LD_EXP 24
12119: PUSH
12120: LD_INT 1
12122: ARRAY
12123: PUSH
12124: FOR_TO
12125: IFFALSE 12235
// begin uc_side = 0 ;
12127: LD_ADDR_OWVAR 20
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// uc_nation = nation_nature ;
12135: LD_ADDR_OWVAR 21
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// hc_class = class_apeman ;
12143: LD_ADDR_OWVAR 28
12147: PUSH
12148: LD_INT 12
12150: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12151: LD_ADDR_OWVAR 31
12155: PUSH
12156: LD_EXP 25
12160: PUSH
12161: LD_INT 1
12163: ARRAY
12164: PUSH
12165: LD_EXP 25
12169: PUSH
12170: LD_INT 2
12172: ARRAY
12173: PUSH
12174: LD_EXP 25
12178: PUSH
12179: LD_INT 3
12181: ARRAY
12182: PUSH
12183: LD_EXP 25
12187: PUSH
12188: LD_INT 4
12190: ARRAY
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12198: LD_ADDR_OWVAR 35
12202: PUSH
12203: LD_EXP 31
12207: ST_TO_ADDR
// un = CreateHuman ;
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: CALL_OW 44
12217: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12218: LD_VAR 0 3
12222: PPUSH
12223: LD_INT 16
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 49
// end ;
12233: GO 12124
12235: POP
12236: POP
// for i := 1 to animalsAmount [ 2 ] do
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: DOUBLE
12243: LD_INT 1
12245: DEC
12246: ST_TO_ADDR
12247: LD_EXP 24
12251: PUSH
12252: LD_INT 2
12254: ARRAY
12255: PUSH
12256: FOR_TO
12257: IFFALSE 12367
// begin uc_side = 0 ;
12259: LD_ADDR_OWVAR 20
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// uc_nation = nation_nature ;
12267: LD_ADDR_OWVAR 21
12271: PUSH
12272: LD_INT 0
12274: ST_TO_ADDR
// hc_class = class_phororhacos ;
12275: LD_ADDR_OWVAR 28
12279: PUSH
12280: LD_INT 18
12282: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12283: LD_ADDR_OWVAR 31
12287: PUSH
12288: LD_EXP 25
12292: PUSH
12293: LD_INT 1
12295: ARRAY
12296: PUSH
12297: LD_EXP 25
12301: PUSH
12302: LD_INT 2
12304: ARRAY
12305: PUSH
12306: LD_EXP 25
12310: PUSH
12311: LD_INT 3
12313: ARRAY
12314: PUSH
12315: LD_EXP 25
12319: PUSH
12320: LD_INT 4
12322: ARRAY
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12330: LD_ADDR_OWVAR 35
12334: PUSH
12335: LD_EXP 26
12339: ST_TO_ADDR
// un = CreateHuman ;
12340: LD_ADDR_VAR 0 3
12344: PUSH
12345: CALL_OW 44
12349: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12350: LD_VAR 0 3
12354: PPUSH
12355: LD_INT 15
12357: PPUSH
12358: LD_INT 0
12360: PPUSH
12361: CALL_OW 49
// end ;
12365: GO 12256
12367: POP
12368: POP
// for i := 1 to animalsAmount [ 3 ] do
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: DOUBLE
12375: LD_INT 1
12377: DEC
12378: ST_TO_ADDR
12379: LD_EXP 24
12383: PUSH
12384: LD_INT 3
12386: ARRAY
12387: PUSH
12388: FOR_TO
12389: IFFALSE 12499
// begin uc_side = 0 ;
12391: LD_ADDR_OWVAR 20
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// uc_nation = nation_nature ;
12399: LD_ADDR_OWVAR 21
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// hc_class = class_tiger ;
12407: LD_ADDR_OWVAR 28
12411: PUSH
12412: LD_INT 14
12414: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12415: LD_ADDR_OWVAR 31
12419: PUSH
12420: LD_EXP 25
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PUSH
12429: LD_EXP 25
12433: PUSH
12434: LD_INT 2
12436: ARRAY
12437: PUSH
12438: LD_EXP 25
12442: PUSH
12443: LD_INT 3
12445: ARRAY
12446: PUSH
12447: LD_EXP 25
12451: PUSH
12452: LD_INT 4
12454: ARRAY
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12462: LD_ADDR_OWVAR 35
12466: PUSH
12467: LD_EXP 26
12471: ST_TO_ADDR
// un = CreateHuman ;
12472: LD_ADDR_VAR 0 3
12476: PUSH
12477: CALL_OW 44
12481: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 15
12489: PPUSH
12490: LD_INT 0
12492: PPUSH
12493: CALL_OW 49
// end ;
12497: GO 12388
12499: POP
12500: POP
// for i := 1 to animalsAmount [ 4 ] do
12501: LD_ADDR_VAR 0 2
12505: PUSH
12506: DOUBLE
12507: LD_INT 1
12509: DEC
12510: ST_TO_ADDR
12511: LD_EXP 24
12515: PUSH
12516: LD_INT 4
12518: ARRAY
12519: PUSH
12520: FOR_TO
12521: IFFALSE 12631
// begin uc_side = 0 ;
12523: LD_ADDR_OWVAR 20
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// uc_nation = nation_nature ;
12531: LD_ADDR_OWVAR 21
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// hc_class = 21 ;
12539: LD_ADDR_OWVAR 28
12543: PUSH
12544: LD_INT 21
12546: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12547: LD_ADDR_OWVAR 31
12551: PUSH
12552: LD_EXP 25
12556: PUSH
12557: LD_INT 1
12559: ARRAY
12560: PUSH
12561: LD_EXP 25
12565: PUSH
12566: LD_INT 2
12568: ARRAY
12569: PUSH
12570: LD_EXP 25
12574: PUSH
12575: LD_INT 3
12577: ARRAY
12578: PUSH
12579: LD_EXP 25
12583: PUSH
12584: LD_INT 4
12586: ARRAY
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12594: LD_ADDR_OWVAR 35
12598: PUSH
12599: LD_EXP 26
12603: ST_TO_ADDR
// un = CreateHuman ;
12604: LD_ADDR_VAR 0 3
12608: PUSH
12609: CALL_OW 44
12613: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 15
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: CALL_OW 49
// end ;
12629: GO 12520
12631: POP
12632: POP
// end ; end_of_file
12633: LD_VAR 0 1
12637: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12638: LD_VAR 0 1
12642: PUSH
12643: LD_EXP 43
12647: EQUAL
12648: PUSH
12649: LD_EXP 50
12653: PPUSH
12654: CALL_OW 255
12658: PUSH
12659: LD_INT 3
12661: EQUAL
12662: NOT
12663: AND
12664: PUSH
12665: LD_EXP 50
12669: PPUSH
12670: CALL_OW 302
12674: NOT
12675: AND
12676: IFFALSE 12682
// BurlakDying ;
12678: CALL 10230 0 0
// if unit = Gladstone then
12682: LD_VAR 0 1
12686: PUSH
12687: LD_EXP 41
12691: EQUAL
12692: IFFALSE 12702
// gladstoneStatus = 0 ;
12694: LD_ADDR_EXP 1
12698: PUSH
12699: LD_INT 0
12701: ST_TO_ADDR
// if unit = Johanna then
12702: LD_VAR 0 1
12706: PUSH
12707: LD_EXP 40
12711: EQUAL
12712: IFFALSE 12722
// johannaStatus = 0 ;
12714: LD_ADDR_EXP 2
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// end ;
12722: PPOPN 1
12724: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12725: LD_VAR 0 1
12729: PUSH
12730: LD_EXP 43
12734: EQUAL
12735: IFFALSE 12741
// BurlakDying ;
12737: CALL 10230 0 0
// if GetSide ( unit ) = 3 then
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 255
12750: PUSH
12751: LD_INT 3
12753: EQUAL
12754: IFFALSE 12770
// lostComradesCounter = lostComradesCounter + 1 ;
12756: LD_ADDR_EXP 22
12760: PUSH
12761: LD_EXP 22
12765: PUSH
12766: LD_INT 1
12768: PLUS
12769: ST_TO_ADDR
// if unit in kirovSolds then
12770: LD_VAR 0 1
12774: PUSH
12775: LD_EXP 53
12779: IN
12780: IFFALSE 12798
// kirovSolds = kirovSolds diff unit ;
12782: LD_ADDR_EXP 53
12786: PUSH
12787: LD_EXP 53
12791: PUSH
12792: LD_VAR 0 1
12796: DIFF
12797: ST_TO_ADDR
// end ;
12798: PPOPN 1
12800: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12801: LD_VAR 0 1
12805: PUSH
12806: LD_INT 3
12808: EQUAL
12809: PUSH
12810: LD_VAR 0 2
12814: PUSH
12815: LD_INT 1
12817: EQUAL
12818: AND
12819: PUSH
12820: LD_VAR 0 1
12824: PUSH
12825: LD_INT 1
12827: EQUAL
12828: PUSH
12829: LD_VAR 0 2
12833: PUSH
12834: LD_INT 3
12836: EQUAL
12837: AND
12838: PUSH
12839: LD_EXP 16
12843: PUSH
12844: LD_INT 1
12846: EQUAL
12847: AND
12848: OR
12849: IFFALSE 12855
// Dial_SecondAttack ;
12851: CALL 5810 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 3
12862: EQUAL
12863: PUSH
12864: LD_VAR 0 2
12868: PUSH
12869: LD_INT 6
12871: EQUAL
12872: AND
12873: PUSH
12874: LD_EXP 17
12878: NOT
12879: AND
12880: IFFALSE 12886
// Dialogue_AttackComrade ;
12882: CALL 4005 0 0
// end ; end_of_file
12886: PPOPN 2
12888: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// if not missionNumber then
12893: LD_VAR 0 2
12897: NOT
12898: IFFALSE 12902
// exit ;
12900: GO 13032
// achiv := false ;
12902: LD_ADDR_VAR 0 7
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// case campaignNumber of 1 :
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 1
12917: DOUBLE
12918: EQUAL
12919: IFTRUE 12923
12921: GO 12934
12923: POP
// achiv := ACH_GOTA ; 2 :
12924: LD_ADDR_VAR 0 7
12928: PUSH
12929: LD_STRING ACH_GOTA
12931: ST_TO_ADDR
12932: GO 12984
12934: LD_INT 2
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 12945
12942: POP
// ; 3 :
12943: GO 12984
12945: LD_INT 3
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12964
12953: POP
// achiv := ACH_MOTSU ; 4 :
12954: LD_ADDR_VAR 0 7
12958: PUSH
12959: LD_STRING ACH_MOTSU
12961: ST_TO_ADDR
12962: GO 12984
12964: LD_INT 4
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 12983
12972: POP
// achiv := ACH_LOP ; end ;
12973: LD_ADDR_VAR 0 7
12977: PUSH
12978: LD_STRING ACH_LOP
12980: ST_TO_ADDR
12981: GO 12984
12983: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
12984: LD_OWVAR 67
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: PUSH
12993: LD_VAR 0 7
12997: AND
12998: PUSH
12999: LD_VAR 0 3
13003: AND
13004: PUSH
13005: LD_VAR 0 4
13009: AND
13010: PUSH
13011: LD_VAR 0 5
13015: AND
13016: IFFALSE 13032
// SetAchievementEX ( achiv , missionNumber ) ;
13018: LD_VAR 0 7
13022: PPUSH
13023: LD_VAR 0 2
13027: PPUSH
13028: CALL_OW 564
// end ;
13032: LD_VAR 0 6
13036: RET
// export function SA_BehemothConstructed ; begin
13037: LD_INT 0
13039: PPUSH
// SetAchievement ( ACH_SMC ) ;
13040: LD_STRING ACH_SMC
13042: PPUSH
13043: CALL_OW 543
// end ;
13047: LD_VAR 0 1
13051: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13052: LD_VAR 0 2
13056: PUSH
13057: LD_INT 1
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13072
13065: POP
// HackUnlimitedResources ; 2 :
13066: CALL 13256 0 0
13070: GO 13253
13072: LD_INT 2
13074: DOUBLE
13075: EQUAL
13076: IFTRUE 13080
13078: GO 13087
13080: POP
// HackSetLevel10 ; 3 :
13081: CALL 13389 0 0
13085: GO 13253
13087: LD_INT 3
13089: DOUBLE
13090: EQUAL
13091: IFTRUE 13095
13093: GO 13102
13095: POP
// HackSetLevel10YourUnits ; 4 :
13096: CALL 13474 0 0
13100: GO 13253
13102: LD_INT 4
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13132
13110: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: LD_VAR 0 5
13125: PPUSH
13126: CALL 13564 0 3
13130: GO 13253
13132: LD_INT 5
13134: DOUBLE
13135: EQUAL
13136: IFTRUE 13140
13138: GO 13147
13140: POP
// HackSpawnVehicle ; 6 :
13141: CALL 13625 0 0
13145: GO 13253
13147: LD_INT 6
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13162
13155: POP
// HackInvincible ; 7 :
13156: CALL 14171 0 0
13160: GO 13253
13162: LD_INT 7
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13177
13170: POP
// HackInvisible ; 8 :
13171: CALL 14282 0 0
13175: GO 13253
13177: LD_INT 8
13179: DOUBLE
13180: EQUAL
13181: IFTRUE 13185
13183: GO 13192
13185: POP
// HackChangeYourSide ; 9 :
13186: CALL 14339 0 0
13190: GO 13253
13192: LD_INT 9
13194: DOUBLE
13195: EQUAL
13196: IFTRUE 13200
13198: GO 13207
13200: POP
// HackChangeUnitSide ; 10 :
13201: CALL 14381 0 0
13205: GO 13253
13207: LD_INT 10
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13222
13215: POP
// HackFog ; 11 :
13216: CALL 14482 0 0
13220: GO 13253
13222: LD_INT 11
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13237
13230: POP
// HackApeman ; 12 :
13231: CALL 14497 0 0
13235: GO 13253
13237: LD_INT 12
13239: DOUBLE
13240: EQUAL
13241: IFTRUE 13245
13243: GO 13252
13245: POP
// HackBoom ; end ;
13246: CALL 14582 0 0
13250: GO 13253
13252: POP
// end ;
13253: PPOPN 6
13255: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13262: LD_ADDR_VAR 0 4
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_OWVAR 2
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 30
13284: PUSH
13285: LD_INT 0
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 30
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// if not tmp then
13316: LD_VAR 0 4
13320: NOT
13321: IFFALSE 13325
// exit ;
13323: GO 13384
// for i in tmp do
13325: LD_ADDR_VAR 0 2
13329: PUSH
13330: LD_VAR 0 4
13334: PUSH
13335: FOR_IN
13336: IFFALSE 13382
// for j = 1 to 3 do
13338: LD_ADDR_VAR 0 3
13342: PUSH
13343: DOUBLE
13344: LD_INT 1
13346: DEC
13347: ST_TO_ADDR
13348: LD_INT 3
13350: PUSH
13351: FOR_TO
13352: IFFALSE 13378
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13354: LD_VAR 0 2
13358: PPUSH
13359: CALL_OW 274
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 99999
13371: PPUSH
13372: CALL_OW 277
13376: GO 13351
13378: POP
13379: POP
13380: GO 13335
13382: POP
13383: POP
// end ;
13384: LD_VAR 0 1
13388: RET
// export function HackSetLevel10 ; var i , j ; begin
13389: LD_INT 0
13391: PPUSH
13392: PPUSH
13393: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13394: LD_ADDR_VAR 0 2
13398: PUSH
13399: LD_INT 21
13401: PUSH
13402: LD_INT 1
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13467
// if IsSelected ( i ) then
13417: LD_VAR 0 2
13421: PPUSH
13422: CALL_OW 306
13426: IFFALSE 13465
// begin for j := 1 to 4 do
13428: LD_ADDR_VAR 0 3
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_INT 4
13440: PUSH
13441: FOR_TO
13442: IFFALSE 13463
// SetSkill ( i , j , 10 ) ;
13444: LD_VAR 0 2
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 10
13456: PPUSH
13457: CALL_OW 237
13461: GO 13441
13463: POP
13464: POP
// end ;
13465: GO 13414
13467: POP
13468: POP
// end ;
13469: LD_VAR 0 1
13473: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13474: LD_INT 0
13476: PPUSH
13477: PPUSH
13478: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13479: LD_ADDR_VAR 0 2
13483: PUSH
13484: LD_INT 22
13486: PUSH
13487: LD_OWVAR 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 21
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 69
13514: PUSH
13515: FOR_IN
13516: IFFALSE 13557
// begin for j := 1 to 4 do
13518: LD_ADDR_VAR 0 3
13522: PUSH
13523: DOUBLE
13524: LD_INT 1
13526: DEC
13527: ST_TO_ADDR
13528: LD_INT 4
13530: PUSH
13531: FOR_TO
13532: IFFALSE 13553
// SetSkill ( i , j , 10 ) ;
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 10
13546: PPUSH
13547: CALL_OW 237
13551: GO 13531
13553: POP
13554: POP
// end ;
13555: GO 13515
13557: POP
13558: POP
// end ;
13559: LD_VAR 0 1
13563: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13564: LD_INT 0
13566: PPUSH
// uc_side := your_side ;
13567: LD_ADDR_OWVAR 20
13571: PUSH
13572: LD_OWVAR 2
13576: ST_TO_ADDR
// uc_nation := nation ;
13577: LD_ADDR_OWVAR 21
13581: PUSH
13582: LD_VAR 0 1
13586: ST_TO_ADDR
// InitHc ;
13587: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13591: LD_INT 0
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13608: CALL_OW 44
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: CALL_OW 51
// end ;
13620: LD_VAR 0 4
13624: RET
// export function HackSpawnVehicle ; begin
13625: LD_INT 0
13627: PPUSH
// uc_side := your_side ;
13628: LD_ADDR_OWVAR 20
13632: PUSH
13633: LD_OWVAR 2
13637: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13638: LD_ADDR_OWVAR 21
13642: PUSH
13643: LD_INT 1
13645: PPUSH
13646: LD_INT 3
13648: PPUSH
13649: CALL_OW 12
13653: ST_TO_ADDR
// InitVc ;
13654: CALL_OW 20
// case uc_nation of 1 :
13658: LD_OWVAR 21
13662: PUSH
13663: LD_INT 1
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13815
13671: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
13672: LD_ADDR_OWVAR 37
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: LD_INT 3
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 1
13701: PPUSH
13702: LD_INT 5
13704: PPUSH
13705: CALL_OW 12
13709: ARRAY
13710: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13711: LD_ADDR_OWVAR 39
13715: PUSH
13716: LD_INT 1
13718: PPUSH
13719: LD_INT 3
13721: PPUSH
13722: CALL_OW 12
13726: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
13727: LD_ADDR_OWVAR 38
13731: PUSH
13732: LD_INT 1
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 3
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 1
13748: PPUSH
13749: LD_INT 3
13751: PPUSH
13752: CALL_OW 12
13756: ARRAY
13757: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: LD_INT 4
13768: PUSH
13769: LD_INT 5
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: LD_INT 7
13777: PUSH
13778: LD_INT 8
13780: PUSH
13781: LD_INT 9
13783: PUSH
13784: LD_INT 10
13786: PUSH
13787: LD_INT 6
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 1
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 12
13811: ARRAY
13812: ST_TO_ADDR
// end ; 2 :
13813: GO 14080
13815: LD_INT 2
13817: DOUBLE
13818: EQUAL
13819: IFTRUE 13823
13821: GO 13947
13823: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
13824: LD_ADDR_OWVAR 37
13828: PUSH
13829: LD_INT 11
13831: PUSH
13832: LD_INT 12
13834: PUSH
13835: LD_INT 13
13837: PUSH
13838: LD_INT 14
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13859: LD_ADDR_OWVAR 39
13863: PUSH
13864: LD_INT 1
13866: PPUSH
13867: LD_INT 3
13869: PPUSH
13870: CALL_OW 12
13874: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
13875: LD_ADDR_OWVAR 38
13879: PUSH
13880: LD_INT 1
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: LD_INT 5
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 1
13896: PPUSH
13897: LD_INT 3
13899: PPUSH
13900: CALL_OW 12
13904: ARRAY
13905: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
13906: LD_ADDR_OWVAR 40
13910: PUSH
13911: LD_INT 24
13913: PUSH
13914: LD_INT 26
13916: PUSH
13917: LD_INT 27
13919: PUSH
13920: LD_INT 28
13922: PUSH
13923: LD_INT 29
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 1
13935: PPUSH
13936: LD_INT 5
13938: PPUSH
13939: CALL_OW 12
13943: ARRAY
13944: ST_TO_ADDR
// end ; 3 :
13945: GO 14080
13947: LD_INT 3
13949: DOUBLE
13950: EQUAL
13951: IFTRUE 13955
13953: GO 14079
13955: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13956: LD_ADDR_OWVAR 37
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 23
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_INT 24
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 1
13981: PPUSH
13982: LD_INT 4
13984: PPUSH
13985: CALL_OW 12
13989: ARRAY
13990: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13991: LD_ADDR_OWVAR 39
13995: PUSH
13996: LD_INT 1
13998: PPUSH
13999: LD_INT 3
14001: PPUSH
14002: CALL_OW 12
14006: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
14007: LD_ADDR_OWVAR 38
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: LD_INT 3
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 1
14024: PPUSH
14025: LD_INT 2
14027: PPUSH
14028: CALL_OW 12
14032: ARRAY
14033: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
14034: LD_ADDR_OWVAR 40
14038: PUSH
14039: LD_INT 42
14041: PUSH
14042: LD_INT 43
14044: PUSH
14045: LD_INT 44
14047: PUSH
14048: LD_INT 46
14050: PUSH
14051: LD_INT 48
14053: PUSH
14054: LD_INT 47
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 1
14067: PPUSH
14068: LD_INT 6
14070: PPUSH
14071: CALL_OW 12
14075: ARRAY
14076: ST_TO_ADDR
// end ; end ;
14077: GO 14080
14079: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14080: CALL_OW 45
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 51
// end ;
14092: LD_VAR 0 1
14096: RET
// export invincible ; every 1 do
14097: GO 14099
14099: DISABLE
// invincible := [ ] ;
14100: LD_ADDR_EXP 54
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
14107: END
// every 10 do var i ;
14108: GO 14110
14110: DISABLE
14111: LD_INT 0
14113: PPUSH
// begin enable ;
14114: ENABLE
// if not invincible then
14115: LD_EXP 54
14119: NOT
14120: IFFALSE 14124
// exit ;
14122: GO 14168
// for i in invincible do
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_EXP 54
14133: PUSH
14134: FOR_IN
14135: IFFALSE 14166
// if GetLives ( i ) < 1000 then
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 256
14146: PUSH
14147: LD_INT 1000
14149: LESS
14150: IFFALSE 14164
// SetLives ( i , 1000 ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_INT 1000
14159: PPUSH
14160: CALL_OW 234
14164: GO 14134
14166: POP
14167: POP
// end ;
14168: PPOPN 1
14170: END
// export function HackInvincible ; var i ; begin
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14175: LD_ADDR_VAR 0 2
14179: PUSH
14180: LD_INT 2
14182: PUSH
14183: LD_INT 21
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 69
14212: PUSH
14213: FOR_IN
14214: IFFALSE 14275
// if IsSelected ( i ) then
14216: LD_VAR 0 2
14220: PPUSH
14221: CALL_OW 306
14225: IFFALSE 14273
// begin if i in invincible then
14227: LD_VAR 0 2
14231: PUSH
14232: LD_EXP 54
14236: IN
14237: IFFALSE 14257
// invincible := invincible diff i else
14239: LD_ADDR_EXP 54
14243: PUSH
14244: LD_EXP 54
14248: PUSH
14249: LD_VAR 0 2
14253: DIFF
14254: ST_TO_ADDR
14255: GO 14273
// invincible := invincible union i ;
14257: LD_ADDR_EXP 54
14261: PUSH
14262: LD_EXP 54
14266: PUSH
14267: LD_VAR 0 2
14271: UNION
14272: ST_TO_ADDR
// end ;
14273: GO 14213
14275: POP
14276: POP
// end ;
14277: LD_VAR 0 1
14281: RET
// export function HackInvisible ; var i , j ; begin
14282: LD_INT 0
14284: PPUSH
14285: PPUSH
14286: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14287: LD_ADDR_VAR 0 2
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 69
14306: PUSH
14307: FOR_IN
14308: IFFALSE 14332
// if IsSelected ( i ) then
14310: LD_VAR 0 2
14314: PPUSH
14315: CALL_OW 306
14319: IFFALSE 14330
// begin ComForceInvisible ( i ) ;
14321: LD_VAR 0 2
14325: PPUSH
14326: CALL_OW 496
// end ;
14330: GO 14307
14332: POP
14333: POP
// end ;
14334: LD_VAR 0 1
14338: RET
// export function HackChangeYourSide ; begin
14339: LD_INT 0
14341: PPUSH
// if your_side = 8 then
14342: LD_OWVAR 2
14346: PUSH
14347: LD_INT 8
14349: EQUAL
14350: IFFALSE 14362
// your_side := 0 else
14352: LD_ADDR_OWVAR 2
14356: PUSH
14357: LD_INT 0
14359: ST_TO_ADDR
14360: GO 14376
// your_side := your_side + 1 ;
14362: LD_ADDR_OWVAR 2
14366: PUSH
14367: LD_OWVAR 2
14371: PUSH
14372: LD_INT 1
14374: PLUS
14375: ST_TO_ADDR
// end ;
14376: LD_VAR 0 1
14380: RET
// export function HackChangeUnitSide ; var i , j ; begin
14381: LD_INT 0
14383: PPUSH
14384: PPUSH
14385: PPUSH
// for i in all_units do
14386: LD_ADDR_VAR 0 2
14390: PUSH
14391: LD_OWVAR 3
14395: PUSH
14396: FOR_IN
14397: IFFALSE 14475
// if IsSelected ( i ) then
14399: LD_VAR 0 2
14403: PPUSH
14404: CALL_OW 306
14408: IFFALSE 14473
// begin j := GetSide ( i ) ;
14410: LD_ADDR_VAR 0 3
14414: PUSH
14415: LD_VAR 0 2
14419: PPUSH
14420: CALL_OW 255
14424: ST_TO_ADDR
// if j = 8 then
14425: LD_VAR 0 3
14429: PUSH
14430: LD_INT 8
14432: EQUAL
14433: IFFALSE 14445
// j := 0 else
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_INT 0
14442: ST_TO_ADDR
14443: GO 14459
// j := j + 1 ;
14445: LD_ADDR_VAR 0 3
14449: PUSH
14450: LD_VAR 0 3
14454: PUSH
14455: LD_INT 1
14457: PLUS
14458: ST_TO_ADDR
// SetSide ( i , j ) ;
14459: LD_VAR 0 2
14463: PPUSH
14464: LD_VAR 0 3
14468: PPUSH
14469: CALL_OW 235
// end ;
14473: GO 14396
14475: POP
14476: POP
// end ;
14477: LD_VAR 0 1
14481: RET
// export function HackFog ; begin
14482: LD_INT 0
14484: PPUSH
// FogOff ( true ) ;
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 344
// end ;
14492: LD_VAR 0 1
14496: RET
// export function HackApeman ; begin
14497: LD_INT 0
14499: PPUSH
// uc_side := your_side ;
14500: LD_ADDR_OWVAR 20
14504: PUSH
14505: LD_OWVAR 2
14509: ST_TO_ADDR
// uc_nation := 0 ;
14510: LD_ADDR_OWVAR 21
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
// hc_name :=  ;
14518: LD_ADDR_OWVAR 26
14522: PUSH
14523: LD_STRING 
14525: ST_TO_ADDR
// hc_gallery :=  ;
14526: LD_ADDR_OWVAR 33
14530: PUSH
14531: LD_STRING 
14533: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
14534: LD_ADDR_OWVAR 31
14538: PUSH
14539: LD_INT 0
14541: PUSH
14542: LD_INT 0
14544: PUSH
14545: LD_INT 0
14547: PUSH
14548: LD_INT 0
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: ST_TO_ADDR
// hc_class := class_apeman ;
14557: LD_ADDR_OWVAR 28
14561: PUSH
14562: LD_INT 12
14564: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14565: CALL_OW 44
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 51
// end ;
14577: LD_VAR 0 1
14581: RET
// export function HackBoom ; begin
14582: LD_INT 0
14584: PPUSH
// uc_side := your_side ;
14585: LD_ADDR_OWVAR 20
14589: PUSH
14590: LD_OWVAR 2
14594: ST_TO_ADDR
// uc_nation := 1 ;
14595: LD_ADDR_OWVAR 21
14599: PUSH
14600: LD_INT 1
14602: ST_TO_ADDR
// vc_chassis := us_morphling ;
14603: LD_ADDR_OWVAR 37
14607: PUSH
14608: LD_INT 5
14610: ST_TO_ADDR
// vc_engine := engine_siberite ;
14611: LD_ADDR_OWVAR 39
14615: PUSH
14616: LD_INT 3
14618: ST_TO_ADDR
// vc_control := control_computer ;
14619: LD_ADDR_OWVAR 38
14623: PUSH
14624: LD_INT 3
14626: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
14627: LD_ADDR_OWVAR 40
14631: PUSH
14632: LD_INT 8
14634: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14635: CALL_OW 45
14639: PPUSH
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 51
// end ;
14647: LD_VAR 0 1
14651: RET
