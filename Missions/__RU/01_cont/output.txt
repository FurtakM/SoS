// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12184 0 0
// PrepareAmericans ;
  28: CALL 11757 0 0
// PrepareNature ;
  32: CALL 12888 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8413 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8413 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_INT 6
2939: PPUSH
2940: LD_EXP 54
2944: PPUSH
2945: CALL_OW 292
2949: OR
2950: PUSH
2951: LD_EXP 14
2955: NOT
2956: AND
2957: IFFALSE 3872
2959: GO 2961
2961: DISABLE
// begin enable ;
2962: ENABLE
// InGameOn ;
2963: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2967: LD_EXP 47
2971: PPUSH
2972: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2976: LD_EXP 54
2980: PPUSH
2981: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2985: LD_EXP 46
2989: PUSH
2990: LD_EXP 54
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 200
// DialogueOn ;
3003: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3007: LD_EXP 13
3011: IFFALSE 3263
// begin meetPokryshkin = true ;
3013: LD_ADDR_EXP 14
3017: PUSH
3018: LD_INT 1
3020: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3021: LD_INT 6
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: CALL_OW 343
// DialogueOff ;
3031: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3035: LD_EXP 46
3039: PPUSH
3040: LD_EXP 47
3044: PPUSH
3045: CALL_OW 250
3049: PPUSH
3050: LD_EXP 47
3054: PPUSH
3055: CALL_OW 251
3059: PPUSH
3060: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3064: LD_EXP 46
3068: PPUSH
3069: LD_EXP 47
3073: PPUSH
3074: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3078: LD_EXP 47
3082: PPUSH
3083: LD_EXP 46
3087: PPUSH
3088: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3092: LD_EXP 54
3096: PPUSH
3097: LD_STRING D4-Gny-3
3099: PPUSH
3100: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3104: LD_EXP 46
3108: PPUSH
3109: LD_STRING D4-Bur-3
3111: PPUSH
3112: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3116: LD_EXP 47
3120: PPUSH
3121: LD_STRING D4-Pok-4
3123: PPUSH
3124: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3128: LD_EXP 42
3132: PPUSH
3133: LD_INT 18
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: CALL_OW 49
// wait ( 0 0$2 ) ;
3143: LD_INT 70
3145: PPUSH
3146: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3150: LD_EXP 46
3154: PPUSH
3155: LD_STRING D4-Bur-4
3157: PPUSH
3158: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3162: LD_EXP 47
3166: PPUSH
3167: LD_STRING D4-Pok-5
3169: PPUSH
3170: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3174: LD_EXP 42
3178: PPUSH
3179: LD_STRING D4-Sol1-5
3181: PPUSH
3182: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3186: LD_EXP 47
3190: PPUSH
3191: LD_STRING D4-Pok-6
3193: PPUSH
3194: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3198: LD_EXP 47
3202: PPUSH
3203: LD_STRING D4-Pok-6a
3205: PPUSH
3206: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3210: LD_EXP 46
3214: PPUSH
3215: LD_STRING D4-Bur-6
3217: PPUSH
3218: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3222: LD_EXP 47
3226: PPUSH
3227: LD_STRING D4-Pok-7
3229: PPUSH
3230: CALL_OW 88
// DialogueOff ;
3234: CALL_OW 7
// InGameOff ;
3238: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3242: LD_STRING M2
3244: PPUSH
3245: CALL_OW 337
// goToHill = true ;
3249: LD_ADDR_EXP 15
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// MoveToHill ;
3257: CALL 10293 0 0
// exit ;
3261: GO 3872
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3263: LD_EXP 46
3267: PUSH
3268: LD_EXP 54
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PPUSH
3277: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3281: LD_EXP 47
3285: PPUSH
3286: LD_STRING D4-Pok-1
3288: PPUSH
3289: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3293: LD_EXP 54
3297: PPUSH
3298: CALL_OW 255
3302: PUSH
3303: LD_INT 3
3305: EQUAL
3306: PUSH
3307: LD_EXP 54
3311: PPUSH
3312: CALL_OW 302
3316: AND
3317: IFFALSE 3331
// Say ( Gnyevko , D4-Gny-1 ) ;
3319: LD_EXP 54
3323: PPUSH
3324: LD_STRING D4-Gny-1
3326: PPUSH
3327: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3331: LD_EXP 46
3335: PPUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 6
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: PPUSH
3365: LD_EXP 46
3369: PPUSH
3370: CALL_OW 74
3374: PPUSH
3375: CALL_OW 296
3379: PUSH
3380: LD_INT 8
3382: GREATER
3383: PUSH
3384: LD_EXP 46
3388: PPUSH
3389: LD_EXP 54
3393: PPUSH
3394: CALL_OW 296
3398: PUSH
3399: LD_INT 8
3401: GREATER
3402: AND
3403: PUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 255
3413: PUSH
3414: LD_INT 3
3416: EQUAL
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 302
3428: AND
3429: IFFALSE 3527
// begin ComWalk ( Gnyevko ) ;
3431: LD_EXP 54
3435: PPUSH
3436: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3440: LD_EXP 47
3444: PPUSH
3445: LD_STRING D4-Pok-2
3447: PPUSH
3448: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3452: LD_EXP 54
3456: PPUSH
3457: LD_STRING D4-Gny-2
3459: PPUSH
3460: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3464: LD_EXP 47
3468: PPUSH
3469: LD_STRING D4-Pok-3
3471: PPUSH
3472: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3476: LD_ADDR_EXP 13
3480: PUSH
3481: LD_INT 1
3483: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3484: LD_EXP 54
3488: PPUSH
3489: LD_INT 6
3491: PPUSH
3492: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3496: LD_EXP 54
3500: PPUSH
3501: LD_EXP 47
3505: PPUSH
3506: CALL_OW 250
3510: PPUSH
3511: LD_EXP 47
3515: PPUSH
3516: CALL_OW 251
3520: PPUSH
3521: CALL_OW 171
// end else
3525: GO 3864
// begin meetPokryshkin = true ;
3527: LD_ADDR_EXP 14
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3535: LD_INT 6
3537: PPUSH
3538: LD_INT 3
3540: PPUSH
3541: CALL_OW 343
// DialogueOff ;
3545: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3549: LD_EXP 54
3553: PPUSH
3554: CALL_OW 255
3558: PUSH
3559: LD_INT 3
3561: EQUAL
3562: PUSH
3563: LD_EXP 54
3567: PPUSH
3568: CALL_OW 302
3572: AND
3573: IFFALSE 3650
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3575: LD_EXP 46
3579: PUSH
3580: LD_EXP 54
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PPUSH
3589: LD_EXP 47
3593: PPUSH
3594: CALL_OW 250
3598: PPUSH
3599: LD_EXP 47
3603: PPUSH
3604: CALL_OW 251
3608: PPUSH
3609: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3613: LD_EXP 46
3617: PUSH
3618: LD_EXP 54
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PPUSH
3627: LD_EXP 47
3631: PPUSH
3632: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3636: LD_EXP 54
3640: PPUSH
3641: LD_INT 6
3643: PPUSH
3644: CALL_OW 235
// end else
3648: GO 3693
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3650: LD_EXP 46
3654: PPUSH
3655: LD_EXP 47
3659: PPUSH
3660: CALL_OW 250
3664: PPUSH
3665: LD_EXP 47
3669: PPUSH
3670: CALL_OW 251
3674: PPUSH
3675: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3679: LD_EXP 46
3683: PPUSH
3684: LD_EXP 47
3688: PPUSH
3689: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3693: LD_EXP 47
3697: PPUSH
3698: LD_EXP 46
3702: PPUSH
3703: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3707: LD_EXP 46
3711: PPUSH
3712: LD_STRING D4-Bur-3
3714: PPUSH
3715: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3719: LD_EXP 47
3723: PPUSH
3724: LD_STRING D4-Pok-4
3726: PPUSH
3727: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3731: LD_EXP 42
3735: PPUSH
3736: LD_INT 18
3738: PPUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 49
// wait ( 0 0$2 ) ;
3746: LD_INT 70
3748: PPUSH
3749: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3753: LD_EXP 46
3757: PPUSH
3758: LD_STRING D4-Bur-4
3760: PPUSH
3761: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3765: LD_EXP 47
3769: PPUSH
3770: LD_STRING D4-Pok-5
3772: PPUSH
3773: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3777: LD_EXP 42
3781: PPUSH
3782: LD_STRING D4-Sol1-5
3784: PPUSH
3785: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3789: LD_EXP 47
3793: PPUSH
3794: LD_STRING D4-Pok-6
3796: PPUSH
3797: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3801: LD_EXP 47
3805: PPUSH
3806: LD_STRING D4-Pok-6a
3808: PPUSH
3809: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3813: LD_EXP 46
3817: PPUSH
3818: LD_STRING D4-Bur-6
3820: PPUSH
3821: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3825: LD_EXP 47
3829: PPUSH
3830: LD_STRING D4-Pok-7
3832: PPUSH
3833: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3837: LD_STRING M2
3839: PPUSH
3840: CALL_OW 337
// goToHill = true ;
3844: LD_ADDR_EXP 15
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// DialogueOff ;
3852: CALL_OW 7
// InGameOff ;
3856: CALL_OW 9
// MoveToHill ;
3860: CALL 10293 0 0
// end ; DialogueOff ;
3864: CALL_OW 7
// InGameOff ;
3868: CALL_OW 9
// end ;
3872: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3873: LD_EXP 46
3877: PPUSH
3878: LD_EXP 47
3882: PPUSH
3883: CALL_OW 296
3887: PUSH
3888: LD_INT 10
3890: GREATER
3891: PUSH
3892: LD_EXP 15
3896: AND
3897: PUSH
3898: LD_EXP 18
3902: NOT
3903: AND
3904: IFFALSE 4105
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
// begin enable ;
3912: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3913: LD_ADDR_VAR 0 1
3917: PUSH
3918: LD_EXP 47
3922: PUSH
3923: LD_EXP 48
3927: PUSH
3928: LD_EXP 49
3932: PUSH
3933: LD_EXP 50
3937: PUSH
3938: LD_EXP 51
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3950: LD_EXP 54
3954: PPUSH
3955: CALL_OW 255
3959: PUSH
3960: LD_INT 6
3962: EQUAL
3963: PUSH
3964: LD_EXP 12
3968: AND
3969: IFFALSE 3987
// ruSolds = ruSolds ^ Gnyevko ;
3971: LD_ADDR_VAR 0 1
3975: PUSH
3976: LD_VAR 0 1
3980: PUSH
3981: LD_EXP 54
3985: ADD
3986: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3987: LD_VAR 0 1
3991: PPUSH
3992: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3996: LD_EXP 46
4000: PPUSH
4001: CALL_OW 87
// DialogueOn ;
4005: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4009: LD_EXP 47
4013: PPUSH
4014: LD_STRING DSplit-Pok-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4021: LD_EXP 46
4025: PPUSH
4026: LD_STRING DSplit-Bur-1
4028: PPUSH
4029: CALL_OW 88
// DialogueOff ;
4033: CALL_OW 7
// InGameOn ;
4037: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4041: LD_EXP 46
4045: PPUSH
4046: LD_EXP 47
4050: PPUSH
4051: CALL_OW 250
4055: PPUSH
4056: LD_EXP 47
4060: PPUSH
4061: CALL_OW 251
4065: PPUSH
4066: CALL_OW 111
// wait ( 0 0$1 ) ;
4070: LD_INT 35
4072: PPUSH
4073: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4077: LD_EXP 46
4081: PPUSH
4082: LD_EXP 47
4086: PPUSH
4087: CALL_OW 296
4091: PUSH
4092: LD_INT 6
4094: LESS
4095: IFFALSE 4041
// InGameOff ;
4097: CALL_OW 9
// MoveToHill ;
4101: CALL 10293 0 0
// end ;
4105: PPOPN 1
4107: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4108: LD_INT 0
4110: PPUSH
4111: PPUSH
// traitor = true ;
4112: LD_ADDR_EXP 18
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// DialogueOn ;
4120: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4124: LD_EXP 47
4128: PPUSH
4129: LD_STRING DAttack-Pok-1
4131: PPUSH
4132: CALL_OW 88
// DialogueOff ;
4136: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4140: LD_INT 3
4142: PPUSH
4143: LD_INT 6
4145: PPUSH
4146: LD_INT 2
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 21
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PPUSH
4185: LD_EXP 46
4189: PPUSH
4190: CALL_OW 115
// end ;
4194: LD_VAR 0 1
4198: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4199: LD_EXP 47
4203: PPUSH
4204: LD_INT 65
4206: PPUSH
4207: LD_INT 59
4209: PPUSH
4210: CALL_OW 297
4214: PUSH
4215: LD_INT 4
4217: LESS
4218: PUSH
4219: LD_EXP 18
4223: NOT
4224: AND
4225: IFFALSE 4422
4227: GO 4229
4229: DISABLE
// begin InGameOn ;
4230: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4234: LD_INT 55
4236: PPUSH
4237: LD_INT 50
4239: PPUSH
4240: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4244: LD_EXP 46
4248: PPUSH
4249: LD_INT 66
4251: PPUSH
4252: LD_INT 57
4254: PPUSH
4255: CALL_OW 111
// AddComHold ( Burlak ) ;
4259: LD_EXP 46
4263: PPUSH
4264: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4268: LD_EXP 42
4272: PPUSH
4273: LD_INT 59
4275: PPUSH
4276: LD_INT 55
4278: PPUSH
4279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4290: LD_INT 1
4292: PPUSH
4293: LD_EXP 47
4297: PPUSH
4298: CALL_OW 292
4302: IFFALSE 4283
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4304: LD_EXP 42
4308: PUSH
4309: LD_EXP 47
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 87
// ComStop ( Charles ) ;
4322: LD_EXP 42
4326: PPUSH
4327: CALL_OW 141
// AddComHold ( Charles ) ;
4331: LD_EXP 42
4335: PPUSH
4336: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4340: LD_EXP 42
4344: PPUSH
4345: LD_EXP 47
4349: PPUSH
4350: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4354: LD_EXP 42
4358: PPUSH
4359: LD_STRING D5-Sol1-1
4361: PPUSH
4362: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4366: LD_EXP 47
4370: PPUSH
4371: LD_STRING D5-Pok-1
4373: PPUSH
4374: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4378: LD_INT 1
4380: PPUSH
4381: LD_INT 6
4383: PPUSH
4384: LD_INT 2
4386: PPUSH
4387: LD_INT 1
4389: PPUSH
4390: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 3
4399: PPUSH
4400: LD_INT 2
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4410: LD_EXP 42
4414: PPUSH
4415: LD_STRING D5-Sol1-2
4417: PPUSH
4418: CALL_OW 88
// end ;
4422: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4423: LD_EXP 42
4427: PPUSH
4428: CALL_OW 301
4432: PUSH
4433: LD_EXP 15
4437: AND
4438: IFFALSE 5031
4440: GO 4442
4442: DISABLE
4443: LD_INT 0
4445: PPUSH
// begin goToHill = false ;
4446: LD_ADDR_EXP 15
4450: PUSH
4451: LD_INT 0
4453: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4454: LD_INT 22
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 21
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PPUSH
4478: CALL_OW 69
4482: PPUSH
4483: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4487: LD_INT 22
4489: PUSH
4490: LD_INT 6
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 21
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PPUSH
4511: CALL_OW 69
4515: PPUSH
4516: CALL_OW 138
// wait ( 0 0$1 ) ;
4520: LD_INT 35
4522: PPUSH
4523: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4527: LD_INT 55
4529: PPUSH
4530: LD_INT 50
4532: PPUSH
4533: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4537: LD_EXP 46
4541: PPUSH
4542: LD_INT 56
4544: PPUSH
4545: LD_INT 56
4547: PPUSH
4548: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4552: LD_INT 22
4554: PUSH
4555: LD_INT 6
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: LD_INT 21
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: PPUSH
4581: LD_INT 56
4583: PPUSH
4584: LD_INT 56
4586: PPUSH
4587: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4591: LD_EXP 46
4595: PPUSH
4596: LD_STRING D5-Bur-2
4598: PPUSH
4599: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4603: LD_EXP 47
4607: PPUSH
4608: LD_STRING D5-Pok-2
4610: PPUSH
4611: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4615: LD_EXP 51
4619: PPUSH
4620: LD_STRING D5-Bel-2
4622: PPUSH
4623: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4627: LD_EXP 47
4631: PPUSH
4632: LD_STRING D5-Pok-3
4634: PPUSH
4635: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4639: LD_EXP 54
4643: PPUSH
4644: CALL_OW 255
4648: PUSH
4649: LD_INT 6
4651: EQUAL
4652: IFFALSE 4666
// Say ( Gnyevko , D5-Gny-3 ) ;
4654: LD_EXP 54
4658: PPUSH
4659: LD_STRING D5-Gny-3
4661: PPUSH
4662: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4666: LD_EXP 46
4670: PPUSH
4671: LD_STRING D5-Bur-3
4673: PPUSH
4674: CALL_OW 88
// interface_hidden = true ;
4678: LD_ADDR_OWVAR 54
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// IngameOff ;
4686: CALL_OW 9
// wait ( 0 0$2 ) ;
4690: LD_INT 70
4692: PPUSH
4693: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4697: LD_EXP 46
4701: PPUSH
4702: LD_INT 85
4704: PPUSH
4705: LD_INT 64
4707: PPUSH
4708: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4712: LD_INT 22
4714: PUSH
4715: LD_INT 6
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 21
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PPUSH
4736: CALL_OW 69
4740: PPUSH
4741: LD_INT 85
4743: PPUSH
4744: LD_INT 64
4746: PPUSH
4747: CALL_OW 111
// interface_hidden = false ;
4751: LD_ADDR_OWVAR 54
4755: PUSH
4756: LD_INT 0
4758: ST_TO_ADDR
// InGameOn ;
4759: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4763: LD_EXP 46
4767: PPUSH
4768: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4772: LD_EXP 47
4776: PPUSH
4777: LD_STRING D6-Pok-1
4779: PPUSH
4780: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4784: LD_EXP 46
4788: PPUSH
4789: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4793: LD_EXP 46
4797: PPUSH
4798: LD_STRING D6-Bur-1
4800: PPUSH
4801: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4805: LD_EXP 46
4809: PPUSH
4810: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4814: LD_EXP 47
4818: PPUSH
4819: LD_STRING D6-Pok-2
4821: PPUSH
4822: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4826: LD_EXP 46
4830: PPUSH
4831: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4835: LD_EXP 51
4839: PPUSH
4840: LD_STRING D6-Bel-2
4842: PPUSH
4843: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4847: LD_EXP 46
4851: PPUSH
4852: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4856: LD_EXP 46
4860: PPUSH
4861: LD_STRING D6-Bur-2
4863: PPUSH
4864: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4868: LD_EXP 46
4872: PPUSH
4873: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4877: LD_EXP 47
4881: PPUSH
4882: LD_STRING D6-Pok-3
4884: PPUSH
4885: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4889: LD_EXP 46
4893: PPUSH
4894: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4898: LD_EXP 55
4902: PPUSH
4903: LD_STRING D6-Kur-3
4905: PPUSH
4906: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4910: LD_EXP 46
4914: PPUSH
4915: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4919: LD_EXP 47
4923: PPUSH
4924: LD_STRING D6-Pok-4
4926: PPUSH
4927: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4931: LD_EXP 46
4935: PPUSH
4936: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4940: LD_EXP 51
4944: PPUSH
4945: LD_STRING D6-Bel-4
4947: PPUSH
4948: CALL_OW 88
// InGameOff ;
4952: CALL_OW 9
// interface_hidden = false ;
4956: LD_ADDR_OWVAR 54
4960: PUSH
4961: LD_INT 0
4963: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4964: LD_EXP 47
4968: PPUSH
4969: LD_INT 23
4971: PPUSH
4972: CALL_OW 115
// wait ( 0 0$5 ) ;
4976: LD_INT 175
4978: PPUSH
4979: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4983: LD_INT 22
4985: PUSH
4986: LD_INT 6
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: PPUSH
5012: LD_INT 23
5014: PPUSH
5015: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5019: LD_INT 1
5021: PPUSH
5022: LD_EXP 54
5026: PPUSH
5027: CALL_OW 471
// end ;
5031: PPOPN 1
5033: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5034: LD_INT 1
5036: PPUSH
5037: LD_EXP 47
5041: PPUSH
5042: CALL_OW 292
5046: PUSH
5047: LD_EXP 42
5051: PPUSH
5052: CALL_OW 301
5056: AND
5057: IFFALSE 5076
5059: GO 5061
5061: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5062: LD_EXP 43
5066: PPUSH
5067: LD_EXP 47
5071: PPUSH
5072: CALL_OW 115
5076: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5077: LD_INT 3
5079: PPUSH
5080: LD_INT 23
5082: PPUSH
5083: CALL_OW 292
5087: IFFALSE 5116
5089: GO 5091
5091: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5092: LD_EXP 47
5096: PPUSH
5097: LD_STRING D7-Pok-1
5099: PPUSH
5100: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5104: LD_EXP 43
5108: PPUSH
5109: LD_STRING D7-FSol1-1
5111: PPUSH
5112: CALL_OW 88
// end ;
5116: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5117: LD_EXP 47
5121: PPUSH
5122: CALL_OW 303
5126: IFFALSE 5658
5128: GO 5130
5130: DISABLE
5131: LD_INT 0
5133: PPUSH
5134: PPUSH
5135: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5136: LD_ADDR_VAR 0 3
5140: PUSH
5141: LD_INT 22
5143: PUSH
5144: LD_INT 6
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 21
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 50
5163: PUSH
5164: EMPTY
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: PUSH
5177: LD_EXP 51
5181: DIFF
5182: ST_TO_ADDR
// DialogueOn ;
5183: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5187: LD_EXP 51
5191: PPUSH
5192: LD_STRING D7a-Bel-1
5194: PPUSH
5195: CALL_OW 88
// DialogueOff ;
5199: CALL_OW 7
// for i := 1 to ruSolds do
5203: LD_ADDR_VAR 0 1
5207: PUSH
5208: DOUBLE
5209: LD_INT 1
5211: DEC
5212: ST_TO_ADDR
5213: LD_VAR 0 3
5217: PUSH
5218: FOR_TO
5219: IFFALSE 5277
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5221: LD_VAR 0 3
5225: PUSH
5226: LD_VAR 0 1
5230: ARRAY
5231: PPUSH
5232: LD_INT 87
5234: PUSH
5235: LD_VAR 0 1
5239: PLUS
5240: PPUSH
5241: LD_INT 63
5243: PUSH
5244: LD_VAR 0 1
5248: PLUS
5249: PPUSH
5250: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5254: LD_VAR 0 3
5258: PUSH
5259: LD_VAR 0 1
5263: ARRAY
5264: PPUSH
5265: LD_INT 89
5267: PPUSH
5268: LD_INT 67
5270: PPUSH
5271: CALL_OW 178
// end ;
5275: GO 5218
5277: POP
5278: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5279: LD_EXP 51
5283: PPUSH
5284: LD_INT 89
5286: PPUSH
5287: LD_INT 67
5289: PPUSH
5290: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5294: LD_EXP 51
5298: PPUSH
5299: LD_INT 88
5301: PPUSH
5302: LD_INT 66
5304: PPUSH
5305: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5309: LD_EXP 48
5313: PPUSH
5314: LD_STRING D7a-RSol1-1
5316: PPUSH
5317: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5321: LD_EXP 43
5325: PPUSH
5326: LD_STRING D7a-FSol1-1
5328: PPUSH
5329: CALL_OW 88
// wait ( 0 0$12 ) ;
5333: LD_INT 420
5335: PPUSH
5336: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7b-Bel-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5352: LD_EXP 49
5356: PPUSH
5357: LD_STRING D7b-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5364: LD_EXP 51
5368: PPUSH
5369: LD_STRING D7b-Bel-2
5371: PPUSH
5372: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5376: LD_EXP 48
5380: PPUSH
5381: LD_STRING D7b-RSol1-2
5383: PPUSH
5384: CALL_OW 88
// for unit in ruSolds do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: LD_VAR 0 3
5397: PUSH
5398: FOR_IN
5399: IFFALSE 5632
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5401: LD_EXP 46
5405: PPUSH
5406: LD_VAR 0 2
5410: PPUSH
5411: CALL_OW 296
5415: PUSH
5416: LD_INT 7
5418: LESS
5419: IFFALSE 5630
// begin InGameOn ;
5421: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5425: LD_EXP 51
5429: PUSH
5430: LD_EXP 48
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PPUSH
5439: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5443: LD_EXP 46
5447: PPUSH
5448: LD_INT 88
5450: PPUSH
5451: LD_INT 66
5453: PPUSH
5454: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5458: LD_EXP 51
5462: PPUSH
5463: LD_EXP 46
5467: PPUSH
5468: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5472: LD_EXP 46
5476: PPUSH
5477: LD_INT 90
5479: PPUSH
5480: LD_INT 66
5482: PPUSH
5483: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5487: LD_EXP 46
5491: PPUSH
5492: LD_STRING D7b-Bur-3
5494: PPUSH
5495: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5499: LD_EXP 51
5503: PPUSH
5504: LD_STRING D7b-Bel-4
5506: PPUSH
5507: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5511: LD_EXP 46
5515: PPUSH
5516: LD_STRING D7b-Bur-4
5518: PPUSH
5519: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5523: LD_EXP 51
5527: PPUSH
5528: LD_STRING D7b-Bel-5
5530: PPUSH
5531: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5535: LD_EXP 49
5539: PPUSH
5540: LD_STRING D7b-FSol1-5
5542: PPUSH
5543: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5547: LD_EXP 51
5551: PPUSH
5552: LD_STRING D7b-Bel-6
5554: PPUSH
5555: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5559: LD_EXP 46
5563: PPUSH
5564: LD_STRING D7b-Bur-6
5566: PPUSH
5567: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5571: LD_EXP 48
5575: PPUSH
5576: LD_STRING D7b-RSol1-6
5578: PPUSH
5579: CALL_OW 88
// InGameOff ;
5583: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5587: LD_VAR 0 3
5591: PPUSH
5592: LD_INT 3
5594: PPUSH
5595: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5599: LD_EXP 51
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5611: LD_STRING M3
5613: PPUSH
5614: CALL_OW 337
// secondAttack = true ;
5618: LD_ADDR_EXP 17
5622: PUSH
5623: LD_INT 1
5625: ST_TO_ADDR
// exit ;
5626: POP
5627: POP
5628: GO 5658
// end ;
5630: GO 5398
5632: POP
5633: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5634: LD_EXP 51
5638: PPUSH
5639: LD_STRING D7b-Bel-3
5641: PPUSH
5642: CALL_OW 88
// InGameOff ;
5646: CALL_OW 9
// belkovWaitForGorky = true ;
5650: LD_ADDR_EXP 16
5654: PUSH
5655: LD_INT 1
5657: ST_TO_ADDR
// end ;
5658: PPOPN 3
5660: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5661: LD_EXP 16
5665: IFFALSE 5975
5667: GO 5669
5669: DISABLE
5670: LD_INT 0
5672: PPUSH
5673: PPUSH
// begin enable ;
5674: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 21
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: ST_TO_ADDR
// for unit in ruSolds do
5709: LD_ADDR_VAR 0 1
5713: PUSH
5714: LD_VAR 0 2
5718: PUSH
5719: FOR_IN
5720: IFFALSE 5973
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5722: LD_EXP 46
5726: PPUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 296
5736: PUSH
5737: LD_INT 7
5739: LESS
5740: IFFALSE 5971
// begin belkovWaitForGorky = false ;
5742: LD_ADDR_EXP 16
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// InGameOn ;
5750: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5754: LD_EXP 51
5758: PUSH
5759: LD_EXP 48
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PPUSH
5768: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5772: LD_EXP 46
5776: PPUSH
5777: LD_INT 88
5779: PPUSH
5780: LD_INT 66
5782: PPUSH
5783: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5787: LD_EXP 51
5791: PPUSH
5792: LD_EXP 46
5796: PPUSH
5797: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5801: LD_EXP 46
5805: PPUSH
5806: LD_INT 90
5808: PPUSH
5809: LD_INT 66
5811: PPUSH
5812: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5816: LD_EXP 51
5820: PPUSH
5821: LD_STRING D7b-Bel-3a
5823: PPUSH
5824: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5828: LD_EXP 46
5832: PPUSH
5833: LD_STRING D7b-Bur-3
5835: PPUSH
5836: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5840: LD_EXP 51
5844: PPUSH
5845: LD_STRING D7b-Bel-4
5847: PPUSH
5848: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5852: LD_EXP 46
5856: PPUSH
5857: LD_STRING D7b-Bur-4
5859: PPUSH
5860: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5864: LD_EXP 51
5868: PPUSH
5869: LD_STRING D7b-Bel-5
5871: PPUSH
5872: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5876: LD_EXP 49
5880: PPUSH
5881: LD_STRING D7b-FSol1-5
5883: PPUSH
5884: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5888: LD_EXP 51
5892: PPUSH
5893: LD_STRING D7b-Bel-6
5895: PPUSH
5896: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5900: LD_EXP 46
5904: PPUSH
5905: LD_STRING D7b-Bur-6
5907: PPUSH
5908: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5912: LD_EXP 48
5916: PPUSH
5917: LD_STRING D7a-RSol1-6
5919: PPUSH
5920: CALL_OW 88
// InGameOff ;
5924: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5940: LD_EXP 51
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5952: LD_STRING M3
5954: PPUSH
5955: CALL_OW 337
// secondAttack = true ;
5959: LD_ADDR_EXP 17
5963: PUSH
5964: LD_INT 1
5966: ST_TO_ADDR
// exit ;
5967: POP
5968: POP
5969: GO 5975
// end ;
5971: GO 5719
5973: POP
5974: POP
// end ;
5975: PPOPN 2
5977: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5978: LD_INT 0
5980: PPUSH
5981: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5982: LD_EXP 43
5986: PPUSH
5987: LD_STRING D8-FSol1-1
5989: PPUSH
5990: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5994: LD_EXP 44
5998: PPUSH
5999: LD_STRING D8-Glad-1
6001: PPUSH
6002: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6006: LD_EXP 46
6010: PPUSH
6011: LD_STRING D8-Bur-1
6013: PPUSH
6014: CALL_OW 88
// secondAttack = false ;
6018: LD_ADDR_EXP 17
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_INT 22
6033: PUSH
6034: LD_INT 3
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PPUSH
6055: CALL_OW 69
6059: PPUSH
6060: LD_INT 23
6062: PPUSH
6063: CALL_OW 74
6067: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6068: LD_EXP 45
6072: PPUSH
6073: CALL_OW 122
// wait ( 0 0$1 ) ;
6077: LD_INT 35
6079: PPUSH
6080: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6084: LD_EXP 45
6088: PPUSH
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL_OW 175
// end ;
6098: LD_VAR 0 1
6102: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6103: LD_INT 23
6105: PPUSH
6106: CALL_OW 256
6110: PUSH
6111: LD_INT 350
6113: LESS
6114: PUSH
6115: LD_INT 23
6117: PPUSH
6118: CALL_OW 256
6122: PUSH
6123: LD_INT 250
6125: GREATER
6126: AND
6127: PUSH
6128: LD_INT 20
6130: PPUSH
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 70
6159: PUSH
6160: LD_INT 0
6162: GREATER
6163: AND
6164: PUSH
6165: LD_EXP 24
6169: NOT
6170: AND
6171: IFFALSE 6188
6173: GO 6175
6175: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6176: LD_EXP 43
6180: PPUSH
6181: LD_STRING D8-FSol1-2
6183: PPUSH
6184: CALL_OW 88
6188: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6189: LD_INT 23
6191: PPUSH
6192: CALL_OW 303
6196: PUSH
6197: LD_INT 22
6199: PPUSH
6200: CALL_OW 302
6204: AND
6205: PUSH
6206: LD_EXP 24
6210: NOT
6211: AND
6212: IFFALSE 6282
6214: GO 6216
6216: DISABLE
// begin amRetreat = true ;
6217: LD_ADDR_EXP 24
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6225: LD_EXP 43
6229: PPUSH
6230: LD_STRING D8-FSol1-2a
6232: PPUSH
6233: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6237: LD_EXP 44
6241: PUSH
6242: LD_EXP 43
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: LD_INT 21
6253: PPUSH
6254: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6258: LD_EXP 44
6262: PPUSH
6263: LD_STRING D8-Glad-2
6265: PPUSH
6266: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6270: LD_EXP 46
6274: PPUSH
6275: LD_STRING D8-Bur-2
6277: PPUSH
6278: CALL_OW 88
// end ;
6282: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6283: LD_INT 22
6285: PPUSH
6286: CALL_OW 303
6290: PUSH
6291: LD_INT 23
6293: PPUSH
6294: CALL_OW 302
6298: AND
6299: PUSH
6300: LD_EXP 24
6304: NOT
6305: AND
6306: IFFALSE 6376
6308: GO 6310
6310: DISABLE
// begin amRetreat = true ;
6311: LD_ADDR_EXP 24
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6319: LD_EXP 43
6323: PPUSH
6324: LD_STRING D8-FSol1-2a
6326: PPUSH
6327: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6331: LD_EXP 44
6335: PUSH
6336: LD_EXP 43
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PPUSH
6345: LD_INT 21
6347: PPUSH
6348: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6352: LD_EXP 44
6356: PPUSH
6357: LD_STRING D8-Glad-2
6359: PPUSH
6360: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6364: LD_EXP 46
6368: PPUSH
6369: LD_STRING D8-Bur-2
6371: PPUSH
6372: CALL_OW 88
// end ;
6376: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6377: LD_INT 23
6379: PPUSH
6380: CALL_OW 256
6384: PUSH
6385: LD_INT 500
6387: LESS
6388: PUSH
6389: LD_OWVAR 67
6393: PUSH
6394: LD_INT 3
6396: EQUAL
6397: AND
6398: PUSH
6399: LD_EXP 24
6403: NOT
6404: AND
6405: IFFALSE 6475
6407: GO 6409
6409: DISABLE
// begin amRetreat = true ;
6410: LD_ADDR_EXP 24
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6418: LD_EXP 43
6422: PPUSH
6423: LD_STRING D8-FSol1-2a
6425: PPUSH
6426: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6430: LD_EXP 44
6434: PUSH
6435: LD_EXP 43
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: LD_INT 21
6446: PPUSH
6447: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6451: LD_EXP 44
6455: PPUSH
6456: LD_STRING D8-Glad-2
6458: PPUSH
6459: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6463: LD_EXP 46
6467: PPUSH
6468: LD_STRING D8-Bur-2
6470: PPUSH
6471: CALL_OW 88
// end ;
6475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6476: LD_INT 22
6478: PUSH
6479: LD_INT 1
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: LD_INT 1
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 50
6498: PUSH
6499: EMPTY
6500: LIST
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 69
6511: PUSH
6512: LD_INT 0
6514: GREATER
6515: IFFALSE 6643
6517: GO 6519
6519: DISABLE
6520: LD_INT 0
6522: PPUSH
// begin enable ;
6523: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6524: LD_ADDR_VAR 0 1
6528: PUSH
6529: LD_INT 21
6531: PPUSH
6532: LD_INT 22
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 21
6544: PUSH
6545: LD_INT 1
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 70
6560: PUSH
6561: FOR_IN
6562: IFFALSE 6641
// begin if unit = Gladstone then
6564: LD_VAR 0 1
6568: PUSH
6569: LD_EXP 44
6573: EQUAL
6574: IFFALSE 6604
// begin gladstoneEscape = true ;
6576: LD_ADDR_EXP 19
6580: PUSH
6581: LD_INT 1
6583: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6584: LD_EXP 44
6588: PPUSH
6589: LD_EXP 30
6593: PUSH
6594: LD_STRING Gladstone
6596: STR
6597: PPUSH
6598: CALL_OW 38
// end else
6602: GO 6630
// begin JohannaEscape = true ;
6604: LD_ADDR_EXP 20
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6612: LD_EXP 43
6616: PPUSH
6617: LD_EXP 30
6621: PUSH
6622: LD_STRING Johanna
6624: STR
6625: PPUSH
6626: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6630: LD_VAR 0 1
6634: PPUSH
6635: CALL_OW 64
// end ;
6639: GO 6561
6641: POP
6642: POP
// end ;
6643: PPOPN 1
6645: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6646: LD_EXP 44
6650: PPUSH
6651: CALL_OW 301
6655: PUSH
6656: LD_EXP 43
6660: PPUSH
6661: CALL_OW 301
6665: AND
6666: IFFALSE 6683
6668: GO 6670
6670: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6671: LD_EXP 46
6675: PPUSH
6676: LD_STRING D9-Bur-1
6678: PPUSH
6679: CALL_OW 88
6683: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6684: LD_EXP 43
6688: PPUSH
6689: CALL_OW 301
6693: PUSH
6694: LD_EXP 19
6698: AND
6699: PUSH
6700: LD_EXP 20
6704: NOT
6705: AND
6706: IFFALSE 6723
6708: GO 6710
6710: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6711: LD_EXP 46
6715: PPUSH
6716: LD_STRING D9-Bur-1a
6718: PPUSH
6719: CALL_OW 88
6723: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6724: LD_EXP 44
6728: PPUSH
6729: CALL_OW 301
6733: PUSH
6734: LD_EXP 19
6738: NOT
6739: AND
6740: PUSH
6741: LD_EXP 20
6745: AND
6746: IFFALSE 6763
6748: GO 6750
6750: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6751: LD_EXP 46
6755: PPUSH
6756: LD_STRING D9-Bur-1b
6758: PPUSH
6759: CALL_OW 88
6763: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6764: LD_EXP 19
6768: PUSH
6769: LD_EXP 20
6773: AND
6774: IFFALSE 6791
6776: GO 6778
6778: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6779: LD_EXP 46
6783: PPUSH
6784: LD_STRING D9-Bur-1c
6786: PPUSH
6787: CALL_OW 88
6791: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6792: LD_INT 22
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: LD_INT 21
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 50
6814: PUSH
6815: EMPTY
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 69
6827: PUSH
6828: LD_INT 0
6830: EQUAL
6831: IFFALSE 7079
6833: GO 6835
6835: DISABLE
6836: LD_INT 0
6838: PPUSH
6839: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6840: LD_ADDR_VAR 0 1
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 3
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 21
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 50
6867: PUSH
6868: EMPTY
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 69
6880: PUSH
6881: LD_EXP 46
6885: PUSH
6886: LD_EXP 54
6890: PUSH
6891: LD_EXP 51
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: DIFF
6901: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_VAR 0 1
6911: PPUSH
6912: LD_INT 26
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 72
6926: ST_TO_ADDR
// DialogueOn ;
6927: CALL_OW 6
// if IsOK ( Belkov ) then
6931: LD_EXP 51
6935: PPUSH
6936: CALL_OW 302
6940: IFFALSE 6954
// Say ( Belkov , D10-Bel-1 ) ;
6942: LD_EXP 51
6946: PPUSH
6947: LD_STRING D10-Bel-1
6949: PPUSH
6950: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6954: LD_VAR 0 1
6958: PUSH
6959: LD_INT 0
6961: GREATER
6962: PUSH
6963: LD_VAR 0 2
6967: PUSH
6968: LD_INT 0
6970: GREATER
6971: PUSH
6972: LD_EXP 51
6976: PPUSH
6977: CALL_OW 302
6981: OR
6982: AND
6983: IFFALSE 7050
// begin Say ( Burlak , D10-Bur-1 ) ;
6985: LD_EXP 46
6989: PPUSH
6990: LD_STRING D10-Bur-1
6992: PPUSH
6993: CALL_OW 88
// if IsOK ( Belkov ) then
6997: LD_EXP 51
7001: PPUSH
7002: CALL_OW 302
7006: IFFALSE 7022
// Say ( Belkov , D10-Bel-1a ) else
7008: LD_EXP 51
7012: PPUSH
7013: LD_STRING D10-Bel-1a
7015: PPUSH
7016: CALL_OW 88
7020: GO 7038
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7022: LD_VAR 0 2
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: PPUSH
7031: LD_STRING D10-RSol1-1
7033: PPUSH
7034: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7038: LD_EXP 46
7042: PPUSH
7043: LD_STRING D10-Bur-2
7045: PPUSH
7046: CALL_OW 88
// end ; DialogueOff ;
7050: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7054: LD_STRING M4a
7056: PPUSH
7057: CALL_OW 337
// evacuationAvailable = true ;
7061: LD_ADDR_EXP 22
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 424
// end ;
7079: PPOPN 2
7081: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7082: LD_EXP 22
7086: PUSH
7087: LD_EXP 25
7091: NOT
7092: AND
7093: IFFALSE 7703
7095: GO 7097
7097: DISABLE
7098: LD_INT 0
7100: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7101: LD_EXP 53
7105: PPUSH
7106: LD_INT 22
7108: PPUSH
7109: LD_INT 1
7111: PPUSH
7112: CALL_OW 49
// wait ( 0 0$3 ) ;
7116: LD_INT 105
7118: PPUSH
7119: CALL_OW 67
// jelenaSpawned = true ;
7123: LD_ADDR_EXP 25
7127: PUSH
7128: LD_INT 1
7130: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7131: LD_INT 22
7133: PUSH
7134: LD_INT 3
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 50
7153: PUSH
7154: EMPTY
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PPUSH
7167: LD_EXP 53
7171: PPUSH
7172: CALL_OW 74
7176: PPUSH
7177: LD_EXP 53
7181: PPUSH
7182: CALL_OW 296
7186: PUSH
7187: LD_INT 9
7189: LESS
7190: IFFALSE 7194
// exit ;
7192: GO 7703
// DialogueOn ;
7194: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7198: LD_EXP 53
7202: PPUSH
7203: LD_STRING D11b-Kir-1
7205: PPUSH
7206: CALL_OW 94
// if IsOK ( Belkov ) then
7210: LD_EXP 51
7214: PPUSH
7215: CALL_OW 302
7219: IFFALSE 7247
// begin Say ( Belkov , D11b-Bel-1 ) ;
7221: LD_EXP 51
7225: PPUSH
7226: LD_STRING D11b-Bel-1
7228: PPUSH
7229: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7233: LD_EXP 51
7237: PPUSH
7238: LD_STRING D11b-Bel-1a
7240: PPUSH
7241: CALL_OW 94
// end else
7245: GO 7302
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 21
7264: PUSH
7265: LD_INT 1
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 50
7274: PUSH
7275: EMPTY
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 69
7287: PPUSH
7288: LD_STRING D11b-RSol1-1
7290: PPUSH
7291: LD_STRING D11b-RFSol1-1
7293: PPUSH
7294: LD_INT 0
7296: PPUSH
7297: CALL 8080 0 4
7301: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7302: LD_INT 24
7304: PPUSH
7305: LD_INT 22
7307: PUSH
7308: LD_INT 0
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 12
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 70
7333: PUSH
7334: LD_INT 0
7336: GREATER
7337: IFFALSE 7353
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7339: LD_EXP 53
7343: PPUSH
7344: LD_STRING D11b1-Kir-1
7346: PPUSH
7347: CALL_OW 94
7351: GO 7365
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7353: LD_EXP 53
7357: PPUSH
7358: LD_STRING D11b2-Kir-1
7360: PPUSH
7361: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7365: LD_EXP 6
7369: PUSH
7370: LD_INT 24
7372: PPUSH
7373: LD_INT 22
7375: PUSH
7376: LD_INT 0
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 12
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 70
7401: PUSH
7402: LD_INT 0
7404: GREATER
7405: AND
7406: IFFALSE 7541
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7408: LD_EXP 46
7412: PPUSH
7413: LD_STRING D11b1-Bur-1
7415: PPUSH
7416: CALL_OW 88
// if IsOk ( Belkov ) then
7420: LD_EXP 51
7424: PPUSH
7425: CALL_OW 302
7429: IFFALSE 7445
// Say ( Belkov , D11b2-Bel-1 ) else
7431: LD_EXP 51
7435: PPUSH
7436: LD_STRING D11b2-Bel-1
7438: PPUSH
7439: CALL_OW 88
7443: GO 7486
// begin if GetSex ( randomSold ) = sex_male then
7445: LD_VAR 0 1
7449: PPUSH
7450: CALL_OW 258
7454: PUSH
7455: LD_INT 1
7457: EQUAL
7458: IFFALSE 7474
// Say ( randomSold , D11b1-RSol1-1 ) else
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_STRING D11b1-RSol1-1
7467: PPUSH
7468: CALL_OW 88
7472: GO 7486
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_STRING D11b1-RFSol1-1
7481: PPUSH
7482: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7486: LD_INT 22
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 21
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 50
7508: PUSH
7509: EMPTY
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_STRING D11b1-RSol1-1
7524: PPUSH
7525: LD_STRING D11b1-RFSol1-1
7527: PPUSH
7528: LD_INT 0
7530: PPUSH
7531: CALL 8080 0 4
// DialogueOff ;
7535: CALL_OW 7
// exit ;
7539: GO 7703
// end ; if spotWaterfall then
7541: LD_EXP 7
7545: IFFALSE 7631
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7547: LD_EXP 46
7551: PPUSH
7552: LD_STRING D11b1-Bur-1a
7554: PPUSH
7555: CALL_OW 88
// if IsOk ( Belkov ) then
7559: LD_EXP 51
7563: PPUSH
7564: CALL_OW 302
7568: IFFALSE 7584
// Say ( Belkov , D11b2-Bel-1 ) else
7570: LD_EXP 51
7574: PPUSH
7575: LD_STRING D11b2-Bel-1
7577: PPUSH
7578: CALL_OW 88
7582: GO 7625
// begin if GetSex ( randomSold ) = sex_male then
7584: LD_VAR 0 1
7588: PPUSH
7589: CALL_OW 258
7593: PUSH
7594: LD_INT 1
7596: EQUAL
7597: IFFALSE 7613
// Say ( randomSold , D11b1-RSol1-1 ) else
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_STRING D11b1-RSol1-1
7606: PPUSH
7607: CALL_OW 88
7611: GO 7625
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_STRING D11b1-RFSol1-1
7620: PPUSH
7621: CALL_OW 88
// end ; DialogueOff ;
7625: CALL_OW 7
// exit ;
7629: GO 7703
// end ; if IsOk ( Belkov ) then
7631: LD_EXP 51
7635: PPUSH
7636: CALL_OW 302
7640: IFFALSE 7656
// Say ( Belkov , D11b1-Bel-1 ) else
7642: LD_EXP 51
7646: PPUSH
7647: LD_STRING D11b1-Bel-1
7649: PPUSH
7650: CALL_OW 88
7654: GO 7697
// begin if GetSex ( randomSold ) = sex_male then
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 258
7665: PUSH
7666: LD_INT 1
7668: EQUAL
7669: IFFALSE 7685
// Say ( randomSold , D11b1-RSol1-1 ) else
7671: LD_VAR 0 1
7675: PPUSH
7676: LD_STRING D11b1-RSol1-1
7678: PPUSH
7679: CALL_OW 88
7683: GO 7697
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7685: LD_VAR 0 1
7689: PPUSH
7690: LD_STRING D11b1-RFSol1-1
7692: PPUSH
7693: CALL_OW 88
// end ; DialogueOff ;
7697: CALL_OW 7
// exit ;
7701: GO 7703
// end ;
7703: PPOPN 1
7705: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7706: LD_INT 3
7708: PPUSH
7709: LD_EXP 53
7713: PPUSH
7714: CALL_OW 292
7718: PUSH
7719: LD_EXP 25
7723: AND
7724: IFFALSE 7960
7726: GO 7728
7728: DISABLE
7729: LD_INT 0
7731: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7732: LD_EXP 53
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: CALL_OW 235
// jelenaSaved = true ;
7744: LD_ADDR_EXP 21
7748: PUSH
7749: LD_INT 1
7751: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7752: LD_EXP 53
7756: PPUSH
7757: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7761: LD_ADDR_VAR 0 1
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 21
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 50
7788: PUSH
7789: EMPTY
7790: LIST
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: PPUSH
7797: CALL_OW 69
7801: PUSH
7802: LD_EXP 53
7806: DIFF
7807: PPUSH
7808: LD_EXP 53
7812: PPUSH
7813: CALL_OW 74
7817: ST_TO_ADDR
// DialogueOn ;
7818: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7822: LD_EXP 53
7826: PPUSH
7827: LD_STRING D11a-Kir-1
7829: PPUSH
7830: CALL_OW 88
// if nearUnit = Belkov then
7834: LD_VAR 0 1
7838: PUSH
7839: LD_EXP 51
7843: EQUAL
7844: IFFALSE 7884
// begin Say ( Belkov , D11a-Bel-1 ) ;
7846: LD_EXP 51
7850: PPUSH
7851: LD_STRING D11a-Bel-1
7853: PPUSH
7854: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7858: LD_EXP 53
7862: PPUSH
7863: LD_STRING D11a-Kir-2
7865: PPUSH
7866: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7870: LD_EXP 51
7874: PPUSH
7875: LD_STRING D11a-Bel-2
7877: PPUSH
7878: CALL_OW 88
// end else
7882: GO 7925
// begin if GetSex ( nearUnit ) = sex_male then
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL_OW 258
7893: PUSH
7894: LD_INT 1
7896: EQUAL
7897: IFFALSE 7913
// Say ( nearUnit , D11a-RSol1-2 ) else
7899: LD_VAR 0 1
7903: PPUSH
7904: LD_STRING D11a-RSol1-2
7906: PPUSH
7907: CALL_OW 88
7911: GO 7925
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_STRING D11a-RFSol1-2
7920: PPUSH
7921: CALL_OW 88
// end ; DialogueOff ;
7925: CALL_OW 7
// wait ( 0 0$5 ) ;
7929: LD_INT 175
7931: PPUSH
7932: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7936: LD_EXP 53
7940: PPUSH
7941: LD_STRING D11c-Kir-1
7943: PPUSH
7944: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7948: LD_EXP 46
7952: PPUSH
7953: LD_STRING D11c-Bur-1
7955: PPUSH
7956: CALL_OW 88
// end ;
7960: PPOPN 1
7962: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7963: LD_EXP 22
7967: PUSH
7968: LD_INT 1
7970: PPUSH
7971: LD_INT 22
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PPUSH
7995: CALL_OW 70
7999: PUSH
8000: LD_INT 0
8002: GREATER
8003: AND
8004: IFFALSE 8016
8006: GO 8008
8008: DISABLE
// begin Query ( QExit1 ) ;
8009: LD_STRING QExit1
8011: PPUSH
8012: CALL_OW 97
// end ; end_of_file
8016: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8017: LD_INT 0
8019: PPUSH
8020: PPUSH
// if exist_mode then
8021: LD_VAR 0 2
8025: IFFALSE 8050
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8027: LD_ADDR_VAR 0 4
8031: PUSH
8032: LD_EXP 31
8036: PUSH
8037: LD_VAR 0 1
8041: STR
8042: PPUSH
8043: CALL_OW 34
8047: ST_TO_ADDR
8048: GO 8065
// unit := NewCharacter ( ident ) ;
8050: LD_ADDR_VAR 0 4
8054: PUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 25
8064: ST_TO_ADDR
// result := unit ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_VAR 0 4
8074: ST_TO_ADDR
// end ;
8075: LD_VAR 0 3
8079: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
8084: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8085: LD_ADDR_VAR 0 1
8089: PUSH
8090: LD_VAR 0 1
8094: PUSH
8095: LD_EXP 46
8099: PUSH
8100: LD_EXP 54
8104: PUSH
8105: LD_EXP 51
8109: PUSH
8110: LD_EXP 53
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: DIFF
8121: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8122: LD_ADDR_VAR 0 7
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: LD_INT 1
8134: PPUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 12
8144: ARRAY
8145: ST_TO_ADDR
// if radio then
8146: LD_VAR 0 4
8150: IFFALSE 8199
// begin if GetSex ( speaker ) = sex_male then
8152: LD_VAR 0 7
8156: PPUSH
8157: CALL_OW 258
8161: PUSH
8162: LD_INT 1
8164: EQUAL
8165: IFFALSE 8183
// SayRadio ( speaker , dialogMID ) else
8167: LD_VAR 0 7
8171: PPUSH
8172: LD_VAR 0 2
8176: PPUSH
8177: CALL_OW 94
8181: GO 8197
// SayRadio ( speaker , dialogFID ) ;
8183: LD_VAR 0 7
8187: PPUSH
8188: LD_VAR 0 3
8192: PPUSH
8193: CALL_OW 94
// end else
8197: GO 8244
// begin if GetSex ( speaker ) = sex_male then
8199: LD_VAR 0 7
8203: PPUSH
8204: CALL_OW 258
8208: PUSH
8209: LD_INT 1
8211: EQUAL
8212: IFFALSE 8230
// Say ( speaker , dialogMID ) else
8214: LD_VAR 0 7
8218: PPUSH
8219: LD_VAR 0 2
8223: PPUSH
8224: CALL_OW 88
8228: GO 8244
// Say ( speaker , dialogFID ) ;
8230: LD_VAR 0 7
8234: PPUSH
8235: LD_VAR 0 3
8239: PPUSH
8240: CALL_OW 88
// end ; result := speaker ;
8244: LD_ADDR_VAR 0 5
8248: PUSH
8249: LD_VAR 0 7
8253: ST_TO_ADDR
// end ;
8254: LD_VAR 0 5
8258: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8259: LD_INT 0
8261: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 255
8271: PUSH
8272: LD_OWVAR 2
8276: EQUAL
8277: PUSH
8278: LD_VAR 0 1
8282: PPUSH
8283: CALL_OW 302
8287: AND
8288: IFFALSE 8310
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_EXP 30
8299: PUSH
8300: LD_VAR 0 2
8304: STR
8305: PPUSH
8306: CALL_OW 38
// end ;
8310: LD_VAR 0 3
8314: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
// resultCharactersToSave = [ ] ;
8320: LD_ADDR_VAR 0 5
8324: PUSH
8325: EMPTY
8326: ST_TO_ADDR
// for unit in characters do
8327: LD_ADDR_VAR 0 4
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: FOR_IN
8338: IFFALSE 8386
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8340: LD_VAR 0 4
8344: PPUSH
8345: CALL_OW 255
8349: PUSH
8350: LD_OWVAR 2
8354: EQUAL
8355: PUSH
8356: LD_VAR 0 4
8360: PPUSH
8361: CALL_OW 302
8365: AND
8366: IFFALSE 8384
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: LD_VAR 0 5
8377: PUSH
8378: LD_VAR 0 4
8382: ADD
8383: ST_TO_ADDR
8384: GO 8337
8386: POP
8387: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_EXP 30
8397: PUSH
8398: LD_VAR 0 2
8402: STR
8403: PPUSH
8404: CALL_OW 38
// end ;
8408: LD_VAR 0 3
8412: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8413: LD_INT 0
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 302
8436: NOT
8437: PUSH
8438: LD_VAR 0 4
8442: PUSH
8443: LD_INT 1
8445: EQUAL
8446: OR
8447: PUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_VAR 0 3
8457: PPUSH
8458: CALL_OW 488
8462: NOT
8463: OR
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: LD_VAR 0 2
8474: PPUSH
8475: LD_VAR 0 3
8479: PPUSH
8480: CALL_OW 297
8484: PUSH
8485: LD_VAR 0 4
8489: GREATEREQUAL
8490: OR
8491: PUSH
8492: LD_VAR 0 5
8496: PUSH
8497: LD_INT 1
8499: PUSH
8500: LD_INT 0
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: IN
8507: NOT
8508: OR
8509: IFFALSE 8513
// exit ;
8511: GO 10070
// attempts = 0 ;
8513: LD_ADDR_VAR 0 17
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8521: LD_ADDR_VAR 0 7
8525: PUSH
8526: EMPTY
8527: ST_TO_ADDR
// list_coords = [ ] ;
8528: LD_ADDR_VAR 0 8
8532: PUSH
8533: EMPTY
8534: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8535: LD_ADDR_VAR 0 9
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_VAR 0 3
8549: PPUSH
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 250
8559: PPUSH
8560: LD_VAR 0 1
8564: PPUSH
8565: CALL_OW 251
8569: PPUSH
8570: CALL 10075 0 4
8574: ST_TO_ADDR
// if attempts = 0 then
8575: LD_VAR 0 17
8579: PUSH
8580: LD_INT 0
8582: EQUAL
8583: IFFALSE 8691
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8585: LD_ADDR_VAR 0 10
8589: PUSH
8590: LD_VAR 0 9
8594: PUSH
8595: LD_VAR 0 9
8599: PUSH
8600: LD_INT 1
8602: PLUS
8603: PUSH
8604: LD_VAR 0 9
8608: PUSH
8609: LD_INT 1
8611: MINUS
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8618: LD_VAR 0 10
8622: PUSH
8623: LD_INT 2
8625: ARRAY
8626: PUSH
8627: LD_INT 6
8629: EQUAL
8630: IFFALSE 8653
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8632: LD_ADDR_VAR 0 10
8636: PUSH
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: LD_INT 0
8647: PPUSH
8648: CALL_OW 1
8652: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8653: LD_VAR 0 10
8657: PUSH
8658: LD_INT 3
8660: ARRAY
8661: PUSH
8662: LD_INT 1
8664: NEG
8665: EQUAL
8666: IFFALSE 8689
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8668: LD_ADDR_VAR 0 10
8672: PUSH
8673: LD_VAR 0 10
8677: PPUSH
8678: LD_INT 3
8680: PPUSH
8681: LD_INT 5
8683: PPUSH
8684: CALL_OW 1
8688: ST_TO_ADDR
// end else
8689: GO 8728
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8691: LD_ADDR_VAR 0 10
8695: PUSH
8696: LD_INT 0
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: LD_INT 4
8710: PUSH
8711: LD_INT 5
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: PUSH
8722: LD_VAR 0 9
8726: DIFF
8727: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8728: LD_ADDR_VAR 0 14
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_VAR 0 10
8742: PUSH
8743: LD_INT 0
8745: PLUS
8746: PUSH
8747: FOR_TO
8748: IFFALSE 9070
// case dir_list [ c ] of 0 :
8750: LD_VAR 0 10
8754: PUSH
8755: LD_VAR 0 14
8759: ARRAY
8760: PUSH
8761: LD_INT 0
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8810
8769: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8770: LD_ADDR_VAR 0 8
8774: PUSH
8775: LD_VAR 0 8
8779: PPUSH
8780: LD_INT 1
8782: PPUSH
8783: LD_VAR 0 2
8787: PUSH
8788: LD_VAR 0 3
8792: PUSH
8793: LD_VAR 0 4
8797: MINUS
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 2
8807: ST_TO_ADDR
8808: GO 9068
8810: LD_INT 1
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8859
8818: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8819: LD_ADDR_VAR 0 8
8823: PUSH
8824: LD_VAR 0 8
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_VAR 0 2
8836: PUSH
8837: LD_VAR 0 4
8841: PLUS
8842: PUSH
8843: LD_VAR 0 3
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 2
8856: ST_TO_ADDR
8857: GO 9068
8859: LD_INT 2
8861: DOUBLE
8862: EQUAL
8863: IFTRUE 8867
8865: GO 8914
8867: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8868: LD_ADDR_VAR 0 8
8872: PUSH
8873: LD_VAR 0 8
8877: PPUSH
8878: LD_INT 1
8880: PPUSH
8881: LD_VAR 0 2
8885: PUSH
8886: LD_VAR 0 4
8890: PLUS
8891: PUSH
8892: LD_VAR 0 3
8896: PUSH
8897: LD_VAR 0 4
8901: PLUS
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 2
8911: ST_TO_ADDR
8912: GO 9068
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8963
8922: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8923: LD_ADDR_VAR 0 8
8927: PUSH
8928: LD_VAR 0 8
8932: PPUSH
8933: LD_INT 1
8935: PPUSH
8936: LD_VAR 0 2
8940: PUSH
8941: LD_VAR 0 3
8945: PUSH
8946: LD_VAR 0 4
8950: PLUS
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PPUSH
8956: CALL_OW 2
8960: ST_TO_ADDR
8961: GO 9068
8963: LD_INT 4
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9012
8971: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8972: LD_ADDR_VAR 0 8
8976: PUSH
8977: LD_VAR 0 8
8981: PPUSH
8982: LD_INT 1
8984: PPUSH
8985: LD_VAR 0 2
8989: PUSH
8990: LD_VAR 0 4
8994: MINUS
8995: PUSH
8996: LD_VAR 0 3
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 2
9009: ST_TO_ADDR
9010: GO 9068
9012: LD_INT 5
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9067
9020: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9021: LD_ADDR_VAR 0 8
9025: PUSH
9026: LD_VAR 0 8
9030: PPUSH
9031: LD_INT 1
9033: PPUSH
9034: LD_VAR 0 2
9038: PUSH
9039: LD_VAR 0 4
9043: MINUS
9044: PUSH
9045: LD_VAR 0 3
9049: PUSH
9050: LD_VAR 0 4
9054: MINUS
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 2
9064: ST_TO_ADDR
9065: GO 9068
9067: POP
9068: GO 8747
9070: POP
9071: POP
// if dist < 30 then
9072: LD_VAR 0 4
9076: PUSH
9077: LD_INT 30
9079: LESS
9080: IFFALSE 9092
// c = 1 else
9082: LD_ADDR_VAR 0 14
9086: PUSH
9087: LD_INT 1
9089: ST_TO_ADDR
9090: GO 9100
// c = 2 ;
9092: LD_ADDR_VAR 0 14
9096: PUSH
9097: LD_INT 2
9099: ST_TO_ADDR
// b = 1 ;
9100: LD_ADDR_VAR 0 11
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9108: LD_VAR 0 11
9112: PUSH
9113: LD_VAR 0 4
9117: PUSH
9118: LD_INT 1
9120: MINUS
9121: LESSEQUAL
9122: IFFALSE 9550
// begin if 0 in dir_list and 1 in dir_list then
9124: LD_INT 0
9126: PUSH
9127: LD_VAR 0 10
9131: IN
9132: PUSH
9133: LD_INT 1
9135: PUSH
9136: LD_VAR 0 10
9140: IN
9141: AND
9142: IFFALSE 9194
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9144: LD_ADDR_VAR 0 8
9148: PUSH
9149: LD_VAR 0 8
9153: PPUSH
9154: LD_INT 1
9156: PPUSH
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 11
9166: PLUS
9167: PUSH
9168: LD_VAR 0 3
9172: PUSH
9173: LD_VAR 0 4
9177: MINUS
9178: PUSH
9179: LD_VAR 0 11
9183: PLUS
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PPUSH
9189: CALL_OW 2
9193: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9194: LD_INT 1
9196: PUSH
9197: LD_VAR 0 10
9201: IN
9202: PUSH
9203: LD_INT 2
9205: PUSH
9206: LD_VAR 0 10
9210: IN
9211: AND
9212: IFFALSE 9258
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9214: LD_ADDR_VAR 0 8
9218: PUSH
9219: LD_VAR 0 8
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: LD_VAR 0 2
9231: PUSH
9232: LD_VAR 0 4
9236: PLUS
9237: PUSH
9238: LD_VAR 0 3
9242: PUSH
9243: LD_VAR 0 11
9247: PLUS
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL_OW 2
9257: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9258: LD_INT 2
9260: PUSH
9261: LD_VAR 0 10
9265: IN
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_VAR 0 10
9274: IN
9275: AND
9276: IFFALSE 9328
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9278: LD_ADDR_VAR 0 8
9282: PUSH
9283: LD_VAR 0 8
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: LD_VAR 0 2
9295: PUSH
9296: LD_VAR 0 4
9300: PLUS
9301: PUSH
9302: LD_VAR 0 11
9306: MINUS
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: LD_VAR 0 4
9317: PLUS
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 2
9327: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9328: LD_INT 3
9330: PUSH
9331: LD_VAR 0 10
9335: IN
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: LD_VAR 0 10
9344: IN
9345: AND
9346: IFFALSE 9398
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9348: LD_ADDR_VAR 0 8
9352: PUSH
9353: LD_VAR 0 8
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_VAR 0 11
9370: MINUS
9371: PUSH
9372: LD_VAR 0 3
9376: PUSH
9377: LD_VAR 0 4
9381: PLUS
9382: PUSH
9383: LD_VAR 0 11
9387: MINUS
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 2
9397: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9398: LD_INT 4
9400: PUSH
9401: LD_VAR 0 10
9405: IN
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: LD_VAR 0 10
9414: IN
9415: AND
9416: IFFALSE 9462
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9418: LD_ADDR_VAR 0 8
9422: PUSH
9423: LD_VAR 0 8
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: LD_VAR 0 2
9435: PUSH
9436: LD_VAR 0 4
9440: MINUS
9441: PUSH
9442: LD_VAR 0 3
9446: PUSH
9447: LD_VAR 0 11
9451: MINUS
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 2
9461: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9462: LD_INT 5
9464: PUSH
9465: LD_VAR 0 10
9469: IN
9470: PUSH
9471: LD_INT 0
9473: PUSH
9474: LD_VAR 0 10
9478: IN
9479: AND
9480: IFFALSE 9532
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9482: LD_ADDR_VAR 0 8
9486: PUSH
9487: LD_VAR 0 8
9491: PPUSH
9492: LD_INT 1
9494: PPUSH
9495: LD_VAR 0 2
9499: PUSH
9500: LD_VAR 0 4
9504: MINUS
9505: PUSH
9506: LD_VAR 0 11
9510: PLUS
9511: PUSH
9512: LD_VAR 0 3
9516: PUSH
9517: LD_VAR 0 4
9521: MINUS
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 2
9531: ST_TO_ADDR
// b = b + c end ;
9532: LD_ADDR_VAR 0 11
9536: PUSH
9537: LD_VAR 0 11
9541: PUSH
9542: LD_VAR 0 14
9546: PLUS
9547: ST_TO_ADDR
9548: GO 9108
// if list_coords = 0 then
9550: LD_VAR 0 8
9554: PUSH
9555: LD_INT 0
9557: EQUAL
9558: IFFALSE 9562
// exit ;
9560: GO 10070
// repeat min_dist = 5000 ;
9562: LD_ADDR_VAR 0 12
9566: PUSH
9567: LD_INT 5000
9569: ST_TO_ADDR
// for b in list_coords do
9570: LD_ADDR_VAR 0 11
9574: PUSH
9575: LD_VAR 0 8
9579: PUSH
9580: FOR_IN
9581: IFFALSE 9640
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9583: LD_ADDR_VAR 0 13
9587: PUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: LD_VAR 0 11
9597: PUSH
9598: LD_INT 1
9600: ARRAY
9601: PPUSH
9602: LD_VAR 0 11
9606: PUSH
9607: LD_INT 2
9609: ARRAY
9610: PPUSH
9611: CALL_OW 297
9615: ST_TO_ADDR
// if temp_dist < min_dist then
9616: LD_VAR 0 13
9620: PUSH
9621: LD_VAR 0 12
9625: LESS
9626: IFFALSE 9638
// min_dist = temp_dist ;
9628: LD_ADDR_VAR 0 12
9632: PUSH
9633: LD_VAR 0 13
9637: ST_TO_ADDR
// end ;
9638: GO 9580
9640: POP
9641: POP
// c = 0 ;
9642: LD_ADDR_VAR 0 14
9646: PUSH
9647: LD_INT 0
9649: ST_TO_ADDR
// repeat c = c + 1 ;
9650: LD_ADDR_VAR 0 14
9654: PUSH
9655: LD_VAR 0 14
9659: PUSH
9660: LD_INT 1
9662: PLUS
9663: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9664: LD_VAR 0 1
9668: PPUSH
9669: LD_VAR 0 8
9673: PUSH
9674: LD_VAR 0 14
9678: ARRAY
9679: PUSH
9680: LD_INT 1
9682: ARRAY
9683: PPUSH
9684: LD_VAR 0 8
9688: PUSH
9689: LD_VAR 0 14
9693: ARRAY
9694: PUSH
9695: LD_INT 2
9697: ARRAY
9698: PPUSH
9699: CALL_OW 297
9703: PUSH
9704: LD_VAR 0 12
9708: EQUAL
9709: IFFALSE 9774
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9711: LD_ADDR_VAR 0 7
9715: PUSH
9716: LD_VAR 0 7
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: LD_VAR 0 8
9728: PUSH
9729: LD_VAR 0 14
9733: ARRAY
9734: PPUSH
9735: CALL_OW 2
9739: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9740: LD_ADDR_VAR 0 8
9744: PUSH
9745: LD_VAR 0 8
9749: PPUSH
9750: LD_VAR 0 14
9754: PPUSH
9755: CALL_OW 3
9759: ST_TO_ADDR
// c = c - 1 ;
9760: LD_ADDR_VAR 0 14
9764: PUSH
9765: LD_VAR 0 14
9769: PUSH
9770: LD_INT 1
9772: MINUS
9773: ST_TO_ADDR
// end ; until c = list_coords ;
9774: LD_VAR 0 14
9778: PUSH
9779: LD_VAR 0 8
9783: EQUAL
9784: IFFALSE 9650
// c = 0 ;
9786: LD_ADDR_VAR 0 14
9790: PUSH
9791: LD_INT 0
9793: ST_TO_ADDR
// if list_nearest > 0 then
9794: LD_VAR 0 7
9798: PUSH
9799: LD_INT 0
9801: GREATER
9802: IFFALSE 9944
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9804: LD_ADDR_VAR 0 15
9808: PUSH
9809: LD_INT 1
9811: PPUSH
9812: LD_VAR 0 7
9816: PPUSH
9817: CALL_OW 12
9821: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9822: LD_ADDR_VAR 0 16
9826: PUSH
9827: LD_VAR 0 7
9831: PUSH
9832: LD_VAR 0 15
9836: ARRAY
9837: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9838: LD_VAR 0 16
9842: PUSH
9843: LD_INT 1
9845: ARRAY
9846: PPUSH
9847: LD_VAR 0 16
9851: PUSH
9852: LD_INT 2
9854: ARRAY
9855: PPUSH
9856: CALL_OW 488
9860: PUSH
9861: LD_INT 0
9863: GREATER
9864: PUSH
9865: LD_VAR 0 16
9869: PUSH
9870: LD_INT 1
9872: ARRAY
9873: PPUSH
9874: LD_VAR 0 16
9878: PUSH
9879: LD_INT 2
9881: ARRAY
9882: PPUSH
9883: CALL_OW 428
9887: PUSH
9888: LD_INT 0
9890: EQUAL
9891: AND
9892: IFFALSE 9904
// c = 1 else
9894: LD_ADDR_VAR 0 14
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
9902: GO 9924
// list_nearest = Delete ( list_nearest , rand_num ) ;
9904: LD_ADDR_VAR 0 7
9908: PUSH
9909: LD_VAR 0 7
9913: PPUSH
9914: LD_VAR 0 15
9918: PPUSH
9919: CALL_OW 3
9923: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9924: LD_VAR 0 14
9928: PUSH
9929: LD_INT 1
9931: EQUAL
9932: PUSH
9933: LD_VAR 0 7
9937: PUSH
9938: LD_INT 0
9940: EQUAL
9941: OR
9942: IFFALSE 9804
// end ; until c = 1 or list_coords = 0 ;
9944: LD_VAR 0 14
9948: PUSH
9949: LD_INT 1
9951: EQUAL
9952: PUSH
9953: LD_VAR 0 8
9957: PUSH
9958: LD_INT 0
9960: EQUAL
9961: OR
9962: IFFALSE 9562
// attempts = attempts + 1 ;
9964: LD_ADDR_VAR 0 17
9968: PUSH
9969: LD_VAR 0 17
9973: PUSH
9974: LD_INT 1
9976: PLUS
9977: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9978: LD_VAR 0 14
9982: PUSH
9983: LD_INT 1
9985: EQUAL
9986: PUSH
9987: LD_VAR 0 17
9991: PUSH
9992: LD_INT 1
9994: GREATER
9995: OR
9996: IFFALSE 8521
// if c = 1 then
9998: LD_VAR 0 14
10002: PUSH
10003: LD_INT 1
10005: EQUAL
10006: IFFALSE 10070
// if add then
10008: LD_VAR 0 5
10012: IFFALSE 10043
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10014: LD_VAR 0 1
10018: PPUSH
10019: LD_VAR 0 16
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_VAR 0 16
10032: PUSH
10033: LD_INT 2
10035: ARRAY
10036: PPUSH
10037: CALL_OW 171
10041: GO 10070
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10043: LD_VAR 0 1
10047: PPUSH
10048: LD_VAR 0 16
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 16
10061: PUSH
10062: LD_INT 2
10064: ARRAY
10065: PPUSH
10066: CALL_OW 111
// end ;
10070: LD_VAR 0 6
10074: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
10081: PPUSH
10082: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10083: LD_VAR 0 1
10087: PPUSH
10088: LD_VAR 0 2
10092: PPUSH
10093: CALL_OW 488
10097: NOT
10098: PUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: LD_VAR 0 4
10108: PPUSH
10109: CALL_OW 488
10113: NOT
10114: OR
10115: IFFALSE 10128
// begin result = - 1 ;
10117: LD_ADDR_VAR 0 5
10121: PUSH
10122: LD_INT 1
10124: NEG
10125: ST_TO_ADDR
// exit ;
10126: GO 10288
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10128: LD_ADDR_VAR 0 6
10132: PUSH
10133: LD_VAR 0 1
10137: PPUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_VAR 0 4
10152: PPUSH
10153: CALL_OW 298
10157: ST_TO_ADDR
// dist_2 = 99999 ;
10158: LD_ADDR_VAR 0 7
10162: PUSH
10163: LD_INT 99999
10165: ST_TO_ADDR
// for b = 0 to 5 do
10166: LD_ADDR_VAR 0 8
10170: PUSH
10171: DOUBLE
10172: LD_INT 0
10174: DEC
10175: ST_TO_ADDR
10176: LD_INT 5
10178: PUSH
10179: FOR_TO
10180: IFFALSE 10276
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_VAR 0 8
10196: PPUSH
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 272
10206: PPUSH
10207: LD_VAR 0 2
10211: PPUSH
10212: LD_VAR 0 8
10216: PPUSH
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 273
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_VAR 0 4
10236: PPUSH
10237: CALL_OW 298
10241: ST_TO_ADDR
// if temp_dist < dist_2 then
10242: LD_VAR 0 9
10246: PUSH
10247: LD_VAR 0 7
10251: LESS
10252: IFFALSE 10274
// begin dist_2 = temp_dist ;
10254: LD_ADDR_VAR 0 7
10258: PUSH
10259: LD_VAR 0 9
10263: ST_TO_ADDR
// dir = b ;
10264: LD_ADDR_VAR 0 10
10268: PUSH
10269: LD_VAR 0 8
10273: ST_TO_ADDR
// end ; end ;
10274: GO 10179
10276: POP
10277: POP
// result = dir ;
10278: LD_ADDR_VAR 0 5
10282: PUSH
10283: LD_VAR 0 10
10287: ST_TO_ADDR
// end ;
10288: LD_VAR 0 5
10292: RET
// export function MoveToHill ; begin
10293: LD_INT 0
10295: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10296: LD_EXP 47
10300: PPUSH
10301: LD_INT 65
10303: PPUSH
10304: LD_INT 59
10306: PPUSH
10307: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10311: LD_EXP 47
10315: PPUSH
10316: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10320: LD_EXP 48
10324: PPUSH
10325: LD_INT 65
10327: PPUSH
10328: LD_INT 58
10330: PPUSH
10331: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10335: LD_EXP 48
10339: PPUSH
10340: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10344: LD_EXP 49
10348: PPUSH
10349: LD_INT 64
10351: PPUSH
10352: LD_INT 57
10354: PPUSH
10355: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10359: LD_EXP 49
10363: PPUSH
10364: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10368: LD_EXP 50
10372: PPUSH
10373: LD_INT 64
10375: PPUSH
10376: LD_INT 56
10378: PPUSH
10379: CALL_OW 111
// AddComCrawl ( Balei ) ;
10383: LD_EXP 50
10387: PPUSH
10388: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10392: LD_EXP 51
10396: PPUSH
10397: LD_INT 63
10399: PPUSH
10400: LD_INT 55
10402: PPUSH
10403: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10407: LD_EXP 51
10411: PPUSH
10412: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10416: LD_EXP 52
10420: PPUSH
10421: LD_INT 66
10423: PPUSH
10424: LD_INT 58
10426: PPUSH
10427: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10431: LD_EXP 52
10435: PPUSH
10436: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10440: LD_EXP 54
10444: PPUSH
10445: CALL_OW 255
10449: PUSH
10450: LD_INT 6
10452: EQUAL
10453: PUSH
10454: LD_EXP 12
10458: AND
10459: IFFALSE 10485
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10461: LD_EXP 54
10465: PPUSH
10466: LD_INT 63
10468: PPUSH
10469: LD_INT 54
10471: PPUSH
10472: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10476: LD_EXP 54
10480: PPUSH
10481: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 3 then
10485: LD_EXP 47
10489: PPUSH
10490: LD_INT 65
10492: PPUSH
10493: LD_INT 59
10495: PPUSH
10496: CALL_OW 297
10500: PUSH
10501: LD_INT 3
10503: LESS
10504: IFFALSE 10530
// begin ComCrawl ( Pokryshkin ) ;
10506: LD_EXP 47
10510: PPUSH
10511: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10515: LD_EXP 47
10519: PPUSH
10520: LD_INT 65
10522: PPUSH
10523: LD_INT 59
10525: PPUSH
10526: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 3 then
10530: LD_EXP 48
10534: PPUSH
10535: LD_INT 65
10537: PPUSH
10538: LD_INT 58
10540: PPUSH
10541: CALL_OW 297
10545: PUSH
10546: LD_INT 3
10548: LESS
10549: IFFALSE 10575
// begin ComCrawl ( Saseda ) ;
10551: LD_EXP 48
10555: PPUSH
10556: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10560: LD_EXP 48
10564: PPUSH
10565: LD_INT 65
10567: PPUSH
10568: LD_INT 58
10570: PPUSH
10571: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 3 then
10575: LD_EXP 49
10579: PPUSH
10580: LD_INT 64
10582: PPUSH
10583: LD_INT 57
10585: PPUSH
10586: CALL_OW 297
10590: PUSH
10591: LD_INT 3
10593: LESS
10594: IFFALSE 10620
// begin ComCrawl ( Jaworska ) ;
10596: LD_EXP 49
10600: PPUSH
10601: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10605: LD_EXP 49
10609: PPUSH
10610: LD_INT 64
10612: PPUSH
10613: LD_INT 57
10615: PPUSH
10616: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 3 then
10620: LD_EXP 50
10624: PPUSH
10625: LD_INT 64
10627: PPUSH
10628: LD_INT 56
10630: PPUSH
10631: CALL_OW 297
10635: PUSH
10636: LD_INT 3
10638: LESS
10639: IFFALSE 10665
// begin ComCrawl ( Balei ) ;
10641: LD_EXP 50
10645: PPUSH
10646: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10650: LD_EXP 50
10654: PPUSH
10655: LD_INT 64
10657: PPUSH
10658: LD_INT 56
10660: PPUSH
10661: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 3 then
10665: LD_EXP 51
10669: PPUSH
10670: LD_INT 63
10672: PPUSH
10673: LD_INT 55
10675: PPUSH
10676: CALL_OW 297
10680: PUSH
10681: LD_INT 3
10683: LESS
10684: IFFALSE 10710
// begin ComCrawl ( Belkov ) ;
10686: LD_EXP 51
10690: PPUSH
10691: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10695: LD_EXP 51
10699: PPUSH
10700: LD_INT 63
10702: PPUSH
10703: LD_INT 55
10705: PPUSH
10706: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 3 then
10710: LD_EXP 52
10714: PPUSH
10715: LD_INT 66
10717: PPUSH
10718: LD_INT 58
10720: PPUSH
10721: CALL_OW 297
10725: PUSH
10726: LD_INT 3
10728: LESS
10729: IFFALSE 10755
// begin ComCrawl ( Jaunzeme ) ;
10731: LD_EXP 52
10735: PPUSH
10736: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10740: LD_EXP 52
10744: PPUSH
10745: LD_INT 66
10747: PPUSH
10748: LD_INT 58
10750: PPUSH
10751: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 3 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10755: LD_EXP 54
10759: PPUSH
10760: LD_INT 63
10762: PPUSH
10763: LD_INT 54
10765: PPUSH
10766: CALL_OW 297
10770: PUSH
10771: LD_INT 3
10773: LESS
10774: PUSH
10775: LD_EXP 54
10779: PPUSH
10780: CALL_OW 255
10784: PUSH
10785: LD_INT 6
10787: EQUAL
10788: AND
10789: PUSH
10790: LD_EXP 12
10794: AND
10795: IFFALSE 10821
// begin ComCrawl ( Gnyevko ) ;
10797: LD_EXP 54
10801: PPUSH
10802: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10806: LD_EXP 54
10810: PPUSH
10811: LD_INT 63
10813: PPUSH
10814: LD_INT 54
10816: PPUSH
10817: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10821: LD_INT 35
10823: PPUSH
10824: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor ;
10828: LD_EXP 47
10832: PPUSH
10833: LD_INT 65
10835: PPUSH
10836: LD_INT 59
10838: PPUSH
10839: CALL_OW 297
10843: PUSH
10844: LD_INT 4
10846: LESS
10847: PUSH
10848: LD_EXP 18
10852: NOT
10853: AND
10854: IFFALSE 10485
// end ; end_of_file
10856: LD_VAR 0 1
10860: RET
// export function BurlakDying ; begin
10861: LD_INT 0
10863: PPUSH
// YouLost ( Burlak ) ;
10864: LD_STRING Burlak
10866: PPUSH
10867: CALL_OW 104
// end ;
10871: LD_VAR 0 1
10875: RET
// every 0 0$1 trigger kirovSolds = 0 do
10876: LD_EXP 56
10880: PUSH
10881: LD_INT 0
10883: EQUAL
10884: IFFALSE 10896
10886: GO 10888
10888: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10889: LD_STRING KirovSoldsDie
10891: PPUSH
10892: CALL_OW 104
10896: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10897: LD_EXP 22
10901: PUSH
10902: LD_INT 1
10904: PPUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 3
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 21
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 71
10933: PUSH
10934: LD_INT 0
10936: EQUAL
10937: AND
10938: IFFALSE 11217
10940: GO 10942
10942: DISABLE
10943: LD_INT 0
10945: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10946: LD_EXP 53
10950: PPUSH
10951: CALL_OW 302
10955: PUSH
10956: LD_EXP 53
10960: PPUSH
10961: CALL_OW 255
10965: PUSH
10966: LD_INT 8
10968: EQUAL
10969: AND
10970: PUSH
10971: LD_EXP 54
10975: PPUSH
10976: CALL_OW 302
10980: PUSH
10981: LD_EXP 54
10985: PPUSH
10986: CALL_OW 255
10990: PUSH
10991: LD_INT 8
10993: EQUAL
10994: AND
10995: OR
10996: IFFALSE 11128
// begin case Query ( QExit2 ) of 1 :
10998: LD_STRING QExit2
11000: PPUSH
11001: CALL_OW 97
11005: PUSH
11006: LD_INT 1
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11106
11014: POP
// begin if IsOk ( Belkov ) then
11015: LD_EXP 51
11019: PPUSH
11020: CALL_OW 302
11024: IFFALSE 11040
// Say ( Belkov , D12-Bel-1 ) else
11026: LD_EXP 51
11030: PPUSH
11031: LD_STRING D12-Bel-1
11033: PPUSH
11034: CALL_OW 88
11038: GO 11100
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11040: LD_INT 22
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 21
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 50
11062: PUSH
11063: EMPTY
11064: LIST
11065: PUSH
11066: LD_INT 26
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PPUSH
11087: LD_STRING D12-RSol1-1
11089: PPUSH
11090: LD_STRING 
11092: PPUSH
11093: LD_INT 0
11095: PPUSH
11096: CALL 8080 0 4
// FinishMission ;
11100: CALL 11220 0 0
// end ; 2 :
11104: GO 11126
11106: LD_INT 2
11108: DOUBLE
11109: EQUAL
11110: IFTRUE 11114
11112: GO 11125
11114: POP
// begin wait ( 0 0$5 ) ;
11115: LD_INT 175
11117: PPUSH
11118: CALL_OW 67
// enable ;
11122: ENABLE
// end ; end ;
11123: GO 11126
11125: POP
// end else
11126: GO 11217
// begin if IsOk ( Belkov ) then
11128: LD_EXP 51
11132: PPUSH
11133: CALL_OW 302
11137: IFFALSE 11153
// Say ( Belkov , D12-Bel-1 ) else
11139: LD_EXP 51
11143: PPUSH
11144: LD_STRING D12-Bel-1
11146: PPUSH
11147: CALL_OW 88
11151: GO 11213
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11153: LD_INT 22
11155: PUSH
11156: LD_INT 3
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 21
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 50
11175: PUSH
11176: EMPTY
11177: LIST
11178: PUSH
11179: LD_INT 26
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 69
11199: PPUSH
11200: LD_STRING D12-RSol1-1
11202: PPUSH
11203: LD_STRING 
11205: PPUSH
11206: LD_INT 0
11208: PPUSH
11209: CALL 8080 0 4
// FinishMission ;
11213: CALL 11220 0 0
// end ; end ;
11217: PPOPN 1
11219: END
// function FinishMission ; begin
11220: LD_INT 0
11222: PPUSH
// SetRewards ;
11223: CALL 11244 0 0
// SavePlayerCharacters ;
11227: CALL 11595 0 0
// SaveGlobalVariables ;
11231: CALL 11725 0 0
// YouWin ;
11235: CALL_OW 103
// end ;
11239: LD_VAR 0 1
11243: RET
// function SetRewards ; begin
11244: LD_INT 0
11246: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11247: LD_EXP 19
11251: NOT
11252: PUSH
11253: LD_EXP 20
11257: NOT
11258: AND
11259: IFFALSE 11271
// AddMedal ( NoEscape , 1 ) ;
11261: LD_STRING NoEscape
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11271: LD_EXP 19
11275: PUSH
11276: LD_EXP 20
11280: NOT
11281: AND
11282: IFFALSE 11295
// AddMedal ( NoEscape , - 1 ) ;
11284: LD_STRING NoEscape
11286: PPUSH
11287: LD_INT 1
11289: NEG
11290: PPUSH
11291: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11295: LD_EXP 19
11299: NOT
11300: PUSH
11301: LD_EXP 20
11305: AND
11306: IFFALSE 11319
// AddMedal ( NoEscape , - 2 ) ;
11308: LD_STRING NoEscape
11310: PPUSH
11311: LD_INT 2
11313: NEG
11314: PPUSH
11315: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11319: LD_EXP 19
11323: PUSH
11324: LD_EXP 20
11328: AND
11329: IFFALSE 11342
// AddMedal ( NoEscape , - 3 ) ;
11331: LD_STRING NoEscape
11333: PPUSH
11334: LD_INT 3
11336: NEG
11337: PPUSH
11338: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11342: LD_EXP 12
11346: PUSH
11347: LD_EXP 54
11351: PPUSH
11352: CALL_OW 302
11356: AND
11357: PUSH
11358: LD_EXP 21
11362: AND
11363: PUSH
11364: LD_EXP 53
11368: PPUSH
11369: CALL_OW 302
11373: AND
11374: IFFALSE 11386
// AddMedal ( Gnyevko , 1 ) ;
11376: LD_STRING Gnyevko
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11386: LD_EXP 12
11390: NOT
11391: PUSH
11392: LD_EXP 21
11396: AND
11397: PUSH
11398: LD_EXP 53
11402: PPUSH
11403: CALL_OW 302
11407: AND
11408: IFFALSE 11421
// AddMedal ( Gnyevko , - 1 ) ;
11410: LD_STRING Gnyevko
11412: PPUSH
11413: LD_INT 1
11415: NEG
11416: PPUSH
11417: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11421: LD_EXP 12
11425: PUSH
11426: LD_EXP 21
11430: NOT
11431: PUSH
11432: LD_EXP 54
11436: PPUSH
11437: CALL_OW 302
11441: NOT
11442: OR
11443: PUSH
11444: LD_EXP 53
11448: PPUSH
11449: CALL_OW 302
11453: NOT
11454: OR
11455: AND
11456: IFFALSE 11469
// AddMedal ( Gnyevko , - 2 ) ;
11458: LD_STRING Gnyevko
11460: PPUSH
11461: LD_INT 2
11463: NEG
11464: PPUSH
11465: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11469: LD_EXP 12
11473: NOT
11474: PUSH
11475: LD_EXP 21
11479: NOT
11480: AND
11481: PUSH
11482: LD_EXP 54
11486: PPUSH
11487: CALL_OW 302
11491: NOT
11492: PUSH
11493: LD_EXP 53
11497: PPUSH
11498: CALL_OW 302
11502: NOT
11503: AND
11504: OR
11505: IFFALSE 11518
// AddMedal ( Gnyevko , - 3 ) ;
11507: LD_STRING Gnyevko
11509: PPUSH
11510: LD_INT 3
11512: NEG
11513: PPUSH
11514: CALL_OW 101
// if lostComradesCounter = 0 then
11518: LD_EXP 23
11522: PUSH
11523: LD_INT 0
11525: EQUAL
11526: IFFALSE 11540
// AddMedal ( NoLosses , 1 ) else
11528: LD_STRING NoLosses
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 101
11538: GO 11550
// AddMedal ( NoLosses , 0 ) ;
11540: LD_STRING NoLosses
11542: PPUSH
11543: LD_INT 0
11545: PPUSH
11546: CALL_OW 101
// GiveMedals ( Main ) ;
11550: LD_STRING Main
11552: PPUSH
11553: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11557: LD_INT 22
11559: PUSH
11560: LD_INT 3
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: PPUSH
11586: CALL_OW 43
// end ;
11590: LD_VAR 0 1
11594: RET
// function SavePlayerCharacters ; var others ; begin
11595: LD_INT 0
11597: PPUSH
11598: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11599: LD_EXP 46
11603: PPUSH
11604: LD_STRING Burlak
11606: PPUSH
11607: CALL 8259 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
11611: LD_EXP 54
11615: PPUSH
11616: LD_STRING Gnyevko
11618: PPUSH
11619: CALL 8259 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
11623: LD_EXP 51
11627: PPUSH
11628: LD_STRING Belkov
11630: PPUSH
11631: CALL 8259 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
11635: LD_EXP 53
11639: PPUSH
11640: LD_STRING Kirilenkova
11642: PPUSH
11643: CALL 8259 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 22
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 21
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: PUSH
11681: LD_EXP 46
11685: PUSH
11686: LD_EXP 54
11690: PUSH
11691: LD_EXP 51
11695: PUSH
11696: LD_EXP 53
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: DIFF
11707: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_STRING other_survivors
11715: PPUSH
11716: CALL 8315 0 2
// end ;
11720: LD_VAR 0 1
11724: RET
// function SaveGlobalVariables ; begin
11725: LD_INT 0
11727: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11728: LD_EXP 1
11732: PPUSH
11733: LD_STRING 01_GladstoneStatus
11735: PPUSH
11736: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11740: LD_EXP 2
11744: PPUSH
11745: LD_STRING 01_JohannaStatus
11747: PPUSH
11748: CALL_OW 39
// end ; end_of_file
11752: LD_VAR 0 1
11756: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11757: LD_INT 0
11759: PPUSH
11760: PPUSH
11761: PPUSH
// uc_side = 1 ;
11762: LD_ADDR_OWVAR 20
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// hc_class := 1 ;
11770: LD_ADDR_OWVAR 28
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// hc_sex := sex_male ;
11778: LD_ADDR_OWVAR 27
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11786: LD_ADDR_OWVAR 33
11790: PUSH
11791: LD_STRING AmGalRemake
11793: ST_TO_ADDR
// hc_face_number := 1 ;
11794: LD_ADDR_OWVAR 34
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// hc_name := Charles Brown ;
11802: LD_ADDR_OWVAR 26
11806: PUSH
11807: LD_STRING Charles Brown
11809: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11810: LD_ADDR_OWVAR 29
11814: PUSH
11815: LD_INT 12
11817: PUSH
11818: LD_INT 11
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11825: LD_ADDR_OWVAR 31
11829: PUSH
11830: LD_INT 1
11832: PUSH
11833: LD_INT 0
11835: PUSH
11836: LD_INT 1
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: ST_TO_ADDR
// Charles = CreateHuman ;
11848: LD_ADDR_EXP 42
11852: PUSH
11853: CALL_OW 44
11857: ST_TO_ADDR
// hc_class := 1 ;
11858: LD_ADDR_OWVAR 28
11862: PUSH
11863: LD_INT 1
11865: ST_TO_ADDR
// hc_sex := sex_female ;
11866: LD_ADDR_OWVAR 27
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11874: LD_ADDR_OWVAR 33
11878: PUSH
11879: LD_STRING AmGalRemake
11881: ST_TO_ADDR
// hc_face_number := 2 ;
11882: LD_ADDR_OWVAR 34
11886: PUSH
11887: LD_INT 2
11889: ST_TO_ADDR
// hc_name := Johanna Holland ;
11890: LD_ADDR_OWVAR 26
11894: PUSH
11895: LD_STRING Johanna Holland
11897: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11898: LD_ADDR_OWVAR 29
11902: PUSH
11903: LD_INT 12
11905: PUSH
11906: LD_INT 11
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11913: LD_ADDR_OWVAR 31
11917: PUSH
11918: LD_EXP 36
11922: PUSH
11923: LD_INT 0
11925: PPUSH
11926: LD_INT 2
11928: PPUSH
11929: CALL_OW 12
11933: PUSH
11934: LD_INT 0
11936: PPUSH
11937: LD_INT 2
11939: PPUSH
11940: CALL_OW 12
11944: PUSH
11945: LD_INT 0
11947: PPUSH
11948: LD_INT 2
11950: PPUSH
11951: CALL_OW 12
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: ST_TO_ADDR
// Johanna = CreateHuman ;
11962: LD_ADDR_EXP 43
11966: PUSH
11967: CALL_OW 44
11971: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11972: LD_EXP 43
11976: PPUSH
11977: LD_INT 19
11979: PPUSH
11980: LD_INT 0
11982: PPUSH
11983: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11987: LD_EXP 43
11991: PPUSH
11992: LD_INT 23
11994: PPUSH
11995: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11999: LD_ADDR_EXP 44
12003: PUSH
12004: LD_STRING Gladstone
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL 8017 0 2
12014: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12015: LD_EXP 44
12019: PPUSH
12020: LD_INT 22
12022: PPUSH
12023: CALL_OW 52
// amApemans = [ ] ;
12027: LD_ADDR_EXP 45
12031: PUSH
12032: EMPTY
12033: ST_TO_ADDR
// for i := 1 to amApeAmount do
12034: LD_ADDR_VAR 0 2
12038: PUSH
12039: DOUBLE
12040: LD_INT 1
12042: DEC
12043: ST_TO_ADDR
12044: LD_EXP 35
12048: PUSH
12049: FOR_TO
12050: IFFALSE 12165
// begin hc_class := class_apeman ;
12052: LD_ADDR_OWVAR 28
12056: PUSH
12057: LD_INT 12
12059: ST_TO_ADDR
// hc_gallery :=  ;
12060: LD_ADDR_OWVAR 33
12064: PUSH
12065: LD_STRING 
12067: ST_TO_ADDR
// hc_name :=  ;
12068: LD_ADDR_OWVAR 26
12072: PUSH
12073: LD_STRING 
12075: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12076: LD_ADDR_OWVAR 31
12080: PUSH
12081: LD_EXP 36
12085: PUSH
12086: LD_INT 0
12088: PPUSH
12089: LD_INT 2
12091: PPUSH
12092: CALL_OW 12
12096: PUSH
12097: LD_INT 0
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: CALL_OW 12
12107: PUSH
12108: LD_INT 0
12110: PPUSH
12111: LD_INT 2
12113: PPUSH
12114: CALL_OW 12
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: ST_TO_ADDR
// ape = CreateHuman ;
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: CALL_OW 44
12134: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12135: LD_VAR 0 3
12139: PPUSH
12140: LD_INT 22
12142: PPUSH
12143: CALL_OW 52
// amApemans = amApemans ^ ape ;
12147: LD_ADDR_EXP 45
12151: PUSH
12152: LD_EXP 45
12156: PUSH
12157: LD_VAR 0 3
12161: ADD
12162: ST_TO_ADDR
// end ;
12163: GO 12049
12165: POP
12166: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12167: LD_INT 23
12169: PPUSH
12170: LD_EXP 33
12174: PPUSH
12175: CALL_OW 234
// end ; end_of_file
12179: LD_VAR 0 1
12183: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12184: LD_INT 0
12186: PPUSH
// PrepareHero ;
12187: CALL 12212 0 0
// PreparePokryshkinTeams ;
12191: CALL 12306 0 0
// PrepareJelena ;
12195: CALL 12571 0 0
// PrepareGnyevko ;
12199: CALL 12603 0 0
// PrepareKurin ;
12203: CALL 12274 0 0
// end ;
12207: LD_VAR 0 1
12211: RET
// function PrepareHero ; begin
12212: LD_INT 0
12214: PPUSH
// uc_side = 3 ;
12215: LD_ADDR_OWVAR 20
12219: PUSH
12220: LD_INT 3
12222: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
12223: LD_ADDR_EXP 46
12227: PUSH
12228: LD_STRING Burlak
12230: PPUSH
12231: LD_INT 0
12233: PPUSH
12234: CALL 8017 0 2
12238: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12239: LD_EXP 46
12243: PPUSH
12244: LD_EXP 37
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: LD_EXP 37
12257: PUSH
12258: LD_INT 2
12260: ARRAY
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 48
// end ;
12269: LD_VAR 0 1
12273: RET
// function PrepareKurin ; begin
12274: LD_INT 0
12276: PPUSH
// uc_side = 6 ;
12277: LD_ADDR_OWVAR 20
12281: PUSH
12282: LD_INT 6
12284: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
12285: LD_ADDR_EXP 55
12289: PUSH
12290: LD_STRING Kurin
12292: PPUSH
12293: LD_INT 0
12295: PPUSH
12296: CALL 8017 0 2
12300: ST_TO_ADDR
// end ;
12301: LD_VAR 0 1
12305: RET
// function PreparePokryshkinTeams ; begin
12306: LD_INT 0
12308: PPUSH
// uc_side = 6 ;
12309: LD_ADDR_OWVAR 20
12313: PUSH
12314: LD_INT 6
12316: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
12317: LD_ADDR_EXP 47
12321: PUSH
12322: LD_STRING Pokryshkin
12324: PPUSH
12325: LD_INT 0
12327: PPUSH
12328: CALL 8017 0 2
12332: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
12333: LD_ADDR_EXP 48
12337: PUSH
12338: LD_STRING Saseda
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL 8017 0 2
12348: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
12349: LD_ADDR_EXP 49
12353: PUSH
12354: LD_STRING Jaworska
12356: PPUSH
12357: LD_INT 0
12359: PPUSH
12360: CALL 8017 0 2
12364: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
12365: LD_ADDR_EXP 50
12369: PUSH
12370: LD_STRING Balei
12372: PPUSH
12373: LD_INT 0
12375: PPUSH
12376: CALL 8017 0 2
12380: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
12381: LD_ADDR_EXP 51
12385: PUSH
12386: LD_STRING Belkov
12388: PPUSH
12389: LD_INT 0
12391: PPUSH
12392: CALL 8017 0 2
12396: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12397: LD_EXP 47
12401: PPUSH
12402: LD_INT 25
12404: PPUSH
12405: LD_INT 0
12407: PPUSH
12408: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12412: LD_EXP 48
12416: PPUSH
12417: LD_INT 17
12419: PPUSH
12420: LD_INT 0
12422: PPUSH
12423: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12427: LD_EXP 49
12431: PPUSH
12432: LD_INT 17
12434: PPUSH
12435: LD_INT 0
12437: PPUSH
12438: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12442: LD_EXP 50
12446: PPUSH
12447: LD_INT 17
12449: PPUSH
12450: LD_INT 0
12452: PPUSH
12453: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12457: LD_EXP 51
12461: PPUSH
12462: LD_INT 17
12464: PPUSH
12465: LD_INT 0
12467: PPUSH
12468: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12472: LD_ADDR_EXP 56
12476: PUSH
12477: LD_EXP 47
12481: PUSH
12482: LD_EXP 48
12486: PUSH
12487: LD_EXP 50
12491: PUSH
12492: LD_EXP 51
12496: PUSH
12497: LD_EXP 49
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: ST_TO_ADDR
// if Difficulty < 3 then
12509: LD_OWVAR 67
12513: PUSH
12514: LD_INT 3
12516: LESS
12517: IFFALSE 12566
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
12519: LD_ADDR_EXP 52
12523: PUSH
12524: LD_STRING Jaunzeme
12526: PPUSH
12527: LD_INT 0
12529: PPUSH
12530: CALL 8017 0 2
12534: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12535: LD_EXP 52
12539: PPUSH
12540: LD_INT 26
12542: PPUSH
12543: LD_INT 0
12545: PPUSH
12546: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12550: LD_ADDR_EXP 56
12554: PUSH
12555: LD_EXP 56
12559: PUSH
12560: LD_EXP 52
12564: ADD
12565: ST_TO_ADDR
// end ; end ;
12566: LD_VAR 0 1
12570: RET
// function PrepareJelena ; begin
12571: LD_INT 0
12573: PPUSH
// uc_side = 8 ;
12574: LD_ADDR_OWVAR 20
12578: PUSH
12579: LD_INT 8
12581: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
12582: LD_ADDR_EXP 53
12586: PUSH
12587: LD_STRING Kirilenkova
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL 8017 0 2
12597: ST_TO_ADDR
// end ;
12598: LD_VAR 0 1
12602: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
// uc_side = 8 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 8
12616: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
12617: LD_ADDR_EXP 54
12621: PUSH
12622: LD_STRING Gnyevko
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL 8017 0 2
12632: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_EXP 38
12642: PUSH
12643: LD_INT 1
12645: PPUSH
12646: LD_EXP 38
12650: PPUSH
12651: CALL_OW 12
12655: ARRAY
12656: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
12657: LD_EXP 54
12661: PPUSH
12662: LD_VAR 0 4
12666: PUSH
12667: LD_INT 1
12669: ARRAY
12670: PPUSH
12671: LD_VAR 0 4
12675: PUSH
12676: LD_INT 2
12678: ARRAY
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
12687: LD_EXP 54
12691: PPUSH
12692: LD_EXP 39
12696: PPUSH
12697: CALL_OW 234
// ComHold ( Gnyevko ) ;
12701: LD_EXP 54
12705: PPUSH
12706: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
12710: LD_ADDR_VAR 0 3
12714: PUSH
12715: DOUBLE
12716: LD_INT 1
12718: DEC
12719: ST_TO_ADDR
12720: LD_EXP 27
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: PUSH
12729: LD_INT 3
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: LD_INT 1
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PUSH
12743: LD_OWVAR 67
12747: ARRAY
12748: MINUS
12749: PUSH
12750: FOR_TO
12751: IFFALSE 12881
// begin uc_side = 0 ;
12753: LD_ADDR_OWVAR 20
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// uc_nation = nation_nature ;
12761: LD_ADDR_OWVAR 21
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// hc_class = class_apeman ;
12769: LD_ADDR_OWVAR 28
12773: PUSH
12774: LD_INT 12
12776: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12777: LD_ADDR_OWVAR 31
12781: PUSH
12782: LD_EXP 28
12786: PUSH
12787: LD_INT 1
12789: ARRAY
12790: PUSH
12791: LD_EXP 28
12795: PUSH
12796: LD_INT 2
12798: ARRAY
12799: PUSH
12800: LD_EXP 28
12804: PUSH
12805: LD_INT 3
12807: ARRAY
12808: PUSH
12809: LD_EXP 28
12813: PUSH
12814: LD_INT 4
12816: ARRAY
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12824: LD_ADDR_OWVAR 35
12828: PUSH
12829: LD_EXP 34
12833: ST_TO_ADDR
// un = CreateHuman ;
12834: LD_ADDR_VAR 0 2
12838: PUSH
12839: CALL_OW 44
12843: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12844: LD_VAR 0 2
12848: PPUSH
12849: LD_EXP 54
12853: PPUSH
12854: CALL_OW 250
12858: PPUSH
12859: LD_EXP 54
12863: PPUSH
12864: CALL_OW 251
12868: PPUSH
12869: LD_INT 8
12871: PPUSH
12872: LD_INT 0
12874: PPUSH
12875: CALL_OW 50
// end ;
12879: GO 12750
12881: POP
12882: POP
// end ; end_of_file
12883: LD_VAR 0 1
12887: RET
// export function PrepareNature ; var i , un ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: DOUBLE
12899: LD_INT 1
12901: DEC
12902: ST_TO_ADDR
12903: LD_EXP 27
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PUSH
12912: FOR_TO
12913: IFFALSE 13023
// begin uc_side = 0 ;
12915: LD_ADDR_OWVAR 20
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// uc_nation = nation_nature ;
12923: LD_ADDR_OWVAR 21
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// hc_class = class_apeman ;
12931: LD_ADDR_OWVAR 28
12935: PUSH
12936: LD_INT 12
12938: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12939: LD_ADDR_OWVAR 31
12943: PUSH
12944: LD_EXP 28
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PUSH
12953: LD_EXP 28
12957: PUSH
12958: LD_INT 2
12960: ARRAY
12961: PUSH
12962: LD_EXP 28
12966: PUSH
12967: LD_INT 3
12969: ARRAY
12970: PUSH
12971: LD_EXP 28
12975: PUSH
12976: LD_INT 4
12978: ARRAY
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12986: LD_ADDR_OWVAR 35
12990: PUSH
12991: LD_EXP 34
12995: ST_TO_ADDR
// un = CreateHuman ;
12996: LD_ADDR_VAR 0 3
13000: PUSH
13001: CALL_OW 44
13005: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 16
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL_OW 49
// end ;
13021: GO 12912
13023: POP
13024: POP
// for i := 1 to animalsAmount [ 2 ] do
13025: LD_ADDR_VAR 0 2
13029: PUSH
13030: DOUBLE
13031: LD_INT 1
13033: DEC
13034: ST_TO_ADDR
13035: LD_EXP 27
13039: PUSH
13040: LD_INT 2
13042: ARRAY
13043: PUSH
13044: FOR_TO
13045: IFFALSE 13155
// begin uc_side = 0 ;
13047: LD_ADDR_OWVAR 20
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// uc_nation = nation_nature ;
13055: LD_ADDR_OWVAR 21
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// hc_class = class_phororhacos ;
13063: LD_ADDR_OWVAR 28
13067: PUSH
13068: LD_INT 18
13070: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13071: LD_ADDR_OWVAR 31
13075: PUSH
13076: LD_EXP 28
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PUSH
13085: LD_EXP 28
13089: PUSH
13090: LD_INT 2
13092: ARRAY
13093: PUSH
13094: LD_EXP 28
13098: PUSH
13099: LD_INT 3
13101: ARRAY
13102: PUSH
13103: LD_EXP 28
13107: PUSH
13108: LD_INT 4
13110: ARRAY
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13118: LD_ADDR_OWVAR 35
13122: PUSH
13123: LD_EXP 29
13127: ST_TO_ADDR
// un = CreateHuman ;
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: CALL_OW 44
13137: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 15
13145: PPUSH
13146: LD_INT 0
13148: PPUSH
13149: CALL_OW 49
// end ;
13153: GO 13044
13155: POP
13156: POP
// for i := 1 to animalsAmount [ 3 ] do
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: DOUBLE
13163: LD_INT 1
13165: DEC
13166: ST_TO_ADDR
13167: LD_EXP 27
13171: PUSH
13172: LD_INT 3
13174: ARRAY
13175: PUSH
13176: FOR_TO
13177: IFFALSE 13287
// begin uc_side = 0 ;
13179: LD_ADDR_OWVAR 20
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// uc_nation = nation_nature ;
13187: LD_ADDR_OWVAR 21
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// hc_class = class_tiger ;
13195: LD_ADDR_OWVAR 28
13199: PUSH
13200: LD_INT 14
13202: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13203: LD_ADDR_OWVAR 31
13207: PUSH
13208: LD_EXP 28
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PUSH
13217: LD_EXP 28
13221: PUSH
13222: LD_INT 2
13224: ARRAY
13225: PUSH
13226: LD_EXP 28
13230: PUSH
13231: LD_INT 3
13233: ARRAY
13234: PUSH
13235: LD_EXP 28
13239: PUSH
13240: LD_INT 4
13242: ARRAY
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13250: LD_ADDR_OWVAR 35
13254: PUSH
13255: LD_EXP 29
13259: ST_TO_ADDR
// un = CreateHuman ;
13260: LD_ADDR_VAR 0 3
13264: PUSH
13265: CALL_OW 44
13269: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 15
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 49
// end ;
13285: GO 13176
13287: POP
13288: POP
// for i := 1 to animalsAmount [ 4 ] do
13289: LD_ADDR_VAR 0 2
13293: PUSH
13294: DOUBLE
13295: LD_INT 1
13297: DEC
13298: ST_TO_ADDR
13299: LD_EXP 27
13303: PUSH
13304: LD_INT 4
13306: ARRAY
13307: PUSH
13308: FOR_TO
13309: IFFALSE 13419
// begin uc_side = 0 ;
13311: LD_ADDR_OWVAR 20
13315: PUSH
13316: LD_INT 0
13318: ST_TO_ADDR
// uc_nation = nation_nature ;
13319: LD_ADDR_OWVAR 21
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// hc_class = 21 ;
13327: LD_ADDR_OWVAR 28
13331: PUSH
13332: LD_INT 21
13334: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13335: LD_ADDR_OWVAR 31
13339: PUSH
13340: LD_EXP 28
13344: PUSH
13345: LD_INT 1
13347: ARRAY
13348: PUSH
13349: LD_EXP 28
13353: PUSH
13354: LD_INT 2
13356: ARRAY
13357: PUSH
13358: LD_EXP 28
13362: PUSH
13363: LD_INT 3
13365: ARRAY
13366: PUSH
13367: LD_EXP 28
13371: PUSH
13372: LD_INT 4
13374: ARRAY
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13382: LD_ADDR_OWVAR 35
13386: PUSH
13387: LD_EXP 29
13391: ST_TO_ADDR
// un = CreateHuman ;
13392: LD_ADDR_VAR 0 3
13396: PUSH
13397: CALL_OW 44
13401: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_INT 15
13409: PPUSH
13410: LD_INT 0
13412: PPUSH
13413: CALL_OW 49
// end ;
13417: GO 13308
13419: POP
13420: POP
// end ; end_of_file
13421: LD_VAR 0 1
13425: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13426: LD_VAR 0 1
13430: PUSH
13431: LD_EXP 46
13435: EQUAL
13436: PUSH
13437: LD_EXP 53
13441: PPUSH
13442: CALL_OW 255
13446: PUSH
13447: LD_INT 3
13449: EQUAL
13450: NOT
13451: AND
13452: PUSH
13453: LD_EXP 53
13457: PPUSH
13458: CALL_OW 302
13462: NOT
13463: AND
13464: IFFALSE 13470
// BurlakDying ;
13466: CALL 10861 0 0
// if unit = Gladstone then
13470: LD_VAR 0 1
13474: PUSH
13475: LD_EXP 44
13479: EQUAL
13480: IFFALSE 13490
// gladstoneStatus = 0 ;
13482: LD_ADDR_EXP 1
13486: PUSH
13487: LD_INT 0
13489: ST_TO_ADDR
// if unit = Johanna then
13490: LD_VAR 0 1
13494: PUSH
13495: LD_EXP 43
13499: EQUAL
13500: IFFALSE 13510
// johannaStatus = 0 ;
13502: LD_ADDR_EXP 2
13506: PUSH
13507: LD_INT 0
13509: ST_TO_ADDR
// end ;
13510: PPOPN 1
13512: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13513: LD_VAR 0 1
13517: PUSH
13518: LD_EXP 46
13522: EQUAL
13523: IFFALSE 13529
// BurlakDying ;
13525: CALL 10861 0 0
// if GetSide ( unit ) = 3 then
13529: LD_VAR 0 1
13533: PPUSH
13534: CALL_OW 255
13538: PUSH
13539: LD_INT 3
13541: EQUAL
13542: IFFALSE 13558
// lostComradesCounter = lostComradesCounter + 1 ;
13544: LD_ADDR_EXP 23
13548: PUSH
13549: LD_EXP 23
13553: PUSH
13554: LD_INT 1
13556: PLUS
13557: ST_TO_ADDR
// if unit in kirovSolds then
13558: LD_VAR 0 1
13562: PUSH
13563: LD_EXP 56
13567: IN
13568: IFFALSE 13586
// kirovSolds = kirovSolds diff unit ;
13570: LD_ADDR_EXP 56
13574: PUSH
13575: LD_EXP 56
13579: PUSH
13580: LD_VAR 0 1
13584: DIFF
13585: ST_TO_ADDR
// end ;
13586: PPOPN 1
13588: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 3
13596: EQUAL
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 1
13605: EQUAL
13606: AND
13607: PUSH
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: EQUAL
13616: PUSH
13617: LD_VAR 0 2
13621: PUSH
13622: LD_INT 3
13624: EQUAL
13625: AND
13626: PUSH
13627: LD_EXP 17
13631: PUSH
13632: LD_INT 1
13634: EQUAL
13635: AND
13636: OR
13637: IFFALSE 13643
// Dial_SecondAttack ;
13639: CALL 5978 0 0
// if side1 = 3 and side2 = 6 and not traitor then
13643: LD_VAR 0 1
13647: PUSH
13648: LD_INT 3
13650: EQUAL
13651: PUSH
13652: LD_VAR 0 2
13656: PUSH
13657: LD_INT 6
13659: EQUAL
13660: AND
13661: PUSH
13662: LD_EXP 18
13666: NOT
13667: AND
13668: IFFALSE 13674
// Dialogue_AttackComrade ;
13670: CALL 4108 0 0
// end ; end_of_file
13674: PPOPN 2
13676: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$30 do
13677: LD_EXP 53
13681: PPUSH
13682: CALL_OW 255
13686: PUSH
13687: LD_INT 3
13689: EQUAL
13690: PUSH
13691: LD_EXP 26
13695: PUSH
13696: LD_INT 1050
13698: LESS
13699: AND
13700: IFFALSE 13712
13702: GO 13704
13704: DISABLE
// SetAchievement ( ACH_YELENA ) ;
13705: LD_STRING ACH_YELENA
13707: PPUSH
13708: CALL_OW 543
13712: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
13713: LD_INT 23
13715: PUSH
13716: LD_INT 0
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 14
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 25
13748: PUSH
13749: LD_INT 12
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 69
13770: NOT
13771: IFFALSE 13783
13773: GO 13775
13775: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
13776: LD_STRING ACH_NATURE
13778: PPUSH
13779: CALL_OW 543
13783: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
13784: LD_INT 0
13786: PPUSH
13787: PPUSH
// if not missionNumber then
13788: LD_VAR 0 2
13792: NOT
13793: IFFALSE 13797
// exit ;
13795: GO 13927
// achiv := false ;
13797: LD_ADDR_VAR 0 7
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// case campaignNumber of 1 :
13805: LD_VAR 0 1
13809: PUSH
13810: LD_INT 1
13812: DOUBLE
13813: EQUAL
13814: IFTRUE 13818
13816: GO 13829
13818: POP
// achiv := ACH_GOTA ; 2 :
13819: LD_ADDR_VAR 0 7
13823: PUSH
13824: LD_STRING ACH_GOTA
13826: ST_TO_ADDR
13827: GO 13879
13829: LD_INT 2
13831: DOUBLE
13832: EQUAL
13833: IFTRUE 13837
13835: GO 13840
13837: POP
// ; 3 :
13838: GO 13879
13840: LD_INT 3
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 13859
13848: POP
// achiv := ACH_MOTSU ; 4 :
13849: LD_ADDR_VAR 0 7
13853: PUSH
13854: LD_STRING ACH_MOTSU
13856: ST_TO_ADDR
13857: GO 13879
13859: LD_INT 4
13861: DOUBLE
13862: EQUAL
13863: IFTRUE 13867
13865: GO 13878
13867: POP
// achiv := ACH_LOP ; end ;
13868: LD_ADDR_VAR 0 7
13872: PUSH
13873: LD_STRING ACH_LOP
13875: ST_TO_ADDR
13876: GO 13879
13878: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13879: LD_OWVAR 67
13883: PUSH
13884: LD_INT 3
13886: EQUAL
13887: PUSH
13888: LD_VAR 0 7
13892: AND
13893: PUSH
13894: LD_VAR 0 3
13898: AND
13899: PUSH
13900: LD_VAR 0 4
13904: AND
13905: PUSH
13906: LD_VAR 0 5
13910: AND
13911: IFFALSE 13927
// SetAchievementEX ( achiv , missionNumber ) ;
13913: LD_VAR 0 7
13917: PPUSH
13918: LD_VAR 0 2
13922: PPUSH
13923: CALL_OW 564
// end ;
13927: LD_VAR 0 6
13931: RET
// export function SA_BehemothConstructed ; begin
13932: LD_INT 0
13934: PPUSH
// SetAchievement ( ACH_SMC ) ;
13935: LD_STRING ACH_SMC
13937: PPUSH
13938: CALL_OW 543
// end ;
13942: LD_VAR 0 1
13946: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13947: LD_VAR 0 2
13951: PUSH
13952: LD_INT 1
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13967
13960: POP
// HackUnlimitedResources ; 2 :
13961: CALL 14151 0 0
13965: GO 14148
13967: LD_INT 2
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 13982
13975: POP
// HackSetLevel10 ; 3 :
13976: CALL 14284 0 0
13980: GO 14148
13982: LD_INT 3
13984: DOUBLE
13985: EQUAL
13986: IFTRUE 13990
13988: GO 13997
13990: POP
// HackSetLevel10YourUnits ; 4 :
13991: CALL 14369 0 0
13995: GO 14148
13997: LD_INT 4
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14027
14005: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
14006: LD_VAR 0 3
14010: PPUSH
14011: LD_VAR 0 4
14015: PPUSH
14016: LD_VAR 0 5
14020: PPUSH
14021: CALL 14459 0 3
14025: GO 14148
14027: LD_INT 5
14029: DOUBLE
14030: EQUAL
14031: IFTRUE 14035
14033: GO 14042
14035: POP
// HackSpawnVehicle ; 6 :
14036: CALL 14520 0 0
14040: GO 14148
14042: LD_INT 6
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14057
14050: POP
// HackInvincible ; 7 :
14051: CALL 15595 0 0
14055: GO 14148
14057: LD_INT 7
14059: DOUBLE
14060: EQUAL
14061: IFTRUE 14065
14063: GO 14072
14065: POP
// HackInvisible ; 8 :
14066: CALL 15706 0 0
14070: GO 14148
14072: LD_INT 8
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14087
14080: POP
// HackChangeYourSide ; 9 :
14081: CALL 15763 0 0
14085: GO 14148
14087: LD_INT 9
14089: DOUBLE
14090: EQUAL
14091: IFTRUE 14095
14093: GO 14102
14095: POP
// HackChangeUnitSide ; 10 :
14096: CALL 15805 0 0
14100: GO 14148
14102: LD_INT 10
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14117
14110: POP
// HackFog ; 11 :
14111: CALL 15906 0 0
14115: GO 14148
14117: LD_INT 11
14119: DOUBLE
14120: EQUAL
14121: IFTRUE 14125
14123: GO 14132
14125: POP
// HackApeman ; 12 :
14126: CALL 15921 0 0
14130: GO 14148
14132: LD_INT 12
14134: DOUBLE
14135: EQUAL
14136: IFTRUE 14140
14138: GO 14147
14140: POP
// HackBoom ; end ;
14141: CALL 16006 0 0
14145: GO 14148
14147: POP
// end ;
14148: PPOPN 6
14150: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
14151: LD_INT 0
14153: PPUSH
14154: PPUSH
14155: PPUSH
14156: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14157: LD_ADDR_VAR 0 4
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 2
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: ST_TO_ADDR
// if not tmp then
14211: LD_VAR 0 4
14215: NOT
14216: IFFALSE 14220
// exit ;
14218: GO 14279
// for i in tmp do
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_VAR 0 4
14229: PUSH
14230: FOR_IN
14231: IFFALSE 14277
// for j = 1 to 3 do
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: DOUBLE
14239: LD_INT 1
14241: DEC
14242: ST_TO_ADDR
14243: LD_INT 3
14245: PUSH
14246: FOR_TO
14247: IFFALSE 14273
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 274
14258: PPUSH
14259: LD_VAR 0 3
14263: PPUSH
14264: LD_INT 99999
14266: PPUSH
14267: CALL_OW 277
14271: GO 14246
14273: POP
14274: POP
14275: GO 14230
14277: POP
14278: POP
// end ;
14279: LD_VAR 0 1
14283: RET
// export function HackSetLevel10 ; var i , j ; begin
14284: LD_INT 0
14286: PPUSH
14287: PPUSH
14288: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_INT 21
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PPUSH
14304: CALL_OW 69
14308: PUSH
14309: FOR_IN
14310: IFFALSE 14362
// if IsSelected ( i ) then
14312: LD_VAR 0 2
14316: PPUSH
14317: CALL_OW 306
14321: IFFALSE 14360
// begin for j := 1 to 4 do
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: DOUBLE
14329: LD_INT 1
14331: DEC
14332: ST_TO_ADDR
14333: LD_INT 4
14335: PUSH
14336: FOR_TO
14337: IFFALSE 14358
// SetSkill ( i , j , 10 ) ;
14339: LD_VAR 0 2
14343: PPUSH
14344: LD_VAR 0 3
14348: PPUSH
14349: LD_INT 10
14351: PPUSH
14352: CALL_OW 237
14356: GO 14336
14358: POP
14359: POP
// end ;
14360: GO 14309
14362: POP
14363: POP
// end ;
14364: LD_VAR 0 1
14368: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14374: LD_ADDR_VAR 0 2
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_OWVAR 2
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: PUSH
14410: FOR_IN
14411: IFFALSE 14452
// begin for j := 1 to 4 do
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: DOUBLE
14419: LD_INT 1
14421: DEC
14422: ST_TO_ADDR
14423: LD_INT 4
14425: PUSH
14426: FOR_TO
14427: IFFALSE 14448
// SetSkill ( i , j , 10 ) ;
14429: LD_VAR 0 2
14433: PPUSH
14434: LD_VAR 0 3
14438: PPUSH
14439: LD_INT 10
14441: PPUSH
14442: CALL_OW 237
14446: GO 14426
14448: POP
14449: POP
// end ;
14450: GO 14410
14452: POP
14453: POP
// end ;
14454: LD_VAR 0 1
14458: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
14459: LD_INT 0
14461: PPUSH
// uc_side := your_side ;
14462: LD_ADDR_OWVAR 20
14466: PUSH
14467: LD_OWVAR 2
14471: ST_TO_ADDR
// uc_nation := nation ;
14472: LD_ADDR_OWVAR 21
14476: PUSH
14477: LD_VAR 0 1
14481: ST_TO_ADDR
// InitHc ;
14482: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14486: LD_INT 0
14488: PPUSH
14489: LD_VAR 0 2
14493: PPUSH
14494: LD_VAR 0 3
14498: PPUSH
14499: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14503: CALL_OW 44
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 51
// end ;
14515: LD_VAR 0 4
14519: RET
// export function HackSpawnVehicle ; begin
14520: LD_INT 0
14522: PPUSH
// uc_side := your_side ;
14523: LD_ADDR_OWVAR 20
14527: PUSH
14528: LD_OWVAR 2
14532: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
14533: LD_ADDR_OWVAR 21
14537: PUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_INT 3
14543: PPUSH
14544: CALL_OW 12
14548: ST_TO_ADDR
// InitVc ;
14549: CALL_OW 20
// case uc_nation of 1 :
14553: LD_OWVAR 21
14557: PUSH
14558: LD_INT 1
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14873
14566: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14567: LD_ADDR_OWVAR 37
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: LD_INT 4
14583: PUSH
14584: LD_INT 5
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 13
14595: PUSH
14596: LD_INT 14
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_INT 23
14607: PUSH
14608: LD_INT 24
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 1
14628: PPUSH
14629: LD_INT 13
14631: PPUSH
14632: CALL_OW 12
14636: ARRAY
14637: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14638: LD_ADDR_OWVAR 38
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: LD_INT 3
14648: PUSH
14649: LD_INT 4
14651: PUSH
14652: LD_INT 5
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 1
14663: PPUSH
14664: LD_INT 4
14666: PPUSH
14667: CALL_OW 12
14671: ARRAY
14672: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14673: LD_ADDR_OWVAR 39
14677: PUSH
14678: LD_INT 1
14680: PUSH
14681: LD_INT 2
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 1
14694: PPUSH
14695: LD_INT 3
14697: PPUSH
14698: CALL_OW 12
14702: ARRAY
14703: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14704: LD_ADDR_OWVAR 40
14708: PUSH
14709: LD_INT 14
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 13
14717: PUSH
14718: LD_INT 5
14720: PUSH
14721: LD_INT 10
14723: PUSH
14724: LD_INT 4
14726: PUSH
14727: LD_INT 6
14729: PUSH
14730: LD_INT 9
14732: PUSH
14733: LD_INT 3
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: LD_INT 11
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 15
14750: PUSH
14751: LD_INT 32
14753: PUSH
14754: LD_INT 31
14756: PUSH
14757: LD_INT 24
14759: PUSH
14760: LD_INT 26
14762: PUSH
14763: LD_INT 25
14765: PUSH
14766: LD_INT 27
14768: PUSH
14769: LD_INT 23
14771: PUSH
14772: LD_INT 22
14774: PUSH
14775: LD_INT 30
14777: PUSH
14778: LD_INT 28
14780: PUSH
14781: LD_INT 29
14783: PUSH
14784: LD_INT 53
14786: PUSH
14787: LD_INT 51
14789: PUSH
14790: LD_INT 52
14792: PUSH
14793: LD_INT 43
14795: PUSH
14796: LD_INT 44
14798: PUSH
14799: LD_INT 46
14801: PUSH
14802: LD_INT 42
14804: PUSH
14805: LD_INT 47
14807: PUSH
14808: LD_INT 45
14810: PUSH
14811: LD_INT 48
14813: PUSH
14814: LD_INT 55
14816: PUSH
14817: LD_INT 49
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 37
14864: PPUSH
14865: CALL_OW 12
14869: ARRAY
14870: ST_TO_ADDR
// end ; 2 :
14871: GO 15504
14873: LD_INT 2
14875: DOUBLE
14876: EQUAL
14877: IFTRUE 14881
14879: GO 15188
14881: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14882: LD_ADDR_OWVAR 37
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: LD_INT 4
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: LD_INT 11
14904: PUSH
14905: LD_INT 12
14907: PUSH
14908: LD_INT 13
14910: PUSH
14911: LD_INT 14
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: LD_INT 23
14922: PUSH
14923: LD_INT 24
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 1
14943: PPUSH
14944: LD_INT 13
14946: PPUSH
14947: CALL_OW 12
14951: ARRAY
14952: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14953: LD_ADDR_OWVAR 38
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 1
14978: PPUSH
14979: LD_INT 4
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14988: LD_ADDR_OWVAR 39
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 1
15009: PPUSH
15010: LD_INT 3
15012: PPUSH
15013: CALL_OW 12
15017: ARRAY
15018: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
15019: LD_ADDR_OWVAR 40
15023: PUSH
15024: LD_INT 14
15026: PUSH
15027: LD_INT 12
15029: PUSH
15030: LD_INT 13
15032: PUSH
15033: LD_INT 5
15035: PUSH
15036: LD_INT 10
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: LD_INT 9
15047: PUSH
15048: LD_INT 3
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 11
15056: PUSH
15057: LD_INT 7
15059: PUSH
15060: LD_INT 8
15062: PUSH
15063: LD_INT 15
15065: PUSH
15066: LD_INT 32
15068: PUSH
15069: LD_INT 31
15071: PUSH
15072: LD_INT 24
15074: PUSH
15075: LD_INT 26
15077: PUSH
15078: LD_INT 25
15080: PUSH
15081: LD_INT 27
15083: PUSH
15084: LD_INT 23
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 30
15092: PUSH
15093: LD_INT 28
15095: PUSH
15096: LD_INT 29
15098: PUSH
15099: LD_INT 53
15101: PUSH
15102: LD_INT 51
15104: PUSH
15105: LD_INT 52
15107: PUSH
15108: LD_INT 43
15110: PUSH
15111: LD_INT 44
15113: PUSH
15114: LD_INT 46
15116: PUSH
15117: LD_INT 42
15119: PUSH
15120: LD_INT 47
15122: PUSH
15123: LD_INT 45
15125: PUSH
15126: LD_INT 48
15128: PUSH
15129: LD_INT 55
15131: PUSH
15132: LD_INT 49
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: PPUSH
15177: LD_INT 37
15179: PPUSH
15180: CALL_OW 12
15184: ARRAY
15185: ST_TO_ADDR
// end ; 3 :
15186: GO 15504
15188: LD_INT 3
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15503
15196: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
15197: LD_ADDR_OWVAR 37
15201: PUSH
15202: LD_INT 1
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: LD_INT 3
15210: PUSH
15211: LD_INT 4
15213: PUSH
15214: LD_INT 5
15216: PUSH
15217: LD_INT 11
15219: PUSH
15220: LD_INT 12
15222: PUSH
15223: LD_INT 13
15225: PUSH
15226: LD_INT 14
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_INT 23
15237: PUSH
15238: LD_INT 24
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 1
15258: PPUSH
15259: LD_INT 13
15261: PPUSH
15262: CALL_OW 12
15266: ARRAY
15267: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
15268: LD_ADDR_OWVAR 38
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: LD_INT 4
15281: PUSH
15282: LD_INT 5
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 4
15296: PPUSH
15297: CALL_OW 12
15301: ARRAY
15302: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
15303: LD_ADDR_OWVAR 39
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 1
15324: PPUSH
15325: LD_INT 3
15327: PPUSH
15328: CALL_OW 12
15332: ARRAY
15333: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
15334: LD_ADDR_OWVAR 40
15338: PUSH
15339: LD_INT 14
15341: PUSH
15342: LD_INT 12
15344: PUSH
15345: LD_INT 13
15347: PUSH
15348: LD_INT 5
15350: PUSH
15351: LD_INT 10
15353: PUSH
15354: LD_INT 4
15356: PUSH
15357: LD_INT 6
15359: PUSH
15360: LD_INT 9
15362: PUSH
15363: LD_INT 3
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 11
15371: PUSH
15372: LD_INT 7
15374: PUSH
15375: LD_INT 8
15377: PUSH
15378: LD_INT 15
15380: PUSH
15381: LD_INT 32
15383: PUSH
15384: LD_INT 31
15386: PUSH
15387: LD_INT 24
15389: PUSH
15390: LD_INT 26
15392: PUSH
15393: LD_INT 25
15395: PUSH
15396: LD_INT 27
15398: PUSH
15399: LD_INT 23
15401: PUSH
15402: LD_INT 22
15404: PUSH
15405: LD_INT 30
15407: PUSH
15408: LD_INT 28
15410: PUSH
15411: LD_INT 29
15413: PUSH
15414: LD_INT 53
15416: PUSH
15417: LD_INT 51
15419: PUSH
15420: LD_INT 52
15422: PUSH
15423: LD_INT 43
15425: PUSH
15426: LD_INT 44
15428: PUSH
15429: LD_INT 46
15431: PUSH
15432: LD_INT 42
15434: PUSH
15435: LD_INT 47
15437: PUSH
15438: LD_INT 45
15440: PUSH
15441: LD_INT 48
15443: PUSH
15444: LD_INT 55
15446: PUSH
15447: LD_INT 49
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: PPUSH
15492: LD_INT 37
15494: PPUSH
15495: CALL_OW 12
15499: ARRAY
15500: ST_TO_ADDR
// end ; end ;
15501: GO 15504
15503: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15504: CALL_OW 45
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 51
// end ;
15516: LD_VAR 0 1
15520: RET
// export invincible ; every 1 do
15521: GO 15523
15523: DISABLE
// invincible := [ ] ;
15524: LD_ADDR_EXP 57
15528: PUSH
15529: EMPTY
15530: ST_TO_ADDR
15531: END
// every 10 do var i ;
15532: GO 15534
15534: DISABLE
15535: LD_INT 0
15537: PPUSH
// begin enable ;
15538: ENABLE
// if not invincible then
15539: LD_EXP 57
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15592
// for i in invincible do
15548: LD_ADDR_VAR 0 1
15552: PUSH
15553: LD_EXP 57
15557: PUSH
15558: FOR_IN
15559: IFFALSE 15590
// if GetLives ( i ) < 1000 then
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 256
15570: PUSH
15571: LD_INT 1000
15573: LESS
15574: IFFALSE 15588
// SetLives ( i , 1000 ) ;
15576: LD_VAR 0 1
15580: PPUSH
15581: LD_INT 1000
15583: PPUSH
15584: CALL_OW 234
15588: GO 15558
15590: POP
15591: POP
// end ;
15592: PPOPN 1
15594: END
// export function HackInvincible ; var i ; begin
15595: LD_INT 0
15597: PPUSH
15598: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15599: LD_ADDR_VAR 0 2
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: LD_INT 21
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 69
15636: PUSH
15637: FOR_IN
15638: IFFALSE 15699
// if IsSelected ( i ) then
15640: LD_VAR 0 2
15644: PPUSH
15645: CALL_OW 306
15649: IFFALSE 15697
// begin if i in invincible then
15651: LD_VAR 0 2
15655: PUSH
15656: LD_EXP 57
15660: IN
15661: IFFALSE 15681
// invincible := invincible diff i else
15663: LD_ADDR_EXP 57
15667: PUSH
15668: LD_EXP 57
15672: PUSH
15673: LD_VAR 0 2
15677: DIFF
15678: ST_TO_ADDR
15679: GO 15697
// invincible := invincible union i ;
15681: LD_ADDR_EXP 57
15685: PUSH
15686: LD_EXP 57
15690: PUSH
15691: LD_VAR 0 2
15695: UNION
15696: ST_TO_ADDR
// end ;
15697: GO 15637
15699: POP
15700: POP
// end ;
15701: LD_VAR 0 1
15705: RET
// export function HackInvisible ; var i , j ; begin
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
15710: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: LD_INT 21
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 69
15730: PUSH
15731: FOR_IN
15732: IFFALSE 15756
// if IsSelected ( i ) then
15734: LD_VAR 0 2
15738: PPUSH
15739: CALL_OW 306
15743: IFFALSE 15754
// begin ComForceInvisible ( i ) ;
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 496
// end ;
15754: GO 15731
15756: POP
15757: POP
// end ;
15758: LD_VAR 0 1
15762: RET
// export function HackChangeYourSide ; begin
15763: LD_INT 0
15765: PPUSH
// if your_side = 8 then
15766: LD_OWVAR 2
15770: PUSH
15771: LD_INT 8
15773: EQUAL
15774: IFFALSE 15786
// your_side := 0 else
15776: LD_ADDR_OWVAR 2
15780: PUSH
15781: LD_INT 0
15783: ST_TO_ADDR
15784: GO 15800
// your_side := your_side + 1 ;
15786: LD_ADDR_OWVAR 2
15790: PUSH
15791: LD_OWVAR 2
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// end ;
15800: LD_VAR 0 1
15804: RET
// export function HackChangeUnitSide ; var i , j ; begin
15805: LD_INT 0
15807: PPUSH
15808: PPUSH
15809: PPUSH
// for i in all_units do
15810: LD_ADDR_VAR 0 2
15814: PUSH
15815: LD_OWVAR 3
15819: PUSH
15820: FOR_IN
15821: IFFALSE 15899
// if IsSelected ( i ) then
15823: LD_VAR 0 2
15827: PPUSH
15828: CALL_OW 306
15832: IFFALSE 15897
// begin j := GetSide ( i ) ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 255
15848: ST_TO_ADDR
// if j = 8 then
15849: LD_VAR 0 3
15853: PUSH
15854: LD_INT 8
15856: EQUAL
15857: IFFALSE 15869
// j := 0 else
15859: LD_ADDR_VAR 0 3
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
15867: GO 15883
// j := j + 1 ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: LD_INT 1
15881: PLUS
15882: ST_TO_ADDR
// SetSide ( i , j ) ;
15883: LD_VAR 0 2
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: CALL_OW 235
// end ;
15897: GO 15820
15899: POP
15900: POP
// end ;
15901: LD_VAR 0 1
15905: RET
// export function HackFog ; begin
15906: LD_INT 0
15908: PPUSH
// FogOff ( true ) ;
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 344
// end ;
15916: LD_VAR 0 1
15920: RET
// export function HackApeman ; begin
15921: LD_INT 0
15923: PPUSH
// uc_side := your_side ;
15924: LD_ADDR_OWVAR 20
15928: PUSH
15929: LD_OWVAR 2
15933: ST_TO_ADDR
// uc_nation := 0 ;
15934: LD_ADDR_OWVAR 21
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// hc_name :=  ;
15942: LD_ADDR_OWVAR 26
15946: PUSH
15947: LD_STRING 
15949: ST_TO_ADDR
// hc_gallery :=  ;
15950: LD_ADDR_OWVAR 33
15954: PUSH
15955: LD_STRING 
15957: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15958: LD_ADDR_OWVAR 31
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: LD_INT 0
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: ST_TO_ADDR
// hc_class := class_apeman ;
15981: LD_ADDR_OWVAR 28
15985: PUSH
15986: LD_INT 12
15988: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15989: CALL_OW 44
15993: PPUSH
15994: LD_INT 1
15996: PPUSH
15997: CALL_OW 51
// end ;
16001: LD_VAR 0 1
16005: RET
// export function HackBoom ; begin
16006: LD_INT 0
16008: PPUSH
// uc_side := your_side ;
16009: LD_ADDR_OWVAR 20
16013: PUSH
16014: LD_OWVAR 2
16018: ST_TO_ADDR
// uc_nation := 1 ;
16019: LD_ADDR_OWVAR 21
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// vc_chassis := us_morphling ;
16027: LD_ADDR_OWVAR 37
16031: PUSH
16032: LD_INT 5
16034: ST_TO_ADDR
// vc_engine := engine_siberite ;
16035: LD_ADDR_OWVAR 39
16039: PUSH
16040: LD_INT 3
16042: ST_TO_ADDR
// vc_control := control_computer ;
16043: LD_ADDR_OWVAR 38
16047: PUSH
16048: LD_INT 3
16050: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
16051: LD_ADDR_OWVAR 40
16055: PUSH
16056: LD_INT 8
16058: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16059: CALL_OW 45
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 51
// end ;
16071: LD_VAR 0 1
16075: RET
