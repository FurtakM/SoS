// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12632 0 0
// PrepareAmericans ;
  28: CALL 12205 0 0
// CreateNature ;
  32: CALL 13340 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 1000 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 1000
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 34
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 35
 458: PUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 6
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 36
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 38
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 39
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 40
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 2 2$00 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 4200
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 32
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 37
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 37
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 46
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 46
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 46
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 46
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 46
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 46
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// end ;
1040: LD_VAR 0 1
1044: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1045: LD_EXP 46
1049: PPUSH
1050: LD_INT 74
1052: PPUSH
1053: LD_INT 88
1055: PPUSH
1056: CALL_OW 297
1060: PUSH
1061: LD_INT 5
1063: LESS
1064: PUSH
1065: LD_EXP 3
1069: AND
1070: IFFALSE 1095
1072: GO 1074
1074: DISABLE
// begin spotWaterfall = true ;
1075: LD_ADDR_EXP 7
1079: PUSH
1080: LD_INT 1
1082: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1083: LD_EXP 46
1087: PPUSH
1088: LD_STRING DWaterfall-Bur-1
1090: PPUSH
1091: CALL_OW 88
// end ;
1095: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1096: LD_EXP 46
1100: PPUSH
1101: LD_INT 130
1103: PPUSH
1104: LD_INT 96
1106: PPUSH
1107: CALL_OW 297
1111: PUSH
1112: LD_INT 5
1114: LESS
1115: PUSH
1116: LD_EXP 3
1120: AND
1121: IFFALSE 1138
1123: GO 1125
1125: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1126: LD_EXP 46
1130: PPUSH
1131: LD_STRING DCorpse-Bur-1
1133: PPUSH
1134: CALL_OW 88
1138: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1139: LD_EXP 4
1143: NOT
1144: IFFALSE 1238
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
// begin enable ;
1152: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1153: LD_ADDR_VAR 0 1
1157: PUSH
1158: LD_INT 22
1160: PUSH
1161: LD_INT 0
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 25
1170: PUSH
1171: LD_INT 12
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1236
// if GetDistUnits ( apeman , Burlak ) < 7 then
1190: LD_VAR 0 1
1194: PPUSH
1195: LD_EXP 46
1199: PPUSH
1200: CALL_OW 296
1204: PUSH
1205: LD_INT 7
1207: LESS
1208: IFFALSE 1234
// begin apemansContact = true ;
1210: LD_ADDR_EXP 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1218: LD_EXP 46
1222: PPUSH
1223: LD_STRING D2-Bur-1
1225: PPUSH
1226: CALL_OW 88
// exit ;
1230: POP
1231: POP
1232: GO 1238
// end ;
1234: GO 1187
1236: POP
1237: POP
// end ;
1238: PPOPN 1
1240: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1241: LD_EXP 5
1245: NOT
1246: IFFALSE 1362
1248: GO 1250
1250: DISABLE
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
// begin enable ;
1255: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1256: LD_ADDR_VAR 0 2
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 0
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 25
1273: PUSH
1274: LD_INT 12
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: PUSH
1290: FOR_IN
1291: IFFALSE 1360
// if Attacks ( apeman ) then
1293: LD_VAR 0 2
1297: PPUSH
1298: CALL_OW 320
1302: IFFALSE 1358
// if GetSide ( Attacks ( apeman ) ) = 3 then
1304: LD_VAR 0 2
1308: PPUSH
1309: CALL_OW 320
1313: PPUSH
1314: CALL_OW 255
1318: PUSH
1319: LD_INT 3
1321: EQUAL
1322: IFFALSE 1358
// begin attackedByApeman = true ;
1324: LD_ADDR_EXP 5
1328: PUSH
1329: LD_INT 1
1331: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1332: LD_ADDR_EXP 8
1336: PUSH
1337: LD_VAR 0 2
1341: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1342: LD_EXP 46
1346: PPUSH
1347: LD_STRING D2-Bur-1a
1349: PPUSH
1350: CALL_OW 88
// exit ;
1354: POP
1355: POP
1356: GO 1362
// end ;
1358: GO 1290
1360: POP
1361: POP
// end ;
1362: PPOPN 2
1364: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1365: LD_EXP 6
1369: NOT
1370: IFFALSE 1467
1372: GO 1374
1374: DISABLE
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
// begin enable ;
1379: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1380: LD_ADDR_VAR 0 2
1384: PUSH
1385: LD_INT 24
1387: PPUSH
1388: LD_INT 22
1390: PUSH
1391: LD_INT 0
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 25
1400: PUSH
1401: LD_INT 12
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PPUSH
1412: CALL_OW 70
1416: PUSH
1417: FOR_IN
1418: IFFALSE 1465
// if Attacks ( apeman ) then
1420: LD_VAR 0 2
1424: PPUSH
1425: CALL_OW 320
1429: IFFALSE 1463
// if GetSide ( Attacks ( apeman ) ) = 3 then
1431: LD_VAR 0 2
1435: PPUSH
1436: CALL_OW 320
1440: PPUSH
1441: CALL_OW 255
1445: PUSH
1446: LD_INT 3
1448: EQUAL
1449: IFFALSE 1463
// begin attackedByApemanNearLake = true ;
1451: LD_ADDR_EXP 6
1455: PUSH
1456: LD_INT 1
1458: ST_TO_ADDR
// exit ;
1459: POP
1460: POP
1461: GO 1467
// end ;
1463: GO 1417
1465: POP
1466: POP
// end ;
1467: PPOPN 2
1469: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1470: LD_EXP 9
1474: PPUSH
1475: CALL_OW 303
1479: IFFALSE 1513
1481: GO 1483
1483: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1484: LD_ADDR_EXP 10
1488: PUSH
1489: LD_EXP 9
1493: PPUSH
1494: CALL_OW 250
1498: PUSH
1499: LD_EXP 9
1503: PPUSH
1504: CALL_OW 251
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: ST_TO_ADDR
1513: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1514: LD_EXP 9
1518: PPUSH
1519: CALL_OW 303
1523: PUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_EXP 10
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_EXP 10
1540: PUSH
1541: LD_INT 2
1543: ARRAY
1544: PPUSH
1545: CALL_OW 293
1549: AND
1550: IFFALSE 1934
1552: GO 1554
1554: DISABLE
1555: LD_INT 0
1557: PPUSH
// begin wait ( 0 0$2 ) ;
1558: LD_INT 70
1560: PPUSH
1561: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1565: LD_EXP 46
1569: PPUSH
1570: LD_STRING D2a-Bur-1
1572: PPUSH
1573: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1577: LD_INT 22
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 21
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PPUSH
1601: CALL_OW 69
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1625
// Say ( Burlak , D2a-Bur-2 ) else
1611: LD_EXP 46
1615: PPUSH
1616: LD_STRING D2a-Bur-2
1618: PPUSH
1619: CALL_OW 88
1623: GO 1934
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1625: LD_ADDR_VAR 0 1
1629: PUSH
1630: LD_INT 22
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 21
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PPUSH
1654: CALL_OW 69
1658: PUSH
1659: LD_EXP 46
1663: PUSH
1664: LD_EXP 54
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: DIFF
1673: PPUSH
1674: LD_EXP 10
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: LD_EXP 10
1687: PUSH
1688: LD_INT 2
1690: ARRAY
1691: PPUSH
1692: CALL_OW 73
1696: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1697: LD_ADDR_EXP 11
1701: PUSH
1702: LD_VAR 0 1
1706: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1707: LD_VAR 0 1
1711: PPUSH
1712: LD_EXP 10
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_EXP 10
1725: PUSH
1726: LD_INT 2
1728: ARRAY
1729: PPUSH
1730: CALL_OW 111
// case nearUnit of Belkov :
1734: LD_VAR 0 1
1738: PUSH
1739: LD_EXP 51
1743: DOUBLE
1744: EQUAL
1745: IFTRUE 1749
1747: GO 1764
1749: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1750: LD_EXP 51
1754: PPUSH
1755: LD_STRING D2a-Bel-1
1757: PPUSH
1758: CALL_OW 88
1762: GO 1831
1764: LD_EXP 53
1768: DOUBLE
1769: EQUAL
1770: IFTRUE 1774
1772: GO 1789
1774: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1775: LD_EXP 53
1779: PPUSH
1780: LD_STRING D2a-Kir-1
1782: PPUSH
1783: CALL_OW 88
1787: GO 1831
1789: POP
// if GetSex ( nearUnit ) = sex_male then
1790: LD_VAR 0 1
1794: PPUSH
1795: CALL_OW 258
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1819
// Say ( nearUnit , D2a-RSol1-1 ) else
1805: LD_VAR 0 1
1809: PPUSH
1810: LD_STRING D2a-RSol1-1
1812: PPUSH
1813: CALL_OW 88
1817: GO 1831
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1819: LD_VAR 0 1
1823: PPUSH
1824: LD_STRING D2a-RFSol1-1
1826: PPUSH
1827: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1831: LD_EXP 54
1835: PPUSH
1836: CALL_OW 255
1840: PUSH
1841: LD_INT 3
1843: EQUAL
1844: PUSH
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 302
1854: AND
1855: IFFALSE 1869
// Say ( Gnyevko , D2a-Gny-1 ) ;
1857: LD_EXP 54
1861: PPUSH
1862: LD_STRING D2a-Gny-1
1864: PPUSH
1865: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1869: LD_EXP 54
1873: PPUSH
1874: CALL_OW 255
1878: PUSH
1879: LD_INT 8
1881: EQUAL
1882: IFFALSE 1934
// begin Say ( Burlak , D12-Bur-1 ) ;
1884: LD_EXP 46
1888: PPUSH
1889: LD_STRING D12-Bur-1
1891: PPUSH
1892: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1896: LD_EXP 51
1900: PPUSH
1901: CALL_OW 255
1905: PUSH
1906: LD_INT 3
1908: EQUAL
1909: PUSH
1910: LD_EXP 51
1914: PPUSH
1915: CALL_OW 302
1919: AND
1920: IFFALSE 1934
// Say ( Belkov , D12-Bel-2 ) ;
1922: LD_EXP 51
1926: PPUSH
1927: LD_STRING D12-Bel-2
1929: PPUSH
1930: CALL_OW 88
// end ; end ; end ;
1934: PPOPN 1
1936: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1937: LD_EXP 12
1941: NOT
1942: PUSH
1943: LD_EXP 40
1947: PUSH
1948: LD_INT 70
1950: GREATER
1951: AND
1952: IFFALSE 1972
1954: GO 1956
1956: DISABLE
// begin enable ;
1957: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1958: LD_EXP 54
1962: PPUSH
1963: LD_EXP 39
1967: PPUSH
1968: CALL_OW 234
// end ;
1972: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1973: LD_INT 3
1975: PPUSH
1976: LD_EXP 54
1980: PPUSH
1981: CALL_OW 292
1985: IFFALSE 2597
1987: GO 1989
1989: DISABLE
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1994: LD_EXP 54
1998: PPUSH
1999: CALL_OW 87
// DialogueOn ;
2003: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
2007: LD_ADDR_VAR 0 1
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 3
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PPUSH
2041: LD_EXP 54
2045: PPUSH
2046: CALL_OW 74
2050: ST_TO_ADDR
// if nearUnit = Burlak then
2051: LD_VAR 0 1
2055: PUSH
2056: LD_EXP 46
2060: EQUAL
2061: IFFALSE 2423
// begin Say ( Burlak , D3-Bur-1 ) ;
2063: LD_EXP 46
2067: PPUSH
2068: LD_STRING D3-Bur-1
2070: PPUSH
2071: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2075: LD_EXP 54
2079: PPUSH
2080: LD_STRING D3-Gny-1
2082: PPUSH
2083: CALL_OW 88
// if apeWithRadioKiller then
2087: LD_EXP 11
2091: IFFALSE 2131
// begin if apeWithRadioKiller = Burlak then
2093: LD_EXP 11
2097: PUSH
2098: LD_EXP 46
2102: EQUAL
2103: IFFALSE 2119
// Say ( Burlak , D3-Bur-2 ) else
2105: LD_EXP 46
2109: PPUSH
2110: LD_STRING D3-Bur-2
2112: PPUSH
2113: CALL_OW 88
2117: GO 2131
// Say ( Burlak , D3-Bur-2a ) ;
2119: LD_EXP 46
2123: PPUSH
2124: LD_STRING D3-Bur-2a
2126: PPUSH
2127: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2131: LD_EXP 46
2135: PPUSH
2136: LD_STRING D3-Bur-2b
2138: PPUSH
2139: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2143: LD_INT 22
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 21
2155: PUSH
2156: LD_INT 1
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 69
2171: PUSH
2172: LD_INT 1
2174: EQUAL
2175: PUSH
2176: LD_EXP 14
2180: NOT
2181: AND
2182: IFFALSE 2234
// begin Say ( Burlak , D3-Bur-2c ) ;
2184: LD_EXP 46
2188: PPUSH
2189: LD_STRING D3-Bur-2c
2191: PPUSH
2192: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2196: LD_EXP 54
2200: PPUSH
2201: LD_STRING D3-Gny-2
2203: PPUSH
2204: CALL_OW 88
// DialogueOff ;
2208: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2212: LD_EXP 54
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: CALL_OW 235
// gnyevkoSaved = true ;
2224: LD_ADDR_EXP 12
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// exit ;
2232: GO 2597
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 21
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: LD_INT 1
2265: GREATER
2266: PUSH
2267: LD_EXP 14
2271: OR
2272: PUSH
2273: LD_EXP 22
2277: NOT
2278: AND
2279: IFFALSE 2331
// begin Say ( Burlak , D3-Bur-2d ) ;
2281: LD_EXP 46
2285: PPUSH
2286: LD_STRING D3-Bur-2d
2288: PPUSH
2289: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2293: LD_EXP 54
2297: PPUSH
2298: LD_STRING D3-Gny-2
2300: PPUSH
2301: CALL_OW 88
// DialogueOff ;
2305: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2309: LD_EXP 54
2313: PPUSH
2314: LD_INT 3
2316: PPUSH
2317: CALL_OW 235
// gnyevkoSaved = true ;
2321: LD_ADDR_EXP 12
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// exit ;
2329: GO 2597
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2331: LD_INT 22
2333: PUSH
2334: LD_INT 3
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 21
2343: PUSH
2344: LD_INT 1
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PPUSH
2355: CALL_OW 69
2359: PUSH
2360: LD_INT 1
2362: GREATER
2363: PUSH
2364: LD_EXP 22
2368: AND
2369: IFFALSE 2421
// begin Say ( Burlak , D3-Bur-2e ) ;
2371: LD_EXP 46
2375: PPUSH
2376: LD_STRING D3-Bur-2e
2378: PPUSH
2379: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2383: LD_EXP 54
2387: PPUSH
2388: LD_STRING D3-Gny-2
2390: PPUSH
2391: CALL_OW 88
// DialogueOff ;
2395: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2399: LD_EXP 54
2403: PPUSH
2404: LD_INT 3
2406: PPUSH
2407: CALL_OW 235
// gnyevkoSaved = true ;
2411: LD_ADDR_EXP 12
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// exit ;
2419: GO 2597
// end ; end else
2421: GO 2597
// begin if GetSex ( nearUnit ) = sex_male then
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 258
2432: PUSH
2433: LD_INT 1
2435: EQUAL
2436: IFFALSE 2452
// Say ( nearUnit , D3-RSol1-1 ) else
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_STRING D3-RSol1-1
2445: PPUSH
2446: CALL_OW 88
2450: GO 2464
// Say ( nearUnit , D3-RFSol1-1 ) ;
2452: LD_VAR 0 1
2456: PPUSH
2457: LD_STRING D3-RFSol1-1
2459: PPUSH
2460: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2464: LD_EXP 54
2468: PPUSH
2469: LD_STRING D3-Gny-1
2471: PPUSH
2472: CALL_OW 88
// if apeWithRadioKiller then
2476: LD_EXP 11
2480: IFFALSE 2520
// begin if apeWithRadioKiller = Burlak then
2482: LD_EXP 11
2486: PUSH
2487: LD_EXP 46
2491: EQUAL
2492: IFFALSE 2508
// Say ( Burlak , D3-Bur-2 ) else
2494: LD_EXP 46
2498: PPUSH
2499: LD_STRING D3-Bur-2
2501: PPUSH
2502: CALL_OW 88
2506: GO 2520
// Say ( Burlak , D3-Bur-2a ) ;
2508: LD_EXP 46
2512: PPUSH
2513: LD_STRING D3-Bur-2a
2515: PPUSH
2516: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2520: LD_VAR 0 1
2524: PPUSH
2525: CALL_OW 258
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: IFFALSE 2549
// Say ( nearUnit , D3-RSol1-2 ) else
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_STRING D3-RSol1-2
2542: PPUSH
2543: CALL_OW 88
2547: GO 2561
// Say ( nearUnit , D3-RFSol1-2 ) ;
2549: LD_VAR 0 1
2553: PPUSH
2554: LD_STRING D3-RFSol1-2
2556: PPUSH
2557: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2561: LD_EXP 54
2565: PPUSH
2566: LD_STRING D3-Gny-2a
2568: PPUSH
2569: CALL_OW 88
// DialogueOff ;
2573: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2577: LD_EXP 54
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL_OW 235
// gnyevkoSaved = true ;
2589: LD_ADDR_EXP 12
2593: PUSH
2594: LD_INT 1
2596: ST_TO_ADDR
// end ; end ;
2597: PPOPN 2
2599: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2600: LD_EXP 12
2604: NOT
2605: PUSH
2606: LD_EXP 21
2610: NOT
2611: OR
2612: IFFALSE 2807
2614: GO 2616
2616: DISABLE
2617: LD_INT 0
2619: PPUSH
// begin enable ;
2620: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2621: LD_EXP 12
2625: NOT
2626: PUSH
2627: LD_EXP 40
2631: PUSH
2632: LD_INT 70
2634: GREATER
2635: AND
2636: IFFALSE 2714
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2638: LD_ADDR_VAR 0 1
2642: PUSH
2643: LD_INT 22
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 25
2655: PUSH
2656: LD_INT 12
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: FOR_IN
2673: IFFALSE 2712
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: LD_EXP 54
2684: PPUSH
2685: CALL_OW 250
2689: PPUSH
2690: LD_EXP 54
2694: PPUSH
2695: CALL_OW 251
2699: PPUSH
2700: LD_INT 10
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL 8496 0 5
2710: GO 2672
2712: POP
2713: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2714: LD_EXP 21
2718: NOT
2719: PUSH
2720: LD_EXP 41
2724: PUSH
2725: LD_INT 70
2727: GREATER
2728: AND
2729: IFFALSE 2807
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2731: LD_ADDR_VAR 0 1
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 12
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 69
2764: PUSH
2765: FOR_IN
2766: IFFALSE 2805
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2768: LD_VAR 0 1
2772: PPUSH
2773: LD_EXP 53
2777: PPUSH
2778: CALL_OW 250
2782: PPUSH
2783: LD_EXP 53
2787: PPUSH
2788: CALL_OW 251
2792: PPUSH
2793: LD_INT 10
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL 8496 0 5
2803: GO 2765
2805: POP
2806: POP
// end ;
2807: PPOPN 1
2809: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2810: LD_EXP 12
2814: NOT
2815: PUSH
2816: LD_EXP 21
2820: NOT
2821: OR
2822: IFFALSE 2933
2824: GO 2826
2826: DISABLE
// begin enable ;
2827: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2828: LD_EXP 12
2832: NOT
2833: PUSH
2834: LD_EXP 40
2838: PUSH
2839: LD_INT 0
2841: GREATER
2842: AND
2843: IFFALSE 2859
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2845: LD_ADDR_EXP 40
2849: PUSH
2850: LD_EXP 40
2854: PUSH
2855: LD_INT 35
2857: MINUS
2858: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2859: LD_EXP 53
2863: PPUSH
2864: CALL_OW 305
2868: PUSH
2869: LD_EXP 21
2873: NOT
2874: AND
2875: PUSH
2876: LD_EXP 41
2880: PUSH
2881: LD_INT 0
2883: GREATER
2884: AND
2885: IFFALSE 2901
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2887: LD_ADDR_EXP 41
2891: PUSH
2892: LD_EXP 41
2896: PUSH
2897: LD_INT 35
2899: MINUS
2900: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2901: LD_EXP 53
2905: PPUSH
2906: CALL_OW 305
2910: PUSH
2911: LD_EXP 21
2915: NOT
2916: AND
2917: IFFALSE 2933
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2919: LD_ADDR_EXP 26
2923: PUSH
2924: LD_EXP 26
2928: PUSH
2929: LD_INT 35
2931: PLUS
2932: ST_TO_ADDR
// end ;
2933: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2934: LD_INT 3
2936: PPUSH
2937: LD_EXP 47
2941: PPUSH
2942: CALL_OW 292
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 46
2954: PPUSH
2955: CALL_OW 292
2959: OR
2960: PUSH
2961: LD_EXP 54
2965: PPUSH
2966: CALL_OW 255
2970: PUSH
2971: LD_INT 3
2973: EQUAL
2974: PUSH
2975: LD_INT 6
2977: PPUSH
2978: LD_EXP 54
2982: PPUSH
2983: CALL_OW 292
2987: AND
2988: OR
2989: PUSH
2990: LD_EXP 14
2994: NOT
2995: AND
2996: IFFALSE 3911
2998: GO 3000
3000: DISABLE
// begin enable ;
3001: ENABLE
// InGameOn ;
3002: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
3006: LD_EXP 47
3010: PPUSH
3011: CALL_OW 87
// ComWalk ( Gnyevko ) ;
3015: LD_EXP 54
3019: PPUSH
3020: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3024: LD_EXP 46
3028: PUSH
3029: LD_EXP 54
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 200
// DialogueOn ;
3042: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3046: LD_EXP 13
3050: IFFALSE 3302
// begin meetPokryshkin = true ;
3052: LD_ADDR_EXP 14
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3060: LD_INT 6
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 343
// DialogueOff ;
3070: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3074: LD_EXP 46
3078: PPUSH
3079: LD_EXP 47
3083: PPUSH
3084: CALL_OW 250
3088: PPUSH
3089: LD_EXP 47
3093: PPUSH
3094: CALL_OW 251
3098: PPUSH
3099: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3103: LD_EXP 46
3107: PPUSH
3108: LD_EXP 47
3112: PPUSH
3113: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3117: LD_EXP 47
3121: PPUSH
3122: LD_EXP 46
3126: PPUSH
3127: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3131: LD_EXP 54
3135: PPUSH
3136: LD_STRING D4-Gny-3
3138: PPUSH
3139: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3143: LD_EXP 46
3147: PPUSH
3148: LD_STRING D4-Bur-3
3150: PPUSH
3151: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3155: LD_EXP 47
3159: PPUSH
3160: LD_STRING D4-Pok-4
3162: PPUSH
3163: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3167: LD_EXP 42
3171: PPUSH
3172: LD_INT 18
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 49
// wait ( 0 0$2 ) ;
3182: LD_INT 70
3184: PPUSH
3185: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3189: LD_EXP 46
3193: PPUSH
3194: LD_STRING D4-Bur-4
3196: PPUSH
3197: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-5
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3213: LD_EXP 42
3217: PPUSH
3218: LD_STRING D4-Sol1-5
3220: PPUSH
3221: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3225: LD_EXP 47
3229: PPUSH
3230: LD_STRING D4-Pok-6
3232: PPUSH
3233: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-6a
3244: PPUSH
3245: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3249: LD_EXP 46
3253: PPUSH
3254: LD_STRING D4-Bur-6
3256: PPUSH
3257: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3261: LD_EXP 47
3265: PPUSH
3266: LD_STRING D4-Pok-7
3268: PPUSH
3269: CALL_OW 88
// DialogueOff ;
3273: CALL_OW 7
// InGameOff ;
3277: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3281: LD_STRING M2
3283: PPUSH
3284: CALL_OW 337
// goToHill = true ;
3288: LD_ADDR_EXP 15
3292: PUSH
3293: LD_INT 1
3295: ST_TO_ADDR
// MoveToHill ;
3296: CALL 10376 0 0
// exit ;
3300: GO 3911
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3302: LD_EXP 46
3306: PUSH
3307: LD_EXP 54
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3320: LD_EXP 47
3324: PPUSH
3325: LD_STRING D4-Pok-1
3327: PPUSH
3328: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3332: LD_EXP 54
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 3
3344: EQUAL
3345: PUSH
3346: LD_EXP 54
3350: PPUSH
3351: CALL_OW 302
3355: AND
3356: IFFALSE 3370
// Say ( Gnyevko , D4-Gny-1 ) ;
3358: LD_EXP 54
3362: PPUSH
3363: LD_STRING D4-Gny-1
3365: PPUSH
3366: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3370: LD_EXP 46
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 6
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 21
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PPUSH
3404: LD_EXP 46
3408: PPUSH
3409: CALL_OW 74
3413: PPUSH
3414: CALL_OW 296
3418: PUSH
3419: LD_INT 8
3421: GREATER
3422: PUSH
3423: LD_EXP 46
3427: PPUSH
3428: LD_EXP 54
3432: PPUSH
3433: CALL_OW 296
3437: PUSH
3438: LD_INT 8
3440: GREATER
3441: AND
3442: PUSH
3443: LD_EXP 54
3447: PPUSH
3448: CALL_OW 255
3452: PUSH
3453: LD_INT 3
3455: EQUAL
3456: AND
3457: PUSH
3458: LD_EXP 54
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: IFFALSE 3566
// begin ComWalk ( Gnyevko ) ;
3470: LD_EXP 54
3474: PPUSH
3475: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-2
3486: PPUSH
3487: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3491: LD_EXP 54
3495: PPUSH
3496: LD_STRING D4-Gny-2
3498: PPUSH
3499: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3503: LD_EXP 47
3507: PPUSH
3508: LD_STRING D4-Pok-3
3510: PPUSH
3511: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3515: LD_ADDR_EXP 13
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3523: LD_EXP 54
3527: PPUSH
3528: LD_INT 6
3530: PPUSH
3531: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3535: LD_EXP 54
3539: PPUSH
3540: LD_EXP 47
3544: PPUSH
3545: CALL_OW 250
3549: PPUSH
3550: LD_EXP 47
3554: PPUSH
3555: CALL_OW 251
3559: PPUSH
3560: CALL_OW 171
// end else
3564: GO 3903
// begin meetPokryshkin = true ;
3566: LD_ADDR_EXP 14
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3574: LD_INT 6
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: CALL_OW 343
// DialogueOff ;
3584: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3588: LD_EXP 54
3592: PPUSH
3593: CALL_OW 255
3597: PUSH
3598: LD_INT 3
3600: EQUAL
3601: PUSH
3602: LD_EXP 54
3606: PPUSH
3607: CALL_OW 302
3611: AND
3612: IFFALSE 3689
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3614: LD_EXP 46
3618: PUSH
3619: LD_EXP 54
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: LD_EXP 47
3632: PPUSH
3633: CALL_OW 250
3637: PPUSH
3638: LD_EXP 47
3642: PPUSH
3643: CALL_OW 251
3647: PPUSH
3648: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3652: LD_EXP 46
3656: PUSH
3657: LD_EXP 54
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: LD_EXP 47
3670: PPUSH
3671: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3675: LD_EXP 54
3679: PPUSH
3680: LD_INT 6
3682: PPUSH
3683: CALL_OW 235
// end else
3687: GO 3732
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3689: LD_EXP 46
3693: PPUSH
3694: LD_EXP 47
3698: PPUSH
3699: CALL_OW 250
3703: PPUSH
3704: LD_EXP 47
3708: PPUSH
3709: CALL_OW 251
3713: PPUSH
3714: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3718: LD_EXP 46
3722: PPUSH
3723: LD_EXP 47
3727: PPUSH
3728: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3732: LD_EXP 47
3736: PPUSH
3737: LD_EXP 46
3741: PPUSH
3742: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3746: LD_EXP 46
3750: PPUSH
3751: LD_STRING D4-Bur-3
3753: PPUSH
3754: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3758: LD_EXP 47
3762: PPUSH
3763: LD_STRING D4-Pok-4
3765: PPUSH
3766: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3770: LD_EXP 42
3774: PPUSH
3775: LD_INT 18
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: CALL_OW 49
// wait ( 0 0$2 ) ;
3785: LD_INT 70
3787: PPUSH
3788: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3792: LD_EXP 46
3796: PPUSH
3797: LD_STRING D4-Bur-4
3799: PPUSH
3800: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-5
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3816: LD_EXP 42
3820: PPUSH
3821: LD_STRING D4-Sol1-5
3823: PPUSH
3824: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3828: LD_EXP 47
3832: PPUSH
3833: LD_STRING D4-Pok-6
3835: PPUSH
3836: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-6a
3847: PPUSH
3848: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3852: LD_EXP 46
3856: PPUSH
3857: LD_STRING D4-Bur-6
3859: PPUSH
3860: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3864: LD_EXP 47
3868: PPUSH
3869: LD_STRING D4-Pok-7
3871: PPUSH
3872: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3876: LD_STRING M2
3878: PPUSH
3879: CALL_OW 337
// goToHill = true ;
3883: LD_ADDR_EXP 15
3887: PUSH
3888: LD_INT 1
3890: ST_TO_ADDR
// DialogueOff ;
3891: CALL_OW 7
// InGameOff ;
3895: CALL_OW 9
// MoveToHill ;
3899: CALL 10376 0 0
// end ; DialogueOff ;
3903: CALL_OW 7
// InGameOff ;
3907: CALL_OW 9
// end ;
3911: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3912: LD_EXP 46
3916: PPUSH
3917: LD_EXP 47
3921: PPUSH
3922: CALL_OW 296
3926: PUSH
3927: LD_INT 10
3929: GREATER
3930: PUSH
3931: LD_EXP 15
3935: AND
3936: PUSH
3937: LD_EXP 18
3941: NOT
3942: AND
3943: IFFALSE 4144
3945: GO 3947
3947: DISABLE
3948: LD_INT 0
3950: PPUSH
// begin enable ;
3951: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_EXP 47
3961: PUSH
3962: LD_EXP 48
3966: PUSH
3967: LD_EXP 49
3971: PUSH
3972: LD_EXP 50
3976: PUSH
3977: LD_EXP 51
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3989: LD_EXP 54
3993: PPUSH
3994: CALL_OW 255
3998: PUSH
3999: LD_INT 6
4001: EQUAL
4002: PUSH
4003: LD_EXP 12
4007: AND
4008: IFFALSE 4026
// ruSolds = ruSolds ^ Gnyevko ;
4010: LD_ADDR_VAR 0 1
4014: PUSH
4015: LD_VAR 0 1
4019: PUSH
4020: LD_EXP 54
4024: ADD
4025: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4035: LD_EXP 46
4039: PPUSH
4040: CALL_OW 87
// DialogueOn ;
4044: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4048: LD_EXP 47
4052: PPUSH
4053: LD_STRING DSplit-Pok-1
4055: PPUSH
4056: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4060: LD_EXP 46
4064: PPUSH
4065: LD_STRING DSplit-Bur-1
4067: PPUSH
4068: CALL_OW 88
// DialogueOff ;
4072: CALL_OW 7
// InGameOn ;
4076: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4080: LD_EXP 46
4084: PPUSH
4085: LD_EXP 47
4089: PPUSH
4090: CALL_OW 250
4094: PPUSH
4095: LD_EXP 47
4099: PPUSH
4100: CALL_OW 251
4104: PPUSH
4105: CALL_OW 111
// wait ( 0 0$1 ) ;
4109: LD_INT 35
4111: PPUSH
4112: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4116: LD_EXP 46
4120: PPUSH
4121: LD_EXP 47
4125: PPUSH
4126: CALL_OW 296
4130: PUSH
4131: LD_INT 6
4133: LESS
4134: IFFALSE 4080
// InGameOff ;
4136: CALL_OW 9
// MoveToHill ;
4140: CALL 10376 0 0
// end ;
4144: PPOPN 1
4146: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// traitor = true ;
4151: LD_ADDR_EXP 18
4155: PUSH
4156: LD_INT 1
4158: ST_TO_ADDR
// DialogueOn ;
4159: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4163: LD_EXP 47
4167: PPUSH
4168: LD_STRING DAttack-Pok-1
4170: PPUSH
4171: CALL_OW 88
// DialogueOff ;
4175: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4179: LD_INT 3
4181: PPUSH
4182: LD_INT 6
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4195: LD_INT 22
4197: PUSH
4198: LD_INT 6
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 21
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: PPUSH
4224: LD_EXP 46
4228: PPUSH
4229: CALL_OW 115
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4238: LD_EXP 47
4242: PPUSH
4243: LD_INT 65
4245: PPUSH
4246: LD_INT 59
4248: PPUSH
4249: CALL_OW 297
4253: PUSH
4254: LD_INT 4
4256: LESS
4257: PUSH
4258: LD_EXP 18
4262: NOT
4263: AND
4264: IFFALSE 4461
4266: GO 4268
4268: DISABLE
// begin InGameOn ;
4269: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4273: LD_INT 55
4275: PPUSH
4276: LD_INT 50
4278: PPUSH
4279: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4283: LD_EXP 46
4287: PPUSH
4288: LD_INT 66
4290: PPUSH
4291: LD_INT 57
4293: PPUSH
4294: CALL_OW 111
// AddComHold ( Burlak ) ;
4298: LD_EXP 46
4302: PPUSH
4303: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4307: LD_EXP 42
4311: PPUSH
4312: LD_INT 59
4314: PPUSH
4315: LD_INT 55
4317: PPUSH
4318: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4322: LD_INT 35
4324: PPUSH
4325: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4329: LD_INT 1
4331: PPUSH
4332: LD_EXP 47
4336: PPUSH
4337: CALL_OW 292
4341: IFFALSE 4322
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4343: LD_EXP 42
4347: PUSH
4348: LD_EXP 47
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 87
// ComStop ( Charles ) ;
4361: LD_EXP 42
4365: PPUSH
4366: CALL_OW 141
// AddComHold ( Charles ) ;
4370: LD_EXP 42
4374: PPUSH
4375: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4379: LD_EXP 42
4383: PPUSH
4384: LD_EXP 47
4388: PPUSH
4389: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4393: LD_EXP 42
4397: PPUSH
4398: LD_STRING D5-Sol1-1
4400: PPUSH
4401: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4405: LD_EXP 47
4409: PPUSH
4410: LD_STRING D5-Pok-1
4412: PPUSH
4413: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 6
4422: PPUSH
4423: LD_INT 2
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4433: LD_INT 1
4435: PPUSH
4436: LD_INT 3
4438: PPUSH
4439: LD_INT 2
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4449: LD_EXP 42
4453: PPUSH
4454: LD_STRING D5-Sol1-2
4456: PPUSH
4457: CALL_OW 88
// end ;
4461: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4462: LD_EXP 42
4466: PPUSH
4467: CALL_OW 301
4471: PUSH
4472: LD_EXP 15
4476: AND
4477: IFFALSE 5081
4479: GO 4481
4481: DISABLE
4482: LD_INT 0
4484: PPUSH
// begin InGameOn ;
4485: CALL_OW 8
// goToHill = false ;
4489: LD_ADDR_EXP 15
4493: PUSH
4494: LD_INT 0
4496: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4497: LD_INT 22
4499: PUSH
4500: LD_INT 6
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PPUSH
4521: CALL_OW 69
4525: PPUSH
4526: CALL_OW 141
// wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4537: LD_INT 22
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: PPUSH
4566: CALL_OW 138
// wait ( 0 0$1 ) ;
4570: LD_INT 35
4572: PPUSH
4573: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4577: LD_INT 55
4579: PPUSH
4580: LD_INT 50
4582: PPUSH
4583: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4587: LD_EXP 46
4591: PPUSH
4592: LD_INT 56
4594: PPUSH
4595: LD_INT 56
4597: PPUSH
4598: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4602: LD_INT 22
4604: PUSH
4605: LD_INT 6
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PPUSH
4631: LD_INT 56
4633: PPUSH
4634: LD_INT 56
4636: PPUSH
4637: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4641: LD_EXP 46
4645: PPUSH
4646: LD_STRING D5-Bur-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-2
4660: PPUSH
4661: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4665: LD_EXP 51
4669: PPUSH
4670: LD_STRING D5-Bel-2
4672: PPUSH
4673: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4677: LD_EXP 47
4681: PPUSH
4682: LD_STRING D5-Pok-3
4684: PPUSH
4685: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4689: LD_EXP 54
4693: PPUSH
4694: CALL_OW 255
4698: PUSH
4699: LD_INT 6
4701: EQUAL
4702: IFFALSE 4716
// Say ( Gnyevko , D5-Gny-3 ) ;
4704: LD_EXP 54
4708: PPUSH
4709: LD_STRING D5-Gny-3
4711: PPUSH
4712: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4716: LD_EXP 46
4720: PPUSH
4721: LD_STRING D5-Bur-3
4723: PPUSH
4724: CALL_OW 88
// interface_hidden = true ;
4728: LD_ADDR_OWVAR 54
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// IngameOff ;
4736: CALL_OW 9
// wait ( 0 0$2 ) ;
4740: LD_INT 70
4742: PPUSH
4743: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4747: LD_EXP 46
4751: PPUSH
4752: LD_INT 85
4754: PPUSH
4755: LD_INT 64
4757: PPUSH
4758: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4762: LD_INT 22
4764: PUSH
4765: LD_INT 6
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 21
4774: PUSH
4775: LD_INT 1
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PPUSH
4786: CALL_OW 69
4790: PPUSH
4791: LD_INT 85
4793: PPUSH
4794: LD_INT 64
4796: PPUSH
4797: CALL_OW 111
// interface_hidden = false ;
4801: LD_ADDR_OWVAR 54
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// InGameOn ;
4809: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4813: LD_EXP 46
4817: PPUSH
4818: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4822: LD_EXP 47
4826: PPUSH
4827: LD_STRING D6-Pok-1
4829: PPUSH
4830: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4834: LD_EXP 46
4838: PPUSH
4839: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4843: LD_EXP 46
4847: PPUSH
4848: LD_STRING D6-Bur-1
4850: PPUSH
4851: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4855: LD_EXP 46
4859: PPUSH
4860: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4864: LD_EXP 47
4868: PPUSH
4869: LD_STRING D6-Pok-2
4871: PPUSH
4872: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4876: LD_EXP 46
4880: PPUSH
4881: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4885: LD_EXP 51
4889: PPUSH
4890: LD_STRING D6-Bel-2
4892: PPUSH
4893: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4897: LD_EXP 46
4901: PPUSH
4902: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4906: LD_EXP 46
4910: PPUSH
4911: LD_STRING D6-Bur-2
4913: PPUSH
4914: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4918: LD_EXP 46
4922: PPUSH
4923: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4927: LD_EXP 47
4931: PPUSH
4932: LD_STRING D6-Pok-3
4934: PPUSH
4935: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4939: LD_EXP 46
4943: PPUSH
4944: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4948: LD_EXP 55
4952: PPUSH
4953: LD_STRING D6-Kur-3
4955: PPUSH
4956: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4960: LD_EXP 46
4964: PPUSH
4965: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4969: LD_EXP 47
4973: PPUSH
4974: LD_STRING D6-Pok-4
4976: PPUSH
4977: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4981: LD_EXP 46
4985: PPUSH
4986: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4990: LD_EXP 51
4994: PPUSH
4995: LD_STRING D6-Bel-4
4997: PPUSH
4998: CALL_OW 88
// InGameOff ;
5002: CALL_OW 9
// interface_hidden = false ;
5006: LD_ADDR_OWVAR 54
5010: PUSH
5011: LD_INT 0
5013: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
5014: LD_EXP 47
5018: PPUSH
5019: LD_INT 23
5021: PPUSH
5022: CALL_OW 115
// wait ( 0 0$5 ) ;
5026: LD_INT 175
5028: PPUSH
5029: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5033: LD_INT 22
5035: PUSH
5036: LD_INT 6
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 1
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: PPUSH
5062: LD_INT 23
5064: PPUSH
5065: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 54
5076: PPUSH
5077: CALL_OW 471
// end ;
5081: PPOPN 1
5083: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 47
5091: PPUSH
5092: CALL_OW 292
5096: PUSH
5097: LD_EXP 42
5101: PPUSH
5102: CALL_OW 301
5106: AND
5107: IFFALSE 5126
5109: GO 5111
5111: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5112: LD_EXP 43
5116: PPUSH
5117: LD_EXP 47
5121: PPUSH
5122: CALL_OW 115
5126: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5127: LD_INT 3
5129: PPUSH
5130: LD_INT 23
5132: PPUSH
5133: CALL_OW 292
5137: IFFALSE 5166
5139: GO 5141
5141: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5142: LD_EXP 47
5146: PPUSH
5147: LD_STRING D7-Pok-1
5149: PPUSH
5150: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5154: LD_EXP 43
5158: PPUSH
5159: LD_STRING D7-FSol1-1
5161: PPUSH
5162: CALL_OW 88
// end ;
5166: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5167: LD_EXP 47
5171: PPUSH
5172: CALL_OW 303
5176: IFFALSE 5710
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
5184: PPUSH
5185: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_INT 6
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 21
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 50
5213: PUSH
5214: EMPTY
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: CALL_OW 69
5226: PUSH
5227: LD_EXP 51
5231: DIFF
5232: ST_TO_ADDR
// DialogueOn ;
5233: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5237: LD_EXP 51
5241: PPUSH
5242: LD_STRING D7a-Bel-1
5244: PPUSH
5245: CALL_OW 88
// DialogueOff ;
5249: CALL_OW 7
// for i := 1 to ruSolds do
5253: LD_ADDR_VAR 0 1
5257: PUSH
5258: DOUBLE
5259: LD_INT 1
5261: DEC
5262: ST_TO_ADDR
5263: LD_VAR 0 3
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5327
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5271: LD_VAR 0 3
5275: PUSH
5276: LD_VAR 0 1
5280: ARRAY
5281: PPUSH
5282: LD_INT 87
5284: PUSH
5285: LD_VAR 0 1
5289: PLUS
5290: PPUSH
5291: LD_INT 63
5293: PUSH
5294: LD_VAR 0 1
5298: PLUS
5299: PPUSH
5300: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 1
5313: ARRAY
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 178
// end ;
5325: GO 5268
5327: POP
5328: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5329: LD_EXP 51
5333: PPUSH
5334: LD_INT 89
5336: PPUSH
5337: LD_INT 67
5339: PPUSH
5340: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5344: LD_EXP 51
5348: PPUSH
5349: LD_INT 88
5351: PPUSH
5352: LD_INT 66
5354: PPUSH
5355: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5359: LD_EXP 48
5363: PPUSH
5364: LD_STRING D7a-RSol1-1
5366: PPUSH
5367: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5371: LD_EXP 43
5375: PPUSH
5376: LD_STRING D7a-FSol1-1
5378: PPUSH
5379: CALL_OW 88
// wait ( 0 0$12 ) ;
5383: LD_INT 420
5385: PPUSH
5386: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-1
5397: PPUSH
5398: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5402: LD_EXP 49
5406: PPUSH
5407: LD_STRING D7b-FSol1-1
5409: PPUSH
5410: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5414: LD_EXP 51
5418: PPUSH
5419: LD_STRING D7b-Bel-2
5421: PPUSH
5422: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5426: LD_EXP 48
5430: PPUSH
5431: LD_STRING D7b-RSol1-2
5433: PPUSH
5434: CALL_OW 88
// for unit in ruSolds do
5438: LD_ADDR_VAR 0 2
5442: PUSH
5443: LD_VAR 0 3
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5692
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5451: LD_EXP 46
5455: PPUSH
5456: LD_VAR 0 2
5460: PPUSH
5461: CALL_OW 296
5465: PUSH
5466: LD_INT 7
5468: LESS
5469: IFFALSE 5682
// begin InGameOn ;
5471: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5475: LD_EXP 51
5479: PUSH
5480: LD_EXP 48
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5493: LD_EXP 46
5497: PPUSH
5498: LD_INT 88
5500: PPUSH
5501: LD_INT 66
5503: PPUSH
5504: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5508: LD_EXP 51
5512: PPUSH
5513: LD_EXP 46
5517: PPUSH
5518: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5522: LD_EXP 46
5526: PPUSH
5527: LD_INT 90
5529: PPUSH
5530: LD_INT 66
5532: PPUSH
5533: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-3
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-4
5556: PPUSH
5557: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5561: LD_EXP 46
5565: PPUSH
5566: LD_STRING D7b-Bur-4
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-5
5580: PPUSH
5581: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5585: LD_EXP 49
5589: PPUSH
5590: LD_STRING D7b-FSol1-5
5592: PPUSH
5593: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5597: LD_EXP 51
5601: PPUSH
5602: LD_STRING D7b-Bel-6
5604: PPUSH
5605: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_STRING D7b-Bur-6
5616: PPUSH
5617: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5621: LD_EXP 48
5625: PPUSH
5626: LD_STRING D7b-RSol1-6
5628: PPUSH
5629: CALL_OW 88
// InGameOff ;
5633: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5637: LD_VAR 0 3
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5649: LD_EXP 51
5653: PPUSH
5654: LD_INT 3
5656: PPUSH
5657: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5661: LD_STRING M3
5663: PPUSH
5664: CALL_OW 337
// secondAttack = true ;
5668: LD_ADDR_EXP 17
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// exit ;
5676: POP
5677: POP
5678: GO 5710
// end else
5680: GO 5690
// belkovWaitForGorky = true ;
5682: LD_ADDR_EXP 16
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
5690: GO 5448
5692: POP
5693: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5694: LD_EXP 51
5698: PPUSH
5699: LD_STRING D7b-Bel-3
5701: PPUSH
5702: CALL_OW 88
// InGameOff ;
5706: CALL_OW 9
// end ;
5710: PPOPN 3
5712: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5713: LD_EXP 16
5717: PUSH
5718: LD_EXP 18
5722: NOT
5723: AND
5724: IFFALSE 6058
5726: GO 5728
5728: DISABLE
5729: LD_INT 0
5731: PPUSH
5732: PPUSH
// begin enable ;
5733: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: LD_INT 22
5741: PUSH
5742: LD_INT 6
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 21
5751: PUSH
5752: LD_INT 1
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 69
5767: ST_TO_ADDR
// for unit in ruSolds do
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_VAR 0 2
5777: PUSH
5778: FOR_IN
5779: IFFALSE 6056
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5781: LD_EXP 46
5785: PPUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 296
5795: PUSH
5796: LD_INT 7
5798: LESS
5799: IFFALSE 6054
// begin if not IsInUnit ( Johanna ) then
5801: LD_EXP 43
5805: PPUSH
5806: CALL_OW 310
5810: NOT
5811: IFFALSE 5825
// ComEnterUnit ( Johanna , am_bun ) ;
5813: LD_EXP 43
5817: PPUSH
5818: LD_INT 23
5820: PPUSH
5821: CALL_OW 120
// belkovWaitForGorky = false ;
5825: LD_ADDR_EXP 16
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// InGameOn ;
5833: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5837: LD_EXP 51
5841: PUSH
5842: LD_EXP 48
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5855: LD_EXP 46
5859: PPUSH
5860: LD_INT 88
5862: PPUSH
5863: LD_INT 66
5865: PPUSH
5866: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5870: LD_EXP 51
5874: PPUSH
5875: LD_EXP 46
5879: PPUSH
5880: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5884: LD_EXP 46
5888: PPUSH
5889: LD_INT 90
5891: PPUSH
5892: LD_INT 66
5894: PPUSH
5895: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5899: LD_EXP 51
5903: PPUSH
5904: LD_STRING D7b-Bel-3a
5906: PPUSH
5907: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5911: LD_EXP 46
5915: PPUSH
5916: LD_STRING D7b-Bur-3
5918: PPUSH
5919: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5923: LD_EXP 51
5927: PPUSH
5928: LD_STRING D7b-Bel-4
5930: PPUSH
5931: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5935: LD_EXP 46
5939: PPUSH
5940: LD_STRING D7b-Bur-4
5942: PPUSH
5943: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5947: LD_EXP 51
5951: PPUSH
5952: LD_STRING D7b-Bel-5
5954: PPUSH
5955: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5959: LD_EXP 49
5963: PPUSH
5964: LD_STRING D7b-FSol1-5
5966: PPUSH
5967: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5971: LD_EXP 51
5975: PPUSH
5976: LD_STRING D7b-Bel-6
5978: PPUSH
5979: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5983: LD_EXP 46
5987: PPUSH
5988: LD_STRING D7b-Bur-6
5990: PPUSH
5991: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5995: LD_EXP 48
5999: PPUSH
6000: LD_STRING D7a-RSol1-6
6002: PPUSH
6003: CALL_OW 88
// InGameOff ;
6007: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_INT 3
6018: PPUSH
6019: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
6023: LD_EXP 51
6027: PPUSH
6028: LD_INT 3
6030: PPUSH
6031: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
6035: LD_STRING M3
6037: PPUSH
6038: CALL_OW 337
// secondAttack = true ;
6042: LD_ADDR_EXP 17
6046: PUSH
6047: LD_INT 1
6049: ST_TO_ADDR
// exit ;
6050: POP
6051: POP
6052: GO 6058
// end ;
6054: GO 5778
6056: POP
6057: POP
// end ;
6058: PPOPN 2
6060: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6065: LD_EXP 43
6069: PPUSH
6070: LD_STRING D8-FSol1-1
6072: PPUSH
6073: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6077: LD_EXP 44
6081: PPUSH
6082: LD_STRING D8-Glad-1
6084: PPUSH
6085: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6089: LD_EXP 46
6093: PPUSH
6094: LD_STRING D8-Bur-1
6096: PPUSH
6097: CALL_OW 88
// secondAttack = false ;
6101: LD_ADDR_EXP 17
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 21
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: PPUSH
6143: LD_INT 23
6145: PPUSH
6146: CALL_OW 74
6150: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6151: LD_EXP 45
6155: PPUSH
6156: CALL_OW 122
// wait ( 0 0$1 ) ;
6160: LD_INT 35
6162: PPUSH
6163: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6167: LD_EXP 45
6171: PPUSH
6172: LD_VAR 0 2
6176: PPUSH
6177: CALL_OW 175
// end ;
6181: LD_VAR 0 1
6185: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6186: LD_INT 23
6188: PPUSH
6189: CALL_OW 256
6193: PUSH
6194: LD_INT 350
6196: LESS
6197: PUSH
6198: LD_INT 23
6200: PPUSH
6201: CALL_OW 256
6205: PUSH
6206: LD_INT 250
6208: GREATER
6209: AND
6210: PUSH
6211: LD_INT 20
6213: PPUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 21
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 70
6242: PUSH
6243: LD_INT 0
6245: GREATER
6246: AND
6247: PUSH
6248: LD_EXP 24
6252: NOT
6253: AND
6254: IFFALSE 6271
6256: GO 6258
6258: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6259: LD_EXP 43
6263: PPUSH
6264: LD_STRING D8-FSol1-2
6266: PPUSH
6267: CALL_OW 88
6271: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6272: LD_INT 23
6274: PPUSH
6275: CALL_OW 303
6279: PUSH
6280: LD_INT 22
6282: PPUSH
6283: CALL_OW 302
6287: AND
6288: PUSH
6289: LD_EXP 24
6293: NOT
6294: AND
6295: IFFALSE 6365
6297: GO 6299
6299: DISABLE
// begin amRetreat = true ;
6300: LD_ADDR_EXP 24
6304: PUSH
6305: LD_INT 1
6307: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6308: LD_EXP 43
6312: PPUSH
6313: LD_STRING D8-FSol1-2a
6315: PPUSH
6316: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6320: LD_EXP 44
6324: PUSH
6325: LD_EXP 43
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PPUSH
6334: LD_INT 21
6336: PPUSH
6337: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6341: LD_EXP 44
6345: PPUSH
6346: LD_STRING D8-Glad-2
6348: PPUSH
6349: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6353: LD_EXP 46
6357: PPUSH
6358: LD_STRING D8-Bur-2
6360: PPUSH
6361: CALL_OW 88
// end ;
6365: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6366: LD_INT 22
6368: PPUSH
6369: CALL_OW 303
6373: PUSH
6374: LD_INT 23
6376: PPUSH
6377: CALL_OW 302
6381: AND
6382: PUSH
6383: LD_EXP 24
6387: NOT
6388: AND
6389: IFFALSE 6459
6391: GO 6393
6393: DISABLE
// begin amRetreat = true ;
6394: LD_ADDR_EXP 24
6398: PUSH
6399: LD_INT 1
6401: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6402: LD_EXP 43
6406: PPUSH
6407: LD_STRING D8-FSol1-2a
6409: PPUSH
6410: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6414: LD_EXP 44
6418: PUSH
6419: LD_EXP 43
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PPUSH
6428: LD_INT 21
6430: PPUSH
6431: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6435: LD_EXP 44
6439: PPUSH
6440: LD_STRING D8-Glad-2
6442: PPUSH
6443: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6447: LD_EXP 46
6451: PPUSH
6452: LD_STRING D8-Bur-2
6454: PPUSH
6455: CALL_OW 88
// end ;
6459: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6460: LD_INT 23
6462: PPUSH
6463: CALL_OW 256
6467: PUSH
6468: LD_INT 500
6470: LESS
6471: PUSH
6472: LD_OWVAR 67
6476: PUSH
6477: LD_INT 3
6479: GREATEREQUAL
6480: AND
6481: PUSH
6482: LD_EXP 24
6486: NOT
6487: AND
6488: IFFALSE 6558
6490: GO 6492
6492: DISABLE
// begin amRetreat = true ;
6493: LD_ADDR_EXP 24
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6501: LD_EXP 43
6505: PPUSH
6506: LD_STRING D8-FSol1-2a
6508: PPUSH
6509: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6513: LD_EXP 44
6517: PUSH
6518: LD_EXP 43
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PPUSH
6527: LD_INT 21
6529: PPUSH
6530: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6534: LD_EXP 44
6538: PPUSH
6539: LD_STRING D8-Glad-2
6541: PPUSH
6542: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6546: LD_EXP 46
6550: PPUSH
6551: LD_STRING D8-Bur-2
6553: PPUSH
6554: CALL_OW 88
// end ;
6558: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6559: LD_INT 22
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 21
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 50
6581: PUSH
6582: EMPTY
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PPUSH
6590: CALL_OW 69
6594: PUSH
6595: LD_INT 0
6597: GREATER
6598: IFFALSE 6726
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
// begin enable ;
6606: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_INT 21
6614: PPUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 70
6643: PUSH
6644: FOR_IN
6645: IFFALSE 6724
// begin if unit = Gladstone then
6647: LD_VAR 0 1
6651: PUSH
6652: LD_EXP 44
6656: EQUAL
6657: IFFALSE 6687
// begin gladstoneEscape = true ;
6659: LD_ADDR_EXP 19
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6667: LD_EXP 44
6671: PPUSH
6672: LD_EXP 30
6676: PUSH
6677: LD_STRING Gladstone
6679: STR
6680: PPUSH
6681: CALL_OW 38
// end else
6685: GO 6713
// begin JohannaEscape = true ;
6687: LD_ADDR_EXP 20
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6695: LD_EXP 43
6699: PPUSH
6700: LD_EXP 30
6704: PUSH
6705: LD_STRING Johanna
6707: STR
6708: PPUSH
6709: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 64
// end ;
6722: GO 6644
6724: POP
6725: POP
// end ;
6726: PPOPN 1
6728: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6729: LD_EXP 44
6733: PPUSH
6734: CALL_OW 301
6738: PUSH
6739: LD_EXP 43
6743: PPUSH
6744: CALL_OW 301
6748: AND
6749: IFFALSE 6766
6751: GO 6753
6753: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6754: LD_EXP 46
6758: PPUSH
6759: LD_STRING D9-Bur-1
6761: PPUSH
6762: CALL_OW 88
6766: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6767: LD_EXP 43
6771: PPUSH
6772: CALL_OW 301
6776: PUSH
6777: LD_EXP 19
6781: AND
6782: PUSH
6783: LD_EXP 20
6787: NOT
6788: AND
6789: IFFALSE 6806
6791: GO 6793
6793: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6794: LD_EXP 46
6798: PPUSH
6799: LD_STRING D9-Bur-1a
6801: PPUSH
6802: CALL_OW 88
6806: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6807: LD_EXP 44
6811: PPUSH
6812: CALL_OW 301
6816: PUSH
6817: LD_EXP 19
6821: NOT
6822: AND
6823: PUSH
6824: LD_EXP 20
6828: AND
6829: IFFALSE 6846
6831: GO 6833
6833: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6834: LD_EXP 46
6838: PPUSH
6839: LD_STRING D9-Bur-1b
6841: PPUSH
6842: CALL_OW 88
6846: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6847: LD_EXP 19
6851: PUSH
6852: LD_EXP 20
6856: AND
6857: IFFALSE 6874
6859: GO 6861
6861: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6862: LD_EXP 46
6866: PPUSH
6867: LD_STRING D9-Bur-1c
6869: PPUSH
6870: CALL_OW 88
6874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6875: LD_INT 22
6877: PUSH
6878: LD_INT 1
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 3
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 50
6897: PUSH
6898: EMPTY
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 69
6910: PUSH
6911: LD_INT 0
6913: EQUAL
6914: IFFALSE 7162
6916: GO 6918
6918: DISABLE
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6923: LD_ADDR_VAR 0 1
6927: PUSH
6928: LD_INT 22
6930: PUSH
6931: LD_INT 3
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 50
6950: PUSH
6951: EMPTY
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PPUSH
6959: CALL_OW 69
6963: PUSH
6964: LD_EXP 46
6968: PUSH
6969: LD_EXP 54
6973: PUSH
6974: LD_EXP 51
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: DIFF
6984: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_VAR 0 1
6994: PPUSH
6995: LD_INT 26
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: ST_TO_ADDR
// DialogueOn ;
7010: CALL_OW 6
// if IsOK ( Belkov ) then
7014: LD_EXP 51
7018: PPUSH
7019: CALL_OW 302
7023: IFFALSE 7037
// Say ( Belkov , D10-Bel-1 ) ;
7025: LD_EXP 51
7029: PPUSH
7030: LD_STRING D10-Bel-1
7032: PPUSH
7033: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7037: LD_VAR 0 1
7041: PUSH
7042: LD_INT 0
7044: GREATER
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: LD_INT 0
7053: GREATER
7054: PUSH
7055: LD_EXP 51
7059: PPUSH
7060: CALL_OW 302
7064: OR
7065: AND
7066: IFFALSE 7133
// begin Say ( Burlak , D10-Bur-1 ) ;
7068: LD_EXP 46
7072: PPUSH
7073: LD_STRING D10-Bur-1
7075: PPUSH
7076: CALL_OW 88
// if IsOK ( Belkov ) then
7080: LD_EXP 51
7084: PPUSH
7085: CALL_OW 302
7089: IFFALSE 7105
// Say ( Belkov , D10-Bel-1a ) else
7091: LD_EXP 51
7095: PPUSH
7096: LD_STRING D10-Bel-1a
7098: PPUSH
7099: CALL_OW 88
7103: GO 7121
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7105: LD_VAR 0 2
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_STRING D10-RSol1-1
7116: PPUSH
7117: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7121: LD_EXP 46
7125: PPUSH
7126: LD_STRING D10-Bur-2
7128: PPUSH
7129: CALL_OW 88
// end ; DialogueOff ;
7133: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7137: LD_STRING M4a
7139: PPUSH
7140: CALL_OW 337
// evacuationAvailable = true ;
7144: LD_ADDR_EXP 22
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7152: LD_INT 1
7154: PPUSH
7155: LD_INT 1
7157: PPUSH
7158: CALL_OW 424
// end ;
7162: PPOPN 2
7164: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7165: LD_EXP 22
7169: PUSH
7170: LD_EXP 25
7174: NOT
7175: AND
7176: IFFALSE 7786
7178: GO 7180
7180: DISABLE
7181: LD_INT 0
7183: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7184: LD_EXP 53
7188: PPUSH
7189: LD_INT 22
7191: PPUSH
7192: LD_INT 1
7194: PPUSH
7195: CALL_OW 49
// wait ( 0 0$3 ) ;
7199: LD_INT 105
7201: PPUSH
7202: CALL_OW 67
// jelenaSpawned = true ;
7206: LD_ADDR_EXP 25
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7214: LD_INT 22
7216: PUSH
7217: LD_INT 3
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 21
7226: PUSH
7227: LD_INT 1
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 50
7236: PUSH
7237: EMPTY
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 69
7249: PPUSH
7250: LD_EXP 53
7254: PPUSH
7255: CALL_OW 74
7259: PPUSH
7260: LD_EXP 53
7264: PPUSH
7265: CALL_OW 296
7269: PUSH
7270: LD_INT 9
7272: LESS
7273: IFFALSE 7277
// exit ;
7275: GO 7786
// DialogueOn ;
7277: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7281: LD_EXP 53
7285: PPUSH
7286: LD_STRING D11b-Kir-1
7288: PPUSH
7289: CALL_OW 94
// if IsOK ( Belkov ) then
7293: LD_EXP 51
7297: PPUSH
7298: CALL_OW 302
7302: IFFALSE 7330
// begin Say ( Belkov , D11b-Bel-1 ) ;
7304: LD_EXP 51
7308: PPUSH
7309: LD_STRING D11b-Bel-1
7311: PPUSH
7312: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7316: LD_EXP 51
7320: PPUSH
7321: LD_STRING D11b-Bel-1a
7323: PPUSH
7324: CALL_OW 94
// end else
7328: GO 7385
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7330: LD_ADDR_VAR 0 1
7334: PUSH
7335: LD_INT 22
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 21
7347: PUSH
7348: LD_INT 1
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 50
7357: PUSH
7358: EMPTY
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: PPUSH
7366: CALL_OW 69
7370: PPUSH
7371: LD_STRING D11b-RSol1-1
7373: PPUSH
7374: LD_STRING D11b-RFSol1-1
7376: PPUSH
7377: LD_INT 0
7379: PPUSH
7380: CALL 8163 0 4
7384: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7385: LD_INT 24
7387: PPUSH
7388: LD_INT 22
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 25
7400: PUSH
7401: LD_INT 12
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 70
7416: PUSH
7417: LD_INT 0
7419: GREATER
7420: IFFALSE 7436
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7422: LD_EXP 53
7426: PPUSH
7427: LD_STRING D11b1-Kir-1
7429: PPUSH
7430: CALL_OW 94
7434: GO 7448
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7436: LD_EXP 53
7440: PPUSH
7441: LD_STRING D11b2-Kir-1
7443: PPUSH
7444: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7448: LD_EXP 6
7452: PUSH
7453: LD_INT 24
7455: PPUSH
7456: LD_INT 22
7458: PUSH
7459: LD_INT 0
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 25
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 70
7484: PUSH
7485: LD_INT 0
7487: GREATER
7488: AND
7489: IFFALSE 7624
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7491: LD_EXP 46
7495: PPUSH
7496: LD_STRING D11b1-Bur-1
7498: PPUSH
7499: CALL_OW 88
// if IsOk ( Belkov ) then
7503: LD_EXP 51
7507: PPUSH
7508: CALL_OW 302
7512: IFFALSE 7528
// Say ( Belkov , D11b2-Bel-1 ) else
7514: LD_EXP 51
7518: PPUSH
7519: LD_STRING D11b2-Bel-1
7521: PPUSH
7522: CALL_OW 88
7526: GO 7569
// begin if GetSex ( randomSold ) = sex_male then
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 258
7537: PUSH
7538: LD_INT 1
7540: EQUAL
7541: IFFALSE 7557
// Say ( randomSold , D11b1-RSol1-1 ) else
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_STRING D11b1-RSol1-1
7550: PPUSH
7551: CALL_OW 88
7555: GO 7569
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_STRING D11b1-RFSol1-1
7564: PPUSH
7565: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7569: LD_INT 22
7571: PUSH
7572: LD_INT 1
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 21
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 50
7591: PUSH
7592: EMPTY
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_STRING D11b1-RSol1-1
7607: PPUSH
7608: LD_STRING D11b1-RFSol1-1
7610: PPUSH
7611: LD_INT 0
7613: PPUSH
7614: CALL 8163 0 4
// DialogueOff ;
7618: CALL_OW 7
// exit ;
7622: GO 7786
// end ; if spotWaterfall then
7624: LD_EXP 7
7628: IFFALSE 7714
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7630: LD_EXP 46
7634: PPUSH
7635: LD_STRING D11b1-Bur-1a
7637: PPUSH
7638: CALL_OW 88
// if IsOk ( Belkov ) then
7642: LD_EXP 51
7646: PPUSH
7647: CALL_OW 302
7651: IFFALSE 7667
// Say ( Belkov , D11b2-Bel-1 ) else
7653: LD_EXP 51
7657: PPUSH
7658: LD_STRING D11b2-Bel-1
7660: PPUSH
7661: CALL_OW 88
7665: GO 7708
// begin if GetSex ( randomSold ) = sex_male then
7667: LD_VAR 0 1
7671: PPUSH
7672: CALL_OW 258
7676: PUSH
7677: LD_INT 1
7679: EQUAL
7680: IFFALSE 7696
// Say ( randomSold , D11b1-RSol1-1 ) else
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_STRING D11b1-RSol1-1
7689: PPUSH
7690: CALL_OW 88
7694: GO 7708
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_STRING D11b1-RFSol1-1
7703: PPUSH
7704: CALL_OW 88
// end ; DialogueOff ;
7708: CALL_OW 7
// exit ;
7712: GO 7786
// end ; if IsOk ( Belkov ) then
7714: LD_EXP 51
7718: PPUSH
7719: CALL_OW 302
7723: IFFALSE 7739
// Say ( Belkov , D11b1-Bel-1 ) else
7725: LD_EXP 51
7729: PPUSH
7730: LD_STRING D11b1-Bel-1
7732: PPUSH
7733: CALL_OW 88
7737: GO 7780
// begin if GetSex ( randomSold ) = sex_male then
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 258
7748: PUSH
7749: LD_INT 1
7751: EQUAL
7752: IFFALSE 7768
// Say ( randomSold , D11b1-RSol1-1 ) else
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_STRING D11b1-RSol1-1
7761: PPUSH
7762: CALL_OW 88
7766: GO 7780
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_STRING D11b1-RFSol1-1
7775: PPUSH
7776: CALL_OW 88
// end ; DialogueOff ;
7780: CALL_OW 7
// exit ;
7784: GO 7786
// end ;
7786: PPOPN 1
7788: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7789: LD_INT 3
7791: PPUSH
7792: LD_EXP 53
7796: PPUSH
7797: CALL_OW 292
7801: PUSH
7802: LD_EXP 25
7806: AND
7807: IFFALSE 8043
7809: GO 7811
7811: DISABLE
7812: LD_INT 0
7814: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7815: LD_EXP 53
7819: PPUSH
7820: LD_INT 3
7822: PPUSH
7823: CALL_OW 235
// jelenaSaved = true ;
7827: LD_ADDR_EXP 21
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7835: LD_EXP 53
7839: PPUSH
7840: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7844: LD_ADDR_VAR 0 1
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 1
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 50
7871: PUSH
7872: EMPTY
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: PUSH
7885: LD_EXP 53
7889: DIFF
7890: PPUSH
7891: LD_EXP 53
7895: PPUSH
7896: CALL_OW 74
7900: ST_TO_ADDR
// DialogueOn ;
7901: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7905: LD_EXP 53
7909: PPUSH
7910: LD_STRING D11a-Kir-1
7912: PPUSH
7913: CALL_OW 88
// if nearUnit = Belkov then
7917: LD_VAR 0 1
7921: PUSH
7922: LD_EXP 51
7926: EQUAL
7927: IFFALSE 7967
// begin Say ( Belkov , D11a-Bel-1 ) ;
7929: LD_EXP 51
7933: PPUSH
7934: LD_STRING D11a-Bel-1
7936: PPUSH
7937: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7941: LD_EXP 53
7945: PPUSH
7946: LD_STRING D11a-Kir-2
7948: PPUSH
7949: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7953: LD_EXP 51
7957: PPUSH
7958: LD_STRING D11a-Bel-2
7960: PPUSH
7961: CALL_OW 88
// end else
7965: GO 8008
// begin if GetSex ( nearUnit ) = sex_male then
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 258
7976: PUSH
7977: LD_INT 1
7979: EQUAL
7980: IFFALSE 7996
// Say ( nearUnit , D11a-RSol1-2 ) else
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_STRING D11a-RSol1-2
7989: PPUSH
7990: CALL_OW 88
7994: GO 8008
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7996: LD_VAR 0 1
8000: PPUSH
8001: LD_STRING D11a-RFSol1-2
8003: PPUSH
8004: CALL_OW 88
// end ; DialogueOff ;
8008: CALL_OW 7
// wait ( 0 0$5 ) ;
8012: LD_INT 175
8014: PPUSH
8015: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8019: LD_EXP 53
8023: PPUSH
8024: LD_STRING D11c-Kir-1
8026: PPUSH
8027: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8031: LD_EXP 46
8035: PPUSH
8036: LD_STRING D11c-Bur-1
8038: PPUSH
8039: CALL_OW 88
// end ;
8043: PPOPN 1
8045: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8046: LD_EXP 22
8050: PUSH
8051: LD_INT 1
8053: PPUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 1
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PPUSH
8078: CALL_OW 70
8082: PUSH
8083: LD_INT 0
8085: GREATER
8086: AND
8087: IFFALSE 8099
8089: GO 8091
8091: DISABLE
// begin Query ( QExit1 ) ;
8092: LD_STRING QExit1
8094: PPUSH
8095: CALL_OW 97
// end ; end_of_file
8099: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8100: LD_INT 0
8102: PPUSH
8103: PPUSH
// if exist_mode then
8104: LD_VAR 0 2
8108: IFFALSE 8133
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8110: LD_ADDR_VAR 0 4
8114: PUSH
8115: LD_EXP 31
8119: PUSH
8120: LD_VAR 0 1
8124: STR
8125: PPUSH
8126: CALL_OW 34
8130: ST_TO_ADDR
8131: GO 8148
// unit := NewCharacter ( ident ) ;
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 25
8147: ST_TO_ADDR
// result := unit ;
8148: LD_ADDR_VAR 0 3
8152: PUSH
8153: LD_VAR 0 4
8157: ST_TO_ADDR
// end ;
8158: LD_VAR 0 3
8162: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8163: LD_INT 0
8165: PPUSH
8166: PPUSH
8167: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8168: LD_ADDR_VAR 0 1
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_EXP 46
8182: PUSH
8183: LD_EXP 54
8187: PUSH
8188: LD_EXP 51
8192: PUSH
8193: LD_EXP 53
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: DIFF
8204: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8205: LD_ADDR_VAR 0 7
8209: PUSH
8210: LD_VAR 0 1
8214: PUSH
8215: LD_INT 1
8217: PPUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 12
8227: ARRAY
8228: ST_TO_ADDR
// if radio then
8229: LD_VAR 0 4
8233: IFFALSE 8282
// begin if GetSex ( speaker ) = sex_male then
8235: LD_VAR 0 7
8239: PPUSH
8240: CALL_OW 258
8244: PUSH
8245: LD_INT 1
8247: EQUAL
8248: IFFALSE 8266
// SayRadio ( speaker , dialogMID ) else
8250: LD_VAR 0 7
8254: PPUSH
8255: LD_VAR 0 2
8259: PPUSH
8260: CALL_OW 94
8264: GO 8280
// SayRadio ( speaker , dialogFID ) ;
8266: LD_VAR 0 7
8270: PPUSH
8271: LD_VAR 0 3
8275: PPUSH
8276: CALL_OW 94
// end else
8280: GO 8327
// begin if GetSex ( speaker ) = sex_male then
8282: LD_VAR 0 7
8286: PPUSH
8287: CALL_OW 258
8291: PUSH
8292: LD_INT 1
8294: EQUAL
8295: IFFALSE 8313
// Say ( speaker , dialogMID ) else
8297: LD_VAR 0 7
8301: PPUSH
8302: LD_VAR 0 2
8306: PPUSH
8307: CALL_OW 88
8311: GO 8327
// Say ( speaker , dialogFID ) ;
8313: LD_VAR 0 7
8317: PPUSH
8318: LD_VAR 0 3
8322: PPUSH
8323: CALL_OW 88
// end ; result := speaker ;
8327: LD_ADDR_VAR 0 5
8331: PUSH
8332: LD_VAR 0 7
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 5
8341: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8342: LD_INT 0
8344: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 255
8354: PUSH
8355: LD_OWVAR 2
8359: EQUAL
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 302
8370: AND
8371: IFFALSE 8393
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 2
8387: STR
8388: PPUSH
8389: CALL_OW 38
// end ;
8393: LD_VAR 0 3
8397: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8398: LD_INT 0
8400: PPUSH
8401: PPUSH
8402: PPUSH
// resultCharactersToSave = [ ] ;
8403: LD_ADDR_VAR 0 5
8407: PUSH
8408: EMPTY
8409: ST_TO_ADDR
// for unit in characters do
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_VAR 0 1
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8469
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8423: LD_VAR 0 4
8427: PPUSH
8428: CALL_OW 255
8432: PUSH
8433: LD_OWVAR 2
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 4
8443: PPUSH
8444: CALL_OW 302
8448: AND
8449: IFFALSE 8467
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: LD_VAR 0 5
8460: PUSH
8461: LD_VAR 0 4
8465: ADD
8466: ST_TO_ADDR
8467: GO 8420
8469: POP
8470: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_EXP 30
8480: PUSH
8481: LD_VAR 0 2
8485: STR
8486: PPUSH
8487: CALL_OW 38
// end ;
8491: LD_VAR 0 3
8495: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
8506: PPUSH
8507: PPUSH
8508: PPUSH
8509: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 302
8519: NOT
8520: PUSH
8521: LD_VAR 0 4
8525: PUSH
8526: LD_INT 1
8528: EQUAL
8529: OR
8530: PUSH
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_VAR 0 3
8540: PPUSH
8541: CALL_OW 488
8545: NOT
8546: OR
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: CALL_OW 297
8567: PUSH
8568: LD_VAR 0 4
8572: GREATEREQUAL
8573: OR
8574: PUSH
8575: LD_VAR 0 5
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: LD_INT 0
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: IN
8590: NOT
8591: OR
8592: IFFALSE 8596
// exit ;
8594: GO 10153
// attempts = 0 ;
8596: LD_ADDR_VAR 0 17
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8604: LD_ADDR_VAR 0 7
8608: PUSH
8609: EMPTY
8610: ST_TO_ADDR
// list_coords = [ ] ;
8611: LD_ADDR_VAR 0 8
8615: PUSH
8616: EMPTY
8617: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8618: LD_ADDR_VAR 0 9
8622: PUSH
8623: LD_VAR 0 2
8627: PPUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 250
8642: PPUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 251
8652: PPUSH
8653: CALL 10158 0 4
8657: ST_TO_ADDR
// if attempts = 0 then
8658: LD_VAR 0 17
8662: PUSH
8663: LD_INT 0
8665: EQUAL
8666: IFFALSE 8774
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8668: LD_ADDR_VAR 0 10
8672: PUSH
8673: LD_VAR 0 9
8677: PUSH
8678: LD_VAR 0 9
8682: PUSH
8683: LD_INT 1
8685: PLUS
8686: PUSH
8687: LD_VAR 0 9
8691: PUSH
8692: LD_INT 1
8694: MINUS
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8701: LD_VAR 0 10
8705: PUSH
8706: LD_INT 2
8708: ARRAY
8709: PUSH
8710: LD_INT 6
8712: EQUAL
8713: IFFALSE 8736
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8715: LD_ADDR_VAR 0 10
8719: PUSH
8720: LD_VAR 0 10
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: LD_INT 0
8730: PPUSH
8731: CALL_OW 1
8735: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8736: LD_VAR 0 10
8740: PUSH
8741: LD_INT 3
8743: ARRAY
8744: PUSH
8745: LD_INT 1
8747: NEG
8748: EQUAL
8749: IFFALSE 8772
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8751: LD_ADDR_VAR 0 10
8755: PUSH
8756: LD_VAR 0 10
8760: PPUSH
8761: LD_INT 3
8763: PPUSH
8764: LD_INT 5
8766: PPUSH
8767: CALL_OW 1
8771: ST_TO_ADDR
// end else
8772: GO 8811
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8774: LD_ADDR_VAR 0 10
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: LD_INT 5
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: PUSH
8805: LD_VAR 0 9
8809: DIFF
8810: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8811: LD_ADDR_VAR 0 14
8815: PUSH
8816: DOUBLE
8817: LD_INT 1
8819: DEC
8820: ST_TO_ADDR
8821: LD_VAR 0 10
8825: PUSH
8826: LD_INT 0
8828: PLUS
8829: PUSH
8830: FOR_TO
8831: IFFALSE 9153
// case dir_list [ c ] of 0 :
8833: LD_VAR 0 10
8837: PUSH
8838: LD_VAR 0 14
8842: ARRAY
8843: PUSH
8844: LD_INT 0
8846: DOUBLE
8847: EQUAL
8848: IFTRUE 8852
8850: GO 8893
8852: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: LD_VAR 0 8
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: LD_VAR 0 2
8870: PUSH
8871: LD_VAR 0 3
8875: PUSH
8876: LD_VAR 0 4
8880: MINUS
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 2
8890: ST_TO_ADDR
8891: GO 9151
8893: LD_INT 1
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8942
8901: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8902: LD_ADDR_VAR 0 8
8906: PUSH
8907: LD_VAR 0 8
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 2
8919: PUSH
8920: LD_VAR 0 4
8924: PLUS
8925: PUSH
8926: LD_VAR 0 3
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 2
8939: ST_TO_ADDR
8940: GO 9151
8942: LD_INT 2
8944: DOUBLE
8945: EQUAL
8946: IFTRUE 8950
8948: GO 8997
8950: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8951: LD_ADDR_VAR 0 8
8955: PUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 2
8968: PUSH
8969: LD_VAR 0 4
8973: PLUS
8974: PUSH
8975: LD_VAR 0 3
8979: PUSH
8980: LD_VAR 0 4
8984: PLUS
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 2
8994: ST_TO_ADDR
8995: GO 9151
8997: LD_INT 3
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9046
9005: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9006: LD_ADDR_VAR 0 8
9010: PUSH
9011: LD_VAR 0 8
9015: PPUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_VAR 0 2
9023: PUSH
9024: LD_VAR 0 3
9028: PUSH
9029: LD_VAR 0 4
9033: PLUS
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PPUSH
9039: CALL_OW 2
9043: ST_TO_ADDR
9044: GO 9151
9046: LD_INT 4
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9095
9054: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9055: LD_ADDR_VAR 0 8
9059: PUSH
9060: LD_VAR 0 8
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: LD_VAR 0 2
9072: PUSH
9073: LD_VAR 0 4
9077: MINUS
9078: PUSH
9079: LD_VAR 0 3
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 2
9092: ST_TO_ADDR
9093: GO 9151
9095: LD_INT 5
9097: DOUBLE
9098: EQUAL
9099: IFTRUE 9103
9101: GO 9150
9103: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9104: LD_ADDR_VAR 0 8
9108: PUSH
9109: LD_VAR 0 8
9113: PPUSH
9114: LD_INT 1
9116: PPUSH
9117: LD_VAR 0 2
9121: PUSH
9122: LD_VAR 0 4
9126: MINUS
9127: PUSH
9128: LD_VAR 0 3
9132: PUSH
9133: LD_VAR 0 4
9137: MINUS
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 2
9147: ST_TO_ADDR
9148: GO 9151
9150: POP
9151: GO 8830
9153: POP
9154: POP
// if dist < 30 then
9155: LD_VAR 0 4
9159: PUSH
9160: LD_INT 30
9162: LESS
9163: IFFALSE 9175
// c = 1 else
9165: LD_ADDR_VAR 0 14
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
9173: GO 9183
// c = 2 ;
9175: LD_ADDR_VAR 0 14
9179: PUSH
9180: LD_INT 2
9182: ST_TO_ADDR
// b = 1 ;
9183: LD_ADDR_VAR 0 11
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9191: LD_VAR 0 11
9195: PUSH
9196: LD_VAR 0 4
9200: PUSH
9201: LD_INT 1
9203: MINUS
9204: LESSEQUAL
9205: IFFALSE 9633
// begin if 0 in dir_list and 1 in dir_list then
9207: LD_INT 0
9209: PUSH
9210: LD_VAR 0 10
9214: IN
9215: PUSH
9216: LD_INT 1
9218: PUSH
9219: LD_VAR 0 10
9223: IN
9224: AND
9225: IFFALSE 9277
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9227: LD_ADDR_VAR 0 8
9231: PUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_VAR 0 2
9244: PUSH
9245: LD_VAR 0 11
9249: PLUS
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 4
9260: MINUS
9261: PUSH
9262: LD_VAR 0 11
9266: PLUS
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 2
9276: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9277: LD_INT 1
9279: PUSH
9280: LD_VAR 0 10
9284: IN
9285: PUSH
9286: LD_INT 2
9288: PUSH
9289: LD_VAR 0 10
9293: IN
9294: AND
9295: IFFALSE 9341
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9297: LD_ADDR_VAR 0 8
9301: PUSH
9302: LD_VAR 0 8
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 2
9314: PUSH
9315: LD_VAR 0 4
9319: PLUS
9320: PUSH
9321: LD_VAR 0 3
9325: PUSH
9326: LD_VAR 0 11
9330: PLUS
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 2
9340: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9341: LD_INT 2
9343: PUSH
9344: LD_VAR 0 10
9348: IN
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_VAR 0 10
9357: IN
9358: AND
9359: IFFALSE 9411
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9361: LD_ADDR_VAR 0 8
9365: PUSH
9366: LD_VAR 0 8
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_VAR 0 4
9383: PLUS
9384: PUSH
9385: LD_VAR 0 11
9389: MINUS
9390: PUSH
9391: LD_VAR 0 3
9395: PUSH
9396: LD_VAR 0 4
9400: PLUS
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 2
9410: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9411: LD_INT 3
9413: PUSH
9414: LD_VAR 0 10
9418: IN
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_VAR 0 10
9427: IN
9428: AND
9429: IFFALSE 9481
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9431: LD_ADDR_VAR 0 8
9435: PUSH
9436: LD_VAR 0 8
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: LD_VAR 0 2
9448: PUSH
9449: LD_VAR 0 11
9453: MINUS
9454: PUSH
9455: LD_VAR 0 3
9459: PUSH
9460: LD_VAR 0 4
9464: PLUS
9465: PUSH
9466: LD_VAR 0 11
9470: MINUS
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PPUSH
9476: CALL_OW 2
9480: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9481: LD_INT 4
9483: PUSH
9484: LD_VAR 0 10
9488: IN
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_VAR 0 10
9497: IN
9498: AND
9499: IFFALSE 9545
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9501: LD_ADDR_VAR 0 8
9505: PUSH
9506: LD_VAR 0 8
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_VAR 0 4
9523: MINUS
9524: PUSH
9525: LD_VAR 0 3
9529: PUSH
9530: LD_VAR 0 11
9534: MINUS
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 2
9544: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9545: LD_INT 5
9547: PUSH
9548: LD_VAR 0 10
9552: IN
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_VAR 0 10
9561: IN
9562: AND
9563: IFFALSE 9615
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9565: LD_ADDR_VAR 0 8
9569: PUSH
9570: LD_VAR 0 8
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_VAR 0 4
9587: MINUS
9588: PUSH
9589: LD_VAR 0 11
9593: PLUS
9594: PUSH
9595: LD_VAR 0 3
9599: PUSH
9600: LD_VAR 0 4
9604: MINUS
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PPUSH
9610: CALL_OW 2
9614: ST_TO_ADDR
// b = b + c end ;
9615: LD_ADDR_VAR 0 11
9619: PUSH
9620: LD_VAR 0 11
9624: PUSH
9625: LD_VAR 0 14
9629: PLUS
9630: ST_TO_ADDR
9631: GO 9191
// if list_coords = 0 then
9633: LD_VAR 0 8
9637: PUSH
9638: LD_INT 0
9640: EQUAL
9641: IFFALSE 9645
// exit ;
9643: GO 10153
// repeat min_dist = 5000 ;
9645: LD_ADDR_VAR 0 12
9649: PUSH
9650: LD_INT 5000
9652: ST_TO_ADDR
// for b in list_coords do
9653: LD_ADDR_VAR 0 11
9657: PUSH
9658: LD_VAR 0 8
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9723
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9666: LD_ADDR_VAR 0 13
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_VAR 0 11
9680: PUSH
9681: LD_INT 1
9683: ARRAY
9684: PPUSH
9685: LD_VAR 0 11
9689: PUSH
9690: LD_INT 2
9692: ARRAY
9693: PPUSH
9694: CALL_OW 297
9698: ST_TO_ADDR
// if temp_dist < min_dist then
9699: LD_VAR 0 13
9703: PUSH
9704: LD_VAR 0 12
9708: LESS
9709: IFFALSE 9721
// min_dist = temp_dist ;
9711: LD_ADDR_VAR 0 12
9715: PUSH
9716: LD_VAR 0 13
9720: ST_TO_ADDR
// end ;
9721: GO 9663
9723: POP
9724: POP
// c = 0 ;
9725: LD_ADDR_VAR 0 14
9729: PUSH
9730: LD_INT 0
9732: ST_TO_ADDR
// repeat c = c + 1 ;
9733: LD_ADDR_VAR 0 14
9737: PUSH
9738: LD_VAR 0 14
9742: PUSH
9743: LD_INT 1
9745: PLUS
9746: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_VAR 0 8
9756: PUSH
9757: LD_VAR 0 14
9761: ARRAY
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PPUSH
9767: LD_VAR 0 8
9771: PUSH
9772: LD_VAR 0 14
9776: ARRAY
9777: PUSH
9778: LD_INT 2
9780: ARRAY
9781: PPUSH
9782: CALL_OW 297
9786: PUSH
9787: LD_VAR 0 12
9791: EQUAL
9792: IFFALSE 9857
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_VAR 0 7
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: LD_VAR 0 8
9811: PUSH
9812: LD_VAR 0 14
9816: ARRAY
9817: PPUSH
9818: CALL_OW 2
9822: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9823: LD_ADDR_VAR 0 8
9827: PUSH
9828: LD_VAR 0 8
9832: PPUSH
9833: LD_VAR 0 14
9837: PPUSH
9838: CALL_OW 3
9842: ST_TO_ADDR
// c = c - 1 ;
9843: LD_ADDR_VAR 0 14
9847: PUSH
9848: LD_VAR 0 14
9852: PUSH
9853: LD_INT 1
9855: MINUS
9856: ST_TO_ADDR
// end ; until c = list_coords ;
9857: LD_VAR 0 14
9861: PUSH
9862: LD_VAR 0 8
9866: EQUAL
9867: IFFALSE 9733
// c = 0 ;
9869: LD_ADDR_VAR 0 14
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// if list_nearest > 0 then
9877: LD_VAR 0 7
9881: PUSH
9882: LD_INT 0
9884: GREATER
9885: IFFALSE 10027
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9887: LD_ADDR_VAR 0 15
9891: PUSH
9892: LD_INT 1
9894: PPUSH
9895: LD_VAR 0 7
9899: PPUSH
9900: CALL_OW 12
9904: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9905: LD_ADDR_VAR 0 16
9909: PUSH
9910: LD_VAR 0 7
9914: PUSH
9915: LD_VAR 0 15
9919: ARRAY
9920: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9921: LD_VAR 0 16
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: LD_VAR 0 16
9934: PUSH
9935: LD_INT 2
9937: ARRAY
9938: PPUSH
9939: CALL_OW 488
9943: PUSH
9944: LD_INT 0
9946: GREATER
9947: PUSH
9948: LD_VAR 0 16
9952: PUSH
9953: LD_INT 1
9955: ARRAY
9956: PPUSH
9957: LD_VAR 0 16
9961: PUSH
9962: LD_INT 2
9964: ARRAY
9965: PPUSH
9966: CALL_OW 428
9970: PUSH
9971: LD_INT 0
9973: EQUAL
9974: AND
9975: IFFALSE 9987
// c = 1 else
9977: LD_ADDR_VAR 0 14
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
9985: GO 10007
// list_nearest = Delete ( list_nearest , rand_num ) ;
9987: LD_ADDR_VAR 0 7
9991: PUSH
9992: LD_VAR 0 7
9996: PPUSH
9997: LD_VAR 0 15
10001: PPUSH
10002: CALL_OW 3
10006: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10007: LD_VAR 0 14
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_VAR 0 7
10020: PUSH
10021: LD_INT 0
10023: EQUAL
10024: OR
10025: IFFALSE 9887
// end ; until c = 1 or list_coords = 0 ;
10027: LD_VAR 0 14
10031: PUSH
10032: LD_INT 1
10034: EQUAL
10035: PUSH
10036: LD_VAR 0 8
10040: PUSH
10041: LD_INT 0
10043: EQUAL
10044: OR
10045: IFFALSE 9645
// attempts = attempts + 1 ;
10047: LD_ADDR_VAR 0 17
10051: PUSH
10052: LD_VAR 0 17
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10061: LD_VAR 0 14
10065: PUSH
10066: LD_INT 1
10068: EQUAL
10069: PUSH
10070: LD_VAR 0 17
10074: PUSH
10075: LD_INT 1
10077: GREATER
10078: OR
10079: IFFALSE 8604
// if c = 1 then
10081: LD_VAR 0 14
10085: PUSH
10086: LD_INT 1
10088: EQUAL
10089: IFFALSE 10153
// if add then
10091: LD_VAR 0 5
10095: IFFALSE 10126
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10097: LD_VAR 0 1
10101: PPUSH
10102: LD_VAR 0 16
10106: PUSH
10107: LD_INT 1
10109: ARRAY
10110: PPUSH
10111: LD_VAR 0 16
10115: PUSH
10116: LD_INT 2
10118: ARRAY
10119: PPUSH
10120: CALL_OW 171
10124: GO 10153
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10126: LD_VAR 0 1
10130: PPUSH
10131: LD_VAR 0 16
10135: PUSH
10136: LD_INT 1
10138: ARRAY
10139: PPUSH
10140: LD_VAR 0 16
10144: PUSH
10145: LD_INT 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 111
// end ;
10153: LD_VAR 0 6
10157: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
10165: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 2
10175: PPUSH
10176: CALL_OW 488
10180: NOT
10181: PUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_VAR 0 4
10191: PPUSH
10192: CALL_OW 488
10196: NOT
10197: OR
10198: IFFALSE 10211
// begin result = - 1 ;
10200: LD_ADDR_VAR 0 5
10204: PUSH
10205: LD_INT 1
10207: NEG
10208: ST_TO_ADDR
// exit ;
10209: GO 10371
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10211: LD_ADDR_VAR 0 6
10215: PUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: LD_VAR 0 2
10225: PPUSH
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_VAR 0 4
10235: PPUSH
10236: CALL_OW 298
10240: ST_TO_ADDR
// dist_2 = 99999 ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_INT 99999
10248: ST_TO_ADDR
// for b = 0 to 5 do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 0
10257: DEC
10258: ST_TO_ADDR
10259: LD_INT 5
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10359
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10265: LD_ADDR_VAR 0 9
10269: PUSH
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_VAR 0 8
10279: PPUSH
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 272
10289: PPUSH
10290: LD_VAR 0 2
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: LD_VAR 0 6
10304: PPUSH
10305: CALL_OW 273
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_VAR 0 4
10319: PPUSH
10320: CALL_OW 298
10324: ST_TO_ADDR
// if temp_dist < dist_2 then
10325: LD_VAR 0 9
10329: PUSH
10330: LD_VAR 0 7
10334: LESS
10335: IFFALSE 10357
// begin dist_2 = temp_dist ;
10337: LD_ADDR_VAR 0 7
10341: PUSH
10342: LD_VAR 0 9
10346: ST_TO_ADDR
// dir = b ;
10347: LD_ADDR_VAR 0 10
10351: PUSH
10352: LD_VAR 0 8
10356: ST_TO_ADDR
// end ; end ;
10357: GO 10262
10359: POP
10360: POP
// result = dir ;
10361: LD_ADDR_VAR 0 5
10365: PUSH
10366: LD_VAR 0 10
10370: ST_TO_ADDR
// end ;
10371: LD_VAR 0 5
10375: RET
// export function MoveToHill ; begin
10376: LD_INT 0
10378: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_INT 65
10386: PPUSH
10387: LD_INT 59
10389: PPUSH
10390: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10394: LD_EXP 47
10398: PPUSH
10399: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10403: LD_EXP 48
10407: PPUSH
10408: LD_INT 65
10410: PPUSH
10411: LD_INT 58
10413: PPUSH
10414: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10418: LD_EXP 48
10422: PPUSH
10423: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10427: LD_EXP 49
10431: PPUSH
10432: LD_INT 64
10434: PPUSH
10435: LD_INT 57
10437: PPUSH
10438: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10442: LD_EXP 49
10446: PPUSH
10447: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10451: LD_EXP 50
10455: PPUSH
10456: LD_INT 64
10458: PPUSH
10459: LD_INT 56
10461: PPUSH
10462: CALL_OW 111
// AddComCrawl ( Balei ) ;
10466: LD_EXP 50
10470: PPUSH
10471: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10475: LD_EXP 51
10479: PPUSH
10480: LD_INT 63
10482: PPUSH
10483: LD_INT 55
10485: PPUSH
10486: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10490: LD_EXP 51
10494: PPUSH
10495: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10499: LD_EXP 52
10503: PPUSH
10504: LD_INT 66
10506: PPUSH
10507: LD_INT 58
10509: PPUSH
10510: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10514: LD_EXP 52
10518: PPUSH
10519: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10523: LD_EXP 54
10527: PPUSH
10528: CALL_OW 255
10532: PUSH
10533: LD_INT 6
10535: EQUAL
10536: PUSH
10537: LD_EXP 12
10541: AND
10542: IFFALSE 10568
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10544: LD_EXP 54
10548: PPUSH
10549: LD_INT 63
10551: PPUSH
10552: LD_INT 54
10554: PPUSH
10555: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10559: LD_EXP 54
10563: PPUSH
10564: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10568: LD_EXP 47
10572: PPUSH
10573: LD_INT 65
10575: PPUSH
10576: LD_INT 59
10578: PPUSH
10579: CALL_OW 297
10583: PUSH
10584: LD_INT 7
10586: LESS
10587: IFFALSE 10613
// begin ComCrawl ( Pokryshkin ) ;
10589: LD_EXP 47
10593: PPUSH
10594: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10598: LD_EXP 47
10602: PPUSH
10603: LD_INT 65
10605: PPUSH
10606: LD_INT 59
10608: PPUSH
10609: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10613: LD_EXP 48
10617: PPUSH
10618: LD_INT 65
10620: PPUSH
10621: LD_INT 58
10623: PPUSH
10624: CALL_OW 297
10628: PUSH
10629: LD_INT 7
10631: LESS
10632: IFFALSE 10658
// begin ComCrawl ( Saseda ) ;
10634: LD_EXP 48
10638: PPUSH
10639: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10643: LD_EXP 48
10647: PPUSH
10648: LD_INT 65
10650: PPUSH
10651: LD_INT 58
10653: PPUSH
10654: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10658: LD_EXP 49
10662: PPUSH
10663: LD_INT 64
10665: PPUSH
10666: LD_INT 57
10668: PPUSH
10669: CALL_OW 297
10673: PUSH
10674: LD_INT 7
10676: LESS
10677: IFFALSE 10703
// begin ComCrawl ( Jaworska ) ;
10679: LD_EXP 49
10683: PPUSH
10684: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10688: LD_EXP 49
10692: PPUSH
10693: LD_INT 64
10695: PPUSH
10696: LD_INT 57
10698: PPUSH
10699: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10703: LD_EXP 50
10707: PPUSH
10708: LD_INT 64
10710: PPUSH
10711: LD_INT 56
10713: PPUSH
10714: CALL_OW 297
10718: PUSH
10719: LD_INT 7
10721: LESS
10722: IFFALSE 10748
// begin ComCrawl ( Balei ) ;
10724: LD_EXP 50
10728: PPUSH
10729: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10733: LD_EXP 50
10737: PPUSH
10738: LD_INT 64
10740: PPUSH
10741: LD_INT 56
10743: PPUSH
10744: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10748: LD_EXP 51
10752: PPUSH
10753: LD_INT 63
10755: PPUSH
10756: LD_INT 55
10758: PPUSH
10759: CALL_OW 297
10763: PUSH
10764: LD_INT 7
10766: LESS
10767: IFFALSE 10793
// begin ComCrawl ( Belkov ) ;
10769: LD_EXP 51
10773: PPUSH
10774: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10778: LD_EXP 51
10782: PPUSH
10783: LD_INT 63
10785: PPUSH
10786: LD_INT 55
10788: PPUSH
10789: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10793: LD_EXP 52
10797: PPUSH
10798: LD_INT 66
10800: PPUSH
10801: LD_INT 58
10803: PPUSH
10804: CALL_OW 297
10808: PUSH
10809: LD_INT 7
10811: LESS
10812: IFFALSE 10838
// begin ComCrawl ( Jaunzeme ) ;
10814: LD_EXP 52
10818: PPUSH
10819: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10823: LD_EXP 52
10827: PPUSH
10828: LD_INT 66
10830: PPUSH
10831: LD_INT 58
10833: PPUSH
10834: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10838: LD_EXP 54
10842: PPUSH
10843: LD_INT 63
10845: PPUSH
10846: LD_INT 54
10848: PPUSH
10849: CALL_OW 297
10853: PUSH
10854: LD_INT 7
10856: LESS
10857: PUSH
10858: LD_EXP 54
10862: PPUSH
10863: CALL_OW 255
10867: PUSH
10868: LD_INT 6
10870: EQUAL
10871: AND
10872: PUSH
10873: LD_EXP 12
10877: AND
10878: IFFALSE 10904
// begin ComCrawl ( Gnyevko ) ;
10880: LD_EXP 54
10884: PPUSH
10885: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10889: LD_EXP 54
10893: PPUSH
10894: LD_INT 63
10896: PPUSH
10897: LD_INT 54
10899: PPUSH
10900: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10904: LD_INT 35
10906: PPUSH
10907: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10911: LD_EXP 42
10915: PPUSH
10916: CALL_OW 303
10920: PUSH
10921: LD_EXP 42
10925: PPUSH
10926: CALL_OW 301
10930: OR
10931: IFFALSE 10568
// end ;
10933: LD_VAR 0 1
10937: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10938: LD_EXP 42
10942: PPUSH
10943: CALL_OW 303
10947: NOT
10948: PUSH
10949: LD_EXP 42
10953: PPUSH
10954: CALL_OW 301
10958: NOT
10959: OR
10960: PUSH
10961: LD_EXP 15
10965: AND
10966: IFFALSE 11308
10968: GO 10970
10970: DISABLE
// begin enable ;
10971: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10972: LD_EXP 47
10976: PPUSH
10977: LD_INT 65
10979: PPUSH
10980: LD_INT 59
10982: PPUSH
10983: CALL_OW 297
10987: PUSH
10988: LD_INT 7
10990: LESS
10991: IFFALSE 11017
// begin ComCrawl ( Pokryshkin ) ;
10993: LD_EXP 47
10997: PPUSH
10998: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11002: LD_EXP 47
11006: PPUSH
11007: LD_INT 65
11009: PPUSH
11010: LD_INT 59
11012: PPUSH
11013: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11017: LD_EXP 48
11021: PPUSH
11022: LD_INT 65
11024: PPUSH
11025: LD_INT 58
11027: PPUSH
11028: CALL_OW 297
11032: PUSH
11033: LD_INT 7
11035: LESS
11036: IFFALSE 11062
// begin ComCrawl ( Saseda ) ;
11038: LD_EXP 48
11042: PPUSH
11043: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11047: LD_EXP 48
11051: PPUSH
11052: LD_INT 65
11054: PPUSH
11055: LD_INT 58
11057: PPUSH
11058: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11062: LD_EXP 49
11066: PPUSH
11067: LD_INT 64
11069: PPUSH
11070: LD_INT 57
11072: PPUSH
11073: CALL_OW 297
11077: PUSH
11078: LD_INT 7
11080: LESS
11081: IFFALSE 11107
// begin ComCrawl ( Jaworska ) ;
11083: LD_EXP 49
11087: PPUSH
11088: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11092: LD_EXP 49
11096: PPUSH
11097: LD_INT 64
11099: PPUSH
11100: LD_INT 57
11102: PPUSH
11103: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11107: LD_EXP 50
11111: PPUSH
11112: LD_INT 64
11114: PPUSH
11115: LD_INT 56
11117: PPUSH
11118: CALL_OW 297
11122: PUSH
11123: LD_INT 7
11125: LESS
11126: IFFALSE 11152
// begin ComCrawl ( Balei ) ;
11128: LD_EXP 50
11132: PPUSH
11133: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11137: LD_EXP 50
11141: PPUSH
11142: LD_INT 64
11144: PPUSH
11145: LD_INT 56
11147: PPUSH
11148: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11152: LD_EXP 51
11156: PPUSH
11157: LD_INT 63
11159: PPUSH
11160: LD_INT 55
11162: PPUSH
11163: CALL_OW 297
11167: PUSH
11168: LD_INT 7
11170: LESS
11171: IFFALSE 11197
// begin ComCrawl ( Belkov ) ;
11173: LD_EXP 51
11177: PPUSH
11178: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11182: LD_EXP 51
11186: PPUSH
11187: LD_INT 63
11189: PPUSH
11190: LD_INT 55
11192: PPUSH
11193: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11197: LD_EXP 52
11201: PPUSH
11202: LD_INT 66
11204: PPUSH
11205: LD_INT 58
11207: PPUSH
11208: CALL_OW 297
11212: PUSH
11213: LD_INT 7
11215: LESS
11216: IFFALSE 11242
// begin ComCrawl ( Jaunzeme ) ;
11218: LD_EXP 52
11222: PPUSH
11223: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11227: LD_EXP 52
11231: PPUSH
11232: LD_INT 66
11234: PPUSH
11235: LD_INT 58
11237: PPUSH
11238: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11242: LD_EXP 54
11246: PPUSH
11247: LD_INT 63
11249: PPUSH
11250: LD_INT 54
11252: PPUSH
11253: CALL_OW 297
11257: PUSH
11258: LD_INT 7
11260: LESS
11261: PUSH
11262: LD_EXP 54
11266: PPUSH
11267: CALL_OW 255
11271: PUSH
11272: LD_INT 6
11274: EQUAL
11275: AND
11276: PUSH
11277: LD_EXP 12
11281: AND
11282: IFFALSE 11308
// begin ComCrawl ( Gnyevko ) ;
11284: LD_EXP 54
11288: PPUSH
11289: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11293: LD_EXP 54
11297: PPUSH
11298: LD_INT 63
11300: PPUSH
11301: LD_INT 54
11303: PPUSH
11304: CALL_OW 171
// end ; end ; end_of_file
11308: END
// export function BurlakDying ; begin
11309: LD_INT 0
11311: PPUSH
// YouLost ( Burlak ) ;
11312: LD_STRING Burlak
11314: PPUSH
11315: CALL_OW 104
// end ;
11319: LD_VAR 0 1
11323: RET
// every 0 0$1 trigger kirovSolds = 0 do
11324: LD_EXP 56
11328: PUSH
11329: LD_INT 0
11331: EQUAL
11332: IFFALSE 11344
11334: GO 11336
11336: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11337: LD_STRING KirovSoldsDie
11339: PPUSH
11340: CALL_OW 104
11344: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11345: LD_EXP 22
11349: PUSH
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 21
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 71
11381: PUSH
11382: LD_INT 0
11384: EQUAL
11385: AND
11386: IFFALSE 11665
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11394: LD_EXP 53
11398: PPUSH
11399: CALL_OW 302
11403: PUSH
11404: LD_EXP 53
11408: PPUSH
11409: CALL_OW 255
11413: PUSH
11414: LD_INT 8
11416: EQUAL
11417: AND
11418: PUSH
11419: LD_EXP 54
11423: PPUSH
11424: CALL_OW 302
11428: PUSH
11429: LD_EXP 54
11433: PPUSH
11434: CALL_OW 255
11438: PUSH
11439: LD_INT 8
11441: EQUAL
11442: AND
11443: OR
11444: IFFALSE 11576
// begin case Query ( QExit2 ) of 1 :
11446: LD_STRING QExit2
11448: PPUSH
11449: CALL_OW 97
11453: PUSH
11454: LD_INT 1
11456: DOUBLE
11457: EQUAL
11458: IFTRUE 11462
11460: GO 11554
11462: POP
// begin if IsOk ( Belkov ) then
11463: LD_EXP 51
11467: PPUSH
11468: CALL_OW 302
11472: IFFALSE 11488
// Say ( Belkov , D12-Bel-1 ) else
11474: LD_EXP 51
11478: PPUSH
11479: LD_STRING D12-Bel-1
11481: PPUSH
11482: CALL_OW 88
11486: GO 11548
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11488: LD_INT 22
11490: PUSH
11491: LD_INT 3
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 21
11500: PUSH
11501: LD_INT 1
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 50
11510: PUSH
11511: EMPTY
11512: LIST
11513: PUSH
11514: LD_INT 26
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: PPUSH
11535: LD_STRING D12-RSol1-1
11537: PPUSH
11538: LD_STRING 
11540: PPUSH
11541: LD_INT 0
11543: PPUSH
11544: CALL 8163 0 4
// FinishMission ;
11548: CALL 11668 0 0
// end ; 2 :
11552: GO 11574
11554: LD_INT 2
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11573
11562: POP
// begin wait ( 0 0$5 ) ;
11563: LD_INT 175
11565: PPUSH
11566: CALL_OW 67
// enable ;
11570: ENABLE
// end ; end ;
11571: GO 11574
11573: POP
// end else
11574: GO 11665
// begin if IsOk ( Belkov ) then
11576: LD_EXP 51
11580: PPUSH
11581: CALL_OW 302
11585: IFFALSE 11601
// Say ( Belkov , D12-Bel-1 ) else
11587: LD_EXP 51
11591: PPUSH
11592: LD_STRING D12-Bel-1
11594: PPUSH
11595: CALL_OW 88
11599: GO 11661
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11601: LD_INT 22
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 50
11623: PUSH
11624: EMPTY
11625: LIST
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_STRING D12-RSol1-1
11650: PPUSH
11651: LD_STRING 
11653: PPUSH
11654: LD_INT 0
11656: PPUSH
11657: CALL 8163 0 4
// FinishMission ;
11661: CALL 11668 0 0
// end ; end ;
11665: PPOPN 1
11667: END
// function FinishMission ; begin
11668: LD_INT 0
11670: PPUSH
// SetRewards ;
11671: CALL 11692 0 0
// SavePlayerCharacters ;
11675: CALL 12043 0 0
// SaveGlobalVariables ;
11679: CALL 12173 0 0
// YouWin ;
11683: CALL_OW 103
// end ;
11687: LD_VAR 0 1
11691: RET
// function SetRewards ; begin
11692: LD_INT 0
11694: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11695: LD_EXP 19
11699: NOT
11700: PUSH
11701: LD_EXP 20
11705: NOT
11706: AND
11707: IFFALSE 11719
// AddMedal ( NoEscape , 1 ) ;
11709: LD_STRING NoEscape
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11719: LD_EXP 19
11723: PUSH
11724: LD_EXP 20
11728: NOT
11729: AND
11730: IFFALSE 11743
// AddMedal ( NoEscape , - 1 ) ;
11732: LD_STRING NoEscape
11734: PPUSH
11735: LD_INT 1
11737: NEG
11738: PPUSH
11739: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11743: LD_EXP 19
11747: NOT
11748: PUSH
11749: LD_EXP 20
11753: AND
11754: IFFALSE 11767
// AddMedal ( NoEscape , - 2 ) ;
11756: LD_STRING NoEscape
11758: PPUSH
11759: LD_INT 2
11761: NEG
11762: PPUSH
11763: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11767: LD_EXP 19
11771: PUSH
11772: LD_EXP 20
11776: AND
11777: IFFALSE 11790
// AddMedal ( NoEscape , - 3 ) ;
11779: LD_STRING NoEscape
11781: PPUSH
11782: LD_INT 3
11784: NEG
11785: PPUSH
11786: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11790: LD_EXP 12
11794: PUSH
11795: LD_EXP 54
11799: PPUSH
11800: CALL_OW 302
11804: AND
11805: PUSH
11806: LD_EXP 21
11810: AND
11811: PUSH
11812: LD_EXP 53
11816: PPUSH
11817: CALL_OW 302
11821: AND
11822: IFFALSE 11834
// AddMedal ( Gnyevko , 1 ) ;
11824: LD_STRING Gnyevko
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11834: LD_EXP 12
11838: NOT
11839: PUSH
11840: LD_EXP 21
11844: AND
11845: PUSH
11846: LD_EXP 53
11850: PPUSH
11851: CALL_OW 302
11855: AND
11856: IFFALSE 11869
// AddMedal ( Gnyevko , - 1 ) ;
11858: LD_STRING Gnyevko
11860: PPUSH
11861: LD_INT 1
11863: NEG
11864: PPUSH
11865: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11869: LD_EXP 12
11873: PUSH
11874: LD_EXP 21
11878: NOT
11879: PUSH
11880: LD_EXP 54
11884: PPUSH
11885: CALL_OW 302
11889: NOT
11890: OR
11891: PUSH
11892: LD_EXP 53
11896: PPUSH
11897: CALL_OW 302
11901: NOT
11902: OR
11903: AND
11904: IFFALSE 11917
// AddMedal ( Gnyevko , - 2 ) ;
11906: LD_STRING Gnyevko
11908: PPUSH
11909: LD_INT 2
11911: NEG
11912: PPUSH
11913: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11917: LD_EXP 12
11921: NOT
11922: PUSH
11923: LD_EXP 21
11927: NOT
11928: AND
11929: PUSH
11930: LD_EXP 54
11934: PPUSH
11935: CALL_OW 302
11939: NOT
11940: PUSH
11941: LD_EXP 53
11945: PPUSH
11946: CALL_OW 302
11950: NOT
11951: AND
11952: OR
11953: IFFALSE 11966
// AddMedal ( Gnyevko , - 3 ) ;
11955: LD_STRING Gnyevko
11957: PPUSH
11958: LD_INT 3
11960: NEG
11961: PPUSH
11962: CALL_OW 101
// if lostComradesCounter = 0 then
11966: LD_EXP 23
11970: PUSH
11971: LD_INT 0
11973: EQUAL
11974: IFFALSE 11988
// AddMedal ( NoLosses , 1 ) else
11976: LD_STRING NoLosses
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 101
11986: GO 11998
// AddMedal ( NoLosses , 0 ) ;
11988: LD_STRING NoLosses
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 101
// GiveMedals ( Main ) ;
11998: LD_STRING Main
12000: PPUSH
12001: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12005: LD_INT 22
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: PPUSH
12034: CALL_OW 43
// end ;
12038: LD_VAR 0 1
12042: RET
// function SavePlayerCharacters ; var others ; begin
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12047: LD_EXP 46
12051: PPUSH
12052: LD_STRING Burlak
12054: PPUSH
12055: CALL 8342 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12059: LD_EXP 54
12063: PPUSH
12064: LD_STRING Gnyevko
12066: PPUSH
12067: CALL 8342 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12071: LD_EXP 51
12075: PPUSH
12076: LD_STRING Belkov
12078: PPUSH
12079: CALL 8342 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12083: LD_EXP 53
12087: PPUSH
12088: LD_STRING Kirilenkova
12090: PPUSH
12091: CALL 8342 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12095: LD_ADDR_VAR 0 2
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 21
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: PUSH
12129: LD_EXP 46
12133: PUSH
12134: LD_EXP 54
12138: PUSH
12139: LD_EXP 51
12143: PUSH
12144: LD_EXP 53
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: DIFF
12155: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12156: LD_VAR 0 2
12160: PPUSH
12161: LD_STRING other_survivors
12163: PPUSH
12164: CALL 8398 0 2
// end ;
12168: LD_VAR 0 1
12172: RET
// function SaveGlobalVariables ; begin
12173: LD_INT 0
12175: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12176: LD_EXP 1
12180: PPUSH
12181: LD_STRING 01_GladstoneStatus
12183: PPUSH
12184: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12188: LD_EXP 2
12192: PPUSH
12193: LD_STRING 01_JohannaStatus
12195: PPUSH
12196: CALL_OW 39
// end ; end_of_file
12200: LD_VAR 0 1
12204: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12205: LD_INT 0
12207: PPUSH
12208: PPUSH
12209: PPUSH
// uc_side = 1 ;
12210: LD_ADDR_OWVAR 20
12214: PUSH
12215: LD_INT 1
12217: ST_TO_ADDR
// hc_class := 1 ;
12218: LD_ADDR_OWVAR 28
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// hc_sex := sex_male ;
12226: LD_ADDR_OWVAR 27
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12234: LD_ADDR_OWVAR 33
12238: PUSH
12239: LD_STRING AmGalRemake
12241: ST_TO_ADDR
// hc_face_number := 1 ;
12242: LD_ADDR_OWVAR 34
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// hc_name := Charles Brown ;
12250: LD_ADDR_OWVAR 26
12254: PUSH
12255: LD_STRING Charles Brown
12257: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12258: LD_ADDR_OWVAR 29
12262: PUSH
12263: LD_INT 12
12265: PUSH
12266: LD_INT 11
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12273: LD_ADDR_OWVAR 31
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: LD_INT 0
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: LD_INT 1
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: ST_TO_ADDR
// Charles = CreateHuman ;
12296: LD_ADDR_EXP 42
12300: PUSH
12301: CALL_OW 44
12305: ST_TO_ADDR
// hc_class := 1 ;
12306: LD_ADDR_OWVAR 28
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// hc_sex := sex_female ;
12314: LD_ADDR_OWVAR 27
12318: PUSH
12319: LD_INT 2
12321: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12322: LD_ADDR_OWVAR 33
12326: PUSH
12327: LD_STRING AmGalRemake
12329: ST_TO_ADDR
// hc_face_number := 2 ;
12330: LD_ADDR_OWVAR 34
12334: PUSH
12335: LD_INT 2
12337: ST_TO_ADDR
// hc_name := Johanna Holland ;
12338: LD_ADDR_OWVAR 26
12342: PUSH
12343: LD_STRING Johanna Holland
12345: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12346: LD_ADDR_OWVAR 29
12350: PUSH
12351: LD_INT 12
12353: PUSH
12354: LD_INT 11
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12361: LD_ADDR_OWVAR 31
12365: PUSH
12366: LD_EXP 36
12370: PUSH
12371: LD_INT 0
12373: PPUSH
12374: LD_INT 2
12376: PPUSH
12377: CALL_OW 12
12381: PUSH
12382: LD_INT 0
12384: PPUSH
12385: LD_INT 2
12387: PPUSH
12388: CALL_OW 12
12392: PUSH
12393: LD_INT 0
12395: PPUSH
12396: LD_INT 2
12398: PPUSH
12399: CALL_OW 12
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: ST_TO_ADDR
// Johanna = CreateHuman ;
12410: LD_ADDR_EXP 43
12414: PUSH
12415: CALL_OW 44
12419: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12420: LD_EXP 43
12424: PPUSH
12425: LD_INT 19
12427: PPUSH
12428: LD_INT 0
12430: PPUSH
12431: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12435: LD_EXP 43
12439: PPUSH
12440: LD_INT 23
12442: PPUSH
12443: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12447: LD_ADDR_EXP 44
12451: PUSH
12452: LD_STRING Gladstone
12454: PPUSH
12455: LD_INT 0
12457: PPUSH
12458: CALL 8100 0 2
12462: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12463: LD_EXP 44
12467: PPUSH
12468: LD_INT 22
12470: PPUSH
12471: CALL_OW 52
// amApemans = [ ] ;
12475: LD_ADDR_EXP 45
12479: PUSH
12480: EMPTY
12481: ST_TO_ADDR
// for i := 1 to amApeAmount do
12482: LD_ADDR_VAR 0 2
12486: PUSH
12487: DOUBLE
12488: LD_INT 1
12490: DEC
12491: ST_TO_ADDR
12492: LD_EXP 35
12496: PUSH
12497: FOR_TO
12498: IFFALSE 12613
// begin hc_class := class_apeman ;
12500: LD_ADDR_OWVAR 28
12504: PUSH
12505: LD_INT 12
12507: ST_TO_ADDR
// hc_gallery :=  ;
12508: LD_ADDR_OWVAR 33
12512: PUSH
12513: LD_STRING 
12515: ST_TO_ADDR
// hc_name :=  ;
12516: LD_ADDR_OWVAR 26
12520: PUSH
12521: LD_STRING 
12523: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12524: LD_ADDR_OWVAR 31
12528: PUSH
12529: LD_EXP 36
12533: PUSH
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 2
12539: PPUSH
12540: CALL_OW 12
12544: PUSH
12545: LD_INT 0
12547: PPUSH
12548: LD_INT 2
12550: PPUSH
12551: CALL_OW 12
12555: PUSH
12556: LD_INT 0
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: CALL_OW 12
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: ST_TO_ADDR
// ape = CreateHuman ;
12573: LD_ADDR_VAR 0 3
12577: PUSH
12578: CALL_OW 44
12582: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 22
12590: PPUSH
12591: CALL_OW 52
// amApemans = amApemans ^ ape ;
12595: LD_ADDR_EXP 45
12599: PUSH
12600: LD_EXP 45
12604: PUSH
12605: LD_VAR 0 3
12609: ADD
12610: ST_TO_ADDR
// end ;
12611: GO 12497
12613: POP
12614: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12615: LD_INT 23
12617: PPUSH
12618: LD_EXP 33
12622: PPUSH
12623: CALL_OW 234
// end ; end_of_file
12627: LD_VAR 0 1
12631: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12632: LD_INT 0
12634: PPUSH
// PrepareHero ;
12635: CALL 12660 0 0
// PreparePokryshkinTeams ;
12639: CALL 12754 0 0
// PrepareJelena ;
12643: CALL 13019 0 0
// PrepareGnyevko ;
12647: CALL 13051 0 0
// PrepareKurin ;
12651: CALL 12722 0 0
// end ;
12655: LD_VAR 0 1
12659: RET
// function PrepareHero ; begin
12660: LD_INT 0
12662: PPUSH
// uc_side = 3 ;
12663: LD_ADDR_OWVAR 20
12667: PUSH
12668: LD_INT 3
12670: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
12671: LD_ADDR_EXP 46
12675: PUSH
12676: LD_STRING Burlak
12678: PPUSH
12679: LD_INT 0
12681: PPUSH
12682: CALL 8100 0 2
12686: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12687: LD_EXP 46
12691: PPUSH
12692: LD_EXP 37
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: LD_EXP 37
12705: PUSH
12706: LD_INT 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 48
// end ;
12717: LD_VAR 0 1
12721: RET
// function PrepareKurin ; begin
12722: LD_INT 0
12724: PPUSH
// uc_side = 6 ;
12725: LD_ADDR_OWVAR 20
12729: PUSH
12730: LD_INT 6
12732: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
12733: LD_ADDR_EXP 55
12737: PUSH
12738: LD_STRING Kurin
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL 8100 0 2
12748: ST_TO_ADDR
// end ;
12749: LD_VAR 0 1
12753: RET
// function PreparePokryshkinTeams ; begin
12754: LD_INT 0
12756: PPUSH
// uc_side = 6 ;
12757: LD_ADDR_OWVAR 20
12761: PUSH
12762: LD_INT 6
12764: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
12765: LD_ADDR_EXP 47
12769: PUSH
12770: LD_STRING Pokryshkin
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL 8100 0 2
12780: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
12781: LD_ADDR_EXP 48
12785: PUSH
12786: LD_STRING Saseda
12788: PPUSH
12789: LD_INT 0
12791: PPUSH
12792: CALL 8100 0 2
12796: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
12797: LD_ADDR_EXP 49
12801: PUSH
12802: LD_STRING Jaworska
12804: PPUSH
12805: LD_INT 0
12807: PPUSH
12808: CALL 8100 0 2
12812: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
12813: LD_ADDR_EXP 50
12817: PUSH
12818: LD_STRING Balei
12820: PPUSH
12821: LD_INT 0
12823: PPUSH
12824: CALL 8100 0 2
12828: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
12829: LD_ADDR_EXP 51
12833: PUSH
12834: LD_STRING Belkov
12836: PPUSH
12837: LD_INT 0
12839: PPUSH
12840: CALL 8100 0 2
12844: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12845: LD_EXP 47
12849: PPUSH
12850: LD_INT 25
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12860: LD_EXP 48
12864: PPUSH
12865: LD_INT 17
12867: PPUSH
12868: LD_INT 0
12870: PPUSH
12871: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12875: LD_EXP 49
12879: PPUSH
12880: LD_INT 17
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12890: LD_EXP 50
12894: PPUSH
12895: LD_INT 17
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12905: LD_EXP 51
12909: PPUSH
12910: LD_INT 17
12912: PPUSH
12913: LD_INT 0
12915: PPUSH
12916: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12920: LD_ADDR_EXP 56
12924: PUSH
12925: LD_EXP 47
12929: PUSH
12930: LD_EXP 48
12934: PUSH
12935: LD_EXP 50
12939: PUSH
12940: LD_EXP 51
12944: PUSH
12945: LD_EXP 49
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: ST_TO_ADDR
// if Difficulty < 3 then
12957: LD_OWVAR 67
12961: PUSH
12962: LD_INT 3
12964: LESS
12965: IFFALSE 13014
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
12967: LD_ADDR_EXP 52
12971: PUSH
12972: LD_STRING Jaunzeme
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL 8100 0 2
12982: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12983: LD_EXP 52
12987: PPUSH
12988: LD_INT 26
12990: PPUSH
12991: LD_INT 0
12993: PPUSH
12994: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12998: LD_ADDR_EXP 56
13002: PUSH
13003: LD_EXP 56
13007: PUSH
13008: LD_EXP 52
13012: ADD
13013: ST_TO_ADDR
// end ; end ;
13014: LD_VAR 0 1
13018: RET
// function PrepareJelena ; begin
13019: LD_INT 0
13021: PPUSH
// uc_side = 8 ;
13022: LD_ADDR_OWVAR 20
13026: PUSH
13027: LD_INT 8
13029: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13030: LD_ADDR_EXP 53
13034: PUSH
13035: LD_STRING Kirilenkova
13037: PPUSH
13038: LD_INT 0
13040: PPUSH
13041: CALL 8100 0 2
13045: ST_TO_ADDR
// end ;
13046: LD_VAR 0 1
13050: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13051: LD_INT 0
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
// uc_side = 8 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 8
13064: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13065: LD_ADDR_EXP 54
13069: PUSH
13070: LD_STRING Gnyevko
13072: PPUSH
13073: LD_INT 0
13075: PPUSH
13076: CALL 8100 0 2
13080: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13081: LD_ADDR_VAR 0 4
13085: PUSH
13086: LD_EXP 38
13090: PUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_EXP 38
13098: PPUSH
13099: CALL_OW 12
13103: ARRAY
13104: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13105: LD_EXP 54
13109: PPUSH
13110: LD_VAR 0 4
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: LD_VAR 0 4
13123: PUSH
13124: LD_INT 2
13126: ARRAY
13127: PPUSH
13128: LD_INT 0
13130: PPUSH
13131: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13135: LD_EXP 54
13139: PPUSH
13140: LD_EXP 39
13144: PPUSH
13145: CALL_OW 234
// ComHold ( Gnyevko ) ;
13149: LD_EXP 54
13153: PPUSH
13154: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: DOUBLE
13164: LD_INT 1
13166: DEC
13167: ST_TO_ADDR
13168: LD_EXP 27
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: LD_OWVAR 67
13199: ARRAY
13200: MINUS
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13333
// begin uc_side = 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation = nation_nature ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// hc_class = class_apeman ;
13221: LD_ADDR_OWVAR 28
13225: PUSH
13226: LD_INT 12
13228: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13229: LD_ADDR_OWVAR 31
13233: PUSH
13234: LD_EXP 28
13238: PUSH
13239: LD_INT 1
13241: ARRAY
13242: PUSH
13243: LD_EXP 28
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PUSH
13252: LD_EXP 28
13256: PUSH
13257: LD_INT 3
13259: ARRAY
13260: PUSH
13261: LD_EXP 28
13265: PUSH
13266: LD_INT 4
13268: ARRAY
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13276: LD_ADDR_OWVAR 35
13280: PUSH
13281: LD_EXP 34
13285: ST_TO_ADDR
// un = CreateHuman ;
13286: LD_ADDR_VAR 0 2
13290: PUSH
13291: CALL_OW 44
13295: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13296: LD_VAR 0 2
13300: PPUSH
13301: LD_EXP 54
13305: PPUSH
13306: CALL_OW 250
13310: PPUSH
13311: LD_EXP 54
13315: PPUSH
13316: CALL_OW 251
13320: PPUSH
13321: LD_INT 8
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL_OW 50
// end ;
13331: GO 13202
13333: POP
13334: POP
// end ; end_of_file
13335: LD_VAR 0 1
13339: RET
// export function CreateNature ; var i , un ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
13344: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13345: LD_ADDR_VAR 0 2
13349: PUSH
13350: DOUBLE
13351: LD_INT 1
13353: DEC
13354: ST_TO_ADDR
13355: LD_EXP 27
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13475
// begin uc_side = 0 ;
13367: LD_ADDR_OWVAR 20
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// uc_nation = nation_nature ;
13375: LD_ADDR_OWVAR 21
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// hc_class = class_apeman ;
13383: LD_ADDR_OWVAR 28
13387: PUSH
13388: LD_INT 12
13390: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13391: LD_ADDR_OWVAR 31
13395: PUSH
13396: LD_EXP 28
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PUSH
13405: LD_EXP 28
13409: PUSH
13410: LD_INT 2
13412: ARRAY
13413: PUSH
13414: LD_EXP 28
13418: PUSH
13419: LD_INT 3
13421: ARRAY
13422: PUSH
13423: LD_EXP 28
13427: PUSH
13428: LD_INT 4
13430: ARRAY
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13438: LD_ADDR_OWVAR 35
13442: PUSH
13443: LD_EXP 34
13447: ST_TO_ADDR
// un = CreateHuman ;
13448: LD_ADDR_VAR 0 3
13452: PUSH
13453: CALL_OW 44
13457: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13458: LD_VAR 0 3
13462: PPUSH
13463: LD_INT 16
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// end ;
13473: GO 13364
13475: POP
13476: POP
// for i := 1 to animalsAmount [ 2 ] do
13477: LD_ADDR_VAR 0 2
13481: PUSH
13482: DOUBLE
13483: LD_INT 1
13485: DEC
13486: ST_TO_ADDR
13487: LD_EXP 27
13491: PUSH
13492: LD_INT 2
13494: ARRAY
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13607
// begin uc_side = 0 ;
13499: LD_ADDR_OWVAR 20
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// uc_nation = nation_nature ;
13507: LD_ADDR_OWVAR 21
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// hc_class = class_phororhacos ;
13515: LD_ADDR_OWVAR 28
13519: PUSH
13520: LD_INT 18
13522: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13523: LD_ADDR_OWVAR 31
13527: PUSH
13528: LD_EXP 28
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PUSH
13537: LD_EXP 28
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PUSH
13546: LD_EXP 28
13550: PUSH
13551: LD_INT 3
13553: ARRAY
13554: PUSH
13555: LD_EXP 28
13559: PUSH
13560: LD_INT 4
13562: ARRAY
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13570: LD_ADDR_OWVAR 35
13574: PUSH
13575: LD_EXP 29
13579: ST_TO_ADDR
// un = CreateHuman ;
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: CALL_OW 44
13589: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 15
13597: PPUSH
13598: LD_INT 0
13600: PPUSH
13601: CALL_OW 49
// end ;
13605: GO 13496
13607: POP
13608: POP
// for i := 1 to animalsAmount [ 3 ] do
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: DOUBLE
13615: LD_INT 1
13617: DEC
13618: ST_TO_ADDR
13619: LD_EXP 27
13623: PUSH
13624: LD_INT 3
13626: ARRAY
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13739
// begin uc_side = 0 ;
13631: LD_ADDR_OWVAR 20
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// uc_nation = nation_nature ;
13639: LD_ADDR_OWVAR 21
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// hc_class = class_tiger ;
13647: LD_ADDR_OWVAR 28
13651: PUSH
13652: LD_INT 14
13654: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13655: LD_ADDR_OWVAR 31
13659: PUSH
13660: LD_EXP 28
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PUSH
13669: LD_EXP 28
13673: PUSH
13674: LD_INT 2
13676: ARRAY
13677: PUSH
13678: LD_EXP 28
13682: PUSH
13683: LD_INT 3
13685: ARRAY
13686: PUSH
13687: LD_EXP 28
13691: PUSH
13692: LD_INT 4
13694: ARRAY
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13702: LD_ADDR_OWVAR 35
13706: PUSH
13707: LD_EXP 29
13711: ST_TO_ADDR
// un = CreateHuman ;
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: CALL_OW 44
13721: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 15
13729: PPUSH
13730: LD_INT 0
13732: PPUSH
13733: CALL_OW 49
// end ;
13737: GO 13628
13739: POP
13740: POP
// for i := 1 to animalsAmount [ 4 ] do
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_EXP 27
13755: PUSH
13756: LD_INT 4
13758: ARRAY
13759: PUSH
13760: FOR_TO
13761: IFFALSE 13871
// begin uc_side = 0 ;
13763: LD_ADDR_OWVAR 20
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// uc_nation = nation_nature ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// hc_class = 21 ;
13779: LD_ADDR_OWVAR 28
13783: PUSH
13784: LD_INT 21
13786: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13787: LD_ADDR_OWVAR 31
13791: PUSH
13792: LD_EXP 28
13796: PUSH
13797: LD_INT 1
13799: ARRAY
13800: PUSH
13801: LD_EXP 28
13805: PUSH
13806: LD_INT 2
13808: ARRAY
13809: PUSH
13810: LD_EXP 28
13814: PUSH
13815: LD_INT 3
13817: ARRAY
13818: PUSH
13819: LD_EXP 28
13823: PUSH
13824: LD_INT 4
13826: ARRAY
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13834: LD_ADDR_OWVAR 35
13838: PUSH
13839: LD_EXP 29
13843: ST_TO_ADDR
// un = CreateHuman ;
13844: LD_ADDR_VAR 0 3
13848: PUSH
13849: CALL_OW 44
13853: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 15
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13760
13871: POP
13872: POP
// end ; end_of_file
13873: LD_VAR 0 1
13877: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13878: LD_VAR 0 1
13882: PUSH
13883: LD_EXP 46
13887: EQUAL
13888: PUSH
13889: LD_EXP 53
13893: PPUSH
13894: CALL_OW 255
13898: PUSH
13899: LD_INT 3
13901: EQUAL
13902: NOT
13903: AND
13904: PUSH
13905: LD_EXP 53
13909: PPUSH
13910: CALL_OW 302
13914: NOT
13915: AND
13916: IFFALSE 13922
// BurlakDying ;
13918: CALL 11309 0 0
// if unit = Gladstone then
13922: LD_VAR 0 1
13926: PUSH
13927: LD_EXP 44
13931: EQUAL
13932: IFFALSE 13942
// gladstoneStatus = 0 ;
13934: LD_ADDR_EXP 1
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// if unit = Johanna then
13942: LD_VAR 0 1
13946: PUSH
13947: LD_EXP 43
13951: EQUAL
13952: IFFALSE 13962
// johannaStatus = 0 ;
13954: LD_ADDR_EXP 2
13958: PUSH
13959: LD_INT 0
13961: ST_TO_ADDR
// end ;
13962: PPOPN 1
13964: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13965: LD_VAR 0 1
13969: PUSH
13970: LD_EXP 46
13974: EQUAL
13975: IFFALSE 13981
// BurlakDying ;
13977: CALL 11309 0 0
// if GetSide ( unit ) = 3 then
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 255
13990: PUSH
13991: LD_INT 3
13993: EQUAL
13994: IFFALSE 14010
// lostComradesCounter = lostComradesCounter + 1 ;
13996: LD_ADDR_EXP 23
14000: PUSH
14001: LD_EXP 23
14005: PUSH
14006: LD_INT 1
14008: PLUS
14009: ST_TO_ADDR
// if unit in kirovSolds then
14010: LD_VAR 0 1
14014: PUSH
14015: LD_EXP 56
14019: IN
14020: IFFALSE 14038
// kirovSolds = kirovSolds diff unit ;
14022: LD_ADDR_EXP 56
14026: PUSH
14027: LD_EXP 56
14031: PUSH
14032: LD_VAR 0 1
14036: DIFF
14037: ST_TO_ADDR
// end ;
14038: PPOPN 1
14040: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14041: LD_VAR 0 1
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 1
14057: EQUAL
14058: AND
14059: PUSH
14060: LD_VAR 0 1
14064: PUSH
14065: LD_INT 1
14067: EQUAL
14068: PUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 3
14076: EQUAL
14077: AND
14078: PUSH
14079: LD_EXP 17
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: AND
14088: OR
14089: IFFALSE 14095
// Dial_SecondAttack ;
14091: CALL 6061 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14095: LD_VAR 0 1
14099: PUSH
14100: LD_INT 3
14102: EQUAL
14103: PUSH
14104: LD_VAR 0 2
14108: PUSH
14109: LD_INT 6
14111: EQUAL
14112: AND
14113: PUSH
14114: LD_EXP 18
14118: NOT
14119: AND
14120: IFFALSE 14126
// Dialogue_AttackComrade ;
14122: CALL 4147 0 0
// end ; end_of_file
14126: PPOPN 2
14128: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14129: LD_EXP 53
14133: PPUSH
14134: CALL_OW 255
14138: PUSH
14139: LD_INT 3
14141: EQUAL
14142: PUSH
14143: LD_EXP 26
14147: PUSH
14148: LD_INT 525
14150: LESS
14151: AND
14152: IFFALSE 14164
14154: GO 14156
14156: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14157: LD_STRING ACH_YELENA
14159: PPUSH
14160: CALL_OW 543
14164: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14165: LD_INT 23
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 25
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 25
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 25
14200: PUSH
14201: LD_INT 12
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: NOT
14223: IFFALSE 14235
14225: GO 14227
14227: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14228: LD_STRING ACH_NATURE
14230: PPUSH
14231: CALL_OW 543
14235: END
// every 0 0$1 trigger Attacks ( Burlak ) = am_bun and belkovWaitForGorky do
14236: LD_EXP 46
14240: PPUSH
14241: CALL_OW 320
14245: PUSH
14246: LD_INT 23
14248: EQUAL
14249: PUSH
14250: LD_EXP 16
14254: AND
14255: IFFALSE 14348
14257: GO 14259
14259: DISABLE
// begin ComExitBuilding ( Johanna ) ;
14260: LD_EXP 43
14264: PPUSH
14265: CALL_OW 122
// wait ( 0 0$1 ) ;
14269: LD_INT 35
14271: PPUSH
14272: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14276: LD_INT 35
14278: PPUSH
14279: CALL_OW 67
// ComAttackUnit ( Johanna , Burlak ) ;
14283: LD_EXP 43
14287: PPUSH
14288: LD_EXP 46
14292: PPUSH
14293: CALL_OW 115
// until IsDead ( Burlak ) or GetDistUnits ( Burlak , Johanna ) > 10 or not belkovWaitForGorky ;
14297: LD_EXP 46
14301: PPUSH
14302: CALL_OW 301
14306: PUSH
14307: LD_EXP 46
14311: PPUSH
14312: LD_EXP 43
14316: PPUSH
14317: CALL_OW 296
14321: PUSH
14322: LD_INT 10
14324: GREATER
14325: OR
14326: PUSH
14327: LD_EXP 16
14331: NOT
14332: OR
14333: IFFALSE 14276
// ComEnterUnit ( Johanna , am_bun ) ;
14335: LD_EXP 43
14339: PPUSH
14340: LD_INT 23
14342: PPUSH
14343: CALL_OW 120
// enable ;
14347: ENABLE
// end ; end_of_file
14348: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14349: LD_INT 0
14351: PPUSH
14352: PPUSH
// if not missionNumber then
14353: LD_VAR 0 2
14357: NOT
14358: IFFALSE 14362
// exit ;
14360: GO 14492
// achiv := false ;
14362: LD_ADDR_VAR 0 7
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// case campaignNumber of 1 :
14370: LD_VAR 0 1
14374: PUSH
14375: LD_INT 1
14377: DOUBLE
14378: EQUAL
14379: IFTRUE 14383
14381: GO 14394
14383: POP
// achiv := ACH_GOTA ; 2 :
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_STRING ACH_GOTA
14391: ST_TO_ADDR
14392: GO 14444
14394: LD_INT 2
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14405
14402: POP
// ; 3 :
14403: GO 14444
14405: LD_INT 3
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14424
14413: POP
// achiv := ACH_MOTSU ; 4 :
14414: LD_ADDR_VAR 0 7
14418: PUSH
14419: LD_STRING ACH_MOTSU
14421: ST_TO_ADDR
14422: GO 14444
14424: LD_INT 4
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14443
14432: POP
// achiv := ACH_LOP ; end ;
14433: LD_ADDR_VAR 0 7
14437: PUSH
14438: LD_STRING ACH_LOP
14440: ST_TO_ADDR
14441: GO 14444
14443: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14444: LD_OWVAR 67
14448: PUSH
14449: LD_INT 3
14451: EQUAL
14452: PUSH
14453: LD_VAR 0 7
14457: AND
14458: PUSH
14459: LD_VAR 0 3
14463: AND
14464: PUSH
14465: LD_VAR 0 4
14469: AND
14470: PUSH
14471: LD_VAR 0 5
14475: AND
14476: IFFALSE 14492
// SetAchievementEX ( achiv , missionNumber ) ;
14478: LD_VAR 0 7
14482: PPUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: CALL_OW 564
// end ;
14492: LD_VAR 0 6
14496: RET
// export function SA_BehemothConstructed ; begin
14497: LD_INT 0
14499: PPUSH
// SetAchievement ( ACH_SMC ) ;
14500: LD_STRING ACH_SMC
14502: PPUSH
14503: CALL_OW 543
// end ; end_of_file
14507: LD_VAR 0 1
14511: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14512: LD_INT 0
14514: PPUSH
// if p2 = 100 then
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 100
14522: EQUAL
14523: IFFALSE 15526
// begin if not StreamModeActive then
14525: LD_EXP 57
14529: NOT
14530: IFFALSE 14540
// StreamModeActive := true ;
14532: LD_ADDR_EXP 57
14536: PUSH
14537: LD_INT 1
14539: ST_TO_ADDR
// if p3 = 0 then
14540: LD_VAR 0 3
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14554
// InitStreamMode ;
14550: CALL 15686 0 0
// if p3 = 1 then
14554: LD_VAR 0 3
14558: PUSH
14559: LD_INT 1
14561: EQUAL
14562: IFFALSE 14572
// sRocket := true ;
14564: LD_ADDR_EXP 62
14568: PUSH
14569: LD_INT 1
14571: ST_TO_ADDR
// if p3 = 2 then
14572: LD_VAR 0 3
14576: PUSH
14577: LD_INT 2
14579: EQUAL
14580: IFFALSE 14590
// sSpeed := true ;
14582: LD_ADDR_EXP 61
14586: PUSH
14587: LD_INT 1
14589: ST_TO_ADDR
// if p3 = 3 then
14590: LD_VAR 0 3
14594: PUSH
14595: LD_INT 3
14597: EQUAL
14598: IFFALSE 14608
// sEngine := true ;
14600: LD_ADDR_EXP 63
14604: PUSH
14605: LD_INT 1
14607: ST_TO_ADDR
// if p3 = 4 then
14608: LD_VAR 0 3
14612: PUSH
14613: LD_INT 4
14615: EQUAL
14616: IFFALSE 14626
// sSpec := true ;
14618: LD_ADDR_EXP 60
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// if p3 = 5 then
14626: LD_VAR 0 3
14630: PUSH
14631: LD_INT 5
14633: EQUAL
14634: IFFALSE 14644
// sLevel := true ;
14636: LD_ADDR_EXP 64
14640: PUSH
14641: LD_INT 1
14643: ST_TO_ADDR
// if p3 = 6 then
14644: LD_VAR 0 3
14648: PUSH
14649: LD_INT 6
14651: EQUAL
14652: IFFALSE 14662
// sArmoury := true ;
14654: LD_ADDR_EXP 65
14658: PUSH
14659: LD_INT 1
14661: ST_TO_ADDR
// if p3 = 7 then
14662: LD_VAR 0 3
14666: PUSH
14667: LD_INT 7
14669: EQUAL
14670: IFFALSE 14680
// sRadar := true ;
14672: LD_ADDR_EXP 66
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// if p3 = 8 then
14680: LD_VAR 0 3
14684: PUSH
14685: LD_INT 8
14687: EQUAL
14688: IFFALSE 14698
// sBunker := true ;
14690: LD_ADDR_EXP 67
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if p3 = 9 then
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 9
14705: EQUAL
14706: IFFALSE 14716
// sHack := true ;
14708: LD_ADDR_EXP 68
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// if p3 = 10 then
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 10
14723: EQUAL
14724: IFFALSE 14734
// sFire := true ;
14726: LD_ADDR_EXP 69
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// if p3 = 11 then
14734: LD_VAR 0 3
14738: PUSH
14739: LD_INT 11
14741: EQUAL
14742: IFFALSE 14752
// sRefresh := true ;
14744: LD_ADDR_EXP 70
14748: PUSH
14749: LD_INT 1
14751: ST_TO_ADDR
// if p3 = 12 then
14752: LD_VAR 0 3
14756: PUSH
14757: LD_INT 12
14759: EQUAL
14760: IFFALSE 14770
// sExp := true ;
14762: LD_ADDR_EXP 71
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// if p3 = 13 then
14770: LD_VAR 0 3
14774: PUSH
14775: LD_INT 13
14777: EQUAL
14778: IFFALSE 14788
// sDepot := true ;
14780: LD_ADDR_EXP 72
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// if p3 = 14 then
14788: LD_VAR 0 3
14792: PUSH
14793: LD_INT 14
14795: EQUAL
14796: IFFALSE 14806
// sFlag := true ;
14798: LD_ADDR_EXP 73
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if p3 = 15 then
14806: LD_VAR 0 3
14810: PUSH
14811: LD_INT 15
14813: EQUAL
14814: IFFALSE 14824
// sKamikadze := true ;
14816: LD_ADDR_EXP 81
14820: PUSH
14821: LD_INT 1
14823: ST_TO_ADDR
// if p3 = 16 then
14824: LD_VAR 0 3
14828: PUSH
14829: LD_INT 16
14831: EQUAL
14832: IFFALSE 14842
// sTroll := true ;
14834: LD_ADDR_EXP 82
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
// if p3 = 17 then
14842: LD_VAR 0 3
14846: PUSH
14847: LD_INT 17
14849: EQUAL
14850: IFFALSE 14860
// sSlow := true ;
14852: LD_ADDR_EXP 83
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// if p3 = 18 then
14860: LD_VAR 0 3
14864: PUSH
14865: LD_INT 18
14867: EQUAL
14868: IFFALSE 14878
// sLack := true ;
14870: LD_ADDR_EXP 84
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if p3 = 19 then
14878: LD_VAR 0 3
14882: PUSH
14883: LD_INT 19
14885: EQUAL
14886: IFFALSE 14896
// sTank := true ;
14888: LD_ADDR_EXP 86
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// if p3 = 20 then
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 20
14903: EQUAL
14904: IFFALSE 14914
// sRemote := true ;
14906: LD_ADDR_EXP 87
14910: PUSH
14911: LD_INT 1
14913: ST_TO_ADDR
// if p3 = 21 then
14914: LD_VAR 0 3
14918: PUSH
14919: LD_INT 21
14921: EQUAL
14922: IFFALSE 14932
// sPowell := true ;
14924: LD_ADDR_EXP 88
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// if p3 = 22 then
14932: LD_VAR 0 3
14936: PUSH
14937: LD_INT 22
14939: EQUAL
14940: IFFALSE 14950
// sTeleport := true ;
14942: LD_ADDR_EXP 91
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// if p3 = 23 then
14950: LD_VAR 0 3
14954: PUSH
14955: LD_INT 23
14957: EQUAL
14958: IFFALSE 14968
// sOilTower := true ;
14960: LD_ADDR_EXP 93
14964: PUSH
14965: LD_INT 1
14967: ST_TO_ADDR
// if p3 = 24 then
14968: LD_VAR 0 3
14972: PUSH
14973: LD_INT 24
14975: EQUAL
14976: IFFALSE 14986
// sShovel := true ;
14978: LD_ADDR_EXP 94
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// if p3 = 25 then
14986: LD_VAR 0 3
14990: PUSH
14991: LD_INT 25
14993: EQUAL
14994: IFFALSE 15004
// sSheik := true ;
14996: LD_ADDR_EXP 95
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// if p3 = 26 then
15004: LD_VAR 0 3
15008: PUSH
15009: LD_INT 26
15011: EQUAL
15012: IFFALSE 15022
// sEarthquake := true ;
15014: LD_ADDR_EXP 97
15018: PUSH
15019: LD_INT 1
15021: ST_TO_ADDR
// if p3 = 27 then
15022: LD_VAR 0 3
15026: PUSH
15027: LD_INT 27
15029: EQUAL
15030: IFFALSE 15040
// sAI := true ;
15032: LD_ADDR_EXP 98
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// if p3 = 28 then
15040: LD_VAR 0 3
15044: PUSH
15045: LD_INT 28
15047: EQUAL
15048: IFFALSE 15058
// sCargo := true ;
15050: LD_ADDR_EXP 101
15054: PUSH
15055: LD_INT 1
15057: ST_TO_ADDR
// if p3 = 29 then
15058: LD_VAR 0 3
15062: PUSH
15063: LD_INT 29
15065: EQUAL
15066: IFFALSE 15076
// sDLaser := true ;
15068: LD_ADDR_EXP 102
15072: PUSH
15073: LD_INT 1
15075: ST_TO_ADDR
// if p3 = 30 then
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 30
15083: EQUAL
15084: IFFALSE 15094
// sExchange := true ;
15086: LD_ADDR_EXP 103
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// if p3 = 31 then
15094: LD_VAR 0 3
15098: PUSH
15099: LD_INT 31
15101: EQUAL
15102: IFFALSE 15112
// sFac := true ;
15104: LD_ADDR_EXP 104
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// if p3 = 32 then
15112: LD_VAR 0 3
15116: PUSH
15117: LD_INT 32
15119: EQUAL
15120: IFFALSE 15130
// sPower := true ;
15122: LD_ADDR_EXP 105
15126: PUSH
15127: LD_INT 1
15129: ST_TO_ADDR
// if p3 = 33 then
15130: LD_VAR 0 3
15134: PUSH
15135: LD_INT 33
15137: EQUAL
15138: IFFALSE 15148
// sRandom := true ;
15140: LD_ADDR_EXP 106
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// if p3 = 34 then
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 34
15155: EQUAL
15156: IFFALSE 15166
// sShield := true ;
15158: LD_ADDR_EXP 107
15162: PUSH
15163: LD_INT 1
15165: ST_TO_ADDR
// if p3 = 35 then
15166: LD_VAR 0 3
15170: PUSH
15171: LD_INT 35
15173: EQUAL
15174: IFFALSE 15184
// sTime := true ;
15176: LD_ADDR_EXP 108
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// if p3 = 36 then
15184: LD_VAR 0 3
15188: PUSH
15189: LD_INT 36
15191: EQUAL
15192: IFFALSE 15202
// sTools := true ;
15194: LD_ADDR_EXP 109
15198: PUSH
15199: LD_INT 1
15201: ST_TO_ADDR
// if p3 = 101 then
15202: LD_VAR 0 3
15206: PUSH
15207: LD_INT 101
15209: EQUAL
15210: IFFALSE 15220
// sSold := true ;
15212: LD_ADDR_EXP 74
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// if p3 = 102 then
15220: LD_VAR 0 3
15224: PUSH
15225: LD_INT 102
15227: EQUAL
15228: IFFALSE 15238
// sDiff := true ;
15230: LD_ADDR_EXP 75
15234: PUSH
15235: LD_INT 1
15237: ST_TO_ADDR
// if p3 = 103 then
15238: LD_VAR 0 3
15242: PUSH
15243: LD_INT 103
15245: EQUAL
15246: IFFALSE 15256
// sFog := true ;
15248: LD_ADDR_EXP 78
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// if p3 = 104 then
15256: LD_VAR 0 3
15260: PUSH
15261: LD_INT 104
15263: EQUAL
15264: IFFALSE 15274
// sReset := true ;
15266: LD_ADDR_EXP 79
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if p3 = 105 then
15274: LD_VAR 0 3
15278: PUSH
15279: LD_INT 105
15281: EQUAL
15282: IFFALSE 15292
// sSun := true ;
15284: LD_ADDR_EXP 80
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// if p3 = 106 then
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 106
15299: EQUAL
15300: IFFALSE 15310
// sTiger := true ;
15302: LD_ADDR_EXP 76
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// if p3 = 107 then
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 107
15317: EQUAL
15318: IFFALSE 15328
// sBomb := true ;
15320: LD_ADDR_EXP 77
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// if p3 = 108 then
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 108
15335: EQUAL
15336: IFFALSE 15346
// sWound := true ;
15338: LD_ADDR_EXP 85
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// if p3 = 109 then
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 109
15353: EQUAL
15354: IFFALSE 15364
// sBetray := true ;
15356: LD_ADDR_EXP 89
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// if p3 = 110 then
15364: LD_VAR 0 3
15368: PUSH
15369: LD_INT 110
15371: EQUAL
15372: IFFALSE 15382
// sContamin := true ;
15374: LD_ADDR_EXP 90
15378: PUSH
15379: LD_INT 1
15381: ST_TO_ADDR
// if p3 = 111 then
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 111
15389: EQUAL
15390: IFFALSE 15400
// sOil := true ;
15392: LD_ADDR_EXP 92
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// if p3 = 112 then
15400: LD_VAR 0 3
15404: PUSH
15405: LD_INT 112
15407: EQUAL
15408: IFFALSE 15418
// sStu := true ;
15410: LD_ADDR_EXP 96
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 113 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 113
15425: EQUAL
15426: IFFALSE 15436
// sBazooka := true ;
15428: LD_ADDR_EXP 99
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// if p3 = 114 then
15436: LD_VAR 0 3
15440: PUSH
15441: LD_INT 114
15443: EQUAL
15444: IFFALSE 15454
// sMortar := true ;
15446: LD_ADDR_EXP 100
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if p3 = 115 then
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 115
15461: EQUAL
15462: IFFALSE 15472
// sRanger := true ;
15464: LD_ADDR_EXP 110
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// if p3 = 116 then
15472: LD_VAR 0 3
15476: PUSH
15477: LD_INT 116
15479: EQUAL
15480: IFFALSE 15490
// sComputer := true ;
15482: LD_ADDR_EXP 111
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// if p3 = 117 then
15490: LD_VAR 0 3
15494: PUSH
15495: LD_INT 117
15497: EQUAL
15498: IFFALSE 15508
// s30 := true ;
15500: LD_ADDR_EXP 112
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// if p3 = 118 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 118
15515: EQUAL
15516: IFFALSE 15526
// s60 := true ;
15518: LD_ADDR_EXP 113
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// end ; if p2 = 101 then
15526: LD_VAR 0 2
15530: PUSH
15531: LD_INT 101
15533: EQUAL
15534: IFFALSE 15662
// begin case p3 of 1 :
15536: LD_VAR 0 3
15540: PUSH
15541: LD_INT 1
15543: DOUBLE
15544: EQUAL
15545: IFTRUE 15549
15547: GO 15556
15549: POP
// hHackUnlimitedResources ; 2 :
15550: CALL 27258 0 0
15554: GO 15662
15556: LD_INT 2
15558: DOUBLE
15559: EQUAL
15560: IFTRUE 15564
15562: GO 15571
15564: POP
// hHackSetLevel10 ; 3 :
15565: CALL 27391 0 0
15569: GO 15662
15571: LD_INT 3
15573: DOUBLE
15574: EQUAL
15575: IFTRUE 15579
15577: GO 15586
15579: POP
// hHackSetLevel10YourUnits ; 4 :
15580: CALL 27476 0 0
15584: GO 15662
15586: LD_INT 4
15588: DOUBLE
15589: EQUAL
15590: IFTRUE 15594
15592: GO 15601
15594: POP
// hHackInvincible ; 5 :
15595: CALL 27924 0 0
15599: GO 15662
15601: LD_INT 5
15603: DOUBLE
15604: EQUAL
15605: IFTRUE 15609
15607: GO 15616
15609: POP
// hHackInvisible ; 6 :
15610: CALL 28035 0 0
15614: GO 15662
15616: LD_INT 6
15618: DOUBLE
15619: EQUAL
15620: IFTRUE 15624
15622: GO 15631
15624: POP
// hHackChangeYourSide ; 7 :
15625: CALL 28092 0 0
15629: GO 15662
15631: LD_INT 7
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15646
15639: POP
// hHackChangeUnitSide ; 8 :
15640: CALL 28134 0 0
15644: GO 15662
15646: LD_INT 8
15648: DOUBLE
15649: EQUAL
15650: IFTRUE 15654
15652: GO 15661
15654: POP
// hHackFog ; end ;
15655: CALL 28235 0 0
15659: GO 15662
15661: POP
// end ; end ;
15662: LD_VAR 0 7
15666: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15667: GO 15669
15669: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15670: LD_STRING initStreamRollete();
15672: PPUSH
15673: CALL_OW 559
// InitStreamMode ;
15677: CALL 15686 0 0
// DefineStreamItems ( ) ;
15681: CALL 16150 0 0
// end ;
15685: END
// function InitStreamMode ; begin
15686: LD_INT 0
15688: PPUSH
// streamModeActive := false ;
15689: LD_ADDR_EXP 57
15693: PUSH
15694: LD_INT 0
15696: ST_TO_ADDR
// normalCounter := 36 ;
15697: LD_ADDR_EXP 58
15701: PUSH
15702: LD_INT 36
15704: ST_TO_ADDR
// hardcoreCounter := 16 ;
15705: LD_ADDR_EXP 59
15709: PUSH
15710: LD_INT 16
15712: ST_TO_ADDR
// sRocket := false ;
15713: LD_ADDR_EXP 62
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// sSpeed := false ;
15721: LD_ADDR_EXP 61
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
// sEngine := false ;
15729: LD_ADDR_EXP 63
15733: PUSH
15734: LD_INT 0
15736: ST_TO_ADDR
// sSpec := false ;
15737: LD_ADDR_EXP 60
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// sLevel := false ;
15745: LD_ADDR_EXP 64
15749: PUSH
15750: LD_INT 0
15752: ST_TO_ADDR
// sArmoury := false ;
15753: LD_ADDR_EXP 65
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
// sRadar := false ;
15761: LD_ADDR_EXP 66
15765: PUSH
15766: LD_INT 0
15768: ST_TO_ADDR
// sBunker := false ;
15769: LD_ADDR_EXP 67
15773: PUSH
15774: LD_INT 0
15776: ST_TO_ADDR
// sHack := false ;
15777: LD_ADDR_EXP 68
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// sFire := false ;
15785: LD_ADDR_EXP 69
15789: PUSH
15790: LD_INT 0
15792: ST_TO_ADDR
// sRefresh := false ;
15793: LD_ADDR_EXP 70
15797: PUSH
15798: LD_INT 0
15800: ST_TO_ADDR
// sExp := false ;
15801: LD_ADDR_EXP 71
15805: PUSH
15806: LD_INT 0
15808: ST_TO_ADDR
// sDepot := false ;
15809: LD_ADDR_EXP 72
15813: PUSH
15814: LD_INT 0
15816: ST_TO_ADDR
// sFlag := false ;
15817: LD_ADDR_EXP 73
15821: PUSH
15822: LD_INT 0
15824: ST_TO_ADDR
// sKamikadze := false ;
15825: LD_ADDR_EXP 81
15829: PUSH
15830: LD_INT 0
15832: ST_TO_ADDR
// sTroll := false ;
15833: LD_ADDR_EXP 82
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// sSlow := false ;
15841: LD_ADDR_EXP 83
15845: PUSH
15846: LD_INT 0
15848: ST_TO_ADDR
// sLack := false ;
15849: LD_ADDR_EXP 84
15853: PUSH
15854: LD_INT 0
15856: ST_TO_ADDR
// sTank := false ;
15857: LD_ADDR_EXP 86
15861: PUSH
15862: LD_INT 0
15864: ST_TO_ADDR
// sRemote := false ;
15865: LD_ADDR_EXP 87
15869: PUSH
15870: LD_INT 0
15872: ST_TO_ADDR
// sPowell := false ;
15873: LD_ADDR_EXP 88
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// sTeleport := false ;
15881: LD_ADDR_EXP 91
15885: PUSH
15886: LD_INT 0
15888: ST_TO_ADDR
// sOilTower := false ;
15889: LD_ADDR_EXP 93
15893: PUSH
15894: LD_INT 0
15896: ST_TO_ADDR
// sShovel := false ;
15897: LD_ADDR_EXP 94
15901: PUSH
15902: LD_INT 0
15904: ST_TO_ADDR
// sSheik := false ;
15905: LD_ADDR_EXP 95
15909: PUSH
15910: LD_INT 0
15912: ST_TO_ADDR
// sEarthquake := false ;
15913: LD_ADDR_EXP 97
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// sAI := false ;
15921: LD_ADDR_EXP 98
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// sCargo := false ;
15929: LD_ADDR_EXP 101
15933: PUSH
15934: LD_INT 0
15936: ST_TO_ADDR
// sDLaser := false ;
15937: LD_ADDR_EXP 102
15941: PUSH
15942: LD_INT 0
15944: ST_TO_ADDR
// sExchange := false ;
15945: LD_ADDR_EXP 103
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// sFac := false ;
15953: LD_ADDR_EXP 104
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// sPower := false ;
15961: LD_ADDR_EXP 105
15965: PUSH
15966: LD_INT 0
15968: ST_TO_ADDR
// sRandom := false ;
15969: LD_ADDR_EXP 106
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// sShield := false ;
15977: LD_ADDR_EXP 107
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// sTime := false ;
15985: LD_ADDR_EXP 108
15989: PUSH
15990: LD_INT 0
15992: ST_TO_ADDR
// sTools := false ;
15993: LD_ADDR_EXP 109
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// sSold := false ;
16001: LD_ADDR_EXP 74
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
// sDiff := false ;
16009: LD_ADDR_EXP 75
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// sFog := false ;
16017: LD_ADDR_EXP 78
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// sReset := false ;
16025: LD_ADDR_EXP 79
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// sSun := false ;
16033: LD_ADDR_EXP 80
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// sTiger := false ;
16041: LD_ADDR_EXP 76
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// sBomb := false ;
16049: LD_ADDR_EXP 77
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// sWound := false ;
16057: LD_ADDR_EXP 85
16061: PUSH
16062: LD_INT 0
16064: ST_TO_ADDR
// sBetray := false ;
16065: LD_ADDR_EXP 89
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// sContamin := false ;
16073: LD_ADDR_EXP 90
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// sOil := false ;
16081: LD_ADDR_EXP 92
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// sStu := false ;
16089: LD_ADDR_EXP 96
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// sBazooka := false ;
16097: LD_ADDR_EXP 99
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// sMortar := false ;
16105: LD_ADDR_EXP 100
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// sRanger := false ;
16113: LD_ADDR_EXP 110
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// sComputer := false ;
16121: LD_ADDR_EXP 111
16125: PUSH
16126: LD_INT 0
16128: ST_TO_ADDR
// s30 := false ;
16129: LD_ADDR_EXP 112
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// s60 := false ;
16137: LD_ADDR_EXP 113
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// end ;
16145: LD_VAR 0 1
16149: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16150: LD_INT 0
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
// result := [ ] ;
16157: LD_ADDR_VAR 0 1
16161: PUSH
16162: EMPTY
16163: ST_TO_ADDR
// if campaign_id = 1 then
16164: LD_OWVAR 69
16168: PUSH
16169: LD_INT 1
16171: EQUAL
16172: IFFALSE 19338
// begin case mission_number of 1 :
16174: LD_OWVAR 70
16178: PUSH
16179: LD_INT 1
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16263
16187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_INT 2
16195: PUSH
16196: LD_INT 4
16198: PUSH
16199: LD_INT 11
16201: PUSH
16202: LD_INT 12
16204: PUSH
16205: LD_INT 15
16207: PUSH
16208: LD_INT 16
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 26
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 101
16233: PUSH
16234: LD_INT 102
16236: PUSH
16237: LD_INT 106
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: ST_TO_ADDR
16261: GO 19336
16263: LD_INT 2
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16355
16271: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 2
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: LD_INT 11
16285: PUSH
16286: LD_INT 12
16288: PUSH
16289: LD_INT 15
16291: PUSH
16292: LD_INT 16
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 26
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 101
16317: PUSH
16318: LD_INT 102
16320: PUSH
16321: LD_INT 105
16323: PUSH
16324: LD_INT 106
16326: PUSH
16327: LD_INT 108
16329: PUSH
16330: LD_INT 116
16332: PUSH
16333: LD_INT 117
16335: PUSH
16336: LD_INT 118
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: ST_TO_ADDR
16353: GO 19336
16355: LD_INT 3
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16451
16363: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16364: LD_ADDR_VAR 0 1
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 4
16374: PUSH
16375: LD_INT 5
16377: PUSH
16378: LD_INT 11
16380: PUSH
16381: LD_INT 12
16383: PUSH
16384: LD_INT 15
16386: PUSH
16387: LD_INT 16
16389: PUSH
16390: LD_INT 22
16392: PUSH
16393: LD_INT 26
16395: PUSH
16396: LD_INT 36
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 101
16413: PUSH
16414: LD_INT 102
16416: PUSH
16417: LD_INT 105
16419: PUSH
16420: LD_INT 106
16422: PUSH
16423: LD_INT 108
16425: PUSH
16426: LD_INT 116
16428: PUSH
16429: LD_INT 117
16431: PUSH
16432: LD_INT 118
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: ST_TO_ADDR
16449: GO 19336
16451: LD_INT 4
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16555
16459: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16460: LD_ADDR_VAR 0 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 4
16470: PUSH
16471: LD_INT 5
16473: PUSH
16474: LD_INT 8
16476: PUSH
16477: LD_INT 11
16479: PUSH
16480: LD_INT 12
16482: PUSH
16483: LD_INT 15
16485: PUSH
16486: LD_INT 16
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_INT 23
16494: PUSH
16495: LD_INT 26
16497: PUSH
16498: LD_INT 36
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 101
16517: PUSH
16518: LD_INT 102
16520: PUSH
16521: LD_INT 105
16523: PUSH
16524: LD_INT 106
16526: PUSH
16527: LD_INT 108
16529: PUSH
16530: LD_INT 116
16532: PUSH
16533: LD_INT 117
16535: PUSH
16536: LD_INT 118
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: ST_TO_ADDR
16553: GO 19336
16555: LD_INT 5
16557: DOUBLE
16558: EQUAL
16559: IFTRUE 16563
16561: GO 16675
16563: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: LD_INT 4
16574: PUSH
16575: LD_INT 5
16577: PUSH
16578: LD_INT 6
16580: PUSH
16581: LD_INT 8
16583: PUSH
16584: LD_INT 11
16586: PUSH
16587: LD_INT 12
16589: PUSH
16590: LD_INT 15
16592: PUSH
16593: LD_INT 16
16595: PUSH
16596: LD_INT 22
16598: PUSH
16599: LD_INT 23
16601: PUSH
16602: LD_INT 25
16604: PUSH
16605: LD_INT 26
16607: PUSH
16608: LD_INT 36
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 101
16629: PUSH
16630: LD_INT 102
16632: PUSH
16633: LD_INT 105
16635: PUSH
16636: LD_INT 106
16638: PUSH
16639: LD_INT 108
16641: PUSH
16642: LD_INT 109
16644: PUSH
16645: LD_INT 112
16647: PUSH
16648: LD_INT 116
16650: PUSH
16651: LD_INT 117
16653: PUSH
16654: LD_INT 118
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: ST_TO_ADDR
16673: GO 19336
16675: LD_INT 6
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16815
16683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 4
16694: PUSH
16695: LD_INT 5
16697: PUSH
16698: LD_INT 6
16700: PUSH
16701: LD_INT 8
16703: PUSH
16704: LD_INT 11
16706: PUSH
16707: LD_INT 12
16709: PUSH
16710: LD_INT 15
16712: PUSH
16713: LD_INT 16
16715: PUSH
16716: LD_INT 20
16718: PUSH
16719: LD_INT 21
16721: PUSH
16722: LD_INT 22
16724: PUSH
16725: LD_INT 23
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 26
16733: PUSH
16734: LD_INT 30
16736: PUSH
16737: LD_INT 31
16739: PUSH
16740: LD_INT 32
16742: PUSH
16743: LD_INT 36
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 101
16769: PUSH
16770: LD_INT 102
16772: PUSH
16773: LD_INT 105
16775: PUSH
16776: LD_INT 106
16778: PUSH
16779: LD_INT 108
16781: PUSH
16782: LD_INT 109
16784: PUSH
16785: LD_INT 112
16787: PUSH
16788: LD_INT 116
16790: PUSH
16791: LD_INT 117
16793: PUSH
16794: LD_INT 118
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: ST_TO_ADDR
16813: GO 19336
16815: LD_INT 7
16817: DOUBLE
16818: EQUAL
16819: IFTRUE 16823
16821: GO 16935
16823: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: LD_INT 4
16834: PUSH
16835: LD_INT 5
16837: PUSH
16838: LD_INT 7
16840: PUSH
16841: LD_INT 11
16843: PUSH
16844: LD_INT 12
16846: PUSH
16847: LD_INT 15
16849: PUSH
16850: LD_INT 16
16852: PUSH
16853: LD_INT 20
16855: PUSH
16856: LD_INT 21
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_INT 23
16864: PUSH
16865: LD_INT 25
16867: PUSH
16868: LD_INT 26
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 101
16889: PUSH
16890: LD_INT 102
16892: PUSH
16893: LD_INT 103
16895: PUSH
16896: LD_INT 105
16898: PUSH
16899: LD_INT 106
16901: PUSH
16902: LD_INT 108
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 116
16910: PUSH
16911: LD_INT 117
16913: PUSH
16914: LD_INT 118
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: ST_TO_ADDR
16933: GO 19336
16935: LD_INT 8
16937: DOUBLE
16938: EQUAL
16939: IFTRUE 16943
16941: GO 17083
16943: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16944: LD_ADDR_VAR 0 1
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: LD_INT 4
16954: PUSH
16955: LD_INT 5
16957: PUSH
16958: LD_INT 6
16960: PUSH
16961: LD_INT 7
16963: PUSH
16964: LD_INT 8
16966: PUSH
16967: LD_INT 11
16969: PUSH
16970: LD_INT 12
16972: PUSH
16973: LD_INT 15
16975: PUSH
16976: LD_INT 16
16978: PUSH
16979: LD_INT 20
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: LD_INT 22
16987: PUSH
16988: LD_INT 23
16990: PUSH
16991: LD_INT 25
16993: PUSH
16994: LD_INT 26
16996: PUSH
16997: LD_INT 30
16999: PUSH
17000: LD_INT 31
17002: PUSH
17003: LD_INT 32
17005: PUSH
17006: LD_INT 36
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 101
17033: PUSH
17034: LD_INT 102
17036: PUSH
17037: LD_INT 103
17039: PUSH
17040: LD_INT 105
17042: PUSH
17043: LD_INT 106
17045: PUSH
17046: LD_INT 108
17048: PUSH
17049: LD_INT 109
17051: PUSH
17052: LD_INT 112
17054: PUSH
17055: LD_INT 116
17057: PUSH
17058: LD_INT 117
17060: PUSH
17061: LD_INT 118
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: ST_TO_ADDR
17081: GO 19336
17083: LD_INT 9
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17239
17091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17092: LD_ADDR_VAR 0 1
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 4
17102: PUSH
17103: LD_INT 5
17105: PUSH
17106: LD_INT 6
17108: PUSH
17109: LD_INT 7
17111: PUSH
17112: LD_INT 8
17114: PUSH
17115: LD_INT 11
17117: PUSH
17118: LD_INT 12
17120: PUSH
17121: LD_INT 15
17123: PUSH
17124: LD_INT 16
17126: PUSH
17127: LD_INT 20
17129: PUSH
17130: LD_INT 21
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_INT 23
17138: PUSH
17139: LD_INT 25
17141: PUSH
17142: LD_INT 26
17144: PUSH
17145: LD_INT 28
17147: PUSH
17148: LD_INT 30
17150: PUSH
17151: LD_INT 31
17153: PUSH
17154: LD_INT 32
17156: PUSH
17157: LD_INT 36
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 101
17185: PUSH
17186: LD_INT 102
17188: PUSH
17189: LD_INT 103
17191: PUSH
17192: LD_INT 105
17194: PUSH
17195: LD_INT 106
17197: PUSH
17198: LD_INT 108
17200: PUSH
17201: LD_INT 109
17203: PUSH
17204: LD_INT 112
17206: PUSH
17207: LD_INT 114
17209: PUSH
17210: LD_INT 116
17212: PUSH
17213: LD_INT 117
17215: PUSH
17216: LD_INT 118
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: ST_TO_ADDR
17237: GO 19336
17239: LD_INT 10
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17443
17247: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17248: LD_ADDR_VAR 0 1
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: LD_INT 4
17258: PUSH
17259: LD_INT 5
17261: PUSH
17262: LD_INT 6
17264: PUSH
17265: LD_INT 7
17267: PUSH
17268: LD_INT 8
17270: PUSH
17271: LD_INT 9
17273: PUSH
17274: LD_INT 10
17276: PUSH
17277: LD_INT 11
17279: PUSH
17280: LD_INT 12
17282: PUSH
17283: LD_INT 13
17285: PUSH
17286: LD_INT 14
17288: PUSH
17289: LD_INT 15
17291: PUSH
17292: LD_INT 16
17294: PUSH
17295: LD_INT 17
17297: PUSH
17298: LD_INT 18
17300: PUSH
17301: LD_INT 19
17303: PUSH
17304: LD_INT 20
17306: PUSH
17307: LD_INT 21
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 23
17315: PUSH
17316: LD_INT 24
17318: PUSH
17319: LD_INT 25
17321: PUSH
17322: LD_INT 26
17324: PUSH
17325: LD_INT 28
17327: PUSH
17328: LD_INT 30
17330: PUSH
17331: LD_INT 31
17333: PUSH
17334: LD_INT 32
17336: PUSH
17337: LD_INT 36
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 101
17373: PUSH
17374: LD_INT 102
17376: PUSH
17377: LD_INT 103
17379: PUSH
17380: LD_INT 104
17382: PUSH
17383: LD_INT 105
17385: PUSH
17386: LD_INT 106
17388: PUSH
17389: LD_INT 107
17391: PUSH
17392: LD_INT 108
17394: PUSH
17395: LD_INT 109
17397: PUSH
17398: LD_INT 110
17400: PUSH
17401: LD_INT 111
17403: PUSH
17404: LD_INT 112
17406: PUSH
17407: LD_INT 114
17409: PUSH
17410: LD_INT 116
17412: PUSH
17413: LD_INT 117
17415: PUSH
17416: LD_INT 118
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: ST_TO_ADDR
17441: GO 19336
17443: LD_INT 11
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17655
17451: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 3
17462: PUSH
17463: LD_INT 4
17465: PUSH
17466: LD_INT 5
17468: PUSH
17469: LD_INT 6
17471: PUSH
17472: LD_INT 7
17474: PUSH
17475: LD_INT 8
17477: PUSH
17478: LD_INT 9
17480: PUSH
17481: LD_INT 10
17483: PUSH
17484: LD_INT 11
17486: PUSH
17487: LD_INT 12
17489: PUSH
17490: LD_INT 13
17492: PUSH
17493: LD_INT 14
17495: PUSH
17496: LD_INT 15
17498: PUSH
17499: LD_INT 16
17501: PUSH
17502: LD_INT 17
17504: PUSH
17505: LD_INT 18
17507: PUSH
17508: LD_INT 19
17510: PUSH
17511: LD_INT 20
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 22
17519: PUSH
17520: LD_INT 23
17522: PUSH
17523: LD_INT 24
17525: PUSH
17526: LD_INT 25
17528: PUSH
17529: LD_INT 26
17531: PUSH
17532: LD_INT 28
17534: PUSH
17535: LD_INT 30
17537: PUSH
17538: LD_INT 31
17540: PUSH
17541: LD_INT 32
17543: PUSH
17544: LD_INT 34
17546: PUSH
17547: LD_INT 36
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 101
17585: PUSH
17586: LD_INT 102
17588: PUSH
17589: LD_INT 103
17591: PUSH
17592: LD_INT 104
17594: PUSH
17595: LD_INT 105
17597: PUSH
17598: LD_INT 106
17600: PUSH
17601: LD_INT 107
17603: PUSH
17604: LD_INT 108
17606: PUSH
17607: LD_INT 109
17609: PUSH
17610: LD_INT 110
17612: PUSH
17613: LD_INT 111
17615: PUSH
17616: LD_INT 112
17618: PUSH
17619: LD_INT 114
17621: PUSH
17622: LD_INT 116
17624: PUSH
17625: LD_INT 117
17627: PUSH
17628: LD_INT 118
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: ST_TO_ADDR
17653: GO 19336
17655: LD_INT 12
17657: DOUBLE
17658: EQUAL
17659: IFTRUE 17663
17661: GO 17883
17663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17664: LD_ADDR_VAR 0 1
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: LD_INT 4
17680: PUSH
17681: LD_INT 5
17683: PUSH
17684: LD_INT 6
17686: PUSH
17687: LD_INT 7
17689: PUSH
17690: LD_INT 8
17692: PUSH
17693: LD_INT 9
17695: PUSH
17696: LD_INT 10
17698: PUSH
17699: LD_INT 11
17701: PUSH
17702: LD_INT 12
17704: PUSH
17705: LD_INT 13
17707: PUSH
17708: LD_INT 14
17710: PUSH
17711: LD_INT 15
17713: PUSH
17714: LD_INT 16
17716: PUSH
17717: LD_INT 17
17719: PUSH
17720: LD_INT 18
17722: PUSH
17723: LD_INT 19
17725: PUSH
17726: LD_INT 20
17728: PUSH
17729: LD_INT 21
17731: PUSH
17732: LD_INT 22
17734: PUSH
17735: LD_INT 23
17737: PUSH
17738: LD_INT 24
17740: PUSH
17741: LD_INT 25
17743: PUSH
17744: LD_INT 26
17746: PUSH
17747: LD_INT 27
17749: PUSH
17750: LD_INT 28
17752: PUSH
17753: LD_INT 30
17755: PUSH
17756: LD_INT 31
17758: PUSH
17759: LD_INT 32
17761: PUSH
17762: LD_INT 33
17764: PUSH
17765: LD_INT 34
17767: PUSH
17768: LD_INT 36
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 101
17809: PUSH
17810: LD_INT 102
17812: PUSH
17813: LD_INT 103
17815: PUSH
17816: LD_INT 104
17818: PUSH
17819: LD_INT 105
17821: PUSH
17822: LD_INT 106
17824: PUSH
17825: LD_INT 107
17827: PUSH
17828: LD_INT 108
17830: PUSH
17831: LD_INT 109
17833: PUSH
17834: LD_INT 110
17836: PUSH
17837: LD_INT 111
17839: PUSH
17840: LD_INT 112
17842: PUSH
17843: LD_INT 113
17845: PUSH
17846: LD_INT 114
17848: PUSH
17849: LD_INT 116
17851: PUSH
17852: LD_INT 117
17854: PUSH
17855: LD_INT 118
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: ST_TO_ADDR
17881: GO 19336
17883: LD_INT 13
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 18099
17891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17892: LD_ADDR_VAR 0 1
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: LD_INT 3
17905: PUSH
17906: LD_INT 4
17908: PUSH
17909: LD_INT 5
17911: PUSH
17912: LD_INT 8
17914: PUSH
17915: LD_INT 9
17917: PUSH
17918: LD_INT 10
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: LD_INT 14
17929: PUSH
17930: LD_INT 15
17932: PUSH
17933: LD_INT 16
17935: PUSH
17936: LD_INT 17
17938: PUSH
17939: LD_INT 18
17941: PUSH
17942: LD_INT 19
17944: PUSH
17945: LD_INT 20
17947: PUSH
17948: LD_INT 21
17950: PUSH
17951: LD_INT 22
17953: PUSH
17954: LD_INT 23
17956: PUSH
17957: LD_INT 24
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 26
17965: PUSH
17966: LD_INT 27
17968: PUSH
17969: LD_INT 28
17971: PUSH
17972: LD_INT 30
17974: PUSH
17975: LD_INT 31
17977: PUSH
17978: LD_INT 32
17980: PUSH
17981: LD_INT 33
17983: PUSH
17984: LD_INT 34
17986: PUSH
17987: LD_INT 36
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 101
18025: PUSH
18026: LD_INT 102
18028: PUSH
18029: LD_INT 103
18031: PUSH
18032: LD_INT 104
18034: PUSH
18035: LD_INT 105
18037: PUSH
18038: LD_INT 106
18040: PUSH
18041: LD_INT 107
18043: PUSH
18044: LD_INT 108
18046: PUSH
18047: LD_INT 109
18049: PUSH
18050: LD_INT 110
18052: PUSH
18053: LD_INT 111
18055: PUSH
18056: LD_INT 112
18058: PUSH
18059: LD_INT 113
18061: PUSH
18062: LD_INT 114
18064: PUSH
18065: LD_INT 116
18067: PUSH
18068: LD_INT 117
18070: PUSH
18071: LD_INT 118
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: ST_TO_ADDR
18097: GO 19336
18099: LD_INT 14
18101: DOUBLE
18102: EQUAL
18103: IFTRUE 18107
18105: GO 18331
18107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18108: LD_ADDR_VAR 0 1
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 4
18124: PUSH
18125: LD_INT 5
18127: PUSH
18128: LD_INT 6
18130: PUSH
18131: LD_INT 7
18133: PUSH
18134: LD_INT 8
18136: PUSH
18137: LD_INT 9
18139: PUSH
18140: LD_INT 10
18142: PUSH
18143: LD_INT 11
18145: PUSH
18146: LD_INT 12
18148: PUSH
18149: LD_INT 13
18151: PUSH
18152: LD_INT 14
18154: PUSH
18155: LD_INT 15
18157: PUSH
18158: LD_INT 16
18160: PUSH
18161: LD_INT 17
18163: PUSH
18164: LD_INT 18
18166: PUSH
18167: LD_INT 19
18169: PUSH
18170: LD_INT 20
18172: PUSH
18173: LD_INT 21
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_INT 23
18181: PUSH
18182: LD_INT 24
18184: PUSH
18185: LD_INT 25
18187: PUSH
18188: LD_INT 26
18190: PUSH
18191: LD_INT 27
18193: PUSH
18194: LD_INT 28
18196: PUSH
18197: LD_INT 29
18199: PUSH
18200: LD_INT 30
18202: PUSH
18203: LD_INT 31
18205: PUSH
18206: LD_INT 32
18208: PUSH
18209: LD_INT 33
18211: PUSH
18212: LD_INT 34
18214: PUSH
18215: LD_INT 36
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 101
18257: PUSH
18258: LD_INT 102
18260: PUSH
18261: LD_INT 103
18263: PUSH
18264: LD_INT 104
18266: PUSH
18267: LD_INT 105
18269: PUSH
18270: LD_INT 106
18272: PUSH
18273: LD_INT 107
18275: PUSH
18276: LD_INT 108
18278: PUSH
18279: LD_INT 109
18281: PUSH
18282: LD_INT 110
18284: PUSH
18285: LD_INT 111
18287: PUSH
18288: LD_INT 112
18290: PUSH
18291: LD_INT 113
18293: PUSH
18294: LD_INT 114
18296: PUSH
18297: LD_INT 116
18299: PUSH
18300: LD_INT 117
18302: PUSH
18303: LD_INT 118
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: ST_TO_ADDR
18329: GO 19336
18331: LD_INT 15
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18563
18339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: LD_INT 3
18353: PUSH
18354: LD_INT 4
18356: PUSH
18357: LD_INT 5
18359: PUSH
18360: LD_INT 6
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: LD_INT 8
18368: PUSH
18369: LD_INT 9
18371: PUSH
18372: LD_INT 10
18374: PUSH
18375: LD_INT 11
18377: PUSH
18378: LD_INT 12
18380: PUSH
18381: LD_INT 13
18383: PUSH
18384: LD_INT 14
18386: PUSH
18387: LD_INT 15
18389: PUSH
18390: LD_INT 16
18392: PUSH
18393: LD_INT 17
18395: PUSH
18396: LD_INT 18
18398: PUSH
18399: LD_INT 19
18401: PUSH
18402: LD_INT 20
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_INT 23
18413: PUSH
18414: LD_INT 24
18416: PUSH
18417: LD_INT 25
18419: PUSH
18420: LD_INT 26
18422: PUSH
18423: LD_INT 27
18425: PUSH
18426: LD_INT 28
18428: PUSH
18429: LD_INT 29
18431: PUSH
18432: LD_INT 30
18434: PUSH
18435: LD_INT 31
18437: PUSH
18438: LD_INT 32
18440: PUSH
18441: LD_INT 33
18443: PUSH
18444: LD_INT 34
18446: PUSH
18447: LD_INT 36
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 101
18489: PUSH
18490: LD_INT 102
18492: PUSH
18493: LD_INT 103
18495: PUSH
18496: LD_INT 104
18498: PUSH
18499: LD_INT 105
18501: PUSH
18502: LD_INT 106
18504: PUSH
18505: LD_INT 107
18507: PUSH
18508: LD_INT 108
18510: PUSH
18511: LD_INT 109
18513: PUSH
18514: LD_INT 110
18516: PUSH
18517: LD_INT 111
18519: PUSH
18520: LD_INT 112
18522: PUSH
18523: LD_INT 113
18525: PUSH
18526: LD_INT 114
18528: PUSH
18529: LD_INT 116
18531: PUSH
18532: LD_INT 117
18534: PUSH
18535: LD_INT 118
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: ST_TO_ADDR
18561: GO 19336
18563: LD_INT 16
18565: DOUBLE
18566: EQUAL
18567: IFTRUE 18571
18569: GO 18707
18571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 4
18582: PUSH
18583: LD_INT 5
18585: PUSH
18586: LD_INT 7
18588: PUSH
18589: LD_INT 11
18591: PUSH
18592: LD_INT 12
18594: PUSH
18595: LD_INT 15
18597: PUSH
18598: LD_INT 16
18600: PUSH
18601: LD_INT 20
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 22
18609: PUSH
18610: LD_INT 23
18612: PUSH
18613: LD_INT 25
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 30
18621: PUSH
18622: LD_INT 31
18624: PUSH
18625: LD_INT 32
18627: PUSH
18628: LD_INT 33
18630: PUSH
18631: LD_INT 34
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 101
18657: PUSH
18658: LD_INT 102
18660: PUSH
18661: LD_INT 103
18663: PUSH
18664: LD_INT 106
18666: PUSH
18667: LD_INT 108
18669: PUSH
18670: LD_INT 112
18672: PUSH
18673: LD_INT 113
18675: PUSH
18676: LD_INT 114
18678: PUSH
18679: LD_INT 116
18681: PUSH
18682: LD_INT 117
18684: PUSH
18685: LD_INT 118
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: ST_TO_ADDR
18705: GO 19336
18707: LD_INT 17
18709: DOUBLE
18710: EQUAL
18711: IFTRUE 18715
18713: GO 18939
18715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: LD_INT 4
18732: PUSH
18733: LD_INT 5
18735: PUSH
18736: LD_INT 6
18738: PUSH
18739: LD_INT 7
18741: PUSH
18742: LD_INT 8
18744: PUSH
18745: LD_INT 9
18747: PUSH
18748: LD_INT 10
18750: PUSH
18751: LD_INT 11
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: LD_INT 13
18759: PUSH
18760: LD_INT 14
18762: PUSH
18763: LD_INT 15
18765: PUSH
18766: LD_INT 16
18768: PUSH
18769: LD_INT 17
18771: PUSH
18772: LD_INT 18
18774: PUSH
18775: LD_INT 19
18777: PUSH
18778: LD_INT 20
18780: PUSH
18781: LD_INT 21
18783: PUSH
18784: LD_INT 22
18786: PUSH
18787: LD_INT 23
18789: PUSH
18790: LD_INT 24
18792: PUSH
18793: LD_INT 25
18795: PUSH
18796: LD_INT 26
18798: PUSH
18799: LD_INT 27
18801: PUSH
18802: LD_INT 28
18804: PUSH
18805: LD_INT 29
18807: PUSH
18808: LD_INT 30
18810: PUSH
18811: LD_INT 31
18813: PUSH
18814: LD_INT 32
18816: PUSH
18817: LD_INT 33
18819: PUSH
18820: LD_INT 34
18822: PUSH
18823: LD_INT 36
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 101
18865: PUSH
18866: LD_INT 102
18868: PUSH
18869: LD_INT 103
18871: PUSH
18872: LD_INT 104
18874: PUSH
18875: LD_INT 105
18877: PUSH
18878: LD_INT 106
18880: PUSH
18881: LD_INT 107
18883: PUSH
18884: LD_INT 108
18886: PUSH
18887: LD_INT 109
18889: PUSH
18890: LD_INT 110
18892: PUSH
18893: LD_INT 111
18895: PUSH
18896: LD_INT 112
18898: PUSH
18899: LD_INT 113
18901: PUSH
18902: LD_INT 114
18904: PUSH
18905: LD_INT 116
18907: PUSH
18908: LD_INT 117
18910: PUSH
18911: LD_INT 118
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: ST_TO_ADDR
18937: GO 19336
18939: LD_INT 18
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 19095
18947: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18948: LD_ADDR_VAR 0 1
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 4
18958: PUSH
18959: LD_INT 5
18961: PUSH
18962: LD_INT 7
18964: PUSH
18965: LD_INT 11
18967: PUSH
18968: LD_INT 12
18970: PUSH
18971: LD_INT 15
18973: PUSH
18974: LD_INT 16
18976: PUSH
18977: LD_INT 20
18979: PUSH
18980: LD_INT 21
18982: PUSH
18983: LD_INT 22
18985: PUSH
18986: LD_INT 23
18988: PUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 26
18994: PUSH
18995: LD_INT 30
18997: PUSH
18998: LD_INT 31
19000: PUSH
19001: LD_INT 32
19003: PUSH
19004: LD_INT 33
19006: PUSH
19007: LD_INT 34
19009: PUSH
19010: LD_INT 35
19012: PUSH
19013: LD_INT 36
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 101
19041: PUSH
19042: LD_INT 102
19044: PUSH
19045: LD_INT 103
19047: PUSH
19048: LD_INT 106
19050: PUSH
19051: LD_INT 108
19053: PUSH
19054: LD_INT 112
19056: PUSH
19057: LD_INT 113
19059: PUSH
19060: LD_INT 114
19062: PUSH
19063: LD_INT 115
19065: PUSH
19066: LD_INT 116
19068: PUSH
19069: LD_INT 117
19071: PUSH
19072: LD_INT 118
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ST_TO_ADDR
19093: GO 19336
19095: LD_INT 19
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19335
19103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19104: LD_ADDR_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: LD_INT 4
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: LD_INT 6
19126: PUSH
19127: LD_INT 7
19129: PUSH
19130: LD_INT 8
19132: PUSH
19133: LD_INT 9
19135: PUSH
19136: LD_INT 10
19138: PUSH
19139: LD_INT 11
19141: PUSH
19142: LD_INT 12
19144: PUSH
19145: LD_INT 13
19147: PUSH
19148: LD_INT 14
19150: PUSH
19151: LD_INT 15
19153: PUSH
19154: LD_INT 16
19156: PUSH
19157: LD_INT 17
19159: PUSH
19160: LD_INT 18
19162: PUSH
19163: LD_INT 19
19165: PUSH
19166: LD_INT 20
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 22
19174: PUSH
19175: LD_INT 23
19177: PUSH
19178: LD_INT 24
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 26
19186: PUSH
19187: LD_INT 27
19189: PUSH
19190: LD_INT 28
19192: PUSH
19193: LD_INT 29
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: LD_INT 31
19201: PUSH
19202: LD_INT 32
19204: PUSH
19205: LD_INT 33
19207: PUSH
19208: LD_INT 34
19210: PUSH
19211: LD_INT 35
19213: PUSH
19214: LD_INT 36
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 101
19257: PUSH
19258: LD_INT 102
19260: PUSH
19261: LD_INT 103
19263: PUSH
19264: LD_INT 104
19266: PUSH
19267: LD_INT 105
19269: PUSH
19270: LD_INT 106
19272: PUSH
19273: LD_INT 107
19275: PUSH
19276: LD_INT 108
19278: PUSH
19279: LD_INT 109
19281: PUSH
19282: LD_INT 110
19284: PUSH
19285: LD_INT 111
19287: PUSH
19288: LD_INT 112
19290: PUSH
19291: LD_INT 113
19293: PUSH
19294: LD_INT 114
19296: PUSH
19297: LD_INT 115
19299: PUSH
19300: LD_INT 116
19302: PUSH
19303: LD_INT 117
19305: PUSH
19306: LD_INT 118
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: ST_TO_ADDR
19333: GO 19336
19335: POP
// end else
19336: GO 19567
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19338: LD_ADDR_VAR 0 1
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 4
19354: PUSH
19355: LD_INT 5
19357: PUSH
19358: LD_INT 6
19360: PUSH
19361: LD_INT 7
19363: PUSH
19364: LD_INT 8
19366: PUSH
19367: LD_INT 9
19369: PUSH
19370: LD_INT 10
19372: PUSH
19373: LD_INT 11
19375: PUSH
19376: LD_INT 12
19378: PUSH
19379: LD_INT 13
19381: PUSH
19382: LD_INT 14
19384: PUSH
19385: LD_INT 15
19387: PUSH
19388: LD_INT 16
19390: PUSH
19391: LD_INT 17
19393: PUSH
19394: LD_INT 18
19396: PUSH
19397: LD_INT 19
19399: PUSH
19400: LD_INT 20
19402: PUSH
19403: LD_INT 21
19405: PUSH
19406: LD_INT 22
19408: PUSH
19409: LD_INT 23
19411: PUSH
19412: LD_INT 24
19414: PUSH
19415: LD_INT 25
19417: PUSH
19418: LD_INT 26
19420: PUSH
19421: LD_INT 27
19423: PUSH
19424: LD_INT 28
19426: PUSH
19427: LD_INT 29
19429: PUSH
19430: LD_INT 30
19432: PUSH
19433: LD_INT 31
19435: PUSH
19436: LD_INT 32
19438: PUSH
19439: LD_INT 33
19441: PUSH
19442: LD_INT 34
19444: PUSH
19445: LD_INT 35
19447: PUSH
19448: LD_INT 36
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 101
19491: PUSH
19492: LD_INT 102
19494: PUSH
19495: LD_INT 103
19497: PUSH
19498: LD_INT 104
19500: PUSH
19501: LD_INT 105
19503: PUSH
19504: LD_INT 106
19506: PUSH
19507: LD_INT 107
19509: PUSH
19510: LD_INT 108
19512: PUSH
19513: LD_INT 109
19515: PUSH
19516: LD_INT 110
19518: PUSH
19519: LD_INT 111
19521: PUSH
19522: LD_INT 112
19524: PUSH
19525: LD_INT 113
19527: PUSH
19528: LD_INT 114
19530: PUSH
19531: LD_INT 115
19533: PUSH
19534: LD_INT 116
19536: PUSH
19537: LD_INT 117
19539: PUSH
19540: LD_INT 118
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: ST_TO_ADDR
// if result then
19567: LD_VAR 0 1
19571: IFFALSE 19860
// begin normal :=  ;
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_STRING 
19580: ST_TO_ADDR
// hardcore :=  ;
19581: LD_ADDR_VAR 0 4
19585: PUSH
19586: LD_STRING 
19588: ST_TO_ADDR
// for i = 1 to normalCounter do
19589: LD_ADDR_VAR 0 5
19593: PUSH
19594: DOUBLE
19595: LD_INT 1
19597: DEC
19598: ST_TO_ADDR
19599: LD_EXP 58
19603: PUSH
19604: FOR_TO
19605: IFFALSE 19706
// begin tmp := 0 ;
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_STRING 0
19614: ST_TO_ADDR
// if result [ 1 ] then
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 1
19622: ARRAY
19623: IFFALSE 19688
// if result [ 1 ] [ 1 ] = i then
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 1
19632: ARRAY
19633: PUSH
19634: LD_INT 1
19636: ARRAY
19637: PUSH
19638: LD_VAR 0 5
19642: EQUAL
19643: IFFALSE 19688
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19645: LD_ADDR_VAR 0 1
19649: PUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: LD_VAR 0 1
19662: PUSH
19663: LD_INT 1
19665: ARRAY
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: CALL_OW 3
19674: PPUSH
19675: CALL_OW 1
19679: ST_TO_ADDR
// tmp := 1 ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_STRING 1
19687: ST_TO_ADDR
// end ; normal := normal & tmp ;
19688: LD_ADDR_VAR 0 3
19692: PUSH
19693: LD_VAR 0 3
19697: PUSH
19698: LD_VAR 0 2
19702: STR
19703: ST_TO_ADDR
// end ;
19704: GO 19604
19706: POP
19707: POP
// for i = 1 to hardcoreCounter do
19708: LD_ADDR_VAR 0 5
19712: PUSH
19713: DOUBLE
19714: LD_INT 1
19716: DEC
19717: ST_TO_ADDR
19718: LD_EXP 59
19722: PUSH
19723: FOR_TO
19724: IFFALSE 19829
// begin tmp := 0 ;
19726: LD_ADDR_VAR 0 2
19730: PUSH
19731: LD_STRING 0
19733: ST_TO_ADDR
// if result [ 2 ] then
19734: LD_VAR 0 1
19738: PUSH
19739: LD_INT 2
19741: ARRAY
19742: IFFALSE 19811
// if result [ 2 ] [ 1 ] = 100 + i then
19744: LD_VAR 0 1
19748: PUSH
19749: LD_INT 2
19751: ARRAY
19752: PUSH
19753: LD_INT 1
19755: ARRAY
19756: PUSH
19757: LD_INT 100
19759: PUSH
19760: LD_VAR 0 5
19764: PLUS
19765: EQUAL
19766: IFFALSE 19811
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: LD_INT 2
19780: PPUSH
19781: LD_VAR 0 1
19785: PUSH
19786: LD_INT 2
19788: ARRAY
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 3
19797: PPUSH
19798: CALL_OW 1
19802: ST_TO_ADDR
// tmp := 1 ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_STRING 1
19810: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19811: LD_ADDR_VAR 0 4
19815: PUSH
19816: LD_VAR 0 4
19820: PUSH
19821: LD_VAR 0 2
19825: STR
19826: ST_TO_ADDR
// end ;
19827: GO 19723
19829: POP
19830: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19831: LD_STRING getStreamItemsFromMission("
19833: PUSH
19834: LD_VAR 0 3
19838: STR
19839: PUSH
19840: LD_STRING ","
19842: STR
19843: PUSH
19844: LD_VAR 0 4
19848: STR
19849: PUSH
19850: LD_STRING ")
19852: STR
19853: PPUSH
19854: CALL_OW 559
// end else
19858: GO 19867
// ToLua ( getStreamItemsFromMission("","") ) ;
19860: LD_STRING getStreamItemsFromMission("","")
19862: PPUSH
19863: CALL_OW 559
// end ;
19867: LD_VAR 0 1
19871: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19872: LD_EXP 57
19876: PUSH
19877: LD_EXP 62
19881: AND
19882: IFFALSE 20006
19884: GO 19886
19886: DISABLE
19887: LD_INT 0
19889: PPUSH
19890: PPUSH
// begin enable ;
19891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19892: LD_ADDR_VAR 0 2
19896: PUSH
19897: LD_INT 22
19899: PUSH
19900: LD_OWVAR 2
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 34
19914: PUSH
19915: LD_INT 7
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 34
19924: PUSH
19925: LD_INT 45
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 34
19934: PUSH
19935: LD_INT 28
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 34
19944: PUSH
19945: LD_INT 47
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 2
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 20006
// for i in tmp do
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_VAR 0 2
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20004
// begin SetLives ( i , 0 ) ;
19990: LD_VAR 0 1
19994: PPUSH
19995: LD_INT 0
19997: PPUSH
19998: CALL_OW 234
// end ;
20002: GO 19987
20004: POP
20005: POP
// end ;
20006: PPOPN 2
20008: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20009: LD_EXP 57
20013: PUSH
20014: LD_EXP 63
20018: AND
20019: IFFALSE 20103
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin enable ;
20028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_INT 22
20036: PUSH
20037: LD_OWVAR 2
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 32
20048: PUSH
20049: LD_INT 3
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PPUSH
20060: CALL_OW 69
20064: ST_TO_ADDR
// if not tmp then
20065: LD_VAR 0 2
20069: NOT
20070: IFFALSE 20074
// exit ;
20072: GO 20103
// for i in tmp do
20074: LD_ADDR_VAR 0 1
20078: PUSH
20079: LD_VAR 0 2
20083: PUSH
20084: FOR_IN
20085: IFFALSE 20101
// begin SetLives ( i , 0 ) ;
20087: LD_VAR 0 1
20091: PPUSH
20092: LD_INT 0
20094: PPUSH
20095: CALL_OW 234
// end ;
20099: GO 20084
20101: POP
20102: POP
// end ;
20103: PPOPN 2
20105: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20106: LD_EXP 57
20110: PUSH
20111: LD_EXP 60
20115: AND
20116: IFFALSE 20209
20118: GO 20120
20120: DISABLE
20121: LD_INT 0
20123: PPUSH
// begin enable ;
20124: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20125: LD_ADDR_VAR 0 1
20129: PUSH
20130: LD_INT 22
20132: PUSH
20133: LD_OWVAR 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: LD_INT 25
20147: PUSH
20148: LD_INT 5
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 25
20157: PUSH
20158: LD_INT 9
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 25
20167: PUSH
20168: LD_INT 8
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PUSH
20190: FOR_IN
20191: IFFALSE 20207
// begin SetClass ( i , 1 ) ;
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_INT 1
20200: PPUSH
20201: CALL_OW 336
// end ;
20205: GO 20190
20207: POP
20208: POP
// end ;
20209: PPOPN 1
20211: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20212: LD_EXP 57
20216: PUSH
20217: LD_EXP 61
20221: AND
20222: PUSH
20223: LD_OWVAR 65
20227: PUSH
20228: LD_INT 7
20230: LESS
20231: AND
20232: IFFALSE 20246
20234: GO 20236
20236: DISABLE
// begin enable ;
20237: ENABLE
// game_speed := 7 ;
20238: LD_ADDR_OWVAR 65
20242: PUSH
20243: LD_INT 7
20245: ST_TO_ADDR
// end ;
20246: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20247: LD_EXP 57
20251: PUSH
20252: LD_EXP 64
20256: AND
20257: IFFALSE 20459
20259: GO 20261
20261: DISABLE
20262: LD_INT 0
20264: PPUSH
20265: PPUSH
20266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_INT 81
20274: PUSH
20275: LD_OWVAR 2
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 21
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 69
20302: ST_TO_ADDR
// if not tmp then
20303: LD_VAR 0 3
20307: NOT
20308: IFFALSE 20312
// exit ;
20310: GO 20459
// if tmp > 5 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 5
20319: GREATER
20320: IFFALSE 20332
// k := 5 else
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_INT 5
20329: ST_TO_ADDR
20330: GO 20342
// k := tmp ;
20332: LD_ADDR_VAR 0 2
20336: PUSH
20337: LD_VAR 0 3
20341: ST_TO_ADDR
// for i := 1 to k do
20342: LD_ADDR_VAR 0 1
20346: PUSH
20347: DOUBLE
20348: LD_INT 1
20350: DEC
20351: ST_TO_ADDR
20352: LD_VAR 0 2
20356: PUSH
20357: FOR_TO
20358: IFFALSE 20457
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_VAR 0 1
20369: ARRAY
20370: PPUSH
20371: LD_VAR 0 1
20375: PUSH
20376: LD_INT 4
20378: MOD
20379: PUSH
20380: LD_INT 1
20382: PLUS
20383: PPUSH
20384: CALL_OW 259
20388: PUSH
20389: LD_INT 10
20391: LESS
20392: IFFALSE 20455
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20394: LD_VAR 0 3
20398: PUSH
20399: LD_VAR 0 1
20403: ARRAY
20404: PPUSH
20405: LD_VAR 0 1
20409: PUSH
20410: LD_INT 4
20412: MOD
20413: PUSH
20414: LD_INT 1
20416: PLUS
20417: PPUSH
20418: LD_VAR 0 3
20422: PUSH
20423: LD_VAR 0 1
20427: ARRAY
20428: PPUSH
20429: LD_VAR 0 1
20433: PUSH
20434: LD_INT 4
20436: MOD
20437: PUSH
20438: LD_INT 1
20440: PLUS
20441: PPUSH
20442: CALL_OW 259
20446: PUSH
20447: LD_INT 1
20449: PLUS
20450: PPUSH
20451: CALL_OW 237
20455: GO 20357
20457: POP
20458: POP
// end ;
20459: PPOPN 3
20461: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20462: LD_EXP 57
20466: PUSH
20467: LD_EXP 65
20471: AND
20472: IFFALSE 20492
20474: GO 20476
20476: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20477: LD_INT 4
20479: PPUSH
20480: LD_OWVAR 2
20484: PPUSH
20485: LD_INT 0
20487: PPUSH
20488: CALL_OW 324
20492: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20493: LD_EXP 57
20497: PUSH
20498: LD_EXP 94
20502: AND
20503: IFFALSE 20523
20505: GO 20507
20507: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20508: LD_INT 19
20510: PPUSH
20511: LD_OWVAR 2
20515: PPUSH
20516: LD_INT 0
20518: PPUSH
20519: CALL_OW 324
20523: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20524: LD_EXP 57
20528: PUSH
20529: LD_EXP 66
20533: AND
20534: IFFALSE 20636
20536: GO 20538
20538: DISABLE
20539: LD_INT 0
20541: PPUSH
20542: PPUSH
// begin enable ;
20543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_OWVAR 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 34
20566: PUSH
20567: LD_INT 11
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 34
20576: PUSH
20577: LD_INT 30
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// if not tmp then
20598: LD_VAR 0 2
20602: NOT
20603: IFFALSE 20607
// exit ;
20605: GO 20636
// for i in tmp do
20607: LD_ADDR_VAR 0 1
20611: PUSH
20612: LD_VAR 0 2
20616: PUSH
20617: FOR_IN
20618: IFFALSE 20634
// begin SetLives ( i , 0 ) ;
20620: LD_VAR 0 1
20624: PPUSH
20625: LD_INT 0
20627: PPUSH
20628: CALL_OW 234
// end ;
20632: GO 20617
20634: POP
20635: POP
// end ;
20636: PPOPN 2
20638: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20639: LD_EXP 57
20643: PUSH
20644: LD_EXP 67
20648: AND
20649: IFFALSE 20669
20651: GO 20653
20653: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20654: LD_INT 32
20656: PPUSH
20657: LD_OWVAR 2
20661: PPUSH
20662: LD_INT 0
20664: PPUSH
20665: CALL_OW 324
20669: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20670: LD_EXP 57
20674: PUSH
20675: LD_EXP 68
20679: AND
20680: IFFALSE 20861
20682: GO 20684
20684: DISABLE
20685: LD_INT 0
20687: PPUSH
20688: PPUSH
20689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 22
20697: PUSH
20698: LD_OWVAR 2
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 33
20709: PUSH
20710: LD_INT 3
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PPUSH
20721: CALL_OW 69
20725: ST_TO_ADDR
// if not tmp then
20726: LD_VAR 0 2
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20861
// side := 0 ;
20735: LD_ADDR_VAR 0 3
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// for i := 1 to 8 do
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: DOUBLE
20749: LD_INT 1
20751: DEC
20752: ST_TO_ADDR
20753: LD_INT 8
20755: PUSH
20756: FOR_TO
20757: IFFALSE 20805
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20759: LD_OWVAR 2
20763: PUSH
20764: LD_VAR 0 1
20768: NONEQUAL
20769: PUSH
20770: LD_OWVAR 2
20774: PPUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 81
20784: PUSH
20785: LD_INT 2
20787: EQUAL
20788: AND
20789: IFFALSE 20803
// begin side := i ;
20791: LD_ADDR_VAR 0 3
20795: PUSH
20796: LD_VAR 0 1
20800: ST_TO_ADDR
// break ;
20801: GO 20805
// end ;
20803: GO 20756
20805: POP
20806: POP
// if not side then
20807: LD_VAR 0 3
20811: NOT
20812: IFFALSE 20816
// exit ;
20814: GO 20861
// for i := 1 to tmp do
20816: LD_ADDR_VAR 0 1
20820: PUSH
20821: DOUBLE
20822: LD_INT 1
20824: DEC
20825: ST_TO_ADDR
20826: LD_VAR 0 2
20830: PUSH
20831: FOR_TO
20832: IFFALSE 20859
// if Prob ( 60 ) then
20834: LD_INT 60
20836: PPUSH
20837: CALL_OW 13
20841: IFFALSE 20857
// SetSide ( i , side ) ;
20843: LD_VAR 0 1
20847: PPUSH
20848: LD_VAR 0 3
20852: PPUSH
20853: CALL_OW 235
20857: GO 20831
20859: POP
20860: POP
// end ;
20861: PPOPN 3
20863: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20864: LD_EXP 57
20868: PUSH
20869: LD_EXP 70
20873: AND
20874: IFFALSE 20993
20876: GO 20878
20878: DISABLE
20879: LD_INT 0
20881: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20882: LD_ADDR_VAR 0 1
20886: PUSH
20887: LD_INT 22
20889: PUSH
20890: LD_OWVAR 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 21
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 3
20911: PUSH
20912: LD_INT 23
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 69
20935: PUSH
20936: FOR_IN
20937: IFFALSE 20991
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 257
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 3
20957: PUSH
20958: LD_INT 4
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: IN
20967: IFFALSE 20989
// SetClass ( un , rand ( 1 , 4 ) ) ;
20969: LD_VAR 0 1
20973: PPUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_INT 4
20979: PPUSH
20980: CALL_OW 12
20984: PPUSH
20985: CALL_OW 336
20989: GO 20936
20991: POP
20992: POP
// end ;
20993: PPOPN 1
20995: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20996: LD_EXP 57
21000: PUSH
21001: LD_EXP 69
21005: AND
21006: IFFALSE 21085
21008: GO 21010
21010: DISABLE
21011: LD_INT 0
21013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: LD_INT 22
21021: PUSH
21022: LD_OWVAR 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 21
21033: PUSH
21034: LD_INT 3
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PPUSH
21045: CALL_OW 69
21049: ST_TO_ADDR
// if not tmp then
21050: LD_VAR 0 1
21054: NOT
21055: IFFALSE 21059
// exit ;
21057: GO 21085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21059: LD_VAR 0 1
21063: PUSH
21064: LD_INT 1
21066: PPUSH
21067: LD_VAR 0 1
21071: PPUSH
21072: CALL_OW 12
21076: ARRAY
21077: PPUSH
21078: LD_INT 100
21080: PPUSH
21081: CALL_OW 234
// end ;
21085: PPOPN 1
21087: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21088: LD_EXP 57
21092: PUSH
21093: LD_EXP 71
21097: AND
21098: IFFALSE 21196
21100: GO 21102
21102: DISABLE
21103: LD_INT 0
21105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_OWVAR 2
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: ST_TO_ADDR
// if not tmp then
21142: LD_VAR 0 1
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21196
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21151: LD_VAR 0 1
21155: PUSH
21156: LD_INT 1
21158: PPUSH
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 12
21168: ARRAY
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 4
21175: PPUSH
21176: CALL_OW 12
21180: PPUSH
21181: LD_INT 3000
21183: PPUSH
21184: LD_INT 9000
21186: PPUSH
21187: CALL_OW 12
21191: PPUSH
21192: CALL_OW 492
// end ;
21196: PPOPN 1
21198: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21199: LD_EXP 57
21203: PUSH
21204: LD_EXP 72
21208: AND
21209: IFFALSE 21229
21211: GO 21213
21213: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21214: LD_INT 1
21216: PPUSH
21217: LD_OWVAR 2
21221: PPUSH
21222: LD_INT 0
21224: PPUSH
21225: CALL_OW 324
21229: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21230: LD_EXP 57
21234: PUSH
21235: LD_EXP 73
21239: AND
21240: IFFALSE 21323
21242: GO 21244
21244: DISABLE
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_INT 22
21256: PUSH
21257: LD_OWVAR 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 21
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: ST_TO_ADDR
// if not tmp then
21285: LD_VAR 0 2
21289: NOT
21290: IFFALSE 21294
// exit ;
21292: GO 21323
// for i in tmp do
21294: LD_ADDR_VAR 0 1
21298: PUSH
21299: LD_VAR 0 2
21303: PUSH
21304: FOR_IN
21305: IFFALSE 21321
// SetBLevel ( i , 10 ) ;
21307: LD_VAR 0 1
21311: PPUSH
21312: LD_INT 10
21314: PPUSH
21315: CALL_OW 241
21319: GO 21304
21321: POP
21322: POP
// end ;
21323: PPOPN 2
21325: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21326: LD_EXP 57
21330: PUSH
21331: LD_EXP 74
21335: AND
21336: IFFALSE 21447
21338: GO 21340
21340: DISABLE
21341: LD_INT 0
21343: PPUSH
21344: PPUSH
21345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21346: LD_ADDR_VAR 0 3
21350: PUSH
21351: LD_INT 22
21353: PUSH
21354: LD_OWVAR 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 25
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: ST_TO_ADDR
// if not tmp then
21382: LD_VAR 0 3
21386: NOT
21387: IFFALSE 21391
// exit ;
21389: GO 21447
// un := tmp [ rand ( 1 , tmp ) ] ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: LD_VAR 0 3
21400: PUSH
21401: LD_INT 1
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: CALL_OW 12
21413: ARRAY
21414: ST_TO_ADDR
// if Crawls ( un ) then
21415: LD_VAR 0 2
21419: PPUSH
21420: CALL_OW 318
21424: IFFALSE 21435
// ComWalk ( un ) ;
21426: LD_VAR 0 2
21430: PPUSH
21431: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21435: LD_VAR 0 2
21439: PPUSH
21440: LD_INT 5
21442: PPUSH
21443: CALL_OW 336
// end ;
21447: PPOPN 3
21449: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21450: LD_EXP 57
21454: PUSH
21455: LD_EXP 75
21459: AND
21460: PUSH
21461: LD_OWVAR 67
21465: PUSH
21466: LD_INT 4
21468: LESS
21469: AND
21470: IFFALSE 21489
21472: GO 21474
21474: DISABLE
// begin Difficulty := Difficulty + 1 ;
21475: LD_ADDR_OWVAR 67
21479: PUSH
21480: LD_OWVAR 67
21484: PUSH
21485: LD_INT 1
21487: PLUS
21488: ST_TO_ADDR
// end ;
21489: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21490: LD_EXP 57
21494: PUSH
21495: LD_EXP 76
21499: AND
21500: IFFALSE 21603
21502: GO 21504
21504: DISABLE
21505: LD_INT 0
21507: PPUSH
// begin for i := 1 to 5 do
21508: LD_ADDR_VAR 0 1
21512: PUSH
21513: DOUBLE
21514: LD_INT 1
21516: DEC
21517: ST_TO_ADDR
21518: LD_INT 5
21520: PUSH
21521: FOR_TO
21522: IFFALSE 21601
// begin uc_nation := nation_nature ;
21524: LD_ADDR_OWVAR 21
21528: PUSH
21529: LD_INT 0
21531: ST_TO_ADDR
// uc_side := 0 ;
21532: LD_ADDR_OWVAR 20
21536: PUSH
21537: LD_INT 0
21539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21540: LD_ADDR_OWVAR 29
21544: PUSH
21545: LD_INT 12
21547: PUSH
21548: LD_INT 12
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: ST_TO_ADDR
// hc_agressivity := 20 ;
21555: LD_ADDR_OWVAR 35
21559: PUSH
21560: LD_INT 20
21562: ST_TO_ADDR
// hc_class := class_tiger ;
21563: LD_ADDR_OWVAR 28
21567: PUSH
21568: LD_INT 14
21570: ST_TO_ADDR
// hc_gallery :=  ;
21571: LD_ADDR_OWVAR 33
21575: PUSH
21576: LD_STRING 
21578: ST_TO_ADDR
// hc_name :=  ;
21579: LD_ADDR_OWVAR 26
21583: PUSH
21584: LD_STRING 
21586: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21587: CALL_OW 44
21591: PPUSH
21592: LD_INT 0
21594: PPUSH
21595: CALL_OW 51
// end ;
21599: GO 21521
21601: POP
21602: POP
// end ;
21603: PPOPN 1
21605: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21606: LD_EXP 57
21610: PUSH
21611: LD_EXP 77
21615: AND
21616: IFFALSE 21625
21618: GO 21620
21620: DISABLE
// StreamSibBomb ;
21621: CALL 21626 0 0
21625: END
// export function StreamSibBomb ; var i , x , y ; begin
21626: LD_INT 0
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
// result := false ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// for i := 1 to 16 do
21640: LD_ADDR_VAR 0 2
21644: PUSH
21645: DOUBLE
21646: LD_INT 1
21648: DEC
21649: ST_TO_ADDR
21650: LD_INT 16
21652: PUSH
21653: FOR_TO
21654: IFFALSE 21853
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: LD_INT 10
21663: PUSH
21664: LD_INT 20
21666: PUSH
21667: LD_INT 30
21669: PUSH
21670: LD_INT 40
21672: PUSH
21673: LD_INT 50
21675: PUSH
21676: LD_INT 60
21678: PUSH
21679: LD_INT 70
21681: PUSH
21682: LD_INT 80
21684: PUSH
21685: LD_INT 90
21687: PUSH
21688: LD_INT 100
21690: PUSH
21691: LD_INT 110
21693: PUSH
21694: LD_INT 120
21696: PUSH
21697: LD_INT 130
21699: PUSH
21700: LD_INT 140
21702: PUSH
21703: LD_INT 150
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PPUSH
21726: LD_INT 15
21728: PPUSH
21729: CALL_OW 12
21733: ARRAY
21734: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21735: LD_ADDR_VAR 0 4
21739: PUSH
21740: LD_INT 10
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 30
21748: PUSH
21749: LD_INT 40
21751: PUSH
21752: LD_INT 50
21754: PUSH
21755: LD_INT 60
21757: PUSH
21758: LD_INT 70
21760: PUSH
21761: LD_INT 80
21763: PUSH
21764: LD_INT 90
21766: PUSH
21767: LD_INT 100
21769: PUSH
21770: LD_INT 110
21772: PUSH
21773: LD_INT 120
21775: PUSH
21776: LD_INT 130
21778: PUSH
21779: LD_INT 140
21781: PUSH
21782: LD_INT 150
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PPUSH
21805: LD_INT 15
21807: PPUSH
21808: CALL_OW 12
21812: ARRAY
21813: ST_TO_ADDR
// if ValidHex ( x , y ) then
21814: LD_VAR 0 3
21818: PPUSH
21819: LD_VAR 0 4
21823: PPUSH
21824: CALL_OW 488
21828: IFFALSE 21851
// begin result := [ x , y ] ;
21830: LD_ADDR_VAR 0 1
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_VAR 0 4
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: ST_TO_ADDR
// break ;
21849: GO 21853
// end ; end ;
21851: GO 21653
21853: POP
21854: POP
// if result then
21855: LD_VAR 0 1
21859: IFFALSE 21919
// begin ToLua ( playSibBomb() ) ;
21861: LD_STRING playSibBomb()
21863: PPUSH
21864: CALL_OW 559
// wait ( 0 0$14 ) ;
21868: LD_INT 490
21870: PPUSH
21871: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21875: LD_VAR 0 1
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: PPUSH
21884: LD_VAR 0 1
21888: PUSH
21889: LD_INT 2
21891: ARRAY
21892: PPUSH
21893: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21897: LD_VAR 0 1
21901: PUSH
21902: LD_INT 1
21904: ARRAY
21905: PPUSH
21906: LD_VAR 0 1
21910: PUSH
21911: LD_INT 2
21913: ARRAY
21914: PPUSH
21915: CALL_OW 429
// end ; end ;
21919: LD_VAR 0 1
21923: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21924: LD_EXP 57
21928: PUSH
21929: LD_EXP 79
21933: AND
21934: IFFALSE 21946
21936: GO 21938
21938: DISABLE
// YouLost (  ) ;
21939: LD_STRING 
21941: PPUSH
21942: CALL_OW 104
21946: END
// every 0 0$1 trigger StreamModeActive and sFog do
21947: LD_EXP 57
21951: PUSH
21952: LD_EXP 78
21956: AND
21957: IFFALSE 21971
21959: GO 21961
21961: DISABLE
// FogOff ( your_side ) ;
21962: LD_OWVAR 2
21966: PPUSH
21967: CALL_OW 344
21971: END
// every 0 0$1 trigger StreamModeActive and sSun do
21972: LD_EXP 57
21976: PUSH
21977: LD_EXP 80
21981: AND
21982: IFFALSE 22010
21984: GO 21986
21986: DISABLE
// begin solar_recharge_percent := 0 ;
21987: LD_ADDR_OWVAR 79
21991: PUSH
21992: LD_INT 0
21994: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21995: LD_INT 10500
21997: PPUSH
21998: CALL_OW 67
// solar_recharge_percent := 100 ;
22002: LD_ADDR_OWVAR 79
22006: PUSH
22007: LD_INT 100
22009: ST_TO_ADDR
// end ;
22010: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22011: LD_EXP 57
22015: PUSH
22016: LD_EXP 81
22020: AND
22021: IFFALSE 22260
22023: GO 22025
22025: DISABLE
22026: LD_INT 0
22028: PPUSH
22029: PPUSH
22030: PPUSH
// begin tmp := [ ] ;
22031: LD_ADDR_VAR 0 3
22035: PUSH
22036: EMPTY
22037: ST_TO_ADDR
// for i := 1 to 6 do
22038: LD_ADDR_VAR 0 1
22042: PUSH
22043: DOUBLE
22044: LD_INT 1
22046: DEC
22047: ST_TO_ADDR
22048: LD_INT 6
22050: PUSH
22051: FOR_TO
22052: IFFALSE 22157
// begin uc_nation := nation_nature ;
22054: LD_ADDR_OWVAR 21
22058: PUSH
22059: LD_INT 0
22061: ST_TO_ADDR
// uc_side := 0 ;
22062: LD_ADDR_OWVAR 20
22066: PUSH
22067: LD_INT 0
22069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22070: LD_ADDR_OWVAR 29
22074: PUSH
22075: LD_INT 12
22077: PUSH
22078: LD_INT 12
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: ST_TO_ADDR
// hc_agressivity := 20 ;
22085: LD_ADDR_OWVAR 35
22089: PUSH
22090: LD_INT 20
22092: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22093: LD_ADDR_OWVAR 28
22097: PUSH
22098: LD_INT 17
22100: ST_TO_ADDR
// hc_gallery :=  ;
22101: LD_ADDR_OWVAR 33
22105: PUSH
22106: LD_STRING 
22108: ST_TO_ADDR
// hc_name :=  ;
22109: LD_ADDR_OWVAR 26
22113: PUSH
22114: LD_STRING 
22116: ST_TO_ADDR
// un := CreateHuman ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: CALL_OW 44
22126: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22127: LD_VAR 0 2
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 51
// tmp := tmp ^ un ;
22139: LD_ADDR_VAR 0 3
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 2
22153: ADD
22154: ST_TO_ADDR
// end ;
22155: GO 22051
22157: POP
22158: POP
// repeat wait ( 0 0$1 ) ;
22159: LD_INT 35
22161: PPUSH
22162: CALL_OW 67
// for un in tmp do
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 3
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22251
// begin if IsDead ( un ) then
22179: LD_VAR 0 2
22183: PPUSH
22184: CALL_OW 301
22188: IFFALSE 22208
// begin tmp := tmp diff un ;
22190: LD_ADDR_VAR 0 3
22194: PUSH
22195: LD_VAR 0 3
22199: PUSH
22200: LD_VAR 0 2
22204: DIFF
22205: ST_TO_ADDR
// continue ;
22206: GO 22176
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_INT 3
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PPUSH
22230: CALL_OW 69
22234: PPUSH
22235: LD_VAR 0 2
22239: PPUSH
22240: CALL_OW 74
22244: PPUSH
22245: CALL_OW 115
// end ;
22249: GO 22176
22251: POP
22252: POP
// until not tmp ;
22253: LD_VAR 0 3
22257: NOT
22258: IFFALSE 22159
// end ;
22260: PPOPN 3
22262: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22263: LD_EXP 57
22267: PUSH
22268: LD_EXP 82
22272: AND
22273: IFFALSE 22327
22275: GO 22277
22277: DISABLE
// begin ToLua ( displayTroll(); ) ;
22278: LD_STRING displayTroll();
22280: PPUSH
22281: CALL_OW 559
// wait ( 3 3$00 ) ;
22285: LD_INT 6300
22287: PPUSH
22288: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22292: LD_STRING hideTroll();
22294: PPUSH
22295: CALL_OW 559
// wait ( 1 1$00 ) ;
22299: LD_INT 2100
22301: PPUSH
22302: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22306: LD_STRING displayTroll();
22308: PPUSH
22309: CALL_OW 559
// wait ( 1 1$00 ) ;
22313: LD_INT 2100
22315: PPUSH
22316: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22320: LD_STRING hideTroll();
22322: PPUSH
22323: CALL_OW 559
// end ;
22327: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22328: LD_EXP 57
22332: PUSH
22333: LD_EXP 83
22337: AND
22338: IFFALSE 22401
22340: GO 22342
22342: DISABLE
22343: LD_INT 0
22345: PPUSH
// begin p := 0 ;
22346: LD_ADDR_VAR 0 1
22350: PUSH
22351: LD_INT 0
22353: ST_TO_ADDR
// repeat game_speed := 1 ;
22354: LD_ADDR_OWVAR 65
22358: PUSH
22359: LD_INT 1
22361: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22362: LD_INT 35
22364: PPUSH
22365: CALL_OW 67
// p := p + 1 ;
22369: LD_ADDR_VAR 0 1
22373: PUSH
22374: LD_VAR 0 1
22378: PUSH
22379: LD_INT 1
22381: PLUS
22382: ST_TO_ADDR
// until p >= 60 ;
22383: LD_VAR 0 1
22387: PUSH
22388: LD_INT 60
22390: GREATEREQUAL
22391: IFFALSE 22354
// game_speed := 4 ;
22393: LD_ADDR_OWVAR 65
22397: PUSH
22398: LD_INT 4
22400: ST_TO_ADDR
// end ;
22401: PPOPN 1
22403: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22404: LD_EXP 57
22408: PUSH
22409: LD_EXP 84
22413: AND
22414: IFFALSE 22560
22416: GO 22418
22418: DISABLE
22419: LD_INT 0
22421: PPUSH
22422: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22423: LD_ADDR_VAR 0 1
22427: PUSH
22428: LD_INT 22
22430: PUSH
22431: LD_OWVAR 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 30
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PPUSH
22472: CALL_OW 69
22476: ST_TO_ADDR
// if not depot then
22477: LD_VAR 0 1
22481: NOT
22482: IFFALSE 22486
// exit ;
22484: GO 22560
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_VAR 0 1
22495: PUSH
22496: LD_INT 1
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 12
22508: ARRAY
22509: PPUSH
22510: CALL_OW 274
22514: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22515: LD_VAR 0 2
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: LD_INT 0
22525: PPUSH
22526: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22530: LD_VAR 0 2
22534: PPUSH
22535: LD_INT 2
22537: PPUSH
22538: LD_INT 0
22540: PPUSH
22541: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22545: LD_VAR 0 2
22549: PPUSH
22550: LD_INT 3
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 277
// end ;
22560: PPOPN 2
22562: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22563: LD_EXP 57
22567: PUSH
22568: LD_EXP 85
22572: AND
22573: IFFALSE 22670
22575: GO 22577
22577: DISABLE
22578: LD_INT 0
22580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22581: LD_ADDR_VAR 0 1
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_OWVAR 2
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 21
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 3
22610: PUSH
22611: LD_INT 23
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: PPUSH
22630: CALL_OW 69
22634: ST_TO_ADDR
// if not tmp then
22635: LD_VAR 0 1
22639: NOT
22640: IFFALSE 22644
// exit ;
22642: GO 22670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22644: LD_VAR 0 1
22648: PUSH
22649: LD_INT 1
22651: PPUSH
22652: LD_VAR 0 1
22656: PPUSH
22657: CALL_OW 12
22661: ARRAY
22662: PPUSH
22663: LD_INT 200
22665: PPUSH
22666: CALL_OW 234
// end ;
22670: PPOPN 1
22672: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22673: LD_EXP 57
22677: PUSH
22678: LD_EXP 86
22682: AND
22683: IFFALSE 22762
22685: GO 22687
22687: DISABLE
22688: LD_INT 0
22690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22691: LD_ADDR_VAR 0 1
22695: PUSH
22696: LD_INT 22
22698: PUSH
22699: LD_OWVAR 2
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 21
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PPUSH
22722: CALL_OW 69
22726: ST_TO_ADDR
// if not tmp then
22727: LD_VAR 0 1
22731: NOT
22732: IFFALSE 22736
// exit ;
22734: GO 22762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22736: LD_VAR 0 1
22740: PUSH
22741: LD_INT 1
22743: PPUSH
22744: LD_VAR 0 1
22748: PPUSH
22749: CALL_OW 12
22753: ARRAY
22754: PPUSH
22755: LD_INT 60
22757: PPUSH
22758: CALL_OW 234
// end ;
22762: PPOPN 1
22764: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22765: LD_EXP 57
22769: PUSH
22770: LD_EXP 87
22774: AND
22775: IFFALSE 22874
22777: GO 22779
22779: DISABLE
22780: LD_INT 0
22782: PPUSH
22783: PPUSH
// begin enable ;
22784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22785: LD_ADDR_VAR 0 1
22789: PUSH
22790: LD_INT 22
22792: PUSH
22793: LD_OWVAR 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 61
22804: PUSH
22805: EMPTY
22806: LIST
22807: PUSH
22808: LD_INT 33
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: PPUSH
22823: CALL_OW 69
22827: ST_TO_ADDR
// if not tmp then
22828: LD_VAR 0 1
22832: NOT
22833: IFFALSE 22837
// exit ;
22835: GO 22874
// for i in tmp do
22837: LD_ADDR_VAR 0 2
22841: PUSH
22842: LD_VAR 0 1
22846: PUSH
22847: FOR_IN
22848: IFFALSE 22872
// if IsControledBy ( i ) then
22850: LD_VAR 0 2
22854: PPUSH
22855: CALL_OW 312
22859: IFFALSE 22870
// ComUnlink ( i ) ;
22861: LD_VAR 0 2
22865: PPUSH
22866: CALL_OW 136
22870: GO 22847
22872: POP
22873: POP
// end ;
22874: PPOPN 2
22876: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22877: LD_EXP 57
22881: PUSH
22882: LD_EXP 88
22886: AND
22887: IFFALSE 23027
22889: GO 22891
22891: DISABLE
22892: LD_INT 0
22894: PPUSH
22895: PPUSH
// begin ToLua ( displayPowell(); ) ;
22896: LD_STRING displayPowell();
22898: PPUSH
22899: CALL_OW 559
// uc_side := 0 ;
22903: LD_ADDR_OWVAR 20
22907: PUSH
22908: LD_INT 0
22910: ST_TO_ADDR
// uc_nation := 2 ;
22911: LD_ADDR_OWVAR 21
22915: PUSH
22916: LD_INT 2
22918: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22919: LD_ADDR_OWVAR 37
22923: PUSH
22924: LD_INT 14
22926: ST_TO_ADDR
// vc_engine := engine_siberite ;
22927: LD_ADDR_OWVAR 39
22931: PUSH
22932: LD_INT 3
22934: ST_TO_ADDR
// vc_control := control_apeman ;
22935: LD_ADDR_OWVAR 38
22939: PUSH
22940: LD_INT 5
22942: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22943: LD_ADDR_OWVAR 40
22947: PUSH
22948: LD_INT 29
22950: ST_TO_ADDR
// un := CreateVehicle ;
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: CALL_OW 45
22960: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22961: LD_VAR 0 2
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22973: LD_INT 35
22975: PPUSH
22976: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22980: LD_VAR 0 2
22984: PPUSH
22985: LD_INT 22
22987: PUSH
22988: LD_OWVAR 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PPUSH
22997: CALL_OW 69
23001: PPUSH
23002: LD_VAR 0 2
23006: PPUSH
23007: CALL_OW 74
23011: PPUSH
23012: CALL_OW 115
// until IsDead ( un ) ;
23016: LD_VAR 0 2
23020: PPUSH
23021: CALL_OW 301
23025: IFFALSE 22973
// end ;
23027: PPOPN 2
23029: END
// every 0 0$1 trigger StreamModeActive and sStu do
23030: LD_EXP 57
23034: PUSH
23035: LD_EXP 96
23039: AND
23040: IFFALSE 23056
23042: GO 23044
23044: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23045: LD_STRING displayStucuk();
23047: PPUSH
23048: CALL_OW 559
// ResetFog ;
23052: CALL_OW 335
// end ;
23056: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23057: LD_EXP 57
23061: PUSH
23062: LD_EXP 89
23066: AND
23067: IFFALSE 23208
23069: GO 23071
23071: DISABLE
23072: LD_INT 0
23074: PPUSH
23075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23076: LD_ADDR_VAR 0 2
23080: PUSH
23081: LD_INT 22
23083: PUSH
23084: LD_OWVAR 2
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 21
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PPUSH
23107: CALL_OW 69
23111: ST_TO_ADDR
// if not tmp then
23112: LD_VAR 0 2
23116: NOT
23117: IFFALSE 23121
// exit ;
23119: GO 23208
// un := tmp [ rand ( 1 , tmp ) ] ;
23121: LD_ADDR_VAR 0 1
23125: PUSH
23126: LD_VAR 0 2
23130: PUSH
23131: LD_INT 1
23133: PPUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: CALL_OW 12
23143: ARRAY
23144: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23145: LD_VAR 0 1
23149: PPUSH
23150: LD_INT 0
23152: PPUSH
23153: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23157: LD_VAR 0 1
23161: PPUSH
23162: LD_OWVAR 3
23166: PUSH
23167: LD_VAR 0 1
23171: DIFF
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 74
23182: PPUSH
23183: CALL_OW 115
// wait ( 0 0$20 ) ;
23187: LD_INT 700
23189: PPUSH
23190: CALL_OW 67
// SetSide ( un , your_side ) ;
23194: LD_VAR 0 1
23198: PPUSH
23199: LD_OWVAR 2
23203: PPUSH
23204: CALL_OW 235
// end ;
23208: PPOPN 2
23210: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23211: LD_EXP 57
23215: PUSH
23216: LD_EXP 90
23220: AND
23221: IFFALSE 23327
23223: GO 23225
23225: DISABLE
23226: LD_INT 0
23228: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: LD_INT 22
23236: PUSH
23237: LD_OWVAR 2
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: LD_INT 30
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 30
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: ST_TO_ADDR
// if not depot then
23283: LD_VAR 0 1
23287: NOT
23288: IFFALSE 23292
// exit ;
23290: GO 23327
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23292: LD_VAR 0 1
23296: PUSH
23297: LD_INT 1
23299: ARRAY
23300: PPUSH
23301: CALL_OW 250
23305: PPUSH
23306: LD_VAR 0 1
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: PPUSH
23315: CALL_OW 251
23319: PPUSH
23320: LD_INT 70
23322: PPUSH
23323: CALL_OW 495
// end ;
23327: PPOPN 1
23329: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23330: LD_EXP 57
23334: PUSH
23335: LD_EXP 91
23339: AND
23340: IFFALSE 23551
23342: GO 23344
23344: DISABLE
23345: LD_INT 0
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23352: LD_ADDR_VAR 0 5
23356: PUSH
23357: LD_INT 22
23359: PUSH
23360: LD_OWVAR 2
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 21
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if not tmp then
23388: LD_VAR 0 5
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 23551
// for i in tmp do
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_VAR 0 5
23406: PUSH
23407: FOR_IN
23408: IFFALSE 23549
// begin d := rand ( 0 , 5 ) ;
23410: LD_ADDR_VAR 0 4
23414: PUSH
23415: LD_INT 0
23417: PPUSH
23418: LD_INT 5
23420: PPUSH
23421: CALL_OW 12
23425: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 250
23440: PPUSH
23441: LD_VAR 0 4
23445: PPUSH
23446: LD_INT 3
23448: PPUSH
23449: LD_INT 12
23451: PPUSH
23452: CALL_OW 12
23456: PPUSH
23457: CALL_OW 272
23461: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23462: LD_ADDR_VAR 0 3
23466: PUSH
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL_OW 251
23476: PPUSH
23477: LD_VAR 0 4
23481: PPUSH
23482: LD_INT 3
23484: PPUSH
23485: LD_INT 12
23487: PPUSH
23488: CALL_OW 12
23492: PPUSH
23493: CALL_OW 273
23497: ST_TO_ADDR
// if ValidHex ( x , y ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: CALL_OW 488
23512: IFFALSE 23547
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_VAR 0 2
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_INT 3
23531: PPUSH
23532: LD_INT 6
23534: PPUSH
23535: CALL_OW 12
23539: PPUSH
23540: LD_INT 1
23542: PPUSH
23543: CALL_OW 483
// end ;
23547: GO 23407
23549: POP
23550: POP
// end ;
23551: PPOPN 5
23553: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23554: LD_EXP 57
23558: PUSH
23559: LD_EXP 92
23563: AND
23564: IFFALSE 23658
23566: GO 23568
23568: DISABLE
23569: LD_INT 0
23571: PPUSH
23572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_OWVAR 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 32
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 21
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: PPUSH
23615: CALL_OW 69
23619: ST_TO_ADDR
// if not tmp then
23620: LD_VAR 0 2
23624: NOT
23625: IFFALSE 23629
// exit ;
23627: GO 23658
// for i in tmp do
23629: LD_ADDR_VAR 0 1
23633: PUSH
23634: LD_VAR 0 2
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23656
// SetFuel ( i , 0 ) ;
23642: LD_VAR 0 1
23646: PPUSH
23647: LD_INT 0
23649: PPUSH
23650: CALL_OW 240
23654: GO 23639
23656: POP
23657: POP
// end ;
23658: PPOPN 2
23660: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23661: LD_EXP 57
23665: PUSH
23666: LD_EXP 93
23670: AND
23671: IFFALSE 23737
23673: GO 23675
23675: DISABLE
23676: LD_INT 0
23678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23679: LD_ADDR_VAR 0 1
23683: PUSH
23684: LD_INT 22
23686: PUSH
23687: LD_OWVAR 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 30
23698: PUSH
23699: LD_INT 29
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 1
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23737
// DestroyUnit ( tmp [ 1 ] ) ;
23724: LD_VAR 0 1
23728: PUSH
23729: LD_INT 1
23731: ARRAY
23732: PPUSH
23733: CALL_OW 65
// end ;
23737: PPOPN 1
23739: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23740: LD_EXP 57
23744: PUSH
23745: LD_EXP 95
23749: AND
23750: IFFALSE 23879
23752: GO 23754
23754: DISABLE
23755: LD_INT 0
23757: PPUSH
// begin uc_side := 0 ;
23758: LD_ADDR_OWVAR 20
23762: PUSH
23763: LD_INT 0
23765: ST_TO_ADDR
// uc_nation := nation_arabian ;
23766: LD_ADDR_OWVAR 21
23770: PUSH
23771: LD_INT 2
23773: ST_TO_ADDR
// hc_gallery :=  ;
23774: LD_ADDR_OWVAR 33
23778: PUSH
23779: LD_STRING 
23781: ST_TO_ADDR
// hc_name :=  ;
23782: LD_ADDR_OWVAR 26
23786: PUSH
23787: LD_STRING 
23789: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 11
23795: PPUSH
23796: LD_INT 10
23798: PPUSH
23799: CALL_OW 380
// un := CreateHuman ;
23803: LD_ADDR_VAR 0 1
23807: PUSH
23808: CALL_OW 44
23812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23813: LD_VAR 0 1
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23825: LD_INT 35
23827: PPUSH
23828: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23832: LD_VAR 0 1
23836: PPUSH
23837: LD_INT 22
23839: PUSH
23840: LD_OWVAR 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PPUSH
23849: CALL_OW 69
23853: PPUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 74
23863: PPUSH
23864: CALL_OW 115
// until IsDead ( un ) ;
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 301
23877: IFFALSE 23825
// end ;
23879: PPOPN 1
23881: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23882: LD_EXP 57
23886: PUSH
23887: LD_EXP 97
23891: AND
23892: IFFALSE 23904
23894: GO 23896
23896: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23897: LD_STRING earthquake(getX(game), 0, 32)
23899: PPUSH
23900: CALL_OW 559
23904: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23905: LD_EXP 57
23909: PUSH
23910: LD_EXP 98
23914: AND
23915: IFFALSE 24006
23917: GO 23919
23919: DISABLE
23920: LD_INT 0
23922: PPUSH
// begin enable ;
23923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23924: LD_ADDR_VAR 0 1
23928: PUSH
23929: LD_INT 22
23931: PUSH
23932: LD_OWVAR 2
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 33
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: ST_TO_ADDR
// if not tmp then
23971: LD_VAR 0 1
23975: NOT
23976: IFFALSE 23980
// exit ;
23978: GO 24006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23980: LD_VAR 0 1
23984: PUSH
23985: LD_INT 1
23987: PPUSH
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 12
23997: ARRAY
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL_OW 234
// end ;
24006: PPOPN 1
24008: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24009: LD_EXP 57
24013: PUSH
24014: LD_EXP 99
24018: AND
24019: IFFALSE 24160
24021: GO 24023
24023: DISABLE
24024: LD_INT 0
24026: PPUSH
24027: PPUSH
24028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 22
24036: PUSH
24037: LD_OWVAR 2
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 25
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PPUSH
24060: CALL_OW 69
24064: ST_TO_ADDR
// if not tmp then
24065: LD_VAR 0 3
24069: NOT
24070: IFFALSE 24074
// exit ;
24072: GO 24160
// un := tmp [ rand ( 1 , tmp ) ] ;
24074: LD_ADDR_VAR 0 2
24078: PUSH
24079: LD_VAR 0 3
24083: PUSH
24084: LD_INT 1
24086: PPUSH
24087: LD_VAR 0 3
24091: PPUSH
24092: CALL_OW 12
24096: ARRAY
24097: ST_TO_ADDR
// if Crawls ( un ) then
24098: LD_VAR 0 2
24102: PPUSH
24103: CALL_OW 318
24107: IFFALSE 24118
// ComWalk ( un ) ;
24109: LD_VAR 0 2
24113: PPUSH
24114: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24118: LD_VAR 0 2
24122: PPUSH
24123: LD_INT 9
24125: PPUSH
24126: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24130: LD_INT 28
24132: PPUSH
24133: LD_OWVAR 2
24137: PPUSH
24138: LD_INT 2
24140: PPUSH
24141: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24145: LD_INT 29
24147: PPUSH
24148: LD_OWVAR 2
24152: PPUSH
24153: LD_INT 2
24155: PPUSH
24156: CALL_OW 322
// end ;
24160: PPOPN 3
24162: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24163: LD_EXP 57
24167: PUSH
24168: LD_EXP 100
24172: AND
24173: IFFALSE 24284
24175: GO 24177
24177: DISABLE
24178: LD_INT 0
24180: PPUSH
24181: PPUSH
24182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24183: LD_ADDR_VAR 0 3
24187: PUSH
24188: LD_INT 22
24190: PUSH
24191: LD_OWVAR 2
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 25
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: CALL_OW 69
24218: ST_TO_ADDR
// if not tmp then
24219: LD_VAR 0 3
24223: NOT
24224: IFFALSE 24228
// exit ;
24226: GO 24284
// un := tmp [ rand ( 1 , tmp ) ] ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_VAR 0 3
24237: PUSH
24238: LD_INT 1
24240: PPUSH
24241: LD_VAR 0 3
24245: PPUSH
24246: CALL_OW 12
24250: ARRAY
24251: ST_TO_ADDR
// if Crawls ( un ) then
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 318
24261: IFFALSE 24272
// ComWalk ( un ) ;
24263: LD_VAR 0 2
24267: PPUSH
24268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24272: LD_VAR 0 2
24276: PPUSH
24277: LD_INT 8
24279: PPUSH
24280: CALL_OW 336
// end ;
24284: PPOPN 3
24286: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24287: LD_EXP 57
24291: PUSH
24292: LD_EXP 101
24296: AND
24297: IFFALSE 24441
24299: GO 24301
24301: DISABLE
24302: LD_INT 0
24304: PPUSH
24305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24306: LD_ADDR_VAR 0 2
24310: PUSH
24311: LD_INT 22
24313: PUSH
24314: LD_OWVAR 2
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 21
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 34
24338: PUSH
24339: LD_INT 12
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 34
24348: PUSH
24349: LD_INT 51
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 34
24358: PUSH
24359: LD_INT 32
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 69
24381: ST_TO_ADDR
// if not tmp then
24382: LD_VAR 0 2
24386: NOT
24387: IFFALSE 24391
// exit ;
24389: GO 24441
// for i in tmp do
24391: LD_ADDR_VAR 0 1
24395: PUSH
24396: LD_VAR 0 2
24400: PUSH
24401: FOR_IN
24402: IFFALSE 24439
// if GetCargo ( i , mat_artifact ) = 0 then
24404: LD_VAR 0 1
24408: PPUSH
24409: LD_INT 4
24411: PPUSH
24412: CALL_OW 289
24416: PUSH
24417: LD_INT 0
24419: EQUAL
24420: IFFALSE 24437
// SetCargo ( i , mat_siberit , 100 ) ;
24422: LD_VAR 0 1
24426: PPUSH
24427: LD_INT 3
24429: PPUSH
24430: LD_INT 100
24432: PPUSH
24433: CALL_OW 290
24437: GO 24401
24439: POP
24440: POP
// end ;
24441: PPOPN 2
24443: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24444: LD_EXP 57
24448: PUSH
24449: LD_EXP 102
24453: AND
24454: IFFALSE 24637
24456: GO 24458
24458: DISABLE
24459: LD_INT 0
24461: PPUSH
24462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24463: LD_ADDR_VAR 0 2
24467: PUSH
24468: LD_INT 22
24470: PUSH
24471: LD_OWVAR 2
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PPUSH
24480: CALL_OW 69
24484: ST_TO_ADDR
// if not tmp then
24485: LD_VAR 0 2
24489: NOT
24490: IFFALSE 24494
// exit ;
24492: GO 24637
// for i := 1 to 2 do
24494: LD_ADDR_VAR 0 1
24498: PUSH
24499: DOUBLE
24500: LD_INT 1
24502: DEC
24503: ST_TO_ADDR
24504: LD_INT 2
24506: PUSH
24507: FOR_TO
24508: IFFALSE 24635
// begin uc_side := your_side ;
24510: LD_ADDR_OWVAR 20
24514: PUSH
24515: LD_OWVAR 2
24519: ST_TO_ADDR
// uc_nation := nation_american ;
24520: LD_ADDR_OWVAR 21
24524: PUSH
24525: LD_INT 1
24527: ST_TO_ADDR
// vc_chassis := us_morphling ;
24528: LD_ADDR_OWVAR 37
24532: PUSH
24533: LD_INT 5
24535: ST_TO_ADDR
// vc_engine := engine_siberite ;
24536: LD_ADDR_OWVAR 39
24540: PUSH
24541: LD_INT 3
24543: ST_TO_ADDR
// vc_control := control_computer ;
24544: LD_ADDR_OWVAR 38
24548: PUSH
24549: LD_INT 3
24551: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24552: LD_ADDR_OWVAR 40
24556: PUSH
24557: LD_INT 10
24559: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24560: LD_VAR 0 2
24564: PUSH
24565: LD_INT 1
24567: ARRAY
24568: PPUSH
24569: CALL_OW 310
24573: NOT
24574: IFFALSE 24621
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24576: CALL_OW 45
24580: PPUSH
24581: LD_VAR 0 2
24585: PUSH
24586: LD_INT 1
24588: ARRAY
24589: PPUSH
24590: CALL_OW 250
24594: PPUSH
24595: LD_VAR 0 2
24599: PUSH
24600: LD_INT 1
24602: ARRAY
24603: PPUSH
24604: CALL_OW 251
24608: PPUSH
24609: LD_INT 12
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: CALL_OW 50
24619: GO 24633
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24621: CALL_OW 45
24625: PPUSH
24626: LD_INT 1
24628: PPUSH
24629: CALL_OW 51
// end ;
24633: GO 24507
24635: POP
24636: POP
// end ;
24637: PPOPN 2
24639: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24640: LD_EXP 57
24644: PUSH
24645: LD_EXP 103
24649: AND
24650: IFFALSE 24872
24652: GO 24654
24654: DISABLE
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
24662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24663: LD_ADDR_VAR 0 6
24667: PUSH
24668: LD_INT 22
24670: PUSH
24671: LD_OWVAR 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 21
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 23
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: PPUSH
24712: CALL_OW 69
24716: ST_TO_ADDR
// if not tmp then
24717: LD_VAR 0 6
24721: NOT
24722: IFFALSE 24726
// exit ;
24724: GO 24872
// s1 := rand ( 1 , 4 ) ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_INT 1
24733: PPUSH
24734: LD_INT 4
24736: PPUSH
24737: CALL_OW 12
24741: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24742: LD_ADDR_VAR 0 4
24746: PUSH
24747: LD_VAR 0 6
24751: PUSH
24752: LD_INT 1
24754: ARRAY
24755: PPUSH
24756: LD_VAR 0 2
24760: PPUSH
24761: CALL_OW 259
24765: ST_TO_ADDR
// if s1 = 1 then
24766: LD_VAR 0 2
24770: PUSH
24771: LD_INT 1
24773: EQUAL
24774: IFFALSE 24794
// s2 := rand ( 2 , 4 ) else
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 2
24783: PPUSH
24784: LD_INT 4
24786: PPUSH
24787: CALL_OW 12
24791: ST_TO_ADDR
24792: GO 24802
// s2 := 1 ;
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 1
24801: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24802: LD_ADDR_VAR 0 5
24806: PUSH
24807: LD_VAR 0 6
24811: PUSH
24812: LD_INT 1
24814: ARRAY
24815: PPUSH
24816: LD_VAR 0 3
24820: PPUSH
24821: CALL_OW 259
24825: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24826: LD_VAR 0 6
24830: PUSH
24831: LD_INT 1
24833: ARRAY
24834: PPUSH
24835: LD_VAR 0 2
24839: PPUSH
24840: LD_VAR 0 5
24844: PPUSH
24845: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24849: LD_VAR 0 6
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: LD_VAR 0 4
24867: PPUSH
24868: CALL_OW 237
// end ;
24872: PPOPN 6
24874: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24875: LD_EXP 57
24879: PUSH
24880: LD_EXP 104
24884: AND
24885: IFFALSE 24964
24887: GO 24889
24889: DISABLE
24890: LD_INT 0
24892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24893: LD_ADDR_VAR 0 1
24897: PUSH
24898: LD_INT 22
24900: PUSH
24901: LD_OWVAR 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 30
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PPUSH
24924: CALL_OW 69
24928: ST_TO_ADDR
// if not tmp then
24929: LD_VAR 0 1
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 24964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24938: LD_VAR 0 1
24942: PUSH
24943: LD_INT 1
24945: PPUSH
24946: LD_VAR 0 1
24950: PPUSH
24951: CALL_OW 12
24955: ARRAY
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 234
// end ;
24964: PPOPN 1
24966: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24967: LD_EXP 57
24971: PUSH
24972: LD_EXP 105
24976: AND
24977: IFFALSE 25089
24979: GO 24981
24981: DISABLE
24982: LD_INT 0
24984: PPUSH
24985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24986: LD_ADDR_VAR 0 2
24990: PUSH
24991: LD_INT 22
24993: PUSH
24994: LD_OWVAR 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: LD_INT 30
25008: PUSH
25009: LD_INT 27
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 30
25018: PUSH
25019: LD_INT 26
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 30
25028: PUSH
25029: LD_INT 28
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PPUSH
25046: CALL_OW 69
25050: ST_TO_ADDR
// if not tmp then
25051: LD_VAR 0 2
25055: NOT
25056: IFFALSE 25060
// exit ;
25058: GO 25089
// for i in tmp do
25060: LD_ADDR_VAR 0 1
25064: PUSH
25065: LD_VAR 0 2
25069: PUSH
25070: FOR_IN
25071: IFFALSE 25087
// SetLives ( i , 1 ) ;
25073: LD_VAR 0 1
25077: PPUSH
25078: LD_INT 1
25080: PPUSH
25081: CALL_OW 234
25085: GO 25070
25087: POP
25088: POP
// end ;
25089: PPOPN 2
25091: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25092: LD_EXP 57
25096: PUSH
25097: LD_EXP 106
25101: AND
25102: IFFALSE 25389
25104: GO 25106
25106: DISABLE
25107: LD_INT 0
25109: PPUSH
25110: PPUSH
25111: PPUSH
// begin i := rand ( 1 , 7 ) ;
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: LD_INT 1
25119: PPUSH
25120: LD_INT 7
25122: PPUSH
25123: CALL_OW 12
25127: ST_TO_ADDR
// case i of 1 :
25128: LD_VAR 0 1
25132: PUSH
25133: LD_INT 1
25135: DOUBLE
25136: EQUAL
25137: IFTRUE 25141
25139: GO 25151
25141: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25142: LD_STRING earthquake(getX(game), 0, 32)
25144: PPUSH
25145: CALL_OW 559
25149: GO 25389
25151: LD_INT 2
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25173
25159: POP
// begin ToLua ( displayStucuk(); ) ;
25160: LD_STRING displayStucuk();
25162: PPUSH
25163: CALL_OW 559
// ResetFog ;
25167: CALL_OW 335
// end ; 3 :
25171: GO 25389
25173: LD_INT 3
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25285
25181: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25182: LD_ADDR_VAR 0 2
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_OWVAR 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 25
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 69
25217: ST_TO_ADDR
// if not tmp then
25218: LD_VAR 0 2
25222: NOT
25223: IFFALSE 25227
// exit ;
25225: GO 25389
// un := tmp [ rand ( 1 , tmp ) ] ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_VAR 0 2
25236: PUSH
25237: LD_INT 1
25239: PPUSH
25240: LD_VAR 0 2
25244: PPUSH
25245: CALL_OW 12
25249: ARRAY
25250: ST_TO_ADDR
// if Crawls ( un ) then
25251: LD_VAR 0 3
25255: PPUSH
25256: CALL_OW 318
25260: IFFALSE 25271
// ComWalk ( un ) ;
25262: LD_VAR 0 3
25266: PPUSH
25267: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25271: LD_VAR 0 3
25275: PPUSH
25276: LD_INT 8
25278: PPUSH
25279: CALL_OW 336
// end ; 4 :
25283: GO 25389
25285: LD_INT 4
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25367
25293: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25294: LD_ADDR_VAR 0 2
25298: PUSH
25299: LD_INT 22
25301: PUSH
25302: LD_OWVAR 2
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 30
25313: PUSH
25314: LD_INT 29
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PPUSH
25325: CALL_OW 69
25329: ST_TO_ADDR
// if not tmp then
25330: LD_VAR 0 2
25334: NOT
25335: IFFALSE 25339
// exit ;
25337: GO 25389
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25339: LD_VAR 0 2
25343: PUSH
25344: LD_INT 1
25346: ARRAY
25347: PPUSH
25348: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25352: LD_VAR 0 2
25356: PUSH
25357: LD_INT 1
25359: ARRAY
25360: PPUSH
25361: CALL_OW 65
// end ; 5 .. 7 :
25365: GO 25389
25367: LD_INT 5
25369: DOUBLE
25370: GREATEREQUAL
25371: IFFALSE 25379
25373: LD_INT 7
25375: DOUBLE
25376: LESSEQUAL
25377: IFTRUE 25381
25379: GO 25388
25381: POP
// StreamSibBomb ; end ;
25382: CALL 21626 0 0
25386: GO 25389
25388: POP
// end ;
25389: PPOPN 3
25391: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25392: LD_EXP 57
25396: PUSH
25397: LD_EXP 107
25401: AND
25402: IFFALSE 25558
25404: GO 25406
25406: DISABLE
25407: LD_INT 0
25409: PPUSH
25410: PPUSH
25411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25412: LD_ADDR_VAR 0 2
25416: PUSH
25417: LD_INT 81
25419: PUSH
25420: LD_OWVAR 2
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 21
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PPUSH
25461: CALL_OW 69
25465: ST_TO_ADDR
// if not tmp then
25466: LD_VAR 0 2
25470: NOT
25471: IFFALSE 25475
// exit ;
25473: GO 25558
// p := 0 ;
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_INT 0
25482: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25483: LD_INT 35
25485: PPUSH
25486: CALL_OW 67
// p := p + 1 ;
25490: LD_ADDR_VAR 0 3
25494: PUSH
25495: LD_VAR 0 3
25499: PUSH
25500: LD_INT 1
25502: PLUS
25503: ST_TO_ADDR
// for i in tmp do
25504: LD_ADDR_VAR 0 1
25508: PUSH
25509: LD_VAR 0 2
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25546
// if GetLives ( i ) < 1000 then
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 256
25526: PUSH
25527: LD_INT 1000
25529: LESS
25530: IFFALSE 25544
// SetLives ( i , 1000 ) ;
25532: LD_VAR 0 1
25536: PPUSH
25537: LD_INT 1000
25539: PPUSH
25540: CALL_OW 234
25544: GO 25514
25546: POP
25547: POP
// until p > 20 ;
25548: LD_VAR 0 3
25552: PUSH
25553: LD_INT 20
25555: GREATER
25556: IFFALSE 25483
// end ;
25558: PPOPN 3
25560: END
// every 0 0$1 trigger StreamModeActive and sTime do
25561: LD_EXP 57
25565: PUSH
25566: LD_EXP 108
25570: AND
25571: IFFALSE 25606
25573: GO 25575
25575: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25576: LD_INT 28
25578: PPUSH
25579: LD_OWVAR 2
25583: PPUSH
25584: LD_INT 2
25586: PPUSH
25587: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25591: LD_INT 30
25593: PPUSH
25594: LD_OWVAR 2
25598: PPUSH
25599: LD_INT 2
25601: PPUSH
25602: CALL_OW 322
// end ;
25606: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25607: LD_EXP 57
25611: PUSH
25612: LD_EXP 109
25616: AND
25617: IFFALSE 25738
25619: GO 25621
25621: DISABLE
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25626: LD_ADDR_VAR 0 2
25630: PUSH
25631: LD_INT 22
25633: PUSH
25634: LD_OWVAR 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 21
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 23
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: PPUSH
25675: CALL_OW 69
25679: ST_TO_ADDR
// if not tmp then
25680: LD_VAR 0 2
25684: NOT
25685: IFFALSE 25689
// exit ;
25687: GO 25738
// for i in tmp do
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: LD_VAR 0 2
25698: PUSH
25699: FOR_IN
25700: IFFALSE 25736
// begin if Crawls ( i ) then
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 318
25711: IFFALSE 25722
// ComWalk ( i ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL_OW 138
// SetClass ( i , 2 ) ;
25722: LD_VAR 0 1
25726: PPUSH
25727: LD_INT 2
25729: PPUSH
25730: CALL_OW 336
// end ;
25734: GO 25699
25736: POP
25737: POP
// end ;
25738: PPOPN 2
25740: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25741: LD_EXP 57
25745: PUSH
25746: LD_EXP 110
25750: AND
25751: IFFALSE 26039
25753: GO 25755
25755: DISABLE
25756: LD_INT 0
25758: PPUSH
25759: PPUSH
25760: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25761: LD_OWVAR 2
25765: PPUSH
25766: LD_INT 9
25768: PPUSH
25769: LD_INT 1
25771: PPUSH
25772: LD_INT 1
25774: PPUSH
25775: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25779: LD_INT 9
25781: PPUSH
25782: LD_OWVAR 2
25786: PPUSH
25787: CALL_OW 343
// uc_side := 9 ;
25791: LD_ADDR_OWVAR 20
25795: PUSH
25796: LD_INT 9
25798: ST_TO_ADDR
// uc_nation := 2 ;
25799: LD_ADDR_OWVAR 21
25803: PUSH
25804: LD_INT 2
25806: ST_TO_ADDR
// hc_name := Dark Warrior ;
25807: LD_ADDR_OWVAR 26
25811: PUSH
25812: LD_STRING Dark Warrior
25814: ST_TO_ADDR
// hc_gallery :=  ;
25815: LD_ADDR_OWVAR 33
25819: PUSH
25820: LD_STRING 
25822: ST_TO_ADDR
// hc_noskilllimit := true ;
25823: LD_ADDR_OWVAR 76
25827: PUSH
25828: LD_INT 1
25830: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25831: LD_ADDR_OWVAR 31
25835: PUSH
25836: LD_INT 30
25838: PUSH
25839: LD_INT 30
25841: PUSH
25842: LD_INT 30
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// un := CreateHuman ;
25854: LD_ADDR_VAR 0 3
25858: PUSH
25859: CALL_OW 44
25863: ST_TO_ADDR
// hc_noskilllimit := false ;
25864: LD_ADDR_OWVAR 76
25868: PUSH
25869: LD_INT 0
25871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25872: LD_VAR 0 3
25876: PPUSH
25877: LD_INT 1
25879: PPUSH
25880: CALL_OW 51
// ToLua ( playRanger() ) ;
25884: LD_STRING playRanger()
25886: PPUSH
25887: CALL_OW 559
// p := 0 ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 0
25898: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25899: LD_INT 35
25901: PPUSH
25902: CALL_OW 67
// p := p + 1 ;
25906: LD_ADDR_VAR 0 2
25910: PUSH
25911: LD_VAR 0 2
25915: PUSH
25916: LD_INT 1
25918: PLUS
25919: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25920: LD_VAR 0 3
25924: PPUSH
25925: CALL_OW 256
25929: PUSH
25930: LD_INT 1000
25932: LESS
25933: IFFALSE 25947
// SetLives ( un , 1000 ) ;
25935: LD_VAR 0 3
25939: PPUSH
25940: LD_INT 1000
25942: PPUSH
25943: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25947: LD_VAR 0 3
25951: PPUSH
25952: LD_INT 81
25954: PUSH
25955: LD_OWVAR 2
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 91
25966: PUSH
25967: LD_VAR 0 3
25971: PUSH
25972: LD_INT 30
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 69
25988: PPUSH
25989: LD_VAR 0 3
25993: PPUSH
25994: CALL_OW 74
25998: PPUSH
25999: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26003: LD_VAR 0 2
26007: PUSH
26008: LD_INT 80
26010: GREATER
26011: PUSH
26012: LD_VAR 0 3
26016: PPUSH
26017: CALL_OW 301
26021: OR
26022: IFFALSE 25899
// if un then
26024: LD_VAR 0 3
26028: IFFALSE 26039
// RemoveUnit ( un ) ;
26030: LD_VAR 0 3
26034: PPUSH
26035: CALL_OW 64
// end ;
26039: PPOPN 3
26041: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26042: LD_EXP 111
26046: IFFALSE 26162
26048: GO 26050
26050: DISABLE
26051: LD_INT 0
26053: PPUSH
26054: PPUSH
26055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26056: LD_ADDR_VAR 0 2
26060: PUSH
26061: LD_INT 81
26063: PUSH
26064: LD_OWVAR 2
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 21
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 69
26091: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26092: LD_STRING playComputer()
26094: PPUSH
26095: CALL_OW 559
// if not tmp then
26099: LD_VAR 0 2
26103: NOT
26104: IFFALSE 26108
// exit ;
26106: GO 26162
// for i in tmp do
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: LD_VAR 0 2
26117: PUSH
26118: FOR_IN
26119: IFFALSE 26160
// for j := 1 to 4 do
26121: LD_ADDR_VAR 0 3
26125: PUSH
26126: DOUBLE
26127: LD_INT 1
26129: DEC
26130: ST_TO_ADDR
26131: LD_INT 4
26133: PUSH
26134: FOR_TO
26135: IFFALSE 26156
// SetSkill ( i , j , 10 ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: LD_INT 10
26149: PPUSH
26150: CALL_OW 237
26154: GO 26134
26156: POP
26157: POP
26158: GO 26118
26160: POP
26161: POP
// end ;
26162: PPOPN 3
26164: END
// every 0 0$1 trigger s30 do var i , tmp ;
26165: LD_EXP 112
26169: IFFALSE 26238
26171: GO 26173
26173: DISABLE
26174: LD_INT 0
26176: PPUSH
26177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26178: LD_ADDR_VAR 0 2
26182: PUSH
26183: LD_INT 22
26185: PUSH
26186: LD_OWVAR 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 69
26199: ST_TO_ADDR
// if not tmp then
26200: LD_VAR 0 2
26204: NOT
26205: IFFALSE 26209
// exit ;
26207: GO 26238
// for i in tmp do
26209: LD_ADDR_VAR 0 1
26213: PUSH
26214: LD_VAR 0 2
26218: PUSH
26219: FOR_IN
26220: IFFALSE 26236
// SetLives ( i , 300 ) ;
26222: LD_VAR 0 1
26226: PPUSH
26227: LD_INT 300
26229: PPUSH
26230: CALL_OW 234
26234: GO 26219
26236: POP
26237: POP
// end ;
26238: PPOPN 2
26240: END
// every 0 0$1 trigger s60 do var i , tmp ;
26241: LD_EXP 113
26245: IFFALSE 26314
26247: GO 26249
26249: DISABLE
26250: LD_INT 0
26252: PPUSH
26253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26254: LD_ADDR_VAR 0 2
26258: PUSH
26259: LD_INT 22
26261: PUSH
26262: LD_OWVAR 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PPUSH
26271: CALL_OW 69
26275: ST_TO_ADDR
// if not tmp then
26276: LD_VAR 0 2
26280: NOT
26281: IFFALSE 26285
// exit ;
26283: GO 26314
// for i in tmp do
26285: LD_ADDR_VAR 0 1
26289: PUSH
26290: LD_VAR 0 2
26294: PUSH
26295: FOR_IN
26296: IFFALSE 26312
// SetLives ( i , 600 ) ;
26298: LD_VAR 0 1
26302: PPUSH
26303: LD_INT 600
26305: PPUSH
26306: CALL_OW 234
26310: GO 26295
26312: POP
26313: POP
// end ;
26314: PPOPN 2
26316: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26317: LD_INT 0
26319: PPUSH
// case cmd of 301 :
26320: LD_VAR 0 1
26324: PUSH
26325: LD_INT 301
26327: DOUBLE
26328: EQUAL
26329: IFTRUE 26333
26331: GO 26365
26333: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26334: LD_VAR 0 6
26338: PPUSH
26339: LD_VAR 0 7
26343: PPUSH
26344: LD_VAR 0 8
26348: PPUSH
26349: LD_VAR 0 4
26353: PPUSH
26354: LD_VAR 0 5
26358: PPUSH
26359: CALL 27566 0 5
26363: GO 26486
26365: LD_INT 302
26367: DOUBLE
26368: EQUAL
26369: IFTRUE 26373
26371: GO 26410
26373: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26374: LD_VAR 0 6
26378: PPUSH
26379: LD_VAR 0 7
26383: PPUSH
26384: LD_VAR 0 8
26388: PPUSH
26389: LD_VAR 0 9
26393: PPUSH
26394: LD_VAR 0 4
26398: PPUSH
26399: LD_VAR 0 5
26403: PPUSH
26404: CALL 27657 0 6
26408: GO 26486
26410: LD_INT 303
26412: DOUBLE
26413: EQUAL
26414: IFTRUE 26418
26416: GO 26455
26418: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26419: LD_VAR 0 6
26423: PPUSH
26424: LD_VAR 0 7
26428: PPUSH
26429: LD_VAR 0 8
26433: PPUSH
26434: LD_VAR 0 9
26438: PPUSH
26439: LD_VAR 0 4
26443: PPUSH
26444: LD_VAR 0 5
26448: PPUSH
26449: CALL 26491 0 6
26453: GO 26486
26455: LD_INT 304
26457: DOUBLE
26458: EQUAL
26459: IFTRUE 26463
26461: GO 26485
26463: POP
// hHackTeleport ( unit , x , y ) ; end ;
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 4
26473: PPUSH
26474: LD_VAR 0 5
26478: PPUSH
26479: CALL 28250 0 3
26483: GO 26486
26485: POP
// end ;
26486: LD_VAR 0 12
26490: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26495: LD_VAR 0 1
26499: PUSH
26500: LD_INT 1
26502: LESS
26503: PUSH
26504: LD_VAR 0 1
26508: PUSH
26509: LD_INT 3
26511: GREATER
26512: OR
26513: PUSH
26514: LD_VAR 0 5
26518: PPUSH
26519: LD_VAR 0 6
26523: PPUSH
26524: CALL_OW 428
26528: OR
26529: IFFALSE 26533
// exit ;
26531: GO 27253
// uc_side := your_side ;
26533: LD_ADDR_OWVAR 20
26537: PUSH
26538: LD_OWVAR 2
26542: ST_TO_ADDR
// uc_nation := nation ;
26543: LD_ADDR_OWVAR 21
26547: PUSH
26548: LD_VAR 0 1
26552: ST_TO_ADDR
// bc_level = 1 ;
26553: LD_ADDR_OWVAR 43
26557: PUSH
26558: LD_INT 1
26560: ST_TO_ADDR
// case btype of 1 :
26561: LD_VAR 0 2
26565: PUSH
26566: LD_INT 1
26568: DOUBLE
26569: EQUAL
26570: IFTRUE 26574
26572: GO 26585
26574: POP
// bc_type := b_depot ; 2 :
26575: LD_ADDR_OWVAR 42
26579: PUSH
26580: LD_INT 0
26582: ST_TO_ADDR
26583: GO 27197
26585: LD_INT 2
26587: DOUBLE
26588: EQUAL
26589: IFTRUE 26593
26591: GO 26604
26593: POP
// bc_type := b_warehouse ; 3 :
26594: LD_ADDR_OWVAR 42
26598: PUSH
26599: LD_INT 1
26601: ST_TO_ADDR
26602: GO 27197
26604: LD_INT 3
26606: DOUBLE
26607: EQUAL
26608: IFTRUE 26612
26610: GO 26623
26612: POP
// bc_type := b_lab ; 4 .. 9 :
26613: LD_ADDR_OWVAR 42
26617: PUSH
26618: LD_INT 6
26620: ST_TO_ADDR
26621: GO 27197
26623: LD_INT 4
26625: DOUBLE
26626: GREATEREQUAL
26627: IFFALSE 26635
26629: LD_INT 9
26631: DOUBLE
26632: LESSEQUAL
26633: IFTRUE 26637
26635: GO 26689
26637: POP
// begin bc_type := b_lab_half ;
26638: LD_ADDR_OWVAR 42
26642: PUSH
26643: LD_INT 7
26645: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26646: LD_ADDR_OWVAR 44
26650: PUSH
26651: LD_INT 10
26653: PUSH
26654: LD_INT 11
26656: PUSH
26657: LD_INT 12
26659: PUSH
26660: LD_INT 15
26662: PUSH
26663: LD_INT 14
26665: PUSH
26666: LD_INT 13
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: PUSH
26677: LD_VAR 0 2
26681: PUSH
26682: LD_INT 3
26684: MINUS
26685: ARRAY
26686: ST_TO_ADDR
// end ; 10 .. 13 :
26687: GO 27197
26689: LD_INT 10
26691: DOUBLE
26692: GREATEREQUAL
26693: IFFALSE 26701
26695: LD_INT 13
26697: DOUBLE
26698: LESSEQUAL
26699: IFTRUE 26703
26701: GO 26780
26703: POP
// begin bc_type := b_lab_full ;
26704: LD_ADDR_OWVAR 42
26708: PUSH
26709: LD_INT 8
26711: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26712: LD_ADDR_OWVAR 44
26716: PUSH
26717: LD_INT 10
26719: PUSH
26720: LD_INT 12
26722: PUSH
26723: LD_INT 14
26725: PUSH
26726: LD_INT 13
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: PUSH
26735: LD_VAR 0 2
26739: PUSH
26740: LD_INT 9
26742: MINUS
26743: ARRAY
26744: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26745: LD_ADDR_OWVAR 45
26749: PUSH
26750: LD_INT 11
26752: PUSH
26753: LD_INT 15
26755: PUSH
26756: LD_INT 12
26758: PUSH
26759: LD_INT 15
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: PUSH
26768: LD_VAR 0 2
26772: PUSH
26773: LD_INT 9
26775: MINUS
26776: ARRAY
26777: ST_TO_ADDR
// end ; 14 :
26778: GO 27197
26780: LD_INT 14
26782: DOUBLE
26783: EQUAL
26784: IFTRUE 26788
26786: GO 26799
26788: POP
// bc_type := b_workshop ; 15 :
26789: LD_ADDR_OWVAR 42
26793: PUSH
26794: LD_INT 2
26796: ST_TO_ADDR
26797: GO 27197
26799: LD_INT 15
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 26818
26807: POP
// bc_type := b_factory ; 16 :
26808: LD_ADDR_OWVAR 42
26812: PUSH
26813: LD_INT 3
26815: ST_TO_ADDR
26816: GO 27197
26818: LD_INT 16
26820: DOUBLE
26821: EQUAL
26822: IFTRUE 26826
26824: GO 26837
26826: POP
// bc_type := b_ext_gun ; 17 :
26827: LD_ADDR_OWVAR 42
26831: PUSH
26832: LD_INT 17
26834: ST_TO_ADDR
26835: GO 27197
26837: LD_INT 17
26839: DOUBLE
26840: EQUAL
26841: IFTRUE 26845
26843: GO 26873
26845: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26846: LD_ADDR_OWVAR 42
26850: PUSH
26851: LD_INT 19
26853: PUSH
26854: LD_INT 23
26856: PUSH
26857: LD_INT 19
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: LD_VAR 0 1
26869: ARRAY
26870: ST_TO_ADDR
26871: GO 27197
26873: LD_INT 18
26875: DOUBLE
26876: EQUAL
26877: IFTRUE 26881
26879: GO 26892
26881: POP
// bc_type := b_ext_radar ; 19 :
26882: LD_ADDR_OWVAR 42
26886: PUSH
26887: LD_INT 20
26889: ST_TO_ADDR
26890: GO 27197
26892: LD_INT 19
26894: DOUBLE
26895: EQUAL
26896: IFTRUE 26900
26898: GO 26911
26900: POP
// bc_type := b_ext_radio ; 20 :
26901: LD_ADDR_OWVAR 42
26905: PUSH
26906: LD_INT 22
26908: ST_TO_ADDR
26909: GO 27197
26911: LD_INT 20
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26919
26917: GO 26930
26919: POP
// bc_type := b_ext_siberium ; 21 :
26920: LD_ADDR_OWVAR 42
26924: PUSH
26925: LD_INT 21
26927: ST_TO_ADDR
26928: GO 27197
26930: LD_INT 21
26932: DOUBLE
26933: EQUAL
26934: IFTRUE 26938
26936: GO 26949
26938: POP
// bc_type := b_ext_computer ; 22 :
26939: LD_ADDR_OWVAR 42
26943: PUSH
26944: LD_INT 24
26946: ST_TO_ADDR
26947: GO 27197
26949: LD_INT 22
26951: DOUBLE
26952: EQUAL
26953: IFTRUE 26957
26955: GO 26968
26957: POP
// bc_type := b_ext_track ; 23 :
26958: LD_ADDR_OWVAR 42
26962: PUSH
26963: LD_INT 16
26965: ST_TO_ADDR
26966: GO 27197
26968: LD_INT 23
26970: DOUBLE
26971: EQUAL
26972: IFTRUE 26976
26974: GO 26987
26976: POP
// bc_type := b_ext_laser ; 24 :
26977: LD_ADDR_OWVAR 42
26981: PUSH
26982: LD_INT 25
26984: ST_TO_ADDR
26985: GO 27197
26987: LD_INT 24
26989: DOUBLE
26990: EQUAL
26991: IFTRUE 26995
26993: GO 27006
26995: POP
// bc_type := b_control_tower ; 25 :
26996: LD_ADDR_OWVAR 42
27000: PUSH
27001: LD_INT 36
27003: ST_TO_ADDR
27004: GO 27197
27006: LD_INT 25
27008: DOUBLE
27009: EQUAL
27010: IFTRUE 27014
27012: GO 27025
27014: POP
// bc_type := b_breastwork ; 26 :
27015: LD_ADDR_OWVAR 42
27019: PUSH
27020: LD_INT 31
27022: ST_TO_ADDR
27023: GO 27197
27025: LD_INT 26
27027: DOUBLE
27028: EQUAL
27029: IFTRUE 27033
27031: GO 27044
27033: POP
// bc_type := b_bunker ; 27 :
27034: LD_ADDR_OWVAR 42
27038: PUSH
27039: LD_INT 32
27041: ST_TO_ADDR
27042: GO 27197
27044: LD_INT 27
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27052
27050: GO 27063
27052: POP
// bc_type := b_turret ; 28 :
27053: LD_ADDR_OWVAR 42
27057: PUSH
27058: LD_INT 33
27060: ST_TO_ADDR
27061: GO 27197
27063: LD_INT 28
27065: DOUBLE
27066: EQUAL
27067: IFTRUE 27071
27069: GO 27082
27071: POP
// bc_type := b_armoury ; 29 :
27072: LD_ADDR_OWVAR 42
27076: PUSH
27077: LD_INT 4
27079: ST_TO_ADDR
27080: GO 27197
27082: LD_INT 29
27084: DOUBLE
27085: EQUAL
27086: IFTRUE 27090
27088: GO 27101
27090: POP
// bc_type := b_barracks ; 30 :
27091: LD_ADDR_OWVAR 42
27095: PUSH
27096: LD_INT 5
27098: ST_TO_ADDR
27099: GO 27197
27101: LD_INT 30
27103: DOUBLE
27104: EQUAL
27105: IFTRUE 27109
27107: GO 27120
27109: POP
// bc_type := b_solar_power ; 31 :
27110: LD_ADDR_OWVAR 42
27114: PUSH
27115: LD_INT 27
27117: ST_TO_ADDR
27118: GO 27197
27120: LD_INT 31
27122: DOUBLE
27123: EQUAL
27124: IFTRUE 27128
27126: GO 27139
27128: POP
// bc_type := b_oil_power ; 32 :
27129: LD_ADDR_OWVAR 42
27133: PUSH
27134: LD_INT 26
27136: ST_TO_ADDR
27137: GO 27197
27139: LD_INT 32
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27158
27147: POP
// bc_type := b_siberite_power ; 33 :
27148: LD_ADDR_OWVAR 42
27152: PUSH
27153: LD_INT 28
27155: ST_TO_ADDR
27156: GO 27197
27158: LD_INT 33
27160: DOUBLE
27161: EQUAL
27162: IFTRUE 27166
27164: GO 27177
27166: POP
// bc_type := b_oil_mine ; 34 :
27167: LD_ADDR_OWVAR 42
27171: PUSH
27172: LD_INT 29
27174: ST_TO_ADDR
27175: GO 27197
27177: LD_INT 34
27179: DOUBLE
27180: EQUAL
27181: IFTRUE 27185
27183: GO 27196
27185: POP
// bc_type := b_siberite_mine ; end ;
27186: LD_ADDR_OWVAR 42
27190: PUSH
27191: LD_INT 30
27193: ST_TO_ADDR
27194: GO 27197
27196: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27197: LD_ADDR_VAR 0 8
27201: PUSH
27202: LD_VAR 0 5
27206: PPUSH
27207: LD_VAR 0 6
27211: PPUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: CALL_OW 47
27221: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27222: LD_OWVAR 42
27226: PUSH
27227: LD_INT 32
27229: PUSH
27230: LD_INT 33
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: IN
27237: IFFALSE 27253
// PlaceWeaponTurret ( b , weapon ) ;
27239: LD_VAR 0 8
27243: PPUSH
27244: LD_VAR 0 4
27248: PPUSH
27249: CALL_OW 431
// end ;
27253: LD_VAR 0 7
27257: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27258: LD_INT 0
27260: PPUSH
27261: PPUSH
27262: PPUSH
27263: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27264: LD_ADDR_VAR 0 4
27268: PUSH
27269: LD_INT 22
27271: PUSH
27272: LD_OWVAR 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 30
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 30
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: ST_TO_ADDR
// if not tmp then
27318: LD_VAR 0 4
27322: NOT
27323: IFFALSE 27327
// exit ;
27325: GO 27386
// for i in tmp do
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_VAR 0 4
27336: PUSH
27337: FOR_IN
27338: IFFALSE 27384
// for j = 1 to 3 do
27340: LD_ADDR_VAR 0 3
27344: PUSH
27345: DOUBLE
27346: LD_INT 1
27348: DEC
27349: ST_TO_ADDR
27350: LD_INT 3
27352: PUSH
27353: FOR_TO
27354: IFFALSE 27380
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27356: LD_VAR 0 2
27360: PPUSH
27361: CALL_OW 274
27365: PPUSH
27366: LD_VAR 0 3
27370: PPUSH
27371: LD_INT 99999
27373: PPUSH
27374: CALL_OW 277
27378: GO 27353
27380: POP
27381: POP
27382: GO 27337
27384: POP
27385: POP
// end ;
27386: LD_VAR 0 1
27390: RET
// export function hHackSetLevel10 ; var i , j ; begin
27391: LD_INT 0
27393: PPUSH
27394: PPUSH
27395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27396: LD_ADDR_VAR 0 2
27400: PUSH
27401: LD_INT 21
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PPUSH
27411: CALL_OW 69
27415: PUSH
27416: FOR_IN
27417: IFFALSE 27469
// if IsSelected ( i ) then
27419: LD_VAR 0 2
27423: PPUSH
27424: CALL_OW 306
27428: IFFALSE 27467
// begin for j := 1 to 4 do
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: DOUBLE
27436: LD_INT 1
27438: DEC
27439: ST_TO_ADDR
27440: LD_INT 4
27442: PUSH
27443: FOR_TO
27444: IFFALSE 27465
// SetSkill ( i , j , 10 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_VAR 0 3
27455: PPUSH
27456: LD_INT 10
27458: PPUSH
27459: CALL_OW 237
27463: GO 27443
27465: POP
27466: POP
// end ;
27467: GO 27416
27469: POP
27470: POP
// end ;
27471: LD_VAR 0 1
27475: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27476: LD_INT 0
27478: PPUSH
27479: PPUSH
27480: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27481: LD_ADDR_VAR 0 2
27485: PUSH
27486: LD_INT 22
27488: PUSH
27489: LD_OWVAR 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 21
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PPUSH
27512: CALL_OW 69
27516: PUSH
27517: FOR_IN
27518: IFFALSE 27559
// begin for j := 1 to 4 do
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: DOUBLE
27526: LD_INT 1
27528: DEC
27529: ST_TO_ADDR
27530: LD_INT 4
27532: PUSH
27533: FOR_TO
27534: IFFALSE 27555
// SetSkill ( i , j , 10 ) ;
27536: LD_VAR 0 2
27540: PPUSH
27541: LD_VAR 0 3
27545: PPUSH
27546: LD_INT 10
27548: PPUSH
27549: CALL_OW 237
27553: GO 27533
27555: POP
27556: POP
// end ;
27557: GO 27517
27559: POP
27560: POP
// end ;
27561: LD_VAR 0 1
27565: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27566: LD_INT 0
27568: PPUSH
// uc_side := your_side ;
27569: LD_ADDR_OWVAR 20
27573: PUSH
27574: LD_OWVAR 2
27578: ST_TO_ADDR
// uc_nation := nation ;
27579: LD_ADDR_OWVAR 21
27583: PUSH
27584: LD_VAR 0 1
27588: ST_TO_ADDR
// InitHc ;
27589: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27593: LD_INT 0
27595: PPUSH
27596: LD_VAR 0 2
27600: PPUSH
27601: LD_VAR 0 3
27605: PPUSH
27606: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27610: LD_VAR 0 4
27614: PPUSH
27615: LD_VAR 0 5
27619: PPUSH
27620: CALL_OW 428
27624: PUSH
27625: LD_INT 0
27627: EQUAL
27628: IFFALSE 27652
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27630: CALL_OW 44
27634: PPUSH
27635: LD_VAR 0 4
27639: PPUSH
27640: LD_VAR 0 5
27644: PPUSH
27645: LD_INT 1
27647: PPUSH
27648: CALL_OW 48
// end ;
27652: LD_VAR 0 6
27656: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27657: LD_INT 0
27659: PPUSH
27660: PPUSH
// uc_side := your_side ;
27661: LD_ADDR_OWVAR 20
27665: PUSH
27666: LD_OWVAR 2
27670: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27671: LD_VAR 0 1
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: LD_INT 4
27687: PUSH
27688: LD_INT 5
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: IN
27698: IFFALSE 27710
// uc_nation := nation_american else
27700: LD_ADDR_OWVAR 21
27704: PUSH
27705: LD_INT 1
27707: ST_TO_ADDR
27708: GO 27753
// if chassis in [ 11 , 12 , 13 , 14 ] then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_INT 11
27717: PUSH
27718: LD_INT 12
27720: PUSH
27721: LD_INT 13
27723: PUSH
27724: LD_INT 14
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: IN
27733: IFFALSE 27745
// uc_nation := nation_arabian else
27735: LD_ADDR_OWVAR 21
27739: PUSH
27740: LD_INT 2
27742: ST_TO_ADDR
27743: GO 27753
// uc_nation := nation_russian ;
27745: LD_ADDR_OWVAR 21
27749: PUSH
27750: LD_INT 3
27752: ST_TO_ADDR
// vc_chassis := chassis ;
27753: LD_ADDR_OWVAR 37
27757: PUSH
27758: LD_VAR 0 1
27762: ST_TO_ADDR
// vc_engine := engine ;
27763: LD_ADDR_OWVAR 39
27767: PUSH
27768: LD_VAR 0 2
27772: ST_TO_ADDR
// vc_control := control ;
27773: LD_ADDR_OWVAR 38
27777: PUSH
27778: LD_VAR 0 3
27782: ST_TO_ADDR
// vc_weapon := weapon ;
27783: LD_ADDR_OWVAR 40
27787: PUSH
27788: LD_VAR 0 4
27792: ST_TO_ADDR
// un := CreateVehicle ;
27793: LD_ADDR_VAR 0 8
27797: PUSH
27798: CALL_OW 45
27802: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27803: LD_VAR 0 8
27807: PPUSH
27808: LD_INT 0
27810: PPUSH
27811: LD_INT 5
27813: PPUSH
27814: CALL_OW 12
27818: PPUSH
27819: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27823: LD_VAR 0 8
27827: PPUSH
27828: LD_VAR 0 5
27832: PPUSH
27833: LD_VAR 0 6
27837: PPUSH
27838: LD_INT 1
27840: PPUSH
27841: CALL_OW 48
// end ;
27845: LD_VAR 0 7
27849: RET
// export hInvincible ; every 1 do
27850: GO 27852
27852: DISABLE
// hInvincible := [ ] ;
27853: LD_ADDR_EXP 114
27857: PUSH
27858: EMPTY
27859: ST_TO_ADDR
27860: END
// every 10 do var i ;
27861: GO 27863
27863: DISABLE
27864: LD_INT 0
27866: PPUSH
// begin enable ;
27867: ENABLE
// if not hInvincible then
27868: LD_EXP 114
27872: NOT
27873: IFFALSE 27877
// exit ;
27875: GO 27921
// for i in hInvincible do
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: LD_EXP 114
27886: PUSH
27887: FOR_IN
27888: IFFALSE 27919
// if GetLives ( i ) < 1000 then
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL_OW 256
27899: PUSH
27900: LD_INT 1000
27902: LESS
27903: IFFALSE 27917
// SetLives ( i , 1000 ) ;
27905: LD_VAR 0 1
27909: PPUSH
27910: LD_INT 1000
27912: PPUSH
27913: CALL_OW 234
27917: GO 27887
27919: POP
27920: POP
// end ;
27921: PPOPN 1
27923: END
// export function hHackInvincible ; var i ; begin
27924: LD_INT 0
27926: PPUSH
27927: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 21
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 21
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: PUSH
27966: FOR_IN
27967: IFFALSE 28028
// if IsSelected ( i ) then
27969: LD_VAR 0 2
27973: PPUSH
27974: CALL_OW 306
27978: IFFALSE 28026
// begin if i in hInvincible then
27980: LD_VAR 0 2
27984: PUSH
27985: LD_EXP 114
27989: IN
27990: IFFALSE 28010
// hInvincible := hInvincible diff i else
27992: LD_ADDR_EXP 114
27996: PUSH
27997: LD_EXP 114
28001: PUSH
28002: LD_VAR 0 2
28006: DIFF
28007: ST_TO_ADDR
28008: GO 28026
// hInvincible := hInvincible union i ;
28010: LD_ADDR_EXP 114
28014: PUSH
28015: LD_EXP 114
28019: PUSH
28020: LD_VAR 0 2
28024: UNION
28025: ST_TO_ADDR
// end ;
28026: GO 27966
28028: POP
28029: POP
// end ;
28030: LD_VAR 0 1
28034: RET
// export function hHackInvisible ; var i , j ; begin
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28040: LD_ADDR_VAR 0 2
28044: PUSH
28045: LD_INT 21
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PPUSH
28055: CALL_OW 69
28059: PUSH
28060: FOR_IN
28061: IFFALSE 28085
// if IsSelected ( i ) then
28063: LD_VAR 0 2
28067: PPUSH
28068: CALL_OW 306
28072: IFFALSE 28083
// ComForceInvisible ( i ) ;
28074: LD_VAR 0 2
28078: PPUSH
28079: CALL_OW 496
28083: GO 28060
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 1
28091: RET
// export function hHackChangeYourSide ; begin
28092: LD_INT 0
28094: PPUSH
// if your_side = 8 then
28095: LD_OWVAR 2
28099: PUSH
28100: LD_INT 8
28102: EQUAL
28103: IFFALSE 28115
// your_side := 0 else
28105: LD_ADDR_OWVAR 2
28109: PUSH
28110: LD_INT 0
28112: ST_TO_ADDR
28113: GO 28129
// your_side := your_side + 1 ;
28115: LD_ADDR_OWVAR 2
28119: PUSH
28120: LD_OWVAR 2
28124: PUSH
28125: LD_INT 1
28127: PLUS
28128: ST_TO_ADDR
// end ;
28129: LD_VAR 0 1
28133: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
28138: PPUSH
// for i in all_units do
28139: LD_ADDR_VAR 0 2
28143: PUSH
28144: LD_OWVAR 3
28148: PUSH
28149: FOR_IN
28150: IFFALSE 28228
// if IsSelected ( i ) then
28152: LD_VAR 0 2
28156: PPUSH
28157: CALL_OW 306
28161: IFFALSE 28226
// begin j := GetSide ( i ) ;
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_VAR 0 2
28172: PPUSH
28173: CALL_OW 255
28177: ST_TO_ADDR
// if j = 8 then
28178: LD_VAR 0 3
28182: PUSH
28183: LD_INT 8
28185: EQUAL
28186: IFFALSE 28198
// j := 0 else
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 0
28195: ST_TO_ADDR
28196: GO 28212
// j := j + 1 ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_VAR 0 3
28207: PUSH
28208: LD_INT 1
28210: PLUS
28211: ST_TO_ADDR
// SetSide ( i , j ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_VAR 0 3
28221: PPUSH
28222: CALL_OW 235
// end ;
28226: GO 28149
28228: POP
28229: POP
// end ;
28230: LD_VAR 0 1
28234: RET
// export function hHackFog ; begin
28235: LD_INT 0
28237: PPUSH
// FogOff ( true ) ;
28238: LD_INT 1
28240: PPUSH
28241: CALL_OW 344
// end ;
28245: LD_VAR 0 1
28249: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28250: LD_INT 0
28252: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_VAR 0 2
28262: PPUSH
28263: LD_VAR 0 3
28267: PPUSH
28268: LD_INT 1
28270: PPUSH
28271: LD_INT 1
28273: PPUSH
28274: CALL_OW 483
// CenterOnXY ( x , y ) ;
28278: LD_VAR 0 2
28282: PPUSH
28283: LD_VAR 0 3
28287: PPUSH
28288: CALL_OW 84
// end ; end_of_file
28292: LD_VAR 0 4
28296: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28297: LD_INT 0
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28303: LD_VAR 0 1
28307: PPUSH
28308: CALL_OW 264
28312: PUSH
28313: LD_EXP 131
28317: EQUAL
28318: IFFALSE 28390
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28320: LD_INT 68
28322: PPUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 255
28332: PPUSH
28333: CALL_OW 321
28337: PUSH
28338: LD_INT 2
28340: EQUAL
28341: IFFALSE 28353
// eff := 70 else
28343: LD_ADDR_VAR 0 4
28347: PUSH
28348: LD_INT 70
28350: ST_TO_ADDR
28351: GO 28361
// eff := 30 ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_INT 30
28360: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28361: LD_VAR 0 1
28365: PPUSH
28366: CALL_OW 250
28370: PPUSH
28371: LD_VAR 0 1
28375: PPUSH
28376: CALL_OW 251
28380: PPUSH
28381: LD_VAR 0 4
28385: PPUSH
28386: CALL_OW 495
// end ; end ;
28390: LD_VAR 0 2
28394: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28395: LD_INT 0
28397: PPUSH
// end ;
28398: LD_VAR 0 4
28402: RET
// export function SOS_Command ( cmd ) ; begin
28403: LD_INT 0
28405: PPUSH
// end ;
28406: LD_VAR 0 2
28410: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28411: LD_INT 0
28413: PPUSH
// end ;
28414: LD_VAR 0 6
28418: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28419: LD_INT 0
28421: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28422: LD_VAR 0 1
28426: PUSH
28427: LD_INT 250
28429: EQUAL
28430: PUSH
28431: LD_VAR 0 2
28435: PPUSH
28436: CALL_OW 264
28440: PUSH
28441: LD_EXP 134
28445: EQUAL
28446: AND
28447: IFFALSE 28468
// MinerPlaceMine ( unit , x , y ) ;
28449: LD_VAR 0 2
28453: PPUSH
28454: LD_VAR 0 4
28458: PPUSH
28459: LD_VAR 0 5
28463: PPUSH
28464: CALL 30817 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28468: LD_VAR 0 1
28472: PUSH
28473: LD_INT 251
28475: EQUAL
28476: PUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: CALL_OW 264
28486: PUSH
28487: LD_EXP 134
28491: EQUAL
28492: AND
28493: IFFALSE 28514
// MinerDetonateMine ( unit , x , y ) ;
28495: LD_VAR 0 2
28499: PPUSH
28500: LD_VAR 0 4
28504: PPUSH
28505: LD_VAR 0 5
28509: PPUSH
28510: CALL 31094 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28514: LD_VAR 0 1
28518: PUSH
28519: LD_INT 252
28521: EQUAL
28522: PUSH
28523: LD_VAR 0 2
28527: PPUSH
28528: CALL_OW 264
28532: PUSH
28533: LD_EXP 134
28537: EQUAL
28538: AND
28539: IFFALSE 28560
// MinerCreateMinefield ( unit , x , y ) ;
28541: LD_VAR 0 2
28545: PPUSH
28546: LD_VAR 0 4
28550: PPUSH
28551: LD_VAR 0 5
28555: PPUSH
28556: CALL 31511 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28560: LD_VAR 0 1
28564: PUSH
28565: LD_INT 253
28567: EQUAL
28568: PUSH
28569: LD_VAR 0 2
28573: PPUSH
28574: CALL_OW 257
28578: PUSH
28579: LD_INT 5
28581: EQUAL
28582: AND
28583: IFFALSE 28604
// ComBinocular ( unit , x , y ) ;
28585: LD_VAR 0 2
28589: PPUSH
28590: LD_VAR 0 4
28594: PPUSH
28595: LD_VAR 0 5
28599: PPUSH
28600: CALL 31882 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28604: LD_VAR 0 1
28608: PUSH
28609: LD_INT 254
28611: EQUAL
28612: PUSH
28613: LD_VAR 0 2
28617: PPUSH
28618: CALL_OW 264
28622: PUSH
28623: LD_EXP 129
28627: EQUAL
28628: AND
28629: PUSH
28630: LD_VAR 0 3
28634: PPUSH
28635: CALL_OW 263
28639: PUSH
28640: LD_INT 3
28642: EQUAL
28643: AND
28644: IFFALSE 28660
// HackDestroyVehicle ( unit , selectedUnit ) ;
28646: LD_VAR 0 2
28650: PPUSH
28651: LD_VAR 0 3
28655: PPUSH
28656: CALL 30177 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 255
28667: EQUAL
28668: PUSH
28669: LD_VAR 0 2
28673: PPUSH
28674: CALL_OW 264
28678: PUSH
28679: LD_INT 14
28681: PUSH
28682: LD_INT 53
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: IN
28689: AND
28690: PUSH
28691: LD_VAR 0 4
28695: PPUSH
28696: LD_VAR 0 5
28700: PPUSH
28701: CALL_OW 488
28705: AND
28706: IFFALSE 28730
// CutTreeXYR ( unit , x , y , 12 ) ;
28708: LD_VAR 0 2
28712: PPUSH
28713: LD_VAR 0 4
28717: PPUSH
28718: LD_VAR 0 5
28722: PPUSH
28723: LD_INT 12
28725: PPUSH
28726: CALL 28743 0 4
// end ;
28730: LD_VAR 0 6
28734: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28735: LD_INT 0
28737: PPUSH
// end ;
28738: LD_VAR 0 4
28742: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
28749: PPUSH
28750: PPUSH
28751: PPUSH
28752: PPUSH
28753: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28754: LD_VAR 0 1
28758: NOT
28759: PUSH
28760: LD_VAR 0 2
28764: PPUSH
28765: LD_VAR 0 3
28769: PPUSH
28770: CALL_OW 488
28774: NOT
28775: OR
28776: PUSH
28777: LD_VAR 0 4
28781: NOT
28782: OR
28783: IFFALSE 28787
// exit ;
28785: GO 29127
// list := [ ] ;
28787: LD_ADDR_VAR 0 13
28791: PUSH
28792: EMPTY
28793: ST_TO_ADDR
// if x - r < 0 then
28794: LD_VAR 0 2
28798: PUSH
28799: LD_VAR 0 4
28803: MINUS
28804: PUSH
28805: LD_INT 0
28807: LESS
28808: IFFALSE 28820
// min_x := 0 else
28810: LD_ADDR_VAR 0 7
28814: PUSH
28815: LD_INT 0
28817: ST_TO_ADDR
28818: GO 28836
// min_x := x - r ;
28820: LD_ADDR_VAR 0 7
28824: PUSH
28825: LD_VAR 0 2
28829: PUSH
28830: LD_VAR 0 4
28834: MINUS
28835: ST_TO_ADDR
// if y - r < 0 then
28836: LD_VAR 0 3
28840: PUSH
28841: LD_VAR 0 4
28845: MINUS
28846: PUSH
28847: LD_INT 0
28849: LESS
28850: IFFALSE 28862
// min_y := 0 else
28852: LD_ADDR_VAR 0 8
28856: PUSH
28857: LD_INT 0
28859: ST_TO_ADDR
28860: GO 28878
// min_y := y - r ;
28862: LD_ADDR_VAR 0 8
28866: PUSH
28867: LD_VAR 0 3
28871: PUSH
28872: LD_VAR 0 4
28876: MINUS
28877: ST_TO_ADDR
// max_x := x + r ;
28878: LD_ADDR_VAR 0 9
28882: PUSH
28883: LD_VAR 0 2
28887: PUSH
28888: LD_VAR 0 4
28892: PLUS
28893: ST_TO_ADDR
// max_y := y + r ;
28894: LD_ADDR_VAR 0 10
28898: PUSH
28899: LD_VAR 0 3
28903: PUSH
28904: LD_VAR 0 4
28908: PLUS
28909: ST_TO_ADDR
// for _x = min_x to max_x do
28910: LD_ADDR_VAR 0 11
28914: PUSH
28915: DOUBLE
28916: LD_VAR 0 7
28920: DEC
28921: ST_TO_ADDR
28922: LD_VAR 0 9
28926: PUSH
28927: FOR_TO
28928: IFFALSE 29045
// for _y = min_y to max_y do
28930: LD_ADDR_VAR 0 12
28934: PUSH
28935: DOUBLE
28936: LD_VAR 0 8
28940: DEC
28941: ST_TO_ADDR
28942: LD_VAR 0 10
28946: PUSH
28947: FOR_TO
28948: IFFALSE 29041
// begin if not ValidHex ( _x , _y ) then
28950: LD_VAR 0 11
28954: PPUSH
28955: LD_VAR 0 12
28959: PPUSH
28960: CALL_OW 488
28964: NOT
28965: IFFALSE 28969
// continue ;
28967: GO 28947
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28969: LD_VAR 0 11
28973: PPUSH
28974: LD_VAR 0 12
28978: PPUSH
28979: CALL_OW 351
28983: PUSH
28984: LD_VAR 0 11
28988: PPUSH
28989: LD_VAR 0 12
28993: PPUSH
28994: CALL_OW 554
28998: AND
28999: IFFALSE 29039
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29001: LD_ADDR_VAR 0 13
29005: PUSH
29006: LD_VAR 0 13
29010: PPUSH
29011: LD_VAR 0 13
29015: PUSH
29016: LD_INT 1
29018: PLUS
29019: PPUSH
29020: LD_VAR 0 11
29024: PUSH
29025: LD_VAR 0 12
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PPUSH
29034: CALL_OW 2
29038: ST_TO_ADDR
// end ;
29039: GO 28947
29041: POP
29042: POP
29043: GO 28927
29045: POP
29046: POP
// if not list then
29047: LD_VAR 0 13
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29127
// for i in list do
29056: LD_ADDR_VAR 0 6
29060: PUSH
29061: LD_VAR 0 13
29065: PUSH
29066: FOR_IN
29067: IFFALSE 29125
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_STRING M
29076: PUSH
29077: LD_VAR 0 6
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PUSH
29086: LD_VAR 0 6
29090: PUSH
29091: LD_INT 2
29093: ARRAY
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: PPUSH
29119: CALL_OW 447
29123: GO 29066
29125: POP
29126: POP
// end ;
29127: LD_VAR 0 5
29131: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29132: LD_EXP 117
29136: NOT
29137: IFFALSE 29187
29139: GO 29141
29141: DISABLE
// begin initHack := true ;
29142: LD_ADDR_EXP 117
29146: PUSH
29147: LD_INT 1
29149: ST_TO_ADDR
// hackTanks := [ ] ;
29150: LD_ADDR_EXP 118
29154: PUSH
29155: EMPTY
29156: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29157: LD_ADDR_EXP 119
29161: PUSH
29162: EMPTY
29163: ST_TO_ADDR
// hackLimit := 3 ;
29164: LD_ADDR_EXP 120
29168: PUSH
29169: LD_INT 3
29171: ST_TO_ADDR
// hackDist := 12 ;
29172: LD_ADDR_EXP 121
29176: PUSH
29177: LD_INT 12
29179: ST_TO_ADDR
// hackCounter := [ ] ;
29180: LD_ADDR_EXP 122
29184: PUSH
29185: EMPTY
29186: ST_TO_ADDR
// end ;
29187: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29188: LD_EXP 117
29192: PUSH
29193: LD_INT 34
29195: PUSH
29196: LD_EXP 129
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: AND
29210: IFFALSE 29465
29212: GO 29214
29214: DISABLE
29215: LD_INT 0
29217: PPUSH
29218: PPUSH
// begin enable ;
29219: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29220: LD_ADDR_VAR 0 1
29224: PUSH
29225: LD_INT 34
29227: PUSH
29228: LD_EXP 129
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: PUSH
29242: FOR_IN
29243: IFFALSE 29463
// begin if not i in hackTanks then
29245: LD_VAR 0 1
29249: PUSH
29250: LD_EXP 118
29254: IN
29255: NOT
29256: IFFALSE 29339
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29258: LD_ADDR_EXP 118
29262: PUSH
29263: LD_EXP 118
29267: PPUSH
29268: LD_EXP 118
29272: PUSH
29273: LD_INT 1
29275: PLUS
29276: PPUSH
29277: LD_VAR 0 1
29281: PPUSH
29282: CALL_OW 1
29286: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29287: LD_ADDR_EXP 119
29291: PUSH
29292: LD_EXP 119
29296: PPUSH
29297: LD_EXP 119
29301: PUSH
29302: LD_INT 1
29304: PLUS
29305: PPUSH
29306: EMPTY
29307: PPUSH
29308: CALL_OW 1
29312: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29313: LD_ADDR_EXP 122
29317: PUSH
29318: LD_EXP 122
29322: PPUSH
29323: LD_EXP 122
29327: PUSH
29328: LD_INT 1
29330: PLUS
29331: PPUSH
29332: EMPTY
29333: PPUSH
29334: CALL_OW 1
29338: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29339: LD_VAR 0 1
29343: PPUSH
29344: CALL_OW 302
29348: NOT
29349: IFFALSE 29362
// begin HackUnlinkAll ( i ) ;
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL 29468 0 1
// continue ;
29360: GO 29242
// end ; HackCheckCapturedStatus ( i ) ;
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL 29911 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29371: LD_ADDR_VAR 0 2
29375: PUSH
29376: LD_INT 81
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 255
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 33
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 91
29405: PUSH
29406: LD_VAR 0 1
29410: PUSH
29411: LD_EXP 121
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 50
29423: PUSH
29424: EMPTY
29425: LIST
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: ST_TO_ADDR
// if not tmp then
29438: LD_VAR 0 2
29442: NOT
29443: IFFALSE 29447
// continue ;
29445: GO 29242
// HackLink ( i , tmp ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL 29604 0 2
// end ;
29461: GO 29242
29463: POP
29464: POP
// end ;
29465: PPOPN 2
29467: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
29472: PPUSH
// if not hack in hackTanks then
29473: LD_VAR 0 1
29477: PUSH
29478: LD_EXP 118
29482: IN
29483: NOT
29484: IFFALSE 29488
// exit ;
29486: GO 29599
// index := GetElementIndex ( hackTanks , hack ) ;
29488: LD_ADDR_VAR 0 4
29492: PUSH
29493: LD_EXP 118
29497: PPUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL 37404 0 2
29507: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29508: LD_EXP 119
29512: PUSH
29513: LD_VAR 0 4
29517: ARRAY
29518: IFFALSE 29599
// begin for i in hackTanksCaptured [ index ] do
29520: LD_ADDR_VAR 0 3
29524: PUSH
29525: LD_EXP 119
29529: PUSH
29530: LD_VAR 0 4
29534: ARRAY
29535: PUSH
29536: FOR_IN
29537: IFFALSE 29563
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29539: LD_VAR 0 3
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PPUSH
29548: LD_VAR 0 3
29552: PUSH
29553: LD_INT 2
29555: ARRAY
29556: PPUSH
29557: CALL_OW 235
29561: GO 29536
29563: POP
29564: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29565: LD_ADDR_EXP 119
29569: PUSH
29570: LD_EXP 119
29574: PPUSH
29575: LD_VAR 0 4
29579: PPUSH
29580: EMPTY
29581: PPUSH
29582: CALL_OW 1
29586: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29587: LD_VAR 0 1
29591: PPUSH
29592: LD_INT 0
29594: PPUSH
29595: CALL_OW 505
// end ; end ;
29599: LD_VAR 0 2
29603: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29604: LD_INT 0
29606: PPUSH
29607: PPUSH
29608: PPUSH
// if not hack in hackTanks or not vehicles then
29609: LD_VAR 0 1
29613: PUSH
29614: LD_EXP 118
29618: IN
29619: NOT
29620: PUSH
29621: LD_VAR 0 2
29625: NOT
29626: OR
29627: IFFALSE 29631
// exit ;
29629: GO 29906
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29631: LD_ADDR_VAR 0 2
29635: PUSH
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_INT 1
29648: PPUSH
29649: LD_INT 1
29651: PPUSH
29652: CALL 38054 0 4
29656: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29657: LD_ADDR_VAR 0 5
29661: PUSH
29662: LD_EXP 118
29666: PPUSH
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL 37404 0 2
29676: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29677: LD_EXP 119
29681: PUSH
29682: LD_VAR 0 5
29686: ARRAY
29687: PUSH
29688: LD_EXP 120
29692: LESS
29693: IFFALSE 29882
// begin for i := 1 to vehicles do
29695: LD_ADDR_VAR 0 4
29699: PUSH
29700: DOUBLE
29701: LD_INT 1
29703: DEC
29704: ST_TO_ADDR
29705: LD_VAR 0 2
29709: PUSH
29710: FOR_TO
29711: IFFALSE 29880
// begin if hackTanksCaptured [ index ] = hackLimit then
29713: LD_EXP 119
29717: PUSH
29718: LD_VAR 0 5
29722: ARRAY
29723: PUSH
29724: LD_EXP 120
29728: EQUAL
29729: IFFALSE 29733
// break ;
29731: GO 29880
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29733: LD_ADDR_EXP 122
29737: PUSH
29738: LD_EXP 122
29742: PPUSH
29743: LD_VAR 0 5
29747: PPUSH
29748: LD_EXP 122
29752: PUSH
29753: LD_VAR 0 5
29757: ARRAY
29758: PUSH
29759: LD_INT 1
29761: PLUS
29762: PPUSH
29763: CALL_OW 1
29767: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29768: LD_ADDR_EXP 119
29772: PUSH
29773: LD_EXP 119
29777: PPUSH
29778: LD_VAR 0 5
29782: PUSH
29783: LD_EXP 119
29787: PUSH
29788: LD_VAR 0 5
29792: ARRAY
29793: PUSH
29794: LD_INT 1
29796: PLUS
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PPUSH
29802: LD_VAR 0 2
29806: PUSH
29807: LD_VAR 0 4
29811: ARRAY
29812: PUSH
29813: LD_VAR 0 2
29817: PUSH
29818: LD_VAR 0 4
29822: ARRAY
29823: PPUSH
29824: CALL_OW 255
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL 37619 0 3
29837: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29838: LD_VAR 0 2
29842: PUSH
29843: LD_VAR 0 4
29847: ARRAY
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 255
29858: PPUSH
29859: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29863: LD_VAR 0 2
29867: PUSH
29868: LD_VAR 0 4
29872: ARRAY
29873: PPUSH
29874: CALL_OW 141
// end ;
29878: GO 29710
29880: POP
29881: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29882: LD_VAR 0 1
29886: PPUSH
29887: LD_EXP 119
29891: PUSH
29892: LD_VAR 0 5
29896: ARRAY
29897: PUSH
29898: LD_INT 0
29900: PLUS
29901: PPUSH
29902: CALL_OW 505
// end ;
29906: LD_VAR 0 3
29910: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29911: LD_INT 0
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
// if not hack in hackTanks then
29917: LD_VAR 0 1
29921: PUSH
29922: LD_EXP 118
29926: IN
29927: NOT
29928: IFFALSE 29932
// exit ;
29930: GO 30172
// index := GetElementIndex ( hackTanks , hack ) ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_EXP 118
29941: PPUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL 37404 0 2
29951: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: DOUBLE
29958: LD_EXP 119
29962: PUSH
29963: LD_VAR 0 4
29967: ARRAY
29968: INC
29969: ST_TO_ADDR
29970: LD_INT 1
29972: PUSH
29973: FOR_DOWNTO
29974: IFFALSE 30146
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29976: LD_ADDR_VAR 0 5
29980: PUSH
29981: LD_EXP 119
29985: PUSH
29986: LD_VAR 0 4
29990: ARRAY
29991: PUSH
29992: LD_VAR 0 3
29996: ARRAY
29997: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29998: LD_VAR 0 5
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: PPUSH
30007: CALL_OW 302
30011: NOT
30012: PUSH
30013: LD_VAR 0 5
30017: PUSH
30018: LD_INT 1
30020: ARRAY
30021: PPUSH
30022: CALL_OW 255
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 255
30036: NONEQUAL
30037: OR
30038: IFFALSE 30144
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30040: LD_VAR 0 5
30044: PUSH
30045: LD_INT 1
30047: ARRAY
30048: PPUSH
30049: CALL_OW 305
30053: PUSH
30054: LD_VAR 0 5
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: CALL_OW 255
30067: PUSH
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 255
30077: EQUAL
30078: AND
30079: IFFALSE 30103
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30081: LD_VAR 0 5
30085: PUSH
30086: LD_INT 1
30088: ARRAY
30089: PPUSH
30090: LD_VAR 0 5
30094: PUSH
30095: LD_INT 2
30097: ARRAY
30098: PPUSH
30099: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30103: LD_ADDR_EXP 119
30107: PUSH
30108: LD_EXP 119
30112: PPUSH
30113: LD_VAR 0 4
30117: PPUSH
30118: LD_EXP 119
30122: PUSH
30123: LD_VAR 0 4
30127: ARRAY
30128: PPUSH
30129: LD_VAR 0 3
30133: PPUSH
30134: CALL_OW 3
30138: PPUSH
30139: CALL_OW 1
30143: ST_TO_ADDR
// end ; end ;
30144: GO 29973
30146: POP
30147: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_EXP 119
30157: PUSH
30158: LD_VAR 0 4
30162: ARRAY
30163: PUSH
30164: LD_INT 0
30166: PLUS
30167: PPUSH
30168: CALL_OW 505
// end ;
30172: LD_VAR 0 2
30176: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30177: LD_INT 0
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
// if not hack in hackTanks then
30183: LD_VAR 0 1
30187: PUSH
30188: LD_EXP 118
30192: IN
30193: NOT
30194: IFFALSE 30198
// exit ;
30196: GO 30283
// index := GetElementIndex ( hackTanks , hack ) ;
30198: LD_ADDR_VAR 0 5
30202: PUSH
30203: LD_EXP 118
30207: PPUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL 37404 0 2
30217: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30218: LD_ADDR_VAR 0 4
30222: PUSH
30223: DOUBLE
30224: LD_INT 1
30226: DEC
30227: ST_TO_ADDR
30228: LD_EXP 119
30232: PUSH
30233: LD_VAR 0 5
30237: ARRAY
30238: PUSH
30239: FOR_TO
30240: IFFALSE 30281
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30242: LD_EXP 119
30246: PUSH
30247: LD_VAR 0 5
30251: ARRAY
30252: PUSH
30253: LD_VAR 0 4
30257: ARRAY
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: PUSH
30263: LD_VAR 0 2
30267: EQUAL
30268: IFFALSE 30279
// KillUnit ( vehicle ) ;
30270: LD_VAR 0 2
30274: PPUSH
30275: CALL_OW 66
30279: GO 30239
30281: POP
30282: POP
// end ;
30283: LD_VAR 0 3
30287: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30288: LD_EXP 123
30292: NOT
30293: IFFALSE 30328
30295: GO 30297
30297: DISABLE
// begin initMiner := true ;
30298: LD_ADDR_EXP 123
30302: PUSH
30303: LD_INT 1
30305: ST_TO_ADDR
// minersList := [ ] ;
30306: LD_ADDR_EXP 124
30310: PUSH
30311: EMPTY
30312: ST_TO_ADDR
// minerMinesList := [ ] ;
30313: LD_ADDR_EXP 125
30317: PUSH
30318: EMPTY
30319: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30320: LD_ADDR_EXP 126
30324: PUSH
30325: LD_INT 5
30327: ST_TO_ADDR
// end ;
30328: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30329: LD_EXP 123
30333: PUSH
30334: LD_INT 34
30336: PUSH
30337: LD_EXP 134
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PPUSH
30346: CALL_OW 69
30350: AND
30351: IFFALSE 30814
30353: GO 30355
30355: DISABLE
30356: LD_INT 0
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
// begin enable ;
30362: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 34
30370: PUSH
30371: LD_EXP 134
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 69
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30458
// begin if not i in minersList then
30388: LD_VAR 0 1
30392: PUSH
30393: LD_EXP 124
30397: IN
30398: NOT
30399: IFFALSE 30456
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30401: LD_ADDR_EXP 124
30405: PUSH
30406: LD_EXP 124
30410: PPUSH
30411: LD_EXP 124
30415: PUSH
30416: LD_INT 1
30418: PLUS
30419: PPUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: CALL_OW 1
30429: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30430: LD_ADDR_EXP 125
30434: PUSH
30435: LD_EXP 125
30439: PPUSH
30440: LD_EXP 125
30444: PUSH
30445: LD_INT 1
30447: PLUS
30448: PPUSH
30449: EMPTY
30450: PPUSH
30451: CALL_OW 1
30455: ST_TO_ADDR
// end end ;
30456: GO 30385
30458: POP
30459: POP
// for i := minerMinesList downto 1 do
30460: LD_ADDR_VAR 0 1
30464: PUSH
30465: DOUBLE
30466: LD_EXP 125
30470: INC
30471: ST_TO_ADDR
30472: LD_INT 1
30474: PUSH
30475: FOR_DOWNTO
30476: IFFALSE 30812
// begin if IsLive ( minersList [ i ] ) then
30478: LD_EXP 124
30482: PUSH
30483: LD_VAR 0 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 300
30493: IFFALSE 30521
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30495: LD_EXP 124
30499: PUSH
30500: LD_VAR 0 1
30504: ARRAY
30505: PPUSH
30506: LD_EXP 125
30510: PUSH
30511: LD_VAR 0 1
30515: ARRAY
30516: PPUSH
30517: CALL_OW 505
// if not minerMinesList [ i ] then
30521: LD_EXP 125
30525: PUSH
30526: LD_VAR 0 1
30530: ARRAY
30531: NOT
30532: IFFALSE 30536
// continue ;
30534: GO 30475
// for j := minerMinesList [ i ] downto 1 do
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: DOUBLE
30542: LD_EXP 125
30546: PUSH
30547: LD_VAR 0 1
30551: ARRAY
30552: INC
30553: ST_TO_ADDR
30554: LD_INT 1
30556: PUSH
30557: FOR_DOWNTO
30558: IFFALSE 30808
// begin side := GetSide ( minersList [ i ] ) ;
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_EXP 124
30569: PUSH
30570: LD_VAR 0 1
30574: ARRAY
30575: PPUSH
30576: CALL_OW 255
30580: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30581: LD_ADDR_VAR 0 4
30585: PUSH
30586: LD_EXP 125
30590: PUSH
30591: LD_VAR 0 1
30595: ARRAY
30596: PUSH
30597: LD_VAR 0 2
30601: ARRAY
30602: PUSH
30603: LD_INT 1
30605: ARRAY
30606: PPUSH
30607: LD_EXP 125
30611: PUSH
30612: LD_VAR 0 1
30616: ARRAY
30617: PUSH
30618: LD_VAR 0 2
30622: ARRAY
30623: PUSH
30624: LD_INT 2
30626: ARRAY
30627: PPUSH
30628: CALL_OW 428
30632: ST_TO_ADDR
// if not tmp then
30633: LD_VAR 0 4
30637: NOT
30638: IFFALSE 30642
// continue ;
30640: GO 30557
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30642: LD_VAR 0 4
30646: PUSH
30647: LD_INT 81
30649: PUSH
30650: LD_VAR 0 3
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PPUSH
30659: CALL_OW 69
30663: IN
30664: PUSH
30665: LD_EXP 125
30669: PUSH
30670: LD_VAR 0 1
30674: ARRAY
30675: PUSH
30676: LD_VAR 0 2
30680: ARRAY
30681: PUSH
30682: LD_INT 1
30684: ARRAY
30685: PPUSH
30686: LD_EXP 125
30690: PUSH
30691: LD_VAR 0 1
30695: ARRAY
30696: PUSH
30697: LD_VAR 0 2
30701: ARRAY
30702: PUSH
30703: LD_INT 2
30705: ARRAY
30706: PPUSH
30707: CALL_OW 458
30711: AND
30712: IFFALSE 30806
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30714: LD_EXP 125
30718: PUSH
30719: LD_VAR 0 1
30723: ARRAY
30724: PUSH
30725: LD_VAR 0 2
30729: ARRAY
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_EXP 125
30739: PUSH
30740: LD_VAR 0 1
30744: ARRAY
30745: PUSH
30746: LD_VAR 0 2
30750: ARRAY
30751: PUSH
30752: LD_INT 2
30754: ARRAY
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30765: LD_ADDR_EXP 125
30769: PUSH
30770: LD_EXP 125
30774: PPUSH
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_EXP 125
30784: PUSH
30785: LD_VAR 0 1
30789: ARRAY
30790: PPUSH
30791: LD_VAR 0 2
30795: PPUSH
30796: CALL_OW 3
30800: PPUSH
30801: CALL_OW 1
30805: ST_TO_ADDR
// end ; end ;
30806: GO 30557
30808: POP
30809: POP
// end ;
30810: GO 30475
30812: POP
30813: POP
// end ;
30814: PPOPN 4
30816: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30817: LD_INT 0
30819: PPUSH
30820: PPUSH
// result := false ;
30821: LD_ADDR_VAR 0 4
30825: PUSH
30826: LD_INT 0
30828: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30829: LD_VAR 0 1
30833: PPUSH
30834: CALL_OW 264
30838: PUSH
30839: LD_EXP 134
30843: EQUAL
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 31089
// index := GetElementIndex ( minersList , unit ) ;
30849: LD_ADDR_VAR 0 5
30853: PUSH
30854: LD_EXP 124
30858: PPUSH
30859: LD_VAR 0 1
30863: PPUSH
30864: CALL 37404 0 2
30868: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30869: LD_EXP 125
30873: PUSH
30874: LD_VAR 0 5
30878: ARRAY
30879: PUSH
30880: LD_EXP 126
30884: GREATEREQUAL
30885: IFFALSE 30889
// exit ;
30887: GO 31089
// ComMoveXY ( unit , x , y ) ;
30889: LD_VAR 0 1
30893: PPUSH
30894: LD_VAR 0 2
30898: PPUSH
30899: LD_VAR 0 3
30903: PPUSH
30904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30908: LD_INT 35
30910: PPUSH
30911: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30915: LD_VAR 0 1
30919: PPUSH
30920: LD_VAR 0 2
30924: PPUSH
30925: LD_VAR 0 3
30929: PPUSH
30930: CALL 68176 0 3
30934: NOT
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 314
30945: AND
30946: IFFALSE 30950
// exit ;
30948: GO 31089
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30950: LD_VAR 0 2
30954: PPUSH
30955: LD_VAR 0 3
30959: PPUSH
30960: CALL_OW 428
30964: PUSH
30965: LD_VAR 0 1
30969: EQUAL
30970: PUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 314
30980: NOT
30981: AND
30982: IFFALSE 30908
// PlaySoundXY ( x , y , PlantMine ) ;
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_VAR 0 3
30993: PPUSH
30994: LD_STRING PlantMine
30996: PPUSH
30997: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31001: LD_VAR 0 2
31005: PPUSH
31006: LD_VAR 0 3
31010: PPUSH
31011: LD_VAR 0 1
31015: PPUSH
31016: CALL_OW 255
31020: PPUSH
31021: LD_INT 0
31023: PPUSH
31024: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31028: LD_ADDR_EXP 125
31032: PUSH
31033: LD_EXP 125
31037: PPUSH
31038: LD_VAR 0 5
31042: PUSH
31043: LD_EXP 125
31047: PUSH
31048: LD_VAR 0 5
31052: ARRAY
31053: PUSH
31054: LD_INT 1
31056: PLUS
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PPUSH
31062: LD_VAR 0 2
31066: PUSH
31067: LD_VAR 0 3
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL 37619 0 3
31080: ST_TO_ADDR
// result := true ;
31081: LD_ADDR_VAR 0 4
31085: PUSH
31086: LD_INT 1
31088: ST_TO_ADDR
// end ;
31089: LD_VAR 0 4
31093: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31094: LD_INT 0
31096: PPUSH
31097: PPUSH
31098: PPUSH
// if not unit in minersList then
31099: LD_VAR 0 1
31103: PUSH
31104: LD_EXP 124
31108: IN
31109: NOT
31110: IFFALSE 31114
// exit ;
31112: GO 31506
// index := GetElementIndex ( minersList , unit ) ;
31114: LD_ADDR_VAR 0 6
31118: PUSH
31119: LD_EXP 124
31123: PPUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL 37404 0 2
31133: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: DOUBLE
31140: LD_EXP 125
31144: PUSH
31145: LD_VAR 0 6
31149: ARRAY
31150: INC
31151: ST_TO_ADDR
31152: LD_INT 1
31154: PUSH
31155: FOR_DOWNTO
31156: IFFALSE 31317
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31158: LD_EXP 125
31162: PUSH
31163: LD_VAR 0 6
31167: ARRAY
31168: PUSH
31169: LD_VAR 0 5
31173: ARRAY
31174: PUSH
31175: LD_INT 1
31177: ARRAY
31178: PUSH
31179: LD_VAR 0 2
31183: EQUAL
31184: PUSH
31185: LD_EXP 125
31189: PUSH
31190: LD_VAR 0 6
31194: ARRAY
31195: PUSH
31196: LD_VAR 0 5
31200: ARRAY
31201: PUSH
31202: LD_INT 2
31204: ARRAY
31205: PUSH
31206: LD_VAR 0 3
31210: EQUAL
31211: AND
31212: IFFALSE 31315
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31214: LD_EXP 125
31218: PUSH
31219: LD_VAR 0 6
31223: ARRAY
31224: PUSH
31225: LD_VAR 0 5
31229: ARRAY
31230: PUSH
31231: LD_INT 1
31233: ARRAY
31234: PPUSH
31235: LD_EXP 125
31239: PUSH
31240: LD_VAR 0 6
31244: ARRAY
31245: PUSH
31246: LD_VAR 0 5
31250: ARRAY
31251: PUSH
31252: LD_INT 2
31254: ARRAY
31255: PPUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 255
31265: PPUSH
31266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31270: LD_ADDR_EXP 125
31274: PUSH
31275: LD_EXP 125
31279: PPUSH
31280: LD_VAR 0 6
31284: PPUSH
31285: LD_EXP 125
31289: PUSH
31290: LD_VAR 0 6
31294: ARRAY
31295: PPUSH
31296: LD_VAR 0 5
31300: PPUSH
31301: CALL_OW 3
31305: PPUSH
31306: CALL_OW 1
31310: ST_TO_ADDR
// exit ;
31311: POP
31312: POP
31313: GO 31506
// end ; end ;
31315: GO 31155
31317: POP
31318: POP
// for i := minerMinesList [ index ] downto 1 do
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: DOUBLE
31325: LD_EXP 125
31329: PUSH
31330: LD_VAR 0 6
31334: ARRAY
31335: INC
31336: ST_TO_ADDR
31337: LD_INT 1
31339: PUSH
31340: FOR_DOWNTO
31341: IFFALSE 31504
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31343: LD_EXP 125
31347: PUSH
31348: LD_VAR 0 6
31352: ARRAY
31353: PUSH
31354: LD_VAR 0 5
31358: ARRAY
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: LD_EXP 125
31368: PUSH
31369: LD_VAR 0 6
31373: ARRAY
31374: PUSH
31375: LD_VAR 0 5
31379: ARRAY
31380: PUSH
31381: LD_INT 2
31383: ARRAY
31384: PPUSH
31385: LD_VAR 0 2
31389: PPUSH
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 298
31399: PUSH
31400: LD_INT 6
31402: LESS
31403: IFFALSE 31502
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31405: LD_EXP 125
31409: PUSH
31410: LD_VAR 0 6
31414: ARRAY
31415: PUSH
31416: LD_VAR 0 5
31420: ARRAY
31421: PUSH
31422: LD_INT 1
31424: ARRAY
31425: PPUSH
31426: LD_EXP 125
31430: PUSH
31431: LD_VAR 0 6
31435: ARRAY
31436: PUSH
31437: LD_VAR 0 5
31441: ARRAY
31442: PUSH
31443: LD_INT 2
31445: ARRAY
31446: PPUSH
31447: LD_VAR 0 1
31451: PPUSH
31452: CALL_OW 255
31456: PPUSH
31457: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31461: LD_ADDR_EXP 125
31465: PUSH
31466: LD_EXP 125
31470: PPUSH
31471: LD_VAR 0 6
31475: PPUSH
31476: LD_EXP 125
31480: PUSH
31481: LD_VAR 0 6
31485: ARRAY
31486: PPUSH
31487: LD_VAR 0 5
31491: PPUSH
31492: CALL_OW 3
31496: PPUSH
31497: CALL_OW 1
31501: ST_TO_ADDR
// end ; end ;
31502: GO 31340
31504: POP
31505: POP
// end ;
31506: LD_VAR 0 4
31510: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31511: LD_INT 0
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
31517: PPUSH
31518: PPUSH
31519: PPUSH
31520: PPUSH
31521: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL_OW 264
31531: PUSH
31532: LD_EXP 134
31536: EQUAL
31537: NOT
31538: PUSH
31539: LD_VAR 0 1
31543: PUSH
31544: LD_EXP 124
31548: IN
31549: NOT
31550: OR
31551: IFFALSE 31555
// exit ;
31553: GO 31877
// index := GetElementIndex ( minersList , unit ) ;
31555: LD_ADDR_VAR 0 6
31559: PUSH
31560: LD_EXP 124
31564: PPUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL 37404 0 2
31574: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: LD_EXP 126
31584: PUSH
31585: LD_EXP 125
31589: PUSH
31590: LD_VAR 0 6
31594: ARRAY
31595: MINUS
31596: ST_TO_ADDR
// if not minesFreeAmount then
31597: LD_VAR 0 8
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 31877
// tmp := [ ] ;
31606: LD_ADDR_VAR 0 7
31610: PUSH
31611: EMPTY
31612: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31613: LD_ADDR_VAR 0 5
31617: PUSH
31618: DOUBLE
31619: LD_INT 1
31621: DEC
31622: ST_TO_ADDR
31623: LD_VAR 0 8
31627: PUSH
31628: FOR_TO
31629: IFFALSE 31824
// begin _d := rand ( 0 , 5 ) ;
31631: LD_ADDR_VAR 0 11
31635: PUSH
31636: LD_INT 0
31638: PPUSH
31639: LD_INT 5
31641: PPUSH
31642: CALL_OW 12
31646: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31647: LD_ADDR_VAR 0 12
31651: PUSH
31652: LD_INT 2
31654: PPUSH
31655: LD_INT 6
31657: PPUSH
31658: CALL_OW 12
31662: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31663: LD_ADDR_VAR 0 9
31667: PUSH
31668: LD_VAR 0 2
31672: PPUSH
31673: LD_VAR 0 11
31677: PPUSH
31678: LD_VAR 0 12
31682: PPUSH
31683: CALL_OW 272
31687: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31688: LD_ADDR_VAR 0 10
31692: PUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: LD_VAR 0 11
31702: PPUSH
31703: LD_VAR 0 12
31707: PPUSH
31708: CALL_OW 273
31712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31713: LD_VAR 0 9
31717: PPUSH
31718: LD_VAR 0 10
31722: PPUSH
31723: CALL_OW 488
31727: PUSH
31728: LD_VAR 0 9
31732: PUSH
31733: LD_VAR 0 10
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_VAR 0 7
31746: IN
31747: NOT
31748: AND
31749: PUSH
31750: LD_VAR 0 9
31754: PPUSH
31755: LD_VAR 0 10
31759: PPUSH
31760: CALL_OW 458
31764: NOT
31765: AND
31766: IFFALSE 31808
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31768: LD_ADDR_VAR 0 7
31772: PUSH
31773: LD_VAR 0 7
31777: PPUSH
31778: LD_VAR 0 7
31782: PUSH
31783: LD_INT 1
31785: PLUS
31786: PPUSH
31787: LD_VAR 0 9
31791: PUSH
31792: LD_VAR 0 10
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PPUSH
31801: CALL_OW 1
31805: ST_TO_ADDR
31806: GO 31822
// i := i - 1 ;
31808: LD_ADDR_VAR 0 5
31812: PUSH
31813: LD_VAR 0 5
31817: PUSH
31818: LD_INT 1
31820: MINUS
31821: ST_TO_ADDR
// end ;
31822: GO 31628
31824: POP
31825: POP
// for i in tmp do
31826: LD_ADDR_VAR 0 5
31830: PUSH
31831: LD_VAR 0 7
31835: PUSH
31836: FOR_IN
31837: IFFALSE 31875
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31839: LD_VAR 0 1
31843: PPUSH
31844: LD_VAR 0 5
31848: PUSH
31849: LD_INT 1
31851: ARRAY
31852: PPUSH
31853: LD_VAR 0 5
31857: PUSH
31858: LD_INT 2
31860: ARRAY
31861: PPUSH
31862: CALL 30817 0 3
31866: NOT
31867: IFFALSE 31873
// exit ;
31869: POP
31870: POP
31871: GO 31877
31873: GO 31836
31875: POP
31876: POP
// end ;
31877: LD_VAR 0 4
31881: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
31890: PPUSH
// if not GetClass ( unit ) = class_sniper then
31891: LD_VAR 0 1
31895: PPUSH
31896: CALL_OW 257
31900: PUSH
31901: LD_INT 5
31903: EQUAL
31904: NOT
31905: IFFALSE 31909
// exit ;
31907: GO 32297
// dist := 8 ;
31909: LD_ADDR_VAR 0 5
31913: PUSH
31914: LD_INT 8
31916: ST_TO_ADDR
// viewRange := 12 ;
31917: LD_ADDR_VAR 0 7
31921: PUSH
31922: LD_INT 12
31924: ST_TO_ADDR
// side := GetSide ( unit ) ;
31925: LD_ADDR_VAR 0 6
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 255
31939: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31940: LD_INT 61
31942: PPUSH
31943: LD_VAR 0 6
31947: PPUSH
31948: CALL_OW 321
31952: PUSH
31953: LD_INT 2
31955: EQUAL
31956: IFFALSE 31966
// viewRange := 16 ;
31958: LD_ADDR_VAR 0 7
31962: PUSH
31963: LD_INT 16
31965: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31966: LD_VAR 0 1
31970: PPUSH
31971: LD_VAR 0 2
31975: PPUSH
31976: LD_VAR 0 3
31980: PPUSH
31981: CALL_OW 297
31985: PUSH
31986: LD_VAR 0 5
31990: GREATER
31991: IFFALSE 32070
// begin ComMoveXY ( unit , x , y ) ;
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_VAR 0 2
32002: PPUSH
32003: LD_VAR 0 3
32007: PPUSH
32008: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32012: LD_INT 35
32014: PPUSH
32015: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32019: LD_VAR 0 1
32023: PPUSH
32024: LD_VAR 0 2
32028: PPUSH
32029: LD_VAR 0 3
32033: PPUSH
32034: CALL 68176 0 3
32038: NOT
32039: IFFALSE 32043
// exit ;
32041: GO 32297
// until GetDistUnitXY ( unit , x , y ) < dist ;
32043: LD_VAR 0 1
32047: PPUSH
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: CALL_OW 297
32062: PUSH
32063: LD_VAR 0 5
32067: LESS
32068: IFFALSE 32012
// end ; ComTurnXY ( unit , x , y ) ;
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_VAR 0 2
32079: PPUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: CALL_OW 118
// wait ( 5 ) ;
32089: LD_INT 5
32091: PPUSH
32092: CALL_OW 67
// _d := GetDir ( unit ) ;
32096: LD_ADDR_VAR 0 10
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 254
32110: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32111: LD_ADDR_VAR 0 8
32115: PUSH
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 250
32125: PPUSH
32126: LD_VAR 0 10
32130: PPUSH
32131: LD_VAR 0 5
32135: PPUSH
32136: CALL_OW 272
32140: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32141: LD_ADDR_VAR 0 9
32145: PUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 251
32155: PPUSH
32156: LD_VAR 0 10
32160: PPUSH
32161: LD_VAR 0 5
32165: PPUSH
32166: CALL_OW 273
32170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32171: LD_VAR 0 8
32175: PPUSH
32176: LD_VAR 0 9
32180: PPUSH
32181: CALL_OW 488
32185: NOT
32186: IFFALSE 32190
// exit ;
32188: GO 32297
// ComAnimCustom ( unit , 1 ) ;
32190: LD_VAR 0 1
32194: PPUSH
32195: LD_INT 1
32197: PPUSH
32198: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32202: LD_VAR 0 8
32206: PPUSH
32207: LD_VAR 0 9
32211: PPUSH
32212: LD_VAR 0 6
32216: PPUSH
32217: LD_VAR 0 7
32221: PPUSH
32222: CALL_OW 330
// repeat wait ( 1 ) ;
32226: LD_INT 1
32228: PPUSH
32229: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 316
32242: PUSH
32243: LD_VAR 0 1
32247: PPUSH
32248: CALL_OW 314
32252: OR
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 302
32263: NOT
32264: OR
32265: PUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 301
32275: OR
32276: IFFALSE 32226
// RemoveSeeing ( _x , _y , side ) ;
32278: LD_VAR 0 8
32282: PPUSH
32283: LD_VAR 0 9
32287: PPUSH
32288: LD_VAR 0 6
32292: PPUSH
32293: CALL_OW 331
// end ; end_of_file
32297: LD_VAR 0 4
32301: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32302: LD_VAR 0 1
32306: PUSH
32307: LD_INT 200
32309: DOUBLE
32310: GREATEREQUAL
32311: IFFALSE 32319
32313: LD_INT 299
32315: DOUBLE
32316: LESSEQUAL
32317: IFTRUE 32321
32319: GO 32353
32321: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32322: LD_VAR 0 1
32326: PPUSH
32327: LD_VAR 0 2
32331: PPUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: LD_VAR 0 4
32341: PPUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: CALL 28419 0 5
32351: GO 32430
32353: LD_INT 300
32355: DOUBLE
32356: GREATEREQUAL
32357: IFFALSE 32365
32359: LD_INT 399
32361: DOUBLE
32362: LESSEQUAL
32363: IFTRUE 32367
32365: GO 32429
32367: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_VAR 0 3
32382: PPUSH
32383: LD_VAR 0 4
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: LD_VAR 0 6
32397: PPUSH
32398: LD_VAR 0 7
32402: PPUSH
32403: LD_VAR 0 8
32407: PPUSH
32408: LD_VAR 0 9
32412: PPUSH
32413: LD_VAR 0 10
32417: PPUSH
32418: LD_VAR 0 11
32422: PPUSH
32423: CALL 26317 0 11
32427: GO 32430
32429: POP
// end ;
32430: PPOPN 11
32432: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32433: LD_VAR 0 1
32437: PPUSH
32438: LD_VAR 0 2
32442: PPUSH
32443: LD_VAR 0 3
32447: PPUSH
32448: LD_VAR 0 4
32452: PPUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: CALL 28411 0 5
// end ; end_of_file end_of_file
32462: PPOPN 5
32464: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
32465: LD_INT 0
32467: PPUSH
// ar_miner := 81 ;
32468: LD_ADDR_EXP 134
32472: PUSH
32473: LD_INT 81
32475: ST_TO_ADDR
// ar_crane := 88 ;
32476: LD_ADDR_EXP 133
32480: PUSH
32481: LD_INT 88
32483: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32484: LD_ADDR_EXP 128
32488: PUSH
32489: LD_INT 89
32491: ST_TO_ADDR
// us_hack := 99 ;
32492: LD_ADDR_EXP 129
32496: PUSH
32497: LD_INT 99
32499: ST_TO_ADDR
// us_artillery := 97 ;
32500: LD_ADDR_EXP 130
32504: PUSH
32505: LD_INT 97
32507: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32508: LD_ADDR_EXP 131
32512: PUSH
32513: LD_INT 91
32515: ST_TO_ADDR
// ar_mortar := 92 ;
32516: LD_ADDR_EXP 132
32520: PUSH
32521: LD_INT 92
32523: ST_TO_ADDR
// ru_radar := 98 ;
32524: LD_ADDR_EXP 127
32528: PUSH
32529: LD_INT 98
32531: ST_TO_ADDR
// tech_Artillery := 80 ;
32532: LD_ADDR_EXP 135
32536: PUSH
32537: LD_INT 80
32539: ST_TO_ADDR
// tech_RadMat := 81 ;
32540: LD_ADDR_EXP 136
32544: PUSH
32545: LD_INT 81
32547: ST_TO_ADDR
// tech_BasicTools := 82 ;
32548: LD_ADDR_EXP 137
32552: PUSH
32553: LD_INT 82
32555: ST_TO_ADDR
// tech_Cargo := 83 ;
32556: LD_ADDR_EXP 138
32560: PUSH
32561: LD_INT 83
32563: ST_TO_ADDR
// tech_Track := 84 ;
32564: LD_ADDR_EXP 139
32568: PUSH
32569: LD_INT 84
32571: ST_TO_ADDR
// tech_Crane := 85 ;
32572: LD_ADDR_EXP 140
32576: PUSH
32577: LD_INT 85
32579: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32580: LD_ADDR_EXP 141
32584: PUSH
32585: LD_INT 86
32587: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32588: LD_ADDR_EXP 142
32592: PUSH
32593: LD_INT 87
32595: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
32596: LD_ADDR_EXP 143
32600: PUSH
32601: LD_INT 88
32603: ST_TO_ADDR
// class_mastodont := 31 ;
32604: LD_ADDR_EXP 144
32608: PUSH
32609: LD_INT 31
32611: ST_TO_ADDR
// class_horse := 21 ;
32612: LD_ADDR_EXP 145
32616: PUSH
32617: LD_INT 21
32619: ST_TO_ADDR
// end ;
32620: LD_VAR 0 1
32624: RET
// every 1 do
32625: GO 32627
32627: DISABLE
// InitGlobalVariables ; end_of_file
32628: CALL 32465 0 0
32632: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
// if exist_mode then
32637: LD_VAR 0 2
32641: IFFALSE 32666
// unit := CreateCharacter ( prefix & ident ) else
32643: LD_ADDR_VAR 0 5
32647: PUSH
32648: LD_VAR 0 3
32652: PUSH
32653: LD_VAR 0 1
32657: STR
32658: PPUSH
32659: CALL_OW 34
32663: ST_TO_ADDR
32664: GO 32681
// unit := NewCharacter ( ident ) ;
32666: LD_ADDR_VAR 0 5
32670: PUSH
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 25
32680: ST_TO_ADDR
// result := unit ;
32681: LD_ADDR_VAR 0 4
32685: PUSH
32686: LD_VAR 0 5
32690: ST_TO_ADDR
// end ;
32691: LD_VAR 0 4
32695: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32696: LD_INT 0
32698: PPUSH
32699: PPUSH
// if not side or not nation then
32700: LD_VAR 0 1
32704: NOT
32705: PUSH
32706: LD_VAR 0 2
32710: NOT
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33484
// case nation of nation_american :
32716: LD_VAR 0 2
32720: PUSH
32721: LD_INT 1
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32943
32729: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32730: LD_ADDR_VAR 0 4
32734: PUSH
32735: LD_INT 35
32737: PUSH
32738: LD_INT 45
32740: PUSH
32741: LD_INT 46
32743: PUSH
32744: LD_INT 47
32746: PUSH
32747: LD_INT 82
32749: PUSH
32750: LD_INT 83
32752: PUSH
32753: LD_INT 84
32755: PUSH
32756: LD_INT 85
32758: PUSH
32759: LD_INT 86
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 6
32770: PUSH
32771: LD_INT 15
32773: PUSH
32774: LD_INT 16
32776: PUSH
32777: LD_INT 7
32779: PUSH
32780: LD_INT 12
32782: PUSH
32783: LD_INT 13
32785: PUSH
32786: LD_INT 10
32788: PUSH
32789: LD_INT 14
32791: PUSH
32792: LD_INT 20
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 22
32800: PUSH
32801: LD_INT 25
32803: PUSH
32804: LD_INT 32
32806: PUSH
32807: LD_INT 27
32809: PUSH
32810: LD_INT 36
32812: PUSH
32813: LD_INT 69
32815: PUSH
32816: LD_INT 39
32818: PUSH
32819: LD_INT 34
32821: PUSH
32822: LD_INT 40
32824: PUSH
32825: LD_INT 48
32827: PUSH
32828: LD_INT 49
32830: PUSH
32831: LD_INT 50
32833: PUSH
32834: LD_INT 51
32836: PUSH
32837: LD_INT 52
32839: PUSH
32840: LD_INT 53
32842: PUSH
32843: LD_INT 54
32845: PUSH
32846: LD_INT 55
32848: PUSH
32849: LD_INT 56
32851: PUSH
32852: LD_INT 57
32854: PUSH
32855: LD_INT 58
32857: PUSH
32858: LD_INT 59
32860: PUSH
32861: LD_INT 60
32863: PUSH
32864: LD_INT 61
32866: PUSH
32867: LD_INT 62
32869: PUSH
32870: LD_INT 80
32872: PUSH
32873: LD_INT 82
32875: PUSH
32876: LD_INT 83
32878: PUSH
32879: LD_INT 84
32881: PUSH
32882: LD_INT 85
32884: PUSH
32885: LD_INT 86
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: ST_TO_ADDR
32941: GO 33408
32943: LD_INT 2
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 33177
32951: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_INT 35
32959: PUSH
32960: LD_INT 45
32962: PUSH
32963: LD_INT 46
32965: PUSH
32966: LD_INT 47
32968: PUSH
32969: LD_INT 82
32971: PUSH
32972: LD_INT 83
32974: PUSH
32975: LD_INT 84
32977: PUSH
32978: LD_INT 85
32980: PUSH
32981: LD_INT 87
32983: PUSH
32984: LD_INT 70
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 11
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: LD_INT 6
33004: PUSH
33005: LD_INT 15
33007: PUSH
33008: LD_INT 18
33010: PUSH
33011: LD_INT 7
33013: PUSH
33014: LD_INT 17
33016: PUSH
33017: LD_INT 8
33019: PUSH
33020: LD_INT 20
33022: PUSH
33023: LD_INT 21
33025: PUSH
33026: LD_INT 22
33028: PUSH
33029: LD_INT 72
33031: PUSH
33032: LD_INT 26
33034: PUSH
33035: LD_INT 69
33037: PUSH
33038: LD_INT 39
33040: PUSH
33041: LD_INT 40
33043: PUSH
33044: LD_INT 41
33046: PUSH
33047: LD_INT 42
33049: PUSH
33050: LD_INT 43
33052: PUSH
33053: LD_INT 48
33055: PUSH
33056: LD_INT 49
33058: PUSH
33059: LD_INT 50
33061: PUSH
33062: LD_INT 51
33064: PUSH
33065: LD_INT 52
33067: PUSH
33068: LD_INT 53
33070: PUSH
33071: LD_INT 54
33073: PUSH
33074: LD_INT 55
33076: PUSH
33077: LD_INT 56
33079: PUSH
33080: LD_INT 60
33082: PUSH
33083: LD_INT 61
33085: PUSH
33086: LD_INT 62
33088: PUSH
33089: LD_INT 66
33091: PUSH
33092: LD_INT 67
33094: PUSH
33095: LD_INT 68
33097: PUSH
33098: LD_INT 81
33100: PUSH
33101: LD_INT 82
33103: PUSH
33104: LD_INT 83
33106: PUSH
33107: LD_INT 84
33109: PUSH
33110: LD_INT 85
33112: PUSH
33113: LD_INT 87
33115: PUSH
33116: LD_INT 88
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
33175: GO 33408
33177: LD_INT 3
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33407
33185: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33186: LD_ADDR_VAR 0 4
33190: PUSH
33191: LD_INT 46
33193: PUSH
33194: LD_INT 47
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 82
33205: PUSH
33206: LD_INT 83
33208: PUSH
33209: LD_INT 84
33211: PUSH
33212: LD_INT 85
33214: PUSH
33215: LD_INT 86
33217: PUSH
33218: LD_INT 11
33220: PUSH
33221: LD_INT 9
33223: PUSH
33224: LD_INT 20
33226: PUSH
33227: LD_INT 19
33229: PUSH
33230: LD_INT 21
33232: PUSH
33233: LD_INT 24
33235: PUSH
33236: LD_INT 22
33238: PUSH
33239: LD_INT 25
33241: PUSH
33242: LD_INT 28
33244: PUSH
33245: LD_INT 29
33247: PUSH
33248: LD_INT 30
33250: PUSH
33251: LD_INT 31
33253: PUSH
33254: LD_INT 37
33256: PUSH
33257: LD_INT 38
33259: PUSH
33260: LD_INT 32
33262: PUSH
33263: LD_INT 27
33265: PUSH
33266: LD_INT 33
33268: PUSH
33269: LD_INT 69
33271: PUSH
33272: LD_INT 39
33274: PUSH
33275: LD_INT 34
33277: PUSH
33278: LD_INT 40
33280: PUSH
33281: LD_INT 71
33283: PUSH
33284: LD_INT 23
33286: PUSH
33287: LD_INT 44
33289: PUSH
33290: LD_INT 48
33292: PUSH
33293: LD_INT 49
33295: PUSH
33296: LD_INT 50
33298: PUSH
33299: LD_INT 51
33301: PUSH
33302: LD_INT 52
33304: PUSH
33305: LD_INT 53
33307: PUSH
33308: LD_INT 54
33310: PUSH
33311: LD_INT 55
33313: PUSH
33314: LD_INT 56
33316: PUSH
33317: LD_INT 57
33319: PUSH
33320: LD_INT 58
33322: PUSH
33323: LD_INT 59
33325: PUSH
33326: LD_INT 63
33328: PUSH
33329: LD_INT 64
33331: PUSH
33332: LD_INT 65
33334: PUSH
33335: LD_INT 82
33337: PUSH
33338: LD_INT 83
33340: PUSH
33341: LD_INT 84
33343: PUSH
33344: LD_INT 85
33346: PUSH
33347: LD_INT 86
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
33405: GO 33408
33407: POP
// if state > - 1 and state < 3 then
33408: LD_VAR 0 3
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: GREATER
33417: PUSH
33418: LD_VAR 0 3
33422: PUSH
33423: LD_INT 3
33425: LESS
33426: AND
33427: IFFALSE 33484
// for i in result do
33429: LD_ADDR_VAR 0 5
33433: PUSH
33434: LD_VAR 0 4
33438: PUSH
33439: FOR_IN
33440: IFFALSE 33482
// if GetTech ( i , side ) <> state then
33442: LD_VAR 0 5
33446: PPUSH
33447: LD_VAR 0 1
33451: PPUSH
33452: CALL_OW 321
33456: PUSH
33457: LD_VAR 0 3
33461: NONEQUAL
33462: IFFALSE 33480
// result := result diff i ;
33464: LD_ADDR_VAR 0 4
33468: PUSH
33469: LD_VAR 0 4
33473: PUSH
33474: LD_VAR 0 5
33478: DIFF
33479: ST_TO_ADDR
33480: GO 33439
33482: POP
33483: POP
// end ;
33484: LD_VAR 0 4
33488: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33489: LD_INT 0
33491: PPUSH
33492: PPUSH
33493: PPUSH
// result := true ;
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 1
33501: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33502: LD_ADDR_VAR 0 5
33506: PUSH
33507: LD_VAR 0 2
33511: PPUSH
33512: CALL_OW 480
33516: ST_TO_ADDR
// if not tmp then
33517: LD_VAR 0 5
33521: NOT
33522: IFFALSE 33526
// exit ;
33524: GO 33575
// for i in tmp do
33526: LD_ADDR_VAR 0 4
33530: PUSH
33531: LD_VAR 0 5
33535: PUSH
33536: FOR_IN
33537: IFFALSE 33573
// if GetTech ( i , side ) <> state_researched then
33539: LD_VAR 0 4
33543: PPUSH
33544: LD_VAR 0 1
33548: PPUSH
33549: CALL_OW 321
33553: PUSH
33554: LD_INT 2
33556: NONEQUAL
33557: IFFALSE 33571
// begin result := false ;
33559: LD_ADDR_VAR 0 3
33563: PUSH
33564: LD_INT 0
33566: ST_TO_ADDR
// exit ;
33567: POP
33568: POP
33569: GO 33575
// end ;
33571: GO 33536
33573: POP
33574: POP
// end ;
33575: LD_VAR 0 3
33579: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33595: LD_VAR 0 1
33599: NOT
33600: PUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 257
33610: PUSH
33611: LD_INT 9
33613: NONEQUAL
33614: OR
33615: IFFALSE 33619
// exit ;
33617: GO 34192
// side := GetSide ( unit ) ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL_OW 255
33633: ST_TO_ADDR
// tech_space := tech_spacanom ;
33634: LD_ADDR_VAR 0 12
33638: PUSH
33639: LD_INT 29
33641: ST_TO_ADDR
// tech_time := tech_taurad ;
33642: LD_ADDR_VAR 0 13
33646: PUSH
33647: LD_INT 28
33649: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33650: LD_ADDR_VAR 0 11
33654: PUSH
33655: LD_VAR 0 1
33659: PPUSH
33660: CALL_OW 310
33664: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33665: LD_VAR 0 11
33669: PPUSH
33670: CALL_OW 247
33674: PUSH
33675: LD_INT 2
33677: EQUAL
33678: IFFALSE 33682
// exit ;
33680: GO 34192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33682: LD_ADDR_VAR 0 8
33686: PUSH
33687: LD_INT 81
33689: PUSH
33690: LD_VAR 0 9
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: LD_INT 21
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PPUSH
33720: CALL_OW 69
33724: ST_TO_ADDR
// if not tmp then
33725: LD_VAR 0 8
33729: NOT
33730: IFFALSE 33734
// exit ;
33732: GO 34192
// if in_unit then
33734: LD_VAR 0 11
33738: IFFALSE 33762
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33740: LD_ADDR_VAR 0 10
33744: PUSH
33745: LD_VAR 0 8
33749: PPUSH
33750: LD_VAR 0 11
33754: PPUSH
33755: CALL_OW 74
33759: ST_TO_ADDR
33760: GO 33782
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33762: LD_ADDR_VAR 0 10
33766: PUSH
33767: LD_VAR 0 8
33771: PPUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL_OW 74
33781: ST_TO_ADDR
// if not enemy then
33782: LD_VAR 0 10
33786: NOT
33787: IFFALSE 33791
// exit ;
33789: GO 34192
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33791: LD_VAR 0 11
33795: PUSH
33796: LD_VAR 0 11
33800: PPUSH
33801: LD_VAR 0 10
33805: PPUSH
33806: CALL_OW 296
33810: PUSH
33811: LD_INT 13
33813: GREATER
33814: AND
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: LD_VAR 0 10
33825: PPUSH
33826: CALL_OW 296
33830: PUSH
33831: LD_INT 12
33833: GREATER
33834: OR
33835: IFFALSE 33839
// exit ;
33837: GO 34192
// missile := [ 1 ] ;
33839: LD_ADDR_VAR 0 14
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33850: LD_VAR 0 9
33854: PPUSH
33855: LD_VAR 0 12
33859: PPUSH
33860: CALL_OW 325
33864: IFFALSE 33893
// missile := Insert ( missile , missile + 1 , 2 ) ;
33866: LD_ADDR_VAR 0 14
33870: PUSH
33871: LD_VAR 0 14
33875: PPUSH
33876: LD_VAR 0 14
33880: PUSH
33881: LD_INT 1
33883: PLUS
33884: PPUSH
33885: LD_INT 2
33887: PPUSH
33888: CALL_OW 2
33892: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33893: LD_VAR 0 9
33897: PPUSH
33898: LD_VAR 0 13
33902: PPUSH
33903: CALL_OW 325
33907: PUSH
33908: LD_VAR 0 10
33912: PPUSH
33913: CALL_OW 255
33917: PPUSH
33918: LD_VAR 0 13
33922: PPUSH
33923: CALL_OW 325
33927: NOT
33928: AND
33929: IFFALSE 33958
// missile := Insert ( missile , missile + 1 , 3 ) ;
33931: LD_ADDR_VAR 0 14
33935: PUSH
33936: LD_VAR 0 14
33940: PPUSH
33941: LD_VAR 0 14
33945: PUSH
33946: LD_INT 1
33948: PLUS
33949: PPUSH
33950: LD_INT 3
33952: PPUSH
33953: CALL_OW 2
33957: ST_TO_ADDR
// if missile < 2 then
33958: LD_VAR 0 14
33962: PUSH
33963: LD_INT 2
33965: LESS
33966: IFFALSE 33970
// exit ;
33968: GO 34192
// x := GetX ( enemy ) ;
33970: LD_ADDR_VAR 0 4
33974: PUSH
33975: LD_VAR 0 10
33979: PPUSH
33980: CALL_OW 250
33984: ST_TO_ADDR
// y := GetY ( enemy ) ;
33985: LD_ADDR_VAR 0 5
33989: PUSH
33990: LD_VAR 0 10
33994: PPUSH
33995: CALL_OW 251
33999: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34000: LD_ADDR_VAR 0 6
34004: PUSH
34005: LD_VAR 0 4
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PPUSH
34014: LD_INT 1
34016: PPUSH
34017: CALL_OW 12
34021: PLUS
34022: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34023: LD_ADDR_VAR 0 7
34027: PUSH
34028: LD_VAR 0 5
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PPUSH
34037: LD_INT 1
34039: PPUSH
34040: CALL_OW 12
34044: PLUS
34045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34046: LD_VAR 0 6
34050: PPUSH
34051: LD_VAR 0 7
34055: PPUSH
34056: CALL_OW 488
34060: NOT
34061: IFFALSE 34083
// begin _x := x ;
34063: LD_ADDR_VAR 0 6
34067: PUSH
34068: LD_VAR 0 4
34072: ST_TO_ADDR
// _y := y ;
34073: LD_ADDR_VAR 0 7
34077: PUSH
34078: LD_VAR 0 5
34082: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_INT 1
34090: PPUSH
34091: LD_VAR 0 14
34095: PPUSH
34096: CALL_OW 12
34100: ST_TO_ADDR
// case i of 1 :
34101: LD_VAR 0 3
34105: PUSH
34106: LD_INT 1
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34131
34114: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34115: LD_VAR 0 1
34119: PPUSH
34120: LD_VAR 0 10
34124: PPUSH
34125: CALL_OW 115
34129: GO 34192
34131: LD_INT 2
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34161
34139: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34140: LD_VAR 0 1
34144: PPUSH
34145: LD_VAR 0 6
34149: PPUSH
34150: LD_VAR 0 7
34154: PPUSH
34155: CALL_OW 153
34159: GO 34192
34161: LD_INT 3
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34191
34169: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34170: LD_VAR 0 1
34174: PPUSH
34175: LD_VAR 0 6
34179: PPUSH
34180: LD_VAR 0 7
34184: PPUSH
34185: CALL_OW 154
34189: GO 34192
34191: POP
// end ;
34192: LD_VAR 0 2
34196: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
// if not unit or not building then
34205: LD_VAR 0 1
34209: NOT
34210: PUSH
34211: LD_VAR 0 2
34215: NOT
34216: OR
34217: IFFALSE 34221
// exit ;
34219: GO 34379
// x := GetX ( building ) ;
34221: LD_ADDR_VAR 0 5
34225: PUSH
34226: LD_VAR 0 2
34230: PPUSH
34231: CALL_OW 250
34235: ST_TO_ADDR
// y := GetY ( building ) ;
34236: LD_ADDR_VAR 0 6
34240: PUSH
34241: LD_VAR 0 2
34245: PPUSH
34246: CALL_OW 251
34250: ST_TO_ADDR
// for i = 0 to 5 do
34251: LD_ADDR_VAR 0 4
34255: PUSH
34256: DOUBLE
34257: LD_INT 0
34259: DEC
34260: ST_TO_ADDR
34261: LD_INT 5
34263: PUSH
34264: FOR_TO
34265: IFFALSE 34377
// begin _x := ShiftX ( x , i , 3 ) ;
34267: LD_ADDR_VAR 0 7
34271: PUSH
34272: LD_VAR 0 5
34276: PPUSH
34277: LD_VAR 0 4
34281: PPUSH
34282: LD_INT 3
34284: PPUSH
34285: CALL_OW 272
34289: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34290: LD_ADDR_VAR 0 8
34294: PUSH
34295: LD_VAR 0 6
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: LD_INT 3
34307: PPUSH
34308: CALL_OW 273
34312: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34313: LD_VAR 0 7
34317: PPUSH
34318: LD_VAR 0 8
34322: PPUSH
34323: CALL_OW 488
34327: NOT
34328: IFFALSE 34332
// continue ;
34330: GO 34264
// if HexInfo ( _x , _y ) = 0 then
34332: LD_VAR 0 7
34336: PPUSH
34337: LD_VAR 0 8
34341: PPUSH
34342: CALL_OW 428
34346: PUSH
34347: LD_INT 0
34349: EQUAL
34350: IFFALSE 34375
// begin ComMoveXY ( unit , _x , _y ) ;
34352: LD_VAR 0 1
34356: PPUSH
34357: LD_VAR 0 7
34361: PPUSH
34362: LD_VAR 0 8
34366: PPUSH
34367: CALL_OW 111
// exit ;
34371: POP
34372: POP
34373: GO 34379
// end ; end ;
34375: GO 34264
34377: POP
34378: POP
// end ;
34379: LD_VAR 0 3
34383: RET
// export function ScanBase ( side , base_area ) ; begin
34384: LD_INT 0
34386: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: LD_INT 81
34399: PUSH
34400: LD_VAR 0 1
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 70
34413: ST_TO_ADDR
// end ;
34414: LD_VAR 0 3
34418: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
// result := false ;
34425: LD_ADDR_VAR 0 2
34429: PUSH
34430: LD_INT 0
34432: ST_TO_ADDR
// side := GetSide ( unit ) ;
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: CALL_OW 255
34447: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 248
34462: ST_TO_ADDR
// case nat of 1 :
34463: LD_VAR 0 4
34467: PUSH
34468: LD_INT 1
34470: DOUBLE
34471: EQUAL
34472: IFTRUE 34476
34474: GO 34487
34476: POP
// tech := tech_lassight ; 2 :
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_INT 12
34484: ST_TO_ADDR
34485: GO 34526
34487: LD_INT 2
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34506
34495: POP
// tech := tech_mortar ; 3 :
34496: LD_ADDR_VAR 0 5
34500: PUSH
34501: LD_INT 41
34503: ST_TO_ADDR
34504: GO 34526
34506: LD_INT 3
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34525
34514: POP
// tech := tech_bazooka ; end ;
34515: LD_ADDR_VAR 0 5
34519: PUSH
34520: LD_INT 44
34522: ST_TO_ADDR
34523: GO 34526
34525: POP
// if Researched ( side , tech ) then
34526: LD_VAR 0 3
34530: PPUSH
34531: LD_VAR 0 5
34535: PPUSH
34536: CALL_OW 325
34540: IFFALSE 34567
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34542: LD_ADDR_VAR 0 2
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 8
34552: PUSH
34553: LD_INT 9
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: PUSH
34561: LD_VAR 0 4
34565: ARRAY
34566: ST_TO_ADDR
// end ;
34567: LD_VAR 0 2
34571: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34572: LD_INT 0
34574: PPUSH
34575: PPUSH
34576: PPUSH
// if not mines then
34577: LD_VAR 0 2
34581: NOT
34582: IFFALSE 34586
// exit ;
34584: GO 34730
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34586: LD_ADDR_VAR 0 5
34590: PUSH
34591: LD_INT 81
34593: PUSH
34594: LD_VAR 0 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 21
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PPUSH
34624: CALL_OW 69
34628: ST_TO_ADDR
// for i in mines do
34629: LD_ADDR_VAR 0 4
34633: PUSH
34634: LD_VAR 0 2
34638: PUSH
34639: FOR_IN
34640: IFFALSE 34728
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34642: LD_VAR 0 4
34646: PUSH
34647: LD_INT 1
34649: ARRAY
34650: PPUSH
34651: LD_VAR 0 4
34655: PUSH
34656: LD_INT 2
34658: ARRAY
34659: PPUSH
34660: CALL_OW 458
34664: NOT
34665: IFFALSE 34669
// continue ;
34667: GO 34639
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34669: LD_VAR 0 4
34673: PUSH
34674: LD_INT 1
34676: ARRAY
34677: PPUSH
34678: LD_VAR 0 4
34682: PUSH
34683: LD_INT 2
34685: ARRAY
34686: PPUSH
34687: CALL_OW 428
34691: PUSH
34692: LD_VAR 0 5
34696: IN
34697: IFFALSE 34726
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34699: LD_VAR 0 4
34703: PUSH
34704: LD_INT 1
34706: ARRAY
34707: PPUSH
34708: LD_VAR 0 4
34712: PUSH
34713: LD_INT 2
34715: ARRAY
34716: PPUSH
34717: LD_VAR 0 1
34721: PPUSH
34722: CALL_OW 456
// end ;
34726: GO 34639
34728: POP
34729: POP
// end ;
34730: LD_VAR 0 3
34734: RET
// export function Count ( array ) ; var i ; begin
34735: LD_INT 0
34737: PPUSH
34738: PPUSH
// result := 0 ;
34739: LD_ADDR_VAR 0 2
34743: PUSH
34744: LD_INT 0
34746: ST_TO_ADDR
// for i in array do
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_VAR 0 1
34756: PUSH
34757: FOR_IN
34758: IFFALSE 34782
// if i then
34760: LD_VAR 0 3
34764: IFFALSE 34780
// result := result + 1 ;
34766: LD_ADDR_VAR 0 2
34770: PUSH
34771: LD_VAR 0 2
34775: PUSH
34776: LD_INT 1
34778: PLUS
34779: ST_TO_ADDR
34780: GO 34757
34782: POP
34783: POP
// end ;
34784: LD_VAR 0 2
34788: RET
// export function IsEmpty ( building ) ; begin
34789: LD_INT 0
34791: PPUSH
// if not building then
34792: LD_VAR 0 1
34796: NOT
34797: IFFALSE 34801
// exit ;
34799: GO 34844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34801: LD_ADDR_VAR 0 2
34805: PUSH
34806: LD_VAR 0 1
34810: PUSH
34811: LD_INT 22
34813: PUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL_OW 255
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 58
34830: PUSH
34831: EMPTY
34832: LIST
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PPUSH
34838: CALL_OW 69
34842: IN
34843: ST_TO_ADDR
// end ;
34844: LD_VAR 0 2
34848: RET
// export function IsNotFull ( building ) ; begin
34849: LD_INT 0
34851: PPUSH
// if not building then
34852: LD_VAR 0 1
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 34880
// result := UnitsInside ( building ) < 6 ;
34861: LD_ADDR_VAR 0 2
34865: PUSH
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 313
34875: PUSH
34876: LD_INT 6
34878: LESS
34879: ST_TO_ADDR
// end ;
34880: LD_VAR 0 2
34884: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34885: LD_INT 0
34887: PPUSH
34888: PPUSH
34889: PPUSH
34890: PPUSH
// tmp := [ ] ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: EMPTY
34897: ST_TO_ADDR
// list := [ ] ;
34898: LD_ADDR_VAR 0 5
34902: PUSH
34903: EMPTY
34904: ST_TO_ADDR
// for i = 16 to 25 do
34905: LD_ADDR_VAR 0 4
34909: PUSH
34910: DOUBLE
34911: LD_INT 16
34913: DEC
34914: ST_TO_ADDR
34915: LD_INT 25
34917: PUSH
34918: FOR_TO
34919: IFFALSE 34992
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34921: LD_ADDR_VAR 0 3
34925: PUSH
34926: LD_VAR 0 3
34930: PUSH
34931: LD_INT 22
34933: PUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 255
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 91
34950: PUSH
34951: LD_VAR 0 1
34955: PUSH
34956: LD_INT 6
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 30
34966: PUSH
34967: LD_VAR 0 4
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: PPUSH
34984: CALL_OW 69
34988: ADD
34989: ST_TO_ADDR
34990: GO 34918
34992: POP
34993: POP
// for i = 1 to tmp do
34994: LD_ADDR_VAR 0 4
34998: PUSH
34999: DOUBLE
35000: LD_INT 1
35002: DEC
35003: ST_TO_ADDR
35004: LD_VAR 0 3
35008: PUSH
35009: FOR_TO
35010: IFFALSE 35098
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35012: LD_ADDR_VAR 0 5
35016: PUSH
35017: LD_VAR 0 5
35021: PUSH
35022: LD_VAR 0 3
35026: PUSH
35027: LD_VAR 0 4
35031: ARRAY
35032: PPUSH
35033: CALL_OW 266
35037: PUSH
35038: LD_VAR 0 3
35042: PUSH
35043: LD_VAR 0 4
35047: ARRAY
35048: PPUSH
35049: CALL_OW 250
35053: PUSH
35054: LD_VAR 0 3
35058: PUSH
35059: LD_VAR 0 4
35063: ARRAY
35064: PPUSH
35065: CALL_OW 251
35069: PUSH
35070: LD_VAR 0 3
35074: PUSH
35075: LD_VAR 0 4
35079: ARRAY
35080: PPUSH
35081: CALL_OW 254
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: PUSH
35092: EMPTY
35093: LIST
35094: ADD
35095: ST_TO_ADDR
35096: GO 35009
35098: POP
35099: POP
// result := list ;
35100: LD_ADDR_VAR 0 2
35104: PUSH
35105: LD_VAR 0 5
35109: ST_TO_ADDR
// end ;
35110: LD_VAR 0 2
35114: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
35121: PPUSH
35122: PPUSH
35123: PPUSH
// if not factory then
35124: LD_VAR 0 1
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 35726
// if control = control_apeman then
35133: LD_VAR 0 4
35137: PUSH
35138: LD_INT 5
35140: EQUAL
35141: IFFALSE 35250
// begin tmp := UnitsInside ( factory ) ;
35143: LD_ADDR_VAR 0 8
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 313
35157: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35158: LD_VAR 0 8
35162: PPUSH
35163: LD_INT 25
35165: PUSH
35166: LD_INT 12
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PPUSH
35173: CALL_OW 72
35177: NOT
35178: IFFALSE 35188
// control := control_manual ;
35180: LD_ADDR_VAR 0 4
35184: PUSH
35185: LD_INT 1
35187: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35188: LD_ADDR_VAR 0 8
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL 34885 0 1
35202: ST_TO_ADDR
// if tmp then
35203: LD_VAR 0 8
35207: IFFALSE 35250
// begin for i in tmp do
35209: LD_ADDR_VAR 0 7
35213: PUSH
35214: LD_VAR 0 8
35218: PUSH
35219: FOR_IN
35220: IFFALSE 35248
// if i [ 1 ] = b_ext_radio then
35222: LD_VAR 0 7
35226: PUSH
35227: LD_INT 1
35229: ARRAY
35230: PUSH
35231: LD_INT 22
35233: EQUAL
35234: IFFALSE 35246
// begin control := control_remote ;
35236: LD_ADDR_VAR 0 4
35240: PUSH
35241: LD_INT 2
35243: ST_TO_ADDR
// break ;
35244: GO 35248
// end ;
35246: GO 35219
35248: POP
35249: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_VAR 0 2
35259: PPUSH
35260: LD_VAR 0 3
35264: PPUSH
35265: LD_VAR 0 4
35269: PPUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: CALL_OW 448
35279: IFFALSE 35314
// begin result := [ chassis , engine , control , weapon ] ;
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: LD_VAR 0 2
35290: PUSH
35291: LD_VAR 0 3
35295: PUSH
35296: LD_VAR 0 4
35300: PUSH
35301: LD_VAR 0 5
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: ST_TO_ADDR
// exit ;
35312: GO 35726
// end ; _chassis := AvailableChassisList ( factory ) ;
35314: LD_ADDR_VAR 0 9
35318: PUSH
35319: LD_VAR 0 1
35323: PPUSH
35324: CALL_OW 475
35328: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35329: LD_ADDR_VAR 0 11
35333: PUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL_OW 476
35343: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35344: LD_ADDR_VAR 0 12
35348: PUSH
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 477
35358: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35359: LD_ADDR_VAR 0 10
35363: PUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 478
35373: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35374: LD_VAR 0 9
35378: NOT
35379: PUSH
35380: LD_VAR 0 11
35384: NOT
35385: OR
35386: PUSH
35387: LD_VAR 0 12
35391: NOT
35392: OR
35393: PUSH
35394: LD_VAR 0 10
35398: NOT
35399: OR
35400: IFFALSE 35435
// begin result := [ chassis , engine , control , weapon ] ;
35402: LD_ADDR_VAR 0 6
35406: PUSH
35407: LD_VAR 0 2
35411: PUSH
35412: LD_VAR 0 3
35416: PUSH
35417: LD_VAR 0 4
35421: PUSH
35422: LD_VAR 0 5
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
// exit ;
35433: GO 35726
// end ; if not chassis in _chassis then
35435: LD_VAR 0 2
35439: PUSH
35440: LD_VAR 0 9
35444: IN
35445: NOT
35446: IFFALSE 35472
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35448: LD_ADDR_VAR 0 2
35452: PUSH
35453: LD_VAR 0 9
35457: PUSH
35458: LD_INT 1
35460: PPUSH
35461: LD_VAR 0 9
35465: PPUSH
35466: CALL_OW 12
35470: ARRAY
35471: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35472: LD_VAR 0 2
35476: PPUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: CALL 35731 0 2
35486: NOT
35487: IFFALSE 35546
// repeat engine := _engine [ 1 ] ;
35489: LD_ADDR_VAR 0 3
35493: PUSH
35494: LD_VAR 0 11
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35503: LD_ADDR_VAR 0 11
35507: PUSH
35508: LD_VAR 0 11
35512: PPUSH
35513: LD_INT 1
35515: PPUSH
35516: CALL_OW 3
35520: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35521: LD_VAR 0 2
35525: PPUSH
35526: LD_VAR 0 3
35530: PPUSH
35531: CALL 35731 0 2
35535: PUSH
35536: LD_VAR 0 11
35540: PUSH
35541: EMPTY
35542: EQUAL
35543: OR
35544: IFFALSE 35489
// if not control in _control then
35546: LD_VAR 0 4
35550: PUSH
35551: LD_VAR 0 12
35555: IN
35556: NOT
35557: IFFALSE 35583
// control := _control [ rand ( 1 , _control ) ] ;
35559: LD_ADDR_VAR 0 4
35563: PUSH
35564: LD_VAR 0 12
35568: PUSH
35569: LD_INT 1
35571: PPUSH
35572: LD_VAR 0 12
35576: PPUSH
35577: CALL_OW 12
35581: ARRAY
35582: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35583: LD_VAR 0 2
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL 35951 0 2
35597: NOT
35598: IFFALSE 35657
// repeat weapon := _weapon [ 1 ] ;
35600: LD_ADDR_VAR 0 5
35604: PUSH
35605: LD_VAR 0 10
35609: PUSH
35610: LD_INT 1
35612: ARRAY
35613: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35614: LD_ADDR_VAR 0 10
35618: PUSH
35619: LD_VAR 0 10
35623: PPUSH
35624: LD_INT 1
35626: PPUSH
35627: CALL_OW 3
35631: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35632: LD_VAR 0 2
35636: PPUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: CALL 35951 0 2
35646: PUSH
35647: LD_VAR 0 10
35651: PUSH
35652: EMPTY
35653: EQUAL
35654: OR
35655: IFFALSE 35600
// result := [ ] ;
35657: LD_ADDR_VAR 0 6
35661: PUSH
35662: EMPTY
35663: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35664: LD_VAR 0 1
35668: PPUSH
35669: LD_VAR 0 2
35673: PPUSH
35674: LD_VAR 0 3
35678: PPUSH
35679: LD_VAR 0 4
35683: PPUSH
35684: LD_VAR 0 5
35688: PPUSH
35689: CALL_OW 448
35693: IFFALSE 35726
// result := [ chassis , engine , control , weapon ] ;
35695: LD_ADDR_VAR 0 6
35699: PUSH
35700: LD_VAR 0 2
35704: PUSH
35705: LD_VAR 0 3
35709: PUSH
35710: LD_VAR 0 4
35714: PUSH
35715: LD_VAR 0 5
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: ST_TO_ADDR
// end ;
35726: LD_VAR 0 6
35730: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35731: LD_INT 0
35733: PPUSH
// if not chassis or not engine then
35734: LD_VAR 0 1
35738: NOT
35739: PUSH
35740: LD_VAR 0 2
35744: NOT
35745: OR
35746: IFFALSE 35750
// exit ;
35748: GO 35946
// case engine of engine_solar :
35750: LD_VAR 0 2
35754: PUSH
35755: LD_INT 2
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35801
35763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 11
35771: PUSH
35772: LD_INT 12
35774: PUSH
35775: LD_INT 13
35777: PUSH
35778: LD_INT 14
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
35799: GO 35930
35801: LD_INT 1
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35809
35807: GO 35871
35809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35810: LD_ADDR_VAR 0 3
35814: PUSH
35815: LD_INT 11
35817: PUSH
35818: LD_INT 12
35820: PUSH
35821: LD_INT 13
35823: PUSH
35824: LD_INT 14
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 4
35838: PUSH
35839: LD_INT 5
35841: PUSH
35842: LD_INT 21
35844: PUSH
35845: LD_INT 23
35847: PUSH
35848: LD_INT 22
35850: PUSH
35851: LD_INT 24
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 35930
35871: LD_INT 3
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35929
35879: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: LD_INT 13
35887: PUSH
35888: LD_INT 14
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 4
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: LD_INT 21
35905: PUSH
35906: LD_INT 22
35908: PUSH
35909: LD_INT 23
35911: PUSH
35912: LD_INT 24
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 35930
35929: POP
// result := ( chassis in result ) ;
35930: LD_ADDR_VAR 0 3
35934: PUSH
35935: LD_VAR 0 1
35939: PUSH
35940: LD_VAR 0 3
35944: IN
35945: ST_TO_ADDR
// end ;
35946: LD_VAR 0 3
35950: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35951: LD_INT 0
35953: PPUSH
// if not chassis or not weapon then
35954: LD_VAR 0 1
35958: NOT
35959: PUSH
35960: LD_VAR 0 2
35964: NOT
35965: OR
35966: IFFALSE 35970
// exit ;
35968: GO 37032
// case weapon of us_machine_gun :
35970: LD_VAR 0 2
35974: PUSH
35975: LD_INT 2
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 36013
35983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35984: LD_ADDR_VAR 0 3
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: LD_INT 5
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
36011: GO 37016
36013: LD_INT 3
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36051
36021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36022: LD_ADDR_VAR 0 3
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 3
36035: PUSH
36036: LD_INT 4
36038: PUSH
36039: LD_INT 5
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
36049: GO 37016
36051: LD_INT 11
36053: DOUBLE
36054: EQUAL
36055: IFTRUE 36059
36057: GO 36089
36059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36060: LD_ADDR_VAR 0 3
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 4
36076: PUSH
36077: LD_INT 5
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
36087: GO 37016
36089: LD_INT 4
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36097
36095: GO 36123
36097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: LD_INT 4
36111: PUSH
36112: LD_INT 5
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
36121: GO 37016
36123: LD_INT 5
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36131
36129: GO 36157
36131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36132: LD_ADDR_VAR 0 3
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: LD_INT 4
36145: PUSH
36146: LD_INT 5
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
36155: GO 37016
36157: LD_INT 9
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36191
36165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 3
36176: PUSH
36177: LD_INT 4
36179: PUSH
36180: LD_INT 5
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 37016
36191: LD_INT 7
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36225
36199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: LD_INT 4
36213: PUSH
36214: LD_INT 5
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: ST_TO_ADDR
36223: GO 37016
36225: LD_INT 12
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36259
36233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 3
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: LD_INT 5
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
36257: GO 37016
36259: LD_INT 13
36261: DOUBLE
36262: EQUAL
36263: IFTRUE 36267
36265: GO 36293
36267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: LD_INT 4
36281: PUSH
36282: LD_INT 5
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: ST_TO_ADDR
36291: GO 37016
36293: LD_INT 14
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36301
36299: GO 36319
36301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36302: LD_ADDR_VAR 0 3
36306: PUSH
36307: LD_INT 4
36309: PUSH
36310: LD_INT 5
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: ST_TO_ADDR
36317: GO 37016
36319: LD_INT 6
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36345
36327: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: LD_INT 5
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: ST_TO_ADDR
36343: GO 37016
36345: LD_INT 10
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36353
36351: GO 36371
36353: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: ST_TO_ADDR
36369: GO 37016
36371: LD_INT 22
36373: DOUBLE
36374: EQUAL
36375: IFTRUE 36379
36377: GO 36405
36379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36380: LD_ADDR_VAR 0 3
36384: PUSH
36385: LD_INT 11
36387: PUSH
36388: LD_INT 12
36390: PUSH
36391: LD_INT 13
36393: PUSH
36394: LD_INT 14
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: ST_TO_ADDR
36403: GO 37016
36405: LD_INT 23
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36413
36411: GO 36439
36413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 11
36421: PUSH
36422: LD_INT 12
36424: PUSH
36425: LD_INT 13
36427: PUSH
36428: LD_INT 14
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
36437: GO 37016
36439: LD_INT 24
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36447
36445: GO 36473
36447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36448: LD_ADDR_VAR 0 3
36452: PUSH
36453: LD_INT 11
36455: PUSH
36456: LD_INT 12
36458: PUSH
36459: LD_INT 13
36461: PUSH
36462: LD_INT 14
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
36471: GO 37016
36473: LD_INT 30
36475: DOUBLE
36476: EQUAL
36477: IFTRUE 36481
36479: GO 36507
36481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36482: LD_ADDR_VAR 0 3
36486: PUSH
36487: LD_INT 11
36489: PUSH
36490: LD_INT 12
36492: PUSH
36493: LD_INT 13
36495: PUSH
36496: LD_INT 14
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
36505: GO 37016
36507: LD_INT 25
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 36533
36515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_INT 13
36523: PUSH
36524: LD_INT 14
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: ST_TO_ADDR
36531: GO 37016
36533: LD_INT 27
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36541
36539: GO 36559
36541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: LD_INT 13
36549: PUSH
36550: LD_INT 14
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 37016
36559: LD_EXP 132
36563: DOUBLE
36564: EQUAL
36565: IFTRUE 36569
36567: GO 36595
36569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_INT 11
36577: PUSH
36578: LD_INT 12
36580: PUSH
36581: LD_INT 13
36583: PUSH
36584: LD_INT 14
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
36593: GO 37016
36595: LD_INT 28
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36621
36603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: LD_INT 13
36611: PUSH
36612: LD_INT 14
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: ST_TO_ADDR
36619: GO 37016
36621: LD_INT 29
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 36647
36629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36630: LD_ADDR_VAR 0 3
36634: PUSH
36635: LD_INT 13
36637: PUSH
36638: LD_INT 14
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: ST_TO_ADDR
36645: GO 37016
36647: LD_INT 31
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 36673
36655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_INT 13
36663: PUSH
36664: LD_INT 14
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: ST_TO_ADDR
36671: GO 37016
36673: LD_INT 26
36675: DOUBLE
36676: EQUAL
36677: IFTRUE 36681
36679: GO 36699
36681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36682: LD_ADDR_VAR 0 3
36686: PUSH
36687: LD_INT 13
36689: PUSH
36690: LD_INT 14
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: ST_TO_ADDR
36697: GO 37016
36699: LD_INT 42
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36707
36705: GO 36733
36707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 21
36715: PUSH
36716: LD_INT 22
36718: PUSH
36719: LD_INT 23
36721: PUSH
36722: LD_INT 24
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
36731: GO 37016
36733: LD_INT 43
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36741
36739: GO 36767
36741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_INT 21
36749: PUSH
36750: LD_INT 22
36752: PUSH
36753: LD_INT 23
36755: PUSH
36756: LD_INT 24
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
36765: GO 37016
36767: LD_INT 44
36769: DOUBLE
36770: EQUAL
36771: IFTRUE 36775
36773: GO 36801
36775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_INT 21
36783: PUSH
36784: LD_INT 22
36786: PUSH
36787: LD_INT 23
36789: PUSH
36790: LD_INT 24
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
36799: GO 37016
36801: LD_INT 45
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36835
36809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36810: LD_ADDR_VAR 0 3
36814: PUSH
36815: LD_INT 21
36817: PUSH
36818: LD_INT 22
36820: PUSH
36821: LD_INT 23
36823: PUSH
36824: LD_INT 24
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
36833: GO 37016
36835: LD_INT 49
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36843
36841: GO 36869
36843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 21
36851: PUSH
36852: LD_INT 22
36854: PUSH
36855: LD_INT 23
36857: PUSH
36858: LD_INT 24
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
36867: GO 37016
36869: LD_INT 51
36871: DOUBLE
36872: EQUAL
36873: IFTRUE 36877
36875: GO 36903
36877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_INT 21
36885: PUSH
36886: LD_INT 22
36888: PUSH
36889: LD_INT 23
36891: PUSH
36892: LD_INT 24
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
36901: GO 37016
36903: LD_INT 52
36905: DOUBLE
36906: EQUAL
36907: IFTRUE 36911
36909: GO 36937
36911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_INT 21
36919: PUSH
36920: LD_INT 22
36922: PUSH
36923: LD_INT 23
36925: PUSH
36926: LD_INT 24
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
36935: GO 37016
36937: LD_INT 53
36939: DOUBLE
36940: EQUAL
36941: IFTRUE 36945
36943: GO 36963
36945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: LD_INT 23
36953: PUSH
36954: LD_INT 24
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: ST_TO_ADDR
36961: GO 37016
36963: LD_INT 46
36965: DOUBLE
36966: EQUAL
36967: IFTRUE 36971
36969: GO 36989
36971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_INT 23
36979: PUSH
36980: LD_INT 24
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: ST_TO_ADDR
36987: GO 37016
36989: LD_INT 47
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37015
36997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36998: LD_ADDR_VAR 0 3
37002: PUSH
37003: LD_INT 23
37005: PUSH
37006: LD_INT 24
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: ST_TO_ADDR
37013: GO 37016
37015: POP
// result := ( chassis in result ) ;
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_VAR 0 1
37025: PUSH
37026: LD_VAR 0 3
37030: IN
37031: ST_TO_ADDR
// end ;
37032: LD_VAR 0 3
37036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37037: LD_INT 0
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
// result := array ;
37046: LD_ADDR_VAR 0 5
37050: PUSH
37051: LD_VAR 0 1
37055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37056: LD_VAR 0 1
37060: NOT
37061: PUSH
37062: LD_VAR 0 2
37066: NOT
37067: OR
37068: PUSH
37069: LD_VAR 0 3
37073: NOT
37074: OR
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 1
37085: GREATER
37086: OR
37087: PUSH
37088: LD_VAR 0 3
37092: PUSH
37093: LD_VAR 0 1
37097: GREATER
37098: OR
37099: IFFALSE 37103
// exit ;
37101: GO 37399
// if direction then
37103: LD_VAR 0 4
37107: IFFALSE 37171
// begin d := 1 ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 1
37116: ST_TO_ADDR
// if i_from > i_to then
37117: LD_VAR 0 2
37121: PUSH
37122: LD_VAR 0 3
37126: GREATER
37127: IFFALSE 37153
// length := ( array - i_from ) + i_to else
37129: LD_ADDR_VAR 0 11
37133: PUSH
37134: LD_VAR 0 1
37138: PUSH
37139: LD_VAR 0 2
37143: MINUS
37144: PUSH
37145: LD_VAR 0 3
37149: PLUS
37150: ST_TO_ADDR
37151: GO 37169
// length := i_to - i_from ;
37153: LD_ADDR_VAR 0 11
37157: PUSH
37158: LD_VAR 0 3
37162: PUSH
37163: LD_VAR 0 2
37167: MINUS
37168: ST_TO_ADDR
// end else
37169: GO 37232
// begin d := - 1 ;
37171: LD_ADDR_VAR 0 9
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: ST_TO_ADDR
// if i_from > i_to then
37180: LD_VAR 0 2
37184: PUSH
37185: LD_VAR 0 3
37189: GREATER
37190: IFFALSE 37210
// length := i_from - i_to else
37192: LD_ADDR_VAR 0 11
37196: PUSH
37197: LD_VAR 0 2
37201: PUSH
37202: LD_VAR 0 3
37206: MINUS
37207: ST_TO_ADDR
37208: GO 37232
// length := ( array - i_to ) + i_from ;
37210: LD_ADDR_VAR 0 11
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_VAR 0 3
37224: MINUS
37225: PUSH
37226: LD_VAR 0 2
37230: PLUS
37231: ST_TO_ADDR
// end ; if not length then
37232: LD_VAR 0 11
37236: NOT
37237: IFFALSE 37241
// exit ;
37239: GO 37399
// tmp := array ;
37241: LD_ADDR_VAR 0 10
37245: PUSH
37246: LD_VAR 0 1
37250: ST_TO_ADDR
// for i = 1 to length do
37251: LD_ADDR_VAR 0 6
37255: PUSH
37256: DOUBLE
37257: LD_INT 1
37259: DEC
37260: ST_TO_ADDR
37261: LD_VAR 0 11
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37387
// begin for j = 1 to array do
37269: LD_ADDR_VAR 0 7
37273: PUSH
37274: DOUBLE
37275: LD_INT 1
37277: DEC
37278: ST_TO_ADDR
37279: LD_VAR 0 1
37283: PUSH
37284: FOR_TO
37285: IFFALSE 37373
// begin k := j + d ;
37287: LD_ADDR_VAR 0 8
37291: PUSH
37292: LD_VAR 0 7
37296: PUSH
37297: LD_VAR 0 9
37301: PLUS
37302: ST_TO_ADDR
// if k > array then
37303: LD_VAR 0 8
37307: PUSH
37308: LD_VAR 0 1
37312: GREATER
37313: IFFALSE 37323
// k := 1 ;
37315: LD_ADDR_VAR 0 8
37319: PUSH
37320: LD_INT 1
37322: ST_TO_ADDR
// if not k then
37323: LD_VAR 0 8
37327: NOT
37328: IFFALSE 37340
// k := array ;
37330: LD_ADDR_VAR 0 8
37334: PUSH
37335: LD_VAR 0 1
37339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37340: LD_ADDR_VAR 0 10
37344: PUSH
37345: LD_VAR 0 10
37349: PPUSH
37350: LD_VAR 0 8
37354: PPUSH
37355: LD_VAR 0 1
37359: PUSH
37360: LD_VAR 0 7
37364: ARRAY
37365: PPUSH
37366: CALL_OW 1
37370: ST_TO_ADDR
// end ;
37371: GO 37284
37373: POP
37374: POP
// array := tmp ;
37375: LD_ADDR_VAR 0 1
37379: PUSH
37380: LD_VAR 0 10
37384: ST_TO_ADDR
// end ;
37385: GO 37266
37387: POP
37388: POP
// result := array ;
37389: LD_ADDR_VAR 0 5
37393: PUSH
37394: LD_VAR 0 1
37398: ST_TO_ADDR
// end ;
37399: LD_VAR 0 5
37403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37404: LD_INT 0
37406: PPUSH
37407: PPUSH
// result := 0 ;
37408: LD_ADDR_VAR 0 3
37412: PUSH
37413: LD_INT 0
37415: ST_TO_ADDR
// if not array or not value in array then
37416: LD_VAR 0 1
37420: NOT
37421: PUSH
37422: LD_VAR 0 2
37426: PUSH
37427: LD_VAR 0 1
37431: IN
37432: NOT
37433: OR
37434: IFFALSE 37438
// exit ;
37436: GO 37492
// for i = 1 to array do
37438: LD_ADDR_VAR 0 4
37442: PUSH
37443: DOUBLE
37444: LD_INT 1
37446: DEC
37447: ST_TO_ADDR
37448: LD_VAR 0 1
37452: PUSH
37453: FOR_TO
37454: IFFALSE 37490
// if value = array [ i ] then
37456: LD_VAR 0 2
37460: PUSH
37461: LD_VAR 0 1
37465: PUSH
37466: LD_VAR 0 4
37470: ARRAY
37471: EQUAL
37472: IFFALSE 37488
// begin result := i ;
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_VAR 0 4
37483: ST_TO_ADDR
// exit ;
37484: POP
37485: POP
37486: GO 37492
// end ;
37488: GO 37453
37490: POP
37491: POP
// end ;
37492: LD_VAR 0 3
37496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37497: LD_INT 0
37499: PPUSH
// vc_chassis := chassis ;
37500: LD_ADDR_OWVAR 37
37504: PUSH
37505: LD_VAR 0 1
37509: ST_TO_ADDR
// vc_engine := engine ;
37510: LD_ADDR_OWVAR 39
37514: PUSH
37515: LD_VAR 0 2
37519: ST_TO_ADDR
// vc_control := control ;
37520: LD_ADDR_OWVAR 38
37524: PUSH
37525: LD_VAR 0 3
37529: ST_TO_ADDR
// vc_weapon := weapon ;
37530: LD_ADDR_OWVAR 40
37534: PUSH
37535: LD_VAR 0 4
37539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37540: LD_ADDR_OWVAR 41
37544: PUSH
37545: LD_VAR 0 5
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 6
37554: RET
// export function WantPlant ( unit ) ; var task ; begin
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
// result := false ;
37559: LD_ADDR_VAR 0 2
37563: PUSH
37564: LD_INT 0
37566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 437
37581: ST_TO_ADDR
// if task then
37582: LD_VAR 0 3
37586: IFFALSE 37614
// if task [ 1 ] [ 1 ] = p then
37588: LD_VAR 0 3
37592: PUSH
37593: LD_INT 1
37595: ARRAY
37596: PUSH
37597: LD_INT 1
37599: ARRAY
37600: PUSH
37601: LD_STRING p
37603: EQUAL
37604: IFFALSE 37614
// result := true ;
37606: LD_ADDR_VAR 0 2
37610: PUSH
37611: LD_INT 1
37613: ST_TO_ADDR
// end ;
37614: LD_VAR 0 2
37618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37619: LD_INT 0
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
// if pos < 1 then
37625: LD_VAR 0 2
37629: PUSH
37630: LD_INT 1
37632: LESS
37633: IFFALSE 37637
// exit ;
37635: GO 37940
// if pos = 1 then
37637: LD_VAR 0 2
37641: PUSH
37642: LD_INT 1
37644: EQUAL
37645: IFFALSE 37678
// result := Replace ( arr , pos [ 1 ] , value ) else
37647: LD_ADDR_VAR 0 4
37651: PUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: LD_VAR 0 2
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: PPUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: CALL_OW 1
37675: ST_TO_ADDR
37676: GO 37940
// begin tmp := arr ;
37678: LD_ADDR_VAR 0 6
37682: PUSH
37683: LD_VAR 0 1
37687: ST_TO_ADDR
// s_arr := [ tmp ] ;
37688: LD_ADDR_VAR 0 7
37692: PUSH
37693: LD_VAR 0 6
37697: PUSH
37698: EMPTY
37699: LIST
37700: ST_TO_ADDR
// for i = 1 to pos - 1 do
37701: LD_ADDR_VAR 0 5
37705: PUSH
37706: DOUBLE
37707: LD_INT 1
37709: DEC
37710: ST_TO_ADDR
37711: LD_VAR 0 2
37715: PUSH
37716: LD_INT 1
37718: MINUS
37719: PUSH
37720: FOR_TO
37721: IFFALSE 37766
// begin tmp := tmp [ pos [ i ] ] ;
37723: LD_ADDR_VAR 0 6
37727: PUSH
37728: LD_VAR 0 6
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_VAR 0 5
37742: ARRAY
37743: ARRAY
37744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37745: LD_ADDR_VAR 0 7
37749: PUSH
37750: LD_VAR 0 7
37754: PUSH
37755: LD_VAR 0 6
37759: PUSH
37760: EMPTY
37761: LIST
37762: ADD
37763: ST_TO_ADDR
// end ;
37764: GO 37720
37766: POP
37767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37768: LD_ADDR_VAR 0 6
37772: PUSH
37773: LD_VAR 0 6
37777: PPUSH
37778: LD_VAR 0 2
37782: PUSH
37783: LD_VAR 0 2
37787: ARRAY
37788: PPUSH
37789: LD_VAR 0 3
37793: PPUSH
37794: CALL_OW 1
37798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37799: LD_ADDR_VAR 0 7
37803: PUSH
37804: LD_VAR 0 7
37808: PPUSH
37809: LD_VAR 0 7
37813: PPUSH
37814: LD_VAR 0 6
37818: PPUSH
37819: CALL_OW 1
37823: ST_TO_ADDR
// for i = s_arr downto 2 do
37824: LD_ADDR_VAR 0 5
37828: PUSH
37829: DOUBLE
37830: LD_VAR 0 7
37834: INC
37835: ST_TO_ADDR
37836: LD_INT 2
37838: PUSH
37839: FOR_DOWNTO
37840: IFFALSE 37924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37842: LD_ADDR_VAR 0 6
37846: PUSH
37847: LD_VAR 0 7
37851: PUSH
37852: LD_VAR 0 5
37856: PUSH
37857: LD_INT 1
37859: MINUS
37860: ARRAY
37861: PPUSH
37862: LD_VAR 0 2
37866: PUSH
37867: LD_VAR 0 5
37871: PUSH
37872: LD_INT 1
37874: MINUS
37875: ARRAY
37876: PPUSH
37877: LD_VAR 0 7
37881: PUSH
37882: LD_VAR 0 5
37886: ARRAY
37887: PPUSH
37888: CALL_OW 1
37892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37893: LD_ADDR_VAR 0 7
37897: PUSH
37898: LD_VAR 0 7
37902: PPUSH
37903: LD_VAR 0 5
37907: PUSH
37908: LD_INT 1
37910: MINUS
37911: PPUSH
37912: LD_VAR 0 6
37916: PPUSH
37917: CALL_OW 1
37921: ST_TO_ADDR
// end ;
37922: GO 37839
37924: POP
37925: POP
// result := s_arr [ 1 ] ;
37926: LD_ADDR_VAR 0 4
37930: PUSH
37931: LD_VAR 0 7
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: ST_TO_ADDR
// end ; end ;
37940: LD_VAR 0 4
37944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37945: LD_INT 0
37947: PPUSH
37948: PPUSH
// if not list then
37949: LD_VAR 0 1
37953: NOT
37954: IFFALSE 37958
// exit ;
37956: GO 38049
// i := list [ pos1 ] ;
37958: LD_ADDR_VAR 0 5
37962: PUSH
37963: LD_VAR 0 1
37967: PUSH
37968: LD_VAR 0 2
37972: ARRAY
37973: ST_TO_ADDR
// if not i then
37974: LD_VAR 0 5
37978: NOT
37979: IFFALSE 37983
// exit ;
37981: GO 38049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37983: LD_ADDR_VAR 0 1
37987: PUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: LD_VAR 0 2
37997: PPUSH
37998: LD_VAR 0 1
38002: PUSH
38003: LD_VAR 0 3
38007: ARRAY
38008: PPUSH
38009: CALL_OW 1
38013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38014: LD_ADDR_VAR 0 1
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: LD_VAR 0 3
38028: PPUSH
38029: LD_VAR 0 5
38033: PPUSH
38034: CALL_OW 1
38038: ST_TO_ADDR
// result := list ;
38039: LD_ADDR_VAR 0 4
38043: PUSH
38044: LD_VAR 0 1
38048: ST_TO_ADDR
// end ;
38049: LD_VAR 0 4
38053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38054: LD_INT 0
38056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38057: LD_ADDR_VAR 0 5
38061: PUSH
38062: LD_VAR 0 1
38066: PPUSH
38067: CALL_OW 250
38071: PPUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 251
38081: PPUSH
38082: LD_VAR 0 2
38086: PPUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: LD_VAR 0 4
38096: PPUSH
38097: CALL 38107 0 5
38101: ST_TO_ADDR
// end ;
38102: LD_VAR 0 5
38106: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38107: LD_INT 0
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
// if not list then
38113: LD_VAR 0 3
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38510
// result := [ ] ;
38122: LD_ADDR_VAR 0 6
38126: PUSH
38127: EMPTY
38128: ST_TO_ADDR
// for i in list do
38129: LD_ADDR_VAR 0 7
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: FOR_IN
38140: IFFALSE 38342
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38142: LD_ADDR_VAR 0 9
38146: PUSH
38147: LD_VAR 0 7
38151: PPUSH
38152: LD_VAR 0 1
38156: PPUSH
38157: LD_VAR 0 2
38161: PPUSH
38162: CALL_OW 297
38166: ST_TO_ADDR
// if not result then
38167: LD_VAR 0 6
38171: NOT
38172: IFFALSE 38198
// result := [ [ i , tmp ] ] else
38174: LD_ADDR_VAR 0 6
38178: PUSH
38179: LD_VAR 0 7
38183: PUSH
38184: LD_VAR 0 9
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: ST_TO_ADDR
38196: GO 38340
// begin if result [ result ] [ 2 ] < tmp then
38198: LD_VAR 0 6
38202: PUSH
38203: LD_VAR 0 6
38207: ARRAY
38208: PUSH
38209: LD_INT 2
38211: ARRAY
38212: PUSH
38213: LD_VAR 0 9
38217: LESS
38218: IFFALSE 38260
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38220: LD_ADDR_VAR 0 6
38224: PUSH
38225: LD_VAR 0 6
38229: PPUSH
38230: LD_VAR 0 6
38234: PUSH
38235: LD_INT 1
38237: PLUS
38238: PPUSH
38239: LD_VAR 0 7
38243: PUSH
38244: LD_VAR 0 9
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PPUSH
38253: CALL_OW 2
38257: ST_TO_ADDR
38258: GO 38340
// for j = 1 to result do
38260: LD_ADDR_VAR 0 8
38264: PUSH
38265: DOUBLE
38266: LD_INT 1
38268: DEC
38269: ST_TO_ADDR
38270: LD_VAR 0 6
38274: PUSH
38275: FOR_TO
38276: IFFALSE 38338
// begin if tmp < result [ j ] [ 2 ] then
38278: LD_VAR 0 9
38282: PUSH
38283: LD_VAR 0 6
38287: PUSH
38288: LD_VAR 0 8
38292: ARRAY
38293: PUSH
38294: LD_INT 2
38296: ARRAY
38297: LESS
38298: IFFALSE 38336
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38300: LD_ADDR_VAR 0 6
38304: PUSH
38305: LD_VAR 0 6
38309: PPUSH
38310: LD_VAR 0 8
38314: PPUSH
38315: LD_VAR 0 7
38319: PUSH
38320: LD_VAR 0 9
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 2
38333: ST_TO_ADDR
// break ;
38334: GO 38338
// end ; end ;
38336: GO 38275
38338: POP
38339: POP
// end ; end ;
38340: GO 38139
38342: POP
38343: POP
// if result and not asc then
38344: LD_VAR 0 6
38348: PUSH
38349: LD_VAR 0 4
38353: NOT
38354: AND
38355: IFFALSE 38430
// begin tmp := result ;
38357: LD_ADDR_VAR 0 9
38361: PUSH
38362: LD_VAR 0 6
38366: ST_TO_ADDR
// for i = tmp downto 1 do
38367: LD_ADDR_VAR 0 7
38371: PUSH
38372: DOUBLE
38373: LD_VAR 0 9
38377: INC
38378: ST_TO_ADDR
38379: LD_INT 1
38381: PUSH
38382: FOR_DOWNTO
38383: IFFALSE 38428
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38385: LD_ADDR_VAR 0 6
38389: PUSH
38390: LD_VAR 0 6
38394: PPUSH
38395: LD_VAR 0 9
38399: PUSH
38400: LD_VAR 0 7
38404: MINUS
38405: PUSH
38406: LD_INT 1
38408: PLUS
38409: PPUSH
38410: LD_VAR 0 9
38414: PUSH
38415: LD_VAR 0 7
38419: ARRAY
38420: PPUSH
38421: CALL_OW 1
38425: ST_TO_ADDR
38426: GO 38382
38428: POP
38429: POP
// end ; tmp := [ ] ;
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: EMPTY
38436: ST_TO_ADDR
// if mode then
38437: LD_VAR 0 5
38441: IFFALSE 38510
// begin for i = 1 to result do
38443: LD_ADDR_VAR 0 7
38447: PUSH
38448: DOUBLE
38449: LD_INT 1
38451: DEC
38452: ST_TO_ADDR
38453: LD_VAR 0 6
38457: PUSH
38458: FOR_TO
38459: IFFALSE 38498
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38461: LD_ADDR_VAR 0 9
38465: PUSH
38466: LD_VAR 0 9
38470: PPUSH
38471: LD_VAR 0 7
38475: PPUSH
38476: LD_VAR 0 6
38480: PUSH
38481: LD_VAR 0 7
38485: ARRAY
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: PPUSH
38491: CALL_OW 1
38495: ST_TO_ADDR
38496: GO 38458
38498: POP
38499: POP
// result := tmp ;
38500: LD_ADDR_VAR 0 6
38504: PUSH
38505: LD_VAR 0 9
38509: ST_TO_ADDR
// end ; end ;
38510: LD_VAR 0 6
38514: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38515: LD_INT 0
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38523: LD_ADDR_VAR 0 5
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// if not x or not y then
38545: LD_VAR 0 2
38549: NOT
38550: PUSH
38551: LD_VAR 0 3
38555: NOT
38556: OR
38557: IFFALSE 38561
// exit ;
38559: GO 40213
// if not range then
38561: LD_VAR 0 4
38565: NOT
38566: IFFALSE 38576
// range := 10 ;
38568: LD_ADDR_VAR 0 4
38572: PUSH
38573: LD_INT 10
38575: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38576: LD_ADDR_VAR 0 8
38580: PUSH
38581: LD_INT 81
38583: PUSH
38584: LD_VAR 0 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 92
38595: PUSH
38596: LD_VAR 0 2
38600: PUSH
38601: LD_VAR 0 3
38605: PUSH
38606: LD_VAR 0 4
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 21
38622: PUSH
38623: LD_INT 3
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: PPUSH
38639: CALL_OW 69
38643: ST_TO_ADDR
// if not tmp then
38644: LD_VAR 0 8
38648: NOT
38649: IFFALSE 38653
// exit ;
38651: GO 40213
// for i in tmp do
38653: LD_ADDR_VAR 0 6
38657: PUSH
38658: LD_VAR 0 8
38662: PUSH
38663: FOR_IN
38664: IFFALSE 40188
// begin points := [ 0 , 0 , 0 ] ;
38666: LD_ADDR_VAR 0 9
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// bpoints := 1 ;
38685: LD_ADDR_VAR 0 10
38689: PUSH
38690: LD_INT 1
38692: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38693: LD_VAR 0 6
38697: PPUSH
38698: CALL_OW 247
38702: PUSH
38703: LD_INT 1
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 39289
38711: POP
// begin if GetClass ( i ) = 1 then
38712: LD_VAR 0 6
38716: PPUSH
38717: CALL_OW 257
38721: PUSH
38722: LD_INT 1
38724: EQUAL
38725: IFFALSE 38746
// points := [ 10 , 5 , 3 ] ;
38727: LD_ADDR_VAR 0 9
38731: PUSH
38732: LD_INT 10
38734: PUSH
38735: LD_INT 5
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38746: LD_VAR 0 6
38750: PPUSH
38751: CALL_OW 257
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 3
38761: PUSH
38762: LD_INT 4
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: IN
38770: IFFALSE 38791
// points := [ 3 , 2 , 1 ] ;
38772: LD_ADDR_VAR 0 9
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38791: LD_VAR 0 6
38795: PPUSH
38796: CALL_OW 257
38800: PUSH
38801: LD_INT 5
38803: EQUAL
38804: IFFALSE 38825
// points := [ 130 , 5 , 2 ] ;
38806: LD_ADDR_VAR 0 9
38810: PUSH
38811: LD_INT 130
38813: PUSH
38814: LD_INT 5
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38825: LD_VAR 0 6
38829: PPUSH
38830: CALL_OW 257
38834: PUSH
38835: LD_INT 8
38837: EQUAL
38838: IFFALSE 38859
// points := [ 35 , 35 , 30 ] ;
38840: LD_ADDR_VAR 0 9
38844: PUSH
38845: LD_INT 35
38847: PUSH
38848: LD_INT 35
38850: PUSH
38851: LD_INT 30
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38859: LD_VAR 0 6
38863: PPUSH
38864: CALL_OW 257
38868: PUSH
38869: LD_INT 9
38871: EQUAL
38872: IFFALSE 38893
// points := [ 20 , 55 , 40 ] ;
38874: LD_ADDR_VAR 0 9
38878: PUSH
38879: LD_INT 20
38881: PUSH
38882: LD_INT 55
38884: PUSH
38885: LD_INT 40
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38893: LD_VAR 0 6
38897: PPUSH
38898: CALL_OW 257
38902: PUSH
38903: LD_INT 12
38905: PUSH
38906: LD_INT 16
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: IN
38913: IFFALSE 38934
// points := [ 5 , 3 , 2 ] ;
38915: LD_ADDR_VAR 0 9
38919: PUSH
38920: LD_INT 5
38922: PUSH
38923: LD_INT 3
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38934: LD_VAR 0 6
38938: PPUSH
38939: CALL_OW 257
38943: PUSH
38944: LD_INT 17
38946: EQUAL
38947: IFFALSE 38968
// points := [ 100 , 50 , 75 ] ;
38949: LD_ADDR_VAR 0 9
38953: PUSH
38954: LD_INT 100
38956: PUSH
38957: LD_INT 50
38959: PUSH
38960: LD_INT 75
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38968: LD_VAR 0 6
38972: PPUSH
38973: CALL_OW 257
38977: PUSH
38978: LD_INT 15
38980: EQUAL
38981: IFFALSE 39002
// points := [ 10 , 5 , 3 ] ;
38983: LD_ADDR_VAR 0 9
38987: PUSH
38988: LD_INT 10
38990: PUSH
38991: LD_INT 5
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39002: LD_VAR 0 6
39006: PPUSH
39007: CALL_OW 257
39011: PUSH
39012: LD_INT 14
39014: EQUAL
39015: IFFALSE 39036
// points := [ 10 , 0 , 0 ] ;
39017: LD_ADDR_VAR 0 9
39021: PUSH
39022: LD_INT 10
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39036: LD_VAR 0 6
39040: PPUSH
39041: CALL_OW 257
39045: PUSH
39046: LD_INT 11
39048: EQUAL
39049: IFFALSE 39070
// points := [ 30 , 10 , 5 ] ;
39051: LD_ADDR_VAR 0 9
39055: PUSH
39056: LD_INT 30
39058: PUSH
39059: LD_INT 10
39061: PUSH
39062: LD_INT 5
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39070: LD_VAR 0 1
39074: PPUSH
39075: LD_INT 5
39077: PPUSH
39078: CALL_OW 321
39082: PUSH
39083: LD_INT 2
39085: EQUAL
39086: IFFALSE 39103
// bpoints := bpoints * 1.8 ;
39088: LD_ADDR_VAR 0 10
39092: PUSH
39093: LD_VAR 0 10
39097: PUSH
39098: LD_REAL  1.80000000000000E+0000
39101: MUL
39102: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 257
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: IN
39131: PUSH
39132: LD_VAR 0 1
39136: PPUSH
39137: LD_INT 51
39139: PPUSH
39140: CALL_OW 321
39144: PUSH
39145: LD_INT 2
39147: EQUAL
39148: AND
39149: IFFALSE 39166
// bpoints := bpoints * 1.2 ;
39151: LD_ADDR_VAR 0 10
39155: PUSH
39156: LD_VAR 0 10
39160: PUSH
39161: LD_REAL  1.20000000000000E+0000
39164: MUL
39165: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39166: LD_VAR 0 6
39170: PPUSH
39171: CALL_OW 257
39175: PUSH
39176: LD_INT 5
39178: PUSH
39179: LD_INT 7
39181: PUSH
39182: LD_INT 9
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: IN
39190: PUSH
39191: LD_VAR 0 1
39195: PPUSH
39196: LD_INT 52
39198: PPUSH
39199: CALL_OW 321
39203: PUSH
39204: LD_INT 2
39206: EQUAL
39207: AND
39208: IFFALSE 39225
// bpoints := bpoints * 1.5 ;
39210: LD_ADDR_VAR 0 10
39214: PUSH
39215: LD_VAR 0 10
39219: PUSH
39220: LD_REAL  1.50000000000000E+0000
39223: MUL
39224: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39225: LD_VAR 0 1
39229: PPUSH
39230: LD_INT 66
39232: PPUSH
39233: CALL_OW 321
39237: PUSH
39238: LD_INT 2
39240: EQUAL
39241: IFFALSE 39258
// bpoints := bpoints * 1.1 ;
39243: LD_ADDR_VAR 0 10
39247: PUSH
39248: LD_VAR 0 10
39252: PUSH
39253: LD_REAL  1.10000000000000E+0000
39256: MUL
39257: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39258: LD_ADDR_VAR 0 10
39262: PUSH
39263: LD_VAR 0 10
39267: PUSH
39268: LD_VAR 0 6
39272: PPUSH
39273: LD_INT 1
39275: PPUSH
39276: CALL_OW 259
39280: PUSH
39281: LD_REAL  1.15000000000000E+0000
39284: MUL
39285: MUL
39286: ST_TO_ADDR
// end ; unit_vehicle :
39287: GO 40117
39289: LD_INT 2
39291: DOUBLE
39292: EQUAL
39293: IFTRUE 39297
39295: GO 40105
39297: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39298: LD_VAR 0 6
39302: PPUSH
39303: CALL_OW 264
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 42
39313: PUSH
39314: LD_INT 24
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: IN
39322: IFFALSE 39343
// points := [ 25 , 5 , 3 ] ;
39324: LD_ADDR_VAR 0 9
39328: PUSH
39329: LD_INT 25
39331: PUSH
39332: LD_INT 5
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39343: LD_VAR 0 6
39347: PPUSH
39348: CALL_OW 264
39352: PUSH
39353: LD_INT 4
39355: PUSH
39356: LD_INT 43
39358: PUSH
39359: LD_INT 25
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: IN
39367: IFFALSE 39388
// points := [ 40 , 15 , 5 ] ;
39369: LD_ADDR_VAR 0 9
39373: PUSH
39374: LD_INT 40
39376: PUSH
39377: LD_INT 15
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39388: LD_VAR 0 6
39392: PPUSH
39393: CALL_OW 264
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 23
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: IN
39408: IFFALSE 39429
// points := [ 7 , 25 , 8 ] ;
39410: LD_ADDR_VAR 0 9
39414: PUSH
39415: LD_INT 7
39417: PUSH
39418: LD_INT 25
39420: PUSH
39421: LD_INT 8
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39429: LD_VAR 0 6
39433: PPUSH
39434: CALL_OW 264
39438: PUSH
39439: LD_INT 5
39441: PUSH
39442: LD_INT 27
39444: PUSH
39445: LD_INT 44
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: IN
39453: IFFALSE 39474
// points := [ 14 , 50 , 16 ] ;
39455: LD_ADDR_VAR 0 9
39459: PUSH
39460: LD_INT 14
39462: PUSH
39463: LD_INT 50
39465: PUSH
39466: LD_INT 16
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39474: LD_VAR 0 6
39478: PPUSH
39479: CALL_OW 264
39483: PUSH
39484: LD_INT 6
39486: PUSH
39487: LD_INT 46
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: IN
39494: IFFALSE 39515
// points := [ 32 , 120 , 70 ] ;
39496: LD_ADDR_VAR 0 9
39500: PUSH
39501: LD_INT 32
39503: PUSH
39504: LD_INT 120
39506: PUSH
39507: LD_INT 70
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39515: LD_VAR 0 6
39519: PPUSH
39520: CALL_OW 264
39524: PUSH
39525: LD_INT 7
39527: PUSH
39528: LD_INT 28
39530: PUSH
39531: LD_INT 45
39533: PUSH
39534: LD_EXP 132
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: IN
39545: IFFALSE 39566
// points := [ 35 , 20 , 45 ] ;
39547: LD_ADDR_VAR 0 9
39551: PUSH
39552: LD_INT 35
39554: PUSH
39555: LD_INT 20
39557: PUSH
39558: LD_INT 45
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39566: LD_VAR 0 6
39570: PPUSH
39571: CALL_OW 264
39575: PUSH
39576: LD_INT 47
39578: PUSH
39579: EMPTY
39580: LIST
39581: IN
39582: IFFALSE 39603
// points := [ 67 , 45 , 75 ] ;
39584: LD_ADDR_VAR 0 9
39588: PUSH
39589: LD_INT 67
39591: PUSH
39592: LD_INT 45
39594: PUSH
39595: LD_INT 75
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39603: LD_VAR 0 6
39607: PPUSH
39608: CALL_OW 264
39612: PUSH
39613: LD_INT 26
39615: PUSH
39616: EMPTY
39617: LIST
39618: IN
39619: IFFALSE 39640
// points := [ 120 , 30 , 80 ] ;
39621: LD_ADDR_VAR 0 9
39625: PUSH
39626: LD_INT 120
39628: PUSH
39629: LD_INT 30
39631: PUSH
39632: LD_INT 80
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39640: LD_VAR 0 6
39644: PPUSH
39645: CALL_OW 264
39649: PUSH
39650: LD_INT 22
39652: PUSH
39653: EMPTY
39654: LIST
39655: IN
39656: IFFALSE 39677
// points := [ 40 , 1 , 1 ] ;
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_INT 40
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39677: LD_VAR 0 6
39681: PPUSH
39682: CALL_OW 264
39686: PUSH
39687: LD_INT 29
39689: PUSH
39690: EMPTY
39691: LIST
39692: IN
39693: IFFALSE 39714
// points := [ 70 , 200 , 400 ] ;
39695: LD_ADDR_VAR 0 9
39699: PUSH
39700: LD_INT 70
39702: PUSH
39703: LD_INT 200
39705: PUSH
39706: LD_INT 400
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39714: LD_VAR 0 6
39718: PPUSH
39719: CALL_OW 264
39723: PUSH
39724: LD_INT 14
39726: PUSH
39727: LD_INT 53
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: IN
39734: IFFALSE 39755
// points := [ 40 , 10 , 20 ] ;
39736: LD_ADDR_VAR 0 9
39740: PUSH
39741: LD_INT 40
39743: PUSH
39744: LD_INT 10
39746: PUSH
39747: LD_INT 20
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39755: LD_VAR 0 6
39759: PPUSH
39760: CALL_OW 264
39764: PUSH
39765: LD_INT 9
39767: PUSH
39768: EMPTY
39769: LIST
39770: IN
39771: IFFALSE 39792
// points := [ 5 , 70 , 20 ] ;
39773: LD_ADDR_VAR 0 9
39777: PUSH
39778: LD_INT 5
39780: PUSH
39781: LD_INT 70
39783: PUSH
39784: LD_INT 20
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39792: LD_VAR 0 6
39796: PPUSH
39797: CALL_OW 264
39801: PUSH
39802: LD_INT 10
39804: PUSH
39805: EMPTY
39806: LIST
39807: IN
39808: IFFALSE 39829
// points := [ 35 , 110 , 70 ] ;
39810: LD_ADDR_VAR 0 9
39814: PUSH
39815: LD_INT 35
39817: PUSH
39818: LD_INT 110
39820: PUSH
39821: LD_INT 70
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39829: LD_VAR 0 6
39833: PPUSH
39834: CALL_OW 265
39838: PUSH
39839: LD_INT 25
39841: EQUAL
39842: IFFALSE 39863
// points := [ 80 , 65 , 100 ] ;
39844: LD_ADDR_VAR 0 9
39848: PUSH
39849: LD_INT 80
39851: PUSH
39852: LD_INT 65
39854: PUSH
39855: LD_INT 100
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39863: LD_VAR 0 6
39867: PPUSH
39868: CALL_OW 263
39872: PUSH
39873: LD_INT 1
39875: EQUAL
39876: IFFALSE 39911
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39878: LD_ADDR_VAR 0 10
39882: PUSH
39883: LD_VAR 0 10
39887: PUSH
39888: LD_VAR 0 6
39892: PPUSH
39893: CALL_OW 311
39897: PPUSH
39898: LD_INT 3
39900: PPUSH
39901: CALL_OW 259
39905: PUSH
39906: LD_INT 4
39908: MUL
39909: MUL
39910: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39911: LD_VAR 0 6
39915: PPUSH
39916: CALL_OW 263
39920: PUSH
39921: LD_INT 2
39923: EQUAL
39924: IFFALSE 39975
// begin j := IsControledBy ( i ) ;
39926: LD_ADDR_VAR 0 7
39930: PUSH
39931: LD_VAR 0 6
39935: PPUSH
39936: CALL_OW 312
39940: ST_TO_ADDR
// if j then
39941: LD_VAR 0 7
39945: IFFALSE 39975
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39947: LD_ADDR_VAR 0 10
39951: PUSH
39952: LD_VAR 0 10
39956: PUSH
39957: LD_VAR 0 7
39961: PPUSH
39962: LD_INT 3
39964: PPUSH
39965: CALL_OW 259
39969: PUSH
39970: LD_INT 3
39972: MUL
39973: MUL
39974: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39975: LD_VAR 0 6
39979: PPUSH
39980: CALL_OW 264
39984: PUSH
39985: LD_INT 5
39987: PUSH
39988: LD_INT 6
39990: PUSH
39991: LD_INT 46
39993: PUSH
39994: LD_INT 44
39996: PUSH
39997: LD_INT 47
39999: PUSH
40000: LD_INT 45
40002: PUSH
40003: LD_INT 28
40005: PUSH
40006: LD_INT 7
40008: PUSH
40009: LD_INT 27
40011: PUSH
40012: LD_INT 29
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: IN
40027: PUSH
40028: LD_VAR 0 1
40032: PPUSH
40033: LD_INT 52
40035: PPUSH
40036: CALL_OW 321
40040: PUSH
40041: LD_INT 2
40043: EQUAL
40044: AND
40045: IFFALSE 40062
// bpoints := bpoints * 1.2 ;
40047: LD_ADDR_VAR 0 10
40051: PUSH
40052: LD_VAR 0 10
40056: PUSH
40057: LD_REAL  1.20000000000000E+0000
40060: MUL
40061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40062: LD_VAR 0 6
40066: PPUSH
40067: CALL_OW 264
40071: PUSH
40072: LD_INT 6
40074: PUSH
40075: LD_INT 46
40077: PUSH
40078: LD_INT 47
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: IN
40086: IFFALSE 40103
// bpoints := bpoints * 1.2 ;
40088: LD_ADDR_VAR 0 10
40092: PUSH
40093: LD_VAR 0 10
40097: PUSH
40098: LD_REAL  1.20000000000000E+0000
40101: MUL
40102: ST_TO_ADDR
// end ; unit_building :
40103: GO 40117
40105: LD_INT 3
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40116
40113: POP
// ; end ;
40114: GO 40117
40116: POP
// for j = 1 to 3 do
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: DOUBLE
40123: LD_INT 1
40125: DEC
40126: ST_TO_ADDR
40127: LD_INT 3
40129: PUSH
40130: FOR_TO
40131: IFFALSE 40184
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40133: LD_ADDR_VAR 0 5
40137: PUSH
40138: LD_VAR 0 5
40142: PPUSH
40143: LD_VAR 0 7
40147: PPUSH
40148: LD_VAR 0 5
40152: PUSH
40153: LD_VAR 0 7
40157: ARRAY
40158: PUSH
40159: LD_VAR 0 9
40163: PUSH
40164: LD_VAR 0 7
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 10
40174: MUL
40175: PLUS
40176: PPUSH
40177: CALL_OW 1
40181: ST_TO_ADDR
40182: GO 40130
40184: POP
40185: POP
// end ;
40186: GO 38663
40188: POP
40189: POP
// result := Replace ( result , 4 , tmp ) ;
40190: LD_ADDR_VAR 0 5
40194: PUSH
40195: LD_VAR 0 5
40199: PPUSH
40200: LD_INT 4
40202: PPUSH
40203: LD_VAR 0 8
40207: PPUSH
40208: CALL_OW 1
40212: ST_TO_ADDR
// end ;
40213: LD_VAR 0 5
40217: RET
// export function DangerAtRange ( unit , range ) ; begin
40218: LD_INT 0
40220: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 255
40235: PPUSH
40236: LD_VAR 0 1
40240: PPUSH
40241: CALL_OW 250
40245: PPUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 251
40255: PPUSH
40256: LD_VAR 0 2
40260: PPUSH
40261: CALL 38515 0 4
40265: ST_TO_ADDR
// end ;
40266: LD_VAR 0 3
40270: RET
// export function DangerInArea ( side , area ) ; begin
40271: LD_INT 0
40273: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40274: LD_ADDR_VAR 0 3
40278: PUSH
40279: LD_VAR 0 2
40283: PPUSH
40284: LD_INT 81
40286: PUSH
40287: LD_VAR 0 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PPUSH
40296: CALL_OW 70
40300: ST_TO_ADDR
// end ;
40301: LD_VAR 0 3
40305: RET
// export function IsExtension ( b ) ; begin
40306: LD_INT 0
40308: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40309: LD_ADDR_VAR 0 2
40313: PUSH
40314: LD_VAR 0 1
40318: PUSH
40319: LD_INT 23
40321: PUSH
40322: LD_INT 20
40324: PUSH
40325: LD_INT 22
40327: PUSH
40328: LD_INT 17
40330: PUSH
40331: LD_INT 24
40333: PUSH
40334: LD_INT 21
40336: PUSH
40337: LD_INT 19
40339: PUSH
40340: LD_INT 16
40342: PUSH
40343: LD_INT 25
40345: PUSH
40346: LD_INT 18
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: IN
40361: ST_TO_ADDR
// end ;
40362: LD_VAR 0 2
40366: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40367: LD_INT 0
40369: PPUSH
40370: PPUSH
40371: PPUSH
// result := [ ] ;
40372: LD_ADDR_VAR 0 4
40376: PUSH
40377: EMPTY
40378: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 2
40388: PPUSH
40389: LD_INT 21
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PPUSH
40399: CALL_OW 70
40403: ST_TO_ADDR
// if not tmp then
40404: LD_VAR 0 5
40408: NOT
40409: IFFALSE 40413
// exit ;
40411: GO 40477
// if checkLink then
40413: LD_VAR 0 3
40417: IFFALSE 40467
// begin for i in tmp do
40419: LD_ADDR_VAR 0 6
40423: PUSH
40424: LD_VAR 0 5
40428: PUSH
40429: FOR_IN
40430: IFFALSE 40465
// if GetBase ( i ) <> base then
40432: LD_VAR 0 6
40436: PPUSH
40437: CALL_OW 274
40441: PUSH
40442: LD_VAR 0 1
40446: NONEQUAL
40447: IFFALSE 40463
// ComLinkToBase ( base , i ) ;
40449: LD_VAR 0 1
40453: PPUSH
40454: LD_VAR 0 6
40458: PPUSH
40459: CALL_OW 169
40463: GO 40429
40465: POP
40466: POP
// end ; result := tmp ;
40467: LD_ADDR_VAR 0 4
40471: PUSH
40472: LD_VAR 0 5
40476: ST_TO_ADDR
// end ;
40477: LD_VAR 0 4
40481: RET
// export function ComComplete ( units , b ) ; var i ; begin
40482: LD_INT 0
40484: PPUSH
40485: PPUSH
// if not units then
40486: LD_VAR 0 1
40490: NOT
40491: IFFALSE 40495
// exit ;
40493: GO 40585
// for i in units do
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: LD_VAR 0 1
40504: PUSH
40505: FOR_IN
40506: IFFALSE 40583
// if BuildingStatus ( b ) = bs_build then
40508: LD_VAR 0 2
40512: PPUSH
40513: CALL_OW 461
40517: PUSH
40518: LD_INT 1
40520: EQUAL
40521: IFFALSE 40581
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40523: LD_VAR 0 4
40527: PPUSH
40528: LD_STRING h
40530: PUSH
40531: LD_VAR 0 2
40535: PPUSH
40536: CALL_OW 250
40540: PUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: CALL_OW 251
40550: PUSH
40551: LD_VAR 0 2
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: PPUSH
40577: CALL_OW 446
40581: GO 40505
40583: POP
40584: POP
// end ;
40585: LD_VAR 0 3
40589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40590: LD_INT 0
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40598: LD_VAR 0 1
40602: NOT
40603: PUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 263
40613: PUSH
40614: LD_INT 2
40616: NONEQUAL
40617: OR
40618: IFFALSE 40622
// exit ;
40620: GO 40938
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40622: LD_ADDR_VAR 0 6
40626: PUSH
40627: LD_INT 22
40629: PUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: CALL_OW 255
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 30
40649: PUSH
40650: LD_INT 36
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 34
40659: PUSH
40660: LD_INT 31
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PPUSH
40676: CALL_OW 69
40680: ST_TO_ADDR
// if not tmp then
40681: LD_VAR 0 6
40685: NOT
40686: IFFALSE 40690
// exit ;
40688: GO 40938
// result := [ ] ;
40690: LD_ADDR_VAR 0 2
40694: PUSH
40695: EMPTY
40696: ST_TO_ADDR
// for i in tmp do
40697: LD_ADDR_VAR 0 3
40701: PUSH
40702: LD_VAR 0 6
40706: PUSH
40707: FOR_IN
40708: IFFALSE 40779
// begin t := UnitsInside ( i ) ;
40710: LD_ADDR_VAR 0 4
40714: PUSH
40715: LD_VAR 0 3
40719: PPUSH
40720: CALL_OW 313
40724: ST_TO_ADDR
// if t then
40725: LD_VAR 0 4
40729: IFFALSE 40777
// for j in t do
40731: LD_ADDR_VAR 0 7
40735: PUSH
40736: LD_VAR 0 4
40740: PUSH
40741: FOR_IN
40742: IFFALSE 40775
// result := Replace ( result , result + 1 , j ) ;
40744: LD_ADDR_VAR 0 2
40748: PUSH
40749: LD_VAR 0 2
40753: PPUSH
40754: LD_VAR 0 2
40758: PUSH
40759: LD_INT 1
40761: PLUS
40762: PPUSH
40763: LD_VAR 0 7
40767: PPUSH
40768: CALL_OW 1
40772: ST_TO_ADDR
40773: GO 40741
40775: POP
40776: POP
// end ;
40777: GO 40707
40779: POP
40780: POP
// if not result then
40781: LD_VAR 0 2
40785: NOT
40786: IFFALSE 40790
// exit ;
40788: GO 40938
// mech := result [ 1 ] ;
40790: LD_ADDR_VAR 0 5
40794: PUSH
40795: LD_VAR 0 2
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: ST_TO_ADDR
// if result > 1 then
40804: LD_VAR 0 2
40808: PUSH
40809: LD_INT 1
40811: GREATER
40812: IFFALSE 40924
// begin for i = 2 to result do
40814: LD_ADDR_VAR 0 3
40818: PUSH
40819: DOUBLE
40820: LD_INT 2
40822: DEC
40823: ST_TO_ADDR
40824: LD_VAR 0 2
40828: PUSH
40829: FOR_TO
40830: IFFALSE 40922
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: LD_VAR 0 2
40841: PUSH
40842: LD_VAR 0 3
40846: ARRAY
40847: PPUSH
40848: LD_INT 3
40850: PPUSH
40851: CALL_OW 259
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 3
40865: ARRAY
40866: PPUSH
40867: CALL_OW 432
40871: MINUS
40872: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40873: LD_VAR 0 4
40877: PUSH
40878: LD_VAR 0 5
40882: PPUSH
40883: LD_INT 3
40885: PPUSH
40886: CALL_OW 259
40890: PUSH
40891: LD_VAR 0 5
40895: PPUSH
40896: CALL_OW 432
40900: MINUS
40901: GREATEREQUAL
40902: IFFALSE 40920
// mech := result [ i ] ;
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: LD_VAR 0 2
40913: PUSH
40914: LD_VAR 0 3
40918: ARRAY
40919: ST_TO_ADDR
// end ;
40920: GO 40829
40922: POP
40923: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_VAR 0 5
40933: PPUSH
40934: CALL_OW 135
// end ;
40938: LD_VAR 0 2
40942: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40943: LD_INT 0
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
// result := [ ] ;
40958: LD_ADDR_VAR 0 7
40962: PUSH
40963: EMPTY
40964: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 266
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: IN
40985: NOT
40986: IFFALSE 40990
// exit ;
40988: GO 42624
// if name then
40990: LD_VAR 0 3
40994: IFFALSE 41010
// SetBName ( base_dep , name ) ;
40996: LD_VAR 0 1
41000: PPUSH
41001: LD_VAR 0 3
41005: PPUSH
41006: CALL_OW 500
// base := GetBase ( base_dep ) ;
41010: LD_ADDR_VAR 0 15
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 274
41024: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41025: LD_ADDR_VAR 0 16
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 255
41039: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41040: LD_ADDR_VAR 0 17
41044: PUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 248
41054: ST_TO_ADDR
// if sources then
41055: LD_VAR 0 5
41059: IFFALSE 41106
// for i = 1 to 3 do
41061: LD_ADDR_VAR 0 8
41065: PUSH
41066: DOUBLE
41067: LD_INT 1
41069: DEC
41070: ST_TO_ADDR
41071: LD_INT 3
41073: PUSH
41074: FOR_TO
41075: IFFALSE 41104
// AddResourceType ( base , i , sources [ i ] ) ;
41077: LD_VAR 0 15
41081: PPUSH
41082: LD_VAR 0 8
41086: PPUSH
41087: LD_VAR 0 5
41091: PUSH
41092: LD_VAR 0 8
41096: ARRAY
41097: PPUSH
41098: CALL_OW 276
41102: GO 41074
41104: POP
41105: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41106: LD_ADDR_VAR 0 18
41110: PUSH
41111: LD_VAR 0 15
41115: PPUSH
41116: LD_VAR 0 2
41120: PPUSH
41121: LD_INT 1
41123: PPUSH
41124: CALL 40367 0 3
41128: ST_TO_ADDR
// InitHc ;
41129: CALL_OW 19
// InitUc ;
41133: CALL_OW 18
// uc_side := side ;
41137: LD_ADDR_OWVAR 20
41141: PUSH
41142: LD_VAR 0 16
41146: ST_TO_ADDR
// uc_nation := nation ;
41147: LD_ADDR_OWVAR 21
41151: PUSH
41152: LD_VAR 0 17
41156: ST_TO_ADDR
// if buildings then
41157: LD_VAR 0 18
41161: IFFALSE 42483
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41163: LD_ADDR_VAR 0 19
41167: PUSH
41168: LD_VAR 0 18
41172: PPUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 30
41178: PUSH
41179: LD_INT 29
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 30
41188: PUSH
41189: LD_INT 30
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: PPUSH
41201: CALL_OW 72
41205: ST_TO_ADDR
// if tmp then
41206: LD_VAR 0 19
41210: IFFALSE 41258
// for i in tmp do
41212: LD_ADDR_VAR 0 8
41216: PUSH
41217: LD_VAR 0 19
41221: PUSH
41222: FOR_IN
41223: IFFALSE 41256
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41225: LD_VAR 0 8
41229: PPUSH
41230: CALL_OW 250
41234: PPUSH
41235: LD_VAR 0 8
41239: PPUSH
41240: CALL_OW 251
41244: PPUSH
41245: LD_VAR 0 16
41249: PPUSH
41250: CALL_OW 441
41254: GO 41222
41256: POP
41257: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41258: LD_VAR 0 18
41262: PPUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 30
41268: PUSH
41269: LD_INT 32
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 30
41278: PUSH
41279: LD_INT 33
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 72
41295: IFFALSE 41383
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41297: LD_ADDR_VAR 0 8
41301: PUSH
41302: LD_VAR 0 18
41306: PPUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 30
41312: PUSH
41313: LD_INT 32
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 30
41322: PUSH
41323: LD_INT 33
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: PPUSH
41335: CALL_OW 72
41339: PUSH
41340: FOR_IN
41341: IFFALSE 41381
// begin if not GetBWeapon ( i ) then
41343: LD_VAR 0 8
41347: PPUSH
41348: CALL_OW 269
41352: NOT
41353: IFFALSE 41379
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41355: LD_VAR 0 8
41359: PPUSH
41360: LD_VAR 0 8
41364: PPUSH
41365: LD_VAR 0 2
41369: PPUSH
41370: CALL 42629 0 2
41374: PPUSH
41375: CALL_OW 431
// end ;
41379: GO 41340
41381: POP
41382: POP
// end ; for i = 1 to personel do
41383: LD_ADDR_VAR 0 8
41387: PUSH
41388: DOUBLE
41389: LD_INT 1
41391: DEC
41392: ST_TO_ADDR
41393: LD_VAR 0 6
41397: PUSH
41398: FOR_TO
41399: IFFALSE 42463
// begin if i > 4 then
41401: LD_VAR 0 8
41405: PUSH
41406: LD_INT 4
41408: GREATER
41409: IFFALSE 41413
// break ;
41411: GO 42463
// case i of 1 :
41413: LD_VAR 0 8
41417: PUSH
41418: LD_INT 1
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 41506
41426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41427: LD_ADDR_VAR 0 12
41431: PUSH
41432: LD_VAR 0 18
41436: PPUSH
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 16
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 58
41451: PUSH
41452: EMPTY
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: LD_INT 30
41460: PUSH
41461: LD_INT 32
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 30
41470: PUSH
41471: LD_INT 4
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 30
41480: PUSH
41481: LD_INT 5
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: PPUSH
41499: CALL_OW 72
41503: ST_TO_ADDR
41504: GO 41728
41506: LD_INT 2
41508: DOUBLE
41509: EQUAL
41510: IFTRUE 41514
41512: GO 41576
41514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41515: LD_ADDR_VAR 0 12
41519: PUSH
41520: LD_VAR 0 18
41524: PPUSH
41525: LD_INT 22
41527: PUSH
41528: LD_VAR 0 16
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PPUSH
41569: CALL_OW 72
41573: ST_TO_ADDR
41574: GO 41728
41576: LD_INT 3
41578: DOUBLE
41579: EQUAL
41580: IFTRUE 41584
41582: GO 41646
41584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41585: LD_ADDR_VAR 0 12
41589: PUSH
41590: LD_VAR 0 18
41594: PPUSH
41595: LD_INT 22
41597: PUSH
41598: LD_VAR 0 16
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: LD_INT 30
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 30
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PPUSH
41639: CALL_OW 72
41643: ST_TO_ADDR
41644: GO 41728
41646: LD_INT 4
41648: DOUBLE
41649: EQUAL
41650: IFTRUE 41654
41652: GO 41727
41654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41655: LD_ADDR_VAR 0 12
41659: PUSH
41660: LD_VAR 0 18
41664: PPUSH
41665: LD_INT 22
41667: PUSH
41668: LD_VAR 0 16
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 30
41682: PUSH
41683: LD_INT 6
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 30
41692: PUSH
41693: LD_INT 7
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 30
41702: PUSH
41703: LD_INT 8
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PPUSH
41720: CALL_OW 72
41724: ST_TO_ADDR
41725: GO 41728
41727: POP
// if i = 1 then
41728: LD_VAR 0 8
41732: PUSH
41733: LD_INT 1
41735: EQUAL
41736: IFFALSE 41847
// begin tmp := [ ] ;
41738: LD_ADDR_VAR 0 19
41742: PUSH
41743: EMPTY
41744: ST_TO_ADDR
// for j in f do
41745: LD_ADDR_VAR 0 9
41749: PUSH
41750: LD_VAR 0 12
41754: PUSH
41755: FOR_IN
41756: IFFALSE 41829
// if GetBType ( j ) = b_bunker then
41758: LD_VAR 0 9
41762: PPUSH
41763: CALL_OW 266
41767: PUSH
41768: LD_INT 32
41770: EQUAL
41771: IFFALSE 41798
// tmp := Insert ( tmp , 1 , j ) else
41773: LD_ADDR_VAR 0 19
41777: PUSH
41778: LD_VAR 0 19
41782: PPUSH
41783: LD_INT 1
41785: PPUSH
41786: LD_VAR 0 9
41790: PPUSH
41791: CALL_OW 2
41795: ST_TO_ADDR
41796: GO 41827
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41798: LD_ADDR_VAR 0 19
41802: PUSH
41803: LD_VAR 0 19
41807: PPUSH
41808: LD_VAR 0 19
41812: PUSH
41813: LD_INT 1
41815: PLUS
41816: PPUSH
41817: LD_VAR 0 9
41821: PPUSH
41822: CALL_OW 2
41826: ST_TO_ADDR
41827: GO 41755
41829: POP
41830: POP
// if tmp then
41831: LD_VAR 0 19
41835: IFFALSE 41847
// f := tmp ;
41837: LD_ADDR_VAR 0 12
41841: PUSH
41842: LD_VAR 0 19
41846: ST_TO_ADDR
// end ; x := personel [ i ] ;
41847: LD_ADDR_VAR 0 13
41851: PUSH
41852: LD_VAR 0 6
41856: PUSH
41857: LD_VAR 0 8
41861: ARRAY
41862: ST_TO_ADDR
// if x = - 1 then
41863: LD_VAR 0 13
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: EQUAL
41872: IFFALSE 42081
// begin for j in f do
41874: LD_ADDR_VAR 0 9
41878: PUSH
41879: LD_VAR 0 12
41883: PUSH
41884: FOR_IN
41885: IFFALSE 42077
// repeat InitHc ;
41887: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41891: LD_VAR 0 9
41895: PPUSH
41896: CALL_OW 266
41900: PUSH
41901: LD_INT 5
41903: EQUAL
41904: IFFALSE 41974
// begin if UnitsInside ( j ) < 3 then
41906: LD_VAR 0 9
41910: PPUSH
41911: CALL_OW 313
41915: PUSH
41916: LD_INT 3
41918: LESS
41919: IFFALSE 41955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41921: LD_INT 0
41923: PPUSH
41924: LD_INT 5
41926: PUSH
41927: LD_INT 8
41929: PUSH
41930: LD_INT 9
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: PUSH
41938: LD_VAR 0 17
41942: ARRAY
41943: PPUSH
41944: LD_VAR 0 4
41948: PPUSH
41949: CALL_OW 380
41953: GO 41972
// PrepareHuman ( false , i , skill ) ;
41955: LD_INT 0
41957: PPUSH
41958: LD_VAR 0 8
41962: PPUSH
41963: LD_VAR 0 4
41967: PPUSH
41968: CALL_OW 380
// end else
41972: GO 41991
// PrepareHuman ( false , i , skill ) ;
41974: LD_INT 0
41976: PPUSH
41977: LD_VAR 0 8
41981: PPUSH
41982: LD_VAR 0 4
41986: PPUSH
41987: CALL_OW 380
// un := CreateHuman ;
41991: LD_ADDR_VAR 0 14
41995: PUSH
41996: CALL_OW 44
42000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42001: LD_ADDR_VAR 0 7
42005: PUSH
42006: LD_VAR 0 7
42010: PPUSH
42011: LD_INT 1
42013: PPUSH
42014: LD_VAR 0 14
42018: PPUSH
42019: CALL_OW 2
42023: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42024: LD_VAR 0 14
42028: PPUSH
42029: LD_VAR 0 9
42033: PPUSH
42034: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42038: LD_VAR 0 9
42042: PPUSH
42043: CALL_OW 313
42047: PUSH
42048: LD_INT 6
42050: EQUAL
42051: PUSH
42052: LD_VAR 0 9
42056: PPUSH
42057: CALL_OW 266
42061: PUSH
42062: LD_INT 32
42064: PUSH
42065: LD_INT 31
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: IN
42072: OR
42073: IFFALSE 41887
42075: GO 41884
42077: POP
42078: POP
// end else
42079: GO 42461
// for j = 1 to x do
42081: LD_ADDR_VAR 0 9
42085: PUSH
42086: DOUBLE
42087: LD_INT 1
42089: DEC
42090: ST_TO_ADDR
42091: LD_VAR 0 13
42095: PUSH
42096: FOR_TO
42097: IFFALSE 42459
// begin InitHc ;
42099: CALL_OW 19
// if not f then
42103: LD_VAR 0 12
42107: NOT
42108: IFFALSE 42197
// begin PrepareHuman ( false , i , skill ) ;
42110: LD_INT 0
42112: PPUSH
42113: LD_VAR 0 8
42117: PPUSH
42118: LD_VAR 0 4
42122: PPUSH
42123: CALL_OW 380
// un := CreateHuman ;
42127: LD_ADDR_VAR 0 14
42131: PUSH
42132: CALL_OW 44
42136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42137: LD_ADDR_VAR 0 7
42141: PUSH
42142: LD_VAR 0 7
42146: PPUSH
42147: LD_INT 1
42149: PPUSH
42150: LD_VAR 0 14
42154: PPUSH
42155: CALL_OW 2
42159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42160: LD_VAR 0 14
42164: PPUSH
42165: LD_VAR 0 1
42169: PPUSH
42170: CALL_OW 250
42174: PPUSH
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 251
42184: PPUSH
42185: LD_INT 10
42187: PPUSH
42188: LD_INT 0
42190: PPUSH
42191: CALL_OW 50
// continue ;
42195: GO 42096
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42197: LD_VAR 0 12
42201: PUSH
42202: LD_INT 1
42204: ARRAY
42205: PPUSH
42206: CALL_OW 313
42210: PUSH
42211: LD_VAR 0 12
42215: PUSH
42216: LD_INT 1
42218: ARRAY
42219: PPUSH
42220: CALL_OW 266
42224: PUSH
42225: LD_INT 32
42227: PUSH
42228: LD_INT 31
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: IN
42235: AND
42236: PUSH
42237: LD_VAR 0 12
42241: PUSH
42242: LD_INT 1
42244: ARRAY
42245: PPUSH
42246: CALL_OW 313
42250: PUSH
42251: LD_INT 6
42253: EQUAL
42254: OR
42255: IFFALSE 42275
// f := Delete ( f , 1 ) ;
42257: LD_ADDR_VAR 0 12
42261: PUSH
42262: LD_VAR 0 12
42266: PPUSH
42267: LD_INT 1
42269: PPUSH
42270: CALL_OW 3
42274: ST_TO_ADDR
// if not f then
42275: LD_VAR 0 12
42279: NOT
42280: IFFALSE 42298
// begin x := x + 2 ;
42282: LD_ADDR_VAR 0 13
42286: PUSH
42287: LD_VAR 0 13
42291: PUSH
42292: LD_INT 2
42294: PLUS
42295: ST_TO_ADDR
// continue ;
42296: GO 42096
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42298: LD_VAR 0 12
42302: PUSH
42303: LD_INT 1
42305: ARRAY
42306: PPUSH
42307: CALL_OW 266
42311: PUSH
42312: LD_INT 5
42314: EQUAL
42315: IFFALSE 42389
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42317: LD_VAR 0 12
42321: PUSH
42322: LD_INT 1
42324: ARRAY
42325: PPUSH
42326: CALL_OW 313
42330: PUSH
42331: LD_INT 3
42333: LESS
42334: IFFALSE 42370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42336: LD_INT 0
42338: PPUSH
42339: LD_INT 5
42341: PUSH
42342: LD_INT 8
42344: PUSH
42345: LD_INT 9
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: LD_VAR 0 17
42357: ARRAY
42358: PPUSH
42359: LD_VAR 0 4
42363: PPUSH
42364: CALL_OW 380
42368: GO 42387
// PrepareHuman ( false , i , skill ) ;
42370: LD_INT 0
42372: PPUSH
42373: LD_VAR 0 8
42377: PPUSH
42378: LD_VAR 0 4
42382: PPUSH
42383: CALL_OW 380
// end else
42387: GO 42406
// PrepareHuman ( false , i , skill ) ;
42389: LD_INT 0
42391: PPUSH
42392: LD_VAR 0 8
42396: PPUSH
42397: LD_VAR 0 4
42401: PPUSH
42402: CALL_OW 380
// un := CreateHuman ;
42406: LD_ADDR_VAR 0 14
42410: PUSH
42411: CALL_OW 44
42415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42416: LD_ADDR_VAR 0 7
42420: PUSH
42421: LD_VAR 0 7
42425: PPUSH
42426: LD_INT 1
42428: PPUSH
42429: LD_VAR 0 14
42433: PPUSH
42434: CALL_OW 2
42438: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42439: LD_VAR 0 14
42443: PPUSH
42444: LD_VAR 0 12
42448: PUSH
42449: LD_INT 1
42451: ARRAY
42452: PPUSH
42453: CALL_OW 52
// end ;
42457: GO 42096
42459: POP
42460: POP
// end ;
42461: GO 41398
42463: POP
42464: POP
// result := result ^ buildings ;
42465: LD_ADDR_VAR 0 7
42469: PUSH
42470: LD_VAR 0 7
42474: PUSH
42475: LD_VAR 0 18
42479: ADD
42480: ST_TO_ADDR
// end else
42481: GO 42624
// begin for i = 1 to personel do
42483: LD_ADDR_VAR 0 8
42487: PUSH
42488: DOUBLE
42489: LD_INT 1
42491: DEC
42492: ST_TO_ADDR
42493: LD_VAR 0 6
42497: PUSH
42498: FOR_TO
42499: IFFALSE 42622
// begin if i > 4 then
42501: LD_VAR 0 8
42505: PUSH
42506: LD_INT 4
42508: GREATER
42509: IFFALSE 42513
// break ;
42511: GO 42622
// x := personel [ i ] ;
42513: LD_ADDR_VAR 0 13
42517: PUSH
42518: LD_VAR 0 6
42522: PUSH
42523: LD_VAR 0 8
42527: ARRAY
42528: ST_TO_ADDR
// if x = - 1 then
42529: LD_VAR 0 13
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: EQUAL
42538: IFFALSE 42542
// continue ;
42540: GO 42498
// PrepareHuman ( false , i , skill ) ;
42542: LD_INT 0
42544: PPUSH
42545: LD_VAR 0 8
42549: PPUSH
42550: LD_VAR 0 4
42554: PPUSH
42555: CALL_OW 380
// un := CreateHuman ;
42559: LD_ADDR_VAR 0 14
42563: PUSH
42564: CALL_OW 44
42568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42569: LD_VAR 0 14
42573: PPUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: CALL_OW 250
42583: PPUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 251
42593: PPUSH
42594: LD_INT 10
42596: PPUSH
42597: LD_INT 0
42599: PPUSH
42600: CALL_OW 50
// result := result ^ un ;
42604: LD_ADDR_VAR 0 7
42608: PUSH
42609: LD_VAR 0 7
42613: PUSH
42614: LD_VAR 0 14
42618: ADD
42619: ST_TO_ADDR
// end ;
42620: GO 42498
42622: POP
42623: POP
// end ; end ;
42624: LD_VAR 0 7
42628: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42629: LD_INT 0
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
// result := false ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 0
42654: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42655: LD_VAR 0 1
42659: NOT
42660: PUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: CALL_OW 266
42670: PUSH
42671: LD_INT 32
42673: PUSH
42674: LD_INT 33
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: IN
42681: NOT
42682: OR
42683: IFFALSE 42687
// exit ;
42685: GO 43796
// nat := GetNation ( tower ) ;
42687: LD_ADDR_VAR 0 12
42691: PUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL_OW 248
42701: ST_TO_ADDR
// side := GetSide ( tower ) ;
42702: LD_ADDR_VAR 0 16
42706: PUSH
42707: LD_VAR 0 1
42711: PPUSH
42712: CALL_OW 255
42716: ST_TO_ADDR
// x := GetX ( tower ) ;
42717: LD_ADDR_VAR 0 10
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 250
42731: ST_TO_ADDR
// y := GetY ( tower ) ;
42732: LD_ADDR_VAR 0 11
42736: PUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: CALL_OW 251
42746: ST_TO_ADDR
// if not x or not y then
42747: LD_VAR 0 10
42751: NOT
42752: PUSH
42753: LD_VAR 0 11
42757: NOT
42758: OR
42759: IFFALSE 42763
// exit ;
42761: GO 43796
// weapon := 0 ;
42763: LD_ADDR_VAR 0 18
42767: PUSH
42768: LD_INT 0
42770: ST_TO_ADDR
// fac_list := [ ] ;
42771: LD_ADDR_VAR 0 17
42775: PUSH
42776: EMPTY
42777: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42778: LD_ADDR_VAR 0 6
42782: PUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 274
42792: PPUSH
42793: LD_VAR 0 2
42797: PPUSH
42798: LD_INT 0
42800: PPUSH
42801: CALL 40367 0 3
42805: PPUSH
42806: LD_INT 30
42808: PUSH
42809: LD_INT 3
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PPUSH
42816: CALL_OW 72
42820: ST_TO_ADDR
// if not factories then
42821: LD_VAR 0 6
42825: NOT
42826: IFFALSE 42830
// exit ;
42828: GO 43796
// for i in factories do
42830: LD_ADDR_VAR 0 8
42834: PUSH
42835: LD_VAR 0 6
42839: PUSH
42840: FOR_IN
42841: IFFALSE 42866
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42843: LD_ADDR_VAR 0 17
42847: PUSH
42848: LD_VAR 0 17
42852: PUSH
42853: LD_VAR 0 8
42857: PPUSH
42858: CALL_OW 478
42862: UNION
42863: ST_TO_ADDR
42864: GO 42840
42866: POP
42867: POP
// if not fac_list then
42868: LD_VAR 0 17
42872: NOT
42873: IFFALSE 42877
// exit ;
42875: GO 43796
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42877: LD_ADDR_VAR 0 5
42881: PUSH
42882: LD_INT 4
42884: PUSH
42885: LD_INT 5
42887: PUSH
42888: LD_INT 9
42890: PUSH
42891: LD_INT 10
42893: PUSH
42894: LD_INT 6
42896: PUSH
42897: LD_INT 7
42899: PUSH
42900: LD_INT 11
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 27
42914: PUSH
42915: LD_INT 28
42917: PUSH
42918: LD_INT 26
42920: PUSH
42921: LD_INT 30
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 43
42932: PUSH
42933: LD_INT 44
42935: PUSH
42936: LD_INT 46
42938: PUSH
42939: LD_INT 45
42941: PUSH
42942: LD_INT 47
42944: PUSH
42945: LD_INT 49
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: PUSH
42961: LD_VAR 0 12
42965: ARRAY
42966: ST_TO_ADDR
// list := list isect fac_list ;
42967: LD_ADDR_VAR 0 5
42971: PUSH
42972: LD_VAR 0 5
42976: PUSH
42977: LD_VAR 0 17
42981: ISECT
42982: ST_TO_ADDR
// if not list then
42983: LD_VAR 0 5
42987: NOT
42988: IFFALSE 42992
// exit ;
42990: GO 43796
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42992: LD_VAR 0 12
42996: PUSH
42997: LD_INT 3
42999: EQUAL
43000: PUSH
43001: LD_INT 49
43003: PUSH
43004: LD_VAR 0 5
43008: IN
43009: AND
43010: PUSH
43011: LD_INT 31
43013: PPUSH
43014: LD_VAR 0 16
43018: PPUSH
43019: CALL_OW 321
43023: PUSH
43024: LD_INT 2
43026: EQUAL
43027: AND
43028: IFFALSE 43088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43030: LD_INT 22
43032: PUSH
43033: LD_VAR 0 16
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 35
43044: PUSH
43045: LD_INT 49
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 91
43054: PUSH
43055: LD_VAR 0 1
43059: PUSH
43060: LD_INT 10
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: PPUSH
43073: CALL_OW 69
43077: NOT
43078: IFFALSE 43088
// weapon := ru_time_lapser ;
43080: LD_ADDR_VAR 0 18
43084: PUSH
43085: LD_INT 49
43087: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43088: LD_VAR 0 12
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: IN
43103: PUSH
43104: LD_INT 11
43106: PUSH
43107: LD_VAR 0 5
43111: IN
43112: PUSH
43113: LD_INT 30
43115: PUSH
43116: LD_VAR 0 5
43120: IN
43121: OR
43122: AND
43123: PUSH
43124: LD_INT 6
43126: PPUSH
43127: LD_VAR 0 16
43131: PPUSH
43132: CALL_OW 321
43136: PUSH
43137: LD_INT 2
43139: EQUAL
43140: AND
43141: IFFALSE 43306
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43143: LD_INT 22
43145: PUSH
43146: LD_VAR 0 16
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 35
43160: PUSH
43161: LD_INT 11
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 35
43170: PUSH
43171: LD_INT 30
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 91
43185: PUSH
43186: LD_VAR 0 1
43190: PUSH
43191: LD_INT 18
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: PPUSH
43204: CALL_OW 69
43208: NOT
43209: PUSH
43210: LD_INT 22
43212: PUSH
43213: LD_VAR 0 16
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 30
43227: PUSH
43228: LD_INT 32
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 30
43237: PUSH
43238: LD_INT 33
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 91
43252: PUSH
43253: LD_VAR 0 1
43257: PUSH
43258: LD_INT 12
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: PPUSH
43274: CALL_OW 69
43278: PUSH
43279: LD_INT 2
43281: GREATER
43282: AND
43283: IFFALSE 43306
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43285: LD_ADDR_VAR 0 18
43289: PUSH
43290: LD_INT 11
43292: PUSH
43293: LD_INT 30
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_VAR 0 12
43304: ARRAY
43305: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43306: LD_VAR 0 18
43310: NOT
43311: PUSH
43312: LD_INT 40
43314: PPUSH
43315: LD_VAR 0 16
43319: PPUSH
43320: CALL_OW 321
43324: PUSH
43325: LD_INT 2
43327: EQUAL
43328: AND
43329: PUSH
43330: LD_INT 7
43332: PUSH
43333: LD_VAR 0 5
43337: IN
43338: PUSH
43339: LD_INT 28
43341: PUSH
43342: LD_VAR 0 5
43346: IN
43347: OR
43348: PUSH
43349: LD_INT 45
43351: PUSH
43352: LD_VAR 0 5
43356: IN
43357: OR
43358: AND
43359: IFFALSE 43613
// begin hex := GetHexInfo ( x , y ) ;
43361: LD_ADDR_VAR 0 4
43365: PUSH
43366: LD_VAR 0 10
43370: PPUSH
43371: LD_VAR 0 11
43375: PPUSH
43376: CALL_OW 546
43380: ST_TO_ADDR
// if hex [ 1 ] then
43381: LD_VAR 0 4
43385: PUSH
43386: LD_INT 1
43388: ARRAY
43389: IFFALSE 43393
// exit ;
43391: GO 43796
// height := hex [ 2 ] ;
43393: LD_ADDR_VAR 0 15
43397: PUSH
43398: LD_VAR 0 4
43402: PUSH
43403: LD_INT 2
43405: ARRAY
43406: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43407: LD_ADDR_VAR 0 14
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: LD_INT 5
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// for i in tmp do
43430: LD_ADDR_VAR 0 8
43434: PUSH
43435: LD_VAR 0 14
43439: PUSH
43440: FOR_IN
43441: IFFALSE 43611
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43443: LD_ADDR_VAR 0 9
43447: PUSH
43448: LD_VAR 0 10
43452: PPUSH
43453: LD_VAR 0 8
43457: PPUSH
43458: LD_INT 5
43460: PPUSH
43461: CALL_OW 272
43465: PUSH
43466: LD_VAR 0 11
43470: PPUSH
43471: LD_VAR 0 8
43475: PPUSH
43476: LD_INT 5
43478: PPUSH
43479: CALL_OW 273
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43488: LD_VAR 0 9
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PPUSH
43497: LD_VAR 0 9
43501: PUSH
43502: LD_INT 2
43504: ARRAY
43505: PPUSH
43506: CALL_OW 488
43510: IFFALSE 43609
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43512: LD_ADDR_VAR 0 4
43516: PUSH
43517: LD_VAR 0 9
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: PPUSH
43526: LD_VAR 0 9
43530: PUSH
43531: LD_INT 2
43533: ARRAY
43534: PPUSH
43535: CALL_OW 546
43539: ST_TO_ADDR
// if hex [ 1 ] then
43540: LD_VAR 0 4
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: IFFALSE 43552
// continue ;
43550: GO 43440
// h := hex [ 2 ] ;
43552: LD_ADDR_VAR 0 13
43556: PUSH
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 2
43564: ARRAY
43565: ST_TO_ADDR
// if h + 7 < height then
43566: LD_VAR 0 13
43570: PUSH
43571: LD_INT 7
43573: PLUS
43574: PUSH
43575: LD_VAR 0 15
43579: LESS
43580: IFFALSE 43609
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43582: LD_ADDR_VAR 0 18
43586: PUSH
43587: LD_INT 7
43589: PUSH
43590: LD_INT 28
43592: PUSH
43593: LD_INT 45
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: PUSH
43601: LD_VAR 0 12
43605: ARRAY
43606: ST_TO_ADDR
// break ;
43607: GO 43611
// end ; end ; end ;
43609: GO 43440
43611: POP
43612: POP
// end ; if not weapon then
43613: LD_VAR 0 18
43617: NOT
43618: IFFALSE 43678
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_VAR 0 5
43629: PUSH
43630: LD_INT 11
43632: PUSH
43633: LD_INT 30
43635: PUSH
43636: LD_INT 49
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: DIFF
43644: ST_TO_ADDR
// if not list then
43645: LD_VAR 0 5
43649: NOT
43650: IFFALSE 43654
// exit ;
43652: GO 43796
// weapon := list [ rand ( 1 , list ) ] ;
43654: LD_ADDR_VAR 0 18
43658: PUSH
43659: LD_VAR 0 5
43663: PUSH
43664: LD_INT 1
43666: PPUSH
43667: LD_VAR 0 5
43671: PPUSH
43672: CALL_OW 12
43676: ARRAY
43677: ST_TO_ADDR
// end ; if weapon then
43678: LD_VAR 0 18
43682: IFFALSE 43796
// begin tmp := CostOfWeapon ( weapon ) ;
43684: LD_ADDR_VAR 0 14
43688: PUSH
43689: LD_VAR 0 18
43693: PPUSH
43694: CALL_OW 451
43698: ST_TO_ADDR
// j := GetBase ( tower ) ;
43699: LD_ADDR_VAR 0 9
43703: PUSH
43704: LD_VAR 0 1
43708: PPUSH
43709: CALL_OW 274
43713: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43714: LD_VAR 0 9
43718: PPUSH
43719: LD_INT 1
43721: PPUSH
43722: CALL_OW 275
43726: PUSH
43727: LD_VAR 0 14
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: GREATEREQUAL
43736: PUSH
43737: LD_VAR 0 9
43741: PPUSH
43742: LD_INT 2
43744: PPUSH
43745: CALL_OW 275
43749: PUSH
43750: LD_VAR 0 14
43754: PUSH
43755: LD_INT 2
43757: ARRAY
43758: GREATEREQUAL
43759: AND
43760: PUSH
43761: LD_VAR 0 9
43765: PPUSH
43766: LD_INT 3
43768: PPUSH
43769: CALL_OW 275
43773: PUSH
43774: LD_VAR 0 14
43778: PUSH
43779: LD_INT 3
43781: ARRAY
43782: GREATEREQUAL
43783: AND
43784: IFFALSE 43796
// result := weapon ;
43786: LD_ADDR_VAR 0 3
43790: PUSH
43791: LD_VAR 0 18
43795: ST_TO_ADDR
// end ; end ;
43796: LD_VAR 0 3
43800: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43801: LD_INT 0
43803: PPUSH
43804: PPUSH
// result := true ;
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: LD_INT 1
43812: ST_TO_ADDR
// if array1 = array2 then
43813: LD_VAR 0 1
43817: PUSH
43818: LD_VAR 0 2
43822: EQUAL
43823: IFFALSE 43883
// begin for i = 1 to array1 do
43825: LD_ADDR_VAR 0 4
43829: PUSH
43830: DOUBLE
43831: LD_INT 1
43833: DEC
43834: ST_TO_ADDR
43835: LD_VAR 0 1
43839: PUSH
43840: FOR_TO
43841: IFFALSE 43879
// if array1 [ i ] <> array2 [ i ] then
43843: LD_VAR 0 1
43847: PUSH
43848: LD_VAR 0 4
43852: ARRAY
43853: PUSH
43854: LD_VAR 0 2
43858: PUSH
43859: LD_VAR 0 4
43863: ARRAY
43864: NONEQUAL
43865: IFFALSE 43877
// begin result := false ;
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_INT 0
43874: ST_TO_ADDR
// break ;
43875: GO 43879
// end ;
43877: GO 43840
43879: POP
43880: POP
// end else
43881: GO 43891
// result := false ;
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 0
43890: ST_TO_ADDR
// end ;
43891: LD_VAR 0 3
43895: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43896: LD_INT 0
43898: PPUSH
43899: PPUSH
// if not array1 or not array2 then
43900: LD_VAR 0 1
43904: NOT
43905: PUSH
43906: LD_VAR 0 2
43910: NOT
43911: OR
43912: IFFALSE 43916
// exit ;
43914: GO 43980
// result := true ;
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
// for i = 1 to array1 do
43924: LD_ADDR_VAR 0 4
43928: PUSH
43929: DOUBLE
43930: LD_INT 1
43932: DEC
43933: ST_TO_ADDR
43934: LD_VAR 0 1
43938: PUSH
43939: FOR_TO
43940: IFFALSE 43978
// if array1 [ i ] <> array2 [ i ] then
43942: LD_VAR 0 1
43946: PUSH
43947: LD_VAR 0 4
43951: ARRAY
43952: PUSH
43953: LD_VAR 0 2
43957: PUSH
43958: LD_VAR 0 4
43962: ARRAY
43963: NONEQUAL
43964: IFFALSE 43976
// begin result := false ;
43966: LD_ADDR_VAR 0 3
43970: PUSH
43971: LD_INT 0
43973: ST_TO_ADDR
// break ;
43974: GO 43978
// end ;
43976: GO 43939
43978: POP
43979: POP
// end ;
43980: LD_VAR 0 3
43984: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43985: LD_INT 0
43987: PPUSH
43988: PPUSH
43989: PPUSH
// pom := GetBase ( fac ) ;
43990: LD_ADDR_VAR 0 5
43994: PUSH
43995: LD_VAR 0 1
43999: PPUSH
44000: CALL_OW 274
44004: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44005: LD_ADDR_VAR 0 4
44009: PUSH
44010: LD_VAR 0 2
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: PPUSH
44019: LD_VAR 0 2
44023: PUSH
44024: LD_INT 2
44026: ARRAY
44027: PPUSH
44028: LD_VAR 0 2
44032: PUSH
44033: LD_INT 3
44035: ARRAY
44036: PPUSH
44037: LD_VAR 0 2
44041: PUSH
44042: LD_INT 4
44044: ARRAY
44045: PPUSH
44046: CALL_OW 449
44050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44051: LD_ADDR_VAR 0 3
44055: PUSH
44056: LD_VAR 0 5
44060: PPUSH
44061: LD_INT 1
44063: PPUSH
44064: CALL_OW 275
44068: PUSH
44069: LD_VAR 0 4
44073: PUSH
44074: LD_INT 1
44076: ARRAY
44077: GREATEREQUAL
44078: PUSH
44079: LD_VAR 0 5
44083: PPUSH
44084: LD_INT 2
44086: PPUSH
44087: CALL_OW 275
44091: PUSH
44092: LD_VAR 0 4
44096: PUSH
44097: LD_INT 2
44099: ARRAY
44100: GREATEREQUAL
44101: AND
44102: PUSH
44103: LD_VAR 0 5
44107: PPUSH
44108: LD_INT 3
44110: PPUSH
44111: CALL_OW 275
44115: PUSH
44116: LD_VAR 0 4
44120: PUSH
44121: LD_INT 3
44123: ARRAY
44124: GREATEREQUAL
44125: AND
44126: ST_TO_ADDR
// end ;
44127: LD_VAR 0 3
44131: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44132: LD_INT 0
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
// pom := GetBase ( building ) ;
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 274
44152: ST_TO_ADDR
// if not pom then
44153: LD_VAR 0 3
44157: NOT
44158: IFFALSE 44162
// exit ;
44160: GO 44332
// btype := GetBType ( building ) ;
44162: LD_ADDR_VAR 0 5
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 266
44176: ST_TO_ADDR
// if btype = b_armoury then
44177: LD_VAR 0 5
44181: PUSH
44182: LD_INT 4
44184: EQUAL
44185: IFFALSE 44195
// btype := b_barracks ;
44187: LD_ADDR_VAR 0 5
44191: PUSH
44192: LD_INT 5
44194: ST_TO_ADDR
// if btype = b_depot then
44195: LD_VAR 0 5
44199: PUSH
44200: LD_INT 0
44202: EQUAL
44203: IFFALSE 44213
// btype := b_warehouse ;
44205: LD_ADDR_VAR 0 5
44209: PUSH
44210: LD_INT 1
44212: ST_TO_ADDR
// if btype = b_workshop then
44213: LD_VAR 0 5
44217: PUSH
44218: LD_INT 2
44220: EQUAL
44221: IFFALSE 44231
// btype := b_factory ;
44223: LD_ADDR_VAR 0 5
44227: PUSH
44228: LD_INT 3
44230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44231: LD_ADDR_VAR 0 4
44235: PUSH
44236: LD_VAR 0 5
44240: PPUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 248
44250: PPUSH
44251: CALL_OW 450
44255: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44256: LD_ADDR_VAR 0 2
44260: PUSH
44261: LD_VAR 0 3
44265: PPUSH
44266: LD_INT 1
44268: PPUSH
44269: CALL_OW 275
44273: PUSH
44274: LD_VAR 0 4
44278: PUSH
44279: LD_INT 1
44281: ARRAY
44282: GREATEREQUAL
44283: PUSH
44284: LD_VAR 0 3
44288: PPUSH
44289: LD_INT 2
44291: PPUSH
44292: CALL_OW 275
44296: PUSH
44297: LD_VAR 0 4
44301: PUSH
44302: LD_INT 2
44304: ARRAY
44305: GREATEREQUAL
44306: AND
44307: PUSH
44308: LD_VAR 0 3
44312: PPUSH
44313: LD_INT 3
44315: PPUSH
44316: CALL_OW 275
44320: PUSH
44321: LD_VAR 0 4
44325: PUSH
44326: LD_INT 3
44328: ARRAY
44329: GREATEREQUAL
44330: AND
44331: ST_TO_ADDR
// end ;
44332: LD_VAR 0 2
44336: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44337: LD_INT 0
44339: PPUSH
44340: PPUSH
44341: PPUSH
// pom := GetBase ( building ) ;
44342: LD_ADDR_VAR 0 4
44346: PUSH
44347: LD_VAR 0 1
44351: PPUSH
44352: CALL_OW 274
44356: ST_TO_ADDR
// if not pom then
44357: LD_VAR 0 4
44361: NOT
44362: IFFALSE 44366
// exit ;
44364: GO 44467
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44366: LD_ADDR_VAR 0 5
44370: PUSH
44371: LD_VAR 0 2
44375: PPUSH
44376: LD_VAR 0 1
44380: PPUSH
44381: CALL_OW 248
44385: PPUSH
44386: CALL_OW 450
44390: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44391: LD_ADDR_VAR 0 3
44395: PUSH
44396: LD_VAR 0 4
44400: PPUSH
44401: LD_INT 1
44403: PPUSH
44404: CALL_OW 275
44408: PUSH
44409: LD_VAR 0 5
44413: PUSH
44414: LD_INT 1
44416: ARRAY
44417: GREATEREQUAL
44418: PUSH
44419: LD_VAR 0 4
44423: PPUSH
44424: LD_INT 2
44426: PPUSH
44427: CALL_OW 275
44431: PUSH
44432: LD_VAR 0 5
44436: PUSH
44437: LD_INT 2
44439: ARRAY
44440: GREATEREQUAL
44441: AND
44442: PUSH
44443: LD_VAR 0 4
44447: PPUSH
44448: LD_INT 3
44450: PPUSH
44451: CALL_OW 275
44455: PUSH
44456: LD_VAR 0 5
44460: PUSH
44461: LD_INT 3
44463: ARRAY
44464: GREATEREQUAL
44465: AND
44466: ST_TO_ADDR
// end ;
44467: LD_VAR 0 3
44471: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44472: LD_INT 0
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
// result := false ;
44485: LD_ADDR_VAR 0 8
44489: PUSH
44490: LD_INT 0
44492: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44493: LD_VAR 0 5
44497: NOT
44498: PUSH
44499: LD_VAR 0 1
44503: NOT
44504: OR
44505: PUSH
44506: LD_VAR 0 2
44510: NOT
44511: OR
44512: PUSH
44513: LD_VAR 0 3
44517: NOT
44518: OR
44519: IFFALSE 44523
// exit ;
44521: GO 45337
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44523: LD_ADDR_VAR 0 14
44527: PUSH
44528: LD_VAR 0 1
44532: PPUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: LD_VAR 0 3
44542: PPUSH
44543: LD_VAR 0 4
44547: PPUSH
44548: LD_VAR 0 5
44552: PUSH
44553: LD_INT 1
44555: ARRAY
44556: PPUSH
44557: CALL_OW 248
44561: PPUSH
44562: LD_INT 0
44564: PPUSH
44565: CALL 46574 0 6
44569: ST_TO_ADDR
// if not hexes then
44570: LD_VAR 0 14
44574: NOT
44575: IFFALSE 44579
// exit ;
44577: GO 45337
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44579: LD_ADDR_VAR 0 17
44583: PUSH
44584: LD_VAR 0 5
44588: PPUSH
44589: LD_INT 22
44591: PUSH
44592: LD_VAR 0 13
44596: PPUSH
44597: CALL_OW 255
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 30
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 30
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PPUSH
44638: CALL_OW 72
44642: ST_TO_ADDR
// for i = 1 to hexes do
44643: LD_ADDR_VAR 0 9
44647: PUSH
44648: DOUBLE
44649: LD_INT 1
44651: DEC
44652: ST_TO_ADDR
44653: LD_VAR 0 14
44657: PUSH
44658: FOR_TO
44659: IFFALSE 45335
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44661: LD_ADDR_VAR 0 13
44665: PUSH
44666: LD_VAR 0 14
44670: PUSH
44671: LD_VAR 0 9
44675: ARRAY
44676: PUSH
44677: LD_INT 1
44679: ARRAY
44680: PPUSH
44681: LD_VAR 0 14
44685: PUSH
44686: LD_VAR 0 9
44690: ARRAY
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: PPUSH
44696: CALL_OW 428
44700: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44701: LD_VAR 0 14
44705: PUSH
44706: LD_VAR 0 9
44710: ARRAY
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: PPUSH
44716: LD_VAR 0 14
44720: PUSH
44721: LD_VAR 0 9
44725: ARRAY
44726: PUSH
44727: LD_INT 2
44729: ARRAY
44730: PPUSH
44731: CALL_OW 351
44735: PUSH
44736: LD_VAR 0 14
44740: PUSH
44741: LD_VAR 0 9
44745: ARRAY
44746: PUSH
44747: LD_INT 1
44749: ARRAY
44750: PPUSH
44751: LD_VAR 0 14
44755: PUSH
44756: LD_VAR 0 9
44760: ARRAY
44761: PUSH
44762: LD_INT 2
44764: ARRAY
44765: PPUSH
44766: CALL_OW 488
44770: NOT
44771: OR
44772: PUSH
44773: LD_VAR 0 13
44777: PPUSH
44778: CALL_OW 247
44782: PUSH
44783: LD_INT 3
44785: EQUAL
44786: OR
44787: IFFALSE 44793
// exit ;
44789: POP
44790: POP
44791: GO 45337
// if not tmp then
44793: LD_VAR 0 13
44797: NOT
44798: IFFALSE 44802
// continue ;
44800: GO 44658
// result := true ;
44802: LD_ADDR_VAR 0 8
44806: PUSH
44807: LD_INT 1
44809: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44810: LD_VAR 0 6
44814: PUSH
44815: LD_VAR 0 13
44819: PPUSH
44820: CALL_OW 247
44824: PUSH
44825: LD_INT 2
44827: EQUAL
44828: AND
44829: PUSH
44830: LD_VAR 0 13
44834: PPUSH
44835: CALL_OW 263
44839: PUSH
44840: LD_INT 1
44842: EQUAL
44843: AND
44844: IFFALSE 45008
// begin if IsDrivenBy ( tmp ) then
44846: LD_VAR 0 13
44850: PPUSH
44851: CALL_OW 311
44855: IFFALSE 44859
// continue ;
44857: GO 44658
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44859: LD_VAR 0 6
44863: PPUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 60
44869: PUSH
44870: EMPTY
44871: LIST
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 55
44882: PUSH
44883: EMPTY
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PPUSH
44894: CALL_OW 72
44898: IFFALSE 45006
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44900: LD_ADDR_VAR 0 18
44904: PUSH
44905: LD_VAR 0 6
44909: PPUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 60
44915: PUSH
44916: EMPTY
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: LD_INT 55
44928: PUSH
44929: EMPTY
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PPUSH
44940: CALL_OW 72
44944: PUSH
44945: LD_INT 1
44947: ARRAY
44948: ST_TO_ADDR
// if IsInUnit ( driver ) then
44949: LD_VAR 0 18
44953: PPUSH
44954: CALL_OW 310
44958: IFFALSE 44969
// ComExit ( driver ) ;
44960: LD_VAR 0 18
44964: PPUSH
44965: CALL 69758 0 1
// AddComEnterUnit ( driver , tmp ) ;
44969: LD_VAR 0 18
44973: PPUSH
44974: LD_VAR 0 13
44978: PPUSH
44979: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44983: LD_VAR 0 18
44987: PPUSH
44988: LD_VAR 0 7
44992: PPUSH
44993: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44997: LD_VAR 0 18
45001: PPUSH
45002: CALL_OW 181
// end ; continue ;
45006: GO 44658
// end ; if not cleaners or not tmp in cleaners then
45008: LD_VAR 0 6
45012: NOT
45013: PUSH
45014: LD_VAR 0 13
45018: PUSH
45019: LD_VAR 0 6
45023: IN
45024: NOT
45025: OR
45026: IFFALSE 45333
// begin if dep then
45028: LD_VAR 0 17
45032: IFFALSE 45168
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45034: LD_ADDR_VAR 0 16
45038: PUSH
45039: LD_VAR 0 17
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: CALL_OW 250
45052: PPUSH
45053: LD_VAR 0 17
45057: PUSH
45058: LD_INT 1
45060: ARRAY
45061: PPUSH
45062: CALL_OW 254
45066: PPUSH
45067: LD_INT 5
45069: PPUSH
45070: CALL_OW 272
45074: PUSH
45075: LD_VAR 0 17
45079: PUSH
45080: LD_INT 1
45082: ARRAY
45083: PPUSH
45084: CALL_OW 251
45088: PPUSH
45089: LD_VAR 0 17
45093: PUSH
45094: LD_INT 1
45096: ARRAY
45097: PPUSH
45098: CALL_OW 254
45102: PPUSH
45103: LD_INT 5
45105: PPUSH
45106: CALL_OW 273
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45115: LD_VAR 0 16
45119: PUSH
45120: LD_INT 1
45122: ARRAY
45123: PPUSH
45124: LD_VAR 0 16
45128: PUSH
45129: LD_INT 2
45131: ARRAY
45132: PPUSH
45133: CALL_OW 488
45137: IFFALSE 45168
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45139: LD_VAR 0 13
45143: PPUSH
45144: LD_VAR 0 16
45148: PUSH
45149: LD_INT 1
45151: ARRAY
45152: PPUSH
45153: LD_VAR 0 16
45157: PUSH
45158: LD_INT 2
45160: ARRAY
45161: PPUSH
45162: CALL_OW 111
// continue ;
45166: GO 44658
// end ; end ; r := GetDir ( tmp ) ;
45168: LD_ADDR_VAR 0 15
45172: PUSH
45173: LD_VAR 0 13
45177: PPUSH
45178: CALL_OW 254
45182: ST_TO_ADDR
// if r = 5 then
45183: LD_VAR 0 15
45187: PUSH
45188: LD_INT 5
45190: EQUAL
45191: IFFALSE 45201
// r := 0 ;
45193: LD_ADDR_VAR 0 15
45197: PUSH
45198: LD_INT 0
45200: ST_TO_ADDR
// for j = r to 5 do
45201: LD_ADDR_VAR 0 10
45205: PUSH
45206: DOUBLE
45207: LD_VAR 0 15
45211: DEC
45212: ST_TO_ADDR
45213: LD_INT 5
45215: PUSH
45216: FOR_TO
45217: IFFALSE 45331
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45219: LD_ADDR_VAR 0 11
45223: PUSH
45224: LD_VAR 0 13
45228: PPUSH
45229: CALL_OW 250
45233: PPUSH
45234: LD_VAR 0 10
45238: PPUSH
45239: LD_INT 2
45241: PPUSH
45242: CALL_OW 272
45246: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45247: LD_ADDR_VAR 0 12
45251: PUSH
45252: LD_VAR 0 13
45256: PPUSH
45257: CALL_OW 251
45261: PPUSH
45262: LD_VAR 0 10
45266: PPUSH
45267: LD_INT 2
45269: PPUSH
45270: CALL_OW 273
45274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45275: LD_VAR 0 11
45279: PPUSH
45280: LD_VAR 0 12
45284: PPUSH
45285: CALL_OW 488
45289: PUSH
45290: LD_VAR 0 11
45294: PPUSH
45295: LD_VAR 0 12
45299: PPUSH
45300: CALL_OW 428
45304: NOT
45305: AND
45306: IFFALSE 45329
// begin ComMoveXY ( tmp , _x , _y ) ;
45308: LD_VAR 0 13
45312: PPUSH
45313: LD_VAR 0 11
45317: PPUSH
45318: LD_VAR 0 12
45322: PPUSH
45323: CALL_OW 111
// break ;
45327: GO 45331
// end ; end ;
45329: GO 45216
45331: POP
45332: POP
// end ; end ;
45333: GO 44658
45335: POP
45336: POP
// end ;
45337: LD_VAR 0 8
45341: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45342: LD_INT 0
45344: PPUSH
// result := true ;
45345: LD_ADDR_VAR 0 3
45349: PUSH
45350: LD_INT 1
45352: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45353: LD_VAR 0 2
45357: PUSH
45358: LD_INT 24
45360: DOUBLE
45361: EQUAL
45362: IFTRUE 45372
45364: LD_INT 33
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45397
45372: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 32
45380: PPUSH
45381: LD_VAR 0 1
45385: PPUSH
45386: CALL_OW 321
45390: PUSH
45391: LD_INT 2
45393: EQUAL
45394: ST_TO_ADDR
45395: GO 45717
45397: LD_INT 20
45399: DOUBLE
45400: EQUAL
45401: IFTRUE 45405
45403: GO 45430
45405: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45406: LD_ADDR_VAR 0 3
45410: PUSH
45411: LD_INT 6
45413: PPUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: CALL_OW 321
45423: PUSH
45424: LD_INT 2
45426: EQUAL
45427: ST_TO_ADDR
45428: GO 45717
45430: LD_INT 22
45432: DOUBLE
45433: EQUAL
45434: IFTRUE 45444
45436: LD_INT 36
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45469
45444: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 15
45452: PPUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 321
45462: PUSH
45463: LD_INT 2
45465: EQUAL
45466: ST_TO_ADDR
45467: GO 45717
45469: LD_INT 30
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45477
45475: GO 45502
45477: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: LD_INT 20
45485: PPUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 321
45495: PUSH
45496: LD_INT 2
45498: EQUAL
45499: ST_TO_ADDR
45500: GO 45717
45502: LD_INT 28
45504: DOUBLE
45505: EQUAL
45506: IFTRUE 45516
45508: LD_INT 21
45510: DOUBLE
45511: EQUAL
45512: IFTRUE 45516
45514: GO 45541
45516: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45517: LD_ADDR_VAR 0 3
45521: PUSH
45522: LD_INT 21
45524: PPUSH
45525: LD_VAR 0 1
45529: PPUSH
45530: CALL_OW 321
45534: PUSH
45535: LD_INT 2
45537: EQUAL
45538: ST_TO_ADDR
45539: GO 45717
45541: LD_INT 16
45543: DOUBLE
45544: EQUAL
45545: IFTRUE 45549
45547: GO 45576
45549: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45550: LD_ADDR_VAR 0 3
45554: PUSH
45555: LD_EXP 139
45559: PPUSH
45560: LD_VAR 0 1
45564: PPUSH
45565: CALL_OW 321
45569: PUSH
45570: LD_INT 2
45572: EQUAL
45573: ST_TO_ADDR
45574: GO 45717
45576: LD_INT 19
45578: DOUBLE
45579: EQUAL
45580: IFTRUE 45590
45582: LD_INT 23
45584: DOUBLE
45585: EQUAL
45586: IFTRUE 45590
45588: GO 45617
45590: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45591: LD_ADDR_VAR 0 3
45595: PUSH
45596: LD_EXP 138
45600: PPUSH
45601: LD_VAR 0 1
45605: PPUSH
45606: CALL_OW 321
45610: PUSH
45611: LD_INT 2
45613: EQUAL
45614: ST_TO_ADDR
45615: GO 45717
45617: LD_INT 17
45619: DOUBLE
45620: EQUAL
45621: IFTRUE 45625
45623: GO 45650
45625: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45626: LD_ADDR_VAR 0 3
45630: PUSH
45631: LD_INT 39
45633: PPUSH
45634: LD_VAR 0 1
45638: PPUSH
45639: CALL_OW 321
45643: PUSH
45644: LD_INT 2
45646: EQUAL
45647: ST_TO_ADDR
45648: GO 45717
45650: LD_INT 18
45652: DOUBLE
45653: EQUAL
45654: IFTRUE 45658
45656: GO 45683
45658: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_INT 40
45666: PPUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: CALL_OW 321
45676: PUSH
45677: LD_INT 2
45679: EQUAL
45680: ST_TO_ADDR
45681: GO 45717
45683: LD_INT 27
45685: DOUBLE
45686: EQUAL
45687: IFTRUE 45691
45689: GO 45716
45691: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45692: LD_ADDR_VAR 0 3
45696: PUSH
45697: LD_INT 35
45699: PPUSH
45700: LD_VAR 0 1
45704: PPUSH
45705: CALL_OW 321
45709: PUSH
45710: LD_INT 2
45712: EQUAL
45713: ST_TO_ADDR
45714: GO 45717
45716: POP
// end ;
45717: LD_VAR 0 3
45721: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45722: LD_INT 0
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
45734: PPUSH
// result := false ;
45735: LD_ADDR_VAR 0 6
45739: PUSH
45740: LD_INT 0
45742: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45743: LD_VAR 0 1
45747: NOT
45748: PUSH
45749: LD_VAR 0 1
45753: PPUSH
45754: CALL_OW 266
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: IN
45769: NOT
45770: OR
45771: PUSH
45772: LD_VAR 0 2
45776: NOT
45777: OR
45778: PUSH
45779: LD_VAR 0 5
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 4
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: IN
45810: NOT
45811: OR
45812: PUSH
45813: LD_VAR 0 3
45817: PPUSH
45818: LD_VAR 0 4
45822: PPUSH
45823: CALL_OW 488
45827: NOT
45828: OR
45829: IFFALSE 45833
// exit ;
45831: GO 46569
// side := GetSide ( depot ) ;
45833: LD_ADDR_VAR 0 9
45837: PUSH
45838: LD_VAR 0 1
45842: PPUSH
45843: CALL_OW 255
45847: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45848: LD_VAR 0 9
45852: PPUSH
45853: LD_VAR 0 2
45857: PPUSH
45858: CALL 45342 0 2
45862: NOT
45863: IFFALSE 45867
// exit ;
45865: GO 46569
// pom := GetBase ( depot ) ;
45867: LD_ADDR_VAR 0 10
45871: PUSH
45872: LD_VAR 0 1
45876: PPUSH
45877: CALL_OW 274
45881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45882: LD_ADDR_VAR 0 11
45886: PUSH
45887: LD_VAR 0 2
45891: PPUSH
45892: LD_VAR 0 1
45896: PPUSH
45897: CALL_OW 248
45901: PPUSH
45902: CALL_OW 450
45906: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45907: LD_VAR 0 10
45911: PPUSH
45912: LD_INT 1
45914: PPUSH
45915: CALL_OW 275
45919: PUSH
45920: LD_VAR 0 11
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: GREATEREQUAL
45929: PUSH
45930: LD_VAR 0 10
45934: PPUSH
45935: LD_INT 2
45937: PPUSH
45938: CALL_OW 275
45942: PUSH
45943: LD_VAR 0 11
45947: PUSH
45948: LD_INT 2
45950: ARRAY
45951: GREATEREQUAL
45952: AND
45953: PUSH
45954: LD_VAR 0 10
45958: PPUSH
45959: LD_INT 3
45961: PPUSH
45962: CALL_OW 275
45966: PUSH
45967: LD_VAR 0 11
45971: PUSH
45972: LD_INT 3
45974: ARRAY
45975: GREATEREQUAL
45976: AND
45977: NOT
45978: IFFALSE 45982
// exit ;
45980: GO 46569
// if GetBType ( depot ) = b_depot then
45982: LD_VAR 0 1
45986: PPUSH
45987: CALL_OW 266
45991: PUSH
45992: LD_INT 0
45994: EQUAL
45995: IFFALSE 46007
// dist := 28 else
45997: LD_ADDR_VAR 0 14
46001: PUSH
46002: LD_INT 28
46004: ST_TO_ADDR
46005: GO 46015
// dist := 36 ;
46007: LD_ADDR_VAR 0 14
46011: PUSH
46012: LD_INT 36
46014: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46015: LD_VAR 0 1
46019: PPUSH
46020: LD_VAR 0 3
46024: PPUSH
46025: LD_VAR 0 4
46029: PPUSH
46030: CALL_OW 297
46034: PUSH
46035: LD_VAR 0 14
46039: GREATER
46040: IFFALSE 46044
// exit ;
46042: GO 46569
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46044: LD_ADDR_VAR 0 12
46048: PUSH
46049: LD_VAR 0 2
46053: PPUSH
46054: LD_VAR 0 3
46058: PPUSH
46059: LD_VAR 0 4
46063: PPUSH
46064: LD_VAR 0 5
46068: PPUSH
46069: LD_VAR 0 1
46073: PPUSH
46074: CALL_OW 248
46078: PPUSH
46079: LD_INT 0
46081: PPUSH
46082: CALL 46574 0 6
46086: ST_TO_ADDR
// if not hexes then
46087: LD_VAR 0 12
46091: NOT
46092: IFFALSE 46096
// exit ;
46094: GO 46569
// hex := GetHexInfo ( x , y ) ;
46096: LD_ADDR_VAR 0 15
46100: PUSH
46101: LD_VAR 0 3
46105: PPUSH
46106: LD_VAR 0 4
46110: PPUSH
46111: CALL_OW 546
46115: ST_TO_ADDR
// if hex [ 1 ] then
46116: LD_VAR 0 15
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: IFFALSE 46128
// exit ;
46126: GO 46569
// height := hex [ 2 ] ;
46128: LD_ADDR_VAR 0 13
46132: PUSH
46133: LD_VAR 0 15
46137: PUSH
46138: LD_INT 2
46140: ARRAY
46141: ST_TO_ADDR
// for i = 1 to hexes do
46142: LD_ADDR_VAR 0 7
46146: PUSH
46147: DOUBLE
46148: LD_INT 1
46150: DEC
46151: ST_TO_ADDR
46152: LD_VAR 0 12
46156: PUSH
46157: FOR_TO
46158: IFFALSE 46488
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46160: LD_VAR 0 12
46164: PUSH
46165: LD_VAR 0 7
46169: ARRAY
46170: PUSH
46171: LD_INT 1
46173: ARRAY
46174: PPUSH
46175: LD_VAR 0 12
46179: PUSH
46180: LD_VAR 0 7
46184: ARRAY
46185: PUSH
46186: LD_INT 2
46188: ARRAY
46189: PPUSH
46190: CALL_OW 488
46194: NOT
46195: PUSH
46196: LD_VAR 0 12
46200: PUSH
46201: LD_VAR 0 7
46205: ARRAY
46206: PUSH
46207: LD_INT 1
46209: ARRAY
46210: PPUSH
46211: LD_VAR 0 12
46215: PUSH
46216: LD_VAR 0 7
46220: ARRAY
46221: PUSH
46222: LD_INT 2
46224: ARRAY
46225: PPUSH
46226: CALL_OW 428
46230: PUSH
46231: LD_INT 0
46233: GREATER
46234: OR
46235: PUSH
46236: LD_VAR 0 12
46240: PUSH
46241: LD_VAR 0 7
46245: ARRAY
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PPUSH
46251: LD_VAR 0 12
46255: PUSH
46256: LD_VAR 0 7
46260: ARRAY
46261: PUSH
46262: LD_INT 2
46264: ARRAY
46265: PPUSH
46266: CALL_OW 351
46270: OR
46271: IFFALSE 46277
// exit ;
46273: POP
46274: POP
46275: GO 46569
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46277: LD_ADDR_VAR 0 8
46281: PUSH
46282: LD_VAR 0 12
46286: PUSH
46287: LD_VAR 0 7
46291: ARRAY
46292: PUSH
46293: LD_INT 1
46295: ARRAY
46296: PPUSH
46297: LD_VAR 0 12
46301: PUSH
46302: LD_VAR 0 7
46306: ARRAY
46307: PUSH
46308: LD_INT 2
46310: ARRAY
46311: PPUSH
46312: CALL_OW 546
46316: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46317: LD_VAR 0 8
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PUSH
46326: LD_VAR 0 8
46330: PUSH
46331: LD_INT 2
46333: ARRAY
46334: PUSH
46335: LD_VAR 0 13
46339: PUSH
46340: LD_INT 2
46342: PLUS
46343: GREATER
46344: OR
46345: PUSH
46346: LD_VAR 0 8
46350: PUSH
46351: LD_INT 2
46353: ARRAY
46354: PUSH
46355: LD_VAR 0 13
46359: PUSH
46360: LD_INT 2
46362: MINUS
46363: LESS
46364: OR
46365: PUSH
46366: LD_VAR 0 8
46370: PUSH
46371: LD_INT 3
46373: ARRAY
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 8
46380: PUSH
46381: LD_INT 9
46383: PUSH
46384: LD_INT 10
46386: PUSH
46387: LD_INT 11
46389: PUSH
46390: LD_INT 12
46392: PUSH
46393: LD_INT 13
46395: PUSH
46396: LD_INT 16
46398: PUSH
46399: LD_INT 17
46401: PUSH
46402: LD_INT 18
46404: PUSH
46405: LD_INT 19
46407: PUSH
46408: LD_INT 20
46410: PUSH
46411: LD_INT 21
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: IN
46429: NOT
46430: OR
46431: PUSH
46432: LD_VAR 0 8
46436: PUSH
46437: LD_INT 5
46439: ARRAY
46440: NOT
46441: OR
46442: PUSH
46443: LD_VAR 0 8
46447: PUSH
46448: LD_INT 6
46450: ARRAY
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 7
46460: PUSH
46461: LD_INT 9
46463: PUSH
46464: LD_INT 10
46466: PUSH
46467: LD_INT 11
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: IN
46478: NOT
46479: OR
46480: IFFALSE 46486
// exit ;
46482: POP
46483: POP
46484: GO 46569
// end ;
46486: GO 46157
46488: POP
46489: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46490: LD_VAR 0 9
46494: PPUSH
46495: LD_VAR 0 3
46499: PPUSH
46500: LD_VAR 0 4
46504: PPUSH
46505: LD_INT 20
46507: PPUSH
46508: CALL 38515 0 4
46512: PUSH
46513: LD_INT 4
46515: ARRAY
46516: IFFALSE 46520
// exit ;
46518: GO 46569
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46520: LD_VAR 0 2
46524: PUSH
46525: LD_INT 29
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: IN
46535: PUSH
46536: LD_VAR 0 3
46540: PPUSH
46541: LD_VAR 0 4
46545: PPUSH
46546: LD_VAR 0 9
46550: PPUSH
46551: CALL_OW 440
46555: NOT
46556: AND
46557: IFFALSE 46561
// exit ;
46559: GO 46569
// result := true ;
46561: LD_ADDR_VAR 0 6
46565: PUSH
46566: LD_INT 1
46568: ST_TO_ADDR
// end ;
46569: LD_VAR 0 6
46573: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46574: LD_INT 0
46576: PPUSH
46577: PPUSH
46578: PPUSH
46579: PPUSH
46580: PPUSH
46581: PPUSH
46582: PPUSH
46583: PPUSH
46584: PPUSH
46585: PPUSH
46586: PPUSH
46587: PPUSH
46588: PPUSH
46589: PPUSH
46590: PPUSH
46591: PPUSH
46592: PPUSH
46593: PPUSH
46594: PPUSH
46595: PPUSH
46596: PPUSH
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
46610: PPUSH
46611: PPUSH
46612: PPUSH
46613: PPUSH
46614: PPUSH
46615: PPUSH
46616: PPUSH
46617: PPUSH
46618: PPUSH
46619: PPUSH
46620: PPUSH
46621: PPUSH
46622: PPUSH
46623: PPUSH
46624: PPUSH
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
46629: PPUSH
46630: PPUSH
46631: PPUSH
46632: PPUSH
46633: PPUSH
// result = [ ] ;
46634: LD_ADDR_VAR 0 7
46638: PUSH
46639: EMPTY
46640: ST_TO_ADDR
// temp_list = [ ] ;
46641: LD_ADDR_VAR 0 9
46645: PUSH
46646: EMPTY
46647: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46648: LD_VAR 0 4
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 4
46667: PUSH
46668: LD_INT 5
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: IN
46679: NOT
46680: PUSH
46681: LD_VAR 0 1
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: IN
46696: PUSH
46697: LD_VAR 0 5
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: IN
46716: NOT
46717: AND
46718: OR
46719: IFFALSE 46723
// exit ;
46721: GO 65114
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46723: LD_VAR 0 1
46727: PUSH
46728: LD_INT 6
46730: PUSH
46731: LD_INT 7
46733: PUSH
46734: LD_INT 8
46736: PUSH
46737: LD_INT 13
46739: PUSH
46740: LD_INT 12
46742: PUSH
46743: LD_INT 15
46745: PUSH
46746: LD_INT 11
46748: PUSH
46749: LD_INT 14
46751: PUSH
46752: LD_INT 10
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: IN
46766: IFFALSE 46776
// btype = b_lab ;
46768: LD_ADDR_VAR 0 1
46772: PUSH
46773: LD_INT 6
46775: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46776: LD_VAR 0 6
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: IN
46795: NOT
46796: PUSH
46797: LD_VAR 0 1
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: LD_INT 6
46816: PUSH
46817: LD_INT 36
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: LD_INT 31
46828: PUSH
46829: LD_INT 32
46831: PUSH
46832: LD_INT 33
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: IN
46848: NOT
46849: PUSH
46850: LD_VAR 0 6
46854: PUSH
46855: LD_INT 1
46857: EQUAL
46858: AND
46859: OR
46860: PUSH
46861: LD_VAR 0 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: IN
46876: NOT
46877: PUSH
46878: LD_VAR 0 6
46882: PUSH
46883: LD_INT 2
46885: EQUAL
46886: AND
46887: OR
46888: IFFALSE 46898
// mode = 0 ;
46890: LD_ADDR_VAR 0 6
46894: PUSH
46895: LD_INT 0
46897: ST_TO_ADDR
// case mode of 0 :
46898: LD_VAR 0 6
46902: PUSH
46903: LD_INT 0
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46911
46909: GO 58364
46911: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46912: LD_ADDR_VAR 0 11
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47105: LD_ADDR_VAR 0 12
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: NEG
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47301: LD_ADDR_VAR 0 13
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47500: LD_ADDR_VAR 0 14
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47696: LD_ADDR_VAR 0 15
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47889: LD_ADDR_VAR 0 16
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48082: LD_ADDR_VAR 0 17
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48312: LD_ADDR_VAR 0 18
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48542: LD_ADDR_VAR 0 19
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48772: LD_ADDR_VAR 0 20
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49002: LD_ADDR_VAR 0 21
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49232: LD_ADDR_VAR 0 22
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49462: LD_ADDR_VAR 0 23
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49742: LD_ADDR_VAR 0 24
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50018: LD_ADDR_VAR 0 25
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50292: LD_ADDR_VAR 0 26
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50568: LD_ADDR_VAR 0 27
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50848: LD_ADDR_VAR 0 28
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51130: LD_ADDR_VAR 0 29
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51409: LD_ADDR_VAR 0 30
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51687: LD_ADDR_VAR 0 31
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51965: LD_ADDR_VAR 0 32
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52243: LD_ADDR_VAR 0 33
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52522: LD_ADDR_VAR 0 34
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52802: LD_ADDR_VAR 0 35
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52914: LD_ADDR_VAR 0 36
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53026: LD_ADDR_VAR 0 37
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53138: LD_ADDR_VAR 0 38
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53250: LD_ADDR_VAR 0 39
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53362: LD_ADDR_VAR 0 40
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53474: LD_ADDR_VAR 0 41
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53824: LD_ADDR_VAR 0 42
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54174: LD_ADDR_VAR 0 43
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54522: LD_ADDR_VAR 0 44
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54872: LD_ADDR_VAR 0 45
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 3
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55222: LD_ADDR_VAR 0 46
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55570: LD_ADDR_VAR 0 47
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55721: LD_ADDR_VAR 0 48
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55868: LD_ADDR_VAR 0 49
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56012: LD_ADDR_VAR 0 50
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56156: LD_ADDR_VAR 0 51
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56303: LD_ADDR_VAR 0 52
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56454: LD_ADDR_VAR 0 53
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56684: LD_ADDR_VAR 0 54
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56914: LD_ADDR_VAR 0 55
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57144: LD_ADDR_VAR 0 56
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57374: LD_ADDR_VAR 0 57
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57604: LD_ADDR_VAR 0 58
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57834: LD_ADDR_VAR 0 59
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57922: LD_ADDR_VAR 0 60
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58010: LD_ADDR_VAR 0 61
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58098: LD_ADDR_VAR 0 62
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58186: LD_ADDR_VAR 0 63
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58274: LD_ADDR_VAR 0 64
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: ST_TO_ADDR
// end ; 1 :
58362: GO 64259
58364: LD_INT 1
58366: DOUBLE
58367: EQUAL
58368: IFTRUE 58372
58370: GO 60995
58372: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58373: LD_ADDR_VAR 0 11
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58417: LD_ADDR_VAR 0 12
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58458: LD_ADDR_VAR 0 13
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58498: LD_ADDR_VAR 0 14
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58539: LD_ADDR_VAR 0 15
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58583: LD_ADDR_VAR 0 16
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58629: LD_ADDR_VAR 0 17
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58673: LD_ADDR_VAR 0 18
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58714: LD_ADDR_VAR 0 19
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58754: LD_ADDR_VAR 0 20
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58795: LD_ADDR_VAR 0 21
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58839: LD_ADDR_VAR 0 22
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58885: LD_ADDR_VAR 0 23
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 4
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58929: LD_ADDR_VAR 0 24
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58970: LD_ADDR_VAR 0 25
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 4
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 4
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59010: LD_ADDR_VAR 0 26
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59051: LD_ADDR_VAR 0 27
59055: PUSH
59056: LD_INT 3
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 4
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59095: LD_ADDR_VAR 0 28
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 4
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59141: LD_ADDR_VAR 0 29
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 4
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 4
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 5
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 5
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 4
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 6
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 6
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 5
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59296: LD_ADDR_VAR 0 30
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 5
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 5
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 6
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 6
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59439: LD_ADDR_VAR 0 31
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 4
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: LD_INT 4
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 5
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: LD_INT 5
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 6
59536: PUSH
59537: LD_INT 5
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 6
59546: PUSH
59547: LD_INT 6
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: LD_INT 6
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59578: LD_ADDR_VAR 0 32
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 4
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 4
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 3
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 6
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 6
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 5
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59721: LD_ADDR_VAR 0 33
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 4
59773: NEG
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 4
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 5
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 5
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 6
59841: NEG
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 6
59852: NEG
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59876: LD_ADDR_VAR 0 34
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: NEG
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 4
59955: NEG
59956: PUSH
59957: LD_INT 5
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 5
59967: NEG
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: LD_INT 5
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: LD_INT 6
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 6
60003: NEG
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 6
60015: NEG
60016: PUSH
60017: LD_INT 6
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60039: LD_ADDR_VAR 0 41
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60083: LD_ADDR_VAR 0 42
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60124: LD_ADDR_VAR 0 43
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60164: LD_ADDR_VAR 0 44
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60205: LD_ADDR_VAR 0 45
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60249: LD_ADDR_VAR 0 46
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60295: LD_ADDR_VAR 0 47
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60328: LD_ADDR_VAR 0 48
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60359: LD_ADDR_VAR 0 49
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60388: LD_ADDR_VAR 0 50
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60417: LD_ADDR_VAR 0 51
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60448: LD_ADDR_VAR 0 52
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60481: LD_ADDR_VAR 0 53
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60525: LD_ADDR_VAR 0 54
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60566: LD_ADDR_VAR 0 55
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60606: LD_ADDR_VAR 0 56
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60647: LD_ADDR_VAR 0 57
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60691: LD_ADDR_VAR 0 58
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60737: LD_ADDR_VAR 0 59
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60781: LD_ADDR_VAR 0 60
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60822: LD_ADDR_VAR 0 61
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60862: LD_ADDR_VAR 0 62
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60903: LD_ADDR_VAR 0 63
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60947: LD_ADDR_VAR 0 64
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 2
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: ST_TO_ADDR
// end ; 2 :
60993: GO 64259
60995: LD_INT 2
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61003
61001: GO 64258
61003: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61004: LD_ADDR_VAR 0 29
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 4
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 5
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 5
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 5
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 4
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 5
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 5
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 4
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 4
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 4
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: NEG
61390: PUSH
61391: LD_INT 4
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: LD_INT 5
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 5
61449: NEG
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 5
61461: NEG
61462: PUSH
61463: LD_INT 5
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 5
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61542: LD_ADDR_VAR 0 30
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: LD_INT 4
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 4
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 5
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 5
61579: PUSH
61580: LD_INT 5
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 5
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 4
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 2
61711: PUSH
61712: LD_INT 4
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 4
61743: NEG
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 5
61788: NEG
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 5
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: NEG
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 4
61906: NEG
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 4
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 4
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 5
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 4
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 3
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 4
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 5
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: LD_INT 5
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62089: LD_ADDR_VAR 0 31
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 5
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 5
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 4
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 3
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: LD_INT 5
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 3
62200: NEG
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 4
62245: NEG
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 4
62291: NEG
62292: PUSH
62293: LD_INT 4
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 4
62303: NEG
62304: PUSH
62305: LD_INT 5
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: LD_INT 4
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: NEG
62328: PUSH
62329: LD_INT 3
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: NEG
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 5
62351: NEG
62352: PUSH
62353: LD_INT 4
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 5
62363: NEG
62364: PUSH
62365: LD_INT 5
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: LD_INT 5
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 5
62387: NEG
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 4
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: LD_INT 4
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 4
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 5
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 5
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 5
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62639: LD_ADDR_VAR 0 32
62643: PUSH
62644: LD_INT 4
62646: NEG
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 4
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 5
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 5
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 5
62725: NEG
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: LD_INT 4
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 4
62808: NEG
62809: PUSH
62810: LD_INT 3
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: NEG
62821: PUSH
62822: LD_INT 4
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: NEG
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 4
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 5
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 4
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 5
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: LD_INT 5
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 4
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 4
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: LD_INT 4
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 5
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: LD_INT 5
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: LD_INT 5
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 5
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63186: LD_ADDR_VAR 0 33
63190: PUSH
63191: LD_INT 4
63193: NEG
63194: PUSH
63195: LD_INT 4
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 4
63205: NEG
63206: PUSH
63207: LD_INT 5
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 3
63229: NEG
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: LD_INT 3
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 5
63253: NEG
63254: PUSH
63255: LD_INT 4
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 5
63265: NEG
63266: PUSH
63267: LD_INT 5
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: LD_INT 5
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 5
63289: NEG
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 4
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 3
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 4
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 4
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 4
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 4
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 5
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 5
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 5
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 3
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 3
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 4
63526: PUSH
63527: LD_INT 4
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: LD_INT 4
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: LD_INT 3
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: LD_INT 2
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: LD_INT 4
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 4
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: LD_INT 4
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 5
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 5
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 5
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 3
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63724: LD_ADDR_VAR 0 34
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 4
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 5
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 3
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 3
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 4
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: LD_INT 5
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 5
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 4
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 4
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 4
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 5
63946: PUSH
63947: LD_INT 4
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 5
63956: PUSH
63957: LD_INT 5
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: PUSH
63967: LD_INT 5
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: LD_INT 4
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 5
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 3
64006: PUSH
64007: LD_INT 5
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 3
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 4
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 4
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 4
64109: NEG
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 4
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: NEG
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 4
64154: NEG
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 5
64165: NEG
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 5
64176: NEG
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 5
64188: NEG
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: ST_TO_ADDR
// end ; end ;
64256: GO 64259
64258: POP
// case btype of b_depot , b_warehouse :
64259: LD_VAR 0 1
64263: PUSH
64264: LD_INT 0
64266: DOUBLE
64267: EQUAL
64268: IFTRUE 64278
64270: LD_INT 1
64272: DOUBLE
64273: EQUAL
64274: IFTRUE 64278
64276: GO 64479
64278: POP
// case nation of nation_american :
64279: LD_VAR 0 5
64283: PUSH
64284: LD_INT 1
64286: DOUBLE
64287: EQUAL
64288: IFTRUE 64292
64290: GO 64348
64292: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64293: LD_ADDR_VAR 0 9
64297: PUSH
64298: LD_VAR 0 11
64302: PUSH
64303: LD_VAR 0 12
64307: PUSH
64308: LD_VAR 0 13
64312: PUSH
64313: LD_VAR 0 14
64317: PUSH
64318: LD_VAR 0 15
64322: PUSH
64323: LD_VAR 0 16
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: PUSH
64336: LD_VAR 0 4
64340: PUSH
64341: LD_INT 1
64343: PLUS
64344: ARRAY
64345: ST_TO_ADDR
64346: GO 64477
64348: LD_INT 2
64350: DOUBLE
64351: EQUAL
64352: IFTRUE 64356
64354: GO 64412
64356: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64357: LD_ADDR_VAR 0 9
64361: PUSH
64362: LD_VAR 0 17
64366: PUSH
64367: LD_VAR 0 18
64371: PUSH
64372: LD_VAR 0 19
64376: PUSH
64377: LD_VAR 0 20
64381: PUSH
64382: LD_VAR 0 21
64386: PUSH
64387: LD_VAR 0 22
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: LD_VAR 0 4
64404: PUSH
64405: LD_INT 1
64407: PLUS
64408: ARRAY
64409: ST_TO_ADDR
64410: GO 64477
64412: LD_INT 3
64414: DOUBLE
64415: EQUAL
64416: IFTRUE 64420
64418: GO 64476
64420: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64421: LD_ADDR_VAR 0 9
64425: PUSH
64426: LD_VAR 0 23
64430: PUSH
64431: LD_VAR 0 24
64435: PUSH
64436: LD_VAR 0 25
64440: PUSH
64441: LD_VAR 0 26
64445: PUSH
64446: LD_VAR 0 27
64450: PUSH
64451: LD_VAR 0 28
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: PUSH
64464: LD_VAR 0 4
64468: PUSH
64469: LD_INT 1
64471: PLUS
64472: ARRAY
64473: ST_TO_ADDR
64474: GO 64477
64476: POP
64477: GO 65032
64479: LD_INT 2
64481: DOUBLE
64482: EQUAL
64483: IFTRUE 64493
64485: LD_INT 3
64487: DOUBLE
64488: EQUAL
64489: IFTRUE 64493
64491: GO 64549
64493: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64494: LD_ADDR_VAR 0 9
64498: PUSH
64499: LD_VAR 0 29
64503: PUSH
64504: LD_VAR 0 30
64508: PUSH
64509: LD_VAR 0 31
64513: PUSH
64514: LD_VAR 0 32
64518: PUSH
64519: LD_VAR 0 33
64523: PUSH
64524: LD_VAR 0 34
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: LD_VAR 0 4
64541: PUSH
64542: LD_INT 1
64544: PLUS
64545: ARRAY
64546: ST_TO_ADDR
64547: GO 65032
64549: LD_INT 16
64551: DOUBLE
64552: EQUAL
64553: IFTRUE 64611
64555: LD_INT 17
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64611
64561: LD_INT 18
64563: DOUBLE
64564: EQUAL
64565: IFTRUE 64611
64567: LD_INT 19
64569: DOUBLE
64570: EQUAL
64571: IFTRUE 64611
64573: LD_INT 22
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64611
64579: LD_INT 20
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64611
64585: LD_INT 21
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64611
64591: LD_INT 23
64593: DOUBLE
64594: EQUAL
64595: IFTRUE 64611
64597: LD_INT 24
64599: DOUBLE
64600: EQUAL
64601: IFTRUE 64611
64603: LD_INT 25
64605: DOUBLE
64606: EQUAL
64607: IFTRUE 64611
64609: GO 64667
64611: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64612: LD_ADDR_VAR 0 9
64616: PUSH
64617: LD_VAR 0 35
64621: PUSH
64622: LD_VAR 0 36
64626: PUSH
64627: LD_VAR 0 37
64631: PUSH
64632: LD_VAR 0 38
64636: PUSH
64637: LD_VAR 0 39
64641: PUSH
64642: LD_VAR 0 40
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: PUSH
64655: LD_VAR 0 4
64659: PUSH
64660: LD_INT 1
64662: PLUS
64663: ARRAY
64664: ST_TO_ADDR
64665: GO 65032
64667: LD_INT 6
64669: DOUBLE
64670: EQUAL
64671: IFTRUE 64723
64673: LD_INT 7
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64723
64679: LD_INT 8
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64723
64685: LD_INT 13
64687: DOUBLE
64688: EQUAL
64689: IFTRUE 64723
64691: LD_INT 12
64693: DOUBLE
64694: EQUAL
64695: IFTRUE 64723
64697: LD_INT 15
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64723
64703: LD_INT 11
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64723
64709: LD_INT 14
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64723
64715: LD_INT 10
64717: DOUBLE
64718: EQUAL
64719: IFTRUE 64723
64721: GO 64779
64723: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64724: LD_ADDR_VAR 0 9
64728: PUSH
64729: LD_VAR 0 41
64733: PUSH
64734: LD_VAR 0 42
64738: PUSH
64739: LD_VAR 0 43
64743: PUSH
64744: LD_VAR 0 44
64748: PUSH
64749: LD_VAR 0 45
64753: PUSH
64754: LD_VAR 0 46
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: PUSH
64767: LD_VAR 0 4
64771: PUSH
64772: LD_INT 1
64774: PLUS
64775: ARRAY
64776: ST_TO_ADDR
64777: GO 65032
64779: LD_INT 36
64781: DOUBLE
64782: EQUAL
64783: IFTRUE 64787
64785: GO 64843
64787: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64788: LD_ADDR_VAR 0 9
64792: PUSH
64793: LD_VAR 0 47
64797: PUSH
64798: LD_VAR 0 48
64802: PUSH
64803: LD_VAR 0 49
64807: PUSH
64808: LD_VAR 0 50
64812: PUSH
64813: LD_VAR 0 51
64817: PUSH
64818: LD_VAR 0 52
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: PUSH
64831: LD_VAR 0 4
64835: PUSH
64836: LD_INT 1
64838: PLUS
64839: ARRAY
64840: ST_TO_ADDR
64841: GO 65032
64843: LD_INT 4
64845: DOUBLE
64846: EQUAL
64847: IFTRUE 64869
64849: LD_INT 5
64851: DOUBLE
64852: EQUAL
64853: IFTRUE 64869
64855: LD_INT 34
64857: DOUBLE
64858: EQUAL
64859: IFTRUE 64869
64861: LD_INT 37
64863: DOUBLE
64864: EQUAL
64865: IFTRUE 64869
64867: GO 64925
64869: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64870: LD_ADDR_VAR 0 9
64874: PUSH
64875: LD_VAR 0 53
64879: PUSH
64880: LD_VAR 0 54
64884: PUSH
64885: LD_VAR 0 55
64889: PUSH
64890: LD_VAR 0 56
64894: PUSH
64895: LD_VAR 0 57
64899: PUSH
64900: LD_VAR 0 58
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: PUSH
64913: LD_VAR 0 4
64917: PUSH
64918: LD_INT 1
64920: PLUS
64921: ARRAY
64922: ST_TO_ADDR
64923: GO 65032
64925: LD_INT 31
64927: DOUBLE
64928: EQUAL
64929: IFTRUE 64975
64931: LD_INT 32
64933: DOUBLE
64934: EQUAL
64935: IFTRUE 64975
64937: LD_INT 33
64939: DOUBLE
64940: EQUAL
64941: IFTRUE 64975
64943: LD_INT 27
64945: DOUBLE
64946: EQUAL
64947: IFTRUE 64975
64949: LD_INT 26
64951: DOUBLE
64952: EQUAL
64953: IFTRUE 64975
64955: LD_INT 28
64957: DOUBLE
64958: EQUAL
64959: IFTRUE 64975
64961: LD_INT 29
64963: DOUBLE
64964: EQUAL
64965: IFTRUE 64975
64967: LD_INT 30
64969: DOUBLE
64970: EQUAL
64971: IFTRUE 64975
64973: GO 65031
64975: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64976: LD_ADDR_VAR 0 9
64980: PUSH
64981: LD_VAR 0 59
64985: PUSH
64986: LD_VAR 0 60
64990: PUSH
64991: LD_VAR 0 61
64995: PUSH
64996: LD_VAR 0 62
65000: PUSH
65001: LD_VAR 0 63
65005: PUSH
65006: LD_VAR 0 64
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: PUSH
65019: LD_VAR 0 4
65023: PUSH
65024: LD_INT 1
65026: PLUS
65027: ARRAY
65028: ST_TO_ADDR
65029: GO 65032
65031: POP
// temp_list2 = [ ] ;
65032: LD_ADDR_VAR 0 10
65036: PUSH
65037: EMPTY
65038: ST_TO_ADDR
// for i in temp_list do
65039: LD_ADDR_VAR 0 8
65043: PUSH
65044: LD_VAR 0 9
65048: PUSH
65049: FOR_IN
65050: IFFALSE 65102
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65052: LD_ADDR_VAR 0 10
65056: PUSH
65057: LD_VAR 0 10
65061: PUSH
65062: LD_VAR 0 8
65066: PUSH
65067: LD_INT 1
65069: ARRAY
65070: PUSH
65071: LD_VAR 0 2
65075: PLUS
65076: PUSH
65077: LD_VAR 0 8
65081: PUSH
65082: LD_INT 2
65084: ARRAY
65085: PUSH
65086: LD_VAR 0 3
65090: PLUS
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: EMPTY
65097: LIST
65098: ADD
65099: ST_TO_ADDR
65100: GO 65049
65102: POP
65103: POP
// result = temp_list2 ;
65104: LD_ADDR_VAR 0 7
65108: PUSH
65109: LD_VAR 0 10
65113: ST_TO_ADDR
// end ;
65114: LD_VAR 0 7
65118: RET
// export function EnemyInRange ( unit , dist ) ; begin
65119: LD_INT 0
65121: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_VAR 0 1
65131: PPUSH
65132: CALL_OW 255
65136: PPUSH
65137: LD_VAR 0 1
65141: PPUSH
65142: CALL_OW 250
65146: PPUSH
65147: LD_VAR 0 1
65151: PPUSH
65152: CALL_OW 251
65156: PPUSH
65157: LD_VAR 0 2
65161: PPUSH
65162: CALL 38515 0 4
65166: PUSH
65167: LD_INT 4
65169: ARRAY
65170: ST_TO_ADDR
// end ;
65171: LD_VAR 0 3
65175: RET
// export function PlayerSeeMe ( unit ) ; begin
65176: LD_INT 0
65178: PPUSH
// result := See ( your_side , unit ) ;
65179: LD_ADDR_VAR 0 2
65183: PUSH
65184: LD_OWVAR 2
65188: PPUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 292
65198: ST_TO_ADDR
// end ;
65199: LD_VAR 0 2
65203: RET
// export function ReverseDir ( unit ) ; begin
65204: LD_INT 0
65206: PPUSH
// if not unit then
65207: LD_VAR 0 1
65211: NOT
65212: IFFALSE 65216
// exit ;
65214: GO 65239
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65216: LD_ADDR_VAR 0 2
65220: PUSH
65221: LD_VAR 0 1
65225: PPUSH
65226: CALL_OW 254
65230: PUSH
65231: LD_INT 3
65233: PLUS
65234: PUSH
65235: LD_INT 6
65237: MOD
65238: ST_TO_ADDR
// end ;
65239: LD_VAR 0 2
65243: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65244: LD_INT 0
65246: PPUSH
65247: PPUSH
65248: PPUSH
65249: PPUSH
65250: PPUSH
// if not hexes then
65251: LD_VAR 0 2
65255: NOT
65256: IFFALSE 65260
// exit ;
65258: GO 65408
// dist := 9999 ;
65260: LD_ADDR_VAR 0 5
65264: PUSH
65265: LD_INT 9999
65267: ST_TO_ADDR
// for i = 1 to hexes do
65268: LD_ADDR_VAR 0 4
65272: PUSH
65273: DOUBLE
65274: LD_INT 1
65276: DEC
65277: ST_TO_ADDR
65278: LD_VAR 0 2
65282: PUSH
65283: FOR_TO
65284: IFFALSE 65396
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65286: LD_VAR 0 1
65290: PPUSH
65291: LD_VAR 0 2
65295: PUSH
65296: LD_VAR 0 4
65300: ARRAY
65301: PUSH
65302: LD_INT 1
65304: ARRAY
65305: PPUSH
65306: LD_VAR 0 2
65310: PUSH
65311: LD_VAR 0 4
65315: ARRAY
65316: PUSH
65317: LD_INT 2
65319: ARRAY
65320: PPUSH
65321: CALL_OW 297
65325: PUSH
65326: LD_VAR 0 5
65330: LESS
65331: IFFALSE 65394
// begin hex := hexes [ i ] ;
65333: LD_ADDR_VAR 0 7
65337: PUSH
65338: LD_VAR 0 2
65342: PUSH
65343: LD_VAR 0 4
65347: ARRAY
65348: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65349: LD_ADDR_VAR 0 5
65353: PUSH
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_VAR 0 2
65363: PUSH
65364: LD_VAR 0 4
65368: ARRAY
65369: PUSH
65370: LD_INT 1
65372: ARRAY
65373: PPUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_VAR 0 4
65383: ARRAY
65384: PUSH
65385: LD_INT 2
65387: ARRAY
65388: PPUSH
65389: CALL_OW 297
65393: ST_TO_ADDR
// end ; end ;
65394: GO 65283
65396: POP
65397: POP
// result := hex ;
65398: LD_ADDR_VAR 0 3
65402: PUSH
65403: LD_VAR 0 7
65407: ST_TO_ADDR
// end ;
65408: LD_VAR 0 3
65412: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65413: LD_INT 0
65415: PPUSH
65416: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65417: LD_VAR 0 1
65421: NOT
65422: PUSH
65423: LD_VAR 0 1
65427: PUSH
65428: LD_INT 21
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 23
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PPUSH
65452: CALL_OW 69
65456: IN
65457: NOT
65458: OR
65459: IFFALSE 65463
// exit ;
65461: GO 65510
// for i = 1 to 3 do
65463: LD_ADDR_VAR 0 3
65467: PUSH
65468: DOUBLE
65469: LD_INT 1
65471: DEC
65472: ST_TO_ADDR
65473: LD_INT 3
65475: PUSH
65476: FOR_TO
65477: IFFALSE 65508
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65479: LD_VAR 0 1
65483: PPUSH
65484: CALL_OW 250
65488: PPUSH
65489: LD_VAR 0 1
65493: PPUSH
65494: CALL_OW 251
65498: PPUSH
65499: LD_INT 1
65501: PPUSH
65502: CALL_OW 453
65506: GO 65476
65508: POP
65509: POP
// end ;
65510: LD_VAR 0 2
65514: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65515: LD_INT 0
65517: PPUSH
65518: PPUSH
65519: PPUSH
65520: PPUSH
65521: PPUSH
65522: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65523: LD_VAR 0 1
65527: NOT
65528: PUSH
65529: LD_VAR 0 2
65533: NOT
65534: OR
65535: PUSH
65536: LD_VAR 0 1
65540: PPUSH
65541: CALL_OW 314
65545: OR
65546: IFFALSE 65550
// exit ;
65548: GO 65991
// x := GetX ( enemy_unit ) ;
65550: LD_ADDR_VAR 0 7
65554: PUSH
65555: LD_VAR 0 2
65559: PPUSH
65560: CALL_OW 250
65564: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65565: LD_ADDR_VAR 0 8
65569: PUSH
65570: LD_VAR 0 2
65574: PPUSH
65575: CALL_OW 251
65579: ST_TO_ADDR
// if not x or not y then
65580: LD_VAR 0 7
65584: NOT
65585: PUSH
65586: LD_VAR 0 8
65590: NOT
65591: OR
65592: IFFALSE 65596
// exit ;
65594: GO 65991
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65596: LD_ADDR_VAR 0 6
65600: PUSH
65601: LD_VAR 0 7
65605: PPUSH
65606: LD_INT 0
65608: PPUSH
65609: LD_INT 4
65611: PPUSH
65612: CALL_OW 272
65616: PUSH
65617: LD_VAR 0 8
65621: PPUSH
65622: LD_INT 0
65624: PPUSH
65625: LD_INT 4
65627: PPUSH
65628: CALL_OW 273
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_VAR 0 7
65641: PPUSH
65642: LD_INT 1
65644: PPUSH
65645: LD_INT 4
65647: PPUSH
65648: CALL_OW 272
65652: PUSH
65653: LD_VAR 0 8
65657: PPUSH
65658: LD_INT 1
65660: PPUSH
65661: LD_INT 4
65663: PPUSH
65664: CALL_OW 273
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_VAR 0 7
65677: PPUSH
65678: LD_INT 2
65680: PPUSH
65681: LD_INT 4
65683: PPUSH
65684: CALL_OW 272
65688: PUSH
65689: LD_VAR 0 8
65693: PPUSH
65694: LD_INT 2
65696: PPUSH
65697: LD_INT 4
65699: PPUSH
65700: CALL_OW 273
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_VAR 0 7
65713: PPUSH
65714: LD_INT 3
65716: PPUSH
65717: LD_INT 4
65719: PPUSH
65720: CALL_OW 272
65724: PUSH
65725: LD_VAR 0 8
65729: PPUSH
65730: LD_INT 3
65732: PPUSH
65733: LD_INT 4
65735: PPUSH
65736: CALL_OW 273
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_VAR 0 7
65749: PPUSH
65750: LD_INT 4
65752: PPUSH
65753: LD_INT 4
65755: PPUSH
65756: CALL_OW 272
65760: PUSH
65761: LD_VAR 0 8
65765: PPUSH
65766: LD_INT 4
65768: PPUSH
65769: LD_INT 4
65771: PPUSH
65772: CALL_OW 273
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_VAR 0 7
65785: PPUSH
65786: LD_INT 5
65788: PPUSH
65789: LD_INT 4
65791: PPUSH
65792: CALL_OW 272
65796: PUSH
65797: LD_VAR 0 8
65801: PPUSH
65802: LD_INT 5
65804: PPUSH
65805: LD_INT 4
65807: PPUSH
65808: CALL_OW 273
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// for i = tmp downto 1 do
65825: LD_ADDR_VAR 0 4
65829: PUSH
65830: DOUBLE
65831: LD_VAR 0 6
65835: INC
65836: ST_TO_ADDR
65837: LD_INT 1
65839: PUSH
65840: FOR_DOWNTO
65841: IFFALSE 65942
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65843: LD_VAR 0 6
65847: PUSH
65848: LD_VAR 0 4
65852: ARRAY
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PPUSH
65858: LD_VAR 0 6
65862: PUSH
65863: LD_VAR 0 4
65867: ARRAY
65868: PUSH
65869: LD_INT 2
65871: ARRAY
65872: PPUSH
65873: CALL_OW 488
65877: NOT
65878: PUSH
65879: LD_VAR 0 6
65883: PUSH
65884: LD_VAR 0 4
65888: ARRAY
65889: PUSH
65890: LD_INT 1
65892: ARRAY
65893: PPUSH
65894: LD_VAR 0 6
65898: PUSH
65899: LD_VAR 0 4
65903: ARRAY
65904: PUSH
65905: LD_INT 2
65907: ARRAY
65908: PPUSH
65909: CALL_OW 428
65913: PUSH
65914: LD_INT 0
65916: NONEQUAL
65917: OR
65918: IFFALSE 65940
// tmp := Delete ( tmp , i ) ;
65920: LD_ADDR_VAR 0 6
65924: PUSH
65925: LD_VAR 0 6
65929: PPUSH
65930: LD_VAR 0 4
65934: PPUSH
65935: CALL_OW 3
65939: ST_TO_ADDR
65940: GO 65840
65942: POP
65943: POP
// j := GetClosestHex ( unit , tmp ) ;
65944: LD_ADDR_VAR 0 5
65948: PUSH
65949: LD_VAR 0 1
65953: PPUSH
65954: LD_VAR 0 6
65958: PPUSH
65959: CALL 65244 0 2
65963: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65964: LD_VAR 0 1
65968: PPUSH
65969: LD_VAR 0 5
65973: PUSH
65974: LD_INT 1
65976: ARRAY
65977: PPUSH
65978: LD_VAR 0 5
65982: PUSH
65983: LD_INT 2
65985: ARRAY
65986: PPUSH
65987: CALL_OW 111
// end ;
65991: LD_VAR 0 3
65995: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65996: LD_INT 0
65998: PPUSH
65999: PPUSH
66000: PPUSH
// uc_side = 0 ;
66001: LD_ADDR_OWVAR 20
66005: PUSH
66006: LD_INT 0
66008: ST_TO_ADDR
// uc_nation = 0 ;
66009: LD_ADDR_OWVAR 21
66013: PUSH
66014: LD_INT 0
66016: ST_TO_ADDR
// InitHc_All ( ) ;
66017: CALL_OW 584
// InitVc ;
66021: CALL_OW 20
// if mastodonts then
66025: LD_VAR 0 6
66029: IFFALSE 66096
// for i = 1 to mastodonts do
66031: LD_ADDR_VAR 0 11
66035: PUSH
66036: DOUBLE
66037: LD_INT 1
66039: DEC
66040: ST_TO_ADDR
66041: LD_VAR 0 6
66045: PUSH
66046: FOR_TO
66047: IFFALSE 66094
// begin vc_chassis := 31 ;
66049: LD_ADDR_OWVAR 37
66053: PUSH
66054: LD_INT 31
66056: ST_TO_ADDR
// vc_control := control_rider ;
66057: LD_ADDR_OWVAR 38
66061: PUSH
66062: LD_INT 4
66064: ST_TO_ADDR
// animal := CreateVehicle ;
66065: LD_ADDR_VAR 0 12
66069: PUSH
66070: CALL_OW 45
66074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66075: LD_VAR 0 12
66079: PPUSH
66080: LD_VAR 0 8
66084: PPUSH
66085: LD_INT 0
66087: PPUSH
66088: CALL 68284 0 3
// end ;
66092: GO 66046
66094: POP
66095: POP
// if horses then
66096: LD_VAR 0 5
66100: IFFALSE 66167
// for i = 1 to horses do
66102: LD_ADDR_VAR 0 11
66106: PUSH
66107: DOUBLE
66108: LD_INT 1
66110: DEC
66111: ST_TO_ADDR
66112: LD_VAR 0 5
66116: PUSH
66117: FOR_TO
66118: IFFALSE 66165
// begin hc_class := 21 ;
66120: LD_ADDR_OWVAR 28
66124: PUSH
66125: LD_INT 21
66127: ST_TO_ADDR
// hc_gallery :=  ;
66128: LD_ADDR_OWVAR 33
66132: PUSH
66133: LD_STRING 
66135: ST_TO_ADDR
// animal := CreateHuman ;
66136: LD_ADDR_VAR 0 12
66140: PUSH
66141: CALL_OW 44
66145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66146: LD_VAR 0 12
66150: PPUSH
66151: LD_VAR 0 8
66155: PPUSH
66156: LD_INT 0
66158: PPUSH
66159: CALL 68284 0 3
// end ;
66163: GO 66117
66165: POP
66166: POP
// if birds then
66167: LD_VAR 0 1
66171: IFFALSE 66238
// for i = 1 to birds do
66173: LD_ADDR_VAR 0 11
66177: PUSH
66178: DOUBLE
66179: LD_INT 1
66181: DEC
66182: ST_TO_ADDR
66183: LD_VAR 0 1
66187: PUSH
66188: FOR_TO
66189: IFFALSE 66236
// begin hc_class = 18 ;
66191: LD_ADDR_OWVAR 28
66195: PUSH
66196: LD_INT 18
66198: ST_TO_ADDR
// hc_gallery =  ;
66199: LD_ADDR_OWVAR 33
66203: PUSH
66204: LD_STRING 
66206: ST_TO_ADDR
// animal := CreateHuman ;
66207: LD_ADDR_VAR 0 12
66211: PUSH
66212: CALL_OW 44
66216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66217: LD_VAR 0 12
66221: PPUSH
66222: LD_VAR 0 8
66226: PPUSH
66227: LD_INT 0
66229: PPUSH
66230: CALL 68284 0 3
// end ;
66234: GO 66188
66236: POP
66237: POP
// if tigers then
66238: LD_VAR 0 2
66242: IFFALSE 66326
// for i = 1 to tigers do
66244: LD_ADDR_VAR 0 11
66248: PUSH
66249: DOUBLE
66250: LD_INT 1
66252: DEC
66253: ST_TO_ADDR
66254: LD_VAR 0 2
66258: PUSH
66259: FOR_TO
66260: IFFALSE 66324
// begin hc_class = class_tiger ;
66262: LD_ADDR_OWVAR 28
66266: PUSH
66267: LD_INT 14
66269: ST_TO_ADDR
// hc_gallery =  ;
66270: LD_ADDR_OWVAR 33
66274: PUSH
66275: LD_STRING 
66277: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66278: LD_ADDR_OWVAR 35
66282: PUSH
66283: LD_INT 7
66285: NEG
66286: PPUSH
66287: LD_INT 7
66289: PPUSH
66290: CALL_OW 12
66294: ST_TO_ADDR
// animal := CreateHuman ;
66295: LD_ADDR_VAR 0 12
66299: PUSH
66300: CALL_OW 44
66304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66305: LD_VAR 0 12
66309: PPUSH
66310: LD_VAR 0 8
66314: PPUSH
66315: LD_INT 0
66317: PPUSH
66318: CALL 68284 0 3
// end ;
66322: GO 66259
66324: POP
66325: POP
// if apemans then
66326: LD_VAR 0 3
66330: IFFALSE 66453
// for i = 1 to apemans do
66332: LD_ADDR_VAR 0 11
66336: PUSH
66337: DOUBLE
66338: LD_INT 1
66340: DEC
66341: ST_TO_ADDR
66342: LD_VAR 0 3
66346: PUSH
66347: FOR_TO
66348: IFFALSE 66451
// begin hc_class = class_apeman ;
66350: LD_ADDR_OWVAR 28
66354: PUSH
66355: LD_INT 12
66357: ST_TO_ADDR
// hc_gallery =  ;
66358: LD_ADDR_OWVAR 33
66362: PUSH
66363: LD_STRING 
66365: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66366: LD_ADDR_OWVAR 35
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PPUSH
66375: LD_INT 2
66377: PPUSH
66378: CALL_OW 12
66382: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66383: LD_ADDR_OWVAR 31
66387: PUSH
66388: LD_INT 1
66390: PPUSH
66391: LD_INT 3
66393: PPUSH
66394: CALL_OW 12
66398: PUSH
66399: LD_INT 1
66401: PPUSH
66402: LD_INT 3
66404: PPUSH
66405: CALL_OW 12
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// animal := CreateHuman ;
66422: LD_ADDR_VAR 0 12
66426: PUSH
66427: CALL_OW 44
66431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66432: LD_VAR 0 12
66436: PPUSH
66437: LD_VAR 0 8
66441: PPUSH
66442: LD_INT 0
66444: PPUSH
66445: CALL 68284 0 3
// end ;
66449: GO 66347
66451: POP
66452: POP
// if enchidnas then
66453: LD_VAR 0 4
66457: IFFALSE 66524
// for i = 1 to enchidnas do
66459: LD_ADDR_VAR 0 11
66463: PUSH
66464: DOUBLE
66465: LD_INT 1
66467: DEC
66468: ST_TO_ADDR
66469: LD_VAR 0 4
66473: PUSH
66474: FOR_TO
66475: IFFALSE 66522
// begin hc_class = 13 ;
66477: LD_ADDR_OWVAR 28
66481: PUSH
66482: LD_INT 13
66484: ST_TO_ADDR
// hc_gallery =  ;
66485: LD_ADDR_OWVAR 33
66489: PUSH
66490: LD_STRING 
66492: ST_TO_ADDR
// animal := CreateHuman ;
66493: LD_ADDR_VAR 0 12
66497: PUSH
66498: CALL_OW 44
66502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66503: LD_VAR 0 12
66507: PPUSH
66508: LD_VAR 0 8
66512: PPUSH
66513: LD_INT 0
66515: PPUSH
66516: CALL 68284 0 3
// end ;
66520: GO 66474
66522: POP
66523: POP
// if fishes then
66524: LD_VAR 0 7
66528: IFFALSE 66595
// for i = 1 to fishes do
66530: LD_ADDR_VAR 0 11
66534: PUSH
66535: DOUBLE
66536: LD_INT 1
66538: DEC
66539: ST_TO_ADDR
66540: LD_VAR 0 7
66544: PUSH
66545: FOR_TO
66546: IFFALSE 66593
// begin hc_class = 20 ;
66548: LD_ADDR_OWVAR 28
66552: PUSH
66553: LD_INT 20
66555: ST_TO_ADDR
// hc_gallery =  ;
66556: LD_ADDR_OWVAR 33
66560: PUSH
66561: LD_STRING 
66563: ST_TO_ADDR
// animal := CreateHuman ;
66564: LD_ADDR_VAR 0 12
66568: PUSH
66569: CALL_OW 44
66573: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66574: LD_VAR 0 12
66578: PPUSH
66579: LD_VAR 0 9
66583: PPUSH
66584: LD_INT 0
66586: PPUSH
66587: CALL 68284 0 3
// end ;
66591: GO 66545
66593: POP
66594: POP
// end ;
66595: LD_VAR 0 10
66599: RET
// export function WantHeal ( sci , unit ) ; begin
66600: LD_INT 0
66602: PPUSH
// if GetTaskList ( sci ) > 0 then
66603: LD_VAR 0 1
66607: PPUSH
66608: CALL_OW 437
66612: PUSH
66613: LD_INT 0
66615: GREATER
66616: IFFALSE 66686
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66618: LD_VAR 0 1
66622: PPUSH
66623: CALL_OW 437
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PUSH
66632: LD_INT 1
66634: ARRAY
66635: PUSH
66636: LD_STRING l
66638: EQUAL
66639: PUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 437
66649: PUSH
66650: LD_INT 1
66652: ARRAY
66653: PUSH
66654: LD_INT 4
66656: ARRAY
66657: PUSH
66658: LD_VAR 0 2
66662: EQUAL
66663: AND
66664: IFFALSE 66676
// result := true else
66666: LD_ADDR_VAR 0 3
66670: PUSH
66671: LD_INT 1
66673: ST_TO_ADDR
66674: GO 66684
// result := false ;
66676: LD_ADDR_VAR 0 3
66680: PUSH
66681: LD_INT 0
66683: ST_TO_ADDR
// end else
66684: GO 66694
// result := false ;
66686: LD_ADDR_VAR 0 3
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
// end ;
66694: LD_VAR 0 3
66698: RET
// export function HealTarget ( sci ) ; begin
66699: LD_INT 0
66701: PPUSH
// if not sci then
66702: LD_VAR 0 1
66706: NOT
66707: IFFALSE 66711
// exit ;
66709: GO 66776
// result := 0 ;
66711: LD_ADDR_VAR 0 2
66715: PUSH
66716: LD_INT 0
66718: ST_TO_ADDR
// if GetTaskList ( sci ) then
66719: LD_VAR 0 1
66723: PPUSH
66724: CALL_OW 437
66728: IFFALSE 66776
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66730: LD_VAR 0 1
66734: PPUSH
66735: CALL_OW 437
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: PUSH
66744: LD_INT 1
66746: ARRAY
66747: PUSH
66748: LD_STRING l
66750: EQUAL
66751: IFFALSE 66776
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66753: LD_ADDR_VAR 0 2
66757: PUSH
66758: LD_VAR 0 1
66762: PPUSH
66763: CALL_OW 437
66767: PUSH
66768: LD_INT 1
66770: ARRAY
66771: PUSH
66772: LD_INT 4
66774: ARRAY
66775: ST_TO_ADDR
// end ;
66776: LD_VAR 0 2
66780: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
// if not base_units then
66787: LD_VAR 0 1
66791: NOT
66792: IFFALSE 66796
// exit ;
66794: GO 66883
// result := false ;
66796: LD_ADDR_VAR 0 2
66800: PUSH
66801: LD_INT 0
66803: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66804: LD_ADDR_VAR 0 5
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: LD_INT 21
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PPUSH
66824: CALL_OW 72
66828: ST_TO_ADDR
// if not tmp then
66829: LD_VAR 0 5
66833: NOT
66834: IFFALSE 66838
// exit ;
66836: GO 66883
// for i in tmp do
66838: LD_ADDR_VAR 0 3
66842: PUSH
66843: LD_VAR 0 5
66847: PUSH
66848: FOR_IN
66849: IFFALSE 66881
// begin result := EnemyInRange ( i , 22 ) ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_VAR 0 3
66860: PPUSH
66861: LD_INT 22
66863: PPUSH
66864: CALL 65119 0 2
66868: ST_TO_ADDR
// if result then
66869: LD_VAR 0 2
66873: IFFALSE 66879
// exit ;
66875: POP
66876: POP
66877: GO 66883
// end ;
66879: GO 66848
66881: POP
66882: POP
// end ;
66883: LD_VAR 0 2
66887: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66888: LD_INT 0
66890: PPUSH
66891: PPUSH
// if not units then
66892: LD_VAR 0 1
66896: NOT
66897: IFFALSE 66901
// exit ;
66899: GO 66971
// result := [ ] ;
66901: LD_ADDR_VAR 0 3
66905: PUSH
66906: EMPTY
66907: ST_TO_ADDR
// for i in units do
66908: LD_ADDR_VAR 0 4
66912: PUSH
66913: LD_VAR 0 1
66917: PUSH
66918: FOR_IN
66919: IFFALSE 66969
// if GetTag ( i ) = tag then
66921: LD_VAR 0 4
66925: PPUSH
66926: CALL_OW 110
66930: PUSH
66931: LD_VAR 0 2
66935: EQUAL
66936: IFFALSE 66967
// result := Replace ( result , result + 1 , i ) ;
66938: LD_ADDR_VAR 0 3
66942: PUSH
66943: LD_VAR 0 3
66947: PPUSH
66948: LD_VAR 0 3
66952: PUSH
66953: LD_INT 1
66955: PLUS
66956: PPUSH
66957: LD_VAR 0 4
66961: PPUSH
66962: CALL_OW 1
66966: ST_TO_ADDR
66967: GO 66918
66969: POP
66970: POP
// end ;
66971: LD_VAR 0 3
66975: RET
// export function IsDriver ( un ) ; begin
66976: LD_INT 0
66978: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66979: LD_ADDR_VAR 0 2
66983: PUSH
66984: LD_VAR 0 1
66988: PUSH
66989: LD_INT 55
66991: PUSH
66992: EMPTY
66993: LIST
66994: PPUSH
66995: CALL_OW 69
66999: IN
67000: ST_TO_ADDR
// end ;
67001: LD_VAR 0 2
67005: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67006: LD_INT 0
67008: PPUSH
67009: PPUSH
// list := [ ] ;
67010: LD_ADDR_VAR 0 5
67014: PUSH
67015: EMPTY
67016: ST_TO_ADDR
// case d of 0 :
67017: LD_VAR 0 3
67021: PUSH
67022: LD_INT 0
67024: DOUBLE
67025: EQUAL
67026: IFTRUE 67030
67028: GO 67163
67030: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67031: LD_ADDR_VAR 0 5
67035: PUSH
67036: LD_VAR 0 1
67040: PUSH
67041: LD_INT 4
67043: MINUS
67044: PUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_INT 4
67052: MINUS
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_INT 3
67069: MINUS
67070: PUSH
67071: LD_VAR 0 2
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: PUSH
67084: LD_VAR 0 1
67088: PUSH
67089: LD_INT 4
67091: PLUS
67092: PUSH
67093: LD_VAR 0 2
67097: PUSH
67098: LD_INT 4
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: PUSH
67106: LD_VAR 0 1
67110: PUSH
67111: LD_INT 3
67113: PLUS
67114: PUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_INT 3
67122: PLUS
67123: PUSH
67124: LD_INT 5
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: LIST
67131: PUSH
67132: LD_VAR 0 1
67136: PUSH
67137: LD_VAR 0 2
67141: PUSH
67142: LD_INT 4
67144: PLUS
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// end ; 1 :
67161: GO 67861
67163: LD_INT 1
67165: DOUBLE
67166: EQUAL
67167: IFTRUE 67171
67169: GO 67304
67171: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67172: LD_ADDR_VAR 0 5
67176: PUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_INT 4
67189: MINUS
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: PUSH
67199: LD_VAR 0 1
67203: PUSH
67204: LD_INT 3
67206: MINUS
67207: PUSH
67208: LD_VAR 0 2
67212: PUSH
67213: LD_INT 3
67215: MINUS
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: PUSH
67225: LD_VAR 0 1
67229: PUSH
67230: LD_INT 4
67232: MINUS
67233: PUSH
67234: LD_VAR 0 2
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: PUSH
67247: LD_VAR 0 1
67251: PUSH
67252: LD_VAR 0 2
67256: PUSH
67257: LD_INT 3
67259: PLUS
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: PUSH
67269: LD_VAR 0 1
67273: PUSH
67274: LD_INT 4
67276: PLUS
67277: PUSH
67278: LD_VAR 0 2
67282: PUSH
67283: LD_INT 4
67285: PLUS
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// end ; 2 :
67302: GO 67861
67304: LD_INT 2
67306: DOUBLE
67307: EQUAL
67308: IFTRUE 67312
67310: GO 67441
67312: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67313: LD_ADDR_VAR 0 5
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_VAR 0 2
67327: PUSH
67328: LD_INT 3
67330: MINUS
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_VAR 0 1
67344: PUSH
67345: LD_INT 4
67347: PLUS
67348: PUSH
67349: LD_VAR 0 2
67353: PUSH
67354: LD_INT 4
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: PUSH
67362: LD_VAR 0 1
67366: PUSH
67367: LD_VAR 0 2
67371: PUSH
67372: LD_INT 4
67374: PLUS
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: LIST
67383: PUSH
67384: LD_VAR 0 1
67388: PUSH
67389: LD_INT 3
67391: MINUS
67392: PUSH
67393: LD_VAR 0 2
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: PUSH
67406: LD_VAR 0 1
67410: PUSH
67411: LD_INT 4
67413: MINUS
67414: PUSH
67415: LD_VAR 0 2
67419: PUSH
67420: LD_INT 4
67422: MINUS
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: ST_TO_ADDR
// end ; 3 :
67439: GO 67861
67441: LD_INT 3
67443: DOUBLE
67444: EQUAL
67445: IFTRUE 67449
67447: GO 67582
67449: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67450: LD_ADDR_VAR 0 5
67454: PUSH
67455: LD_VAR 0 1
67459: PUSH
67460: LD_INT 3
67462: PLUS
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 4
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: PUSH
67477: LD_VAR 0 1
67481: PUSH
67482: LD_INT 4
67484: PLUS
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: LD_INT 4
67493: PLUS
67494: PUSH
67495: LD_INT 5
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: LD_VAR 0 1
67507: PUSH
67508: LD_INT 4
67510: MINUS
67511: PUSH
67512: LD_VAR 0 2
67516: PUSH
67517: LD_INT 1
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: PUSH
67525: LD_VAR 0 1
67529: PUSH
67530: LD_VAR 0 2
67534: PUSH
67535: LD_INT 4
67537: MINUS
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: PUSH
67547: LD_VAR 0 1
67551: PUSH
67552: LD_INT 3
67554: MINUS
67555: PUSH
67556: LD_VAR 0 2
67560: PUSH
67561: LD_INT 3
67563: MINUS
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: ST_TO_ADDR
// end ; 4 :
67580: GO 67861
67582: LD_INT 4
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67590
67588: GO 67723
67590: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67591: LD_ADDR_VAR 0 5
67595: PUSH
67596: LD_VAR 0 1
67600: PUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_INT 4
67608: PLUS
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: PUSH
67618: LD_VAR 0 1
67622: PUSH
67623: LD_INT 3
67625: PLUS
67626: PUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_INT 3
67634: PLUS
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: LD_INT 4
67651: PLUS
67652: PUSH
67653: LD_VAR 0 2
67657: PUSH
67658: LD_INT 4
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: PUSH
67666: LD_VAR 0 1
67670: PUSH
67671: LD_VAR 0 2
67675: PUSH
67676: LD_INT 3
67678: MINUS
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: LIST
67687: PUSH
67688: LD_VAR 0 1
67692: PUSH
67693: LD_INT 4
67695: MINUS
67696: PUSH
67697: LD_VAR 0 2
67701: PUSH
67702: LD_INT 4
67704: MINUS
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: ST_TO_ADDR
// end ; 5 :
67721: GO 67861
67723: LD_INT 5
67725: DOUBLE
67726: EQUAL
67727: IFTRUE 67731
67729: GO 67860
67731: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67732: LD_ADDR_VAR 0 5
67736: PUSH
67737: LD_VAR 0 1
67741: PUSH
67742: LD_INT 4
67744: MINUS
67745: PUSH
67746: LD_VAR 0 2
67750: PUSH
67751: LD_INT 1
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: PUSH
67759: LD_VAR 0 1
67763: PUSH
67764: LD_VAR 0 2
67768: PUSH
67769: LD_INT 4
67771: MINUS
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: PUSH
67781: LD_VAR 0 1
67785: PUSH
67786: LD_INT 4
67788: PLUS
67789: PUSH
67790: LD_VAR 0 2
67794: PUSH
67795: LD_INT 4
67797: PLUS
67798: PUSH
67799: LD_INT 5
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: PUSH
67807: LD_VAR 0 1
67811: PUSH
67812: LD_INT 3
67814: PLUS
67815: PUSH
67816: LD_VAR 0 2
67820: PUSH
67821: LD_INT 4
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: LIST
67828: PUSH
67829: LD_VAR 0 1
67833: PUSH
67834: LD_VAR 0 2
67838: PUSH
67839: LD_INT 3
67841: PLUS
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: ST_TO_ADDR
// end ; end ;
67858: GO 67861
67860: POP
// result := list ;
67861: LD_ADDR_VAR 0 4
67865: PUSH
67866: LD_VAR 0 5
67870: ST_TO_ADDR
// end ;
67871: LD_VAR 0 4
67875: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
67880: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67881: LD_VAR 0 1
67885: NOT
67886: PUSH
67887: LD_VAR 0 2
67891: PUSH
67892: LD_INT 1
67894: PUSH
67895: LD_INT 2
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: IN
67910: NOT
67911: OR
67912: IFFALSE 67916
// exit ;
67914: GO 68008
// tmp := [ ] ;
67916: LD_ADDR_VAR 0 5
67920: PUSH
67921: EMPTY
67922: ST_TO_ADDR
// for i in units do
67923: LD_ADDR_VAR 0 4
67927: PUSH
67928: LD_VAR 0 1
67932: PUSH
67933: FOR_IN
67934: IFFALSE 67977
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67936: LD_ADDR_VAR 0 5
67940: PUSH
67941: LD_VAR 0 5
67945: PPUSH
67946: LD_VAR 0 5
67950: PUSH
67951: LD_INT 1
67953: PLUS
67954: PPUSH
67955: LD_VAR 0 4
67959: PPUSH
67960: LD_VAR 0 2
67964: PPUSH
67965: CALL_OW 259
67969: PPUSH
67970: CALL_OW 2
67974: ST_TO_ADDR
67975: GO 67933
67977: POP
67978: POP
// if not tmp then
67979: LD_VAR 0 5
67983: NOT
67984: IFFALSE 67988
// exit ;
67986: GO 68008
// result := SortListByListDesc ( units , tmp ) ;
67988: LD_ADDR_VAR 0 3
67992: PUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: LD_VAR 0 5
68002: PPUSH
68003: CALL_OW 77
68007: ST_TO_ADDR
// end ;
68008: LD_VAR 0 3
68012: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68013: LD_INT 0
68015: PPUSH
68016: PPUSH
68017: PPUSH
// result := false ;
68018: LD_ADDR_VAR 0 3
68022: PUSH
68023: LD_INT 0
68025: ST_TO_ADDR
// x := GetX ( building ) ;
68026: LD_ADDR_VAR 0 4
68030: PUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: CALL_OW 250
68040: ST_TO_ADDR
// y := GetY ( building ) ;
68041: LD_ADDR_VAR 0 5
68045: PUSH
68046: LD_VAR 0 2
68050: PPUSH
68051: CALL_OW 251
68055: ST_TO_ADDR
// if not building or not x or not y then
68056: LD_VAR 0 2
68060: NOT
68061: PUSH
68062: LD_VAR 0 4
68066: NOT
68067: OR
68068: PUSH
68069: LD_VAR 0 5
68073: NOT
68074: OR
68075: IFFALSE 68079
// exit ;
68077: GO 68171
// if GetTaskList ( unit ) then
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 437
68088: IFFALSE 68171
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68090: LD_STRING e
68092: PUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: CALL_OW 437
68102: PUSH
68103: LD_INT 1
68105: ARRAY
68106: PUSH
68107: LD_INT 1
68109: ARRAY
68110: EQUAL
68111: PUSH
68112: LD_VAR 0 4
68116: PUSH
68117: LD_VAR 0 1
68121: PPUSH
68122: CALL_OW 437
68126: PUSH
68127: LD_INT 1
68129: ARRAY
68130: PUSH
68131: LD_INT 2
68133: ARRAY
68134: EQUAL
68135: AND
68136: PUSH
68137: LD_VAR 0 5
68141: PUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: CALL_OW 437
68151: PUSH
68152: LD_INT 1
68154: ARRAY
68155: PUSH
68156: LD_INT 3
68158: ARRAY
68159: EQUAL
68160: AND
68161: IFFALSE 68171
// result := true end ;
68163: LD_ADDR_VAR 0 3
68167: PUSH
68168: LD_INT 1
68170: ST_TO_ADDR
// end ;
68171: LD_VAR 0 3
68175: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68176: LD_INT 0
68178: PPUSH
// result := false ;
68179: LD_ADDR_VAR 0 4
68183: PUSH
68184: LD_INT 0
68186: ST_TO_ADDR
// if GetTaskList ( unit ) then
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 437
68196: IFFALSE 68279
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68198: LD_STRING M
68200: PUSH
68201: LD_VAR 0 1
68205: PPUSH
68206: CALL_OW 437
68210: PUSH
68211: LD_INT 1
68213: ARRAY
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: EQUAL
68219: PUSH
68220: LD_VAR 0 2
68224: PUSH
68225: LD_VAR 0 1
68229: PPUSH
68230: CALL_OW 437
68234: PUSH
68235: LD_INT 1
68237: ARRAY
68238: PUSH
68239: LD_INT 2
68241: ARRAY
68242: EQUAL
68243: AND
68244: PUSH
68245: LD_VAR 0 3
68249: PUSH
68250: LD_VAR 0 1
68254: PPUSH
68255: CALL_OW 437
68259: PUSH
68260: LD_INT 1
68262: ARRAY
68263: PUSH
68264: LD_INT 3
68266: ARRAY
68267: EQUAL
68268: AND
68269: IFFALSE 68279
// result := true ;
68271: LD_ADDR_VAR 0 4
68275: PUSH
68276: LD_INT 1
68278: ST_TO_ADDR
// end ; end ;
68279: LD_VAR 0 4
68283: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68284: LD_INT 0
68286: PPUSH
68287: PPUSH
68288: PPUSH
68289: PPUSH
// if not unit or not area then
68290: LD_VAR 0 1
68294: NOT
68295: PUSH
68296: LD_VAR 0 2
68300: NOT
68301: OR
68302: IFFALSE 68306
// exit ;
68304: GO 68470
// tmp := AreaToList ( area , i ) ;
68306: LD_ADDR_VAR 0 6
68310: PUSH
68311: LD_VAR 0 2
68315: PPUSH
68316: LD_VAR 0 5
68320: PPUSH
68321: CALL_OW 517
68325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68326: LD_ADDR_VAR 0 5
68330: PUSH
68331: DOUBLE
68332: LD_INT 1
68334: DEC
68335: ST_TO_ADDR
68336: LD_VAR 0 6
68340: PUSH
68341: LD_INT 1
68343: ARRAY
68344: PUSH
68345: FOR_TO
68346: IFFALSE 68468
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68348: LD_ADDR_VAR 0 7
68352: PUSH
68353: LD_VAR 0 6
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PUSH
68362: LD_VAR 0 5
68366: ARRAY
68367: PUSH
68368: LD_VAR 0 6
68372: PUSH
68373: LD_INT 2
68375: ARRAY
68376: PUSH
68377: LD_VAR 0 5
68381: ARRAY
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68387: LD_VAR 0 7
68391: PUSH
68392: LD_INT 1
68394: ARRAY
68395: PPUSH
68396: LD_VAR 0 7
68400: PUSH
68401: LD_INT 2
68403: ARRAY
68404: PPUSH
68405: CALL_OW 428
68409: PUSH
68410: LD_INT 0
68412: EQUAL
68413: IFFALSE 68466
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68415: LD_VAR 0 1
68419: PPUSH
68420: LD_VAR 0 7
68424: PUSH
68425: LD_INT 1
68427: ARRAY
68428: PPUSH
68429: LD_VAR 0 7
68433: PUSH
68434: LD_INT 2
68436: ARRAY
68437: PPUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: CALL_OW 48
// result := IsPlaced ( unit ) ;
68447: LD_ADDR_VAR 0 4
68451: PUSH
68452: LD_VAR 0 1
68456: PPUSH
68457: CALL_OW 305
68461: ST_TO_ADDR
// exit ;
68462: POP
68463: POP
68464: GO 68470
// end ; end ;
68466: GO 68345
68468: POP
68469: POP
// end ;
68470: LD_VAR 0 4
68474: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68475: LD_INT 0
68477: PPUSH
68478: PPUSH
68479: PPUSH
// if not side or side > 8 then
68480: LD_VAR 0 1
68484: NOT
68485: PUSH
68486: LD_VAR 0 1
68490: PUSH
68491: LD_INT 8
68493: GREATER
68494: OR
68495: IFFALSE 68499
// exit ;
68497: GO 68686
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68499: LD_ADDR_VAR 0 4
68503: PUSH
68504: LD_INT 22
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 21
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PPUSH
68530: CALL_OW 69
68534: ST_TO_ADDR
// if not tmp then
68535: LD_VAR 0 4
68539: NOT
68540: IFFALSE 68544
// exit ;
68542: GO 68686
// enable_addtolog := true ;
68544: LD_ADDR_OWVAR 81
68548: PUSH
68549: LD_INT 1
68551: ST_TO_ADDR
// AddToLog ( [ ) ;
68552: LD_STRING [
68554: PPUSH
68555: CALL_OW 561
// for i in tmp do
68559: LD_ADDR_VAR 0 3
68563: PUSH
68564: LD_VAR 0 4
68568: PUSH
68569: FOR_IN
68570: IFFALSE 68677
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68572: LD_STRING [
68574: PUSH
68575: LD_VAR 0 3
68579: PPUSH
68580: CALL_OW 266
68584: STR
68585: PUSH
68586: LD_STRING , 
68588: STR
68589: PUSH
68590: LD_VAR 0 3
68594: PPUSH
68595: CALL_OW 250
68599: STR
68600: PUSH
68601: LD_STRING , 
68603: STR
68604: PUSH
68605: LD_VAR 0 3
68609: PPUSH
68610: CALL_OW 251
68614: STR
68615: PUSH
68616: LD_STRING , 
68618: STR
68619: PUSH
68620: LD_VAR 0 3
68624: PPUSH
68625: CALL_OW 254
68629: STR
68630: PUSH
68631: LD_STRING , 
68633: STR
68634: PUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_INT 1
68642: PPUSH
68643: CALL_OW 268
68647: STR
68648: PUSH
68649: LD_STRING , 
68651: STR
68652: PUSH
68653: LD_VAR 0 3
68657: PPUSH
68658: LD_INT 2
68660: PPUSH
68661: CALL_OW 268
68665: STR
68666: PUSH
68667: LD_STRING ],
68669: STR
68670: PPUSH
68671: CALL_OW 561
// end ;
68675: GO 68569
68677: POP
68678: POP
// AddToLog ( ]; ) ;
68679: LD_STRING ];
68681: PPUSH
68682: CALL_OW 561
// end ;
68686: LD_VAR 0 2
68690: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68691: LD_INT 0
68693: PPUSH
68694: PPUSH
68695: PPUSH
68696: PPUSH
68697: PPUSH
// if not area or not rate or not max then
68698: LD_VAR 0 1
68702: NOT
68703: PUSH
68704: LD_VAR 0 2
68708: NOT
68709: OR
68710: PUSH
68711: LD_VAR 0 4
68715: NOT
68716: OR
68717: IFFALSE 68721
// exit ;
68719: GO 68913
// while 1 do
68721: LD_INT 1
68723: IFFALSE 68913
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68725: LD_ADDR_VAR 0 9
68729: PUSH
68730: LD_VAR 0 1
68734: PPUSH
68735: LD_INT 1
68737: PPUSH
68738: CALL_OW 287
68742: PUSH
68743: LD_INT 10
68745: MUL
68746: ST_TO_ADDR
// r := rate / 10 ;
68747: LD_ADDR_VAR 0 7
68751: PUSH
68752: LD_VAR 0 2
68756: PUSH
68757: LD_INT 10
68759: DIVREAL
68760: ST_TO_ADDR
// time := 1 1$00 ;
68761: LD_ADDR_VAR 0 8
68765: PUSH
68766: LD_INT 2100
68768: ST_TO_ADDR
// if amount < min then
68769: LD_VAR 0 9
68773: PUSH
68774: LD_VAR 0 3
68778: LESS
68779: IFFALSE 68797
// r := r * 2 else
68781: LD_ADDR_VAR 0 7
68785: PUSH
68786: LD_VAR 0 7
68790: PUSH
68791: LD_INT 2
68793: MUL
68794: ST_TO_ADDR
68795: GO 68823
// if amount > max then
68797: LD_VAR 0 9
68801: PUSH
68802: LD_VAR 0 4
68806: GREATER
68807: IFFALSE 68823
// r := r / 2 ;
68809: LD_ADDR_VAR 0 7
68813: PUSH
68814: LD_VAR 0 7
68818: PUSH
68819: LD_INT 2
68821: DIVREAL
68822: ST_TO_ADDR
// time := time / r ;
68823: LD_ADDR_VAR 0 8
68827: PUSH
68828: LD_VAR 0 8
68832: PUSH
68833: LD_VAR 0 7
68837: DIVREAL
68838: ST_TO_ADDR
// if time < 0 then
68839: LD_VAR 0 8
68843: PUSH
68844: LD_INT 0
68846: LESS
68847: IFFALSE 68864
// time := time * - 1 ;
68849: LD_ADDR_VAR 0 8
68853: PUSH
68854: LD_VAR 0 8
68858: PUSH
68859: LD_INT 1
68861: NEG
68862: MUL
68863: ST_TO_ADDR
// wait ( time ) ;
68864: LD_VAR 0 8
68868: PPUSH
68869: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68873: LD_INT 35
68875: PPUSH
68876: LD_INT 875
68878: PPUSH
68879: CALL_OW 12
68883: PPUSH
68884: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68888: LD_INT 1
68890: PPUSH
68891: LD_INT 5
68893: PPUSH
68894: CALL_OW 12
68898: PPUSH
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_INT 1
68906: PPUSH
68907: CALL_OW 55
// end ;
68911: GO 68721
// end ;
68913: LD_VAR 0 5
68917: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68918: LD_INT 0
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
68925: PPUSH
68926: PPUSH
68927: PPUSH
// if not turrets or not factories then
68928: LD_VAR 0 1
68932: NOT
68933: PUSH
68934: LD_VAR 0 2
68938: NOT
68939: OR
68940: IFFALSE 68944
// exit ;
68942: GO 69251
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68944: LD_ADDR_VAR 0 10
68948: PUSH
68949: LD_INT 5
68951: PUSH
68952: LD_INT 6
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: PUSH
68962: LD_INT 4
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: LD_INT 5
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 24
68986: PUSH
68987: LD_INT 25
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 23
68996: PUSH
68997: LD_INT 27
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 42
69010: PUSH
69011: LD_INT 43
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 44
69020: PUSH
69021: LD_INT 46
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 45
69030: PUSH
69031: LD_INT 47
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: LIST
69047: ST_TO_ADDR
// result := [ ] ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: EMPTY
69054: ST_TO_ADDR
// for i in turrets do
69055: LD_ADDR_VAR 0 4
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: FOR_IN
69066: IFFALSE 69249
// begin nat := GetNation ( i ) ;
69068: LD_ADDR_VAR 0 7
69072: PUSH
69073: LD_VAR 0 4
69077: PPUSH
69078: CALL_OW 248
69082: ST_TO_ADDR
// weapon := 0 ;
69083: LD_ADDR_VAR 0 8
69087: PUSH
69088: LD_INT 0
69090: ST_TO_ADDR
// if not nat then
69091: LD_VAR 0 7
69095: NOT
69096: IFFALSE 69100
// continue ;
69098: GO 69065
// for j in list [ nat ] do
69100: LD_ADDR_VAR 0 5
69104: PUSH
69105: LD_VAR 0 10
69109: PUSH
69110: LD_VAR 0 7
69114: ARRAY
69115: PUSH
69116: FOR_IN
69117: IFFALSE 69158
// if GetBWeapon ( i ) = j [ 1 ] then
69119: LD_VAR 0 4
69123: PPUSH
69124: CALL_OW 269
69128: PUSH
69129: LD_VAR 0 5
69133: PUSH
69134: LD_INT 1
69136: ARRAY
69137: EQUAL
69138: IFFALSE 69156
// begin weapon := j [ 2 ] ;
69140: LD_ADDR_VAR 0 8
69144: PUSH
69145: LD_VAR 0 5
69149: PUSH
69150: LD_INT 2
69152: ARRAY
69153: ST_TO_ADDR
// break ;
69154: GO 69158
// end ;
69156: GO 69116
69158: POP
69159: POP
// if not weapon then
69160: LD_VAR 0 8
69164: NOT
69165: IFFALSE 69169
// continue ;
69167: GO 69065
// for k in factories do
69169: LD_ADDR_VAR 0 6
69173: PUSH
69174: LD_VAR 0 2
69178: PUSH
69179: FOR_IN
69180: IFFALSE 69245
// begin weapons := AvailableWeaponList ( k ) ;
69182: LD_ADDR_VAR 0 9
69186: PUSH
69187: LD_VAR 0 6
69191: PPUSH
69192: CALL_OW 478
69196: ST_TO_ADDR
// if not weapons then
69197: LD_VAR 0 9
69201: NOT
69202: IFFALSE 69206
// continue ;
69204: GO 69179
// if weapon in weapons then
69206: LD_VAR 0 8
69210: PUSH
69211: LD_VAR 0 9
69215: IN
69216: IFFALSE 69243
// begin result := [ i , weapon ] ;
69218: LD_ADDR_VAR 0 3
69222: PUSH
69223: LD_VAR 0 4
69227: PUSH
69228: LD_VAR 0 8
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// exit ;
69237: POP
69238: POP
69239: POP
69240: POP
69241: GO 69251
// end ; end ;
69243: GO 69179
69245: POP
69246: POP
// end ;
69247: GO 69065
69249: POP
69250: POP
// end ;
69251: LD_VAR 0 3
69255: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69256: LD_INT 0
69258: PPUSH
// if not side or side > 8 then
69259: LD_VAR 0 3
69263: NOT
69264: PUSH
69265: LD_VAR 0 3
69269: PUSH
69270: LD_INT 8
69272: GREATER
69273: OR
69274: IFFALSE 69278
// exit ;
69276: GO 69337
// if not range then
69278: LD_VAR 0 4
69282: NOT
69283: IFFALSE 69294
// range := - 12 ;
69285: LD_ADDR_VAR 0 4
69289: PUSH
69290: LD_INT 12
69292: NEG
69293: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69294: LD_VAR 0 1
69298: PPUSH
69299: LD_VAR 0 2
69303: PPUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: LD_VAR 0 4
69313: PPUSH
69314: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69318: LD_VAR 0 1
69322: PPUSH
69323: LD_VAR 0 2
69327: PPUSH
69328: LD_VAR 0 3
69332: PPUSH
69333: CALL_OW 331
// end ;
69337: LD_VAR 0 5
69341: RET
// export function Video ( mode ) ; begin
69342: LD_INT 0
69344: PPUSH
// ingame_video = mode ;
69345: LD_ADDR_OWVAR 52
69349: PUSH
69350: LD_VAR 0 1
69354: ST_TO_ADDR
// interface_hidden = mode ;
69355: LD_ADDR_OWVAR 54
69359: PUSH
69360: LD_VAR 0 1
69364: ST_TO_ADDR
// end ;
69365: LD_VAR 0 2
69369: RET
// export function Join ( array , element ) ; begin
69370: LD_INT 0
69372: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69373: LD_ADDR_VAR 0 3
69377: PUSH
69378: LD_VAR 0 1
69382: PPUSH
69383: LD_VAR 0 1
69387: PUSH
69388: LD_INT 1
69390: PLUS
69391: PPUSH
69392: LD_VAR 0 2
69396: PPUSH
69397: CALL_OW 1
69401: ST_TO_ADDR
// end ;
69402: LD_VAR 0 3
69406: RET
// export function JoinUnion ( array , element ) ; begin
69407: LD_INT 0
69409: PPUSH
// result := array union element ;
69410: LD_ADDR_VAR 0 3
69414: PUSH
69415: LD_VAR 0 1
69419: PUSH
69420: LD_VAR 0 2
69424: UNION
69425: ST_TO_ADDR
// end ;
69426: LD_VAR 0 3
69430: RET
// export function GetBehemoths ( side ) ; begin
69431: LD_INT 0
69433: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69434: LD_ADDR_VAR 0 2
69438: PUSH
69439: LD_INT 22
69441: PUSH
69442: LD_VAR 0 1
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 31
69453: PUSH
69454: LD_INT 25
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PPUSH
69465: CALL_OW 69
69469: ST_TO_ADDR
// end ;
69470: LD_VAR 0 2
69474: RET
// export function Shuffle ( array ) ; var i , index ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
// result := [ ] ;
69480: LD_ADDR_VAR 0 2
69484: PUSH
69485: EMPTY
69486: ST_TO_ADDR
// if not array then
69487: LD_VAR 0 1
69491: NOT
69492: IFFALSE 69496
// exit ;
69494: GO 69595
// Randomize ;
69496: CALL_OW 10
// for i = array downto 1 do
69500: LD_ADDR_VAR 0 3
69504: PUSH
69505: DOUBLE
69506: LD_VAR 0 1
69510: INC
69511: ST_TO_ADDR
69512: LD_INT 1
69514: PUSH
69515: FOR_DOWNTO
69516: IFFALSE 69593
// begin index := rand ( 1 , array ) ;
69518: LD_ADDR_VAR 0 4
69522: PUSH
69523: LD_INT 1
69525: PPUSH
69526: LD_VAR 0 1
69530: PPUSH
69531: CALL_OW 12
69535: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69536: LD_ADDR_VAR 0 2
69540: PUSH
69541: LD_VAR 0 2
69545: PPUSH
69546: LD_VAR 0 2
69550: PUSH
69551: LD_INT 1
69553: PLUS
69554: PPUSH
69555: LD_VAR 0 1
69559: PUSH
69560: LD_VAR 0 4
69564: ARRAY
69565: PPUSH
69566: CALL_OW 2
69570: ST_TO_ADDR
// array := Delete ( array , index ) ;
69571: LD_ADDR_VAR 0 1
69575: PUSH
69576: LD_VAR 0 1
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: CALL_OW 3
69590: ST_TO_ADDR
// end ;
69591: GO 69515
69593: POP
69594: POP
// end ;
69595: LD_VAR 0 2
69599: RET
// export function GetBaseMaterials ( base ) ; begin
69600: LD_INT 0
69602: PPUSH
// result := [ 0 , 0 , 0 ] ;
69603: LD_ADDR_VAR 0 2
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// if not base then
69622: LD_VAR 0 1
69626: NOT
69627: IFFALSE 69631
// exit ;
69629: GO 69680
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69631: LD_ADDR_VAR 0 2
69635: PUSH
69636: LD_VAR 0 1
69640: PPUSH
69641: LD_INT 1
69643: PPUSH
69644: CALL_OW 275
69648: PUSH
69649: LD_VAR 0 1
69653: PPUSH
69654: LD_INT 2
69656: PPUSH
69657: CALL_OW 275
69661: PUSH
69662: LD_VAR 0 1
69666: PPUSH
69667: LD_INT 3
69669: PPUSH
69670: CALL_OW 275
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: ST_TO_ADDR
// end ;
69680: LD_VAR 0 2
69684: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69685: LD_INT 0
69687: PPUSH
69688: PPUSH
// result := array ;
69689: LD_ADDR_VAR 0 3
69693: PUSH
69694: LD_VAR 0 1
69698: ST_TO_ADDR
// if size > 0 then
69699: LD_VAR 0 2
69703: PUSH
69704: LD_INT 0
69706: GREATER
69707: IFFALSE 69753
// for i := array downto size do
69709: LD_ADDR_VAR 0 4
69713: PUSH
69714: DOUBLE
69715: LD_VAR 0 1
69719: INC
69720: ST_TO_ADDR
69721: LD_VAR 0 2
69725: PUSH
69726: FOR_DOWNTO
69727: IFFALSE 69751
// result := Delete ( result , result ) ;
69729: LD_ADDR_VAR 0 3
69733: PUSH
69734: LD_VAR 0 3
69738: PPUSH
69739: LD_VAR 0 3
69743: PPUSH
69744: CALL_OW 3
69748: ST_TO_ADDR
69749: GO 69726
69751: POP
69752: POP
// end ;
69753: LD_VAR 0 3
69757: RET
// export function ComExit ( unit ) ; var tmp ; begin
69758: LD_INT 0
69760: PPUSH
69761: PPUSH
// if not IsInUnit ( unit ) then
69762: LD_VAR 0 1
69766: PPUSH
69767: CALL_OW 310
69771: NOT
69772: IFFALSE 69776
// exit ;
69774: GO 69836
// tmp := IsInUnit ( unit ) ;
69776: LD_ADDR_VAR 0 3
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: CALL_OW 310
69790: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69791: LD_VAR 0 3
69795: PPUSH
69796: CALL_OW 247
69800: PUSH
69801: LD_INT 2
69803: EQUAL
69804: IFFALSE 69817
// ComExitVehicle ( unit ) else
69806: LD_VAR 0 1
69810: PPUSH
69811: CALL_OW 121
69815: GO 69826
// ComExitBuilding ( unit ) ;
69817: LD_VAR 0 1
69821: PPUSH
69822: CALL_OW 122
// result := tmp ;
69826: LD_ADDR_VAR 0 2
69830: PUSH
69831: LD_VAR 0 3
69835: ST_TO_ADDR
// end ;
69836: LD_VAR 0 2
69840: RET
// export function ComExitAll ( units ) ; var i ; begin
69841: LD_INT 0
69843: PPUSH
69844: PPUSH
// if not units then
69845: LD_VAR 0 1
69849: NOT
69850: IFFALSE 69854
// exit ;
69852: GO 69880
// for i in units do
69854: LD_ADDR_VAR 0 3
69858: PUSH
69859: LD_VAR 0 1
69863: PUSH
69864: FOR_IN
69865: IFFALSE 69878
// ComExit ( i ) ;
69867: LD_VAR 0 3
69871: PPUSH
69872: CALL 69758 0 1
69876: GO 69864
69878: POP
69879: POP
// end ;
69880: LD_VAR 0 2
69884: RET
// export function ResetHc ; begin
69885: LD_INT 0
69887: PPUSH
// InitHc ;
69888: CALL_OW 19
// hc_importance := 0 ;
69892: LD_ADDR_OWVAR 32
69896: PUSH
69897: LD_INT 0
69899: ST_TO_ADDR
// end ;
69900: LD_VAR 0 1
69904: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69905: LD_INT 0
69907: PPUSH
69908: PPUSH
69909: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69910: LD_ADDR_VAR 0 6
69914: PUSH
69915: LD_VAR 0 1
69919: PUSH
69920: LD_VAR 0 3
69924: PLUS
69925: PUSH
69926: LD_INT 2
69928: DIV
69929: ST_TO_ADDR
// if _x < 0 then
69930: LD_VAR 0 6
69934: PUSH
69935: LD_INT 0
69937: LESS
69938: IFFALSE 69955
// _x := _x * - 1 ;
69940: LD_ADDR_VAR 0 6
69944: PUSH
69945: LD_VAR 0 6
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: MUL
69954: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69955: LD_ADDR_VAR 0 7
69959: PUSH
69960: LD_VAR 0 2
69964: PUSH
69965: LD_VAR 0 4
69969: PLUS
69970: PUSH
69971: LD_INT 2
69973: DIV
69974: ST_TO_ADDR
// if _y < 0 then
69975: LD_VAR 0 7
69979: PUSH
69980: LD_INT 0
69982: LESS
69983: IFFALSE 70000
// _y := _y * - 1 ;
69985: LD_ADDR_VAR 0 7
69989: PUSH
69990: LD_VAR 0 7
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: MUL
69999: ST_TO_ADDR
// result := [ _x , _y ] ;
70000: LD_ADDR_VAR 0 5
70004: PUSH
70005: LD_VAR 0 6
70009: PUSH
70010: LD_VAR 0 7
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: ST_TO_ADDR
// end ;
70019: LD_VAR 0 5
70023: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70024: LD_INT 0
70026: PPUSH
70027: PPUSH
70028: PPUSH
70029: PPUSH
// task := GetTaskList ( unit ) ;
70030: LD_ADDR_VAR 0 7
70034: PUSH
70035: LD_VAR 0 1
70039: PPUSH
70040: CALL_OW 437
70044: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70045: LD_VAR 0 7
70049: NOT
70050: PUSH
70051: LD_VAR 0 1
70055: PPUSH
70056: LD_VAR 0 2
70060: PPUSH
70061: CALL_OW 308
70065: NOT
70066: AND
70067: IFFALSE 70071
// exit ;
70069: GO 70189
// if IsInArea ( unit , area ) then
70071: LD_VAR 0 1
70075: PPUSH
70076: LD_VAR 0 2
70080: PPUSH
70081: CALL_OW 308
70085: IFFALSE 70103
// begin ComMoveToArea ( unit , goAway ) ;
70087: LD_VAR 0 1
70091: PPUSH
70092: LD_VAR 0 3
70096: PPUSH
70097: CALL_OW 113
// exit ;
70101: GO 70189
// end ; if task [ 1 ] [ 1 ] <> M then
70103: LD_VAR 0 7
70107: PUSH
70108: LD_INT 1
70110: ARRAY
70111: PUSH
70112: LD_INT 1
70114: ARRAY
70115: PUSH
70116: LD_STRING M
70118: NONEQUAL
70119: IFFALSE 70123
// exit ;
70121: GO 70189
// x := task [ 1 ] [ 2 ] ;
70123: LD_ADDR_VAR 0 5
70127: PUSH
70128: LD_VAR 0 7
70132: PUSH
70133: LD_INT 1
70135: ARRAY
70136: PUSH
70137: LD_INT 2
70139: ARRAY
70140: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70141: LD_ADDR_VAR 0 6
70145: PUSH
70146: LD_VAR 0 7
70150: PUSH
70151: LD_INT 1
70153: ARRAY
70154: PUSH
70155: LD_INT 3
70157: ARRAY
70158: ST_TO_ADDR
// if InArea ( x , y , area ) then
70159: LD_VAR 0 5
70163: PPUSH
70164: LD_VAR 0 6
70168: PPUSH
70169: LD_VAR 0 2
70173: PPUSH
70174: CALL_OW 309
70178: IFFALSE 70189
// ComStop ( unit ) ;
70180: LD_VAR 0 1
70184: PPUSH
70185: CALL_OW 141
// end ;
70189: LD_VAR 0 4
70193: RET
// export function Abs ( value ) ; begin
70194: LD_INT 0
70196: PPUSH
// result := value ;
70197: LD_ADDR_VAR 0 2
70201: PUSH
70202: LD_VAR 0 1
70206: ST_TO_ADDR
// if value < 0 then
70207: LD_VAR 0 1
70211: PUSH
70212: LD_INT 0
70214: LESS
70215: IFFALSE 70232
// result := value * - 1 ;
70217: LD_ADDR_VAR 0 2
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_INT 1
70229: NEG
70230: MUL
70231: ST_TO_ADDR
// end ;
70232: LD_VAR 0 2
70236: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70237: LD_INT 0
70239: PPUSH
70240: PPUSH
70241: PPUSH
70242: PPUSH
70243: PPUSH
70244: PPUSH
70245: PPUSH
70246: PPUSH
// if not unit or not building then
70247: LD_VAR 0 1
70251: NOT
70252: PUSH
70253: LD_VAR 0 2
70257: NOT
70258: OR
70259: IFFALSE 70263
// exit ;
70261: GO 70489
// x := GetX ( building ) ;
70263: LD_ADDR_VAR 0 4
70267: PUSH
70268: LD_VAR 0 2
70272: PPUSH
70273: CALL_OW 250
70277: ST_TO_ADDR
// y := GetY ( building ) ;
70278: LD_ADDR_VAR 0 6
70282: PUSH
70283: LD_VAR 0 2
70287: PPUSH
70288: CALL_OW 251
70292: ST_TO_ADDR
// d := GetDir ( building ) ;
70293: LD_ADDR_VAR 0 8
70297: PUSH
70298: LD_VAR 0 2
70302: PPUSH
70303: CALL_OW 254
70307: ST_TO_ADDR
// r := 4 ;
70308: LD_ADDR_VAR 0 9
70312: PUSH
70313: LD_INT 4
70315: ST_TO_ADDR
// for i := 1 to 5 do
70316: LD_ADDR_VAR 0 10
70320: PUSH
70321: DOUBLE
70322: LD_INT 1
70324: DEC
70325: ST_TO_ADDR
70326: LD_INT 5
70328: PUSH
70329: FOR_TO
70330: IFFALSE 70487
// begin _x := ShiftX ( x , d , r + i ) ;
70332: LD_ADDR_VAR 0 5
70336: PUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: LD_VAR 0 8
70346: PPUSH
70347: LD_VAR 0 9
70351: PUSH
70352: LD_VAR 0 10
70356: PLUS
70357: PPUSH
70358: CALL_OW 272
70362: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70363: LD_ADDR_VAR 0 7
70367: PUSH
70368: LD_VAR 0 6
70372: PPUSH
70373: LD_VAR 0 8
70377: PPUSH
70378: LD_VAR 0 9
70382: PUSH
70383: LD_VAR 0 10
70387: PLUS
70388: PPUSH
70389: CALL_OW 273
70393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70394: LD_VAR 0 5
70398: PPUSH
70399: LD_VAR 0 7
70403: PPUSH
70404: CALL_OW 488
70408: PUSH
70409: LD_VAR 0 5
70413: PPUSH
70414: LD_VAR 0 7
70418: PPUSH
70419: CALL_OW 428
70423: PPUSH
70424: CALL_OW 247
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: LD_INT 2
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: IN
70439: NOT
70440: AND
70441: IFFALSE 70485
// begin ComMoveXY ( unit , _x , _y ) ;
70443: LD_VAR 0 1
70447: PPUSH
70448: LD_VAR 0 5
70452: PPUSH
70453: LD_VAR 0 7
70457: PPUSH
70458: CALL_OW 111
// result := [ _x , _y ] ;
70462: LD_ADDR_VAR 0 3
70466: PUSH
70467: LD_VAR 0 5
70471: PUSH
70472: LD_VAR 0 7
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: ST_TO_ADDR
// exit ;
70481: POP
70482: POP
70483: GO 70489
// end ; end ;
70485: GO 70329
70487: POP
70488: POP
// end ;
70489: LD_VAR 0 3
70493: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70494: LD_INT 0
70496: PPUSH
70497: PPUSH
70498: PPUSH
// result := 0 ;
70499: LD_ADDR_VAR 0 3
70503: PUSH
70504: LD_INT 0
70506: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70507: LD_VAR 0 1
70511: PUSH
70512: LD_INT 0
70514: LESS
70515: PUSH
70516: LD_VAR 0 1
70520: PUSH
70521: LD_INT 8
70523: GREATER
70524: OR
70525: PUSH
70526: LD_VAR 0 2
70530: PUSH
70531: LD_INT 0
70533: LESS
70534: OR
70535: PUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_INT 8
70543: GREATER
70544: OR
70545: IFFALSE 70549
// exit ;
70547: GO 70624
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70549: LD_ADDR_VAR 0 4
70553: PUSH
70554: LD_INT 22
70556: PUSH
70557: LD_VAR 0 2
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PPUSH
70566: CALL_OW 69
70570: PUSH
70571: FOR_IN
70572: IFFALSE 70622
// begin un := UnitShoot ( i ) ;
70574: LD_ADDR_VAR 0 5
70578: PUSH
70579: LD_VAR 0 4
70583: PPUSH
70584: CALL_OW 504
70588: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70589: LD_VAR 0 5
70593: PPUSH
70594: CALL_OW 255
70598: PUSH
70599: LD_VAR 0 1
70603: EQUAL
70604: IFFALSE 70620
// begin result := un ;
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: LD_VAR 0 5
70615: ST_TO_ADDR
// exit ;
70616: POP
70617: POP
70618: GO 70624
// end ; end ;
70620: GO 70571
70622: POP
70623: POP
// end ;
70624: LD_VAR 0 3
70628: RET
// export function GetCargoBay ( units ) ; begin
70629: LD_INT 0
70631: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70632: LD_ADDR_VAR 0 2
70636: PUSH
70637: LD_VAR 0 1
70641: PPUSH
70642: LD_INT 2
70644: PUSH
70645: LD_INT 34
70647: PUSH
70648: LD_INT 12
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 34
70657: PUSH
70658: LD_INT 51
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 34
70667: PUSH
70668: LD_INT 32
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 34
70677: PUSH
70678: LD_EXP 128
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: PPUSH
70694: CALL_OW 72
70698: ST_TO_ADDR
// end ;
70699: LD_VAR 0 2
70703: RET
// export function Negate ( value ) ; begin
70704: LD_INT 0
70706: PPUSH
// result := not value ;
70707: LD_ADDR_VAR 0 2
70711: PUSH
70712: LD_VAR 0 1
70716: NOT
70717: ST_TO_ADDR
// end ;
70718: LD_VAR 0 2
70722: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
70723: LD_INT 0
70725: PPUSH
// if x1 = x2 then
70726: LD_VAR 0 1
70730: PUSH
70731: LD_VAR 0 3
70735: EQUAL
70736: IFFALSE 70770
// begin if y1 > y2 then
70738: LD_VAR 0 2
70742: PUSH
70743: LD_VAR 0 4
70747: GREATER
70748: IFFALSE 70760
// result := 0 else
70750: LD_ADDR_VAR 0 5
70754: PUSH
70755: LD_INT 0
70757: ST_TO_ADDR
70758: GO 70768
// result := 3 ;
70760: LD_ADDR_VAR 0 5
70764: PUSH
70765: LD_INT 3
70767: ST_TO_ADDR
// exit ;
70768: GO 70856
// end ; if y1 = y2 then
70770: LD_VAR 0 2
70774: PUSH
70775: LD_VAR 0 4
70779: EQUAL
70780: IFFALSE 70814
// begin if x1 > x2 then
70782: LD_VAR 0 1
70786: PUSH
70787: LD_VAR 0 3
70791: GREATER
70792: IFFALSE 70804
// result := 1 else
70794: LD_ADDR_VAR 0 5
70798: PUSH
70799: LD_INT 1
70801: ST_TO_ADDR
70802: GO 70812
// result := 4 ;
70804: LD_ADDR_VAR 0 5
70808: PUSH
70809: LD_INT 4
70811: ST_TO_ADDR
// exit ;
70812: GO 70856
// end ; if x1 > x2 and y1 > y2 then
70814: LD_VAR 0 1
70818: PUSH
70819: LD_VAR 0 3
70823: GREATER
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: LD_VAR 0 4
70834: GREATER
70835: AND
70836: IFFALSE 70848
// result := 2 else
70838: LD_ADDR_VAR 0 5
70842: PUSH
70843: LD_INT 2
70845: ST_TO_ADDR
70846: GO 70856
// result := 5 ;
70848: LD_ADDR_VAR 0 5
70852: PUSH
70853: LD_INT 5
70855: ST_TO_ADDR
// end ;
70856: LD_VAR 0 5
70860: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70861: LD_INT 0
70863: PPUSH
70864: PPUSH
// if not driver or not IsInUnit ( driver ) then
70865: LD_VAR 0 1
70869: NOT
70870: PUSH
70871: LD_VAR 0 1
70875: PPUSH
70876: CALL_OW 310
70880: NOT
70881: OR
70882: IFFALSE 70886
// exit ;
70884: GO 70976
// vehicle := IsInUnit ( driver ) ;
70886: LD_ADDR_VAR 0 3
70890: PUSH
70891: LD_VAR 0 1
70895: PPUSH
70896: CALL_OW 310
70900: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70901: LD_VAR 0 1
70905: PPUSH
70906: LD_STRING \
70908: PUSH
70909: LD_INT 0
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 0
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 0
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: PUSH
70936: LD_STRING E
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 0
70944: PUSH
70945: LD_VAR 0 3
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PPUSH
70972: CALL_OW 446
// end ;
70976: LD_VAR 0 2
70980: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70981: LD_INT 0
70983: PPUSH
70984: PPUSH
// if not driver or not IsInUnit ( driver ) then
70985: LD_VAR 0 1
70989: NOT
70990: PUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 310
71000: NOT
71001: OR
71002: IFFALSE 71006
// exit ;
71004: GO 71096
// vehicle := IsInUnit ( driver ) ;
71006: LD_ADDR_VAR 0 3
71010: PUSH
71011: LD_VAR 0 1
71015: PPUSH
71016: CALL_OW 310
71020: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71021: LD_VAR 0 1
71025: PPUSH
71026: LD_STRING \
71028: PUSH
71029: LD_INT 0
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: PUSH
71056: LD_STRING E
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: LD_VAR 0 3
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PPUSH
71092: CALL_OW 447
// end ;
71096: LD_VAR 0 2
71100: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71101: LD_INT 0
71103: PPUSH
71104: PPUSH
71105: PPUSH
// tmp := [ ] ;
71106: LD_ADDR_VAR 0 5
71110: PUSH
71111: EMPTY
71112: ST_TO_ADDR
// for i in units do
71113: LD_ADDR_VAR 0 4
71117: PUSH
71118: LD_VAR 0 1
71122: PUSH
71123: FOR_IN
71124: IFFALSE 71162
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71126: LD_ADDR_VAR 0 5
71130: PUSH
71131: LD_VAR 0 5
71135: PPUSH
71136: LD_VAR 0 5
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: PPUSH
71145: LD_VAR 0 4
71149: PPUSH
71150: CALL_OW 256
71154: PPUSH
71155: CALL_OW 2
71159: ST_TO_ADDR
71160: GO 71123
71162: POP
71163: POP
// if not tmp then
71164: LD_VAR 0 5
71168: NOT
71169: IFFALSE 71173
// exit ;
71171: GO 71221
// if asc then
71173: LD_VAR 0 2
71177: IFFALSE 71201
// result := SortListByListAsc ( units , tmp ) else
71179: LD_ADDR_VAR 0 3
71183: PUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: LD_VAR 0 5
71193: PPUSH
71194: CALL_OW 76
71198: ST_TO_ADDR
71199: GO 71221
// result := SortListByListDesc ( units , tmp ) ;
71201: LD_ADDR_VAR 0 3
71205: PUSH
71206: LD_VAR 0 1
71210: PPUSH
71211: LD_VAR 0 5
71215: PPUSH
71216: CALL_OW 77
71220: ST_TO_ADDR
// end ;
71221: LD_VAR 0 3
71225: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71226: LD_INT 0
71228: PPUSH
71229: PPUSH
// task := GetTaskList ( mech ) ;
71230: LD_ADDR_VAR 0 4
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: CALL_OW 437
71244: ST_TO_ADDR
// if not task then
71245: LD_VAR 0 4
71249: NOT
71250: IFFALSE 71254
// exit ;
71252: GO 71296
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71254: LD_ADDR_VAR 0 3
71258: PUSH
71259: LD_VAR 0 4
71263: PUSH
71264: LD_INT 1
71266: ARRAY
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: PUSH
71272: LD_STRING r
71274: EQUAL
71275: PUSH
71276: LD_VAR 0 4
71280: PUSH
71281: LD_INT 1
71283: ARRAY
71284: PUSH
71285: LD_INT 4
71287: ARRAY
71288: PUSH
71289: LD_VAR 0 2
71293: EQUAL
71294: AND
71295: ST_TO_ADDR
// end ;
71296: LD_VAR 0 3
71300: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71301: LD_INT 0
71303: PPUSH
// SetDir ( unit , d ) ;
71304: LD_VAR 0 1
71308: PPUSH
71309: LD_VAR 0 4
71313: PPUSH
71314: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71318: LD_VAR 0 1
71322: PPUSH
71323: LD_VAR 0 2
71327: PPUSH
71328: LD_VAR 0 3
71332: PPUSH
71333: LD_VAR 0 5
71337: PPUSH
71338: CALL_OW 48
// end ;
71342: LD_VAR 0 6
71346: RET
// export function ToNaturalNumber ( number ) ; begin
71347: LD_INT 0
71349: PPUSH
// result := number div 1 ;
71350: LD_ADDR_VAR 0 2
71354: PUSH
71355: LD_VAR 0 1
71359: PUSH
71360: LD_INT 1
71362: DIV
71363: ST_TO_ADDR
// if number < 0 then
71364: LD_VAR 0 1
71368: PUSH
71369: LD_INT 0
71371: LESS
71372: IFFALSE 71382
// result := 0 ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_INT 0
71381: ST_TO_ADDR
// end ;
71382: LD_VAR 0 2
71386: RET
// export function SortByClass ( units , class ) ; var un ; begin
71387: LD_INT 0
71389: PPUSH
71390: PPUSH
// if not units or not class then
71391: LD_VAR 0 1
71395: NOT
71396: PUSH
71397: LD_VAR 0 2
71401: NOT
71402: OR
71403: IFFALSE 71407
// exit ;
71405: GO 71502
// result := [ ] ;
71407: LD_ADDR_VAR 0 3
71411: PUSH
71412: EMPTY
71413: ST_TO_ADDR
// for un in units do
71414: LD_ADDR_VAR 0 4
71418: PUSH
71419: LD_VAR 0 1
71423: PUSH
71424: FOR_IN
71425: IFFALSE 71500
// if GetClass ( un ) = class then
71427: LD_VAR 0 4
71431: PPUSH
71432: CALL_OW 257
71436: PUSH
71437: LD_VAR 0 2
71441: EQUAL
71442: IFFALSE 71469
// result := Insert ( result , 1 , un ) else
71444: LD_ADDR_VAR 0 3
71448: PUSH
71449: LD_VAR 0 3
71453: PPUSH
71454: LD_INT 1
71456: PPUSH
71457: LD_VAR 0 4
71461: PPUSH
71462: CALL_OW 2
71466: ST_TO_ADDR
71467: GO 71498
// result := Replace ( result , result + 1 , un ) ;
71469: LD_ADDR_VAR 0 3
71473: PUSH
71474: LD_VAR 0 3
71478: PPUSH
71479: LD_VAR 0 3
71483: PUSH
71484: LD_INT 1
71486: PLUS
71487: PPUSH
71488: LD_VAR 0 4
71492: PPUSH
71493: CALL_OW 1
71497: ST_TO_ADDR
71498: GO 71424
71500: POP
71501: POP
// end ;
71502: LD_VAR 0 3
71506: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71507: LD_INT 0
71509: PPUSH
71510: PPUSH
71511: PPUSH
71512: PPUSH
71513: PPUSH
71514: PPUSH
71515: PPUSH
// result := [ ] ;
71516: LD_ADDR_VAR 0 4
71520: PUSH
71521: EMPTY
71522: ST_TO_ADDR
// if x - r < 0 then
71523: LD_VAR 0 1
71527: PUSH
71528: LD_VAR 0 3
71532: MINUS
71533: PUSH
71534: LD_INT 0
71536: LESS
71537: IFFALSE 71549
// min_x := 0 else
71539: LD_ADDR_VAR 0 8
71543: PUSH
71544: LD_INT 0
71546: ST_TO_ADDR
71547: GO 71565
// min_x := x - r ;
71549: LD_ADDR_VAR 0 8
71553: PUSH
71554: LD_VAR 0 1
71558: PUSH
71559: LD_VAR 0 3
71563: MINUS
71564: ST_TO_ADDR
// if y - r < 0 then
71565: LD_VAR 0 2
71569: PUSH
71570: LD_VAR 0 3
71574: MINUS
71575: PUSH
71576: LD_INT 0
71578: LESS
71579: IFFALSE 71591
// min_y := 0 else
71581: LD_ADDR_VAR 0 7
71585: PUSH
71586: LD_INT 0
71588: ST_TO_ADDR
71589: GO 71607
// min_y := y - r ;
71591: LD_ADDR_VAR 0 7
71595: PUSH
71596: LD_VAR 0 2
71600: PUSH
71601: LD_VAR 0 3
71605: MINUS
71606: ST_TO_ADDR
// max_x := x + r ;
71607: LD_ADDR_VAR 0 9
71611: PUSH
71612: LD_VAR 0 1
71616: PUSH
71617: LD_VAR 0 3
71621: PLUS
71622: ST_TO_ADDR
// max_y := y + r ;
71623: LD_ADDR_VAR 0 10
71627: PUSH
71628: LD_VAR 0 2
71632: PUSH
71633: LD_VAR 0 3
71637: PLUS
71638: ST_TO_ADDR
// for _x = min_x to max_x do
71639: LD_ADDR_VAR 0 5
71643: PUSH
71644: DOUBLE
71645: LD_VAR 0 8
71649: DEC
71650: ST_TO_ADDR
71651: LD_VAR 0 9
71655: PUSH
71656: FOR_TO
71657: IFFALSE 71758
// for _y = min_y to max_y do
71659: LD_ADDR_VAR 0 6
71663: PUSH
71664: DOUBLE
71665: LD_VAR 0 7
71669: DEC
71670: ST_TO_ADDR
71671: LD_VAR 0 10
71675: PUSH
71676: FOR_TO
71677: IFFALSE 71754
// begin if not ValidHex ( _x , _y ) then
71679: LD_VAR 0 5
71683: PPUSH
71684: LD_VAR 0 6
71688: PPUSH
71689: CALL_OW 488
71693: NOT
71694: IFFALSE 71698
// continue ;
71696: GO 71676
// if GetResourceTypeXY ( _x , _y ) then
71698: LD_VAR 0 5
71702: PPUSH
71703: LD_VAR 0 6
71707: PPUSH
71708: CALL_OW 283
71712: IFFALSE 71752
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71714: LD_ADDR_VAR 0 4
71718: PUSH
71719: LD_VAR 0 4
71723: PPUSH
71724: LD_VAR 0 4
71728: PUSH
71729: LD_INT 1
71731: PLUS
71732: PPUSH
71733: LD_VAR 0 5
71737: PUSH
71738: LD_VAR 0 6
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PPUSH
71747: CALL_OW 1
71751: ST_TO_ADDR
// end ;
71752: GO 71676
71754: POP
71755: POP
71756: GO 71656
71758: POP
71759: POP
// end ;
71760: LD_VAR 0 4
71764: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
71765: LD_INT 0
71767: PPUSH
71768: PPUSH
71769: PPUSH
71770: PPUSH
71771: PPUSH
71772: PPUSH
// if not units then
71773: LD_VAR 0 1
71777: NOT
71778: IFFALSE 71782
// exit ;
71780: GO 72183
// result := UnitFilter ( units , [ f_ok ] ) ;
71782: LD_ADDR_VAR 0 3
71786: PUSH
71787: LD_VAR 0 1
71791: PPUSH
71792: LD_INT 50
71794: PUSH
71795: EMPTY
71796: LIST
71797: PPUSH
71798: CALL_OW 72
71802: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71803: LD_ADDR_VAR 0 7
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_INT 1
71815: ARRAY
71816: PPUSH
71817: CALL_OW 255
71821: ST_TO_ADDR
// if not result then
71822: LD_VAR 0 3
71826: NOT
71827: IFFALSE 71831
// exit ;
71829: GO 72183
// for i in result do
71831: LD_ADDR_VAR 0 4
71835: PUSH
71836: LD_VAR 0 3
71840: PUSH
71841: FOR_IN
71842: IFFALSE 72181
// begin tag := GetTag ( i ) + 1 ;
71844: LD_ADDR_VAR 0 8
71848: PUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: CALL_OW 110
71858: PUSH
71859: LD_INT 1
71861: PLUS
71862: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71863: LD_ADDR_VAR 0 6
71867: PUSH
71868: LD_VAR 0 4
71872: PPUSH
71873: CALL_OW 250
71877: PPUSH
71878: LD_VAR 0 4
71882: PPUSH
71883: CALL_OW 251
71887: PPUSH
71888: LD_INT 6
71890: PPUSH
71891: CALL 71507 0 3
71895: ST_TO_ADDR
// if cr then
71896: LD_VAR 0 6
71900: IFFALSE 71939
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71902: LD_VAR 0 4
71906: PPUSH
71907: LD_VAR 0 6
71911: PUSH
71912: LD_INT 1
71914: ARRAY
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_VAR 0 6
71924: PUSH
71925: LD_INT 1
71927: ARRAY
71928: PUSH
71929: LD_INT 2
71931: ARRAY
71932: PPUSH
71933: CALL_OW 116
71937: GO 72179
// if path > tag then
71939: LD_VAR 0 2
71943: PUSH
71944: LD_VAR 0 8
71948: GREATER
71949: IFFALSE 72127
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_INT 81
71958: PUSH
71959: LD_VAR 0 7
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 91
71970: PUSH
71971: LD_VAR 0 4
71975: PUSH
71976: LD_INT 12
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: LIST
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PPUSH
71988: CALL_OW 69
71992: ST_TO_ADDR
// if enemy then
71993: LD_VAR 0 5
71997: IFFALSE 72025
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71999: LD_VAR 0 4
72003: PPUSH
72004: LD_VAR 0 5
72008: PPUSH
72009: LD_VAR 0 4
72013: PPUSH
72014: CALL_OW 74
72018: PPUSH
72019: CALL_OW 115
72023: GO 72125
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72025: LD_VAR 0 4
72029: PPUSH
72030: LD_VAR 0 2
72034: PUSH
72035: LD_VAR 0 8
72039: ARRAY
72040: PUSH
72041: LD_INT 1
72043: ARRAY
72044: PPUSH
72045: LD_VAR 0 2
72049: PUSH
72050: LD_VAR 0 8
72054: ARRAY
72055: PUSH
72056: LD_INT 2
72058: ARRAY
72059: PPUSH
72060: CALL_OW 297
72064: PUSH
72065: LD_INT 6
72067: GREATER
72068: IFFALSE 72111
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72070: LD_VAR 0 4
72074: PPUSH
72075: LD_VAR 0 2
72079: PUSH
72080: LD_VAR 0 8
72084: ARRAY
72085: PUSH
72086: LD_INT 1
72088: ARRAY
72089: PPUSH
72090: LD_VAR 0 2
72094: PUSH
72095: LD_VAR 0 8
72099: ARRAY
72100: PUSH
72101: LD_INT 2
72103: ARRAY
72104: PPUSH
72105: CALL_OW 114
72109: GO 72125
// SetTag ( i , tag ) ;
72111: LD_VAR 0 4
72115: PPUSH
72116: LD_VAR 0 8
72120: PPUSH
72121: CALL_OW 109
// end else
72125: GO 72179
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72127: LD_ADDR_VAR 0 5
72131: PUSH
72132: LD_INT 81
72134: PUSH
72135: LD_VAR 0 7
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PPUSH
72144: CALL_OW 69
72148: ST_TO_ADDR
// if enemy then
72149: LD_VAR 0 5
72153: IFFALSE 72179
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72155: LD_VAR 0 4
72159: PPUSH
72160: LD_VAR 0 5
72164: PPUSH
72165: LD_VAR 0 4
72169: PPUSH
72170: CALL_OW 74
72174: PPUSH
72175: CALL_OW 115
// end ; end ;
72179: GO 71841
72181: POP
72182: POP
// end ;
72183: LD_VAR 0 3
72187: RET
