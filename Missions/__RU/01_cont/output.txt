// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareNature ;
  24: CALL 12163 0 0
// PrepareRussian ;
  28: CALL 11461 0 0
// PrepareAmericans ;
  32: CALL 11034 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 24
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 26
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 27
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 30
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 31
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 32
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 33
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 34
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 35
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 36
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 37
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 38
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 29
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 34
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 34
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 43
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 43
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 43
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 43
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 43
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 43
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 43
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 43
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 43
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 43
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 43
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 43
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1911
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 43
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 43
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1911
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PPUSH
1612: LD_EXP 10
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_EXP 10
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL_OW 73
1634: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_EXP 10
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: LD_EXP 10
1653: PUSH
1654: LD_INT 2
1656: ARRAY
1657: PPUSH
1658: CALL_OW 111
// case nearUnit of Burlak :
1662: LD_VAR 0 1
1666: PUSH
1667: LD_EXP 43
1671: DOUBLE
1672: EQUAL
1673: IFTRUE 1677
1675: GO 1692
1677: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1678: LD_EXP 43
1682: PPUSH
1683: LD_STRING D3-Bur-2a
1685: PPUSH
1686: CALL_OW 88
1690: GO 1784
1692: LD_EXP 48
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1702
1700: GO 1717
1702: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1703: LD_EXP 48
1707: PPUSH
1708: LD_STRING D2a-Bel-1
1710: PPUSH
1711: CALL_OW 88
1715: GO 1784
1717: LD_EXP 50
1721: DOUBLE
1722: EQUAL
1723: IFTRUE 1727
1725: GO 1742
1727: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1728: LD_EXP 50
1732: PPUSH
1733: LD_STRING D2a-Kir-1
1735: PPUSH
1736: CALL_OW 88
1740: GO 1784
1742: POP
// if GetSex ( nearUnit ) = sex_male then
1743: LD_VAR 0 1
1747: PPUSH
1748: CALL_OW 258
1752: PUSH
1753: LD_INT 1
1755: EQUAL
1756: IFFALSE 1772
// Say ( nearUnit , D2a-RSol1-1 ) else
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_STRING D2a-RSol1-1
1765: PPUSH
1766: CALL_OW 88
1770: GO 1784
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1772: LD_VAR 0 1
1776: PPUSH
1777: LD_STRING D2a-RFSol1-1
1779: PPUSH
1780: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1784: LD_EXP 51
1788: PPUSH
1789: CALL_OW 255
1793: PUSH
1794: LD_INT 3
1796: EQUAL
1797: PUSH
1798: LD_EXP 51
1802: PPUSH
1803: CALL_OW 302
1807: AND
1808: IFFALSE 1822
// Say ( Gnyevko , D2a-Gny-1 ) ;
1810: LD_EXP 51
1814: PPUSH
1815: LD_STRING D2a-Gny-1
1817: PPUSH
1818: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1822: LD_EXP 9
1826: PUSH
1827: LD_EXP 8
1831: EQUAL
1832: IFFALSE 1846
// Say ( Burlak , D3-Bur-2 ) ;
1834: LD_EXP 43
1838: PPUSH
1839: LD_STRING D3-Bur-2
1841: PPUSH
1842: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1846: LD_EXP 51
1850: PPUSH
1851: CALL_OW 255
1855: PUSH
1856: LD_INT 8
1858: EQUAL
1859: IFFALSE 1911
// begin Say ( Burlak , D12-Bur-1 ) ;
1861: LD_EXP 43
1865: PPUSH
1866: LD_STRING D12-Bur-1
1868: PPUSH
1869: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1873: LD_EXP 48
1877: PPUSH
1878: CALL_OW 255
1882: PUSH
1883: LD_INT 3
1885: EQUAL
1886: PUSH
1887: LD_EXP 48
1891: PPUSH
1892: CALL_OW 302
1896: AND
1897: IFFALSE 1911
// Say ( Belkov , D12-Bel-2 ) ;
1899: LD_EXP 48
1903: PPUSH
1904: LD_STRING D12-Bel-2
1906: PPUSH
1907: CALL_OW 88
// end ; end ; end ;
1911: PPOPN 1
1913: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1914: LD_INT 3
1916: PPUSH
1917: LD_EXP 51
1921: PPUSH
1922: CALL_OW 292
1926: IFFALSE 2464
1928: GO 1930
1930: DISABLE
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1935: LD_EXP 51
1939: PPUSH
1940: LD_EXP 36
1944: PPUSH
1945: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1949: LD_EXP 51
1953: PPUSH
1954: CALL_OW 87
// DialogueOn ;
1958: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 3
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 51
2000: PPUSH
2001: CALL_OW 74
2005: ST_TO_ADDR
// if nearUnit = Burlak then
2006: LD_VAR 0 1
2010: PUSH
2011: LD_EXP 43
2015: EQUAL
2016: IFFALSE 2334
// begin Say ( Burlak , D3-Bur-1 ) ;
2018: LD_EXP 43
2022: PPUSH
2023: LD_STRING D3-Bur-1
2025: PPUSH
2026: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2030: LD_EXP 51
2034: PPUSH
2035: LD_STRING D3-Gny-1
2037: PPUSH
2038: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2042: LD_EXP 43
2046: PPUSH
2047: LD_STRING D3-Bur-2b
2049: PPUSH
2050: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 21
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PPUSH
2078: CALL_OW 69
2082: PUSH
2083: LD_INT 1
2085: EQUAL
2086: PUSH
2087: LD_EXP 13
2091: NOT
2092: AND
2093: IFFALSE 2145
// begin Say ( Burlak , D3-Bur-2c ) ;
2095: LD_EXP 43
2099: PPUSH
2100: LD_STRING D3-Bur-2c
2102: PPUSH
2103: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2107: LD_EXP 51
2111: PPUSH
2112: LD_STRING D3-Gny-2
2114: PPUSH
2115: CALL_OW 88
// DialogueOff ;
2119: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2123: LD_EXP 51
2127: PPUSH
2128: LD_INT 3
2130: PPUSH
2131: CALL_OW 235
// gnyevkoSaved = true ;
2135: LD_ADDR_EXP 11
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// exit ;
2143: GO 2464
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2145: LD_INT 22
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 69
2173: PUSH
2174: LD_INT 1
2176: GREATER
2177: PUSH
2178: LD_EXP 13
2182: OR
2183: PUSH
2184: LD_EXP 21
2188: NOT
2189: AND
2190: IFFALSE 2242
// begin Say ( Burlak , D3-Bur-2d ) ;
2192: LD_EXP 43
2196: PPUSH
2197: LD_STRING D3-Bur-2d
2199: PPUSH
2200: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2204: LD_EXP 51
2208: PPUSH
2209: LD_STRING D3-Gny-2
2211: PPUSH
2212: CALL_OW 88
// DialogueOff ;
2216: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2220: LD_EXP 51
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: CALL_OW 235
// gnyevkoSaved = true ;
2232: LD_ADDR_EXP 11
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// exit ;
2240: GO 2464
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: LD_INT 1
2273: GREATER
2274: PUSH
2275: LD_EXP 21
2279: AND
2280: IFFALSE 2332
// begin Say ( Burlak , D3-Bur-2e ) ;
2282: LD_EXP 43
2286: PPUSH
2287: LD_STRING D3-Bur-2e
2289: PPUSH
2290: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2294: LD_EXP 51
2298: PPUSH
2299: LD_STRING D3-Gny-2
2301: PPUSH
2302: CALL_OW 88
// DialogueOff ;
2306: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2310: LD_EXP 51
2314: PPUSH
2315: LD_INT 3
2317: PPUSH
2318: CALL_OW 235
// gnyevkoSaved = true ;
2322: LD_ADDR_EXP 11
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// exit ;
2330: GO 2464
// end ; end else
2332: GO 2464
// begin if GetSex ( nearUnit ) = sex_male then
2334: LD_VAR 0 1
2338: PPUSH
2339: CALL_OW 258
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2363
// Say ( nearUnit , D3-RSol1-1 ) else
2349: LD_VAR 0 1
2353: PPUSH
2354: LD_STRING D3-RSol1-1
2356: PPUSH
2357: CALL_OW 88
2361: GO 2375
// Say ( nearUnit , D3-RFSol1-1 ) ;
2363: LD_VAR 0 1
2367: PPUSH
2368: LD_STRING D3-RFSol1-1
2370: PPUSH
2371: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2375: LD_EXP 51
2379: PPUSH
2380: LD_STRING D3-Gny-1
2382: PPUSH
2383: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2387: LD_VAR 0 1
2391: PPUSH
2392: CALL_OW 258
2396: PUSH
2397: LD_INT 1
2399: EQUAL
2400: IFFALSE 2416
// Say ( nearUnit , D3-RSol1-2 ) else
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_STRING D3-RSol1-2
2409: PPUSH
2410: CALL_OW 88
2414: GO 2428
// Say ( nearUnit , D3-RFSol1-2 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_STRING D3-RFSol1-2
2423: PPUSH
2424: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2428: LD_EXP 51
2432: PPUSH
2433: LD_STRING D3-Gny-2a
2435: PPUSH
2436: CALL_OW 88
// DialogueOff ;
2440: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2444: LD_EXP 51
2448: PPUSH
2449: LD_INT 3
2451: PPUSH
2452: CALL_OW 235
// gnyevkoSaved = true ;
2456: LD_ADDR_EXP 11
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// end ; end ;
2464: PPOPN 2
2466: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2467: LD_EXP 11
2471: NOT
2472: PUSH
2473: LD_EXP 20
2477: NOT
2478: OR
2479: IFFALSE 2674
2481: GO 2483
2483: DISABLE
2484: LD_INT 0
2486: PPUSH
// begin enable ;
2487: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2488: LD_EXP 11
2492: NOT
2493: PUSH
2494: LD_EXP 37
2498: PUSH
2499: LD_INT 70
2501: GREATER
2502: AND
2503: IFFALSE 2581
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 25
2522: PUSH
2523: LD_INT 12
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PPUSH
2534: CALL_OW 69
2538: PUSH
2539: FOR_IN
2540: IFFALSE 2579
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2542: LD_VAR 0 1
2546: PPUSH
2547: LD_EXP 51
2551: PPUSH
2552: CALL_OW 250
2556: PPUSH
2557: LD_EXP 51
2561: PPUSH
2562: CALL_OW 251
2566: PPUSH
2567: LD_INT 10
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 8146 0 5
2577: GO 2539
2579: POP
2580: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2581: LD_EXP 20
2585: NOT
2586: PUSH
2587: LD_EXP 38
2591: PUSH
2592: LD_INT 70
2594: GREATER
2595: AND
2596: IFFALSE 2674
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 25
2615: PUSH
2616: LD_INT 12
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2672
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2635: LD_VAR 0 1
2639: PPUSH
2640: LD_EXP 50
2644: PPUSH
2645: CALL_OW 250
2649: PPUSH
2650: LD_EXP 50
2654: PPUSH
2655: CALL_OW 251
2659: PPUSH
2660: LD_INT 10
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL 8146 0 5
2670: GO 2632
2672: POP
2673: POP
// end ;
2674: PPOPN 1
2676: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2677: LD_EXP 11
2681: NOT
2682: PUSH
2683: LD_EXP 20
2687: NOT
2688: OR
2689: IFFALSE 2768
2691: GO 2693
2693: DISABLE
// begin enable ;
2694: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2695: LD_EXP 11
2699: NOT
2700: PUSH
2701: LD_EXP 37
2705: PUSH
2706: LD_INT 0
2708: GREATER
2709: AND
2710: IFFALSE 2726
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2712: LD_ADDR_EXP 37
2716: PUSH
2717: LD_EXP 37
2721: PUSH
2722: LD_INT 35
2724: MINUS
2725: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2726: LD_EXP 50
2730: PPUSH
2731: CALL_OW 305
2735: PUSH
2736: LD_EXP 20
2740: NOT
2741: AND
2742: PUSH
2743: LD_EXP 38
2747: PUSH
2748: LD_INT 0
2750: GREATER
2751: AND
2752: IFFALSE 2768
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2754: LD_ADDR_EXP 38
2758: PUSH
2759: LD_EXP 38
2763: PUSH
2764: LD_INT 35
2766: MINUS
2767: ST_TO_ADDR
// end ;
2768: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2769: LD_INT 3
2771: PPUSH
2772: LD_EXP 44
2776: PPUSH
2777: CALL_OW 292
2781: PUSH
2782: LD_INT 6
2784: PPUSH
2785: LD_EXP 43
2789: PPUSH
2790: CALL_OW 292
2794: OR
2795: PUSH
2796: LD_INT 6
2798: PPUSH
2799: LD_EXP 51
2803: PPUSH
2804: CALL_OW 292
2808: OR
2809: PUSH
2810: LD_EXP 13
2814: NOT
2815: AND
2816: IFFALSE 3703
2818: GO 2820
2820: DISABLE
// begin enable ;
2821: ENABLE
// InGameOn ;
2822: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2826: LD_EXP 44
2830: PPUSH
2831: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2835: LD_EXP 51
2839: PPUSH
2840: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2844: LD_EXP 43
2848: PUSH
2849: LD_EXP 51
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PPUSH
2858: CALL_OW 200
// DialogueOn ;
2862: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2866: LD_EXP 12
2870: IFFALSE 3122
// begin meetPokryshkin = true ;
2872: LD_ADDR_EXP 13
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2880: LD_INT 6
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: CALL_OW 343
// DialogueOff ;
2890: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2894: LD_EXP 43
2898: PPUSH
2899: LD_EXP 44
2903: PPUSH
2904: CALL_OW 250
2908: PPUSH
2909: LD_EXP 44
2913: PPUSH
2914: CALL_OW 251
2918: PPUSH
2919: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2923: LD_EXP 43
2927: PPUSH
2928: LD_EXP 44
2932: PPUSH
2933: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2937: LD_EXP 44
2941: PPUSH
2942: LD_EXP 43
2946: PPUSH
2947: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2951: LD_EXP 51
2955: PPUSH
2956: LD_STRING D4-Gny-3
2958: PPUSH
2959: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2963: LD_EXP 43
2967: PPUSH
2968: LD_STRING D4-Bur-3
2970: PPUSH
2971: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2975: LD_EXP 44
2979: PPUSH
2980: LD_STRING D4-Pok-4
2982: PPUSH
2983: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2987: LD_EXP 39
2991: PPUSH
2992: LD_INT 18
2994: PPUSH
2995: LD_INT 1
2997: PPUSH
2998: CALL_OW 49
// wait ( 0 0$2 ) ;
3002: LD_INT 70
3004: PPUSH
3005: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3009: LD_EXP 43
3013: PPUSH
3014: LD_STRING D4-Bur-4
3016: PPUSH
3017: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3021: LD_EXP 44
3025: PPUSH
3026: LD_STRING D4-Pok-5
3028: PPUSH
3029: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3033: LD_EXP 39
3037: PPUSH
3038: LD_STRING D4-Sol1-5
3040: PPUSH
3041: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3045: LD_EXP 44
3049: PPUSH
3050: LD_STRING D4-Pok-6
3052: PPUSH
3053: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3057: LD_EXP 44
3061: PPUSH
3062: LD_STRING D4-Pok-6a
3064: PPUSH
3065: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3069: LD_EXP 43
3073: PPUSH
3074: LD_STRING D4-Bur-6
3076: PPUSH
3077: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3081: LD_EXP 44
3085: PPUSH
3086: LD_STRING D4-Pok-7
3088: PPUSH
3089: CALL_OW 88
// DialogueOff ;
3093: CALL_OW 7
// InGameOff ;
3097: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3101: LD_STRING M2
3103: PPUSH
3104: CALL_OW 337
// goToHill = true ;
3108: LD_ADDR_EXP 14
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// MoveToHill ;
3116: CALL 10026 0 0
// exit ;
3120: GO 3703
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3122: LD_EXP 43
3126: PUSH
3127: LD_EXP 51
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PPUSH
3136: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3140: LD_EXP 44
3144: PPUSH
3145: LD_STRING D4-Pok-1
3147: PPUSH
3148: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3152: LD_EXP 51
3156: PPUSH
3157: CALL_OW 255
3161: PUSH
3162: LD_INT 3
3164: EQUAL
3165: PUSH
3166: LD_EXP 51
3170: PPUSH
3171: CALL_OW 302
3175: AND
3176: IFFALSE 3190
// Say ( Gnyevko , D4-Gny-1 ) ;
3178: LD_EXP 51
3182: PPUSH
3183: LD_STRING D4-Gny-1
3185: PPUSH
3186: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3190: LD_EXP 43
3194: PPUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 6
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PPUSH
3219: CALL_OW 69
3223: PPUSH
3224: LD_EXP 43
3228: PPUSH
3229: CALL_OW 74
3233: PPUSH
3234: CALL_OW 296
3238: PUSH
3239: LD_INT 8
3241: GREATER
3242: PUSH
3243: LD_EXP 51
3247: PPUSH
3248: CALL_OW 255
3252: PUSH
3253: LD_INT 3
3255: EQUAL
3256: AND
3257: PUSH
3258: LD_EXP 51
3262: PPUSH
3263: CALL_OW 302
3267: AND
3268: IFFALSE 3366
// begin ComWalk ( Gnyevko ) ;
3270: LD_EXP 51
3274: PPUSH
3275: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3279: LD_EXP 44
3283: PPUSH
3284: LD_STRING D4-Pok-2
3286: PPUSH
3287: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3291: LD_EXP 51
3295: PPUSH
3296: LD_STRING D4-Gny-2
3298: PPUSH
3299: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3303: LD_EXP 44
3307: PPUSH
3308: LD_STRING D4-Pok-3
3310: PPUSH
3311: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3315: LD_ADDR_EXP 12
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3323: LD_EXP 51
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3335: LD_EXP 51
3339: PPUSH
3340: LD_EXP 44
3344: PPUSH
3345: CALL_OW 250
3349: PPUSH
3350: LD_EXP 44
3354: PPUSH
3355: CALL_OW 251
3359: PPUSH
3360: CALL_OW 171
// end else
3364: GO 3695
// begin meetPokryshkin = true ;
3366: LD_ADDR_EXP 13
3370: PUSH
3371: LD_INT 1
3373: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3374: LD_INT 6
3376: PPUSH
3377: LD_INT 3
3379: PPUSH
3380: CALL_OW 343
// DialogueOff ;
3384: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3388: LD_EXP 51
3392: PPUSH
3393: CALL_OW 255
3397: PUSH
3398: LD_INT 3
3400: EQUAL
3401: PUSH
3402: LD_EXP 51
3406: PPUSH
3407: CALL_OW 302
3411: AND
3412: IFFALSE 3489
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3414: LD_EXP 43
3418: PUSH
3419: LD_EXP 51
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: LD_EXP 44
3432: PPUSH
3433: CALL_OW 250
3437: PPUSH
3438: LD_EXP 44
3442: PPUSH
3443: CALL_OW 251
3447: PPUSH
3448: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3452: LD_EXP 43
3456: PUSH
3457: LD_EXP 51
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PPUSH
3466: LD_EXP 44
3470: PPUSH
3471: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3475: LD_EXP 51
3479: PPUSH
3480: LD_INT 6
3482: PPUSH
3483: CALL_OW 235
// end else
3487: GO 3532
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3489: LD_EXP 43
3493: PPUSH
3494: LD_EXP 44
3498: PPUSH
3499: CALL_OW 250
3503: PPUSH
3504: LD_EXP 44
3508: PPUSH
3509: CALL_OW 251
3513: PPUSH
3514: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3518: LD_EXP 43
3522: PPUSH
3523: LD_EXP 44
3527: PPUSH
3528: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3532: LD_EXP 44
3536: PPUSH
3537: LD_EXP 43
3541: PPUSH
3542: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3546: LD_EXP 43
3550: PPUSH
3551: LD_STRING D4-Bur-3
3553: PPUSH
3554: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3558: LD_EXP 44
3562: PPUSH
3563: LD_STRING D4-Pok-4
3565: PPUSH
3566: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3570: LD_EXP 39
3574: PPUSH
3575: LD_INT 18
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: CALL_OW 49
// wait ( 0 0$2 ) ;
3585: LD_INT 70
3587: PPUSH
3588: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3592: LD_EXP 43
3596: PPUSH
3597: LD_STRING D4-Bur-4
3599: PPUSH
3600: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3604: LD_EXP 44
3608: PPUSH
3609: LD_STRING D4-Pok-5
3611: PPUSH
3612: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3616: LD_EXP 39
3620: PPUSH
3621: LD_STRING D4-Sol1-5
3623: PPUSH
3624: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3628: LD_EXP 44
3632: PPUSH
3633: LD_STRING D4-Pok-6
3635: PPUSH
3636: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3640: LD_EXP 44
3644: PPUSH
3645: LD_STRING D4-Pok-6a
3647: PPUSH
3648: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3652: LD_EXP 43
3656: PPUSH
3657: LD_STRING D4-Bur-6
3659: PPUSH
3660: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3664: LD_EXP 44
3668: PPUSH
3669: LD_STRING D4-Pok-7
3671: PPUSH
3672: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3676: LD_STRING M2
3678: PPUSH
3679: CALL_OW 337
// goToHill = true ;
3683: LD_ADDR_EXP 14
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// MoveToHill ;
3691: CALL 10026 0 0
// end ; DialogueOff ;
3695: CALL_OW 7
// InGameOff ;
3699: CALL_OW 9
// end ;
3703: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3704: LD_EXP 43
3708: PPUSH
3709: LD_EXP 44
3713: PPUSH
3714: CALL_OW 296
3718: PUSH
3719: LD_INT 10
3721: GREATER
3722: PUSH
3723: LD_EXP 14
3727: AND
3728: PUSH
3729: LD_EXP 17
3733: NOT
3734: AND
3735: IFFALSE 3936
3737: GO 3739
3739: DISABLE
3740: LD_INT 0
3742: PPUSH
// begin enable ;
3743: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3744: LD_ADDR_VAR 0 1
3748: PUSH
3749: LD_EXP 44
3753: PUSH
3754: LD_EXP 45
3758: PUSH
3759: LD_EXP 46
3763: PUSH
3764: LD_EXP 47
3768: PUSH
3769: LD_EXP 48
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3781: LD_EXP 51
3785: PPUSH
3786: CALL_OW 255
3790: PUSH
3791: LD_INT 6
3793: EQUAL
3794: PUSH
3795: LD_EXP 11
3799: AND
3800: IFFALSE 3818
// ruSolds = ruSolds ^ Gnyevko ;
3802: LD_ADDR_VAR 0 1
3806: PUSH
3807: LD_VAR 0 1
3811: PUSH
3812: LD_EXP 51
3816: ADD
3817: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3818: LD_VAR 0 1
3822: PPUSH
3823: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3827: LD_EXP 43
3831: PPUSH
3832: CALL_OW 87
// DialogueOn ;
3836: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3840: LD_EXP 44
3844: PPUSH
3845: LD_STRING DSplit-Pok-1
3847: PPUSH
3848: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3852: LD_EXP 43
3856: PPUSH
3857: LD_STRING DSplit-Bur-1
3859: PPUSH
3860: CALL_OW 88
// DialogueOff ;
3864: CALL_OW 7
// InGameOn ;
3868: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3872: LD_EXP 43
3876: PPUSH
3877: LD_EXP 44
3881: PPUSH
3882: CALL_OW 250
3886: PPUSH
3887: LD_EXP 44
3891: PPUSH
3892: CALL_OW 251
3896: PPUSH
3897: CALL_OW 111
// wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_EXP 44
3917: PPUSH
3918: CALL_OW 296
3922: PUSH
3923: LD_INT 6
3925: LESS
3926: IFFALSE 3872
// InGameOff ;
3928: CALL_OW 9
// MoveToHill ;
3932: CALL 10026 0 0
// end ;
3936: PPOPN 1
3938: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
// traitor = true ;
3943: LD_ADDR_EXP 17
3947: PUSH
3948: LD_INT 1
3950: ST_TO_ADDR
// DialogueOn ;
3951: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3955: LD_EXP 44
3959: PPUSH
3960: LD_STRING DAttack-Pok-1
3962: PPUSH
3963: CALL_OW 88
// DialogueOff ;
3967: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 6
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
3987: LD_INT 22
3989: PUSH
3990: LD_INT 6
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 21
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: PPUSH
4016: LD_EXP 43
4020: PPUSH
4021: CALL_OW 115
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4030: LD_EXP 44
4034: PPUSH
4035: LD_INT 65
4037: PPUSH
4038: LD_INT 59
4040: PPUSH
4041: CALL_OW 297
4045: PUSH
4046: LD_INT 4
4048: LESS
4049: PUSH
4050: LD_EXP 17
4054: NOT
4055: AND
4056: IFFALSE 4253
4058: GO 4060
4060: DISABLE
// begin InGameOn ;
4061: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4065: LD_INT 55
4067: PPUSH
4068: LD_INT 50
4070: PPUSH
4071: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4075: LD_EXP 43
4079: PPUSH
4080: LD_INT 66
4082: PPUSH
4083: LD_INT 57
4085: PPUSH
4086: CALL_OW 111
// AddComHold ( Burlak ) ;
4090: LD_EXP 43
4094: PPUSH
4095: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4099: LD_EXP 39
4103: PPUSH
4104: LD_INT 59
4106: PPUSH
4107: LD_INT 55
4109: PPUSH
4110: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4121: LD_INT 1
4123: PPUSH
4124: LD_EXP 44
4128: PPUSH
4129: CALL_OW 292
4133: IFFALSE 4114
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4135: LD_EXP 39
4139: PUSH
4140: LD_EXP 44
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 87
// ComStop ( Charles ) ;
4153: LD_EXP 39
4157: PPUSH
4158: CALL_OW 141
// AddComHold ( Charles ) ;
4162: LD_EXP 39
4166: PPUSH
4167: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4171: LD_EXP 39
4175: PPUSH
4176: LD_EXP 44
4180: PPUSH
4181: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4185: LD_EXP 39
4189: PPUSH
4190: LD_STRING D5-Sol1-1
4192: PPUSH
4193: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4197: LD_EXP 44
4201: PPUSH
4202: LD_STRING D5-Pok-1
4204: PPUSH
4205: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 6
4214: PPUSH
4215: LD_INT 2
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: LD_INT 2
4233: PPUSH
4234: LD_INT 1
4236: PPUSH
4237: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4241: LD_EXP 39
4245: PPUSH
4246: LD_STRING D5-Sol1-2
4248: PPUSH
4249: CALL_OW 88
// end ;
4253: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4254: LD_EXP 39
4258: PPUSH
4259: CALL_OW 301
4263: PUSH
4264: LD_EXP 14
4268: AND
4269: IFFALSE 4854
4271: GO 4273
4273: DISABLE
4274: LD_INT 0
4276: PPUSH
// begin goToHill = false ;
4277: LD_ADDR_EXP 14
4281: PUSH
4282: LD_INT 0
4284: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4285: LD_INT 22
4287: PUSH
4288: LD_INT 6
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 21
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PPUSH
4314: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4318: LD_INT 22
4320: PUSH
4321: LD_INT 6
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 69
4346: PPUSH
4347: CALL_OW 138
// wait ( 0 0$1 ) ;
4351: LD_INT 35
4353: PPUSH
4354: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4358: LD_INT 55
4360: PPUSH
4361: LD_INT 50
4363: PPUSH
4364: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4368: LD_EXP 43
4372: PPUSH
4373: LD_INT 56
4375: PPUSH
4376: LD_INT 56
4378: PPUSH
4379: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4383: LD_INT 22
4385: PUSH
4386: LD_INT 6
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PPUSH
4412: LD_INT 56
4414: PPUSH
4415: LD_INT 56
4417: PPUSH
4418: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4422: LD_EXP 43
4426: PPUSH
4427: LD_STRING D5-Bur-2
4429: PPUSH
4430: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4434: LD_EXP 44
4438: PPUSH
4439: LD_STRING D5-Pok-2
4441: PPUSH
4442: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4446: LD_EXP 48
4450: PPUSH
4451: LD_STRING D5-Bel-2
4453: PPUSH
4454: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4458: LD_EXP 44
4462: PPUSH
4463: LD_STRING D5-Pok-3
4465: PPUSH
4466: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4470: LD_EXP 51
4474: PPUSH
4475: CALL_OW 255
4479: PUSH
4480: LD_INT 6
4482: EQUAL
4483: IFFALSE 4497
// Say ( Gnyevko , D5-Gny-3 ) ;
4485: LD_EXP 51
4489: PPUSH
4490: LD_STRING D5-Gny-3
4492: PPUSH
4493: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4497: LD_EXP 43
4501: PPUSH
4502: LD_STRING D5-Bur-3
4504: PPUSH
4505: CALL_OW 88
// interface_hidden = true ;
4509: LD_ADDR_OWVAR 54
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// IngameOff ;
4517: CALL_OW 9
// wait ( 0 0$2 ) ;
4521: LD_INT 70
4523: PPUSH
4524: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4528: LD_EXP 43
4532: PPUSH
4533: LD_INT 85
4535: PPUSH
4536: LD_INT 64
4538: PPUSH
4539: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4543: LD_INT 22
4545: PUSH
4546: LD_INT 6
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 21
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PPUSH
4572: LD_INT 85
4574: PPUSH
4575: LD_INT 64
4577: PPUSH
4578: CALL_OW 111
// InGameOn ;
4582: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4586: LD_EXP 43
4590: PPUSH
4591: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4595: LD_EXP 44
4599: PPUSH
4600: LD_STRING D6-Pok-1
4602: PPUSH
4603: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4607: LD_EXP 43
4611: PPUSH
4612: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4616: LD_EXP 43
4620: PPUSH
4621: LD_STRING D6-Bur-1
4623: PPUSH
4624: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4628: LD_EXP 43
4632: PPUSH
4633: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4637: LD_EXP 44
4641: PPUSH
4642: LD_STRING D6-Pok-2
4644: PPUSH
4645: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4649: LD_EXP 43
4653: PPUSH
4654: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4658: LD_EXP 48
4662: PPUSH
4663: LD_STRING D6-Bel-2
4665: PPUSH
4666: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4670: LD_EXP 43
4674: PPUSH
4675: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4679: LD_EXP 43
4683: PPUSH
4684: LD_STRING D6-Bur-2
4686: PPUSH
4687: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4691: LD_EXP 43
4695: PPUSH
4696: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4700: LD_EXP 44
4704: PPUSH
4705: LD_STRING D6-Pok-3
4707: PPUSH
4708: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4712: LD_EXP 43
4716: PPUSH
4717: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4721: LD_EXP 52
4725: PPUSH
4726: LD_STRING D6-Kur-3
4728: PPUSH
4729: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4733: LD_EXP 43
4737: PPUSH
4738: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4742: LD_EXP 44
4746: PPUSH
4747: LD_STRING D6-Pok-4
4749: PPUSH
4750: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4754: LD_EXP 43
4758: PPUSH
4759: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4763: LD_EXP 48
4767: PPUSH
4768: LD_STRING D6-Bel-4
4770: PPUSH
4771: CALL_OW 88
// InGameOff ;
4775: CALL_OW 9
// interface_hidden = false ;
4779: LD_ADDR_OWVAR 54
4783: PUSH
4784: LD_INT 0
4786: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 23
4794: PPUSH
4795: CALL_OW 115
// wait ( 0 0$5 ) ;
4799: LD_INT 175
4801: PPUSH
4802: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4806: LD_INT 22
4808: PUSH
4809: LD_INT 6
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 21
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PPUSH
4830: CALL_OW 69
4834: PPUSH
4835: LD_INT 23
4837: PPUSH
4838: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4842: LD_INT 1
4844: PPUSH
4845: LD_EXP 51
4849: PPUSH
4850: CALL_OW 471
// end ;
4854: PPOPN 1
4856: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4857: LD_INT 1
4859: PPUSH
4860: LD_EXP 44
4864: PPUSH
4865: CALL_OW 292
4869: PUSH
4870: LD_EXP 39
4874: PPUSH
4875: CALL_OW 301
4879: AND
4880: IFFALSE 4899
4882: GO 4884
4884: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4885: LD_EXP 40
4889: PPUSH
4890: LD_EXP 44
4894: PPUSH
4895: CALL_OW 115
4899: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 23
4905: PPUSH
4906: CALL_OW 292
4910: IFFALSE 4939
4912: GO 4914
4914: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4915: LD_EXP 44
4919: PPUSH
4920: LD_STRING D7-Pok-1
4922: PPUSH
4923: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4927: LD_EXP 40
4931: PPUSH
4932: LD_STRING D7-FSol1-1
4934: PPUSH
4935: CALL_OW 88
// end ;
4939: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4940: LD_EXP 44
4944: PPUSH
4945: CALL_OW 303
4949: IFFALSE 5481
4951: GO 4953
4953: DISABLE
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
4958: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4959: LD_ADDR_VAR 0 3
4963: PUSH
4964: LD_INT 22
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 21
4976: PUSH
4977: LD_INT 1
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 50
4986: PUSH
4987: EMPTY
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 69
4999: PUSH
5000: LD_EXP 48
5004: DIFF
5005: ST_TO_ADDR
// DialogueOn ;
5006: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5010: LD_EXP 48
5014: PPUSH
5015: LD_STRING D7a-Bel-1
5017: PPUSH
5018: CALL_OW 88
// DialogueOff ;
5022: CALL_OW 7
// for i := 1 to ruSolds do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_VAR 0 3
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5100
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5044: LD_VAR 0 3
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: PPUSH
5055: LD_INT 87
5057: PUSH
5058: LD_VAR 0 1
5062: PLUS
5063: PPUSH
5064: LD_INT 63
5066: PUSH
5067: LD_VAR 0 1
5071: PLUS
5072: PPUSH
5073: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5077: LD_VAR 0 3
5081: PUSH
5082: LD_VAR 0 1
5086: ARRAY
5087: PPUSH
5088: LD_INT 89
5090: PPUSH
5091: LD_INT 67
5093: PPUSH
5094: CALL_OW 178
// end ;
5098: GO 5041
5100: POP
5101: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5102: LD_EXP 48
5106: PPUSH
5107: LD_INT 89
5109: PPUSH
5110: LD_INT 67
5112: PPUSH
5113: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5117: LD_EXP 48
5121: PPUSH
5122: LD_INT 88
5124: PPUSH
5125: LD_INT 66
5127: PPUSH
5128: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5132: LD_EXP 45
5136: PPUSH
5137: LD_STRING D7a-RSol1-1
5139: PPUSH
5140: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5144: LD_EXP 40
5148: PPUSH
5149: LD_STRING D7a-FSol1-1
5151: PPUSH
5152: CALL_OW 88
// wait ( 0 0$12 ) ;
5156: LD_INT 420
5158: PPUSH
5159: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5163: LD_EXP 48
5167: PPUSH
5168: LD_STRING D7b-Bel-1
5170: PPUSH
5171: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5175: LD_EXP 46
5179: PPUSH
5180: LD_STRING D7b-FSol1-1
5182: PPUSH
5183: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5187: LD_EXP 48
5191: PPUSH
5192: LD_STRING D7b-Bel-2
5194: PPUSH
5195: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5199: LD_EXP 45
5203: PPUSH
5204: LD_STRING D7b-RSol1-2
5206: PPUSH
5207: CALL_OW 88
// for unit in ruSolds do
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_VAR 0 3
5220: PUSH
5221: FOR_IN
5222: IFFALSE 5455
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5224: LD_EXP 43
5228: PPUSH
5229: LD_VAR 0 2
5233: PPUSH
5234: CALL_OW 296
5238: PUSH
5239: LD_INT 7
5241: LESS
5242: IFFALSE 5453
// begin InGameOn ;
5244: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5248: LD_EXP 48
5252: PUSH
5253: LD_EXP 45
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5266: LD_EXP 43
5270: PPUSH
5271: LD_INT 88
5273: PPUSH
5274: LD_INT 66
5276: PPUSH
5277: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5281: LD_EXP 48
5285: PPUSH
5286: LD_EXP 43
5290: PPUSH
5291: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5295: LD_EXP 43
5299: PPUSH
5300: LD_INT 90
5302: PPUSH
5303: LD_INT 66
5305: PPUSH
5306: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5310: LD_EXP 43
5314: PPUSH
5315: LD_STRING D7b-Bur-3
5317: PPUSH
5318: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5322: LD_EXP 48
5326: PPUSH
5327: LD_STRING D7b-Bel-4
5329: PPUSH
5330: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5334: LD_EXP 43
5338: PPUSH
5339: LD_STRING D7b-Bur-4
5341: PPUSH
5342: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5346: LD_EXP 48
5350: PPUSH
5351: LD_STRING D7b-Bel-5
5353: PPUSH
5354: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5358: LD_EXP 46
5362: PPUSH
5363: LD_STRING D7b-FSol1-5
5365: PPUSH
5366: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5370: LD_EXP 48
5374: PPUSH
5375: LD_STRING D7b-Bel-6
5377: PPUSH
5378: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5382: LD_EXP 43
5386: PPUSH
5387: LD_STRING D7b-Bur-6
5389: PPUSH
5390: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5394: LD_EXP 45
5398: PPUSH
5399: LD_STRING D7b-RSol1-6
5401: PPUSH
5402: CALL_OW 88
// InGameOff ;
5406: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5410: LD_VAR 0 3
5414: PPUSH
5415: LD_INT 3
5417: PPUSH
5418: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5422: LD_EXP 48
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5434: LD_STRING M3
5436: PPUSH
5437: CALL_OW 337
// secondAttack = true ;
5441: LD_ADDR_EXP 16
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// exit ;
5449: POP
5450: POP
5451: GO 5481
// end ;
5453: GO 5221
5455: POP
5456: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5457: LD_EXP 48
5461: PPUSH
5462: LD_STRING D7b-Bel-3
5464: PPUSH
5465: CALL_OW 88
// InGameOff ;
5469: CALL_OW 9
// belkovWaitForGorky = true ;
5473: LD_ADDR_EXP 15
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// end ;
5481: PPOPN 3
5483: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5484: LD_EXP 15
5488: IFFALSE 5798
5490: GO 5492
5492: DISABLE
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
// begin enable ;
5497: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5498: LD_ADDR_VAR 0 2
5502: PUSH
5503: LD_INT 22
5505: PUSH
5506: LD_INT 6
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 69
5531: ST_TO_ADDR
// for unit in ruSolds do
5532: LD_ADDR_VAR 0 1
5536: PUSH
5537: LD_VAR 0 2
5541: PUSH
5542: FOR_IN
5543: IFFALSE 5796
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5545: LD_EXP 43
5549: PPUSH
5550: LD_VAR 0 1
5554: PPUSH
5555: CALL_OW 296
5559: PUSH
5560: LD_INT 7
5562: LESS
5563: IFFALSE 5794
// begin belkovWaitForGorky = false ;
5565: LD_ADDR_EXP 15
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// InGameOn ;
5573: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5577: LD_EXP 48
5581: PUSH
5582: LD_EXP 45
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5595: LD_EXP 43
5599: PPUSH
5600: LD_INT 88
5602: PPUSH
5603: LD_INT 66
5605: PPUSH
5606: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5610: LD_EXP 48
5614: PPUSH
5615: LD_EXP 43
5619: PPUSH
5620: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5624: LD_EXP 43
5628: PPUSH
5629: LD_INT 90
5631: PPUSH
5632: LD_INT 66
5634: PPUSH
5635: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5639: LD_EXP 48
5643: PPUSH
5644: LD_STRING D7b-Bel-3a
5646: PPUSH
5647: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5651: LD_EXP 43
5655: PPUSH
5656: LD_STRING D7b-Bur-3
5658: PPUSH
5659: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5663: LD_EXP 48
5667: PPUSH
5668: LD_STRING D7b-Bel-4
5670: PPUSH
5671: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5675: LD_EXP 43
5679: PPUSH
5680: LD_STRING D7b-Bur-4
5682: PPUSH
5683: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5687: LD_EXP 48
5691: PPUSH
5692: LD_STRING D7b-Bel-5
5694: PPUSH
5695: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5699: LD_EXP 46
5703: PPUSH
5704: LD_STRING D7b-FSol1-5
5706: PPUSH
5707: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5711: LD_EXP 48
5715: PPUSH
5716: LD_STRING D7b-Bel-6
5718: PPUSH
5719: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5723: LD_EXP 43
5727: PPUSH
5728: LD_STRING D7b-Bur-6
5730: PPUSH
5731: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5735: LD_EXP 45
5739: PPUSH
5740: LD_STRING D7a-RSol1-6
5742: PPUSH
5743: CALL_OW 88
// InGameOff ;
5747: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5751: LD_VAR 0 2
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5763: LD_EXP 48
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5775: LD_STRING M3
5777: PPUSH
5778: CALL_OW 337
// secondAttack = true ;
5782: LD_ADDR_EXP 16
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// exit ;
5790: POP
5791: POP
5792: GO 5798
// end ;
5794: GO 5542
5796: POP
5797: POP
// end ;
5798: PPOPN 2
5800: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5805: LD_EXP 40
5809: PPUSH
5810: LD_STRING D8-FSol1-1
5812: PPUSH
5813: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5817: LD_EXP 41
5821: PPUSH
5822: LD_STRING D8-Glad-1
5824: PPUSH
5825: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5829: LD_EXP 43
5833: PPUSH
5834: LD_STRING D8-Bur-1
5836: PPUSH
5837: CALL_OW 88
// secondAttack = false ;
5841: LD_ADDR_EXP 16
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 22
5856: PUSH
5857: LD_INT 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 21
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PPUSH
5883: LD_INT 23
5885: PPUSH
5886: CALL_OW 74
5890: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5891: LD_EXP 42
5895: PPUSH
5896: CALL_OW 122
// wait ( 0 0$1 ) ;
5900: LD_INT 35
5902: PPUSH
5903: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5907: LD_EXP 42
5911: PPUSH
5912: LD_VAR 0 2
5916: PPUSH
5917: CALL_OW 175
// end ;
5921: LD_VAR 0 1
5925: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5926: LD_INT 23
5928: PPUSH
5929: CALL_OW 256
5933: PUSH
5934: LD_INT 350
5936: LESS
5937: PUSH
5938: LD_INT 23
5940: PPUSH
5941: CALL_OW 256
5945: PUSH
5946: LD_INT 250
5948: GREATER
5949: AND
5950: PUSH
5951: LD_INT 20
5953: PPUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 70
5982: PUSH
5983: LD_INT 0
5985: GREATER
5986: AND
5987: PUSH
5988: LD_EXP 23
5992: NOT
5993: AND
5994: IFFALSE 6011
5996: GO 5998
5998: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
5999: LD_EXP 40
6003: PPUSH
6004: LD_STRING D8-FSol1-2
6006: PPUSH
6007: CALL_OW 88
6011: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6012: LD_INT 23
6014: PPUSH
6015: CALL_OW 303
6019: PUSH
6020: LD_INT 22
6022: PPUSH
6023: CALL_OW 302
6027: AND
6028: PUSH
6029: LD_EXP 23
6033: NOT
6034: AND
6035: IFFALSE 6105
6037: GO 6039
6039: DISABLE
// begin amRetreat = true ;
6040: LD_ADDR_EXP 23
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6048: LD_EXP 40
6052: PPUSH
6053: LD_STRING D8-FSol1-2a
6055: PPUSH
6056: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6060: LD_EXP 41
6064: PUSH
6065: LD_EXP 40
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 21
6076: PPUSH
6077: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6081: LD_EXP 41
6085: PPUSH
6086: LD_STRING D8-Glad-2
6088: PPUSH
6089: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6093: LD_EXP 43
6097: PPUSH
6098: LD_STRING D8-Bur-2
6100: PPUSH
6101: CALL_OW 88
// end ;
6105: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6106: LD_INT 22
6108: PPUSH
6109: CALL_OW 303
6113: PUSH
6114: LD_INT 23
6116: PPUSH
6117: CALL_OW 302
6121: AND
6122: PUSH
6123: LD_EXP 23
6127: NOT
6128: AND
6129: IFFALSE 6199
6131: GO 6133
6133: DISABLE
// begin amRetreat = true ;
6134: LD_ADDR_EXP 23
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6142: LD_EXP 40
6146: PPUSH
6147: LD_STRING D8-FSol1-2a
6149: PPUSH
6150: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6154: LD_EXP 41
6158: PUSH
6159: LD_EXP 40
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: LD_INT 21
6170: PPUSH
6171: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6175: LD_EXP 41
6179: PPUSH
6180: LD_STRING D8-Glad-2
6182: PPUSH
6183: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6187: LD_EXP 43
6191: PPUSH
6192: LD_STRING D8-Bur-2
6194: PPUSH
6195: CALL_OW 88
// end ;
6199: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6200: LD_INT 23
6202: PPUSH
6203: CALL_OW 256
6207: PUSH
6208: LD_INT 500
6210: LESS
6211: PUSH
6212: LD_OWVAR 67
6216: PUSH
6217: LD_INT 3
6219: EQUAL
6220: AND
6221: PUSH
6222: LD_EXP 23
6226: NOT
6227: AND
6228: IFFALSE 6298
6230: GO 6232
6232: DISABLE
// begin amRetreat = true ;
6233: LD_ADDR_EXP 23
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6241: LD_EXP 40
6245: PPUSH
6246: LD_STRING D8-FSol1-2a
6248: PPUSH
6249: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6253: LD_EXP 41
6257: PUSH
6258: LD_EXP 40
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: LD_INT 21
6269: PPUSH
6270: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6274: LD_EXP 41
6278: PPUSH
6279: LD_STRING D8-Glad-2
6281: PPUSH
6282: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6286: LD_EXP 43
6290: PPUSH
6291: LD_STRING D8-Bur-2
6293: PPUSH
6294: CALL_OW 88
// end ;
6298: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 21
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 50
6321: PUSH
6322: EMPTY
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: CALL_OW 69
6334: PUSH
6335: LD_INT 0
6337: GREATER
6338: IFFALSE 6466
6340: GO 6342
6342: DISABLE
6343: LD_INT 0
6345: PPUSH
// begin enable ;
6346: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_INT 21
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 1
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: PUSH
6384: FOR_IN
6385: IFFALSE 6464
// begin if unit = Gladstone then
6387: LD_VAR 0 1
6391: PUSH
6392: LD_EXP 41
6396: EQUAL
6397: IFFALSE 6427
// begin gladstoneEscape = true ;
6399: LD_ADDR_EXP 18
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6407: LD_EXP 41
6411: PPUSH
6412: LD_EXP 27
6416: PUSH
6417: LD_STRING Gladstone
6419: STR
6420: PPUSH
6421: CALL_OW 38
// end else
6425: GO 6453
// begin JohannaEscape = true ;
6427: LD_ADDR_EXP 19
6431: PUSH
6432: LD_INT 1
6434: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6435: LD_EXP 40
6439: PPUSH
6440: LD_EXP 27
6444: PUSH
6445: LD_STRING Johanna
6447: STR
6448: PPUSH
6449: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 64
// end ;
6462: GO 6384
6464: POP
6465: POP
// end ;
6466: PPOPN 1
6468: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6469: LD_EXP 41
6473: PPUSH
6474: CALL_OW 301
6478: PUSH
6479: LD_EXP 40
6483: PPUSH
6484: CALL_OW 301
6488: AND
6489: IFFALSE 6506
6491: GO 6493
6493: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6494: LD_EXP 43
6498: PPUSH
6499: LD_STRING D9-Bur-1
6501: PPUSH
6502: CALL_OW 88
6506: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6507: LD_EXP 40
6511: PPUSH
6512: CALL_OW 301
6516: PUSH
6517: LD_EXP 18
6521: AND
6522: PUSH
6523: LD_EXP 19
6527: NOT
6528: AND
6529: IFFALSE 6546
6531: GO 6533
6533: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6534: LD_EXP 43
6538: PPUSH
6539: LD_STRING D9-Bur-1a
6541: PPUSH
6542: CALL_OW 88
6546: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6547: LD_EXP 41
6551: PPUSH
6552: CALL_OW 301
6556: PUSH
6557: LD_EXP 18
6561: NOT
6562: AND
6563: PUSH
6564: LD_EXP 19
6568: AND
6569: IFFALSE 6586
6571: GO 6573
6573: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6574: LD_EXP 43
6578: PPUSH
6579: LD_STRING D9-Bur-1b
6581: PPUSH
6582: CALL_OW 88
6586: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6587: LD_EXP 18
6591: PUSH
6592: LD_EXP 19
6596: AND
6597: IFFALSE 6614
6599: GO 6601
6601: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6602: LD_EXP 43
6606: PPUSH
6607: LD_STRING D9-Bur-1c
6609: PPUSH
6610: CALL_OW 88
6614: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 3
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 50
6637: PUSH
6638: EMPTY
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: PUSH
6651: LD_INT 0
6653: EQUAL
6654: IFFALSE 6902
6656: GO 6658
6658: DISABLE
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: LD_INT 22
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 50
6690: PUSH
6691: EMPTY
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: PUSH
6704: LD_EXP 43
6708: PUSH
6709: LD_EXP 51
6713: PUSH
6714: LD_EXP 48
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: DIFF
6724: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6725: LD_ADDR_VAR 0 2
6729: PUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 26
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 72
6749: ST_TO_ADDR
// DialogueOn ;
6750: CALL_OW 6
// if IsOK ( Belkov ) then
6754: LD_EXP 48
6758: PPUSH
6759: CALL_OW 302
6763: IFFALSE 6777
// Say ( Belkov , D10-Bel-1 ) ;
6765: LD_EXP 48
6769: PPUSH
6770: LD_STRING D10-Bel-1
6772: PPUSH
6773: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6777: LD_VAR 0 1
6781: PUSH
6782: LD_INT 0
6784: GREATER
6785: PUSH
6786: LD_VAR 0 2
6790: PUSH
6791: LD_INT 0
6793: GREATER
6794: PUSH
6795: LD_EXP 48
6799: PPUSH
6800: CALL_OW 302
6804: OR
6805: AND
6806: IFFALSE 6873
// begin Say ( Burlak , D10-Bur-1 ) ;
6808: LD_EXP 43
6812: PPUSH
6813: LD_STRING D10-Bur-1
6815: PPUSH
6816: CALL_OW 88
// if IsOK ( Belkov ) then
6820: LD_EXP 48
6824: PPUSH
6825: CALL_OW 302
6829: IFFALSE 6845
// Say ( Belkov , D10-Bel-1a ) else
6831: LD_EXP 48
6835: PPUSH
6836: LD_STRING D10-Bel-1a
6838: PPUSH
6839: CALL_OW 88
6843: GO 6861
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: ARRAY
6853: PPUSH
6854: LD_STRING D10-RSol1-1
6856: PPUSH
6857: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6861: LD_EXP 43
6865: PPUSH
6866: LD_STRING D10-Bur-2
6868: PPUSH
6869: CALL_OW 88
// end ; DialogueOff ;
6873: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6877: LD_STRING M4a
6879: PPUSH
6880: CALL_OW 337
// evacuationAvailable = true ;
6884: LD_ADDR_EXP 21
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6892: LD_INT 1
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 424
// end ;
6902: PPOPN 2
6904: END
// every 0 0$15 trigger evacuationAvailable do var randomSold ;
6905: LD_EXP 21
6909: IFFALSE 7448
6911: GO 6913
6913: DISABLE
6914: LD_INT 0
6916: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6917: LD_EXP 50
6921: PPUSH
6922: LD_INT 22
6924: PPUSH
6925: LD_INT 1
6927: PPUSH
6928: CALL_OW 49
// wait ( 0 0$3 ) ;
6932: LD_INT 105
6934: PPUSH
6935: CALL_OW 67
// DialogueOn ;
6939: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6943: LD_EXP 50
6947: PPUSH
6948: LD_STRING D11b-Kir-1
6950: PPUSH
6951: CALL_OW 94
// if IsOK ( Belkov ) then
6955: LD_EXP 48
6959: PPUSH
6960: CALL_OW 302
6964: IFFALSE 6992
// begin Say ( Belkov , D11b-Bel-1 ) ;
6966: LD_EXP 48
6970: PPUSH
6971: LD_STRING D11b-Bel-1
6973: PPUSH
6974: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6978: LD_EXP 48
6982: PPUSH
6983: LD_STRING D11b-Bel-1a
6985: PPUSH
6986: CALL_OW 94
// end else
6990: GO 7047
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 21
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 50
7019: PUSH
7020: EMPTY
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: PPUSH
7028: CALL_OW 69
7032: PPUSH
7033: LD_STRING D11b-RSol1-1
7035: PPUSH
7036: LD_STRING D11b-RFSol1-1
7038: PPUSH
7039: LD_INT 0
7041: PPUSH
7042: CALL 7813 0 4
7046: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7047: LD_INT 24
7049: PPUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 0
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 25
7062: PUSH
7063: LD_INT 12
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: PUSH
7079: LD_INT 0
7081: GREATER
7082: IFFALSE 7098
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7084: LD_EXP 50
7088: PPUSH
7089: LD_STRING D11b1-Kir-1
7091: PPUSH
7092: CALL_OW 94
7096: GO 7110
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7098: LD_EXP 50
7102: PPUSH
7103: LD_STRING D11b2-Kir-1
7105: PPUSH
7106: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7110: LD_EXP 6
7114: PUSH
7115: LD_INT 24
7117: PPUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 25
7130: PUSH
7131: LD_INT 12
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 70
7146: PUSH
7147: LD_INT 0
7149: GREATER
7150: AND
7151: IFFALSE 7286
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7153: LD_EXP 43
7157: PPUSH
7158: LD_STRING D11b1-Bur-1
7160: PPUSH
7161: CALL_OW 88
// if IsOk ( Belkov ) then
7165: LD_EXP 48
7169: PPUSH
7170: CALL_OW 302
7174: IFFALSE 7190
// Say ( Belkov , D11b2-Bel-1 ) else
7176: LD_EXP 48
7180: PPUSH
7181: LD_STRING D11b2-Bel-1
7183: PPUSH
7184: CALL_OW 88
7188: GO 7231
// begin if GetSex ( randomSold ) = sex_male then
7190: LD_VAR 0 1
7194: PPUSH
7195: CALL_OW 258
7199: PUSH
7200: LD_INT 1
7202: EQUAL
7203: IFFALSE 7219
// Say ( randomSold , D11b1-RSol1-1 ) else
7205: LD_VAR 0 1
7209: PPUSH
7210: LD_STRING D11b1-RSol1-1
7212: PPUSH
7213: CALL_OW 88
7217: GO 7231
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7219: LD_VAR 0 1
7223: PPUSH
7224: LD_STRING D11b1-RFSol1-1
7226: PPUSH
7227: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7231: LD_INT 22
7233: PUSH
7234: LD_INT 1
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 21
7243: PUSH
7244: LD_INT 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 50
7253: PUSH
7254: EMPTY
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 69
7266: PPUSH
7267: LD_STRING D11b1-RSol1-1
7269: PPUSH
7270: LD_STRING D11b1-RFSol1-1
7272: PPUSH
7273: LD_INT 0
7275: PPUSH
7276: CALL 7813 0 4
// DialogueOff ;
7280: CALL_OW 7
// exit ;
7284: GO 7448
// end ; if spotWaterfall then
7286: LD_EXP 7
7290: IFFALSE 7376
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7292: LD_EXP 43
7296: PPUSH
7297: LD_STRING D11b1-Bur-1a
7299: PPUSH
7300: CALL_OW 88
// if IsOk ( Belkov ) then
7304: LD_EXP 48
7308: PPUSH
7309: CALL_OW 302
7313: IFFALSE 7329
// Say ( Belkov , D11b2-Bel-1 ) else
7315: LD_EXP 48
7319: PPUSH
7320: LD_STRING D11b2-Bel-1
7322: PPUSH
7323: CALL_OW 88
7327: GO 7370
// begin if GetSex ( randomSold ) = sex_male then
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 258
7338: PUSH
7339: LD_INT 1
7341: EQUAL
7342: IFFALSE 7358
// Say ( randomSold , D11b1-RSol1-1 ) else
7344: LD_VAR 0 1
7348: PPUSH
7349: LD_STRING D11b1-RSol1-1
7351: PPUSH
7352: CALL_OW 88
7356: GO 7370
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7358: LD_VAR 0 1
7362: PPUSH
7363: LD_STRING D11b1-RFSol1-1
7365: PPUSH
7366: CALL_OW 88
// end ; DialogueOff ;
7370: CALL_OW 7
// exit ;
7374: GO 7448
// end ; if IsOk ( Belkov ) then
7376: LD_EXP 48
7380: PPUSH
7381: CALL_OW 302
7385: IFFALSE 7401
// Say ( Belkov , D11b1-Bel-1 ) else
7387: LD_EXP 48
7391: PPUSH
7392: LD_STRING D11b1-Bel-1
7394: PPUSH
7395: CALL_OW 88
7399: GO 7442
// begin if GetSex ( randomSold ) = sex_male then
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 258
7410: PUSH
7411: LD_INT 1
7413: EQUAL
7414: IFFALSE 7430
// Say ( randomSold , D11b1-RSol1-1 ) else
7416: LD_VAR 0 1
7420: PPUSH
7421: LD_STRING D11b1-RSol1-1
7423: PPUSH
7424: CALL_OW 88
7428: GO 7442
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7430: LD_VAR 0 1
7434: PPUSH
7435: LD_STRING D11b1-RFSol1-1
7437: PPUSH
7438: CALL_OW 88
// end ; DialogueOff ;
7442: CALL_OW 7
// exit ;
7446: GO 7448
// end ;
7448: PPOPN 1
7450: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7451: LD_INT 3
7453: PPUSH
7454: LD_EXP 50
7458: PPUSH
7459: CALL_OW 292
7463: IFFALSE 7693
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
7471: LD_EXP 50
7475: PPUSH
7476: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7480: LD_ADDR_VAR 0 1
7484: PUSH
7485: LD_INT 22
7487: PUSH
7488: LD_INT 3
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 50
7507: PUSH
7508: EMPTY
7509: LIST
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: PPUSH
7521: LD_EXP 50
7525: PPUSH
7526: CALL_OW 74
7530: ST_TO_ADDR
// DialogueOn ;
7531: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7535: LD_EXP 50
7539: PPUSH
7540: LD_STRING D11a-Kir-1
7542: PPUSH
7543: CALL_OW 88
// if nearUnit = Belkov then
7547: LD_VAR 0 1
7551: PUSH
7552: LD_EXP 48
7556: EQUAL
7557: IFFALSE 7597
// begin Say ( Belkov , D11a-Bel-1 ) ;
7559: LD_EXP 48
7563: PPUSH
7564: LD_STRING D11a-Bel-1
7566: PPUSH
7567: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7571: LD_EXP 50
7575: PPUSH
7576: LD_STRING D11a-Kir-2
7578: PPUSH
7579: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7583: LD_EXP 48
7587: PPUSH
7588: LD_STRING D11a-Bel-2
7590: PPUSH
7591: CALL_OW 88
// end else
7595: GO 7638
// begin if GetSex ( nearUnit ) = sex_male then
7597: LD_VAR 0 1
7601: PPUSH
7602: CALL_OW 258
7606: PUSH
7607: LD_INT 1
7609: EQUAL
7610: IFFALSE 7626
// Say ( nearUnit , D11a-RSol1-2 ) else
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_STRING D11a-RSol1-2
7619: PPUSH
7620: CALL_OW 88
7624: GO 7638
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_STRING D11a-RFSol1-2
7633: PPUSH
7634: CALL_OW 88
// end ; DialogueOff ;
7638: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
7642: LD_EXP 50
7646: PPUSH
7647: LD_INT 3
7649: PPUSH
7650: CALL_OW 235
// jelenaSaved = true ;
7654: LD_ADDR_EXP 20
7658: PUSH
7659: LD_INT 1
7661: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7662: LD_INT 175
7664: PPUSH
7665: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7669: LD_EXP 50
7673: PPUSH
7674: LD_STRING D11c-Kir-1
7676: PPUSH
7677: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7681: LD_EXP 43
7685: PPUSH
7686: LD_STRING D11c-Bur-1
7688: PPUSH
7689: CALL_OW 88
// end ;
7693: PPOPN 1
7695: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7696: LD_EXP 21
7700: PUSH
7701: LD_INT 1
7703: PPUSH
7704: LD_INT 22
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 21
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PPUSH
7728: CALL_OW 70
7732: PUSH
7733: LD_INT 0
7735: GREATER
7736: AND
7737: IFFALSE 7749
7739: GO 7741
7741: DISABLE
// begin Query ( QExit1 ) ;
7742: LD_STRING QExit1
7744: PPUSH
7745: CALL_OW 97
// end ; end_of_file
7749: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
// if exist_mode then
7754: LD_VAR 0 2
7758: IFFALSE 7783
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7760: LD_ADDR_VAR 0 4
7764: PUSH
7765: LD_EXP 28
7769: PUSH
7770: LD_VAR 0 1
7774: STR
7775: PPUSH
7776: CALL_OW 34
7780: ST_TO_ADDR
7781: GO 7798
// unit := NewCharacter ( ident ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 25
7797: ST_TO_ADDR
// result := unit ;
7798: LD_ADDR_VAR 0 3
7802: PUSH
7803: LD_VAR 0 4
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 3
7812: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
7817: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7818: LD_ADDR_VAR 0 1
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_EXP 43
7832: PUSH
7833: LD_EXP 51
7837: PUSH
7838: LD_EXP 48
7842: PUSH
7843: LD_EXP 50
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: DIFF
7854: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7855: LD_ADDR_VAR 0 7
7859: PUSH
7860: LD_VAR 0 1
7864: PUSH
7865: LD_INT 1
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 12
7877: ARRAY
7878: ST_TO_ADDR
// if radio then
7879: LD_VAR 0 4
7883: IFFALSE 7932
// begin if GetSex ( speaker ) = sex_male then
7885: LD_VAR 0 7
7889: PPUSH
7890: CALL_OW 258
7894: PUSH
7895: LD_INT 1
7897: EQUAL
7898: IFFALSE 7916
// SayRadio ( speaker , dialogMID ) else
7900: LD_VAR 0 7
7904: PPUSH
7905: LD_VAR 0 2
7909: PPUSH
7910: CALL_OW 94
7914: GO 7930
// SayRadio ( speaker , dialogFID ) ;
7916: LD_VAR 0 7
7920: PPUSH
7921: LD_VAR 0 3
7925: PPUSH
7926: CALL_OW 94
// end else
7930: GO 7977
// begin if GetSex ( speaker ) = sex_male then
7932: LD_VAR 0 7
7936: PPUSH
7937: CALL_OW 258
7941: PUSH
7942: LD_INT 1
7944: EQUAL
7945: IFFALSE 7963
// Say ( speaker , dialogMID ) else
7947: LD_VAR 0 7
7951: PPUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 88
7961: GO 7977
// Say ( speaker , dialogFID ) ;
7963: LD_VAR 0 7
7967: PPUSH
7968: LD_VAR 0 3
7972: PPUSH
7973: CALL_OW 88
// end ; result := speaker ;
7977: LD_ADDR_VAR 0 5
7981: PUSH
7982: LD_VAR 0 7
7986: ST_TO_ADDR
// end ;
7987: LD_VAR 0 5
7991: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7992: LD_INT 0
7994: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 255
8004: PUSH
8005: LD_OWVAR 2
8009: EQUAL
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 302
8020: AND
8021: IFFALSE 8043
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8023: LD_VAR 0 1
8027: PPUSH
8028: LD_EXP 27
8032: PUSH
8033: LD_VAR 0 2
8037: STR
8038: PPUSH
8039: CALL_OW 38
// end ;
8043: LD_VAR 0 3
8047: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8048: LD_INT 0
8050: PPUSH
8051: PPUSH
8052: PPUSH
// resultCharactersToSave = [ ] ;
8053: LD_ADDR_VAR 0 5
8057: PUSH
8058: EMPTY
8059: ST_TO_ADDR
// for unit in characters do
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_VAR 0 1
8069: PUSH
8070: FOR_IN
8071: IFFALSE 8119
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8073: LD_VAR 0 4
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_OWVAR 2
8087: EQUAL
8088: PUSH
8089: LD_VAR 0 4
8093: PPUSH
8094: CALL_OW 302
8098: AND
8099: IFFALSE 8117
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 5
8110: PUSH
8111: LD_VAR 0 4
8115: ADD
8116: ST_TO_ADDR
8117: GO 8070
8119: POP
8120: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8121: LD_VAR 0 5
8125: PPUSH
8126: LD_EXP 27
8130: PUSH
8131: LD_VAR 0 2
8135: STR
8136: PPUSH
8137: CALL_OW 38
// end ;
8141: LD_VAR 0 3
8145: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8146: LD_INT 0
8148: PPUSH
8149: PPUSH
8150: PPUSH
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
8157: PPUSH
8158: PPUSH
8159: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8160: LD_VAR 0 1
8164: PPUSH
8165: CALL_OW 302
8169: NOT
8170: PUSH
8171: LD_VAR 0 4
8175: PUSH
8176: LD_INT 1
8178: EQUAL
8179: OR
8180: PUSH
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_VAR 0 3
8190: PPUSH
8191: CALL_OW 488
8195: NOT
8196: OR
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: CALL_OW 297
8217: PUSH
8218: LD_VAR 0 4
8222: GREATEREQUAL
8223: OR
8224: PUSH
8225: LD_VAR 0 5
8229: PUSH
8230: LD_INT 1
8232: PUSH
8233: LD_INT 0
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: IN
8240: NOT
8241: OR
8242: IFFALSE 8246
// exit ;
8244: GO 9803
// attempts = 0 ;
8246: LD_ADDR_VAR 0 17
8250: PUSH
8251: LD_INT 0
8253: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8254: LD_ADDR_VAR 0 7
8258: PUSH
8259: EMPTY
8260: ST_TO_ADDR
// list_coords = [ ] ;
8261: LD_ADDR_VAR 0 8
8265: PUSH
8266: EMPTY
8267: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8268: LD_ADDR_VAR 0 9
8272: PUSH
8273: LD_VAR 0 2
8277: PPUSH
8278: LD_VAR 0 3
8282: PPUSH
8283: LD_VAR 0 1
8287: PPUSH
8288: CALL_OW 250
8292: PPUSH
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 251
8302: PPUSH
8303: CALL 9808 0 4
8307: ST_TO_ADDR
// if attempts = 0 then
8308: LD_VAR 0 17
8312: PUSH
8313: LD_INT 0
8315: EQUAL
8316: IFFALSE 8424
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8318: LD_ADDR_VAR 0 10
8322: PUSH
8323: LD_VAR 0 9
8327: PUSH
8328: LD_VAR 0 9
8332: PUSH
8333: LD_INT 1
8335: PLUS
8336: PUSH
8337: LD_VAR 0 9
8341: PUSH
8342: LD_INT 1
8344: MINUS
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8351: LD_VAR 0 10
8355: PUSH
8356: LD_INT 2
8358: ARRAY
8359: PUSH
8360: LD_INT 6
8362: EQUAL
8363: IFFALSE 8386
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8365: LD_ADDR_VAR 0 10
8369: PUSH
8370: LD_VAR 0 10
8374: PPUSH
8375: LD_INT 2
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 1
8385: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8386: LD_VAR 0 10
8390: PUSH
8391: LD_INT 3
8393: ARRAY
8394: PUSH
8395: LD_INT 1
8397: NEG
8398: EQUAL
8399: IFFALSE 8422
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8401: LD_ADDR_VAR 0 10
8405: PUSH
8406: LD_VAR 0 10
8410: PPUSH
8411: LD_INT 3
8413: PPUSH
8414: LD_INT 5
8416: PPUSH
8417: CALL_OW 1
8421: ST_TO_ADDR
// end else
8422: GO 8461
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8424: LD_ADDR_VAR 0 10
8428: PUSH
8429: LD_INT 0
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 4
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: PUSH
8455: LD_VAR 0 9
8459: DIFF
8460: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_VAR 0 10
8475: PUSH
8476: LD_INT 0
8478: PLUS
8479: PUSH
8480: FOR_TO
8481: IFFALSE 8803
// case dir_list [ c ] of 0 :
8483: LD_VAR 0 10
8487: PUSH
8488: LD_VAR 0 14
8492: ARRAY
8493: PUSH
8494: LD_INT 0
8496: DOUBLE
8497: EQUAL
8498: IFTRUE 8502
8500: GO 8543
8502: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8503: LD_ADDR_VAR 0 8
8507: PUSH
8508: LD_VAR 0 8
8512: PPUSH
8513: LD_INT 1
8515: PPUSH
8516: LD_VAR 0 2
8520: PUSH
8521: LD_VAR 0 3
8525: PUSH
8526: LD_VAR 0 4
8530: MINUS
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PPUSH
8536: CALL_OW 2
8540: ST_TO_ADDR
8541: GO 8801
8543: LD_INT 1
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8592
8551: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8552: LD_ADDR_VAR 0 8
8556: PUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: LD_INT 1
8564: PPUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 4
8574: PLUS
8575: PUSH
8576: LD_VAR 0 3
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 2
8589: ST_TO_ADDR
8590: GO 8801
8592: LD_INT 2
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8647
8600: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8601: LD_ADDR_VAR 0 8
8605: PUSH
8606: LD_VAR 0 8
8610: PPUSH
8611: LD_INT 1
8613: PPUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_VAR 0 4
8623: PLUS
8624: PUSH
8625: LD_VAR 0 3
8629: PUSH
8630: LD_VAR 0 4
8634: PLUS
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 2
8644: ST_TO_ADDR
8645: GO 8801
8647: LD_INT 3
8649: DOUBLE
8650: EQUAL
8651: IFTRUE 8655
8653: GO 8696
8655: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8656: LD_ADDR_VAR 0 8
8660: PUSH
8661: LD_VAR 0 8
8665: PPUSH
8666: LD_INT 1
8668: PPUSH
8669: LD_VAR 0 2
8673: PUSH
8674: LD_VAR 0 3
8678: PUSH
8679: LD_VAR 0 4
8683: PLUS
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 2
8693: ST_TO_ADDR
8694: GO 8801
8696: LD_INT 4
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8745
8704: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8705: LD_ADDR_VAR 0 8
8709: PUSH
8710: LD_VAR 0 8
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_VAR 0 2
8722: PUSH
8723: LD_VAR 0 4
8727: MINUS
8728: PUSH
8729: LD_VAR 0 3
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 2
8742: ST_TO_ADDR
8743: GO 8801
8745: LD_INT 5
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8800
8753: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8754: LD_ADDR_VAR 0 8
8758: PUSH
8759: LD_VAR 0 8
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 2
8771: PUSH
8772: LD_VAR 0 4
8776: MINUS
8777: PUSH
8778: LD_VAR 0 3
8782: PUSH
8783: LD_VAR 0 4
8787: MINUS
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 2
8797: ST_TO_ADDR
8798: GO 8801
8800: POP
8801: GO 8480
8803: POP
8804: POP
// if dist < 30 then
8805: LD_VAR 0 4
8809: PUSH
8810: LD_INT 30
8812: LESS
8813: IFFALSE 8825
// c = 1 else
8815: LD_ADDR_VAR 0 14
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
8823: GO 8833
// c = 2 ;
8825: LD_ADDR_VAR 0 14
8829: PUSH
8830: LD_INT 2
8832: ST_TO_ADDR
// b = 1 ;
8833: LD_ADDR_VAR 0 11
8837: PUSH
8838: LD_INT 1
8840: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8841: LD_VAR 0 11
8845: PUSH
8846: LD_VAR 0 4
8850: PUSH
8851: LD_INT 1
8853: MINUS
8854: LESSEQUAL
8855: IFFALSE 9283
// begin if 0 in dir_list and 1 in dir_list then
8857: LD_INT 0
8859: PUSH
8860: LD_VAR 0 10
8864: IN
8865: PUSH
8866: LD_INT 1
8868: PUSH
8869: LD_VAR 0 10
8873: IN
8874: AND
8875: IFFALSE 8927
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8877: LD_ADDR_VAR 0 8
8881: PUSH
8882: LD_VAR 0 8
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_VAR 0 2
8894: PUSH
8895: LD_VAR 0 11
8899: PLUS
8900: PUSH
8901: LD_VAR 0 3
8905: PUSH
8906: LD_VAR 0 4
8910: MINUS
8911: PUSH
8912: LD_VAR 0 11
8916: PLUS
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 2
8926: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8927: LD_INT 1
8929: PUSH
8930: LD_VAR 0 10
8934: IN
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: LD_VAR 0 10
8943: IN
8944: AND
8945: IFFALSE 8991
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8947: LD_ADDR_VAR 0 8
8951: PUSH
8952: LD_VAR 0 8
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_VAR 0 2
8964: PUSH
8965: LD_VAR 0 4
8969: PLUS
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 11
8980: PLUS
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 2
8990: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
8991: LD_INT 2
8993: PUSH
8994: LD_VAR 0 10
8998: IN
8999: PUSH
9000: LD_INT 3
9002: PUSH
9003: LD_VAR 0 10
9007: IN
9008: AND
9009: IFFALSE 9061
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9011: LD_ADDR_VAR 0 8
9015: PUSH
9016: LD_VAR 0 8
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: LD_VAR 0 2
9028: PUSH
9029: LD_VAR 0 4
9033: PLUS
9034: PUSH
9035: LD_VAR 0 11
9039: MINUS
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: LD_VAR 0 4
9050: PLUS
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 2
9060: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9061: LD_INT 3
9063: PUSH
9064: LD_VAR 0 10
9068: IN
9069: PUSH
9070: LD_INT 4
9072: PUSH
9073: LD_VAR 0 10
9077: IN
9078: AND
9079: IFFALSE 9131
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9081: LD_ADDR_VAR 0 8
9085: PUSH
9086: LD_VAR 0 8
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: LD_VAR 0 2
9098: PUSH
9099: LD_VAR 0 11
9103: MINUS
9104: PUSH
9105: LD_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: PLUS
9115: PUSH
9116: LD_VAR 0 11
9120: MINUS
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 2
9130: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9131: LD_INT 4
9133: PUSH
9134: LD_VAR 0 10
9138: IN
9139: PUSH
9140: LD_INT 5
9142: PUSH
9143: LD_VAR 0 10
9147: IN
9148: AND
9149: IFFALSE 9195
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9151: LD_ADDR_VAR 0 8
9155: PUSH
9156: LD_VAR 0 8
9160: PPUSH
9161: LD_INT 1
9163: PPUSH
9164: LD_VAR 0 2
9168: PUSH
9169: LD_VAR 0 4
9173: MINUS
9174: PUSH
9175: LD_VAR 0 3
9179: PUSH
9180: LD_VAR 0 11
9184: MINUS
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PPUSH
9190: CALL_OW 2
9194: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9195: LD_INT 5
9197: PUSH
9198: LD_VAR 0 10
9202: IN
9203: PUSH
9204: LD_INT 0
9206: PUSH
9207: LD_VAR 0 10
9211: IN
9212: AND
9213: IFFALSE 9265
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9215: LD_ADDR_VAR 0 8
9219: PUSH
9220: LD_VAR 0 8
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_VAR 0 2
9232: PUSH
9233: LD_VAR 0 4
9237: MINUS
9238: PUSH
9239: LD_VAR 0 11
9243: PLUS
9244: PUSH
9245: LD_VAR 0 3
9249: PUSH
9250: LD_VAR 0 4
9254: MINUS
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PPUSH
9260: CALL_OW 2
9264: ST_TO_ADDR
// b = b + c end ;
9265: LD_ADDR_VAR 0 11
9269: PUSH
9270: LD_VAR 0 11
9274: PUSH
9275: LD_VAR 0 14
9279: PLUS
9280: ST_TO_ADDR
9281: GO 8841
// if list_coords = 0 then
9283: LD_VAR 0 8
9287: PUSH
9288: LD_INT 0
9290: EQUAL
9291: IFFALSE 9295
// exit ;
9293: GO 9803
// repeat min_dist = 5000 ;
9295: LD_ADDR_VAR 0 12
9299: PUSH
9300: LD_INT 5000
9302: ST_TO_ADDR
// for b in list_coords do
9303: LD_ADDR_VAR 0 11
9307: PUSH
9308: LD_VAR 0 8
9312: PUSH
9313: FOR_IN
9314: IFFALSE 9373
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9316: LD_ADDR_VAR 0 13
9320: PUSH
9321: LD_VAR 0 1
9325: PPUSH
9326: LD_VAR 0 11
9330: PUSH
9331: LD_INT 1
9333: ARRAY
9334: PPUSH
9335: LD_VAR 0 11
9339: PUSH
9340: LD_INT 2
9342: ARRAY
9343: PPUSH
9344: CALL_OW 297
9348: ST_TO_ADDR
// if temp_dist < min_dist then
9349: LD_VAR 0 13
9353: PUSH
9354: LD_VAR 0 12
9358: LESS
9359: IFFALSE 9371
// min_dist = temp_dist ;
9361: LD_ADDR_VAR 0 12
9365: PUSH
9366: LD_VAR 0 13
9370: ST_TO_ADDR
// end ;
9371: GO 9313
9373: POP
9374: POP
// c = 0 ;
9375: LD_ADDR_VAR 0 14
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// repeat c = c + 1 ;
9383: LD_ADDR_VAR 0 14
9387: PUSH
9388: LD_VAR 0 14
9392: PUSH
9393: LD_INT 1
9395: PLUS
9396: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9397: LD_VAR 0 1
9401: PPUSH
9402: LD_VAR 0 8
9406: PUSH
9407: LD_VAR 0 14
9411: ARRAY
9412: PUSH
9413: LD_INT 1
9415: ARRAY
9416: PPUSH
9417: LD_VAR 0 8
9421: PUSH
9422: LD_VAR 0 14
9426: ARRAY
9427: PUSH
9428: LD_INT 2
9430: ARRAY
9431: PPUSH
9432: CALL_OW 297
9436: PUSH
9437: LD_VAR 0 12
9441: EQUAL
9442: IFFALSE 9507
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9444: LD_ADDR_VAR 0 7
9448: PUSH
9449: LD_VAR 0 7
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: LD_VAR 0 8
9461: PUSH
9462: LD_VAR 0 14
9466: ARRAY
9467: PPUSH
9468: CALL_OW 2
9472: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9473: LD_ADDR_VAR 0 8
9477: PUSH
9478: LD_VAR 0 8
9482: PPUSH
9483: LD_VAR 0 14
9487: PPUSH
9488: CALL_OW 3
9492: ST_TO_ADDR
// c = c - 1 ;
9493: LD_ADDR_VAR 0 14
9497: PUSH
9498: LD_VAR 0 14
9502: PUSH
9503: LD_INT 1
9505: MINUS
9506: ST_TO_ADDR
// end ; until c = list_coords ;
9507: LD_VAR 0 14
9511: PUSH
9512: LD_VAR 0 8
9516: EQUAL
9517: IFFALSE 9383
// c = 0 ;
9519: LD_ADDR_VAR 0 14
9523: PUSH
9524: LD_INT 0
9526: ST_TO_ADDR
// if list_nearest > 0 then
9527: LD_VAR 0 7
9531: PUSH
9532: LD_INT 0
9534: GREATER
9535: IFFALSE 9677
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9537: LD_ADDR_VAR 0 15
9541: PUSH
9542: LD_INT 1
9544: PPUSH
9545: LD_VAR 0 7
9549: PPUSH
9550: CALL_OW 12
9554: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9555: LD_ADDR_VAR 0 16
9559: PUSH
9560: LD_VAR 0 7
9564: PUSH
9565: LD_VAR 0 15
9569: ARRAY
9570: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9571: LD_VAR 0 16
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: PPUSH
9580: LD_VAR 0 16
9584: PUSH
9585: LD_INT 2
9587: ARRAY
9588: PPUSH
9589: CALL_OW 488
9593: PUSH
9594: LD_INT 0
9596: GREATER
9597: PUSH
9598: LD_VAR 0 16
9602: PUSH
9603: LD_INT 1
9605: ARRAY
9606: PPUSH
9607: LD_VAR 0 16
9611: PUSH
9612: LD_INT 2
9614: ARRAY
9615: PPUSH
9616: CALL_OW 428
9620: PUSH
9621: LD_INT 0
9623: EQUAL
9624: AND
9625: IFFALSE 9637
// c = 1 else
9627: LD_ADDR_VAR 0 14
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
9635: GO 9657
// list_nearest = Delete ( list_nearest , rand_num ) ;
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_VAR 0 7
9646: PPUSH
9647: LD_VAR 0 15
9651: PPUSH
9652: CALL_OW 3
9656: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9657: LD_VAR 0 14
9661: PUSH
9662: LD_INT 1
9664: EQUAL
9665: PUSH
9666: LD_VAR 0 7
9670: PUSH
9671: LD_INT 0
9673: EQUAL
9674: OR
9675: IFFALSE 9537
// end ; until c = 1 or list_coords = 0 ;
9677: LD_VAR 0 14
9681: PUSH
9682: LD_INT 1
9684: EQUAL
9685: PUSH
9686: LD_VAR 0 8
9690: PUSH
9691: LD_INT 0
9693: EQUAL
9694: OR
9695: IFFALSE 9295
// attempts = attempts + 1 ;
9697: LD_ADDR_VAR 0 17
9701: PUSH
9702: LD_VAR 0 17
9706: PUSH
9707: LD_INT 1
9709: PLUS
9710: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9711: LD_VAR 0 14
9715: PUSH
9716: LD_INT 1
9718: EQUAL
9719: PUSH
9720: LD_VAR 0 17
9724: PUSH
9725: LD_INT 1
9727: GREATER
9728: OR
9729: IFFALSE 8254
// if c = 1 then
9731: LD_VAR 0 14
9735: PUSH
9736: LD_INT 1
9738: EQUAL
9739: IFFALSE 9803
// if add then
9741: LD_VAR 0 5
9745: IFFALSE 9776
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_VAR 0 16
9756: PUSH
9757: LD_INT 1
9759: ARRAY
9760: PPUSH
9761: LD_VAR 0 16
9765: PUSH
9766: LD_INT 2
9768: ARRAY
9769: PPUSH
9770: CALL_OW 171
9774: GO 9803
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9776: LD_VAR 0 1
9780: PPUSH
9781: LD_VAR 0 16
9785: PUSH
9786: LD_INT 1
9788: ARRAY
9789: PPUSH
9790: LD_VAR 0 16
9794: PUSH
9795: LD_INT 2
9797: ARRAY
9798: PPUSH
9799: CALL_OW 111
// end ;
9803: LD_VAR 0 6
9807: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9808: LD_INT 0
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9816: LD_VAR 0 1
9820: PPUSH
9821: LD_VAR 0 2
9825: PPUSH
9826: CALL_OW 488
9830: NOT
9831: PUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: LD_VAR 0 4
9841: PPUSH
9842: CALL_OW 488
9846: NOT
9847: OR
9848: IFFALSE 9861
// begin result = - 1 ;
9850: LD_ADDR_VAR 0 5
9854: PUSH
9855: LD_INT 1
9857: NEG
9858: ST_TO_ADDR
// exit ;
9859: GO 10021
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9861: LD_ADDR_VAR 0 6
9865: PUSH
9866: LD_VAR 0 1
9870: PPUSH
9871: LD_VAR 0 2
9875: PPUSH
9876: LD_VAR 0 3
9880: PPUSH
9881: LD_VAR 0 4
9885: PPUSH
9886: CALL_OW 298
9890: ST_TO_ADDR
// dist_2 = 99999 ;
9891: LD_ADDR_VAR 0 7
9895: PUSH
9896: LD_INT 99999
9898: ST_TO_ADDR
// for b = 0 to 5 do
9899: LD_ADDR_VAR 0 8
9903: PUSH
9904: DOUBLE
9905: LD_INT 0
9907: DEC
9908: ST_TO_ADDR
9909: LD_INT 5
9911: PUSH
9912: FOR_TO
9913: IFFALSE 10009
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9915: LD_ADDR_VAR 0 9
9919: PUSH
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_VAR 0 8
9929: PPUSH
9930: LD_VAR 0 6
9934: PPUSH
9935: CALL_OW 272
9939: PPUSH
9940: LD_VAR 0 2
9944: PPUSH
9945: LD_VAR 0 8
9949: PPUSH
9950: LD_VAR 0 6
9954: PPUSH
9955: CALL_OW 273
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_VAR 0 4
9969: PPUSH
9970: CALL_OW 298
9974: ST_TO_ADDR
// if temp_dist < dist_2 then
9975: LD_VAR 0 9
9979: PUSH
9980: LD_VAR 0 7
9984: LESS
9985: IFFALSE 10007
// begin dist_2 = temp_dist ;
9987: LD_ADDR_VAR 0 7
9991: PUSH
9992: LD_VAR 0 9
9996: ST_TO_ADDR
// dir = b ;
9997: LD_ADDR_VAR 0 10
10001: PUSH
10002: LD_VAR 0 8
10006: ST_TO_ADDR
// end ; end ;
10007: GO 9912
10009: POP
10010: POP
// result = dir ;
10011: LD_ADDR_VAR 0 5
10015: PUSH
10016: LD_VAR 0 10
10020: ST_TO_ADDR
// end ;
10021: LD_VAR 0 5
10025: RET
// export function MoveToHill ; begin
10026: LD_INT 0
10028: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10029: LD_EXP 44
10033: PPUSH
10034: LD_INT 65
10036: PPUSH
10037: LD_INT 59
10039: PPUSH
10040: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10044: LD_EXP 44
10048: PPUSH
10049: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10053: LD_EXP 45
10057: PPUSH
10058: LD_INT 65
10060: PPUSH
10061: LD_INT 58
10063: PPUSH
10064: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10068: LD_EXP 45
10072: PPUSH
10073: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10077: LD_EXP 46
10081: PPUSH
10082: LD_INT 64
10084: PPUSH
10085: LD_INT 57
10087: PPUSH
10088: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10092: LD_EXP 46
10096: PPUSH
10097: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10101: LD_EXP 47
10105: PPUSH
10106: LD_INT 64
10108: PPUSH
10109: LD_INT 56
10111: PPUSH
10112: CALL_OW 111
// AddComCrawl ( Balei ) ;
10116: LD_EXP 47
10120: PPUSH
10121: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10125: LD_EXP 48
10129: PPUSH
10130: LD_INT 63
10132: PPUSH
10133: LD_INT 55
10135: PPUSH
10136: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10140: LD_EXP 48
10144: PPUSH
10145: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10149: LD_EXP 49
10153: PPUSH
10154: LD_INT 66
10156: PPUSH
10157: LD_INT 58
10159: PPUSH
10160: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10164: LD_EXP 49
10168: PPUSH
10169: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10173: LD_EXP 51
10177: PPUSH
10178: CALL_OW 255
10182: PUSH
10183: LD_INT 6
10185: EQUAL
10186: PUSH
10187: LD_EXP 11
10191: AND
10192: IFFALSE 10218
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10194: LD_EXP 51
10198: PPUSH
10199: LD_INT 63
10201: PPUSH
10202: LD_INT 54
10204: PPUSH
10205: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10209: LD_EXP 51
10213: PPUSH
10214: CALL_OW 197
// end ; end ; end_of_file
10218: LD_VAR 0 1
10222: RET
// export function BurlakDying ; begin
10223: LD_INT 0
10225: PPUSH
// YouLost ( Burlak ) ;
10226: LD_STRING Burlak
10228: PPUSH
10229: CALL_OW 104
// end ;
10233: LD_VAR 0 1
10237: RET
// every 0 0$1 trigger kirovSolds = 0 do
10238: LD_EXP 53
10242: PUSH
10243: LD_INT 0
10245: EQUAL
10246: IFFALSE 10258
10248: GO 10250
10250: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10251: LD_STRING KirovSoldsDie
10253: PPUSH
10254: CALL_OW 104
10258: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10259: LD_EXP 21
10263: PUSH
10264: LD_INT 1
10266: PPUSH
10267: LD_INT 22
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 21
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 71
10295: PUSH
10296: LD_INT 0
10298: EQUAL
10299: AND
10300: IFFALSE 10494
10302: GO 10304
10304: DISABLE
10305: LD_INT 0
10307: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10308: LD_EXP 50
10312: PPUSH
10313: CALL_OW 302
10317: PUSH
10318: LD_EXP 50
10322: PPUSH
10323: CALL_OW 255
10327: PUSH
10328: LD_INT 8
10330: EQUAL
10331: AND
10332: PUSH
10333: LD_EXP 51
10337: PPUSH
10338: CALL_OW 302
10342: PUSH
10343: LD_EXP 51
10347: PPUSH
10348: CALL_OW 255
10352: PUSH
10353: LD_INT 8
10355: EQUAL
10356: AND
10357: OR
10358: IFFALSE 10490
// begin case Query ( QExit2 ) of 1 :
10360: LD_STRING QExit2
10362: PPUSH
10363: CALL_OW 97
10367: PUSH
10368: LD_INT 1
10370: DOUBLE
10371: EQUAL
10372: IFTRUE 10376
10374: GO 10468
10376: POP
// begin if IsOk ( Belkov ) then
10377: LD_EXP 48
10381: PPUSH
10382: CALL_OW 302
10386: IFFALSE 10402
// Say ( Belkov , D12-Bel-1 ) else
10388: LD_EXP 48
10392: PPUSH
10393: LD_STRING D12-Bel-1
10395: PPUSH
10396: CALL_OW 88
10400: GO 10462
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 50
10424: PUSH
10425: EMPTY
10426: LIST
10427: PUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: PPUSH
10449: LD_STRING D12-RSol1-1
10451: PPUSH
10452: LD_STRING 
10454: PPUSH
10455: LD_INT 0
10457: PPUSH
10458: CALL 7813 0 4
// FinishMission ;
10462: CALL 10497 0 0
// end ; 2 :
10466: GO 10488
10468: LD_INT 2
10470: DOUBLE
10471: EQUAL
10472: IFTRUE 10476
10474: GO 10487
10476: POP
// begin wait ( 0 0$5 ) ;
10477: LD_INT 175
10479: PPUSH
10480: CALL_OW 67
// enable ;
10484: ENABLE
// end ; end ;
10485: GO 10488
10487: POP
// end else
10488: GO 10494
// FinishMission ;
10490: CALL 10497 0 0
// end ;
10494: PPOPN 1
10496: END
// function FinishMission ; begin
10497: LD_INT 0
10499: PPUSH
// SetRewards ;
10500: CALL 10521 0 0
// SavePlayerCharacters ;
10504: CALL 10872 0 0
// SaveGlobalVariables ;
10508: CALL 11002 0 0
// YouWin ;
10512: CALL_OW 103
// end ;
10516: LD_VAR 0 1
10520: RET
// function SetRewards ; begin
10521: LD_INT 0
10523: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10524: LD_EXP 18
10528: NOT
10529: PUSH
10530: LD_EXP 19
10534: NOT
10535: AND
10536: IFFALSE 10548
// AddMedal ( NoEscape , 1 ) ;
10538: LD_STRING NoEscape
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10548: LD_EXP 18
10552: PUSH
10553: LD_EXP 19
10557: NOT
10558: AND
10559: IFFALSE 10572
// AddMedal ( NoEscape , - 1 ) ;
10561: LD_STRING NoEscape
10563: PPUSH
10564: LD_INT 1
10566: NEG
10567: PPUSH
10568: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10572: LD_EXP 18
10576: NOT
10577: PUSH
10578: LD_EXP 19
10582: AND
10583: IFFALSE 10596
// AddMedal ( NoEscape , - 2 ) ;
10585: LD_STRING NoEscape
10587: PPUSH
10588: LD_INT 2
10590: NEG
10591: PPUSH
10592: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10596: LD_EXP 18
10600: PUSH
10601: LD_EXP 19
10605: AND
10606: IFFALSE 10619
// AddMedal ( NoEscape , - 3 ) ;
10608: LD_STRING NoEscape
10610: PPUSH
10611: LD_INT 3
10613: NEG
10614: PPUSH
10615: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10619: LD_EXP 11
10623: PUSH
10624: LD_EXP 51
10628: PPUSH
10629: CALL_OW 302
10633: AND
10634: PUSH
10635: LD_EXP 20
10639: AND
10640: PUSH
10641: LD_EXP 50
10645: PPUSH
10646: CALL_OW 302
10650: AND
10651: IFFALSE 10663
// AddMedal ( Gnyevko , 1 ) ;
10653: LD_STRING Gnyevko
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10663: LD_EXP 11
10667: NOT
10668: PUSH
10669: LD_EXP 20
10673: AND
10674: PUSH
10675: LD_EXP 50
10679: PPUSH
10680: CALL_OW 302
10684: AND
10685: IFFALSE 10698
// AddMedal ( Gnyevko , - 1 ) ;
10687: LD_STRING Gnyevko
10689: PPUSH
10690: LD_INT 1
10692: NEG
10693: PPUSH
10694: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10698: LD_EXP 11
10702: PUSH
10703: LD_EXP 20
10707: NOT
10708: PUSH
10709: LD_EXP 51
10713: PPUSH
10714: CALL_OW 302
10718: NOT
10719: OR
10720: PUSH
10721: LD_EXP 50
10725: PPUSH
10726: CALL_OW 302
10730: NOT
10731: OR
10732: AND
10733: IFFALSE 10746
// AddMedal ( Gnyevko , - 2 ) ;
10735: LD_STRING Gnyevko
10737: PPUSH
10738: LD_INT 2
10740: NEG
10741: PPUSH
10742: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10746: LD_EXP 11
10750: NOT
10751: PUSH
10752: LD_EXP 20
10756: NOT
10757: AND
10758: PUSH
10759: LD_EXP 51
10763: PPUSH
10764: CALL_OW 302
10768: NOT
10769: PUSH
10770: LD_EXP 50
10774: PPUSH
10775: CALL_OW 302
10779: NOT
10780: AND
10781: OR
10782: IFFALSE 10795
// AddMedal ( Gnyevko , - 3 ) ;
10784: LD_STRING Gnyevko
10786: PPUSH
10787: LD_INT 3
10789: NEG
10790: PPUSH
10791: CALL_OW 101
// if lostComradesCounter = 0 then
10795: LD_EXP 22
10799: PUSH
10800: LD_INT 0
10802: EQUAL
10803: IFFALSE 10817
// AddMedal ( NoLosses , 1 ) else
10805: LD_STRING NoLosses
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 101
10815: GO 10827
// AddMedal ( NoLosses , 0 ) ;
10817: LD_STRING NoLosses
10819: PPUSH
10820: LD_INT 0
10822: PPUSH
10823: CALL_OW 101
// GiveMedals ( Main ) ;
10827: LD_STRING Main
10829: PPUSH
10830: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10834: LD_INT 22
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 21
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 69
10862: PPUSH
10863: CALL_OW 43
// end ;
10867: LD_VAR 0 1
10871: RET
// function SavePlayerCharacters ; var others ; begin
10872: LD_INT 0
10874: PPUSH
10875: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10876: LD_EXP 43
10880: PPUSH
10881: LD_STRING Burlak
10883: PPUSH
10884: CALL 7992 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10888: LD_EXP 51
10892: PPUSH
10893: LD_STRING Gnyevko
10895: PPUSH
10896: CALL 7992 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10900: LD_EXP 48
10904: PPUSH
10905: LD_STRING Belkov
10907: PPUSH
10908: CALL 7992 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10912: LD_EXP 50
10916: PPUSH
10917: LD_STRING Kirilenkova
10919: PPUSH
10920: CALL 7992 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10924: LD_ADDR_VAR 0 2
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 3
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PUSH
10958: LD_EXP 43
10962: PUSH
10963: LD_EXP 51
10967: PUSH
10968: LD_EXP 48
10972: PUSH
10973: LD_EXP 50
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: DIFF
10984: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
10985: LD_VAR 0 2
10989: PPUSH
10990: LD_STRING other_survivors
10992: PPUSH
10993: CALL 8048 0 2
// end ;
10997: LD_VAR 0 1
11001: RET
// function SaveGlobalVariables ; begin
11002: LD_INT 0
11004: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11005: LD_EXP 1
11009: PPUSH
11010: LD_STRING 01_GladstoneStatus
11012: PPUSH
11013: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11017: LD_EXP 2
11021: PPUSH
11022: LD_STRING 01_JohannaStatus
11024: PPUSH
11025: CALL_OW 39
// end ; end_of_file
11029: LD_VAR 0 1
11033: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11034: LD_INT 0
11036: PPUSH
11037: PPUSH
11038: PPUSH
// uc_side = 1 ;
11039: LD_ADDR_OWVAR 20
11043: PUSH
11044: LD_INT 1
11046: ST_TO_ADDR
// hc_class := 1 ;
11047: LD_ADDR_OWVAR 28
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// hc_sex := sex_male ;
11055: LD_ADDR_OWVAR 27
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11063: LD_ADDR_OWVAR 33
11067: PUSH
11068: LD_STRING AmGalRemake
11070: ST_TO_ADDR
// hc_face_number := 1 ;
11071: LD_ADDR_OWVAR 34
11075: PUSH
11076: LD_INT 1
11078: ST_TO_ADDR
// hc_name := Charles Brown ;
11079: LD_ADDR_OWVAR 26
11083: PUSH
11084: LD_STRING Charles Brown
11086: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11087: LD_ADDR_OWVAR 29
11091: PUSH
11092: LD_INT 12
11094: PUSH
11095: LD_INT 11
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11102: LD_ADDR_OWVAR 31
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: LD_INT 0
11112: PUSH
11113: LD_INT 1
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: ST_TO_ADDR
// Charles = CreateHuman ;
11125: LD_ADDR_EXP 39
11129: PUSH
11130: CALL_OW 44
11134: ST_TO_ADDR
// hc_class := 1 ;
11135: LD_ADDR_OWVAR 28
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// hc_sex := sex_female ;
11143: LD_ADDR_OWVAR 27
11147: PUSH
11148: LD_INT 2
11150: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11151: LD_ADDR_OWVAR 33
11155: PUSH
11156: LD_STRING AmGalRemake
11158: ST_TO_ADDR
// hc_face_number := 2 ;
11159: LD_ADDR_OWVAR 34
11163: PUSH
11164: LD_INT 2
11166: ST_TO_ADDR
// hc_name := Johanna Holland ;
11167: LD_ADDR_OWVAR 26
11171: PUSH
11172: LD_STRING Johanna Holland
11174: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11175: LD_ADDR_OWVAR 29
11179: PUSH
11180: LD_INT 12
11182: PUSH
11183: LD_INT 11
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11190: LD_ADDR_OWVAR 31
11194: PUSH
11195: LD_EXP 33
11199: PUSH
11200: LD_INT 0
11202: PPUSH
11203: LD_INT 2
11205: PPUSH
11206: CALL_OW 12
11210: PUSH
11211: LD_INT 0
11213: PPUSH
11214: LD_INT 2
11216: PPUSH
11217: CALL_OW 12
11221: PUSH
11222: LD_INT 0
11224: PPUSH
11225: LD_INT 2
11227: PPUSH
11228: CALL_OW 12
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: ST_TO_ADDR
// Johanna = CreateHuman ;
11239: LD_ADDR_EXP 40
11243: PUSH
11244: CALL_OW 44
11248: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11249: LD_EXP 40
11253: PPUSH
11254: LD_INT 19
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11264: LD_EXP 40
11268: PPUSH
11269: LD_INT 23
11271: PPUSH
11272: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11276: LD_ADDR_EXP 41
11280: PUSH
11281: LD_STRING Gladstone
11283: PPUSH
11284: LD_INT 0
11286: PPUSH
11287: CALL 7750 0 2
11291: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11292: LD_EXP 41
11296: PPUSH
11297: LD_INT 22
11299: PPUSH
11300: CALL_OW 52
// amApemans = [ ] ;
11304: LD_ADDR_EXP 42
11308: PUSH
11309: EMPTY
11310: ST_TO_ADDR
// for i := 1 to amApeAmount do
11311: LD_ADDR_VAR 0 2
11315: PUSH
11316: DOUBLE
11317: LD_INT 1
11319: DEC
11320: ST_TO_ADDR
11321: LD_EXP 32
11325: PUSH
11326: FOR_TO
11327: IFFALSE 11442
// begin hc_class := class_apeman ;
11329: LD_ADDR_OWVAR 28
11333: PUSH
11334: LD_INT 12
11336: ST_TO_ADDR
// hc_gallery :=  ;
11337: LD_ADDR_OWVAR 33
11341: PUSH
11342: LD_STRING 
11344: ST_TO_ADDR
// hc_name :=  ;
11345: LD_ADDR_OWVAR 26
11349: PUSH
11350: LD_STRING 
11352: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11353: LD_ADDR_OWVAR 31
11357: PUSH
11358: LD_EXP 33
11362: PUSH
11363: LD_INT 0
11365: PPUSH
11366: LD_INT 2
11368: PPUSH
11369: CALL_OW 12
11373: PUSH
11374: LD_INT 0
11376: PPUSH
11377: LD_INT 2
11379: PPUSH
11380: CALL_OW 12
11384: PUSH
11385: LD_INT 0
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 12
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: ST_TO_ADDR
// ape = CreateHuman ;
11402: LD_ADDR_VAR 0 3
11406: PUSH
11407: CALL_OW 44
11411: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_INT 22
11419: PPUSH
11420: CALL_OW 52
// amApemans = amApemans ^ ape ;
11424: LD_ADDR_EXP 42
11428: PUSH
11429: LD_EXP 42
11433: PUSH
11434: LD_VAR 0 3
11438: ADD
11439: ST_TO_ADDR
// end ;
11440: GO 11326
11442: POP
11443: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11444: LD_INT 23
11446: PPUSH
11447: LD_EXP 30
11451: PPUSH
11452: CALL_OW 234
// end ; end_of_file
11456: LD_VAR 0 1
11460: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11461: LD_INT 0
11463: PPUSH
// PrepareHero ;
11464: CALL 11489 0 0
// PreparePokryshkinTeams ;
11468: CALL 11583 0 0
// PrepareJelena ;
11472: CALL 11848 0 0
// PrepareGnyevko ;
11476: CALL 11880 0 0
// PrepareKurin ;
11480: CALL 11551 0 0
// end ;
11484: LD_VAR 0 1
11488: RET
// function PrepareHero ; begin
11489: LD_INT 0
11491: PPUSH
// uc_side = 3 ;
11492: LD_ADDR_OWVAR 20
11496: PUSH
11497: LD_INT 3
11499: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11500: LD_ADDR_EXP 43
11504: PUSH
11505: LD_STRING Burlak
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL 7750 0 2
11515: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11516: LD_EXP 43
11520: PPUSH
11521: LD_EXP 34
11525: PUSH
11526: LD_INT 1
11528: ARRAY
11529: PPUSH
11530: LD_EXP 34
11534: PUSH
11535: LD_INT 2
11537: ARRAY
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 48
// end ;
11546: LD_VAR 0 1
11550: RET
// function PrepareKurin ; begin
11551: LD_INT 0
11553: PPUSH
// uc_side = 6 ;
11554: LD_ADDR_OWVAR 20
11558: PUSH
11559: LD_INT 6
11561: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11562: LD_ADDR_EXP 52
11566: PUSH
11567: LD_STRING Kurin
11569: PPUSH
11570: LD_INT 0
11572: PPUSH
11573: CALL 7750 0 2
11577: ST_TO_ADDR
// end ;
11578: LD_VAR 0 1
11582: RET
// function PreparePokryshkinTeams ; begin
11583: LD_INT 0
11585: PPUSH
// uc_side = 6 ;
11586: LD_ADDR_OWVAR 20
11590: PUSH
11591: LD_INT 6
11593: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11594: LD_ADDR_EXP 44
11598: PUSH
11599: LD_STRING Pokryshkin
11601: PPUSH
11602: LD_INT 0
11604: PPUSH
11605: CALL 7750 0 2
11609: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11610: LD_ADDR_EXP 45
11614: PUSH
11615: LD_STRING Saseda
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL 7750 0 2
11625: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11626: LD_ADDR_EXP 46
11630: PUSH
11631: LD_STRING Jaworska
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL 7750 0 2
11641: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11642: LD_ADDR_EXP 47
11646: PUSH
11647: LD_STRING Balei
11649: PPUSH
11650: LD_INT 0
11652: PPUSH
11653: CALL 7750 0 2
11657: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11658: LD_ADDR_EXP 48
11662: PUSH
11663: LD_STRING Belkov
11665: PPUSH
11666: LD_INT 0
11668: PPUSH
11669: CALL 7750 0 2
11673: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
11674: LD_EXP 44
11678: PPUSH
11679: LD_INT 25
11681: PPUSH
11682: LD_INT 0
11684: PPUSH
11685: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11689: LD_EXP 45
11693: PPUSH
11694: LD_INT 17
11696: PPUSH
11697: LD_INT 0
11699: PPUSH
11700: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11704: LD_EXP 46
11708: PPUSH
11709: LD_INT 17
11711: PPUSH
11712: LD_INT 0
11714: PPUSH
11715: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11719: LD_EXP 47
11723: PPUSH
11724: LD_INT 17
11726: PPUSH
11727: LD_INT 0
11729: PPUSH
11730: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11734: LD_EXP 48
11738: PPUSH
11739: LD_INT 17
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11749: LD_ADDR_EXP 53
11753: PUSH
11754: LD_EXP 44
11758: PUSH
11759: LD_EXP 45
11763: PUSH
11764: LD_EXP 47
11768: PUSH
11769: LD_EXP 48
11773: PUSH
11774: LD_EXP 46
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: ST_TO_ADDR
// if Difficulty < 3 then
11786: LD_OWVAR 67
11790: PUSH
11791: LD_INT 3
11793: LESS
11794: IFFALSE 11843
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11796: LD_ADDR_EXP 49
11800: PUSH
11801: LD_STRING Jaunzeme
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: CALL 7750 0 2
11811: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
11812: LD_EXP 49
11816: PPUSH
11817: LD_INT 26
11819: PPUSH
11820: LD_INT 0
11822: PPUSH
11823: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11827: LD_ADDR_EXP 53
11831: PUSH
11832: LD_EXP 53
11836: PUSH
11837: LD_EXP 49
11841: ADD
11842: ST_TO_ADDR
// end ; end ;
11843: LD_VAR 0 1
11847: RET
// function PrepareJelena ; begin
11848: LD_INT 0
11850: PPUSH
// uc_side = 8 ;
11851: LD_ADDR_OWVAR 20
11855: PUSH
11856: LD_INT 8
11858: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11859: LD_ADDR_EXP 50
11863: PUSH
11864: LD_STRING Kirilenkova
11866: PPUSH
11867: LD_INT 0
11869: PPUSH
11870: CALL 7750 0 2
11874: ST_TO_ADDR
// end ;
11875: LD_VAR 0 1
11879: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11880: LD_INT 0
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
// uc_side = 8 ;
11886: LD_ADDR_OWVAR 20
11890: PUSH
11891: LD_INT 8
11893: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11894: LD_ADDR_EXP 51
11898: PUSH
11899: LD_STRING Gnyevko
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: CALL 7750 0 2
11909: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11910: LD_ADDR_VAR 0 4
11914: PUSH
11915: LD_EXP 35
11919: PUSH
11920: LD_INT 1
11922: PPUSH
11923: LD_EXP 35
11927: PPUSH
11928: CALL_OW 12
11932: ARRAY
11933: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11934: LD_EXP 51
11938: PPUSH
11939: LD_VAR 0 4
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PPUSH
11948: LD_VAR 0 4
11952: PUSH
11953: LD_INT 2
11955: ARRAY
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11964: LD_EXP 51
11968: PPUSH
11969: LD_INT 500
11971: PPUSH
11972: CALL_OW 234
// ComHold ( Gnyevko ) ;
11976: LD_EXP 51
11980: PPUSH
11981: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
11985: LD_ADDR_VAR 0 3
11989: PUSH
11990: DOUBLE
11991: LD_INT 1
11993: DEC
11994: ST_TO_ADDR
11995: LD_EXP 24
11999: PUSH
12000: LD_INT 1
12002: ARRAY
12003: PUSH
12004: LD_INT 3
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: PUSH
12018: LD_OWVAR 67
12022: ARRAY
12023: MINUS
12024: PUSH
12025: FOR_TO
12026: IFFALSE 12156
// begin uc_side = 0 ;
12028: LD_ADDR_OWVAR 20
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// uc_nation = nation_nature ;
12036: LD_ADDR_OWVAR 21
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// hc_class = class_apeman ;
12044: LD_ADDR_OWVAR 28
12048: PUSH
12049: LD_INT 12
12051: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12052: LD_ADDR_OWVAR 31
12056: PUSH
12057: LD_EXP 25
12061: PUSH
12062: LD_INT 1
12064: ARRAY
12065: PUSH
12066: LD_EXP 25
12070: PUSH
12071: LD_INT 2
12073: ARRAY
12074: PUSH
12075: LD_EXP 25
12079: PUSH
12080: LD_INT 3
12082: ARRAY
12083: PUSH
12084: LD_EXP 25
12088: PUSH
12089: LD_INT 4
12091: ARRAY
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12099: LD_ADDR_OWVAR 35
12103: PUSH
12104: LD_EXP 31
12108: ST_TO_ADDR
// un = CreateHuman ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: CALL_OW 44
12118: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12119: LD_VAR 0 2
12123: PPUSH
12124: LD_EXP 51
12128: PPUSH
12129: CALL_OW 250
12133: PPUSH
12134: LD_EXP 51
12138: PPUSH
12139: CALL_OW 251
12143: PPUSH
12144: LD_INT 8
12146: PPUSH
12147: LD_INT 0
12149: PPUSH
12150: CALL_OW 50
// end ;
12154: GO 12025
12156: POP
12157: POP
// end ; end_of_file
12158: LD_VAR 0 1
12162: RET
// export function PrepareNature ; var i , un ; begin
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: DOUBLE
12174: LD_INT 1
12176: DEC
12177: ST_TO_ADDR
12178: LD_EXP 24
12182: PUSH
12183: LD_INT 1
12185: ARRAY
12186: PUSH
12187: FOR_TO
12188: IFFALSE 12298
// begin uc_side = 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// uc_nation = nation_nature ;
12198: LD_ADDR_OWVAR 21
12202: PUSH
12203: LD_INT 0
12205: ST_TO_ADDR
// hc_class = class_apeman ;
12206: LD_ADDR_OWVAR 28
12210: PUSH
12211: LD_INT 12
12213: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12214: LD_ADDR_OWVAR 31
12218: PUSH
12219: LD_EXP 25
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PUSH
12228: LD_EXP 25
12232: PUSH
12233: LD_INT 2
12235: ARRAY
12236: PUSH
12237: LD_EXP 25
12241: PUSH
12242: LD_INT 3
12244: ARRAY
12245: PUSH
12246: LD_EXP 25
12250: PUSH
12251: LD_INT 4
12253: ARRAY
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12261: LD_ADDR_OWVAR 35
12265: PUSH
12266: LD_EXP 31
12270: ST_TO_ADDR
// un = CreateHuman ;
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: CALL_OW 44
12280: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12281: LD_VAR 0 3
12285: PPUSH
12286: LD_INT 16
12288: PPUSH
12289: LD_INT 0
12291: PPUSH
12292: CALL_OW 49
// end ;
12296: GO 12187
12298: POP
12299: POP
// for i := 1 to animalsAmount [ 2 ] do
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: DOUBLE
12306: LD_INT 1
12308: DEC
12309: ST_TO_ADDR
12310: LD_EXP 24
12314: PUSH
12315: LD_INT 2
12317: ARRAY
12318: PUSH
12319: FOR_TO
12320: IFFALSE 12430
// begin uc_side = 0 ;
12322: LD_ADDR_OWVAR 20
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// uc_nation = nation_nature ;
12330: LD_ADDR_OWVAR 21
12334: PUSH
12335: LD_INT 0
12337: ST_TO_ADDR
// hc_class = class_phororhacos ;
12338: LD_ADDR_OWVAR 28
12342: PUSH
12343: LD_INT 18
12345: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12346: LD_ADDR_OWVAR 31
12350: PUSH
12351: LD_EXP 25
12355: PUSH
12356: LD_INT 1
12358: ARRAY
12359: PUSH
12360: LD_EXP 25
12364: PUSH
12365: LD_INT 2
12367: ARRAY
12368: PUSH
12369: LD_EXP 25
12373: PUSH
12374: LD_INT 3
12376: ARRAY
12377: PUSH
12378: LD_EXP 25
12382: PUSH
12383: LD_INT 4
12385: ARRAY
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12393: LD_ADDR_OWVAR 35
12397: PUSH
12398: LD_EXP 26
12402: ST_TO_ADDR
// un = CreateHuman ;
12403: LD_ADDR_VAR 0 3
12407: PUSH
12408: CALL_OW 44
12412: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12413: LD_VAR 0 3
12417: PPUSH
12418: LD_INT 15
12420: PPUSH
12421: LD_INT 0
12423: PPUSH
12424: CALL_OW 49
// end ;
12428: GO 12319
12430: POP
12431: POP
// for i := 1 to animalsAmount [ 3 ] do
12432: LD_ADDR_VAR 0 2
12436: PUSH
12437: DOUBLE
12438: LD_INT 1
12440: DEC
12441: ST_TO_ADDR
12442: LD_EXP 24
12446: PUSH
12447: LD_INT 3
12449: ARRAY
12450: PUSH
12451: FOR_TO
12452: IFFALSE 12562
// begin uc_side = 0 ;
12454: LD_ADDR_OWVAR 20
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// uc_nation = nation_nature ;
12462: LD_ADDR_OWVAR 21
12466: PUSH
12467: LD_INT 0
12469: ST_TO_ADDR
// hc_class = class_tiger ;
12470: LD_ADDR_OWVAR 28
12474: PUSH
12475: LD_INT 14
12477: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12478: LD_ADDR_OWVAR 31
12482: PUSH
12483: LD_EXP 25
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PUSH
12492: LD_EXP 25
12496: PUSH
12497: LD_INT 2
12499: ARRAY
12500: PUSH
12501: LD_EXP 25
12505: PUSH
12506: LD_INT 3
12508: ARRAY
12509: PUSH
12510: LD_EXP 25
12514: PUSH
12515: LD_INT 4
12517: ARRAY
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12525: LD_ADDR_OWVAR 35
12529: PUSH
12530: LD_EXP 26
12534: ST_TO_ADDR
// un = CreateHuman ;
12535: LD_ADDR_VAR 0 3
12539: PUSH
12540: CALL_OW 44
12544: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 15
12552: PPUSH
12553: LD_INT 0
12555: PPUSH
12556: CALL_OW 49
// end ;
12560: GO 12451
12562: POP
12563: POP
// for i := 1 to animalsAmount [ 4 ] do
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: DOUBLE
12570: LD_INT 1
12572: DEC
12573: ST_TO_ADDR
12574: LD_EXP 24
12578: PUSH
12579: LD_INT 4
12581: ARRAY
12582: PUSH
12583: FOR_TO
12584: IFFALSE 12694
// begin uc_side = 0 ;
12586: LD_ADDR_OWVAR 20
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// uc_nation = nation_nature ;
12594: LD_ADDR_OWVAR 21
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// hc_class = 21 ;
12602: LD_ADDR_OWVAR 28
12606: PUSH
12607: LD_INT 21
12609: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12610: LD_ADDR_OWVAR 31
12614: PUSH
12615: LD_EXP 25
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PUSH
12624: LD_EXP 25
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PUSH
12633: LD_EXP 25
12637: PUSH
12638: LD_INT 3
12640: ARRAY
12641: PUSH
12642: LD_EXP 25
12646: PUSH
12647: LD_INT 4
12649: ARRAY
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12657: LD_ADDR_OWVAR 35
12661: PUSH
12662: LD_EXP 26
12666: ST_TO_ADDR
// un = CreateHuman ;
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: CALL_OW 44
12676: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 15
12684: PPUSH
12685: LD_INT 0
12687: PPUSH
12688: CALL_OW 49
// end ;
12692: GO 12583
12694: POP
12695: POP
// end ; end_of_file
12696: LD_VAR 0 1
12700: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12701: LD_VAR 0 1
12705: PUSH
12706: LD_EXP 43
12710: EQUAL
12711: PUSH
12712: LD_EXP 50
12716: PPUSH
12717: CALL_OW 255
12721: PUSH
12722: LD_INT 3
12724: EQUAL
12725: NOT
12726: AND
12727: PUSH
12728: LD_EXP 50
12732: PPUSH
12733: CALL_OW 302
12737: NOT
12738: AND
12739: IFFALSE 12745
// BurlakDying ;
12741: CALL 10223 0 0
// if unit = Gladstone then
12745: LD_VAR 0 1
12749: PUSH
12750: LD_EXP 41
12754: EQUAL
12755: IFFALSE 12765
// gladstoneStatus = 0 ;
12757: LD_ADDR_EXP 1
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// if unit = Johanna then
12765: LD_VAR 0 1
12769: PUSH
12770: LD_EXP 40
12774: EQUAL
12775: IFFALSE 12785
// johannaStatus = 0 ;
12777: LD_ADDR_EXP 2
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// end ;
12785: PPOPN 1
12787: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12788: LD_VAR 0 1
12792: PUSH
12793: LD_EXP 43
12797: EQUAL
12798: IFFALSE 12804
// BurlakDying ;
12800: CALL 10223 0 0
// if GetSide ( unit ) = 3 then
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 255
12813: PUSH
12814: LD_INT 3
12816: EQUAL
12817: IFFALSE 12833
// lostComradesCounter = lostComradesCounter + 1 ;
12819: LD_ADDR_EXP 22
12823: PUSH
12824: LD_EXP 22
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: ST_TO_ADDR
// if unit in kirovSolds then
12833: LD_VAR 0 1
12837: PUSH
12838: LD_EXP 53
12842: IN
12843: IFFALSE 12861
// kirovSolds = kirovSolds diff unit ;
12845: LD_ADDR_EXP 53
12849: PUSH
12850: LD_EXP 53
12854: PUSH
12855: LD_VAR 0 1
12859: DIFF
12860: ST_TO_ADDR
// end ;
12861: PPOPN 1
12863: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 3
12871: EQUAL
12872: PUSH
12873: LD_VAR 0 2
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: AND
12882: PUSH
12883: LD_VAR 0 1
12887: PUSH
12888: LD_INT 1
12890: EQUAL
12891: PUSH
12892: LD_VAR 0 2
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: AND
12901: PUSH
12902: LD_EXP 16
12906: PUSH
12907: LD_INT 1
12909: EQUAL
12910: AND
12911: OR
12912: IFFALSE 12918
// Dial_SecondAttack ;
12914: CALL 5801 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12918: LD_VAR 0 1
12922: PUSH
12923: LD_INT 3
12925: EQUAL
12926: PUSH
12927: LD_VAR 0 2
12931: PUSH
12932: LD_INT 6
12934: EQUAL
12935: AND
12936: PUSH
12937: LD_EXP 17
12941: NOT
12942: AND
12943: IFFALSE 12949
// Dialogue_AttackComrade ;
12945: CALL 3939 0 0
// end ; end_of_file
12949: PPOPN 2
12951: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
// if not missionNumber then
12956: LD_VAR 0 2
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13095
// achiv := false ;
12965: LD_ADDR_VAR 0 7
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// case campaignNumber of 1 :
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 1
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12986
12984: GO 12997
12986: POP
// achiv := ACH_GOTA ; 2 :
12987: LD_ADDR_VAR 0 7
12991: PUSH
12992: LD_STRING ACH_GOTA
12994: ST_TO_ADDR
12995: GO 13047
12997: LD_INT 2
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13008
13005: POP
// ; 3 :
13006: GO 13047
13008: LD_INT 3
13010: DOUBLE
13011: EQUAL
13012: IFTRUE 13016
13014: GO 13027
13016: POP
// achiv := ACH_MOTSU ; 4 :
13017: LD_ADDR_VAR 0 7
13021: PUSH
13022: LD_STRING ACH_MOTSU
13024: ST_TO_ADDR
13025: GO 13047
13027: LD_INT 4
13029: DOUBLE
13030: EQUAL
13031: IFTRUE 13035
13033: GO 13046
13035: POP
// achiv := ACH_LOP ; end ;
13036: LD_ADDR_VAR 0 7
13040: PUSH
13041: LD_STRING ACH_LOP
13043: ST_TO_ADDR
13044: GO 13047
13046: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13047: LD_OWVAR 67
13051: PUSH
13052: LD_INT 3
13054: EQUAL
13055: PUSH
13056: LD_VAR 0 7
13060: AND
13061: PUSH
13062: LD_VAR 0 3
13066: AND
13067: PUSH
13068: LD_VAR 0 4
13072: AND
13073: PUSH
13074: LD_VAR 0 5
13078: AND
13079: IFFALSE 13095
// SetAchievementEX ( achiv , missionNumber ) ;
13081: LD_VAR 0 7
13085: PPUSH
13086: LD_VAR 0 2
13090: PPUSH
13091: CALL_OW 564
// end ;
13095: LD_VAR 0 6
13099: RET
// export function SA_BehemothConstructed ; begin
13100: LD_INT 0
13102: PPUSH
// SetAchievement ( ACH_SMC ) ;
13103: LD_STRING ACH_SMC
13105: PPUSH
13106: CALL_OW 543
// end ;
13110: LD_VAR 0 1
13114: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13115: LD_VAR 0 2
13119: PUSH
13120: LD_INT 1
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13135
13128: POP
// HackUnlimitedResources ; 2 :
13129: CALL 13319 0 0
13133: GO 13316
13135: LD_INT 2
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13150
13143: POP
// HackSetLevel10 ; 3 :
13144: CALL 13452 0 0
13148: GO 13316
13150: LD_INT 3
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13165
13158: POP
// HackSetLevel10YourUnits ; 4 :
13159: CALL 13537 0 0
13163: GO 13316
13165: LD_INT 4
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13195
13173: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13174: LD_VAR 0 3
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_VAR 0 5
13188: PPUSH
13189: CALL 13627 0 3
13193: GO 13316
13195: LD_INT 5
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13210
13203: POP
// HackSpawnVehicle ; 6 :
13204: CALL 13688 0 0
13208: GO 13316
13210: LD_INT 6
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13225
13218: POP
// HackInvincible ; 7 :
13219: CALL 14763 0 0
13223: GO 13316
13225: LD_INT 7
13227: DOUBLE
13228: EQUAL
13229: IFTRUE 13233
13231: GO 13240
13233: POP
// HackInvisible ; 8 :
13234: CALL 14874 0 0
13238: GO 13316
13240: LD_INT 8
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13255
13248: POP
// HackChangeYourSide ; 9 :
13249: CALL 14931 0 0
13253: GO 13316
13255: LD_INT 9
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13270
13263: POP
// HackChangeUnitSide ; 10 :
13264: CALL 14973 0 0
13268: GO 13316
13270: LD_INT 10
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13285
13278: POP
// HackFog ; 11 :
13279: CALL 15074 0 0
13283: GO 13316
13285: LD_INT 11
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13300
13293: POP
// HackApeman ; 12 :
13294: CALL 15089 0 0
13298: GO 13316
13300: LD_INT 12
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13315
13308: POP
// HackBoom ; end ;
13309: CALL 15174 0 0
13313: GO 13316
13315: POP
// end ;
13316: PPOPN 6
13318: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13319: LD_INT 0
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13325: LD_ADDR_VAR 0 4
13329: PUSH
13330: LD_INT 22
13332: PUSH
13333: LD_OWVAR 2
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 30
13347: PUSH
13348: LD_INT 0
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 30
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: ST_TO_ADDR
// if not tmp then
13379: LD_VAR 0 4
13383: NOT
13384: IFFALSE 13388
// exit ;
13386: GO 13447
// for i in tmp do
13388: LD_ADDR_VAR 0 2
13392: PUSH
13393: LD_VAR 0 4
13397: PUSH
13398: FOR_IN
13399: IFFALSE 13445
// for j = 1 to 3 do
13401: LD_ADDR_VAR 0 3
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_INT 3
13413: PUSH
13414: FOR_TO
13415: IFFALSE 13441
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13417: LD_VAR 0 2
13421: PPUSH
13422: CALL_OW 274
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 99999
13434: PPUSH
13435: CALL_OW 277
13439: GO 13414
13441: POP
13442: POP
13443: GO 13398
13445: POP
13446: POP
// end ;
13447: LD_VAR 0 1
13451: RET
// export function HackSetLevel10 ; var i , j ; begin
13452: LD_INT 0
13454: PPUSH
13455: PPUSH
13456: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13457: LD_ADDR_VAR 0 2
13461: PUSH
13462: LD_INT 21
13464: PUSH
13465: LD_INT 1
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: PUSH
13477: FOR_IN
13478: IFFALSE 13530
// if IsSelected ( i ) then
13480: LD_VAR 0 2
13484: PPUSH
13485: CALL_OW 306
13489: IFFALSE 13528
// begin for j := 1 to 4 do
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: DOUBLE
13497: LD_INT 1
13499: DEC
13500: ST_TO_ADDR
13501: LD_INT 4
13503: PUSH
13504: FOR_TO
13505: IFFALSE 13526
// SetSkill ( i , j , 10 ) ;
13507: LD_VAR 0 2
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 10
13519: PPUSH
13520: CALL_OW 237
13524: GO 13504
13526: POP
13527: POP
// end ;
13528: GO 13477
13530: POP
13531: POP
// end ;
13532: LD_VAR 0 1
13536: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13537: LD_INT 0
13539: PPUSH
13540: PPUSH
13541: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13542: LD_ADDR_VAR 0 2
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_OWVAR 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 1
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 69
13577: PUSH
13578: FOR_IN
13579: IFFALSE 13620
// begin for j := 1 to 4 do
13581: LD_ADDR_VAR 0 3
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_INT 4
13593: PUSH
13594: FOR_TO
13595: IFFALSE 13616
// SetSkill ( i , j , 10 ) ;
13597: LD_VAR 0 2
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 10
13609: PPUSH
13610: CALL_OW 237
13614: GO 13594
13616: POP
13617: POP
// end ;
13618: GO 13578
13620: POP
13621: POP
// end ;
13622: LD_VAR 0 1
13626: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13627: LD_INT 0
13629: PPUSH
// uc_side := your_side ;
13630: LD_ADDR_OWVAR 20
13634: PUSH
13635: LD_OWVAR 2
13639: ST_TO_ADDR
// uc_nation := nation ;
13640: LD_ADDR_OWVAR 21
13644: PUSH
13645: LD_VAR 0 1
13649: ST_TO_ADDR
// InitHc ;
13650: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13654: LD_INT 0
13656: PPUSH
13657: LD_VAR 0 2
13661: PPUSH
13662: LD_VAR 0 3
13666: PPUSH
13667: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13671: CALL_OW 44
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 51
// end ;
13683: LD_VAR 0 4
13687: RET
// export function HackSpawnVehicle ; begin
13688: LD_INT 0
13690: PPUSH
// uc_side := your_side ;
13691: LD_ADDR_OWVAR 20
13695: PUSH
13696: LD_OWVAR 2
13700: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_INT 1
13708: PPUSH
13709: LD_INT 3
13711: PPUSH
13712: CALL_OW 12
13716: ST_TO_ADDR
// InitVc ;
13717: CALL_OW 20
// case uc_nation of 1 :
13721: LD_OWVAR 21
13725: PUSH
13726: LD_INT 1
13728: DOUBLE
13729: EQUAL
13730: IFTRUE 13734
13732: GO 14041
13734: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
13735: LD_ADDR_OWVAR 37
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: LD_INT 3
13748: PUSH
13749: LD_INT 4
13751: PUSH
13752: LD_INT 5
13754: PUSH
13755: LD_INT 11
13757: PUSH
13758: LD_INT 12
13760: PUSH
13761: LD_INT 13
13763: PUSH
13764: LD_INT 14
13766: PUSH
13767: LD_INT 21
13769: PUSH
13770: LD_INT 22
13772: PUSH
13773: LD_INT 23
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 1
13796: PPUSH
13797: LD_INT 13
13799: PPUSH
13800: CALL_OW 12
13804: ARRAY
13805: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
13806: LD_ADDR_OWVAR 38
13810: PUSH
13811: LD_INT 1
13813: PUSH
13814: LD_INT 3
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 5
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 1
13831: PPUSH
13832: LD_INT 4
13834: PPUSH
13835: CALL_OW 12
13839: ARRAY
13840: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
13841: LD_ADDR_OWVAR 39
13845: PUSH
13846: LD_INT 1
13848: PUSH
13849: LD_INT 2
13851: PUSH
13852: LD_INT 3
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 1
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: CALL_OW 12
13870: ARRAY
13871: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
13872: LD_ADDR_OWVAR 40
13876: PUSH
13877: LD_INT 14
13879: PUSH
13880: LD_INT 12
13882: PUSH
13883: LD_INT 13
13885: PUSH
13886: LD_INT 5
13888: PUSH
13889: LD_INT 10
13891: PUSH
13892: LD_INT 4
13894: PUSH
13895: LD_INT 6
13897: PUSH
13898: LD_INT 9
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: LD_INT 11
13909: PUSH
13910: LD_INT 7
13912: PUSH
13913: LD_INT 8
13915: PUSH
13916: LD_INT 15
13918: PUSH
13919: LD_INT 32
13921: PUSH
13922: LD_INT 31
13924: PUSH
13925: LD_INT 24
13927: PUSH
13928: LD_INT 26
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 27
13936: PUSH
13937: LD_INT 23
13939: PUSH
13940: LD_INT 22
13942: PUSH
13943: LD_INT 30
13945: PUSH
13946: LD_INT 28
13948: PUSH
13949: LD_INT 29
13951: PUSH
13952: LD_INT 53
13954: PUSH
13955: LD_INT 51
13957: PUSH
13958: LD_INT 52
13960: PUSH
13961: LD_INT 43
13963: PUSH
13964: LD_INT 44
13966: PUSH
13967: LD_INT 46
13969: PUSH
13970: LD_INT 42
13972: PUSH
13973: LD_INT 47
13975: PUSH
13976: LD_INT 45
13978: PUSH
13979: LD_INT 48
13981: PUSH
13982: LD_INT 55
13984: PUSH
13985: LD_INT 49
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_INT 37
14032: PPUSH
14033: CALL_OW 12
14037: ARRAY
14038: ST_TO_ADDR
// end ; 2 :
14039: GO 14672
14041: LD_INT 2
14043: DOUBLE
14044: EQUAL
14045: IFTRUE 14049
14047: GO 14356
14049: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14050: LD_ADDR_OWVAR 37
14054: PUSH
14055: LD_INT 1
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: LD_INT 11
14072: PUSH
14073: LD_INT 12
14075: PUSH
14076: LD_INT 13
14078: PUSH
14079: LD_INT 14
14081: PUSH
14082: LD_INT 21
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_INT 23
14090: PUSH
14091: LD_INT 24
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 1
14111: PPUSH
14112: LD_INT 13
14114: PPUSH
14115: CALL_OW 12
14119: ARRAY
14120: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14121: LD_ADDR_OWVAR 38
14125: PUSH
14126: LD_INT 1
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: LD_INT 4
14134: PUSH
14135: LD_INT 5
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 4
14149: PPUSH
14150: CALL_OW 12
14154: ARRAY
14155: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14156: LD_ADDR_OWVAR 39
14160: PUSH
14161: LD_INT 1
14163: PUSH
14164: LD_INT 2
14166: PUSH
14167: LD_INT 3
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 1
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: CALL_OW 12
14185: ARRAY
14186: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14187: LD_ADDR_OWVAR 40
14191: PUSH
14192: LD_INT 14
14194: PUSH
14195: LD_INT 12
14197: PUSH
14198: LD_INT 13
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: LD_INT 10
14206: PUSH
14207: LD_INT 4
14209: PUSH
14210: LD_INT 6
14212: PUSH
14213: LD_INT 9
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: LD_INT 11
14224: PUSH
14225: LD_INT 7
14227: PUSH
14228: LD_INT 8
14230: PUSH
14231: LD_INT 15
14233: PUSH
14234: LD_INT 32
14236: PUSH
14237: LD_INT 31
14239: PUSH
14240: LD_INT 24
14242: PUSH
14243: LD_INT 26
14245: PUSH
14246: LD_INT 25
14248: PUSH
14249: LD_INT 27
14251: PUSH
14252: LD_INT 23
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 28
14263: PUSH
14264: LD_INT 29
14266: PUSH
14267: LD_INT 53
14269: PUSH
14270: LD_INT 51
14272: PUSH
14273: LD_INT 52
14275: PUSH
14276: LD_INT 43
14278: PUSH
14279: LD_INT 44
14281: PUSH
14282: LD_INT 46
14284: PUSH
14285: LD_INT 42
14287: PUSH
14288: LD_INT 47
14290: PUSH
14291: LD_INT 45
14293: PUSH
14294: LD_INT 48
14296: PUSH
14297: LD_INT 55
14299: PUSH
14300: LD_INT 49
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 1
14344: PPUSH
14345: LD_INT 37
14347: PPUSH
14348: CALL_OW 12
14352: ARRAY
14353: ST_TO_ADDR
// end ; 3 :
14354: GO 14672
14356: LD_INT 3
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14671
14364: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14365: LD_ADDR_OWVAR 37
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: LD_INT 3
14378: PUSH
14379: LD_INT 4
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 13
14393: PUSH
14394: LD_INT 14
14396: PUSH
14397: LD_INT 21
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_INT 23
14405: PUSH
14406: LD_INT 24
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 13
14429: PPUSH
14430: CALL_OW 12
14434: ARRAY
14435: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14436: LD_ADDR_OWVAR 38
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: LD_INT 4
14449: PUSH
14450: LD_INT 5
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 1
14461: PPUSH
14462: LD_INT 4
14464: PPUSH
14465: CALL_OW 12
14469: ARRAY
14470: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14471: LD_ADDR_OWVAR 39
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 1
14492: PPUSH
14493: LD_INT 3
14495: PPUSH
14496: CALL_OW 12
14500: ARRAY
14501: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14502: LD_ADDR_OWVAR 40
14506: PUSH
14507: LD_INT 14
14509: PUSH
14510: LD_INT 12
14512: PUSH
14513: LD_INT 13
14515: PUSH
14516: LD_INT 5
14518: PUSH
14519: LD_INT 10
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: LD_INT 6
14527: PUSH
14528: LD_INT 9
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: LD_INT 2
14536: PUSH
14537: LD_INT 11
14539: PUSH
14540: LD_INT 7
14542: PUSH
14543: LD_INT 8
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 32
14551: PUSH
14552: LD_INT 31
14554: PUSH
14555: LD_INT 24
14557: PUSH
14558: LD_INT 26
14560: PUSH
14561: LD_INT 25
14563: PUSH
14564: LD_INT 27
14566: PUSH
14567: LD_INT 23
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: LD_INT 28
14578: PUSH
14579: LD_INT 29
14581: PUSH
14582: LD_INT 53
14584: PUSH
14585: LD_INT 51
14587: PUSH
14588: LD_INT 52
14590: PUSH
14591: LD_INT 43
14593: PUSH
14594: LD_INT 44
14596: PUSH
14597: LD_INT 46
14599: PUSH
14600: LD_INT 42
14602: PUSH
14603: LD_INT 47
14605: PUSH
14606: LD_INT 45
14608: PUSH
14609: LD_INT 48
14611: PUSH
14612: LD_INT 55
14614: PUSH
14615: LD_INT 49
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 1
14659: PPUSH
14660: LD_INT 37
14662: PPUSH
14663: CALL_OW 12
14667: ARRAY
14668: ST_TO_ADDR
// end ; end ;
14669: GO 14672
14671: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14672: CALL_OW 45
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 51
// end ;
14684: LD_VAR 0 1
14688: RET
// export invincible ; every 1 do
14689: GO 14691
14691: DISABLE
// invincible := [ ] ;
14692: LD_ADDR_EXP 54
14696: PUSH
14697: EMPTY
14698: ST_TO_ADDR
14699: END
// every 10 do var i ;
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
// begin enable ;
14706: ENABLE
// if not invincible then
14707: LD_EXP 54
14711: NOT
14712: IFFALSE 14716
// exit ;
14714: GO 14760
// for i in invincible do
14716: LD_ADDR_VAR 0 1
14720: PUSH
14721: LD_EXP 54
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14758
// if GetLives ( i ) < 1000 then
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 256
14738: PUSH
14739: LD_INT 1000
14741: LESS
14742: IFFALSE 14756
// SetLives ( i , 1000 ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: LD_INT 1000
14751: PPUSH
14752: CALL_OW 234
14756: GO 14726
14758: POP
14759: POP
// end ;
14760: PPOPN 1
14762: END
// export function HackInvincible ; var i ; begin
14763: LD_INT 0
14765: PPUSH
14766: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 21
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 21
14787: PUSH
14788: LD_INT 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: FOR_IN
14806: IFFALSE 14867
// if IsSelected ( i ) then
14808: LD_VAR 0 2
14812: PPUSH
14813: CALL_OW 306
14817: IFFALSE 14865
// begin if i in invincible then
14819: LD_VAR 0 2
14823: PUSH
14824: LD_EXP 54
14828: IN
14829: IFFALSE 14849
// invincible := invincible diff i else
14831: LD_ADDR_EXP 54
14835: PUSH
14836: LD_EXP 54
14840: PUSH
14841: LD_VAR 0 2
14845: DIFF
14846: ST_TO_ADDR
14847: GO 14865
// invincible := invincible union i ;
14849: LD_ADDR_EXP 54
14853: PUSH
14854: LD_EXP 54
14858: PUSH
14859: LD_VAR 0 2
14863: UNION
14864: ST_TO_ADDR
// end ;
14865: GO 14805
14867: POP
14868: POP
// end ;
14869: LD_VAR 0 1
14873: RET
// export function HackInvisible ; var i , j ; begin
14874: LD_INT 0
14876: PPUSH
14877: PPUSH
14878: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: PUSH
14899: FOR_IN
14900: IFFALSE 14924
// if IsSelected ( i ) then
14902: LD_VAR 0 2
14906: PPUSH
14907: CALL_OW 306
14911: IFFALSE 14922
// begin ComForceInvisible ( i ) ;
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 496
// end ;
14922: GO 14899
14924: POP
14925: POP
// end ;
14926: LD_VAR 0 1
14930: RET
// export function HackChangeYourSide ; begin
14931: LD_INT 0
14933: PPUSH
// if your_side = 8 then
14934: LD_OWVAR 2
14938: PUSH
14939: LD_INT 8
14941: EQUAL
14942: IFFALSE 14954
// your_side := 0 else
14944: LD_ADDR_OWVAR 2
14948: PUSH
14949: LD_INT 0
14951: ST_TO_ADDR
14952: GO 14968
// your_side := your_side + 1 ;
14954: LD_ADDR_OWVAR 2
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: LD_INT 1
14966: PLUS
14967: ST_TO_ADDR
// end ;
14968: LD_VAR 0 1
14972: RET
// export function HackChangeUnitSide ; var i , j ; begin
14973: LD_INT 0
14975: PPUSH
14976: PPUSH
14977: PPUSH
// for i in all_units do
14978: LD_ADDR_VAR 0 2
14982: PUSH
14983: LD_OWVAR 3
14987: PUSH
14988: FOR_IN
14989: IFFALSE 15067
// if IsSelected ( i ) then
14991: LD_VAR 0 2
14995: PPUSH
14996: CALL_OW 306
15000: IFFALSE 15065
// begin j := GetSide ( i ) ;
15002: LD_ADDR_VAR 0 3
15006: PUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL_OW 255
15016: ST_TO_ADDR
// if j = 8 then
15017: LD_VAR 0 3
15021: PUSH
15022: LD_INT 8
15024: EQUAL
15025: IFFALSE 15037
// j := 0 else
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 0
15034: ST_TO_ADDR
15035: GO 15051
// j := j + 1 ;
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: LD_VAR 0 3
15046: PUSH
15047: LD_INT 1
15049: PLUS
15050: ST_TO_ADDR
// SetSide ( i , j ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: LD_VAR 0 3
15060: PPUSH
15061: CALL_OW 235
// end ;
15065: GO 14988
15067: POP
15068: POP
// end ;
15069: LD_VAR 0 1
15073: RET
// export function HackFog ; begin
15074: LD_INT 0
15076: PPUSH
// FogOff ( true ) ;
15077: LD_INT 1
15079: PPUSH
15080: CALL_OW 344
// end ;
15084: LD_VAR 0 1
15088: RET
// export function HackApeman ; begin
15089: LD_INT 0
15091: PPUSH
// uc_side := your_side ;
15092: LD_ADDR_OWVAR 20
15096: PUSH
15097: LD_OWVAR 2
15101: ST_TO_ADDR
// uc_nation := 0 ;
15102: LD_ADDR_OWVAR 21
15106: PUSH
15107: LD_INT 0
15109: ST_TO_ADDR
// hc_name :=  ;
15110: LD_ADDR_OWVAR 26
15114: PUSH
15115: LD_STRING 
15117: ST_TO_ADDR
// hc_gallery :=  ;
15118: LD_ADDR_OWVAR 33
15122: PUSH
15123: LD_STRING 
15125: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15126: LD_ADDR_OWVAR 31
15130: PUSH
15131: LD_INT 0
15133: PUSH
15134: LD_INT 0
15136: PUSH
15137: LD_INT 0
15139: PUSH
15140: LD_INT 0
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: ST_TO_ADDR
// hc_class := class_apeman ;
15149: LD_ADDR_OWVAR 28
15153: PUSH
15154: LD_INT 12
15156: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15157: CALL_OW 44
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 51
// end ;
15169: LD_VAR 0 1
15173: RET
// export function HackBoom ; begin
15174: LD_INT 0
15176: PPUSH
// uc_side := your_side ;
15177: LD_ADDR_OWVAR 20
15181: PUSH
15182: LD_OWVAR 2
15186: ST_TO_ADDR
// uc_nation := 1 ;
15187: LD_ADDR_OWVAR 21
15191: PUSH
15192: LD_INT 1
15194: ST_TO_ADDR
// vc_chassis := us_morphling ;
15195: LD_ADDR_OWVAR 37
15199: PUSH
15200: LD_INT 5
15202: ST_TO_ADDR
// vc_engine := engine_siberite ;
15203: LD_ADDR_OWVAR 39
15207: PUSH
15208: LD_INT 3
15210: ST_TO_ADDR
// vc_control := control_computer ;
15211: LD_ADDR_OWVAR 38
15215: PUSH
15216: LD_INT 3
15218: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
15219: LD_ADDR_OWVAR 40
15223: PUSH
15224: LD_INT 8
15226: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15227: CALL_OW 45
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 51
// end ;
15239: LD_VAR 0 1
15243: RET
