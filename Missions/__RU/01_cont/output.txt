// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 9799 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 2064 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , melEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// melEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 10178 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 10178 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 10178 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 10178 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 10178 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 10178 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 10178 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 10178 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 10178 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 10178 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Mel ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 10178 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 44165 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 48114 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: PUSH
1132: LD_EXP 14
1136: AND
1137: IFFALSE 1311
1139: GO 1141
1141: DISABLE
// begin uc_side := 1 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 1
1149: ST_TO_ADDR
// uc_nation := nation_american ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 1
1157: ST_TO_ADDR
// hc_class := class_soldier ;
1158: LD_ADDR_OWVAR 28
1162: PUSH
1163: LD_INT 1
1165: ST_TO_ADDR
// hc_sex := sex_male ;
1166: LD_ADDR_OWVAR 27
1170: PUSH
1171: LD_INT 1
1173: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1174: LD_ADDR_OWVAR 33
1178: PUSH
1179: LD_STRING SecondCharsGal
1181: ST_TO_ADDR
// hc_face_number := 56 ;
1182: LD_ADDR_OWVAR 34
1186: PUSH
1187: LD_INT 56
1189: ST_TO_ADDR
// hc_name := Mel Brennan ;
1190: LD_ADDR_OWVAR 26
1194: PUSH
1195: LD_STRING Mel Brennan
1197: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1198: LD_ADDR_OWVAR 29
1202: PUSH
1203: LD_INT 12
1205: PUSH
1206: LD_INT 11
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 0 ] ;
1213: LD_ADDR_OWVAR 30
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 0
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 0
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1236: LD_ADDR_OWVAR 31
1240: PUSH
1241: LD_OWVAR 67
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 0
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// Mel := CreateHuman ;
1261: LD_ADDR_EXP 35
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// PlaceUnitXY ( Mel , 77 , 19 , true ) ;
1271: LD_EXP 35
1275: PPUSH
1276: LD_INT 77
1278: PPUSH
1279: LD_INT 19
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL_OW 48
// wait ( 0 0$2 ) ;
1289: LD_INT 70
1291: PPUSH
1292: CALL_OW 67
// ComAgressiveMove ( Mel , 50 , 21 ) ;
1296: LD_EXP 35
1300: PPUSH
1301: LD_INT 50
1303: PPUSH
1304: LD_INT 21
1306: PPUSH
1307: CALL_OW 114
// end ;
1311: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1312: LD_EXP 15
1316: IFFALSE 1764
1318: GO 1320
1320: DISABLE
1321: LD_INT 0
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
// begin enable ;
1327: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1328: LD_ADDR_VAR 0 4
1332: PUSH
1333: LD_EXP 36
1337: PPUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 120
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: PPUSH
1358: CALL_OW 72
1362: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: LD_EXP 36
1372: PPUSH
1373: LD_INT 120
1375: PUSH
1376: LD_INT 2
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 72
1387: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1388: LD_ADDR_VAR 0 3
1392: PUSH
1393: LD_INT 17
1395: PPUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PPUSH
1406: CALL_OW 70
1410: ST_TO_ADDR
// if IsOk ( Mel ) then
1411: LD_EXP 35
1415: PPUSH
1416: CALL_OW 302
1420: IFFALSE 1442
// tmp := Join ( tmp , Mel ) ;
1422: LD_ADDR_VAR 0 4
1426: PUSH
1427: LD_VAR 0 4
1431: PPUSH
1432: LD_EXP 35
1436: PPUSH
1437: CALL 48114 0 2
1441: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1442: LD_VAR 0 4
1446: PPUSH
1447: LD_INT 3
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: LD_INT 1000
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 72
1468: IFFALSE 1507
// begin if IsInUnit ( Gladstone ) then
1470: LD_EXP 33
1474: PPUSH
1475: CALL_OW 310
1479: IFFALSE 1505
// begin ComExitBuilding ( Gladstone ) ;
1481: LD_EXP 33
1485: PPUSH
1486: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1490: LD_EXP 33
1494: PPUSH
1495: LD_INT 39
1497: PPUSH
1498: LD_INT 7
1500: PPUSH
1501: CALL_OW 171
// end ; end else
1505: GO 1531
// if not IsInUnit ( Gladstone ) then
1507: LD_EXP 33
1511: PPUSH
1512: CALL_OW 310
1516: NOT
1517: IFFALSE 1531
// ComEnterUnit ( Gladstone , usLab ) ;
1519: LD_EXP 33
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 120
// if eng then
1531: LD_VAR 0 2
1535: IFFALSE 1604
// if GetLives ( usBun1 ) < 1000 then
1537: LD_INT 3
1539: PPUSH
1540: CALL_OW 256
1544: PUSH
1545: LD_INT 1000
1547: LESS
1548: IFFALSE 1564
// ComRepairBuilding ( eng , usBun1 ) else
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL_OW 130
1562: GO 1604
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1564: LD_VAR 0 2
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_INT 37
1575: PPUSH
1576: LD_INT 9
1578: PPUSH
1579: CALL_OW 297
1583: PUSH
1584: LD_INT 5
1586: GREATER
1587: IFFALSE 1604
// ComMoveXY ( eng , 37 , 9 ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: LD_INT 37
1596: PPUSH
1597: LD_INT 9
1599: PPUSH
1600: CALL_OW 111
// for i in tmp do
1604: LD_ADDR_VAR 0 1
1608: PUSH
1609: LD_VAR 0 4
1613: PUSH
1614: FOR_IN
1615: IFFALSE 1762
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL_OW 256
1626: PUSH
1627: LD_INT 600
1629: LESS
1630: PUSH
1631: LD_VAR 0 1
1635: PPUSH
1636: LD_INT 37
1638: PPUSH
1639: LD_INT 9
1641: PPUSH
1642: CALL_OW 297
1646: PUSH
1647: LD_INT 5
1649: GREATER
1650: AND
1651: IFFALSE 1670
// begin ComMoveXY ( i , 37 , 9 ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 37
1660: PPUSH
1661: LD_INT 9
1663: PPUSH
1664: CALL_OW 111
// continue ;
1668: GO 1614
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1670: LD_VAR 0 3
1674: NOT
1675: PUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: LD_INT 37
1683: PPUSH
1684: LD_INT 9
1686: PPUSH
1687: CALL_OW 297
1691: PUSH
1692: LD_INT 5
1694: GREATER
1695: AND
1696: IFFALSE 1715
// begin ComMoveXY ( i , 37 , 9 ) ;
1698: LD_VAR 0 1
1702: PPUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_INT 9
1708: PPUSH
1709: CALL_OW 111
// continue ;
1713: GO 1614
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1715: LD_VAR 0 3
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: CALL_OW 256
1729: PUSH
1730: LD_INT 1000
1732: EQUAL
1733: AND
1734: IFFALSE 1760
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 3
1745: PPUSH
1746: LD_VAR 0 1
1750: PPUSH
1751: CALL_OW 74
1755: PPUSH
1756: CALL_OW 115
// end ;
1760: GO 1614
1762: POP
1763: POP
// end ; end_of_file
1764: PPOPN 4
1766: END
// every 0 0$1 trigger not attackedByApe do var un ;
1767: LD_EXP 7
1771: NOT
1772: IFFALSE 1846
1774: GO 1776
1776: DISABLE
1777: LD_INT 0
1779: PPUSH
// begin enable ;
1780: ENABLE
// un := UnitShoot ( Burlak ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_EXP 22
1790: PPUSH
1791: CALL_OW 504
1795: ST_TO_ADDR
// if un > - 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: NEG
1804: GREATER
1805: IFFALSE 1846
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 0
1819: EQUAL
1820: PUSH
1821: LD_VAR 0 1
1825: PPUSH
1826: CALL_OW 257
1830: PUSH
1831: LD_INT 12
1833: EQUAL
1834: AND
1835: IFFALSE 1846
// begin attackedByApe := true ;
1837: LD_ADDR_EXP 7
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// disable ;
1845: DISABLE
// end ; end ;
1846: PPOPN 1
1848: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1849: LD_VAR 0 1
1853: PPUSH
1854: CALL 69507 0 1
// if not apeRadioKilled and GetTag ( un ) = tApeRadio then
1858: LD_EXP 9
1862: NOT
1863: PUSH
1864: LD_VAR 0 1
1868: PPUSH
1869: CALL_OW 110
1873: PUSH
1874: LD_INT 1
1876: EQUAL
1877: AND
1878: IFFALSE 1890
// apeRadioKilled := un ;
1880: LD_ADDR_EXP 9
1884: PUSH
1885: LD_VAR 0 1
1889: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1890: LD_VAR 0 1
1894: PPUSH
1895: CALL_OW 255
1899: PUSH
1900: LD_INT 3
1902: EQUAL
1903: PUSH
1904: LD_VAR 0 1
1908: PPUSH
1909: CALL_OW 247
1913: PUSH
1914: LD_INT 1
1916: EQUAL
1917: AND
1918: IFFALSE 1935
// loseCounter := Inc ( loseCounter ) ;
1920: LD_ADDR_EXP 20
1924: PUSH
1925: LD_EXP 20
1929: PPUSH
1930: CALL 49475 0 1
1934: ST_TO_ADDR
// if un = Burlak then
1935: LD_VAR 0 1
1939: PUSH
1940: LD_EXP 22
1944: EQUAL
1945: IFFALSE 1954
// YouLost ( Burlak ) ;
1947: LD_STRING Burlak
1949: PPUSH
1950: CALL_OW 104
// end ;
1954: PPOPN 1
1956: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 255
1966: PUSH
1967: LD_INT 3
1969: EQUAL
1970: IFFALSE 2030
// begin someoneGetsHurt := true ;
1972: LD_ADDR_EXP 21
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// if un = Burlak and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
1980: LD_VAR 0 1
1984: PUSH
1985: LD_EXP 22
1989: EQUAL
1990: PUSH
1991: LD_INT 22
1993: PUSH
1994: LD_INT 3
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 25
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: NOT
2020: AND
2021: IFFALSE 2030
// begin YouLost ( Burlak ) ;
2023: LD_STRING Burlak
2025: PPUSH
2026: CALL_OW 104
// end ; end ; end ;
2030: PPOPN 1
2032: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
2033: LD_VAR 0 1
2037: PUSH
2038: LD_INT 3
2040: EQUAL
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 6
2049: EQUAL
2050: AND
2051: IFFALSE 2061
// attackedAllied := true ;
2053: LD_ADDR_EXP 13
2057: PUSH
2058: LD_INT 1
2060: ST_TO_ADDR
// end ; end_of_file
2061: PPOPN 2
2063: END
// export function Action ; begin
2064: LD_INT 0
2066: PPUSH
// InGameOn ;
2067: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
2071: LD_INT 78
2073: PPUSH
2074: LD_INT 85
2076: PPUSH
2077: CALL_OW 86
// wait ( 0 0$2 ) ;
2081: LD_INT 70
2083: PPUSH
2084: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2088: LD_EXP 22
2092: PPUSH
2093: LD_INT 78
2095: PPUSH
2096: LD_INT 85
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: CALL 50254 0 5
// ComHold ( Burlak ) ;
2109: LD_EXP 22
2113: PPUSH
2114: CALL_OW 140
// wait ( 0 0$3 ) ;
2118: LD_INT 105
2120: PPUSH
2121: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2125: LD_EXP 22
2129: PPUSH
2130: LD_INT 79
2132: PPUSH
2133: LD_INT 89
2135: PPUSH
2136: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2140: LD_INT 18
2142: PPUSH
2143: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2147: LD_EXP 22
2151: PPUSH
2152: LD_STRING D1-Bur-1
2154: PPUSH
2155: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2159: LD_EXP 22
2163: PPUSH
2164: LD_INT 81
2166: PPUSH
2167: LD_INT 87
2169: PPUSH
2170: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2174: LD_INT 10
2176: PPUSH
2177: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2181: LD_EXP 22
2185: PPUSH
2186: LD_STRING D1-Bur-1a
2188: PPUSH
2189: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2193: LD_EXP 22
2197: PPUSH
2198: LD_INT 85
2200: PPUSH
2201: LD_INT 90
2203: PPUSH
2204: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2208: LD_INT 18
2210: PPUSH
2211: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2215: LD_EXP 22
2219: PPUSH
2220: LD_STRING D1-Bur-1b
2222: PPUSH
2223: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2227: LD_EXP 22
2231: PPUSH
2232: LD_INT 85
2234: PPUSH
2235: LD_INT 87
2237: PPUSH
2238: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2242: LD_INT 10
2244: PPUSH
2245: CALL_OW 67
// InGameOff ;
2249: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2253: LD_STRING M1
2255: PPUSH
2256: CALL_OW 337
// SaveForQuickRestart ;
2260: CALL_OW 22
// if debug then
2264: LD_EXP 1
2268: IFFALSE 2277
// FogOff ( 3 ) ;
2270: LD_INT 3
2272: PPUSH
2273: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2277: LD_INT 350
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_OWVAR 67
2287: MUL
2288: MINUS
2289: PPUSH
2290: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2294: LD_EXP 22
2298: PPUSH
2299: LD_INT 80
2301: PPUSH
2302: LD_INT 87
2304: PPUSH
2305: CALL_OW 297
2309: PUSH
2310: LD_INT 8
2312: LESS
2313: IFFALSE 2319
// SendApemanAttack ;
2315: CALL 9530 0 0
// end ;
2319: LD_VAR 0 1
2323: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2324: LD_EXP 22
2328: PPUSH
2329: LD_INT 6
2331: PPUSH
2332: CALL_OW 308
2336: IFFALSE 2378
2338: GO 2340
2340: DISABLE
// begin waterfallSpotted := true ;
2341: LD_ADDR_EXP 8
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2349: LD_INT 75
2351: PPUSH
2352: LD_INT 89
2354: PPUSH
2355: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2359: LD_INT 7
2361: PPUSH
2362: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2366: LD_EXP 22
2370: PPUSH
2371: LD_STRING DWaterfall-Bur-1
2373: PPUSH
2374: CALL_OW 88
// end ;
2378: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2379: LD_EXP 22
2383: PPUSH
2384: LD_INT 25
2386: PUSH
2387: LD_INT 12
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: PPUSH
2399: LD_EXP 22
2403: PPUSH
2404: CALL_OW 74
2408: PPUSH
2409: CALL_OW 296
2413: PUSH
2414: LD_INT 6
2416: LESS
2417: IFFALSE 2508
2419: GO 2421
2421: DISABLE
// begin apeSpotted := true ;
2422: LD_ADDR_EXP 6
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// if joinedToBelkov then
2430: LD_EXP 3
2434: IFFALSE 2438
// exit ;
2436: GO 2508
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2438: LD_EXP 22
2442: PPUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 12
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 69
2457: PPUSH
2458: LD_EXP 22
2462: PPUSH
2463: CALL_OW 74
2467: PPUSH
2468: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2472: LD_INT 10
2474: PPUSH
2475: CALL_OW 67
// DialogueOn ;
2479: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2483: LD_EXP 22
2487: PPUSH
2488: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2492: LD_EXP 22
2496: PPUSH
2497: LD_STRING D2-Bur-1
2499: PPUSH
2500: CALL_OW 88
// DialogueOff ;
2504: CALL_OW 7
// end ;
2508: END
// every 0 0$1 trigger attackedByApe do
2509: LD_EXP 7
2513: IFFALSE 2537
2515: GO 2517
2517: DISABLE
// begin wait ( 0 0$0.3 ) ;
2518: LD_INT 10
2520: PPUSH
2521: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2525: LD_EXP 22
2529: PPUSH
2530: LD_STRING D2-Bur-1a
2532: PPUSH
2533: CALL_OW 88
// end ;
2537: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2538: LD_INT 3
2540: PPUSH
2541: LD_INT 130
2543: PPUSH
2544: LD_INT 97
2546: PPUSH
2547: CALL_OW 293
2551: PUSH
2552: LD_EXP 22
2556: PPUSH
2557: LD_INT 130
2559: PPUSH
2560: LD_INT 97
2562: PPUSH
2563: CALL_OW 297
2567: PUSH
2568: LD_INT 6
2570: LESS
2571: AND
2572: PUSH
2573: LD_EXP 3
2577: NOT
2578: AND
2579: PUSH
2580: LD_EXP 4
2584: NOT
2585: AND
2586: IFFALSE 2611
2588: GO 2590
2590: DISABLE
// begin DialogueOn ;
2591: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2595: LD_EXP 22
2599: PPUSH
2600: LD_STRING DCorpse-Bur-1
2602: PPUSH
2603: CALL_OW 88
// DialogueOff ;
2607: CALL_OW 7
// end ;
2611: END
// every 0 0$1 trigger apeRadioKilled do var un , tmp , tmp2 ;
2612: LD_EXP 9
2616: IFFALSE 2998
2618: GO 2620
2620: DISABLE
2621: LD_INT 0
2623: PPUSH
2624: PPUSH
2625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , apeRadioKilled , 12 ] ] ) ;
2626: LD_ADDR_VAR 0 2
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 21
2643: PUSH
2644: LD_INT 1
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 91
2653: PUSH
2654: LD_EXP 9
2658: PUSH
2659: LD_INT 12
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: PPUSH
2672: CALL_OW 69
2676: ST_TO_ADDR
// if not tmp or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2677: LD_VAR 0 2
2681: NOT
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PPUSH
2707: CALL_OW 69
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: OR
2716: IFFALSE 2720
// exit ;
2718: GO 2998
// tmp2 := [ Kirilenkova , Belkov , Saseda , Jaworska ] ;
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: LD_EXP 31
2729: PUSH
2730: LD_EXP 27
2734: PUSH
2735: LD_EXP 24
2739: PUSH
2740: LD_EXP 25
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// Randomize ;
2751: CALL_OW 10
// un := tmp2 [ rand ( 1 , Count ( tmp2 ) ) ] ;
2755: LD_ADDR_VAR 0 1
2759: PUSH
2760: LD_VAR 0 3
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_VAR 0 3
2772: PPUSH
2773: CALL 12364 0 1
2777: PPUSH
2778: CALL_OW 12
2782: ARRAY
2783: ST_TO_ADDR
// if not un in tmp then
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: IN
2794: NOT
2795: IFFALSE 2807
// un := Burlak ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 22
2806: ST_TO_ADDR
// DialogueOn ;
2807: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2811: LD_EXP 9
2815: PPUSH
2816: CALL_OW 87
// case un of Kirilenkova :
2820: LD_VAR 0 1
2824: PUSH
2825: LD_EXP 31
2829: DOUBLE
2830: EQUAL
2831: IFTRUE 2835
2833: GO 2850
2835: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2836: LD_EXP 31
2840: PPUSH
2841: LD_STRING D2a-Kir-1
2843: PPUSH
2844: CALL_OW 88
2848: GO 2951
2850: LD_EXP 27
2854: DOUBLE
2855: EQUAL
2856: IFTRUE 2860
2858: GO 2875
2860: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2861: LD_EXP 27
2865: PPUSH
2866: LD_STRING D2a-Bel-1
2868: PPUSH
2869: CALL_OW 88
2873: GO 2951
2875: LD_EXP 22
2879: DOUBLE
2880: EQUAL
2881: IFTRUE 2885
2883: GO 2900
2885: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2886: LD_EXP 22
2890: PPUSH
2891: LD_STRING D2a-Bur-1
2893: PPUSH
2894: CALL_OW 88
2898: GO 2951
2900: LD_EXP 25
2904: DOUBLE
2905: EQUAL
2906: IFTRUE 2910
2908: GO 2925
2910: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2911: LD_EXP 25
2915: PPUSH
2916: LD_STRING D2a-RFSol1-1
2918: PPUSH
2919: CALL_OW 88
2923: GO 2951
2925: LD_EXP 24
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 2950
2935: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2936: LD_EXP 24
2940: PPUSH
2941: LD_STRING D2a-RSol1-1
2943: PPUSH
2944: CALL_OW 88
2948: GO 2951
2950: POP
// if hasGnyevko then
2951: LD_EXP 4
2955: IFFALSE 2982
// begin if IsOk ( Gnyevko ) then
2957: LD_EXP 30
2961: PPUSH
2962: CALL_OW 302
2966: IFFALSE 2980
// Say ( Gnyevko , D2a-Gny-1 ) ;
2968: LD_EXP 30
2972: PPUSH
2973: LD_STRING D2a-Gny-1
2975: PPUSH
2976: CALL_OW 88
// end else
2980: GO 2994
// Say ( Burlak , D2a-Bur-2 ) ;
2982: LD_EXP 22
2986: PPUSH
2987: LD_STRING D2a-Bur-2
2989: PPUSH
2990: CALL_OW 88
// DialogueOff ;
2994: CALL_OW 7
// end ;
2998: PPOPN 3
3000: END
// every 0 0$1 do var un , tmp ;
3001: GO 3003
3003: DISABLE
3004: LD_INT 0
3006: PPUSH
3007: PPUSH
// begin if Difficulty = 1 then
3008: LD_OWVAR 67
3012: PUSH
3013: LD_INT 1
3015: EQUAL
3016: IFFALSE 3020
// exit ;
3018: GO 3161
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
3020: LD_INT 16800
3022: PUSH
3023: LD_INT 2100
3025: PUSH
3026: LD_OWVAR 67
3030: MUL
3031: MINUS
3032: PPUSH
3033: CALL_OW 67
// if hasGnyevko then
3037: LD_EXP 4
3041: IFFALSE 3045
// exit ;
3043: GO 3161
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
3045: LD_ADDR_VAR 0 2
3049: PUSH
3050: LD_INT 22
3052: PUSH
3053: LD_INT 0
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 25
3062: PUSH
3063: LD_INT 14
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 69
3078: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: LD_VAR 0 2
3088: PPUSH
3089: LD_EXP 30
3093: PPUSH
3094: CALL_OW 74
3098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3099: LD_INT 35
3101: PPUSH
3102: CALL_OW 67
// if hasGnyevko then
3106: LD_EXP 4
3110: IFFALSE 3123
// begin ComFree ( un ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 139
// exit ;
3121: GO 3161
// end ; if not HasTask ( un ) then
3123: LD_VAR 0 1
3127: PPUSH
3128: CALL_OW 314
3132: NOT
3133: IFFALSE 3149
// ComAttackUnit ( un , Gnyevko ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: LD_EXP 30
3144: PPUSH
3145: CALL_OW 115
// until not IsOk ( un ) ;
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 302
3158: NOT
3159: IFFALSE 3099
// end ;
3161: PPOPN 2
3163: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3164: LD_INT 3
3166: PPUSH
3167: LD_EXP 30
3171: PPUSH
3172: CALL_OW 292
3176: PUSH
3177: LD_EXP 30
3181: PPUSH
3182: CALL_OW 302
3186: AND
3187: PUSH
3188: LD_EXP 4
3192: NOT
3193: AND
3194: IFFALSE 3617
3196: GO 3198
3198: DISABLE
3199: LD_INT 0
3201: PPUSH
// begin hasGnyevko := true ;
3202: LD_ADDR_EXP 4
3206: PUSH
3207: LD_INT 1
3209: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3210: LD_ADDR_VAR 0 1
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 3
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 21
3227: PUSH
3228: LD_INT 1
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 69
3243: PPUSH
3244: LD_EXP 30
3248: PPUSH
3249: CALL_OW 74
3253: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3254: LD_VAR 0 1
3258: PUSH
3259: LD_EXP 22
3263: PUSH
3264: LD_EXP 24
3268: PUSH
3269: LD_EXP 25
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: IN
3279: NOT
3280: IFFALSE 3292
// un := Burlak ;
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: LD_EXP 22
3291: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3292: LD_EXP 30
3296: PPUSH
3297: LD_VAR 0 1
3301: PPUSH
3302: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3306: LD_INT 10
3308: PPUSH
3309: CALL_OW 67
// DialogueOn ;
3313: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3317: LD_EXP 30
3321: PPUSH
3322: CALL_OW 87
// case un of Burlak :
3326: LD_VAR 0 1
3330: PUSH
3331: LD_EXP 22
3335: DOUBLE
3336: EQUAL
3337: IFTRUE 3341
3339: GO 3356
3341: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3342: LD_EXP 22
3346: PPUSH
3347: LD_STRING D3-Bur-1
3349: PPUSH
3350: CALL_OW 88
3354: GO 3407
3356: LD_EXP 24
3360: DOUBLE
3361: EQUAL
3362: IFTRUE 3366
3364: GO 3381
3366: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3367: LD_EXP 24
3371: PPUSH
3372: LD_STRING D3-RSol1-1
3374: PPUSH
3375: CALL_OW 88
3379: GO 3407
3381: LD_EXP 25
3385: DOUBLE
3386: EQUAL
3387: IFTRUE 3391
3389: GO 3406
3391: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3392: LD_EXP 25
3396: PPUSH
3397: LD_STRING D3-RFSol1-1
3399: PPUSH
3400: CALL_OW 88
3404: GO 3407
3406: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3407: LD_EXP 30
3411: PPUSH
3412: LD_STRING D3-Gny-1
3414: PPUSH
3415: CALL_OW 88
// if un = Burlak then
3419: LD_VAR 0 1
3423: PUSH
3424: LD_EXP 22
3428: EQUAL
3429: IFFALSE 3551
// begin if attackedByApe then
3431: LD_EXP 7
3435: IFFALSE 3451
// Say ( Burlak , D3-Bur-2 ) else
3437: LD_EXP 22
3441: PPUSH
3442: LD_STRING D3-Bur-2
3444: PPUSH
3445: CALL_OW 88
3449: GO 3483
// if apeRadioKilled then
3451: LD_EXP 9
3455: IFFALSE 3471
// Say ( Burlak , D3-Bur-2a ) else
3457: LD_EXP 22
3461: PPUSH
3462: LD_STRING D3-Bur-2a
3464: PPUSH
3465: CALL_OW 88
3469: GO 3483
// Say ( Burlak , D3-Bur-2b ) ;
3471: LD_EXP 22
3475: PPUSH
3476: LD_STRING D3-Bur-2b
3478: PPUSH
3479: CALL_OW 88
// if not joinedToBelkov then
3483: LD_EXP 3
3487: NOT
3488: IFFALSE 3504
// Say ( Burlak , D3-Bur-2c ) else
3490: LD_EXP 22
3494: PPUSH
3495: LD_STRING D3-Bur-2c
3497: PPUSH
3498: CALL_OW 88
3502: GO 3537
// if not americansDefeated then
3504: LD_EXP 10
3508: NOT
3509: IFFALSE 3525
// Say ( Burlak , D3-Bur-2d ) else
3511: LD_EXP 22
3515: PPUSH
3516: LD_STRING D3-Bur-2d
3518: PPUSH
3519: CALL_OW 88
3523: GO 3537
// Say ( Burlak , D3-Bur-2e ) ;
3525: LD_EXP 22
3529: PPUSH
3530: LD_STRING D3-Bur-2e
3532: PPUSH
3533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3537: LD_EXP 30
3541: PPUSH
3542: LD_STRING D3-Gny-2
3544: PPUSH
3545: CALL_OW 88
// end else
3549: GO 3601
// begin if un = Saseda then
3551: LD_VAR 0 1
3555: PUSH
3556: LD_EXP 24
3560: EQUAL
3561: IFFALSE 3577
// Say ( Saseda , D3-RSol1-2 ) else
3563: LD_EXP 24
3567: PPUSH
3568: LD_STRING D3-RSol1-2
3570: PPUSH
3571: CALL_OW 88
3575: GO 3589
// Say ( Jaworska , D3-RFSol1-2 ) ;
3577: LD_EXP 25
3581: PPUSH
3582: LD_STRING D3-RFSol1-2
3584: PPUSH
3585: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3589: LD_EXP 30
3593: PPUSH
3594: LD_STRING D3-Gny-2a
3596: PPUSH
3597: CALL_OW 88
// end ; DialogueOff ;
3601: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3605: LD_EXP 30
3609: PPUSH
3610: LD_INT 3
3612: PPUSH
3613: CALL_OW 235
// end ;
3617: PPOPN 1
3619: END
// function GnyevkoPokryshkinScene ; begin
3620: LD_INT 0
3622: PPUSH
// gnyevkoMeetPokryshkin := true ;
3623: LD_ADDR_EXP 11
3627: PUSH
3628: LD_INT 1
3630: ST_TO_ADDR
// ComHold ( Burlak ) ;
3631: LD_EXP 22
3635: PPUSH
3636: CALL_OW 140
// InGameOn ;
3640: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3644: LD_INT 76
3646: PPUSH
3647: LD_INT 56
3649: PPUSH
3650: LD_INT 3
3652: PPUSH
3653: LD_INT 12
3655: PPUSH
3656: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3660: LD_EXP 23
3664: PPUSH
3665: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3669: LD_EXP 30
3673: PPUSH
3674: LD_INT 6
3676: PPUSH
3677: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3681: LD_EXP 30
3685: PPUSH
3686: LD_INT 79
3688: PPUSH
3689: LD_INT 56
3691: PPUSH
3692: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3696: LD_EXP 23
3700: PPUSH
3701: LD_STRING D4-Pok-1
3703: PPUSH
3704: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3708: LD_EXP 30
3712: PPUSH
3713: LD_STRING D4-Gny-1a
3715: PPUSH
3716: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3720: LD_EXP 30
3724: PPUSH
3725: LD_STRING D4-Gny-2
3727: PPUSH
3728: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3732: LD_EXP 23
3736: PPUSH
3737: LD_STRING D4-Pok-3
3739: PPUSH
3740: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3744: LD_INT 76
3746: PPUSH
3747: LD_INT 56
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3757: LD_EXP 22
3761: PPUSH
3762: CALL_OW 87
// InGameOff ;
3766: CALL_OW 9
// ComFree ( Burlak ) ;
3770: LD_EXP 22
3774: PPUSH
3775: CALL_OW 139
// end ;
3779: LD_VAR 0 1
3783: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3784: LD_EXP 24
3788: PUSH
3789: LD_EXP 25
3793: PUSH
3794: LD_EXP 26
3798: PUSH
3799: LD_EXP 27
3803: PUSH
3804: LD_EXP 28
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: PPUSH
3816: LD_INT 101
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PPUSH
3826: CALL_OW 72
3830: IFFALSE 5424
3832: GO 3834
3834: DISABLE
// begin if hasGnyevko then
3835: LD_EXP 4
3839: IFFALSE 3915
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3841: LD_EXP 22
3845: PPUSH
3846: LD_EXP 30
3850: PPUSH
3851: CALL_OW 296
3855: PUSH
3856: LD_INT 4
3858: GREATER
3859: PUSH
3860: LD_INT 6
3862: PPUSH
3863: LD_EXP 30
3867: PPUSH
3868: CALL_OW 292
3872: AND
3873: PUSH
3874: LD_INT 6
3876: PPUSH
3877: LD_EXP 22
3881: PPUSH
3882: CALL_OW 292
3886: NOT
3887: AND
3888: IFFALSE 3915
// begin GnyevkoPokryshkinScene ;
3890: CALL 3620 0 0
// repeat wait ( 0 0$1 ) ;
3894: LD_INT 35
3896: PPUSH
3897: CALL_OW 67
// until See ( 6 , Burlak ) ;
3901: LD_INT 6
3903: PPUSH
3904: LD_EXP 22
3908: PPUSH
3909: CALL_OW 292
3913: IFFALSE 3894
// end ; end ; joinedToBelkov := true ;
3915: LD_ADDR_EXP 3
3919: PUSH
3920: LD_INT 1
3922: ST_TO_ADDR
// Video ( true ) ;
3923: LD_INT 1
3925: PPUSH
3926: CALL 48086 0 1
// ChangeSideFog ( 6 , 3 ) ;
3930: LD_INT 6
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3940: LD_INT 76
3942: PPUSH
3943: LD_INT 56
3945: PPUSH
3946: LD_INT 3
3948: PPUSH
3949: LD_INT 12
3951: PPUSH
3952: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3956: LD_EXP 23
3960: PPUSH
3961: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
3965: LD_EXP 23
3969: PPUSH
3970: LD_EXP 22
3974: PPUSH
3975: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
3979: LD_EXP 23
3983: PPUSH
3984: LD_STRING D4-Pok-1
3986: PPUSH
3987: CALL_OW 88
// if gnyevkoMeetPokryshkin then
3991: LD_EXP 11
3995: IFFALSE 4011
// Say ( Gnyevko , D4-Gny-3 ) else
3997: LD_EXP 30
4001: PPUSH
4002: LD_STRING D4-Gny-3
4004: PPUSH
4005: CALL_OW 88
4009: GO 4067
// if hasGnyevko and IsOk ( Gnyevko ) then
4011: LD_EXP 4
4015: PUSH
4016: LD_EXP 30
4020: PPUSH
4021: CALL_OW 302
4025: AND
4026: IFFALSE 4067
// begin SetSide ( Gnyevko , 6 ) ;
4028: LD_EXP 30
4032: PPUSH
4033: LD_INT 6
4035: PPUSH
4036: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
4040: LD_EXP 30
4044: PPUSH
4045: LD_STRING D4-Gny-1
4047: PPUSH
4048: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
4052: LD_EXP 30
4056: PPUSH
4057: LD_INT 83
4059: PPUSH
4060: LD_INT 60
4062: PPUSH
4063: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
4067: LD_EXP 22
4071: PPUSH
4072: LD_EXP 23
4076: PPUSH
4077: CALL_OW 112
// repeat wait ( 3 ) ;
4081: LD_INT 3
4083: PPUSH
4084: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
4088: LD_EXP 22
4092: PPUSH
4093: LD_EXP 23
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 5
4105: LESS
4106: IFFALSE 4081
// ComTurnUnit ( Pokryshkin , Burlak ) ;
4108: LD_EXP 23
4112: PPUSH
4113: LD_EXP 22
4117: PPUSH
4118: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
4122: LD_EXP 22
4126: PPUSH
4127: LD_EXP 23
4131: PPUSH
4132: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
4136: LD_EXP 22
4140: PPUSH
4141: LD_STRING D4-Bur-3
4143: PPUSH
4144: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4148: LD_EXP 23
4152: PPUSH
4153: LD_STRING D4-Pok-4
4155: PPUSH
4156: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4160: LD_EXP 32
4164: PPUSH
4165: LD_INT 31
4167: PPUSH
4168: LD_INT 51
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL_OW 48
// wait ( 0 0$2 ) ;
4178: LD_INT 70
4180: PPUSH
4181: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4185: LD_EXP 22
4189: PPUSH
4190: LD_STRING D4-Bur-4
4192: PPUSH
4193: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4197: LD_EXP 23
4201: PPUSH
4202: LD_STRING D4-Pok-5
4204: PPUSH
4205: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4209: LD_EXP 32
4213: PPUSH
4214: LD_STRING D4-Sol1-5
4216: PPUSH
4217: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4221: LD_EXP 23
4225: PPUSH
4226: LD_STRING D4-Pok-6
4228: PPUSH
4229: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4233: LD_EXP 23
4237: PPUSH
4238: LD_STRING D4-Pok-6a
4240: PPUSH
4241: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4245: LD_EXP 22
4249: PPUSH
4250: LD_STRING D4-Bur-6
4252: PPUSH
4253: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4257: LD_EXP 23
4261: PPUSH
4262: LD_STRING D4-Pok-7
4264: PPUSH
4265: CALL_OW 88
// Video ( false ) ;
4269: LD_INT 0
4271: PPUSH
4272: CALL 48086 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4276: LD_INT 76
4278: PPUSH
4279: LD_INT 56
4281: PPUSH
4282: LD_INT 3
4284: PPUSH
4285: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4289: LD_STRING M2
4291: PPUSH
4292: CALL_OW 337
// ComFree ( Burlak ) ;
4296: LD_EXP 22
4300: PPUSH
4301: CALL_OW 139
// followPokryshkin := true ;
4305: LD_ADDR_EXP 12
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4313: LD_INT 70
4315: PPUSH
4316: CALL_OW 67
// MoveToHill ;
4320: CALL 9985 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4324: LD_INT 65
4326: PPUSH
4327: LD_INT 57
4329: PPUSH
4330: LD_INT 3
4332: PPUSH
4333: LD_INT 9
4335: NEG
4336: PPUSH
4337: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4341: LD_INT 35
4343: PPUSH
4344: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4348: LD_EXP 23
4352: PPUSH
4353: LD_INT 65
4355: PPUSH
4356: LD_INT 59
4358: PPUSH
4359: CALL_OW 297
4363: PUSH
4364: LD_INT 5
4366: LESS
4367: IFFALSE 4341
// followPokryshkin := false ;
4369: LD_ADDR_EXP 12
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// InGameOn ;
4377: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4381: LD_EXP 23
4385: PPUSH
4386: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4390: LD_EXP 22
4394: PPUSH
4395: LD_INT 69
4397: PPUSH
4398: LD_INT 65
4400: PPUSH
4401: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4405: LD_EXP 32
4409: PPUSH
4410: LD_INT 58
4412: PPUSH
4413: LD_INT 57
4415: PPUSH
4416: CALL_OW 111
// repeat wait ( 3 ) ;
4420: LD_INT 3
4422: PPUSH
4423: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4427: LD_EXP 32
4431: PPUSH
4432: LD_INT 58
4434: PPUSH
4435: LD_INT 57
4437: PPUSH
4438: CALL_OW 297
4442: PUSH
4443: LD_INT 4
4445: LESS
4446: IFFALSE 4420
// SetLives ( Brown , 300 ) ;
4448: LD_EXP 32
4452: PPUSH
4453: LD_INT 300
4455: PPUSH
4456: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4460: LD_EXP 32
4464: PPUSH
4465: LD_STRING D5-Sol1-1
4467: PPUSH
4468: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4472: LD_EXP 23
4476: PPUSH
4477: LD_STRING D5-Pok-1
4479: PPUSH
4480: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4484: LD_EXP 23
4488: PUSH
4489: LD_EXP 27
4493: PUSH
4494: LD_EXP 26
4498: PUSH
4499: LD_EXP 25
4503: PUSH
4504: LD_EXP 24
4508: PUSH
4509: LD_EXP 28
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: LD_EXP 32
4526: PPUSH
4527: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4531: LD_EXP 32
4535: PPUSH
4536: LD_STRING D5-Sol1-2
4538: PPUSH
4539: CALL_OW 91
// KillUnit ( Brown ) ;
4543: LD_EXP 32
4547: PPUSH
4548: CALL_OW 66
// ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4552: LD_EXP 23
4556: PUSH
4557: LD_EXP 27
4561: PUSH
4562: LD_EXP 26
4566: PUSH
4567: LD_EXP 25
4571: PUSH
4572: LD_EXP 24
4576: PUSH
4577: LD_EXP 28
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PPUSH
4590: CALL_OW 138
// if hasGnyevko then
4594: LD_EXP 4
4598: IFFALSE 4609
// ComWalk ( Gnyevko ) ;
4600: LD_EXP 30
4604: PPUSH
4605: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4609: LD_EXP 23
4613: PPUSH
4614: LD_INT 60
4616: PPUSH
4617: LD_INT 56
4619: PPUSH
4620: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4624: LD_INT 18
4626: PPUSH
4627: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4631: LD_EXP 27
4635: PPUSH
4636: LD_INT 61
4638: PPUSH
4639: LD_INT 59
4641: PPUSH
4642: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4646: LD_EXP 23
4650: PPUSH
4651: LD_INT 58
4653: PPUSH
4654: LD_INT 57
4656: PPUSH
4657: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4661: LD_EXP 27
4665: PPUSH
4666: LD_INT 58
4668: PPUSH
4669: LD_INT 57
4671: PPUSH
4672: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4676: LD_EXP 22
4680: PPUSH
4681: LD_INT 62
4683: PPUSH
4684: LD_INT 58
4686: PPUSH
4687: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4691: LD_EXP 22
4695: PPUSH
4696: LD_INT 61
4698: PPUSH
4699: LD_INT 58
4701: PPUSH
4702: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4706: LD_EXP 27
4710: PPUSH
4711: LD_INT 58
4713: PPUSH
4714: LD_INT 57
4716: PPUSH
4717: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4721: LD_EXP 23
4725: PPUSH
4726: LD_STRING D4-Pok-2
4728: PPUSH
4729: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4733: LD_INT 10
4735: PPUSH
4736: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4740: LD_EXP 22
4744: PPUSH
4745: LD_STRING D5-Bur-2
4747: PPUSH
4748: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4752: LD_EXP 23
4756: PPUSH
4757: LD_STRING D5-Pok-2
4759: PPUSH
4760: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4764: LD_EXP 27
4768: PPUSH
4769: LD_EXP 22
4773: PPUSH
4774: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4778: LD_EXP 27
4782: PPUSH
4783: LD_STRING D5-Bel-2
4785: PPUSH
4786: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4790: LD_EXP 23
4794: PPUSH
4795: LD_EXP 27
4799: PPUSH
4800: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4804: LD_EXP 23
4808: PPUSH
4809: LD_STRING D5-Pok-3
4811: PPUSH
4812: CALL_OW 88
// if hasGnyevko then
4816: LD_EXP 4
4820: IFFALSE 4848
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4822: LD_EXP 30
4826: PPUSH
4827: LD_EXP 22
4831: PPUSH
4832: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4836: LD_EXP 30
4840: PPUSH
4841: LD_STRING D5-Gny-3
4843: PPUSH
4844: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4848: LD_EXP 22
4852: PPUSH
4853: LD_STRING D5-Bur-3
4855: PPUSH
4856: CALL_OW 88
// wait ( 0 0$2 ) ;
4860: LD_INT 70
4862: PPUSH
4863: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4867: LD_EXP 23
4871: PPUSH
4872: LD_INT 78
4874: PPUSH
4875: LD_INT 57
4877: PPUSH
4878: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4882: LD_EXP 23
4886: PPUSH
4887: LD_STRING D6-Pok-1
4889: PPUSH
4890: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4894: LD_EXP 22
4898: PPUSH
4899: LD_INT 75
4901: PPUSH
4902: LD_INT 56
4904: PPUSH
4905: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4909: LD_EXP 22
4913: PPUSH
4914: LD_INT 83
4916: PPUSH
4917: LD_INT 62
4919: PPUSH
4920: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
4924: LD_EXP 27
4928: PPUSH
4929: LD_INT 80
4931: PPUSH
4932: LD_INT 64
4934: PPUSH
4935: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
4939: LD_EXP 25
4943: PPUSH
4944: LD_INT 83
4946: PPUSH
4947: LD_INT 67
4949: PPUSH
4950: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
4954: LD_EXP 26
4958: PPUSH
4959: LD_INT 81
4961: PPUSH
4962: LD_INT 52
4964: PPUSH
4965: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
4969: LD_EXP 24
4973: PPUSH
4974: LD_INT 78
4976: PPUSH
4977: LD_INT 54
4979: PPUSH
4980: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
4984: LD_EXP 28
4988: PPUSH
4989: LD_INT 75
4991: PPUSH
4992: LD_INT 62
4994: PPUSH
4995: CALL_OW 111
// if hasGnyevko then
4999: LD_EXP 4
5003: IFFALSE 5034
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
5005: LD_EXP 30
5009: PPUSH
5010: LD_INT 77
5012: PPUSH
5013: LD_INT 60
5015: PPUSH
5016: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
5020: LD_EXP 30
5024: PPUSH
5025: LD_EXP 22
5029: PPUSH
5030: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
5034: LD_EXP 22
5038: PPUSH
5039: LD_STRING D6-Bur-1
5041: PPUSH
5042: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
5046: LD_INT 65
5048: PPUSH
5049: LD_INT 57
5051: PPUSH
5052: LD_INT 3
5054: PPUSH
5055: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
5059: LD_EXP 23
5063: PPUSH
5064: LD_INT 87
5066: PPUSH
5067: LD_INT 66
5069: PPUSH
5070: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
5074: LD_EXP 26
5078: PPUSH
5079: LD_INT 92
5081: PPUSH
5082: LD_INT 60
5084: PPUSH
5085: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
5089: LD_EXP 24
5093: PPUSH
5094: LD_INT 90
5096: PPUSH
5097: LD_INT 64
5099: PPUSH
5100: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
5104: LD_EXP 25
5108: PPUSH
5109: LD_INT 87
5111: PPUSH
5112: LD_INT 73
5114: PPUSH
5115: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
5119: LD_EXP 28
5123: PPUSH
5124: LD_INT 87
5126: PPUSH
5127: LD_INT 69
5129: PPUSH
5130: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
5134: LD_EXP 27
5138: PPUSH
5139: LD_INT 90
5141: PPUSH
5142: LD_INT 71
5144: PPUSH
5145: CALL_OW 171
// if not dialogue_skipped then
5149: LD_OWVAR 59
5153: NOT
5154: IFFALSE 5166
// CenterOnXY ( 84 , 64 ) ;
5156: LD_INT 84
5158: PPUSH
5159: LD_INT 64
5161: PPUSH
5162: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5166: LD_EXP 23
5170: PPUSH
5171: LD_STRING D6-Pok-2
5173: PPUSH
5174: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5178: LD_EXP 25
5182: PPUSH
5183: LD_INT 113
5185: PPUSH
5186: LD_INT 104
5188: PPUSH
5189: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5193: LD_EXP 28
5197: PPUSH
5198: LD_INT 107
5200: PPUSH
5201: LD_INT 106
5203: PPUSH
5204: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5208: LD_EXP 24
5212: PPUSH
5213: LD_INT 125
5215: PPUSH
5216: LD_INT 97
5218: PPUSH
5219: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5223: LD_EXP 26
5227: PPUSH
5228: LD_INT 124
5230: PPUSH
5231: LD_INT 101
5233: PPUSH
5234: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5238: LD_EXP 27
5242: PPUSH
5243: LD_INT 119
5245: PPUSH
5246: LD_INT 101
5248: PPUSH
5249: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5253: LD_EXP 22
5257: PPUSH
5258: LD_EXP 23
5262: PPUSH
5263: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5267: LD_EXP 27
5271: PPUSH
5272: LD_STRING D6-Bel-2
5274: PPUSH
5275: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5279: LD_EXP 23
5283: PPUSH
5284: LD_INT 119
5286: PPUSH
5287: LD_INT 93
5289: PPUSH
5290: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5294: LD_EXP 22
5298: PPUSH
5299: LD_STRING D6-Bur-2
5301: PPUSH
5302: CALL_OW 88
// if not dialogue_skipped then
5306: LD_OWVAR 59
5310: NOT
5311: IFFALSE 5323
// CenterOnXY ( 105 , 82 ) ;
5313: LD_INT 105
5315: PPUSH
5316: LD_INT 82
5318: PPUSH
5319: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5323: LD_EXP 23
5327: PPUSH
5328: LD_STRING D6-Pok-3
5330: PPUSH
5331: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5335: LD_EXP 23
5339: PPUSH
5340: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5344: LD_EXP 29
5348: PPUSH
5349: LD_STRING D6-Kur-3
5351: PPUSH
5352: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5356: LD_EXP 25
5360: PUSH
5361: LD_EXP 27
5365: PUSH
5366: LD_EXP 24
5370: PUSH
5371: LD_EXP 22
5375: PUSH
5376: LD_EXP 26
5380: PUSH
5381: LD_EXP 28
5385: PUSH
5386: LD_EXP 30
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5404: LD_EXP 23
5408: PPUSH
5409: LD_STRING D6-Pok-4
5411: PPUSH
5412: CALL_OW 88
// InGameOff ;
5416: CALL_OW 9
// AttackOnTimsBase ;
5420: CALL 5425 0 0
// end ;
5424: END
// function AttackOnTimsBase ; var i , tmp ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
5429: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5430: LD_INT 6
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: LD_INT 2
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5446: LD_INT 3
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 6
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 1
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: PUSH
5496: LD_EXP 23
5500: DIFF
5501: ST_TO_ADDR
// for i in tmp do
5502: LD_ADDR_VAR 0 2
5506: PUSH
5507: LD_VAR 0 3
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5529
// DoNotAttack ( 1 , i ) ;
5515: LD_INT 1
5517: PPUSH
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 471
5527: GO 5512
5529: POP
5530: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5531: LD_EXP 23
5535: PPUSH
5536: LD_INT 65
5538: PPUSH
5539: LD_INT 40
5541: PPUSH
5542: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5546: LD_VAR 0 3
5550: PPUSH
5551: LD_INT 75
5553: PPUSH
5554: LD_INT 51
5556: PPUSH
5557: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5561: LD_EXP 27
5565: PPUSH
5566: LD_STRING D6-Bel-4
5568: PPUSH
5569: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5573: LD_EXP 23
5577: PPUSH
5578: LD_INT 57
5580: PPUSH
5581: LD_INT 30
5583: PPUSH
5584: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5588: LD_VAR 0 3
5592: PPUSH
5593: LD_INT 60
5595: PPUSH
5596: LD_INT 35
5598: PPUSH
5599: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5603: LD_INT 35
5605: PPUSH
5606: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5610: LD_EXP 23
5614: PPUSH
5615: LD_INT 65
5617: PPUSH
5618: LD_INT 40
5620: PPUSH
5621: CALL_OW 297
5625: PUSH
5626: LD_INT 4
5628: LESS
5629: IFFALSE 5603
// Say ( Pokryshkin , D7-Pok-1 ) ;
5631: LD_EXP 23
5635: PPUSH
5636: LD_STRING D7-Pok-1
5638: PPUSH
5639: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5643: LD_INT 10
5645: PPUSH
5646: CALL_OW 67
// async ;
5650: ASYNC
// Say ( Holland , D7-FSol1-1 ) ;
5651: LD_EXP 34
5655: PPUSH
5656: LD_STRING D7-FSol1-1
5658: PPUSH
5659: CALL_OW 88
// sync ;
5663: SYNC
// repeat wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// until not IsOk ( Pokryshkin ) ;
5671: LD_EXP 23
5675: PPUSH
5676: CALL_OW 302
5680: NOT
5681: IFFALSE 5664
// Say ( Belkov , D7a-Bel-1 ) ;
5683: LD_EXP 27
5687: PPUSH
5688: LD_STRING D7a-Bel-1
5690: PPUSH
5691: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5695: LD_VAR 0 3
5699: PPUSH
5700: LD_INT 85
5702: PPUSH
5703: LD_INT 63
5705: PPUSH
5706: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5710: LD_EXP 24
5714: PPUSH
5715: LD_STRING D7a-RSol1-1
5717: PPUSH
5718: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5722: LD_EXP 34
5726: PPUSH
5727: LD_STRING D7a-FSol1-1
5729: PPUSH
5730: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5734: LD_INT 35
5736: PPUSH
5737: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5741: LD_EXP 27
5745: PPUSH
5746: LD_INT 85
5748: PPUSH
5749: LD_INT 63
5751: PPUSH
5752: CALL_OW 297
5756: PUSH
5757: LD_INT 8
5759: LESS
5760: IFFALSE 5734
// for i in tmp do
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: LD_VAR 0 3
5771: PUSH
5772: FOR_IN
5773: IFFALSE 5789
// NormalAttack ( 1 , i ) ;
5775: LD_INT 1
5777: PPUSH
5778: LD_VAR 0 2
5782: PPUSH
5783: CALL_OW 472
5787: GO 5772
5789: POP
5790: POP
// InGameOn ;
5791: CALL_OW 8
// ComHold ( Burlak ) ;
5795: LD_EXP 22
5799: PPUSH
5800: CALL_OW 140
// CenterNowOnUnits ( Belkov ) ;
5804: LD_EXP 27
5808: PPUSH
5809: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5813: LD_EXP 27
5817: PPUSH
5818: LD_STRING D7b-Bel-1
5820: PPUSH
5821: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5825: LD_EXP 27
5829: PPUSH
5830: LD_EXP 25
5834: PPUSH
5835: CALL_OW 119
// for i in tmp diff Belkov do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 3
5848: PUSH
5849: LD_EXP 27
5853: DIFF
5854: PUSH
5855: FOR_IN
5856: IFFALSE 5874
// ComTurnUnit ( i , Belkov ) ;
5858: LD_VAR 0 2
5862: PPUSH
5863: LD_EXP 27
5867: PPUSH
5868: CALL_OW 119
5872: GO 5855
5874: POP
5875: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5876: LD_EXP 25
5880: PPUSH
5881: LD_STRING D7b-FSol1-1
5883: PPUSH
5884: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5888: LD_EXP 27
5892: PPUSH
5893: LD_STRING D7b-Bel-2
5895: PPUSH
5896: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5900: LD_EXP 24
5904: PPUSH
5905: LD_STRING D7b-RSol1-2
5907: PPUSH
5908: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5912: LD_EXP 27
5916: PPUSH
5917: LD_EXP 22
5921: PPUSH
5922: CALL_OW 296
5926: PUSH
5927: LD_INT 10
5929: GREATER
5930: IFFALSE 6028
// begin Say ( Belkov , D7b-Bel-3 ) ;
5932: LD_EXP 27
5936: PPUSH
5937: LD_STRING D7b-Bel-3
5939: PPUSH
5940: CALL_OW 88
// InGameOff ;
5944: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
5948: LD_INT 35
5950: PPUSH
5951: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
5955: LD_EXP 22
5959: PPUSH
5960: LD_EXP 27
5964: PPUSH
5965: CALL_OW 296
5969: PUSH
5970: LD_INT 10
5972: LESSEQUAL
5973: IFFALSE 5948
// InGameOn ;
5975: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
5979: LD_EXP 22
5983: PPUSH
5984: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
5988: LD_EXP 22
5992: PPUSH
5993: LD_EXP 27
5997: PPUSH
5998: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
6002: LD_EXP 27
6006: PPUSH
6007: LD_EXP 22
6011: PPUSH
6012: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
6016: LD_EXP 27
6020: PPUSH
6021: LD_STRING D7b-Bel-3a
6023: PPUSH
6024: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
6028: LD_EXP 22
6032: PPUSH
6033: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6037: LD_EXP 22
6041: PPUSH
6042: LD_EXP 27
6046: PPUSH
6047: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
6051: LD_EXP 22
6055: PPUSH
6056: LD_STRING D7b-Bur-3
6058: PPUSH
6059: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
6063: LD_EXP 22
6067: PPUSH
6068: LD_EXP 27
6072: PPUSH
6073: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_EXP 22
6086: PPUSH
6087: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
6091: LD_EXP 27
6095: PPUSH
6096: LD_STRING D7b-Bel-4
6098: PPUSH
6099: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
6103: LD_EXP 22
6107: PPUSH
6108: LD_STRING D7b-Bur-4
6110: PPUSH
6111: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
6115: LD_EXP 27
6119: PPUSH
6120: LD_STRING D7b-Bel-5
6122: PPUSH
6123: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
6127: LD_EXP 25
6131: PPUSH
6132: LD_STRING D7b-FSol1-5
6134: PPUSH
6135: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
6139: LD_EXP 27
6143: PPUSH
6144: LD_STRING D7b-Bel-6
6146: PPUSH
6147: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
6151: LD_EXP 22
6155: PPUSH
6156: LD_STRING D7b-Bur-6
6158: PPUSH
6159: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
6163: LD_EXP 24
6167: PPUSH
6168: LD_STRING D7b-RSol1-6
6170: PPUSH
6171: CALL_OW 88
// InGameOff ;
6175: CALL_OW 9
// for i in tmp do
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: LD_VAR 0 3
6188: PUSH
6189: FOR_IN
6190: IFFALSE 6206
// SetSide ( i , 3 ) ;
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 235
6204: GO 6189
6206: POP
6207: POP
// ChangeMissionObjectives ( M3 ) ;
6208: LD_STRING M3
6210: PPUSH
6211: CALL_OW 337
// burlakAsCommander := true ;
6215: LD_ADDR_EXP 14
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// end ;
6223: LD_VAR 0 1
6227: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6228: LD_EXP 12
6232: PUSH
6233: LD_EXP 23
6237: PPUSH
6238: LD_EXP 22
6242: PPUSH
6243: CALL_OW 296
6247: PUSH
6248: LD_INT 10
6250: GREATER
6251: AND
6252: IFFALSE 6398
6254: GO 6256
6256: DISABLE
// begin InGameOn ;
6257: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6261: LD_EXP 23
6265: PPUSH
6266: LD_EXP 22
6270: PPUSH
6271: CALL_OW 119
// ComHold ( Burlak ) ;
6275: LD_EXP 22
6279: PPUSH
6280: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6284: LD_EXP 23
6288: PPUSH
6289: LD_STRING DSplit-Pok-1
6291: PPUSH
6292: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6296: LD_EXP 22
6300: PPUSH
6301: LD_EXP 23
6305: PPUSH
6306: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6310: LD_EXP 22
6314: PPUSH
6315: LD_STRING DSplit-Bur-1
6317: PPUSH
6318: CALL_OW 88
// repeat wait ( 3 ) ;
6322: LD_INT 3
6324: PPUSH
6325: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6329: LD_EXP 23
6333: PPUSH
6334: LD_EXP 22
6338: PPUSH
6339: CALL_OW 296
6343: PUSH
6344: LD_INT 6
6346: LESS
6347: IFFALSE 6322
// InGameOff ;
6349: CALL_OW 9
// ComFree ( Burlak ) ;
6353: LD_EXP 22
6357: PPUSH
6358: CALL_OW 139
// if IsOk ( Brown ) then
6362: LD_EXP 32
6366: PPUSH
6367: CALL_OW 302
6371: IFFALSE 6397
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6373: LD_EXP 23
6377: PPUSH
6378: LD_INT 65
6380: PPUSH
6381: LD_INT 59
6383: PPUSH
6384: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6388: LD_EXP 23
6392: PPUSH
6393: CALL_OW 197
// end ; enable ;
6397: ENABLE
// end ;
6398: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6399: LD_EXP 13
6403: PUSH
6404: LD_EXP 23
6408: PPUSH
6409: CALL_OW 302
6413: AND
6414: PUSH
6415: LD_EXP 3
6419: AND
6420: IFFALSE 6452
6422: GO 6424
6424: DISABLE
// begin DialogueOn ;
6425: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6429: LD_EXP 23
6433: PPUSH
6434: LD_STRING DAttack-Pok-1
6436: PPUSH
6437: CALL_OW 88
// DialogueOff ;
6441: CALL_OW 7
// YouLost ( Ally ) ;
6445: LD_STRING Ally
6447: PPUSH
6448: CALL_OW 104
// end ;
6452: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6453: LD_INT 18
6455: PPUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 25
6468: PUSH
6469: LD_INT 1
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: PUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 302
6492: AND
6493: IFFALSE 6505
6495: GO 6497
6497: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6498: LD_STRING ACH_BACKENTRANCE
6500: PPUSH
6501: CALL_OW 543
6505: END
// every 0 0$1 trigger burlakAsCommander do
6506: LD_EXP 14
6510: IFFALSE 6674
6512: GO 6514
6514: DISABLE
// begin if Difficulty > 1 then
6515: LD_OWVAR 67
6519: PUSH
6520: LD_INT 1
6522: GREATER
6523: IFFALSE 6535
// SetLives ( usBun1 , 1000 ) ;
6525: LD_INT 3
6527: PPUSH
6528: LD_INT 1000
6530: PPUSH
6531: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6535: LD_INT 35
6537: PPUSH
6538: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6542: LD_INT 1
6544: PPUSH
6545: LD_INT 22
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 21
6557: PUSH
6558: LD_INT 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: PPUSH
6574: CALL 51531 0 2
6578: IFFALSE 6535
// Say ( Holland , D8-FSol1-1 ) ;
6580: LD_EXP 34
6584: PPUSH
6585: LD_STRING D8-FSol1-1
6587: PPUSH
6588: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6592: LD_EXP 33
6596: PPUSH
6597: LD_STRING D8-Glad-1
6599: PPUSH
6600: CALL_OW 88
// activeAmericanScript := true ;
6604: LD_ADDR_EXP 15
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6612: LD_EXP 22
6616: PPUSH
6617: LD_STRING D8-Bur-1
6619: PPUSH
6620: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6624: LD_INT 70
6626: PPUSH
6627: CALL_OW 67
// if not IsOk ( usBun1 ) then
6631: LD_INT 3
6633: PPUSH
6634: CALL_OW 302
6638: NOT
6639: IFFALSE 6643
// exit ;
6641: GO 6674
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6643: LD_INT 14
6645: PPUSH
6646: LD_INT 22
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PPUSH
6656: CALL_OW 70
6660: IFFALSE 6624
// Say ( Holland , D8-FSol1-2 ) ;
6662: LD_EXP 34
6666: PPUSH
6667: LD_STRING D8-FSol1-2
6669: PPUSH
6670: CALL_OW 88
// end ;
6674: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6675: LD_EXP 33
6679: PPUSH
6680: LD_INT 15
6682: PPUSH
6683: CALL_OW 308
6687: PUSH
6688: LD_EXP 33
6692: PPUSH
6693: LD_INT 71
6695: PPUSH
6696: LD_INT 1
6698: PPUSH
6699: CALL_OW 307
6703: OR
6704: IFFALSE 6736
6706: GO 6708
6708: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6709: LD_EXP 33
6713: PPUSH
6714: CALL_OW 64
// gladstoneEscaped := true ;
6718: LD_ADDR_EXP 16
6722: PUSH
6723: LD_INT 1
6725: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6726: LD_INT 1
6728: PPUSH
6729: LD_STRING 01_GladstoneEscaped
6731: PPUSH
6732: CALL_OW 39
// end ;
6736: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6737: LD_EXP 34
6741: PPUSH
6742: LD_INT 15
6744: PPUSH
6745: CALL_OW 308
6749: PUSH
6750: LD_EXP 34
6754: PPUSH
6755: LD_INT 72
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 307
6765: OR
6766: IFFALSE 6798
6768: GO 6770
6770: DISABLE
// begin RemoveUnit ( Holland ) ;
6771: LD_EXP 34
6775: PPUSH
6776: CALL_OW 64
// hollandEscaped := true ;
6780: LD_ADDR_EXP 17
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6788: LD_INT 1
6790: PPUSH
6791: LD_STRING 01_HollandEscaped
6793: PPUSH
6794: CALL_OW 39
// end ;
6798: END
// every 0 0$1 trigger IsInArea ( Mel , escapeArea ) or IsAt ( Mel , 70 , 1 ) do
6799: LD_EXP 35
6803: PPUSH
6804: LD_INT 15
6806: PPUSH
6807: CALL_OW 308
6811: PUSH
6812: LD_EXP 35
6816: PPUSH
6817: LD_INT 70
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: CALL_OW 307
6827: OR
6828: IFFALSE 6860
6830: GO 6832
6832: DISABLE
// begin RemoveUnit ( Mel ) ;
6833: LD_EXP 35
6837: PPUSH
6838: CALL_OW 64
// MelEscaped := true ;
6842: LD_ADDR_EXP 18
6846: PUSH
6847: LD_INT 1
6849: ST_TO_ADDR
// SaveVariable ( 1 , 01_MelEscaped ) ;
6850: LD_INT 1
6852: PPUSH
6853: LD_STRING 01_MelEscaped
6855: PPUSH
6856: CALL_OW 39
// end ;
6860: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6861: LD_INT 3
6863: PPUSH
6864: CALL_OW 302
6868: NOT
6869: IFFALSE 8514
6871: GO 6873
6873: DISABLE
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
// begin activeAmericanScript := false ;
6879: LD_ADDR_EXP 15
6883: PUSH
6884: LD_INT 0
6886: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6887: LD_EXP 33
6891: PPUSH
6892: CALL_OW 310
6896: IFFALSE 6907
// ComExitBuilding ( Gladstone ) ;
6898: LD_EXP 33
6902: PPUSH
6903: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
6907: LD_EXP 33
6911: PPUSH
6912: LD_INT 71
6914: PPUSH
6915: LD_INT 1
6917: PPUSH
6918: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
6922: LD_EXP 34
6926: PPUSH
6927: LD_INT 72
6929: PPUSH
6930: LD_INT 1
6932: PPUSH
6933: CALL_OW 111
// ComMoveXY ( Mel , 70 , 1 ) ;
6937: LD_EXP 35
6941: PPUSH
6942: LD_INT 70
6944: PPUSH
6945: LD_INT 1
6947: PPUSH
6948: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
6952: LD_EXP 34
6956: PPUSH
6957: LD_STRING D8-FSol1-2a
6959: PPUSH
6960: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
6964: LD_EXP 33
6968: PPUSH
6969: LD_STRING D8-Glad-2
6971: PPUSH
6972: CALL_OW 88
// wait ( 0 0$1 ) ;
6976: LD_INT 35
6978: PPUSH
6979: CALL_OW 67
// if IsOk ( Gladstone ) then
6983: LD_EXP 33
6987: PPUSH
6988: CALL_OW 302
6992: IFFALSE 7081
// begin DialogueOn ;
6994: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
6998: LD_EXP 33
7002: PPUSH
7003: CALL_OW 250
7007: PPUSH
7008: LD_EXP 33
7012: PPUSH
7013: CALL_OW 251
7017: PPUSH
7018: LD_INT 3
7020: PPUSH
7021: LD_INT 3
7023: NEG
7024: PPUSH
7025: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
7029: LD_EXP 33
7033: PPUSH
7034: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
7038: LD_EXP 22
7042: PPUSH
7043: LD_STRING D8-Bur-2
7045: PPUSH
7046: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
7050: LD_EXP 33
7054: PPUSH
7055: CALL_OW 250
7059: PPUSH
7060: LD_EXP 33
7064: PPUSH
7065: CALL_OW 251
7069: PPUSH
7070: LD_INT 3
7072: PPUSH
7073: CALL_OW 331
// DialogueOff ;
7077: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7081: LD_INT 35
7083: PPUSH
7084: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
7088: LD_EXP 33
7092: PPUSH
7093: CALL_OW 302
7097: NOT
7098: PUSH
7099: LD_EXP 34
7103: PPUSH
7104: CALL_OW 302
7108: NOT
7109: AND
7110: IFFALSE 7081
// if gladstoneEscaped and hollandEscaped then
7112: LD_EXP 16
7116: PUSH
7117: LD_EXP 17
7121: AND
7122: IFFALSE 7138
// Say ( Burlak , D9-Bur-1c ) else
7124: LD_EXP 22
7128: PPUSH
7129: LD_STRING D9-Bur-1c
7131: PPUSH
7132: CALL_OW 88
7136: GO 7190
// if hollandEscaped then
7138: LD_EXP 17
7142: IFFALSE 7158
// Say ( Burlak , D9-Bur-1b ) else
7144: LD_EXP 22
7148: PPUSH
7149: LD_STRING D9-Bur-1b
7151: PPUSH
7152: CALL_OW 88
7156: GO 7190
// if gladstoneEscaped then
7158: LD_EXP 16
7162: IFFALSE 7178
// Say ( Burlak , D9-Bur-1a ) else
7164: LD_EXP 22
7168: PPUSH
7169: LD_STRING D9-Bur-1a
7171: PPUSH
7172: CALL_OW 88
7176: GO 7190
// Say ( Burlak , D9-Bur-1 ) ;
7178: LD_EXP 22
7182: PPUSH
7183: LD_STRING D9-Bur-1
7185: PPUSH
7186: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7190: LD_INT 35
7192: PPUSH
7193: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7197: LD_INT 22
7199: PUSH
7200: LD_INT 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 50
7209: PUSH
7210: EMPTY
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: NOT
7222: IFFALSE 7190
// DialogueOn ;
7224: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7228: LD_EXP 27
7232: PPUSH
7233: LD_STRING D10-Bel-1
7235: PPUSH
7236: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7240: LD_EXP 22
7244: PPUSH
7245: LD_STRING D10-Bur-1
7247: PPUSH
7248: CALL_OW 88
// if IsOk ( Belkov ) then
7252: LD_EXP 27
7256: PPUSH
7257: CALL_OW 302
7261: IFFALSE 7277
// Say ( Belkov , D10-Bel-1a ) else
7263: LD_EXP 27
7267: PPUSH
7268: LD_STRING D10-Bel-1a
7270: PPUSH
7271: CALL_OW 88
7275: GO 7350
// if IsOk ( Saseda ) then
7277: LD_EXP 24
7281: PPUSH
7282: CALL_OW 302
7286: IFFALSE 7302
// Say ( Saseda , D10-RSol1-1 ) else
7288: LD_EXP 24
7292: PPUSH
7293: LD_STRING D10-RSol1-1
7295: PPUSH
7296: CALL_OW 88
7300: GO 7350
// if IsOk ( Balei ) then
7302: LD_EXP 26
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Balei , D10-RSol1-1 ) else
7313: LD_EXP 26
7317: PPUSH
7318: LD_STRING D10-RSol1-1
7320: PPUSH
7321: CALL_OW 88
7325: GO 7350
// if IsOk ( Jaunzeme ) then
7327: LD_EXP 28
7331: PPUSH
7332: CALL_OW 302
7336: IFFALSE 7350
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7338: LD_EXP 28
7342: PPUSH
7343: LD_STRING D10-RSol1-1
7345: PPUSH
7346: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 26
7377: PUSH
7378: LD_INT 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: PUSH
7395: LD_EXP 22
7399: PUSH
7400: LD_EXP 30
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: DIFF
7409: ST_TO_ADDR
// if tmp then
7410: LD_VAR 0 1
7414: IFFALSE 7428
// Say ( Burlak , D10-Bur-2 ) ;
7416: LD_EXP 22
7420: PPUSH
7421: LD_STRING D10-Bur-2
7423: PPUSH
7424: CALL_OW 88
// DialogueOff ;
7428: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7432: LD_EXP 16
7436: PUSH
7437: LD_EXP 17
7441: OR
7442: IFFALSE 7453
// ChangeMissionObjectives ( M4b ) else
7444: LD_STRING M4b
7446: PPUSH
7447: CALL_OW 337
7451: GO 7460
// ChangeMissionObjectives ( M4a ) ;
7453: LD_STRING M4a
7455: PPUSH
7456: CALL_OW 337
// canEnd := true ;
7460: LD_ADDR_EXP 19
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7468: LD_INT 16
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7478: LD_INT 700
7480: PPUSH
7481: LD_INT 1400
7483: PPUSH
7484: CALL_OW 12
7488: PPUSH
7489: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7500: LD_EXP 31
7504: PPUSH
7505: LD_INT 12
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 49
7515: IFFALSE 7493
// if not See ( 3 , Kirilenkova ) then
7517: LD_INT 3
7519: PPUSH
7520: LD_EXP 31
7524: PPUSH
7525: CALL_OW 292
7529: NOT
7530: IFFALSE 7981
// begin DialogueOn ;
7532: CALL_OW 6
// InGameOn ;
7536: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7540: LD_EXP 31
7544: PPUSH
7545: LD_STRING D11b-Kir-1
7547: PPUSH
7548: CALL_OW 586
// if IsOk ( Belkov ) then
7552: LD_EXP 27
7556: PPUSH
7557: CALL_OW 302
7561: IFFALSE 7589
// begin Say ( Belkov , D11b-Bel-1 ) ;
7563: LD_EXP 27
7567: PPUSH
7568: LD_STRING D11b-Bel-1
7570: PPUSH
7571: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7575: LD_EXP 27
7579: PPUSH
7580: LD_STRING D11b-Bel-1a
7582: PPUSH
7583: CALL_OW 88
// end else
7587: GO 7662
// if IsOk ( Jaworska ) then
7589: LD_EXP 25
7593: PPUSH
7594: CALL_OW 302
7598: IFFALSE 7614
// Say ( Jaworska , D11b-RFSol1-1 ) else
7600: LD_EXP 25
7604: PPUSH
7605: LD_STRING D11b-RFSol1-1
7607: PPUSH
7608: CALL_OW 88
7612: GO 7662
// if IsOk ( Saseda ) then
7614: LD_EXP 24
7618: PPUSH
7619: CALL_OW 302
7623: IFFALSE 7639
// Say ( Saseda , D11b-RSol1-1 ) else
7625: LD_EXP 24
7629: PPUSH
7630: LD_STRING D11b-RSol1-1
7632: PPUSH
7633: CALL_OW 88
7637: GO 7662
// if IsOk ( Balei ) then
7639: LD_EXP 26
7643: PPUSH
7644: CALL_OW 302
7648: IFFALSE 7662
// Say ( Balei , D11b-RSol1-1 ) ;
7650: LD_EXP 26
7654: PPUSH
7655: LD_STRING D11b-RSol1-1
7657: PPUSH
7658: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7662: LD_INT 22
7664: PUSH
7665: LD_INT 0
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 12
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 91
7684: PUSH
7685: LD_EXP 31
7689: PUSH
7690: LD_INT 12
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PPUSH
7703: CALL_OW 69
7707: IFFALSE 7785
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7709: LD_EXP 31
7713: PPUSH
7714: LD_STRING D11b1-Kir-1
7716: PPUSH
7717: CALL_OW 586
// if attackedByApe then
7721: LD_EXP 7
7725: IFFALSE 7753
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7727: LD_EXP 22
7731: PPUSH
7732: LD_STRING D11b1-Bur-1
7734: PPUSH
7735: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7739: LD_EXP 27
7743: PPUSH
7744: LD_STRING D11b2-Bel-1
7746: PPUSH
7747: CALL_OW 88
// end else
7751: GO 7783
// if waterfallSpotted then
7753: LD_EXP 8
7757: IFFALSE 7783
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7759: LD_EXP 22
7763: PPUSH
7764: LD_STRING D11b1-Bur-1a
7766: PPUSH
7767: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7771: LD_EXP 27
7775: PPUSH
7776: LD_STRING D11b2-Bel-1
7778: PPUSH
7779: CALL_OW 88
// end ; end else
7783: GO 7827
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7785: LD_EXP 31
7789: PPUSH
7790: LD_STRING D11b2-Kir-1
7792: PPUSH
7793: CALL_OW 586
// if waterfallSpotted then
7797: LD_EXP 8
7801: IFFALSE 7827
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7803: LD_EXP 22
7807: PPUSH
7808: LD_STRING D11b1-Bur-1a
7810: PPUSH
7811: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7815: LD_EXP 27
7819: PPUSH
7820: LD_STRING D11b2-Bel-1
7822: PPUSH
7823: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7827: LD_EXP 8
7831: NOT
7832: PUSH
7833: LD_EXP 7
7837: NOT
7838: AND
7839: IFFALSE 7939
// begin if IsOk ( Belkov ) then
7841: LD_EXP 27
7845: PPUSH
7846: CALL_OW 302
7850: IFFALSE 7866
// Say ( Belkov , D11b1-Bel-1 ) else
7852: LD_EXP 27
7856: PPUSH
7857: LD_STRING D11b1-Bel-1
7859: PPUSH
7860: CALL_OW 88
7864: GO 7939
// if IsOk ( Saseda ) then
7866: LD_EXP 24
7870: PPUSH
7871: CALL_OW 302
7875: IFFALSE 7891
// Say ( Saseda , D11b1-RSol1-1 ) else
7877: LD_EXP 24
7881: PPUSH
7882: LD_STRING D11b1-RSol1-1
7884: PPUSH
7885: CALL_OW 88
7889: GO 7939
// if IsOk ( Jaworska ) then
7891: LD_EXP 25
7895: PPUSH
7896: CALL_OW 302
7900: IFFALSE 7916
// Say ( Jaworska , D11b1-RFSol1-1 ) else
7902: LD_EXP 25
7906: PPUSH
7907: LD_STRING D11b1-RFSol1-1
7909: PPUSH
7910: CALL_OW 88
7914: GO 7939
// if IsOk ( Balei ) then
7916: LD_EXP 26
7920: PPUSH
7921: CALL_OW 302
7925: IFFALSE 7939
// Say ( Balei , D11b1-RSol1-1 ) ;
7927: LD_EXP 26
7931: PPUSH
7932: LD_STRING D11b1-RSol1-1
7934: PPUSH
7935: CALL_OW 88
// end ; DialogueOff ;
7939: CALL_OW 7
// InGameOff ;
7943: CALL_OW 9
// wait ( 1 1$00 - ( 0 0$10 * Difficulty ) ) ;
7947: LD_INT 2100
7949: PUSH
7950: LD_INT 350
7952: PUSH
7953: LD_OWVAR 67
7957: MUL
7958: MINUS
7959: PPUSH
7960: CALL_OW 67
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
7964: LD_EXP 31
7968: PPUSH
7969: LD_INT 75
7971: PPUSH
7972: LD_INT 95
7974: PPUSH
7975: CALL_OW 111
// end else
7979: GO 8217
// begin DialogueOn ;
7981: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
7985: LD_EXP 31
7989: PPUSH
7990: LD_INT 3
7992: PPUSH
7993: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
7997: LD_EXP 31
8001: PPUSH
8002: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8006: LD_EXP 31
8010: PPUSH
8011: LD_STRING D11a-Kir-1
8013: PPUSH
8014: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8018: LD_EXP 31
8022: PPUSH
8023: LD_EXP 27
8027: PPUSH
8028: CALL_OW 296
8032: PUSH
8033: LD_INT 8
8035: LESS
8036: IFFALSE 8050
// Say ( Belkov , D11a-Bel-1 ) ;
8038: LD_EXP 27
8042: PPUSH
8043: LD_STRING D11a-Bel-1
8045: PPUSH
8046: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8050: LD_EXP 31
8054: PPUSH
8055: LD_STRING D11a-Kir-2
8057: PPUSH
8058: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8062: LD_EXP 31
8066: PPUSH
8067: LD_EXP 27
8071: PPUSH
8072: CALL_OW 296
8076: PUSH
8077: LD_INT 8
8079: LESS
8080: IFFALSE 8096
// Say ( Belkov , D11a-Bel-2 ) else
8082: LD_EXP 27
8086: PPUSH
8087: LD_STRING D11a-Bel-2
8089: PPUSH
8090: CALL_OW 88
8094: GO 8196
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
8096: LD_EXP 31
8100: PPUSH
8101: LD_EXP 24
8105: PPUSH
8106: CALL_OW 296
8110: PUSH
8111: LD_INT 8
8113: LESS
8114: IFFALSE 8130
// Say ( Saseda , D11a-RSol1-2 ) else
8116: LD_EXP 24
8120: PPUSH
8121: LD_STRING D11a-RSol1-2
8123: PPUSH
8124: CALL_OW 88
8128: GO 8196
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
8130: LD_EXP 31
8134: PPUSH
8135: LD_EXP 25
8139: PPUSH
8140: CALL_OW 296
8144: PUSH
8145: LD_INT 8
8147: LESS
8148: IFFALSE 8164
// Say ( Jaworska , D11a-RFSol1-2 ) else
8150: LD_EXP 25
8154: PPUSH
8155: LD_STRING D11a-RFSol1-2
8157: PPUSH
8158: CALL_OW 88
8162: GO 8196
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
8164: LD_EXP 31
8168: PPUSH
8169: LD_EXP 26
8173: PPUSH
8174: CALL_OW 296
8178: PUSH
8179: LD_INT 8
8181: LESS
8182: IFFALSE 8196
// Say ( Balei , D11a-RSol1-2 ) ;
8184: LD_EXP 26
8188: PPUSH
8189: LD_STRING D11a-RSol1-2
8191: PPUSH
8192: CALL_OW 88
// DialogueOff ;
8196: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8200: LD_STRING ACH_YELENA
8202: PPUSH
8203: CALL_OW 543
// hasKirilenkova := true ;
8207: LD_ADDR_EXP 5
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// exit ;
8215: GO 8514
// end ; p := 0 ;
8217: LD_ADDR_VAR 0 3
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// if Difficulty > 2 then
8225: LD_OWVAR 67
8229: PUSH
8230: LD_INT 2
8232: GREATER
8233: IFFALSE 8313
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8235: LD_INT 5
8237: NEG
8238: PUSH
8239: LD_INT 8
8241: NEG
8242: PUSH
8243: LD_INT 10
8245: NEG
8246: PUSH
8247: LD_INT 12
8249: NEG
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: LD_OWVAR 67
8261: ARRAY
8262: PPUSH
8263: CALL 44267 0 1
// ape := CreateHuman ;
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: CALL_OW 44
8276: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_INT 65
8284: PPUSH
8285: LD_INT 89
8287: PPUSH
8288: LD_INT 2
8290: PPUSH
8291: LD_INT 0
8293: PPUSH
8294: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_INT 74
8305: PPUSH
8306: LD_INT 94
8308: PPUSH
8309: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 67
// p := Inc ( p ) ;
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_VAR 0 3
8329: PPUSH
8330: CALL 49475 0 1
8334: ST_TO_ADDR
// if p > 120 and IsOk ( ape ) and not HasTask ( ape ) then
8335: LD_VAR 0 3
8339: PUSH
8340: LD_INT 120
8342: GREATER
8343: PUSH
8344: LD_VAR 0 2
8348: PPUSH
8349: CALL_OW 302
8353: AND
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 314
8364: NOT
8365: AND
8366: IFFALSE 8382
// ComAttackUnit ( ape , Kirilenkova ) ;
8368: LD_VAR 0 2
8372: PPUSH
8373: LD_EXP 31
8377: PPUSH
8378: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8382: LD_INT 3
8384: PPUSH
8385: LD_EXP 31
8389: PPUSH
8390: CALL_OW 292
8394: PUSH
8395: LD_EXP 31
8399: PPUSH
8400: CALL_OW 302
8404: AND
8405: IFFALSE 8313
// if p < 15 then
8407: LD_VAR 0 3
8411: PUSH
8412: LD_INT 15
8414: LESS
8415: IFFALSE 8424
// SetAchievement ( ACH_YELENA ) ;
8417: LD_STRING ACH_YELENA
8419: PPUSH
8420: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8424: LD_EXP 31
8428: PPUSH
8429: LD_EXP 22
8433: PPUSH
8434: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8438: LD_INT 10
8440: PPUSH
8441: CALL_OW 67
// DialogueOn ;
8445: CALL_OW 6
// InGameOn ;
8449: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8453: LD_EXP 31
8457: PPUSH
8458: LD_INT 3
8460: PPUSH
8461: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8465: LD_EXP 31
8469: PPUSH
8470: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8474: LD_EXP 31
8478: PPUSH
8479: LD_STRING D11c-Kir-1
8481: PPUSH
8482: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8486: LD_EXP 22
8490: PPUSH
8491: LD_STRING D11c-Bur-1
8493: PPUSH
8494: CALL_OW 88
// DialogueOff ;
8498: CALL_OW 7
// InGameOff ;
8502: CALL_OW 9
// hasKirilenkova := true ;
8506: LD_ADDR_EXP 5
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// end ;
8514: PPOPN 3
8516: END
// every 0 0$1 trigger joinedToBelkov and not UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_alive ] ) do
8517: LD_EXP 3
8521: PUSH
8522: LD_EXP 24
8526: PUSH
8527: LD_EXP 25
8531: PUSH
8532: LD_EXP 26
8536: PUSH
8537: LD_EXP 27
8541: PUSH
8542: LD_EXP 28
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: PPUSH
8554: LD_INT 51
8556: PUSH
8557: EMPTY
8558: LIST
8559: PPUSH
8560: CALL_OW 72
8564: NOT
8565: AND
8566: IFFALSE 8578
8568: GO 8570
8570: DISABLE
// begin YouLost ( Comrades ) ;
8571: LD_STRING Comrades
8573: PPUSH
8574: CALL_OW 104
// end ;
8578: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8579: LD_EXP 19
8583: PUSH
8584: LD_EXP 22
8588: PPUSH
8589: LD_INT 16
8591: PPUSH
8592: CALL_OW 308
8596: AND
8597: IFFALSE 8982
8599: GO 8601
8601: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8602: LD_INT 22
8604: PUSH
8605: LD_INT 3
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 21
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 50
8624: PUSH
8625: EMPTY
8626: LIST
8627: PUSH
8628: LD_INT 3
8630: PUSH
8631: LD_INT 95
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: IFFALSE 8664
// Query ( QExit1 ) ;
8657: LD_STRING QExit1
8659: PPUSH
8660: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8664: LD_INT 35
8666: PPUSH
8667: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8671: LD_INT 22
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 21
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 50
8693: PUSH
8694: EMPTY
8695: LIST
8696: PUSH
8697: LD_INT 3
8699: PUSH
8700: LD_INT 95
8702: PUSH
8703: LD_INT 16
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: NOT
8725: IFFALSE 8664
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8727: LD_EXP 27
8731: PUSH
8732: LD_EXP 24
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PPUSH
8741: LD_INT 157
8743: PPUSH
8744: LD_INT 118
8746: PPUSH
8747: CALL_OW 73
8751: PUSH
8752: LD_EXP 27
8756: EQUAL
8757: PUSH
8758: LD_EXP 27
8762: PPUSH
8763: CALL_OW 302
8767: AND
8768: IFFALSE 8784
// Say ( Belkov , D12-Bel-1 ) else
8770: LD_EXP 27
8774: PPUSH
8775: LD_STRING D12-Bel-1
8777: PPUSH
8778: CALL_OW 88
8782: GO 8832
// if IsOk ( Saseda ) then
8784: LD_EXP 24
8788: PPUSH
8789: CALL_OW 302
8793: IFFALSE 8809
// Say ( Saseda , D12-RSol1-1 ) else
8795: LD_EXP 24
8799: PPUSH
8800: LD_STRING D12-RSol1-1
8802: PPUSH
8803: CALL_OW 88
8807: GO 8832
// if IsOk ( Balei ) then
8809: LD_EXP 26
8813: PPUSH
8814: CALL_OW 302
8818: IFFALSE 8832
// Say ( Balei , D12-RSol1-1 ) ;
8820: LD_EXP 26
8824: PPUSH
8825: LD_STRING D12-RSol1-1
8827: PPUSH
8828: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
8832: LD_EXP 9
8836: PUSH
8837: LD_EXP 4
8841: NOT
8842: AND
8843: IFFALSE 8978
// begin DialogueOn ;
8845: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
8849: LD_EXP 22
8853: PPUSH
8854: LD_STRING D12-Bur-1
8856: PPUSH
8857: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
8861: LD_EXP 27
8865: PPUSH
8866: LD_STRING D12-Bel-2
8868: PPUSH
8869: CALL_OW 88
// DialogueOff ;
8873: CALL_OW 7
// if Query ( QExit2 ) = 1 then
8877: LD_STRING QExit2
8879: PPUSH
8880: CALL_OW 97
8884: PUSH
8885: LD_INT 1
8887: EQUAL
8888: IFFALSE 8896
// begin FinishMission ;
8890: CALL 8983 0 0
// exit ;
8894: GO 8982
// end ; repeat wait ( 0 0$3 ) ;
8896: LD_INT 105
8898: PPUSH
8899: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8903: LD_INT 22
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 21
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 50
8925: PUSH
8926: EMPTY
8927: LIST
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 95
8934: PUSH
8935: LD_INT 16
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: NOT
8957: IFFALSE 8974
// if Query ( QExit2 ) = 1 then
8959: LD_STRING QExit2
8961: PPUSH
8962: CALL_OW 97
8966: PUSH
8967: LD_INT 1
8969: EQUAL
8970: IFFALSE 8974
// break ;
8972: GO 8978
// until false ;
8974: LD_INT 0
8976: IFFALSE 8896
// end ; FinishMission ;
8978: CALL 8983 0 0
// end ;
8982: END
// function FinishMission ; begin
8983: LD_INT 0
8985: PPUSH
// if tick <= 4 4$00 then
8986: LD_OWVAR 1
8990: PUSH
8991: LD_INT 8400
8993: LESSEQUAL
8994: IFFALSE 9003
// SetAchievement ( ACH_RSPEED_1 ) ;
8996: LD_STRING ACH_RSPEED_1
8998: PPUSH
8999: CALL_OW 543
// if not someoneGetsHurt then
9003: LD_EXP 21
9007: NOT
9008: IFFALSE 9017
// SetAchievement ( ACH_BANDAGE ) ;
9010: LD_STRING ACH_BANDAGE
9012: PPUSH
9013: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or MelEscaped ) then
9017: LD_EXP 16
9021: PUSH
9022: LD_EXP 17
9026: PUSH
9027: LD_EXP 18
9031: OR
9032: AND
9033: IFFALSE 9048
// AddMedal ( NoEscape , - 3 ) else
9035: LD_STRING NoEscape
9037: PPUSH
9038: LD_INT 3
9040: NEG
9041: PPUSH
9042: CALL_OW 101
9046: GO 9102
// if gladstoneEscaped then
9048: LD_EXP 16
9052: IFFALSE 9067
// AddMedal ( NoEscape , - 1 ) else
9054: LD_STRING NoEscape
9056: PPUSH
9057: LD_INT 1
9059: NEG
9060: PPUSH
9061: CALL_OW 101
9065: GO 9102
// if hollandEscaped or MelEscaped then
9067: LD_EXP 17
9071: PUSH
9072: LD_EXP 18
9076: OR
9077: IFFALSE 9092
// AddMedal ( NoEscape , - 2 ) else
9079: LD_STRING NoEscape
9081: PPUSH
9082: LD_INT 2
9084: NEG
9085: PPUSH
9086: CALL_OW 101
9090: GO 9102
// AddMedal ( NoEscape , 1 ) ;
9092: LD_STRING NoEscape
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
9102: LD_EXP 4
9106: PUSH
9107: LD_EXP 30
9111: PPUSH
9112: CALL_OW 302
9116: AND
9117: PUSH
9118: LD_EXP 5
9122: AND
9123: PUSH
9124: LD_EXP 31
9128: PPUSH
9129: CALL_OW 302
9133: AND
9134: IFFALSE 9148
// AddMedal ( Gnyevko , 1 ) else
9136: LD_STRING Gnyevko
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: CALL_OW 101
9146: GO 9247
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
9148: LD_EXP 30
9152: PPUSH
9153: CALL_OW 302
9157: NOT
9158: PUSH
9159: LD_EXP 31
9163: PPUSH
9164: CALL_OW 302
9168: NOT
9169: AND
9170: IFFALSE 9185
// AddMedal ( Gnyevko , - 3 ) else
9172: LD_STRING Gnyevko
9174: PPUSH
9175: LD_INT 3
9177: NEG
9178: PPUSH
9179: CALL_OW 101
9183: GO 9247
// if not hasGnyevko then
9185: LD_EXP 4
9189: NOT
9190: IFFALSE 9205
// AddMedal ( Gnyevko , - 1 ) else
9192: LD_STRING Gnyevko
9194: PPUSH
9195: LD_INT 1
9197: NEG
9198: PPUSH
9199: CALL_OW 101
9203: GO 9247
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
9205: LD_EXP 30
9209: PPUSH
9210: CALL_OW 302
9214: NOT
9215: PUSH
9216: LD_EXP 31
9220: PPUSH
9221: CALL_OW 302
9225: NOT
9226: OR
9227: PUSH
9228: LD_EXP 5
9232: NOT
9233: OR
9234: IFFALSE 9247
// AddMedal ( Gnyevko , - 2 ) ;
9236: LD_STRING Gnyevko
9238: PPUSH
9239: LD_INT 2
9241: NEG
9242: PPUSH
9243: CALL_OW 101
// if loseCounter then
9247: LD_EXP 20
9251: IFFALSE 9266
// AddMedal ( NoLosses , - 1 ) else
9253: LD_STRING NoLosses
9255: PPUSH
9256: LD_INT 1
9258: NEG
9259: PPUSH
9260: CALL_OW 101
9264: GO 9276
// AddMedal ( NoLosses , 1 ) ;
9266: LD_STRING NoLosses
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: CALL_OW 101
// GiveMedals ( MAIN ) ;
9276: LD_STRING MAIN
9278: PPUSH
9279: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9283: LD_INT 22
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 21
9295: PUSH
9296: LD_INT 1
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 50
9305: PUSH
9306: EMPTY
9307: LIST
9308: PUSH
9309: LD_INT 23
9311: PUSH
9312: LD_INT 3
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 69
9329: PPUSH
9330: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9334: LD_EXP 22
9338: PPUSH
9339: LD_EXP 2
9343: PUSH
9344: LD_STRING Burlak
9346: STR
9347: PPUSH
9348: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9352: LD_EXP 30
9356: PPUSH
9357: CALL_OW 302
9361: PUSH
9362: LD_EXP 4
9366: AND
9367: IFFALSE 9387
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9369: LD_EXP 30
9373: PPUSH
9374: LD_EXP 2
9378: PUSH
9379: LD_STRING Gnyevko
9381: STR
9382: PPUSH
9383: CALL_OW 38
// if IsOk ( Belkov ) then
9387: LD_EXP 27
9391: PPUSH
9392: CALL_OW 302
9396: IFFALSE 9416
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9398: LD_EXP 27
9402: PPUSH
9403: LD_EXP 2
9407: PUSH
9408: LD_STRING Belkov
9410: STR
9411: PPUSH
9412: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9416: LD_EXP 31
9420: PPUSH
9421: CALL_OW 302
9425: PUSH
9426: LD_EXP 5
9430: AND
9431: IFFALSE 9451
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9433: LD_EXP 31
9437: PPUSH
9438: LD_EXP 2
9442: PUSH
9443: LD_STRING Kirilenkova
9445: STR
9446: PPUSH
9447: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9451: LD_INT 22
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 50
9463: PUSH
9464: EMPTY
9465: LIST
9466: PUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: PPUSH
9482: CALL_OW 69
9486: PUSH
9487: LD_EXP 22
9491: PUSH
9492: LD_EXP 30
9496: PUSH
9497: LD_EXP 27
9501: PUSH
9502: LD_EXP 31
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: DIFF
9513: PPUSH
9514: LD_STRING 01_belkovTeam
9516: PPUSH
9517: CALL_OW 38
// YouWin ;
9521: CALL_OW 103
// end ; end_of_file
9525: LD_VAR 0 1
9529: RET
// export function SendApemanAttack ; var ape ; begin
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
// PrepareApeman ( 0 ) ;
9534: LD_INT 0
9536: PPUSH
9537: CALL 44267 0 1
// ape := CreateHuman ;
9541: LD_ADDR_VAR 0 2
9545: PUSH
9546: CALL_OW 44
9550: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9551: LD_VAR 0 2
9555: PPUSH
9556: LD_INT 65
9558: PPUSH
9559: LD_INT 89
9561: PPUSH
9562: LD_INT 0
9564: PPUSH
9565: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9569: LD_VAR 0 2
9573: PPUSH
9574: LD_EXP 22
9578: PPUSH
9579: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9583: LD_INT 35
9585: PPUSH
9586: CALL_OW 67
// if joinedToBelkov then
9590: LD_EXP 3
9594: IFFALSE 9613
// begin ComMoveXY ( ape , 66 , 90 ) ;
9596: LD_VAR 0 2
9600: PPUSH
9601: LD_INT 66
9603: PPUSH
9604: LD_INT 90
9606: PPUSH
9607: CALL_OW 111
// exit ;
9611: GO 9794
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9613: LD_VAR 0 2
9617: PPUSH
9618: LD_EXP 22
9622: PPUSH
9623: CALL_OW 296
9627: PUSH
9628: LD_INT 5
9630: LESS
9631: IFFALSE 9583
// wait ( 0 0$0.3 ) ;
9633: LD_INT 10
9635: PPUSH
9636: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_EXP 22
9649: PPUSH
9650: CALL_OW 119
// if HasTask ( Burlak ) then
9654: LD_EXP 22
9658: PPUSH
9659: CALL_OW 314
9663: IFFALSE 9674
// wait ( 0 0$3 ) else
9665: LD_INT 105
9667: PPUSH
9668: CALL_OW 67
9672: GO 9681
// wait ( 0 0$10 ) ;
9674: LD_INT 350
9676: PPUSH
9677: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9681: LD_INT 6
9683: PPUSH
9684: LD_VAR 0 2
9688: PPUSH
9689: CALL_OW 292
9693: PUSH
9694: LD_EXP 3
9698: OR
9699: IFFALSE 9718
// begin ComMoveXY ( ape , 66 , 90 ) ;
9701: LD_VAR 0 2
9705: PPUSH
9706: LD_INT 66
9708: PPUSH
9709: LD_INT 90
9711: PPUSH
9712: CALL_OW 111
// exit ;
9716: GO 9794
// end ; ComAttackUnit ( ape , Burlak ) ;
9718: LD_VAR 0 2
9722: PPUSH
9723: LD_EXP 22
9727: PPUSH
9728: CALL_OW 115
// repeat wait ( 1 ) ;
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9739: LD_VAR 0 2
9743: PPUSH
9744: CALL_OW 256
9748: PUSH
9749: LD_INT 980
9751: LESS
9752: PUSH
9753: LD_VAR 0 2
9757: PPUSH
9758: CALL_OW 504
9762: PUSH
9763: LD_EXP 22
9767: EQUAL
9768: AND
9769: PUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: CALL_OW 583
9779: AND
9780: IFFALSE 9732
// SetLives ( ape , 200 ) ;
9782: LD_VAR 0 2
9786: PPUSH
9787: LD_INT 200
9789: PPUSH
9790: CALL_OW 234
// end ;
9794: LD_VAR 0 1
9798: RET
// export function CreateNature ; var i , ape , r ; begin
9799: LD_INT 0
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
9805: LD_INT 5
9807: PPUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 4
9813: PUSH
9814: LD_INT 5
9816: PUSH
9817: LD_INT 6
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_OWVAR 67
9830: ARRAY
9831: PPUSH
9832: LD_INT 0
9834: PPUSH
9835: LD_INT 5
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_INT 0
9843: PPUSH
9844: LD_INT 3
9846: PPUSH
9847: LD_INT 7
9849: PPUSH
9850: LD_INT 8
9852: PPUSH
9853: CALL 44791 0 9
// r := rand ( 1 , 3 ) ;
9857: LD_ADDR_VAR 0 4
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 3
9867: PPUSH
9868: CALL_OW 12
9872: ST_TO_ADDR
// for i := 1 to 3 do
9873: LD_ADDR_VAR 0 2
9877: PUSH
9878: DOUBLE
9879: LD_INT 1
9881: DEC
9882: ST_TO_ADDR
9883: LD_INT 3
9885: PUSH
9886: FOR_TO
9887: IFFALSE 9978
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
9889: LD_INT 5
9891: NEG
9892: PUSH
9893: LD_INT 8
9895: NEG
9896: PUSH
9897: LD_INT 10
9899: NEG
9900: PUSH
9901: LD_INT 12
9903: NEG
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: LD_OWVAR 67
9915: ARRAY
9916: PPUSH
9917: CALL 44267 0 1
// ape := CreateHuman ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: CALL_OW 44
9930: ST_TO_ADDR
// if i = r then
9931: LD_VAR 0 2
9935: PUSH
9936: LD_VAR 0 4
9940: EQUAL
9941: IFFALSE 9955
// SetTag ( i , tApeRadio ) ;
9943: LD_VAR 0 2
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_INT 66
9962: PPUSH
9963: LD_INT 92
9965: PPUSH
9966: LD_INT 3
9968: PPUSH
9969: LD_INT 0
9971: PPUSH
9972: CALL_OW 50
// end ;
9976: GO 9886
9978: POP
9979: POP
// end ;
9980: LD_VAR 0 1
9984: RET
// export function MoveToHill ; begin
9985: LD_INT 0
9987: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
9988: LD_EXP 23
9992: PPUSH
9993: LD_INT 65
9995: PPUSH
9996: LD_INT 59
9998: PPUSH
9999: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10003: LD_EXP 23
10007: PPUSH
10008: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10012: LD_EXP 24
10016: PPUSH
10017: LD_INT 65
10019: PPUSH
10020: LD_INT 58
10022: PPUSH
10023: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10027: LD_EXP 24
10031: PPUSH
10032: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10036: LD_EXP 25
10040: PPUSH
10041: LD_INT 64
10043: PPUSH
10044: LD_INT 57
10046: PPUSH
10047: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10051: LD_EXP 25
10055: PPUSH
10056: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10060: LD_EXP 26
10064: PPUSH
10065: LD_INT 64
10067: PPUSH
10068: LD_INT 56
10070: PPUSH
10071: CALL_OW 111
// AddComCrawl ( Balei ) ;
10075: LD_EXP 26
10079: PPUSH
10080: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10084: LD_EXP 27
10088: PPUSH
10089: LD_INT 63
10091: PPUSH
10092: LD_INT 55
10094: PPUSH
10095: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10099: LD_EXP 27
10103: PPUSH
10104: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10108: LD_EXP 28
10112: PPUSH
10113: LD_INT 66
10115: PPUSH
10116: LD_INT 58
10118: PPUSH
10119: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10123: LD_EXP 28
10127: PPUSH
10128: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
10132: LD_EXP 4
10136: PUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 302
10146: AND
10147: IFFALSE 10173
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10149: LD_EXP 30
10153: PPUSH
10154: LD_INT 63
10156: PPUSH
10157: LD_INT 54
10159: PPUSH
10160: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10164: LD_EXP 30
10168: PPUSH
10169: CALL_OW 197
// end ; end ; end_of_file
10173: LD_VAR 0 1
10177: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
// if exist_mode then
10182: LD_VAR 0 2
10186: IFFALSE 10232
// begin unit := CreateCharacter ( prefix & ident ) ;
10188: LD_ADDR_VAR 0 5
10192: PUSH
10193: LD_VAR 0 3
10197: PUSH
10198: LD_VAR 0 1
10202: STR
10203: PPUSH
10204: CALL_OW 34
10208: ST_TO_ADDR
// if unit then
10209: LD_VAR 0 5
10213: IFFALSE 10230
// DeleteCharacters ( prefix & ident ) ;
10215: LD_VAR 0 3
10219: PUSH
10220: LD_VAR 0 1
10224: STR
10225: PPUSH
10226: CALL_OW 40
// end else
10230: GO 10247
// unit := NewCharacter ( ident ) ;
10232: LD_ADDR_VAR 0 5
10236: PUSH
10237: LD_VAR 0 1
10241: PPUSH
10242: CALL_OW 25
10246: ST_TO_ADDR
// result := unit ;
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: LD_VAR 0 5
10256: ST_TO_ADDR
// end ;
10257: LD_VAR 0 4
10261: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10262: LD_INT 0
10264: PPUSH
10265: PPUSH
// if exist_mode then
10266: LD_VAR 0 2
10270: IFFALSE 10295
// unit := CreateCharacter ( prefix & ident ) else
10272: LD_ADDR_VAR 0 5
10276: PUSH
10277: LD_VAR 0 3
10281: PUSH
10282: LD_VAR 0 1
10286: STR
10287: PPUSH
10288: CALL_OW 34
10292: ST_TO_ADDR
10293: GO 10310
// unit := NewCharacter ( ident ) ;
10295: LD_ADDR_VAR 0 5
10299: PUSH
10300: LD_VAR 0 1
10304: PPUSH
10305: CALL_OW 25
10309: ST_TO_ADDR
// result := unit ;
10310: LD_ADDR_VAR 0 4
10314: PUSH
10315: LD_VAR 0 5
10319: ST_TO_ADDR
// end ;
10320: LD_VAR 0 4
10324: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10325: LD_INT 0
10327: PPUSH
10328: PPUSH
// if not side or not nation then
10329: LD_VAR 0 1
10333: NOT
10334: PUSH
10335: LD_VAR 0 2
10339: NOT
10340: OR
10341: IFFALSE 10345
// exit ;
10343: GO 11113
// case nation of nation_american :
10345: LD_VAR 0 2
10349: PUSH
10350: LD_INT 1
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10572
10358: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10359: LD_ADDR_VAR 0 4
10363: PUSH
10364: LD_INT 35
10366: PUSH
10367: LD_INT 45
10369: PUSH
10370: LD_INT 46
10372: PUSH
10373: LD_INT 47
10375: PUSH
10376: LD_INT 82
10378: PUSH
10379: LD_INT 83
10381: PUSH
10382: LD_INT 84
10384: PUSH
10385: LD_INT 85
10387: PUSH
10388: LD_INT 86
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: LD_INT 2
10396: PUSH
10397: LD_INT 6
10399: PUSH
10400: LD_INT 15
10402: PUSH
10403: LD_INT 16
10405: PUSH
10406: LD_INT 7
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 13
10414: PUSH
10415: LD_INT 10
10417: PUSH
10418: LD_INT 14
10420: PUSH
10421: LD_INT 20
10423: PUSH
10424: LD_INT 21
10426: PUSH
10427: LD_INT 22
10429: PUSH
10430: LD_INT 25
10432: PUSH
10433: LD_INT 32
10435: PUSH
10436: LD_INT 27
10438: PUSH
10439: LD_INT 36
10441: PUSH
10442: LD_INT 69
10444: PUSH
10445: LD_INT 39
10447: PUSH
10448: LD_INT 34
10450: PUSH
10451: LD_INT 40
10453: PUSH
10454: LD_INT 48
10456: PUSH
10457: LD_INT 49
10459: PUSH
10460: LD_INT 50
10462: PUSH
10463: LD_INT 51
10465: PUSH
10466: LD_INT 52
10468: PUSH
10469: LD_INT 53
10471: PUSH
10472: LD_INT 54
10474: PUSH
10475: LD_INT 55
10477: PUSH
10478: LD_INT 56
10480: PUSH
10481: LD_INT 57
10483: PUSH
10484: LD_INT 58
10486: PUSH
10487: LD_INT 59
10489: PUSH
10490: LD_INT 60
10492: PUSH
10493: LD_INT 61
10495: PUSH
10496: LD_INT 62
10498: PUSH
10499: LD_INT 80
10501: PUSH
10502: LD_INT 82
10504: PUSH
10505: LD_INT 83
10507: PUSH
10508: LD_INT 84
10510: PUSH
10511: LD_INT 85
10513: PUSH
10514: LD_INT 86
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: ST_TO_ADDR
10570: GO 11037
10572: LD_INT 2
10574: DOUBLE
10575: EQUAL
10576: IFTRUE 10580
10578: GO 10806
10580: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10581: LD_ADDR_VAR 0 4
10585: PUSH
10586: LD_INT 35
10588: PUSH
10589: LD_INT 45
10591: PUSH
10592: LD_INT 46
10594: PUSH
10595: LD_INT 47
10597: PUSH
10598: LD_INT 82
10600: PUSH
10601: LD_INT 83
10603: PUSH
10604: LD_INT 84
10606: PUSH
10607: LD_INT 85
10609: PUSH
10610: LD_INT 87
10612: PUSH
10613: LD_INT 70
10615: PUSH
10616: LD_INT 1
10618: PUSH
10619: LD_INT 11
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: LD_INT 6
10633: PUSH
10634: LD_INT 15
10636: PUSH
10637: LD_INT 18
10639: PUSH
10640: LD_INT 7
10642: PUSH
10643: LD_INT 17
10645: PUSH
10646: LD_INT 8
10648: PUSH
10649: LD_INT 20
10651: PUSH
10652: LD_INT 21
10654: PUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 72
10660: PUSH
10661: LD_INT 26
10663: PUSH
10664: LD_INT 69
10666: PUSH
10667: LD_INT 39
10669: PUSH
10670: LD_INT 40
10672: PUSH
10673: LD_INT 41
10675: PUSH
10676: LD_INT 42
10678: PUSH
10679: LD_INT 43
10681: PUSH
10682: LD_INT 48
10684: PUSH
10685: LD_INT 49
10687: PUSH
10688: LD_INT 50
10690: PUSH
10691: LD_INT 51
10693: PUSH
10694: LD_INT 52
10696: PUSH
10697: LD_INT 53
10699: PUSH
10700: LD_INT 54
10702: PUSH
10703: LD_INT 55
10705: PUSH
10706: LD_INT 56
10708: PUSH
10709: LD_INT 60
10711: PUSH
10712: LD_INT 61
10714: PUSH
10715: LD_INT 62
10717: PUSH
10718: LD_INT 66
10720: PUSH
10721: LD_INT 67
10723: PUSH
10724: LD_INT 68
10726: PUSH
10727: LD_INT 81
10729: PUSH
10730: LD_INT 82
10732: PUSH
10733: LD_INT 83
10735: PUSH
10736: LD_INT 84
10738: PUSH
10739: LD_INT 85
10741: PUSH
10742: LD_INT 87
10744: PUSH
10745: LD_INT 88
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: ST_TO_ADDR
10804: GO 11037
10806: LD_INT 3
10808: DOUBLE
10809: EQUAL
10810: IFTRUE 10814
10812: GO 11036
10814: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10815: LD_ADDR_VAR 0 4
10819: PUSH
10820: LD_INT 46
10822: PUSH
10823: LD_INT 47
10825: PUSH
10826: LD_INT 1
10828: PUSH
10829: LD_INT 2
10831: PUSH
10832: LD_INT 82
10834: PUSH
10835: LD_INT 83
10837: PUSH
10838: LD_INT 84
10840: PUSH
10841: LD_INT 85
10843: PUSH
10844: LD_INT 86
10846: PUSH
10847: LD_INT 11
10849: PUSH
10850: LD_INT 9
10852: PUSH
10853: LD_INT 20
10855: PUSH
10856: LD_INT 19
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 24
10864: PUSH
10865: LD_INT 22
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 28
10873: PUSH
10874: LD_INT 29
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 31
10882: PUSH
10883: LD_INT 37
10885: PUSH
10886: LD_INT 38
10888: PUSH
10889: LD_INT 32
10891: PUSH
10892: LD_INT 27
10894: PUSH
10895: LD_INT 33
10897: PUSH
10898: LD_INT 69
10900: PUSH
10901: LD_INT 39
10903: PUSH
10904: LD_INT 34
10906: PUSH
10907: LD_INT 40
10909: PUSH
10910: LD_INT 71
10912: PUSH
10913: LD_INT 23
10915: PUSH
10916: LD_INT 44
10918: PUSH
10919: LD_INT 48
10921: PUSH
10922: LD_INT 49
10924: PUSH
10925: LD_INT 50
10927: PUSH
10928: LD_INT 51
10930: PUSH
10931: LD_INT 52
10933: PUSH
10934: LD_INT 53
10936: PUSH
10937: LD_INT 54
10939: PUSH
10940: LD_INT 55
10942: PUSH
10943: LD_INT 56
10945: PUSH
10946: LD_INT 57
10948: PUSH
10949: LD_INT 58
10951: PUSH
10952: LD_INT 59
10954: PUSH
10955: LD_INT 63
10957: PUSH
10958: LD_INT 64
10960: PUSH
10961: LD_INT 65
10963: PUSH
10964: LD_INT 82
10966: PUSH
10967: LD_INT 83
10969: PUSH
10970: LD_INT 84
10972: PUSH
10973: LD_INT 85
10975: PUSH
10976: LD_INT 86
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: ST_TO_ADDR
11034: GO 11037
11036: POP
// if state > - 1 and state < 3 then
11037: LD_VAR 0 3
11041: PUSH
11042: LD_INT 1
11044: NEG
11045: GREATER
11046: PUSH
11047: LD_VAR 0 3
11051: PUSH
11052: LD_INT 3
11054: LESS
11055: AND
11056: IFFALSE 11113
// for i in result do
11058: LD_ADDR_VAR 0 5
11062: PUSH
11063: LD_VAR 0 4
11067: PUSH
11068: FOR_IN
11069: IFFALSE 11111
// if GetTech ( i , side ) <> state then
11071: LD_VAR 0 5
11075: PPUSH
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL_OW 321
11085: PUSH
11086: LD_VAR 0 3
11090: NONEQUAL
11091: IFFALSE 11109
// result := result diff i ;
11093: LD_ADDR_VAR 0 4
11097: PUSH
11098: LD_VAR 0 4
11102: PUSH
11103: LD_VAR 0 5
11107: DIFF
11108: ST_TO_ADDR
11109: GO 11068
11111: POP
11112: POP
// end ;
11113: LD_VAR 0 4
11117: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11118: LD_INT 0
11120: PPUSH
11121: PPUSH
11122: PPUSH
// result := true ;
11123: LD_ADDR_VAR 0 3
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11131: LD_ADDR_VAR 0 5
11135: PUSH
11136: LD_VAR 0 2
11140: PPUSH
11141: CALL_OW 480
11145: ST_TO_ADDR
// if not tmp then
11146: LD_VAR 0 5
11150: NOT
11151: IFFALSE 11155
// exit ;
11153: GO 11204
// for i in tmp do
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: LD_VAR 0 5
11164: PUSH
11165: FOR_IN
11166: IFFALSE 11202
// if GetTech ( i , side ) <> state_researched then
11168: LD_VAR 0 4
11172: PPUSH
11173: LD_VAR 0 1
11177: PPUSH
11178: CALL_OW 321
11182: PUSH
11183: LD_INT 2
11185: NONEQUAL
11186: IFFALSE 11200
// begin result := false ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// exit ;
11196: POP
11197: POP
11198: GO 11204
// end ;
11200: GO 11165
11202: POP
11203: POP
// end ;
11204: LD_VAR 0 3
11208: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11209: LD_INT 0
11211: PPUSH
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
11221: PPUSH
11222: PPUSH
11223: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11224: LD_VAR 0 1
11228: NOT
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 257
11239: PUSH
11240: LD_INT 9
11242: NONEQUAL
11243: OR
11244: IFFALSE 11248
// exit ;
11246: GO 11821
// side := GetSide ( unit ) ;
11248: LD_ADDR_VAR 0 9
11252: PUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 255
11262: ST_TO_ADDR
// tech_space := tech_spacanom ;
11263: LD_ADDR_VAR 0 12
11267: PUSH
11268: LD_INT 29
11270: ST_TO_ADDR
// tech_time := tech_taurad ;
11271: LD_ADDR_VAR 0 13
11275: PUSH
11276: LD_INT 28
11278: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11279: LD_ADDR_VAR 0 11
11283: PUSH
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL_OW 310
11293: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11294: LD_VAR 0 11
11298: PPUSH
11299: CALL_OW 247
11303: PUSH
11304: LD_INT 2
11306: EQUAL
11307: IFFALSE 11311
// exit ;
11309: GO 11821
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11311: LD_ADDR_VAR 0 8
11315: PUSH
11316: LD_INT 81
11318: PUSH
11319: LD_VAR 0 9
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 3
11330: PUSH
11331: LD_INT 21
11333: PUSH
11334: LD_INT 3
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PPUSH
11349: CALL_OW 69
11353: ST_TO_ADDR
// if not tmp then
11354: LD_VAR 0 8
11358: NOT
11359: IFFALSE 11363
// exit ;
11361: GO 11821
// if in_unit then
11363: LD_VAR 0 11
11367: IFFALSE 11391
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11369: LD_ADDR_VAR 0 10
11373: PUSH
11374: LD_VAR 0 8
11378: PPUSH
11379: LD_VAR 0 11
11383: PPUSH
11384: CALL_OW 74
11388: ST_TO_ADDR
11389: GO 11411
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11391: LD_ADDR_VAR 0 10
11395: PUSH
11396: LD_VAR 0 8
11400: PPUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: CALL_OW 74
11410: ST_TO_ADDR
// if not enemy then
11411: LD_VAR 0 10
11415: NOT
11416: IFFALSE 11420
// exit ;
11418: GO 11821
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11420: LD_VAR 0 11
11424: PUSH
11425: LD_VAR 0 11
11429: PPUSH
11430: LD_VAR 0 10
11434: PPUSH
11435: CALL_OW 296
11439: PUSH
11440: LD_INT 13
11442: GREATER
11443: AND
11444: PUSH
11445: LD_VAR 0 1
11449: PPUSH
11450: LD_VAR 0 10
11454: PPUSH
11455: CALL_OW 296
11459: PUSH
11460: LD_INT 12
11462: GREATER
11463: OR
11464: IFFALSE 11468
// exit ;
11466: GO 11821
// missile := [ 1 ] ;
11468: LD_ADDR_VAR 0 14
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11479: LD_VAR 0 9
11483: PPUSH
11484: LD_VAR 0 12
11488: PPUSH
11489: CALL_OW 325
11493: IFFALSE 11522
// missile := Replace ( missile , missile + 1 , 2 ) ;
11495: LD_ADDR_VAR 0 14
11499: PUSH
11500: LD_VAR 0 14
11504: PPUSH
11505: LD_VAR 0 14
11509: PUSH
11510: LD_INT 1
11512: PLUS
11513: PPUSH
11514: LD_INT 2
11516: PPUSH
11517: CALL_OW 1
11521: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11522: LD_VAR 0 9
11526: PPUSH
11527: LD_VAR 0 13
11531: PPUSH
11532: CALL_OW 325
11536: PUSH
11537: LD_VAR 0 10
11541: PPUSH
11542: CALL_OW 255
11546: PPUSH
11547: LD_VAR 0 13
11551: PPUSH
11552: CALL_OW 325
11556: NOT
11557: AND
11558: IFFALSE 11587
// missile := Replace ( missile , missile + 1 , 3 ) ;
11560: LD_ADDR_VAR 0 14
11564: PUSH
11565: LD_VAR 0 14
11569: PPUSH
11570: LD_VAR 0 14
11574: PUSH
11575: LD_INT 1
11577: PLUS
11578: PPUSH
11579: LD_INT 3
11581: PPUSH
11582: CALL_OW 1
11586: ST_TO_ADDR
// if missile < 2 then
11587: LD_VAR 0 14
11591: PUSH
11592: LD_INT 2
11594: LESS
11595: IFFALSE 11599
// exit ;
11597: GO 11821
// x := GetX ( enemy ) ;
11599: LD_ADDR_VAR 0 4
11603: PUSH
11604: LD_VAR 0 10
11608: PPUSH
11609: CALL_OW 250
11613: ST_TO_ADDR
// y := GetY ( enemy ) ;
11614: LD_ADDR_VAR 0 5
11618: PUSH
11619: LD_VAR 0 10
11623: PPUSH
11624: CALL_OW 251
11628: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11629: LD_ADDR_VAR 0 6
11633: PUSH
11634: LD_VAR 0 4
11638: PUSH
11639: LD_INT 1
11641: NEG
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 12
11650: PLUS
11651: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11652: LD_ADDR_VAR 0 7
11656: PUSH
11657: LD_VAR 0 5
11661: PUSH
11662: LD_INT 1
11664: NEG
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 12
11673: PLUS
11674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11675: LD_VAR 0 6
11679: PPUSH
11680: LD_VAR 0 7
11684: PPUSH
11685: CALL_OW 488
11689: NOT
11690: IFFALSE 11712
// begin _x := x ;
11692: LD_ADDR_VAR 0 6
11696: PUSH
11697: LD_VAR 0 4
11701: ST_TO_ADDR
// _y := y ;
11702: LD_ADDR_VAR 0 7
11706: PUSH
11707: LD_VAR 0 5
11711: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_INT 1
11719: PPUSH
11720: LD_VAR 0 14
11724: PPUSH
11725: CALL_OW 12
11729: ST_TO_ADDR
// case i of 1 :
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 1
11737: DOUBLE
11738: EQUAL
11739: IFTRUE 11743
11741: GO 11760
11743: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11744: LD_VAR 0 1
11748: PPUSH
11749: LD_VAR 0 10
11753: PPUSH
11754: CALL_OW 115
11758: GO 11821
11760: LD_INT 2
11762: DOUBLE
11763: EQUAL
11764: IFTRUE 11768
11766: GO 11790
11768: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_VAR 0 6
11778: PPUSH
11779: LD_VAR 0 7
11783: PPUSH
11784: CALL_OW 153
11788: GO 11821
11790: LD_INT 3
11792: DOUBLE
11793: EQUAL
11794: IFTRUE 11798
11796: GO 11820
11798: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11799: LD_VAR 0 1
11803: PPUSH
11804: LD_VAR 0 6
11808: PPUSH
11809: LD_VAR 0 7
11813: PPUSH
11814: CALL_OW 154
11818: GO 11821
11820: POP
// end ;
11821: LD_VAR 0 2
11825: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
// if not unit or not building then
11834: LD_VAR 0 1
11838: NOT
11839: PUSH
11840: LD_VAR 0 2
11844: NOT
11845: OR
11846: IFFALSE 11850
// exit ;
11848: GO 12008
// x := GetX ( building ) ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_VAR 0 2
11859: PPUSH
11860: CALL_OW 250
11864: ST_TO_ADDR
// y := GetY ( building ) ;
11865: LD_ADDR_VAR 0 6
11869: PUSH
11870: LD_VAR 0 2
11874: PPUSH
11875: CALL_OW 251
11879: ST_TO_ADDR
// for i := 0 to 5 do
11880: LD_ADDR_VAR 0 4
11884: PUSH
11885: DOUBLE
11886: LD_INT 0
11888: DEC
11889: ST_TO_ADDR
11890: LD_INT 5
11892: PUSH
11893: FOR_TO
11894: IFFALSE 12006
// begin _x := ShiftX ( x , i , 3 ) ;
11896: LD_ADDR_VAR 0 7
11900: PUSH
11901: LD_VAR 0 5
11905: PPUSH
11906: LD_VAR 0 4
11910: PPUSH
11911: LD_INT 3
11913: PPUSH
11914: CALL_OW 272
11918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11919: LD_ADDR_VAR 0 8
11923: PUSH
11924: LD_VAR 0 6
11928: PPUSH
11929: LD_VAR 0 4
11933: PPUSH
11934: LD_INT 3
11936: PPUSH
11937: CALL_OW 273
11941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11942: LD_VAR 0 7
11946: PPUSH
11947: LD_VAR 0 8
11951: PPUSH
11952: CALL_OW 488
11956: NOT
11957: IFFALSE 11961
// continue ;
11959: GO 11893
// if HexInfo ( _x , _y ) = 0 then
11961: LD_VAR 0 7
11965: PPUSH
11966: LD_VAR 0 8
11970: PPUSH
11971: CALL_OW 428
11975: PUSH
11976: LD_INT 0
11978: EQUAL
11979: IFFALSE 12004
// begin ComMoveXY ( unit , _x , _y ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_VAR 0 7
11990: PPUSH
11991: LD_VAR 0 8
11995: PPUSH
11996: CALL_OW 111
// exit ;
12000: POP
12001: POP
12002: GO 12008
// end ; end ;
12004: GO 11893
12006: POP
12007: POP
// end ;
12008: LD_VAR 0 3
12012: RET
// export function ScanBase ( side , base_area ) ; begin
12013: LD_INT 0
12015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: LD_INT 81
12028: PUSH
12029: LD_VAR 0 1
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 70
12042: ST_TO_ADDR
// end ;
12043: LD_VAR 0 3
12047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12048: LD_INT 0
12050: PPUSH
12051: PPUSH
12052: PPUSH
12053: PPUSH
// result := false ;
12054: LD_ADDR_VAR 0 2
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// side := GetSide ( unit ) ;
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 255
12076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 248
12091: ST_TO_ADDR
// case nat of 1 :
12092: LD_VAR 0 4
12096: PUSH
12097: LD_INT 1
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12116
12105: POP
// tech := tech_lassight ; 2 :
12106: LD_ADDR_VAR 0 5
12110: PUSH
12111: LD_INT 12
12113: ST_TO_ADDR
12114: GO 12155
12116: LD_INT 2
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12135
12124: POP
// tech := tech_mortar ; 3 :
12125: LD_ADDR_VAR 0 5
12129: PUSH
12130: LD_INT 41
12132: ST_TO_ADDR
12133: GO 12155
12135: LD_INT 3
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12154
12143: POP
// tech := tech_bazooka ; end ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_INT 44
12151: ST_TO_ADDR
12152: GO 12155
12154: POP
// if Researched ( side , tech ) then
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_VAR 0 5
12164: PPUSH
12165: CALL_OW 325
12169: IFFALSE 12196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12171: LD_ADDR_VAR 0 2
12175: PUSH
12176: LD_INT 5
12178: PUSH
12179: LD_INT 8
12181: PUSH
12182: LD_INT 9
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_VAR 0 4
12194: ARRAY
12195: ST_TO_ADDR
// end ;
12196: LD_VAR 0 2
12200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12201: LD_INT 0
12203: PPUSH
12204: PPUSH
12205: PPUSH
// if not mines then
12206: LD_VAR 0 2
12210: NOT
12211: IFFALSE 12215
// exit ;
12213: GO 12359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12215: LD_ADDR_VAR 0 5
12219: PUSH
12220: LD_INT 81
12222: PUSH
12223: LD_VAR 0 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 3
12234: PUSH
12235: LD_INT 21
12237: PUSH
12238: LD_INT 3
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 69
12257: ST_TO_ADDR
// for i in mines do
12258: LD_ADDR_VAR 0 4
12262: PUSH
12263: LD_VAR 0 2
12267: PUSH
12268: FOR_IN
12269: IFFALSE 12357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12271: LD_VAR 0 4
12275: PUSH
12276: LD_INT 1
12278: ARRAY
12279: PPUSH
12280: LD_VAR 0 4
12284: PUSH
12285: LD_INT 2
12287: ARRAY
12288: PPUSH
12289: CALL_OW 458
12293: NOT
12294: IFFALSE 12298
// continue ;
12296: GO 12268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12298: LD_VAR 0 4
12302: PUSH
12303: LD_INT 1
12305: ARRAY
12306: PPUSH
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 2
12314: ARRAY
12315: PPUSH
12316: CALL_OW 428
12320: PUSH
12321: LD_VAR 0 5
12325: IN
12326: IFFALSE 12355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12328: LD_VAR 0 4
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: PPUSH
12337: LD_VAR 0 4
12341: PUSH
12342: LD_INT 2
12344: ARRAY
12345: PPUSH
12346: LD_VAR 0 1
12350: PPUSH
12351: CALL_OW 456
// end ;
12355: GO 12268
12357: POP
12358: POP
// end ;
12359: LD_VAR 0 3
12363: RET
// export function Count ( array ) ; begin
12364: LD_INT 0
12366: PPUSH
// result := array + 0 ;
12367: LD_ADDR_VAR 0 2
12371: PUSH
12372: LD_VAR 0 1
12376: PUSH
12377: LD_INT 0
12379: PLUS
12380: ST_TO_ADDR
// end ;
12381: LD_VAR 0 2
12385: RET
// export function IsEmpty ( building ) ; begin
12386: LD_INT 0
12388: PPUSH
// if not building then
12389: LD_VAR 0 1
12393: NOT
12394: IFFALSE 12398
// exit ;
12396: GO 12441
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_VAR 0 1
12407: PUSH
12408: LD_INT 22
12410: PUSH
12411: LD_VAR 0 1
12415: PPUSH
12416: CALL_OW 255
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 58
12427: PUSH
12428: EMPTY
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 69
12439: IN
12440: ST_TO_ADDR
// end ;
12441: LD_VAR 0 2
12445: RET
// export function IsNotFull ( building ) ; var places ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// if not building then
12450: LD_VAR 0 1
12454: NOT
12455: IFFALSE 12459
// exit ;
12457: GO 12487
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12459: LD_ADDR_VAR 0 2
12463: PUSH
12464: LD_VAR 0 1
12468: PPUSH
12469: LD_INT 3
12471: PUSH
12472: LD_INT 62
12474: PUSH
12475: EMPTY
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: ST_TO_ADDR
// end ;
12487: LD_VAR 0 2
12491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12492: LD_INT 0
12494: PPUSH
12495: PPUSH
12496: PPUSH
12497: PPUSH
// tmp := [ ] ;
12498: LD_ADDR_VAR 0 3
12502: PUSH
12503: EMPTY
12504: ST_TO_ADDR
// list := [ ] ;
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: EMPTY
12511: ST_TO_ADDR
// for i = 16 to 25 do
12512: LD_ADDR_VAR 0 4
12516: PUSH
12517: DOUBLE
12518: LD_INT 16
12520: DEC
12521: ST_TO_ADDR
12522: LD_INT 25
12524: PUSH
12525: FOR_TO
12526: IFFALSE 12599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12528: LD_ADDR_VAR 0 3
12532: PUSH
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL_OW 255
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 91
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 6
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_VAR 0 4
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: ADD
12596: ST_TO_ADDR
12597: GO 12525
12599: POP
12600: POP
// for i = 1 to tmp do
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: DOUBLE
12607: LD_INT 1
12609: DEC
12610: ST_TO_ADDR
12611: LD_VAR 0 3
12615: PUSH
12616: FOR_TO
12617: IFFALSE 12705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12619: LD_ADDR_VAR 0 5
12623: PUSH
12624: LD_VAR 0 5
12628: PUSH
12629: LD_VAR 0 3
12633: PUSH
12634: LD_VAR 0 4
12638: ARRAY
12639: PPUSH
12640: CALL_OW 266
12644: PUSH
12645: LD_VAR 0 3
12649: PUSH
12650: LD_VAR 0 4
12654: ARRAY
12655: PPUSH
12656: CALL_OW 250
12660: PUSH
12661: LD_VAR 0 3
12665: PUSH
12666: LD_VAR 0 4
12670: ARRAY
12671: PPUSH
12672: CALL_OW 251
12676: PUSH
12677: LD_VAR 0 3
12681: PUSH
12682: LD_VAR 0 4
12686: ARRAY
12687: PPUSH
12688: CALL_OW 254
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: ADD
12702: ST_TO_ADDR
12703: GO 12616
12705: POP
12706: POP
// result := list ;
12707: LD_ADDR_VAR 0 2
12711: PUSH
12712: LD_VAR 0 5
12716: ST_TO_ADDR
// end ;
12717: LD_VAR 0 2
12721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
12726: PPUSH
12727: PPUSH
12728: PPUSH
12729: PPUSH
12730: PPUSH
// if not factory then
12731: LD_VAR 0 1
12735: NOT
12736: IFFALSE 12740
// exit ;
12738: GO 13333
// if control = control_apeman then
12740: LD_VAR 0 4
12744: PUSH
12745: LD_INT 5
12747: EQUAL
12748: IFFALSE 12857
// begin tmp := UnitsInside ( factory ) ;
12750: LD_ADDR_VAR 0 8
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 313
12764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12765: LD_VAR 0 8
12769: PPUSH
12770: LD_INT 25
12772: PUSH
12773: LD_INT 12
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 72
12784: NOT
12785: IFFALSE 12795
// control := control_manual ;
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: LD_INT 1
12794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12795: LD_ADDR_VAR 0 8
12799: PUSH
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL 12492 0 1
12809: ST_TO_ADDR
// if tmp then
12810: LD_VAR 0 8
12814: IFFALSE 12857
// begin for i in tmp do
12816: LD_ADDR_VAR 0 7
12820: PUSH
12821: LD_VAR 0 8
12825: PUSH
12826: FOR_IN
12827: IFFALSE 12855
// if i [ 1 ] = b_ext_radio then
12829: LD_VAR 0 7
12833: PUSH
12834: LD_INT 1
12836: ARRAY
12837: PUSH
12838: LD_INT 22
12840: EQUAL
12841: IFFALSE 12853
// begin control := control_remote ;
12843: LD_ADDR_VAR 0 4
12847: PUSH
12848: LD_INT 2
12850: ST_TO_ADDR
// break ;
12851: GO 12855
// end ;
12853: GO 12826
12855: POP
12856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_VAR 0 2
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_VAR 0 4
12876: PPUSH
12877: LD_VAR 0 5
12881: PPUSH
12882: CALL_OW 448
12886: IFFALSE 12921
// begin result := [ chassis , engine , control , weapon ] ;
12888: LD_ADDR_VAR 0 6
12892: PUSH
12893: LD_VAR 0 2
12897: PUSH
12898: LD_VAR 0 3
12902: PUSH
12903: LD_VAR 0 4
12907: PUSH
12908: LD_VAR 0 5
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: ST_TO_ADDR
// exit ;
12919: GO 13333
// end ; _chassis := AvailableChassisList ( factory ) ;
12921: LD_ADDR_VAR 0 9
12925: PUSH
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 475
12935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12936: LD_ADDR_VAR 0 11
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 476
12950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12951: LD_ADDR_VAR 0 12
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 477
12965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12966: LD_ADDR_VAR 0 10
12970: PUSH
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 478
12980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12981: LD_VAR 0 9
12985: NOT
12986: PUSH
12987: LD_VAR 0 11
12991: NOT
12992: OR
12993: PUSH
12994: LD_VAR 0 12
12998: NOT
12999: OR
13000: PUSH
13001: LD_VAR 0 10
13005: NOT
13006: OR
13007: IFFALSE 13042
// begin result := [ chassis , engine , control , weapon ] ;
13009: LD_ADDR_VAR 0 6
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: LD_VAR 0 3
13023: PUSH
13024: LD_VAR 0 4
13028: PUSH
13029: LD_VAR 0 5
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: ST_TO_ADDR
// exit ;
13040: GO 13333
// end ; if not chassis in _chassis then
13042: LD_VAR 0 2
13046: PUSH
13047: LD_VAR 0 9
13051: IN
13052: NOT
13053: IFFALSE 13079
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_VAR 0 9
13064: PUSH
13065: LD_INT 1
13067: PPUSH
13068: LD_VAR 0 9
13072: PPUSH
13073: CALL_OW 12
13077: ARRAY
13078: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13079: LD_VAR 0 2
13083: PPUSH
13084: LD_VAR 0 3
13088: PPUSH
13089: CALL 13338 0 2
13093: NOT
13094: IFFALSE 13153
// repeat engine := _engine [ 1 ] ;
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: LD_VAR 0 11
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13110: LD_ADDR_VAR 0 11
13114: PUSH
13115: LD_VAR 0 11
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 3
13127: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13128: LD_VAR 0 2
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: CALL 13338 0 2
13142: PUSH
13143: LD_VAR 0 11
13147: PUSH
13148: EMPTY
13149: EQUAL
13150: OR
13151: IFFALSE 13096
// if not control in _control then
13153: LD_VAR 0 4
13157: PUSH
13158: LD_VAR 0 12
13162: IN
13163: NOT
13164: IFFALSE 13190
// control := _control [ rand ( 1 , _control ) ] ;
13166: LD_ADDR_VAR 0 4
13170: PUSH
13171: LD_VAR 0 12
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_VAR 0 12
13183: PPUSH
13184: CALL_OW 12
13188: ARRAY
13189: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13190: LD_VAR 0 2
13194: PPUSH
13195: LD_VAR 0 5
13199: PPUSH
13200: CALL 13558 0 2
13204: NOT
13205: IFFALSE 13264
// repeat weapon := _weapon [ 1 ] ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: LD_VAR 0 10
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13221: LD_ADDR_VAR 0 10
13225: PUSH
13226: LD_VAR 0 10
13230: PPUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 3
13238: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_VAR 0 5
13248: PPUSH
13249: CALL 13558 0 2
13253: PUSH
13254: LD_VAR 0 10
13258: PUSH
13259: EMPTY
13260: EQUAL
13261: OR
13262: IFFALSE 13207
// result := [ ] ;
13264: LD_ADDR_VAR 0 6
13268: PUSH
13269: EMPTY
13270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13271: LD_VAR 0 1
13275: PPUSH
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_VAR 0 5
13295: PPUSH
13296: CALL_OW 448
13300: IFFALSE 13333
// result := [ chassis , engine , control , weapon ] ;
13302: LD_ADDR_VAR 0 6
13306: PUSH
13307: LD_VAR 0 2
13311: PUSH
13312: LD_VAR 0 3
13316: PUSH
13317: LD_VAR 0 4
13321: PUSH
13322: LD_VAR 0 5
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: ST_TO_ADDR
// end ;
13333: LD_VAR 0 6
13337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13338: LD_INT 0
13340: PPUSH
// if not chassis or not engine then
13341: LD_VAR 0 1
13345: NOT
13346: PUSH
13347: LD_VAR 0 2
13351: NOT
13352: OR
13353: IFFALSE 13357
// exit ;
13355: GO 13553
// case engine of engine_solar :
13357: LD_VAR 0 2
13361: PUSH
13362: LD_INT 2
13364: DOUBLE
13365: EQUAL
13366: IFTRUE 13370
13368: GO 13408
13370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13371: LD_ADDR_VAR 0 3
13375: PUSH
13376: LD_INT 11
13378: PUSH
13379: LD_INT 12
13381: PUSH
13382: LD_INT 13
13384: PUSH
13385: LD_INT 14
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 13537
13408: LD_INT 1
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13478
13416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: LD_INT 11
13424: PUSH
13425: LD_INT 12
13427: PUSH
13428: LD_INT 13
13430: PUSH
13431: LD_INT 14
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: LD_INT 2
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: LD_INT 4
13445: PUSH
13446: LD_INT 5
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 23
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_INT 24
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: ST_TO_ADDR
13476: GO 13537
13478: LD_INT 3
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13536
13486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_INT 13
13494: PUSH
13495: LD_INT 14
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_INT 3
13503: PUSH
13504: LD_INT 4
13506: PUSH
13507: LD_INT 5
13509: PUSH
13510: LD_INT 21
13512: PUSH
13513: LD_INT 22
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 24
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: ST_TO_ADDR
13534: GO 13537
13536: POP
// result := ( chassis in result ) ;
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: LD_VAR 0 1
13546: PUSH
13547: LD_VAR 0 3
13551: IN
13552: ST_TO_ADDR
// end ;
13553: LD_VAR 0 3
13557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13558: LD_INT 0
13560: PPUSH
// if not chassis or not weapon then
13561: LD_VAR 0 1
13565: NOT
13566: PUSH
13567: LD_VAR 0 2
13571: NOT
13572: OR
13573: IFFALSE 13577
// exit ;
13575: GO 14637
// case weapon of us_machine_gun :
13577: LD_VAR 0 2
13581: PUSH
13582: LD_INT 2
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13590
13588: GO 13620
13590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13591: LD_ADDR_VAR 0 3
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: LD_INT 2
13601: PUSH
13602: LD_INT 3
13604: PUSH
13605: LD_INT 4
13607: PUSH
13608: LD_INT 5
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: ST_TO_ADDR
13618: GO 14621
13620: LD_INT 3
13622: DOUBLE
13623: EQUAL
13624: IFTRUE 13628
13626: GO 13658
13628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13629: LD_ADDR_VAR 0 3
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: LD_INT 2
13639: PUSH
13640: LD_INT 3
13642: PUSH
13643: LD_INT 4
13645: PUSH
13646: LD_INT 5
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: ST_TO_ADDR
13656: GO 14621
13658: LD_INT 11
13660: DOUBLE
13661: EQUAL
13662: IFTRUE 13666
13664: GO 13696
13666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13667: LD_ADDR_VAR 0 3
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: LD_INT 4
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: ST_TO_ADDR
13694: GO 14621
13696: LD_INT 4
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13730
13704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 14621
13730: LD_INT 5
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13764
13738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: ST_TO_ADDR
13762: GO 14621
13764: LD_INT 9
13766: DOUBLE
13767: EQUAL
13768: IFTRUE 13772
13770: GO 13798
13772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13773: LD_ADDR_VAR 0 3
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: LD_INT 4
13786: PUSH
13787: LD_INT 5
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 14621
13798: LD_INT 7
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13832
13806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 3
13817: PUSH
13818: LD_INT 4
13820: PUSH
13821: LD_INT 5
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: ST_TO_ADDR
13830: GO 14621
13832: LD_INT 12
13834: DOUBLE
13835: EQUAL
13836: IFTRUE 13840
13838: GO 13866
13840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13841: LD_ADDR_VAR 0 3
13845: PUSH
13846: LD_INT 2
13848: PUSH
13849: LD_INT 3
13851: PUSH
13852: LD_INT 4
13854: PUSH
13855: LD_INT 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: ST_TO_ADDR
13864: GO 14621
13866: LD_INT 13
13868: DOUBLE
13869: EQUAL
13870: IFTRUE 13874
13872: GO 13900
13874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: LD_INT 3
13885: PUSH
13886: LD_INT 4
13888: PUSH
13889: LD_INT 5
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: ST_TO_ADDR
13898: GO 14621
13900: LD_INT 14
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13926
13908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13909: LD_ADDR_VAR 0 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: ST_TO_ADDR
13924: GO 14621
13926: LD_INT 6
13928: DOUBLE
13929: EQUAL
13930: IFTRUE 13934
13932: GO 13952
13934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13935: LD_ADDR_VAR 0 3
13939: PUSH
13940: LD_INT 4
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14621
13952: LD_INT 10
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13978
13960: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: LD_INT 5
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 14621
13978: LD_INT 22
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14012
13986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 11
13994: PUSH
13995: LD_INT 12
13997: PUSH
13998: LD_INT 13
14000: PUSH
14001: LD_INT 14
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: ST_TO_ADDR
14010: GO 14621
14012: LD_INT 23
14014: DOUBLE
14015: EQUAL
14016: IFTRUE 14020
14018: GO 14046
14020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14021: LD_ADDR_VAR 0 3
14025: PUSH
14026: LD_INT 11
14028: PUSH
14029: LD_INT 12
14031: PUSH
14032: LD_INT 13
14034: PUSH
14035: LD_INT 14
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: ST_TO_ADDR
14044: GO 14621
14046: LD_INT 24
14048: DOUBLE
14049: EQUAL
14050: IFTRUE 14054
14052: GO 14080
14054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14055: LD_ADDR_VAR 0 3
14059: PUSH
14060: LD_INT 11
14062: PUSH
14063: LD_INT 12
14065: PUSH
14066: LD_INT 13
14068: PUSH
14069: LD_INT 14
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: ST_TO_ADDR
14078: GO 14621
14080: LD_INT 30
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14114
14088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: LD_INT 14
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 14621
14114: LD_INT 25
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14140
14122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_INT 13
14130: PUSH
14131: LD_INT 14
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: ST_TO_ADDR
14138: GO 14621
14140: LD_INT 27
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14166
14148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 13
14156: PUSH
14157: LD_INT 14
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14621
14166: LD_INT 92
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14200
14174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 11
14182: PUSH
14183: LD_INT 12
14185: PUSH
14186: LD_INT 13
14188: PUSH
14189: LD_INT 14
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: ST_TO_ADDR
14198: GO 14621
14200: LD_INT 28
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14226
14208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14209: LD_ADDR_VAR 0 3
14213: PUSH
14214: LD_INT 13
14216: PUSH
14217: LD_INT 14
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
14224: GO 14621
14226: LD_INT 29
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14252
14234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 13
14242: PUSH
14243: LD_INT 14
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: ST_TO_ADDR
14250: GO 14621
14252: LD_INT 31
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14278
14260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 13
14268: PUSH
14269: LD_INT 14
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 14621
14278: LD_INT 26
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14304
14286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14287: LD_ADDR_VAR 0 3
14291: PUSH
14292: LD_INT 13
14294: PUSH
14295: LD_INT 14
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: ST_TO_ADDR
14302: GO 14621
14304: LD_INT 42
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14338
14312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 21
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 23
14326: PUSH
14327: LD_INT 24
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: ST_TO_ADDR
14336: GO 14621
14338: LD_INT 43
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14372
14346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: LD_INT 24
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: ST_TO_ADDR
14370: GO 14621
14372: LD_INT 44
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14406
14380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: LD_INT 21
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 23
14394: PUSH
14395: LD_INT 24
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: ST_TO_ADDR
14404: GO 14621
14406: LD_INT 45
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14440
14414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: ST_TO_ADDR
14438: GO 14621
14440: LD_INT 49
14442: DOUBLE
14443: EQUAL
14444: IFTRUE 14448
14446: GO 14474
14448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 23
14462: PUSH
14463: LD_INT 24
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 14621
14474: LD_INT 51
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14508
14482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_INT 21
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_INT 23
14496: PUSH
14497: LD_INT 24
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: ST_TO_ADDR
14506: GO 14621
14508: LD_INT 52
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14542
14516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_INT 21
14524: PUSH
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 24
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 14621
14542: LD_INT 53
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14568
14550: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_INT 23
14558: PUSH
14559: LD_INT 24
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 14621
14568: LD_INT 46
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14594
14576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_INT 23
14584: PUSH
14585: LD_INT 24
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: ST_TO_ADDR
14592: GO 14621
14594: LD_INT 47
14596: DOUBLE
14597: EQUAL
14598: IFTRUE 14602
14600: GO 14620
14602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14603: LD_ADDR_VAR 0 3
14607: PUSH
14608: LD_INT 23
14610: PUSH
14611: LD_INT 24
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: ST_TO_ADDR
14618: GO 14621
14620: POP
// result := ( chassis in result ) ;
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: LD_VAR 0 1
14630: PUSH
14631: LD_VAR 0 3
14635: IN
14636: ST_TO_ADDR
// end ;
14637: LD_VAR 0 3
14641: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14642: LD_INT 0
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
// result := array ;
14651: LD_ADDR_VAR 0 5
14655: PUSH
14656: LD_VAR 0 1
14660: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14661: LD_VAR 0 1
14665: NOT
14666: PUSH
14667: LD_VAR 0 2
14671: NOT
14672: OR
14673: PUSH
14674: LD_VAR 0 3
14678: NOT
14679: OR
14680: PUSH
14681: LD_VAR 0 2
14685: PUSH
14686: LD_VAR 0 1
14690: GREATER
14691: OR
14692: PUSH
14693: LD_VAR 0 3
14697: PUSH
14698: LD_VAR 0 1
14702: GREATER
14703: OR
14704: IFFALSE 14708
// exit ;
14706: GO 15004
// if direction then
14708: LD_VAR 0 4
14712: IFFALSE 14776
// begin d := 1 ;
14714: LD_ADDR_VAR 0 9
14718: PUSH
14719: LD_INT 1
14721: ST_TO_ADDR
// if i_from > i_to then
14722: LD_VAR 0 2
14726: PUSH
14727: LD_VAR 0 3
14731: GREATER
14732: IFFALSE 14758
// length := ( array - i_from ) + i_to else
14734: LD_ADDR_VAR 0 11
14738: PUSH
14739: LD_VAR 0 1
14743: PUSH
14744: LD_VAR 0 2
14748: MINUS
14749: PUSH
14750: LD_VAR 0 3
14754: PLUS
14755: ST_TO_ADDR
14756: GO 14774
// length := i_to - i_from ;
14758: LD_ADDR_VAR 0 11
14762: PUSH
14763: LD_VAR 0 3
14767: PUSH
14768: LD_VAR 0 2
14772: MINUS
14773: ST_TO_ADDR
// end else
14774: GO 14837
// begin d := - 1 ;
14776: LD_ADDR_VAR 0 9
14780: PUSH
14781: LD_INT 1
14783: NEG
14784: ST_TO_ADDR
// if i_from > i_to then
14785: LD_VAR 0 2
14789: PUSH
14790: LD_VAR 0 3
14794: GREATER
14795: IFFALSE 14815
// length := i_from - i_to else
14797: LD_ADDR_VAR 0 11
14801: PUSH
14802: LD_VAR 0 2
14806: PUSH
14807: LD_VAR 0 3
14811: MINUS
14812: ST_TO_ADDR
14813: GO 14837
// length := ( array - i_to ) + i_from ;
14815: LD_ADDR_VAR 0 11
14819: PUSH
14820: LD_VAR 0 1
14824: PUSH
14825: LD_VAR 0 3
14829: MINUS
14830: PUSH
14831: LD_VAR 0 2
14835: PLUS
14836: ST_TO_ADDR
// end ; if not length then
14837: LD_VAR 0 11
14841: NOT
14842: IFFALSE 14846
// exit ;
14844: GO 15004
// tmp := array ;
14846: LD_ADDR_VAR 0 10
14850: PUSH
14851: LD_VAR 0 1
14855: ST_TO_ADDR
// for i = 1 to length do
14856: LD_ADDR_VAR 0 6
14860: PUSH
14861: DOUBLE
14862: LD_INT 1
14864: DEC
14865: ST_TO_ADDR
14866: LD_VAR 0 11
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14992
// begin for j = 1 to array do
14874: LD_ADDR_VAR 0 7
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_VAR 0 1
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14978
// begin k := j + d ;
14892: LD_ADDR_VAR 0 8
14896: PUSH
14897: LD_VAR 0 7
14901: PUSH
14902: LD_VAR 0 9
14906: PLUS
14907: ST_TO_ADDR
// if k > array then
14908: LD_VAR 0 8
14912: PUSH
14913: LD_VAR 0 1
14917: GREATER
14918: IFFALSE 14928
// k := 1 ;
14920: LD_ADDR_VAR 0 8
14924: PUSH
14925: LD_INT 1
14927: ST_TO_ADDR
// if not k then
14928: LD_VAR 0 8
14932: NOT
14933: IFFALSE 14945
// k := array ;
14935: LD_ADDR_VAR 0 8
14939: PUSH
14940: LD_VAR 0 1
14944: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14945: LD_ADDR_VAR 0 10
14949: PUSH
14950: LD_VAR 0 10
14954: PPUSH
14955: LD_VAR 0 8
14959: PPUSH
14960: LD_VAR 0 1
14964: PUSH
14965: LD_VAR 0 7
14969: ARRAY
14970: PPUSH
14971: CALL_OW 1
14975: ST_TO_ADDR
// end ;
14976: GO 14889
14978: POP
14979: POP
// array := tmp ;
14980: LD_ADDR_VAR 0 1
14984: PUSH
14985: LD_VAR 0 10
14989: ST_TO_ADDR
// end ;
14990: GO 14871
14992: POP
14993: POP
// result := array ;
14994: LD_ADDR_VAR 0 5
14998: PUSH
14999: LD_VAR 0 1
15003: ST_TO_ADDR
// end ;
15004: LD_VAR 0 5
15008: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// result := 0 ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_INT 0
15020: ST_TO_ADDR
// if not array or not value in array then
15021: LD_VAR 0 1
15025: NOT
15026: PUSH
15027: LD_VAR 0 2
15031: PUSH
15032: LD_VAR 0 1
15036: IN
15037: NOT
15038: OR
15039: IFFALSE 15043
// exit ;
15041: GO 15097
// for i = 1 to array do
15043: LD_ADDR_VAR 0 4
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_VAR 0 1
15057: PUSH
15058: FOR_TO
15059: IFFALSE 15095
// if value = array [ i ] then
15061: LD_VAR 0 2
15065: PUSH
15066: LD_VAR 0 1
15070: PUSH
15071: LD_VAR 0 4
15075: ARRAY
15076: EQUAL
15077: IFFALSE 15093
// begin result := i ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_VAR 0 4
15088: ST_TO_ADDR
// exit ;
15089: POP
15090: POP
15091: GO 15097
// end ;
15093: GO 15058
15095: POP
15096: POP
// end ;
15097: LD_VAR 0 3
15101: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15102: LD_INT 0
15104: PPUSH
// vc_chassis := chassis ;
15105: LD_ADDR_OWVAR 37
15109: PUSH
15110: LD_VAR 0 1
15114: ST_TO_ADDR
// vc_engine := engine ;
15115: LD_ADDR_OWVAR 39
15119: PUSH
15120: LD_VAR 0 2
15124: ST_TO_ADDR
// vc_control := control ;
15125: LD_ADDR_OWVAR 38
15129: PUSH
15130: LD_VAR 0 3
15134: ST_TO_ADDR
// vc_weapon := weapon ;
15135: LD_ADDR_OWVAR 40
15139: PUSH
15140: LD_VAR 0 4
15144: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15145: LD_ADDR_OWVAR 41
15149: PUSH
15150: LD_VAR 0 5
15154: ST_TO_ADDR
// end ;
15155: LD_VAR 0 6
15159: RET
// export function WantPlant ( unit ) ; var task ; begin
15160: LD_INT 0
15162: PPUSH
15163: PPUSH
// result := false ;
15164: LD_ADDR_VAR 0 2
15168: PUSH
15169: LD_INT 0
15171: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15172: LD_ADDR_VAR 0 3
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 437
15186: ST_TO_ADDR
// if task then
15187: LD_VAR 0 3
15191: IFFALSE 15219
// if task [ 1 ] [ 1 ] = p then
15193: LD_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PUSH
15206: LD_STRING p
15208: EQUAL
15209: IFFALSE 15219
// result := true ;
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// end ;
15219: LD_VAR 0 2
15223: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15224: LD_INT 0
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
// if pos < 1 then
15230: LD_VAR 0 2
15234: PUSH
15235: LD_INT 1
15237: LESS
15238: IFFALSE 15242
// exit ;
15240: GO 15545
// if pos = 1 then
15242: LD_VAR 0 2
15246: PUSH
15247: LD_INT 1
15249: EQUAL
15250: IFFALSE 15283
// result := Replace ( arr , pos [ 1 ] , value ) else
15252: LD_ADDR_VAR 0 4
15256: PUSH
15257: LD_VAR 0 1
15261: PPUSH
15262: LD_VAR 0 2
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_VAR 0 3
15275: PPUSH
15276: CALL_OW 1
15280: ST_TO_ADDR
15281: GO 15545
// begin tmp := arr ;
15283: LD_ADDR_VAR 0 6
15287: PUSH
15288: LD_VAR 0 1
15292: ST_TO_ADDR
// s_arr := [ tmp ] ;
15293: LD_ADDR_VAR 0 7
15297: PUSH
15298: LD_VAR 0 6
15302: PUSH
15303: EMPTY
15304: LIST
15305: ST_TO_ADDR
// for i = 1 to pos - 1 do
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_VAR 0 2
15320: PUSH
15321: LD_INT 1
15323: MINUS
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15371
// begin tmp := tmp [ pos [ i ] ] ;
15328: LD_ADDR_VAR 0 6
15332: PUSH
15333: LD_VAR 0 6
15337: PUSH
15338: LD_VAR 0 2
15342: PUSH
15343: LD_VAR 0 5
15347: ARRAY
15348: ARRAY
15349: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15350: LD_ADDR_VAR 0 7
15354: PUSH
15355: LD_VAR 0 7
15359: PUSH
15360: LD_VAR 0 6
15364: PUSH
15365: EMPTY
15366: LIST
15367: ADD
15368: ST_TO_ADDR
// end ;
15369: GO 15325
15371: POP
15372: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15373: LD_ADDR_VAR 0 6
15377: PUSH
15378: LD_VAR 0 6
15382: PPUSH
15383: LD_VAR 0 2
15387: PUSH
15388: LD_VAR 0 2
15392: ARRAY
15393: PPUSH
15394: LD_VAR 0 3
15398: PPUSH
15399: CALL_OW 1
15403: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15404: LD_ADDR_VAR 0 7
15408: PUSH
15409: LD_VAR 0 7
15413: PPUSH
15414: LD_VAR 0 7
15418: PPUSH
15419: LD_VAR 0 6
15423: PPUSH
15424: CALL_OW 1
15428: ST_TO_ADDR
// for i = s_arr downto 2 do
15429: LD_ADDR_VAR 0 5
15433: PUSH
15434: DOUBLE
15435: LD_VAR 0 7
15439: INC
15440: ST_TO_ADDR
15441: LD_INT 2
15443: PUSH
15444: FOR_DOWNTO
15445: IFFALSE 15529
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15447: LD_ADDR_VAR 0 6
15451: PUSH
15452: LD_VAR 0 7
15456: PUSH
15457: LD_VAR 0 5
15461: PUSH
15462: LD_INT 1
15464: MINUS
15465: ARRAY
15466: PPUSH
15467: LD_VAR 0 2
15471: PUSH
15472: LD_VAR 0 5
15476: PUSH
15477: LD_INT 1
15479: MINUS
15480: ARRAY
15481: PPUSH
15482: LD_VAR 0 7
15486: PUSH
15487: LD_VAR 0 5
15491: ARRAY
15492: PPUSH
15493: CALL_OW 1
15497: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15498: LD_ADDR_VAR 0 7
15502: PUSH
15503: LD_VAR 0 7
15507: PPUSH
15508: LD_VAR 0 5
15512: PUSH
15513: LD_INT 1
15515: MINUS
15516: PPUSH
15517: LD_VAR 0 6
15521: PPUSH
15522: CALL_OW 1
15526: ST_TO_ADDR
// end ;
15527: GO 15444
15529: POP
15530: POP
// result := s_arr [ 1 ] ;
15531: LD_ADDR_VAR 0 4
15535: PUSH
15536: LD_VAR 0 7
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: ST_TO_ADDR
// end ; end ;
15545: LD_VAR 0 4
15549: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15550: LD_INT 0
15552: PPUSH
15553: PPUSH
// if not list then
15554: LD_VAR 0 1
15558: NOT
15559: IFFALSE 15563
// exit ;
15561: GO 15654
// i := list [ pos1 ] ;
15563: LD_ADDR_VAR 0 5
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: LD_VAR 0 2
15577: ARRAY
15578: ST_TO_ADDR
// if not i then
15579: LD_VAR 0 5
15583: NOT
15584: IFFALSE 15588
// exit ;
15586: GO 15654
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_VAR 0 1
15597: PPUSH
15598: LD_VAR 0 2
15602: PPUSH
15603: LD_VAR 0 1
15607: PUSH
15608: LD_VAR 0 3
15612: ARRAY
15613: PPUSH
15614: CALL_OW 1
15618: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 1
15628: PPUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: LD_VAR 0 5
15638: PPUSH
15639: CALL_OW 1
15643: ST_TO_ADDR
// result := list ;
15644: LD_ADDR_VAR 0 4
15648: PUSH
15649: LD_VAR 0 1
15653: ST_TO_ADDR
// end ;
15654: LD_VAR 0 4
15658: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15659: LD_INT 0
15661: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15662: LD_ADDR_VAR 0 5
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 250
15676: PPUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 251
15686: PPUSH
15687: LD_VAR 0 2
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_VAR 0 4
15701: PPUSH
15702: CALL 16080 0 5
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 5
15711: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
// if not list or not unit then
15718: LD_VAR 0 2
15722: NOT
15723: PUSH
15724: LD_VAR 0 1
15728: NOT
15729: OR
15730: IFFALSE 15734
// exit ;
15732: GO 16075
// result := [ ] ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: EMPTY
15740: ST_TO_ADDR
// for i in list do
15741: LD_ADDR_VAR 0 6
15745: PUSH
15746: LD_VAR 0 2
15750: PUSH
15751: FOR_IN
15752: IFFALSE 15970
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15754: LD_ADDR_VAR 0 8
15758: PUSH
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_VAR 0 6
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_VAR 0 6
15777: PUSH
15778: LD_INT 2
15780: ARRAY
15781: PPUSH
15782: CALL_OW 297
15786: ST_TO_ADDR
// if not Count ( result ) then
15787: LD_VAR 0 5
15791: PPUSH
15792: CALL 12364 0 1
15796: NOT
15797: IFFALSE 15830
// begin result := Join ( result , [ i , tmp ] ) ;
15799: LD_ADDR_VAR 0 5
15803: PUSH
15804: LD_VAR 0 5
15808: PPUSH
15809: LD_VAR 0 6
15813: PUSH
15814: LD_VAR 0 8
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL 48114 0 2
15827: ST_TO_ADDR
// continue ;
15828: GO 15751
// end ; if result [ result ] [ 2 ] <= tmp then
15830: LD_VAR 0 5
15834: PUSH
15835: LD_VAR 0 5
15839: ARRAY
15840: PUSH
15841: LD_INT 2
15843: ARRAY
15844: PUSH
15845: LD_VAR 0 8
15849: LESSEQUAL
15850: IFFALSE 15883
// result := Join ( result , [ i , tmp ] ) else
15852: LD_ADDR_VAR 0 5
15856: PUSH
15857: LD_VAR 0 5
15861: PPUSH
15862: LD_VAR 0 6
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL 48114 0 2
15880: ST_TO_ADDR
15881: GO 15968
// begin for j := 1 to Count ( result ) do
15883: LD_ADDR_VAR 0 7
15887: PUSH
15888: DOUBLE
15889: LD_INT 1
15891: DEC
15892: ST_TO_ADDR
15893: LD_VAR 0 5
15897: PPUSH
15898: CALL 12364 0 1
15902: PUSH
15903: FOR_TO
15904: IFFALSE 15966
// begin if tmp < result [ j ] [ 2 ] then
15906: LD_VAR 0 8
15910: PUSH
15911: LD_VAR 0 5
15915: PUSH
15916: LD_VAR 0 7
15920: ARRAY
15921: PUSH
15922: LD_INT 2
15924: ARRAY
15925: LESS
15926: IFFALSE 15964
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15928: LD_ADDR_VAR 0 5
15932: PUSH
15933: LD_VAR 0 5
15937: PPUSH
15938: LD_VAR 0 7
15942: PPUSH
15943: LD_VAR 0 6
15947: PUSH
15948: LD_VAR 0 8
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 2
15961: ST_TO_ADDR
// break ;
15962: GO 15966
// end ; end ;
15964: GO 15903
15966: POP
15967: POP
// end ; end ;
15968: GO 15751
15970: POP
15971: POP
// if result and not asc then
15972: LD_VAR 0 5
15976: PUSH
15977: LD_VAR 0 3
15981: NOT
15982: AND
15983: IFFALSE 16000
// result := ReverseArray ( result ) ;
15985: LD_ADDR_VAR 0 5
15989: PUSH
15990: LD_VAR 0 5
15994: PPUSH
15995: CALL 43240 0 1
15999: ST_TO_ADDR
// tmp := [ ] ;
16000: LD_ADDR_VAR 0 8
16004: PUSH
16005: EMPTY
16006: ST_TO_ADDR
// if mode then
16007: LD_VAR 0 4
16011: IFFALSE 16075
// begin for i := 1 to result do
16013: LD_ADDR_VAR 0 6
16017: PUSH
16018: DOUBLE
16019: LD_INT 1
16021: DEC
16022: ST_TO_ADDR
16023: LD_VAR 0 5
16027: PUSH
16028: FOR_TO
16029: IFFALSE 16063
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16031: LD_ADDR_VAR 0 8
16035: PUSH
16036: LD_VAR 0 8
16040: PPUSH
16041: LD_VAR 0 5
16045: PUSH
16046: LD_VAR 0 6
16050: ARRAY
16051: PUSH
16052: LD_INT 1
16054: ARRAY
16055: PPUSH
16056: CALL 48114 0 2
16060: ST_TO_ADDR
16061: GO 16028
16063: POP
16064: POP
// result := tmp ;
16065: LD_ADDR_VAR 0 5
16069: PUSH
16070: LD_VAR 0 8
16074: ST_TO_ADDR
// end ; end ;
16075: LD_VAR 0 5
16079: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16080: LD_INT 0
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
// if not list then
16086: LD_VAR 0 3
16090: NOT
16091: IFFALSE 16095
// exit ;
16093: GO 16483
// result := [ ] ;
16095: LD_ADDR_VAR 0 6
16099: PUSH
16100: EMPTY
16101: ST_TO_ADDR
// for i in list do
16102: LD_ADDR_VAR 0 7
16106: PUSH
16107: LD_VAR 0 3
16111: PUSH
16112: FOR_IN
16113: IFFALSE 16315
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16115: LD_ADDR_VAR 0 9
16119: PUSH
16120: LD_VAR 0 7
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: LD_VAR 0 2
16134: PPUSH
16135: CALL_OW 297
16139: ST_TO_ADDR
// if not result then
16140: LD_VAR 0 6
16144: NOT
16145: IFFALSE 16171
// result := [ [ i , tmp ] ] else
16147: LD_ADDR_VAR 0 6
16151: PUSH
16152: LD_VAR 0 7
16156: PUSH
16157: LD_VAR 0 9
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: ST_TO_ADDR
16169: GO 16313
// begin if result [ result ] [ 2 ] <= tmp then
16171: LD_VAR 0 6
16175: PUSH
16176: LD_VAR 0 6
16180: ARRAY
16181: PUSH
16182: LD_INT 2
16184: ARRAY
16185: PUSH
16186: LD_VAR 0 9
16190: LESSEQUAL
16191: IFFALSE 16233
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16193: LD_ADDR_VAR 0 6
16197: PUSH
16198: LD_VAR 0 6
16202: PPUSH
16203: LD_VAR 0 6
16207: PUSH
16208: LD_INT 1
16210: PLUS
16211: PPUSH
16212: LD_VAR 0 7
16216: PUSH
16217: LD_VAR 0 9
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PPUSH
16226: CALL_OW 2
16230: ST_TO_ADDR
16231: GO 16313
// for j := 1 to result do
16233: LD_ADDR_VAR 0 8
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_VAR 0 6
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16311
// begin if tmp < result [ j ] [ 2 ] then
16251: LD_VAR 0 9
16255: PUSH
16256: LD_VAR 0 6
16260: PUSH
16261: LD_VAR 0 8
16265: ARRAY
16266: PUSH
16267: LD_INT 2
16269: ARRAY
16270: LESS
16271: IFFALSE 16309
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16273: LD_ADDR_VAR 0 6
16277: PUSH
16278: LD_VAR 0 6
16282: PPUSH
16283: LD_VAR 0 8
16287: PPUSH
16288: LD_VAR 0 7
16292: PUSH
16293: LD_VAR 0 9
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PPUSH
16302: CALL_OW 2
16306: ST_TO_ADDR
// break ;
16307: GO 16311
// end ; end ;
16309: GO 16248
16311: POP
16312: POP
// end ; end ;
16313: GO 16112
16315: POP
16316: POP
// if result and not asc then
16317: LD_VAR 0 6
16321: PUSH
16322: LD_VAR 0 4
16326: NOT
16327: AND
16328: IFFALSE 16403
// begin tmp := result ;
16330: LD_ADDR_VAR 0 9
16334: PUSH
16335: LD_VAR 0 6
16339: ST_TO_ADDR
// for i = tmp downto 1 do
16340: LD_ADDR_VAR 0 7
16344: PUSH
16345: DOUBLE
16346: LD_VAR 0 9
16350: INC
16351: ST_TO_ADDR
16352: LD_INT 1
16354: PUSH
16355: FOR_DOWNTO
16356: IFFALSE 16401
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16358: LD_ADDR_VAR 0 6
16362: PUSH
16363: LD_VAR 0 6
16367: PPUSH
16368: LD_VAR 0 9
16372: PUSH
16373: LD_VAR 0 7
16377: MINUS
16378: PUSH
16379: LD_INT 1
16381: PLUS
16382: PPUSH
16383: LD_VAR 0 9
16387: PUSH
16388: LD_VAR 0 7
16392: ARRAY
16393: PPUSH
16394: CALL_OW 1
16398: ST_TO_ADDR
16399: GO 16355
16401: POP
16402: POP
// end ; tmp := [ ] ;
16403: LD_ADDR_VAR 0 9
16407: PUSH
16408: EMPTY
16409: ST_TO_ADDR
// if mode then
16410: LD_VAR 0 5
16414: IFFALSE 16483
// begin for i = 1 to result do
16416: LD_ADDR_VAR 0 7
16420: PUSH
16421: DOUBLE
16422: LD_INT 1
16424: DEC
16425: ST_TO_ADDR
16426: LD_VAR 0 6
16430: PUSH
16431: FOR_TO
16432: IFFALSE 16471
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16434: LD_ADDR_VAR 0 9
16438: PUSH
16439: LD_VAR 0 9
16443: PPUSH
16444: LD_VAR 0 7
16448: PPUSH
16449: LD_VAR 0 6
16453: PUSH
16454: LD_VAR 0 7
16458: ARRAY
16459: PUSH
16460: LD_INT 1
16462: ARRAY
16463: PPUSH
16464: CALL_OW 1
16468: ST_TO_ADDR
16469: GO 16431
16471: POP
16472: POP
// result := tmp ;
16473: LD_ADDR_VAR 0 6
16477: PUSH
16478: LD_VAR 0 9
16482: ST_TO_ADDR
// end ; end ;
16483: LD_VAR 0 6
16487: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16496: LD_ADDR_VAR 0 5
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: EMPTY
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: ST_TO_ADDR
// if not x or not y then
16518: LD_VAR 0 2
16522: NOT
16523: PUSH
16524: LD_VAR 0 3
16528: NOT
16529: OR
16530: IFFALSE 16534
// exit ;
16532: GO 18184
// if not range then
16534: LD_VAR 0 4
16538: NOT
16539: IFFALSE 16549
// range := 10 ;
16541: LD_ADDR_VAR 0 4
16545: PUSH
16546: LD_INT 10
16548: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16549: LD_ADDR_VAR 0 8
16553: PUSH
16554: LD_INT 81
16556: PUSH
16557: LD_VAR 0 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 92
16568: PUSH
16569: LD_VAR 0 2
16573: PUSH
16574: LD_VAR 0 3
16578: PUSH
16579: LD_VAR 0 4
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 3
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if not tmp then
16617: LD_VAR 0 8
16621: NOT
16622: IFFALSE 16626
// exit ;
16624: GO 18184
// for i in tmp do
16626: LD_ADDR_VAR 0 6
16630: PUSH
16631: LD_VAR 0 8
16635: PUSH
16636: FOR_IN
16637: IFFALSE 18159
// begin points := [ 0 , 0 , 0 ] ;
16639: LD_ADDR_VAR 0 9
16643: PUSH
16644: LD_INT 0
16646: PUSH
16647: LD_INT 0
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: ST_TO_ADDR
// bpoints := 1 ;
16658: LD_ADDR_VAR 0 10
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16666: LD_VAR 0 6
16670: PPUSH
16671: CALL_OW 247
16675: PUSH
16676: LD_INT 1
16678: DOUBLE
16679: EQUAL
16680: IFTRUE 16684
16682: GO 17262
16684: POP
// begin if GetClass ( i ) = 1 then
16685: LD_VAR 0 6
16689: PPUSH
16690: CALL_OW 257
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16719
// points := [ 10 , 5 , 3 ] ;
16700: LD_ADDR_VAR 0 9
16704: PUSH
16705: LD_INT 10
16707: PUSH
16708: LD_INT 5
16710: PUSH
16711: LD_INT 3
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16719: LD_VAR 0 6
16723: PPUSH
16724: CALL_OW 257
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: LD_INT 4
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: IN
16743: IFFALSE 16764
// points := [ 3 , 2 , 1 ] ;
16745: LD_ADDR_VAR 0 9
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16764: LD_VAR 0 6
16768: PPUSH
16769: CALL_OW 257
16773: PUSH
16774: LD_INT 5
16776: EQUAL
16777: IFFALSE 16798
// points := [ 130 , 5 , 2 ] ;
16779: LD_ADDR_VAR 0 9
16783: PUSH
16784: LD_INT 130
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16798: LD_VAR 0 6
16802: PPUSH
16803: CALL_OW 257
16807: PUSH
16808: LD_INT 8
16810: EQUAL
16811: IFFALSE 16832
// points := [ 35 , 35 , 30 ] ;
16813: LD_ADDR_VAR 0 9
16817: PUSH
16818: LD_INT 35
16820: PUSH
16821: LD_INT 35
16823: PUSH
16824: LD_INT 30
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16832: LD_VAR 0 6
16836: PPUSH
16837: CALL_OW 257
16841: PUSH
16842: LD_INT 9
16844: EQUAL
16845: IFFALSE 16866
// points := [ 20 , 55 , 40 ] ;
16847: LD_ADDR_VAR 0 9
16851: PUSH
16852: LD_INT 20
16854: PUSH
16855: LD_INT 55
16857: PUSH
16858: LD_INT 40
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16866: LD_VAR 0 6
16870: PPUSH
16871: CALL_OW 257
16875: PUSH
16876: LD_INT 12
16878: PUSH
16879: LD_INT 16
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: IN
16886: IFFALSE 16907
// points := [ 5 , 3 , 2 ] ;
16888: LD_ADDR_VAR 0 9
16892: PUSH
16893: LD_INT 5
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: LD_INT 2
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16907: LD_VAR 0 6
16911: PPUSH
16912: CALL_OW 257
16916: PUSH
16917: LD_INT 17
16919: EQUAL
16920: IFFALSE 16941
// points := [ 100 , 50 , 75 ] ;
16922: LD_ADDR_VAR 0 9
16926: PUSH
16927: LD_INT 100
16929: PUSH
16930: LD_INT 50
16932: PUSH
16933: LD_INT 75
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16941: LD_VAR 0 6
16945: PPUSH
16946: CALL_OW 257
16950: PUSH
16951: LD_INT 15
16953: EQUAL
16954: IFFALSE 16975
// points := [ 10 , 5 , 3 ] ;
16956: LD_ADDR_VAR 0 9
16960: PUSH
16961: LD_INT 10
16963: PUSH
16964: LD_INT 5
16966: PUSH
16967: LD_INT 3
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16975: LD_VAR 0 6
16979: PPUSH
16980: CALL_OW 257
16984: PUSH
16985: LD_INT 14
16987: EQUAL
16988: IFFALSE 17009
// points := [ 10 , 0 , 0 ] ;
16990: LD_ADDR_VAR 0 9
16994: PUSH
16995: LD_INT 10
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17009: LD_VAR 0 6
17013: PPUSH
17014: CALL_OW 257
17018: PUSH
17019: LD_INT 11
17021: EQUAL
17022: IFFALSE 17043
// points := [ 30 , 10 , 5 ] ;
17024: LD_ADDR_VAR 0 9
17028: PUSH
17029: LD_INT 30
17031: PUSH
17032: LD_INT 10
17034: PUSH
17035: LD_INT 5
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_INT 5
17050: PPUSH
17051: CALL_OW 321
17055: PUSH
17056: LD_INT 2
17058: EQUAL
17059: IFFALSE 17076
// bpoints := bpoints * 1.8 ;
17061: LD_ADDR_VAR 0 10
17065: PUSH
17066: LD_VAR 0 10
17070: PUSH
17071: LD_REAL  1.80000000000000E+0000
17074: MUL
17075: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17076: LD_VAR 0 6
17080: PPUSH
17081: CALL_OW 257
17085: PUSH
17086: LD_INT 1
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: LD_INT 4
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: IN
17104: PUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: LD_INT 51
17112: PPUSH
17113: CALL_OW 321
17117: PUSH
17118: LD_INT 2
17120: EQUAL
17121: AND
17122: IFFALSE 17139
// bpoints := bpoints * 1.2 ;
17124: LD_ADDR_VAR 0 10
17128: PUSH
17129: LD_VAR 0 10
17133: PUSH
17134: LD_REAL  1.20000000000000E+0000
17137: MUL
17138: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17139: LD_VAR 0 6
17143: PPUSH
17144: CALL_OW 257
17148: PUSH
17149: LD_INT 5
17151: PUSH
17152: LD_INT 7
17154: PUSH
17155: LD_INT 9
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: IN
17163: PUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_INT 52
17171: PPUSH
17172: CALL_OW 321
17176: PUSH
17177: LD_INT 2
17179: EQUAL
17180: AND
17181: IFFALSE 17198
// bpoints := bpoints * 1.5 ;
17183: LD_ADDR_VAR 0 10
17187: PUSH
17188: LD_VAR 0 10
17192: PUSH
17193: LD_REAL  1.50000000000000E+0000
17196: MUL
17197: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17198: LD_VAR 0 1
17202: PPUSH
17203: LD_INT 66
17205: PPUSH
17206: CALL_OW 321
17210: PUSH
17211: LD_INT 2
17213: EQUAL
17214: IFFALSE 17231
// bpoints := bpoints * 1.1 ;
17216: LD_ADDR_VAR 0 10
17220: PUSH
17221: LD_VAR 0 10
17225: PUSH
17226: LD_REAL  1.10000000000000E+0000
17229: MUL
17230: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17231: LD_ADDR_VAR 0 10
17235: PUSH
17236: LD_VAR 0 10
17240: PUSH
17241: LD_VAR 0 6
17245: PPUSH
17246: LD_INT 1
17248: PPUSH
17249: CALL_OW 259
17253: PUSH
17254: LD_REAL  1.15000000000000E+0000
17257: MUL
17258: MUL
17259: ST_TO_ADDR
// end ; unit_vehicle :
17260: GO 18088
17262: LD_INT 2
17264: DOUBLE
17265: EQUAL
17266: IFTRUE 17270
17268: GO 18076
17270: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17271: LD_VAR 0 6
17275: PPUSH
17276: CALL_OW 264
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: LD_INT 42
17286: PUSH
17287: LD_INT 24
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: IN
17295: IFFALSE 17316
// points := [ 25 , 5 , 3 ] ;
17297: LD_ADDR_VAR 0 9
17301: PUSH
17302: LD_INT 25
17304: PUSH
17305: LD_INT 5
17307: PUSH
17308: LD_INT 3
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17316: LD_VAR 0 6
17320: PPUSH
17321: CALL_OW 264
17325: PUSH
17326: LD_INT 4
17328: PUSH
17329: LD_INT 43
17331: PUSH
17332: LD_INT 25
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: IN
17340: IFFALSE 17361
// points := [ 40 , 15 , 5 ] ;
17342: LD_ADDR_VAR 0 9
17346: PUSH
17347: LD_INT 40
17349: PUSH
17350: LD_INT 15
17352: PUSH
17353: LD_INT 5
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17361: LD_VAR 0 6
17365: PPUSH
17366: CALL_OW 264
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: LD_INT 23
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: IN
17381: IFFALSE 17402
// points := [ 7 , 25 , 8 ] ;
17383: LD_ADDR_VAR 0 9
17387: PUSH
17388: LD_INT 7
17390: PUSH
17391: LD_INT 25
17393: PUSH
17394: LD_INT 8
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17402: LD_VAR 0 6
17406: PPUSH
17407: CALL_OW 264
17411: PUSH
17412: LD_INT 5
17414: PUSH
17415: LD_INT 27
17417: PUSH
17418: LD_INT 44
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: IN
17426: IFFALSE 17447
// points := [ 14 , 50 , 16 ] ;
17428: LD_ADDR_VAR 0 9
17432: PUSH
17433: LD_INT 14
17435: PUSH
17436: LD_INT 50
17438: PUSH
17439: LD_INT 16
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17447: LD_VAR 0 6
17451: PPUSH
17452: CALL_OW 264
17456: PUSH
17457: LD_INT 6
17459: PUSH
17460: LD_INT 46
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: IN
17467: IFFALSE 17488
// points := [ 32 , 120 , 70 ] ;
17469: LD_ADDR_VAR 0 9
17473: PUSH
17474: LD_INT 32
17476: PUSH
17477: LD_INT 120
17479: PUSH
17480: LD_INT 70
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17488: LD_VAR 0 6
17492: PPUSH
17493: CALL_OW 264
17497: PUSH
17498: LD_INT 7
17500: PUSH
17501: LD_INT 28
17503: PUSH
17504: LD_INT 45
17506: PUSH
17507: LD_INT 92
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: IN
17516: IFFALSE 17537
// points := [ 35 , 20 , 45 ] ;
17518: LD_ADDR_VAR 0 9
17522: PUSH
17523: LD_INT 35
17525: PUSH
17526: LD_INT 20
17528: PUSH
17529: LD_INT 45
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17537: LD_VAR 0 6
17541: PPUSH
17542: CALL_OW 264
17546: PUSH
17547: LD_INT 47
17549: PUSH
17550: EMPTY
17551: LIST
17552: IN
17553: IFFALSE 17574
// points := [ 67 , 45 , 75 ] ;
17555: LD_ADDR_VAR 0 9
17559: PUSH
17560: LD_INT 67
17562: PUSH
17563: LD_INT 45
17565: PUSH
17566: LD_INT 75
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17574: LD_VAR 0 6
17578: PPUSH
17579: CALL_OW 264
17583: PUSH
17584: LD_INT 26
17586: PUSH
17587: EMPTY
17588: LIST
17589: IN
17590: IFFALSE 17611
// points := [ 120 , 30 , 80 ] ;
17592: LD_ADDR_VAR 0 9
17596: PUSH
17597: LD_INT 120
17599: PUSH
17600: LD_INT 30
17602: PUSH
17603: LD_INT 80
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17611: LD_VAR 0 6
17615: PPUSH
17616: CALL_OW 264
17620: PUSH
17621: LD_INT 22
17623: PUSH
17624: EMPTY
17625: LIST
17626: IN
17627: IFFALSE 17648
// points := [ 40 , 1 , 1 ] ;
17629: LD_ADDR_VAR 0 9
17633: PUSH
17634: LD_INT 40
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17648: LD_VAR 0 6
17652: PPUSH
17653: CALL_OW 264
17657: PUSH
17658: LD_INT 29
17660: PUSH
17661: EMPTY
17662: LIST
17663: IN
17664: IFFALSE 17685
// points := [ 70 , 200 , 400 ] ;
17666: LD_ADDR_VAR 0 9
17670: PUSH
17671: LD_INT 70
17673: PUSH
17674: LD_INT 200
17676: PUSH
17677: LD_INT 400
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17685: LD_VAR 0 6
17689: PPUSH
17690: CALL_OW 264
17694: PUSH
17695: LD_INT 14
17697: PUSH
17698: LD_INT 53
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: IN
17705: IFFALSE 17726
// points := [ 40 , 10 , 20 ] ;
17707: LD_ADDR_VAR 0 9
17711: PUSH
17712: LD_INT 40
17714: PUSH
17715: LD_INT 10
17717: PUSH
17718: LD_INT 20
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17726: LD_VAR 0 6
17730: PPUSH
17731: CALL_OW 264
17735: PUSH
17736: LD_INT 9
17738: PUSH
17739: EMPTY
17740: LIST
17741: IN
17742: IFFALSE 17763
// points := [ 5 , 70 , 20 ] ;
17744: LD_ADDR_VAR 0 9
17748: PUSH
17749: LD_INT 5
17751: PUSH
17752: LD_INT 70
17754: PUSH
17755: LD_INT 20
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17763: LD_VAR 0 6
17767: PPUSH
17768: CALL_OW 264
17772: PUSH
17773: LD_INT 10
17775: PUSH
17776: EMPTY
17777: LIST
17778: IN
17779: IFFALSE 17800
// points := [ 35 , 110 , 70 ] ;
17781: LD_ADDR_VAR 0 9
17785: PUSH
17786: LD_INT 35
17788: PUSH
17789: LD_INT 110
17791: PUSH
17792: LD_INT 70
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17800: LD_VAR 0 6
17804: PPUSH
17805: CALL_OW 265
17809: PUSH
17810: LD_INT 25
17812: EQUAL
17813: IFFALSE 17834
// points := [ 80 , 65 , 100 ] ;
17815: LD_ADDR_VAR 0 9
17819: PUSH
17820: LD_INT 80
17822: PUSH
17823: LD_INT 65
17825: PUSH
17826: LD_INT 100
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17834: LD_VAR 0 6
17838: PPUSH
17839: CALL_OW 263
17843: PUSH
17844: LD_INT 1
17846: EQUAL
17847: IFFALSE 17882
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17849: LD_ADDR_VAR 0 10
17853: PUSH
17854: LD_VAR 0 10
17858: PUSH
17859: LD_VAR 0 6
17863: PPUSH
17864: CALL_OW 311
17868: PPUSH
17869: LD_INT 3
17871: PPUSH
17872: CALL_OW 259
17876: PUSH
17877: LD_INT 4
17879: MUL
17880: MUL
17881: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17882: LD_VAR 0 6
17886: PPUSH
17887: CALL_OW 263
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: IFFALSE 17946
// begin j := IsControledBy ( i ) ;
17897: LD_ADDR_VAR 0 7
17901: PUSH
17902: LD_VAR 0 6
17906: PPUSH
17907: CALL_OW 312
17911: ST_TO_ADDR
// if j then
17912: LD_VAR 0 7
17916: IFFALSE 17946
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17918: LD_ADDR_VAR 0 10
17922: PUSH
17923: LD_VAR 0 10
17927: PUSH
17928: LD_VAR 0 7
17932: PPUSH
17933: LD_INT 3
17935: PPUSH
17936: CALL_OW 259
17940: PUSH
17941: LD_INT 3
17943: MUL
17944: MUL
17945: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17946: LD_VAR 0 6
17950: PPUSH
17951: CALL_OW 264
17955: PUSH
17956: LD_INT 5
17958: PUSH
17959: LD_INT 6
17961: PUSH
17962: LD_INT 46
17964: PUSH
17965: LD_INT 44
17967: PUSH
17968: LD_INT 47
17970: PUSH
17971: LD_INT 45
17973: PUSH
17974: LD_INT 28
17976: PUSH
17977: LD_INT 7
17979: PUSH
17980: LD_INT 27
17982: PUSH
17983: LD_INT 29
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: IN
17998: PUSH
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_INT 52
18006: PPUSH
18007: CALL_OW 321
18011: PUSH
18012: LD_INT 2
18014: EQUAL
18015: AND
18016: IFFALSE 18033
// bpoints := bpoints * 1.2 ;
18018: LD_ADDR_VAR 0 10
18022: PUSH
18023: LD_VAR 0 10
18027: PUSH
18028: LD_REAL  1.20000000000000E+0000
18031: MUL
18032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18033: LD_VAR 0 6
18037: PPUSH
18038: CALL_OW 264
18042: PUSH
18043: LD_INT 6
18045: PUSH
18046: LD_INT 46
18048: PUSH
18049: LD_INT 47
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: IN
18057: IFFALSE 18074
// bpoints := bpoints * 1.2 ;
18059: LD_ADDR_VAR 0 10
18063: PUSH
18064: LD_VAR 0 10
18068: PUSH
18069: LD_REAL  1.20000000000000E+0000
18072: MUL
18073: ST_TO_ADDR
// end ; unit_building :
18074: GO 18088
18076: LD_INT 3
18078: DOUBLE
18079: EQUAL
18080: IFTRUE 18084
18082: GO 18087
18084: POP
// ; end ;
18085: GO 18088
18087: POP
// for j = 1 to 3 do
18088: LD_ADDR_VAR 0 7
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 3
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18155
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18104: LD_ADDR_VAR 0 5
18108: PUSH
18109: LD_VAR 0 5
18113: PPUSH
18114: LD_VAR 0 7
18118: PPUSH
18119: LD_VAR 0 5
18123: PUSH
18124: LD_VAR 0 7
18128: ARRAY
18129: PUSH
18130: LD_VAR 0 9
18134: PUSH
18135: LD_VAR 0 7
18139: ARRAY
18140: PUSH
18141: LD_VAR 0 10
18145: MUL
18146: PLUS
18147: PPUSH
18148: CALL_OW 1
18152: ST_TO_ADDR
18153: GO 18101
18155: POP
18156: POP
// end ;
18157: GO 16636
18159: POP
18160: POP
// result := Replace ( result , 4 , tmp ) ;
18161: LD_ADDR_VAR 0 5
18165: PUSH
18166: LD_VAR 0 5
18170: PPUSH
18171: LD_INT 4
18173: PPUSH
18174: LD_VAR 0 8
18178: PPUSH
18179: CALL_OW 1
18183: ST_TO_ADDR
// end ;
18184: LD_VAR 0 5
18188: RET
// export function DangerAtRange ( unit , range ) ; begin
18189: LD_INT 0
18191: PPUSH
// if not unit then
18192: LD_VAR 0 1
18196: NOT
18197: IFFALSE 18201
// exit ;
18199: GO 18246
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 255
18215: PPUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 250
18225: PPUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 251
18235: PPUSH
18236: LD_VAR 0 2
18240: PPUSH
18241: CALL 16488 0 4
18245: ST_TO_ADDR
// end ;
18246: LD_VAR 0 3
18250: RET
// export function DangerInArea ( side , area ) ; begin
18251: LD_INT 0
18253: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: LD_VAR 0 2
18263: PPUSH
18264: LD_INT 81
18266: PUSH
18267: LD_VAR 0 1
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 70
18280: ST_TO_ADDR
// end ;
18281: LD_VAR 0 3
18285: RET
// export function IsExtension ( b ) ; begin
18286: LD_INT 0
18288: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18289: LD_ADDR_VAR 0 2
18293: PUSH
18294: LD_VAR 0 1
18298: PUSH
18299: LD_INT 23
18301: PUSH
18302: LD_INT 20
18304: PUSH
18305: LD_INT 22
18307: PUSH
18308: LD_INT 17
18310: PUSH
18311: LD_INT 24
18313: PUSH
18314: LD_INT 21
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: LD_INT 16
18322: PUSH
18323: LD_INT 25
18325: PUSH
18326: LD_INT 18
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: IN
18341: ST_TO_ADDR
// end ;
18342: LD_VAR 0 2
18346: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18347: LD_INT 0
18349: PPUSH
18350: PPUSH
18351: PPUSH
// result := [ ] ;
18352: LD_ADDR_VAR 0 4
18356: PUSH
18357: EMPTY
18358: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18359: LD_ADDR_VAR 0 5
18363: PUSH
18364: LD_VAR 0 2
18368: PPUSH
18369: LD_INT 21
18371: PUSH
18372: LD_INT 3
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL_OW 70
18383: ST_TO_ADDR
// if not tmp then
18384: LD_VAR 0 5
18388: NOT
18389: IFFALSE 18393
// exit ;
18391: GO 18457
// if checkLink then
18393: LD_VAR 0 3
18397: IFFALSE 18447
// begin for i in tmp do
18399: LD_ADDR_VAR 0 6
18403: PUSH
18404: LD_VAR 0 5
18408: PUSH
18409: FOR_IN
18410: IFFALSE 18445
// if GetBase ( i ) <> base then
18412: LD_VAR 0 6
18416: PPUSH
18417: CALL_OW 274
18421: PUSH
18422: LD_VAR 0 1
18426: NONEQUAL
18427: IFFALSE 18443
// ComLinkToBase ( base , i ) ;
18429: LD_VAR 0 1
18433: PPUSH
18434: LD_VAR 0 6
18438: PPUSH
18439: CALL_OW 169
18443: GO 18409
18445: POP
18446: POP
// end ; result := tmp ;
18447: LD_ADDR_VAR 0 4
18451: PUSH
18452: LD_VAR 0 5
18456: ST_TO_ADDR
// end ;
18457: LD_VAR 0 4
18461: RET
// export function ComComplete ( units , b ) ; var i ; begin
18462: LD_INT 0
18464: PPUSH
18465: PPUSH
// if not units then
18466: LD_VAR 0 1
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18565
// for i in units do
18475: LD_ADDR_VAR 0 4
18479: PUSH
18480: LD_VAR 0 1
18484: PUSH
18485: FOR_IN
18486: IFFALSE 18563
// if BuildingStatus ( b ) = bs_build then
18488: LD_VAR 0 2
18492: PPUSH
18493: CALL_OW 461
18497: PUSH
18498: LD_INT 1
18500: EQUAL
18501: IFFALSE 18561
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18503: LD_VAR 0 4
18507: PPUSH
18508: LD_STRING h
18510: PUSH
18511: LD_VAR 0 2
18515: PPUSH
18516: CALL_OW 250
18520: PUSH
18521: LD_VAR 0 2
18525: PPUSH
18526: CALL_OW 251
18530: PUSH
18531: LD_VAR 0 2
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: PPUSH
18557: CALL_OW 446
18561: GO 18485
18563: POP
18564: POP
// end ;
18565: LD_VAR 0 3
18569: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18570: LD_INT 0
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18578: LD_VAR 0 1
18582: NOT
18583: PUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 263
18593: PUSH
18594: LD_INT 2
18596: NONEQUAL
18597: OR
18598: IFFALSE 18602
// exit ;
18600: GO 18918
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18602: LD_ADDR_VAR 0 6
18606: PUSH
18607: LD_INT 22
18609: PUSH
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL_OW 255
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 2
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 36
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 34
18639: PUSH
18640: LD_INT 31
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: ST_TO_ADDR
// if not tmp then
18661: LD_VAR 0 6
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18918
// result := [ ] ;
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: EMPTY
18676: ST_TO_ADDR
// for i in tmp do
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: LD_VAR 0 6
18686: PUSH
18687: FOR_IN
18688: IFFALSE 18759
// begin t := UnitsInside ( i ) ;
18690: LD_ADDR_VAR 0 4
18694: PUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: CALL_OW 313
18704: ST_TO_ADDR
// if t then
18705: LD_VAR 0 4
18709: IFFALSE 18757
// for j in t do
18711: LD_ADDR_VAR 0 7
18715: PUSH
18716: LD_VAR 0 4
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18755
// result := Replace ( result , result + 1 , j ) ;
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 1
18741: PLUS
18742: PPUSH
18743: LD_VAR 0 7
18747: PPUSH
18748: CALL_OW 1
18752: ST_TO_ADDR
18753: GO 18721
18755: POP
18756: POP
// end ;
18757: GO 18687
18759: POP
18760: POP
// if not result then
18761: LD_VAR 0 2
18765: NOT
18766: IFFALSE 18770
// exit ;
18768: GO 18918
// mech := result [ 1 ] ;
18770: LD_ADDR_VAR 0 5
18774: PUSH
18775: LD_VAR 0 2
18779: PUSH
18780: LD_INT 1
18782: ARRAY
18783: ST_TO_ADDR
// if result > 1 then
18784: LD_VAR 0 2
18788: PUSH
18789: LD_INT 1
18791: GREATER
18792: IFFALSE 18904
// begin for i = 2 to result do
18794: LD_ADDR_VAR 0 3
18798: PUSH
18799: DOUBLE
18800: LD_INT 2
18802: DEC
18803: ST_TO_ADDR
18804: LD_VAR 0 2
18808: PUSH
18809: FOR_TO
18810: IFFALSE 18902
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18812: LD_ADDR_VAR 0 4
18816: PUSH
18817: LD_VAR 0 2
18821: PUSH
18822: LD_VAR 0 3
18826: ARRAY
18827: PPUSH
18828: LD_INT 3
18830: PPUSH
18831: CALL_OW 259
18835: PUSH
18836: LD_VAR 0 2
18840: PUSH
18841: LD_VAR 0 3
18845: ARRAY
18846: PPUSH
18847: CALL_OW 432
18851: MINUS
18852: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18853: LD_VAR 0 4
18857: PUSH
18858: LD_VAR 0 5
18862: PPUSH
18863: LD_INT 3
18865: PPUSH
18866: CALL_OW 259
18870: PUSH
18871: LD_VAR 0 5
18875: PPUSH
18876: CALL_OW 432
18880: MINUS
18881: GREATEREQUAL
18882: IFFALSE 18900
// mech := result [ i ] ;
18884: LD_ADDR_VAR 0 5
18888: PUSH
18889: LD_VAR 0 2
18893: PUSH
18894: LD_VAR 0 3
18898: ARRAY
18899: ST_TO_ADDR
// end ;
18900: GO 18809
18902: POP
18903: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_VAR 0 5
18913: PPUSH
18914: CALL_OW 135
// end ;
18918: LD_VAR 0 2
18922: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18923: LD_INT 0
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
// result := [ ] ;
18938: LD_ADDR_VAR 0 7
18942: PUSH
18943: EMPTY
18944: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL_OW 266
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: IN
18965: NOT
18966: IFFALSE 18970
// exit ;
18968: GO 20604
// if name then
18970: LD_VAR 0 3
18974: IFFALSE 18990
// SetBName ( base_dep , name ) ;
18976: LD_VAR 0 1
18980: PPUSH
18981: LD_VAR 0 3
18985: PPUSH
18986: CALL_OW 500
// base := GetBase ( base_dep ) ;
18990: LD_ADDR_VAR 0 15
18994: PUSH
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 274
19004: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19005: LD_ADDR_VAR 0 16
19009: PUSH
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 255
19019: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19020: LD_ADDR_VAR 0 17
19024: PUSH
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 248
19034: ST_TO_ADDR
// if sources then
19035: LD_VAR 0 5
19039: IFFALSE 19086
// for i = 1 to 3 do
19041: LD_ADDR_VAR 0 8
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_INT 3
19053: PUSH
19054: FOR_TO
19055: IFFALSE 19084
// AddResourceType ( base , i , sources [ i ] ) ;
19057: LD_VAR 0 15
19061: PPUSH
19062: LD_VAR 0 8
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_VAR 0 8
19076: ARRAY
19077: PPUSH
19078: CALL_OW 276
19082: GO 19054
19084: POP
19085: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19086: LD_ADDR_VAR 0 18
19090: PUSH
19091: LD_VAR 0 15
19095: PPUSH
19096: LD_VAR 0 2
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL 18347 0 3
19108: ST_TO_ADDR
// InitHc ;
19109: CALL_OW 19
// InitUc ;
19113: CALL_OW 18
// uc_side := side ;
19117: LD_ADDR_OWVAR 20
19121: PUSH
19122: LD_VAR 0 16
19126: ST_TO_ADDR
// uc_nation := nation ;
19127: LD_ADDR_OWVAR 21
19131: PUSH
19132: LD_VAR 0 17
19136: ST_TO_ADDR
// if buildings then
19137: LD_VAR 0 18
19141: IFFALSE 20463
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19143: LD_ADDR_VAR 0 19
19147: PUSH
19148: LD_VAR 0 18
19152: PPUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 29
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 30
19168: PUSH
19169: LD_INT 30
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: PPUSH
19181: CALL_OW 72
19185: ST_TO_ADDR
// if tmp then
19186: LD_VAR 0 19
19190: IFFALSE 19238
// for i in tmp do
19192: LD_ADDR_VAR 0 8
19196: PUSH
19197: LD_VAR 0 19
19201: PUSH
19202: FOR_IN
19203: IFFALSE 19236
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19205: LD_VAR 0 8
19209: PPUSH
19210: CALL_OW 250
19214: PPUSH
19215: LD_VAR 0 8
19219: PPUSH
19220: CALL_OW 251
19224: PPUSH
19225: LD_VAR 0 16
19229: PPUSH
19230: CALL_OW 441
19234: GO 19202
19236: POP
19237: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19238: LD_VAR 0 18
19242: PPUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 30
19248: PUSH
19249: LD_INT 32
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 30
19258: PUSH
19259: LD_INT 33
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 72
19275: IFFALSE 19363
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19277: LD_ADDR_VAR 0 8
19281: PUSH
19282: LD_VAR 0 18
19286: PPUSH
19287: LD_INT 2
19289: PUSH
19290: LD_INT 30
19292: PUSH
19293: LD_INT 32
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 33
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 72
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19361
// begin if not GetBWeapon ( i ) then
19323: LD_VAR 0 8
19327: PPUSH
19328: CALL_OW 269
19332: NOT
19333: IFFALSE 19359
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19335: LD_VAR 0 8
19339: PPUSH
19340: LD_VAR 0 8
19344: PPUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL 20609 0 2
19354: PPUSH
19355: CALL_OW 431
// end ;
19359: GO 19320
19361: POP
19362: POP
// end ; for i = 1 to personel do
19363: LD_ADDR_VAR 0 8
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_VAR 0 6
19377: PUSH
19378: FOR_TO
19379: IFFALSE 20443
// begin if i > 4 then
19381: LD_VAR 0 8
19385: PUSH
19386: LD_INT 4
19388: GREATER
19389: IFFALSE 19393
// break ;
19391: GO 20443
// case i of 1 :
19393: LD_VAR 0 8
19397: PUSH
19398: LD_INT 1
19400: DOUBLE
19401: EQUAL
19402: IFTRUE 19406
19404: GO 19486
19406: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19407: LD_ADDR_VAR 0 12
19411: PUSH
19412: LD_VAR 0 18
19416: PPUSH
19417: LD_INT 22
19419: PUSH
19420: LD_VAR 0 16
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 58
19431: PUSH
19432: EMPTY
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 32
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 30
19450: PUSH
19451: LD_INT 4
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 72
19483: ST_TO_ADDR
19484: GO 19708
19486: LD_INT 2
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19556
19494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19495: LD_ADDR_VAR 0 12
19499: PUSH
19500: LD_VAR 0 18
19504: PPUSH
19505: LD_INT 22
19507: PUSH
19508: LD_VAR 0 16
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: LD_INT 30
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 30
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 72
19553: ST_TO_ADDR
19554: GO 19708
19556: LD_INT 3
19558: DOUBLE
19559: EQUAL
19560: IFTRUE 19564
19562: GO 19626
19564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19565: LD_ADDR_VAR 0 12
19569: PUSH
19570: LD_VAR 0 18
19574: PPUSH
19575: LD_INT 22
19577: PUSH
19578: LD_VAR 0 16
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 30
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: LD_INT 3
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 72
19623: ST_TO_ADDR
19624: GO 19708
19626: LD_INT 4
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19707
19634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19635: LD_ADDR_VAR 0 12
19639: PUSH
19640: LD_VAR 0 18
19644: PPUSH
19645: LD_INT 22
19647: PUSH
19648: LD_VAR 0 16
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 30
19662: PUSH
19663: LD_INT 6
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 30
19672: PUSH
19673: LD_INT 7
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 30
19682: PUSH
19683: LD_INT 8
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL_OW 72
19704: ST_TO_ADDR
19705: GO 19708
19707: POP
// if i = 1 then
19708: LD_VAR 0 8
19712: PUSH
19713: LD_INT 1
19715: EQUAL
19716: IFFALSE 19827
// begin tmp := [ ] ;
19718: LD_ADDR_VAR 0 19
19722: PUSH
19723: EMPTY
19724: ST_TO_ADDR
// for j in f do
19725: LD_ADDR_VAR 0 9
19729: PUSH
19730: LD_VAR 0 12
19734: PUSH
19735: FOR_IN
19736: IFFALSE 19809
// if GetBType ( j ) = b_bunker then
19738: LD_VAR 0 9
19742: PPUSH
19743: CALL_OW 266
19747: PUSH
19748: LD_INT 32
19750: EQUAL
19751: IFFALSE 19778
// tmp := Insert ( tmp , 1 , j ) else
19753: LD_ADDR_VAR 0 19
19757: PUSH
19758: LD_VAR 0 19
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: LD_VAR 0 9
19770: PPUSH
19771: CALL_OW 2
19775: ST_TO_ADDR
19776: GO 19807
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19778: LD_ADDR_VAR 0 19
19782: PUSH
19783: LD_VAR 0 19
19787: PPUSH
19788: LD_VAR 0 19
19792: PUSH
19793: LD_INT 1
19795: PLUS
19796: PPUSH
19797: LD_VAR 0 9
19801: PPUSH
19802: CALL_OW 2
19806: ST_TO_ADDR
19807: GO 19735
19809: POP
19810: POP
// if tmp then
19811: LD_VAR 0 19
19815: IFFALSE 19827
// f := tmp ;
19817: LD_ADDR_VAR 0 12
19821: PUSH
19822: LD_VAR 0 19
19826: ST_TO_ADDR
// end ; x := personel [ i ] ;
19827: LD_ADDR_VAR 0 13
19831: PUSH
19832: LD_VAR 0 6
19836: PUSH
19837: LD_VAR 0 8
19841: ARRAY
19842: ST_TO_ADDR
// if x = - 1 then
19843: LD_VAR 0 13
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: EQUAL
19852: IFFALSE 20061
// begin for j in f do
19854: LD_ADDR_VAR 0 9
19858: PUSH
19859: LD_VAR 0 12
19863: PUSH
19864: FOR_IN
19865: IFFALSE 20057
// repeat InitHc ;
19867: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19871: LD_VAR 0 9
19875: PPUSH
19876: CALL_OW 266
19880: PUSH
19881: LD_INT 5
19883: EQUAL
19884: IFFALSE 19954
// begin if UnitsInside ( j ) < 3 then
19886: LD_VAR 0 9
19890: PPUSH
19891: CALL_OW 313
19895: PUSH
19896: LD_INT 3
19898: LESS
19899: IFFALSE 19935
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19901: LD_INT 0
19903: PPUSH
19904: LD_INT 5
19906: PUSH
19907: LD_INT 8
19909: PUSH
19910: LD_INT 9
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_VAR 0 17
19922: ARRAY
19923: PPUSH
19924: LD_VAR 0 4
19928: PPUSH
19929: CALL_OW 380
19933: GO 19952
// PrepareHuman ( false , i , skill ) ;
19935: LD_INT 0
19937: PPUSH
19938: LD_VAR 0 8
19942: PPUSH
19943: LD_VAR 0 4
19947: PPUSH
19948: CALL_OW 380
// end else
19952: GO 19971
// PrepareHuman ( false , i , skill ) ;
19954: LD_INT 0
19956: PPUSH
19957: LD_VAR 0 8
19961: PPUSH
19962: LD_VAR 0 4
19966: PPUSH
19967: CALL_OW 380
// un := CreateHuman ;
19971: LD_ADDR_VAR 0 14
19975: PUSH
19976: CALL_OW 44
19980: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19981: LD_ADDR_VAR 0 7
19985: PUSH
19986: LD_VAR 0 7
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_VAR 0 14
19998: PPUSH
19999: CALL_OW 2
20003: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20004: LD_VAR 0 14
20008: PPUSH
20009: LD_VAR 0 9
20013: PPUSH
20014: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20018: LD_VAR 0 9
20022: PPUSH
20023: CALL_OW 313
20027: PUSH
20028: LD_INT 6
20030: EQUAL
20031: PUSH
20032: LD_VAR 0 9
20036: PPUSH
20037: CALL_OW 266
20041: PUSH
20042: LD_INT 32
20044: PUSH
20045: LD_INT 31
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: IN
20052: OR
20053: IFFALSE 19867
20055: GO 19864
20057: POP
20058: POP
// end else
20059: GO 20441
// for j = 1 to x do
20061: LD_ADDR_VAR 0 9
20065: PUSH
20066: DOUBLE
20067: LD_INT 1
20069: DEC
20070: ST_TO_ADDR
20071: LD_VAR 0 13
20075: PUSH
20076: FOR_TO
20077: IFFALSE 20439
// begin InitHc ;
20079: CALL_OW 19
// if not f then
20083: LD_VAR 0 12
20087: NOT
20088: IFFALSE 20177
// begin PrepareHuman ( false , i , skill ) ;
20090: LD_INT 0
20092: PPUSH
20093: LD_VAR 0 8
20097: PPUSH
20098: LD_VAR 0 4
20102: PPUSH
20103: CALL_OW 380
// un := CreateHuman ;
20107: LD_ADDR_VAR 0 14
20111: PUSH
20112: CALL_OW 44
20116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20117: LD_ADDR_VAR 0 7
20121: PUSH
20122: LD_VAR 0 7
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_VAR 0 14
20134: PPUSH
20135: CALL_OW 2
20139: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20140: LD_VAR 0 14
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 250
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 251
20164: PPUSH
20165: LD_INT 10
20167: PPUSH
20168: LD_INT 0
20170: PPUSH
20171: CALL_OW 50
// continue ;
20175: GO 20076
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20177: LD_VAR 0 12
20181: PUSH
20182: LD_INT 1
20184: ARRAY
20185: PPUSH
20186: CALL_OW 313
20190: PUSH
20191: LD_VAR 0 12
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PPUSH
20200: CALL_OW 266
20204: PUSH
20205: LD_INT 32
20207: PUSH
20208: LD_INT 31
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: IN
20215: AND
20216: PUSH
20217: LD_VAR 0 12
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: CALL_OW 313
20230: PUSH
20231: LD_INT 6
20233: EQUAL
20234: OR
20235: IFFALSE 20255
// f := Delete ( f , 1 ) ;
20237: LD_ADDR_VAR 0 12
20241: PUSH
20242: LD_VAR 0 12
20246: PPUSH
20247: LD_INT 1
20249: PPUSH
20250: CALL_OW 3
20254: ST_TO_ADDR
// if not f then
20255: LD_VAR 0 12
20259: NOT
20260: IFFALSE 20278
// begin x := x + 2 ;
20262: LD_ADDR_VAR 0 13
20266: PUSH
20267: LD_VAR 0 13
20271: PUSH
20272: LD_INT 2
20274: PLUS
20275: ST_TO_ADDR
// continue ;
20276: GO 20076
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20278: LD_VAR 0 12
20282: PUSH
20283: LD_INT 1
20285: ARRAY
20286: PPUSH
20287: CALL_OW 266
20291: PUSH
20292: LD_INT 5
20294: EQUAL
20295: IFFALSE 20369
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20297: LD_VAR 0 12
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: PPUSH
20306: CALL_OW 313
20310: PUSH
20311: LD_INT 3
20313: LESS
20314: IFFALSE 20350
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20316: LD_INT 0
20318: PPUSH
20319: LD_INT 5
20321: PUSH
20322: LD_INT 8
20324: PUSH
20325: LD_INT 9
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: LD_VAR 0 17
20337: ARRAY
20338: PPUSH
20339: LD_VAR 0 4
20343: PPUSH
20344: CALL_OW 380
20348: GO 20367
// PrepareHuman ( false , i , skill ) ;
20350: LD_INT 0
20352: PPUSH
20353: LD_VAR 0 8
20357: PPUSH
20358: LD_VAR 0 4
20362: PPUSH
20363: CALL_OW 380
// end else
20367: GO 20386
// PrepareHuman ( false , i , skill ) ;
20369: LD_INT 0
20371: PPUSH
20372: LD_VAR 0 8
20376: PPUSH
20377: LD_VAR 0 4
20381: PPUSH
20382: CALL_OW 380
// un := CreateHuman ;
20386: LD_ADDR_VAR 0 14
20390: PUSH
20391: CALL_OW 44
20395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20396: LD_ADDR_VAR 0 7
20400: PUSH
20401: LD_VAR 0 7
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: LD_VAR 0 14
20413: PPUSH
20414: CALL_OW 2
20418: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20419: LD_VAR 0 14
20423: PPUSH
20424: LD_VAR 0 12
20428: PUSH
20429: LD_INT 1
20431: ARRAY
20432: PPUSH
20433: CALL_OW 52
// end ;
20437: GO 20076
20439: POP
20440: POP
// end ;
20441: GO 19378
20443: POP
20444: POP
// result := result ^ buildings ;
20445: LD_ADDR_VAR 0 7
20449: PUSH
20450: LD_VAR 0 7
20454: PUSH
20455: LD_VAR 0 18
20459: ADD
20460: ST_TO_ADDR
// end else
20461: GO 20604
// begin for i = 1 to personel do
20463: LD_ADDR_VAR 0 8
20467: PUSH
20468: DOUBLE
20469: LD_INT 1
20471: DEC
20472: ST_TO_ADDR
20473: LD_VAR 0 6
20477: PUSH
20478: FOR_TO
20479: IFFALSE 20602
// begin if i > 4 then
20481: LD_VAR 0 8
20485: PUSH
20486: LD_INT 4
20488: GREATER
20489: IFFALSE 20493
// break ;
20491: GO 20602
// x := personel [ i ] ;
20493: LD_ADDR_VAR 0 13
20497: PUSH
20498: LD_VAR 0 6
20502: PUSH
20503: LD_VAR 0 8
20507: ARRAY
20508: ST_TO_ADDR
// if x = - 1 then
20509: LD_VAR 0 13
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: EQUAL
20518: IFFALSE 20522
// continue ;
20520: GO 20478
// PrepareHuman ( false , i , skill ) ;
20522: LD_INT 0
20524: PPUSH
20525: LD_VAR 0 8
20529: PPUSH
20530: LD_VAR 0 4
20534: PPUSH
20535: CALL_OW 380
// un := CreateHuman ;
20539: LD_ADDR_VAR 0 14
20543: PUSH
20544: CALL_OW 44
20548: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20549: LD_VAR 0 14
20553: PPUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 250
20563: PPUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 251
20573: PPUSH
20574: LD_INT 10
20576: PPUSH
20577: LD_INT 0
20579: PPUSH
20580: CALL_OW 50
// result := result ^ un ;
20584: LD_ADDR_VAR 0 7
20588: PUSH
20589: LD_VAR 0 7
20593: PUSH
20594: LD_VAR 0 14
20598: ADD
20599: ST_TO_ADDR
// end ;
20600: GO 20478
20602: POP
20603: POP
// end ; end ;
20604: LD_VAR 0 7
20608: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20609: LD_INT 0
20611: PPUSH
20612: PPUSH
20613: PPUSH
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
// result := false ;
20627: LD_ADDR_VAR 0 3
20631: PUSH
20632: LD_INT 0
20634: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20635: LD_VAR 0 1
20639: NOT
20640: PUSH
20641: LD_VAR 0 1
20645: PPUSH
20646: CALL_OW 266
20650: PUSH
20651: LD_INT 32
20653: PUSH
20654: LD_INT 33
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: IN
20661: NOT
20662: OR
20663: IFFALSE 20667
// exit ;
20665: GO 21776
// nat := GetNation ( tower ) ;
20667: LD_ADDR_VAR 0 12
20671: PUSH
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 248
20681: ST_TO_ADDR
// side := GetSide ( tower ) ;
20682: LD_ADDR_VAR 0 16
20686: PUSH
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 255
20696: ST_TO_ADDR
// x := GetX ( tower ) ;
20697: LD_ADDR_VAR 0 10
20701: PUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 250
20711: ST_TO_ADDR
// y := GetY ( tower ) ;
20712: LD_ADDR_VAR 0 11
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 251
20726: ST_TO_ADDR
// if not x or not y then
20727: LD_VAR 0 10
20731: NOT
20732: PUSH
20733: LD_VAR 0 11
20737: NOT
20738: OR
20739: IFFALSE 20743
// exit ;
20741: GO 21776
// weapon := 0 ;
20743: LD_ADDR_VAR 0 18
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// fac_list := [ ] ;
20751: LD_ADDR_VAR 0 17
20755: PUSH
20756: EMPTY
20757: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20758: LD_ADDR_VAR 0 6
20762: PUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 274
20772: PPUSH
20773: LD_VAR 0 2
20777: PPUSH
20778: LD_INT 0
20780: PPUSH
20781: CALL 18347 0 3
20785: PPUSH
20786: LD_INT 30
20788: PUSH
20789: LD_INT 3
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 72
20800: ST_TO_ADDR
// if not factories then
20801: LD_VAR 0 6
20805: NOT
20806: IFFALSE 20810
// exit ;
20808: GO 21776
// for i in factories do
20810: LD_ADDR_VAR 0 8
20814: PUSH
20815: LD_VAR 0 6
20819: PUSH
20820: FOR_IN
20821: IFFALSE 20846
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20823: LD_ADDR_VAR 0 17
20827: PUSH
20828: LD_VAR 0 17
20832: PUSH
20833: LD_VAR 0 8
20837: PPUSH
20838: CALL_OW 478
20842: UNION
20843: ST_TO_ADDR
20844: GO 20820
20846: POP
20847: POP
// if not fac_list then
20848: LD_VAR 0 17
20852: NOT
20853: IFFALSE 20857
// exit ;
20855: GO 21776
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20857: LD_ADDR_VAR 0 5
20861: PUSH
20862: LD_INT 4
20864: PUSH
20865: LD_INT 5
20867: PUSH
20868: LD_INT 9
20870: PUSH
20871: LD_INT 10
20873: PUSH
20874: LD_INT 6
20876: PUSH
20877: LD_INT 7
20879: PUSH
20880: LD_INT 11
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 27
20894: PUSH
20895: LD_INT 28
20897: PUSH
20898: LD_INT 26
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 43
20912: PUSH
20913: LD_INT 44
20915: PUSH
20916: LD_INT 46
20918: PUSH
20919: LD_INT 45
20921: PUSH
20922: LD_INT 47
20924: PUSH
20925: LD_INT 49
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: LD_VAR 0 12
20945: ARRAY
20946: ST_TO_ADDR
// list := list isect fac_list ;
20947: LD_ADDR_VAR 0 5
20951: PUSH
20952: LD_VAR 0 5
20956: PUSH
20957: LD_VAR 0 17
20961: ISECT
20962: ST_TO_ADDR
// if not list then
20963: LD_VAR 0 5
20967: NOT
20968: IFFALSE 20972
// exit ;
20970: GO 21776
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20972: LD_VAR 0 12
20976: PUSH
20977: LD_INT 3
20979: EQUAL
20980: PUSH
20981: LD_INT 49
20983: PUSH
20984: LD_VAR 0 5
20988: IN
20989: AND
20990: PUSH
20991: LD_INT 31
20993: PPUSH
20994: LD_VAR 0 16
20998: PPUSH
20999: CALL_OW 321
21003: PUSH
21004: LD_INT 2
21006: EQUAL
21007: AND
21008: IFFALSE 21068
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21010: LD_INT 22
21012: PUSH
21013: LD_VAR 0 16
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 35
21024: PUSH
21025: LD_INT 49
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 91
21034: PUSH
21035: LD_VAR 0 1
21039: PUSH
21040: LD_INT 10
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL_OW 69
21057: NOT
21058: IFFALSE 21068
// weapon := ru_time_lapser ;
21060: LD_ADDR_VAR 0 18
21064: PUSH
21065: LD_INT 49
21067: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21068: LD_VAR 0 12
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: IN
21083: PUSH
21084: LD_INT 11
21086: PUSH
21087: LD_VAR 0 5
21091: IN
21092: PUSH
21093: LD_INT 30
21095: PUSH
21096: LD_VAR 0 5
21100: IN
21101: OR
21102: AND
21103: PUSH
21104: LD_INT 6
21106: PPUSH
21107: LD_VAR 0 16
21111: PPUSH
21112: CALL_OW 321
21116: PUSH
21117: LD_INT 2
21119: EQUAL
21120: AND
21121: IFFALSE 21286
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21123: LD_INT 22
21125: PUSH
21126: LD_VAR 0 16
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 35
21140: PUSH
21141: LD_INT 11
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 35
21150: PUSH
21151: LD_INT 30
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 91
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: LD_INT 18
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: NOT
21189: PUSH
21190: LD_INT 22
21192: PUSH
21193: LD_VAR 0 16
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 30
21207: PUSH
21208: LD_INT 32
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 30
21217: PUSH
21218: LD_INT 33
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 91
21232: PUSH
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: PUSH
21259: LD_INT 2
21261: GREATER
21262: AND
21263: IFFALSE 21286
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21265: LD_ADDR_VAR 0 18
21269: PUSH
21270: LD_INT 11
21272: PUSH
21273: LD_INT 30
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_VAR 0 12
21284: ARRAY
21285: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21286: LD_VAR 0 18
21290: NOT
21291: PUSH
21292: LD_INT 40
21294: PPUSH
21295: LD_VAR 0 16
21299: PPUSH
21300: CALL_OW 321
21304: PUSH
21305: LD_INT 2
21307: EQUAL
21308: AND
21309: PUSH
21310: LD_INT 7
21312: PUSH
21313: LD_VAR 0 5
21317: IN
21318: PUSH
21319: LD_INT 28
21321: PUSH
21322: LD_VAR 0 5
21326: IN
21327: OR
21328: PUSH
21329: LD_INT 45
21331: PUSH
21332: LD_VAR 0 5
21336: IN
21337: OR
21338: AND
21339: IFFALSE 21593
// begin hex := GetHexInfo ( x , y ) ;
21341: LD_ADDR_VAR 0 4
21345: PUSH
21346: LD_VAR 0 10
21350: PPUSH
21351: LD_VAR 0 11
21355: PPUSH
21356: CALL_OW 546
21360: ST_TO_ADDR
// if hex [ 1 ] then
21361: LD_VAR 0 4
21365: PUSH
21366: LD_INT 1
21368: ARRAY
21369: IFFALSE 21373
// exit ;
21371: GO 21776
// height := hex [ 2 ] ;
21373: LD_ADDR_VAR 0 15
21377: PUSH
21378: LD_VAR 0 4
21382: PUSH
21383: LD_INT 2
21385: ARRAY
21386: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21387: LD_ADDR_VAR 0 14
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 3
21400: PUSH
21401: LD_INT 5
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: ST_TO_ADDR
// for i in tmp do
21410: LD_ADDR_VAR 0 8
21414: PUSH
21415: LD_VAR 0 14
21419: PUSH
21420: FOR_IN
21421: IFFALSE 21591
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21423: LD_ADDR_VAR 0 9
21427: PUSH
21428: LD_VAR 0 10
21432: PPUSH
21433: LD_VAR 0 8
21437: PPUSH
21438: LD_INT 5
21440: PPUSH
21441: CALL_OW 272
21445: PUSH
21446: LD_VAR 0 11
21450: PPUSH
21451: LD_VAR 0 8
21455: PPUSH
21456: LD_INT 5
21458: PPUSH
21459: CALL_OW 273
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21468: LD_VAR 0 9
21472: PUSH
21473: LD_INT 1
21475: ARRAY
21476: PPUSH
21477: LD_VAR 0 9
21481: PUSH
21482: LD_INT 2
21484: ARRAY
21485: PPUSH
21486: CALL_OW 488
21490: IFFALSE 21589
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21492: LD_ADDR_VAR 0 4
21496: PUSH
21497: LD_VAR 0 9
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: PPUSH
21506: LD_VAR 0 9
21510: PUSH
21511: LD_INT 2
21513: ARRAY
21514: PPUSH
21515: CALL_OW 546
21519: ST_TO_ADDR
// if hex [ 1 ] then
21520: LD_VAR 0 4
21524: PUSH
21525: LD_INT 1
21527: ARRAY
21528: IFFALSE 21532
// continue ;
21530: GO 21420
// h := hex [ 2 ] ;
21532: LD_ADDR_VAR 0 13
21536: PUSH
21537: LD_VAR 0 4
21541: PUSH
21542: LD_INT 2
21544: ARRAY
21545: ST_TO_ADDR
// if h + 7 < height then
21546: LD_VAR 0 13
21550: PUSH
21551: LD_INT 7
21553: PLUS
21554: PUSH
21555: LD_VAR 0 15
21559: LESS
21560: IFFALSE 21589
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21562: LD_ADDR_VAR 0 18
21566: PUSH
21567: LD_INT 7
21569: PUSH
21570: LD_INT 28
21572: PUSH
21573: LD_INT 45
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: PUSH
21581: LD_VAR 0 12
21585: ARRAY
21586: ST_TO_ADDR
// break ;
21587: GO 21591
// end ; end ; end ;
21589: GO 21420
21591: POP
21592: POP
// end ; if not weapon then
21593: LD_VAR 0 18
21597: NOT
21598: IFFALSE 21658
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21600: LD_ADDR_VAR 0 5
21604: PUSH
21605: LD_VAR 0 5
21609: PUSH
21610: LD_INT 11
21612: PUSH
21613: LD_INT 30
21615: PUSH
21616: LD_INT 49
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: DIFF
21624: ST_TO_ADDR
// if not list then
21625: LD_VAR 0 5
21629: NOT
21630: IFFALSE 21634
// exit ;
21632: GO 21776
// weapon := list [ rand ( 1 , list ) ] ;
21634: LD_ADDR_VAR 0 18
21638: PUSH
21639: LD_VAR 0 5
21643: PUSH
21644: LD_INT 1
21646: PPUSH
21647: LD_VAR 0 5
21651: PPUSH
21652: CALL_OW 12
21656: ARRAY
21657: ST_TO_ADDR
// end ; if weapon then
21658: LD_VAR 0 18
21662: IFFALSE 21776
// begin tmp := CostOfWeapon ( weapon ) ;
21664: LD_ADDR_VAR 0 14
21668: PUSH
21669: LD_VAR 0 18
21673: PPUSH
21674: CALL_OW 451
21678: ST_TO_ADDR
// j := GetBase ( tower ) ;
21679: LD_ADDR_VAR 0 9
21683: PUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 274
21693: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21694: LD_VAR 0 9
21698: PPUSH
21699: LD_INT 1
21701: PPUSH
21702: CALL_OW 275
21706: PUSH
21707: LD_VAR 0 14
21711: PUSH
21712: LD_INT 1
21714: ARRAY
21715: GREATEREQUAL
21716: PUSH
21717: LD_VAR 0 9
21721: PPUSH
21722: LD_INT 2
21724: PPUSH
21725: CALL_OW 275
21729: PUSH
21730: LD_VAR 0 14
21734: PUSH
21735: LD_INT 2
21737: ARRAY
21738: GREATEREQUAL
21739: AND
21740: PUSH
21741: LD_VAR 0 9
21745: PPUSH
21746: LD_INT 3
21748: PPUSH
21749: CALL_OW 275
21753: PUSH
21754: LD_VAR 0 14
21758: PUSH
21759: LD_INT 3
21761: ARRAY
21762: GREATEREQUAL
21763: AND
21764: IFFALSE 21776
// result := weapon ;
21766: LD_ADDR_VAR 0 3
21770: PUSH
21771: LD_VAR 0 18
21775: ST_TO_ADDR
// end ; end ;
21776: LD_VAR 0 3
21780: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21781: LD_INT 0
21783: PPUSH
21784: PPUSH
// result := true ;
21785: LD_ADDR_VAR 0 3
21789: PUSH
21790: LD_INT 1
21792: ST_TO_ADDR
// if array1 = array2 then
21793: LD_VAR 0 1
21797: PUSH
21798: LD_VAR 0 2
21802: EQUAL
21803: IFFALSE 21863
// begin for i = 1 to array1 do
21805: LD_ADDR_VAR 0 4
21809: PUSH
21810: DOUBLE
21811: LD_INT 1
21813: DEC
21814: ST_TO_ADDR
21815: LD_VAR 0 1
21819: PUSH
21820: FOR_TO
21821: IFFALSE 21859
// if array1 [ i ] <> array2 [ i ] then
21823: LD_VAR 0 1
21827: PUSH
21828: LD_VAR 0 4
21832: ARRAY
21833: PUSH
21834: LD_VAR 0 2
21838: PUSH
21839: LD_VAR 0 4
21843: ARRAY
21844: NONEQUAL
21845: IFFALSE 21857
// begin result := false ;
21847: LD_ADDR_VAR 0 3
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// break ;
21855: GO 21859
// end ;
21857: GO 21820
21859: POP
21860: POP
// end else
21861: GO 21871
// result := false ;
21863: LD_ADDR_VAR 0 3
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// end ;
21871: LD_VAR 0 3
21875: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21876: LD_INT 0
21878: PPUSH
21879: PPUSH
// if not array1 or not array2 then
21880: LD_VAR 0 1
21884: NOT
21885: PUSH
21886: LD_VAR 0 2
21890: NOT
21891: OR
21892: IFFALSE 21896
// exit ;
21894: GO 21960
// result := true ;
21896: LD_ADDR_VAR 0 3
21900: PUSH
21901: LD_INT 1
21903: ST_TO_ADDR
// for i = 1 to array1 do
21904: LD_ADDR_VAR 0 4
21908: PUSH
21909: DOUBLE
21910: LD_INT 1
21912: DEC
21913: ST_TO_ADDR
21914: LD_VAR 0 1
21918: PUSH
21919: FOR_TO
21920: IFFALSE 21958
// if array1 [ i ] <> array2 [ i ] then
21922: LD_VAR 0 1
21926: PUSH
21927: LD_VAR 0 4
21931: ARRAY
21932: PUSH
21933: LD_VAR 0 2
21937: PUSH
21938: LD_VAR 0 4
21942: ARRAY
21943: NONEQUAL
21944: IFFALSE 21956
// begin result := false ;
21946: LD_ADDR_VAR 0 3
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// break ;
21954: GO 21958
// end ;
21956: GO 21919
21958: POP
21959: POP
// end ;
21960: LD_VAR 0 3
21964: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
21969: PPUSH
// pom := GetBase ( fac ) ;
21970: LD_ADDR_VAR 0 5
21974: PUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 274
21984: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21985: LD_ADDR_VAR 0 4
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: PPUSH
21999: LD_VAR 0 2
22003: PUSH
22004: LD_INT 2
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 2
22012: PUSH
22013: LD_INT 3
22015: ARRAY
22016: PPUSH
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 4
22024: ARRAY
22025: PPUSH
22026: CALL_OW 449
22030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22031: LD_ADDR_VAR 0 3
22035: PUSH
22036: LD_VAR 0 5
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: CALL_OW 275
22048: PUSH
22049: LD_VAR 0 4
22053: PUSH
22054: LD_INT 1
22056: ARRAY
22057: GREATEREQUAL
22058: PUSH
22059: LD_VAR 0 5
22063: PPUSH
22064: LD_INT 2
22066: PPUSH
22067: CALL_OW 275
22071: PUSH
22072: LD_VAR 0 4
22076: PUSH
22077: LD_INT 2
22079: ARRAY
22080: GREATEREQUAL
22081: AND
22082: PUSH
22083: LD_VAR 0 5
22087: PPUSH
22088: LD_INT 3
22090: PPUSH
22091: CALL_OW 275
22095: PUSH
22096: LD_VAR 0 4
22100: PUSH
22101: LD_INT 3
22103: ARRAY
22104: GREATEREQUAL
22105: AND
22106: ST_TO_ADDR
// end ;
22107: LD_VAR 0 3
22111: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22112: LD_INT 0
22114: PPUSH
22115: PPUSH
22116: PPUSH
22117: PPUSH
// pom := GetBase ( building ) ;
22118: LD_ADDR_VAR 0 3
22122: PUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: CALL_OW 274
22132: ST_TO_ADDR
// if not pom then
22133: LD_VAR 0 3
22137: NOT
22138: IFFALSE 22142
// exit ;
22140: GO 22312
// btype := GetBType ( building ) ;
22142: LD_ADDR_VAR 0 5
22146: PUSH
22147: LD_VAR 0 1
22151: PPUSH
22152: CALL_OW 266
22156: ST_TO_ADDR
// if btype = b_armoury then
22157: LD_VAR 0 5
22161: PUSH
22162: LD_INT 4
22164: EQUAL
22165: IFFALSE 22175
// btype := b_barracks ;
22167: LD_ADDR_VAR 0 5
22171: PUSH
22172: LD_INT 5
22174: ST_TO_ADDR
// if btype = b_depot then
22175: LD_VAR 0 5
22179: PUSH
22180: LD_INT 0
22182: EQUAL
22183: IFFALSE 22193
// btype := b_warehouse ;
22185: LD_ADDR_VAR 0 5
22189: PUSH
22190: LD_INT 1
22192: ST_TO_ADDR
// if btype = b_workshop then
22193: LD_VAR 0 5
22197: PUSH
22198: LD_INT 2
22200: EQUAL
22201: IFFALSE 22211
// btype := b_factory ;
22203: LD_ADDR_VAR 0 5
22207: PUSH
22208: LD_INT 3
22210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22211: LD_ADDR_VAR 0 4
22215: PUSH
22216: LD_VAR 0 5
22220: PPUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 248
22230: PPUSH
22231: CALL_OW 450
22235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 275
22253: PUSH
22254: LD_VAR 0 4
22258: PUSH
22259: LD_INT 1
22261: ARRAY
22262: GREATEREQUAL
22263: PUSH
22264: LD_VAR 0 3
22268: PPUSH
22269: LD_INT 2
22271: PPUSH
22272: CALL_OW 275
22276: PUSH
22277: LD_VAR 0 4
22281: PUSH
22282: LD_INT 2
22284: ARRAY
22285: GREATEREQUAL
22286: AND
22287: PUSH
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_INT 3
22295: PPUSH
22296: CALL_OW 275
22300: PUSH
22301: LD_VAR 0 4
22305: PUSH
22306: LD_INT 3
22308: ARRAY
22309: GREATEREQUAL
22310: AND
22311: ST_TO_ADDR
// end ;
22312: LD_VAR 0 2
22316: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22317: LD_INT 0
22319: PPUSH
22320: PPUSH
22321: PPUSH
// pom := GetBase ( building ) ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 274
22336: ST_TO_ADDR
// if not pom then
22337: LD_VAR 0 4
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22447
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 248
22365: PPUSH
22366: CALL_OW 450
22370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22371: LD_ADDR_VAR 0 3
22375: PUSH
22376: LD_VAR 0 4
22380: PPUSH
22381: LD_INT 1
22383: PPUSH
22384: CALL_OW 275
22388: PUSH
22389: LD_VAR 0 5
22393: PUSH
22394: LD_INT 1
22396: ARRAY
22397: GREATEREQUAL
22398: PUSH
22399: LD_VAR 0 4
22403: PPUSH
22404: LD_INT 2
22406: PPUSH
22407: CALL_OW 275
22411: PUSH
22412: LD_VAR 0 5
22416: PUSH
22417: LD_INT 2
22419: ARRAY
22420: GREATEREQUAL
22421: AND
22422: PUSH
22423: LD_VAR 0 4
22427: PPUSH
22428: LD_INT 3
22430: PPUSH
22431: CALL_OW 275
22435: PUSH
22436: LD_VAR 0 5
22440: PUSH
22441: LD_INT 3
22443: ARRAY
22444: GREATEREQUAL
22445: AND
22446: ST_TO_ADDR
// end ;
22447: LD_VAR 0 3
22451: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22452: LD_INT 0
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
22461: PPUSH
22462: PPUSH
22463: PPUSH
22464: PPUSH
// result := false ;
22465: LD_ADDR_VAR 0 8
22469: PUSH
22470: LD_INT 0
22472: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22473: LD_VAR 0 5
22477: NOT
22478: PUSH
22479: LD_VAR 0 1
22483: NOT
22484: OR
22485: PUSH
22486: LD_VAR 0 2
22490: NOT
22491: OR
22492: PUSH
22493: LD_VAR 0 3
22497: NOT
22498: OR
22499: IFFALSE 22503
// exit ;
22501: GO 23317
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22503: LD_ADDR_VAR 0 14
22507: PUSH
22508: LD_VAR 0 1
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: LD_VAR 0 3
22522: PPUSH
22523: LD_VAR 0 4
22527: PPUSH
22528: LD_VAR 0 5
22532: PUSH
22533: LD_INT 1
22535: ARRAY
22536: PPUSH
22537: CALL_OW 248
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: CALL 24570 0 6
22549: ST_TO_ADDR
// if not hexes then
22550: LD_VAR 0 14
22554: NOT
22555: IFFALSE 22559
// exit ;
22557: GO 23317
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22559: LD_ADDR_VAR 0 17
22563: PUSH
22564: LD_VAR 0 5
22568: PPUSH
22569: LD_INT 22
22571: PUSH
22572: LD_VAR 0 13
22576: PPUSH
22577: CALL_OW 255
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 30
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PPUSH
22618: CALL_OW 72
22622: ST_TO_ADDR
// for i = 1 to hexes do
22623: LD_ADDR_VAR 0 9
22627: PUSH
22628: DOUBLE
22629: LD_INT 1
22631: DEC
22632: ST_TO_ADDR
22633: LD_VAR 0 14
22637: PUSH
22638: FOR_TO
22639: IFFALSE 23315
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22641: LD_ADDR_VAR 0 13
22645: PUSH
22646: LD_VAR 0 14
22650: PUSH
22651: LD_VAR 0 9
22655: ARRAY
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PPUSH
22661: LD_VAR 0 14
22665: PUSH
22666: LD_VAR 0 9
22670: ARRAY
22671: PUSH
22672: LD_INT 2
22674: ARRAY
22675: PPUSH
22676: CALL_OW 428
22680: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22681: LD_VAR 0 14
22685: PUSH
22686: LD_VAR 0 9
22690: ARRAY
22691: PUSH
22692: LD_INT 1
22694: ARRAY
22695: PPUSH
22696: LD_VAR 0 14
22700: PUSH
22701: LD_VAR 0 9
22705: ARRAY
22706: PUSH
22707: LD_INT 2
22709: ARRAY
22710: PPUSH
22711: CALL_OW 351
22715: PUSH
22716: LD_VAR 0 14
22720: PUSH
22721: LD_VAR 0 9
22725: ARRAY
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PPUSH
22731: LD_VAR 0 14
22735: PUSH
22736: LD_VAR 0 9
22740: ARRAY
22741: PUSH
22742: LD_INT 2
22744: ARRAY
22745: PPUSH
22746: CALL_OW 488
22750: NOT
22751: OR
22752: PUSH
22753: LD_VAR 0 13
22757: PPUSH
22758: CALL_OW 247
22762: PUSH
22763: LD_INT 3
22765: EQUAL
22766: OR
22767: IFFALSE 22773
// exit ;
22769: POP
22770: POP
22771: GO 23317
// if not tmp then
22773: LD_VAR 0 13
22777: NOT
22778: IFFALSE 22782
// continue ;
22780: GO 22638
// result := true ;
22782: LD_ADDR_VAR 0 8
22786: PUSH
22787: LD_INT 1
22789: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22790: LD_VAR 0 6
22794: PUSH
22795: LD_VAR 0 13
22799: PPUSH
22800: CALL_OW 247
22804: PUSH
22805: LD_INT 2
22807: EQUAL
22808: AND
22809: PUSH
22810: LD_VAR 0 13
22814: PPUSH
22815: CALL_OW 263
22819: PUSH
22820: LD_INT 1
22822: EQUAL
22823: AND
22824: IFFALSE 22988
// begin if IsDrivenBy ( tmp ) then
22826: LD_VAR 0 13
22830: PPUSH
22831: CALL_OW 311
22835: IFFALSE 22839
// continue ;
22837: GO 22638
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22839: LD_VAR 0 6
22843: PPUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 60
22849: PUSH
22850: EMPTY
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 3
22859: PUSH
22860: LD_INT 55
22862: PUSH
22863: EMPTY
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 72
22878: IFFALSE 22986
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22880: LD_ADDR_VAR 0 18
22884: PUSH
22885: LD_VAR 0 6
22889: PPUSH
22890: LD_INT 3
22892: PUSH
22893: LD_INT 60
22895: PUSH
22896: EMPTY
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 3
22905: PUSH
22906: LD_INT 55
22908: PUSH
22909: EMPTY
22910: LIST
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 72
22924: PUSH
22925: LD_INT 1
22927: ARRAY
22928: ST_TO_ADDR
// if IsInUnit ( driver ) then
22929: LD_VAR 0 18
22933: PPUSH
22934: CALL_OW 310
22938: IFFALSE 22949
// ComExit ( driver ) ;
22940: LD_VAR 0 18
22944: PPUSH
22945: CALL 48512 0 1
// AddComEnterUnit ( driver , tmp ) ;
22949: LD_VAR 0 18
22953: PPUSH
22954: LD_VAR 0 13
22958: PPUSH
22959: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22963: LD_VAR 0 18
22967: PPUSH
22968: LD_VAR 0 7
22972: PPUSH
22973: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22977: LD_VAR 0 18
22981: PPUSH
22982: CALL_OW 181
// end ; continue ;
22986: GO 22638
// end ; if not cleaners or not tmp in cleaners then
22988: LD_VAR 0 6
22992: NOT
22993: PUSH
22994: LD_VAR 0 13
22998: PUSH
22999: LD_VAR 0 6
23003: IN
23004: NOT
23005: OR
23006: IFFALSE 23313
// begin if dep then
23008: LD_VAR 0 17
23012: IFFALSE 23148
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23014: LD_ADDR_VAR 0 16
23018: PUSH
23019: LD_VAR 0 17
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: CALL_OW 250
23032: PPUSH
23033: LD_VAR 0 17
23037: PUSH
23038: LD_INT 1
23040: ARRAY
23041: PPUSH
23042: CALL_OW 254
23046: PPUSH
23047: LD_INT 5
23049: PPUSH
23050: CALL_OW 272
23054: PUSH
23055: LD_VAR 0 17
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: CALL_OW 251
23068: PPUSH
23069: LD_VAR 0 17
23073: PUSH
23074: LD_INT 1
23076: ARRAY
23077: PPUSH
23078: CALL_OW 254
23082: PPUSH
23083: LD_INT 5
23085: PPUSH
23086: CALL_OW 273
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23095: LD_VAR 0 16
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: LD_VAR 0 16
23108: PUSH
23109: LD_INT 2
23111: ARRAY
23112: PPUSH
23113: CALL_OW 488
23117: IFFALSE 23148
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23119: LD_VAR 0 13
23123: PPUSH
23124: LD_VAR 0 16
23128: PUSH
23129: LD_INT 1
23131: ARRAY
23132: PPUSH
23133: LD_VAR 0 16
23137: PUSH
23138: LD_INT 2
23140: ARRAY
23141: PPUSH
23142: CALL_OW 111
// continue ;
23146: GO 22638
// end ; end ; r := GetDir ( tmp ) ;
23148: LD_ADDR_VAR 0 15
23152: PUSH
23153: LD_VAR 0 13
23157: PPUSH
23158: CALL_OW 254
23162: ST_TO_ADDR
// if r = 5 then
23163: LD_VAR 0 15
23167: PUSH
23168: LD_INT 5
23170: EQUAL
23171: IFFALSE 23181
// r := 0 ;
23173: LD_ADDR_VAR 0 15
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// for j = r to 5 do
23181: LD_ADDR_VAR 0 10
23185: PUSH
23186: DOUBLE
23187: LD_VAR 0 15
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 5
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23311
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23199: LD_ADDR_VAR 0 11
23203: PUSH
23204: LD_VAR 0 13
23208: PPUSH
23209: CALL_OW 250
23213: PPUSH
23214: LD_VAR 0 10
23218: PPUSH
23219: LD_INT 2
23221: PPUSH
23222: CALL_OW 272
23226: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23227: LD_ADDR_VAR 0 12
23231: PUSH
23232: LD_VAR 0 13
23236: PPUSH
23237: CALL_OW 251
23241: PPUSH
23242: LD_VAR 0 10
23246: PPUSH
23247: LD_INT 2
23249: PPUSH
23250: CALL_OW 273
23254: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23255: LD_VAR 0 11
23259: PPUSH
23260: LD_VAR 0 12
23264: PPUSH
23265: CALL_OW 488
23269: PUSH
23270: LD_VAR 0 11
23274: PPUSH
23275: LD_VAR 0 12
23279: PPUSH
23280: CALL_OW 428
23284: NOT
23285: AND
23286: IFFALSE 23309
// begin ComMoveXY ( tmp , _x , _y ) ;
23288: LD_VAR 0 13
23292: PPUSH
23293: LD_VAR 0 11
23297: PPUSH
23298: LD_VAR 0 12
23302: PPUSH
23303: CALL_OW 111
// break ;
23307: GO 23311
// end ; end ;
23309: GO 23196
23311: POP
23312: POP
// end ; end ;
23313: GO 22638
23315: POP
23316: POP
// end ;
23317: LD_VAR 0 8
23321: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23322: LD_INT 0
23324: PPUSH
// result := true ;
23325: LD_ADDR_VAR 0 3
23329: PUSH
23330: LD_INT 1
23332: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23333: LD_VAR 0 2
23337: PUSH
23338: LD_INT 24
23340: DOUBLE
23341: EQUAL
23342: IFTRUE 23352
23344: LD_INT 33
23346: DOUBLE
23347: EQUAL
23348: IFTRUE 23352
23350: GO 23377
23352: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_INT 32
23360: PPUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL_OW 321
23370: PUSH
23371: LD_INT 2
23373: EQUAL
23374: ST_TO_ADDR
23375: GO 23693
23377: LD_INT 20
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23385
23383: GO 23410
23385: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23386: LD_ADDR_VAR 0 3
23390: PUSH
23391: LD_INT 6
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 321
23403: PUSH
23404: LD_INT 2
23406: EQUAL
23407: ST_TO_ADDR
23408: GO 23693
23410: LD_INT 22
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23424
23416: LD_INT 36
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23449
23424: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23425: LD_ADDR_VAR 0 3
23429: PUSH
23430: LD_INT 15
23432: PPUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 321
23442: PUSH
23443: LD_INT 2
23445: EQUAL
23446: ST_TO_ADDR
23447: GO 23693
23449: LD_INT 30
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23482
23457: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_INT 20
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 321
23475: PUSH
23476: LD_INT 2
23478: EQUAL
23479: ST_TO_ADDR
23480: GO 23693
23482: LD_INT 28
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23496
23488: LD_INT 21
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23521
23496: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_INT 21
23504: PPUSH
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL_OW 321
23514: PUSH
23515: LD_INT 2
23517: EQUAL
23518: ST_TO_ADDR
23519: GO 23693
23521: LD_INT 16
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23554
23529: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_INT 84
23537: PPUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 321
23547: PUSH
23548: LD_INT 2
23550: EQUAL
23551: ST_TO_ADDR
23552: GO 23693
23554: LD_INT 19
23556: DOUBLE
23557: EQUAL
23558: IFTRUE 23568
23560: LD_INT 23
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23593
23568: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23569: LD_ADDR_VAR 0 3
23573: PUSH
23574: LD_INT 83
23576: PPUSH
23577: LD_VAR 0 1
23581: PPUSH
23582: CALL_OW 321
23586: PUSH
23587: LD_INT 2
23589: EQUAL
23590: ST_TO_ADDR
23591: GO 23693
23593: LD_INT 17
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23626
23601: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23602: LD_ADDR_VAR 0 3
23606: PUSH
23607: LD_INT 39
23609: PPUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 321
23619: PUSH
23620: LD_INT 2
23622: EQUAL
23623: ST_TO_ADDR
23624: GO 23693
23626: LD_INT 18
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23659
23634: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23635: LD_ADDR_VAR 0 3
23639: PUSH
23640: LD_INT 40
23642: PPUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 321
23652: PUSH
23653: LD_INT 2
23655: EQUAL
23656: ST_TO_ADDR
23657: GO 23693
23659: LD_INT 27
23661: DOUBLE
23662: EQUAL
23663: IFTRUE 23667
23665: GO 23692
23667: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_INT 35
23675: PPUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: CALL_OW 321
23685: PUSH
23686: LD_INT 2
23688: EQUAL
23689: ST_TO_ADDR
23690: GO 23693
23692: POP
// end ;
23693: LD_VAR 0 3
23697: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23698: LD_INT 0
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
// result := false ;
23711: LD_ADDR_VAR 0 6
23715: PUSH
23716: LD_INT 0
23718: ST_TO_ADDR
// if btype = b_depot then
23719: LD_VAR 0 2
23723: PUSH
23724: LD_INT 0
23726: EQUAL
23727: IFFALSE 23739
// begin result := true ;
23729: LD_ADDR_VAR 0 6
23733: PUSH
23734: LD_INT 1
23736: ST_TO_ADDR
// exit ;
23737: GO 24565
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23739: LD_VAR 0 1
23743: NOT
23744: PUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: IN
23765: NOT
23766: OR
23767: PUSH
23768: LD_VAR 0 2
23772: NOT
23773: OR
23774: PUSH
23775: LD_VAR 0 5
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 4
23794: PUSH
23795: LD_INT 5
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: IN
23806: NOT
23807: OR
23808: PUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: CALL_OW 488
23823: NOT
23824: OR
23825: IFFALSE 23829
// exit ;
23827: GO 24565
// side := GetSide ( depot ) ;
23829: LD_ADDR_VAR 0 9
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 255
23843: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23844: LD_VAR 0 9
23848: PPUSH
23849: LD_VAR 0 2
23853: PPUSH
23854: CALL 23322 0 2
23858: NOT
23859: IFFALSE 23863
// exit ;
23861: GO 24565
// pom := GetBase ( depot ) ;
23863: LD_ADDR_VAR 0 10
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 274
23877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23878: LD_ADDR_VAR 0 11
23882: PUSH
23883: LD_VAR 0 2
23887: PPUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: CALL_OW 248
23897: PPUSH
23898: CALL_OW 450
23902: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23903: LD_VAR 0 10
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: CALL_OW 275
23915: PUSH
23916: LD_VAR 0 11
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: GREATEREQUAL
23925: PUSH
23926: LD_VAR 0 10
23930: PPUSH
23931: LD_INT 2
23933: PPUSH
23934: CALL_OW 275
23938: PUSH
23939: LD_VAR 0 11
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: GREATEREQUAL
23948: AND
23949: PUSH
23950: LD_VAR 0 10
23954: PPUSH
23955: LD_INT 3
23957: PPUSH
23958: CALL_OW 275
23962: PUSH
23963: LD_VAR 0 11
23967: PUSH
23968: LD_INT 3
23970: ARRAY
23971: GREATEREQUAL
23972: AND
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24565
// if GetBType ( depot ) = b_depot then
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 266
23987: PUSH
23988: LD_INT 0
23990: EQUAL
23991: IFFALSE 24003
// dist := 28 else
23993: LD_ADDR_VAR 0 14
23997: PUSH
23998: LD_INT 28
24000: ST_TO_ADDR
24001: GO 24011
// dist := 36 ;
24003: LD_ADDR_VAR 0 14
24007: PUSH
24008: LD_INT 36
24010: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_VAR 0 3
24020: PPUSH
24021: LD_VAR 0 4
24025: PPUSH
24026: CALL_OW 297
24030: PUSH
24031: LD_VAR 0 14
24035: GREATER
24036: IFFALSE 24040
// exit ;
24038: GO 24565
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24040: LD_ADDR_VAR 0 12
24044: PUSH
24045: LD_VAR 0 2
24049: PPUSH
24050: LD_VAR 0 3
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: LD_VAR 0 5
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 248
24074: PPUSH
24075: LD_INT 0
24077: PPUSH
24078: CALL 24570 0 6
24082: ST_TO_ADDR
// if not hexes then
24083: LD_VAR 0 12
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24565
// hex := GetHexInfo ( x , y ) ;
24092: LD_ADDR_VAR 0 15
24096: PUSH
24097: LD_VAR 0 3
24101: PPUSH
24102: LD_VAR 0 4
24106: PPUSH
24107: CALL_OW 546
24111: ST_TO_ADDR
// if hex [ 1 ] then
24112: LD_VAR 0 15
24116: PUSH
24117: LD_INT 1
24119: ARRAY
24120: IFFALSE 24124
// exit ;
24122: GO 24565
// height := hex [ 2 ] ;
24124: LD_ADDR_VAR 0 13
24128: PUSH
24129: LD_VAR 0 15
24133: PUSH
24134: LD_INT 2
24136: ARRAY
24137: ST_TO_ADDR
// for i = 1 to hexes do
24138: LD_ADDR_VAR 0 7
24142: PUSH
24143: DOUBLE
24144: LD_INT 1
24146: DEC
24147: ST_TO_ADDR
24148: LD_VAR 0 12
24152: PUSH
24153: FOR_TO
24154: IFFALSE 24484
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24156: LD_VAR 0 12
24160: PUSH
24161: LD_VAR 0 7
24165: ARRAY
24166: PUSH
24167: LD_INT 1
24169: ARRAY
24170: PPUSH
24171: LD_VAR 0 12
24175: PUSH
24176: LD_VAR 0 7
24180: ARRAY
24181: PUSH
24182: LD_INT 2
24184: ARRAY
24185: PPUSH
24186: CALL_OW 488
24190: NOT
24191: PUSH
24192: LD_VAR 0 12
24196: PUSH
24197: LD_VAR 0 7
24201: ARRAY
24202: PUSH
24203: LD_INT 1
24205: ARRAY
24206: PPUSH
24207: LD_VAR 0 12
24211: PUSH
24212: LD_VAR 0 7
24216: ARRAY
24217: PUSH
24218: LD_INT 2
24220: ARRAY
24221: PPUSH
24222: CALL_OW 428
24226: PUSH
24227: LD_INT 0
24229: GREATER
24230: OR
24231: PUSH
24232: LD_VAR 0 12
24236: PUSH
24237: LD_VAR 0 7
24241: ARRAY
24242: PUSH
24243: LD_INT 1
24245: ARRAY
24246: PPUSH
24247: LD_VAR 0 12
24251: PUSH
24252: LD_VAR 0 7
24256: ARRAY
24257: PUSH
24258: LD_INT 2
24260: ARRAY
24261: PPUSH
24262: CALL_OW 351
24266: OR
24267: IFFALSE 24273
// exit ;
24269: POP
24270: POP
24271: GO 24565
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24273: LD_ADDR_VAR 0 8
24277: PUSH
24278: LD_VAR 0 12
24282: PUSH
24283: LD_VAR 0 7
24287: ARRAY
24288: PUSH
24289: LD_INT 1
24291: ARRAY
24292: PPUSH
24293: LD_VAR 0 12
24297: PUSH
24298: LD_VAR 0 7
24302: ARRAY
24303: PUSH
24304: LD_INT 2
24306: ARRAY
24307: PPUSH
24308: CALL_OW 546
24312: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24313: LD_VAR 0 8
24317: PUSH
24318: LD_INT 1
24320: ARRAY
24321: PUSH
24322: LD_VAR 0 8
24326: PUSH
24327: LD_INT 2
24329: ARRAY
24330: PUSH
24331: LD_VAR 0 13
24335: PUSH
24336: LD_INT 2
24338: PLUS
24339: GREATER
24340: OR
24341: PUSH
24342: LD_VAR 0 8
24346: PUSH
24347: LD_INT 2
24349: ARRAY
24350: PUSH
24351: LD_VAR 0 13
24355: PUSH
24356: LD_INT 2
24358: MINUS
24359: LESS
24360: OR
24361: PUSH
24362: LD_VAR 0 8
24366: PUSH
24367: LD_INT 3
24369: ARRAY
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 8
24376: PUSH
24377: LD_INT 9
24379: PUSH
24380: LD_INT 10
24382: PUSH
24383: LD_INT 11
24385: PUSH
24386: LD_INT 12
24388: PUSH
24389: LD_INT 13
24391: PUSH
24392: LD_INT 16
24394: PUSH
24395: LD_INT 17
24397: PUSH
24398: LD_INT 18
24400: PUSH
24401: LD_INT 19
24403: PUSH
24404: LD_INT 20
24406: PUSH
24407: LD_INT 21
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: IN
24425: NOT
24426: OR
24427: PUSH
24428: LD_VAR 0 8
24432: PUSH
24433: LD_INT 5
24435: ARRAY
24436: NOT
24437: OR
24438: PUSH
24439: LD_VAR 0 8
24443: PUSH
24444: LD_INT 6
24446: ARRAY
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 7
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: IN
24474: NOT
24475: OR
24476: IFFALSE 24482
// exit ;
24478: POP
24479: POP
24480: GO 24565
// end ;
24482: GO 24153
24484: POP
24485: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24486: LD_VAR 0 9
24490: PPUSH
24491: LD_VAR 0 3
24495: PPUSH
24496: LD_VAR 0 4
24500: PPUSH
24501: LD_INT 20
24503: PPUSH
24504: CALL 16488 0 4
24508: PUSH
24509: LD_INT 4
24511: ARRAY
24512: IFFALSE 24516
// exit ;
24514: GO 24565
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 29
24523: PUSH
24524: LD_INT 30
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: IN
24531: PUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: LD_VAR 0 4
24541: PPUSH
24542: LD_VAR 0 9
24546: PPUSH
24547: CALL_OW 440
24551: NOT
24552: AND
24553: IFFALSE 24557
// exit ;
24555: GO 24565
// result := true ;
24557: LD_ADDR_VAR 0 6
24561: PUSH
24562: LD_INT 1
24564: ST_TO_ADDR
// end ;
24565: LD_VAR 0 6
24569: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24570: LD_INT 0
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
// result = [ ] ;
24630: LD_ADDR_VAR 0 7
24634: PUSH
24635: EMPTY
24636: ST_TO_ADDR
// temp_list = [ ] ;
24637: LD_ADDR_VAR 0 9
24641: PUSH
24642: EMPTY
24643: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24644: LD_VAR 0 4
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 3
24660: PUSH
24661: LD_INT 4
24663: PUSH
24664: LD_INT 5
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: IN
24675: NOT
24676: PUSH
24677: LD_VAR 0 1
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: IN
24692: PUSH
24693: LD_VAR 0 5
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: IN
24712: NOT
24713: AND
24714: OR
24715: IFFALSE 24719
// exit ;
24717: GO 43110
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24719: LD_VAR 0 1
24723: PUSH
24724: LD_INT 6
24726: PUSH
24727: LD_INT 7
24729: PUSH
24730: LD_INT 8
24732: PUSH
24733: LD_INT 13
24735: PUSH
24736: LD_INT 12
24738: PUSH
24739: LD_INT 15
24741: PUSH
24742: LD_INT 11
24744: PUSH
24745: LD_INT 14
24747: PUSH
24748: LD_INT 10
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: IN
24762: IFFALSE 24772
// btype = b_lab ;
24764: LD_ADDR_VAR 0 1
24768: PUSH
24769: LD_INT 6
24771: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24772: LD_VAR 0 6
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: IN
24791: NOT
24792: PUSH
24793: LD_VAR 0 1
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: LD_INT 6
24812: PUSH
24813: LD_INT 36
24815: PUSH
24816: LD_INT 4
24818: PUSH
24819: LD_INT 5
24821: PUSH
24822: LD_INT 31
24824: PUSH
24825: LD_INT 32
24827: PUSH
24828: LD_INT 33
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: IN
24844: NOT
24845: PUSH
24846: LD_VAR 0 6
24850: PUSH
24851: LD_INT 1
24853: EQUAL
24854: AND
24855: OR
24856: PUSH
24857: LD_VAR 0 1
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: IN
24872: NOT
24873: PUSH
24874: LD_VAR 0 6
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: OR
24884: IFFALSE 24894
// mode = 0 ;
24886: LD_ADDR_VAR 0 6
24890: PUSH
24891: LD_INT 0
24893: ST_TO_ADDR
// case mode of 0 :
24894: LD_VAR 0 6
24898: PUSH
24899: LD_INT 0
24901: DOUBLE
24902: EQUAL
24903: IFTRUE 24907
24905: GO 36360
24907: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24908: LD_ADDR_VAR 0 11
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 2
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25101: LD_ADDR_VAR 0 12
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 2
25224: NEG
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: NEG
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 2
25247: NEG
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 3
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 3
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25297: LD_ADDR_VAR 0 13
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 2
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 2
25420: NEG
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 3
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: LD_INT 3
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25496: LD_ADDR_VAR 0 14
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 3
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 3
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25692: LD_ADDR_VAR 0 15
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25885: LD_ADDR_VAR 0 16
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: LD_INT 3
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: LD_INT 3
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26078: LD_ADDR_VAR 0 17
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 2
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 2
26174: NEG
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: NEG
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: LD_INT 2
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26308: LD_ADDR_VAR 0 18
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 2
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 2
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26538: LD_ADDR_VAR 0 19
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: LD_INT 2
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 2
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 2
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 2
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: NEG
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: LD_INT 2
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26768: LD_ADDR_VAR 0 20
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: LD_INT 2
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26998: LD_ADDR_VAR 0 21
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27228: LD_ADDR_VAR 0 22
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 2
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27458: LD_ADDR_VAR 0 23
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 2
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: LD_INT 3
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 3
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27738: LD_ADDR_VAR 0 24
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: LD_INT 2
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28014: LD_ADDR_VAR 0 25
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28288: LD_ADDR_VAR 0 26
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 3
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28564: LD_ADDR_VAR 0 27
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: LD_INT 2
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: NEG
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 2
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 3
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 3
28809: NEG
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28844: LD_ADDR_VAR 0 28
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: LD_INT 3
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 3
29079: NEG
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 3
29091: NEG
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29126: LD_ADDR_VAR 0 29
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 2
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: LD_INT 2
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: LD_INT 3
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 3
29370: NEG
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29405: LD_ADDR_VAR 0 30
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: NEG
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 3
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29683: LD_ADDR_VAR 0 31
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 2
29848: NEG
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: LD_INT 3
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29961: LD_ADDR_VAR 0 32
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 2
30127: NEG
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 3
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 3
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30239: LD_ADDR_VAR 0 33
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 3
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: LD_INT 2
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30518: LD_ADDR_VAR 0 34
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: LD_INT 2
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: LD_INT 3
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30798: LD_ADDR_VAR 0 35
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30910: LD_ADDR_VAR 0 36
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31022: LD_ADDR_VAR 0 37
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31134: LD_ADDR_VAR 0 38
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31246: LD_ADDR_VAR 0 39
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31358: LD_ADDR_VAR 0 40
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31470: LD_ADDR_VAR 0 41
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 2
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: NEG
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 3
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 3
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31820: LD_ADDR_VAR 0 42
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: LD_INT 2
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: LD_INT 3
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 3
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 3
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: NEG
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 3
32129: NEG
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32170: LD_ADDR_VAR 0 43
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 3
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 3
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 3
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32518: LD_ADDR_VAR 0 44
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 2
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 2
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: NEG
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 3
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 3
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 3
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: NEG
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32868: LD_ADDR_VAR 0 45
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 3
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: LD_INT 3
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33218: LD_ADDR_VAR 0 46
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: LD_INT 3
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 3
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33566: LD_ADDR_VAR 0 47
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33717: LD_ADDR_VAR 0 48
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33864: LD_ADDR_VAR 0 49
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34008: LD_ADDR_VAR 0 50
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34152: LD_ADDR_VAR 0 51
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 2
34264: NEG
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: NEG
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34299: LD_ADDR_VAR 0 52
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34450: LD_ADDR_VAR 0 53
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34680: LD_ADDR_VAR 0 54
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34910: LD_ADDR_VAR 0 55
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 2
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35140: LD_ADDR_VAR 0 56
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35370: LD_ADDR_VAR 0 57
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35600: LD_ADDR_VAR 0 58
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35830: LD_ADDR_VAR 0 59
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35918: LD_ADDR_VAR 0 60
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36006: LD_ADDR_VAR 0 61
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36094: LD_ADDR_VAR 0 62
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36182: LD_ADDR_VAR 0 63
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36270: LD_ADDR_VAR 0 64
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
// end ; 1 :
36358: GO 42255
36360: LD_INT 1
36362: DOUBLE
36363: EQUAL
36364: IFTRUE 36368
36366: GO 38991
36368: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36369: LD_ADDR_VAR 0 11
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 3
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 3
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36413: LD_ADDR_VAR 0 12
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36454: LD_ADDR_VAR 0 13
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36494: LD_ADDR_VAR 0 14
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 3
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36535: LD_ADDR_VAR 0 15
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 3
36553: NEG
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 3
36564: NEG
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36579: LD_ADDR_VAR 0 16
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: LD_INT 3
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 3
36598: NEG
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 3
36610: NEG
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36625: LD_ADDR_VAR 0 17
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 3
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 3
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36669: LD_ADDR_VAR 0 18
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 3
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36710: LD_ADDR_VAR 0 19
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 3
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36750: LD_ADDR_VAR 0 20
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36791: LD_ADDR_VAR 0 21
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 3
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36835: LD_ADDR_VAR 0 22
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: LD_INT 3
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 3
36854: NEG
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36881: LD_ADDR_VAR 0 23
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: LD_INT 4
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: LD_INT 3
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36925: LD_ADDR_VAR 0 24
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 4
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36966: LD_ADDR_VAR 0 25
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 3
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 4
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37006: LD_ADDR_VAR 0 26
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37047: LD_ADDR_VAR 0 27
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 4
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37091: LD_ADDR_VAR 0 28
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: LD_INT 3
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 4
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 4
37122: NEG
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37137: LD_ADDR_VAR 0 29
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 3
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 4
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 4
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 3
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 5
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 5
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 4
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 6
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 6
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 5
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37292: LD_ADDR_VAR 0 30
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 4
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 4
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 4
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 5
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 5
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 5
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 6
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 6
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37435: LD_ADDR_VAR 0 31
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 4
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 4
37482: PUSH
37483: LD_INT 4
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 4
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 5
37502: PUSH
37503: LD_INT 4
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 5
37512: PUSH
37513: LD_INT 5
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: LD_INT 5
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 6
37532: PUSH
37533: LD_INT 5
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 6
37542: PUSH
37543: LD_INT 6
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 6
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37574: LD_ADDR_VAR 0 32
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 4
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: LD_INT 4
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: LD_INT 5
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 5
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: LD_INT 4
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 6
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 6
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37717: LD_ADDR_VAR 0 33
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 3
37735: NEG
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 3
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 4
37769: NEG
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 4
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 4
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 5
37803: NEG
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 5
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 5
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 6
37837: NEG
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 6
37848: NEG
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37872: LD_ADDR_VAR 0 34
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: LD_INT 3
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 3
37891: NEG
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 3
37903: NEG
37904: PUSH
37905: LD_INT 3
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: LD_INT 4
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 4
37927: NEG
37928: PUSH
37929: LD_INT 3
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 4
37939: NEG
37940: PUSH
37941: LD_INT 4
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 4
37951: NEG
37952: PUSH
37953: LD_INT 5
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 5
37963: NEG
37964: PUSH
37965: LD_INT 4
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 5
37975: NEG
37976: PUSH
37977: LD_INT 5
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 5
37987: NEG
37988: PUSH
37989: LD_INT 6
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 6
37999: NEG
38000: PUSH
38001: LD_INT 5
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 6
38011: NEG
38012: PUSH
38013: LD_INT 6
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38035: LD_ADDR_VAR 0 41
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38079: LD_ADDR_VAR 0 42
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38120: LD_ADDR_VAR 0 43
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38160: LD_ADDR_VAR 0 44
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38201: LD_ADDR_VAR 0 45
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38245: LD_ADDR_VAR 0 46
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 3
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38291: LD_ADDR_VAR 0 47
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38324: LD_ADDR_VAR 0 48
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38355: LD_ADDR_VAR 0 49
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38384: LD_ADDR_VAR 0 50
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: LD_INT 3
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38413: LD_ADDR_VAR 0 51
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38444: LD_ADDR_VAR 0 52
38448: PUSH
38449: LD_INT 3
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38477: LD_ADDR_VAR 0 53
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 3
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38521: LD_ADDR_VAR 0 54
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38562: LD_ADDR_VAR 0 55
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38602: LD_ADDR_VAR 0 56
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38643: LD_ADDR_VAR 0 57
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 3
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 3
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38687: LD_ADDR_VAR 0 58
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38733: LD_ADDR_VAR 0 59
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38777: LD_ADDR_VAR 0 60
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38818: LD_ADDR_VAR 0 61
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38858: LD_ADDR_VAR 0 62
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38899: LD_ADDR_VAR 0 63
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: NEG
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38943: LD_ADDR_VAR 0 64
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// end ; 2 :
38989: GO 42255
38991: LD_INT 2
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 42254
38999: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39000: LD_ADDR_VAR 0 29
39004: PUSH
39005: LD_INT 4
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 4
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 5
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 3
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 4
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 4
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 4
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 4
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 4
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 5
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 5
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 4
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 3
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 4
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 4
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 4
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 4
39385: NEG
39386: PUSH
39387: LD_INT 4
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: LD_INT 5
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 4
39433: NEG
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 5
39445: NEG
39446: PUSH
39447: LD_INT 4
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 5
39457: NEG
39458: PUSH
39459: LD_INT 5
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: LD_INT 5
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: NEG
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39538: LD_ADDR_VAR 0 30
39542: PUSH
39543: LD_INT 4
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 4
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 5
39565: PUSH
39566: LD_INT 4
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 5
39575: PUSH
39576: LD_INT 5
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 4
39585: PUSH
39586: LD_INT 5
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 5
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 4
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 4
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 4
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 4
39728: NEG
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 4
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 4
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 5
39784: NEG
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 5
39795: NEG
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 5
39807: NEG
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 3
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: LD_INT 3
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: NEG
39843: PUSH
39844: LD_INT 4
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 4
39890: NEG
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 4
39902: NEG
39903: PUSH
39904: LD_INT 4
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: LD_INT 4
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 4
39926: NEG
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 4
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 5
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 4
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 3
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 4
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 5
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 5
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40085: LD_ADDR_VAR 0 31
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 4
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 4
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 5
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 5
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 5
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 4
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 4
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 4
40264: NEG
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 4
40287: NEG
40288: PUSH
40289: LD_INT 4
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 4
40299: NEG
40300: PUSH
40301: LD_INT 5
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 3
40311: NEG
40312: PUSH
40313: LD_INT 4
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: NEG
40324: PUSH
40325: LD_INT 3
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 4
40335: NEG
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 5
40347: NEG
40348: PUSH
40349: LD_INT 4
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 5
40359: NEG
40360: PUSH
40361: LD_INT 5
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: LD_INT 5
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 5
40383: NEG
40384: PUSH
40385: LD_INT 3
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 4
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 3
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 4
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 4
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 4
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 4
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 5
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40635: LD_ADDR_VAR 0 32
40639: PUSH
40640: LD_INT 4
40642: NEG
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 4
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 4
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 5
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 5
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 5
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 3
40744: NEG
40745: PUSH
40746: LD_INT 3
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 3
40756: NEG
40757: PUSH
40758: LD_INT 4
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 4
40804: NEG
40805: PUSH
40806: LD_INT 3
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 4
40816: NEG
40817: PUSH
40818: LD_INT 4
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 4
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 4
40840: NEG
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 4
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 5
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 4
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 3
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 4
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 5
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 3
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: LD_INT 5
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 4
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 4
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 4
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 4
41047: PUSH
41048: LD_INT 4
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 4
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 5
41067: PUSH
41068: LD_INT 4
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 5
41077: PUSH
41078: LD_INT 5
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 3
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 3
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 5
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41182: LD_ADDR_VAR 0 33
41186: PUSH
41187: LD_INT 4
41189: NEG
41190: PUSH
41191: LD_INT 4
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 4
41201: NEG
41202: PUSH
41203: LD_INT 5
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 3
41213: NEG
41214: PUSH
41215: LD_INT 4
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: LD_INT 3
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 4
41237: NEG
41238: PUSH
41239: LD_INT 3
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 5
41249: NEG
41250: PUSH
41251: LD_INT 4
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 5
41261: NEG
41262: PUSH
41263: LD_INT 5
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: LD_INT 5
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 5
41285: NEG
41286: PUSH
41287: LD_INT 3
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 3
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 4
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 3
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 3
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 4
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 4
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 4
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 4
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 4
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 5
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 4
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 4
41522: PUSH
41523: LD_INT 4
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: LD_INT 4
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 4
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 4
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 5
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 5
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 4
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 3
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41720: LD_ADDR_VAR 0 34
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 4
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 5
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 4
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 4
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 5
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 3
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 5
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 4
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 4
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 4
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 4
41922: PUSH
41923: LD_INT 4
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 4
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 5
41942: PUSH
41943: LD_INT 4
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 5
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: LD_INT 5
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 4
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 4
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 4
42105: NEG
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 4
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 5
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 5
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 5
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 3
42196: NEG
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// end ; end ;
42252: GO 42255
42254: POP
// case btype of b_depot , b_warehouse :
42255: LD_VAR 0 1
42259: PUSH
42260: LD_INT 0
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42274
42266: LD_INT 1
42268: DOUBLE
42269: EQUAL
42270: IFTRUE 42274
42272: GO 42475
42274: POP
// case nation of nation_american :
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42344
42288: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_VAR 0 11
42298: PUSH
42299: LD_VAR 0 12
42303: PUSH
42304: LD_VAR 0 13
42308: PUSH
42309: LD_VAR 0 14
42313: PUSH
42314: LD_VAR 0 15
42318: PUSH
42319: LD_VAR 0 16
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: PUSH
42332: LD_VAR 0 4
42336: PUSH
42337: LD_INT 1
42339: PLUS
42340: ARRAY
42341: ST_TO_ADDR
42342: GO 42473
42344: LD_INT 2
42346: DOUBLE
42347: EQUAL
42348: IFTRUE 42352
42350: GO 42408
42352: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42353: LD_ADDR_VAR 0 9
42357: PUSH
42358: LD_VAR 0 17
42362: PUSH
42363: LD_VAR 0 18
42367: PUSH
42368: LD_VAR 0 19
42372: PUSH
42373: LD_VAR 0 20
42377: PUSH
42378: LD_VAR 0 21
42382: PUSH
42383: LD_VAR 0 22
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: PUSH
42396: LD_VAR 0 4
42400: PUSH
42401: LD_INT 1
42403: PLUS
42404: ARRAY
42405: ST_TO_ADDR
42406: GO 42473
42408: LD_INT 3
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42472
42416: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42417: LD_ADDR_VAR 0 9
42421: PUSH
42422: LD_VAR 0 23
42426: PUSH
42427: LD_VAR 0 24
42431: PUSH
42432: LD_VAR 0 25
42436: PUSH
42437: LD_VAR 0 26
42441: PUSH
42442: LD_VAR 0 27
42446: PUSH
42447: LD_VAR 0 28
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: PUSH
42460: LD_VAR 0 4
42464: PUSH
42465: LD_INT 1
42467: PLUS
42468: ARRAY
42469: ST_TO_ADDR
42470: GO 42473
42472: POP
42473: GO 43028
42475: LD_INT 2
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42489
42481: LD_INT 3
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42545
42489: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42490: LD_ADDR_VAR 0 9
42494: PUSH
42495: LD_VAR 0 29
42499: PUSH
42500: LD_VAR 0 30
42504: PUSH
42505: LD_VAR 0 31
42509: PUSH
42510: LD_VAR 0 32
42514: PUSH
42515: LD_VAR 0 33
42519: PUSH
42520: LD_VAR 0 34
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: PUSH
42533: LD_VAR 0 4
42537: PUSH
42538: LD_INT 1
42540: PLUS
42541: ARRAY
42542: ST_TO_ADDR
42543: GO 43028
42545: LD_INT 16
42547: DOUBLE
42548: EQUAL
42549: IFTRUE 42607
42551: LD_INT 17
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42607
42557: LD_INT 18
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42607
42563: LD_INT 19
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42607
42569: LD_INT 22
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42607
42575: LD_INT 20
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42607
42581: LD_INT 21
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42607
42587: LD_INT 23
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42607
42593: LD_INT 24
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42607
42599: LD_INT 25
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42607
42605: GO 42663
42607: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42608: LD_ADDR_VAR 0 9
42612: PUSH
42613: LD_VAR 0 35
42617: PUSH
42618: LD_VAR 0 36
42622: PUSH
42623: LD_VAR 0 37
42627: PUSH
42628: LD_VAR 0 38
42632: PUSH
42633: LD_VAR 0 39
42637: PUSH
42638: LD_VAR 0 40
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: LD_VAR 0 4
42655: PUSH
42656: LD_INT 1
42658: PLUS
42659: ARRAY
42660: ST_TO_ADDR
42661: GO 43028
42663: LD_INT 6
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42719
42669: LD_INT 7
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42719
42675: LD_INT 8
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42719
42681: LD_INT 13
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42719
42687: LD_INT 12
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42719
42693: LD_INT 15
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42719
42699: LD_INT 11
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42719
42705: LD_INT 14
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42719
42711: LD_INT 10
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42719
42717: GO 42775
42719: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42720: LD_ADDR_VAR 0 9
42724: PUSH
42725: LD_VAR 0 41
42729: PUSH
42730: LD_VAR 0 42
42734: PUSH
42735: LD_VAR 0 43
42739: PUSH
42740: LD_VAR 0 44
42744: PUSH
42745: LD_VAR 0 45
42749: PUSH
42750: LD_VAR 0 46
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: LD_VAR 0 4
42767: PUSH
42768: LD_INT 1
42770: PLUS
42771: ARRAY
42772: ST_TO_ADDR
42773: GO 43028
42775: LD_INT 36
42777: DOUBLE
42778: EQUAL
42779: IFTRUE 42783
42781: GO 42839
42783: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42784: LD_ADDR_VAR 0 9
42788: PUSH
42789: LD_VAR 0 47
42793: PUSH
42794: LD_VAR 0 48
42798: PUSH
42799: LD_VAR 0 49
42803: PUSH
42804: LD_VAR 0 50
42808: PUSH
42809: LD_VAR 0 51
42813: PUSH
42814: LD_VAR 0 52
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: PUSH
42827: LD_VAR 0 4
42831: PUSH
42832: LD_INT 1
42834: PLUS
42835: ARRAY
42836: ST_TO_ADDR
42837: GO 43028
42839: LD_INT 4
42841: DOUBLE
42842: EQUAL
42843: IFTRUE 42865
42845: LD_INT 5
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42865
42851: LD_INT 34
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42865
42857: LD_INT 37
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42921
42865: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42866: LD_ADDR_VAR 0 9
42870: PUSH
42871: LD_VAR 0 53
42875: PUSH
42876: LD_VAR 0 54
42880: PUSH
42881: LD_VAR 0 55
42885: PUSH
42886: LD_VAR 0 56
42890: PUSH
42891: LD_VAR 0 57
42895: PUSH
42896: LD_VAR 0 58
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: PUSH
42909: LD_VAR 0 4
42913: PUSH
42914: LD_INT 1
42916: PLUS
42917: ARRAY
42918: ST_TO_ADDR
42919: GO 43028
42921: LD_INT 31
42923: DOUBLE
42924: EQUAL
42925: IFTRUE 42971
42927: LD_INT 32
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42971
42933: LD_INT 33
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42971
42939: LD_INT 27
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42971
42945: LD_INT 26
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42971
42951: LD_INT 28
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42971
42957: LD_INT 29
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42971
42963: LD_INT 30
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 43027
42971: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42972: LD_ADDR_VAR 0 9
42976: PUSH
42977: LD_VAR 0 59
42981: PUSH
42982: LD_VAR 0 60
42986: PUSH
42987: LD_VAR 0 61
42991: PUSH
42992: LD_VAR 0 62
42996: PUSH
42997: LD_VAR 0 63
43001: PUSH
43002: LD_VAR 0 64
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: PUSH
43015: LD_VAR 0 4
43019: PUSH
43020: LD_INT 1
43022: PLUS
43023: ARRAY
43024: ST_TO_ADDR
43025: GO 43028
43027: POP
// temp_list2 = [ ] ;
43028: LD_ADDR_VAR 0 10
43032: PUSH
43033: EMPTY
43034: ST_TO_ADDR
// for i in temp_list do
43035: LD_ADDR_VAR 0 8
43039: PUSH
43040: LD_VAR 0 9
43044: PUSH
43045: FOR_IN
43046: IFFALSE 43098
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43048: LD_ADDR_VAR 0 10
43052: PUSH
43053: LD_VAR 0 10
43057: PUSH
43058: LD_VAR 0 8
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: PUSH
43067: LD_VAR 0 2
43071: PLUS
43072: PUSH
43073: LD_VAR 0 8
43077: PUSH
43078: LD_INT 2
43080: ARRAY
43081: PUSH
43082: LD_VAR 0 3
43086: PLUS
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: ADD
43095: ST_TO_ADDR
43096: GO 43045
43098: POP
43099: POP
// result = temp_list2 ;
43100: LD_ADDR_VAR 0 7
43104: PUSH
43105: LD_VAR 0 10
43109: ST_TO_ADDR
// end ;
43110: LD_VAR 0 7
43114: RET
// export function EnemyInRange ( unit , dist ) ; begin
43115: LD_INT 0
43117: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_VAR 0 1
43127: PPUSH
43128: CALL_OW 255
43132: PPUSH
43133: LD_VAR 0 1
43137: PPUSH
43138: CALL_OW 250
43142: PPUSH
43143: LD_VAR 0 1
43147: PPUSH
43148: CALL_OW 251
43152: PPUSH
43153: LD_VAR 0 2
43157: PPUSH
43158: CALL 16488 0 4
43162: PUSH
43163: LD_INT 4
43165: ARRAY
43166: ST_TO_ADDR
// end ;
43167: LD_VAR 0 3
43171: RET
// export function PlayerSeeMe ( unit ) ; begin
43172: LD_INT 0
43174: PPUSH
// result := See ( your_side , unit ) ;
43175: LD_ADDR_VAR 0 2
43179: PUSH
43180: LD_OWVAR 2
43184: PPUSH
43185: LD_VAR 0 1
43189: PPUSH
43190: CALL_OW 292
43194: ST_TO_ADDR
// end ;
43195: LD_VAR 0 2
43199: RET
// export function ReverseDir ( unit ) ; begin
43200: LD_INT 0
43202: PPUSH
// if not unit then
43203: LD_VAR 0 1
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43235
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43212: LD_ADDR_VAR 0 2
43216: PUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: CALL_OW 254
43226: PUSH
43227: LD_INT 3
43229: PLUS
43230: PUSH
43231: LD_INT 6
43233: MOD
43234: ST_TO_ADDR
// end ;
43235: LD_VAR 0 2
43239: RET
// export function ReverseArray ( array ) ; var i ; begin
43240: LD_INT 0
43242: PPUSH
43243: PPUSH
// if not array then
43244: LD_VAR 0 1
43248: NOT
43249: IFFALSE 43253
// exit ;
43251: GO 43308
// result := [ ] ;
43253: LD_ADDR_VAR 0 2
43257: PUSH
43258: EMPTY
43259: ST_TO_ADDR
// for i := array downto 1 do
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: DOUBLE
43266: LD_VAR 0 1
43270: INC
43271: ST_TO_ADDR
43272: LD_INT 1
43274: PUSH
43275: FOR_DOWNTO
43276: IFFALSE 43306
// result := Join ( result , array [ i ] ) ;
43278: LD_ADDR_VAR 0 2
43282: PUSH
43283: LD_VAR 0 2
43287: PPUSH
43288: LD_VAR 0 1
43292: PUSH
43293: LD_VAR 0 3
43297: ARRAY
43298: PPUSH
43299: CALL 48114 0 2
43303: ST_TO_ADDR
43304: GO 43275
43306: POP
43307: POP
// end ;
43308: LD_VAR 0 2
43312: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43313: LD_INT 0
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
// if not unit or not hexes then
43321: LD_VAR 0 1
43325: NOT
43326: PUSH
43327: LD_VAR 0 2
43331: NOT
43332: OR
43333: IFFALSE 43337
// exit ;
43335: GO 43460
// dist := 9999 ;
43337: LD_ADDR_VAR 0 5
43341: PUSH
43342: LD_INT 9999
43344: ST_TO_ADDR
// for i = 1 to hexes do
43345: LD_ADDR_VAR 0 4
43349: PUSH
43350: DOUBLE
43351: LD_INT 1
43353: DEC
43354: ST_TO_ADDR
43355: LD_VAR 0 2
43359: PUSH
43360: FOR_TO
43361: IFFALSE 43448
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43363: LD_ADDR_VAR 0 6
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: LD_VAR 0 2
43377: PUSH
43378: LD_VAR 0 4
43382: ARRAY
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PPUSH
43388: LD_VAR 0 2
43392: PUSH
43393: LD_VAR 0 4
43397: ARRAY
43398: PUSH
43399: LD_INT 2
43401: ARRAY
43402: PPUSH
43403: CALL_OW 297
43407: ST_TO_ADDR
// if tdist < dist then
43408: LD_VAR 0 6
43412: PUSH
43413: LD_VAR 0 5
43417: LESS
43418: IFFALSE 43446
// begin hex := hexes [ i ] ;
43420: LD_ADDR_VAR 0 8
43424: PUSH
43425: LD_VAR 0 2
43429: PUSH
43430: LD_VAR 0 4
43434: ARRAY
43435: ST_TO_ADDR
// dist := tdist ;
43436: LD_ADDR_VAR 0 5
43440: PUSH
43441: LD_VAR 0 6
43445: ST_TO_ADDR
// end ; end ;
43446: GO 43360
43448: POP
43449: POP
// result := hex ;
43450: LD_ADDR_VAR 0 3
43454: PUSH
43455: LD_VAR 0 8
43459: ST_TO_ADDR
// end ;
43460: LD_VAR 0 3
43464: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43465: LD_INT 0
43467: PPUSH
43468: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43469: LD_VAR 0 1
43473: NOT
43474: PUSH
43475: LD_VAR 0 1
43479: PUSH
43480: LD_INT 21
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 23
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PPUSH
43504: CALL_OW 69
43508: IN
43509: NOT
43510: OR
43511: IFFALSE 43515
// exit ;
43513: GO 43562
// for i = 1 to 3 do
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: DOUBLE
43521: LD_INT 1
43523: DEC
43524: ST_TO_ADDR
43525: LD_INT 3
43527: PUSH
43528: FOR_TO
43529: IFFALSE 43560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 250
43540: PPUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 251
43550: PPUSH
43551: LD_INT 1
43553: PPUSH
43554: CALL_OW 453
43558: GO 43528
43560: POP
43561: POP
// end ;
43562: LD_VAR 0 2
43566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not unit or not enemy_unit then
43575: LD_VAR 0 1
43579: NOT
43580: PUSH
43581: LD_VAR 0 2
43585: NOT
43586: OR
43587: IFFALSE 43591
// exit ;
43589: GO 44058
// if GetLives ( i ) < 250 then
43591: LD_VAR 0 4
43595: PPUSH
43596: CALL_OW 256
43600: PUSH
43601: LD_INT 250
43603: LESS
43604: IFFALSE 43617
// begin ComAutodestruct ( i ) ;
43606: LD_VAR 0 4
43610: PPUSH
43611: CALL 43465 0 1
// exit ;
43615: GO 44058
// end ; x := GetX ( enemy_unit ) ;
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: LD_VAR 0 2
43626: PPUSH
43627: CALL_OW 250
43631: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: CALL_OW 251
43646: ST_TO_ADDR
// if not x or not y then
43647: LD_VAR 0 7
43651: NOT
43652: PUSH
43653: LD_VAR 0 8
43657: NOT
43658: OR
43659: IFFALSE 43663
// exit ;
43661: GO 44058
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43663: LD_ADDR_VAR 0 6
43667: PUSH
43668: LD_VAR 0 7
43672: PPUSH
43673: LD_INT 0
43675: PPUSH
43676: LD_INT 4
43678: PPUSH
43679: CALL_OW 272
43683: PUSH
43684: LD_VAR 0 8
43688: PPUSH
43689: LD_INT 0
43691: PPUSH
43692: LD_INT 4
43694: PPUSH
43695: CALL_OW 273
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_VAR 0 7
43708: PPUSH
43709: LD_INT 1
43711: PPUSH
43712: LD_INT 4
43714: PPUSH
43715: CALL_OW 272
43719: PUSH
43720: LD_VAR 0 8
43724: PPUSH
43725: LD_INT 1
43727: PPUSH
43728: LD_INT 4
43730: PPUSH
43731: CALL_OW 273
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_VAR 0 7
43744: PPUSH
43745: LD_INT 2
43747: PPUSH
43748: LD_INT 4
43750: PPUSH
43751: CALL_OW 272
43755: PUSH
43756: LD_VAR 0 8
43760: PPUSH
43761: LD_INT 2
43763: PPUSH
43764: LD_INT 4
43766: PPUSH
43767: CALL_OW 273
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_VAR 0 7
43780: PPUSH
43781: LD_INT 3
43783: PPUSH
43784: LD_INT 4
43786: PPUSH
43787: CALL_OW 272
43791: PUSH
43792: LD_VAR 0 8
43796: PPUSH
43797: LD_INT 3
43799: PPUSH
43800: LD_INT 4
43802: PPUSH
43803: CALL_OW 273
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_VAR 0 7
43816: PPUSH
43817: LD_INT 4
43819: PPUSH
43820: LD_INT 4
43822: PPUSH
43823: CALL_OW 272
43827: PUSH
43828: LD_VAR 0 8
43832: PPUSH
43833: LD_INT 4
43835: PPUSH
43836: LD_INT 4
43838: PPUSH
43839: CALL_OW 273
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_VAR 0 7
43852: PPUSH
43853: LD_INT 5
43855: PPUSH
43856: LD_INT 4
43858: PPUSH
43859: CALL_OW 272
43863: PUSH
43864: LD_VAR 0 8
43868: PPUSH
43869: LD_INT 5
43871: PPUSH
43872: LD_INT 4
43874: PPUSH
43875: CALL_OW 273
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// for i = tmp downto 1 do
43892: LD_ADDR_VAR 0 4
43896: PUSH
43897: DOUBLE
43898: LD_VAR 0 6
43902: INC
43903: ST_TO_ADDR
43904: LD_INT 1
43906: PUSH
43907: FOR_DOWNTO
43908: IFFALSE 44009
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43910: LD_VAR 0 6
43914: PUSH
43915: LD_VAR 0 4
43919: ARRAY
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: PPUSH
43925: LD_VAR 0 6
43929: PUSH
43930: LD_VAR 0 4
43934: ARRAY
43935: PUSH
43936: LD_INT 2
43938: ARRAY
43939: PPUSH
43940: CALL_OW 488
43944: NOT
43945: PUSH
43946: LD_VAR 0 6
43950: PUSH
43951: LD_VAR 0 4
43955: ARRAY
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: PPUSH
43961: LD_VAR 0 6
43965: PUSH
43966: LD_VAR 0 4
43970: ARRAY
43971: PUSH
43972: LD_INT 2
43974: ARRAY
43975: PPUSH
43976: CALL_OW 428
43980: PUSH
43981: LD_INT 0
43983: NONEQUAL
43984: OR
43985: IFFALSE 44007
// tmp := Delete ( tmp , i ) ;
43987: LD_ADDR_VAR 0 6
43991: PUSH
43992: LD_VAR 0 6
43996: PPUSH
43997: LD_VAR 0 4
44001: PPUSH
44002: CALL_OW 3
44006: ST_TO_ADDR
44007: GO 43907
44009: POP
44010: POP
// j := GetClosestHex ( unit , tmp ) ;
44011: LD_ADDR_VAR 0 5
44015: PUSH
44016: LD_VAR 0 1
44020: PPUSH
44021: LD_VAR 0 6
44025: PPUSH
44026: CALL 43313 0 2
44030: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44031: LD_VAR 0 1
44035: PPUSH
44036: LD_VAR 0 5
44040: PUSH
44041: LD_INT 1
44043: ARRAY
44044: PPUSH
44045: LD_VAR 0 5
44049: PUSH
44050: LD_INT 2
44052: ARRAY
44053: PPUSH
44054: CALL_OW 111
// end ;
44058: LD_VAR 0 3
44062: RET
// export function PrepareApemanSoldier ( ) ; begin
44063: LD_INT 0
44065: PPUSH
// uc_nation := 0 ;
44066: LD_ADDR_OWVAR 21
44070: PUSH
44071: LD_INT 0
44073: ST_TO_ADDR
// hc_sex := sex_male ;
44074: LD_ADDR_OWVAR 27
44078: PUSH
44079: LD_INT 1
44081: ST_TO_ADDR
// hc_name :=  ;
44082: LD_ADDR_OWVAR 26
44086: PUSH
44087: LD_STRING 
44089: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44090: LD_ADDR_OWVAR 28
44094: PUSH
44095: LD_INT 15
44097: ST_TO_ADDR
// hc_gallery :=  ;
44098: LD_ADDR_OWVAR 33
44102: PUSH
44103: LD_STRING 
44105: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44106: LD_ADDR_OWVAR 31
44110: PUSH
44111: LD_INT 0
44113: PPUSH
44114: LD_INT 3
44116: PPUSH
44117: CALL_OW 12
44121: PUSH
44122: LD_INT 0
44124: PPUSH
44125: LD_INT 3
44127: PPUSH
44128: CALL_OW 12
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44145: LD_ADDR_OWVAR 29
44149: PUSH
44150: LD_INT 12
44152: PUSH
44153: LD_INT 12
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// end ;
44160: LD_VAR 0 1
44164: RET
// export function PrepareApemanEngineer ( ) ; begin
44165: LD_INT 0
44167: PPUSH
// uc_nation := 0 ;
44168: LD_ADDR_OWVAR 21
44172: PUSH
44173: LD_INT 0
44175: ST_TO_ADDR
// hc_sex := sex_male ;
44176: LD_ADDR_OWVAR 27
44180: PUSH
44181: LD_INT 1
44183: ST_TO_ADDR
// hc_name :=  ;
44184: LD_ADDR_OWVAR 26
44188: PUSH
44189: LD_STRING 
44191: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44192: LD_ADDR_OWVAR 28
44196: PUSH
44197: LD_INT 16
44199: ST_TO_ADDR
// hc_gallery :=  ;
44200: LD_ADDR_OWVAR 33
44204: PUSH
44205: LD_STRING 
44207: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44208: LD_ADDR_OWVAR 31
44212: PUSH
44213: LD_INT 0
44215: PPUSH
44216: LD_INT 3
44218: PPUSH
44219: CALL_OW 12
44223: PUSH
44224: LD_INT 0
44226: PPUSH
44227: LD_INT 3
44229: PPUSH
44230: CALL_OW 12
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44247: LD_ADDR_OWVAR 29
44251: PUSH
44252: LD_INT 12
44254: PUSH
44255: LD_INT 12
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// end ;
44262: LD_VAR 0 1
44266: RET
// export function PrepareApeman ( agressivity ) ; begin
44267: LD_INT 0
44269: PPUSH
// uc_side := 0 ;
44270: LD_ADDR_OWVAR 20
44274: PUSH
44275: LD_INT 0
44277: ST_TO_ADDR
// uc_nation := 0 ;
44278: LD_ADDR_OWVAR 21
44282: PUSH
44283: LD_INT 0
44285: ST_TO_ADDR
// hc_sex := sex_male ;
44286: LD_ADDR_OWVAR 27
44290: PUSH
44291: LD_INT 1
44293: ST_TO_ADDR
// hc_class := class_apeman ;
44294: LD_ADDR_OWVAR 28
44298: PUSH
44299: LD_INT 12
44301: ST_TO_ADDR
// hc_gallery :=  ;
44302: LD_ADDR_OWVAR 33
44306: PUSH
44307: LD_STRING 
44309: ST_TO_ADDR
// hc_name :=  ;
44310: LD_ADDR_OWVAR 26
44314: PUSH
44315: LD_STRING 
44317: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44318: LD_ADDR_OWVAR 29
44322: PUSH
44323: LD_INT 12
44325: PUSH
44326: LD_INT 12
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: ST_TO_ADDR
// if agressivity = 0 then
44333: LD_VAR 0 1
44337: PUSH
44338: LD_INT 0
44340: EQUAL
44341: IFFALSE 44353
// hc_agressivity := 0 else
44343: LD_ADDR_OWVAR 35
44347: PUSH
44348: LD_INT 0
44350: ST_TO_ADDR
44351: GO 44374
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44353: LD_ADDR_OWVAR 35
44357: PUSH
44358: LD_VAR 0 1
44362: NEG
44363: PPUSH
44364: LD_VAR 0 1
44368: PPUSH
44369: CALL_OW 12
44373: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44374: LD_ADDR_OWVAR 31
44378: PUSH
44379: LD_INT 0
44381: PPUSH
44382: LD_INT 3
44384: PPUSH
44385: CALL_OW 12
44389: PUSH
44390: LD_INT 0
44392: PPUSH
44393: LD_INT 3
44395: PPUSH
44396: CALL_OW 12
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
// end ;
44413: LD_VAR 0 2
44417: RET
// export function PrepareTiger ( agressivity ) ; begin
44418: LD_INT 0
44420: PPUSH
// uc_side := 0 ;
44421: LD_ADDR_OWVAR 20
44425: PUSH
44426: LD_INT 0
44428: ST_TO_ADDR
// uc_nation := 0 ;
44429: LD_ADDR_OWVAR 21
44433: PUSH
44434: LD_INT 0
44436: ST_TO_ADDR
// InitHc ;
44437: CALL_OW 19
// hc_class := class_tiger ;
44441: LD_ADDR_OWVAR 28
44445: PUSH
44446: LD_INT 14
44448: ST_TO_ADDR
// hc_gallery :=  ;
44449: LD_ADDR_OWVAR 33
44453: PUSH
44454: LD_STRING 
44456: ST_TO_ADDR
// hc_name :=  ;
44457: LD_ADDR_OWVAR 26
44461: PUSH
44462: LD_STRING 
44464: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44465: LD_ADDR_OWVAR 35
44469: PUSH
44470: LD_VAR 0 1
44474: NEG
44475: PPUSH
44476: LD_VAR 0 1
44480: PPUSH
44481: CALL_OW 12
44485: ST_TO_ADDR
// end ;
44486: LD_VAR 0 2
44490: RET
// export function PrepareEnchidna ( ) ; begin
44491: LD_INT 0
44493: PPUSH
// uc_side := 0 ;
44494: LD_ADDR_OWVAR 20
44498: PUSH
44499: LD_INT 0
44501: ST_TO_ADDR
// uc_nation := 0 ;
44502: LD_ADDR_OWVAR 21
44506: PUSH
44507: LD_INT 0
44509: ST_TO_ADDR
// InitHc ;
44510: CALL_OW 19
// hc_class := class_baggie ;
44514: LD_ADDR_OWVAR 28
44518: PUSH
44519: LD_INT 13
44521: ST_TO_ADDR
// hc_gallery :=  ;
44522: LD_ADDR_OWVAR 33
44526: PUSH
44527: LD_STRING 
44529: ST_TO_ADDR
// hc_name :=  ;
44530: LD_ADDR_OWVAR 26
44534: PUSH
44535: LD_STRING 
44537: ST_TO_ADDR
// end ;
44538: LD_VAR 0 1
44542: RET
// export function PrepareFrog ( ) ; begin
44543: LD_INT 0
44545: PPUSH
// uc_side := 0 ;
44546: LD_ADDR_OWVAR 20
44550: PUSH
44551: LD_INT 0
44553: ST_TO_ADDR
// uc_nation := 0 ;
44554: LD_ADDR_OWVAR 21
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// InitHc ;
44562: CALL_OW 19
// hc_class := class_frog ;
44566: LD_ADDR_OWVAR 28
44570: PUSH
44571: LD_INT 19
44573: ST_TO_ADDR
// hc_gallery :=  ;
44574: LD_ADDR_OWVAR 33
44578: PUSH
44579: LD_STRING 
44581: ST_TO_ADDR
// hc_name :=  ;
44582: LD_ADDR_OWVAR 26
44586: PUSH
44587: LD_STRING 
44589: ST_TO_ADDR
// end ;
44590: LD_VAR 0 1
44594: RET
// export function PrepareFish ( ) ; begin
44595: LD_INT 0
44597: PPUSH
// uc_side := 0 ;
44598: LD_ADDR_OWVAR 20
44602: PUSH
44603: LD_INT 0
44605: ST_TO_ADDR
// uc_nation := 0 ;
44606: LD_ADDR_OWVAR 21
44610: PUSH
44611: LD_INT 0
44613: ST_TO_ADDR
// InitHc ;
44614: CALL_OW 19
// hc_class := class_fish ;
44618: LD_ADDR_OWVAR 28
44622: PUSH
44623: LD_INT 20
44625: ST_TO_ADDR
// hc_gallery :=  ;
44626: LD_ADDR_OWVAR 33
44630: PUSH
44631: LD_STRING 
44633: ST_TO_ADDR
// hc_name :=  ;
44634: LD_ADDR_OWVAR 26
44638: PUSH
44639: LD_STRING 
44641: ST_TO_ADDR
// end ;
44642: LD_VAR 0 1
44646: RET
// export function PrepareBird ( ) ; begin
44647: LD_INT 0
44649: PPUSH
// uc_side := 0 ;
44650: LD_ADDR_OWVAR 20
44654: PUSH
44655: LD_INT 0
44657: ST_TO_ADDR
// uc_nation := 0 ;
44658: LD_ADDR_OWVAR 21
44662: PUSH
44663: LD_INT 0
44665: ST_TO_ADDR
// InitHc ;
44666: CALL_OW 19
// hc_class := class_phororhacos ;
44670: LD_ADDR_OWVAR 28
44674: PUSH
44675: LD_INT 18
44677: ST_TO_ADDR
// hc_gallery :=  ;
44678: LD_ADDR_OWVAR 33
44682: PUSH
44683: LD_STRING 
44685: ST_TO_ADDR
// hc_name :=  ;
44686: LD_ADDR_OWVAR 26
44690: PUSH
44691: LD_STRING 
44693: ST_TO_ADDR
// end ;
44694: LD_VAR 0 1
44698: RET
// export function PrepareHorse ( ) ; begin
44699: LD_INT 0
44701: PPUSH
// uc_side := 0 ;
44702: LD_ADDR_OWVAR 20
44706: PUSH
44707: LD_INT 0
44709: ST_TO_ADDR
// uc_nation := 0 ;
44710: LD_ADDR_OWVAR 21
44714: PUSH
44715: LD_INT 0
44717: ST_TO_ADDR
// InitHc ;
44718: CALL_OW 19
// hc_class := class_horse ;
44722: LD_ADDR_OWVAR 28
44726: PUSH
44727: LD_INT 21
44729: ST_TO_ADDR
// hc_gallery :=  ;
44730: LD_ADDR_OWVAR 33
44734: PUSH
44735: LD_STRING 
44737: ST_TO_ADDR
// hc_name :=  ;
44738: LD_ADDR_OWVAR 26
44742: PUSH
44743: LD_STRING 
44745: ST_TO_ADDR
// end ;
44746: LD_VAR 0 1
44750: RET
// export function PrepareMastodont ( ) ; begin
44751: LD_INT 0
44753: PPUSH
// uc_side := 0 ;
44754: LD_ADDR_OWVAR 20
44758: PUSH
44759: LD_INT 0
44761: ST_TO_ADDR
// uc_nation := 0 ;
44762: LD_ADDR_OWVAR 21
44766: PUSH
44767: LD_INT 0
44769: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44770: LD_ADDR_OWVAR 37
44774: PUSH
44775: LD_INT 31
44777: ST_TO_ADDR
// vc_control := control_rider ;
44778: LD_ADDR_OWVAR 38
44782: PUSH
44783: LD_INT 4
44785: ST_TO_ADDR
// end ;
44786: LD_VAR 0 1
44790: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44791: LD_INT 0
44793: PPUSH
44794: PPUSH
44795: PPUSH
// uc_side = 0 ;
44796: LD_ADDR_OWVAR 20
44800: PUSH
44801: LD_INT 0
44803: ST_TO_ADDR
// uc_nation = 0 ;
44804: LD_ADDR_OWVAR 21
44808: PUSH
44809: LD_INT 0
44811: ST_TO_ADDR
// InitHc_All ( ) ;
44812: CALL_OW 584
// InitVc ;
44816: CALL_OW 20
// if mastodonts then
44820: LD_VAR 0 6
44824: IFFALSE 44891
// for i = 1 to mastodonts do
44826: LD_ADDR_VAR 0 11
44830: PUSH
44831: DOUBLE
44832: LD_INT 1
44834: DEC
44835: ST_TO_ADDR
44836: LD_VAR 0 6
44840: PUSH
44841: FOR_TO
44842: IFFALSE 44889
// begin vc_chassis := 31 ;
44844: LD_ADDR_OWVAR 37
44848: PUSH
44849: LD_INT 31
44851: ST_TO_ADDR
// vc_control := control_rider ;
44852: LD_ADDR_OWVAR 38
44856: PUSH
44857: LD_INT 4
44859: ST_TO_ADDR
// animal := CreateVehicle ;
44860: LD_ADDR_VAR 0 12
44864: PUSH
44865: CALL_OW 45
44869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44870: LD_VAR 0 12
44874: PPUSH
44875: LD_VAR 0 8
44879: PPUSH
44880: LD_INT 0
44882: PPUSH
44883: CALL 47019 0 3
// end ;
44887: GO 44841
44889: POP
44890: POP
// if horses then
44891: LD_VAR 0 5
44895: IFFALSE 44962
// for i = 1 to horses do
44897: LD_ADDR_VAR 0 11
44901: PUSH
44902: DOUBLE
44903: LD_INT 1
44905: DEC
44906: ST_TO_ADDR
44907: LD_VAR 0 5
44911: PUSH
44912: FOR_TO
44913: IFFALSE 44960
// begin hc_class := 21 ;
44915: LD_ADDR_OWVAR 28
44919: PUSH
44920: LD_INT 21
44922: ST_TO_ADDR
// hc_gallery :=  ;
44923: LD_ADDR_OWVAR 33
44927: PUSH
44928: LD_STRING 
44930: ST_TO_ADDR
// animal := CreateHuman ;
44931: LD_ADDR_VAR 0 12
44935: PUSH
44936: CALL_OW 44
44940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44941: LD_VAR 0 12
44945: PPUSH
44946: LD_VAR 0 8
44950: PPUSH
44951: LD_INT 0
44953: PPUSH
44954: CALL 47019 0 3
// end ;
44958: GO 44912
44960: POP
44961: POP
// if birds then
44962: LD_VAR 0 1
44966: IFFALSE 45033
// for i = 1 to birds do
44968: LD_ADDR_VAR 0 11
44972: PUSH
44973: DOUBLE
44974: LD_INT 1
44976: DEC
44977: ST_TO_ADDR
44978: LD_VAR 0 1
44982: PUSH
44983: FOR_TO
44984: IFFALSE 45031
// begin hc_class := 18 ;
44986: LD_ADDR_OWVAR 28
44990: PUSH
44991: LD_INT 18
44993: ST_TO_ADDR
// hc_gallery =  ;
44994: LD_ADDR_OWVAR 33
44998: PUSH
44999: LD_STRING 
45001: ST_TO_ADDR
// animal := CreateHuman ;
45002: LD_ADDR_VAR 0 12
45006: PUSH
45007: CALL_OW 44
45011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45012: LD_VAR 0 12
45016: PPUSH
45017: LD_VAR 0 8
45021: PPUSH
45022: LD_INT 0
45024: PPUSH
45025: CALL 47019 0 3
// end ;
45029: GO 44983
45031: POP
45032: POP
// if tigers then
45033: LD_VAR 0 2
45037: IFFALSE 45121
// for i = 1 to tigers do
45039: LD_ADDR_VAR 0 11
45043: PUSH
45044: DOUBLE
45045: LD_INT 1
45047: DEC
45048: ST_TO_ADDR
45049: LD_VAR 0 2
45053: PUSH
45054: FOR_TO
45055: IFFALSE 45119
// begin hc_class = class_tiger ;
45057: LD_ADDR_OWVAR 28
45061: PUSH
45062: LD_INT 14
45064: ST_TO_ADDR
// hc_gallery =  ;
45065: LD_ADDR_OWVAR 33
45069: PUSH
45070: LD_STRING 
45072: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45073: LD_ADDR_OWVAR 35
45077: PUSH
45078: LD_INT 7
45080: NEG
45081: PPUSH
45082: LD_INT 7
45084: PPUSH
45085: CALL_OW 12
45089: ST_TO_ADDR
// animal := CreateHuman ;
45090: LD_ADDR_VAR 0 12
45094: PUSH
45095: CALL_OW 44
45099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45100: LD_VAR 0 12
45104: PPUSH
45105: LD_VAR 0 8
45109: PPUSH
45110: LD_INT 0
45112: PPUSH
45113: CALL 47019 0 3
// end ;
45117: GO 45054
45119: POP
45120: POP
// if apemans then
45121: LD_VAR 0 3
45125: IFFALSE 45248
// for i = 1 to apemans do
45127: LD_ADDR_VAR 0 11
45131: PUSH
45132: DOUBLE
45133: LD_INT 1
45135: DEC
45136: ST_TO_ADDR
45137: LD_VAR 0 3
45141: PUSH
45142: FOR_TO
45143: IFFALSE 45246
// begin hc_class = class_apeman ;
45145: LD_ADDR_OWVAR 28
45149: PUSH
45150: LD_INT 12
45152: ST_TO_ADDR
// hc_gallery =  ;
45153: LD_ADDR_OWVAR 33
45157: PUSH
45158: LD_STRING 
45160: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45161: LD_ADDR_OWVAR 35
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PPUSH
45170: LD_INT 2
45172: PPUSH
45173: CALL_OW 12
45177: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45178: LD_ADDR_OWVAR 31
45182: PUSH
45183: LD_INT 1
45185: PPUSH
45186: LD_INT 3
45188: PPUSH
45189: CALL_OW 12
45193: PUSH
45194: LD_INT 1
45196: PPUSH
45197: LD_INT 3
45199: PPUSH
45200: CALL_OW 12
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// animal := CreateHuman ;
45217: LD_ADDR_VAR 0 12
45221: PUSH
45222: CALL_OW 44
45226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45227: LD_VAR 0 12
45231: PPUSH
45232: LD_VAR 0 8
45236: PPUSH
45237: LD_INT 0
45239: PPUSH
45240: CALL 47019 0 3
// end ;
45244: GO 45142
45246: POP
45247: POP
// if enchidnas then
45248: LD_VAR 0 4
45252: IFFALSE 45319
// for i = 1 to enchidnas do
45254: LD_ADDR_VAR 0 11
45258: PUSH
45259: DOUBLE
45260: LD_INT 1
45262: DEC
45263: ST_TO_ADDR
45264: LD_VAR 0 4
45268: PUSH
45269: FOR_TO
45270: IFFALSE 45317
// begin hc_class = 13 ;
45272: LD_ADDR_OWVAR 28
45276: PUSH
45277: LD_INT 13
45279: ST_TO_ADDR
// hc_gallery =  ;
45280: LD_ADDR_OWVAR 33
45284: PUSH
45285: LD_STRING 
45287: ST_TO_ADDR
// animal := CreateHuman ;
45288: LD_ADDR_VAR 0 12
45292: PUSH
45293: CALL_OW 44
45297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45298: LD_VAR 0 12
45302: PPUSH
45303: LD_VAR 0 8
45307: PPUSH
45308: LD_INT 0
45310: PPUSH
45311: CALL 47019 0 3
// end ;
45315: GO 45269
45317: POP
45318: POP
// if fishes then
45319: LD_VAR 0 7
45323: IFFALSE 45390
// for i = 1 to fishes do
45325: LD_ADDR_VAR 0 11
45329: PUSH
45330: DOUBLE
45331: LD_INT 1
45333: DEC
45334: ST_TO_ADDR
45335: LD_VAR 0 7
45339: PUSH
45340: FOR_TO
45341: IFFALSE 45388
// begin hc_class = 20 ;
45343: LD_ADDR_OWVAR 28
45347: PUSH
45348: LD_INT 20
45350: ST_TO_ADDR
// hc_gallery =  ;
45351: LD_ADDR_OWVAR 33
45355: PUSH
45356: LD_STRING 
45358: ST_TO_ADDR
// animal := CreateHuman ;
45359: LD_ADDR_VAR 0 12
45363: PUSH
45364: CALL_OW 44
45368: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45369: LD_VAR 0 12
45373: PPUSH
45374: LD_VAR 0 9
45378: PPUSH
45379: LD_INT 0
45381: PPUSH
45382: CALL 47019 0 3
// end ;
45386: GO 45340
45388: POP
45389: POP
// end ;
45390: LD_VAR 0 10
45394: RET
// export function WantHeal ( sci , unit ) ; begin
45395: LD_INT 0
45397: PPUSH
// if GetTaskList ( sci ) > 0 then
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 437
45407: PUSH
45408: LD_INT 0
45410: GREATER
45411: IFFALSE 45481
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45413: LD_VAR 0 1
45417: PPUSH
45418: CALL_OW 437
45422: PUSH
45423: LD_INT 1
45425: ARRAY
45426: PUSH
45427: LD_INT 1
45429: ARRAY
45430: PUSH
45431: LD_STRING l
45433: EQUAL
45434: PUSH
45435: LD_VAR 0 1
45439: PPUSH
45440: CALL_OW 437
45444: PUSH
45445: LD_INT 1
45447: ARRAY
45448: PUSH
45449: LD_INT 4
45451: ARRAY
45452: PUSH
45453: LD_VAR 0 2
45457: EQUAL
45458: AND
45459: IFFALSE 45471
// result := true else
45461: LD_ADDR_VAR 0 3
45465: PUSH
45466: LD_INT 1
45468: ST_TO_ADDR
45469: GO 45479
// result := false ;
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 0
45478: ST_TO_ADDR
// end else
45479: GO 45489
// result := false ;
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_INT 0
45488: ST_TO_ADDR
// end ;
45489: LD_VAR 0 3
45493: RET
// export function HealTarget ( sci ) ; begin
45494: LD_INT 0
45496: PPUSH
// if not sci then
45497: LD_VAR 0 1
45501: NOT
45502: IFFALSE 45506
// exit ;
45504: GO 45571
// result := 0 ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: LD_INT 0
45513: ST_TO_ADDR
// if GetTaskList ( sci ) then
45514: LD_VAR 0 1
45518: PPUSH
45519: CALL_OW 437
45523: IFFALSE 45571
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45525: LD_VAR 0 1
45529: PPUSH
45530: CALL_OW 437
45534: PUSH
45535: LD_INT 1
45537: ARRAY
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: PUSH
45543: LD_STRING l
45545: EQUAL
45546: IFFALSE 45571
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45548: LD_ADDR_VAR 0 2
45552: PUSH
45553: LD_VAR 0 1
45557: PPUSH
45558: CALL_OW 437
45562: PUSH
45563: LD_INT 1
45565: ARRAY
45566: PUSH
45567: LD_INT 4
45569: ARRAY
45570: ST_TO_ADDR
// end ;
45571: LD_VAR 0 2
45575: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45576: LD_INT 0
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
// if not base_units then
45582: LD_VAR 0 1
45586: NOT
45587: IFFALSE 45591
// exit ;
45589: GO 45678
// result := false ;
45591: LD_ADDR_VAR 0 2
45595: PUSH
45596: LD_INT 0
45598: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: LD_INT 21
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PPUSH
45619: CALL_OW 72
45623: ST_TO_ADDR
// if not tmp then
45624: LD_VAR 0 5
45628: NOT
45629: IFFALSE 45633
// exit ;
45631: GO 45678
// for i in tmp do
45633: LD_ADDR_VAR 0 3
45637: PUSH
45638: LD_VAR 0 5
45642: PUSH
45643: FOR_IN
45644: IFFALSE 45676
// begin result := EnemyInRange ( i , 22 ) ;
45646: LD_ADDR_VAR 0 2
45650: PUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: LD_INT 22
45658: PPUSH
45659: CALL 43115 0 2
45663: ST_TO_ADDR
// if result then
45664: LD_VAR 0 2
45668: IFFALSE 45674
// exit ;
45670: POP
45671: POP
45672: GO 45678
// end ;
45674: GO 45643
45676: POP
45677: POP
// end ;
45678: LD_VAR 0 2
45682: RET
// export function FilterByTag ( units , tag ) ; begin
45683: LD_INT 0
45685: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45686: LD_ADDR_VAR 0 3
45690: PUSH
45691: LD_VAR 0 1
45695: PPUSH
45696: LD_INT 120
45698: PUSH
45699: LD_VAR 0 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PPUSH
45708: CALL_OW 72
45712: ST_TO_ADDR
// end ;
45713: LD_VAR 0 3
45717: RET
// export function IsDriver ( un ) ; begin
45718: LD_INT 0
45720: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45721: LD_ADDR_VAR 0 2
45725: PUSH
45726: LD_VAR 0 1
45730: PUSH
45731: LD_INT 55
45733: PUSH
45734: EMPTY
45735: LIST
45736: PPUSH
45737: CALL_OW 69
45741: IN
45742: ST_TO_ADDR
// end ;
45743: LD_VAR 0 2
45747: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45748: LD_INT 0
45750: PPUSH
45751: PPUSH
// list := [ ] ;
45752: LD_ADDR_VAR 0 5
45756: PUSH
45757: EMPTY
45758: ST_TO_ADDR
// case d of 0 :
45759: LD_VAR 0 3
45763: PUSH
45764: LD_INT 0
45766: DOUBLE
45767: EQUAL
45768: IFTRUE 45772
45770: GO 45905
45772: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45773: LD_ADDR_VAR 0 5
45777: PUSH
45778: LD_VAR 0 1
45782: PUSH
45783: LD_INT 4
45785: MINUS
45786: PUSH
45787: LD_VAR 0 2
45791: PUSH
45792: LD_INT 4
45794: MINUS
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: PUSH
45804: LD_VAR 0 1
45808: PUSH
45809: LD_INT 3
45811: MINUS
45812: PUSH
45813: LD_VAR 0 2
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: PUSH
45826: LD_VAR 0 1
45830: PUSH
45831: LD_INT 4
45833: PLUS
45834: PUSH
45835: LD_VAR 0 2
45839: PUSH
45840: LD_INT 4
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: PUSH
45848: LD_VAR 0 1
45852: PUSH
45853: LD_INT 3
45855: PLUS
45856: PUSH
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 3
45864: PLUS
45865: PUSH
45866: LD_INT 5
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: PUSH
45874: LD_VAR 0 1
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: LD_INT 4
45886: PLUS
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// end ; 1 :
45903: GO 46603
45905: LD_INT 1
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 46046
45913: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45914: LD_ADDR_VAR 0 5
45918: PUSH
45919: LD_VAR 0 1
45923: PUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_INT 4
45931: MINUS
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: PUSH
45941: LD_VAR 0 1
45945: PUSH
45946: LD_INT 3
45948: MINUS
45949: PUSH
45950: LD_VAR 0 2
45954: PUSH
45955: LD_INT 3
45957: MINUS
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: PUSH
45967: LD_VAR 0 1
45971: PUSH
45972: LD_INT 4
45974: MINUS
45975: PUSH
45976: LD_VAR 0 2
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: PUSH
45989: LD_VAR 0 1
45993: PUSH
45994: LD_VAR 0 2
45998: PUSH
45999: LD_INT 3
46001: PLUS
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: PUSH
46011: LD_VAR 0 1
46015: PUSH
46016: LD_INT 4
46018: PLUS
46019: PUSH
46020: LD_VAR 0 2
46024: PUSH
46025: LD_INT 4
46027: PLUS
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// end ; 2 :
46044: GO 46603
46046: LD_INT 2
46048: DOUBLE
46049: EQUAL
46050: IFTRUE 46054
46052: GO 46183
46054: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46055: LD_ADDR_VAR 0 5
46059: PUSH
46060: LD_VAR 0 1
46064: PUSH
46065: LD_VAR 0 2
46069: PUSH
46070: LD_INT 3
46072: MINUS
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: PUSH
46082: LD_VAR 0 1
46086: PUSH
46087: LD_INT 4
46089: PLUS
46090: PUSH
46091: LD_VAR 0 2
46095: PUSH
46096: LD_INT 4
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: PUSH
46104: LD_VAR 0 1
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_INT 4
46116: PLUS
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_INT 3
46133: MINUS
46134: PUSH
46135: LD_VAR 0 2
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: PUSH
46148: LD_VAR 0 1
46152: PUSH
46153: LD_INT 4
46155: MINUS
46156: PUSH
46157: LD_VAR 0 2
46161: PUSH
46162: LD_INT 4
46164: MINUS
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// end ; 3 :
46181: GO 46603
46183: LD_INT 3
46185: DOUBLE
46186: EQUAL
46187: IFTRUE 46191
46189: GO 46324
46191: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46192: LD_ADDR_VAR 0 5
46196: PUSH
46197: LD_VAR 0 1
46201: PUSH
46202: LD_INT 3
46204: PLUS
46205: PUSH
46206: LD_VAR 0 2
46210: PUSH
46211: LD_INT 4
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: PUSH
46219: LD_VAR 0 1
46223: PUSH
46224: LD_INT 4
46226: PLUS
46227: PUSH
46228: LD_VAR 0 2
46232: PUSH
46233: LD_INT 4
46235: PLUS
46236: PUSH
46237: LD_INT 5
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: PUSH
46245: LD_VAR 0 1
46249: PUSH
46250: LD_INT 4
46252: MINUS
46253: PUSH
46254: LD_VAR 0 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: PUSH
46267: LD_VAR 0 1
46271: PUSH
46272: LD_VAR 0 2
46276: PUSH
46277: LD_INT 4
46279: MINUS
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: PUSH
46289: LD_VAR 0 1
46293: PUSH
46294: LD_INT 3
46296: MINUS
46297: PUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_INT 3
46305: MINUS
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// end ; 4 :
46322: GO 46603
46324: LD_INT 4
46326: DOUBLE
46327: EQUAL
46328: IFTRUE 46332
46330: GO 46465
46332: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46333: LD_ADDR_VAR 0 5
46337: PUSH
46338: LD_VAR 0 1
46342: PUSH
46343: LD_VAR 0 2
46347: PUSH
46348: LD_INT 4
46350: PLUS
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: PUSH
46360: LD_VAR 0 1
46364: PUSH
46365: LD_INT 3
46367: PLUS
46368: PUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_INT 3
46376: PLUS
46377: PUSH
46378: LD_INT 5
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: PUSH
46386: LD_VAR 0 1
46390: PUSH
46391: LD_INT 4
46393: PLUS
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: LD_INT 4
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: PUSH
46408: LD_VAR 0 1
46412: PUSH
46413: LD_VAR 0 2
46417: PUSH
46418: LD_INT 3
46420: MINUS
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: PUSH
46430: LD_VAR 0 1
46434: PUSH
46435: LD_INT 4
46437: MINUS
46438: PUSH
46439: LD_VAR 0 2
46443: PUSH
46444: LD_INT 4
46446: MINUS
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// end ; 5 :
46463: GO 46603
46465: LD_INT 5
46467: DOUBLE
46468: EQUAL
46469: IFTRUE 46473
46471: GO 46602
46473: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46474: LD_ADDR_VAR 0 5
46478: PUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_INT 4
46486: MINUS
46487: PUSH
46488: LD_VAR 0 2
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: PUSH
46501: LD_VAR 0 1
46505: PUSH
46506: LD_VAR 0 2
46510: PUSH
46511: LD_INT 4
46513: MINUS
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: PUSH
46523: LD_VAR 0 1
46527: PUSH
46528: LD_INT 4
46530: PLUS
46531: PUSH
46532: LD_VAR 0 2
46536: PUSH
46537: LD_INT 4
46539: PLUS
46540: PUSH
46541: LD_INT 5
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: LD_VAR 0 1
46553: PUSH
46554: LD_INT 3
46556: PLUS
46557: PUSH
46558: LD_VAR 0 2
46562: PUSH
46563: LD_INT 4
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: PUSH
46571: LD_VAR 0 1
46575: PUSH
46576: LD_VAR 0 2
46580: PUSH
46581: LD_INT 3
46583: PLUS
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// end ; end ;
46600: GO 46603
46602: POP
// result := list ;
46603: LD_ADDR_VAR 0 4
46607: PUSH
46608: LD_VAR 0 5
46612: ST_TO_ADDR
// end ;
46613: LD_VAR 0 4
46617: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46618: LD_INT 0
46620: PPUSH
46621: PPUSH
46622: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46623: LD_VAR 0 1
46627: NOT
46628: PUSH
46629: LD_VAR 0 2
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 4
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: IN
46652: NOT
46653: OR
46654: IFFALSE 46658
// exit ;
46656: GO 46741
// tmp := [ ] ;
46658: LD_ADDR_VAR 0 5
46662: PUSH
46663: EMPTY
46664: ST_TO_ADDR
// for i in units do
46665: LD_ADDR_VAR 0 4
46669: PUSH
46670: LD_VAR 0 1
46674: PUSH
46675: FOR_IN
46676: IFFALSE 46710
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46678: LD_ADDR_VAR 0 5
46682: PUSH
46683: LD_VAR 0 5
46687: PPUSH
46688: LD_VAR 0 4
46692: PPUSH
46693: LD_VAR 0 2
46697: PPUSH
46698: CALL_OW 259
46702: PPUSH
46703: CALL 48114 0 2
46707: ST_TO_ADDR
46708: GO 46675
46710: POP
46711: POP
// if not tmp then
46712: LD_VAR 0 5
46716: NOT
46717: IFFALSE 46721
// exit ;
46719: GO 46741
// result := SortListByListDesc ( units , tmp ) ;
46721: LD_ADDR_VAR 0 3
46725: PUSH
46726: LD_VAR 0 1
46730: PPUSH
46731: LD_VAR 0 5
46735: PPUSH
46736: CALL_OW 77
46740: ST_TO_ADDR
// end ;
46741: LD_VAR 0 3
46745: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
// result := false ;
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: LD_INT 0
46758: ST_TO_ADDR
// if not building then
46759: LD_VAR 0 2
46763: NOT
46764: IFFALSE 46768
// exit ;
46766: GO 46906
// x := GetX ( building ) ;
46768: LD_ADDR_VAR 0 4
46772: PUSH
46773: LD_VAR 0 2
46777: PPUSH
46778: CALL_OW 250
46782: ST_TO_ADDR
// y := GetY ( building ) ;
46783: LD_ADDR_VAR 0 5
46787: PUSH
46788: LD_VAR 0 2
46792: PPUSH
46793: CALL_OW 251
46797: ST_TO_ADDR
// if not x or not y then
46798: LD_VAR 0 4
46802: NOT
46803: PUSH
46804: LD_VAR 0 5
46808: NOT
46809: OR
46810: IFFALSE 46814
// exit ;
46812: GO 46906
// if GetTaskList ( unit ) then
46814: LD_VAR 0 1
46818: PPUSH
46819: CALL_OW 437
46823: IFFALSE 46906
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46825: LD_STRING e
46827: PUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: CALL_OW 437
46837: PUSH
46838: LD_INT 1
46840: ARRAY
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: EQUAL
46846: PUSH
46847: LD_VAR 0 4
46851: PUSH
46852: LD_VAR 0 1
46856: PPUSH
46857: CALL_OW 437
46861: PUSH
46862: LD_INT 1
46864: ARRAY
46865: PUSH
46866: LD_INT 2
46868: ARRAY
46869: EQUAL
46870: AND
46871: PUSH
46872: LD_VAR 0 5
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 437
46886: PUSH
46887: LD_INT 1
46889: ARRAY
46890: PUSH
46891: LD_INT 3
46893: ARRAY
46894: EQUAL
46895: AND
46896: IFFALSE 46906
// result := true end ;
46898: LD_ADDR_VAR 0 3
46902: PUSH
46903: LD_INT 1
46905: ST_TO_ADDR
// end ;
46906: LD_VAR 0 3
46910: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46911: LD_INT 0
46913: PPUSH
// result := false ;
46914: LD_ADDR_VAR 0 4
46918: PUSH
46919: LD_INT 0
46921: ST_TO_ADDR
// if GetTaskList ( unit ) then
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 437
46931: IFFALSE 47014
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46933: LD_STRING M
46935: PUSH
46936: LD_VAR 0 1
46940: PPUSH
46941: CALL_OW 437
46945: PUSH
46946: LD_INT 1
46948: ARRAY
46949: PUSH
46950: LD_INT 1
46952: ARRAY
46953: EQUAL
46954: PUSH
46955: LD_VAR 0 2
46959: PUSH
46960: LD_VAR 0 1
46964: PPUSH
46965: CALL_OW 437
46969: PUSH
46970: LD_INT 1
46972: ARRAY
46973: PUSH
46974: LD_INT 2
46976: ARRAY
46977: EQUAL
46978: AND
46979: PUSH
46980: LD_VAR 0 3
46984: PUSH
46985: LD_VAR 0 1
46989: PPUSH
46990: CALL_OW 437
46994: PUSH
46995: LD_INT 1
46997: ARRAY
46998: PUSH
46999: LD_INT 3
47001: ARRAY
47002: EQUAL
47003: AND
47004: IFFALSE 47014
// result := true ;
47006: LD_ADDR_VAR 0 4
47010: PUSH
47011: LD_INT 1
47013: ST_TO_ADDR
// end ; end ;
47014: LD_VAR 0 4
47018: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47019: LD_INT 0
47021: PPUSH
47022: PPUSH
47023: PPUSH
47024: PPUSH
// if not unit or not area then
47025: LD_VAR 0 1
47029: NOT
47030: PUSH
47031: LD_VAR 0 2
47035: NOT
47036: OR
47037: IFFALSE 47041
// exit ;
47039: GO 47217
// tmp := AreaToList ( area , i ) ;
47041: LD_ADDR_VAR 0 6
47045: PUSH
47046: LD_VAR 0 2
47050: PPUSH
47051: LD_VAR 0 5
47055: PPUSH
47056: CALL_OW 517
47060: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47061: LD_ADDR_VAR 0 5
47065: PUSH
47066: DOUBLE
47067: LD_INT 1
47069: DEC
47070: ST_TO_ADDR
47071: LD_VAR 0 6
47075: PUSH
47076: LD_INT 1
47078: ARRAY
47079: PUSH
47080: FOR_TO
47081: IFFALSE 47215
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47083: LD_ADDR_VAR 0 7
47087: PUSH
47088: LD_VAR 0 6
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PUSH
47097: LD_VAR 0 5
47101: ARRAY
47102: PUSH
47103: LD_VAR 0 6
47107: PUSH
47108: LD_INT 2
47110: ARRAY
47111: PUSH
47112: LD_VAR 0 5
47116: ARRAY
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47122: LD_INT 92
47124: PUSH
47125: LD_VAR 0 7
47129: PUSH
47130: LD_INT 1
47132: ARRAY
47133: PUSH
47134: LD_VAR 0 7
47138: PUSH
47139: LD_INT 2
47141: ARRAY
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: PPUSH
47152: CALL_OW 69
47156: PUSH
47157: LD_INT 0
47159: EQUAL
47160: IFFALSE 47213
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47162: LD_VAR 0 1
47166: PPUSH
47167: LD_VAR 0 7
47171: PUSH
47172: LD_INT 1
47174: ARRAY
47175: PPUSH
47176: LD_VAR 0 7
47180: PUSH
47181: LD_INT 2
47183: ARRAY
47184: PPUSH
47185: LD_VAR 0 3
47189: PPUSH
47190: CALL_OW 48
// result := IsPlaced ( unit ) ;
47194: LD_ADDR_VAR 0 4
47198: PUSH
47199: LD_VAR 0 1
47203: PPUSH
47204: CALL_OW 305
47208: ST_TO_ADDR
// exit ;
47209: POP
47210: POP
47211: GO 47217
// end ; end ;
47213: GO 47080
47215: POP
47216: POP
// end ;
47217: LD_VAR 0 4
47221: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47222: LD_INT 0
47224: PPUSH
47225: PPUSH
47226: PPUSH
// if not side or side > 8 then
47227: LD_VAR 0 1
47231: NOT
47232: PUSH
47233: LD_VAR 0 1
47237: PUSH
47238: LD_INT 8
47240: GREATER
47241: OR
47242: IFFALSE 47246
// exit ;
47244: GO 47433
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47246: LD_ADDR_VAR 0 4
47250: PUSH
47251: LD_INT 22
47253: PUSH
47254: LD_VAR 0 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 21
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PPUSH
47277: CALL_OW 69
47281: ST_TO_ADDR
// if not tmp then
47282: LD_VAR 0 4
47286: NOT
47287: IFFALSE 47291
// exit ;
47289: GO 47433
// enable_addtolog := true ;
47291: LD_ADDR_OWVAR 81
47295: PUSH
47296: LD_INT 1
47298: ST_TO_ADDR
// AddToLog ( [ ) ;
47299: LD_STRING [
47301: PPUSH
47302: CALL_OW 561
// for i in tmp do
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_VAR 0 4
47315: PUSH
47316: FOR_IN
47317: IFFALSE 47424
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47319: LD_STRING [
47321: PUSH
47322: LD_VAR 0 3
47326: PPUSH
47327: CALL_OW 266
47331: STR
47332: PUSH
47333: LD_STRING , 
47335: STR
47336: PUSH
47337: LD_VAR 0 3
47341: PPUSH
47342: CALL_OW 250
47346: STR
47347: PUSH
47348: LD_STRING , 
47350: STR
47351: PUSH
47352: LD_VAR 0 3
47356: PPUSH
47357: CALL_OW 251
47361: STR
47362: PUSH
47363: LD_STRING , 
47365: STR
47366: PUSH
47367: LD_VAR 0 3
47371: PPUSH
47372: CALL_OW 254
47376: STR
47377: PUSH
47378: LD_STRING , 
47380: STR
47381: PUSH
47382: LD_VAR 0 3
47386: PPUSH
47387: LD_INT 1
47389: PPUSH
47390: CALL_OW 268
47394: STR
47395: PUSH
47396: LD_STRING , 
47398: STR
47399: PUSH
47400: LD_VAR 0 3
47404: PPUSH
47405: LD_INT 2
47407: PPUSH
47408: CALL_OW 268
47412: STR
47413: PUSH
47414: LD_STRING ],
47416: STR
47417: PPUSH
47418: CALL_OW 561
// end ;
47422: GO 47316
47424: POP
47425: POP
// AddToLog ( ]; ) ;
47426: LD_STRING ];
47428: PPUSH
47429: CALL_OW 561
// end ;
47433: LD_VAR 0 2
47437: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47438: LD_INT 0
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
47444: PPUSH
// if not area or not rate or not max then
47445: LD_VAR 0 1
47449: NOT
47450: PUSH
47451: LD_VAR 0 2
47455: NOT
47456: OR
47457: PUSH
47458: LD_VAR 0 4
47462: NOT
47463: OR
47464: IFFALSE 47468
// exit ;
47466: GO 47657
// while 1 do
47468: LD_INT 1
47470: IFFALSE 47657
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47472: LD_ADDR_VAR 0 9
47476: PUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: LD_INT 1
47484: PPUSH
47485: CALL_OW 287
47489: PUSH
47490: LD_INT 10
47492: MUL
47493: ST_TO_ADDR
// r := rate / 10 ;
47494: LD_ADDR_VAR 0 7
47498: PUSH
47499: LD_VAR 0 2
47503: PUSH
47504: LD_INT 10
47506: DIVREAL
47507: ST_TO_ADDR
// time := 1 1$00 ;
47508: LD_ADDR_VAR 0 8
47512: PUSH
47513: LD_INT 2100
47515: ST_TO_ADDR
// if amount < min then
47516: LD_VAR 0 9
47520: PUSH
47521: LD_VAR 0 3
47525: LESS
47526: IFFALSE 47544
// r := r * 2 else
47528: LD_ADDR_VAR 0 7
47532: PUSH
47533: LD_VAR 0 7
47537: PUSH
47538: LD_INT 2
47540: MUL
47541: ST_TO_ADDR
47542: GO 47570
// if amount > max then
47544: LD_VAR 0 9
47548: PUSH
47549: LD_VAR 0 4
47553: GREATER
47554: IFFALSE 47570
// r := r / 2 ;
47556: LD_ADDR_VAR 0 7
47560: PUSH
47561: LD_VAR 0 7
47565: PUSH
47566: LD_INT 2
47568: DIVREAL
47569: ST_TO_ADDR
// time := time / r ;
47570: LD_ADDR_VAR 0 8
47574: PUSH
47575: LD_VAR 0 8
47579: PUSH
47580: LD_VAR 0 7
47584: DIVREAL
47585: ST_TO_ADDR
// if time < 0 then
47586: LD_VAR 0 8
47590: PUSH
47591: LD_INT 0
47593: LESS
47594: IFFALSE 47611
// time := time * - 1 ;
47596: LD_ADDR_VAR 0 8
47600: PUSH
47601: LD_VAR 0 8
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: MUL
47610: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47611: LD_VAR 0 8
47615: PUSH
47616: LD_INT 35
47618: PPUSH
47619: LD_INT 875
47621: PPUSH
47622: CALL_OW 12
47626: PLUS
47627: PPUSH
47628: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47632: LD_INT 1
47634: PPUSH
47635: LD_INT 5
47637: PPUSH
47638: CALL_OW 12
47642: PPUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: LD_INT 1
47650: PPUSH
47651: CALL_OW 55
// end ;
47655: GO 47468
// end ;
47657: LD_VAR 0 5
47661: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47662: LD_INT 0
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
47668: PPUSH
47669: PPUSH
47670: PPUSH
47671: PPUSH
// if not turrets or not factories then
47672: LD_VAR 0 1
47676: NOT
47677: PUSH
47678: LD_VAR 0 2
47682: NOT
47683: OR
47684: IFFALSE 47688
// exit ;
47686: GO 47995
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47688: LD_ADDR_VAR 0 10
47692: PUSH
47693: LD_INT 5
47695: PUSH
47696: LD_INT 6
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 4
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: LD_INT 5
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 24
47730: PUSH
47731: LD_INT 25
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 23
47740: PUSH
47741: LD_INT 27
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 42
47754: PUSH
47755: LD_INT 43
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 44
47764: PUSH
47765: LD_INT 46
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 45
47774: PUSH
47775: LD_INT 47
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// result := [ ] ;
47792: LD_ADDR_VAR 0 3
47796: PUSH
47797: EMPTY
47798: ST_TO_ADDR
// for i in turrets do
47799: LD_ADDR_VAR 0 4
47803: PUSH
47804: LD_VAR 0 1
47808: PUSH
47809: FOR_IN
47810: IFFALSE 47993
// begin nat := GetNation ( i ) ;
47812: LD_ADDR_VAR 0 7
47816: PUSH
47817: LD_VAR 0 4
47821: PPUSH
47822: CALL_OW 248
47826: ST_TO_ADDR
// weapon := 0 ;
47827: LD_ADDR_VAR 0 8
47831: PUSH
47832: LD_INT 0
47834: ST_TO_ADDR
// if not nat then
47835: LD_VAR 0 7
47839: NOT
47840: IFFALSE 47844
// continue ;
47842: GO 47809
// for j in list [ nat ] do
47844: LD_ADDR_VAR 0 5
47848: PUSH
47849: LD_VAR 0 10
47853: PUSH
47854: LD_VAR 0 7
47858: ARRAY
47859: PUSH
47860: FOR_IN
47861: IFFALSE 47902
// if GetBWeapon ( i ) = j [ 1 ] then
47863: LD_VAR 0 4
47867: PPUSH
47868: CALL_OW 269
47872: PUSH
47873: LD_VAR 0 5
47877: PUSH
47878: LD_INT 1
47880: ARRAY
47881: EQUAL
47882: IFFALSE 47900
// begin weapon := j [ 2 ] ;
47884: LD_ADDR_VAR 0 8
47888: PUSH
47889: LD_VAR 0 5
47893: PUSH
47894: LD_INT 2
47896: ARRAY
47897: ST_TO_ADDR
// break ;
47898: GO 47902
// end ;
47900: GO 47860
47902: POP
47903: POP
// if not weapon then
47904: LD_VAR 0 8
47908: NOT
47909: IFFALSE 47913
// continue ;
47911: GO 47809
// for k in factories do
47913: LD_ADDR_VAR 0 6
47917: PUSH
47918: LD_VAR 0 2
47922: PUSH
47923: FOR_IN
47924: IFFALSE 47989
// begin weapons := AvailableWeaponList ( k ) ;
47926: LD_ADDR_VAR 0 9
47930: PUSH
47931: LD_VAR 0 6
47935: PPUSH
47936: CALL_OW 478
47940: ST_TO_ADDR
// if not weapons then
47941: LD_VAR 0 9
47945: NOT
47946: IFFALSE 47950
// continue ;
47948: GO 47923
// if weapon in weapons then
47950: LD_VAR 0 8
47954: PUSH
47955: LD_VAR 0 9
47959: IN
47960: IFFALSE 47987
// begin result := [ i , weapon ] ;
47962: LD_ADDR_VAR 0 3
47966: PUSH
47967: LD_VAR 0 4
47971: PUSH
47972: LD_VAR 0 8
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// exit ;
47981: POP
47982: POP
47983: POP
47984: POP
47985: GO 47995
// end ; end ;
47987: GO 47923
47989: POP
47990: POP
// end ;
47991: GO 47809
47993: POP
47994: POP
// end ;
47995: LD_VAR 0 3
47999: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48000: LD_INT 0
48002: PPUSH
// if not side or side > 8 then
48003: LD_VAR 0 3
48007: NOT
48008: PUSH
48009: LD_VAR 0 3
48013: PUSH
48014: LD_INT 8
48016: GREATER
48017: OR
48018: IFFALSE 48022
// exit ;
48020: GO 48081
// if not range then
48022: LD_VAR 0 4
48026: NOT
48027: IFFALSE 48038
// range := - 12 ;
48029: LD_ADDR_VAR 0 4
48033: PUSH
48034: LD_INT 12
48036: NEG
48037: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48038: LD_VAR 0 1
48042: PPUSH
48043: LD_VAR 0 2
48047: PPUSH
48048: LD_VAR 0 3
48052: PPUSH
48053: LD_VAR 0 4
48057: PPUSH
48058: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48062: LD_VAR 0 1
48066: PPUSH
48067: LD_VAR 0 2
48071: PPUSH
48072: LD_VAR 0 3
48076: PPUSH
48077: CALL_OW 331
// end ;
48081: LD_VAR 0 5
48085: RET
// export function Video ( mode ) ; begin
48086: LD_INT 0
48088: PPUSH
// ingame_video = mode ;
48089: LD_ADDR_OWVAR 52
48093: PUSH
48094: LD_VAR 0 1
48098: ST_TO_ADDR
// interface_hidden = mode ;
48099: LD_ADDR_OWVAR 54
48103: PUSH
48104: LD_VAR 0 1
48108: ST_TO_ADDR
// end ;
48109: LD_VAR 0 2
48113: RET
// export function Join ( array , element ) ; begin
48114: LD_INT 0
48116: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48117: LD_ADDR_VAR 0 3
48121: PUSH
48122: LD_VAR 0 1
48126: PPUSH
48127: LD_VAR 0 1
48131: PUSH
48132: LD_INT 1
48134: PLUS
48135: PPUSH
48136: LD_VAR 0 2
48140: PPUSH
48141: CALL_OW 1
48145: ST_TO_ADDR
// end ;
48146: LD_VAR 0 3
48150: RET
// export function JoinUnion ( array , element ) ; begin
48151: LD_INT 0
48153: PPUSH
// result := array union element ;
48154: LD_ADDR_VAR 0 3
48158: PUSH
48159: LD_VAR 0 1
48163: PUSH
48164: LD_VAR 0 2
48168: UNION
48169: ST_TO_ADDR
// end ;
48170: LD_VAR 0 3
48174: RET
// export function GetBehemoths ( side ) ; begin
48175: LD_INT 0
48177: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48178: LD_ADDR_VAR 0 2
48182: PUSH
48183: LD_INT 22
48185: PUSH
48186: LD_VAR 0 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 31
48197: PUSH
48198: LD_INT 25
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PPUSH
48209: CALL_OW 69
48213: ST_TO_ADDR
// end ;
48214: LD_VAR 0 2
48218: RET
// export function Shuffle ( array ) ; var i , index ; begin
48219: LD_INT 0
48221: PPUSH
48222: PPUSH
48223: PPUSH
// result := [ ] ;
48224: LD_ADDR_VAR 0 2
48228: PUSH
48229: EMPTY
48230: ST_TO_ADDR
// if not array then
48231: LD_VAR 0 1
48235: NOT
48236: IFFALSE 48240
// exit ;
48238: GO 48339
// Randomize ;
48240: CALL_OW 10
// for i = array downto 1 do
48244: LD_ADDR_VAR 0 3
48248: PUSH
48249: DOUBLE
48250: LD_VAR 0 1
48254: INC
48255: ST_TO_ADDR
48256: LD_INT 1
48258: PUSH
48259: FOR_DOWNTO
48260: IFFALSE 48337
// begin index := rand ( 1 , array ) ;
48262: LD_ADDR_VAR 0 4
48266: PUSH
48267: LD_INT 1
48269: PPUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 12
48279: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48280: LD_ADDR_VAR 0 2
48284: PUSH
48285: LD_VAR 0 2
48289: PPUSH
48290: LD_VAR 0 2
48294: PUSH
48295: LD_INT 1
48297: PLUS
48298: PPUSH
48299: LD_VAR 0 1
48303: PUSH
48304: LD_VAR 0 4
48308: ARRAY
48309: PPUSH
48310: CALL_OW 2
48314: ST_TO_ADDR
// array := Delete ( array , index ) ;
48315: LD_ADDR_VAR 0 1
48319: PUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: LD_VAR 0 4
48329: PPUSH
48330: CALL_OW 3
48334: ST_TO_ADDR
// end ;
48335: GO 48259
48337: POP
48338: POP
// end ;
48339: LD_VAR 0 2
48343: RET
// export function GetBaseMaterials ( base ) ; begin
48344: LD_INT 0
48346: PPUSH
// result := [ 0 , 0 , 0 ] ;
48347: LD_ADDR_VAR 0 2
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// if not base then
48366: LD_VAR 0 1
48370: NOT
48371: IFFALSE 48375
// exit ;
48373: GO 48424
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48375: LD_ADDR_VAR 0 2
48379: PUSH
48380: LD_VAR 0 1
48384: PPUSH
48385: LD_INT 1
48387: PPUSH
48388: CALL_OW 275
48392: PUSH
48393: LD_VAR 0 1
48397: PPUSH
48398: LD_INT 2
48400: PPUSH
48401: CALL_OW 275
48405: PUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: LD_INT 3
48413: PPUSH
48414: CALL_OW 275
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// end ;
48424: LD_VAR 0 2
48428: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48429: LD_INT 0
48431: PPUSH
48432: PPUSH
// result := array ;
48433: LD_ADDR_VAR 0 3
48437: PUSH
48438: LD_VAR 0 1
48442: ST_TO_ADDR
// if size >= result then
48443: LD_VAR 0 2
48447: PUSH
48448: LD_VAR 0 3
48452: GREATEREQUAL
48453: IFFALSE 48457
// exit ;
48455: GO 48507
// if size then
48457: LD_VAR 0 2
48461: IFFALSE 48507
// for i := array downto size do
48463: LD_ADDR_VAR 0 4
48467: PUSH
48468: DOUBLE
48469: LD_VAR 0 1
48473: INC
48474: ST_TO_ADDR
48475: LD_VAR 0 2
48479: PUSH
48480: FOR_DOWNTO
48481: IFFALSE 48505
// result := Delete ( result , result ) ;
48483: LD_ADDR_VAR 0 3
48487: PUSH
48488: LD_VAR 0 3
48492: PPUSH
48493: LD_VAR 0 3
48497: PPUSH
48498: CALL_OW 3
48502: ST_TO_ADDR
48503: GO 48480
48505: POP
48506: POP
// end ;
48507: LD_VAR 0 3
48511: RET
// export function ComExit ( unit ) ; var tmp ; begin
48512: LD_INT 0
48514: PPUSH
48515: PPUSH
// if not IsInUnit ( unit ) then
48516: LD_VAR 0 1
48520: PPUSH
48521: CALL_OW 310
48525: NOT
48526: IFFALSE 48530
// exit ;
48528: GO 48590
// tmp := IsInUnit ( unit ) ;
48530: LD_ADDR_VAR 0 3
48534: PUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: CALL_OW 310
48544: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48545: LD_VAR 0 3
48549: PPUSH
48550: CALL_OW 247
48554: PUSH
48555: LD_INT 2
48557: EQUAL
48558: IFFALSE 48571
// ComExitVehicle ( unit ) else
48560: LD_VAR 0 1
48564: PPUSH
48565: CALL_OW 121
48569: GO 48580
// ComExitBuilding ( unit ) ;
48571: LD_VAR 0 1
48575: PPUSH
48576: CALL_OW 122
// result := tmp ;
48580: LD_ADDR_VAR 0 2
48584: PUSH
48585: LD_VAR 0 3
48589: ST_TO_ADDR
// end ;
48590: LD_VAR 0 2
48594: RET
// export function ComExitAll ( units ) ; var i ; begin
48595: LD_INT 0
48597: PPUSH
48598: PPUSH
// if not units then
48599: LD_VAR 0 1
48603: NOT
48604: IFFALSE 48608
// exit ;
48606: GO 48634
// for i in units do
48608: LD_ADDR_VAR 0 3
48612: PUSH
48613: LD_VAR 0 1
48617: PUSH
48618: FOR_IN
48619: IFFALSE 48632
// ComExit ( i ) ;
48621: LD_VAR 0 3
48625: PPUSH
48626: CALL 48512 0 1
48630: GO 48618
48632: POP
48633: POP
// end ;
48634: LD_VAR 0 2
48638: RET
// export function ResetHc ; begin
48639: LD_INT 0
48641: PPUSH
// InitHc ;
48642: CALL_OW 19
// hc_importance := 0 ;
48646: LD_ADDR_OWVAR 32
48650: PUSH
48651: LD_INT 0
48653: ST_TO_ADDR
// end ;
48654: LD_VAR 0 1
48658: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48659: LD_INT 0
48661: PPUSH
48662: PPUSH
48663: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48664: LD_ADDR_VAR 0 6
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: LD_VAR 0 3
48678: PLUS
48679: PUSH
48680: LD_INT 2
48682: DIV
48683: ST_TO_ADDR
// if _x < 0 then
48684: LD_VAR 0 6
48688: PUSH
48689: LD_INT 0
48691: LESS
48692: IFFALSE 48709
// _x := _x * - 1 ;
48694: LD_ADDR_VAR 0 6
48698: PUSH
48699: LD_VAR 0 6
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: MUL
48708: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48709: LD_ADDR_VAR 0 7
48713: PUSH
48714: LD_VAR 0 2
48718: PUSH
48719: LD_VAR 0 4
48723: PLUS
48724: PUSH
48725: LD_INT 2
48727: DIV
48728: ST_TO_ADDR
// if _y < 0 then
48729: LD_VAR 0 7
48733: PUSH
48734: LD_INT 0
48736: LESS
48737: IFFALSE 48754
// _y := _y * - 1 ;
48739: LD_ADDR_VAR 0 7
48743: PUSH
48744: LD_VAR 0 7
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: MUL
48753: ST_TO_ADDR
// result := [ _x , _y ] ;
48754: LD_ADDR_VAR 0 5
48758: PUSH
48759: LD_VAR 0 6
48763: PUSH
48764: LD_VAR 0 7
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// end ;
48773: LD_VAR 0 5
48777: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48778: LD_INT 0
48780: PPUSH
48781: PPUSH
48782: PPUSH
48783: PPUSH
// task := GetTaskList ( unit ) ;
48784: LD_ADDR_VAR 0 7
48788: PUSH
48789: LD_VAR 0 1
48793: PPUSH
48794: CALL_OW 437
48798: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48799: LD_VAR 0 7
48803: NOT
48804: PUSH
48805: LD_VAR 0 1
48809: PPUSH
48810: LD_VAR 0 2
48814: PPUSH
48815: CALL_OW 308
48819: NOT
48820: AND
48821: IFFALSE 48825
// exit ;
48823: GO 48943
// if IsInArea ( unit , area ) then
48825: LD_VAR 0 1
48829: PPUSH
48830: LD_VAR 0 2
48834: PPUSH
48835: CALL_OW 308
48839: IFFALSE 48857
// begin ComMoveToArea ( unit , goAway ) ;
48841: LD_VAR 0 1
48845: PPUSH
48846: LD_VAR 0 3
48850: PPUSH
48851: CALL_OW 113
// exit ;
48855: GO 48943
// end ; if task [ 1 ] [ 1 ] <> M then
48857: LD_VAR 0 7
48861: PUSH
48862: LD_INT 1
48864: ARRAY
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PUSH
48870: LD_STRING M
48872: NONEQUAL
48873: IFFALSE 48877
// exit ;
48875: GO 48943
// x := task [ 1 ] [ 2 ] ;
48877: LD_ADDR_VAR 0 5
48881: PUSH
48882: LD_VAR 0 7
48886: PUSH
48887: LD_INT 1
48889: ARRAY
48890: PUSH
48891: LD_INT 2
48893: ARRAY
48894: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48895: LD_ADDR_VAR 0 6
48899: PUSH
48900: LD_VAR 0 7
48904: PUSH
48905: LD_INT 1
48907: ARRAY
48908: PUSH
48909: LD_INT 3
48911: ARRAY
48912: ST_TO_ADDR
// if InArea ( x , y , area ) then
48913: LD_VAR 0 5
48917: PPUSH
48918: LD_VAR 0 6
48922: PPUSH
48923: LD_VAR 0 2
48927: PPUSH
48928: CALL_OW 309
48932: IFFALSE 48943
// ComStop ( unit ) ;
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 141
// end ;
48943: LD_VAR 0 4
48947: RET
// export function Abs ( value ) ; begin
48948: LD_INT 0
48950: PPUSH
// result := value ;
48951: LD_ADDR_VAR 0 2
48955: PUSH
48956: LD_VAR 0 1
48960: ST_TO_ADDR
// if value < 0 then
48961: LD_VAR 0 1
48965: PUSH
48966: LD_INT 0
48968: LESS
48969: IFFALSE 48986
// result := value * - 1 ;
48971: LD_ADDR_VAR 0 2
48975: PUSH
48976: LD_VAR 0 1
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: MUL
48985: ST_TO_ADDR
// end ;
48986: LD_VAR 0 2
48990: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48991: LD_INT 0
48993: PPUSH
48994: PPUSH
48995: PPUSH
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
// if not unit or not building then
49001: LD_VAR 0 1
49005: NOT
49006: PUSH
49007: LD_VAR 0 2
49011: NOT
49012: OR
49013: IFFALSE 49017
// exit ;
49015: GO 49243
// x := GetX ( building ) ;
49017: LD_ADDR_VAR 0 4
49021: PUSH
49022: LD_VAR 0 2
49026: PPUSH
49027: CALL_OW 250
49031: ST_TO_ADDR
// y := GetY ( building ) ;
49032: LD_ADDR_VAR 0 6
49036: PUSH
49037: LD_VAR 0 2
49041: PPUSH
49042: CALL_OW 251
49046: ST_TO_ADDR
// d := GetDir ( building ) ;
49047: LD_ADDR_VAR 0 8
49051: PUSH
49052: LD_VAR 0 2
49056: PPUSH
49057: CALL_OW 254
49061: ST_TO_ADDR
// r := 4 ;
49062: LD_ADDR_VAR 0 9
49066: PUSH
49067: LD_INT 4
49069: ST_TO_ADDR
// for i := 1 to 5 do
49070: LD_ADDR_VAR 0 10
49074: PUSH
49075: DOUBLE
49076: LD_INT 1
49078: DEC
49079: ST_TO_ADDR
49080: LD_INT 5
49082: PUSH
49083: FOR_TO
49084: IFFALSE 49241
// begin _x := ShiftX ( x , d , r + i ) ;
49086: LD_ADDR_VAR 0 5
49090: PUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: LD_VAR 0 8
49100: PPUSH
49101: LD_VAR 0 9
49105: PUSH
49106: LD_VAR 0 10
49110: PLUS
49111: PPUSH
49112: CALL_OW 272
49116: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49117: LD_ADDR_VAR 0 7
49121: PUSH
49122: LD_VAR 0 6
49126: PPUSH
49127: LD_VAR 0 8
49131: PPUSH
49132: LD_VAR 0 9
49136: PUSH
49137: LD_VAR 0 10
49141: PLUS
49142: PPUSH
49143: CALL_OW 273
49147: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49148: LD_VAR 0 5
49152: PPUSH
49153: LD_VAR 0 7
49157: PPUSH
49158: CALL_OW 488
49162: PUSH
49163: LD_VAR 0 5
49167: PPUSH
49168: LD_VAR 0 7
49172: PPUSH
49173: CALL_OW 428
49177: PPUSH
49178: CALL_OW 247
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: IN
49193: NOT
49194: AND
49195: IFFALSE 49239
// begin ComMoveXY ( unit , _x , _y ) ;
49197: LD_VAR 0 1
49201: PPUSH
49202: LD_VAR 0 5
49206: PPUSH
49207: LD_VAR 0 7
49211: PPUSH
49212: CALL_OW 111
// result := [ _x , _y ] ;
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: LD_VAR 0 5
49225: PUSH
49226: LD_VAR 0 7
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: ST_TO_ADDR
// exit ;
49235: POP
49236: POP
49237: GO 49243
// end ; end ;
49239: GO 49083
49241: POP
49242: POP
// end ;
49243: LD_VAR 0 3
49247: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49248: LD_INT 0
49250: PPUSH
49251: PPUSH
49252: PPUSH
// result := 0 ;
49253: LD_ADDR_VAR 0 3
49257: PUSH
49258: LD_INT 0
49260: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49261: LD_VAR 0 1
49265: PUSH
49266: LD_INT 0
49268: LESS
49269: PUSH
49270: LD_VAR 0 1
49274: PUSH
49275: LD_INT 8
49277: GREATER
49278: OR
49279: PUSH
49280: LD_VAR 0 2
49284: PUSH
49285: LD_INT 0
49287: LESS
49288: OR
49289: PUSH
49290: LD_VAR 0 2
49294: PUSH
49295: LD_INT 8
49297: GREATER
49298: OR
49299: IFFALSE 49303
// exit ;
49301: GO 49378
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49303: LD_ADDR_VAR 0 4
49307: PUSH
49308: LD_INT 22
49310: PUSH
49311: LD_VAR 0 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PPUSH
49320: CALL_OW 69
49324: PUSH
49325: FOR_IN
49326: IFFALSE 49376
// begin un := UnitShoot ( i ) ;
49328: LD_ADDR_VAR 0 5
49332: PUSH
49333: LD_VAR 0 4
49337: PPUSH
49338: CALL_OW 504
49342: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49343: LD_VAR 0 5
49347: PPUSH
49348: CALL_OW 255
49352: PUSH
49353: LD_VAR 0 1
49357: EQUAL
49358: IFFALSE 49374
// begin result := un ;
49360: LD_ADDR_VAR 0 3
49364: PUSH
49365: LD_VAR 0 5
49369: ST_TO_ADDR
// exit ;
49370: POP
49371: POP
49372: GO 49378
// end ; end ;
49374: GO 49325
49376: POP
49377: POP
// end ;
49378: LD_VAR 0 3
49382: RET
// export function GetCargoBay ( units ) ; begin
49383: LD_INT 0
49385: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49386: LD_ADDR_VAR 0 2
49390: PUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 34
49401: PUSH
49402: LD_INT 12
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 34
49411: PUSH
49412: LD_INT 51
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 34
49421: PUSH
49422: LD_INT 32
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 34
49431: PUSH
49432: LD_INT 89
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: PPUSH
49446: CALL_OW 72
49450: ST_TO_ADDR
// end ;
49451: LD_VAR 0 2
49455: RET
// export function Negate ( value ) ; begin
49456: LD_INT 0
49458: PPUSH
// result := not value ;
49459: LD_ADDR_VAR 0 2
49463: PUSH
49464: LD_VAR 0 1
49468: NOT
49469: ST_TO_ADDR
// end ;
49470: LD_VAR 0 2
49474: RET
// export function Inc ( value ) ; begin
49475: LD_INT 0
49477: PPUSH
// result := value + 1 ;
49478: LD_ADDR_VAR 0 2
49482: PUSH
49483: LD_VAR 0 1
49487: PUSH
49488: LD_INT 1
49490: PLUS
49491: ST_TO_ADDR
// end ;
49492: LD_VAR 0 2
49496: RET
// export function Dec ( value ) ; begin
49497: LD_INT 0
49499: PPUSH
// result := value - 1 ;
49500: LD_ADDR_VAR 0 2
49504: PUSH
49505: LD_VAR 0 1
49509: PUSH
49510: LD_INT 1
49512: MINUS
49513: ST_TO_ADDR
// end ;
49514: LD_VAR 0 2
49518: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49519: LD_INT 0
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49529: LD_VAR 0 1
49533: PPUSH
49534: LD_VAR 0 2
49538: PPUSH
49539: CALL_OW 488
49543: NOT
49544: PUSH
49545: LD_VAR 0 3
49549: PPUSH
49550: LD_VAR 0 4
49554: PPUSH
49555: CALL_OW 488
49559: NOT
49560: OR
49561: IFFALSE 49574
// begin result := - 1 ;
49563: LD_ADDR_VAR 0 5
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: ST_TO_ADDR
// exit ;
49572: GO 49809
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49574: LD_ADDR_VAR 0 12
49578: PUSH
49579: LD_VAR 0 1
49583: PPUSH
49584: LD_VAR 0 2
49588: PPUSH
49589: LD_VAR 0 3
49593: PPUSH
49594: LD_VAR 0 4
49598: PPUSH
49599: CALL 48659 0 4
49603: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49604: LD_ADDR_VAR 0 11
49608: PUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: LD_VAR 0 2
49618: PPUSH
49619: LD_VAR 0 12
49623: PUSH
49624: LD_INT 1
49626: ARRAY
49627: PPUSH
49628: LD_VAR 0 12
49632: PUSH
49633: LD_INT 2
49635: ARRAY
49636: PPUSH
49637: CALL_OW 298
49641: ST_TO_ADDR
// distance := 9999 ;
49642: LD_ADDR_VAR 0 10
49646: PUSH
49647: LD_INT 9999
49649: ST_TO_ADDR
// for i := 0 to 5 do
49650: LD_ADDR_VAR 0 6
49654: PUSH
49655: DOUBLE
49656: LD_INT 0
49658: DEC
49659: ST_TO_ADDR
49660: LD_INT 5
49662: PUSH
49663: FOR_TO
49664: IFFALSE 49807
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49666: LD_ADDR_VAR 0 7
49670: PUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: LD_VAR 0 6
49680: PPUSH
49681: LD_VAR 0 11
49685: PPUSH
49686: CALL_OW 272
49690: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49691: LD_ADDR_VAR 0 8
49695: PUSH
49696: LD_VAR 0 2
49700: PPUSH
49701: LD_VAR 0 6
49705: PPUSH
49706: LD_VAR 0 11
49710: PPUSH
49711: CALL_OW 273
49715: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49716: LD_VAR 0 7
49720: PPUSH
49721: LD_VAR 0 8
49725: PPUSH
49726: CALL_OW 488
49730: NOT
49731: IFFALSE 49735
// continue ;
49733: GO 49663
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49735: LD_ADDR_VAR 0 9
49739: PUSH
49740: LD_VAR 0 12
49744: PUSH
49745: LD_INT 1
49747: ARRAY
49748: PPUSH
49749: LD_VAR 0 12
49753: PUSH
49754: LD_INT 2
49756: ARRAY
49757: PPUSH
49758: LD_VAR 0 7
49762: PPUSH
49763: LD_VAR 0 8
49767: PPUSH
49768: CALL_OW 298
49772: ST_TO_ADDR
// if tmp < distance then
49773: LD_VAR 0 9
49777: PUSH
49778: LD_VAR 0 10
49782: LESS
49783: IFFALSE 49805
// begin result := i ;
49785: LD_ADDR_VAR 0 5
49789: PUSH
49790: LD_VAR 0 6
49794: ST_TO_ADDR
// distance := tmp ;
49795: LD_ADDR_VAR 0 10
49799: PUSH
49800: LD_VAR 0 9
49804: ST_TO_ADDR
// end ; end ;
49805: GO 49663
49807: POP
49808: POP
// end ;
49809: LD_VAR 0 5
49813: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49814: LD_INT 0
49816: PPUSH
49817: PPUSH
// if not driver or not IsInUnit ( driver ) then
49818: LD_VAR 0 1
49822: NOT
49823: PUSH
49824: LD_VAR 0 1
49828: PPUSH
49829: CALL_OW 310
49833: NOT
49834: OR
49835: IFFALSE 49839
// exit ;
49837: GO 49929
// vehicle := IsInUnit ( driver ) ;
49839: LD_ADDR_VAR 0 3
49843: PUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 310
49853: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49854: LD_VAR 0 1
49858: PPUSH
49859: LD_STRING \
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: PUSH
49889: LD_STRING E
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_VAR 0 3
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PPUSH
49925: CALL_OW 446
// end ;
49929: LD_VAR 0 2
49933: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49934: LD_INT 0
49936: PPUSH
49937: PPUSH
// if not driver or not IsInUnit ( driver ) then
49938: LD_VAR 0 1
49942: NOT
49943: PUSH
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 310
49953: NOT
49954: OR
49955: IFFALSE 49959
// exit ;
49957: GO 50049
// vehicle := IsInUnit ( driver ) ;
49959: LD_ADDR_VAR 0 3
49963: PUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 310
49973: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_STRING \
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: PUSH
50009: LD_STRING E
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_VAR 0 3
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PPUSH
50045: CALL_OW 447
// end ;
50049: LD_VAR 0 2
50053: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50054: LD_INT 0
50056: PPUSH
50057: PPUSH
50058: PPUSH
// tmp := [ ] ;
50059: LD_ADDR_VAR 0 5
50063: PUSH
50064: EMPTY
50065: ST_TO_ADDR
// for i in units do
50066: LD_ADDR_VAR 0 4
50070: PUSH
50071: LD_VAR 0 1
50075: PUSH
50076: FOR_IN
50077: IFFALSE 50115
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50079: LD_ADDR_VAR 0 5
50083: PUSH
50084: LD_VAR 0 5
50088: PPUSH
50089: LD_VAR 0 5
50093: PUSH
50094: LD_INT 1
50096: PLUS
50097: PPUSH
50098: LD_VAR 0 4
50102: PPUSH
50103: CALL_OW 256
50107: PPUSH
50108: CALL_OW 2
50112: ST_TO_ADDR
50113: GO 50076
50115: POP
50116: POP
// if not tmp then
50117: LD_VAR 0 5
50121: NOT
50122: IFFALSE 50126
// exit ;
50124: GO 50174
// if asc then
50126: LD_VAR 0 2
50130: IFFALSE 50154
// result := SortListByListAsc ( units , tmp ) else
50132: LD_ADDR_VAR 0 3
50136: PUSH
50137: LD_VAR 0 1
50141: PPUSH
50142: LD_VAR 0 5
50146: PPUSH
50147: CALL_OW 76
50151: ST_TO_ADDR
50152: GO 50174
// result := SortListByListDesc ( units , tmp ) ;
50154: LD_ADDR_VAR 0 3
50158: PUSH
50159: LD_VAR 0 1
50163: PPUSH
50164: LD_VAR 0 5
50168: PPUSH
50169: CALL_OW 77
50173: ST_TO_ADDR
// end ;
50174: LD_VAR 0 3
50178: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50179: LD_INT 0
50181: PPUSH
50182: PPUSH
// task := GetTaskList ( mech ) ;
50183: LD_ADDR_VAR 0 4
50187: PUSH
50188: LD_VAR 0 1
50192: PPUSH
50193: CALL_OW 437
50197: ST_TO_ADDR
// if not task then
50198: LD_VAR 0 4
50202: NOT
50203: IFFALSE 50207
// exit ;
50205: GO 50249
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50207: LD_ADDR_VAR 0 3
50211: PUSH
50212: LD_VAR 0 4
50216: PUSH
50217: LD_INT 1
50219: ARRAY
50220: PUSH
50221: LD_INT 1
50223: ARRAY
50224: PUSH
50225: LD_STRING r
50227: EQUAL
50228: PUSH
50229: LD_VAR 0 4
50233: PUSH
50234: LD_INT 1
50236: ARRAY
50237: PUSH
50238: LD_INT 4
50240: ARRAY
50241: PUSH
50242: LD_VAR 0 2
50246: EQUAL
50247: AND
50248: ST_TO_ADDR
// end ;
50249: LD_VAR 0 3
50253: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50254: LD_INT 0
50256: PPUSH
// SetDir ( unit , d ) ;
50257: LD_VAR 0 1
50261: PPUSH
50262: LD_VAR 0 4
50266: PPUSH
50267: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50271: LD_ADDR_VAR 0 6
50275: PUSH
50276: LD_VAR 0 1
50280: PPUSH
50281: LD_VAR 0 2
50285: PPUSH
50286: LD_VAR 0 3
50290: PPUSH
50291: LD_VAR 0 5
50295: PPUSH
50296: CALL_OW 48
50300: ST_TO_ADDR
// end ;
50301: LD_VAR 0 6
50305: RET
// export function ToNaturalNumber ( number ) ; begin
50306: LD_INT 0
50308: PPUSH
// result := number div 1 ;
50309: LD_ADDR_VAR 0 2
50313: PUSH
50314: LD_VAR 0 1
50318: PUSH
50319: LD_INT 1
50321: DIV
50322: ST_TO_ADDR
// if number < 0 then
50323: LD_VAR 0 1
50327: PUSH
50328: LD_INT 0
50330: LESS
50331: IFFALSE 50341
// result := 0 ;
50333: LD_ADDR_VAR 0 2
50337: PUSH
50338: LD_INT 0
50340: ST_TO_ADDR
// end ;
50341: LD_VAR 0 2
50345: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50346: LD_INT 0
50348: PPUSH
50349: PPUSH
50350: PPUSH
// if not buildings then
50351: LD_VAR 0 1
50355: NOT
50356: IFFALSE 50360
// exit ;
50358: GO 50475
// tmp := [ ] ;
50360: LD_ADDR_VAR 0 5
50364: PUSH
50365: EMPTY
50366: ST_TO_ADDR
// for b in buildings do
50367: LD_ADDR_VAR 0 4
50371: PUSH
50372: LD_VAR 0 1
50376: PUSH
50377: FOR_IN
50378: IFFALSE 50416
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50380: LD_ADDR_VAR 0 5
50384: PUSH
50385: LD_VAR 0 5
50389: PPUSH
50390: LD_VAR 0 5
50394: PUSH
50395: LD_INT 1
50397: PLUS
50398: PPUSH
50399: LD_VAR 0 4
50403: PPUSH
50404: CALL_OW 266
50408: PPUSH
50409: CALL_OW 1
50413: ST_TO_ADDR
50414: GO 50377
50416: POP
50417: POP
// if not tmp then
50418: LD_VAR 0 5
50422: NOT
50423: IFFALSE 50427
// exit ;
50425: GO 50475
// if asc then
50427: LD_VAR 0 2
50431: IFFALSE 50455
// result := SortListByListAsc ( buildings , tmp ) else
50433: LD_ADDR_VAR 0 3
50437: PUSH
50438: LD_VAR 0 1
50442: PPUSH
50443: LD_VAR 0 5
50447: PPUSH
50448: CALL_OW 76
50452: ST_TO_ADDR
50453: GO 50475
// result := SortListByListDesc ( buildings , tmp ) ;
50455: LD_ADDR_VAR 0 3
50459: PUSH
50460: LD_VAR 0 1
50464: PPUSH
50465: LD_VAR 0 5
50469: PPUSH
50470: CALL_OW 77
50474: ST_TO_ADDR
// end ;
50475: LD_VAR 0 3
50479: RET
// export function SortByClass ( units , class ) ; var un ; begin
50480: LD_INT 0
50482: PPUSH
50483: PPUSH
// if not units or not class then
50484: LD_VAR 0 1
50488: NOT
50489: PUSH
50490: LD_VAR 0 2
50494: NOT
50495: OR
50496: IFFALSE 50500
// exit ;
50498: GO 50595
// result := [ ] ;
50500: LD_ADDR_VAR 0 3
50504: PUSH
50505: EMPTY
50506: ST_TO_ADDR
// for un in units do
50507: LD_ADDR_VAR 0 4
50511: PUSH
50512: LD_VAR 0 1
50516: PUSH
50517: FOR_IN
50518: IFFALSE 50593
// if GetClass ( un ) = class then
50520: LD_VAR 0 4
50524: PPUSH
50525: CALL_OW 257
50529: PUSH
50530: LD_VAR 0 2
50534: EQUAL
50535: IFFALSE 50562
// result := Insert ( result , 1 , un ) else
50537: LD_ADDR_VAR 0 3
50541: PUSH
50542: LD_VAR 0 3
50546: PPUSH
50547: LD_INT 1
50549: PPUSH
50550: LD_VAR 0 4
50554: PPUSH
50555: CALL_OW 2
50559: ST_TO_ADDR
50560: GO 50591
// result := Replace ( result , result + 1 , un ) ;
50562: LD_ADDR_VAR 0 3
50566: PUSH
50567: LD_VAR 0 3
50571: PPUSH
50572: LD_VAR 0 3
50576: PUSH
50577: LD_INT 1
50579: PLUS
50580: PPUSH
50581: LD_VAR 0 4
50585: PPUSH
50586: CALL_OW 1
50590: ST_TO_ADDR
50591: GO 50517
50593: POP
50594: POP
// end ;
50595: LD_VAR 0 3
50599: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50600: LD_INT 0
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
// result := [ ] ;
50609: LD_ADDR_VAR 0 4
50613: PUSH
50614: EMPTY
50615: ST_TO_ADDR
// if x - r < 0 then
50616: LD_VAR 0 1
50620: PUSH
50621: LD_VAR 0 3
50625: MINUS
50626: PUSH
50627: LD_INT 0
50629: LESS
50630: IFFALSE 50642
// min_x := 0 else
50632: LD_ADDR_VAR 0 8
50636: PUSH
50637: LD_INT 0
50639: ST_TO_ADDR
50640: GO 50658
// min_x := x - r ;
50642: LD_ADDR_VAR 0 8
50646: PUSH
50647: LD_VAR 0 1
50651: PUSH
50652: LD_VAR 0 3
50656: MINUS
50657: ST_TO_ADDR
// if y - r < 0 then
50658: LD_VAR 0 2
50662: PUSH
50663: LD_VAR 0 3
50667: MINUS
50668: PUSH
50669: LD_INT 0
50671: LESS
50672: IFFALSE 50684
// min_y := 0 else
50674: LD_ADDR_VAR 0 7
50678: PUSH
50679: LD_INT 0
50681: ST_TO_ADDR
50682: GO 50700
// min_y := y - r ;
50684: LD_ADDR_VAR 0 7
50688: PUSH
50689: LD_VAR 0 2
50693: PUSH
50694: LD_VAR 0 3
50698: MINUS
50699: ST_TO_ADDR
// max_x := x + r ;
50700: LD_ADDR_VAR 0 9
50704: PUSH
50705: LD_VAR 0 1
50709: PUSH
50710: LD_VAR 0 3
50714: PLUS
50715: ST_TO_ADDR
// max_y := y + r ;
50716: LD_ADDR_VAR 0 10
50720: PUSH
50721: LD_VAR 0 2
50725: PUSH
50726: LD_VAR 0 3
50730: PLUS
50731: ST_TO_ADDR
// for _x = min_x to max_x do
50732: LD_ADDR_VAR 0 5
50736: PUSH
50737: DOUBLE
50738: LD_VAR 0 8
50742: DEC
50743: ST_TO_ADDR
50744: LD_VAR 0 9
50748: PUSH
50749: FOR_TO
50750: IFFALSE 50851
// for _y = min_y to max_y do
50752: LD_ADDR_VAR 0 6
50756: PUSH
50757: DOUBLE
50758: LD_VAR 0 7
50762: DEC
50763: ST_TO_ADDR
50764: LD_VAR 0 10
50768: PUSH
50769: FOR_TO
50770: IFFALSE 50847
// begin if not ValidHex ( _x , _y ) then
50772: LD_VAR 0 5
50776: PPUSH
50777: LD_VAR 0 6
50781: PPUSH
50782: CALL_OW 488
50786: NOT
50787: IFFALSE 50791
// continue ;
50789: GO 50769
// if GetResourceTypeXY ( _x , _y ) then
50791: LD_VAR 0 5
50795: PPUSH
50796: LD_VAR 0 6
50800: PPUSH
50801: CALL_OW 283
50805: IFFALSE 50845
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50807: LD_ADDR_VAR 0 4
50811: PUSH
50812: LD_VAR 0 4
50816: PPUSH
50817: LD_VAR 0 4
50821: PUSH
50822: LD_INT 1
50824: PLUS
50825: PPUSH
50826: LD_VAR 0 5
50830: PUSH
50831: LD_VAR 0 6
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PPUSH
50840: CALL_OW 1
50844: ST_TO_ADDR
// end ;
50845: GO 50769
50847: POP
50848: POP
50849: GO 50749
50851: POP
50852: POP
// end ;
50853: LD_VAR 0 4
50857: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50858: LD_INT 0
50860: PPUSH
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
50865: PPUSH
50866: PPUSH
50867: PPUSH
// if not units then
50868: LD_VAR 0 1
50872: NOT
50873: IFFALSE 50877
// exit ;
50875: GO 51405
// result := UnitFilter ( units , [ f_ok ] ) ;
50877: LD_ADDR_VAR 0 3
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: LD_INT 50
50889: PUSH
50890: EMPTY
50891: LIST
50892: PPUSH
50893: CALL_OW 72
50897: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50898: LD_ADDR_VAR 0 8
50902: PUSH
50903: LD_VAR 0 1
50907: PUSH
50908: LD_INT 1
50910: ARRAY
50911: PPUSH
50912: CALL_OW 255
50916: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50917: LD_ADDR_VAR 0 10
50921: PUSH
50922: LD_INT 29
50924: PUSH
50925: LD_INT 91
50927: PUSH
50928: LD_INT 49
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// if not result then
50936: LD_VAR 0 3
50940: NOT
50941: IFFALSE 50945
// exit ;
50943: GO 51405
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50945: LD_ADDR_VAR 0 5
50949: PUSH
50950: LD_INT 81
50952: PUSH
50953: LD_VAR 0 8
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PPUSH
50962: CALL_OW 69
50966: ST_TO_ADDR
// for i in result do
50967: LD_ADDR_VAR 0 4
50971: PUSH
50972: LD_VAR 0 3
50976: PUSH
50977: FOR_IN
50978: IFFALSE 51403
// begin tag := GetTag ( i ) + 1 ;
50980: LD_ADDR_VAR 0 9
50984: PUSH
50985: LD_VAR 0 4
50989: PPUSH
50990: CALL_OW 110
50994: PUSH
50995: LD_INT 1
50997: PLUS
50998: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50999: LD_ADDR_VAR 0 7
51003: PUSH
51004: LD_VAR 0 4
51008: PPUSH
51009: CALL_OW 250
51013: PPUSH
51014: LD_VAR 0 4
51018: PPUSH
51019: CALL_OW 251
51023: PPUSH
51024: LD_INT 4
51026: PPUSH
51027: CALL 50600 0 3
51031: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51032: LD_VAR 0 4
51036: PPUSH
51037: CALL_OW 247
51041: PUSH
51042: LD_INT 2
51044: EQUAL
51045: PUSH
51046: LD_VAR 0 7
51050: PUSH
51051: LD_INT 2
51053: GREATER
51054: AND
51055: PUSH
51056: LD_VAR 0 4
51060: PPUSH
51061: CALL_OW 264
51065: PUSH
51066: LD_VAR 0 10
51070: IN
51071: NOT
51072: AND
51073: IFFALSE 51112
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51075: LD_VAR 0 4
51079: PPUSH
51080: LD_VAR 0 7
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PPUSH
51093: LD_VAR 0 7
51097: PUSH
51098: LD_INT 1
51100: ARRAY
51101: PUSH
51102: LD_INT 2
51104: ARRAY
51105: PPUSH
51106: CALL_OW 116
51110: GO 51401
// if path > tag then
51112: LD_VAR 0 2
51116: PUSH
51117: LD_VAR 0 9
51121: GREATER
51122: IFFALSE 51330
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51124: LD_ADDR_VAR 0 6
51128: PUSH
51129: LD_VAR 0 5
51133: PPUSH
51134: LD_INT 91
51136: PUSH
51137: LD_VAR 0 4
51141: PUSH
51142: LD_INT 8
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: PPUSH
51150: CALL_OW 72
51154: ST_TO_ADDR
// if nearEnemy then
51155: LD_VAR 0 6
51159: IFFALSE 51228
// begin if GetWeapon ( i ) = ru_time_lapser then
51161: LD_VAR 0 4
51165: PPUSH
51166: CALL_OW 264
51170: PUSH
51171: LD_INT 49
51173: EQUAL
51174: IFFALSE 51202
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51176: LD_VAR 0 4
51180: PPUSH
51181: LD_VAR 0 6
51185: PPUSH
51186: LD_VAR 0 4
51190: PPUSH
51191: CALL_OW 74
51195: PPUSH
51196: CALL_OW 112
51200: GO 51226
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51202: LD_VAR 0 4
51206: PPUSH
51207: LD_VAR 0 6
51211: PPUSH
51212: LD_VAR 0 4
51216: PPUSH
51217: CALL_OW 74
51221: PPUSH
51222: CALL 52476 0 2
// end else
51226: GO 51328
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51228: LD_VAR 0 4
51232: PPUSH
51233: LD_VAR 0 2
51237: PUSH
51238: LD_VAR 0 9
51242: ARRAY
51243: PUSH
51244: LD_INT 1
51246: ARRAY
51247: PPUSH
51248: LD_VAR 0 2
51252: PUSH
51253: LD_VAR 0 9
51257: ARRAY
51258: PUSH
51259: LD_INT 2
51261: ARRAY
51262: PPUSH
51263: CALL_OW 297
51267: PUSH
51268: LD_INT 6
51270: GREATER
51271: IFFALSE 51314
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51273: LD_VAR 0 4
51277: PPUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_VAR 0 9
51287: ARRAY
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: LD_VAR 0 2
51297: PUSH
51298: LD_VAR 0 9
51302: ARRAY
51303: PUSH
51304: LD_INT 2
51306: ARRAY
51307: PPUSH
51308: CALL_OW 114
51312: GO 51328
// SetTag ( i , tag ) ;
51314: LD_VAR 0 4
51318: PPUSH
51319: LD_VAR 0 9
51323: PPUSH
51324: CALL_OW 109
// end else
51328: GO 51401
// if enemy then
51330: LD_VAR 0 5
51334: IFFALSE 51401
// begin if GetWeapon ( i ) = ru_time_lapser then
51336: LD_VAR 0 4
51340: PPUSH
51341: CALL_OW 264
51345: PUSH
51346: LD_INT 49
51348: EQUAL
51349: IFFALSE 51377
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51351: LD_VAR 0 4
51355: PPUSH
51356: LD_VAR 0 5
51360: PPUSH
51361: LD_VAR 0 4
51365: PPUSH
51366: CALL_OW 74
51370: PPUSH
51371: CALL_OW 112
51375: GO 51401
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51377: LD_VAR 0 4
51381: PPUSH
51382: LD_VAR 0 5
51386: PPUSH
51387: LD_VAR 0 4
51391: PPUSH
51392: CALL_OW 74
51396: PPUSH
51397: CALL 52476 0 2
// end ; end ;
51401: GO 50977
51403: POP
51404: POP
// end ;
51405: LD_VAR 0 3
51409: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51410: LD_INT 0
51412: PPUSH
51413: PPUSH
51414: PPUSH
// if not unit or IsInUnit ( unit ) then
51415: LD_VAR 0 1
51419: NOT
51420: PUSH
51421: LD_VAR 0 1
51425: PPUSH
51426: CALL_OW 310
51430: OR
51431: IFFALSE 51435
// exit ;
51433: GO 51526
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51435: LD_ADDR_VAR 0 4
51439: PUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 250
51449: PPUSH
51450: LD_VAR 0 2
51454: PPUSH
51455: LD_INT 1
51457: PPUSH
51458: CALL_OW 272
51462: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51463: LD_ADDR_VAR 0 5
51467: PUSH
51468: LD_VAR 0 1
51472: PPUSH
51473: CALL_OW 251
51477: PPUSH
51478: LD_VAR 0 2
51482: PPUSH
51483: LD_INT 1
51485: PPUSH
51486: CALL_OW 273
51490: ST_TO_ADDR
// if ValidHex ( x , y ) then
51491: LD_VAR 0 4
51495: PPUSH
51496: LD_VAR 0 5
51500: PPUSH
51501: CALL_OW 488
51505: IFFALSE 51526
// ComTurnXY ( unit , x , y ) ;
51507: LD_VAR 0 1
51511: PPUSH
51512: LD_VAR 0 4
51516: PPUSH
51517: LD_VAR 0 5
51521: PPUSH
51522: CALL_OW 118
// end ;
51526: LD_VAR 0 3
51530: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51531: LD_INT 0
51533: PPUSH
51534: PPUSH
// result := false ;
51535: LD_ADDR_VAR 0 3
51539: PUSH
51540: LD_INT 0
51542: ST_TO_ADDR
// if not units then
51543: LD_VAR 0 2
51547: NOT
51548: IFFALSE 51552
// exit ;
51550: GO 51597
// for i in units do
51552: LD_ADDR_VAR 0 4
51556: PUSH
51557: LD_VAR 0 2
51561: PUSH
51562: FOR_IN
51563: IFFALSE 51595
// if See ( side , i ) then
51565: LD_VAR 0 1
51569: PPUSH
51570: LD_VAR 0 4
51574: PPUSH
51575: CALL_OW 292
51579: IFFALSE 51593
// begin result := true ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: LD_INT 1
51588: ST_TO_ADDR
// exit ;
51589: POP
51590: POP
51591: GO 51597
// end ;
51593: GO 51562
51595: POP
51596: POP
// end ;
51597: LD_VAR 0 3
51601: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
// if not unit or not points then
51608: LD_VAR 0 1
51612: NOT
51613: PUSH
51614: LD_VAR 0 2
51618: NOT
51619: OR
51620: IFFALSE 51624
// exit ;
51622: GO 51714
// dist := 99999 ;
51624: LD_ADDR_VAR 0 5
51628: PUSH
51629: LD_INT 99999
51631: ST_TO_ADDR
// for i in points do
51632: LD_ADDR_VAR 0 4
51636: PUSH
51637: LD_VAR 0 2
51641: PUSH
51642: FOR_IN
51643: IFFALSE 51712
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51645: LD_ADDR_VAR 0 6
51649: PUSH
51650: LD_VAR 0 1
51654: PPUSH
51655: LD_VAR 0 4
51659: PUSH
51660: LD_INT 1
51662: ARRAY
51663: PPUSH
51664: LD_VAR 0 4
51668: PUSH
51669: LD_INT 2
51671: ARRAY
51672: PPUSH
51673: CALL_OW 297
51677: ST_TO_ADDR
// if tmpDist < dist then
51678: LD_VAR 0 6
51682: PUSH
51683: LD_VAR 0 5
51687: LESS
51688: IFFALSE 51710
// begin result := i ;
51690: LD_ADDR_VAR 0 3
51694: PUSH
51695: LD_VAR 0 4
51699: ST_TO_ADDR
// dist := tmpDist ;
51700: LD_ADDR_VAR 0 5
51704: PUSH
51705: LD_VAR 0 6
51709: ST_TO_ADDR
// end ; end ;
51710: GO 51642
51712: POP
51713: POP
// end ;
51714: LD_VAR 0 3
51718: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51719: LD_INT 0
51721: PPUSH
// uc_side := side ;
51722: LD_ADDR_OWVAR 20
51726: PUSH
51727: LD_VAR 0 1
51731: ST_TO_ADDR
// uc_nation := 3 ;
51732: LD_ADDR_OWVAR 21
51736: PUSH
51737: LD_INT 3
51739: ST_TO_ADDR
// vc_chassis := 25 ;
51740: LD_ADDR_OWVAR 37
51744: PUSH
51745: LD_INT 25
51747: ST_TO_ADDR
// vc_engine := engine_siberite ;
51748: LD_ADDR_OWVAR 39
51752: PUSH
51753: LD_INT 3
51755: ST_TO_ADDR
// vc_control := control_computer ;
51756: LD_ADDR_OWVAR 38
51760: PUSH
51761: LD_INT 3
51763: ST_TO_ADDR
// vc_weapon := 59 ;
51764: LD_ADDR_OWVAR 40
51768: PUSH
51769: LD_INT 59
51771: ST_TO_ADDR
// result := CreateVehicle ;
51772: LD_ADDR_VAR 0 5
51776: PUSH
51777: CALL_OW 45
51781: ST_TO_ADDR
// SetDir ( result , d ) ;
51782: LD_VAR 0 5
51786: PPUSH
51787: LD_VAR 0 4
51791: PPUSH
51792: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51796: LD_VAR 0 5
51800: PPUSH
51801: LD_VAR 0 2
51805: PPUSH
51806: LD_VAR 0 3
51810: PPUSH
51811: LD_INT 0
51813: PPUSH
51814: CALL_OW 48
// end ;
51818: LD_VAR 0 5
51822: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51823: LD_INT 0
51825: PPUSH
51826: PPUSH
51827: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51828: LD_ADDR_VAR 0 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51851: LD_VAR 0 1
51855: NOT
51856: PUSH
51857: LD_VAR 0 1
51861: PPUSH
51862: CALL_OW 264
51866: PUSH
51867: LD_INT 12
51869: PUSH
51870: LD_INT 51
51872: PUSH
51873: LD_INT 32
51875: PUSH
51876: LD_INT 89
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: IN
51885: NOT
51886: OR
51887: IFFALSE 51891
// exit ;
51889: GO 51989
// for i := 1 to 3 do
51891: LD_ADDR_VAR 0 3
51895: PUSH
51896: DOUBLE
51897: LD_INT 1
51899: DEC
51900: ST_TO_ADDR
51901: LD_INT 3
51903: PUSH
51904: FOR_TO
51905: IFFALSE 51987
// begin tmp := GetCargo ( cargo , i ) ;
51907: LD_ADDR_VAR 0 4
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: LD_VAR 0 3
51921: PPUSH
51922: CALL_OW 289
51926: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51927: LD_ADDR_VAR 0 2
51931: PUSH
51932: LD_VAR 0 2
51936: PPUSH
51937: LD_VAR 0 3
51941: PPUSH
51942: LD_VAR 0 4
51946: PPUSH
51947: CALL_OW 1
51951: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51952: LD_ADDR_VAR 0 2
51956: PUSH
51957: LD_VAR 0 2
51961: PPUSH
51962: LD_INT 4
51964: PPUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 4
51972: ARRAY
51973: PUSH
51974: LD_VAR 0 4
51978: PLUS
51979: PPUSH
51980: CALL_OW 1
51984: ST_TO_ADDR
// end ;
51985: GO 51904
51987: POP
51988: POP
// end ;
51989: LD_VAR 0 2
51993: RET
// export function Length ( array ) ; begin
51994: LD_INT 0
51996: PPUSH
// result := array + 0 ;
51997: LD_ADDR_VAR 0 2
52001: PUSH
52002: LD_VAR 0 1
52006: PUSH
52007: LD_INT 0
52009: PLUS
52010: ST_TO_ADDR
// end ;
52011: LD_VAR 0 2
52015: RET
// export function PrepareArray ( array ) ; begin
52016: LD_INT 0
52018: PPUSH
// result := array diff 0 ;
52019: LD_ADDR_VAR 0 2
52023: PUSH
52024: LD_VAR 0 1
52028: PUSH
52029: LD_INT 0
52031: DIFF
52032: ST_TO_ADDR
// if not result [ 1 ] then
52033: LD_VAR 0 2
52037: PUSH
52038: LD_INT 1
52040: ARRAY
52041: NOT
52042: IFFALSE 52062
// result := Delete ( result , 1 ) ;
52044: LD_ADDR_VAR 0 2
52048: PUSH
52049: LD_VAR 0 2
52053: PPUSH
52054: LD_INT 1
52056: PPUSH
52057: CALL_OW 3
52061: ST_TO_ADDR
// end ;
52062: LD_VAR 0 2
52066: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52067: LD_INT 0
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
// sibRocketRange := 25 ;
52073: LD_ADDR_VAR 0 6
52077: PUSH
52078: LD_INT 25
52080: ST_TO_ADDR
// result := false ;
52081: LD_ADDR_VAR 0 4
52085: PUSH
52086: LD_INT 0
52088: ST_TO_ADDR
// for i := 0 to 5 do
52089: LD_ADDR_VAR 0 5
52093: PUSH
52094: DOUBLE
52095: LD_INT 0
52097: DEC
52098: ST_TO_ADDR
52099: LD_INT 5
52101: PUSH
52102: FOR_TO
52103: IFFALSE 52170
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52105: LD_VAR 0 1
52109: PPUSH
52110: LD_VAR 0 5
52114: PPUSH
52115: LD_VAR 0 6
52119: PPUSH
52120: CALL_OW 272
52124: PPUSH
52125: LD_VAR 0 2
52129: PPUSH
52130: LD_VAR 0 5
52134: PPUSH
52135: LD_VAR 0 6
52139: PPUSH
52140: CALL_OW 273
52144: PPUSH
52145: LD_VAR 0 3
52149: PPUSH
52150: CALL_OW 309
52154: IFFALSE 52168
// begin result := true ;
52156: LD_ADDR_VAR 0 4
52160: PUSH
52161: LD_INT 1
52163: ST_TO_ADDR
// exit ;
52164: POP
52165: POP
52166: GO 52172
// end ;
52168: GO 52102
52170: POP
52171: POP
// end ;
52172: LD_VAR 0 4
52176: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52177: LD_INT 0
52179: PPUSH
52180: PPUSH
52181: PPUSH
// if btype = b_depot then
52182: LD_VAR 0 2
52186: PUSH
52187: LD_INT 0
52189: EQUAL
52190: IFFALSE 52202
// begin result := true ;
52192: LD_ADDR_VAR 0 3
52196: PUSH
52197: LD_INT 1
52199: ST_TO_ADDR
// exit ;
52200: GO 52318
// end ; pom := GetBase ( depot ) ;
52202: LD_ADDR_VAR 0 4
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 274
52216: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52217: LD_ADDR_VAR 0 5
52221: PUSH
52222: LD_VAR 0 2
52226: PPUSH
52227: LD_VAR 0 1
52231: PPUSH
52232: CALL_OW 248
52236: PPUSH
52237: CALL_OW 450
52241: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52242: LD_ADDR_VAR 0 3
52246: PUSH
52247: LD_VAR 0 4
52251: PPUSH
52252: LD_INT 1
52254: PPUSH
52255: CALL_OW 275
52259: PUSH
52260: LD_VAR 0 5
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: GREATEREQUAL
52269: PUSH
52270: LD_VAR 0 4
52274: PPUSH
52275: LD_INT 2
52277: PPUSH
52278: CALL_OW 275
52282: PUSH
52283: LD_VAR 0 5
52287: PUSH
52288: LD_INT 2
52290: ARRAY
52291: GREATEREQUAL
52292: AND
52293: PUSH
52294: LD_VAR 0 4
52298: PPUSH
52299: LD_INT 3
52301: PPUSH
52302: CALL_OW 275
52306: PUSH
52307: LD_VAR 0 5
52311: PUSH
52312: LD_INT 3
52314: ARRAY
52315: GREATEREQUAL
52316: AND
52317: ST_TO_ADDR
// end ;
52318: LD_VAR 0 3
52322: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52323: LD_INT 0
52325: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52326: LD_VAR 0 1
52330: PPUSH
52331: LD_VAR 0 2
52335: PPUSH
52336: LD_INT 0
52338: PPUSH
52339: LD_INT 0
52341: PPUSH
52342: LD_INT 1
52344: PPUSH
52345: LD_INT 0
52347: PPUSH
52348: CALL_OW 587
// end ;
52352: LD_VAR 0 3
52356: RET
// export function CenterOnNow ( unit ) ; begin
52357: LD_INT 0
52359: PPUSH
// result := IsInUnit ( unit ) ;
52360: LD_ADDR_VAR 0 2
52364: PUSH
52365: LD_VAR 0 1
52369: PPUSH
52370: CALL_OW 310
52374: ST_TO_ADDR
// if not result then
52375: LD_VAR 0 2
52379: NOT
52380: IFFALSE 52392
// result := unit ;
52382: LD_ADDR_VAR 0 2
52386: PUSH
52387: LD_VAR 0 1
52391: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52392: LD_VAR 0 1
52396: PPUSH
52397: CALL_OW 87
// end ;
52401: LD_VAR 0 2
52405: RET
// export function ComMoveHex ( unit , hex ) ; begin
52406: LD_INT 0
52408: PPUSH
// if not hex then
52409: LD_VAR 0 2
52413: NOT
52414: IFFALSE 52418
// exit ;
52416: GO 52471
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52418: LD_VAR 0 2
52422: PUSH
52423: LD_INT 1
52425: ARRAY
52426: PPUSH
52427: LD_VAR 0 2
52431: PUSH
52432: LD_INT 2
52434: ARRAY
52435: PPUSH
52436: CALL_OW 428
52440: IFFALSE 52444
// exit ;
52442: GO 52471
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52444: LD_VAR 0 1
52448: PPUSH
52449: LD_VAR 0 2
52453: PUSH
52454: LD_INT 1
52456: ARRAY
52457: PPUSH
52458: LD_VAR 0 2
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PPUSH
52467: CALL_OW 111
// end ;
52471: LD_VAR 0 3
52475: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52476: LD_INT 0
52478: PPUSH
52479: PPUSH
52480: PPUSH
// if not unit or not enemy then
52481: LD_VAR 0 1
52485: NOT
52486: PUSH
52487: LD_VAR 0 2
52491: NOT
52492: OR
52493: IFFALSE 52497
// exit ;
52495: GO 52621
// x := GetX ( enemy ) ;
52497: LD_ADDR_VAR 0 4
52501: PUSH
52502: LD_VAR 0 2
52506: PPUSH
52507: CALL_OW 250
52511: ST_TO_ADDR
// y := GetY ( enemy ) ;
52512: LD_ADDR_VAR 0 5
52516: PUSH
52517: LD_VAR 0 2
52521: PPUSH
52522: CALL_OW 251
52526: ST_TO_ADDR
// if ValidHex ( x , y ) then
52527: LD_VAR 0 4
52531: PPUSH
52532: LD_VAR 0 5
52536: PPUSH
52537: CALL_OW 488
52541: IFFALSE 52621
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52543: LD_VAR 0 2
52547: PPUSH
52548: CALL_OW 247
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: IN
52563: PUSH
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL_OW 255
52573: PPUSH
52574: LD_VAR 0 2
52578: PPUSH
52579: CALL_OW 292
52583: OR
52584: IFFALSE 52602
// ComAttackUnit ( unit , enemy ) else
52586: LD_VAR 0 1
52590: PPUSH
52591: LD_VAR 0 2
52595: PPUSH
52596: CALL_OW 115
52600: GO 52621
// ComAgressiveMove ( unit , x , y ) ;
52602: LD_VAR 0 1
52606: PPUSH
52607: LD_VAR 0 4
52611: PPUSH
52612: LD_VAR 0 5
52616: PPUSH
52617: CALL_OW 114
// end ;
52621: LD_VAR 0 3
52625: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52626: LD_INT 0
52628: PPUSH
52629: PPUSH
52630: PPUSH
// list := AreaToList ( area , 0 ) ;
52631: LD_ADDR_VAR 0 5
52635: PUSH
52636: LD_VAR 0 1
52640: PPUSH
52641: LD_INT 0
52643: PPUSH
52644: CALL_OW 517
52648: ST_TO_ADDR
// if not list then
52649: LD_VAR 0 5
52653: NOT
52654: IFFALSE 52658
// exit ;
52656: GO 52788
// if all then
52658: LD_VAR 0 2
52662: IFFALSE 52750
// begin for i := 1 to list [ 1 ] do
52664: LD_ADDR_VAR 0 4
52668: PUSH
52669: DOUBLE
52670: LD_INT 1
52672: DEC
52673: ST_TO_ADDR
52674: LD_VAR 0 5
52678: PUSH
52679: LD_INT 1
52681: ARRAY
52682: PUSH
52683: FOR_TO
52684: IFFALSE 52746
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52686: LD_ADDR_VAR 0 3
52690: PUSH
52691: LD_VAR 0 3
52695: PPUSH
52696: LD_VAR 0 3
52700: PUSH
52701: LD_INT 1
52703: PLUS
52704: PPUSH
52705: LD_VAR 0 5
52709: PUSH
52710: LD_INT 1
52712: ARRAY
52713: PUSH
52714: LD_VAR 0 4
52718: ARRAY
52719: PUSH
52720: LD_VAR 0 5
52724: PUSH
52725: LD_INT 2
52727: ARRAY
52728: PUSH
52729: LD_VAR 0 4
52733: ARRAY
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PPUSH
52739: CALL_OW 1
52743: ST_TO_ADDR
52744: GO 52683
52746: POP
52747: POP
// exit ;
52748: GO 52788
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52750: LD_ADDR_VAR 0 3
52754: PUSH
52755: LD_VAR 0 5
52759: PUSH
52760: LD_INT 1
52762: ARRAY
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: PUSH
52768: LD_VAR 0 5
52772: PUSH
52773: LD_INT 2
52775: ARRAY
52776: PUSH
52777: LD_INT 1
52779: ARRAY
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: ST_TO_ADDR
// end ;
52788: LD_VAR 0 3
52792: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52793: LD_INT 0
52795: PPUSH
52796: PPUSH
// list := AreaToList ( area , 0 ) ;
52797: LD_ADDR_VAR 0 4
52801: PUSH
52802: LD_VAR 0 1
52806: PPUSH
52807: LD_INT 0
52809: PPUSH
52810: CALL_OW 517
52814: ST_TO_ADDR
// if not list then
52815: LD_VAR 0 4
52819: NOT
52820: IFFALSE 52824
// exit ;
52822: GO 52865
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52824: LD_ADDR_VAR 0 3
52828: PUSH
52829: LD_VAR 0 4
52833: PUSH
52834: LD_INT 1
52836: ARRAY
52837: PUSH
52838: LD_INT 1
52840: ARRAY
52841: PUSH
52842: LD_VAR 0 4
52846: PUSH
52847: LD_INT 2
52849: ARRAY
52850: PUSH
52851: LD_INT 1
52853: ARRAY
52854: PUSH
52855: LD_VAR 0 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: ST_TO_ADDR
// end ;
52865: LD_VAR 0 3
52869: RET
// export function First ( array ) ; begin
52870: LD_INT 0
52872: PPUSH
// if not array then
52873: LD_VAR 0 1
52877: NOT
52878: IFFALSE 52882
// exit ;
52880: GO 52896
// result := array [ 1 ] ;
52882: LD_ADDR_VAR 0 2
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: LD_INT 1
52894: ARRAY
52895: ST_TO_ADDR
// end ;
52896: LD_VAR 0 2
52900: RET
// export function Last ( array ) ; begin
52901: LD_INT 0
52903: PPUSH
// if not array then
52904: LD_VAR 0 1
52908: NOT
52909: IFFALSE 52913
// exit ;
52911: GO 52929
// result := array [ array ] ;
52913: LD_ADDR_VAR 0 2
52917: PUSH
52918: LD_VAR 0 1
52922: PUSH
52923: LD_VAR 0 1
52927: ARRAY
52928: ST_TO_ADDR
// end ;
52929: LD_VAR 0 2
52933: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52934: LD_INT 0
52936: PPUSH
52937: PPUSH
// result := [ ] ;
52938: LD_ADDR_VAR 0 5
52942: PUSH
52943: EMPTY
52944: ST_TO_ADDR
// if not array then
52945: LD_VAR 0 1
52949: NOT
52950: IFFALSE 52954
// exit ;
52952: GO 53066
// for i := 1 to array do
52954: LD_ADDR_VAR 0 6
52958: PUSH
52959: DOUBLE
52960: LD_INT 1
52962: DEC
52963: ST_TO_ADDR
52964: LD_VAR 0 1
52968: PUSH
52969: FOR_TO
52970: IFFALSE 53064
// if array [ i ] [ index ] = value then
52972: LD_VAR 0 1
52976: PUSH
52977: LD_VAR 0 6
52981: ARRAY
52982: PUSH
52983: LD_VAR 0 2
52987: ARRAY
52988: PUSH
52989: LD_VAR 0 3
52993: EQUAL
52994: IFFALSE 53062
// begin if indexColumn then
52996: LD_VAR 0 4
53000: IFFALSE 53036
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53002: LD_ADDR_VAR 0 5
53006: PUSH
53007: LD_VAR 0 5
53011: PPUSH
53012: LD_VAR 0 1
53016: PUSH
53017: LD_VAR 0 6
53021: ARRAY
53022: PUSH
53023: LD_VAR 0 4
53027: ARRAY
53028: PPUSH
53029: CALL 48114 0 2
53033: ST_TO_ADDR
53034: GO 53062
// result := Join ( result , array [ i ] ) ;
53036: LD_ADDR_VAR 0 5
53040: PUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: LD_VAR 0 1
53050: PUSH
53051: LD_VAR 0 6
53055: ARRAY
53056: PPUSH
53057: CALL 48114 0 2
53061: ST_TO_ADDR
// end ;
53062: GO 52969
53064: POP
53065: POP
// end ;
53066: LD_VAR 0 5
53070: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53071: LD_INT 0
53073: PPUSH
// if not vehicles or not parkingPoint then
53074: LD_VAR 0 1
53078: NOT
53079: PUSH
53080: LD_VAR 0 2
53084: NOT
53085: OR
53086: IFFALSE 53090
// exit ;
53088: GO 53188
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53090: LD_ADDR_VAR 0 1
53094: PUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: LD_INT 50
53102: PUSH
53103: EMPTY
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: PUSH
53109: LD_INT 92
53111: PUSH
53112: LD_VAR 0 2
53116: PUSH
53117: LD_INT 1
53119: ARRAY
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_INT 2
53128: ARRAY
53129: PUSH
53130: LD_INT 8
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PPUSH
53147: CALL_OW 72
53151: ST_TO_ADDR
// if not vehicles then
53152: LD_VAR 0 1
53156: NOT
53157: IFFALSE 53161
// exit ;
53159: GO 53188
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53161: LD_VAR 0 1
53165: PPUSH
53166: LD_VAR 0 2
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PPUSH
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 2
53182: ARRAY
53183: PPUSH
53184: CALL_OW 111
// end ;
53188: LD_VAR 0 3
53192: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53193: LD_INT 0
53195: PPUSH
53196: PPUSH
53197: PPUSH
// if not side or not area then
53198: LD_VAR 0 1
53202: NOT
53203: PUSH
53204: LD_VAR 0 2
53208: NOT
53209: OR
53210: IFFALSE 53214
// exit ;
53212: GO 53333
// tmp := AreaToList ( area , 0 ) ;
53214: LD_ADDR_VAR 0 5
53218: PUSH
53219: LD_VAR 0 2
53223: PPUSH
53224: LD_INT 0
53226: PPUSH
53227: CALL_OW 517
53231: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53232: LD_ADDR_VAR 0 4
53236: PUSH
53237: DOUBLE
53238: LD_INT 1
53240: DEC
53241: ST_TO_ADDR
53242: LD_VAR 0 5
53246: PUSH
53247: LD_INT 1
53249: ARRAY
53250: PUSH
53251: FOR_TO
53252: IFFALSE 53331
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53254: LD_VAR 0 5
53258: PUSH
53259: LD_INT 1
53261: ARRAY
53262: PUSH
53263: LD_VAR 0 4
53267: ARRAY
53268: PPUSH
53269: LD_VAR 0 5
53273: PUSH
53274: LD_INT 2
53276: ARRAY
53277: PUSH
53278: LD_VAR 0 4
53282: ARRAY
53283: PPUSH
53284: CALL_OW 351
53288: IFFALSE 53329
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53290: LD_VAR 0 5
53294: PUSH
53295: LD_INT 1
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 4
53303: ARRAY
53304: PPUSH
53305: LD_VAR 0 5
53309: PUSH
53310: LD_INT 2
53312: ARRAY
53313: PUSH
53314: LD_VAR 0 4
53318: ARRAY
53319: PPUSH
53320: LD_VAR 0 1
53324: PPUSH
53325: CALL_OW 244
// end ;
53329: GO 53251
53331: POP
53332: POP
// end ; end_of_file end_of_file
53333: LD_VAR 0 3
53337: RET
// export globalGameSaveCounter ; every 0 0$1 do
53338: GO 53340
53340: DISABLE
// begin enable ;
53341: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53342: LD_STRING updateTimer(
53344: PUSH
53345: LD_OWVAR 1
53349: STR
53350: PUSH
53351: LD_STRING );
53353: STR
53354: PPUSH
53355: CALL_OW 559
// end ;
53359: END
// every 0 0$1 do
53360: GO 53362
53362: DISABLE
// begin globalGameSaveCounter := 0 ;
53363: LD_ADDR_EXP 37
53367: PUSH
53368: LD_INT 0
53370: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53371: LD_STRING setGameSaveCounter(0)
53373: PPUSH
53374: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53378: LD_STRING initStreamRollete();
53380: PPUSH
53381: CALL_OW 559
// InitStreamMode ;
53385: CALL 54728 0 0
// DefineStreamItems ( false ) ;
53389: LD_INT 0
53391: PPUSH
53392: CALL 55192 0 1
// end ;
53396: END
// export function SOS_MapStart ( ) ; begin
53397: LD_INT 0
53399: PPUSH
// if streamModeActive then
53400: LD_EXP 38
53404: IFFALSE 53413
// DefineStreamItems ( true ) ;
53406: LD_INT 1
53408: PPUSH
53409: CALL 55192 0 1
// UpdateLuaVariables ( ) ;
53413: CALL 53430 0 0
// UpdateFactoryWaypoints ( ) ;
53417: CALL 68194 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53421: CALL 68446 0 0
// end ;
53425: LD_VAR 0 1
53429: RET
// function UpdateLuaVariables ( ) ; begin
53430: LD_INT 0
53432: PPUSH
// if globalGameSaveCounter then
53433: LD_EXP 37
53437: IFFALSE 53471
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53439: LD_ADDR_EXP 37
53443: PUSH
53444: LD_EXP 37
53448: PPUSH
53449: CALL 49475 0 1
53453: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53454: LD_STRING setGameSaveCounter(
53456: PUSH
53457: LD_EXP 37
53461: STR
53462: PUSH
53463: LD_STRING )
53465: STR
53466: PPUSH
53467: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53471: LD_STRING setGameDifficulty(
53473: PUSH
53474: LD_OWVAR 67
53478: STR
53479: PUSH
53480: LD_STRING )
53482: STR
53483: PPUSH
53484: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53488: LD_STRING displayDifficulty(
53490: PUSH
53491: LD_OWVAR 67
53495: STR
53496: PUSH
53497: LD_STRING )
53499: STR
53500: PPUSH
53501: CALL_OW 559
// end ;
53505: LD_VAR 0 1
53509: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53510: LD_INT 0
53512: PPUSH
// if p2 = stream_mode then
53513: LD_VAR 0 2
53517: PUSH
53518: LD_INT 100
53520: EQUAL
53521: IFFALSE 54524
// begin if not StreamModeActive then
53523: LD_EXP 38
53527: NOT
53528: IFFALSE 53538
// StreamModeActive := true ;
53530: LD_ADDR_EXP 38
53534: PUSH
53535: LD_INT 1
53537: ST_TO_ADDR
// if p3 = 0 then
53538: LD_VAR 0 3
53542: PUSH
53543: LD_INT 0
53545: EQUAL
53546: IFFALSE 53552
// InitStreamMode ;
53548: CALL 54728 0 0
// if p3 = 1 then
53552: LD_VAR 0 3
53556: PUSH
53557: LD_INT 1
53559: EQUAL
53560: IFFALSE 53570
// sRocket := true ;
53562: LD_ADDR_EXP 43
53566: PUSH
53567: LD_INT 1
53569: ST_TO_ADDR
// if p3 = 2 then
53570: LD_VAR 0 3
53574: PUSH
53575: LD_INT 2
53577: EQUAL
53578: IFFALSE 53588
// sSpeed := true ;
53580: LD_ADDR_EXP 42
53584: PUSH
53585: LD_INT 1
53587: ST_TO_ADDR
// if p3 = 3 then
53588: LD_VAR 0 3
53592: PUSH
53593: LD_INT 3
53595: EQUAL
53596: IFFALSE 53606
// sEngine := true ;
53598: LD_ADDR_EXP 44
53602: PUSH
53603: LD_INT 1
53605: ST_TO_ADDR
// if p3 = 4 then
53606: LD_VAR 0 3
53610: PUSH
53611: LD_INT 4
53613: EQUAL
53614: IFFALSE 53624
// sSpec := true ;
53616: LD_ADDR_EXP 41
53620: PUSH
53621: LD_INT 1
53623: ST_TO_ADDR
// if p3 = 5 then
53624: LD_VAR 0 3
53628: PUSH
53629: LD_INT 5
53631: EQUAL
53632: IFFALSE 53642
// sLevel := true ;
53634: LD_ADDR_EXP 45
53638: PUSH
53639: LD_INT 1
53641: ST_TO_ADDR
// if p3 = 6 then
53642: LD_VAR 0 3
53646: PUSH
53647: LD_INT 6
53649: EQUAL
53650: IFFALSE 53660
// sArmoury := true ;
53652: LD_ADDR_EXP 46
53656: PUSH
53657: LD_INT 1
53659: ST_TO_ADDR
// if p3 = 7 then
53660: LD_VAR 0 3
53664: PUSH
53665: LD_INT 7
53667: EQUAL
53668: IFFALSE 53678
// sRadar := true ;
53670: LD_ADDR_EXP 47
53674: PUSH
53675: LD_INT 1
53677: ST_TO_ADDR
// if p3 = 8 then
53678: LD_VAR 0 3
53682: PUSH
53683: LD_INT 8
53685: EQUAL
53686: IFFALSE 53696
// sBunker := true ;
53688: LD_ADDR_EXP 48
53692: PUSH
53693: LD_INT 1
53695: ST_TO_ADDR
// if p3 = 9 then
53696: LD_VAR 0 3
53700: PUSH
53701: LD_INT 9
53703: EQUAL
53704: IFFALSE 53714
// sHack := true ;
53706: LD_ADDR_EXP 49
53710: PUSH
53711: LD_INT 1
53713: ST_TO_ADDR
// if p3 = 10 then
53714: LD_VAR 0 3
53718: PUSH
53719: LD_INT 10
53721: EQUAL
53722: IFFALSE 53732
// sFire := true ;
53724: LD_ADDR_EXP 50
53728: PUSH
53729: LD_INT 1
53731: ST_TO_ADDR
// if p3 = 11 then
53732: LD_VAR 0 3
53736: PUSH
53737: LD_INT 11
53739: EQUAL
53740: IFFALSE 53750
// sRefresh := true ;
53742: LD_ADDR_EXP 51
53746: PUSH
53747: LD_INT 1
53749: ST_TO_ADDR
// if p3 = 12 then
53750: LD_VAR 0 3
53754: PUSH
53755: LD_INT 12
53757: EQUAL
53758: IFFALSE 53768
// sExp := true ;
53760: LD_ADDR_EXP 52
53764: PUSH
53765: LD_INT 1
53767: ST_TO_ADDR
// if p3 = 13 then
53768: LD_VAR 0 3
53772: PUSH
53773: LD_INT 13
53775: EQUAL
53776: IFFALSE 53786
// sDepot := true ;
53778: LD_ADDR_EXP 53
53782: PUSH
53783: LD_INT 1
53785: ST_TO_ADDR
// if p3 = 14 then
53786: LD_VAR 0 3
53790: PUSH
53791: LD_INT 14
53793: EQUAL
53794: IFFALSE 53804
// sFlag := true ;
53796: LD_ADDR_EXP 54
53800: PUSH
53801: LD_INT 1
53803: ST_TO_ADDR
// if p3 = 15 then
53804: LD_VAR 0 3
53808: PUSH
53809: LD_INT 15
53811: EQUAL
53812: IFFALSE 53822
// sKamikadze := true ;
53814: LD_ADDR_EXP 62
53818: PUSH
53819: LD_INT 1
53821: ST_TO_ADDR
// if p3 = 16 then
53822: LD_VAR 0 3
53826: PUSH
53827: LD_INT 16
53829: EQUAL
53830: IFFALSE 53840
// sTroll := true ;
53832: LD_ADDR_EXP 63
53836: PUSH
53837: LD_INT 1
53839: ST_TO_ADDR
// if p3 = 17 then
53840: LD_VAR 0 3
53844: PUSH
53845: LD_INT 17
53847: EQUAL
53848: IFFALSE 53858
// sSlow := true ;
53850: LD_ADDR_EXP 64
53854: PUSH
53855: LD_INT 1
53857: ST_TO_ADDR
// if p3 = 18 then
53858: LD_VAR 0 3
53862: PUSH
53863: LD_INT 18
53865: EQUAL
53866: IFFALSE 53876
// sLack := true ;
53868: LD_ADDR_EXP 65
53872: PUSH
53873: LD_INT 1
53875: ST_TO_ADDR
// if p3 = 19 then
53876: LD_VAR 0 3
53880: PUSH
53881: LD_INT 19
53883: EQUAL
53884: IFFALSE 53894
// sTank := true ;
53886: LD_ADDR_EXP 67
53890: PUSH
53891: LD_INT 1
53893: ST_TO_ADDR
// if p3 = 20 then
53894: LD_VAR 0 3
53898: PUSH
53899: LD_INT 20
53901: EQUAL
53902: IFFALSE 53912
// sRemote := true ;
53904: LD_ADDR_EXP 68
53908: PUSH
53909: LD_INT 1
53911: ST_TO_ADDR
// if p3 = 21 then
53912: LD_VAR 0 3
53916: PUSH
53917: LD_INT 21
53919: EQUAL
53920: IFFALSE 53930
// sPowell := true ;
53922: LD_ADDR_EXP 69
53926: PUSH
53927: LD_INT 1
53929: ST_TO_ADDR
// if p3 = 22 then
53930: LD_VAR 0 3
53934: PUSH
53935: LD_INT 22
53937: EQUAL
53938: IFFALSE 53948
// sTeleport := true ;
53940: LD_ADDR_EXP 72
53944: PUSH
53945: LD_INT 1
53947: ST_TO_ADDR
// if p3 = 23 then
53948: LD_VAR 0 3
53952: PUSH
53953: LD_INT 23
53955: EQUAL
53956: IFFALSE 53966
// sOilTower := true ;
53958: LD_ADDR_EXP 74
53962: PUSH
53963: LD_INT 1
53965: ST_TO_ADDR
// if p3 = 24 then
53966: LD_VAR 0 3
53970: PUSH
53971: LD_INT 24
53973: EQUAL
53974: IFFALSE 53984
// sShovel := true ;
53976: LD_ADDR_EXP 75
53980: PUSH
53981: LD_INT 1
53983: ST_TO_ADDR
// if p3 = 25 then
53984: LD_VAR 0 3
53988: PUSH
53989: LD_INT 25
53991: EQUAL
53992: IFFALSE 54002
// sSheik := true ;
53994: LD_ADDR_EXP 76
53998: PUSH
53999: LD_INT 1
54001: ST_TO_ADDR
// if p3 = 26 then
54002: LD_VAR 0 3
54006: PUSH
54007: LD_INT 26
54009: EQUAL
54010: IFFALSE 54020
// sEarthquake := true ;
54012: LD_ADDR_EXP 78
54016: PUSH
54017: LD_INT 1
54019: ST_TO_ADDR
// if p3 = 27 then
54020: LD_VAR 0 3
54024: PUSH
54025: LD_INT 27
54027: EQUAL
54028: IFFALSE 54038
// sAI := true ;
54030: LD_ADDR_EXP 79
54034: PUSH
54035: LD_INT 1
54037: ST_TO_ADDR
// if p3 = 28 then
54038: LD_VAR 0 3
54042: PUSH
54043: LD_INT 28
54045: EQUAL
54046: IFFALSE 54056
// sCargo := true ;
54048: LD_ADDR_EXP 82
54052: PUSH
54053: LD_INT 1
54055: ST_TO_ADDR
// if p3 = 29 then
54056: LD_VAR 0 3
54060: PUSH
54061: LD_INT 29
54063: EQUAL
54064: IFFALSE 54074
// sDLaser := true ;
54066: LD_ADDR_EXP 83
54070: PUSH
54071: LD_INT 1
54073: ST_TO_ADDR
// if p3 = 30 then
54074: LD_VAR 0 3
54078: PUSH
54079: LD_INT 30
54081: EQUAL
54082: IFFALSE 54092
// sExchange := true ;
54084: LD_ADDR_EXP 84
54088: PUSH
54089: LD_INT 1
54091: ST_TO_ADDR
// if p3 = 31 then
54092: LD_VAR 0 3
54096: PUSH
54097: LD_INT 31
54099: EQUAL
54100: IFFALSE 54110
// sFac := true ;
54102: LD_ADDR_EXP 85
54106: PUSH
54107: LD_INT 1
54109: ST_TO_ADDR
// if p3 = 32 then
54110: LD_VAR 0 3
54114: PUSH
54115: LD_INT 32
54117: EQUAL
54118: IFFALSE 54128
// sPower := true ;
54120: LD_ADDR_EXP 86
54124: PUSH
54125: LD_INT 1
54127: ST_TO_ADDR
// if p3 = 33 then
54128: LD_VAR 0 3
54132: PUSH
54133: LD_INT 33
54135: EQUAL
54136: IFFALSE 54146
// sRandom := true ;
54138: LD_ADDR_EXP 87
54142: PUSH
54143: LD_INT 1
54145: ST_TO_ADDR
// if p3 = 34 then
54146: LD_VAR 0 3
54150: PUSH
54151: LD_INT 34
54153: EQUAL
54154: IFFALSE 54164
// sShield := true ;
54156: LD_ADDR_EXP 88
54160: PUSH
54161: LD_INT 1
54163: ST_TO_ADDR
// if p3 = 35 then
54164: LD_VAR 0 3
54168: PUSH
54169: LD_INT 35
54171: EQUAL
54172: IFFALSE 54182
// sTime := true ;
54174: LD_ADDR_EXP 89
54178: PUSH
54179: LD_INT 1
54181: ST_TO_ADDR
// if p3 = 36 then
54182: LD_VAR 0 3
54186: PUSH
54187: LD_INT 36
54189: EQUAL
54190: IFFALSE 54200
// sTools := true ;
54192: LD_ADDR_EXP 90
54196: PUSH
54197: LD_INT 1
54199: ST_TO_ADDR
// if p3 = 101 then
54200: LD_VAR 0 3
54204: PUSH
54205: LD_INT 101
54207: EQUAL
54208: IFFALSE 54218
// sSold := true ;
54210: LD_ADDR_EXP 55
54214: PUSH
54215: LD_INT 1
54217: ST_TO_ADDR
// if p3 = 102 then
54218: LD_VAR 0 3
54222: PUSH
54223: LD_INT 102
54225: EQUAL
54226: IFFALSE 54236
// sDiff := true ;
54228: LD_ADDR_EXP 56
54232: PUSH
54233: LD_INT 1
54235: ST_TO_ADDR
// if p3 = 103 then
54236: LD_VAR 0 3
54240: PUSH
54241: LD_INT 103
54243: EQUAL
54244: IFFALSE 54254
// sFog := true ;
54246: LD_ADDR_EXP 59
54250: PUSH
54251: LD_INT 1
54253: ST_TO_ADDR
// if p3 = 104 then
54254: LD_VAR 0 3
54258: PUSH
54259: LD_INT 104
54261: EQUAL
54262: IFFALSE 54272
// sReset := true ;
54264: LD_ADDR_EXP 60
54268: PUSH
54269: LD_INT 1
54271: ST_TO_ADDR
// if p3 = 105 then
54272: LD_VAR 0 3
54276: PUSH
54277: LD_INT 105
54279: EQUAL
54280: IFFALSE 54290
// sSun := true ;
54282: LD_ADDR_EXP 61
54286: PUSH
54287: LD_INT 1
54289: ST_TO_ADDR
// if p3 = 106 then
54290: LD_VAR 0 3
54294: PUSH
54295: LD_INT 106
54297: EQUAL
54298: IFFALSE 54308
// sTiger := true ;
54300: LD_ADDR_EXP 57
54304: PUSH
54305: LD_INT 1
54307: ST_TO_ADDR
// if p3 = 107 then
54308: LD_VAR 0 3
54312: PUSH
54313: LD_INT 107
54315: EQUAL
54316: IFFALSE 54326
// sBomb := true ;
54318: LD_ADDR_EXP 58
54322: PUSH
54323: LD_INT 1
54325: ST_TO_ADDR
// if p3 = 108 then
54326: LD_VAR 0 3
54330: PUSH
54331: LD_INT 108
54333: EQUAL
54334: IFFALSE 54344
// sWound := true ;
54336: LD_ADDR_EXP 66
54340: PUSH
54341: LD_INT 1
54343: ST_TO_ADDR
// if p3 = 109 then
54344: LD_VAR 0 3
54348: PUSH
54349: LD_INT 109
54351: EQUAL
54352: IFFALSE 54362
// sBetray := true ;
54354: LD_ADDR_EXP 70
54358: PUSH
54359: LD_INT 1
54361: ST_TO_ADDR
// if p3 = 110 then
54362: LD_VAR 0 3
54366: PUSH
54367: LD_INT 110
54369: EQUAL
54370: IFFALSE 54380
// sContamin := true ;
54372: LD_ADDR_EXP 71
54376: PUSH
54377: LD_INT 1
54379: ST_TO_ADDR
// if p3 = 111 then
54380: LD_VAR 0 3
54384: PUSH
54385: LD_INT 111
54387: EQUAL
54388: IFFALSE 54398
// sOil := true ;
54390: LD_ADDR_EXP 73
54394: PUSH
54395: LD_INT 1
54397: ST_TO_ADDR
// if p3 = 112 then
54398: LD_VAR 0 3
54402: PUSH
54403: LD_INT 112
54405: EQUAL
54406: IFFALSE 54416
// sStu := true ;
54408: LD_ADDR_EXP 77
54412: PUSH
54413: LD_INT 1
54415: ST_TO_ADDR
// if p3 = 113 then
54416: LD_VAR 0 3
54420: PUSH
54421: LD_INT 113
54423: EQUAL
54424: IFFALSE 54434
// sBazooka := true ;
54426: LD_ADDR_EXP 80
54430: PUSH
54431: LD_INT 1
54433: ST_TO_ADDR
// if p3 = 114 then
54434: LD_VAR 0 3
54438: PUSH
54439: LD_INT 114
54441: EQUAL
54442: IFFALSE 54452
// sMortar := true ;
54444: LD_ADDR_EXP 81
54448: PUSH
54449: LD_INT 1
54451: ST_TO_ADDR
// if p3 = 115 then
54452: LD_VAR 0 3
54456: PUSH
54457: LD_INT 115
54459: EQUAL
54460: IFFALSE 54470
// sRanger := true ;
54462: LD_ADDR_EXP 91
54466: PUSH
54467: LD_INT 1
54469: ST_TO_ADDR
// if p3 = 116 then
54470: LD_VAR 0 3
54474: PUSH
54475: LD_INT 116
54477: EQUAL
54478: IFFALSE 54488
// sComputer := true ;
54480: LD_ADDR_EXP 92
54484: PUSH
54485: LD_INT 1
54487: ST_TO_ADDR
// if p3 = 117 then
54488: LD_VAR 0 3
54492: PUSH
54493: LD_INT 117
54495: EQUAL
54496: IFFALSE 54506
// s30 := true ;
54498: LD_ADDR_EXP 93
54502: PUSH
54503: LD_INT 1
54505: ST_TO_ADDR
// if p3 = 118 then
54506: LD_VAR 0 3
54510: PUSH
54511: LD_INT 118
54513: EQUAL
54514: IFFALSE 54524
// s60 := true ;
54516: LD_ADDR_EXP 94
54520: PUSH
54521: LD_INT 1
54523: ST_TO_ADDR
// end ; if p2 = hack_mode then
54524: LD_VAR 0 2
54528: PUSH
54529: LD_INT 101
54531: EQUAL
54532: IFFALSE 54660
// begin case p3 of 1 :
54534: LD_VAR 0 3
54538: PUSH
54539: LD_INT 1
54541: DOUBLE
54542: EQUAL
54543: IFTRUE 54547
54545: GO 54554
54547: POP
// hHackUnlimitedResources ; 2 :
54548: CALL 66807 0 0
54552: GO 54660
54554: LD_INT 2
54556: DOUBLE
54557: EQUAL
54558: IFTRUE 54562
54560: GO 54569
54562: POP
// hHackSetLevel10 ; 3 :
54563: CALL 66940 0 0
54567: GO 54660
54569: LD_INT 3
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54584
54577: POP
// hHackSetLevel10YourUnits ; 4 :
54578: CALL 67025 0 0
54582: GO 54660
54584: LD_INT 4
54586: DOUBLE
54587: EQUAL
54588: IFTRUE 54592
54590: GO 54599
54592: POP
// hHackInvincible ; 5 :
54593: CALL 67473 0 0
54597: GO 54660
54599: LD_INT 5
54601: DOUBLE
54602: EQUAL
54603: IFTRUE 54607
54605: GO 54614
54607: POP
// hHackInvisible ; 6 :
54608: CALL 67584 0 0
54612: GO 54660
54614: LD_INT 6
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54622
54620: GO 54629
54622: POP
// hHackChangeYourSide ; 7 :
54623: CALL 67641 0 0
54627: GO 54660
54629: LD_INT 7
54631: DOUBLE
54632: EQUAL
54633: IFTRUE 54637
54635: GO 54644
54637: POP
// hHackChangeUnitSide ; 8 :
54638: CALL 67683 0 0
54642: GO 54660
54644: LD_INT 8
54646: DOUBLE
54647: EQUAL
54648: IFTRUE 54652
54650: GO 54659
54652: POP
// hHackFog ; end ;
54653: CALL 67784 0 0
54657: GO 54660
54659: POP
// end ; if p2 = game_save_mode then
54660: LD_VAR 0 2
54664: PUSH
54665: LD_INT 102
54667: EQUAL
54668: IFFALSE 54723
// begin if p3 = 1 then
54670: LD_VAR 0 3
54674: PUSH
54675: LD_INT 1
54677: EQUAL
54678: IFFALSE 54690
// globalGameSaveCounter := p4 ;
54680: LD_ADDR_EXP 37
54684: PUSH
54685: LD_VAR 0 4
54689: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54690: LD_VAR 0 3
54694: PUSH
54695: LD_INT 2
54697: EQUAL
54698: PUSH
54699: LD_EXP 37
54703: AND
54704: IFFALSE 54723
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54706: LD_STRING setGameSaveCounter(
54708: PUSH
54709: LD_EXP 37
54713: STR
54714: PUSH
54715: LD_STRING )
54717: STR
54718: PPUSH
54719: CALL_OW 559
// end ; end ;
54723: LD_VAR 0 7
54727: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54728: LD_INT 0
54730: PPUSH
// streamModeActive := false ;
54731: LD_ADDR_EXP 38
54735: PUSH
54736: LD_INT 0
54738: ST_TO_ADDR
// normalCounter := 36 ;
54739: LD_ADDR_EXP 39
54743: PUSH
54744: LD_INT 36
54746: ST_TO_ADDR
// hardcoreCounter := 18 ;
54747: LD_ADDR_EXP 40
54751: PUSH
54752: LD_INT 18
54754: ST_TO_ADDR
// sRocket := false ;
54755: LD_ADDR_EXP 43
54759: PUSH
54760: LD_INT 0
54762: ST_TO_ADDR
// sSpeed := false ;
54763: LD_ADDR_EXP 42
54767: PUSH
54768: LD_INT 0
54770: ST_TO_ADDR
// sEngine := false ;
54771: LD_ADDR_EXP 44
54775: PUSH
54776: LD_INT 0
54778: ST_TO_ADDR
// sSpec := false ;
54779: LD_ADDR_EXP 41
54783: PUSH
54784: LD_INT 0
54786: ST_TO_ADDR
// sLevel := false ;
54787: LD_ADDR_EXP 45
54791: PUSH
54792: LD_INT 0
54794: ST_TO_ADDR
// sArmoury := false ;
54795: LD_ADDR_EXP 46
54799: PUSH
54800: LD_INT 0
54802: ST_TO_ADDR
// sRadar := false ;
54803: LD_ADDR_EXP 47
54807: PUSH
54808: LD_INT 0
54810: ST_TO_ADDR
// sBunker := false ;
54811: LD_ADDR_EXP 48
54815: PUSH
54816: LD_INT 0
54818: ST_TO_ADDR
// sHack := false ;
54819: LD_ADDR_EXP 49
54823: PUSH
54824: LD_INT 0
54826: ST_TO_ADDR
// sFire := false ;
54827: LD_ADDR_EXP 50
54831: PUSH
54832: LD_INT 0
54834: ST_TO_ADDR
// sRefresh := false ;
54835: LD_ADDR_EXP 51
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// sExp := false ;
54843: LD_ADDR_EXP 52
54847: PUSH
54848: LD_INT 0
54850: ST_TO_ADDR
// sDepot := false ;
54851: LD_ADDR_EXP 53
54855: PUSH
54856: LD_INT 0
54858: ST_TO_ADDR
// sFlag := false ;
54859: LD_ADDR_EXP 54
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// sKamikadze := false ;
54867: LD_ADDR_EXP 62
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// sTroll := false ;
54875: LD_ADDR_EXP 63
54879: PUSH
54880: LD_INT 0
54882: ST_TO_ADDR
// sSlow := false ;
54883: LD_ADDR_EXP 64
54887: PUSH
54888: LD_INT 0
54890: ST_TO_ADDR
// sLack := false ;
54891: LD_ADDR_EXP 65
54895: PUSH
54896: LD_INT 0
54898: ST_TO_ADDR
// sTank := false ;
54899: LD_ADDR_EXP 67
54903: PUSH
54904: LD_INT 0
54906: ST_TO_ADDR
// sRemote := false ;
54907: LD_ADDR_EXP 68
54911: PUSH
54912: LD_INT 0
54914: ST_TO_ADDR
// sPowell := false ;
54915: LD_ADDR_EXP 69
54919: PUSH
54920: LD_INT 0
54922: ST_TO_ADDR
// sTeleport := false ;
54923: LD_ADDR_EXP 72
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// sOilTower := false ;
54931: LD_ADDR_EXP 74
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// sShovel := false ;
54939: LD_ADDR_EXP 75
54943: PUSH
54944: LD_INT 0
54946: ST_TO_ADDR
// sSheik := false ;
54947: LD_ADDR_EXP 76
54951: PUSH
54952: LD_INT 0
54954: ST_TO_ADDR
// sEarthquake := false ;
54955: LD_ADDR_EXP 78
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// sAI := false ;
54963: LD_ADDR_EXP 79
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// sCargo := false ;
54971: LD_ADDR_EXP 82
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// sDLaser := false ;
54979: LD_ADDR_EXP 83
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// sExchange := false ;
54987: LD_ADDR_EXP 84
54991: PUSH
54992: LD_INT 0
54994: ST_TO_ADDR
// sFac := false ;
54995: LD_ADDR_EXP 85
54999: PUSH
55000: LD_INT 0
55002: ST_TO_ADDR
// sPower := false ;
55003: LD_ADDR_EXP 86
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
// sRandom := false ;
55011: LD_ADDR_EXP 87
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// sShield := false ;
55019: LD_ADDR_EXP 88
55023: PUSH
55024: LD_INT 0
55026: ST_TO_ADDR
// sTime := false ;
55027: LD_ADDR_EXP 89
55031: PUSH
55032: LD_INT 0
55034: ST_TO_ADDR
// sTools := false ;
55035: LD_ADDR_EXP 90
55039: PUSH
55040: LD_INT 0
55042: ST_TO_ADDR
// sSold := false ;
55043: LD_ADDR_EXP 55
55047: PUSH
55048: LD_INT 0
55050: ST_TO_ADDR
// sDiff := false ;
55051: LD_ADDR_EXP 56
55055: PUSH
55056: LD_INT 0
55058: ST_TO_ADDR
// sFog := false ;
55059: LD_ADDR_EXP 59
55063: PUSH
55064: LD_INT 0
55066: ST_TO_ADDR
// sReset := false ;
55067: LD_ADDR_EXP 60
55071: PUSH
55072: LD_INT 0
55074: ST_TO_ADDR
// sSun := false ;
55075: LD_ADDR_EXP 61
55079: PUSH
55080: LD_INT 0
55082: ST_TO_ADDR
// sTiger := false ;
55083: LD_ADDR_EXP 57
55087: PUSH
55088: LD_INT 0
55090: ST_TO_ADDR
// sBomb := false ;
55091: LD_ADDR_EXP 58
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
// sWound := false ;
55099: LD_ADDR_EXP 66
55103: PUSH
55104: LD_INT 0
55106: ST_TO_ADDR
// sBetray := false ;
55107: LD_ADDR_EXP 70
55111: PUSH
55112: LD_INT 0
55114: ST_TO_ADDR
// sContamin := false ;
55115: LD_ADDR_EXP 71
55119: PUSH
55120: LD_INT 0
55122: ST_TO_ADDR
// sOil := false ;
55123: LD_ADDR_EXP 73
55127: PUSH
55128: LD_INT 0
55130: ST_TO_ADDR
// sStu := false ;
55131: LD_ADDR_EXP 77
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
// sBazooka := false ;
55139: LD_ADDR_EXP 80
55143: PUSH
55144: LD_INT 0
55146: ST_TO_ADDR
// sMortar := false ;
55147: LD_ADDR_EXP 81
55151: PUSH
55152: LD_INT 0
55154: ST_TO_ADDR
// sRanger := false ;
55155: LD_ADDR_EXP 91
55159: PUSH
55160: LD_INT 0
55162: ST_TO_ADDR
// sComputer := false ;
55163: LD_ADDR_EXP 92
55167: PUSH
55168: LD_INT 0
55170: ST_TO_ADDR
// s30 := false ;
55171: LD_ADDR_EXP 93
55175: PUSH
55176: LD_INT 0
55178: ST_TO_ADDR
// s60 := false ;
55179: LD_ADDR_EXP 94
55183: PUSH
55184: LD_INT 0
55186: ST_TO_ADDR
// end ;
55187: LD_VAR 0 1
55191: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
55199: PPUSH
55200: PPUSH
// result := [ ] ;
55201: LD_ADDR_VAR 0 2
55205: PUSH
55206: EMPTY
55207: ST_TO_ADDR
// if campaign_id = 1 then
55208: LD_OWVAR 69
55212: PUSH
55213: LD_INT 1
55215: EQUAL
55216: IFFALSE 58382
// begin case mission_number of 1 :
55218: LD_OWVAR 70
55222: PUSH
55223: LD_INT 1
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55231
55229: GO 55307
55231: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55232: LD_ADDR_VAR 0 2
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: LD_INT 11
55245: PUSH
55246: LD_INT 12
55248: PUSH
55249: LD_INT 15
55251: PUSH
55252: LD_INT 16
55254: PUSH
55255: LD_INT 22
55257: PUSH
55258: LD_INT 23
55260: PUSH
55261: LD_INT 26
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 101
55277: PUSH
55278: LD_INT 102
55280: PUSH
55281: LD_INT 106
55283: PUSH
55284: LD_INT 116
55286: PUSH
55287: LD_INT 117
55289: PUSH
55290: LD_INT 118
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: ST_TO_ADDR
55305: GO 58380
55307: LD_INT 2
55309: DOUBLE
55310: EQUAL
55311: IFTRUE 55315
55313: GO 55399
55315: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55316: LD_ADDR_VAR 0 2
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: LD_INT 11
55329: PUSH
55330: LD_INT 12
55332: PUSH
55333: LD_INT 15
55335: PUSH
55336: LD_INT 16
55338: PUSH
55339: LD_INT 22
55341: PUSH
55342: LD_INT 23
55344: PUSH
55345: LD_INT 26
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 101
55361: PUSH
55362: LD_INT 102
55364: PUSH
55365: LD_INT 105
55367: PUSH
55368: LD_INT 106
55370: PUSH
55371: LD_INT 108
55373: PUSH
55374: LD_INT 116
55376: PUSH
55377: LD_INT 117
55379: PUSH
55380: LD_INT 118
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: ST_TO_ADDR
55397: GO 58380
55399: LD_INT 3
55401: DOUBLE
55402: EQUAL
55403: IFTRUE 55407
55405: GO 55495
55407: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55408: LD_ADDR_VAR 0 2
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: LD_INT 5
55421: PUSH
55422: LD_INT 11
55424: PUSH
55425: LD_INT 12
55427: PUSH
55428: LD_INT 15
55430: PUSH
55431: LD_INT 16
55433: PUSH
55434: LD_INT 22
55436: PUSH
55437: LD_INT 26
55439: PUSH
55440: LD_INT 36
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 101
55457: PUSH
55458: LD_INT 102
55460: PUSH
55461: LD_INT 105
55463: PUSH
55464: LD_INT 106
55466: PUSH
55467: LD_INT 108
55469: PUSH
55470: LD_INT 116
55472: PUSH
55473: LD_INT 117
55475: PUSH
55476: LD_INT 118
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: ST_TO_ADDR
55493: GO 58380
55495: LD_INT 4
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55503
55501: GO 55599
55503: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55504: LD_ADDR_VAR 0 2
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 4
55514: PUSH
55515: LD_INT 5
55517: PUSH
55518: LD_INT 8
55520: PUSH
55521: LD_INT 11
55523: PUSH
55524: LD_INT 12
55526: PUSH
55527: LD_INT 15
55529: PUSH
55530: LD_INT 16
55532: PUSH
55533: LD_INT 22
55535: PUSH
55536: LD_INT 23
55538: PUSH
55539: LD_INT 26
55541: PUSH
55542: LD_INT 36
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 101
55561: PUSH
55562: LD_INT 102
55564: PUSH
55565: LD_INT 105
55567: PUSH
55568: LD_INT 106
55570: PUSH
55571: LD_INT 108
55573: PUSH
55574: LD_INT 116
55576: PUSH
55577: LD_INT 117
55579: PUSH
55580: LD_INT 118
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: ST_TO_ADDR
55597: GO 58380
55599: LD_INT 5
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55607
55605: GO 55719
55607: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55608: LD_ADDR_VAR 0 2
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 4
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: LD_INT 6
55624: PUSH
55625: LD_INT 8
55627: PUSH
55628: LD_INT 11
55630: PUSH
55631: LD_INT 12
55633: PUSH
55634: LD_INT 15
55636: PUSH
55637: LD_INT 16
55639: PUSH
55640: LD_INT 22
55642: PUSH
55643: LD_INT 23
55645: PUSH
55646: LD_INT 25
55648: PUSH
55649: LD_INT 26
55651: PUSH
55652: LD_INT 36
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 101
55673: PUSH
55674: LD_INT 102
55676: PUSH
55677: LD_INT 105
55679: PUSH
55680: LD_INT 106
55682: PUSH
55683: LD_INT 108
55685: PUSH
55686: LD_INT 109
55688: PUSH
55689: LD_INT 112
55691: PUSH
55692: LD_INT 116
55694: PUSH
55695: LD_INT 117
55697: PUSH
55698: LD_INT 118
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: ST_TO_ADDR
55717: GO 58380
55719: LD_INT 6
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55727
55725: GO 55859
55727: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55728: LD_ADDR_VAR 0 2
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: LD_INT 6
55744: PUSH
55745: LD_INT 8
55747: PUSH
55748: LD_INT 11
55750: PUSH
55751: LD_INT 12
55753: PUSH
55754: LD_INT 15
55756: PUSH
55757: LD_INT 16
55759: PUSH
55760: LD_INT 20
55762: PUSH
55763: LD_INT 21
55765: PUSH
55766: LD_INT 22
55768: PUSH
55769: LD_INT 23
55771: PUSH
55772: LD_INT 25
55774: PUSH
55775: LD_INT 26
55777: PUSH
55778: LD_INT 30
55780: PUSH
55781: LD_INT 31
55783: PUSH
55784: LD_INT 32
55786: PUSH
55787: LD_INT 36
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 101
55813: PUSH
55814: LD_INT 102
55816: PUSH
55817: LD_INT 105
55819: PUSH
55820: LD_INT 106
55822: PUSH
55823: LD_INT 108
55825: PUSH
55826: LD_INT 109
55828: PUSH
55829: LD_INT 112
55831: PUSH
55832: LD_INT 116
55834: PUSH
55835: LD_INT 117
55837: PUSH
55838: LD_INT 118
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: ST_TO_ADDR
55857: GO 58380
55859: LD_INT 7
55861: DOUBLE
55862: EQUAL
55863: IFTRUE 55867
55865: GO 55979
55867: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 4
55878: PUSH
55879: LD_INT 5
55881: PUSH
55882: LD_INT 7
55884: PUSH
55885: LD_INT 11
55887: PUSH
55888: LD_INT 12
55890: PUSH
55891: LD_INT 15
55893: PUSH
55894: LD_INT 16
55896: PUSH
55897: LD_INT 20
55899: PUSH
55900: LD_INT 21
55902: PUSH
55903: LD_INT 22
55905: PUSH
55906: LD_INT 23
55908: PUSH
55909: LD_INT 25
55911: PUSH
55912: LD_INT 26
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 101
55933: PUSH
55934: LD_INT 102
55936: PUSH
55937: LD_INT 103
55939: PUSH
55940: LD_INT 105
55942: PUSH
55943: LD_INT 106
55945: PUSH
55946: LD_INT 108
55948: PUSH
55949: LD_INT 112
55951: PUSH
55952: LD_INT 116
55954: PUSH
55955: LD_INT 117
55957: PUSH
55958: LD_INT 118
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: ST_TO_ADDR
55977: GO 58380
55979: LD_INT 8
55981: DOUBLE
55982: EQUAL
55983: IFTRUE 55987
55985: GO 56127
55987: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55988: LD_ADDR_VAR 0 2
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 4
55998: PUSH
55999: LD_INT 5
56001: PUSH
56002: LD_INT 6
56004: PUSH
56005: LD_INT 7
56007: PUSH
56008: LD_INT 8
56010: PUSH
56011: LD_INT 11
56013: PUSH
56014: LD_INT 12
56016: PUSH
56017: LD_INT 15
56019: PUSH
56020: LD_INT 16
56022: PUSH
56023: LD_INT 20
56025: PUSH
56026: LD_INT 21
56028: PUSH
56029: LD_INT 22
56031: PUSH
56032: LD_INT 23
56034: PUSH
56035: LD_INT 25
56037: PUSH
56038: LD_INT 26
56040: PUSH
56041: LD_INT 30
56043: PUSH
56044: LD_INT 31
56046: PUSH
56047: LD_INT 32
56049: PUSH
56050: LD_INT 36
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 101
56077: PUSH
56078: LD_INT 102
56080: PUSH
56081: LD_INT 103
56083: PUSH
56084: LD_INT 105
56086: PUSH
56087: LD_INT 106
56089: PUSH
56090: LD_INT 108
56092: PUSH
56093: LD_INT 109
56095: PUSH
56096: LD_INT 112
56098: PUSH
56099: LD_INT 116
56101: PUSH
56102: LD_INT 117
56104: PUSH
56105: LD_INT 118
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: ST_TO_ADDR
56125: GO 58380
56127: LD_INT 9
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56135
56133: GO 56283
56135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56136: LD_ADDR_VAR 0 2
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: LD_INT 5
56149: PUSH
56150: LD_INT 6
56152: PUSH
56153: LD_INT 7
56155: PUSH
56156: LD_INT 8
56158: PUSH
56159: LD_INT 11
56161: PUSH
56162: LD_INT 12
56164: PUSH
56165: LD_INT 15
56167: PUSH
56168: LD_INT 16
56170: PUSH
56171: LD_INT 20
56173: PUSH
56174: LD_INT 21
56176: PUSH
56177: LD_INT 22
56179: PUSH
56180: LD_INT 23
56182: PUSH
56183: LD_INT 25
56185: PUSH
56186: LD_INT 26
56188: PUSH
56189: LD_INT 28
56191: PUSH
56192: LD_INT 30
56194: PUSH
56195: LD_INT 31
56197: PUSH
56198: LD_INT 32
56200: PUSH
56201: LD_INT 36
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 101
56229: PUSH
56230: LD_INT 102
56232: PUSH
56233: LD_INT 103
56235: PUSH
56236: LD_INT 105
56238: PUSH
56239: LD_INT 106
56241: PUSH
56242: LD_INT 108
56244: PUSH
56245: LD_INT 109
56247: PUSH
56248: LD_INT 112
56250: PUSH
56251: LD_INT 114
56253: PUSH
56254: LD_INT 116
56256: PUSH
56257: LD_INT 117
56259: PUSH
56260: LD_INT 118
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: ST_TO_ADDR
56281: GO 58380
56283: LD_INT 10
56285: DOUBLE
56286: EQUAL
56287: IFTRUE 56291
56289: GO 56487
56291: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56292: LD_ADDR_VAR 0 2
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: LD_INT 6
56308: PUSH
56309: LD_INT 7
56311: PUSH
56312: LD_INT 8
56314: PUSH
56315: LD_INT 9
56317: PUSH
56318: LD_INT 10
56320: PUSH
56321: LD_INT 11
56323: PUSH
56324: LD_INT 12
56326: PUSH
56327: LD_INT 13
56329: PUSH
56330: LD_INT 14
56332: PUSH
56333: LD_INT 15
56335: PUSH
56336: LD_INT 16
56338: PUSH
56339: LD_INT 17
56341: PUSH
56342: LD_INT 18
56344: PUSH
56345: LD_INT 19
56347: PUSH
56348: LD_INT 20
56350: PUSH
56351: LD_INT 21
56353: PUSH
56354: LD_INT 22
56356: PUSH
56357: LD_INT 23
56359: PUSH
56360: LD_INT 24
56362: PUSH
56363: LD_INT 25
56365: PUSH
56366: LD_INT 26
56368: PUSH
56369: LD_INT 28
56371: PUSH
56372: LD_INT 30
56374: PUSH
56375: LD_INT 31
56377: PUSH
56378: LD_INT 32
56380: PUSH
56381: LD_INT 36
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 101
56417: PUSH
56418: LD_INT 102
56420: PUSH
56421: LD_INT 103
56423: PUSH
56424: LD_INT 104
56426: PUSH
56427: LD_INT 105
56429: PUSH
56430: LD_INT 106
56432: PUSH
56433: LD_INT 107
56435: PUSH
56436: LD_INT 108
56438: PUSH
56439: LD_INT 109
56441: PUSH
56442: LD_INT 110
56444: PUSH
56445: LD_INT 111
56447: PUSH
56448: LD_INT 112
56450: PUSH
56451: LD_INT 114
56453: PUSH
56454: LD_INT 116
56456: PUSH
56457: LD_INT 117
56459: PUSH
56460: LD_INT 118
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: ST_TO_ADDR
56485: GO 58380
56487: LD_INT 11
56489: DOUBLE
56490: EQUAL
56491: IFTRUE 56495
56493: GO 56699
56495: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56496: LD_ADDR_VAR 0 2
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: LD_INT 6
56515: PUSH
56516: LD_INT 7
56518: PUSH
56519: LD_INT 8
56521: PUSH
56522: LD_INT 9
56524: PUSH
56525: LD_INT 10
56527: PUSH
56528: LD_INT 11
56530: PUSH
56531: LD_INT 12
56533: PUSH
56534: LD_INT 13
56536: PUSH
56537: LD_INT 14
56539: PUSH
56540: LD_INT 15
56542: PUSH
56543: LD_INT 16
56545: PUSH
56546: LD_INT 17
56548: PUSH
56549: LD_INT 18
56551: PUSH
56552: LD_INT 19
56554: PUSH
56555: LD_INT 20
56557: PUSH
56558: LD_INT 21
56560: PUSH
56561: LD_INT 22
56563: PUSH
56564: LD_INT 23
56566: PUSH
56567: LD_INT 24
56569: PUSH
56570: LD_INT 25
56572: PUSH
56573: LD_INT 26
56575: PUSH
56576: LD_INT 28
56578: PUSH
56579: LD_INT 30
56581: PUSH
56582: LD_INT 31
56584: PUSH
56585: LD_INT 32
56587: PUSH
56588: LD_INT 34
56590: PUSH
56591: LD_INT 36
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 101
56629: PUSH
56630: LD_INT 102
56632: PUSH
56633: LD_INT 103
56635: PUSH
56636: LD_INT 104
56638: PUSH
56639: LD_INT 105
56641: PUSH
56642: LD_INT 106
56644: PUSH
56645: LD_INT 107
56647: PUSH
56648: LD_INT 108
56650: PUSH
56651: LD_INT 109
56653: PUSH
56654: LD_INT 110
56656: PUSH
56657: LD_INT 111
56659: PUSH
56660: LD_INT 112
56662: PUSH
56663: LD_INT 114
56665: PUSH
56666: LD_INT 116
56668: PUSH
56669: LD_INT 117
56671: PUSH
56672: LD_INT 118
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: ST_TO_ADDR
56697: GO 58380
56699: LD_INT 12
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56707
56705: GO 56927
56707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56708: LD_ADDR_VAR 0 2
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 6
56730: PUSH
56731: LD_INT 7
56733: PUSH
56734: LD_INT 8
56736: PUSH
56737: LD_INT 9
56739: PUSH
56740: LD_INT 10
56742: PUSH
56743: LD_INT 11
56745: PUSH
56746: LD_INT 12
56748: PUSH
56749: LD_INT 13
56751: PUSH
56752: LD_INT 14
56754: PUSH
56755: LD_INT 15
56757: PUSH
56758: LD_INT 16
56760: PUSH
56761: LD_INT 17
56763: PUSH
56764: LD_INT 18
56766: PUSH
56767: LD_INT 19
56769: PUSH
56770: LD_INT 20
56772: PUSH
56773: LD_INT 21
56775: PUSH
56776: LD_INT 22
56778: PUSH
56779: LD_INT 23
56781: PUSH
56782: LD_INT 24
56784: PUSH
56785: LD_INT 25
56787: PUSH
56788: LD_INT 26
56790: PUSH
56791: LD_INT 27
56793: PUSH
56794: LD_INT 28
56796: PUSH
56797: LD_INT 30
56799: PUSH
56800: LD_INT 31
56802: PUSH
56803: LD_INT 32
56805: PUSH
56806: LD_INT 33
56808: PUSH
56809: LD_INT 34
56811: PUSH
56812: LD_INT 36
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 101
56853: PUSH
56854: LD_INT 102
56856: PUSH
56857: LD_INT 103
56859: PUSH
56860: LD_INT 104
56862: PUSH
56863: LD_INT 105
56865: PUSH
56866: LD_INT 106
56868: PUSH
56869: LD_INT 107
56871: PUSH
56872: LD_INT 108
56874: PUSH
56875: LD_INT 109
56877: PUSH
56878: LD_INT 110
56880: PUSH
56881: LD_INT 111
56883: PUSH
56884: LD_INT 112
56886: PUSH
56887: LD_INT 113
56889: PUSH
56890: LD_INT 114
56892: PUSH
56893: LD_INT 116
56895: PUSH
56896: LD_INT 117
56898: PUSH
56899: LD_INT 118
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: ST_TO_ADDR
56925: GO 58380
56927: LD_INT 13
56929: DOUBLE
56930: EQUAL
56931: IFTRUE 56935
56933: GO 57143
56935: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56936: LD_ADDR_VAR 0 2
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 4
56952: PUSH
56953: LD_INT 5
56955: PUSH
56956: LD_INT 8
56958: PUSH
56959: LD_INT 9
56961: PUSH
56962: LD_INT 10
56964: PUSH
56965: LD_INT 11
56967: PUSH
56968: LD_INT 12
56970: PUSH
56971: LD_INT 14
56973: PUSH
56974: LD_INT 15
56976: PUSH
56977: LD_INT 16
56979: PUSH
56980: LD_INT 17
56982: PUSH
56983: LD_INT 18
56985: PUSH
56986: LD_INT 19
56988: PUSH
56989: LD_INT 20
56991: PUSH
56992: LD_INT 21
56994: PUSH
56995: LD_INT 22
56997: PUSH
56998: LD_INT 23
57000: PUSH
57001: LD_INT 24
57003: PUSH
57004: LD_INT 25
57006: PUSH
57007: LD_INT 26
57009: PUSH
57010: LD_INT 27
57012: PUSH
57013: LD_INT 28
57015: PUSH
57016: LD_INT 30
57018: PUSH
57019: LD_INT 31
57021: PUSH
57022: LD_INT 32
57024: PUSH
57025: LD_INT 33
57027: PUSH
57028: LD_INT 34
57030: PUSH
57031: LD_INT 36
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 101
57069: PUSH
57070: LD_INT 102
57072: PUSH
57073: LD_INT 103
57075: PUSH
57076: LD_INT 104
57078: PUSH
57079: LD_INT 105
57081: PUSH
57082: LD_INT 106
57084: PUSH
57085: LD_INT 107
57087: PUSH
57088: LD_INT 108
57090: PUSH
57091: LD_INT 109
57093: PUSH
57094: LD_INT 110
57096: PUSH
57097: LD_INT 111
57099: PUSH
57100: LD_INT 112
57102: PUSH
57103: LD_INT 113
57105: PUSH
57106: LD_INT 114
57108: PUSH
57109: LD_INT 116
57111: PUSH
57112: LD_INT 117
57114: PUSH
57115: LD_INT 118
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: ST_TO_ADDR
57141: GO 58380
57143: LD_INT 14
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57151
57149: GO 57375
57151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57152: LD_ADDR_VAR 0 2
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 5
57171: PUSH
57172: LD_INT 6
57174: PUSH
57175: LD_INT 7
57177: PUSH
57178: LD_INT 8
57180: PUSH
57181: LD_INT 9
57183: PUSH
57184: LD_INT 10
57186: PUSH
57187: LD_INT 11
57189: PUSH
57190: LD_INT 12
57192: PUSH
57193: LD_INT 13
57195: PUSH
57196: LD_INT 14
57198: PUSH
57199: LD_INT 15
57201: PUSH
57202: LD_INT 16
57204: PUSH
57205: LD_INT 17
57207: PUSH
57208: LD_INT 18
57210: PUSH
57211: LD_INT 19
57213: PUSH
57214: LD_INT 20
57216: PUSH
57217: LD_INT 21
57219: PUSH
57220: LD_INT 22
57222: PUSH
57223: LD_INT 23
57225: PUSH
57226: LD_INT 24
57228: PUSH
57229: LD_INT 25
57231: PUSH
57232: LD_INT 26
57234: PUSH
57235: LD_INT 27
57237: PUSH
57238: LD_INT 28
57240: PUSH
57241: LD_INT 29
57243: PUSH
57244: LD_INT 30
57246: PUSH
57247: LD_INT 31
57249: PUSH
57250: LD_INT 32
57252: PUSH
57253: LD_INT 33
57255: PUSH
57256: LD_INT 34
57258: PUSH
57259: LD_INT 36
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 101
57301: PUSH
57302: LD_INT 102
57304: PUSH
57305: LD_INT 103
57307: PUSH
57308: LD_INT 104
57310: PUSH
57311: LD_INT 105
57313: PUSH
57314: LD_INT 106
57316: PUSH
57317: LD_INT 107
57319: PUSH
57320: LD_INT 108
57322: PUSH
57323: LD_INT 109
57325: PUSH
57326: LD_INT 110
57328: PUSH
57329: LD_INT 111
57331: PUSH
57332: LD_INT 112
57334: PUSH
57335: LD_INT 113
57337: PUSH
57338: LD_INT 114
57340: PUSH
57341: LD_INT 116
57343: PUSH
57344: LD_INT 117
57346: PUSH
57347: LD_INT 118
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: ST_TO_ADDR
57373: GO 58380
57375: LD_INT 15
57377: DOUBLE
57378: EQUAL
57379: IFTRUE 57383
57381: GO 57607
57383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57384: LD_ADDR_VAR 0 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 5
57403: PUSH
57404: LD_INT 6
57406: PUSH
57407: LD_INT 7
57409: PUSH
57410: LD_INT 8
57412: PUSH
57413: LD_INT 9
57415: PUSH
57416: LD_INT 10
57418: PUSH
57419: LD_INT 11
57421: PUSH
57422: LD_INT 12
57424: PUSH
57425: LD_INT 13
57427: PUSH
57428: LD_INT 14
57430: PUSH
57431: LD_INT 15
57433: PUSH
57434: LD_INT 16
57436: PUSH
57437: LD_INT 17
57439: PUSH
57440: LD_INT 18
57442: PUSH
57443: LD_INT 19
57445: PUSH
57446: LD_INT 20
57448: PUSH
57449: LD_INT 21
57451: PUSH
57452: LD_INT 22
57454: PUSH
57455: LD_INT 23
57457: PUSH
57458: LD_INT 24
57460: PUSH
57461: LD_INT 25
57463: PUSH
57464: LD_INT 26
57466: PUSH
57467: LD_INT 27
57469: PUSH
57470: LD_INT 28
57472: PUSH
57473: LD_INT 29
57475: PUSH
57476: LD_INT 30
57478: PUSH
57479: LD_INT 31
57481: PUSH
57482: LD_INT 32
57484: PUSH
57485: LD_INT 33
57487: PUSH
57488: LD_INT 34
57490: PUSH
57491: LD_INT 36
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 101
57533: PUSH
57534: LD_INT 102
57536: PUSH
57537: LD_INT 103
57539: PUSH
57540: LD_INT 104
57542: PUSH
57543: LD_INT 105
57545: PUSH
57546: LD_INT 106
57548: PUSH
57549: LD_INT 107
57551: PUSH
57552: LD_INT 108
57554: PUSH
57555: LD_INT 109
57557: PUSH
57558: LD_INT 110
57560: PUSH
57561: LD_INT 111
57563: PUSH
57564: LD_INT 112
57566: PUSH
57567: LD_INT 113
57569: PUSH
57570: LD_INT 114
57572: PUSH
57573: LD_INT 116
57575: PUSH
57576: LD_INT 117
57578: PUSH
57579: LD_INT 118
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: ST_TO_ADDR
57605: GO 58380
57607: LD_INT 16
57609: DOUBLE
57610: EQUAL
57611: IFTRUE 57615
57613: GO 57751
57615: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57616: LD_ADDR_VAR 0 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 4
57626: PUSH
57627: LD_INT 5
57629: PUSH
57630: LD_INT 7
57632: PUSH
57633: LD_INT 11
57635: PUSH
57636: LD_INT 12
57638: PUSH
57639: LD_INT 15
57641: PUSH
57642: LD_INT 16
57644: PUSH
57645: LD_INT 20
57647: PUSH
57648: LD_INT 21
57650: PUSH
57651: LD_INT 22
57653: PUSH
57654: LD_INT 23
57656: PUSH
57657: LD_INT 25
57659: PUSH
57660: LD_INT 26
57662: PUSH
57663: LD_INT 30
57665: PUSH
57666: LD_INT 31
57668: PUSH
57669: LD_INT 32
57671: PUSH
57672: LD_INT 33
57674: PUSH
57675: LD_INT 34
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 101
57701: PUSH
57702: LD_INT 102
57704: PUSH
57705: LD_INT 103
57707: PUSH
57708: LD_INT 106
57710: PUSH
57711: LD_INT 108
57713: PUSH
57714: LD_INT 112
57716: PUSH
57717: LD_INT 113
57719: PUSH
57720: LD_INT 114
57722: PUSH
57723: LD_INT 116
57725: PUSH
57726: LD_INT 117
57728: PUSH
57729: LD_INT 118
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: ST_TO_ADDR
57749: GO 58380
57751: LD_INT 17
57753: DOUBLE
57754: EQUAL
57755: IFTRUE 57759
57757: GO 57983
57759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57760: LD_ADDR_VAR 0 2
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: LD_INT 5
57779: PUSH
57780: LD_INT 6
57782: PUSH
57783: LD_INT 7
57785: PUSH
57786: LD_INT 8
57788: PUSH
57789: LD_INT 9
57791: PUSH
57792: LD_INT 10
57794: PUSH
57795: LD_INT 11
57797: PUSH
57798: LD_INT 12
57800: PUSH
57801: LD_INT 13
57803: PUSH
57804: LD_INT 14
57806: PUSH
57807: LD_INT 15
57809: PUSH
57810: LD_INT 16
57812: PUSH
57813: LD_INT 17
57815: PUSH
57816: LD_INT 18
57818: PUSH
57819: LD_INT 19
57821: PUSH
57822: LD_INT 20
57824: PUSH
57825: LD_INT 21
57827: PUSH
57828: LD_INT 22
57830: PUSH
57831: LD_INT 23
57833: PUSH
57834: LD_INT 24
57836: PUSH
57837: LD_INT 25
57839: PUSH
57840: LD_INT 26
57842: PUSH
57843: LD_INT 27
57845: PUSH
57846: LD_INT 28
57848: PUSH
57849: LD_INT 29
57851: PUSH
57852: LD_INT 30
57854: PUSH
57855: LD_INT 31
57857: PUSH
57858: LD_INT 32
57860: PUSH
57861: LD_INT 33
57863: PUSH
57864: LD_INT 34
57866: PUSH
57867: LD_INT 36
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 101
57909: PUSH
57910: LD_INT 102
57912: PUSH
57913: LD_INT 103
57915: PUSH
57916: LD_INT 104
57918: PUSH
57919: LD_INT 105
57921: PUSH
57922: LD_INT 106
57924: PUSH
57925: LD_INT 107
57927: PUSH
57928: LD_INT 108
57930: PUSH
57931: LD_INT 109
57933: PUSH
57934: LD_INT 110
57936: PUSH
57937: LD_INT 111
57939: PUSH
57940: LD_INT 112
57942: PUSH
57943: LD_INT 113
57945: PUSH
57946: LD_INT 114
57948: PUSH
57949: LD_INT 116
57951: PUSH
57952: LD_INT 117
57954: PUSH
57955: LD_INT 118
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: ST_TO_ADDR
57981: GO 58380
57983: LD_INT 18
57985: DOUBLE
57986: EQUAL
57987: IFTRUE 57991
57989: GO 58139
57991: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 4
58002: PUSH
58003: LD_INT 5
58005: PUSH
58006: LD_INT 7
58008: PUSH
58009: LD_INT 11
58011: PUSH
58012: LD_INT 12
58014: PUSH
58015: LD_INT 15
58017: PUSH
58018: LD_INT 16
58020: PUSH
58021: LD_INT 20
58023: PUSH
58024: LD_INT 21
58026: PUSH
58027: LD_INT 22
58029: PUSH
58030: LD_INT 23
58032: PUSH
58033: LD_INT 25
58035: PUSH
58036: LD_INT 26
58038: PUSH
58039: LD_INT 30
58041: PUSH
58042: LD_INT 31
58044: PUSH
58045: LD_INT 32
58047: PUSH
58048: LD_INT 33
58050: PUSH
58051: LD_INT 34
58053: PUSH
58054: LD_INT 35
58056: PUSH
58057: LD_INT 36
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 101
58085: PUSH
58086: LD_INT 102
58088: PUSH
58089: LD_INT 103
58091: PUSH
58092: LD_INT 106
58094: PUSH
58095: LD_INT 108
58097: PUSH
58098: LD_INT 112
58100: PUSH
58101: LD_INT 113
58103: PUSH
58104: LD_INT 114
58106: PUSH
58107: LD_INT 115
58109: PUSH
58110: LD_INT 116
58112: PUSH
58113: LD_INT 117
58115: PUSH
58116: LD_INT 118
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: ST_TO_ADDR
58137: GO 58380
58139: LD_INT 19
58141: DOUBLE
58142: EQUAL
58143: IFTRUE 58147
58145: GO 58379
58147: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58148: LD_ADDR_VAR 0 2
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 4
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: LD_INT 6
58170: PUSH
58171: LD_INT 7
58173: PUSH
58174: LD_INT 8
58176: PUSH
58177: LD_INT 9
58179: PUSH
58180: LD_INT 10
58182: PUSH
58183: LD_INT 11
58185: PUSH
58186: LD_INT 12
58188: PUSH
58189: LD_INT 13
58191: PUSH
58192: LD_INT 14
58194: PUSH
58195: LD_INT 15
58197: PUSH
58198: LD_INT 16
58200: PUSH
58201: LD_INT 17
58203: PUSH
58204: LD_INT 18
58206: PUSH
58207: LD_INT 19
58209: PUSH
58210: LD_INT 20
58212: PUSH
58213: LD_INT 21
58215: PUSH
58216: LD_INT 22
58218: PUSH
58219: LD_INT 23
58221: PUSH
58222: LD_INT 24
58224: PUSH
58225: LD_INT 25
58227: PUSH
58228: LD_INT 26
58230: PUSH
58231: LD_INT 27
58233: PUSH
58234: LD_INT 28
58236: PUSH
58237: LD_INT 29
58239: PUSH
58240: LD_INT 30
58242: PUSH
58243: LD_INT 31
58245: PUSH
58246: LD_INT 32
58248: PUSH
58249: LD_INT 33
58251: PUSH
58252: LD_INT 34
58254: PUSH
58255: LD_INT 35
58257: PUSH
58258: LD_INT 36
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 101
58301: PUSH
58302: LD_INT 102
58304: PUSH
58305: LD_INT 103
58307: PUSH
58308: LD_INT 104
58310: PUSH
58311: LD_INT 105
58313: PUSH
58314: LD_INT 106
58316: PUSH
58317: LD_INT 107
58319: PUSH
58320: LD_INT 108
58322: PUSH
58323: LD_INT 109
58325: PUSH
58326: LD_INT 110
58328: PUSH
58329: LD_INT 111
58331: PUSH
58332: LD_INT 112
58334: PUSH
58335: LD_INT 113
58337: PUSH
58338: LD_INT 114
58340: PUSH
58341: LD_INT 115
58343: PUSH
58344: LD_INT 116
58346: PUSH
58347: LD_INT 117
58349: PUSH
58350: LD_INT 118
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: ST_TO_ADDR
58377: GO 58380
58379: POP
// end else
58380: GO 58611
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58382: LD_ADDR_VAR 0 2
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: LD_INT 6
58404: PUSH
58405: LD_INT 7
58407: PUSH
58408: LD_INT 8
58410: PUSH
58411: LD_INT 9
58413: PUSH
58414: LD_INT 10
58416: PUSH
58417: LD_INT 11
58419: PUSH
58420: LD_INT 12
58422: PUSH
58423: LD_INT 13
58425: PUSH
58426: LD_INT 14
58428: PUSH
58429: LD_INT 15
58431: PUSH
58432: LD_INT 16
58434: PUSH
58435: LD_INT 17
58437: PUSH
58438: LD_INT 18
58440: PUSH
58441: LD_INT 19
58443: PUSH
58444: LD_INT 20
58446: PUSH
58447: LD_INT 21
58449: PUSH
58450: LD_INT 22
58452: PUSH
58453: LD_INT 23
58455: PUSH
58456: LD_INT 24
58458: PUSH
58459: LD_INT 25
58461: PUSH
58462: LD_INT 26
58464: PUSH
58465: LD_INT 27
58467: PUSH
58468: LD_INT 28
58470: PUSH
58471: LD_INT 29
58473: PUSH
58474: LD_INT 30
58476: PUSH
58477: LD_INT 31
58479: PUSH
58480: LD_INT 32
58482: PUSH
58483: LD_INT 33
58485: PUSH
58486: LD_INT 34
58488: PUSH
58489: LD_INT 35
58491: PUSH
58492: LD_INT 36
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 101
58535: PUSH
58536: LD_INT 102
58538: PUSH
58539: LD_INT 103
58541: PUSH
58542: LD_INT 104
58544: PUSH
58545: LD_INT 105
58547: PUSH
58548: LD_INT 106
58550: PUSH
58551: LD_INT 107
58553: PUSH
58554: LD_INT 108
58556: PUSH
58557: LD_INT 109
58559: PUSH
58560: LD_INT 110
58562: PUSH
58563: LD_INT 111
58565: PUSH
58566: LD_INT 112
58568: PUSH
58569: LD_INT 113
58571: PUSH
58572: LD_INT 114
58574: PUSH
58575: LD_INT 115
58577: PUSH
58578: LD_INT 116
58580: PUSH
58581: LD_INT 117
58583: PUSH
58584: LD_INT 118
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// if result then
58611: LD_VAR 0 2
58615: IFFALSE 59401
// begin normal :=  ;
58617: LD_ADDR_VAR 0 5
58621: PUSH
58622: LD_STRING 
58624: ST_TO_ADDR
// hardcore :=  ;
58625: LD_ADDR_VAR 0 6
58629: PUSH
58630: LD_STRING 
58632: ST_TO_ADDR
// active :=  ;
58633: LD_ADDR_VAR 0 7
58637: PUSH
58638: LD_STRING 
58640: ST_TO_ADDR
// for i = 1 to normalCounter do
58641: LD_ADDR_VAR 0 8
58645: PUSH
58646: DOUBLE
58647: LD_INT 1
58649: DEC
58650: ST_TO_ADDR
58651: LD_EXP 39
58655: PUSH
58656: FOR_TO
58657: IFFALSE 58758
// begin tmp := 0 ;
58659: LD_ADDR_VAR 0 3
58663: PUSH
58664: LD_STRING 0
58666: ST_TO_ADDR
// if result [ 1 ] then
58667: LD_VAR 0 2
58671: PUSH
58672: LD_INT 1
58674: ARRAY
58675: IFFALSE 58740
// if result [ 1 ] [ 1 ] = i then
58677: LD_VAR 0 2
58681: PUSH
58682: LD_INT 1
58684: ARRAY
58685: PUSH
58686: LD_INT 1
58688: ARRAY
58689: PUSH
58690: LD_VAR 0 8
58694: EQUAL
58695: IFFALSE 58740
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58697: LD_ADDR_VAR 0 2
58701: PUSH
58702: LD_VAR 0 2
58706: PPUSH
58707: LD_INT 1
58709: PPUSH
58710: LD_VAR 0 2
58714: PUSH
58715: LD_INT 1
58717: ARRAY
58718: PPUSH
58719: LD_INT 1
58721: PPUSH
58722: CALL_OW 3
58726: PPUSH
58727: CALL_OW 1
58731: ST_TO_ADDR
// tmp := 1 ;
58732: LD_ADDR_VAR 0 3
58736: PUSH
58737: LD_STRING 1
58739: ST_TO_ADDR
// end ; normal := normal & tmp ;
58740: LD_ADDR_VAR 0 5
58744: PUSH
58745: LD_VAR 0 5
58749: PUSH
58750: LD_VAR 0 3
58754: STR
58755: ST_TO_ADDR
// end ;
58756: GO 58656
58758: POP
58759: POP
// for i = 1 to hardcoreCounter do
58760: LD_ADDR_VAR 0 8
58764: PUSH
58765: DOUBLE
58766: LD_INT 1
58768: DEC
58769: ST_TO_ADDR
58770: LD_EXP 40
58774: PUSH
58775: FOR_TO
58776: IFFALSE 58881
// begin tmp := 0 ;
58778: LD_ADDR_VAR 0 3
58782: PUSH
58783: LD_STRING 0
58785: ST_TO_ADDR
// if result [ 2 ] then
58786: LD_VAR 0 2
58790: PUSH
58791: LD_INT 2
58793: ARRAY
58794: IFFALSE 58863
// if result [ 2 ] [ 1 ] = 100 + i then
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 2
58803: ARRAY
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PUSH
58809: LD_INT 100
58811: PUSH
58812: LD_VAR 0 8
58816: PLUS
58817: EQUAL
58818: IFFALSE 58863
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58820: LD_ADDR_VAR 0 2
58824: PUSH
58825: LD_VAR 0 2
58829: PPUSH
58830: LD_INT 2
58832: PPUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_INT 2
58840: ARRAY
58841: PPUSH
58842: LD_INT 1
58844: PPUSH
58845: CALL_OW 3
58849: PPUSH
58850: CALL_OW 1
58854: ST_TO_ADDR
// tmp := 1 ;
58855: LD_ADDR_VAR 0 3
58859: PUSH
58860: LD_STRING 1
58862: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58863: LD_ADDR_VAR 0 6
58867: PUSH
58868: LD_VAR 0 6
58872: PUSH
58873: LD_VAR 0 3
58877: STR
58878: ST_TO_ADDR
// end ;
58879: GO 58775
58881: POP
58882: POP
// if isGameLoad then
58883: LD_VAR 0 1
58887: IFFALSE 59362
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58889: LD_ADDR_VAR 0 4
58893: PUSH
58894: LD_EXP 43
58898: PUSH
58899: LD_EXP 42
58903: PUSH
58904: LD_EXP 44
58908: PUSH
58909: LD_EXP 41
58913: PUSH
58914: LD_EXP 45
58918: PUSH
58919: LD_EXP 46
58923: PUSH
58924: LD_EXP 47
58928: PUSH
58929: LD_EXP 48
58933: PUSH
58934: LD_EXP 49
58938: PUSH
58939: LD_EXP 50
58943: PUSH
58944: LD_EXP 51
58948: PUSH
58949: LD_EXP 52
58953: PUSH
58954: LD_EXP 53
58958: PUSH
58959: LD_EXP 54
58963: PUSH
58964: LD_EXP 62
58968: PUSH
58969: LD_EXP 63
58973: PUSH
58974: LD_EXP 64
58978: PUSH
58979: LD_EXP 65
58983: PUSH
58984: LD_EXP 67
58988: PUSH
58989: LD_EXP 68
58993: PUSH
58994: LD_EXP 69
58998: PUSH
58999: LD_EXP 72
59003: PUSH
59004: LD_EXP 74
59008: PUSH
59009: LD_EXP 75
59013: PUSH
59014: LD_EXP 76
59018: PUSH
59019: LD_EXP 78
59023: PUSH
59024: LD_EXP 79
59028: PUSH
59029: LD_EXP 82
59033: PUSH
59034: LD_EXP 83
59038: PUSH
59039: LD_EXP 84
59043: PUSH
59044: LD_EXP 85
59048: PUSH
59049: LD_EXP 86
59053: PUSH
59054: LD_EXP 87
59058: PUSH
59059: LD_EXP 88
59063: PUSH
59064: LD_EXP 89
59068: PUSH
59069: LD_EXP 90
59073: PUSH
59074: LD_EXP 55
59078: PUSH
59079: LD_EXP 56
59083: PUSH
59084: LD_EXP 59
59088: PUSH
59089: LD_EXP 60
59093: PUSH
59094: LD_EXP 61
59098: PUSH
59099: LD_EXP 57
59103: PUSH
59104: LD_EXP 58
59108: PUSH
59109: LD_EXP 66
59113: PUSH
59114: LD_EXP 70
59118: PUSH
59119: LD_EXP 71
59123: PUSH
59124: LD_EXP 73
59128: PUSH
59129: LD_EXP 77
59133: PUSH
59134: LD_EXP 80
59138: PUSH
59139: LD_EXP 81
59143: PUSH
59144: LD_EXP 91
59148: PUSH
59149: LD_EXP 92
59153: PUSH
59154: LD_EXP 93
59158: PUSH
59159: LD_EXP 94
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// tmp :=  ;
59220: LD_ADDR_VAR 0 3
59224: PUSH
59225: LD_STRING 
59227: ST_TO_ADDR
// for i = 1 to normalCounter do
59228: LD_ADDR_VAR 0 8
59232: PUSH
59233: DOUBLE
59234: LD_INT 1
59236: DEC
59237: ST_TO_ADDR
59238: LD_EXP 39
59242: PUSH
59243: FOR_TO
59244: IFFALSE 59280
// begin if flags [ i ] then
59246: LD_VAR 0 4
59250: PUSH
59251: LD_VAR 0 8
59255: ARRAY
59256: IFFALSE 59278
// tmp := tmp & i & ; ;
59258: LD_ADDR_VAR 0 3
59262: PUSH
59263: LD_VAR 0 3
59267: PUSH
59268: LD_VAR 0 8
59272: STR
59273: PUSH
59274: LD_STRING ;
59276: STR
59277: ST_TO_ADDR
// end ;
59278: GO 59243
59280: POP
59281: POP
// for i = 1 to hardcoreCounter do
59282: LD_ADDR_VAR 0 8
59286: PUSH
59287: DOUBLE
59288: LD_INT 1
59290: DEC
59291: ST_TO_ADDR
59292: LD_EXP 40
59296: PUSH
59297: FOR_TO
59298: IFFALSE 59344
// begin if flags [ normalCounter + i ] then
59300: LD_VAR 0 4
59304: PUSH
59305: LD_EXP 39
59309: PUSH
59310: LD_VAR 0 8
59314: PLUS
59315: ARRAY
59316: IFFALSE 59342
// tmp := tmp & ( 100 + i ) & ; ;
59318: LD_ADDR_VAR 0 3
59322: PUSH
59323: LD_VAR 0 3
59327: PUSH
59328: LD_INT 100
59330: PUSH
59331: LD_VAR 0 8
59335: PLUS
59336: STR
59337: PUSH
59338: LD_STRING ;
59340: STR
59341: ST_TO_ADDR
// end ;
59342: GO 59297
59344: POP
59345: POP
// if tmp then
59346: LD_VAR 0 3
59350: IFFALSE 59362
// active := tmp ;
59352: LD_ADDR_VAR 0 7
59356: PUSH
59357: LD_VAR 0 3
59361: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59362: LD_STRING getStreamItemsFromMission("
59364: PUSH
59365: LD_VAR 0 5
59369: STR
59370: PUSH
59371: LD_STRING ","
59373: STR
59374: PUSH
59375: LD_VAR 0 6
59379: STR
59380: PUSH
59381: LD_STRING ","
59383: STR
59384: PUSH
59385: LD_VAR 0 7
59389: STR
59390: PUSH
59391: LD_STRING ")
59393: STR
59394: PPUSH
59395: CALL_OW 559
// end else
59399: GO 59408
// ToLua ( getStreamItemsFromMission("","","") ) ;
59401: LD_STRING getStreamItemsFromMission("","","")
59403: PPUSH
59404: CALL_OW 559
// end ;
59408: LD_VAR 0 2
59412: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59413: LD_EXP 38
59417: PUSH
59418: LD_EXP 43
59422: AND
59423: IFFALSE 59547
59425: GO 59427
59427: DISABLE
59428: LD_INT 0
59430: PPUSH
59431: PPUSH
// begin enable ;
59432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59433: LD_ADDR_VAR 0 2
59437: PUSH
59438: LD_INT 22
59440: PUSH
59441: LD_OWVAR 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 34
59455: PUSH
59456: LD_INT 7
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 34
59465: PUSH
59466: LD_INT 45
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 34
59475: PUSH
59476: LD_INT 28
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 34
59485: PUSH
59486: LD_INT 47
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PPUSH
59504: CALL_OW 69
59508: ST_TO_ADDR
// if not tmp then
59509: LD_VAR 0 2
59513: NOT
59514: IFFALSE 59518
// exit ;
59516: GO 59547
// for i in tmp do
59518: LD_ADDR_VAR 0 1
59522: PUSH
59523: LD_VAR 0 2
59527: PUSH
59528: FOR_IN
59529: IFFALSE 59545
// begin SetLives ( i , 0 ) ;
59531: LD_VAR 0 1
59535: PPUSH
59536: LD_INT 0
59538: PPUSH
59539: CALL_OW 234
// end ;
59543: GO 59528
59545: POP
59546: POP
// end ;
59547: PPOPN 2
59549: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59550: LD_EXP 38
59554: PUSH
59555: LD_EXP 44
59559: AND
59560: IFFALSE 59644
59562: GO 59564
59564: DISABLE
59565: LD_INT 0
59567: PPUSH
59568: PPUSH
// begin enable ;
59569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59570: LD_ADDR_VAR 0 2
59574: PUSH
59575: LD_INT 22
59577: PUSH
59578: LD_OWVAR 2
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 32
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PPUSH
59601: CALL_OW 69
59605: ST_TO_ADDR
// if not tmp then
59606: LD_VAR 0 2
59610: NOT
59611: IFFALSE 59615
// exit ;
59613: GO 59644
// for i in tmp do
59615: LD_ADDR_VAR 0 1
59619: PUSH
59620: LD_VAR 0 2
59624: PUSH
59625: FOR_IN
59626: IFFALSE 59642
// begin SetLives ( i , 0 ) ;
59628: LD_VAR 0 1
59632: PPUSH
59633: LD_INT 0
59635: PPUSH
59636: CALL_OW 234
// end ;
59640: GO 59625
59642: POP
59643: POP
// end ;
59644: PPOPN 2
59646: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59647: LD_EXP 38
59651: PUSH
59652: LD_EXP 41
59656: AND
59657: IFFALSE 59750
59659: GO 59661
59661: DISABLE
59662: LD_INT 0
59664: PPUSH
// begin enable ;
59665: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59666: LD_ADDR_VAR 0 1
59670: PUSH
59671: LD_INT 22
59673: PUSH
59674: LD_OWVAR 2
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 25
59688: PUSH
59689: LD_INT 5
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 25
59698: PUSH
59699: LD_INT 9
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 25
59708: PUSH
59709: LD_INT 8
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PPUSH
59726: CALL_OW 69
59730: PUSH
59731: FOR_IN
59732: IFFALSE 59748
// begin SetClass ( i , 1 ) ;
59734: LD_VAR 0 1
59738: PPUSH
59739: LD_INT 1
59741: PPUSH
59742: CALL_OW 336
// end ;
59746: GO 59731
59748: POP
59749: POP
// end ;
59750: PPOPN 1
59752: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59753: LD_EXP 38
59757: PUSH
59758: LD_EXP 42
59762: AND
59763: PUSH
59764: LD_OWVAR 65
59768: PUSH
59769: LD_INT 7
59771: LESS
59772: AND
59773: IFFALSE 59787
59775: GO 59777
59777: DISABLE
// begin enable ;
59778: ENABLE
// game_speed := 7 ;
59779: LD_ADDR_OWVAR 65
59783: PUSH
59784: LD_INT 7
59786: ST_TO_ADDR
// end ;
59787: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59788: LD_EXP 38
59792: PUSH
59793: LD_EXP 45
59797: AND
59798: IFFALSE 60000
59800: GO 59802
59802: DISABLE
59803: LD_INT 0
59805: PPUSH
59806: PPUSH
59807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59808: LD_ADDR_VAR 0 3
59812: PUSH
59813: LD_INT 81
59815: PUSH
59816: LD_OWVAR 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 21
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PPUSH
59839: CALL_OW 69
59843: ST_TO_ADDR
// if not tmp then
59844: LD_VAR 0 3
59848: NOT
59849: IFFALSE 59853
// exit ;
59851: GO 60000
// if tmp > 5 then
59853: LD_VAR 0 3
59857: PUSH
59858: LD_INT 5
59860: GREATER
59861: IFFALSE 59873
// k := 5 else
59863: LD_ADDR_VAR 0 2
59867: PUSH
59868: LD_INT 5
59870: ST_TO_ADDR
59871: GO 59883
// k := tmp ;
59873: LD_ADDR_VAR 0 2
59877: PUSH
59878: LD_VAR 0 3
59882: ST_TO_ADDR
// for i := 1 to k do
59883: LD_ADDR_VAR 0 1
59887: PUSH
59888: DOUBLE
59889: LD_INT 1
59891: DEC
59892: ST_TO_ADDR
59893: LD_VAR 0 2
59897: PUSH
59898: FOR_TO
59899: IFFALSE 59998
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59901: LD_VAR 0 3
59905: PUSH
59906: LD_VAR 0 1
59910: ARRAY
59911: PPUSH
59912: LD_VAR 0 1
59916: PUSH
59917: LD_INT 4
59919: MOD
59920: PUSH
59921: LD_INT 1
59923: PLUS
59924: PPUSH
59925: CALL_OW 259
59929: PUSH
59930: LD_INT 10
59932: LESS
59933: IFFALSE 59996
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59935: LD_VAR 0 3
59939: PUSH
59940: LD_VAR 0 1
59944: ARRAY
59945: PPUSH
59946: LD_VAR 0 1
59950: PUSH
59951: LD_INT 4
59953: MOD
59954: PUSH
59955: LD_INT 1
59957: PLUS
59958: PPUSH
59959: LD_VAR 0 3
59963: PUSH
59964: LD_VAR 0 1
59968: ARRAY
59969: PPUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 4
59977: MOD
59978: PUSH
59979: LD_INT 1
59981: PLUS
59982: PPUSH
59983: CALL_OW 259
59987: PUSH
59988: LD_INT 1
59990: PLUS
59991: PPUSH
59992: CALL_OW 237
59996: GO 59898
59998: POP
59999: POP
// end ;
60000: PPOPN 3
60002: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60003: LD_EXP 38
60007: PUSH
60008: LD_EXP 46
60012: AND
60013: IFFALSE 60033
60015: GO 60017
60017: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60018: LD_INT 4
60020: PPUSH
60021: LD_OWVAR 2
60025: PPUSH
60026: LD_INT 0
60028: PPUSH
60029: CALL_OW 324
60033: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60034: LD_EXP 38
60038: PUSH
60039: LD_EXP 75
60043: AND
60044: IFFALSE 60064
60046: GO 60048
60048: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60049: LD_INT 19
60051: PPUSH
60052: LD_OWVAR 2
60056: PPUSH
60057: LD_INT 0
60059: PPUSH
60060: CALL_OW 324
60064: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60065: LD_EXP 38
60069: PUSH
60070: LD_EXP 47
60074: AND
60075: IFFALSE 60177
60077: GO 60079
60079: DISABLE
60080: LD_INT 0
60082: PPUSH
60083: PPUSH
// begin enable ;
60084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60085: LD_ADDR_VAR 0 2
60089: PUSH
60090: LD_INT 22
60092: PUSH
60093: LD_OWVAR 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 34
60107: PUSH
60108: LD_INT 11
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 34
60117: PUSH
60118: LD_INT 30
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PPUSH
60134: CALL_OW 69
60138: ST_TO_ADDR
// if not tmp then
60139: LD_VAR 0 2
60143: NOT
60144: IFFALSE 60148
// exit ;
60146: GO 60177
// for i in tmp do
60148: LD_ADDR_VAR 0 1
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: FOR_IN
60159: IFFALSE 60175
// begin SetLives ( i , 0 ) ;
60161: LD_VAR 0 1
60165: PPUSH
60166: LD_INT 0
60168: PPUSH
60169: CALL_OW 234
// end ;
60173: GO 60158
60175: POP
60176: POP
// end ;
60177: PPOPN 2
60179: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60180: LD_EXP 38
60184: PUSH
60185: LD_EXP 48
60189: AND
60190: IFFALSE 60210
60192: GO 60194
60194: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60195: LD_INT 32
60197: PPUSH
60198: LD_OWVAR 2
60202: PPUSH
60203: LD_INT 0
60205: PPUSH
60206: CALL_OW 324
60210: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60211: LD_EXP 38
60215: PUSH
60216: LD_EXP 49
60220: AND
60221: IFFALSE 60402
60223: GO 60225
60225: DISABLE
60226: LD_INT 0
60228: PPUSH
60229: PPUSH
60230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60231: LD_ADDR_VAR 0 2
60235: PUSH
60236: LD_INT 22
60238: PUSH
60239: LD_OWVAR 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 33
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PPUSH
60262: CALL_OW 69
60266: ST_TO_ADDR
// if not tmp then
60267: LD_VAR 0 2
60271: NOT
60272: IFFALSE 60276
// exit ;
60274: GO 60402
// side := 0 ;
60276: LD_ADDR_VAR 0 3
60280: PUSH
60281: LD_INT 0
60283: ST_TO_ADDR
// for i := 1 to 8 do
60284: LD_ADDR_VAR 0 1
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_INT 8
60296: PUSH
60297: FOR_TO
60298: IFFALSE 60346
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60300: LD_OWVAR 2
60304: PUSH
60305: LD_VAR 0 1
60309: NONEQUAL
60310: PUSH
60311: LD_OWVAR 2
60315: PPUSH
60316: LD_VAR 0 1
60320: PPUSH
60321: CALL_OW 81
60325: PUSH
60326: LD_INT 2
60328: EQUAL
60329: AND
60330: IFFALSE 60344
// begin side := i ;
60332: LD_ADDR_VAR 0 3
60336: PUSH
60337: LD_VAR 0 1
60341: ST_TO_ADDR
// break ;
60342: GO 60346
// end ;
60344: GO 60297
60346: POP
60347: POP
// if not side then
60348: LD_VAR 0 3
60352: NOT
60353: IFFALSE 60357
// exit ;
60355: GO 60402
// for i := 1 to tmp do
60357: LD_ADDR_VAR 0 1
60361: PUSH
60362: DOUBLE
60363: LD_INT 1
60365: DEC
60366: ST_TO_ADDR
60367: LD_VAR 0 2
60371: PUSH
60372: FOR_TO
60373: IFFALSE 60400
// if Prob ( 60 ) then
60375: LD_INT 60
60377: PPUSH
60378: CALL_OW 13
60382: IFFALSE 60398
// SetSide ( i , side ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: LD_VAR 0 3
60393: PPUSH
60394: CALL_OW 235
60398: GO 60372
60400: POP
60401: POP
// end ;
60402: PPOPN 3
60404: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60405: LD_EXP 38
60409: PUSH
60410: LD_EXP 51
60414: AND
60415: IFFALSE 60534
60417: GO 60419
60419: DISABLE
60420: LD_INT 0
60422: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60423: LD_ADDR_VAR 0 1
60427: PUSH
60428: LD_INT 22
60430: PUSH
60431: LD_OWVAR 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 21
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 23
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: PPUSH
60472: CALL_OW 69
60476: PUSH
60477: FOR_IN
60478: IFFALSE 60532
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60480: LD_VAR 0 1
60484: PPUSH
60485: CALL_OW 257
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 4
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: IN
60508: IFFALSE 60530
// SetClass ( un , rand ( 1 , 4 ) ) ;
60510: LD_VAR 0 1
60514: PPUSH
60515: LD_INT 1
60517: PPUSH
60518: LD_INT 4
60520: PPUSH
60521: CALL_OW 12
60525: PPUSH
60526: CALL_OW 336
60530: GO 60477
60532: POP
60533: POP
// end ;
60534: PPOPN 1
60536: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60537: LD_EXP 38
60541: PUSH
60542: LD_EXP 50
60546: AND
60547: IFFALSE 60626
60549: GO 60551
60551: DISABLE
60552: LD_INT 0
60554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60555: LD_ADDR_VAR 0 1
60559: PUSH
60560: LD_INT 22
60562: PUSH
60563: LD_OWVAR 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 21
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PPUSH
60586: CALL_OW 69
60590: ST_TO_ADDR
// if not tmp then
60591: LD_VAR 0 1
60595: NOT
60596: IFFALSE 60600
// exit ;
60598: GO 60626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60600: LD_VAR 0 1
60604: PUSH
60605: LD_INT 1
60607: PPUSH
60608: LD_VAR 0 1
60612: PPUSH
60613: CALL_OW 12
60617: ARRAY
60618: PPUSH
60619: LD_INT 100
60621: PPUSH
60622: CALL_OW 234
// end ;
60626: PPOPN 1
60628: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60629: LD_EXP 38
60633: PUSH
60634: LD_EXP 52
60638: AND
60639: IFFALSE 60737
60641: GO 60643
60643: DISABLE
60644: LD_INT 0
60646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60647: LD_ADDR_VAR 0 1
60651: PUSH
60652: LD_INT 22
60654: PUSH
60655: LD_OWVAR 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 21
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PPUSH
60678: CALL_OW 69
60682: ST_TO_ADDR
// if not tmp then
60683: LD_VAR 0 1
60687: NOT
60688: IFFALSE 60692
// exit ;
60690: GO 60737
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 1
60699: PPUSH
60700: LD_VAR 0 1
60704: PPUSH
60705: CALL_OW 12
60709: ARRAY
60710: PPUSH
60711: LD_INT 1
60713: PPUSH
60714: LD_INT 4
60716: PPUSH
60717: CALL_OW 12
60721: PPUSH
60722: LD_INT 3000
60724: PPUSH
60725: LD_INT 9000
60727: PPUSH
60728: CALL_OW 12
60732: PPUSH
60733: CALL_OW 492
// end ;
60737: PPOPN 1
60739: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60740: LD_EXP 38
60744: PUSH
60745: LD_EXP 53
60749: AND
60750: IFFALSE 60770
60752: GO 60754
60754: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60755: LD_INT 1
60757: PPUSH
60758: LD_OWVAR 2
60762: PPUSH
60763: LD_INT 0
60765: PPUSH
60766: CALL_OW 324
60770: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60771: LD_EXP 38
60775: PUSH
60776: LD_EXP 54
60780: AND
60781: IFFALSE 60864
60783: GO 60785
60785: DISABLE
60786: LD_INT 0
60788: PPUSH
60789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60790: LD_ADDR_VAR 0 2
60794: PUSH
60795: LD_INT 22
60797: PUSH
60798: LD_OWVAR 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 21
60809: PUSH
60810: LD_INT 3
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PPUSH
60821: CALL_OW 69
60825: ST_TO_ADDR
// if not tmp then
60826: LD_VAR 0 2
60830: NOT
60831: IFFALSE 60835
// exit ;
60833: GO 60864
// for i in tmp do
60835: LD_ADDR_VAR 0 1
60839: PUSH
60840: LD_VAR 0 2
60844: PUSH
60845: FOR_IN
60846: IFFALSE 60862
// SetBLevel ( i , 10 ) ;
60848: LD_VAR 0 1
60852: PPUSH
60853: LD_INT 10
60855: PPUSH
60856: CALL_OW 241
60860: GO 60845
60862: POP
60863: POP
// end ;
60864: PPOPN 2
60866: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60867: LD_EXP 38
60871: PUSH
60872: LD_EXP 55
60876: AND
60877: IFFALSE 60988
60879: GO 60881
60881: DISABLE
60882: LD_INT 0
60884: PPUSH
60885: PPUSH
60886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60887: LD_ADDR_VAR 0 3
60891: PUSH
60892: LD_INT 22
60894: PUSH
60895: LD_OWVAR 2
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 25
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PPUSH
60918: CALL_OW 69
60922: ST_TO_ADDR
// if not tmp then
60923: LD_VAR 0 3
60927: NOT
60928: IFFALSE 60932
// exit ;
60930: GO 60988
// un := tmp [ rand ( 1 , tmp ) ] ;
60932: LD_ADDR_VAR 0 2
60936: PUSH
60937: LD_VAR 0 3
60941: PUSH
60942: LD_INT 1
60944: PPUSH
60945: LD_VAR 0 3
60949: PPUSH
60950: CALL_OW 12
60954: ARRAY
60955: ST_TO_ADDR
// if Crawls ( un ) then
60956: LD_VAR 0 2
60960: PPUSH
60961: CALL_OW 318
60965: IFFALSE 60976
// ComWalk ( un ) ;
60967: LD_VAR 0 2
60971: PPUSH
60972: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60976: LD_VAR 0 2
60980: PPUSH
60981: LD_INT 5
60983: PPUSH
60984: CALL_OW 336
// end ;
60988: PPOPN 3
60990: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60991: LD_EXP 38
60995: PUSH
60996: LD_EXP 56
61000: AND
61001: PUSH
61002: LD_OWVAR 67
61006: PUSH
61007: LD_INT 4
61009: LESS
61010: AND
61011: IFFALSE 61030
61013: GO 61015
61015: DISABLE
// begin Difficulty := Difficulty + 1 ;
61016: LD_ADDR_OWVAR 67
61020: PUSH
61021: LD_OWVAR 67
61025: PUSH
61026: LD_INT 1
61028: PLUS
61029: ST_TO_ADDR
// end ;
61030: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61031: LD_EXP 38
61035: PUSH
61036: LD_EXP 57
61040: AND
61041: IFFALSE 61144
61043: GO 61045
61045: DISABLE
61046: LD_INT 0
61048: PPUSH
// begin for i := 1 to 5 do
61049: LD_ADDR_VAR 0 1
61053: PUSH
61054: DOUBLE
61055: LD_INT 1
61057: DEC
61058: ST_TO_ADDR
61059: LD_INT 5
61061: PUSH
61062: FOR_TO
61063: IFFALSE 61142
// begin uc_nation := nation_nature ;
61065: LD_ADDR_OWVAR 21
61069: PUSH
61070: LD_INT 0
61072: ST_TO_ADDR
// uc_side := 0 ;
61073: LD_ADDR_OWVAR 20
61077: PUSH
61078: LD_INT 0
61080: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61081: LD_ADDR_OWVAR 29
61085: PUSH
61086: LD_INT 12
61088: PUSH
61089: LD_INT 12
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// hc_agressivity := 20 ;
61096: LD_ADDR_OWVAR 35
61100: PUSH
61101: LD_INT 20
61103: ST_TO_ADDR
// hc_class := class_tiger ;
61104: LD_ADDR_OWVAR 28
61108: PUSH
61109: LD_INT 14
61111: ST_TO_ADDR
// hc_gallery :=  ;
61112: LD_ADDR_OWVAR 33
61116: PUSH
61117: LD_STRING 
61119: ST_TO_ADDR
// hc_name :=  ;
61120: LD_ADDR_OWVAR 26
61124: PUSH
61125: LD_STRING 
61127: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61128: CALL_OW 44
61132: PPUSH
61133: LD_INT 0
61135: PPUSH
61136: CALL_OW 51
// end ;
61140: GO 61062
61142: POP
61143: POP
// end ;
61144: PPOPN 1
61146: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61147: LD_EXP 38
61151: PUSH
61152: LD_EXP 58
61156: AND
61157: IFFALSE 61166
61159: GO 61161
61161: DISABLE
// StreamSibBomb ;
61162: CALL 61167 0 0
61166: END
// export function StreamSibBomb ; var i , x , y ; begin
61167: LD_INT 0
61169: PPUSH
61170: PPUSH
61171: PPUSH
61172: PPUSH
// result := false ;
61173: LD_ADDR_VAR 0 1
61177: PUSH
61178: LD_INT 0
61180: ST_TO_ADDR
// for i := 1 to 16 do
61181: LD_ADDR_VAR 0 2
61185: PUSH
61186: DOUBLE
61187: LD_INT 1
61189: DEC
61190: ST_TO_ADDR
61191: LD_INT 16
61193: PUSH
61194: FOR_TO
61195: IFFALSE 61394
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61197: LD_ADDR_VAR 0 3
61201: PUSH
61202: LD_INT 10
61204: PUSH
61205: LD_INT 20
61207: PUSH
61208: LD_INT 30
61210: PUSH
61211: LD_INT 40
61213: PUSH
61214: LD_INT 50
61216: PUSH
61217: LD_INT 60
61219: PUSH
61220: LD_INT 70
61222: PUSH
61223: LD_INT 80
61225: PUSH
61226: LD_INT 90
61228: PUSH
61229: LD_INT 100
61231: PUSH
61232: LD_INT 110
61234: PUSH
61235: LD_INT 120
61237: PUSH
61238: LD_INT 130
61240: PUSH
61241: LD_INT 140
61243: PUSH
61244: LD_INT 150
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PPUSH
61267: LD_INT 15
61269: PPUSH
61270: CALL_OW 12
61274: ARRAY
61275: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61276: LD_ADDR_VAR 0 4
61280: PUSH
61281: LD_INT 10
61283: PUSH
61284: LD_INT 20
61286: PUSH
61287: LD_INT 30
61289: PUSH
61290: LD_INT 40
61292: PUSH
61293: LD_INT 50
61295: PUSH
61296: LD_INT 60
61298: PUSH
61299: LD_INT 70
61301: PUSH
61302: LD_INT 80
61304: PUSH
61305: LD_INT 90
61307: PUSH
61308: LD_INT 100
61310: PUSH
61311: LD_INT 110
61313: PUSH
61314: LD_INT 120
61316: PUSH
61317: LD_INT 130
61319: PUSH
61320: LD_INT 140
61322: PUSH
61323: LD_INT 150
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PPUSH
61346: LD_INT 15
61348: PPUSH
61349: CALL_OW 12
61353: ARRAY
61354: ST_TO_ADDR
// if ValidHex ( x , y ) then
61355: LD_VAR 0 3
61359: PPUSH
61360: LD_VAR 0 4
61364: PPUSH
61365: CALL_OW 488
61369: IFFALSE 61392
// begin result := [ x , y ] ;
61371: LD_ADDR_VAR 0 1
61375: PUSH
61376: LD_VAR 0 3
61380: PUSH
61381: LD_VAR 0 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: ST_TO_ADDR
// break ;
61390: GO 61394
// end ; end ;
61392: GO 61194
61394: POP
61395: POP
// if result then
61396: LD_VAR 0 1
61400: IFFALSE 61460
// begin ToLua ( playSibBomb() ) ;
61402: LD_STRING playSibBomb()
61404: PPUSH
61405: CALL_OW 559
// wait ( 0 0$14 ) ;
61409: LD_INT 490
61411: PPUSH
61412: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61416: LD_VAR 0 1
61420: PUSH
61421: LD_INT 1
61423: ARRAY
61424: PPUSH
61425: LD_VAR 0 1
61429: PUSH
61430: LD_INT 2
61432: ARRAY
61433: PPUSH
61434: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61438: LD_VAR 0 1
61442: PUSH
61443: LD_INT 1
61445: ARRAY
61446: PPUSH
61447: LD_VAR 0 1
61451: PUSH
61452: LD_INT 2
61454: ARRAY
61455: PPUSH
61456: CALL_OW 429
// end ; end ;
61460: LD_VAR 0 1
61464: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61465: LD_EXP 38
61469: PUSH
61470: LD_EXP 60
61474: AND
61475: IFFALSE 61487
61477: GO 61479
61479: DISABLE
// YouLost (  ) ;
61480: LD_STRING 
61482: PPUSH
61483: CALL_OW 104
61487: END
// every 0 0$1 trigger StreamModeActive and sFog do
61488: LD_EXP 38
61492: PUSH
61493: LD_EXP 59
61497: AND
61498: IFFALSE 61512
61500: GO 61502
61502: DISABLE
// FogOff ( your_side ) ;
61503: LD_OWVAR 2
61507: PPUSH
61508: CALL_OW 344
61512: END
// every 0 0$1 trigger StreamModeActive and sSun do
61513: LD_EXP 38
61517: PUSH
61518: LD_EXP 61
61522: AND
61523: IFFALSE 61551
61525: GO 61527
61527: DISABLE
// begin solar_recharge_percent := 0 ;
61528: LD_ADDR_OWVAR 79
61532: PUSH
61533: LD_INT 0
61535: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61536: LD_INT 10500
61538: PPUSH
61539: CALL_OW 67
// solar_recharge_percent := 100 ;
61543: LD_ADDR_OWVAR 79
61547: PUSH
61548: LD_INT 100
61550: ST_TO_ADDR
// end ;
61551: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61552: LD_EXP 38
61556: PUSH
61557: LD_EXP 62
61561: AND
61562: IFFALSE 61801
61564: GO 61566
61566: DISABLE
61567: LD_INT 0
61569: PPUSH
61570: PPUSH
61571: PPUSH
// begin tmp := [ ] ;
61572: LD_ADDR_VAR 0 3
61576: PUSH
61577: EMPTY
61578: ST_TO_ADDR
// for i := 1 to 6 do
61579: LD_ADDR_VAR 0 1
61583: PUSH
61584: DOUBLE
61585: LD_INT 1
61587: DEC
61588: ST_TO_ADDR
61589: LD_INT 6
61591: PUSH
61592: FOR_TO
61593: IFFALSE 61698
// begin uc_nation := nation_nature ;
61595: LD_ADDR_OWVAR 21
61599: PUSH
61600: LD_INT 0
61602: ST_TO_ADDR
// uc_side := 0 ;
61603: LD_ADDR_OWVAR 20
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61611: LD_ADDR_OWVAR 29
61615: PUSH
61616: LD_INT 12
61618: PUSH
61619: LD_INT 12
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// hc_agressivity := 20 ;
61626: LD_ADDR_OWVAR 35
61630: PUSH
61631: LD_INT 20
61633: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61634: LD_ADDR_OWVAR 28
61638: PUSH
61639: LD_INT 17
61641: ST_TO_ADDR
// hc_gallery :=  ;
61642: LD_ADDR_OWVAR 33
61646: PUSH
61647: LD_STRING 
61649: ST_TO_ADDR
// hc_name :=  ;
61650: LD_ADDR_OWVAR 26
61654: PUSH
61655: LD_STRING 
61657: ST_TO_ADDR
// un := CreateHuman ;
61658: LD_ADDR_VAR 0 2
61662: PUSH
61663: CALL_OW 44
61667: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61668: LD_VAR 0 2
61672: PPUSH
61673: LD_INT 1
61675: PPUSH
61676: CALL_OW 51
// tmp := tmp ^ un ;
61680: LD_ADDR_VAR 0 3
61684: PUSH
61685: LD_VAR 0 3
61689: PUSH
61690: LD_VAR 0 2
61694: ADD
61695: ST_TO_ADDR
// end ;
61696: GO 61592
61698: POP
61699: POP
// repeat wait ( 0 0$1 ) ;
61700: LD_INT 35
61702: PPUSH
61703: CALL_OW 67
// for un in tmp do
61707: LD_ADDR_VAR 0 2
61711: PUSH
61712: LD_VAR 0 3
61716: PUSH
61717: FOR_IN
61718: IFFALSE 61792
// begin if IsDead ( un ) then
61720: LD_VAR 0 2
61724: PPUSH
61725: CALL_OW 301
61729: IFFALSE 61749
// begin tmp := tmp diff un ;
61731: LD_ADDR_VAR 0 3
61735: PUSH
61736: LD_VAR 0 3
61740: PUSH
61741: LD_VAR 0 2
61745: DIFF
61746: ST_TO_ADDR
// continue ;
61747: GO 61717
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61749: LD_VAR 0 2
61753: PPUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 22
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PPUSH
61771: CALL_OW 69
61775: PPUSH
61776: LD_VAR 0 2
61780: PPUSH
61781: CALL_OW 74
61785: PPUSH
61786: CALL_OW 115
// end ;
61790: GO 61717
61792: POP
61793: POP
// until not tmp ;
61794: LD_VAR 0 3
61798: NOT
61799: IFFALSE 61700
// end ;
61801: PPOPN 3
61803: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61804: LD_EXP 38
61808: PUSH
61809: LD_EXP 63
61813: AND
61814: IFFALSE 61868
61816: GO 61818
61818: DISABLE
// begin ToLua ( displayTroll(); ) ;
61819: LD_STRING displayTroll();
61821: PPUSH
61822: CALL_OW 559
// wait ( 3 3$00 ) ;
61826: LD_INT 6300
61828: PPUSH
61829: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61833: LD_STRING hideTroll();
61835: PPUSH
61836: CALL_OW 559
// wait ( 1 1$00 ) ;
61840: LD_INT 2100
61842: PPUSH
61843: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61847: LD_STRING displayTroll();
61849: PPUSH
61850: CALL_OW 559
// wait ( 1 1$00 ) ;
61854: LD_INT 2100
61856: PPUSH
61857: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61861: LD_STRING hideTroll();
61863: PPUSH
61864: CALL_OW 559
// end ;
61868: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61869: LD_EXP 38
61873: PUSH
61874: LD_EXP 64
61878: AND
61879: IFFALSE 61942
61881: GO 61883
61883: DISABLE
61884: LD_INT 0
61886: PPUSH
// begin p := 0 ;
61887: LD_ADDR_VAR 0 1
61891: PUSH
61892: LD_INT 0
61894: ST_TO_ADDR
// repeat game_speed := 1 ;
61895: LD_ADDR_OWVAR 65
61899: PUSH
61900: LD_INT 1
61902: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61903: LD_INT 35
61905: PPUSH
61906: CALL_OW 67
// p := p + 1 ;
61910: LD_ADDR_VAR 0 1
61914: PUSH
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 1
61922: PLUS
61923: ST_TO_ADDR
// until p >= 60 ;
61924: LD_VAR 0 1
61928: PUSH
61929: LD_INT 60
61931: GREATEREQUAL
61932: IFFALSE 61895
// game_speed := 4 ;
61934: LD_ADDR_OWVAR 65
61938: PUSH
61939: LD_INT 4
61941: ST_TO_ADDR
// end ;
61942: PPOPN 1
61944: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61945: LD_EXP 38
61949: PUSH
61950: LD_EXP 65
61954: AND
61955: IFFALSE 62101
61957: GO 61959
61959: DISABLE
61960: LD_INT 0
61962: PPUSH
61963: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61964: LD_ADDR_VAR 0 1
61968: PUSH
61969: LD_INT 22
61971: PUSH
61972: LD_OWVAR 2
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: LD_INT 30
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 30
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PPUSH
62013: CALL_OW 69
62017: ST_TO_ADDR
// if not depot then
62018: LD_VAR 0 1
62022: NOT
62023: IFFALSE 62027
// exit ;
62025: GO 62101
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62027: LD_ADDR_VAR 0 2
62031: PUSH
62032: LD_VAR 0 1
62036: PUSH
62037: LD_INT 1
62039: PPUSH
62040: LD_VAR 0 1
62044: PPUSH
62045: CALL_OW 12
62049: ARRAY
62050: PPUSH
62051: CALL_OW 274
62055: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62056: LD_VAR 0 2
62060: PPUSH
62061: LD_INT 1
62063: PPUSH
62064: LD_INT 0
62066: PPUSH
62067: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62071: LD_VAR 0 2
62075: PPUSH
62076: LD_INT 2
62078: PPUSH
62079: LD_INT 0
62081: PPUSH
62082: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62086: LD_VAR 0 2
62090: PPUSH
62091: LD_INT 3
62093: PPUSH
62094: LD_INT 0
62096: PPUSH
62097: CALL_OW 277
// end ;
62101: PPOPN 2
62103: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62104: LD_EXP 38
62108: PUSH
62109: LD_EXP 66
62113: AND
62114: IFFALSE 62211
62116: GO 62118
62118: DISABLE
62119: LD_INT 0
62121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62122: LD_ADDR_VAR 0 1
62126: PUSH
62127: LD_INT 22
62129: PUSH
62130: LD_OWVAR 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 21
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: PUSH
62152: LD_INT 23
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: PPUSH
62171: CALL_OW 69
62175: ST_TO_ADDR
// if not tmp then
62176: LD_VAR 0 1
62180: NOT
62181: IFFALSE 62185
// exit ;
62183: GO 62211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62185: LD_VAR 0 1
62189: PUSH
62190: LD_INT 1
62192: PPUSH
62193: LD_VAR 0 1
62197: PPUSH
62198: CALL_OW 12
62202: ARRAY
62203: PPUSH
62204: LD_INT 200
62206: PPUSH
62207: CALL_OW 234
// end ;
62211: PPOPN 1
62213: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62214: LD_EXP 38
62218: PUSH
62219: LD_EXP 67
62223: AND
62224: IFFALSE 62303
62226: GO 62228
62228: DISABLE
62229: LD_INT 0
62231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62232: LD_ADDR_VAR 0 1
62236: PUSH
62237: LD_INT 22
62239: PUSH
62240: LD_OWVAR 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 21
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PPUSH
62263: CALL_OW 69
62267: ST_TO_ADDR
// if not tmp then
62268: LD_VAR 0 1
62272: NOT
62273: IFFALSE 62277
// exit ;
62275: GO 62303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62277: LD_VAR 0 1
62281: PUSH
62282: LD_INT 1
62284: PPUSH
62285: LD_VAR 0 1
62289: PPUSH
62290: CALL_OW 12
62294: ARRAY
62295: PPUSH
62296: LD_INT 60
62298: PPUSH
62299: CALL_OW 234
// end ;
62303: PPOPN 1
62305: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62306: LD_EXP 38
62310: PUSH
62311: LD_EXP 68
62315: AND
62316: IFFALSE 62415
62318: GO 62320
62320: DISABLE
62321: LD_INT 0
62323: PPUSH
62324: PPUSH
// begin enable ;
62325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62326: LD_ADDR_VAR 0 1
62330: PUSH
62331: LD_INT 22
62333: PUSH
62334: LD_OWVAR 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 61
62345: PUSH
62346: EMPTY
62347: LIST
62348: PUSH
62349: LD_INT 33
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: PPUSH
62364: CALL_OW 69
62368: ST_TO_ADDR
// if not tmp then
62369: LD_VAR 0 1
62373: NOT
62374: IFFALSE 62378
// exit ;
62376: GO 62415
// for i in tmp do
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: FOR_IN
62389: IFFALSE 62413
// if IsControledBy ( i ) then
62391: LD_VAR 0 2
62395: PPUSH
62396: CALL_OW 312
62400: IFFALSE 62411
// ComUnlink ( i ) ;
62402: LD_VAR 0 2
62406: PPUSH
62407: CALL_OW 136
62411: GO 62388
62413: POP
62414: POP
// end ;
62415: PPOPN 2
62417: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62418: LD_EXP 38
62422: PUSH
62423: LD_EXP 69
62427: AND
62428: IFFALSE 62568
62430: GO 62432
62432: DISABLE
62433: LD_INT 0
62435: PPUSH
62436: PPUSH
// begin ToLua ( displayPowell(); ) ;
62437: LD_STRING displayPowell();
62439: PPUSH
62440: CALL_OW 559
// uc_side := 0 ;
62444: LD_ADDR_OWVAR 20
62448: PUSH
62449: LD_INT 0
62451: ST_TO_ADDR
// uc_nation := 2 ;
62452: LD_ADDR_OWVAR 21
62456: PUSH
62457: LD_INT 2
62459: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62460: LD_ADDR_OWVAR 37
62464: PUSH
62465: LD_INT 14
62467: ST_TO_ADDR
// vc_engine := engine_siberite ;
62468: LD_ADDR_OWVAR 39
62472: PUSH
62473: LD_INT 3
62475: ST_TO_ADDR
// vc_control := control_apeman ;
62476: LD_ADDR_OWVAR 38
62480: PUSH
62481: LD_INT 5
62483: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62484: LD_ADDR_OWVAR 40
62488: PUSH
62489: LD_INT 29
62491: ST_TO_ADDR
// un := CreateVehicle ;
62492: LD_ADDR_VAR 0 2
62496: PUSH
62497: CALL_OW 45
62501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62502: LD_VAR 0 2
62506: PPUSH
62507: LD_INT 1
62509: PPUSH
62510: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62514: LD_INT 35
62516: PPUSH
62517: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62521: LD_VAR 0 2
62525: PPUSH
62526: LD_INT 22
62528: PUSH
62529: LD_OWVAR 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PPUSH
62538: CALL_OW 69
62542: PPUSH
62543: LD_VAR 0 2
62547: PPUSH
62548: CALL_OW 74
62552: PPUSH
62553: CALL_OW 115
// until IsDead ( un ) ;
62557: LD_VAR 0 2
62561: PPUSH
62562: CALL_OW 301
62566: IFFALSE 62514
// end ;
62568: PPOPN 2
62570: END
// every 0 0$1 trigger StreamModeActive and sStu do
62571: LD_EXP 38
62575: PUSH
62576: LD_EXP 77
62580: AND
62581: IFFALSE 62597
62583: GO 62585
62585: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62586: LD_STRING displayStucuk();
62588: PPUSH
62589: CALL_OW 559
// ResetFog ;
62593: CALL_OW 335
// end ;
62597: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62598: LD_EXP 38
62602: PUSH
62603: LD_EXP 70
62607: AND
62608: IFFALSE 62749
62610: GO 62612
62612: DISABLE
62613: LD_INT 0
62615: PPUSH
62616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62617: LD_ADDR_VAR 0 2
62621: PUSH
62622: LD_INT 22
62624: PUSH
62625: LD_OWVAR 2
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 21
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PPUSH
62648: CALL_OW 69
62652: ST_TO_ADDR
// if not tmp then
62653: LD_VAR 0 2
62657: NOT
62658: IFFALSE 62662
// exit ;
62660: GO 62749
// un := tmp [ rand ( 1 , tmp ) ] ;
62662: LD_ADDR_VAR 0 1
62666: PUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_INT 1
62674: PPUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: CALL_OW 12
62684: ARRAY
62685: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_INT 0
62693: PPUSH
62694: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62698: LD_VAR 0 1
62702: PPUSH
62703: LD_OWVAR 3
62707: PUSH
62708: LD_VAR 0 1
62712: DIFF
62713: PPUSH
62714: LD_VAR 0 1
62718: PPUSH
62719: CALL_OW 74
62723: PPUSH
62724: CALL_OW 115
// wait ( 0 0$20 ) ;
62728: LD_INT 700
62730: PPUSH
62731: CALL_OW 67
// SetSide ( un , your_side ) ;
62735: LD_VAR 0 1
62739: PPUSH
62740: LD_OWVAR 2
62744: PPUSH
62745: CALL_OW 235
// end ;
62749: PPOPN 2
62751: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62752: LD_EXP 38
62756: PUSH
62757: LD_EXP 71
62761: AND
62762: IFFALSE 62868
62764: GO 62766
62766: DISABLE
62767: LD_INT 0
62769: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62770: LD_ADDR_VAR 0 1
62774: PUSH
62775: LD_INT 22
62777: PUSH
62778: LD_OWVAR 2
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: LD_INT 30
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 30
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PPUSH
62819: CALL_OW 69
62823: ST_TO_ADDR
// if not depot then
62824: LD_VAR 0 1
62828: NOT
62829: IFFALSE 62833
// exit ;
62831: GO 62868
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62833: LD_VAR 0 1
62837: PUSH
62838: LD_INT 1
62840: ARRAY
62841: PPUSH
62842: CALL_OW 250
62846: PPUSH
62847: LD_VAR 0 1
62851: PUSH
62852: LD_INT 1
62854: ARRAY
62855: PPUSH
62856: CALL_OW 251
62860: PPUSH
62861: LD_INT 70
62863: PPUSH
62864: CALL_OW 495
// end ;
62868: PPOPN 1
62870: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62871: LD_EXP 38
62875: PUSH
62876: LD_EXP 72
62880: AND
62881: IFFALSE 63092
62883: GO 62885
62885: DISABLE
62886: LD_INT 0
62888: PPUSH
62889: PPUSH
62890: PPUSH
62891: PPUSH
62892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62893: LD_ADDR_VAR 0 5
62897: PUSH
62898: LD_INT 22
62900: PUSH
62901: LD_OWVAR 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 21
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PPUSH
62924: CALL_OW 69
62928: ST_TO_ADDR
// if not tmp then
62929: LD_VAR 0 5
62933: NOT
62934: IFFALSE 62938
// exit ;
62936: GO 63092
// for i in tmp do
62938: LD_ADDR_VAR 0 1
62942: PUSH
62943: LD_VAR 0 5
62947: PUSH
62948: FOR_IN
62949: IFFALSE 63090
// begin d := rand ( 0 , 5 ) ;
62951: LD_ADDR_VAR 0 4
62955: PUSH
62956: LD_INT 0
62958: PPUSH
62959: LD_INT 5
62961: PPUSH
62962: CALL_OW 12
62966: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62967: LD_ADDR_VAR 0 2
62971: PUSH
62972: LD_VAR 0 1
62976: PPUSH
62977: CALL_OW 250
62981: PPUSH
62982: LD_VAR 0 4
62986: PPUSH
62987: LD_INT 3
62989: PPUSH
62990: LD_INT 12
62992: PPUSH
62993: CALL_OW 12
62997: PPUSH
62998: CALL_OW 272
63002: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63003: LD_ADDR_VAR 0 3
63007: PUSH
63008: LD_VAR 0 1
63012: PPUSH
63013: CALL_OW 251
63017: PPUSH
63018: LD_VAR 0 4
63022: PPUSH
63023: LD_INT 3
63025: PPUSH
63026: LD_INT 12
63028: PPUSH
63029: CALL_OW 12
63033: PPUSH
63034: CALL_OW 273
63038: ST_TO_ADDR
// if ValidHex ( x , y ) then
63039: LD_VAR 0 2
63043: PPUSH
63044: LD_VAR 0 3
63048: PPUSH
63049: CALL_OW 488
63053: IFFALSE 63088
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63055: LD_VAR 0 1
63059: PPUSH
63060: LD_VAR 0 2
63064: PPUSH
63065: LD_VAR 0 3
63069: PPUSH
63070: LD_INT 3
63072: PPUSH
63073: LD_INT 6
63075: PPUSH
63076: CALL_OW 12
63080: PPUSH
63081: LD_INT 1
63083: PPUSH
63084: CALL_OW 483
// end ;
63088: GO 62948
63090: POP
63091: POP
// end ;
63092: PPOPN 5
63094: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63095: LD_EXP 38
63099: PUSH
63100: LD_EXP 73
63104: AND
63105: IFFALSE 63199
63107: GO 63109
63109: DISABLE
63110: LD_INT 0
63112: PPUSH
63113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63114: LD_ADDR_VAR 0 2
63118: PUSH
63119: LD_INT 22
63121: PUSH
63122: LD_OWVAR 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 32
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 21
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL_OW 69
63160: ST_TO_ADDR
// if not tmp then
63161: LD_VAR 0 2
63165: NOT
63166: IFFALSE 63170
// exit ;
63168: GO 63199
// for i in tmp do
63170: LD_ADDR_VAR 0 1
63174: PUSH
63175: LD_VAR 0 2
63179: PUSH
63180: FOR_IN
63181: IFFALSE 63197
// SetFuel ( i , 0 ) ;
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_INT 0
63190: PPUSH
63191: CALL_OW 240
63195: GO 63180
63197: POP
63198: POP
// end ;
63199: PPOPN 2
63201: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63202: LD_EXP 38
63206: PUSH
63207: LD_EXP 74
63211: AND
63212: IFFALSE 63278
63214: GO 63216
63216: DISABLE
63217: LD_INT 0
63219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63220: LD_ADDR_VAR 0 1
63224: PUSH
63225: LD_INT 22
63227: PUSH
63228: LD_OWVAR 2
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 30
63239: PUSH
63240: LD_INT 29
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PPUSH
63251: CALL_OW 69
63255: ST_TO_ADDR
// if not tmp then
63256: LD_VAR 0 1
63260: NOT
63261: IFFALSE 63265
// exit ;
63263: GO 63278
// DestroyUnit ( tmp [ 1 ] ) ;
63265: LD_VAR 0 1
63269: PUSH
63270: LD_INT 1
63272: ARRAY
63273: PPUSH
63274: CALL_OW 65
// end ;
63278: PPOPN 1
63280: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63281: LD_EXP 38
63285: PUSH
63286: LD_EXP 76
63290: AND
63291: IFFALSE 63420
63293: GO 63295
63295: DISABLE
63296: LD_INT 0
63298: PPUSH
// begin uc_side := 0 ;
63299: LD_ADDR_OWVAR 20
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// uc_nation := nation_arabian ;
63307: LD_ADDR_OWVAR 21
63311: PUSH
63312: LD_INT 2
63314: ST_TO_ADDR
// hc_gallery :=  ;
63315: LD_ADDR_OWVAR 33
63319: PUSH
63320: LD_STRING 
63322: ST_TO_ADDR
// hc_name :=  ;
63323: LD_ADDR_OWVAR 26
63327: PUSH
63328: LD_STRING 
63330: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63331: LD_INT 1
63333: PPUSH
63334: LD_INT 11
63336: PPUSH
63337: LD_INT 10
63339: PPUSH
63340: CALL_OW 380
// un := CreateHuman ;
63344: LD_ADDR_VAR 0 1
63348: PUSH
63349: CALL_OW 44
63353: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63354: LD_VAR 0 1
63358: PPUSH
63359: LD_INT 1
63361: PPUSH
63362: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63366: LD_INT 35
63368: PPUSH
63369: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63373: LD_VAR 0 1
63377: PPUSH
63378: LD_INT 22
63380: PUSH
63381: LD_OWVAR 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PPUSH
63390: CALL_OW 69
63394: PPUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 74
63404: PPUSH
63405: CALL_OW 115
// until IsDead ( un ) ;
63409: LD_VAR 0 1
63413: PPUSH
63414: CALL_OW 301
63418: IFFALSE 63366
// end ;
63420: PPOPN 1
63422: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63423: LD_EXP 38
63427: PUSH
63428: LD_EXP 78
63432: AND
63433: IFFALSE 63445
63435: GO 63437
63437: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63438: LD_STRING earthquake(getX(game), 0, 32)
63440: PPUSH
63441: CALL_OW 559
63445: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63446: LD_EXP 38
63450: PUSH
63451: LD_EXP 79
63455: AND
63456: IFFALSE 63547
63458: GO 63460
63460: DISABLE
63461: LD_INT 0
63463: PPUSH
// begin enable ;
63464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63465: LD_ADDR_VAR 0 1
63469: PUSH
63470: LD_INT 22
63472: PUSH
63473: LD_OWVAR 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 21
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 33
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: PPUSH
63507: CALL_OW 69
63511: ST_TO_ADDR
// if not tmp then
63512: LD_VAR 0 1
63516: NOT
63517: IFFALSE 63521
// exit ;
63519: GO 63547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63521: LD_VAR 0 1
63525: PUSH
63526: LD_INT 1
63528: PPUSH
63529: LD_VAR 0 1
63533: PPUSH
63534: CALL_OW 12
63538: ARRAY
63539: PPUSH
63540: LD_INT 1
63542: PPUSH
63543: CALL_OW 234
// end ;
63547: PPOPN 1
63549: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63550: LD_EXP 38
63554: PUSH
63555: LD_EXP 80
63559: AND
63560: IFFALSE 63701
63562: GO 63564
63564: DISABLE
63565: LD_INT 0
63567: PPUSH
63568: PPUSH
63569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63570: LD_ADDR_VAR 0 3
63574: PUSH
63575: LD_INT 22
63577: PUSH
63578: LD_OWVAR 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 25
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PPUSH
63601: CALL_OW 69
63605: ST_TO_ADDR
// if not tmp then
63606: LD_VAR 0 3
63610: NOT
63611: IFFALSE 63615
// exit ;
63613: GO 63701
// un := tmp [ rand ( 1 , tmp ) ] ;
63615: LD_ADDR_VAR 0 2
63619: PUSH
63620: LD_VAR 0 3
63624: PUSH
63625: LD_INT 1
63627: PPUSH
63628: LD_VAR 0 3
63632: PPUSH
63633: CALL_OW 12
63637: ARRAY
63638: ST_TO_ADDR
// if Crawls ( un ) then
63639: LD_VAR 0 2
63643: PPUSH
63644: CALL_OW 318
63648: IFFALSE 63659
// ComWalk ( un ) ;
63650: LD_VAR 0 2
63654: PPUSH
63655: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63659: LD_VAR 0 2
63663: PPUSH
63664: LD_INT 9
63666: PPUSH
63667: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63671: LD_INT 28
63673: PPUSH
63674: LD_OWVAR 2
63678: PPUSH
63679: LD_INT 2
63681: PPUSH
63682: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63686: LD_INT 29
63688: PPUSH
63689: LD_OWVAR 2
63693: PPUSH
63694: LD_INT 2
63696: PPUSH
63697: CALL_OW 322
// end ;
63701: PPOPN 3
63703: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63704: LD_EXP 38
63708: PUSH
63709: LD_EXP 81
63713: AND
63714: IFFALSE 63825
63716: GO 63718
63718: DISABLE
63719: LD_INT 0
63721: PPUSH
63722: PPUSH
63723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63724: LD_ADDR_VAR 0 3
63728: PUSH
63729: LD_INT 22
63731: PUSH
63732: LD_OWVAR 2
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 25
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PPUSH
63755: CALL_OW 69
63759: ST_TO_ADDR
// if not tmp then
63760: LD_VAR 0 3
63764: NOT
63765: IFFALSE 63769
// exit ;
63767: GO 63825
// un := tmp [ rand ( 1 , tmp ) ] ;
63769: LD_ADDR_VAR 0 2
63773: PUSH
63774: LD_VAR 0 3
63778: PUSH
63779: LD_INT 1
63781: PPUSH
63782: LD_VAR 0 3
63786: PPUSH
63787: CALL_OW 12
63791: ARRAY
63792: ST_TO_ADDR
// if Crawls ( un ) then
63793: LD_VAR 0 2
63797: PPUSH
63798: CALL_OW 318
63802: IFFALSE 63813
// ComWalk ( un ) ;
63804: LD_VAR 0 2
63808: PPUSH
63809: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63813: LD_VAR 0 2
63817: PPUSH
63818: LD_INT 8
63820: PPUSH
63821: CALL_OW 336
// end ;
63825: PPOPN 3
63827: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63828: LD_EXP 38
63832: PUSH
63833: LD_EXP 82
63837: AND
63838: IFFALSE 63982
63840: GO 63842
63842: DISABLE
63843: LD_INT 0
63845: PPUSH
63846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63847: LD_ADDR_VAR 0 2
63851: PUSH
63852: LD_INT 22
63854: PUSH
63855: LD_OWVAR 2
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 21
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 34
63879: PUSH
63880: LD_INT 12
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 34
63889: PUSH
63890: LD_INT 51
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 34
63899: PUSH
63900: LD_INT 32
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: PPUSH
63918: CALL_OW 69
63922: ST_TO_ADDR
// if not tmp then
63923: LD_VAR 0 2
63927: NOT
63928: IFFALSE 63932
// exit ;
63930: GO 63982
// for i in tmp do
63932: LD_ADDR_VAR 0 1
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: FOR_IN
63943: IFFALSE 63980
// if GetCargo ( i , mat_artifact ) = 0 then
63945: LD_VAR 0 1
63949: PPUSH
63950: LD_INT 4
63952: PPUSH
63953: CALL_OW 289
63957: PUSH
63958: LD_INT 0
63960: EQUAL
63961: IFFALSE 63978
// SetCargo ( i , mat_siberit , 100 ) ;
63963: LD_VAR 0 1
63967: PPUSH
63968: LD_INT 3
63970: PPUSH
63971: LD_INT 100
63973: PPUSH
63974: CALL_OW 290
63978: GO 63942
63980: POP
63981: POP
// end ;
63982: PPOPN 2
63984: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63985: LD_EXP 38
63989: PUSH
63990: LD_EXP 83
63994: AND
63995: IFFALSE 64178
63997: GO 63999
63999: DISABLE
64000: LD_INT 0
64002: PPUSH
64003: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64004: LD_ADDR_VAR 0 2
64008: PUSH
64009: LD_INT 22
64011: PUSH
64012: LD_OWVAR 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PPUSH
64021: CALL_OW 69
64025: ST_TO_ADDR
// if not tmp then
64026: LD_VAR 0 2
64030: NOT
64031: IFFALSE 64035
// exit ;
64033: GO 64178
// for i := 1 to 2 do
64035: LD_ADDR_VAR 0 1
64039: PUSH
64040: DOUBLE
64041: LD_INT 1
64043: DEC
64044: ST_TO_ADDR
64045: LD_INT 2
64047: PUSH
64048: FOR_TO
64049: IFFALSE 64176
// begin uc_side := your_side ;
64051: LD_ADDR_OWVAR 20
64055: PUSH
64056: LD_OWVAR 2
64060: ST_TO_ADDR
// uc_nation := nation_american ;
64061: LD_ADDR_OWVAR 21
64065: PUSH
64066: LD_INT 1
64068: ST_TO_ADDR
// vc_chassis := us_morphling ;
64069: LD_ADDR_OWVAR 37
64073: PUSH
64074: LD_INT 5
64076: ST_TO_ADDR
// vc_engine := engine_siberite ;
64077: LD_ADDR_OWVAR 39
64081: PUSH
64082: LD_INT 3
64084: ST_TO_ADDR
// vc_control := control_computer ;
64085: LD_ADDR_OWVAR 38
64089: PUSH
64090: LD_INT 3
64092: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64093: LD_ADDR_OWVAR 40
64097: PUSH
64098: LD_INT 10
64100: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64101: LD_VAR 0 2
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: PPUSH
64110: CALL_OW 310
64114: NOT
64115: IFFALSE 64162
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64117: CALL_OW 45
64121: PPUSH
64122: LD_VAR 0 2
64126: PUSH
64127: LD_INT 1
64129: ARRAY
64130: PPUSH
64131: CALL_OW 250
64135: PPUSH
64136: LD_VAR 0 2
64140: PUSH
64141: LD_INT 1
64143: ARRAY
64144: PPUSH
64145: CALL_OW 251
64149: PPUSH
64150: LD_INT 12
64152: PPUSH
64153: LD_INT 1
64155: PPUSH
64156: CALL_OW 50
64160: GO 64174
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64162: CALL_OW 45
64166: PPUSH
64167: LD_INT 1
64169: PPUSH
64170: CALL_OW 51
// end ;
64174: GO 64048
64176: POP
64177: POP
// end ;
64178: PPOPN 2
64180: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64181: LD_EXP 38
64185: PUSH
64186: LD_EXP 84
64190: AND
64191: IFFALSE 64413
64193: GO 64195
64195: DISABLE
64196: LD_INT 0
64198: PPUSH
64199: PPUSH
64200: PPUSH
64201: PPUSH
64202: PPUSH
64203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64204: LD_ADDR_VAR 0 6
64208: PUSH
64209: LD_INT 22
64211: PUSH
64212: LD_OWVAR 2
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 21
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: LD_INT 23
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: PPUSH
64253: CALL_OW 69
64257: ST_TO_ADDR
// if not tmp then
64258: LD_VAR 0 6
64262: NOT
64263: IFFALSE 64267
// exit ;
64265: GO 64413
// s1 := rand ( 1 , 4 ) ;
64267: LD_ADDR_VAR 0 2
64271: PUSH
64272: LD_INT 1
64274: PPUSH
64275: LD_INT 4
64277: PPUSH
64278: CALL_OW 12
64282: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64283: LD_ADDR_VAR 0 4
64287: PUSH
64288: LD_VAR 0 6
64292: PUSH
64293: LD_INT 1
64295: ARRAY
64296: PPUSH
64297: LD_VAR 0 2
64301: PPUSH
64302: CALL_OW 259
64306: ST_TO_ADDR
// if s1 = 1 then
64307: LD_VAR 0 2
64311: PUSH
64312: LD_INT 1
64314: EQUAL
64315: IFFALSE 64335
// s2 := rand ( 2 , 4 ) else
64317: LD_ADDR_VAR 0 3
64321: PUSH
64322: LD_INT 2
64324: PPUSH
64325: LD_INT 4
64327: PPUSH
64328: CALL_OW 12
64332: ST_TO_ADDR
64333: GO 64343
// s2 := 1 ;
64335: LD_ADDR_VAR 0 3
64339: PUSH
64340: LD_INT 1
64342: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64343: LD_ADDR_VAR 0 5
64347: PUSH
64348: LD_VAR 0 6
64352: PUSH
64353: LD_INT 1
64355: ARRAY
64356: PPUSH
64357: LD_VAR 0 3
64361: PPUSH
64362: CALL_OW 259
64366: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64367: LD_VAR 0 6
64371: PUSH
64372: LD_INT 1
64374: ARRAY
64375: PPUSH
64376: LD_VAR 0 2
64380: PPUSH
64381: LD_VAR 0 5
64385: PPUSH
64386: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64390: LD_VAR 0 6
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: PPUSH
64399: LD_VAR 0 3
64403: PPUSH
64404: LD_VAR 0 4
64408: PPUSH
64409: CALL_OW 237
// end ;
64413: PPOPN 6
64415: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64416: LD_EXP 38
64420: PUSH
64421: LD_EXP 85
64425: AND
64426: IFFALSE 64505
64428: GO 64430
64430: DISABLE
64431: LD_INT 0
64433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64434: LD_ADDR_VAR 0 1
64438: PUSH
64439: LD_INT 22
64441: PUSH
64442: LD_OWVAR 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 30
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PPUSH
64465: CALL_OW 69
64469: ST_TO_ADDR
// if not tmp then
64470: LD_VAR 0 1
64474: NOT
64475: IFFALSE 64479
// exit ;
64477: GO 64505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64479: LD_VAR 0 1
64483: PUSH
64484: LD_INT 1
64486: PPUSH
64487: LD_VAR 0 1
64491: PPUSH
64492: CALL_OW 12
64496: ARRAY
64497: PPUSH
64498: LD_INT 1
64500: PPUSH
64501: CALL_OW 234
// end ;
64505: PPOPN 1
64507: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64508: LD_EXP 38
64512: PUSH
64513: LD_EXP 86
64517: AND
64518: IFFALSE 64630
64520: GO 64522
64522: DISABLE
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64527: LD_ADDR_VAR 0 2
64531: PUSH
64532: LD_INT 22
64534: PUSH
64535: LD_OWVAR 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 30
64549: PUSH
64550: LD_INT 27
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 30
64559: PUSH
64560: LD_INT 26
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 30
64569: PUSH
64570: LD_INT 28
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PPUSH
64587: CALL_OW 69
64591: ST_TO_ADDR
// if not tmp then
64592: LD_VAR 0 2
64596: NOT
64597: IFFALSE 64601
// exit ;
64599: GO 64630
// for i in tmp do
64601: LD_ADDR_VAR 0 1
64605: PUSH
64606: LD_VAR 0 2
64610: PUSH
64611: FOR_IN
64612: IFFALSE 64628
// SetLives ( i , 1 ) ;
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_INT 1
64621: PPUSH
64622: CALL_OW 234
64626: GO 64611
64628: POP
64629: POP
// end ;
64630: PPOPN 2
64632: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64633: LD_EXP 38
64637: PUSH
64638: LD_EXP 87
64642: AND
64643: IFFALSE 64930
64645: GO 64647
64647: DISABLE
64648: LD_INT 0
64650: PPUSH
64651: PPUSH
64652: PPUSH
// begin i := rand ( 1 , 7 ) ;
64653: LD_ADDR_VAR 0 1
64657: PUSH
64658: LD_INT 1
64660: PPUSH
64661: LD_INT 7
64663: PPUSH
64664: CALL_OW 12
64668: ST_TO_ADDR
// case i of 1 :
64669: LD_VAR 0 1
64673: PUSH
64674: LD_INT 1
64676: DOUBLE
64677: EQUAL
64678: IFTRUE 64682
64680: GO 64692
64682: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64683: LD_STRING earthquake(getX(game), 0, 32)
64685: PPUSH
64686: CALL_OW 559
64690: GO 64930
64692: LD_INT 2
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64700
64698: GO 64714
64700: POP
// begin ToLua ( displayStucuk(); ) ;
64701: LD_STRING displayStucuk();
64703: PPUSH
64704: CALL_OW 559
// ResetFog ;
64708: CALL_OW 335
// end ; 3 :
64712: GO 64930
64714: LD_INT 3
64716: DOUBLE
64717: EQUAL
64718: IFTRUE 64722
64720: GO 64826
64722: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64723: LD_ADDR_VAR 0 2
64727: PUSH
64728: LD_INT 22
64730: PUSH
64731: LD_OWVAR 2
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 25
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PPUSH
64754: CALL_OW 69
64758: ST_TO_ADDR
// if not tmp then
64759: LD_VAR 0 2
64763: NOT
64764: IFFALSE 64768
// exit ;
64766: GO 64930
// un := tmp [ rand ( 1 , tmp ) ] ;
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: LD_VAR 0 2
64777: PUSH
64778: LD_INT 1
64780: PPUSH
64781: LD_VAR 0 2
64785: PPUSH
64786: CALL_OW 12
64790: ARRAY
64791: ST_TO_ADDR
// if Crawls ( un ) then
64792: LD_VAR 0 3
64796: PPUSH
64797: CALL_OW 318
64801: IFFALSE 64812
// ComWalk ( un ) ;
64803: LD_VAR 0 3
64807: PPUSH
64808: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64812: LD_VAR 0 3
64816: PPUSH
64817: LD_INT 8
64819: PPUSH
64820: CALL_OW 336
// end ; 4 :
64824: GO 64930
64826: LD_INT 4
64828: DOUBLE
64829: EQUAL
64830: IFTRUE 64834
64832: GO 64908
64834: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64835: LD_ADDR_VAR 0 2
64839: PUSH
64840: LD_INT 22
64842: PUSH
64843: LD_OWVAR 2
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 30
64854: PUSH
64855: LD_INT 29
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PPUSH
64866: CALL_OW 69
64870: ST_TO_ADDR
// if not tmp then
64871: LD_VAR 0 2
64875: NOT
64876: IFFALSE 64880
// exit ;
64878: GO 64930
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64880: LD_VAR 0 2
64884: PUSH
64885: LD_INT 1
64887: ARRAY
64888: PPUSH
64889: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64893: LD_VAR 0 2
64897: PUSH
64898: LD_INT 1
64900: ARRAY
64901: PPUSH
64902: CALL_OW 65
// end ; 5 .. 7 :
64906: GO 64930
64908: LD_INT 5
64910: DOUBLE
64911: GREATEREQUAL
64912: IFFALSE 64920
64914: LD_INT 7
64916: DOUBLE
64917: LESSEQUAL
64918: IFTRUE 64922
64920: GO 64929
64922: POP
// StreamSibBomb ; end ;
64923: CALL 61167 0 0
64927: GO 64930
64929: POP
// end ;
64930: PPOPN 3
64932: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64933: LD_EXP 38
64937: PUSH
64938: LD_EXP 88
64942: AND
64943: IFFALSE 65099
64945: GO 64947
64947: DISABLE
64948: LD_INT 0
64950: PPUSH
64951: PPUSH
64952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_INT 81
64960: PUSH
64961: LD_OWVAR 2
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 21
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 21
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PPUSH
65002: CALL_OW 69
65006: ST_TO_ADDR
// if not tmp then
65007: LD_VAR 0 2
65011: NOT
65012: IFFALSE 65016
// exit ;
65014: GO 65099
// p := 0 ;
65016: LD_ADDR_VAR 0 3
65020: PUSH
65021: LD_INT 0
65023: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65024: LD_INT 35
65026: PPUSH
65027: CALL_OW 67
// p := p + 1 ;
65031: LD_ADDR_VAR 0 3
65035: PUSH
65036: LD_VAR 0 3
65040: PUSH
65041: LD_INT 1
65043: PLUS
65044: ST_TO_ADDR
// for i in tmp do
65045: LD_ADDR_VAR 0 1
65049: PUSH
65050: LD_VAR 0 2
65054: PUSH
65055: FOR_IN
65056: IFFALSE 65087
// if GetLives ( i ) < 1000 then
65058: LD_VAR 0 1
65062: PPUSH
65063: CALL_OW 256
65067: PUSH
65068: LD_INT 1000
65070: LESS
65071: IFFALSE 65085
// SetLives ( i , 1000 ) ;
65073: LD_VAR 0 1
65077: PPUSH
65078: LD_INT 1000
65080: PPUSH
65081: CALL_OW 234
65085: GO 65055
65087: POP
65088: POP
// until p > 20 ;
65089: LD_VAR 0 3
65093: PUSH
65094: LD_INT 20
65096: GREATER
65097: IFFALSE 65024
// end ;
65099: PPOPN 3
65101: END
// every 0 0$1 trigger StreamModeActive and sTime do
65102: LD_EXP 38
65106: PUSH
65107: LD_EXP 89
65111: AND
65112: IFFALSE 65147
65114: GO 65116
65116: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65117: LD_INT 28
65119: PPUSH
65120: LD_OWVAR 2
65124: PPUSH
65125: LD_INT 2
65127: PPUSH
65128: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65132: LD_INT 30
65134: PPUSH
65135: LD_OWVAR 2
65139: PPUSH
65140: LD_INT 2
65142: PPUSH
65143: CALL_OW 322
// end ;
65147: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65148: LD_EXP 38
65152: PUSH
65153: LD_EXP 90
65157: AND
65158: IFFALSE 65279
65160: GO 65162
65162: DISABLE
65163: LD_INT 0
65165: PPUSH
65166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65167: LD_ADDR_VAR 0 2
65171: PUSH
65172: LD_INT 22
65174: PUSH
65175: LD_OWVAR 2
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 21
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 23
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: PPUSH
65216: CALL_OW 69
65220: ST_TO_ADDR
// if not tmp then
65221: LD_VAR 0 2
65225: NOT
65226: IFFALSE 65230
// exit ;
65228: GO 65279
// for i in tmp do
65230: LD_ADDR_VAR 0 1
65234: PUSH
65235: LD_VAR 0 2
65239: PUSH
65240: FOR_IN
65241: IFFALSE 65277
// begin if Crawls ( i ) then
65243: LD_VAR 0 1
65247: PPUSH
65248: CALL_OW 318
65252: IFFALSE 65263
// ComWalk ( i ) ;
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 138
// SetClass ( i , 2 ) ;
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_INT 2
65270: PPUSH
65271: CALL_OW 336
// end ;
65275: GO 65240
65277: POP
65278: POP
// end ;
65279: PPOPN 2
65281: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65282: LD_EXP 38
65286: PUSH
65287: LD_EXP 91
65291: AND
65292: IFFALSE 65580
65294: GO 65296
65296: DISABLE
65297: LD_INT 0
65299: PPUSH
65300: PPUSH
65301: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65302: LD_OWVAR 2
65306: PPUSH
65307: LD_INT 9
65309: PPUSH
65310: LD_INT 1
65312: PPUSH
65313: LD_INT 1
65315: PPUSH
65316: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65320: LD_INT 9
65322: PPUSH
65323: LD_OWVAR 2
65327: PPUSH
65328: CALL_OW 343
// uc_side := 9 ;
65332: LD_ADDR_OWVAR 20
65336: PUSH
65337: LD_INT 9
65339: ST_TO_ADDR
// uc_nation := 2 ;
65340: LD_ADDR_OWVAR 21
65344: PUSH
65345: LD_INT 2
65347: ST_TO_ADDR
// hc_name := Dark Warrior ;
65348: LD_ADDR_OWVAR 26
65352: PUSH
65353: LD_STRING Dark Warrior
65355: ST_TO_ADDR
// hc_gallery :=  ;
65356: LD_ADDR_OWVAR 33
65360: PUSH
65361: LD_STRING 
65363: ST_TO_ADDR
// hc_noskilllimit := true ;
65364: LD_ADDR_OWVAR 76
65368: PUSH
65369: LD_INT 1
65371: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65372: LD_ADDR_OWVAR 31
65376: PUSH
65377: LD_INT 30
65379: PUSH
65380: LD_INT 30
65382: PUSH
65383: LD_INT 30
65385: PUSH
65386: LD_INT 30
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: ST_TO_ADDR
// un := CreateHuman ;
65395: LD_ADDR_VAR 0 3
65399: PUSH
65400: CALL_OW 44
65404: ST_TO_ADDR
// hc_noskilllimit := false ;
65405: LD_ADDR_OWVAR 76
65409: PUSH
65410: LD_INT 0
65412: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_INT 1
65420: PPUSH
65421: CALL_OW 51
// ToLua ( playRanger() ) ;
65425: LD_STRING playRanger()
65427: PPUSH
65428: CALL_OW 559
// p := 0 ;
65432: LD_ADDR_VAR 0 2
65436: PUSH
65437: LD_INT 0
65439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65440: LD_INT 35
65442: PPUSH
65443: CALL_OW 67
// p := p + 1 ;
65447: LD_ADDR_VAR 0 2
65451: PUSH
65452: LD_VAR 0 2
65456: PUSH
65457: LD_INT 1
65459: PLUS
65460: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65461: LD_VAR 0 3
65465: PPUSH
65466: CALL_OW 256
65470: PUSH
65471: LD_INT 1000
65473: LESS
65474: IFFALSE 65488
// SetLives ( un , 1000 ) ;
65476: LD_VAR 0 3
65480: PPUSH
65481: LD_INT 1000
65483: PPUSH
65484: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65488: LD_VAR 0 3
65492: PPUSH
65493: LD_INT 81
65495: PUSH
65496: LD_OWVAR 2
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 91
65507: PUSH
65508: LD_VAR 0 3
65512: PUSH
65513: LD_INT 30
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PPUSH
65525: CALL_OW 69
65529: PPUSH
65530: LD_VAR 0 3
65534: PPUSH
65535: CALL_OW 74
65539: PPUSH
65540: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65544: LD_VAR 0 2
65548: PUSH
65549: LD_INT 80
65551: GREATER
65552: PUSH
65553: LD_VAR 0 3
65557: PPUSH
65558: CALL_OW 301
65562: OR
65563: IFFALSE 65440
// if un then
65565: LD_VAR 0 3
65569: IFFALSE 65580
// RemoveUnit ( un ) ;
65571: LD_VAR 0 3
65575: PPUSH
65576: CALL_OW 64
// end ;
65580: PPOPN 3
65582: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65583: LD_EXP 92
65587: IFFALSE 65703
65589: GO 65591
65591: DISABLE
65592: LD_INT 0
65594: PPUSH
65595: PPUSH
65596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65597: LD_ADDR_VAR 0 2
65601: PUSH
65602: LD_INT 81
65604: PUSH
65605: LD_OWVAR 2
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 21
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PPUSH
65628: CALL_OW 69
65632: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65633: LD_STRING playComputer()
65635: PPUSH
65636: CALL_OW 559
// if not tmp then
65640: LD_VAR 0 2
65644: NOT
65645: IFFALSE 65649
// exit ;
65647: GO 65703
// for i in tmp do
65649: LD_ADDR_VAR 0 1
65653: PUSH
65654: LD_VAR 0 2
65658: PUSH
65659: FOR_IN
65660: IFFALSE 65701
// for j := 1 to 4 do
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: DOUBLE
65668: LD_INT 1
65670: DEC
65671: ST_TO_ADDR
65672: LD_INT 4
65674: PUSH
65675: FOR_TO
65676: IFFALSE 65697
// SetSkill ( i , j , 10 ) ;
65678: LD_VAR 0 1
65682: PPUSH
65683: LD_VAR 0 3
65687: PPUSH
65688: LD_INT 10
65690: PPUSH
65691: CALL_OW 237
65695: GO 65675
65697: POP
65698: POP
65699: GO 65659
65701: POP
65702: POP
// end ;
65703: PPOPN 3
65705: END
// every 0 0$1 trigger s30 do var i , tmp ;
65706: LD_EXP 93
65710: IFFALSE 65779
65712: GO 65714
65714: DISABLE
65715: LD_INT 0
65717: PPUSH
65718: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65719: LD_ADDR_VAR 0 2
65723: PUSH
65724: LD_INT 22
65726: PUSH
65727: LD_OWVAR 2
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PPUSH
65736: CALL_OW 69
65740: ST_TO_ADDR
// if not tmp then
65741: LD_VAR 0 2
65745: NOT
65746: IFFALSE 65750
// exit ;
65748: GO 65779
// for i in tmp do
65750: LD_ADDR_VAR 0 1
65754: PUSH
65755: LD_VAR 0 2
65759: PUSH
65760: FOR_IN
65761: IFFALSE 65777
// SetLives ( i , 300 ) ;
65763: LD_VAR 0 1
65767: PPUSH
65768: LD_INT 300
65770: PPUSH
65771: CALL_OW 234
65775: GO 65760
65777: POP
65778: POP
// end ;
65779: PPOPN 2
65781: END
// every 0 0$1 trigger s60 do var i , tmp ;
65782: LD_EXP 94
65786: IFFALSE 65855
65788: GO 65790
65790: DISABLE
65791: LD_INT 0
65793: PPUSH
65794: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65795: LD_ADDR_VAR 0 2
65799: PUSH
65800: LD_INT 22
65802: PUSH
65803: LD_OWVAR 2
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PPUSH
65812: CALL_OW 69
65816: ST_TO_ADDR
// if not tmp then
65817: LD_VAR 0 2
65821: NOT
65822: IFFALSE 65826
// exit ;
65824: GO 65855
// for i in tmp do
65826: LD_ADDR_VAR 0 1
65830: PUSH
65831: LD_VAR 0 2
65835: PUSH
65836: FOR_IN
65837: IFFALSE 65853
// SetLives ( i , 600 ) ;
65839: LD_VAR 0 1
65843: PPUSH
65844: LD_INT 600
65846: PPUSH
65847: CALL_OW 234
65851: GO 65836
65853: POP
65854: POP
// end ;
65855: PPOPN 2
65857: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65858: LD_INT 0
65860: PPUSH
// case cmd of 301 :
65861: LD_VAR 0 1
65865: PUSH
65866: LD_INT 301
65868: DOUBLE
65869: EQUAL
65870: IFTRUE 65874
65872: GO 65906
65874: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65875: LD_VAR 0 6
65879: PPUSH
65880: LD_VAR 0 7
65884: PPUSH
65885: LD_VAR 0 8
65889: PPUSH
65890: LD_VAR 0 4
65894: PPUSH
65895: LD_VAR 0 5
65899: PPUSH
65900: CALL 67115 0 5
65904: GO 66027
65906: LD_INT 302
65908: DOUBLE
65909: EQUAL
65910: IFTRUE 65914
65912: GO 65951
65914: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65915: LD_VAR 0 6
65919: PPUSH
65920: LD_VAR 0 7
65924: PPUSH
65925: LD_VAR 0 8
65929: PPUSH
65930: LD_VAR 0 9
65934: PPUSH
65935: LD_VAR 0 4
65939: PPUSH
65940: LD_VAR 0 5
65944: PPUSH
65945: CALL 67206 0 6
65949: GO 66027
65951: LD_INT 303
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65959
65957: GO 65996
65959: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65960: LD_VAR 0 6
65964: PPUSH
65965: LD_VAR 0 7
65969: PPUSH
65970: LD_VAR 0 8
65974: PPUSH
65975: LD_VAR 0 9
65979: PPUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: LD_VAR 0 5
65989: PPUSH
65990: CALL 66032 0 6
65994: GO 66027
65996: LD_INT 304
65998: DOUBLE
65999: EQUAL
66000: IFTRUE 66004
66002: GO 66026
66004: POP
// hHackTeleport ( unit , x , y ) ; end ;
66005: LD_VAR 0 2
66009: PPUSH
66010: LD_VAR 0 4
66014: PPUSH
66015: LD_VAR 0 5
66019: PPUSH
66020: CALL 67799 0 3
66024: GO 66027
66026: POP
// end ;
66027: LD_VAR 0 12
66031: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66032: LD_INT 0
66034: PPUSH
66035: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66036: LD_VAR 0 1
66040: PUSH
66041: LD_INT 1
66043: LESS
66044: PUSH
66045: LD_VAR 0 1
66049: PUSH
66050: LD_INT 3
66052: GREATER
66053: OR
66054: PUSH
66055: LD_VAR 0 5
66059: PPUSH
66060: LD_VAR 0 6
66064: PPUSH
66065: CALL_OW 428
66069: OR
66070: IFFALSE 66074
// exit ;
66072: GO 66802
// uc_side := your_side ;
66074: LD_ADDR_OWVAR 20
66078: PUSH
66079: LD_OWVAR 2
66083: ST_TO_ADDR
// uc_nation := nation ;
66084: LD_ADDR_OWVAR 21
66088: PUSH
66089: LD_VAR 0 1
66093: ST_TO_ADDR
// bc_level = 1 ;
66094: LD_ADDR_OWVAR 43
66098: PUSH
66099: LD_INT 1
66101: ST_TO_ADDR
// case btype of 1 :
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 1
66109: DOUBLE
66110: EQUAL
66111: IFTRUE 66115
66113: GO 66126
66115: POP
// bc_type := b_depot ; 2 :
66116: LD_ADDR_OWVAR 42
66120: PUSH
66121: LD_INT 0
66123: ST_TO_ADDR
66124: GO 66746
66126: LD_INT 2
66128: DOUBLE
66129: EQUAL
66130: IFTRUE 66134
66132: GO 66145
66134: POP
// bc_type := b_warehouse ; 3 :
66135: LD_ADDR_OWVAR 42
66139: PUSH
66140: LD_INT 1
66142: ST_TO_ADDR
66143: GO 66746
66145: LD_INT 3
66147: DOUBLE
66148: EQUAL
66149: IFTRUE 66153
66151: GO 66164
66153: POP
// bc_type := b_lab ; 4 .. 9 :
66154: LD_ADDR_OWVAR 42
66158: PUSH
66159: LD_INT 6
66161: ST_TO_ADDR
66162: GO 66746
66164: LD_INT 4
66166: DOUBLE
66167: GREATEREQUAL
66168: IFFALSE 66176
66170: LD_INT 9
66172: DOUBLE
66173: LESSEQUAL
66174: IFTRUE 66178
66176: GO 66238
66178: POP
// begin bc_type := b_lab_half ;
66179: LD_ADDR_OWVAR 42
66183: PUSH
66184: LD_INT 7
66186: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66187: LD_ADDR_OWVAR 44
66191: PUSH
66192: LD_INT 10
66194: PUSH
66195: LD_INT 11
66197: PUSH
66198: LD_INT 12
66200: PUSH
66201: LD_INT 15
66203: PUSH
66204: LD_INT 14
66206: PUSH
66207: LD_INT 13
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: PUSH
66218: LD_VAR 0 2
66222: PUSH
66223: LD_INT 3
66225: MINUS
66226: ARRAY
66227: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66228: LD_ADDR_OWVAR 45
66232: PUSH
66233: LD_INT 9
66235: ST_TO_ADDR
// end ; 10 .. 13 :
66236: GO 66746
66238: LD_INT 10
66240: DOUBLE
66241: GREATEREQUAL
66242: IFFALSE 66250
66244: LD_INT 13
66246: DOUBLE
66247: LESSEQUAL
66248: IFTRUE 66252
66250: GO 66329
66252: POP
// begin bc_type := b_lab_full ;
66253: LD_ADDR_OWVAR 42
66257: PUSH
66258: LD_INT 8
66260: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66261: LD_ADDR_OWVAR 44
66265: PUSH
66266: LD_INT 10
66268: PUSH
66269: LD_INT 12
66271: PUSH
66272: LD_INT 14
66274: PUSH
66275: LD_INT 13
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: PUSH
66284: LD_VAR 0 2
66288: PUSH
66289: LD_INT 9
66291: MINUS
66292: ARRAY
66293: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66294: LD_ADDR_OWVAR 45
66298: PUSH
66299: LD_INT 11
66301: PUSH
66302: LD_INT 15
66304: PUSH
66305: LD_INT 12
66307: PUSH
66308: LD_INT 15
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: PUSH
66317: LD_VAR 0 2
66321: PUSH
66322: LD_INT 9
66324: MINUS
66325: ARRAY
66326: ST_TO_ADDR
// end ; 14 :
66327: GO 66746
66329: LD_INT 14
66331: DOUBLE
66332: EQUAL
66333: IFTRUE 66337
66335: GO 66348
66337: POP
// bc_type := b_workshop ; 15 :
66338: LD_ADDR_OWVAR 42
66342: PUSH
66343: LD_INT 2
66345: ST_TO_ADDR
66346: GO 66746
66348: LD_INT 15
66350: DOUBLE
66351: EQUAL
66352: IFTRUE 66356
66354: GO 66367
66356: POP
// bc_type := b_factory ; 16 :
66357: LD_ADDR_OWVAR 42
66361: PUSH
66362: LD_INT 3
66364: ST_TO_ADDR
66365: GO 66746
66367: LD_INT 16
66369: DOUBLE
66370: EQUAL
66371: IFTRUE 66375
66373: GO 66386
66375: POP
// bc_type := b_ext_gun ; 17 :
66376: LD_ADDR_OWVAR 42
66380: PUSH
66381: LD_INT 17
66383: ST_TO_ADDR
66384: GO 66746
66386: LD_INT 17
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66394
66392: GO 66422
66394: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66395: LD_ADDR_OWVAR 42
66399: PUSH
66400: LD_INT 19
66402: PUSH
66403: LD_INT 23
66405: PUSH
66406: LD_INT 19
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: PUSH
66414: LD_VAR 0 1
66418: ARRAY
66419: ST_TO_ADDR
66420: GO 66746
66422: LD_INT 18
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66430
66428: GO 66441
66430: POP
// bc_type := b_ext_radar ; 19 :
66431: LD_ADDR_OWVAR 42
66435: PUSH
66436: LD_INT 20
66438: ST_TO_ADDR
66439: GO 66746
66441: LD_INT 19
66443: DOUBLE
66444: EQUAL
66445: IFTRUE 66449
66447: GO 66460
66449: POP
// bc_type := b_ext_radio ; 20 :
66450: LD_ADDR_OWVAR 42
66454: PUSH
66455: LD_INT 22
66457: ST_TO_ADDR
66458: GO 66746
66460: LD_INT 20
66462: DOUBLE
66463: EQUAL
66464: IFTRUE 66468
66466: GO 66479
66468: POP
// bc_type := b_ext_siberium ; 21 :
66469: LD_ADDR_OWVAR 42
66473: PUSH
66474: LD_INT 21
66476: ST_TO_ADDR
66477: GO 66746
66479: LD_INT 21
66481: DOUBLE
66482: EQUAL
66483: IFTRUE 66487
66485: GO 66498
66487: POP
// bc_type := b_ext_computer ; 22 :
66488: LD_ADDR_OWVAR 42
66492: PUSH
66493: LD_INT 24
66495: ST_TO_ADDR
66496: GO 66746
66498: LD_INT 22
66500: DOUBLE
66501: EQUAL
66502: IFTRUE 66506
66504: GO 66517
66506: POP
// bc_type := b_ext_track ; 23 :
66507: LD_ADDR_OWVAR 42
66511: PUSH
66512: LD_INT 16
66514: ST_TO_ADDR
66515: GO 66746
66517: LD_INT 23
66519: DOUBLE
66520: EQUAL
66521: IFTRUE 66525
66523: GO 66536
66525: POP
// bc_type := b_ext_laser ; 24 :
66526: LD_ADDR_OWVAR 42
66530: PUSH
66531: LD_INT 25
66533: ST_TO_ADDR
66534: GO 66746
66536: LD_INT 24
66538: DOUBLE
66539: EQUAL
66540: IFTRUE 66544
66542: GO 66555
66544: POP
// bc_type := b_control_tower ; 25 :
66545: LD_ADDR_OWVAR 42
66549: PUSH
66550: LD_INT 36
66552: ST_TO_ADDR
66553: GO 66746
66555: LD_INT 25
66557: DOUBLE
66558: EQUAL
66559: IFTRUE 66563
66561: GO 66574
66563: POP
// bc_type := b_breastwork ; 26 :
66564: LD_ADDR_OWVAR 42
66568: PUSH
66569: LD_INT 31
66571: ST_TO_ADDR
66572: GO 66746
66574: LD_INT 26
66576: DOUBLE
66577: EQUAL
66578: IFTRUE 66582
66580: GO 66593
66582: POP
// bc_type := b_bunker ; 27 :
66583: LD_ADDR_OWVAR 42
66587: PUSH
66588: LD_INT 32
66590: ST_TO_ADDR
66591: GO 66746
66593: LD_INT 27
66595: DOUBLE
66596: EQUAL
66597: IFTRUE 66601
66599: GO 66612
66601: POP
// bc_type := b_turret ; 28 :
66602: LD_ADDR_OWVAR 42
66606: PUSH
66607: LD_INT 33
66609: ST_TO_ADDR
66610: GO 66746
66612: LD_INT 28
66614: DOUBLE
66615: EQUAL
66616: IFTRUE 66620
66618: GO 66631
66620: POP
// bc_type := b_armoury ; 29 :
66621: LD_ADDR_OWVAR 42
66625: PUSH
66626: LD_INT 4
66628: ST_TO_ADDR
66629: GO 66746
66631: LD_INT 29
66633: DOUBLE
66634: EQUAL
66635: IFTRUE 66639
66637: GO 66650
66639: POP
// bc_type := b_barracks ; 30 :
66640: LD_ADDR_OWVAR 42
66644: PUSH
66645: LD_INT 5
66647: ST_TO_ADDR
66648: GO 66746
66650: LD_INT 30
66652: DOUBLE
66653: EQUAL
66654: IFTRUE 66658
66656: GO 66669
66658: POP
// bc_type := b_solar_power ; 31 :
66659: LD_ADDR_OWVAR 42
66663: PUSH
66664: LD_INT 27
66666: ST_TO_ADDR
66667: GO 66746
66669: LD_INT 31
66671: DOUBLE
66672: EQUAL
66673: IFTRUE 66677
66675: GO 66688
66677: POP
// bc_type := b_oil_power ; 32 :
66678: LD_ADDR_OWVAR 42
66682: PUSH
66683: LD_INT 26
66685: ST_TO_ADDR
66686: GO 66746
66688: LD_INT 32
66690: DOUBLE
66691: EQUAL
66692: IFTRUE 66696
66694: GO 66707
66696: POP
// bc_type := b_siberite_power ; 33 :
66697: LD_ADDR_OWVAR 42
66701: PUSH
66702: LD_INT 28
66704: ST_TO_ADDR
66705: GO 66746
66707: LD_INT 33
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66715
66713: GO 66726
66715: POP
// bc_type := b_oil_mine ; 34 :
66716: LD_ADDR_OWVAR 42
66720: PUSH
66721: LD_INT 29
66723: ST_TO_ADDR
66724: GO 66746
66726: LD_INT 34
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66745
66734: POP
// bc_type := b_siberite_mine ; end ;
66735: LD_ADDR_OWVAR 42
66739: PUSH
66740: LD_INT 30
66742: ST_TO_ADDR
66743: GO 66746
66745: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66746: LD_ADDR_VAR 0 8
66750: PUSH
66751: LD_VAR 0 5
66755: PPUSH
66756: LD_VAR 0 6
66760: PPUSH
66761: LD_VAR 0 3
66765: PPUSH
66766: CALL_OW 47
66770: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66771: LD_OWVAR 42
66775: PUSH
66776: LD_INT 32
66778: PUSH
66779: LD_INT 33
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: IN
66786: IFFALSE 66802
// PlaceWeaponTurret ( b , weapon ) ;
66788: LD_VAR 0 8
66792: PPUSH
66793: LD_VAR 0 4
66797: PPUSH
66798: CALL_OW 431
// end ;
66802: LD_VAR 0 7
66806: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66807: LD_INT 0
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66813: LD_ADDR_VAR 0 4
66817: PUSH
66818: LD_INT 22
66820: PUSH
66821: LD_OWVAR 2
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: LD_INT 30
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 30
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PPUSH
66862: CALL_OW 69
66866: ST_TO_ADDR
// if not tmp then
66867: LD_VAR 0 4
66871: NOT
66872: IFFALSE 66876
// exit ;
66874: GO 66935
// for i in tmp do
66876: LD_ADDR_VAR 0 2
66880: PUSH
66881: LD_VAR 0 4
66885: PUSH
66886: FOR_IN
66887: IFFALSE 66933
// for j = 1 to 3 do
66889: LD_ADDR_VAR 0 3
66893: PUSH
66894: DOUBLE
66895: LD_INT 1
66897: DEC
66898: ST_TO_ADDR
66899: LD_INT 3
66901: PUSH
66902: FOR_TO
66903: IFFALSE 66929
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66905: LD_VAR 0 2
66909: PPUSH
66910: CALL_OW 274
66914: PPUSH
66915: LD_VAR 0 3
66919: PPUSH
66920: LD_INT 99999
66922: PPUSH
66923: CALL_OW 277
66927: GO 66902
66929: POP
66930: POP
66931: GO 66886
66933: POP
66934: POP
// end ;
66935: LD_VAR 0 1
66939: RET
// export function hHackSetLevel10 ; var i , j ; begin
66940: LD_INT 0
66942: PPUSH
66943: PPUSH
66944: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_INT 21
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PPUSH
66960: CALL_OW 69
66964: PUSH
66965: FOR_IN
66966: IFFALSE 67018
// if IsSelected ( i ) then
66968: LD_VAR 0 2
66972: PPUSH
66973: CALL_OW 306
66977: IFFALSE 67016
// begin for j := 1 to 4 do
66979: LD_ADDR_VAR 0 3
66983: PUSH
66984: DOUBLE
66985: LD_INT 1
66987: DEC
66988: ST_TO_ADDR
66989: LD_INT 4
66991: PUSH
66992: FOR_TO
66993: IFFALSE 67014
// SetSkill ( i , j , 10 ) ;
66995: LD_VAR 0 2
66999: PPUSH
67000: LD_VAR 0 3
67004: PPUSH
67005: LD_INT 10
67007: PPUSH
67008: CALL_OW 237
67012: GO 66992
67014: POP
67015: POP
// end ;
67016: GO 66965
67018: POP
67019: POP
// end ;
67020: LD_VAR 0 1
67024: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67025: LD_INT 0
67027: PPUSH
67028: PPUSH
67029: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67030: LD_ADDR_VAR 0 2
67034: PUSH
67035: LD_INT 22
67037: PUSH
67038: LD_OWVAR 2
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 21
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PPUSH
67061: CALL_OW 69
67065: PUSH
67066: FOR_IN
67067: IFFALSE 67108
// begin for j := 1 to 4 do
67069: LD_ADDR_VAR 0 3
67073: PUSH
67074: DOUBLE
67075: LD_INT 1
67077: DEC
67078: ST_TO_ADDR
67079: LD_INT 4
67081: PUSH
67082: FOR_TO
67083: IFFALSE 67104
// SetSkill ( i , j , 10 ) ;
67085: LD_VAR 0 2
67089: PPUSH
67090: LD_VAR 0 3
67094: PPUSH
67095: LD_INT 10
67097: PPUSH
67098: CALL_OW 237
67102: GO 67082
67104: POP
67105: POP
// end ;
67106: GO 67066
67108: POP
67109: POP
// end ;
67110: LD_VAR 0 1
67114: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67115: LD_INT 0
67117: PPUSH
// uc_side := your_side ;
67118: LD_ADDR_OWVAR 20
67122: PUSH
67123: LD_OWVAR 2
67127: ST_TO_ADDR
// uc_nation := nation ;
67128: LD_ADDR_OWVAR 21
67132: PUSH
67133: LD_VAR 0 1
67137: ST_TO_ADDR
// InitHc ;
67138: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67142: LD_INT 0
67144: PPUSH
67145: LD_VAR 0 2
67149: PPUSH
67150: LD_VAR 0 3
67154: PPUSH
67155: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67159: LD_VAR 0 4
67163: PPUSH
67164: LD_VAR 0 5
67168: PPUSH
67169: CALL_OW 428
67173: PUSH
67174: LD_INT 0
67176: EQUAL
67177: IFFALSE 67201
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67179: CALL_OW 44
67183: PPUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: LD_VAR 0 5
67193: PPUSH
67194: LD_INT 1
67196: PPUSH
67197: CALL_OW 48
// end ;
67201: LD_VAR 0 6
67205: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67206: LD_INT 0
67208: PPUSH
67209: PPUSH
// uc_side := your_side ;
67210: LD_ADDR_OWVAR 20
67214: PUSH
67215: LD_OWVAR 2
67219: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67220: LD_VAR 0 1
67224: PUSH
67225: LD_INT 1
67227: PUSH
67228: LD_INT 2
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: LD_INT 4
67236: PUSH
67237: LD_INT 5
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: IN
67247: IFFALSE 67259
// uc_nation := nation_american else
67249: LD_ADDR_OWVAR 21
67253: PUSH
67254: LD_INT 1
67256: ST_TO_ADDR
67257: GO 67302
// if chassis in [ 11 , 12 , 13 , 14 ] then
67259: LD_VAR 0 1
67263: PUSH
67264: LD_INT 11
67266: PUSH
67267: LD_INT 12
67269: PUSH
67270: LD_INT 13
67272: PUSH
67273: LD_INT 14
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: IN
67282: IFFALSE 67294
// uc_nation := nation_arabian else
67284: LD_ADDR_OWVAR 21
67288: PUSH
67289: LD_INT 2
67291: ST_TO_ADDR
67292: GO 67302
// uc_nation := nation_russian ;
67294: LD_ADDR_OWVAR 21
67298: PUSH
67299: LD_INT 3
67301: ST_TO_ADDR
// vc_chassis := chassis ;
67302: LD_ADDR_OWVAR 37
67306: PUSH
67307: LD_VAR 0 1
67311: ST_TO_ADDR
// vc_engine := engine ;
67312: LD_ADDR_OWVAR 39
67316: PUSH
67317: LD_VAR 0 2
67321: ST_TO_ADDR
// vc_control := control ;
67322: LD_ADDR_OWVAR 38
67326: PUSH
67327: LD_VAR 0 3
67331: ST_TO_ADDR
// vc_weapon := weapon ;
67332: LD_ADDR_OWVAR 40
67336: PUSH
67337: LD_VAR 0 4
67341: ST_TO_ADDR
// un := CreateVehicle ;
67342: LD_ADDR_VAR 0 8
67346: PUSH
67347: CALL_OW 45
67351: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67352: LD_VAR 0 8
67356: PPUSH
67357: LD_INT 0
67359: PPUSH
67360: LD_INT 5
67362: PPUSH
67363: CALL_OW 12
67367: PPUSH
67368: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67372: LD_VAR 0 8
67376: PPUSH
67377: LD_VAR 0 5
67381: PPUSH
67382: LD_VAR 0 6
67386: PPUSH
67387: LD_INT 1
67389: PPUSH
67390: CALL_OW 48
// end ;
67394: LD_VAR 0 7
67398: RET
// export hInvincible ; every 1 do
67399: GO 67401
67401: DISABLE
// hInvincible := [ ] ;
67402: LD_ADDR_EXP 95
67406: PUSH
67407: EMPTY
67408: ST_TO_ADDR
67409: END
// every 10 do var i ;
67410: GO 67412
67412: DISABLE
67413: LD_INT 0
67415: PPUSH
// begin enable ;
67416: ENABLE
// if not hInvincible then
67417: LD_EXP 95
67421: NOT
67422: IFFALSE 67426
// exit ;
67424: GO 67470
// for i in hInvincible do
67426: LD_ADDR_VAR 0 1
67430: PUSH
67431: LD_EXP 95
67435: PUSH
67436: FOR_IN
67437: IFFALSE 67468
// if GetLives ( i ) < 1000 then
67439: LD_VAR 0 1
67443: PPUSH
67444: CALL_OW 256
67448: PUSH
67449: LD_INT 1000
67451: LESS
67452: IFFALSE 67466
// SetLives ( i , 1000 ) ;
67454: LD_VAR 0 1
67458: PPUSH
67459: LD_INT 1000
67461: PPUSH
67462: CALL_OW 234
67466: GO 67436
67468: POP
67469: POP
// end ;
67470: PPOPN 1
67472: END
// export function hHackInvincible ; var i ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67477: LD_ADDR_VAR 0 2
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: LD_INT 21
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 21
67497: PUSH
67498: LD_INT 2
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: LIST
67509: PPUSH
67510: CALL_OW 69
67514: PUSH
67515: FOR_IN
67516: IFFALSE 67577
// if IsSelected ( i ) then
67518: LD_VAR 0 2
67522: PPUSH
67523: CALL_OW 306
67527: IFFALSE 67575
// begin if i in hInvincible then
67529: LD_VAR 0 2
67533: PUSH
67534: LD_EXP 95
67538: IN
67539: IFFALSE 67559
// hInvincible := hInvincible diff i else
67541: LD_ADDR_EXP 95
67545: PUSH
67546: LD_EXP 95
67550: PUSH
67551: LD_VAR 0 2
67555: DIFF
67556: ST_TO_ADDR
67557: GO 67575
// hInvincible := hInvincible union i ;
67559: LD_ADDR_EXP 95
67563: PUSH
67564: LD_EXP 95
67568: PUSH
67569: LD_VAR 0 2
67573: UNION
67574: ST_TO_ADDR
// end ;
67575: GO 67515
67577: POP
67578: POP
// end ;
67579: LD_VAR 0 1
67583: RET
// export function hHackInvisible ; var i , j ; begin
67584: LD_INT 0
67586: PPUSH
67587: PPUSH
67588: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67589: LD_ADDR_VAR 0 2
67593: PUSH
67594: LD_INT 21
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PPUSH
67604: CALL_OW 69
67608: PUSH
67609: FOR_IN
67610: IFFALSE 67634
// if IsSelected ( i ) then
67612: LD_VAR 0 2
67616: PPUSH
67617: CALL_OW 306
67621: IFFALSE 67632
// ComForceInvisible ( i ) ;
67623: LD_VAR 0 2
67627: PPUSH
67628: CALL_OW 496
67632: GO 67609
67634: POP
67635: POP
// end ;
67636: LD_VAR 0 1
67640: RET
// export function hHackChangeYourSide ; begin
67641: LD_INT 0
67643: PPUSH
// if your_side = 8 then
67644: LD_OWVAR 2
67648: PUSH
67649: LD_INT 8
67651: EQUAL
67652: IFFALSE 67664
// your_side := 0 else
67654: LD_ADDR_OWVAR 2
67658: PUSH
67659: LD_INT 0
67661: ST_TO_ADDR
67662: GO 67678
// your_side := your_side + 1 ;
67664: LD_ADDR_OWVAR 2
67668: PUSH
67669: LD_OWVAR 2
67673: PUSH
67674: LD_INT 1
67676: PLUS
67677: ST_TO_ADDR
// end ;
67678: LD_VAR 0 1
67682: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
67687: PPUSH
// for i in all_units do
67688: LD_ADDR_VAR 0 2
67692: PUSH
67693: LD_OWVAR 3
67697: PUSH
67698: FOR_IN
67699: IFFALSE 67777
// if IsSelected ( i ) then
67701: LD_VAR 0 2
67705: PPUSH
67706: CALL_OW 306
67710: IFFALSE 67775
// begin j := GetSide ( i ) ;
67712: LD_ADDR_VAR 0 3
67716: PUSH
67717: LD_VAR 0 2
67721: PPUSH
67722: CALL_OW 255
67726: ST_TO_ADDR
// if j = 8 then
67727: LD_VAR 0 3
67731: PUSH
67732: LD_INT 8
67734: EQUAL
67735: IFFALSE 67747
// j := 0 else
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_INT 0
67744: ST_TO_ADDR
67745: GO 67761
// j := j + 1 ;
67747: LD_ADDR_VAR 0 3
67751: PUSH
67752: LD_VAR 0 3
67756: PUSH
67757: LD_INT 1
67759: PLUS
67760: ST_TO_ADDR
// SetSide ( i , j ) ;
67761: LD_VAR 0 2
67765: PPUSH
67766: LD_VAR 0 3
67770: PPUSH
67771: CALL_OW 235
// end ;
67775: GO 67698
67777: POP
67778: POP
// end ;
67779: LD_VAR 0 1
67783: RET
// export function hHackFog ; begin
67784: LD_INT 0
67786: PPUSH
// FogOff ( true ) ;
67787: LD_INT 1
67789: PPUSH
67790: CALL_OW 344
// end ;
67794: LD_VAR 0 1
67798: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67799: LD_INT 0
67801: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: LD_INT 1
67819: PPUSH
67820: LD_INT 1
67822: PPUSH
67823: CALL_OW 483
// CenterOnXY ( x , y ) ;
67827: LD_VAR 0 2
67831: PPUSH
67832: LD_VAR 0 3
67836: PPUSH
67837: CALL_OW 84
// end ;
67841: LD_VAR 0 4
67845: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67846: LD_INT 0
67848: PPUSH
67849: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67850: LD_VAR 0 1
67854: NOT
67855: PUSH
67856: LD_VAR 0 2
67860: PPUSH
67861: LD_VAR 0 3
67865: PPUSH
67866: CALL_OW 488
67870: NOT
67871: OR
67872: PUSH
67873: LD_VAR 0 1
67877: PPUSH
67878: CALL_OW 266
67882: PUSH
67883: LD_INT 3
67885: NONEQUAL
67886: PUSH
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 247
67896: PUSH
67897: LD_INT 1
67899: EQUAL
67900: NOT
67901: AND
67902: OR
67903: IFFALSE 67907
// exit ;
67905: GO 68189
// if GetType ( factory ) = unit_human then
67907: LD_VAR 0 1
67911: PPUSH
67912: CALL_OW 247
67916: PUSH
67917: LD_INT 1
67919: EQUAL
67920: IFFALSE 67937
// factory := IsInUnit ( factory ) ;
67922: LD_ADDR_VAR 0 1
67926: PUSH
67927: LD_VAR 0 1
67931: PPUSH
67932: CALL_OW 310
67936: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 266
67946: PUSH
67947: LD_INT 3
67949: NONEQUAL
67950: IFFALSE 67954
// exit ;
67952: GO 68189
// for i := 1 to Count ( factoryWaypoints ) do
67954: LD_ADDR_VAR 0 5
67958: PUSH
67959: DOUBLE
67960: LD_INT 1
67962: DEC
67963: ST_TO_ADDR
67964: LD_EXP 96
67968: PPUSH
67969: CALL 12364 0 1
67973: PUSH
67974: FOR_TO
67975: IFFALSE 68137
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67977: LD_VAR 0 2
67981: PPUSH
67982: LD_VAR 0 3
67986: PPUSH
67987: CALL_OW 428
67991: PUSH
67992: LD_EXP 96
67996: PUSH
67997: LD_VAR 0 5
68001: ARRAY
68002: PUSH
68003: LD_INT 2
68005: ARRAY
68006: EQUAL
68007: IFFALSE 68039
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68009: LD_ADDR_EXP 96
68013: PUSH
68014: LD_EXP 96
68018: PPUSH
68019: LD_VAR 0 5
68023: PPUSH
68024: CALL_OW 3
68028: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68029: CALL 68194 0 0
// exit ;
68033: POP
68034: POP
68035: GO 68189
// end else
68037: GO 68135
// if factory = factoryWaypoints [ i ] [ 2 ] then
68039: LD_VAR 0 1
68043: PUSH
68044: LD_EXP 96
68048: PUSH
68049: LD_VAR 0 5
68053: ARRAY
68054: PUSH
68055: LD_INT 2
68057: ARRAY
68058: EQUAL
68059: IFFALSE 68135
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68061: LD_ADDR_EXP 96
68065: PUSH
68066: LD_EXP 96
68070: PPUSH
68071: LD_VAR 0 5
68075: PPUSH
68076: CALL_OW 3
68080: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68081: LD_ADDR_EXP 96
68085: PUSH
68086: LD_EXP 96
68090: PPUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: CALL_OW 255
68100: PUSH
68101: LD_VAR 0 1
68105: PUSH
68106: LD_VAR 0 2
68110: PUSH
68111: LD_VAR 0 3
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: PPUSH
68122: CALL 48114 0 2
68126: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68127: CALL 68194 0 0
// exit ;
68131: POP
68132: POP
68133: GO 68189
// end ; end ;
68135: GO 67974
68137: POP
68138: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68139: LD_ADDR_EXP 96
68143: PUSH
68144: LD_EXP 96
68148: PPUSH
68149: LD_VAR 0 1
68153: PPUSH
68154: CALL_OW 255
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: LD_VAR 0 2
68168: PUSH
68169: LD_VAR 0 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL 48114 0 2
68184: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68185: CALL 68194 0 0
// end ;
68189: LD_VAR 0 4
68193: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68194: LD_INT 0
68196: PPUSH
68197: PPUSH
68198: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68199: LD_STRING resetFactoryWaypoint();
68201: PPUSH
68202: CALL_OW 559
// if factoryWaypoints then
68206: LD_EXP 96
68210: IFFALSE 68331
// begin list := factoryWaypoints ;
68212: LD_ADDR_VAR 0 3
68216: PUSH
68217: LD_EXP 96
68221: ST_TO_ADDR
// for i := 1 to list do
68222: LD_ADDR_VAR 0 2
68226: PUSH
68227: DOUBLE
68228: LD_INT 1
68230: DEC
68231: ST_TO_ADDR
68232: LD_VAR 0 3
68236: PUSH
68237: FOR_TO
68238: IFFALSE 68329
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68240: LD_STRING setFactoryWaypointXY(
68242: PUSH
68243: LD_VAR 0 3
68247: PUSH
68248: LD_VAR 0 2
68252: ARRAY
68253: PUSH
68254: LD_INT 1
68256: ARRAY
68257: STR
68258: PUSH
68259: LD_STRING ,
68261: STR
68262: PUSH
68263: LD_VAR 0 3
68267: PUSH
68268: LD_VAR 0 2
68272: ARRAY
68273: PUSH
68274: LD_INT 2
68276: ARRAY
68277: STR
68278: PUSH
68279: LD_STRING ,
68281: STR
68282: PUSH
68283: LD_VAR 0 3
68287: PUSH
68288: LD_VAR 0 2
68292: ARRAY
68293: PUSH
68294: LD_INT 3
68296: ARRAY
68297: STR
68298: PUSH
68299: LD_STRING ,
68301: STR
68302: PUSH
68303: LD_VAR 0 3
68307: PUSH
68308: LD_VAR 0 2
68312: ARRAY
68313: PUSH
68314: LD_INT 4
68316: ARRAY
68317: STR
68318: PUSH
68319: LD_STRING )
68321: STR
68322: PPUSH
68323: CALL_OW 559
68327: GO 68237
68329: POP
68330: POP
// end ; end ;
68331: LD_VAR 0 1
68335: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68336: LD_INT 0
68338: PPUSH
// if HexInfo ( x , y ) = warehouse then
68339: LD_VAR 0 2
68343: PPUSH
68344: LD_VAR 0 3
68348: PPUSH
68349: CALL_OW 428
68353: PUSH
68354: LD_VAR 0 1
68358: EQUAL
68359: IFFALSE 68386
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68361: LD_ADDR_EXP 98
68365: PUSH
68366: LD_EXP 98
68370: PPUSH
68371: LD_VAR 0 1
68375: PPUSH
68376: LD_INT 0
68378: PPUSH
68379: CALL_OW 1
68383: ST_TO_ADDR
68384: GO 68437
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68386: LD_ADDR_EXP 98
68390: PUSH
68391: LD_EXP 98
68395: PPUSH
68396: LD_VAR 0 1
68400: PPUSH
68401: LD_VAR 0 1
68405: PPUSH
68406: CALL_OW 255
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_VAR 0 2
68420: PUSH
68421: LD_VAR 0 3
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: PPUSH
68432: CALL_OW 1
68436: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68437: CALL 68446 0 0
// end ;
68441: LD_VAR 0 4
68445: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68446: LD_INT 0
68448: PPUSH
68449: PPUSH
68450: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68451: LD_STRING resetWarehouseGatheringPoints();
68453: PPUSH
68454: CALL_OW 559
// if warehouseGatheringPoints then
68458: LD_EXP 98
68462: IFFALSE 68588
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68464: LD_ADDR_VAR 0 3
68468: PUSH
68469: LD_EXP 98
68473: PPUSH
68474: CALL 52016 0 1
68478: ST_TO_ADDR
// for i := 1 to list do
68479: LD_ADDR_VAR 0 2
68483: PUSH
68484: DOUBLE
68485: LD_INT 1
68487: DEC
68488: ST_TO_ADDR
68489: LD_VAR 0 3
68493: PUSH
68494: FOR_TO
68495: IFFALSE 68586
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68497: LD_STRING setWarehouseGatheringPointXY(
68499: PUSH
68500: LD_VAR 0 3
68504: PUSH
68505: LD_VAR 0 2
68509: ARRAY
68510: PUSH
68511: LD_INT 1
68513: ARRAY
68514: STR
68515: PUSH
68516: LD_STRING ,
68518: STR
68519: PUSH
68520: LD_VAR 0 3
68524: PUSH
68525: LD_VAR 0 2
68529: ARRAY
68530: PUSH
68531: LD_INT 2
68533: ARRAY
68534: STR
68535: PUSH
68536: LD_STRING ,
68538: STR
68539: PUSH
68540: LD_VAR 0 3
68544: PUSH
68545: LD_VAR 0 2
68549: ARRAY
68550: PUSH
68551: LD_INT 3
68553: ARRAY
68554: STR
68555: PUSH
68556: LD_STRING ,
68558: STR
68559: PUSH
68560: LD_VAR 0 3
68564: PUSH
68565: LD_VAR 0 2
68569: ARRAY
68570: PUSH
68571: LD_INT 4
68573: ARRAY
68574: STR
68575: PUSH
68576: LD_STRING )
68578: STR
68579: PPUSH
68580: CALL_OW 559
68584: GO 68494
68586: POP
68587: POP
// end ; end ;
68588: LD_VAR 0 1
68592: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68593: LD_EXP 98
68597: IFFALSE 69282
68599: GO 68601
68601: DISABLE
68602: LD_INT 0
68604: PPUSH
68605: PPUSH
68606: PPUSH
68607: PPUSH
68608: PPUSH
68609: PPUSH
68610: PPUSH
68611: PPUSH
68612: PPUSH
// begin enable ;
68613: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_EXP 98
68623: PPUSH
68624: CALL 52016 0 1
68628: ST_TO_ADDR
// if not list then
68629: LD_VAR 0 3
68633: NOT
68634: IFFALSE 68638
// exit ;
68636: GO 69282
// for i := 1 to list do
68638: LD_ADDR_VAR 0 1
68642: PUSH
68643: DOUBLE
68644: LD_INT 1
68646: DEC
68647: ST_TO_ADDR
68648: LD_VAR 0 3
68652: PUSH
68653: FOR_TO
68654: IFFALSE 69280
// begin depot := list [ i ] [ 2 ] ;
68656: LD_ADDR_VAR 0 8
68660: PUSH
68661: LD_VAR 0 3
68665: PUSH
68666: LD_VAR 0 1
68670: ARRAY
68671: PUSH
68672: LD_INT 2
68674: ARRAY
68675: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68676: LD_ADDR_VAR 0 5
68680: PUSH
68681: LD_VAR 0 3
68685: PUSH
68686: LD_VAR 0 1
68690: ARRAY
68691: PUSH
68692: LD_INT 1
68694: ARRAY
68695: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68696: LD_VAR 0 8
68700: PPUSH
68701: CALL_OW 301
68705: PUSH
68706: LD_VAR 0 5
68710: PUSH
68711: LD_VAR 0 8
68715: PPUSH
68716: CALL_OW 255
68720: NONEQUAL
68721: OR
68722: IFFALSE 68751
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68724: LD_ADDR_EXP 98
68728: PUSH
68729: LD_EXP 98
68733: PPUSH
68734: LD_VAR 0 8
68738: PPUSH
68739: LD_INT 0
68741: PPUSH
68742: CALL_OW 1
68746: ST_TO_ADDR
// exit ;
68747: POP
68748: POP
68749: GO 69282
// end ; x := list [ i ] [ 3 ] ;
68751: LD_ADDR_VAR 0 6
68755: PUSH
68756: LD_VAR 0 3
68760: PUSH
68761: LD_VAR 0 1
68765: ARRAY
68766: PUSH
68767: LD_INT 3
68769: ARRAY
68770: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68771: LD_ADDR_VAR 0 7
68775: PUSH
68776: LD_VAR 0 3
68780: PUSH
68781: LD_VAR 0 1
68785: ARRAY
68786: PUSH
68787: LD_INT 4
68789: ARRAY
68790: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68791: LD_ADDR_VAR 0 9
68795: PUSH
68796: LD_VAR 0 6
68800: PPUSH
68801: LD_VAR 0 7
68805: PPUSH
68806: LD_INT 16
68808: PPUSH
68809: CALL 50600 0 3
68813: ST_TO_ADDR
// if not cratesNearbyPoint then
68814: LD_VAR 0 9
68818: NOT
68819: IFFALSE 68825
// exit ;
68821: POP
68822: POP
68823: GO 69282
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68825: LD_ADDR_VAR 0 4
68829: PUSH
68830: LD_INT 22
68832: PUSH
68833: LD_VAR 0 5
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 60
68847: PUSH
68848: EMPTY
68849: LIST
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 91
68857: PUSH
68858: LD_VAR 0 8
68862: PUSH
68863: LD_INT 6
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: LD_INT 25
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 25
68886: PUSH
68887: LD_INT 16
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: PPUSH
68905: CALL_OW 69
68909: PUSH
68910: LD_VAR 0 8
68914: PPUSH
68915: CALL_OW 313
68919: PPUSH
68920: LD_INT 3
68922: PUSH
68923: LD_INT 60
68925: PUSH
68926: EMPTY
68927: LIST
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: LD_INT 25
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 25
68948: PUSH
68949: LD_INT 16
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PPUSH
68965: CALL_OW 72
68969: UNION
68970: ST_TO_ADDR
// if tmp then
68971: LD_VAR 0 4
68975: IFFALSE 69055
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68977: LD_ADDR_VAR 0 4
68981: PUSH
68982: LD_VAR 0 4
68986: PPUSH
68987: LD_INT 3
68989: PPUSH
68990: CALL 48429 0 2
68994: ST_TO_ADDR
// for j in tmp do
68995: LD_ADDR_VAR 0 2
68999: PUSH
69000: LD_VAR 0 4
69004: PUSH
69005: FOR_IN
69006: IFFALSE 69049
// begin if IsInUnit ( j ) then
69008: LD_VAR 0 2
69012: PPUSH
69013: CALL_OW 310
69017: IFFALSE 69028
// ComExit ( j ) ;
69019: LD_VAR 0 2
69023: PPUSH
69024: CALL 48512 0 1
// AddComCollect ( j , x , y ) ;
69028: LD_VAR 0 2
69032: PPUSH
69033: LD_VAR 0 6
69037: PPUSH
69038: LD_VAR 0 7
69042: PPUSH
69043: CALL_OW 177
// end ;
69047: GO 69005
69049: POP
69050: POP
// exit ;
69051: POP
69052: POP
69053: GO 69282
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69055: LD_ADDR_VAR 0 4
69059: PUSH
69060: LD_INT 22
69062: PUSH
69063: LD_VAR 0 5
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 91
69074: PUSH
69075: LD_VAR 0 8
69079: PUSH
69080: LD_INT 8
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: LD_INT 34
69093: PUSH
69094: LD_INT 12
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 34
69103: PUSH
69104: LD_INT 51
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 34
69113: PUSH
69114: LD_INT 32
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 34
69123: PUSH
69124: LD_INT 89
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: LIST
69142: PPUSH
69143: CALL_OW 69
69147: ST_TO_ADDR
// if tmp then
69148: LD_VAR 0 4
69152: IFFALSE 69278
// begin for j in tmp do
69154: LD_ADDR_VAR 0 2
69158: PUSH
69159: LD_VAR 0 4
69163: PUSH
69164: FOR_IN
69165: IFFALSE 69276
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69167: LD_VAR 0 2
69171: PPUSH
69172: CALL_OW 262
69176: PUSH
69177: LD_INT 3
69179: EQUAL
69180: PUSH
69181: LD_VAR 0 2
69185: PPUSH
69186: CALL_OW 261
69190: PUSH
69191: LD_INT 20
69193: GREATER
69194: OR
69195: PUSH
69196: LD_VAR 0 2
69200: PPUSH
69201: CALL_OW 314
69205: NOT
69206: AND
69207: PUSH
69208: LD_VAR 0 2
69212: PPUSH
69213: CALL_OW 263
69217: PUSH
69218: LD_INT 1
69220: NONEQUAL
69221: PUSH
69222: LD_VAR 0 2
69226: PPUSH
69227: CALL_OW 311
69231: OR
69232: AND
69233: IFFALSE 69274
// begin ComCollect ( j , x , y ) ;
69235: LD_VAR 0 2
69239: PPUSH
69240: LD_VAR 0 6
69244: PPUSH
69245: LD_VAR 0 7
69249: PPUSH
69250: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69254: LD_VAR 0 2
69258: PPUSH
69259: LD_VAR 0 8
69263: PPUSH
69264: CALL_OW 172
// exit ;
69268: POP
69269: POP
69270: POP
69271: POP
69272: GO 69282
// end ;
69274: GO 69164
69276: POP
69277: POP
// end ; end ;
69278: GO 68653
69280: POP
69281: POP
// end ; end_of_file
69282: PPOPN 9
69284: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69285: LD_VAR 0 1
69289: PPUSH
69290: LD_VAR 0 2
69294: PPUSH
69295: LD_VAR 0 3
69299: PPUSH
69300: LD_VAR 0 4
69304: PPUSH
69305: LD_VAR 0 5
69309: PPUSH
69310: LD_VAR 0 6
69314: PPUSH
69315: CALL 53510 0 6
// end ;
69319: PPOPN 6
69321: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69322: LD_INT 0
69324: PPUSH
// begin if not units then
69325: LD_VAR 0 1
69329: NOT
69330: IFFALSE 69334
// exit ;
69332: GO 69334
// end ;
69334: PPOPN 7
69336: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69337: CALL 53397 0 0
// end ; end_of_file
69341: PPOPN 1
69343: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69344: LD_VAR 0 1
69348: PUSH
69349: LD_INT 200
69351: DOUBLE
69352: GREATEREQUAL
69353: IFFALSE 69361
69355: LD_INT 299
69357: DOUBLE
69358: LESSEQUAL
69359: IFTRUE 69363
69361: GO 69395
69363: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69364: LD_VAR 0 1
69368: PPUSH
69369: LD_VAR 0 2
69373: PPUSH
69374: LD_VAR 0 3
69378: PPUSH
69379: LD_VAR 0 4
69383: PPUSH
69384: LD_VAR 0 5
69388: PPUSH
69389: CALL 70172 0 5
69393: GO 69472
69395: LD_INT 300
69397: DOUBLE
69398: GREATEREQUAL
69399: IFFALSE 69407
69401: LD_INT 399
69403: DOUBLE
69404: LESSEQUAL
69405: IFTRUE 69409
69407: GO 69471
69409: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_VAR 0 2
69419: PPUSH
69420: LD_VAR 0 3
69424: PPUSH
69425: LD_VAR 0 4
69429: PPUSH
69430: LD_VAR 0 5
69434: PPUSH
69435: LD_VAR 0 6
69439: PPUSH
69440: LD_VAR 0 7
69444: PPUSH
69445: LD_VAR 0 8
69449: PPUSH
69450: LD_VAR 0 9
69454: PPUSH
69455: LD_VAR 0 10
69459: PPUSH
69460: LD_VAR 0 11
69464: PPUSH
69465: CALL 65858 0 11
69469: GO 69472
69471: POP
// end ;
69472: PPOPN 11
69474: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69475: LD_VAR 0 1
69479: PPUSH
69480: LD_VAR 0 2
69484: PPUSH
69485: LD_VAR 0 3
69489: PPUSH
69490: LD_VAR 0 4
69494: PPUSH
69495: LD_VAR 0 5
69499: PPUSH
69500: CALL 69557 0 5
// end ; end_of_file
69504: PPOPN 5
69506: END
// export function SOS_UnitDestroyed ( un ) ; begin
69507: LD_INT 0
69509: PPUSH
// ComRadiation ( un ) ;
69510: LD_VAR 0 1
69514: PPUSH
69515: CALL 70576 0 1
// end ;
69519: LD_VAR 0 2
69523: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69524: LD_INT 0
69526: PPUSH
// ComRadiation ( un ) ;
69527: LD_VAR 0 1
69531: PPUSH
69532: CALL 70576 0 1
// end ;
69536: LD_VAR 0 2
69540: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69541: LD_INT 0
69543: PPUSH
// end ;
69544: LD_VAR 0 4
69548: RET
// export function SOS_Command ( cmd ) ; begin
69549: LD_INT 0
69551: PPUSH
// end ;
69552: LD_VAR 0 2
69556: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69557: LD_INT 0
69559: PPUSH
// end ;
69560: LD_VAR 0 6
69564: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
69565: LD_INT 0
69567: PPUSH
69568: PPUSH
69569: PPUSH
69570: PPUSH
// if not vehicle or not factory then
69571: LD_VAR 0 1
69575: NOT
69576: PUSH
69577: LD_VAR 0 2
69581: NOT
69582: OR
69583: IFFALSE 69587
// exit ;
69585: GO 70167
// if not factoryWaypoints then
69587: LD_EXP 96
69591: NOT
69592: IFFALSE 69596
// exit ;
69594: GO 70167
// for i := 1 to Count ( factoryWaypoints ) do
69596: LD_ADDR_VAR 0 4
69600: PUSH
69601: DOUBLE
69602: LD_INT 1
69604: DEC
69605: ST_TO_ADDR
69606: LD_EXP 96
69610: PPUSH
69611: CALL 12364 0 1
69615: PUSH
69616: FOR_TO
69617: IFFALSE 70165
// if factoryWaypoints [ i ] [ 2 ] = factory then
69619: LD_EXP 96
69623: PUSH
69624: LD_VAR 0 4
69628: ARRAY
69629: PUSH
69630: LD_INT 2
69632: ARRAY
69633: PUSH
69634: LD_VAR 0 2
69638: EQUAL
69639: IFFALSE 70163
// begin if GetControl ( vehicle ) = control_manual then
69641: LD_VAR 0 1
69645: PPUSH
69646: CALL_OW 263
69650: PUSH
69651: LD_INT 1
69653: EQUAL
69654: IFFALSE 70016
// begin driver := IsDrivenBy ( vehicle ) ;
69656: LD_ADDR_VAR 0 5
69660: PUSH
69661: LD_VAR 0 1
69665: PPUSH
69666: CALL_OW 311
69670: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
69671: LD_VAR 0 5
69675: PUSH
69676: LD_EXP 97
69680: IN
69681: PUSH
69682: LD_VAR 0 1
69686: PUSH
69687: LD_EXP 97
69691: IN
69692: OR
69693: IFFALSE 69699
// exit ;
69695: POP
69696: POP
69697: GO 70167
// if not HasTask ( driver ) then
69699: LD_VAR 0 5
69703: PPUSH
69704: CALL_OW 314
69708: NOT
69709: IFFALSE 70014
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
69711: LD_ADDR_EXP 97
69715: PUSH
69716: LD_EXP 97
69720: PPUSH
69721: LD_VAR 0 5
69725: PPUSH
69726: CALL 48114 0 2
69730: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
69731: LD_ADDR_EXP 97
69735: PUSH
69736: LD_EXP 97
69740: PPUSH
69741: LD_VAR 0 1
69745: PPUSH
69746: CALL 48114 0 2
69750: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69751: LD_ADDR_VAR 0 6
69755: PUSH
69756: LD_EXP 96
69760: PUSH
69761: LD_VAR 0 4
69765: ARRAY
69766: PUSH
69767: LD_INT 3
69769: ARRAY
69770: PPUSH
69771: LD_EXP 96
69775: PUSH
69776: LD_VAR 0 4
69780: ARRAY
69781: PUSH
69782: LD_INT 4
69784: ARRAY
69785: PPUSH
69786: CALL_OW 428
69790: ST_TO_ADDR
// if hex then
69791: LD_VAR 0 6
69795: IFFALSE 69813
// ComMoveUnit ( driver , hex ) else
69797: LD_VAR 0 5
69801: PPUSH
69802: LD_VAR 0 6
69806: PPUSH
69807: CALL_OW 112
69811: GO 69897
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
69813: LD_VAR 0 1
69817: PPUSH
69818: LD_EXP 96
69822: PUSH
69823: LD_VAR 0 4
69827: ARRAY
69828: PUSH
69829: LD_INT 3
69831: ARRAY
69832: PPUSH
69833: LD_EXP 96
69837: PUSH
69838: LD_VAR 0 4
69842: ARRAY
69843: PUSH
69844: LD_INT 4
69846: ARRAY
69847: PPUSH
69848: CALL_OW 297
69852: PUSH
69853: LD_INT 0
69855: GREATER
69856: IFFALSE 69897
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69858: LD_VAR 0 5
69862: PPUSH
69863: LD_EXP 96
69867: PUSH
69868: LD_VAR 0 4
69872: ARRAY
69873: PUSH
69874: LD_INT 3
69876: ARRAY
69877: PPUSH
69878: LD_EXP 96
69882: PUSH
69883: LD_VAR 0 4
69887: ARRAY
69888: PUSH
69889: LD_INT 4
69891: ARRAY
69892: PPUSH
69893: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69897: LD_VAR 0 5
69901: PPUSH
69902: CALL_OW 181
// if Multiplayer then
69906: LD_OWVAR 4
69910: IFFALSE 69959
// begin repeat wait ( 10 ) ;
69912: LD_INT 10
69914: PPUSH
69915: CALL_OW 67
// until not IsInUnit ( driver ) ;
69919: LD_VAR 0 5
69923: PPUSH
69924: CALL_OW 310
69928: NOT
69929: IFFALSE 69912
// if not HasTask ( driver ) then
69931: LD_VAR 0 5
69935: PPUSH
69936: CALL_OW 314
69940: NOT
69941: IFFALSE 69957
// ComEnterUnit ( driver , factory ) ;
69943: LD_VAR 0 5
69947: PPUSH
69948: LD_VAR 0 2
69952: PPUSH
69953: CALL_OW 120
// end else
69957: GO 69973
// AddComEnterUnit ( driver , factory ) ;
69959: LD_VAR 0 5
69963: PPUSH
69964: LD_VAR 0 2
69968: PPUSH
69969: CALL_OW 180
// wait ( 0 0$1 ) ;
69973: LD_INT 35
69975: PPUSH
69976: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
69980: LD_ADDR_EXP 97
69984: PUSH
69985: LD_EXP 97
69989: PUSH
69990: LD_VAR 0 5
69994: DIFF
69995: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
69996: LD_ADDR_EXP 97
70000: PUSH
70001: LD_EXP 97
70005: PUSH
70006: LD_VAR 0 1
70010: DIFF
70011: ST_TO_ADDR
// break ;
70012: GO 70165
// end ; end else
70014: GO 70163
// if GetControl ( vehicle ) = control_remote then
70016: LD_VAR 0 1
70020: PPUSH
70021: CALL_OW 263
70025: PUSH
70026: LD_INT 2
70028: EQUAL
70029: IFFALSE 70115
// begin wait ( 0 0$2 ) ;
70031: LD_INT 70
70033: PPUSH
70034: CALL_OW 67
// repeat wait ( 10 ) ;
70038: LD_INT 10
70040: PPUSH
70041: CALL_OW 67
// Connect ( vehicle ) ;
70045: LD_VAR 0 1
70049: PPUSH
70050: CALL 18570 0 1
// until IsControledBy ( vehicle ) ;
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 312
70063: IFFALSE 70038
// wait ( 10 ) ;
70065: LD_INT 10
70067: PPUSH
70068: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70072: LD_VAR 0 1
70076: PPUSH
70077: LD_EXP 96
70081: PUSH
70082: LD_VAR 0 4
70086: ARRAY
70087: PUSH
70088: LD_INT 3
70090: ARRAY
70091: PPUSH
70092: LD_EXP 96
70096: PUSH
70097: LD_VAR 0 4
70101: ARRAY
70102: PUSH
70103: LD_INT 4
70105: ARRAY
70106: PPUSH
70107: CALL_OW 111
// break ;
70111: GO 70165
// end else
70113: GO 70163
// begin wait ( 0 0$3 ) ;
70115: LD_INT 105
70117: PPUSH
70118: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70122: LD_VAR 0 1
70126: PPUSH
70127: LD_EXP 96
70131: PUSH
70132: LD_VAR 0 4
70136: ARRAY
70137: PUSH
70138: LD_INT 3
70140: ARRAY
70141: PPUSH
70142: LD_EXP 96
70146: PUSH
70147: LD_VAR 0 4
70151: ARRAY
70152: PUSH
70153: LD_INT 4
70155: ARRAY
70156: PPUSH
70157: CALL_OW 111
// break ;
70161: GO 70165
// end ; end ;
70163: GO 69616
70165: POP
70166: POP
// end ;
70167: LD_VAR 0 3
70171: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
70172: LD_INT 0
70174: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
70175: LD_VAR 0 1
70179: PUSH
70180: LD_INT 250
70182: EQUAL
70183: PUSH
70184: LD_VAR 0 2
70188: PPUSH
70189: CALL_OW 264
70193: PUSH
70194: LD_INT 81
70196: EQUAL
70197: AND
70198: IFFALSE 70219
// MinerPlaceMine ( unit , x , y ) ;
70200: LD_VAR 0 2
70204: PPUSH
70205: LD_VAR 0 4
70209: PPUSH
70210: LD_VAR 0 5
70214: PPUSH
70215: CALL 73311 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70219: LD_VAR 0 1
70223: PUSH
70224: LD_INT 251
70226: EQUAL
70227: PUSH
70228: LD_VAR 0 2
70232: PPUSH
70233: CALL_OW 264
70237: PUSH
70238: LD_INT 81
70240: EQUAL
70241: AND
70242: IFFALSE 70263
// MinerDetonateMine ( unit , x , y ) ;
70244: LD_VAR 0 2
70248: PPUSH
70249: LD_VAR 0 4
70253: PPUSH
70254: LD_VAR 0 5
70258: PPUSH
70259: CALL 73586 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
70263: LD_VAR 0 1
70267: PUSH
70268: LD_INT 252
70270: EQUAL
70271: PUSH
70272: LD_VAR 0 2
70276: PPUSH
70277: CALL_OW 264
70281: PUSH
70282: LD_INT 81
70284: EQUAL
70285: AND
70286: IFFALSE 70307
// MinerCreateMinefield ( unit , x , y ) ;
70288: LD_VAR 0 2
70292: PPUSH
70293: LD_VAR 0 4
70297: PPUSH
70298: LD_VAR 0 5
70302: PPUSH
70303: CALL 74003 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70307: LD_VAR 0 1
70311: PUSH
70312: LD_INT 253
70314: EQUAL
70315: PUSH
70316: LD_VAR 0 2
70320: PPUSH
70321: CALL_OW 257
70325: PUSH
70326: LD_INT 5
70328: EQUAL
70329: AND
70330: IFFALSE 70351
// ComBinocular ( unit , x , y ) ;
70332: LD_VAR 0 2
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: LD_VAR 0 5
70346: PPUSH
70347: CALL 74372 0 3
// if selectedUnit then
70351: LD_VAR 0 3
70355: IFFALSE 70411
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70357: LD_VAR 0 1
70361: PUSH
70362: LD_INT 254
70364: EQUAL
70365: PUSH
70366: LD_VAR 0 2
70370: PPUSH
70371: CALL_OW 264
70375: PUSH
70376: LD_INT 99
70378: EQUAL
70379: AND
70380: PUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: CALL_OW 263
70390: PUSH
70391: LD_INT 3
70393: EQUAL
70394: AND
70395: IFFALSE 70411
// HackDestroyVehicle ( unit , selectedUnit ) ;
70397: LD_VAR 0 2
70401: PPUSH
70402: LD_VAR 0 3
70406: PPUSH
70407: CALL 72675 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70411: LD_VAR 0 1
70415: PUSH
70416: LD_INT 255
70418: EQUAL
70419: PUSH
70420: LD_VAR 0 2
70424: PPUSH
70425: CALL_OW 264
70429: PUSH
70430: LD_INT 14
70432: PUSH
70433: LD_INT 53
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: IN
70440: AND
70441: PUSH
70442: LD_VAR 0 4
70446: PPUSH
70447: LD_VAR 0 5
70451: PPUSH
70452: CALL_OW 488
70456: AND
70457: IFFALSE 70481
// CutTreeXYR ( unit , x , y , 12 ) ;
70459: LD_VAR 0 2
70463: PPUSH
70464: LD_VAR 0 4
70468: PPUSH
70469: LD_VAR 0 5
70473: PPUSH
70474: LD_INT 12
70476: PPUSH
70477: CALL 70672 0 4
// if cmd = 256 then
70481: LD_VAR 0 1
70485: PUSH
70486: LD_INT 256
70488: EQUAL
70489: IFFALSE 70510
// SetFactoryWaypoint ( unit , x , y ) ;
70491: LD_VAR 0 2
70495: PPUSH
70496: LD_VAR 0 4
70500: PPUSH
70501: LD_VAR 0 5
70505: PPUSH
70506: CALL 67846 0 3
// if cmd = 257 then
70510: LD_VAR 0 1
70514: PUSH
70515: LD_INT 257
70517: EQUAL
70518: IFFALSE 70539
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70520: LD_VAR 0 2
70524: PPUSH
70525: LD_VAR 0 4
70529: PPUSH
70530: LD_VAR 0 5
70534: PPUSH
70535: CALL 68336 0 3
// if cmd = 258 then
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 258
70546: EQUAL
70547: IFFALSE 70571
// BurnTreeXYR ( unit , x , y , 8 ) ;
70549: LD_VAR 0 2
70553: PPUSH
70554: LD_VAR 0 4
70558: PPUSH
70559: LD_VAR 0 5
70563: PPUSH
70564: LD_INT 8
70566: PPUSH
70567: CALL 71066 0 4
// end ;
70571: LD_VAR 0 6
70575: RET
// export function ComRadiation ( un ) ; var eff ; begin
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70580: LD_VAR 0 1
70584: PPUSH
70585: CALL_OW 264
70589: PUSH
70590: LD_INT 91
70592: NONEQUAL
70593: IFFALSE 70597
// exit ;
70595: GO 70667
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70597: LD_INT 68
70599: PPUSH
70600: LD_VAR 0 1
70604: PPUSH
70605: CALL_OW 255
70609: PPUSH
70610: CALL_OW 321
70614: PUSH
70615: LD_INT 2
70617: EQUAL
70618: IFFALSE 70630
// eff := 50 else
70620: LD_ADDR_VAR 0 3
70624: PUSH
70625: LD_INT 50
70627: ST_TO_ADDR
70628: GO 70638
// eff := 25 ;
70630: LD_ADDR_VAR 0 3
70634: PUSH
70635: LD_INT 25
70637: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70638: LD_VAR 0 1
70642: PPUSH
70643: CALL_OW 250
70647: PPUSH
70648: LD_VAR 0 1
70652: PPUSH
70653: CALL_OW 251
70657: PPUSH
70658: LD_VAR 0 3
70662: PPUSH
70663: CALL_OW 495
// end ;
70667: LD_VAR 0 2
70671: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70672: LD_INT 0
70674: PPUSH
70675: PPUSH
70676: PPUSH
70677: PPUSH
70678: PPUSH
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70683: LD_VAR 0 1
70687: PPUSH
70688: CALL_OW 302
70692: NOT
70693: PUSH
70694: LD_VAR 0 2
70698: PPUSH
70699: LD_VAR 0 3
70703: PPUSH
70704: CALL_OW 488
70708: NOT
70709: OR
70710: PUSH
70711: LD_VAR 0 4
70715: NOT
70716: OR
70717: IFFALSE 70721
// exit ;
70719: GO 71061
// list := [ ] ;
70721: LD_ADDR_VAR 0 13
70725: PUSH
70726: EMPTY
70727: ST_TO_ADDR
// if x - r < 0 then
70728: LD_VAR 0 2
70732: PUSH
70733: LD_VAR 0 4
70737: MINUS
70738: PUSH
70739: LD_INT 0
70741: LESS
70742: IFFALSE 70754
// min_x := 0 else
70744: LD_ADDR_VAR 0 7
70748: PUSH
70749: LD_INT 0
70751: ST_TO_ADDR
70752: GO 70770
// min_x := x - r ;
70754: LD_ADDR_VAR 0 7
70758: PUSH
70759: LD_VAR 0 2
70763: PUSH
70764: LD_VAR 0 4
70768: MINUS
70769: ST_TO_ADDR
// if y - r < 0 then
70770: LD_VAR 0 3
70774: PUSH
70775: LD_VAR 0 4
70779: MINUS
70780: PUSH
70781: LD_INT 0
70783: LESS
70784: IFFALSE 70796
// min_y := 0 else
70786: LD_ADDR_VAR 0 8
70790: PUSH
70791: LD_INT 0
70793: ST_TO_ADDR
70794: GO 70812
// min_y := y - r ;
70796: LD_ADDR_VAR 0 8
70800: PUSH
70801: LD_VAR 0 3
70805: PUSH
70806: LD_VAR 0 4
70810: MINUS
70811: ST_TO_ADDR
// max_x := x + r ;
70812: LD_ADDR_VAR 0 9
70816: PUSH
70817: LD_VAR 0 2
70821: PUSH
70822: LD_VAR 0 4
70826: PLUS
70827: ST_TO_ADDR
// max_y := y + r ;
70828: LD_ADDR_VAR 0 10
70832: PUSH
70833: LD_VAR 0 3
70837: PUSH
70838: LD_VAR 0 4
70842: PLUS
70843: ST_TO_ADDR
// for _x = min_x to max_x do
70844: LD_ADDR_VAR 0 11
70848: PUSH
70849: DOUBLE
70850: LD_VAR 0 7
70854: DEC
70855: ST_TO_ADDR
70856: LD_VAR 0 9
70860: PUSH
70861: FOR_TO
70862: IFFALSE 70979
// for _y = min_y to max_y do
70864: LD_ADDR_VAR 0 12
70868: PUSH
70869: DOUBLE
70870: LD_VAR 0 8
70874: DEC
70875: ST_TO_ADDR
70876: LD_VAR 0 10
70880: PUSH
70881: FOR_TO
70882: IFFALSE 70975
// begin if not ValidHex ( _x , _y ) then
70884: LD_VAR 0 11
70888: PPUSH
70889: LD_VAR 0 12
70893: PPUSH
70894: CALL_OW 488
70898: NOT
70899: IFFALSE 70903
// continue ;
70901: GO 70881
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70903: LD_VAR 0 11
70907: PPUSH
70908: LD_VAR 0 12
70912: PPUSH
70913: CALL_OW 351
70917: PUSH
70918: LD_VAR 0 11
70922: PPUSH
70923: LD_VAR 0 12
70927: PPUSH
70928: CALL_OW 554
70932: AND
70933: IFFALSE 70973
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70935: LD_ADDR_VAR 0 13
70939: PUSH
70940: LD_VAR 0 13
70944: PPUSH
70945: LD_VAR 0 13
70949: PUSH
70950: LD_INT 1
70952: PLUS
70953: PPUSH
70954: LD_VAR 0 11
70958: PUSH
70959: LD_VAR 0 12
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PPUSH
70968: CALL_OW 2
70972: ST_TO_ADDR
// end ;
70973: GO 70881
70975: POP
70976: POP
70977: GO 70861
70979: POP
70980: POP
// if not list then
70981: LD_VAR 0 13
70985: NOT
70986: IFFALSE 70990
// exit ;
70988: GO 71061
// for i in list do
70990: LD_ADDR_VAR 0 6
70994: PUSH
70995: LD_VAR 0 13
70999: PUSH
71000: FOR_IN
71001: IFFALSE 71059
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
71003: LD_VAR 0 1
71007: PPUSH
71008: LD_STRING M
71010: PUSH
71011: LD_VAR 0 6
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PUSH
71020: LD_VAR 0 6
71024: PUSH
71025: LD_INT 2
71027: ARRAY
71028: PUSH
71029: LD_INT 0
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: PUSH
71050: EMPTY
71051: LIST
71052: PPUSH
71053: CALL_OW 447
71057: GO 71000
71059: POP
71060: POP
// end ;
71061: LD_VAR 0 5
71065: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
71066: LD_INT 0
71068: PPUSH
71069: PPUSH
71070: PPUSH
71071: PPUSH
71072: PPUSH
71073: PPUSH
71074: PPUSH
71075: PPUSH
71076: PPUSH
71077: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
71078: LD_VAR 0 1
71082: PPUSH
71083: CALL_OW 302
71087: NOT
71088: PUSH
71089: LD_VAR 0 2
71093: PPUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: CALL_OW 488
71103: NOT
71104: OR
71105: PUSH
71106: LD_VAR 0 4
71110: NOT
71111: OR
71112: IFFALSE 71116
// exit ;
71114: GO 71629
// list := [ ] ;
71116: LD_ADDR_VAR 0 13
71120: PUSH
71121: EMPTY
71122: ST_TO_ADDR
// if x - r < 0 then
71123: LD_VAR 0 2
71127: PUSH
71128: LD_VAR 0 4
71132: MINUS
71133: PUSH
71134: LD_INT 0
71136: LESS
71137: IFFALSE 71149
// min_x := 0 else
71139: LD_ADDR_VAR 0 7
71143: PUSH
71144: LD_INT 0
71146: ST_TO_ADDR
71147: GO 71165
// min_x := x - r ;
71149: LD_ADDR_VAR 0 7
71153: PUSH
71154: LD_VAR 0 2
71158: PUSH
71159: LD_VAR 0 4
71163: MINUS
71164: ST_TO_ADDR
// if y - r < 0 then
71165: LD_VAR 0 3
71169: PUSH
71170: LD_VAR 0 4
71174: MINUS
71175: PUSH
71176: LD_INT 0
71178: LESS
71179: IFFALSE 71191
// min_y := 0 else
71181: LD_ADDR_VAR 0 8
71185: PUSH
71186: LD_INT 0
71188: ST_TO_ADDR
71189: GO 71207
// min_y := y - r ;
71191: LD_ADDR_VAR 0 8
71195: PUSH
71196: LD_VAR 0 3
71200: PUSH
71201: LD_VAR 0 4
71205: MINUS
71206: ST_TO_ADDR
// max_x := x + r ;
71207: LD_ADDR_VAR 0 9
71211: PUSH
71212: LD_VAR 0 2
71216: PUSH
71217: LD_VAR 0 4
71221: PLUS
71222: ST_TO_ADDR
// max_y := y + r ;
71223: LD_ADDR_VAR 0 10
71227: PUSH
71228: LD_VAR 0 3
71232: PUSH
71233: LD_VAR 0 4
71237: PLUS
71238: ST_TO_ADDR
// for _x = min_x to max_x do
71239: LD_ADDR_VAR 0 11
71243: PUSH
71244: DOUBLE
71245: LD_VAR 0 7
71249: DEC
71250: ST_TO_ADDR
71251: LD_VAR 0 9
71255: PUSH
71256: FOR_TO
71257: IFFALSE 71374
// for _y = min_y to max_y do
71259: LD_ADDR_VAR 0 12
71263: PUSH
71264: DOUBLE
71265: LD_VAR 0 8
71269: DEC
71270: ST_TO_ADDR
71271: LD_VAR 0 10
71275: PUSH
71276: FOR_TO
71277: IFFALSE 71370
// begin if not ValidHex ( _x , _y ) then
71279: LD_VAR 0 11
71283: PPUSH
71284: LD_VAR 0 12
71288: PPUSH
71289: CALL_OW 488
71293: NOT
71294: IFFALSE 71298
// continue ;
71296: GO 71276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71298: LD_VAR 0 11
71302: PPUSH
71303: LD_VAR 0 12
71307: PPUSH
71308: CALL_OW 351
71312: PUSH
71313: LD_VAR 0 11
71317: PPUSH
71318: LD_VAR 0 12
71322: PPUSH
71323: CALL_OW 554
71327: AND
71328: IFFALSE 71368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71330: LD_ADDR_VAR 0 13
71334: PUSH
71335: LD_VAR 0 13
71339: PPUSH
71340: LD_VAR 0 13
71344: PUSH
71345: LD_INT 1
71347: PLUS
71348: PPUSH
71349: LD_VAR 0 11
71353: PUSH
71354: LD_VAR 0 12
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PPUSH
71363: CALL_OW 2
71367: ST_TO_ADDR
// end ;
71368: GO 71276
71370: POP
71371: POP
71372: GO 71256
71374: POP
71375: POP
// if not list then
71376: LD_VAR 0 13
71380: NOT
71381: IFFALSE 71385
// exit ;
71383: GO 71629
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71385: LD_ADDR_VAR 0 13
71389: PUSH
71390: LD_VAR 0 1
71394: PPUSH
71395: LD_VAR 0 13
71399: PPUSH
71400: LD_INT 1
71402: PPUSH
71403: LD_INT 1
71405: PPUSH
71406: CALL 15712 0 4
71410: ST_TO_ADDR
// ComStop ( flame ) ;
71411: LD_VAR 0 1
71415: PPUSH
71416: CALL_OW 141
// for i in list do
71420: LD_ADDR_VAR 0 6
71424: PUSH
71425: LD_VAR 0 13
71429: PUSH
71430: FOR_IN
71431: IFFALSE 71462
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71433: LD_VAR 0 1
71437: PPUSH
71438: LD_VAR 0 6
71442: PUSH
71443: LD_INT 1
71445: ARRAY
71446: PPUSH
71447: LD_VAR 0 6
71451: PUSH
71452: LD_INT 2
71454: ARRAY
71455: PPUSH
71456: CALL_OW 176
71460: GO 71430
71462: POP
71463: POP
// repeat wait ( 0 0$1 ) ;
71464: LD_INT 35
71466: PPUSH
71467: CALL_OW 67
// task := GetTaskList ( flame ) ;
71471: LD_ADDR_VAR 0 14
71475: PUSH
71476: LD_VAR 0 1
71480: PPUSH
71481: CALL_OW 437
71485: ST_TO_ADDR
// if not task then
71486: LD_VAR 0 14
71490: NOT
71491: IFFALSE 71495
// exit ;
71493: GO 71629
// if task [ 1 ] [ 1 ] <> | then
71495: LD_VAR 0 14
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PUSH
71504: LD_INT 1
71506: ARRAY
71507: PUSH
71508: LD_STRING |
71510: NONEQUAL
71511: IFFALSE 71515
// exit ;
71513: GO 71629
// _x := task [ 1 ] [ 2 ] ;
71515: LD_ADDR_VAR 0 11
71519: PUSH
71520: LD_VAR 0 14
71524: PUSH
71525: LD_INT 1
71527: ARRAY
71528: PUSH
71529: LD_INT 2
71531: ARRAY
71532: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71533: LD_ADDR_VAR 0 12
71537: PUSH
71538: LD_VAR 0 14
71542: PUSH
71543: LD_INT 1
71545: ARRAY
71546: PUSH
71547: LD_INT 3
71549: ARRAY
71550: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71551: LD_VAR 0 11
71555: PPUSH
71556: LD_VAR 0 12
71560: PPUSH
71561: CALL_OW 351
71565: NOT
71566: PUSH
71567: LD_VAR 0 11
71571: PPUSH
71572: LD_VAR 0 12
71576: PPUSH
71577: CALL_OW 554
71581: NOT
71582: OR
71583: IFFALSE 71617
// begin task := Delete ( task , 1 ) ;
71585: LD_ADDR_VAR 0 14
71589: PUSH
71590: LD_VAR 0 14
71594: PPUSH
71595: LD_INT 1
71597: PPUSH
71598: CALL_OW 3
71602: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71603: LD_VAR 0 1
71607: PPUSH
71608: LD_VAR 0 14
71612: PPUSH
71613: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71617: LD_VAR 0 1
71621: PPUSH
71622: CALL_OW 314
71626: NOT
71627: IFFALSE 71464
// end ;
71629: LD_VAR 0 5
71633: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71634: LD_EXP 100
71638: NOT
71639: IFFALSE 71689
71641: GO 71643
71643: DISABLE
// begin initHack := true ;
71644: LD_ADDR_EXP 100
71648: PUSH
71649: LD_INT 1
71651: ST_TO_ADDR
// hackTanks := [ ] ;
71652: LD_ADDR_EXP 101
71656: PUSH
71657: EMPTY
71658: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71659: LD_ADDR_EXP 102
71663: PUSH
71664: EMPTY
71665: ST_TO_ADDR
// hackLimit := 3 ;
71666: LD_ADDR_EXP 103
71670: PUSH
71671: LD_INT 3
71673: ST_TO_ADDR
// hackDist := 12 ;
71674: LD_ADDR_EXP 104
71678: PUSH
71679: LD_INT 12
71681: ST_TO_ADDR
// hackCounter := [ ] ;
71682: LD_ADDR_EXP 105
71686: PUSH
71687: EMPTY
71688: ST_TO_ADDR
// end ;
71689: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71690: LD_EXP 100
71694: PUSH
71695: LD_INT 34
71697: PUSH
71698: LD_INT 99
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PPUSH
71705: CALL_OW 69
71709: AND
71710: IFFALSE 71963
71712: GO 71714
71714: DISABLE
71715: LD_INT 0
71717: PPUSH
71718: PPUSH
// begin enable ;
71719: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71720: LD_ADDR_VAR 0 1
71724: PUSH
71725: LD_INT 34
71727: PUSH
71728: LD_INT 99
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PPUSH
71735: CALL_OW 69
71739: PUSH
71740: FOR_IN
71741: IFFALSE 71961
// begin if not i in hackTanks then
71743: LD_VAR 0 1
71747: PUSH
71748: LD_EXP 101
71752: IN
71753: NOT
71754: IFFALSE 71837
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71756: LD_ADDR_EXP 101
71760: PUSH
71761: LD_EXP 101
71765: PPUSH
71766: LD_EXP 101
71770: PUSH
71771: LD_INT 1
71773: PLUS
71774: PPUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 1
71784: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71785: LD_ADDR_EXP 102
71789: PUSH
71790: LD_EXP 102
71794: PPUSH
71795: LD_EXP 102
71799: PUSH
71800: LD_INT 1
71802: PLUS
71803: PPUSH
71804: EMPTY
71805: PPUSH
71806: CALL_OW 1
71810: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71811: LD_ADDR_EXP 105
71815: PUSH
71816: LD_EXP 105
71820: PPUSH
71821: LD_EXP 105
71825: PUSH
71826: LD_INT 1
71828: PLUS
71829: PPUSH
71830: EMPTY
71831: PPUSH
71832: CALL_OW 1
71836: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71837: LD_VAR 0 1
71841: PPUSH
71842: CALL_OW 302
71846: NOT
71847: IFFALSE 71860
// begin HackUnlinkAll ( i ) ;
71849: LD_VAR 0 1
71853: PPUSH
71854: CALL 71966 0 1
// continue ;
71858: GO 71740
// end ; HackCheckCapturedStatus ( i ) ;
71860: LD_VAR 0 1
71864: PPUSH
71865: CALL 72409 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71869: LD_ADDR_VAR 0 2
71873: PUSH
71874: LD_INT 81
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 255
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 33
71893: PUSH
71894: LD_INT 3
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 91
71903: PUSH
71904: LD_VAR 0 1
71908: PUSH
71909: LD_EXP 104
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 50
71921: PUSH
71922: EMPTY
71923: LIST
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: PPUSH
71931: CALL_OW 69
71935: ST_TO_ADDR
// if not tmp then
71936: LD_VAR 0 2
71940: NOT
71941: IFFALSE 71945
// continue ;
71943: GO 71740
// HackLink ( i , tmp ) ;
71945: LD_VAR 0 1
71949: PPUSH
71950: LD_VAR 0 2
71954: PPUSH
71955: CALL 72102 0 2
// end ;
71959: GO 71740
71961: POP
71962: POP
// end ;
71963: PPOPN 2
71965: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71966: LD_INT 0
71968: PPUSH
71969: PPUSH
71970: PPUSH
// if not hack in hackTanks then
71971: LD_VAR 0 1
71975: PUSH
71976: LD_EXP 101
71980: IN
71981: NOT
71982: IFFALSE 71986
// exit ;
71984: GO 72097
// index := GetElementIndex ( hackTanks , hack ) ;
71986: LD_ADDR_VAR 0 4
71990: PUSH
71991: LD_EXP 101
71995: PPUSH
71996: LD_VAR 0 1
72000: PPUSH
72001: CALL 15009 0 2
72005: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72006: LD_EXP 102
72010: PUSH
72011: LD_VAR 0 4
72015: ARRAY
72016: IFFALSE 72097
// begin for i in hackTanksCaptured [ index ] do
72018: LD_ADDR_VAR 0 3
72022: PUSH
72023: LD_EXP 102
72027: PUSH
72028: LD_VAR 0 4
72032: ARRAY
72033: PUSH
72034: FOR_IN
72035: IFFALSE 72061
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
72037: LD_VAR 0 3
72041: PUSH
72042: LD_INT 1
72044: ARRAY
72045: PPUSH
72046: LD_VAR 0 3
72050: PUSH
72051: LD_INT 2
72053: ARRAY
72054: PPUSH
72055: CALL_OW 235
72059: GO 72034
72061: POP
72062: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
72063: LD_ADDR_EXP 102
72067: PUSH
72068: LD_EXP 102
72072: PPUSH
72073: LD_VAR 0 4
72077: PPUSH
72078: EMPTY
72079: PPUSH
72080: CALL_OW 1
72084: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
72085: LD_VAR 0 1
72089: PPUSH
72090: LD_INT 0
72092: PPUSH
72093: CALL_OW 505
// end ; end ;
72097: LD_VAR 0 2
72101: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
72102: LD_INT 0
72104: PPUSH
72105: PPUSH
72106: PPUSH
// if not hack in hackTanks or not vehicles then
72107: LD_VAR 0 1
72111: PUSH
72112: LD_EXP 101
72116: IN
72117: NOT
72118: PUSH
72119: LD_VAR 0 2
72123: NOT
72124: OR
72125: IFFALSE 72129
// exit ;
72127: GO 72404
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
72129: LD_ADDR_VAR 0 2
72133: PUSH
72134: LD_VAR 0 1
72138: PPUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: LD_INT 1
72146: PPUSH
72147: LD_INT 1
72149: PPUSH
72150: CALL 15659 0 4
72154: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
72155: LD_ADDR_VAR 0 5
72159: PUSH
72160: LD_EXP 101
72164: PPUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL 15009 0 2
72174: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
72175: LD_EXP 102
72179: PUSH
72180: LD_VAR 0 5
72184: ARRAY
72185: PUSH
72186: LD_EXP 103
72190: LESS
72191: IFFALSE 72380
// begin for i := 1 to vehicles do
72193: LD_ADDR_VAR 0 4
72197: PUSH
72198: DOUBLE
72199: LD_INT 1
72201: DEC
72202: ST_TO_ADDR
72203: LD_VAR 0 2
72207: PUSH
72208: FOR_TO
72209: IFFALSE 72378
// begin if hackTanksCaptured [ index ] = hackLimit then
72211: LD_EXP 102
72215: PUSH
72216: LD_VAR 0 5
72220: ARRAY
72221: PUSH
72222: LD_EXP 103
72226: EQUAL
72227: IFFALSE 72231
// break ;
72229: GO 72378
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
72231: LD_ADDR_EXP 105
72235: PUSH
72236: LD_EXP 105
72240: PPUSH
72241: LD_VAR 0 5
72245: PPUSH
72246: LD_EXP 105
72250: PUSH
72251: LD_VAR 0 5
72255: ARRAY
72256: PUSH
72257: LD_INT 1
72259: PLUS
72260: PPUSH
72261: CALL_OW 1
72265: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
72266: LD_ADDR_EXP 102
72270: PUSH
72271: LD_EXP 102
72275: PPUSH
72276: LD_VAR 0 5
72280: PUSH
72281: LD_EXP 102
72285: PUSH
72286: LD_VAR 0 5
72290: ARRAY
72291: PUSH
72292: LD_INT 1
72294: PLUS
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PPUSH
72300: LD_VAR 0 2
72304: PUSH
72305: LD_VAR 0 4
72309: ARRAY
72310: PUSH
72311: LD_VAR 0 2
72315: PUSH
72316: LD_VAR 0 4
72320: ARRAY
72321: PPUSH
72322: CALL_OW 255
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PPUSH
72331: CALL 15224 0 3
72335: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72336: LD_VAR 0 2
72340: PUSH
72341: LD_VAR 0 4
72345: ARRAY
72346: PPUSH
72347: LD_VAR 0 1
72351: PPUSH
72352: CALL_OW 255
72356: PPUSH
72357: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72361: LD_VAR 0 2
72365: PUSH
72366: LD_VAR 0 4
72370: ARRAY
72371: PPUSH
72372: CALL_OW 141
// end ;
72376: GO 72208
72378: POP
72379: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72380: LD_VAR 0 1
72384: PPUSH
72385: LD_EXP 102
72389: PUSH
72390: LD_VAR 0 5
72394: ARRAY
72395: PUSH
72396: LD_INT 0
72398: PLUS
72399: PPUSH
72400: CALL_OW 505
// end ;
72404: LD_VAR 0 3
72408: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72409: LD_INT 0
72411: PPUSH
72412: PPUSH
72413: PPUSH
72414: PPUSH
// if not hack in hackTanks then
72415: LD_VAR 0 1
72419: PUSH
72420: LD_EXP 101
72424: IN
72425: NOT
72426: IFFALSE 72430
// exit ;
72428: GO 72670
// index := GetElementIndex ( hackTanks , hack ) ;
72430: LD_ADDR_VAR 0 4
72434: PUSH
72435: LD_EXP 101
72439: PPUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: CALL 15009 0 2
72449: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72450: LD_ADDR_VAR 0 3
72454: PUSH
72455: DOUBLE
72456: LD_EXP 102
72460: PUSH
72461: LD_VAR 0 4
72465: ARRAY
72466: INC
72467: ST_TO_ADDR
72468: LD_INT 1
72470: PUSH
72471: FOR_DOWNTO
72472: IFFALSE 72644
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72474: LD_ADDR_VAR 0 5
72478: PUSH
72479: LD_EXP 102
72483: PUSH
72484: LD_VAR 0 4
72488: ARRAY
72489: PUSH
72490: LD_VAR 0 3
72494: ARRAY
72495: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72496: LD_VAR 0 5
72500: PUSH
72501: LD_INT 1
72503: ARRAY
72504: PPUSH
72505: CALL_OW 302
72509: NOT
72510: PUSH
72511: LD_VAR 0 5
72515: PUSH
72516: LD_INT 1
72518: ARRAY
72519: PPUSH
72520: CALL_OW 255
72524: PUSH
72525: LD_VAR 0 1
72529: PPUSH
72530: CALL_OW 255
72534: NONEQUAL
72535: OR
72536: IFFALSE 72642
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72538: LD_VAR 0 5
72542: PUSH
72543: LD_INT 1
72545: ARRAY
72546: PPUSH
72547: CALL_OW 305
72551: PUSH
72552: LD_VAR 0 5
72556: PUSH
72557: LD_INT 1
72559: ARRAY
72560: PPUSH
72561: CALL_OW 255
72565: PUSH
72566: LD_VAR 0 1
72570: PPUSH
72571: CALL_OW 255
72575: EQUAL
72576: AND
72577: IFFALSE 72601
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72579: LD_VAR 0 5
72583: PUSH
72584: LD_INT 1
72586: ARRAY
72587: PPUSH
72588: LD_VAR 0 5
72592: PUSH
72593: LD_INT 2
72595: ARRAY
72596: PPUSH
72597: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72601: LD_ADDR_EXP 102
72605: PUSH
72606: LD_EXP 102
72610: PPUSH
72611: LD_VAR 0 4
72615: PPUSH
72616: LD_EXP 102
72620: PUSH
72621: LD_VAR 0 4
72625: ARRAY
72626: PPUSH
72627: LD_VAR 0 3
72631: PPUSH
72632: CALL_OW 3
72636: PPUSH
72637: CALL_OW 1
72641: ST_TO_ADDR
// end ; end ;
72642: GO 72471
72644: POP
72645: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72646: LD_VAR 0 1
72650: PPUSH
72651: LD_EXP 102
72655: PUSH
72656: LD_VAR 0 4
72660: ARRAY
72661: PUSH
72662: LD_INT 0
72664: PLUS
72665: PPUSH
72666: CALL_OW 505
// end ;
72670: LD_VAR 0 2
72674: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72675: LD_INT 0
72677: PPUSH
72678: PPUSH
72679: PPUSH
72680: PPUSH
// if not hack in hackTanks then
72681: LD_VAR 0 1
72685: PUSH
72686: LD_EXP 101
72690: IN
72691: NOT
72692: IFFALSE 72696
// exit ;
72694: GO 72781
// index := GetElementIndex ( hackTanks , hack ) ;
72696: LD_ADDR_VAR 0 5
72700: PUSH
72701: LD_EXP 101
72705: PPUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: CALL 15009 0 2
72715: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72716: LD_ADDR_VAR 0 4
72720: PUSH
72721: DOUBLE
72722: LD_INT 1
72724: DEC
72725: ST_TO_ADDR
72726: LD_EXP 102
72730: PUSH
72731: LD_VAR 0 5
72735: ARRAY
72736: PUSH
72737: FOR_TO
72738: IFFALSE 72779
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72740: LD_EXP 102
72744: PUSH
72745: LD_VAR 0 5
72749: ARRAY
72750: PUSH
72751: LD_VAR 0 4
72755: ARRAY
72756: PUSH
72757: LD_INT 1
72759: ARRAY
72760: PUSH
72761: LD_VAR 0 2
72765: EQUAL
72766: IFFALSE 72777
// KillUnit ( vehicle ) ;
72768: LD_VAR 0 2
72772: PPUSH
72773: CALL_OW 66
72777: GO 72737
72779: POP
72780: POP
// end ;
72781: LD_VAR 0 3
72785: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72786: LD_EXP 106
72790: NOT
72791: IFFALSE 72826
72793: GO 72795
72795: DISABLE
// begin initMiner := true ;
72796: LD_ADDR_EXP 106
72800: PUSH
72801: LD_INT 1
72803: ST_TO_ADDR
// minersList := [ ] ;
72804: LD_ADDR_EXP 107
72808: PUSH
72809: EMPTY
72810: ST_TO_ADDR
// minerMinesList := [ ] ;
72811: LD_ADDR_EXP 108
72815: PUSH
72816: EMPTY
72817: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72818: LD_ADDR_EXP 109
72822: PUSH
72823: LD_INT 5
72825: ST_TO_ADDR
// end ;
72826: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72827: LD_EXP 106
72831: PUSH
72832: LD_INT 34
72834: PUSH
72835: LD_INT 81
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PPUSH
72842: CALL_OW 69
72846: AND
72847: IFFALSE 73308
72849: GO 72851
72851: DISABLE
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
72856: PPUSH
72857: PPUSH
// begin enable ;
72858: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72859: LD_ADDR_VAR 0 1
72863: PUSH
72864: LD_INT 34
72866: PUSH
72867: LD_INT 81
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PPUSH
72874: CALL_OW 69
72878: PUSH
72879: FOR_IN
72880: IFFALSE 72952
// begin if not i in minersList then
72882: LD_VAR 0 1
72886: PUSH
72887: LD_EXP 107
72891: IN
72892: NOT
72893: IFFALSE 72950
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72895: LD_ADDR_EXP 107
72899: PUSH
72900: LD_EXP 107
72904: PPUSH
72905: LD_EXP 107
72909: PUSH
72910: LD_INT 1
72912: PLUS
72913: PPUSH
72914: LD_VAR 0 1
72918: PPUSH
72919: CALL_OW 1
72923: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72924: LD_ADDR_EXP 108
72928: PUSH
72929: LD_EXP 108
72933: PPUSH
72934: LD_EXP 108
72938: PUSH
72939: LD_INT 1
72941: PLUS
72942: PPUSH
72943: EMPTY
72944: PPUSH
72945: CALL_OW 1
72949: ST_TO_ADDR
// end end ;
72950: GO 72879
72952: POP
72953: POP
// for i := minerMinesList downto 1 do
72954: LD_ADDR_VAR 0 1
72958: PUSH
72959: DOUBLE
72960: LD_EXP 108
72964: INC
72965: ST_TO_ADDR
72966: LD_INT 1
72968: PUSH
72969: FOR_DOWNTO
72970: IFFALSE 73306
// begin if IsLive ( minersList [ i ] ) then
72972: LD_EXP 107
72976: PUSH
72977: LD_VAR 0 1
72981: ARRAY
72982: PPUSH
72983: CALL_OW 300
72987: IFFALSE 73015
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72989: LD_EXP 107
72993: PUSH
72994: LD_VAR 0 1
72998: ARRAY
72999: PPUSH
73000: LD_EXP 108
73004: PUSH
73005: LD_VAR 0 1
73009: ARRAY
73010: PPUSH
73011: CALL_OW 505
// if not minerMinesList [ i ] then
73015: LD_EXP 108
73019: PUSH
73020: LD_VAR 0 1
73024: ARRAY
73025: NOT
73026: IFFALSE 73030
// continue ;
73028: GO 72969
// for j := minerMinesList [ i ] downto 1 do
73030: LD_ADDR_VAR 0 2
73034: PUSH
73035: DOUBLE
73036: LD_EXP 108
73040: PUSH
73041: LD_VAR 0 1
73045: ARRAY
73046: INC
73047: ST_TO_ADDR
73048: LD_INT 1
73050: PUSH
73051: FOR_DOWNTO
73052: IFFALSE 73302
// begin side := GetSide ( minersList [ i ] ) ;
73054: LD_ADDR_VAR 0 3
73058: PUSH
73059: LD_EXP 107
73063: PUSH
73064: LD_VAR 0 1
73068: ARRAY
73069: PPUSH
73070: CALL_OW 255
73074: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
73075: LD_ADDR_VAR 0 4
73079: PUSH
73080: LD_EXP 108
73084: PUSH
73085: LD_VAR 0 1
73089: ARRAY
73090: PUSH
73091: LD_VAR 0 2
73095: ARRAY
73096: PUSH
73097: LD_INT 1
73099: ARRAY
73100: PPUSH
73101: LD_EXP 108
73105: PUSH
73106: LD_VAR 0 1
73110: ARRAY
73111: PUSH
73112: LD_VAR 0 2
73116: ARRAY
73117: PUSH
73118: LD_INT 2
73120: ARRAY
73121: PPUSH
73122: CALL_OW 428
73126: ST_TO_ADDR
// if not tmp then
73127: LD_VAR 0 4
73131: NOT
73132: IFFALSE 73136
// continue ;
73134: GO 73051
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
73136: LD_VAR 0 4
73140: PUSH
73141: LD_INT 81
73143: PUSH
73144: LD_VAR 0 3
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PPUSH
73153: CALL_OW 69
73157: IN
73158: PUSH
73159: LD_EXP 108
73163: PUSH
73164: LD_VAR 0 1
73168: ARRAY
73169: PUSH
73170: LD_VAR 0 2
73174: ARRAY
73175: PUSH
73176: LD_INT 1
73178: ARRAY
73179: PPUSH
73180: LD_EXP 108
73184: PUSH
73185: LD_VAR 0 1
73189: ARRAY
73190: PUSH
73191: LD_VAR 0 2
73195: ARRAY
73196: PUSH
73197: LD_INT 2
73199: ARRAY
73200: PPUSH
73201: CALL_OW 458
73205: AND
73206: IFFALSE 73300
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
73208: LD_EXP 108
73212: PUSH
73213: LD_VAR 0 1
73217: ARRAY
73218: PUSH
73219: LD_VAR 0 2
73223: ARRAY
73224: PUSH
73225: LD_INT 1
73227: ARRAY
73228: PPUSH
73229: LD_EXP 108
73233: PUSH
73234: LD_VAR 0 1
73238: ARRAY
73239: PUSH
73240: LD_VAR 0 2
73244: ARRAY
73245: PUSH
73246: LD_INT 2
73248: ARRAY
73249: PPUSH
73250: LD_VAR 0 3
73254: PPUSH
73255: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
73259: LD_ADDR_EXP 108
73263: PUSH
73264: LD_EXP 108
73268: PPUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: LD_EXP 108
73278: PUSH
73279: LD_VAR 0 1
73283: ARRAY
73284: PPUSH
73285: LD_VAR 0 2
73289: PPUSH
73290: CALL_OW 3
73294: PPUSH
73295: CALL_OW 1
73299: ST_TO_ADDR
// end ; end ;
73300: GO 73051
73302: POP
73303: POP
// end ;
73304: GO 72969
73306: POP
73307: POP
// end ;
73308: PPOPN 4
73310: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73311: LD_INT 0
73313: PPUSH
73314: PPUSH
// result := false ;
73315: LD_ADDR_VAR 0 4
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73323: LD_VAR 0 1
73327: PPUSH
73328: CALL_OW 264
73332: PUSH
73333: LD_INT 81
73335: EQUAL
73336: NOT
73337: IFFALSE 73341
// exit ;
73339: GO 73581
// index := GetElementIndex ( minersList , unit ) ;
73341: LD_ADDR_VAR 0 5
73345: PUSH
73346: LD_EXP 107
73350: PPUSH
73351: LD_VAR 0 1
73355: PPUSH
73356: CALL 15009 0 2
73360: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73361: LD_EXP 108
73365: PUSH
73366: LD_VAR 0 5
73370: ARRAY
73371: PUSH
73372: LD_EXP 109
73376: GREATEREQUAL
73377: IFFALSE 73381
// exit ;
73379: GO 73581
// ComMoveXY ( unit , x , y ) ;
73381: LD_VAR 0 1
73385: PPUSH
73386: LD_VAR 0 2
73390: PPUSH
73391: LD_VAR 0 3
73395: PPUSH
73396: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73400: LD_INT 35
73402: PPUSH
73403: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73407: LD_VAR 0 1
73411: PPUSH
73412: LD_VAR 0 2
73416: PPUSH
73417: LD_VAR 0 3
73421: PPUSH
73422: CALL 46911 0 3
73426: NOT
73427: PUSH
73428: LD_VAR 0 1
73432: PPUSH
73433: CALL_OW 314
73437: AND
73438: IFFALSE 73442
// exit ;
73440: GO 73581
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73442: LD_VAR 0 2
73446: PPUSH
73447: LD_VAR 0 3
73451: PPUSH
73452: CALL_OW 428
73456: PUSH
73457: LD_VAR 0 1
73461: EQUAL
73462: PUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: CALL_OW 314
73472: NOT
73473: AND
73474: IFFALSE 73400
// PlaySoundXY ( x , y , PlantMine ) ;
73476: LD_VAR 0 2
73480: PPUSH
73481: LD_VAR 0 3
73485: PPUSH
73486: LD_STRING PlantMine
73488: PPUSH
73489: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73493: LD_VAR 0 2
73497: PPUSH
73498: LD_VAR 0 3
73502: PPUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 255
73512: PPUSH
73513: LD_INT 0
73515: PPUSH
73516: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73520: LD_ADDR_EXP 108
73524: PUSH
73525: LD_EXP 108
73529: PPUSH
73530: LD_VAR 0 5
73534: PUSH
73535: LD_EXP 108
73539: PUSH
73540: LD_VAR 0 5
73544: ARRAY
73545: PUSH
73546: LD_INT 1
73548: PLUS
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PPUSH
73554: LD_VAR 0 2
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PPUSH
73568: CALL 15224 0 3
73572: ST_TO_ADDR
// result := true ;
73573: LD_ADDR_VAR 0 4
73577: PUSH
73578: LD_INT 1
73580: ST_TO_ADDR
// end ;
73581: LD_VAR 0 4
73585: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73586: LD_INT 0
73588: PPUSH
73589: PPUSH
73590: PPUSH
// if not unit in minersList then
73591: LD_VAR 0 1
73595: PUSH
73596: LD_EXP 107
73600: IN
73601: NOT
73602: IFFALSE 73606
// exit ;
73604: GO 73998
// index := GetElementIndex ( minersList , unit ) ;
73606: LD_ADDR_VAR 0 6
73610: PUSH
73611: LD_EXP 107
73615: PPUSH
73616: LD_VAR 0 1
73620: PPUSH
73621: CALL 15009 0 2
73625: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73626: LD_ADDR_VAR 0 5
73630: PUSH
73631: DOUBLE
73632: LD_EXP 108
73636: PUSH
73637: LD_VAR 0 6
73641: ARRAY
73642: INC
73643: ST_TO_ADDR
73644: LD_INT 1
73646: PUSH
73647: FOR_DOWNTO
73648: IFFALSE 73809
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73650: LD_EXP 108
73654: PUSH
73655: LD_VAR 0 6
73659: ARRAY
73660: PUSH
73661: LD_VAR 0 5
73665: ARRAY
73666: PUSH
73667: LD_INT 1
73669: ARRAY
73670: PUSH
73671: LD_VAR 0 2
73675: EQUAL
73676: PUSH
73677: LD_EXP 108
73681: PUSH
73682: LD_VAR 0 6
73686: ARRAY
73687: PUSH
73688: LD_VAR 0 5
73692: ARRAY
73693: PUSH
73694: LD_INT 2
73696: ARRAY
73697: PUSH
73698: LD_VAR 0 3
73702: EQUAL
73703: AND
73704: IFFALSE 73807
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73706: LD_EXP 108
73710: PUSH
73711: LD_VAR 0 6
73715: ARRAY
73716: PUSH
73717: LD_VAR 0 5
73721: ARRAY
73722: PUSH
73723: LD_INT 1
73725: ARRAY
73726: PPUSH
73727: LD_EXP 108
73731: PUSH
73732: LD_VAR 0 6
73736: ARRAY
73737: PUSH
73738: LD_VAR 0 5
73742: ARRAY
73743: PUSH
73744: LD_INT 2
73746: ARRAY
73747: PPUSH
73748: LD_VAR 0 1
73752: PPUSH
73753: CALL_OW 255
73757: PPUSH
73758: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73762: LD_ADDR_EXP 108
73766: PUSH
73767: LD_EXP 108
73771: PPUSH
73772: LD_VAR 0 6
73776: PPUSH
73777: LD_EXP 108
73781: PUSH
73782: LD_VAR 0 6
73786: ARRAY
73787: PPUSH
73788: LD_VAR 0 5
73792: PPUSH
73793: CALL_OW 3
73797: PPUSH
73798: CALL_OW 1
73802: ST_TO_ADDR
// exit ;
73803: POP
73804: POP
73805: GO 73998
// end ; end ;
73807: GO 73647
73809: POP
73810: POP
// for i := minerMinesList [ index ] downto 1 do
73811: LD_ADDR_VAR 0 5
73815: PUSH
73816: DOUBLE
73817: LD_EXP 108
73821: PUSH
73822: LD_VAR 0 6
73826: ARRAY
73827: INC
73828: ST_TO_ADDR
73829: LD_INT 1
73831: PUSH
73832: FOR_DOWNTO
73833: IFFALSE 73996
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73835: LD_EXP 108
73839: PUSH
73840: LD_VAR 0 6
73844: ARRAY
73845: PUSH
73846: LD_VAR 0 5
73850: ARRAY
73851: PUSH
73852: LD_INT 1
73854: ARRAY
73855: PPUSH
73856: LD_EXP 108
73860: PUSH
73861: LD_VAR 0 6
73865: ARRAY
73866: PUSH
73867: LD_VAR 0 5
73871: ARRAY
73872: PUSH
73873: LD_INT 2
73875: ARRAY
73876: PPUSH
73877: LD_VAR 0 2
73881: PPUSH
73882: LD_VAR 0 3
73886: PPUSH
73887: CALL_OW 298
73891: PUSH
73892: LD_INT 6
73894: LESS
73895: IFFALSE 73994
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73897: LD_EXP 108
73901: PUSH
73902: LD_VAR 0 6
73906: ARRAY
73907: PUSH
73908: LD_VAR 0 5
73912: ARRAY
73913: PUSH
73914: LD_INT 1
73916: ARRAY
73917: PPUSH
73918: LD_EXP 108
73922: PUSH
73923: LD_VAR 0 6
73927: ARRAY
73928: PUSH
73929: LD_VAR 0 5
73933: ARRAY
73934: PUSH
73935: LD_INT 2
73937: ARRAY
73938: PPUSH
73939: LD_VAR 0 1
73943: PPUSH
73944: CALL_OW 255
73948: PPUSH
73949: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73953: LD_ADDR_EXP 108
73957: PUSH
73958: LD_EXP 108
73962: PPUSH
73963: LD_VAR 0 6
73967: PPUSH
73968: LD_EXP 108
73972: PUSH
73973: LD_VAR 0 6
73977: ARRAY
73978: PPUSH
73979: LD_VAR 0 5
73983: PPUSH
73984: CALL_OW 3
73988: PPUSH
73989: CALL_OW 1
73993: ST_TO_ADDR
// end ; end ;
73994: GO 73832
73996: POP
73997: POP
// end ;
73998: LD_VAR 0 4
74002: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
74003: LD_INT 0
74005: PPUSH
74006: PPUSH
74007: PPUSH
74008: PPUSH
74009: PPUSH
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
74014: LD_VAR 0 1
74018: PPUSH
74019: CALL_OW 264
74023: PUSH
74024: LD_INT 81
74026: EQUAL
74027: NOT
74028: PUSH
74029: LD_VAR 0 1
74033: PUSH
74034: LD_EXP 107
74038: IN
74039: NOT
74040: OR
74041: IFFALSE 74045
// exit ;
74043: GO 74367
// index := GetElementIndex ( minersList , unit ) ;
74045: LD_ADDR_VAR 0 6
74049: PUSH
74050: LD_EXP 107
74054: PPUSH
74055: LD_VAR 0 1
74059: PPUSH
74060: CALL 15009 0 2
74064: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
74065: LD_ADDR_VAR 0 8
74069: PUSH
74070: LD_EXP 109
74074: PUSH
74075: LD_EXP 108
74079: PUSH
74080: LD_VAR 0 6
74084: ARRAY
74085: MINUS
74086: ST_TO_ADDR
// if not minesFreeAmount then
74087: LD_VAR 0 8
74091: NOT
74092: IFFALSE 74096
// exit ;
74094: GO 74367
// tmp := [ ] ;
74096: LD_ADDR_VAR 0 7
74100: PUSH
74101: EMPTY
74102: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
74103: LD_ADDR_VAR 0 5
74107: PUSH
74108: DOUBLE
74109: LD_INT 1
74111: DEC
74112: ST_TO_ADDR
74113: LD_VAR 0 8
74117: PUSH
74118: FOR_TO
74119: IFFALSE 74314
// begin _d := rand ( 0 , 5 ) ;
74121: LD_ADDR_VAR 0 11
74125: PUSH
74126: LD_INT 0
74128: PPUSH
74129: LD_INT 5
74131: PPUSH
74132: CALL_OW 12
74136: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
74137: LD_ADDR_VAR 0 12
74141: PUSH
74142: LD_INT 2
74144: PPUSH
74145: LD_INT 6
74147: PPUSH
74148: CALL_OW 12
74152: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
74153: LD_ADDR_VAR 0 9
74157: PUSH
74158: LD_VAR 0 2
74162: PPUSH
74163: LD_VAR 0 11
74167: PPUSH
74168: LD_VAR 0 12
74172: PPUSH
74173: CALL_OW 272
74177: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
74178: LD_ADDR_VAR 0 10
74182: PUSH
74183: LD_VAR 0 3
74187: PPUSH
74188: LD_VAR 0 11
74192: PPUSH
74193: LD_VAR 0 12
74197: PPUSH
74198: CALL_OW 273
74202: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
74203: LD_VAR 0 9
74207: PPUSH
74208: LD_VAR 0 10
74212: PPUSH
74213: CALL_OW 488
74217: PUSH
74218: LD_VAR 0 9
74222: PUSH
74223: LD_VAR 0 10
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_VAR 0 7
74236: IN
74237: NOT
74238: AND
74239: PUSH
74240: LD_VAR 0 9
74244: PPUSH
74245: LD_VAR 0 10
74249: PPUSH
74250: CALL_OW 458
74254: NOT
74255: AND
74256: IFFALSE 74298
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
74258: LD_ADDR_VAR 0 7
74262: PUSH
74263: LD_VAR 0 7
74267: PPUSH
74268: LD_VAR 0 7
74272: PUSH
74273: LD_INT 1
74275: PLUS
74276: PPUSH
74277: LD_VAR 0 9
74281: PUSH
74282: LD_VAR 0 10
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL_OW 1
74295: ST_TO_ADDR
74296: GO 74312
// i := i - 1 ;
74298: LD_ADDR_VAR 0 5
74302: PUSH
74303: LD_VAR 0 5
74307: PUSH
74308: LD_INT 1
74310: MINUS
74311: ST_TO_ADDR
// end ;
74312: GO 74118
74314: POP
74315: POP
// for i in tmp do
74316: LD_ADDR_VAR 0 5
74320: PUSH
74321: LD_VAR 0 7
74325: PUSH
74326: FOR_IN
74327: IFFALSE 74365
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74329: LD_VAR 0 1
74333: PPUSH
74334: LD_VAR 0 5
74338: PUSH
74339: LD_INT 1
74341: ARRAY
74342: PPUSH
74343: LD_VAR 0 5
74347: PUSH
74348: LD_INT 2
74350: ARRAY
74351: PPUSH
74352: CALL 73311 0 3
74356: NOT
74357: IFFALSE 74363
// exit ;
74359: POP
74360: POP
74361: GO 74367
74363: GO 74326
74365: POP
74366: POP
// end ;
74367: LD_VAR 0 4
74371: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74372: LD_INT 0
74374: PPUSH
74375: PPUSH
74376: PPUSH
74377: PPUSH
74378: PPUSH
74379: PPUSH
74380: PPUSH
74381: PPUSH
74382: PPUSH
// if GetClass ( unit ) <> class_sniper then
74383: LD_VAR 0 1
74387: PPUSH
74388: CALL_OW 257
74392: PUSH
74393: LD_INT 5
74395: NONEQUAL
74396: IFFALSE 74400
// exit ;
74398: GO 74866
// dist := 8 ;
74400: LD_ADDR_VAR 0 5
74404: PUSH
74405: LD_INT 8
74407: ST_TO_ADDR
// viewRange := 12 ;
74408: LD_ADDR_VAR 0 8
74412: PUSH
74413: LD_INT 12
74415: ST_TO_ADDR
// side := GetSide ( unit ) ;
74416: LD_ADDR_VAR 0 6
74420: PUSH
74421: LD_VAR 0 1
74425: PPUSH
74426: CALL_OW 255
74430: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74431: LD_INT 61
74433: PPUSH
74434: LD_VAR 0 6
74438: PPUSH
74439: CALL_OW 321
74443: PUSH
74444: LD_INT 2
74446: EQUAL
74447: IFFALSE 74457
// viewRange := 16 ;
74449: LD_ADDR_VAR 0 8
74453: PUSH
74454: LD_INT 16
74456: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74457: LD_VAR 0 1
74461: PPUSH
74462: LD_VAR 0 2
74466: PPUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: CALL_OW 297
74476: PUSH
74477: LD_VAR 0 5
74481: GREATER
74482: IFFALSE 74561
// begin ComMoveXY ( unit , x , y ) ;
74484: LD_VAR 0 1
74488: PPUSH
74489: LD_VAR 0 2
74493: PPUSH
74494: LD_VAR 0 3
74498: PPUSH
74499: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74503: LD_INT 35
74505: PPUSH
74506: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74510: LD_VAR 0 1
74514: PPUSH
74515: LD_VAR 0 2
74519: PPUSH
74520: LD_VAR 0 3
74524: PPUSH
74525: CALL 46911 0 3
74529: NOT
74530: IFFALSE 74534
// exit ;
74532: GO 74866
// until GetDistUnitXY ( unit , x , y ) < dist ;
74534: LD_VAR 0 1
74538: PPUSH
74539: LD_VAR 0 2
74543: PPUSH
74544: LD_VAR 0 3
74548: PPUSH
74549: CALL_OW 297
74553: PUSH
74554: LD_VAR 0 5
74558: LESS
74559: IFFALSE 74503
// end ; ComTurnXY ( unit , x , y ) ;
74561: LD_VAR 0 1
74565: PPUSH
74566: LD_VAR 0 2
74570: PPUSH
74571: LD_VAR 0 3
74575: PPUSH
74576: CALL_OW 118
// repeat if Multiplayer then
74580: LD_OWVAR 4
74584: IFFALSE 74595
// wait ( 35 ) else
74586: LD_INT 35
74588: PPUSH
74589: CALL_OW 67
74593: GO 74602
// wait ( 5 ) ;
74595: LD_INT 5
74597: PPUSH
74598: CALL_OW 67
// _d := GetDir ( unit ) ;
74602: LD_ADDR_VAR 0 11
74606: PUSH
74607: LD_VAR 0 1
74611: PPUSH
74612: CALL_OW 254
74616: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74617: LD_ADDR_VAR 0 7
74621: PUSH
74622: LD_VAR 0 1
74626: PPUSH
74627: CALL_OW 250
74631: PPUSH
74632: LD_VAR 0 1
74636: PPUSH
74637: CALL_OW 251
74641: PPUSH
74642: LD_VAR 0 2
74646: PPUSH
74647: LD_VAR 0 3
74651: PPUSH
74652: CALL 49519 0 4
74656: ST_TO_ADDR
// until dir = _d ;
74657: LD_VAR 0 7
74661: PUSH
74662: LD_VAR 0 11
74666: EQUAL
74667: IFFALSE 74580
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74669: LD_ADDR_VAR 0 9
74673: PUSH
74674: LD_VAR 0 1
74678: PPUSH
74679: CALL_OW 250
74683: PPUSH
74684: LD_VAR 0 7
74688: PPUSH
74689: LD_VAR 0 5
74693: PPUSH
74694: CALL_OW 272
74698: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74699: LD_ADDR_VAR 0 10
74703: PUSH
74704: LD_VAR 0 1
74708: PPUSH
74709: CALL_OW 251
74713: PPUSH
74714: LD_VAR 0 7
74718: PPUSH
74719: LD_VAR 0 5
74723: PPUSH
74724: CALL_OW 273
74728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74729: LD_VAR 0 9
74733: PPUSH
74734: LD_VAR 0 10
74738: PPUSH
74739: CALL_OW 488
74743: NOT
74744: IFFALSE 74748
// exit ;
74746: GO 74866
// ComAnimCustom ( unit , 1 ) ;
74748: LD_VAR 0 1
74752: PPUSH
74753: LD_INT 1
74755: PPUSH
74756: CALL_OW 592
// p := 0 ;
74760: LD_ADDR_VAR 0 12
74764: PUSH
74765: LD_INT 0
74767: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74768: LD_VAR 0 9
74772: PPUSH
74773: LD_VAR 0 10
74777: PPUSH
74778: LD_VAR 0 6
74782: PPUSH
74783: LD_VAR 0 8
74787: PPUSH
74788: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74792: LD_INT 35
74794: PPUSH
74795: CALL_OW 67
// p := Inc ( p ) ;
74799: LD_ADDR_VAR 0 12
74803: PUSH
74804: LD_VAR 0 12
74808: PPUSH
74809: CALL 49475 0 1
74813: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74814: LD_VAR 0 12
74818: PUSH
74819: LD_INT 3
74821: EQUAL
74822: PUSH
74823: LD_VAR 0 1
74827: PPUSH
74828: CALL_OW 302
74832: NOT
74833: OR
74834: PUSH
74835: LD_VAR 0 1
74839: PPUSH
74840: CALL_OW 301
74844: OR
74845: IFFALSE 74792
// RemoveSeeing ( _x , _y , side ) ;
74847: LD_VAR 0 9
74851: PPUSH
74852: LD_VAR 0 10
74856: PPUSH
74857: LD_VAR 0 6
74861: PPUSH
74862: CALL_OW 331
// end ;
74866: LD_VAR 0 4
74870: RET
