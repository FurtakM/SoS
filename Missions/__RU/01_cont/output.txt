// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13210 0 0
// PrepareAmericans ;
  28: CALL 12780 0 0
// CreateNature ;
  32: CALL 13914 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 37
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 7 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 38
 454: PUSH
 455: LD_INT 4
 457: PUSH
 458: LD_INT 5
 460: PUSH
 461: LD_INT 7
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 39
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 40
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 41
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 42
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 43
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 44
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 35
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 40
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 40
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 49
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 49
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 49
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 49
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 49
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 49
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1016: LD_ADDR_EXP 26
1020: PUSH
1021: LD_INT 24
1023: PPUSH
1024: LD_INT 22
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 25
1036: PUSH
1037: LD_INT 12
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 70
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1058: LD_EXP 49
1062: PPUSH
1063: LD_INT 74
1065: PPUSH
1066: LD_INT 88
1068: PPUSH
1069: CALL_OW 297
1073: PUSH
1074: LD_INT 5
1076: LESS
1077: PUSH
1078: LD_EXP 3
1082: AND
1083: IFFALSE 1108
1085: GO 1087
1087: DISABLE
// begin spotWaterfall = true ;
1088: LD_ADDR_EXP 7
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1096: LD_EXP 49
1100: PPUSH
1101: LD_STRING DWaterfall-Bur-1
1103: PPUSH
1104: CALL_OW 88
// end ;
1108: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1109: LD_EXP 49
1113: PPUSH
1114: LD_INT 130
1116: PPUSH
1117: LD_INT 96
1119: PPUSH
1120: CALL_OW 297
1124: PUSH
1125: LD_INT 5
1127: LESS
1128: PUSH
1129: LD_EXP 3
1133: AND
1134: IFFALSE 1151
1136: GO 1138
1138: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1139: LD_EXP 49
1143: PPUSH
1144: LD_STRING DCorpse-Bur-1
1146: PPUSH
1147: CALL_OW 88
1151: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1152: LD_EXP 4
1156: NOT
1157: IFFALSE 1251
1159: GO 1161
1161: DISABLE
1162: LD_INT 0
1164: PPUSH
// begin enable ;
1165: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1166: LD_ADDR_VAR 0 1
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 25
1183: PUSH
1184: LD_INT 12
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: PUSH
1200: FOR_IN
1201: IFFALSE 1249
// if GetDistUnits ( apeman , Burlak ) < 7 then
1203: LD_VAR 0 1
1207: PPUSH
1208: LD_EXP 49
1212: PPUSH
1213: CALL_OW 296
1217: PUSH
1218: LD_INT 7
1220: LESS
1221: IFFALSE 1247
// begin apemansContact = true ;
1223: LD_ADDR_EXP 4
1227: PUSH
1228: LD_INT 1
1230: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1231: LD_EXP 49
1235: PPUSH
1236: LD_STRING D2-Bur-1
1238: PPUSH
1239: CALL_OW 88
// exit ;
1243: POP
1244: POP
1245: GO 1251
// end ;
1247: GO 1200
1249: POP
1250: POP
// end ;
1251: PPOPN 1
1253: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1254: LD_EXP 5
1258: NOT
1259: IFFALSE 1375
1261: GO 1263
1263: DISABLE
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
// begin enable ;
1268: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1269: LD_ADDR_VAR 0 2
1273: PUSH
1274: LD_INT 22
1276: PUSH
1277: LD_INT 0
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 25
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: PUSH
1303: FOR_IN
1304: IFFALSE 1373
// if Attacks ( apeman ) then
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 320
1315: IFFALSE 1371
// if GetSide ( Attacks ( apeman ) ) = 3 then
1317: LD_VAR 0 2
1321: PPUSH
1322: CALL_OW 320
1326: PPUSH
1327: CALL_OW 255
1331: PUSH
1332: LD_INT 3
1334: EQUAL
1335: IFFALSE 1371
// begin attackedByApeman = true ;
1337: LD_ADDR_EXP 5
1341: PUSH
1342: LD_INT 1
1344: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1345: LD_ADDR_EXP 8
1349: PUSH
1350: LD_VAR 0 2
1354: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1355: LD_EXP 49
1359: PPUSH
1360: LD_STRING D2-Bur-1a
1362: PPUSH
1363: CALL_OW 88
// exit ;
1367: POP
1368: POP
1369: GO 1375
// end ;
1371: GO 1303
1373: POP
1374: POP
// end ;
1375: PPOPN 2
1377: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1378: LD_EXP 6
1382: NOT
1383: IFFALSE 1480
1385: GO 1387
1387: DISABLE
1388: LD_INT 0
1390: PPUSH
1391: PPUSH
// begin enable ;
1392: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1393: LD_ADDR_VAR 0 2
1397: PUSH
1398: LD_INT 24
1400: PPUSH
1401: LD_INT 22
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 25
1413: PUSH
1414: LD_INT 12
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PPUSH
1425: CALL_OW 70
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1478
// if Attacks ( apeman ) then
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 320
1442: IFFALSE 1476
// if GetSide ( Attacks ( apeman ) ) = 3 then
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 320
1453: PPUSH
1454: CALL_OW 255
1458: PUSH
1459: LD_INT 3
1461: EQUAL
1462: IFFALSE 1476
// begin attackedByApemanNearLake = true ;
1464: LD_ADDR_EXP 6
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// exit ;
1472: POP
1473: POP
1474: GO 1480
// end ;
1476: GO 1430
1478: POP
1479: POP
// end ;
1480: PPOPN 2
1482: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1483: LD_EXP 9
1487: PPUSH
1488: CALL_OW 303
1492: IFFALSE 1526
1494: GO 1496
1496: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1497: LD_ADDR_EXP 10
1501: PUSH
1502: LD_EXP 9
1506: PPUSH
1507: CALL_OW 250
1511: PUSH
1512: LD_EXP 9
1516: PPUSH
1517: CALL_OW 251
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: ST_TO_ADDR
1526: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1527: LD_EXP 9
1531: PPUSH
1532: CALL_OW 303
1536: PUSH
1537: LD_INT 3
1539: PPUSH
1540: LD_EXP 10
1544: PUSH
1545: LD_INT 1
1547: ARRAY
1548: PPUSH
1549: LD_EXP 10
1553: PUSH
1554: LD_INT 2
1556: ARRAY
1557: PPUSH
1558: CALL_OW 293
1562: AND
1563: IFFALSE 1947
1565: GO 1567
1567: DISABLE
1568: LD_INT 0
1570: PPUSH
// begin wait ( 0 0$2 ) ;
1571: LD_INT 70
1573: PPUSH
1574: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1578: LD_EXP 49
1582: PPUSH
1583: LD_STRING D2a-Bur-1
1585: PPUSH
1586: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1590: LD_INT 22
1592: PUSH
1593: LD_INT 3
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 21
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PPUSH
1614: CALL_OW 69
1618: PUSH
1619: LD_INT 1
1621: EQUAL
1622: IFFALSE 1638
// Say ( Burlak , D2a-Bur-2 ) else
1624: LD_EXP 49
1628: PPUSH
1629: LD_STRING D2a-Bur-2
1631: PPUSH
1632: CALL_OW 88
1636: GO 1947
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_INT 22
1645: PUSH
1646: LD_INT 3
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 21
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: PUSH
1672: LD_EXP 49
1676: PUSH
1677: LD_EXP 57
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: DIFF
1686: PPUSH
1687: LD_EXP 10
1691: PUSH
1692: LD_INT 1
1694: ARRAY
1695: PPUSH
1696: LD_EXP 10
1700: PUSH
1701: LD_INT 2
1703: ARRAY
1704: PPUSH
1705: CALL_OW 73
1709: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1710: LD_ADDR_EXP 11
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_EXP 10
1729: PUSH
1730: LD_INT 1
1732: ARRAY
1733: PPUSH
1734: LD_EXP 10
1738: PUSH
1739: LD_INT 2
1741: ARRAY
1742: PPUSH
1743: CALL_OW 111
// case nearUnit of Belkov :
1747: LD_VAR 0 1
1751: PUSH
1752: LD_EXP 54
1756: DOUBLE
1757: EQUAL
1758: IFTRUE 1762
1760: GO 1777
1762: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1763: LD_EXP 54
1767: PPUSH
1768: LD_STRING D2a-Bel-1
1770: PPUSH
1771: CALL_OW 88
1775: GO 1844
1777: LD_EXP 56
1781: DOUBLE
1782: EQUAL
1783: IFTRUE 1787
1785: GO 1802
1787: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1788: LD_EXP 56
1792: PPUSH
1793: LD_STRING D2a-Kir-1
1795: PPUSH
1796: CALL_OW 88
1800: GO 1844
1802: POP
// if GetSex ( nearUnit ) = sex_male then
1803: LD_VAR 0 1
1807: PPUSH
1808: CALL_OW 258
1812: PUSH
1813: LD_INT 1
1815: EQUAL
1816: IFFALSE 1832
// Say ( nearUnit , D2a-RSol1-1 ) else
1818: LD_VAR 0 1
1822: PPUSH
1823: LD_STRING D2a-RSol1-1
1825: PPUSH
1826: CALL_OW 88
1830: GO 1844
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_STRING D2a-RFSol1-1
1839: PPUSH
1840: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1844: LD_EXP 57
1848: PPUSH
1849: CALL_OW 255
1853: PUSH
1854: LD_INT 3
1856: EQUAL
1857: PUSH
1858: LD_EXP 57
1862: PPUSH
1863: CALL_OW 302
1867: AND
1868: IFFALSE 1882
// Say ( Gnyevko , D2a-Gny-1 ) ;
1870: LD_EXP 57
1874: PPUSH
1875: LD_STRING D2a-Gny-1
1877: PPUSH
1878: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 5 ) then
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 255
1891: PUSH
1892: LD_INT 5
1894: EQUAL
1895: IFFALSE 1947
// begin Say ( Burlak , D12-Bur-1 ) ;
1897: LD_EXP 49
1901: PPUSH
1902: LD_STRING D12-Bur-1
1904: PPUSH
1905: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1909: LD_EXP 54
1913: PPUSH
1914: CALL_OW 255
1918: PUSH
1919: LD_INT 3
1921: EQUAL
1922: PUSH
1923: LD_EXP 54
1927: PPUSH
1928: CALL_OW 302
1932: AND
1933: IFFALSE 1947
// Say ( Belkov , D12-Bel-2 ) ;
1935: LD_EXP 54
1939: PPUSH
1940: LD_STRING D12-Bel-2
1942: PPUSH
1943: CALL_OW 88
// end ; end ; end ;
1947: PPOPN 1
1949: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1950: LD_EXP 12
1954: NOT
1955: PUSH
1956: LD_EXP 43
1960: PUSH
1961: LD_INT 70
1963: GREATER
1964: AND
1965: IFFALSE 1985
1967: GO 1969
1969: DISABLE
// begin enable ;
1970: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1971: LD_EXP 57
1975: PPUSH
1976: LD_EXP 42
1980: PPUSH
1981: CALL_OW 234
// end ;
1985: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1986: LD_INT 3
1988: PPUSH
1989: LD_EXP 57
1993: PPUSH
1994: CALL_OW 292
1998: IFFALSE 2610
2000: GO 2002
2002: DISABLE
2003: LD_INT 0
2005: PPUSH
2006: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
2007: LD_EXP 57
2011: PPUSH
2012: CALL_OW 87
// DialogueOn ;
2016: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 21
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL_OW 69
2053: PPUSH
2054: LD_EXP 57
2058: PPUSH
2059: CALL_OW 74
2063: ST_TO_ADDR
// if nearUnit = Burlak then
2064: LD_VAR 0 1
2068: PUSH
2069: LD_EXP 49
2073: EQUAL
2074: IFFALSE 2436
// begin Say ( Burlak , D3-Bur-1 ) ;
2076: LD_EXP 49
2080: PPUSH
2081: LD_STRING D3-Bur-1
2083: PPUSH
2084: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2088: LD_EXP 57
2092: PPUSH
2093: LD_STRING D3-Gny-1
2095: PPUSH
2096: CALL_OW 88
// if apeWithRadioKiller then
2100: LD_EXP 11
2104: IFFALSE 2144
// begin if apeWithRadioKiller = Burlak then
2106: LD_EXP 11
2110: PUSH
2111: LD_EXP 49
2115: EQUAL
2116: IFFALSE 2132
// Say ( Burlak , D3-Bur-2 ) else
2118: LD_EXP 49
2122: PPUSH
2123: LD_STRING D3-Bur-2
2125: PPUSH
2126: CALL_OW 88
2130: GO 2144
// Say ( Burlak , D3-Bur-2a ) ;
2132: LD_EXP 49
2136: PPUSH
2137: LD_STRING D3-Bur-2a
2139: PPUSH
2140: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2144: LD_EXP 49
2148: PPUSH
2149: LD_STRING D3-Bur-2b
2151: PPUSH
2152: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2156: LD_INT 22
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 21
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PPUSH
2180: CALL_OW 69
2184: PUSH
2185: LD_INT 1
2187: EQUAL
2188: PUSH
2189: LD_EXP 14
2193: NOT
2194: AND
2195: IFFALSE 2247
// begin Say ( Burlak , D3-Bur-2c ) ;
2197: LD_EXP 49
2201: PPUSH
2202: LD_STRING D3-Bur-2c
2204: PPUSH
2205: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2209: LD_EXP 57
2213: PPUSH
2214: LD_STRING D3-Gny-2
2216: PPUSH
2217: CALL_OW 88
// DialogueOff ;
2221: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2225: LD_EXP 57
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: CALL_OW 235
// gnyevkoSaved = true ;
2237: LD_ADDR_EXP 12
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// exit ;
2245: GO 2610
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2247: LD_INT 22
2249: PUSH
2250: LD_INT 3
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 21
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PPUSH
2271: CALL_OW 69
2275: PUSH
2276: LD_INT 1
2278: GREATER
2279: PUSH
2280: LD_EXP 14
2284: OR
2285: PUSH
2286: LD_EXP 22
2290: NOT
2291: AND
2292: IFFALSE 2344
// begin Say ( Burlak , D3-Bur-2d ) ;
2294: LD_EXP 49
2298: PPUSH
2299: LD_STRING D3-Bur-2d
2301: PPUSH
2302: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2306: LD_EXP 57
2310: PPUSH
2311: LD_STRING D3-Gny-2
2313: PPUSH
2314: CALL_OW 88
// DialogueOff ;
2318: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2322: LD_EXP 57
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: CALL_OW 235
// gnyevkoSaved = true ;
2334: LD_ADDR_EXP 12
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// exit ;
2342: GO 2610
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 21
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: PUSH
2373: LD_INT 1
2375: GREATER
2376: PUSH
2377: LD_EXP 22
2381: AND
2382: IFFALSE 2434
// begin Say ( Burlak , D3-Bur-2e ) ;
2384: LD_EXP 49
2388: PPUSH
2389: LD_STRING D3-Bur-2e
2391: PPUSH
2392: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2396: LD_EXP 57
2400: PPUSH
2401: LD_STRING D3-Gny-2
2403: PPUSH
2404: CALL_OW 88
// DialogueOff ;
2408: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2412: LD_EXP 57
2416: PPUSH
2417: LD_INT 3
2419: PPUSH
2420: CALL_OW 235
// gnyevkoSaved = true ;
2424: LD_ADDR_EXP 12
2428: PUSH
2429: LD_INT 1
2431: ST_TO_ADDR
// exit ;
2432: GO 2610
// end ; end else
2434: GO 2610
// begin if GetSex ( nearUnit ) = sex_male then
2436: LD_VAR 0 1
2440: PPUSH
2441: CALL_OW 258
2445: PUSH
2446: LD_INT 1
2448: EQUAL
2449: IFFALSE 2465
// Say ( nearUnit , D3-RSol1-1 ) else
2451: LD_VAR 0 1
2455: PPUSH
2456: LD_STRING D3-RSol1-1
2458: PPUSH
2459: CALL_OW 88
2463: GO 2477
// Say ( nearUnit , D3-RFSol1-1 ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: LD_STRING D3-RFSol1-1
2472: PPUSH
2473: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2477: LD_EXP 57
2481: PPUSH
2482: LD_STRING D3-Gny-1
2484: PPUSH
2485: CALL_OW 88
// if apeWithRadioKiller then
2489: LD_EXP 11
2493: IFFALSE 2533
// begin if apeWithRadioKiller = Burlak then
2495: LD_EXP 11
2499: PUSH
2500: LD_EXP 49
2504: EQUAL
2505: IFFALSE 2521
// Say ( Burlak , D3-Bur-2 ) else
2507: LD_EXP 49
2511: PPUSH
2512: LD_STRING D3-Bur-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( Burlak , D3-Bur-2a ) ;
2521: LD_EXP 49
2525: PPUSH
2526: LD_STRING D3-Bur-2a
2528: PPUSH
2529: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2533: LD_VAR 0 1
2537: PPUSH
2538: CALL_OW 258
2542: PUSH
2543: LD_INT 1
2545: EQUAL
2546: IFFALSE 2562
// Say ( nearUnit , D3-RSol1-2 ) else
2548: LD_VAR 0 1
2552: PPUSH
2553: LD_STRING D3-RSol1-2
2555: PPUSH
2556: CALL_OW 88
2560: GO 2574
// Say ( nearUnit , D3-RFSol1-2 ) ;
2562: LD_VAR 0 1
2566: PPUSH
2567: LD_STRING D3-RFSol1-2
2569: PPUSH
2570: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2574: LD_EXP 57
2578: PPUSH
2579: LD_STRING D3-Gny-2a
2581: PPUSH
2582: CALL_OW 88
// DialogueOff ;
2586: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2590: LD_EXP 57
2594: PPUSH
2595: LD_INT 3
2597: PPUSH
2598: CALL_OW 235
// gnyevkoSaved = true ;
2602: LD_ADDR_EXP 12
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// end ; end ;
2610: PPOPN 2
2612: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2613: LD_EXP 12
2617: NOT
2618: PUSH
2619: LD_EXP 21
2623: NOT
2624: OR
2625: IFFALSE 2820
2627: GO 2629
2629: DISABLE
2630: LD_INT 0
2632: PPUSH
// begin enable ;
2633: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2634: LD_EXP 12
2638: NOT
2639: PUSH
2640: LD_EXP 43
2644: PUSH
2645: LD_INT 70
2647: GREATER
2648: AND
2649: IFFALSE 2727
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2651: LD_ADDR_VAR 0 1
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 0
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 25
2668: PUSH
2669: LD_INT 12
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2725
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2688: LD_VAR 0 1
2692: PPUSH
2693: LD_EXP 57
2697: PPUSH
2698: CALL_OW 250
2702: PPUSH
2703: LD_EXP 57
2707: PPUSH
2708: CALL_OW 251
2712: PPUSH
2713: LD_INT 10
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL 9101 0 5
2723: GO 2685
2725: POP
2726: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2727: LD_EXP 21
2731: NOT
2732: PUSH
2733: LD_EXP 44
2737: PUSH
2738: LD_INT 70
2740: GREATER
2741: AND
2742: IFFALSE 2820
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2744: LD_ADDR_VAR 0 1
2748: PUSH
2749: LD_INT 22
2751: PUSH
2752: LD_INT 0
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 25
2761: PUSH
2762: LD_INT 12
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PPUSH
2773: CALL_OW 69
2777: PUSH
2778: FOR_IN
2779: IFFALSE 2818
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_EXP 56
2790: PPUSH
2791: CALL_OW 250
2795: PPUSH
2796: LD_EXP 56
2800: PPUSH
2801: CALL_OW 251
2805: PPUSH
2806: LD_INT 10
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL 9101 0 5
2816: GO 2778
2818: POP
2819: POP
// end ;
2820: PPOPN 1
2822: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2823: LD_EXP 12
2827: NOT
2828: PUSH
2829: LD_EXP 21
2833: NOT
2834: OR
2835: IFFALSE 2946
2837: GO 2839
2839: DISABLE
// begin enable ;
2840: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2841: LD_EXP 12
2845: NOT
2846: PUSH
2847: LD_EXP 43
2851: PUSH
2852: LD_INT 0
2854: GREATER
2855: AND
2856: IFFALSE 2872
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2858: LD_ADDR_EXP 43
2862: PUSH
2863: LD_EXP 43
2867: PUSH
2868: LD_INT 35
2870: MINUS
2871: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2872: LD_EXP 56
2876: PPUSH
2877: CALL_OW 305
2881: PUSH
2882: LD_EXP 21
2886: NOT
2887: AND
2888: PUSH
2889: LD_EXP 44
2893: PUSH
2894: LD_INT 0
2896: GREATER
2897: AND
2898: IFFALSE 2914
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2900: LD_ADDR_EXP 44
2904: PUSH
2905: LD_EXP 44
2909: PUSH
2910: LD_INT 35
2912: MINUS
2913: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2914: LD_EXP 56
2918: PPUSH
2919: CALL_OW 305
2923: PUSH
2924: LD_EXP 21
2928: NOT
2929: AND
2930: IFFALSE 2946
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2932: LD_ADDR_EXP 29
2936: PUSH
2937: LD_EXP 29
2941: PUSH
2942: LD_INT 35
2944: PLUS
2945: ST_TO_ADDR
// end ;
2946: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2947: LD_INT 3
2949: PPUSH
2950: LD_EXP 50
2954: PPUSH
2955: CALL_OW 292
2959: PUSH
2960: LD_INT 6
2962: PPUSH
2963: LD_EXP 49
2967: PPUSH
2968: CALL_OW 292
2972: OR
2973: PUSH
2974: LD_EXP 57
2978: PPUSH
2979: CALL_OW 255
2983: PUSH
2984: LD_INT 3
2986: EQUAL
2987: PUSH
2988: LD_INT 6
2990: PPUSH
2991: LD_EXP 57
2995: PPUSH
2996: CALL_OW 292
3000: AND
3001: OR
3002: PUSH
3003: LD_EXP 14
3007: NOT
3008: AND
3009: IFFALSE 3862
3011: GO 3013
3013: DISABLE
// begin enable ;
3014: ENABLE
// InGameOn ;
3015: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
3019: LD_EXP 50
3023: PPUSH
3024: CALL_OW 87
// ComWalk ( Gnyevko ) ;
3028: LD_EXP 57
3032: PPUSH
3033: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3037: LD_EXP 49
3041: PUSH
3042: LD_EXP 57
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 200
// DialogueOn ;
3055: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3059: LD_EXP 13
3063: IFFALSE 3327
// begin meetPokryshkin = true ;
3065: LD_ADDR_EXP 14
3069: PUSH
3070: LD_INT 1
3072: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3073: LD_INT 6
3075: PPUSH
3076: LD_INT 3
3078: PPUSH
3079: CALL_OW 343
// DialogueOff ;
3083: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3087: LD_EXP 49
3091: PPUSH
3092: LD_EXP 50
3096: PPUSH
3097: CALL_OW 250
3101: PPUSH
3102: LD_EXP 50
3106: PPUSH
3107: CALL_OW 251
3111: PPUSH
3112: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3116: LD_EXP 49
3120: PPUSH
3121: LD_EXP 50
3125: PPUSH
3126: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3130: LD_EXP 50
3134: PPUSH
3135: LD_EXP 49
3139: PPUSH
3140: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3144: LD_EXP 57
3148: PPUSH
3149: LD_STRING D4-Gny-3
3151: PPUSH
3152: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3156: LD_EXP 49
3160: PPUSH
3161: LD_STRING D4-Bur-3
3163: PPUSH
3164: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3168: LD_EXP 50
3172: PPUSH
3173: LD_STRING D4-Pok-4
3175: PPUSH
3176: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3180: LD_EXP 45
3184: PPUSH
3185: LD_INT 18
3187: PPUSH
3188: LD_INT 1
3190: PPUSH
3191: CALL_OW 49
// wait ( 0 0$2 ) ;
3195: LD_INT 70
3197: PPUSH
3198: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3202: LD_EXP 49
3206: PPUSH
3207: LD_STRING D4-Bur-4
3209: PPUSH
3210: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3214: LD_EXP 50
3218: PPUSH
3219: LD_STRING D4-Pok-5
3221: PPUSH
3222: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3226: LD_EXP 45
3230: PPUSH
3231: LD_STRING D4-Sol1-5
3233: PPUSH
3234: LD_INT 0
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 0
3245: PPUSH
3246: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3250: LD_EXP 50
3254: PPUSH
3255: LD_STRING D4-Pok-6
3257: PPUSH
3258: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3262: LD_EXP 50
3266: PPUSH
3267: LD_STRING D4-Pok-6a
3269: PPUSH
3270: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3274: LD_EXP 49
3278: PPUSH
3279: LD_STRING D4-Bur-6
3281: PPUSH
3282: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3286: LD_EXP 50
3290: PPUSH
3291: LD_STRING D4-Pok-7
3293: PPUSH
3294: CALL_OW 88
// DialogueOff ;
3298: CALL_OW 7
// InGameOff ;
3302: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// goToHill = true ;
3313: LD_ADDR_EXP 15
3317: PUSH
3318: LD_INT 1
3320: ST_TO_ADDR
// MoveToHill ;
3321: CALL 10981 0 0
// exit ;
3325: GO 3862
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3327: LD_EXP 49
3331: PUSH
3332: LD_EXP 57
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3345: LD_EXP 50
3349: PPUSH
3350: LD_STRING D4-Pok-1
3352: PPUSH
3353: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3357: LD_EXP 57
3361: PPUSH
3362: LD_EXP 50
3366: PPUSH
3367: CALL_OW 296
3371: PUSH
3372: LD_INT 15
3374: LESSEQUAL
3375: PUSH
3376: LD_EXP 49
3380: PPUSH
3381: LD_EXP 50
3385: PPUSH
3386: CALL_OW 296
3390: PUSH
3391: LD_INT 20
3393: GREATER
3394: AND
3395: IFFALSE 3505
// begin ComWalk ( Gnyevko ) ;
3397: LD_EXP 57
3401: PPUSH
3402: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3406: LD_EXP 57
3410: PPUSH
3411: LD_STRING D4-Gny-1
3413: PPUSH
3414: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3418: LD_EXP 50
3422: PPUSH
3423: LD_STRING D4-Pok-2
3425: PPUSH
3426: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3430: LD_EXP 57
3434: PPUSH
3435: LD_STRING D4-Gny-2
3437: PPUSH
3438: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3442: LD_EXP 50
3446: PPUSH
3447: LD_STRING D4-Pok-3
3449: PPUSH
3450: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3454: LD_ADDR_EXP 13
3458: PUSH
3459: LD_INT 1
3461: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3462: LD_EXP 57
3466: PPUSH
3467: LD_INT 6
3469: PPUSH
3470: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3474: LD_EXP 57
3478: PPUSH
3479: LD_EXP 50
3483: PPUSH
3484: CALL_OW 250
3488: PPUSH
3489: LD_EXP 50
3493: PPUSH
3494: CALL_OW 251
3498: PPUSH
3499: CALL_OW 171
// end else
3503: GO 3854
// begin meetPokryshkin = true ;
3505: LD_ADDR_EXP 14
3509: PUSH
3510: LD_INT 1
3512: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3513: LD_INT 6
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: CALL_OW 343
// DialogueOff ;
3523: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3527: LD_EXP 57
3531: PPUSH
3532: CALL_OW 255
3536: PUSH
3537: LD_INT 3
3539: EQUAL
3540: PUSH
3541: LD_EXP 57
3545: PPUSH
3546: CALL_OW 302
3550: AND
3551: IFFALSE 3628
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3553: LD_EXP 49
3557: PUSH
3558: LD_EXP 57
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: LD_EXP 50
3571: PPUSH
3572: CALL_OW 250
3576: PPUSH
3577: LD_EXP 50
3581: PPUSH
3582: CALL_OW 251
3586: PPUSH
3587: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3591: LD_EXP 49
3595: PUSH
3596: LD_EXP 57
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: LD_EXP 50
3609: PPUSH
3610: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3614: LD_EXP 57
3618: PPUSH
3619: LD_INT 6
3621: PPUSH
3622: CALL_OW 235
// end else
3626: GO 3671
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3628: LD_EXP 49
3632: PPUSH
3633: LD_EXP 50
3637: PPUSH
3638: CALL_OW 250
3642: PPUSH
3643: LD_EXP 50
3647: PPUSH
3648: CALL_OW 251
3652: PPUSH
3653: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3657: LD_EXP 49
3661: PPUSH
3662: LD_EXP 50
3666: PPUSH
3667: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3671: LD_EXP 50
3675: PPUSH
3676: LD_EXP 49
3680: PPUSH
3681: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3685: LD_EXP 49
3689: PPUSH
3690: LD_STRING D4-Bur-3
3692: PPUSH
3693: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3697: LD_EXP 50
3701: PPUSH
3702: LD_STRING D4-Pok-4
3704: PPUSH
3705: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3709: LD_EXP 45
3713: PPUSH
3714: LD_INT 18
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: CALL_OW 49
// wait ( 0 0$2 ) ;
3724: LD_INT 70
3726: PPUSH
3727: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3731: LD_EXP 49
3735: PPUSH
3736: LD_STRING D4-Bur-4
3738: PPUSH
3739: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3743: LD_EXP 50
3747: PPUSH
3748: LD_STRING D4-Pok-5
3750: PPUSH
3751: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3755: LD_EXP 45
3759: PPUSH
3760: LD_STRING D4-Sol1-5
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 0
3774: PPUSH
3775: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3779: LD_EXP 50
3783: PPUSH
3784: LD_STRING D4-Pok-6
3786: PPUSH
3787: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3791: LD_EXP 50
3795: PPUSH
3796: LD_STRING D4-Pok-6a
3798: PPUSH
3799: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3803: LD_EXP 49
3807: PPUSH
3808: LD_STRING D4-Bur-6
3810: PPUSH
3811: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3815: LD_EXP 50
3819: PPUSH
3820: LD_STRING D4-Pok-7
3822: PPUSH
3823: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3827: LD_STRING M2
3829: PPUSH
3830: CALL_OW 337
// goToHill = true ;
3834: LD_ADDR_EXP 15
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// DialogueOff ;
3842: CALL_OW 7
// InGameOff ;
3846: CALL_OW 9
// MoveToHill ;
3850: CALL 10981 0 0
// end ; DialogueOff ;
3854: CALL_OW 7
// InGameOff ;
3858: CALL_OW 9
// end ;
3862: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3863: LD_EXP 49
3867: PPUSH
3868: LD_EXP 50
3872: PPUSH
3873: CALL_OW 296
3877: PUSH
3878: LD_INT 10
3880: GREATER
3881: PUSH
3882: LD_EXP 15
3886: AND
3887: PUSH
3888: LD_EXP 18
3892: NOT
3893: AND
3894: IFFALSE 4095
3896: GO 3898
3898: DISABLE
3899: LD_INT 0
3901: PPUSH
// begin enable ;
3902: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3903: LD_ADDR_VAR 0 1
3907: PUSH
3908: LD_EXP 50
3912: PUSH
3913: LD_EXP 51
3917: PUSH
3918: LD_EXP 52
3922: PUSH
3923: LD_EXP 53
3927: PUSH
3928: LD_EXP 54
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3940: LD_EXP 57
3944: PPUSH
3945: CALL_OW 255
3949: PUSH
3950: LD_INT 6
3952: EQUAL
3953: PUSH
3954: LD_EXP 12
3958: AND
3959: IFFALSE 3977
// ruSolds = ruSolds ^ Gnyevko ;
3961: LD_ADDR_VAR 0 1
3965: PUSH
3966: LD_VAR 0 1
3970: PUSH
3971: LD_EXP 57
3975: ADD
3976: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3986: LD_EXP 49
3990: PPUSH
3991: CALL_OW 87
// DialogueOn ;
3995: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3999: LD_EXP 50
4003: PPUSH
4004: LD_STRING DSplit-Pok-1
4006: PPUSH
4007: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4011: LD_EXP 49
4015: PPUSH
4016: LD_STRING DSplit-Bur-1
4018: PPUSH
4019: CALL_OW 88
// DialogueOff ;
4023: CALL_OW 7
// InGameOn ;
4027: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4031: LD_EXP 49
4035: PPUSH
4036: LD_EXP 50
4040: PPUSH
4041: CALL_OW 250
4045: PPUSH
4046: LD_EXP 50
4050: PPUSH
4051: CALL_OW 251
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4067: LD_EXP 49
4071: PPUSH
4072: LD_EXP 50
4076: PPUSH
4077: CALL_OW 296
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4031
// InGameOff ;
4087: CALL_OW 9
// MoveToHill ;
4091: CALL 10981 0 0
// end ;
4095: PPOPN 1
4097: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4098: LD_INT 0
4100: PPUSH
4101: PPUSH
// traitor = true ;
4102: LD_ADDR_EXP 18
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// DialogueOn ;
4110: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4114: LD_EXP 50
4118: PPUSH
4119: LD_STRING DAttack-Pok-1
4121: PPUSH
4122: CALL_OW 88
// DialogueOff ;
4126: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4130: LD_INT 3
4132: PPUSH
4133: LD_INT 6
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: LD_INT 1
4141: PPUSH
4142: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4146: LD_INT 22
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 21
4158: PUSH
4159: LD_INT 1
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PPUSH
4170: CALL_OW 69
4174: PPUSH
4175: LD_EXP 49
4179: PPUSH
4180: CALL_OW 115
// end ;
4184: LD_VAR 0 1
4188: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4189: LD_EXP 50
4193: PPUSH
4194: LD_INT 65
4196: PPUSH
4197: LD_INT 59
4199: PPUSH
4200: CALL_OW 297
4204: PUSH
4205: LD_INT 4
4207: LESS
4208: PUSH
4209: LD_EXP 18
4213: NOT
4214: AND
4215: IFFALSE 4412
4217: GO 4219
4219: DISABLE
// begin InGameOn ;
4220: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4224: LD_INT 55
4226: PPUSH
4227: LD_INT 50
4229: PPUSH
4230: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4234: LD_EXP 49
4238: PPUSH
4239: LD_INT 66
4241: PPUSH
4242: LD_INT 57
4244: PPUSH
4245: CALL_OW 111
// AddComHold ( Burlak ) ;
4249: LD_EXP 49
4253: PPUSH
4254: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4258: LD_EXP 45
4262: PPUSH
4263: LD_INT 59
4265: PPUSH
4266: LD_INT 55
4268: PPUSH
4269: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4273: LD_INT 35
4275: PPUSH
4276: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4280: LD_INT 1
4282: PPUSH
4283: LD_EXP 50
4287: PPUSH
4288: CALL_OW 292
4292: IFFALSE 4273
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4294: LD_EXP 45
4298: PUSH
4299: LD_EXP 50
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 87
// ComStop ( Charles ) ;
4312: LD_EXP 45
4316: PPUSH
4317: CALL_OW 141
// AddComHold ( Charles ) ;
4321: LD_EXP 45
4325: PPUSH
4326: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4330: LD_EXP 45
4334: PPUSH
4335: LD_EXP 50
4339: PPUSH
4340: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4344: LD_EXP 45
4348: PPUSH
4349: LD_STRING D5-Sol1-1
4351: PPUSH
4352: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4356: LD_EXP 50
4360: PPUSH
4361: LD_STRING D5-Pok-1
4363: PPUSH
4364: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 6
4373: PPUSH
4374: LD_INT 2
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4384: LD_INT 1
4386: PPUSH
4387: LD_INT 3
4389: PPUSH
4390: LD_INT 2
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4400: LD_EXP 45
4404: PPUSH
4405: LD_STRING D5-Sol1-2
4407: PPUSH
4408: CALL_OW 88
// end ;
4412: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4413: LD_EXP 45
4417: PPUSH
4418: CALL_OW 301
4422: PUSH
4423: LD_EXP 15
4427: AND
4428: IFFALSE 5019
4430: GO 4432
4432: DISABLE
4433: LD_INT 0
4435: PPUSH
// begin InGameOn ;
4436: CALL_OW 8
// goToHill = false ;
4440: LD_ADDR_EXP 15
4444: PUSH
4445: LD_INT 0
4447: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4448: LD_INT 22
4450: PUSH
4451: LD_INT 6
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 21
4460: PUSH
4461: LD_INT 1
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 69
4476: PPUSH
4477: CALL_OW 141
// wait ( 0 0$1 ) ;
4481: LD_INT 35
4483: PPUSH
4484: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4488: LD_INT 22
4490: PUSH
4491: LD_INT 6
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 21
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: PPUSH
4517: CALL_OW 138
// wait ( 0 0$1 ) ;
4521: LD_INT 35
4523: PPUSH
4524: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4528: LD_INT 55
4530: PPUSH
4531: LD_INT 50
4533: PPUSH
4534: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4538: LD_EXP 49
4542: PPUSH
4543: LD_INT 56
4545: PPUSH
4546: LD_INT 56
4548: PPUSH
4549: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4553: LD_INT 22
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PPUSH
4577: CALL_OW 69
4581: PPUSH
4582: LD_INT 56
4584: PPUSH
4585: LD_INT 56
4587: PPUSH
4588: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4592: LD_EXP 49
4596: PPUSH
4597: LD_STRING D5-Bur-2
4599: PPUSH
4600: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4604: LD_EXP 50
4608: PPUSH
4609: LD_STRING D5-Pok-2
4611: PPUSH
4612: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4616: LD_EXP 54
4620: PPUSH
4621: LD_STRING D5-Bel-2
4623: PPUSH
4624: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4628: LD_EXP 50
4632: PPUSH
4633: LD_STRING D5-Pok-3
4635: PPUSH
4636: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4640: LD_EXP 57
4644: PPUSH
4645: CALL_OW 255
4649: PUSH
4650: LD_INT 6
4652: EQUAL
4653: IFFALSE 4667
// Say ( Gnyevko , D5-Gny-3 ) ;
4655: LD_EXP 57
4659: PPUSH
4660: LD_STRING D5-Gny-3
4662: PPUSH
4663: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4667: LD_EXP 49
4671: PPUSH
4672: LD_STRING D5-Bur-3
4674: PPUSH
4675: CALL_OW 88
// interface_hidden = true ;
4679: LD_ADDR_OWVAR 54
4683: PUSH
4684: LD_INT 1
4686: ST_TO_ADDR
// IngameOff ;
4687: CALL_OW 9
// wait ( 0 0$2 ) ;
4691: LD_INT 70
4693: PPUSH
4694: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4698: LD_EXP 49
4702: PPUSH
4703: LD_INT 85
4705: PPUSH
4706: LD_INT 64
4708: PPUSH
4709: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4713: LD_INT 22
4715: PUSH
4716: LD_INT 6
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: PPUSH
4742: LD_INT 85
4744: PPUSH
4745: LD_INT 64
4747: PPUSH
4748: CALL_OW 111
// interface_hidden = false ;
4752: LD_ADDR_OWVAR 54
4756: PUSH
4757: LD_INT 0
4759: ST_TO_ADDR
// InGameOn ;
4760: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4764: LD_EXP 49
4768: PPUSH
4769: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4773: LD_EXP 50
4777: PPUSH
4778: LD_STRING D6-Pok-1
4780: PPUSH
4781: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4785: LD_EXP 49
4789: PPUSH
4790: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4794: LD_EXP 49
4798: PPUSH
4799: LD_STRING D6-Bur-1
4801: PPUSH
4802: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4806: LD_EXP 49
4810: PPUSH
4811: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4815: LD_EXP 50
4819: PPUSH
4820: LD_STRING D6-Pok-2
4822: PPUSH
4823: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4827: LD_EXP 49
4831: PPUSH
4832: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4836: LD_EXP 54
4840: PPUSH
4841: LD_STRING D6-Bel-2
4843: PPUSH
4844: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4848: LD_EXP 49
4852: PPUSH
4853: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4857: LD_EXP 49
4861: PPUSH
4862: LD_STRING D6-Bur-2
4864: PPUSH
4865: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4869: LD_EXP 49
4873: PPUSH
4874: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4878: LD_EXP 50
4882: PPUSH
4883: LD_STRING D6-Pok-3
4885: PPUSH
4886: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4890: LD_EXP 49
4894: PPUSH
4895: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4899: LD_EXP 58
4903: PPUSH
4904: LD_STRING D6-Kur-3
4906: PPUSH
4907: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4911: LD_EXP 49
4915: PPUSH
4916: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4920: LD_EXP 50
4924: PPUSH
4925: LD_STRING D6-Pok-4
4927: PPUSH
4928: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4932: LD_EXP 49
4936: PPUSH
4937: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4941: LD_EXP 54
4945: PPUSH
4946: LD_STRING D6-Bel-4
4948: PPUSH
4949: CALL_OW 88
// InGameOff ;
4953: CALL_OW 9
// interface_hidden = false ;
4957: LD_ADDR_OWVAR 54
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4965: LD_EXP 50
4969: PPUSH
4970: LD_INT 27
4972: PPUSH
4973: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4977: LD_INT 22
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 21
4989: PUSH
4990: LD_INT 1
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PUSH
5006: LD_EXP 50
5010: DIFF
5011: PPUSH
5012: LD_INT 27
5014: PPUSH
5015: CALL_OW 113
// end ;
5019: PPOPN 1
5021: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
5022: LD_EXP 50
5026: PPUSH
5027: LD_INT 27
5029: PPUSH
5030: CALL_OW 308
5034: IFFALSE 5117
5036: GO 5038
5038: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5039: LD_EXP 50
5043: PPUSH
5044: LD_STRING D7-Pok-1
5046: PPUSH
5047: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5051: LD_EXP 50
5055: PPUSH
5056: LD_INT 23
5058: PPUSH
5059: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5063: LD_INT 22
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 21
5075: PUSH
5076: LD_INT 1
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: PUSH
5092: LD_EXP 50
5096: DIFF
5097: PPUSH
5098: LD_INT 23
5100: PPUSH
5101: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5105: LD_INT 1
5107: PPUSH
5108: LD_EXP 57
5112: PPUSH
5113: CALL_OW 471
// end ;
5117: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5118: LD_INT 1
5120: PPUSH
5121: LD_EXP 50
5125: PPUSH
5126: CALL_OW 292
5130: PUSH
5131: LD_EXP 45
5135: PPUSH
5136: CALL_OW 301
5140: AND
5141: IFFALSE 5160
5143: GO 5145
5145: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5146: LD_EXP 46
5150: PPUSH
5151: LD_EXP 50
5155: PPUSH
5156: CALL_OW 115
5160: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 23
5166: PPUSH
5167: CALL_OW 292
5171: IFFALSE 5188
5173: GO 5175
5175: DISABLE
// begin SayNoName ( Johanna , D7-FSol1-1 ) ;
5176: LD_EXP 46
5180: PPUSH
5181: LD_STRING D7-FSol1-1
5183: PPUSH
5184: CALL_OW 90
// end ;
5188: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5189: LD_EXP 50
5193: PPUSH
5194: CALL_OW 303
5198: IFFALSE 5730
5200: GO 5202
5202: DISABLE
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 22
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 21
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 50
5235: PUSH
5236: EMPTY
5237: LIST
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 69
5248: PUSH
5249: LD_EXP 54
5253: DIFF
5254: ST_TO_ADDR
// DialogueOn ;
5255: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5259: LD_EXP 54
5263: PPUSH
5264: LD_STRING D7a-Bel-1
5266: PPUSH
5267: CALL_OW 88
// DialogueOff ;
5271: CALL_OW 7
// for i := 1 to ruSolds do
5275: LD_ADDR_VAR 0 1
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 3
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5349
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5293: LD_VAR 0 3
5297: PUSH
5298: LD_VAR 0 1
5302: ARRAY
5303: PPUSH
5304: LD_INT 87
5306: PUSH
5307: LD_VAR 0 1
5311: PLUS
5312: PPUSH
5313: LD_INT 63
5315: PUSH
5316: LD_VAR 0 1
5320: PLUS
5321: PPUSH
5322: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5326: LD_VAR 0 3
5330: PUSH
5331: LD_VAR 0 1
5335: ARRAY
5336: PPUSH
5337: LD_INT 89
5339: PPUSH
5340: LD_INT 67
5342: PPUSH
5343: CALL_OW 178
// end ;
5347: GO 5290
5349: POP
5350: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5351: LD_EXP 54
5355: PPUSH
5356: LD_INT 89
5358: PPUSH
5359: LD_INT 67
5361: PPUSH
5362: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5366: LD_EXP 54
5370: PPUSH
5371: LD_INT 88
5373: PPUSH
5374: LD_INT 66
5376: PPUSH
5377: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5381: LD_EXP 51
5385: PPUSH
5386: LD_STRING D7a-RSol1-1
5388: PPUSH
5389: CALL_OW 88
// SayNoName ( Johanna , D7a-FSol1-1 ) ;
5393: LD_EXP 46
5397: PPUSH
5398: LD_STRING D7a-FSol1-1
5400: PPUSH
5401: CALL_OW 90
// wait ( 0 0$12 ) ;
5405: LD_INT 420
5407: PPUSH
5408: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5412: LD_EXP 54
5416: PPUSH
5417: LD_STRING D7b-Bel-1
5419: PPUSH
5420: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5424: LD_EXP 52
5428: PPUSH
5429: LD_STRING D7b-FSol1-1
5431: PPUSH
5432: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5436: LD_EXP 54
5440: PPUSH
5441: LD_STRING D7b-Bel-2
5443: PPUSH
5444: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5448: LD_EXP 51
5452: PPUSH
5453: LD_STRING D7b-RSol1-2
5455: PPUSH
5456: CALL_OW 88
// for unit in ruSolds do
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: LD_VAR 0 3
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5704
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5473: LD_EXP 49
5477: PPUSH
5478: LD_VAR 0 2
5482: PPUSH
5483: CALL_OW 296
5487: PUSH
5488: LD_INT 7
5490: LESS
5491: IFFALSE 5702
// begin InGameOn ;
5493: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5497: LD_EXP 54
5501: PUSH
5502: LD_EXP 51
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5515: LD_EXP 49
5519: PPUSH
5520: LD_INT 88
5522: PPUSH
5523: LD_INT 66
5525: PPUSH
5526: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_EXP 49
5539: PPUSH
5540: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5544: LD_EXP 49
5548: PPUSH
5549: LD_INT 90
5551: PPUSH
5552: LD_INT 66
5554: PPUSH
5555: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5559: LD_EXP 49
5563: PPUSH
5564: LD_STRING D7b-Bur-3
5566: PPUSH
5567: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5571: LD_EXP 54
5575: PPUSH
5576: LD_STRING D7b-Bel-4
5578: PPUSH
5579: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5583: LD_EXP 49
5587: PPUSH
5588: LD_STRING D7b-Bur-4
5590: PPUSH
5591: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5595: LD_EXP 54
5599: PPUSH
5600: LD_STRING D7b-Bel-5
5602: PPUSH
5603: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5607: LD_EXP 52
5611: PPUSH
5612: LD_STRING D7b-FSol1-5
5614: PPUSH
5615: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5619: LD_EXP 54
5623: PPUSH
5624: LD_STRING D7b-Bel-6
5626: PPUSH
5627: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5631: LD_EXP 49
5635: PPUSH
5636: LD_STRING D7b-Bur-6
5638: PPUSH
5639: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5643: LD_EXP 51
5647: PPUSH
5648: LD_STRING D7b-RSol1-6
5650: PPUSH
5651: CALL_OW 88
// InGameOff ;
5655: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5659: LD_VAR 0 3
5663: PPUSH
5664: LD_INT 3
5666: PPUSH
5667: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5671: LD_EXP 54
5675: PPUSH
5676: LD_INT 3
5678: PPUSH
5679: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5683: LD_STRING M3
5685: PPUSH
5686: CALL_OW 337
// secondAttack = true ;
5690: LD_ADDR_EXP 17
5694: PUSH
5695: LD_INT 1
5697: ST_TO_ADDR
// exit ;
5698: POP
5699: POP
5700: GO 5730
// end ;
5702: GO 5470
5704: POP
5705: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5706: LD_EXP 54
5710: PPUSH
5711: LD_STRING D7b-Bel-3
5713: PPUSH
5714: CALL_OW 88
// InGameOff ;
5718: CALL_OW 9
// belkovWaitForGorky = true ;
5722: LD_ADDR_EXP 16
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// end ;
5730: PPOPN 3
5732: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5733: LD_EXP 16
5737: PUSH
5738: LD_EXP 18
5742: NOT
5743: AND
5744: IFFALSE 6054
5746: GO 5748
5748: DISABLE
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
// begin enable ;
5753: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 6
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 21
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PPUSH
5783: CALL_OW 69
5787: ST_TO_ADDR
// for unit in ruSolds do
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_VAR 0 2
5797: PUSH
5798: FOR_IN
5799: IFFALSE 6052
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5801: LD_EXP 49
5805: PPUSH
5806: LD_VAR 0 1
5810: PPUSH
5811: CALL_OW 296
5815: PUSH
5816: LD_INT 7
5818: LESS
5819: IFFALSE 6050
// begin belkovWaitForGorky = false ;
5821: LD_ADDR_EXP 16
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// InGameOn ;
5829: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5833: LD_EXP 54
5837: PUSH
5838: LD_EXP 51
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5851: LD_EXP 49
5855: PPUSH
5856: LD_INT 88
5858: PPUSH
5859: LD_INT 66
5861: PPUSH
5862: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5866: LD_EXP 54
5870: PPUSH
5871: LD_EXP 49
5875: PPUSH
5876: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5880: LD_EXP 49
5884: PPUSH
5885: LD_INT 90
5887: PPUSH
5888: LD_INT 66
5890: PPUSH
5891: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5895: LD_EXP 54
5899: PPUSH
5900: LD_STRING D7b-Bel-3a
5902: PPUSH
5903: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_STRING D7b-Bur-3
5914: PPUSH
5915: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5919: LD_EXP 54
5923: PPUSH
5924: LD_STRING D7b-Bel-4
5926: PPUSH
5927: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5931: LD_EXP 49
5935: PPUSH
5936: LD_STRING D7b-Bur-4
5938: PPUSH
5939: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5943: LD_EXP 54
5947: PPUSH
5948: LD_STRING D7b-Bel-5
5950: PPUSH
5951: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5955: LD_EXP 52
5959: PPUSH
5960: LD_STRING D7b-FSol1-5
5962: PPUSH
5963: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5967: LD_EXP 54
5971: PPUSH
5972: LD_STRING D7b-Bel-6
5974: PPUSH
5975: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5979: LD_EXP 49
5983: PPUSH
5984: LD_STRING D7b-Bur-6
5986: PPUSH
5987: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5991: LD_EXP 51
5995: PPUSH
5996: LD_STRING D7a-RSol1-6
5998: PPUSH
5999: CALL_OW 88
// InGameOff ;
6003: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
6019: LD_EXP 54
6023: PPUSH
6024: LD_INT 3
6026: PPUSH
6027: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
6031: LD_STRING M3
6033: PPUSH
6034: CALL_OW 337
// secondAttack = true ;
6038: LD_ADDR_EXP 17
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// exit ;
6046: POP
6047: POP
6048: GO 6054
// end ;
6050: GO 5798
6052: POP
6053: POP
// end ;
6054: PPOPN 2
6056: END
// export function Dial_SecondAttack ; var units , i ; begin
6057: LD_INT 0
6059: PPUSH
6060: PPUSH
6061: PPUSH
// SayEX ( Johanna , D8-FSol1-1 , true , false , false , false ) ;
6062: LD_EXP 46
6066: PPUSH
6067: LD_STRING D8-FSol1-1
6069: PPUSH
6070: LD_INT 1
6072: PPUSH
6073: LD_INT 0
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 587
// SayEX ( Gladstone , D8-Glad-1 , false , false , false , false ) ;
6086: LD_EXP 47
6090: PPUSH
6091: LD_STRING D8-Glad-1
6093: PPUSH
6094: LD_INT 0
6096: PPUSH
6097: LD_INT 0
6099: PPUSH
6100: LD_INT 0
6102: PPUSH
6103: LD_INT 0
6105: PPUSH
6106: CALL_OW 587
// Say ( Burlak , D8-Bur-1 ) ;
6110: LD_EXP 49
6114: PPUSH
6115: LD_STRING D8-Bur-1
6117: PPUSH
6118: CALL_OW 88
// secondAttack = false ;
6122: LD_ADDR_EXP 17
6126: PUSH
6127: LD_INT 0
6129: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PPUSH
6159: CALL_OW 69
6163: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6164: LD_EXP 48
6168: PPUSH
6169: CALL_OW 122
// wait ( 0 0$1 ) ;
6173: LD_INT 35
6175: PPUSH
6176: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6180: LD_INT 35
6182: PPUSH
6183: CALL_OW 67
// for i in amApemans do
6187: LD_ADDR_VAR 0 3
6191: PUSH
6192: LD_EXP 48
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6264
// begin if rand ( 0 , 1 ) then
6200: LD_INT 0
6202: PPUSH
6203: LD_INT 1
6205: PPUSH
6206: CALL_OW 12
6210: IFFALSE 6238
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6212: LD_VAR 0 3
6216: PPUSH
6217: LD_VAR 0 2
6221: PPUSH
6222: LD_VAR 0 3
6226: PPUSH
6227: CALL_OW 74
6231: PPUSH
6232: CALL_OW 115
6236: GO 6262
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_VAR 0 3
6252: PPUSH
6253: CALL 6289 0 2
6257: PPUSH
6258: CALL_OW 115
// end ;
6262: GO 6197
6264: POP
6265: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6266: LD_EXP 48
6270: PPUSH
6271: LD_INT 50
6273: PUSH
6274: EMPTY
6275: LIST
6276: PPUSH
6277: CALL_OW 72
6281: NOT
6282: IFFALSE 6180
// end ;
6284: LD_VAR 0 1
6288: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6289: LD_INT 0
6291: PPUSH
6292: PPUSH
// if group < 2 then
6293: LD_VAR 0 1
6297: PUSH
6298: LD_INT 2
6300: LESS
6301: IFFALSE 6325
// begin result := NearestUnitToUnit ( group , unit ) ;
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_VAR 0 2
6317: PPUSH
6318: CALL_OW 74
6322: ST_TO_ADDR
// exit ;
6323: GO 6371
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6325: LD_ADDR_VAR 0 4
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 74
6344: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6345: LD_ADDR_VAR 0 3
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: LD_VAR 0 4
6359: DIFF
6360: PPUSH
6361: LD_VAR 0 2
6365: PPUSH
6366: CALL_OW 74
6370: ST_TO_ADDR
// end ;
6371: LD_VAR 0 3
6375: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6376: LD_INT 23
6378: PPUSH
6379: CALL_OW 256
6383: PUSH
6384: LD_INT 350
6386: LESS
6387: PUSH
6388: LD_INT 23
6390: PPUSH
6391: CALL_OW 256
6395: PUSH
6396: LD_INT 250
6398: GREATER
6399: AND
6400: PUSH
6401: LD_INT 20
6403: PPUSH
6404: LD_INT 22
6406: PUSH
6407: LD_INT 3
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 21
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PPUSH
6428: CALL_OW 70
6432: PUSH
6433: LD_INT 0
6435: GREATER
6436: AND
6437: PUSH
6438: LD_EXP 24
6442: NOT
6443: AND
6444: IFFALSE 6473
6446: GO 6448
6448: DISABLE
// SayEX ( Johanna , D8-FSol1-2 , true , false , false , false ) ;
6449: LD_EXP 46
6453: PPUSH
6454: LD_STRING D8-FSol1-2
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: LD_INT 0
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 587
6473: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6474: LD_INT 23
6476: PPUSH
6477: CALL_OW 303
6481: PUSH
6482: LD_INT 22
6484: PPUSH
6485: CALL_OW 302
6489: AND
6490: PUSH
6491: LD_EXP 24
6495: NOT
6496: AND
6497: IFFALSE 6567
6499: GO 6501
6501: DISABLE
// begin amRetreat = true ;
6502: LD_ADDR_EXP 24
6506: PUSH
6507: LD_INT 1
6509: ST_TO_ADDR
// SayNoName ( Johanna , D8-FSol1-2a ) ;
6510: LD_EXP 46
6514: PPUSH
6515: LD_STRING D8-FSol1-2a
6517: PPUSH
6518: CALL_OW 90
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6522: LD_EXP 47
6526: PUSH
6527: LD_EXP 46
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PPUSH
6536: LD_INT 21
6538: PPUSH
6539: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6543: LD_EXP 47
6547: PPUSH
6548: LD_STRING D8-Glad-2
6550: PPUSH
6551: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6555: LD_EXP 49
6559: PPUSH
6560: LD_STRING D8-Bur-2
6562: PPUSH
6563: CALL_OW 88
// end ;
6567: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6568: LD_INT 22
6570: PPUSH
6571: CALL_OW 303
6575: PUSH
6576: LD_INT 23
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_EXP 24
6589: NOT
6590: AND
6591: IFFALSE 6673
6593: GO 6595
6595: DISABLE
// begin amRetreat = true ;
6596: LD_ADDR_EXP 24
6600: PUSH
6601: LD_INT 1
6603: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6604: LD_EXP 46
6608: PPUSH
6609: LD_STRING D8-FSol1-2a
6611: PPUSH
6612: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6616: LD_EXP 47
6620: PUSH
6621: LD_EXP 46
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PPUSH
6630: LD_INT 21
6632: PPUSH
6633: CALL_OW 113
// SayEX ( Gladstone , D8-Glad-2 , true , false , false , false ) ;
6637: LD_EXP 47
6641: PPUSH
6642: LD_STRING D8-Glad-2
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 0
6650: PPUSH
6651: LD_INT 0
6653: PPUSH
6654: LD_INT 0
6656: PPUSH
6657: CALL_OW 587
// Say ( Burlak , D8-Bur-2 ) ;
6661: LD_EXP 49
6665: PPUSH
6666: LD_STRING D8-Bur-2
6668: PPUSH
6669: CALL_OW 88
// end ;
6673: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty = 3 ) and not amRetreat do
6674: LD_EXP 48
6678: PPUSH
6679: CALL_OW 301
6683: PUSH
6684: LD_OWVAR 67
6688: PUSH
6689: LD_INT 3
6691: EQUAL
6692: AND
6693: PUSH
6694: LD_EXP 24
6698: NOT
6699: AND
6700: IFFALSE 6782
6702: GO 6704
6704: DISABLE
// begin amRetreat = true ;
6705: LD_ADDR_EXP 24
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// SayEX ( Johanna , D8-FSol1-2a , true , false , false , false ) ;
6713: LD_EXP 46
6717: PPUSH
6718: LD_STRING D8-FSol1-2a
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: LD_INT 0
6726: PPUSH
6727: LD_INT 0
6729: PPUSH
6730: LD_INT 0
6732: PPUSH
6733: CALL_OW 587
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6737: LD_EXP 47
6741: PUSH
6742: LD_EXP 46
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PPUSH
6751: LD_INT 21
6753: PPUSH
6754: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6758: LD_EXP 47
6762: PPUSH
6763: LD_STRING D8-Glad-2
6765: PPUSH
6766: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6770: LD_EXP 49
6774: PPUSH
6775: LD_STRING D8-Bur-2
6777: PPUSH
6778: CALL_OW 88
// end ;
6782: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6783: LD_INT 23
6785: PPUSH
6786: CALL_OW 256
6790: PUSH
6791: LD_INT 500
6793: LESS
6794: PUSH
6795: LD_OWVAR 67
6799: PUSH
6800: LD_INT 3
6802: EQUAL
6803: AND
6804: PUSH
6805: LD_EXP 24
6809: NOT
6810: AND
6811: IFFALSE 6893
6813: GO 6815
6815: DISABLE
// begin amRetreat = true ;
6816: LD_ADDR_EXP 24
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// SayEX ( Johanna , D8-FSol1-2a , true , false , false , false ) ;
6824: LD_EXP 46
6828: PPUSH
6829: LD_STRING D8-FSol1-2a
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: LD_INT 0
6837: PPUSH
6838: LD_INT 0
6840: PPUSH
6841: LD_INT 0
6843: PPUSH
6844: CALL_OW 587
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6848: LD_EXP 47
6852: PUSH
6853: LD_EXP 46
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: LD_INT 21
6864: PPUSH
6865: CALL_OW 113
// SayNoName ( Gladstone , D8-Glad-2 ) ;
6869: LD_EXP 47
6873: PPUSH
6874: LD_STRING D8-Glad-2
6876: PPUSH
6877: CALL_OW 90
// Say ( Burlak , D8-Bur-2 ) ;
6881: LD_EXP 49
6885: PPUSH
6886: LD_STRING D8-Bur-2
6888: PPUSH
6889: CALL_OW 88
// end ;
6893: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6894: LD_INT 22
6896: PUSH
6897: LD_INT 1
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 21
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 50
6916: PUSH
6917: EMPTY
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 69
6929: PUSH
6930: LD_INT 0
6932: GREATER
6933: IFFALSE 7061
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
// begin enable ;
6941: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_INT 21
6949: PPUSH
6950: LD_INT 22
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 21
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 70
6978: PUSH
6979: FOR_IN
6980: IFFALSE 7059
// begin if unit = Gladstone then
6982: LD_VAR 0 1
6986: PUSH
6987: LD_EXP 47
6991: EQUAL
6992: IFFALSE 7022
// begin gladstoneEscape = true ;
6994: LD_ADDR_EXP 19
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
7002: LD_EXP 47
7006: PPUSH
7007: LD_EXP 33
7011: PUSH
7012: LD_STRING Gladstone
7014: STR
7015: PPUSH
7016: CALL_OW 38
// end else
7020: GO 7048
// begin JohannaEscape = true ;
7022: LD_ADDR_EXP 20
7026: PUSH
7027: LD_INT 1
7029: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
7030: LD_EXP 46
7034: PPUSH
7035: LD_EXP 33
7039: PUSH
7040: LD_STRING Johanna
7042: STR
7043: PPUSH
7044: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 64
// end ;
7057: GO 6979
7059: POP
7060: POP
// end ;
7061: PPOPN 1
7063: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
7064: LD_EXP 47
7068: PPUSH
7069: CALL_OW 301
7073: PUSH
7074: LD_EXP 46
7078: PPUSH
7079: CALL_OW 301
7083: AND
7084: IFFALSE 7101
7086: GO 7088
7088: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
7089: LD_EXP 49
7093: PPUSH
7094: LD_STRING D9-Bur-1
7096: PPUSH
7097: CALL_OW 88
7101: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
7102: LD_EXP 46
7106: PPUSH
7107: CALL_OW 301
7111: PUSH
7112: LD_EXP 19
7116: AND
7117: PUSH
7118: LD_EXP 20
7122: NOT
7123: AND
7124: IFFALSE 7141
7126: GO 7128
7128: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7129: LD_EXP 49
7133: PPUSH
7134: LD_STRING D9-Bur-1a
7136: PPUSH
7137: CALL_OW 88
7141: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7142: LD_EXP 47
7146: PPUSH
7147: CALL_OW 301
7151: PUSH
7152: LD_EXP 19
7156: NOT
7157: AND
7158: PUSH
7159: LD_EXP 20
7163: AND
7164: IFFALSE 7181
7166: GO 7168
7168: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7169: LD_EXP 49
7173: PPUSH
7174: LD_STRING D9-Bur-1b
7176: PPUSH
7177: CALL_OW 88
7181: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7182: LD_EXP 19
7186: PUSH
7187: LD_EXP 20
7191: AND
7192: IFFALSE 7209
7194: GO 7196
7196: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7197: LD_EXP 49
7201: PPUSH
7202: LD_STRING D9-Bur-1c
7204: PPUSH
7205: CALL_OW 88
7209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7210: LD_INT 22
7212: PUSH
7213: LD_INT 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 21
7222: PUSH
7223: LD_INT 3
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 50
7232: PUSH
7233: EMPTY
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 69
7245: PUSH
7246: LD_INT 0
7248: EQUAL
7249: IFFALSE 7497
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
7257: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7258: LD_ADDR_VAR 0 1
7262: PUSH
7263: LD_INT 22
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 21
7275: PUSH
7276: LD_INT 1
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 50
7285: PUSH
7286: EMPTY
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: PPUSH
7294: CALL_OW 69
7298: PUSH
7299: LD_EXP 49
7303: PUSH
7304: LD_EXP 57
7308: PUSH
7309: LD_EXP 54
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: DIFF
7319: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 1
7329: PPUSH
7330: LD_INT 26
7332: PUSH
7333: LD_INT 1
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PPUSH
7340: CALL_OW 72
7344: ST_TO_ADDR
// DialogueOn ;
7345: CALL_OW 6
// if IsOK ( Belkov ) then
7349: LD_EXP 54
7353: PPUSH
7354: CALL_OW 302
7358: IFFALSE 7372
// Say ( Belkov , D10-Bel-1 ) ;
7360: LD_EXP 54
7364: PPUSH
7365: LD_STRING D10-Bel-1
7367: PPUSH
7368: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_INT 0
7379: GREATER
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 0
7388: GREATER
7389: PUSH
7390: LD_EXP 54
7394: PPUSH
7395: CALL_OW 302
7399: OR
7400: AND
7401: IFFALSE 7468
// begin Say ( Burlak , D10-Bur-1 ) ;
7403: LD_EXP 49
7407: PPUSH
7408: LD_STRING D10-Bur-1
7410: PPUSH
7411: CALL_OW 88
// if IsOK ( Belkov ) then
7415: LD_EXP 54
7419: PPUSH
7420: CALL_OW 302
7424: IFFALSE 7440
// Say ( Belkov , D10-Bel-1a ) else
7426: LD_EXP 54
7430: PPUSH
7431: LD_STRING D10-Bel-1a
7433: PPUSH
7434: CALL_OW 88
7438: GO 7456
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7440: LD_VAR 0 2
7444: PUSH
7445: LD_INT 1
7447: ARRAY
7448: PPUSH
7449: LD_STRING D10-RSol1-1
7451: PPUSH
7452: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7456: LD_EXP 49
7460: PPUSH
7461: LD_STRING D10-Bur-2
7463: PPUSH
7464: CALL_OW 88
// end ; DialogueOff ;
7468: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7472: LD_STRING M4a
7474: PPUSH
7475: CALL_OW 337
// evacuationAvailable = true ;
7479: LD_ADDR_EXP 22
7483: PUSH
7484: LD_INT 1
7486: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7487: LD_INT 1
7489: PPUSH
7490: LD_INT 1
7492: PPUSH
7493: CALL_OW 424
// end ;
7497: PPOPN 2
7499: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7500: LD_EXP 22
7504: PUSH
7505: LD_EXP 25
7509: NOT
7510: AND
7511: IFFALSE 8121
7513: GO 7515
7515: DISABLE
7516: LD_INT 0
7518: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7519: LD_EXP 56
7523: PPUSH
7524: LD_INT 22
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: CALL_OW 49
// wait ( 0 0$3 ) ;
7534: LD_INT 105
7536: PPUSH
7537: CALL_OW 67
// jelenaSpawned = true ;
7541: LD_ADDR_EXP 25
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7549: LD_INT 22
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 21
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 50
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 69
7584: PPUSH
7585: LD_EXP 56
7589: PPUSH
7590: CALL_OW 74
7594: PPUSH
7595: LD_EXP 56
7599: PPUSH
7600: CALL_OW 296
7604: PUSH
7605: LD_INT 20
7607: LESS
7608: IFFALSE 7612
// exit ;
7610: GO 8121
// DialogueOn ;
7612: CALL_OW 6
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7616: LD_EXP 56
7620: PPUSH
7621: LD_STRING D11b-Kir-1
7623: PPUSH
7624: CALL_OW 586
// if IsOK ( Belkov ) then
7628: LD_EXP 54
7632: PPUSH
7633: CALL_OW 302
7637: IFFALSE 7665
// begin Say ( Belkov , D11b-Bel-1 ) ;
7639: LD_EXP 54
7643: PPUSH
7644: LD_STRING D11b-Bel-1
7646: PPUSH
7647: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7651: LD_EXP 54
7655: PPUSH
7656: LD_STRING D11b-Bel-1a
7658: PPUSH
7659: CALL_OW 94
// end else
7663: GO 7720
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7665: LD_ADDR_VAR 0 1
7669: PUSH
7670: LD_INT 22
7672: PUSH
7673: LD_INT 3
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 21
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 50
7692: PUSH
7693: EMPTY
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 69
7705: PPUSH
7706: LD_STRING D11b-RSol1-1
7708: PPUSH
7709: LD_STRING D11b-RFSol1-1
7711: PPUSH
7712: LD_INT 0
7714: PPUSH
7715: CALL 8717 0 4
7719: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7720: LD_INT 24
7722: PPUSH
7723: LD_INT 22
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 12
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 70
7751: PUSH
7752: LD_INT 0
7754: GREATER
7755: IFFALSE 7771
// SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) else
7757: LD_EXP 56
7761: PPUSH
7762: LD_STRING D11b1-Kir-1
7764: PPUSH
7765: CALL_OW 586
7769: GO 7783
// SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7771: LD_EXP 56
7775: PPUSH
7776: LD_STRING D11b2-Kir-1
7778: PPUSH
7779: CALL_OW 586
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7783: LD_EXP 6
7787: PUSH
7788: LD_INT 24
7790: PPUSH
7791: LD_INT 22
7793: PUSH
7794: LD_INT 0
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 12
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PPUSH
7815: CALL_OW 70
7819: PUSH
7820: LD_INT 0
7822: GREATER
7823: AND
7824: IFFALSE 7959
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7826: LD_EXP 49
7830: PPUSH
7831: LD_STRING D11b1-Bur-1
7833: PPUSH
7834: CALL_OW 88
// if IsOk ( Belkov ) then
7838: LD_EXP 54
7842: PPUSH
7843: CALL_OW 302
7847: IFFALSE 7863
// Say ( Belkov , D11b2-Bel-1 ) else
7849: LD_EXP 54
7853: PPUSH
7854: LD_STRING D11b2-Bel-1
7856: PPUSH
7857: CALL_OW 88
7861: GO 7904
// begin if GetSex ( randomSold ) = sex_male then
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 258
7872: PUSH
7873: LD_INT 1
7875: EQUAL
7876: IFFALSE 7892
// Say ( randomSold , D11b1-RSol1-1 ) else
7878: LD_VAR 0 1
7882: PPUSH
7883: LD_STRING D11b1-RSol1-1
7885: PPUSH
7886: CALL_OW 88
7890: GO 7904
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7892: LD_VAR 0 1
7896: PPUSH
7897: LD_STRING D11b1-RFSol1-1
7899: PPUSH
7900: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7904: LD_INT 22
7906: PUSH
7907: LD_INT 1
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 21
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 50
7926: PUSH
7927: EMPTY
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: PPUSH
7940: LD_STRING D11b1-RSol1-1
7942: PPUSH
7943: LD_STRING D11b1-RFSol1-1
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL 8717 0 4
// DialogueOff ;
7953: CALL_OW 7
// exit ;
7957: GO 8121
// end ; if spotWaterfall then
7959: LD_EXP 7
7963: IFFALSE 8049
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7965: LD_EXP 49
7969: PPUSH
7970: LD_STRING D11b1-Bur-1a
7972: PPUSH
7973: CALL_OW 88
// if IsOk ( Belkov ) then
7977: LD_EXP 54
7981: PPUSH
7982: CALL_OW 302
7986: IFFALSE 8002
// Say ( Belkov , D11b2-Bel-1 ) else
7988: LD_EXP 54
7992: PPUSH
7993: LD_STRING D11b2-Bel-1
7995: PPUSH
7996: CALL_OW 88
8000: GO 8043
// begin if GetSex ( randomSold ) = sex_male then
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 258
8011: PUSH
8012: LD_INT 1
8014: EQUAL
8015: IFFALSE 8031
// Say ( randomSold , D11b1-RSol1-1 ) else
8017: LD_VAR 0 1
8021: PPUSH
8022: LD_STRING D11b1-RSol1-1
8024: PPUSH
8025: CALL_OW 88
8029: GO 8043
// Say ( randomSold , D11b1-RFSol1-1 ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_STRING D11b1-RFSol1-1
8038: PPUSH
8039: CALL_OW 88
// end ; DialogueOff ;
8043: CALL_OW 7
// exit ;
8047: GO 8121
// end ; if IsOk ( Belkov ) then
8049: LD_EXP 54
8053: PPUSH
8054: CALL_OW 302
8058: IFFALSE 8074
// Say ( Belkov , D11b1-Bel-1 ) else
8060: LD_EXP 54
8064: PPUSH
8065: LD_STRING D11b1-Bel-1
8067: PPUSH
8068: CALL_OW 88
8072: GO 8115
// begin if GetSex ( randomSold ) = sex_male then
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 258
8083: PUSH
8084: LD_INT 1
8086: EQUAL
8087: IFFALSE 8103
// Say ( randomSold , D11b1-RSol1-1 ) else
8089: LD_VAR 0 1
8093: PPUSH
8094: LD_STRING D11b1-RSol1-1
8096: PPUSH
8097: CALL_OW 88
8101: GO 8115
// Say ( randomSold , D11b1-RFSol1-1 ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_STRING D11b1-RFSol1-1
8110: PPUSH
8111: CALL_OW 88
// end ; DialogueOff ;
8115: CALL_OW 7
// exit ;
8119: GO 8121
// end ;
8121: PPOPN 1
8123: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8124: LD_INT 24
8126: PPUSH
8127: LD_INT 22
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 70
8141: IFFALSE 8340
8143: GO 8145
8145: DISABLE
8146: LD_INT 0
8148: PPUSH
8149: PPUSH
// begin if not LakeApes then
8150: LD_EXP 26
8154: NOT
8155: IFFALSE 8159
// exit ;
8157: GO 8340
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8159: LD_INT 24
8161: PPUSH
8162: LD_INT 22
8164: PUSH
8165: LD_INT 3
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 70
8176: PUSH
8177: LD_INT 2
8179: GREATER
8180: IFFALSE 8339
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8182: LD_EXP 26
8186: PUSH
8187: LD_INT 1
8189: ARRAY
8190: PPUSH
8191: LD_EXP 28
8195: PPUSH
8196: LD_EXP 26
8200: PUSH
8201: LD_INT 1
8203: ARRAY
8204: PPUSH
8205: CALL_OW 74
8209: PPUSH
8210: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8214: LD_EXP 26
8218: PUSH
8219: LD_EXP 26
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: DIFF
8228: PPUSH
8229: LD_INT 28
8231: PPUSH
8232: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8236: LD_EXP 26
8240: PUSH
8241: LD_EXP 26
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: DIFF
8250: PPUSH
8251: LD_INT 35
8253: PPUSH
8254: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8258: LD_INT 10
8260: PPUSH
8261: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8265: LD_ADDR_VAR 0 2
8269: PUSH
8270: LD_INT 28
8272: PPUSH
8273: LD_INT 22
8275: PUSH
8276: LD_INT 0
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PPUSH
8283: CALL_OW 70
8287: ST_TO_ADDR
// for un in saved do
8288: LD_ADDR_VAR 0 1
8292: PUSH
8293: LD_VAR 0 2
8297: PUSH
8298: FOR_IN
8299: IFFALSE 8328
// begin RemoveUnit ( un ) ;
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL_OW 64
// LakeApes := LakeApes diff un ;
8310: LD_ADDR_EXP 26
8314: PUSH
8315: LD_EXP 26
8319: PUSH
8320: LD_VAR 0 1
8324: DIFF
8325: ST_TO_ADDR
// end ;
8326: GO 8298
8328: POP
8329: POP
// until not LakeApes ;
8330: LD_EXP 26
8334: NOT
8335: IFFALSE 8258
// end else
8337: GO 8340
// enable ;
8339: ENABLE
// end ;
8340: PPOPN 2
8342: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8343: LD_INT 3
8345: PPUSH
8346: LD_EXP 56
8350: PPUSH
8351: CALL_OW 292
8355: PUSH
8356: LD_EXP 25
8360: AND
8361: IFFALSE 8597
8363: GO 8365
8365: DISABLE
8366: LD_INT 0
8368: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8369: LD_EXP 56
8373: PPUSH
8374: LD_INT 3
8376: PPUSH
8377: CALL_OW 235
// jelenaSaved = true ;
8381: LD_ADDR_EXP 21
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8389: LD_EXP 56
8393: PPUSH
8394: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8398: LD_ADDR_VAR 0 1
8402: PUSH
8403: LD_INT 22
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 50
8425: PUSH
8426: EMPTY
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: PPUSH
8434: CALL_OW 69
8438: PUSH
8439: LD_EXP 56
8443: DIFF
8444: PPUSH
8445: LD_EXP 56
8449: PPUSH
8450: CALL_OW 74
8454: ST_TO_ADDR
// DialogueOn ;
8455: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8459: LD_EXP 56
8463: PPUSH
8464: LD_STRING D11a-Kir-1
8466: PPUSH
8467: CALL_OW 88
// if nearUnit = Belkov then
8471: LD_VAR 0 1
8475: PUSH
8476: LD_EXP 54
8480: EQUAL
8481: IFFALSE 8521
// begin Say ( Belkov , D11a-Bel-1 ) ;
8483: LD_EXP 54
8487: PPUSH
8488: LD_STRING D11a-Bel-1
8490: PPUSH
8491: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8495: LD_EXP 56
8499: PPUSH
8500: LD_STRING D11a-Kir-2
8502: PPUSH
8503: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8507: LD_EXP 54
8511: PPUSH
8512: LD_STRING D11a-Bel-2
8514: PPUSH
8515: CALL_OW 88
// end else
8519: GO 8562
// begin if GetSex ( nearUnit ) = sex_male then
8521: LD_VAR 0 1
8525: PPUSH
8526: CALL_OW 258
8530: PUSH
8531: LD_INT 1
8533: EQUAL
8534: IFFALSE 8550
// Say ( nearUnit , D11a-RSol1-2 ) else
8536: LD_VAR 0 1
8540: PPUSH
8541: LD_STRING D11a-RSol1-2
8543: PPUSH
8544: CALL_OW 88
8548: GO 8562
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8550: LD_VAR 0 1
8554: PPUSH
8555: LD_STRING D11a-RFSol1-2
8557: PPUSH
8558: CALL_OW 88
// end ; DialogueOff ;
8562: CALL_OW 7
// wait ( 0 0$5 ) ;
8566: LD_INT 175
8568: PPUSH
8569: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8573: LD_EXP 56
8577: PPUSH
8578: LD_STRING D11c-Kir-1
8580: PPUSH
8581: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8585: LD_EXP 49
8589: PPUSH
8590: LD_STRING D11c-Bur-1
8592: PPUSH
8593: CALL_OW 88
// end ;
8597: PPOPN 1
8599: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8600: LD_EXP 22
8604: PUSH
8605: LD_INT 1
8607: PPUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 21
8620: PUSH
8621: LD_INT 1
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 70
8636: PUSH
8637: LD_INT 0
8639: GREATER
8640: AND
8641: IFFALSE 8653
8643: GO 8645
8645: DISABLE
// begin Query ( QExit1 ) ;
8646: LD_STRING QExit1
8648: PPUSH
8649: CALL_OW 97
// end ; end_of_file
8653: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8654: LD_INT 0
8656: PPUSH
8657: PPUSH
// if exist_mode then
8658: LD_VAR 0 2
8662: IFFALSE 8687
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8664: LD_ADDR_VAR 0 4
8668: PUSH
8669: LD_EXP 34
8673: PUSH
8674: LD_VAR 0 1
8678: STR
8679: PPUSH
8680: CALL_OW 34
8684: ST_TO_ADDR
8685: GO 8702
// unit := NewCharacter ( ident ) ;
8687: LD_ADDR_VAR 0 4
8691: PUSH
8692: LD_VAR 0 1
8696: PPUSH
8697: CALL_OW 25
8701: ST_TO_ADDR
// result := unit ;
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_VAR 0 4
8711: ST_TO_ADDR
// end ;
8712: LD_VAR 0 3
8716: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8717: LD_INT 0
8719: PPUSH
8720: PPUSH
8721: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_VAR 0 1
8731: PUSH
8732: LD_EXP 49
8736: PUSH
8737: LD_EXP 57
8741: PUSH
8742: LD_EXP 54
8746: PUSH
8747: LD_EXP 56
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: DIFF
8758: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8759: LD_ADDR_VAR 0 7
8763: PUSH
8764: LD_VAR 0 1
8768: PUSH
8769: LD_INT 1
8771: PPUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 12
8781: ARRAY
8782: ST_TO_ADDR
// if radio then
8783: LD_VAR 0 4
8787: IFFALSE 8836
// begin if GetSex ( speaker ) = sex_male then
8789: LD_VAR 0 7
8793: PPUSH
8794: CALL_OW 258
8798: PUSH
8799: LD_INT 1
8801: EQUAL
8802: IFFALSE 8820
// SayRadio ( speaker , dialogMID ) else
8804: LD_VAR 0 7
8808: PPUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: CALL_OW 94
8818: GO 8834
// SayRadio ( speaker , dialogFID ) ;
8820: LD_VAR 0 7
8824: PPUSH
8825: LD_VAR 0 3
8829: PPUSH
8830: CALL_OW 94
// end else
8834: GO 8881
// begin if GetSex ( speaker ) = sex_male then
8836: LD_VAR 0 7
8840: PPUSH
8841: CALL_OW 258
8845: PUSH
8846: LD_INT 1
8848: EQUAL
8849: IFFALSE 8867
// Say ( speaker , dialogMID ) else
8851: LD_VAR 0 7
8855: PPUSH
8856: LD_VAR 0 2
8860: PPUSH
8861: CALL_OW 88
8865: GO 8881
// Say ( speaker , dialogFID ) ;
8867: LD_VAR 0 7
8871: PPUSH
8872: LD_VAR 0 3
8876: PPUSH
8877: CALL_OW 88
// end ; result := speaker ;
8881: LD_ADDR_VAR 0 5
8885: PUSH
8886: LD_VAR 0 7
8890: ST_TO_ADDR
// end ;
8891: LD_VAR 0 5
8895: RET
// export function Length ( tab ) ; var i , count ; begin
8896: LD_INT 0
8898: PPUSH
8899: PPUSH
8900: PPUSH
// for i in tab do
8901: LD_ADDR_VAR 0 3
8905: PUSH
8906: LD_VAR 0 1
8910: PUSH
8911: FOR_IN
8912: IFFALSE 8930
// count = count + 1 ;
8914: LD_ADDR_VAR 0 4
8918: PUSH
8919: LD_VAR 0 4
8923: PUSH
8924: LD_INT 1
8926: PLUS
8927: ST_TO_ADDR
8928: GO 8911
8930: POP
8931: POP
// Result := count ;
8932: LD_ADDR_VAR 0 2
8936: PUSH
8937: LD_VAR 0 4
8941: ST_TO_ADDR
// end ;
8942: LD_VAR 0 2
8946: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8947: LD_INT 0
8949: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL_OW 255
8959: PUSH
8960: LD_OWVAR 2
8964: EQUAL
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 302
8975: AND
8976: IFFALSE 8998
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8978: LD_VAR 0 1
8982: PPUSH
8983: LD_EXP 33
8987: PUSH
8988: LD_VAR 0 2
8992: STR
8993: PPUSH
8994: CALL_OW 38
// end ;
8998: LD_VAR 0 3
9002: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
// resultCharactersToSave = [ ] ;
9008: LD_ADDR_VAR 0 5
9012: PUSH
9013: EMPTY
9014: ST_TO_ADDR
// for unit in characters do
9015: LD_ADDR_VAR 0 4
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: FOR_IN
9026: IFFALSE 9074
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
9028: LD_VAR 0 4
9032: PPUSH
9033: CALL_OW 255
9037: PUSH
9038: LD_OWVAR 2
9042: EQUAL
9043: PUSH
9044: LD_VAR 0 4
9048: PPUSH
9049: CALL_OW 302
9053: AND
9054: IFFALSE 9072
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9056: LD_ADDR_VAR 0 5
9060: PUSH
9061: LD_VAR 0 5
9065: PUSH
9066: LD_VAR 0 4
9070: ADD
9071: ST_TO_ADDR
9072: GO 9025
9074: POP
9075: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9076: LD_VAR 0 5
9080: PPUSH
9081: LD_EXP 33
9085: PUSH
9086: LD_VAR 0 2
9090: STR
9091: PPUSH
9092: CALL_OW 38
// end ;
9096: LD_VAR 0 3
9100: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9101: LD_INT 0
9103: PPUSH
9104: PPUSH
9105: PPUSH
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 302
9124: NOT
9125: PUSH
9126: LD_VAR 0 4
9130: PUSH
9131: LD_INT 1
9133: EQUAL
9134: OR
9135: PUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: LD_VAR 0 3
9145: PPUSH
9146: CALL_OW 488
9150: NOT
9151: OR
9152: PUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 2
9162: PPUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: CALL_OW 297
9172: PUSH
9173: LD_VAR 0 4
9177: GREATEREQUAL
9178: OR
9179: PUSH
9180: LD_VAR 0 5
9184: PUSH
9185: LD_INT 1
9187: PUSH
9188: LD_INT 0
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: IN
9195: NOT
9196: OR
9197: IFFALSE 9201
// exit ;
9199: GO 10758
// attempts = 0 ;
9201: LD_ADDR_VAR 0 17
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9209: LD_ADDR_VAR 0 7
9213: PUSH
9214: EMPTY
9215: ST_TO_ADDR
// list_coords = [ ] ;
9216: LD_ADDR_VAR 0 8
9220: PUSH
9221: EMPTY
9222: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9223: LD_ADDR_VAR 0 9
9227: PUSH
9228: LD_VAR 0 2
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_VAR 0 1
9242: PPUSH
9243: CALL_OW 250
9247: PPUSH
9248: LD_VAR 0 1
9252: PPUSH
9253: CALL_OW 251
9257: PPUSH
9258: CALL 10763 0 4
9262: ST_TO_ADDR
// if attempts = 0 then
9263: LD_VAR 0 17
9267: PUSH
9268: LD_INT 0
9270: EQUAL
9271: IFFALSE 9379
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 9
9282: PUSH
9283: LD_VAR 0 9
9287: PUSH
9288: LD_INT 1
9290: PLUS
9291: PUSH
9292: LD_VAR 0 9
9296: PUSH
9297: LD_INT 1
9299: MINUS
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9306: LD_VAR 0 10
9310: PUSH
9311: LD_INT 2
9313: ARRAY
9314: PUSH
9315: LD_INT 6
9317: EQUAL
9318: IFFALSE 9341
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9320: LD_ADDR_VAR 0 10
9324: PUSH
9325: LD_VAR 0 10
9329: PPUSH
9330: LD_INT 2
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 1
9340: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9341: LD_VAR 0 10
9345: PUSH
9346: LD_INT 3
9348: ARRAY
9349: PUSH
9350: LD_INT 1
9352: NEG
9353: EQUAL
9354: IFFALSE 9377
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9356: LD_ADDR_VAR 0 10
9360: PUSH
9361: LD_VAR 0 10
9365: PPUSH
9366: LD_INT 3
9368: PPUSH
9369: LD_INT 5
9371: PPUSH
9372: CALL_OW 1
9376: ST_TO_ADDR
// end else
9377: GO 9416
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9379: LD_ADDR_VAR 0 10
9383: PUSH
9384: LD_INT 0
9386: PUSH
9387: LD_INT 1
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: LD_INT 3
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: LD_INT 5
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: PUSH
9410: LD_VAR 0 9
9414: DIFF
9415: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9416: LD_ADDR_VAR 0 14
9420: PUSH
9421: DOUBLE
9422: LD_INT 1
9424: DEC
9425: ST_TO_ADDR
9426: LD_VAR 0 10
9430: PUSH
9431: LD_INT 0
9433: PLUS
9434: PUSH
9435: FOR_TO
9436: IFFALSE 9758
// case dir_list [ c ] of 0 :
9438: LD_VAR 0 10
9442: PUSH
9443: LD_VAR 0 14
9447: ARRAY
9448: PUSH
9449: LD_INT 0
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9498
9457: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9458: LD_ADDR_VAR 0 8
9462: PUSH
9463: LD_VAR 0 8
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_VAR 0 3
9480: PUSH
9481: LD_VAR 0 4
9485: MINUS
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 2
9495: ST_TO_ADDR
9496: GO 9756
9498: LD_INT 1
9500: DOUBLE
9501: EQUAL
9502: IFTRUE 9506
9504: GO 9547
9506: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9507: LD_ADDR_VAR 0 8
9511: PUSH
9512: LD_VAR 0 8
9516: PPUSH
9517: LD_INT 1
9519: PPUSH
9520: LD_VAR 0 2
9524: PUSH
9525: LD_VAR 0 4
9529: PLUS
9530: PUSH
9531: LD_VAR 0 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 2
9544: ST_TO_ADDR
9545: GO 9756
9547: LD_INT 2
9549: DOUBLE
9550: EQUAL
9551: IFTRUE 9555
9553: GO 9602
9555: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9556: LD_ADDR_VAR 0 8
9560: PUSH
9561: LD_VAR 0 8
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: LD_VAR 0 2
9573: PUSH
9574: LD_VAR 0 4
9578: PLUS
9579: PUSH
9580: LD_VAR 0 3
9584: PUSH
9585: LD_VAR 0 4
9589: PLUS
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PPUSH
9595: CALL_OW 2
9599: ST_TO_ADDR
9600: GO 9756
9602: LD_INT 3
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9651
9610: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9611: LD_ADDR_VAR 0 8
9615: PUSH
9616: LD_VAR 0 8
9620: PPUSH
9621: LD_INT 1
9623: PPUSH
9624: LD_VAR 0 2
9628: PUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_VAR 0 4
9638: PLUS
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 2
9648: ST_TO_ADDR
9649: GO 9756
9651: LD_INT 4
9653: DOUBLE
9654: EQUAL
9655: IFTRUE 9659
9657: GO 9700
9659: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9660: LD_ADDR_VAR 0 8
9664: PUSH
9665: LD_VAR 0 8
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: LD_VAR 0 2
9677: PUSH
9678: LD_VAR 0 4
9682: MINUS
9683: PUSH
9684: LD_VAR 0 3
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 2
9697: ST_TO_ADDR
9698: GO 9756
9700: LD_INT 5
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9755
9708: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9709: LD_ADDR_VAR 0 8
9713: PUSH
9714: LD_VAR 0 8
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: LD_VAR 0 2
9726: PUSH
9727: LD_VAR 0 4
9731: MINUS
9732: PUSH
9733: LD_VAR 0 3
9737: PUSH
9738: LD_VAR 0 4
9742: MINUS
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 2
9752: ST_TO_ADDR
9753: GO 9756
9755: POP
9756: GO 9435
9758: POP
9759: POP
// if dist < 30 then
9760: LD_VAR 0 4
9764: PUSH
9765: LD_INT 30
9767: LESS
9768: IFFALSE 9780
// c = 1 else
9770: LD_ADDR_VAR 0 14
9774: PUSH
9775: LD_INT 1
9777: ST_TO_ADDR
9778: GO 9788
// c = 2 ;
9780: LD_ADDR_VAR 0 14
9784: PUSH
9785: LD_INT 2
9787: ST_TO_ADDR
// b = 1 ;
9788: LD_ADDR_VAR 0 11
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9796: LD_VAR 0 11
9800: PUSH
9801: LD_VAR 0 4
9805: PUSH
9806: LD_INT 1
9808: MINUS
9809: LESSEQUAL
9810: IFFALSE 10238
// begin if 0 in dir_list and 1 in dir_list then
9812: LD_INT 0
9814: PUSH
9815: LD_VAR 0 10
9819: IN
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: LD_VAR 0 10
9828: IN
9829: AND
9830: IFFALSE 9882
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9832: LD_ADDR_VAR 0 8
9836: PUSH
9837: LD_VAR 0 8
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_VAR 0 11
9854: PLUS
9855: PUSH
9856: LD_VAR 0 3
9860: PUSH
9861: LD_VAR 0 4
9865: MINUS
9866: PUSH
9867: LD_VAR 0 11
9871: PLUS
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 2
9881: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9882: LD_INT 1
9884: PUSH
9885: LD_VAR 0 10
9889: IN
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_VAR 0 10
9898: IN
9899: AND
9900: IFFALSE 9946
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9902: LD_ADDR_VAR 0 8
9906: PUSH
9907: LD_VAR 0 8
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_VAR 0 2
9919: PUSH
9920: LD_VAR 0 4
9924: PLUS
9925: PUSH
9926: LD_VAR 0 3
9930: PUSH
9931: LD_VAR 0 11
9935: PLUS
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 2
9945: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9946: LD_INT 2
9948: PUSH
9949: LD_VAR 0 10
9953: IN
9954: PUSH
9955: LD_INT 3
9957: PUSH
9958: LD_VAR 0 10
9962: IN
9963: AND
9964: IFFALSE 10016
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9966: LD_ADDR_VAR 0 8
9970: PUSH
9971: LD_VAR 0 8
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: LD_VAR 0 2
9983: PUSH
9984: LD_VAR 0 4
9988: PLUS
9989: PUSH
9990: LD_VAR 0 11
9994: MINUS
9995: PUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_VAR 0 4
10005: PLUS
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 2
10015: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10016: LD_INT 3
10018: PUSH
10019: LD_VAR 0 10
10023: IN
10024: PUSH
10025: LD_INT 4
10027: PUSH
10028: LD_VAR 0 10
10032: IN
10033: AND
10034: IFFALSE 10086
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10036: LD_ADDR_VAR 0 8
10040: PUSH
10041: LD_VAR 0 8
10045: PPUSH
10046: LD_INT 1
10048: PPUSH
10049: LD_VAR 0 2
10053: PUSH
10054: LD_VAR 0 11
10058: MINUS
10059: PUSH
10060: LD_VAR 0 3
10064: PUSH
10065: LD_VAR 0 4
10069: PLUS
10070: PUSH
10071: LD_VAR 0 11
10075: MINUS
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 2
10085: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10086: LD_INT 4
10088: PUSH
10089: LD_VAR 0 10
10093: IN
10094: PUSH
10095: LD_INT 5
10097: PUSH
10098: LD_VAR 0 10
10102: IN
10103: AND
10104: IFFALSE 10150
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10106: LD_ADDR_VAR 0 8
10110: PUSH
10111: LD_VAR 0 8
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_VAR 0 2
10123: PUSH
10124: LD_VAR 0 4
10128: MINUS
10129: PUSH
10130: LD_VAR 0 3
10134: PUSH
10135: LD_VAR 0 11
10139: MINUS
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 2
10149: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10150: LD_INT 5
10152: PUSH
10153: LD_VAR 0 10
10157: IN
10158: PUSH
10159: LD_INT 0
10161: PUSH
10162: LD_VAR 0 10
10166: IN
10167: AND
10168: IFFALSE 10220
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10170: LD_ADDR_VAR 0 8
10174: PUSH
10175: LD_VAR 0 8
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_VAR 0 2
10187: PUSH
10188: LD_VAR 0 4
10192: MINUS
10193: PUSH
10194: LD_VAR 0 11
10198: PLUS
10199: PUSH
10200: LD_VAR 0 3
10204: PUSH
10205: LD_VAR 0 4
10209: MINUS
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PPUSH
10215: CALL_OW 2
10219: ST_TO_ADDR
// b = b + c end ;
10220: LD_ADDR_VAR 0 11
10224: PUSH
10225: LD_VAR 0 11
10229: PUSH
10230: LD_VAR 0 14
10234: PLUS
10235: ST_TO_ADDR
10236: GO 9796
// if list_coords = 0 then
10238: LD_VAR 0 8
10242: PUSH
10243: LD_INT 0
10245: EQUAL
10246: IFFALSE 10250
// exit ;
10248: GO 10758
// repeat min_dist = 5000 ;
10250: LD_ADDR_VAR 0 12
10254: PUSH
10255: LD_INT 5000
10257: ST_TO_ADDR
// for b in list_coords do
10258: LD_ADDR_VAR 0 11
10262: PUSH
10263: LD_VAR 0 8
10267: PUSH
10268: FOR_IN
10269: IFFALSE 10328
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10271: LD_ADDR_VAR 0 13
10275: PUSH
10276: LD_VAR 0 1
10280: PPUSH
10281: LD_VAR 0 11
10285: PUSH
10286: LD_INT 1
10288: ARRAY
10289: PPUSH
10290: LD_VAR 0 11
10294: PUSH
10295: LD_INT 2
10297: ARRAY
10298: PPUSH
10299: CALL_OW 297
10303: ST_TO_ADDR
// if temp_dist < min_dist then
10304: LD_VAR 0 13
10308: PUSH
10309: LD_VAR 0 12
10313: LESS
10314: IFFALSE 10326
// min_dist = temp_dist ;
10316: LD_ADDR_VAR 0 12
10320: PUSH
10321: LD_VAR 0 13
10325: ST_TO_ADDR
// end ;
10326: GO 10268
10328: POP
10329: POP
// c = 0 ;
10330: LD_ADDR_VAR 0 14
10334: PUSH
10335: LD_INT 0
10337: ST_TO_ADDR
// repeat c = c + 1 ;
10338: LD_ADDR_VAR 0 14
10342: PUSH
10343: LD_VAR 0 14
10347: PUSH
10348: LD_INT 1
10350: PLUS
10351: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10352: LD_VAR 0 1
10356: PPUSH
10357: LD_VAR 0 8
10361: PUSH
10362: LD_VAR 0 14
10366: ARRAY
10367: PUSH
10368: LD_INT 1
10370: ARRAY
10371: PPUSH
10372: LD_VAR 0 8
10376: PUSH
10377: LD_VAR 0 14
10381: ARRAY
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PPUSH
10387: CALL_OW 297
10391: PUSH
10392: LD_VAR 0 12
10396: EQUAL
10397: IFFALSE 10462
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10399: LD_ADDR_VAR 0 7
10403: PUSH
10404: LD_VAR 0 7
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: LD_VAR 0 8
10416: PUSH
10417: LD_VAR 0 14
10421: ARRAY
10422: PPUSH
10423: CALL_OW 2
10427: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10428: LD_ADDR_VAR 0 8
10432: PUSH
10433: LD_VAR 0 8
10437: PPUSH
10438: LD_VAR 0 14
10442: PPUSH
10443: CALL_OW 3
10447: ST_TO_ADDR
// c = c - 1 ;
10448: LD_ADDR_VAR 0 14
10452: PUSH
10453: LD_VAR 0 14
10457: PUSH
10458: LD_INT 1
10460: MINUS
10461: ST_TO_ADDR
// end ; until c = list_coords ;
10462: LD_VAR 0 14
10466: PUSH
10467: LD_VAR 0 8
10471: EQUAL
10472: IFFALSE 10338
// c = 0 ;
10474: LD_ADDR_VAR 0 14
10478: PUSH
10479: LD_INT 0
10481: ST_TO_ADDR
// if list_nearest > 0 then
10482: LD_VAR 0 7
10486: PUSH
10487: LD_INT 0
10489: GREATER
10490: IFFALSE 10632
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10492: LD_ADDR_VAR 0 15
10496: PUSH
10497: LD_INT 1
10499: PPUSH
10500: LD_VAR 0 7
10504: PPUSH
10505: CALL_OW 12
10509: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10510: LD_ADDR_VAR 0 16
10514: PUSH
10515: LD_VAR 0 7
10519: PUSH
10520: LD_VAR 0 15
10524: ARRAY
10525: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10526: LD_VAR 0 16
10530: PUSH
10531: LD_INT 1
10533: ARRAY
10534: PPUSH
10535: LD_VAR 0 16
10539: PUSH
10540: LD_INT 2
10542: ARRAY
10543: PPUSH
10544: CALL_OW 488
10548: PUSH
10549: LD_INT 0
10551: GREATER
10552: PUSH
10553: LD_VAR 0 16
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: LD_VAR 0 16
10566: PUSH
10567: LD_INT 2
10569: ARRAY
10570: PPUSH
10571: CALL_OW 428
10575: PUSH
10576: LD_INT 0
10578: EQUAL
10579: AND
10580: IFFALSE 10592
// c = 1 else
10582: LD_ADDR_VAR 0 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
10590: GO 10612
// list_nearest = Delete ( list_nearest , rand_num ) ;
10592: LD_ADDR_VAR 0 7
10596: PUSH
10597: LD_VAR 0 7
10601: PPUSH
10602: LD_VAR 0 15
10606: PPUSH
10607: CALL_OW 3
10611: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10612: LD_VAR 0 14
10616: PUSH
10617: LD_INT 1
10619: EQUAL
10620: PUSH
10621: LD_VAR 0 7
10625: PUSH
10626: LD_INT 0
10628: EQUAL
10629: OR
10630: IFFALSE 10492
// end ; until c = 1 or list_coords = 0 ;
10632: LD_VAR 0 14
10636: PUSH
10637: LD_INT 1
10639: EQUAL
10640: PUSH
10641: LD_VAR 0 8
10645: PUSH
10646: LD_INT 0
10648: EQUAL
10649: OR
10650: IFFALSE 10250
// attempts = attempts + 1 ;
10652: LD_ADDR_VAR 0 17
10656: PUSH
10657: LD_VAR 0 17
10661: PUSH
10662: LD_INT 1
10664: PLUS
10665: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10666: LD_VAR 0 14
10670: PUSH
10671: LD_INT 1
10673: EQUAL
10674: PUSH
10675: LD_VAR 0 17
10679: PUSH
10680: LD_INT 1
10682: GREATER
10683: OR
10684: IFFALSE 9209
// if c = 1 then
10686: LD_VAR 0 14
10690: PUSH
10691: LD_INT 1
10693: EQUAL
10694: IFFALSE 10758
// if add then
10696: LD_VAR 0 5
10700: IFFALSE 10731
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_VAR 0 16
10711: PUSH
10712: LD_INT 1
10714: ARRAY
10715: PPUSH
10716: LD_VAR 0 16
10720: PUSH
10721: LD_INT 2
10723: ARRAY
10724: PPUSH
10725: CALL_OW 171
10729: GO 10758
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_VAR 0 16
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 16
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 111
// end ;
10758: LD_VAR 0 6
10762: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
10769: PPUSH
10770: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10771: LD_VAR 0 1
10775: PPUSH
10776: LD_VAR 0 2
10780: PPUSH
10781: CALL_OW 488
10785: NOT
10786: PUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_VAR 0 4
10796: PPUSH
10797: CALL_OW 488
10801: NOT
10802: OR
10803: IFFALSE 10816
// begin result = - 1 ;
10805: LD_ADDR_VAR 0 5
10809: PUSH
10810: LD_INT 1
10812: NEG
10813: ST_TO_ADDR
// exit ;
10814: GO 10976
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10816: LD_ADDR_VAR 0 6
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: LD_VAR 0 2
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_VAR 0 4
10840: PPUSH
10841: CALL_OW 298
10845: ST_TO_ADDR
// dist_2 = 99999 ;
10846: LD_ADDR_VAR 0 7
10850: PUSH
10851: LD_INT 99999
10853: ST_TO_ADDR
// for b = 0 to 5 do
10854: LD_ADDR_VAR 0 8
10858: PUSH
10859: DOUBLE
10860: LD_INT 0
10862: DEC
10863: ST_TO_ADDR
10864: LD_INT 5
10866: PUSH
10867: FOR_TO
10868: IFFALSE 10964
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10870: LD_ADDR_VAR 0 9
10874: PUSH
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_VAR 0 8
10884: PPUSH
10885: LD_VAR 0 6
10889: PPUSH
10890: CALL_OW 272
10894: PPUSH
10895: LD_VAR 0 2
10899: PPUSH
10900: LD_VAR 0 8
10904: PPUSH
10905: LD_VAR 0 6
10909: PPUSH
10910: CALL_OW 273
10914: PPUSH
10915: LD_VAR 0 3
10919: PPUSH
10920: LD_VAR 0 4
10924: PPUSH
10925: CALL_OW 298
10929: ST_TO_ADDR
// if temp_dist < dist_2 then
10930: LD_VAR 0 9
10934: PUSH
10935: LD_VAR 0 7
10939: LESS
10940: IFFALSE 10962
// begin dist_2 = temp_dist ;
10942: LD_ADDR_VAR 0 7
10946: PUSH
10947: LD_VAR 0 9
10951: ST_TO_ADDR
// dir = b ;
10952: LD_ADDR_VAR 0 10
10956: PUSH
10957: LD_VAR 0 8
10961: ST_TO_ADDR
// end ; end ;
10962: GO 10867
10964: POP
10965: POP
// result = dir ;
10966: LD_ADDR_VAR 0 5
10970: PUSH
10971: LD_VAR 0 10
10975: ST_TO_ADDR
// end ;
10976: LD_VAR 0 5
10980: RET
// export function MoveToHill ; begin
10981: LD_INT 0
10983: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10984: LD_EXP 50
10988: PPUSH
10989: LD_INT 65
10991: PPUSH
10992: LD_INT 59
10994: PPUSH
10995: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10999: LD_EXP 50
11003: PPUSH
11004: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
11008: LD_EXP 51
11012: PPUSH
11013: LD_INT 65
11015: PPUSH
11016: LD_INT 58
11018: PPUSH
11019: CALL_OW 111
// AddComCrawl ( Saseda ) ;
11023: LD_EXP 51
11027: PPUSH
11028: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
11032: LD_EXP 52
11036: PPUSH
11037: LD_INT 64
11039: PPUSH
11040: LD_INT 57
11042: PPUSH
11043: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
11047: LD_EXP 52
11051: PPUSH
11052: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
11056: LD_EXP 53
11060: PPUSH
11061: LD_INT 64
11063: PPUSH
11064: LD_INT 56
11066: PPUSH
11067: CALL_OW 111
// AddComCrawl ( Balei ) ;
11071: LD_EXP 53
11075: PPUSH
11076: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
11080: LD_EXP 54
11084: PPUSH
11085: LD_INT 63
11087: PPUSH
11088: LD_INT 55
11090: PPUSH
11091: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11095: LD_EXP 54
11099: PPUSH
11100: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11104: LD_EXP 55
11108: PPUSH
11109: LD_INT 66
11111: PPUSH
11112: LD_INT 58
11114: PPUSH
11115: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11119: LD_EXP 55
11123: PPUSH
11124: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11128: LD_EXP 57
11132: PPUSH
11133: CALL_OW 255
11137: PUSH
11138: LD_INT 6
11140: EQUAL
11141: PUSH
11142: LD_EXP 12
11146: AND
11147: IFFALSE 11173
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11149: LD_EXP 57
11153: PPUSH
11154: LD_INT 63
11156: PPUSH
11157: LD_INT 54
11159: PPUSH
11160: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11164: LD_EXP 57
11168: PPUSH
11169: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11173: LD_EXP 50
11177: PPUSH
11178: LD_INT 65
11180: PPUSH
11181: LD_INT 59
11183: PPUSH
11184: CALL_OW 297
11188: PUSH
11189: LD_INT 7
11191: LESS
11192: IFFALSE 11218
// begin ComCrawl ( Pokryshkin ) ;
11194: LD_EXP 50
11198: PPUSH
11199: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11203: LD_EXP 50
11207: PPUSH
11208: LD_INT 65
11210: PPUSH
11211: LD_INT 59
11213: PPUSH
11214: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11218: LD_EXP 51
11222: PPUSH
11223: LD_INT 65
11225: PPUSH
11226: LD_INT 58
11228: PPUSH
11229: CALL_OW 297
11233: PUSH
11234: LD_INT 7
11236: LESS
11237: IFFALSE 11263
// begin ComCrawl ( Saseda ) ;
11239: LD_EXP 51
11243: PPUSH
11244: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11248: LD_EXP 51
11252: PPUSH
11253: LD_INT 65
11255: PPUSH
11256: LD_INT 58
11258: PPUSH
11259: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11263: LD_EXP 52
11267: PPUSH
11268: LD_INT 64
11270: PPUSH
11271: LD_INT 57
11273: PPUSH
11274: CALL_OW 297
11278: PUSH
11279: LD_INT 7
11281: LESS
11282: IFFALSE 11308
// begin ComCrawl ( Jaworska ) ;
11284: LD_EXP 52
11288: PPUSH
11289: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11293: LD_EXP 52
11297: PPUSH
11298: LD_INT 64
11300: PPUSH
11301: LD_INT 57
11303: PPUSH
11304: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11308: LD_EXP 53
11312: PPUSH
11313: LD_INT 64
11315: PPUSH
11316: LD_INT 56
11318: PPUSH
11319: CALL_OW 297
11323: PUSH
11324: LD_INT 7
11326: LESS
11327: IFFALSE 11353
// begin ComCrawl ( Balei ) ;
11329: LD_EXP 53
11333: PPUSH
11334: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11338: LD_EXP 53
11342: PPUSH
11343: LD_INT 64
11345: PPUSH
11346: LD_INT 56
11348: PPUSH
11349: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11353: LD_EXP 54
11357: PPUSH
11358: LD_INT 63
11360: PPUSH
11361: LD_INT 55
11363: PPUSH
11364: CALL_OW 297
11368: PUSH
11369: LD_INT 7
11371: LESS
11372: IFFALSE 11398
// begin ComCrawl ( Belkov ) ;
11374: LD_EXP 54
11378: PPUSH
11379: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11383: LD_EXP 54
11387: PPUSH
11388: LD_INT 63
11390: PPUSH
11391: LD_INT 55
11393: PPUSH
11394: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11398: LD_EXP 55
11402: PPUSH
11403: LD_INT 66
11405: PPUSH
11406: LD_INT 58
11408: PPUSH
11409: CALL_OW 297
11413: PUSH
11414: LD_INT 7
11416: LESS
11417: IFFALSE 11443
// begin ComCrawl ( Jaunzeme ) ;
11419: LD_EXP 55
11423: PPUSH
11424: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11428: LD_EXP 55
11432: PPUSH
11433: LD_INT 66
11435: PPUSH
11436: LD_INT 58
11438: PPUSH
11439: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11443: LD_EXP 57
11447: PPUSH
11448: LD_INT 63
11450: PPUSH
11451: LD_INT 54
11453: PPUSH
11454: CALL_OW 297
11458: PUSH
11459: LD_INT 7
11461: LESS
11462: PUSH
11463: LD_EXP 57
11467: PPUSH
11468: CALL_OW 255
11472: PUSH
11473: LD_INT 6
11475: EQUAL
11476: AND
11477: PUSH
11478: LD_EXP 12
11482: AND
11483: IFFALSE 11509
// begin ComCrawl ( Gnyevko ) ;
11485: LD_EXP 57
11489: PPUSH
11490: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11494: LD_EXP 57
11498: PPUSH
11499: LD_INT 63
11501: PPUSH
11502: LD_INT 54
11504: PPUSH
11505: CALL_OW 171
// end ; end ;
11509: LD_VAR 0 1
11513: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11514: LD_EXP 45
11518: PPUSH
11519: CALL_OW 303
11523: NOT
11524: PUSH
11525: LD_EXP 45
11529: PPUSH
11530: CALL_OW 301
11534: NOT
11535: OR
11536: PUSH
11537: LD_EXP 15
11541: AND
11542: IFFALSE 11883
11544: GO 11546
11546: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11547: LD_EXP 50
11551: PPUSH
11552: LD_INT 65
11554: PPUSH
11555: LD_INT 59
11557: PPUSH
11558: CALL_OW 297
11562: PUSH
11563: LD_INT 7
11565: LESS
11566: IFFALSE 11592
// begin ComCrawl ( Pokryshkin ) ;
11568: LD_EXP 50
11572: PPUSH
11573: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11577: LD_EXP 50
11581: PPUSH
11582: LD_INT 65
11584: PPUSH
11585: LD_INT 59
11587: PPUSH
11588: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11592: LD_EXP 51
11596: PPUSH
11597: LD_INT 65
11599: PPUSH
11600: LD_INT 58
11602: PPUSH
11603: CALL_OW 297
11607: PUSH
11608: LD_INT 7
11610: LESS
11611: IFFALSE 11637
// begin ComCrawl ( Saseda ) ;
11613: LD_EXP 51
11617: PPUSH
11618: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11622: LD_EXP 51
11626: PPUSH
11627: LD_INT 65
11629: PPUSH
11630: LD_INT 58
11632: PPUSH
11633: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11637: LD_EXP 52
11641: PPUSH
11642: LD_INT 64
11644: PPUSH
11645: LD_INT 57
11647: PPUSH
11648: CALL_OW 297
11652: PUSH
11653: LD_INT 7
11655: LESS
11656: IFFALSE 11682
// begin ComCrawl ( Jaworska ) ;
11658: LD_EXP 52
11662: PPUSH
11663: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11667: LD_EXP 52
11671: PPUSH
11672: LD_INT 64
11674: PPUSH
11675: LD_INT 57
11677: PPUSH
11678: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11682: LD_EXP 53
11686: PPUSH
11687: LD_INT 64
11689: PPUSH
11690: LD_INT 56
11692: PPUSH
11693: CALL_OW 297
11697: PUSH
11698: LD_INT 7
11700: LESS
11701: IFFALSE 11727
// begin ComCrawl ( Balei ) ;
11703: LD_EXP 53
11707: PPUSH
11708: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11712: LD_EXP 53
11716: PPUSH
11717: LD_INT 64
11719: PPUSH
11720: LD_INT 56
11722: PPUSH
11723: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11727: LD_EXP 54
11731: PPUSH
11732: LD_INT 63
11734: PPUSH
11735: LD_INT 55
11737: PPUSH
11738: CALL_OW 297
11742: PUSH
11743: LD_INT 7
11745: LESS
11746: IFFALSE 11772
// begin ComCrawl ( Belkov ) ;
11748: LD_EXP 54
11752: PPUSH
11753: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11757: LD_EXP 54
11761: PPUSH
11762: LD_INT 63
11764: PPUSH
11765: LD_INT 55
11767: PPUSH
11768: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11772: LD_EXP 55
11776: PPUSH
11777: LD_INT 66
11779: PPUSH
11780: LD_INT 58
11782: PPUSH
11783: CALL_OW 297
11787: PUSH
11788: LD_INT 7
11790: LESS
11791: IFFALSE 11817
// begin ComCrawl ( Jaunzeme ) ;
11793: LD_EXP 55
11797: PPUSH
11798: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11802: LD_EXP 55
11806: PPUSH
11807: LD_INT 66
11809: PPUSH
11810: LD_INT 58
11812: PPUSH
11813: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11817: LD_EXP 57
11821: PPUSH
11822: LD_INT 63
11824: PPUSH
11825: LD_INT 54
11827: PPUSH
11828: CALL_OW 297
11832: PUSH
11833: LD_INT 7
11835: LESS
11836: PUSH
11837: LD_EXP 57
11841: PPUSH
11842: CALL_OW 255
11846: PUSH
11847: LD_INT 6
11849: EQUAL
11850: AND
11851: PUSH
11852: LD_EXP 12
11856: AND
11857: IFFALSE 11883
// begin ComCrawl ( Gnyevko ) ;
11859: LD_EXP 57
11863: PPUSH
11864: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11868: LD_EXP 57
11872: PPUSH
11873: LD_INT 63
11875: PPUSH
11876: LD_INT 54
11878: PPUSH
11879: CALL_OW 171
// end ; end ; end_of_file
11883: END
// export function BurlakDying ; begin
11884: LD_INT 0
11886: PPUSH
// YouLost ( Burlak ) ;
11887: LD_STRING Burlak
11889: PPUSH
11890: CALL_OW 104
// end ;
11894: LD_VAR 0 1
11898: RET
// every 0 0$1 trigger kirovSolds = 0 do
11899: LD_EXP 59
11903: PUSH
11904: LD_INT 0
11906: EQUAL
11907: IFFALSE 11919
11909: GO 11911
11911: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11912: LD_STRING KirovSoldsDie
11914: PPUSH
11915: CALL_OW 104
11919: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11920: LD_EXP 22
11924: PUSH
11925: LD_INT 1
11927: PPUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 21
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 71
11956: PUSH
11957: LD_INT 0
11959: EQUAL
11960: AND
11961: IFFALSE 12240
11963: GO 11965
11965: DISABLE
11966: LD_INT 0
11968: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11969: LD_EXP 56
11973: PPUSH
11974: CALL_OW 302
11978: PUSH
11979: LD_EXP 56
11983: PPUSH
11984: CALL_OW 255
11988: PUSH
11989: LD_INT 8
11991: EQUAL
11992: AND
11993: PUSH
11994: LD_EXP 57
11998: PPUSH
11999: CALL_OW 302
12003: PUSH
12004: LD_EXP 57
12008: PPUSH
12009: CALL_OW 255
12013: PUSH
12014: LD_INT 8
12016: EQUAL
12017: AND
12018: OR
12019: IFFALSE 12151
// begin case Query ( QExit2 ) of 1 :
12021: LD_STRING QExit2
12023: PPUSH
12024: CALL_OW 97
12028: PUSH
12029: LD_INT 1
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12129
12037: POP
// begin if IsOk ( Belkov ) then
12038: LD_EXP 54
12042: PPUSH
12043: CALL_OW 302
12047: IFFALSE 12063
// Say ( Belkov , D12-Bel-1 ) else
12049: LD_EXP 54
12053: PPUSH
12054: LD_STRING D12-Bel-1
12056: PPUSH
12057: CALL_OW 88
12061: GO 12123
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12063: LD_INT 22
12065: PUSH
12066: LD_INT 3
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 21
12075: PUSH
12076: LD_INT 1
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 50
12085: PUSH
12086: EMPTY
12087: LIST
12088: PUSH
12089: LD_INT 26
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 69
12109: PPUSH
12110: LD_STRING D12-RSol1-1
12112: PPUSH
12113: LD_STRING 
12115: PPUSH
12116: LD_INT 0
12118: PPUSH
12119: CALL 8717 0 4
// FinishMission ;
12123: CALL 12243 0 0
// end ; 2 :
12127: GO 12149
12129: LD_INT 2
12131: DOUBLE
12132: EQUAL
12133: IFTRUE 12137
12135: GO 12148
12137: POP
// begin wait ( 0 0$5 ) ;
12138: LD_INT 175
12140: PPUSH
12141: CALL_OW 67
// enable ;
12145: ENABLE
// end ; end ;
12146: GO 12149
12148: POP
// end else
12149: GO 12240
// begin if IsOk ( Belkov ) then
12151: LD_EXP 54
12155: PPUSH
12156: CALL_OW 302
12160: IFFALSE 12176
// Say ( Belkov , D12-Bel-1 ) else
12162: LD_EXP 54
12166: PPUSH
12167: LD_STRING D12-Bel-1
12169: PPUSH
12170: CALL_OW 88
12174: GO 12236
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12176: LD_INT 22
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 1
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 50
12198: PUSH
12199: EMPTY
12200: LIST
12201: PUSH
12202: LD_INT 26
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 69
12222: PPUSH
12223: LD_STRING D12-RSol1-1
12225: PPUSH
12226: LD_STRING 
12228: PPUSH
12229: LD_INT 0
12231: PPUSH
12232: CALL 8717 0 4
// FinishMission ;
12236: CALL 12243 0 0
// end ; end ;
12240: PPOPN 1
12242: END
// function FinishMission ; begin
12243: LD_INT 0
12245: PPUSH
// SetRewards ;
12246: CALL 12267 0 0
// SavePlayerCharacters ;
12250: CALL 12618 0 0
// SaveGlobalVariables ;
12254: CALL 12748 0 0
// YouWin ;
12258: CALL_OW 103
// end ;
12262: LD_VAR 0 1
12266: RET
// function SetRewards ; begin
12267: LD_INT 0
12269: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12270: LD_EXP 19
12274: NOT
12275: PUSH
12276: LD_EXP 20
12280: NOT
12281: AND
12282: IFFALSE 12294
// AddMedal ( NoEscape , 1 ) ;
12284: LD_STRING NoEscape
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12294: LD_EXP 19
12298: PUSH
12299: LD_EXP 20
12303: NOT
12304: AND
12305: IFFALSE 12318
// AddMedal ( NoEscape , - 1 ) ;
12307: LD_STRING NoEscape
12309: PPUSH
12310: LD_INT 1
12312: NEG
12313: PPUSH
12314: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12318: LD_EXP 19
12322: NOT
12323: PUSH
12324: LD_EXP 20
12328: AND
12329: IFFALSE 12342
// AddMedal ( NoEscape , - 2 ) ;
12331: LD_STRING NoEscape
12333: PPUSH
12334: LD_INT 2
12336: NEG
12337: PPUSH
12338: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12342: LD_EXP 19
12346: PUSH
12347: LD_EXP 20
12351: AND
12352: IFFALSE 12365
// AddMedal ( NoEscape , - 3 ) ;
12354: LD_STRING NoEscape
12356: PPUSH
12357: LD_INT 3
12359: NEG
12360: PPUSH
12361: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12365: LD_EXP 12
12369: PUSH
12370: LD_EXP 57
12374: PPUSH
12375: CALL_OW 302
12379: AND
12380: PUSH
12381: LD_EXP 21
12385: AND
12386: PUSH
12387: LD_EXP 56
12391: PPUSH
12392: CALL_OW 302
12396: AND
12397: IFFALSE 12409
// AddMedal ( Gnyevko , 1 ) ;
12399: LD_STRING Gnyevko
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12409: LD_EXP 12
12413: NOT
12414: PUSH
12415: LD_EXP 21
12419: AND
12420: PUSH
12421: LD_EXP 56
12425: PPUSH
12426: CALL_OW 302
12430: AND
12431: IFFALSE 12444
// AddMedal ( Gnyevko , - 1 ) ;
12433: LD_STRING Gnyevko
12435: PPUSH
12436: LD_INT 1
12438: NEG
12439: PPUSH
12440: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12444: LD_EXP 12
12448: PUSH
12449: LD_EXP 21
12453: NOT
12454: PUSH
12455: LD_EXP 57
12459: PPUSH
12460: CALL_OW 302
12464: NOT
12465: OR
12466: PUSH
12467: LD_EXP 56
12471: PPUSH
12472: CALL_OW 302
12476: NOT
12477: OR
12478: AND
12479: IFFALSE 12492
// AddMedal ( Gnyevko , - 2 ) ;
12481: LD_STRING Gnyevko
12483: PPUSH
12484: LD_INT 2
12486: NEG
12487: PPUSH
12488: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12492: LD_EXP 12
12496: NOT
12497: PUSH
12498: LD_EXP 21
12502: NOT
12503: AND
12504: PUSH
12505: LD_EXP 57
12509: PPUSH
12510: CALL_OW 302
12514: NOT
12515: PUSH
12516: LD_EXP 56
12520: PPUSH
12521: CALL_OW 302
12525: NOT
12526: AND
12527: OR
12528: IFFALSE 12541
// AddMedal ( Gnyevko , - 3 ) ;
12530: LD_STRING Gnyevko
12532: PPUSH
12533: LD_INT 3
12535: NEG
12536: PPUSH
12537: CALL_OW 101
// if lostComradesCounter = 0 then
12541: LD_EXP 23
12545: PUSH
12546: LD_INT 0
12548: EQUAL
12549: IFFALSE 12563
// AddMedal ( NoLosses , 1 ) else
12551: LD_STRING NoLosses
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 101
12561: GO 12573
// AddMedal ( NoLosses , 0 ) ;
12563: LD_STRING NoLosses
12565: PPUSH
12566: LD_INT 0
12568: PPUSH
12569: CALL_OW 101
// GiveMedals ( Main ) ;
12573: LD_STRING Main
12575: PPUSH
12576: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12580: LD_INT 22
12582: PUSH
12583: LD_INT 3
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: PPUSH
12609: CALL_OW 43
// end ;
12613: LD_VAR 0 1
12617: RET
// function SavePlayerCharacters ; var others ; begin
12618: LD_INT 0
12620: PPUSH
12621: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12622: LD_EXP 49
12626: PPUSH
12627: LD_STRING Burlak
12629: PPUSH
12630: CALL 8947 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12634: LD_EXP 57
12638: PPUSH
12639: LD_STRING Gnyevko
12641: PPUSH
12642: CALL 8947 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12646: LD_EXP 54
12650: PPUSH
12651: LD_STRING Belkov
12653: PPUSH
12654: CALL 8947 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12658: LD_EXP 56
12662: PPUSH
12663: LD_STRING Kirilenkova
12665: PPUSH
12666: CALL 8947 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12670: LD_ADDR_VAR 0 2
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 3
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 69
12703: PUSH
12704: LD_EXP 49
12708: PUSH
12709: LD_EXP 57
12713: PUSH
12714: LD_EXP 54
12718: PUSH
12719: LD_EXP 56
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: DIFF
12730: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12731: LD_VAR 0 2
12735: PPUSH
12736: LD_STRING OtherSurvivors
12738: PPUSH
12739: CALL 9003 0 2
// end ;
12743: LD_VAR 0 1
12747: RET
// function SaveGlobalVariables ; begin
12748: LD_INT 0
12750: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12751: LD_EXP 1
12755: PPUSH
12756: LD_STRING 01_GladstoneStatus
12758: PPUSH
12759: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12763: LD_EXP 2
12767: PPUSH
12768: LD_STRING 01_JohannaStatus
12770: PPUSH
12771: CALL_OW 39
// end ; end_of_file
12775: LD_VAR 0 1
12779: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12780: LD_INT 0
12782: PPUSH
12783: PPUSH
12784: PPUSH
// uc_side = 1 ;
12785: LD_ADDR_OWVAR 20
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// hc_class := 1 ;
12793: LD_ADDR_OWVAR 28
12797: PUSH
12798: LD_INT 1
12800: ST_TO_ADDR
// hc_sex := sex_male ;
12801: LD_ADDR_OWVAR 27
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12809: LD_ADDR_OWVAR 33
12813: PUSH
12814: LD_STRING AmGalRemake
12816: ST_TO_ADDR
// hc_face_number := 1 ;
12817: LD_ADDR_OWVAR 34
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// hc_name := Charles Brown ;
12825: LD_ADDR_OWVAR 26
12829: PUSH
12830: LD_STRING Charles Brown
12832: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12833: LD_ADDR_OWVAR 29
12837: PUSH
12838: LD_INT 12
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12848: LD_ADDR_OWVAR 31
12852: PUSH
12853: LD_INT 1
12855: PUSH
12856: LD_INT 0
12858: PUSH
12859: LD_INT 1
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: ST_TO_ADDR
// Charles = CreateHuman ;
12871: LD_ADDR_EXP 45
12875: PUSH
12876: CALL_OW 44
12880: ST_TO_ADDR
// hc_class := 1 ;
12881: LD_ADDR_OWVAR 28
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// hc_sex := sex_female ;
12889: LD_ADDR_OWVAR 27
12893: PUSH
12894: LD_INT 2
12896: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12897: LD_ADDR_OWVAR 33
12901: PUSH
12902: LD_STRING AmGalRemake
12904: ST_TO_ADDR
// hc_face_number := 2 ;
12905: LD_ADDR_OWVAR 34
12909: PUSH
12910: LD_INT 2
12912: ST_TO_ADDR
// hc_name := Johanna Holland ;
12913: LD_ADDR_OWVAR 26
12917: PUSH
12918: LD_STRING Johanna Holland
12920: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12921: LD_ADDR_OWVAR 29
12925: PUSH
12926: LD_INT 12
12928: PUSH
12929: LD_INT 11
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12936: LD_ADDR_OWVAR 31
12940: PUSH
12941: LD_EXP 39
12945: PUSH
12946: LD_INT 0
12948: PPUSH
12949: LD_INT 2
12951: PPUSH
12952: CALL_OW 12
12956: PUSH
12957: LD_INT 0
12959: PPUSH
12960: LD_INT 2
12962: PPUSH
12963: CALL_OW 12
12967: PUSH
12968: LD_INT 0
12970: PPUSH
12971: LD_INT 2
12973: PPUSH
12974: CALL_OW 12
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: ST_TO_ADDR
// Johanna = CreateHuman ;
12985: LD_ADDR_EXP 46
12989: PUSH
12990: CALL_OW 44
12994: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12995: LD_EXP 46
12999: PPUSH
13000: LD_INT 19
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13010: LD_EXP 46
13014: PPUSH
13015: LD_INT 23
13017: PPUSH
13018: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13022: LD_ADDR_EXP 47
13026: PUSH
13027: LD_STRING Gladstone
13029: PPUSH
13030: LD_INT 0
13032: PPUSH
13033: CALL 8654 0 2
13037: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13038: LD_EXP 47
13042: PPUSH
13043: LD_INT 22
13045: PPUSH
13046: CALL_OW 52
// amApemans = [ ] ;
13050: LD_ADDR_EXP 48
13054: PUSH
13055: EMPTY
13056: ST_TO_ADDR
// for i := 1 to amApeAmount do
13057: LD_ADDR_VAR 0 2
13061: PUSH
13062: DOUBLE
13063: LD_INT 1
13065: DEC
13066: ST_TO_ADDR
13067: LD_EXP 38
13071: PUSH
13072: FOR_TO
13073: IFFALSE 13191
// begin hc_class := class_apeman ;
13075: LD_ADDR_OWVAR 28
13079: PUSH
13080: LD_INT 12
13082: ST_TO_ADDR
// hc_gallery :=  ;
13083: LD_ADDR_OWVAR 33
13087: PUSH
13088: LD_STRING 
13090: ST_TO_ADDR
// hc_name :=  ;
13091: LD_ADDR_OWVAR 26
13095: PUSH
13096: LD_STRING 
13098: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13099: LD_ADDR_OWVAR 31
13103: PUSH
13104: LD_EXP 39
13108: PUSH
13109: LD_INT 0
13111: PPUSH
13112: LD_INT 2
13114: PPUSH
13115: CALL_OW 12
13119: PUSH
13120: LD_INT 0
13122: PPUSH
13123: LD_INT 2
13125: PPUSH
13126: CALL_OW 12
13130: PUSH
13131: LD_INT 0
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: ST_TO_ADDR
// ape = CreateHuman ;
13148: LD_ADDR_VAR 0 3
13152: PUSH
13153: CALL_OW 44
13157: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13158: LD_VAR 0 3
13162: PPUSH
13163: LD_INT 29
13165: PPUSH
13166: LD_INT 0
13168: PPUSH
13169: CALL_OW 49
// amApemans = amApemans ^ ape ;
13173: LD_ADDR_EXP 48
13177: PUSH
13178: LD_EXP 48
13182: PUSH
13183: LD_VAR 0 3
13187: ADD
13188: ST_TO_ADDR
// end ;
13189: GO 13072
13191: POP
13192: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13193: LD_INT 23
13195: PPUSH
13196: LD_EXP 36
13200: PPUSH
13201: CALL_OW 234
// end ; end_of_file
13205: LD_VAR 0 1
13209: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13210: LD_INT 0
13212: PPUSH
// PrepareHero ;
13213: CALL 13238 0 0
// PreparePokryshkinTeams ;
13217: CALL 13332 0 0
// PrepareJelena ;
13221: CALL 13597 0 0
// PrepareGnyevko ;
13225: CALL 13629 0 0
// PrepareKurin ;
13229: CALL 13300 0 0
// end ;
13233: LD_VAR 0 1
13237: RET
// function PrepareHero ; begin
13238: LD_INT 0
13240: PPUSH
// uc_side = 3 ;
13241: LD_ADDR_OWVAR 20
13245: PUSH
13246: LD_INT 3
13248: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13249: LD_ADDR_EXP 49
13253: PUSH
13254: LD_STRING Burlak
13256: PPUSH
13257: LD_INT 0
13259: PPUSH
13260: CALL 8654 0 2
13264: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13265: LD_EXP 49
13269: PPUSH
13270: LD_EXP 40
13274: PUSH
13275: LD_INT 1
13277: ARRAY
13278: PPUSH
13279: LD_EXP 40
13283: PUSH
13284: LD_INT 2
13286: ARRAY
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 48
// end ;
13295: LD_VAR 0 1
13299: RET
// function PrepareKurin ; begin
13300: LD_INT 0
13302: PPUSH
// uc_side = 6 ;
13303: LD_ADDR_OWVAR 20
13307: PUSH
13308: LD_INT 6
13310: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13311: LD_ADDR_EXP 58
13315: PUSH
13316: LD_STRING Kurin
13318: PPUSH
13319: LD_INT 0
13321: PPUSH
13322: CALL 8654 0 2
13326: ST_TO_ADDR
// end ;
13327: LD_VAR 0 1
13331: RET
// function PreparePokryshkinTeams ; begin
13332: LD_INT 0
13334: PPUSH
// uc_side = 6 ;
13335: LD_ADDR_OWVAR 20
13339: PUSH
13340: LD_INT 6
13342: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13343: LD_ADDR_EXP 50
13347: PUSH
13348: LD_STRING Pokryshkin
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL 8654 0 2
13358: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13359: LD_ADDR_EXP 51
13363: PUSH
13364: LD_STRING Saseda
13366: PPUSH
13367: LD_INT 0
13369: PPUSH
13370: CALL 8654 0 2
13374: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13375: LD_ADDR_EXP 52
13379: PUSH
13380: LD_STRING Jaworska
13382: PPUSH
13383: LD_INT 0
13385: PPUSH
13386: CALL 8654 0 2
13390: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13391: LD_ADDR_EXP 53
13395: PUSH
13396: LD_STRING Balei
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL 8654 0 2
13406: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13407: LD_ADDR_EXP 54
13411: PUSH
13412: LD_STRING Belkov
13414: PPUSH
13415: LD_INT 0
13417: PPUSH
13418: CALL 8654 0 2
13422: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13423: LD_EXP 50
13427: PPUSH
13428: LD_INT 25
13430: PPUSH
13431: LD_INT 0
13433: PPUSH
13434: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13438: LD_EXP 51
13442: PPUSH
13443: LD_INT 17
13445: PPUSH
13446: LD_INT 0
13448: PPUSH
13449: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13453: LD_EXP 52
13457: PPUSH
13458: LD_INT 17
13460: PPUSH
13461: LD_INT 0
13463: PPUSH
13464: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13468: LD_EXP 53
13472: PPUSH
13473: LD_INT 17
13475: PPUSH
13476: LD_INT 0
13478: PPUSH
13479: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13483: LD_EXP 54
13487: PPUSH
13488: LD_INT 17
13490: PPUSH
13491: LD_INT 0
13493: PPUSH
13494: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13498: LD_ADDR_EXP 59
13502: PUSH
13503: LD_EXP 50
13507: PUSH
13508: LD_EXP 51
13512: PUSH
13513: LD_EXP 53
13517: PUSH
13518: LD_EXP 54
13522: PUSH
13523: LD_EXP 52
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: ST_TO_ADDR
// if Difficulty < 3 then
13535: LD_OWVAR 67
13539: PUSH
13540: LD_INT 3
13542: LESS
13543: IFFALSE 13592
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13545: LD_ADDR_EXP 55
13549: PUSH
13550: LD_STRING Jaunzeme
13552: PPUSH
13553: LD_INT 0
13555: PPUSH
13556: CALL 8654 0 2
13560: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13561: LD_EXP 55
13565: PPUSH
13566: LD_INT 26
13568: PPUSH
13569: LD_INT 0
13571: PPUSH
13572: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13576: LD_ADDR_EXP 59
13580: PUSH
13581: LD_EXP 59
13585: PUSH
13586: LD_EXP 55
13590: ADD
13591: ST_TO_ADDR
// end ; end ;
13592: LD_VAR 0 1
13596: RET
// function PrepareJelena ; begin
13597: LD_INT 0
13599: PPUSH
// uc_side = 5 ;
13600: LD_ADDR_OWVAR 20
13604: PUSH
13605: LD_INT 5
13607: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13608: LD_ADDR_EXP 56
13612: PUSH
13613: LD_STRING Kirilenkova
13615: PPUSH
13616: LD_INT 0
13618: PPUSH
13619: CALL 8654 0 2
13623: ST_TO_ADDR
// end ;
13624: LD_VAR 0 1
13628: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
// uc_side = 5 ;
13635: LD_ADDR_OWVAR 20
13639: PUSH
13640: LD_INT 5
13642: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13643: LD_ADDR_EXP 57
13647: PUSH
13648: LD_STRING Gnyevko
13650: PPUSH
13651: LD_INT 0
13653: PPUSH
13654: CALL 8654 0 2
13658: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13659: LD_ADDR_VAR 0 4
13663: PUSH
13664: LD_EXP 41
13668: PUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_EXP 41
13676: PPUSH
13677: CALL_OW 12
13681: ARRAY
13682: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13683: LD_EXP 57
13687: PPUSH
13688: LD_VAR 0 4
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PPUSH
13697: LD_VAR 0 4
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: LD_INT 0
13708: PPUSH
13709: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13713: LD_EXP 57
13717: PPUSH
13718: LD_EXP 42
13722: PPUSH
13723: CALL_OW 234
// ComHold ( Gnyevko ) ;
13727: LD_EXP 57
13731: PPUSH
13732: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13736: LD_ADDR_VAR 0 3
13740: PUSH
13741: DOUBLE
13742: LD_INT 1
13744: DEC
13745: ST_TO_ADDR
13746: LD_EXP 30
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: PUSH
13755: LD_INT 3
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: LD_INT 1
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_OWVAR 67
13773: ARRAY
13774: MINUS
13775: PUSH
13776: FOR_TO
13777: IFFALSE 13907
// begin uc_side = 0 ;
13779: LD_ADDR_OWVAR 20
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// uc_nation = nation_nature ;
13787: LD_ADDR_OWVAR 21
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// hc_class = class_apeman ;
13795: LD_ADDR_OWVAR 28
13799: PUSH
13800: LD_INT 12
13802: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13803: LD_ADDR_OWVAR 31
13807: PUSH
13808: LD_EXP 31
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: PUSH
13817: LD_EXP 31
13821: PUSH
13822: LD_INT 2
13824: ARRAY
13825: PUSH
13826: LD_EXP 31
13830: PUSH
13831: LD_INT 3
13833: ARRAY
13834: PUSH
13835: LD_EXP 31
13839: PUSH
13840: LD_INT 4
13842: ARRAY
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13850: LD_ADDR_OWVAR 35
13854: PUSH
13855: LD_EXP 37
13859: ST_TO_ADDR
// un = CreateHuman ;
13860: LD_ADDR_VAR 0 2
13864: PUSH
13865: CALL_OW 44
13869: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13870: LD_VAR 0 2
13874: PPUSH
13875: LD_EXP 57
13879: PPUSH
13880: CALL_OW 250
13884: PPUSH
13885: LD_EXP 57
13889: PPUSH
13890: CALL_OW 251
13894: PPUSH
13895: LD_INT 8
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: CALL_OW 50
// end ;
13905: GO 13776
13907: POP
13908: POP
// end ; end_of_file
13909: LD_VAR 0 1
13913: RET
// export function CreateNature ; var i , un ; begin
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
13918: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13919: LD_ADDR_VAR 0 2
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_EXP 30
13933: PUSH
13934: LD_INT 1
13936: ARRAY
13937: PUSH
13938: FOR_TO
13939: IFFALSE 14049
// begin uc_side = 0 ;
13941: LD_ADDR_OWVAR 20
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// uc_nation = nation_nature ;
13949: LD_ADDR_OWVAR 21
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// hc_class = class_apeman ;
13957: LD_ADDR_OWVAR 28
13961: PUSH
13962: LD_INT 12
13964: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13965: LD_ADDR_OWVAR 31
13969: PUSH
13970: LD_EXP 31
13974: PUSH
13975: LD_INT 1
13977: ARRAY
13978: PUSH
13979: LD_EXP 31
13983: PUSH
13984: LD_INT 2
13986: ARRAY
13987: PUSH
13988: LD_EXP 31
13992: PUSH
13993: LD_INT 3
13995: ARRAY
13996: PUSH
13997: LD_EXP 31
14001: PUSH
14002: LD_INT 4
14004: ARRAY
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14012: LD_ADDR_OWVAR 35
14016: PUSH
14017: LD_EXP 37
14021: ST_TO_ADDR
// un = CreateHuman ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: CALL_OW 44
14031: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 16
14039: PPUSH
14040: LD_INT 0
14042: PPUSH
14043: CALL_OW 49
// end ;
14047: GO 13938
14049: POP
14050: POP
// for i := 1 to animalsAmount [ 2 ] do
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_EXP 30
14065: PUSH
14066: LD_INT 2
14068: ARRAY
14069: PUSH
14070: FOR_TO
14071: IFFALSE 14181
// begin uc_side = 0 ;
14073: LD_ADDR_OWVAR 20
14077: PUSH
14078: LD_INT 0
14080: ST_TO_ADDR
// uc_nation = nation_nature ;
14081: LD_ADDR_OWVAR 21
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// hc_class = class_phororhacos ;
14089: LD_ADDR_OWVAR 28
14093: PUSH
14094: LD_INT 18
14096: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14097: LD_ADDR_OWVAR 31
14101: PUSH
14102: LD_EXP 31
14106: PUSH
14107: LD_INT 1
14109: ARRAY
14110: PUSH
14111: LD_EXP 31
14115: PUSH
14116: LD_INT 2
14118: ARRAY
14119: PUSH
14120: LD_EXP 31
14124: PUSH
14125: LD_INT 3
14127: ARRAY
14128: PUSH
14129: LD_EXP 31
14133: PUSH
14134: LD_INT 4
14136: ARRAY
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14144: LD_ADDR_OWVAR 35
14148: PUSH
14149: LD_EXP 32
14153: ST_TO_ADDR
// un = CreateHuman ;
14154: LD_ADDR_VAR 0 3
14158: PUSH
14159: CALL_OW 44
14163: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14164: LD_VAR 0 3
14168: PPUSH
14169: LD_INT 15
14171: PPUSH
14172: LD_INT 0
14174: PPUSH
14175: CALL_OW 49
// end ;
14179: GO 14070
14181: POP
14182: POP
// for i := 1 to animalsAmount [ 3 ] do
14183: LD_ADDR_VAR 0 2
14187: PUSH
14188: DOUBLE
14189: LD_INT 1
14191: DEC
14192: ST_TO_ADDR
14193: LD_EXP 30
14197: PUSH
14198: LD_INT 3
14200: ARRAY
14201: PUSH
14202: FOR_TO
14203: IFFALSE 14313
// begin uc_side = 0 ;
14205: LD_ADDR_OWVAR 20
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// uc_nation = nation_nature ;
14213: LD_ADDR_OWVAR 21
14217: PUSH
14218: LD_INT 0
14220: ST_TO_ADDR
// hc_class = class_tiger ;
14221: LD_ADDR_OWVAR 28
14225: PUSH
14226: LD_INT 14
14228: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14229: LD_ADDR_OWVAR 31
14233: PUSH
14234: LD_EXP 31
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PUSH
14243: LD_EXP 31
14247: PUSH
14248: LD_INT 2
14250: ARRAY
14251: PUSH
14252: LD_EXP 31
14256: PUSH
14257: LD_INT 3
14259: ARRAY
14260: PUSH
14261: LD_EXP 31
14265: PUSH
14266: LD_INT 4
14268: ARRAY
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14276: LD_ADDR_OWVAR 35
14280: PUSH
14281: LD_EXP 32
14285: ST_TO_ADDR
// un = CreateHuman ;
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 15
14303: PPUSH
14304: LD_INT 0
14306: PPUSH
14307: CALL_OW 49
// end ;
14311: GO 14202
14313: POP
14314: POP
// for i := 1 to animalsAmount [ 4 ] do
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: DOUBLE
14321: LD_INT 1
14323: DEC
14324: ST_TO_ADDR
14325: LD_EXP 30
14329: PUSH
14330: LD_INT 4
14332: ARRAY
14333: PUSH
14334: FOR_TO
14335: IFFALSE 14445
// begin uc_side = 0 ;
14337: LD_ADDR_OWVAR 20
14341: PUSH
14342: LD_INT 0
14344: ST_TO_ADDR
// uc_nation = nation_nature ;
14345: LD_ADDR_OWVAR 21
14349: PUSH
14350: LD_INT 0
14352: ST_TO_ADDR
// hc_class = 21 ;
14353: LD_ADDR_OWVAR 28
14357: PUSH
14358: LD_INT 21
14360: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14361: LD_ADDR_OWVAR 31
14365: PUSH
14366: LD_EXP 31
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PUSH
14375: LD_EXP 31
14379: PUSH
14380: LD_INT 2
14382: ARRAY
14383: PUSH
14384: LD_EXP 31
14388: PUSH
14389: LD_INT 3
14391: ARRAY
14392: PUSH
14393: LD_EXP 31
14397: PUSH
14398: LD_INT 4
14400: ARRAY
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14408: LD_ADDR_OWVAR 35
14412: PUSH
14413: LD_EXP 32
14417: ST_TO_ADDR
// un = CreateHuman ;
14418: LD_ADDR_VAR 0 3
14422: PUSH
14423: CALL_OW 44
14427: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 15
14435: PPUSH
14436: LD_INT 0
14438: PPUSH
14439: CALL_OW 49
// end ;
14443: GO 14334
14445: POP
14446: POP
// end ; end_of_file
14447: LD_VAR 0 1
14451: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14452: LD_VAR 0 1
14456: PUSH
14457: LD_EXP 49
14461: EQUAL
14462: PUSH
14463: LD_EXP 56
14467: PPUSH
14468: CALL_OW 255
14472: PUSH
14473: LD_INT 3
14475: EQUAL
14476: NOT
14477: AND
14478: PUSH
14479: LD_EXP 56
14483: PPUSH
14484: CALL_OW 302
14488: NOT
14489: AND
14490: IFFALSE 14496
// BurlakDying ;
14492: CALL 11884 0 0
// if unit = Gladstone then
14496: LD_VAR 0 1
14500: PUSH
14501: LD_EXP 47
14505: EQUAL
14506: IFFALSE 14516
// gladstoneStatus = 0 ;
14508: LD_ADDR_EXP 1
14512: PUSH
14513: LD_INT 0
14515: ST_TO_ADDR
// if unit = Johanna then
14516: LD_VAR 0 1
14520: PUSH
14521: LD_EXP 46
14525: EQUAL
14526: IFFALSE 14536
// johannaStatus = 0 ;
14528: LD_ADDR_EXP 2
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// end ;
14536: PPOPN 1
14538: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
14539: LD_VAR 0 1
14543: PUSH
14544: LD_EXP 49
14548: EQUAL
14549: IFFALSE 14555
// BurlakDying ;
14551: CALL 11884 0 0
// if GetSide ( unit ) = 3 then
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 255
14564: PUSH
14565: LD_INT 3
14567: EQUAL
14568: IFFALSE 14584
// lostComradesCounter = lostComradesCounter + 1 ;
14570: LD_ADDR_EXP 23
14574: PUSH
14575: LD_EXP 23
14579: PUSH
14580: LD_INT 1
14582: PLUS
14583: ST_TO_ADDR
// if unit in kirovSolds then
14584: LD_VAR 0 1
14588: PUSH
14589: LD_EXP 59
14593: IN
14594: IFFALSE 14612
// kirovSolds = kirovSolds diff unit ;
14596: LD_ADDR_EXP 59
14600: PUSH
14601: LD_EXP 59
14605: PUSH
14606: LD_VAR 0 1
14610: DIFF
14611: ST_TO_ADDR
// end ;
14612: PPOPN 1
14614: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14615: LD_VAR 0 1
14619: PUSH
14620: LD_INT 3
14622: EQUAL
14623: PUSH
14624: LD_VAR 0 2
14628: PUSH
14629: LD_INT 1
14631: EQUAL
14632: AND
14633: PUSH
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 1
14641: EQUAL
14642: PUSH
14643: LD_VAR 0 2
14647: PUSH
14648: LD_INT 3
14650: EQUAL
14651: AND
14652: PUSH
14653: LD_EXP 17
14657: PUSH
14658: LD_INT 1
14660: EQUAL
14661: AND
14662: OR
14663: IFFALSE 14669
// Dial_SecondAttack ;
14665: CALL 6057 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14669: LD_VAR 0 1
14673: PUSH
14674: LD_INT 3
14676: EQUAL
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: LD_INT 6
14685: EQUAL
14686: AND
14687: PUSH
14688: LD_EXP 18
14692: NOT
14693: AND
14694: IFFALSE 14700
// Dialogue_AttackComrade ;
14696: CALL 4098 0 0
// end ; end_of_file
14700: PPOPN 2
14702: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14703: LD_EXP 56
14707: PPUSH
14708: CALL_OW 255
14712: PUSH
14713: LD_INT 3
14715: EQUAL
14716: PUSH
14717: LD_EXP 29
14721: PUSH
14722: LD_INT 525
14724: LESS
14725: AND
14726: IFFALSE 14738
14728: GO 14730
14730: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14731: LD_STRING ACH_YELENA
14733: PPUSH
14734: CALL_OW 543
14738: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14739: LD_INT 23
14741: PUSH
14742: LD_INT 0
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 14
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 25
14764: PUSH
14765: LD_INT 18
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 25
14774: PUSH
14775: LD_INT 12
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: NOT
14797: IFFALSE 14809
14799: GO 14801
14801: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14802: LD_STRING ACH_NATURE
14804: PPUSH
14805: CALL_OW 543
14809: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14810: LD_INT 0
14812: PPUSH
// if p2 = 100 then
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 100
14820: EQUAL
14821: IFFALSE 15824
// begin if not StreamModeActive then
14823: LD_EXP 60
14827: NOT
14828: IFFALSE 14838
// StreamModeActive := true ;
14830: LD_ADDR_EXP 60
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// if p3 = 0 then
14838: LD_VAR 0 3
14842: PUSH
14843: LD_INT 0
14845: EQUAL
14846: IFFALSE 14852
// InitStreamMode ;
14848: CALL 15984 0 0
// if p3 = 1 then
14852: LD_VAR 0 3
14856: PUSH
14857: LD_INT 1
14859: EQUAL
14860: IFFALSE 14870
// sRocket := true ;
14862: LD_ADDR_EXP 65
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// if p3 = 2 then
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 2
14877: EQUAL
14878: IFFALSE 14888
// sSpeed := true ;
14880: LD_ADDR_EXP 64
14884: PUSH
14885: LD_INT 1
14887: ST_TO_ADDR
// if p3 = 3 then
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 3
14895: EQUAL
14896: IFFALSE 14906
// sEngine := true ;
14898: LD_ADDR_EXP 66
14902: PUSH
14903: LD_INT 1
14905: ST_TO_ADDR
// if p3 = 4 then
14906: LD_VAR 0 3
14910: PUSH
14911: LD_INT 4
14913: EQUAL
14914: IFFALSE 14924
// sSpec := true ;
14916: LD_ADDR_EXP 63
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// if p3 = 5 then
14924: LD_VAR 0 3
14928: PUSH
14929: LD_INT 5
14931: EQUAL
14932: IFFALSE 14942
// sLevel := true ;
14934: LD_ADDR_EXP 67
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if p3 = 6 then
14942: LD_VAR 0 3
14946: PUSH
14947: LD_INT 6
14949: EQUAL
14950: IFFALSE 14960
// sArmoury := true ;
14952: LD_ADDR_EXP 68
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// if p3 = 7 then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_INT 7
14967: EQUAL
14968: IFFALSE 14978
// sRadar := true ;
14970: LD_ADDR_EXP 69
14974: PUSH
14975: LD_INT 1
14977: ST_TO_ADDR
// if p3 = 8 then
14978: LD_VAR 0 3
14982: PUSH
14983: LD_INT 8
14985: EQUAL
14986: IFFALSE 14996
// sBunker := true ;
14988: LD_ADDR_EXP 70
14992: PUSH
14993: LD_INT 1
14995: ST_TO_ADDR
// if p3 = 9 then
14996: LD_VAR 0 3
15000: PUSH
15001: LD_INT 9
15003: EQUAL
15004: IFFALSE 15014
// sHack := true ;
15006: LD_ADDR_EXP 71
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// if p3 = 10 then
15014: LD_VAR 0 3
15018: PUSH
15019: LD_INT 10
15021: EQUAL
15022: IFFALSE 15032
// sFire := true ;
15024: LD_ADDR_EXP 72
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// if p3 = 11 then
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 11
15039: EQUAL
15040: IFFALSE 15050
// sRefresh := true ;
15042: LD_ADDR_EXP 73
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// if p3 = 12 then
15050: LD_VAR 0 3
15054: PUSH
15055: LD_INT 12
15057: EQUAL
15058: IFFALSE 15068
// sExp := true ;
15060: LD_ADDR_EXP 74
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// if p3 = 13 then
15068: LD_VAR 0 3
15072: PUSH
15073: LD_INT 13
15075: EQUAL
15076: IFFALSE 15086
// sDepot := true ;
15078: LD_ADDR_EXP 75
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// if p3 = 14 then
15086: LD_VAR 0 3
15090: PUSH
15091: LD_INT 14
15093: EQUAL
15094: IFFALSE 15104
// sFlag := true ;
15096: LD_ADDR_EXP 76
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// if p3 = 15 then
15104: LD_VAR 0 3
15108: PUSH
15109: LD_INT 15
15111: EQUAL
15112: IFFALSE 15122
// sKamikadze := true ;
15114: LD_ADDR_EXP 84
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// if p3 = 16 then
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 16
15129: EQUAL
15130: IFFALSE 15140
// sTroll := true ;
15132: LD_ADDR_EXP 85
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// if p3 = 17 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 17
15147: EQUAL
15148: IFFALSE 15158
// sSlow := true ;
15150: LD_ADDR_EXP 86
15154: PUSH
15155: LD_INT 1
15157: ST_TO_ADDR
// if p3 = 18 then
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 18
15165: EQUAL
15166: IFFALSE 15176
// sLack := true ;
15168: LD_ADDR_EXP 87
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if p3 = 19 then
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 19
15183: EQUAL
15184: IFFALSE 15194
// sTank := true ;
15186: LD_ADDR_EXP 89
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// if p3 = 20 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 20
15201: EQUAL
15202: IFFALSE 15212
// sRemote := true ;
15204: LD_ADDR_EXP 90
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 21 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 21
15219: EQUAL
15220: IFFALSE 15230
// sPowell := true ;
15222: LD_ADDR_EXP 91
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 22 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 22
15237: EQUAL
15238: IFFALSE 15248
// sTeleport := true ;
15240: LD_ADDR_EXP 94
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 23 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 23
15255: EQUAL
15256: IFFALSE 15266
// sOilTower := true ;
15258: LD_ADDR_EXP 96
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 24 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 24
15273: EQUAL
15274: IFFALSE 15284
// sShovel := true ;
15276: LD_ADDR_EXP 97
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 25 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 25
15291: EQUAL
15292: IFFALSE 15302
// sSheik := true ;
15294: LD_ADDR_EXP 98
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// if p3 = 26 then
15302: LD_VAR 0 3
15306: PUSH
15307: LD_INT 26
15309: EQUAL
15310: IFFALSE 15320
// sEarthquake := true ;
15312: LD_ADDR_EXP 100
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if p3 = 27 then
15320: LD_VAR 0 3
15324: PUSH
15325: LD_INT 27
15327: EQUAL
15328: IFFALSE 15338
// sAI := true ;
15330: LD_ADDR_EXP 101
15334: PUSH
15335: LD_INT 1
15337: ST_TO_ADDR
// if p3 = 28 then
15338: LD_VAR 0 3
15342: PUSH
15343: LD_INT 28
15345: EQUAL
15346: IFFALSE 15356
// sCargo := true ;
15348: LD_ADDR_EXP 104
15352: PUSH
15353: LD_INT 1
15355: ST_TO_ADDR
// if p3 = 29 then
15356: LD_VAR 0 3
15360: PUSH
15361: LD_INT 29
15363: EQUAL
15364: IFFALSE 15374
// sDLaser := true ;
15366: LD_ADDR_EXP 105
15370: PUSH
15371: LD_INT 1
15373: ST_TO_ADDR
// if p3 = 30 then
15374: LD_VAR 0 3
15378: PUSH
15379: LD_INT 30
15381: EQUAL
15382: IFFALSE 15392
// sExchange := true ;
15384: LD_ADDR_EXP 106
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// if p3 = 31 then
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 31
15399: EQUAL
15400: IFFALSE 15410
// sFac := true ;
15402: LD_ADDR_EXP 107
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if p3 = 32 then
15410: LD_VAR 0 3
15414: PUSH
15415: LD_INT 32
15417: EQUAL
15418: IFFALSE 15428
// sPower := true ;
15420: LD_ADDR_EXP 108
15424: PUSH
15425: LD_INT 1
15427: ST_TO_ADDR
// if p3 = 33 then
15428: LD_VAR 0 3
15432: PUSH
15433: LD_INT 33
15435: EQUAL
15436: IFFALSE 15446
// sRandom := true ;
15438: LD_ADDR_EXP 109
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// if p3 = 34 then
15446: LD_VAR 0 3
15450: PUSH
15451: LD_INT 34
15453: EQUAL
15454: IFFALSE 15464
// sShield := true ;
15456: LD_ADDR_EXP 110
15460: PUSH
15461: LD_INT 1
15463: ST_TO_ADDR
// if p3 = 35 then
15464: LD_VAR 0 3
15468: PUSH
15469: LD_INT 35
15471: EQUAL
15472: IFFALSE 15482
// sTime := true ;
15474: LD_ADDR_EXP 111
15478: PUSH
15479: LD_INT 1
15481: ST_TO_ADDR
// if p3 = 36 then
15482: LD_VAR 0 3
15486: PUSH
15487: LD_INT 36
15489: EQUAL
15490: IFFALSE 15500
// sTools := true ;
15492: LD_ADDR_EXP 112
15496: PUSH
15497: LD_INT 1
15499: ST_TO_ADDR
// if p3 = 101 then
15500: LD_VAR 0 3
15504: PUSH
15505: LD_INT 101
15507: EQUAL
15508: IFFALSE 15518
// sSold := true ;
15510: LD_ADDR_EXP 77
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// if p3 = 102 then
15518: LD_VAR 0 3
15522: PUSH
15523: LD_INT 102
15525: EQUAL
15526: IFFALSE 15536
// sDiff := true ;
15528: LD_ADDR_EXP 78
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// if p3 = 103 then
15536: LD_VAR 0 3
15540: PUSH
15541: LD_INT 103
15543: EQUAL
15544: IFFALSE 15554
// sFog := true ;
15546: LD_ADDR_EXP 81
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// if p3 = 104 then
15554: LD_VAR 0 3
15558: PUSH
15559: LD_INT 104
15561: EQUAL
15562: IFFALSE 15572
// sReset := true ;
15564: LD_ADDR_EXP 82
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if p3 = 105 then
15572: LD_VAR 0 3
15576: PUSH
15577: LD_INT 105
15579: EQUAL
15580: IFFALSE 15590
// sSun := true ;
15582: LD_ADDR_EXP 83
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// if p3 = 106 then
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 106
15597: EQUAL
15598: IFFALSE 15608
// sTiger := true ;
15600: LD_ADDR_EXP 79
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// if p3 = 107 then
15608: LD_VAR 0 3
15612: PUSH
15613: LD_INT 107
15615: EQUAL
15616: IFFALSE 15626
// sBomb := true ;
15618: LD_ADDR_EXP 80
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if p3 = 108 then
15626: LD_VAR 0 3
15630: PUSH
15631: LD_INT 108
15633: EQUAL
15634: IFFALSE 15644
// sWound := true ;
15636: LD_ADDR_EXP 88
15640: PUSH
15641: LD_INT 1
15643: ST_TO_ADDR
// if p3 = 109 then
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 109
15651: EQUAL
15652: IFFALSE 15662
// sBetray := true ;
15654: LD_ADDR_EXP 92
15658: PUSH
15659: LD_INT 1
15661: ST_TO_ADDR
// if p3 = 110 then
15662: LD_VAR 0 3
15666: PUSH
15667: LD_INT 110
15669: EQUAL
15670: IFFALSE 15680
// sContamin := true ;
15672: LD_ADDR_EXP 93
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// if p3 = 111 then
15680: LD_VAR 0 3
15684: PUSH
15685: LD_INT 111
15687: EQUAL
15688: IFFALSE 15698
// sOil := true ;
15690: LD_ADDR_EXP 95
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// if p3 = 112 then
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 112
15705: EQUAL
15706: IFFALSE 15716
// sStu := true ;
15708: LD_ADDR_EXP 99
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
// if p3 = 113 then
15716: LD_VAR 0 3
15720: PUSH
15721: LD_INT 113
15723: EQUAL
15724: IFFALSE 15734
// sBazooka := true ;
15726: LD_ADDR_EXP 102
15730: PUSH
15731: LD_INT 1
15733: ST_TO_ADDR
// if p3 = 114 then
15734: LD_VAR 0 3
15738: PUSH
15739: LD_INT 114
15741: EQUAL
15742: IFFALSE 15752
// sMortar := true ;
15744: LD_ADDR_EXP 103
15748: PUSH
15749: LD_INT 1
15751: ST_TO_ADDR
// if p3 = 115 then
15752: LD_VAR 0 3
15756: PUSH
15757: LD_INT 115
15759: EQUAL
15760: IFFALSE 15770
// sRanger := true ;
15762: LD_ADDR_EXP 113
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// if p3 = 116 then
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 116
15777: EQUAL
15778: IFFALSE 15788
// sComputer := true ;
15780: LD_ADDR_EXP 114
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// if p3 = 117 then
15788: LD_VAR 0 3
15792: PUSH
15793: LD_INT 117
15795: EQUAL
15796: IFFALSE 15806
// s30 := true ;
15798: LD_ADDR_EXP 115
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// if p3 = 118 then
15806: LD_VAR 0 3
15810: PUSH
15811: LD_INT 118
15813: EQUAL
15814: IFFALSE 15824
// s60 := true ;
15816: LD_ADDR_EXP 116
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// end ; if p2 = 101 then
15824: LD_VAR 0 2
15828: PUSH
15829: LD_INT 101
15831: EQUAL
15832: IFFALSE 15960
// begin case p3 of 1 :
15834: LD_VAR 0 3
15838: PUSH
15839: LD_INT 1
15841: DOUBLE
15842: EQUAL
15843: IFTRUE 15847
15845: GO 15854
15847: POP
// hHackUnlimitedResources ; 2 :
15848: CALL 27556 0 0
15852: GO 15960
15854: LD_INT 2
15856: DOUBLE
15857: EQUAL
15858: IFTRUE 15862
15860: GO 15869
15862: POP
// hHackSetLevel10 ; 3 :
15863: CALL 27689 0 0
15867: GO 15960
15869: LD_INT 3
15871: DOUBLE
15872: EQUAL
15873: IFTRUE 15877
15875: GO 15884
15877: POP
// hHackSetLevel10YourUnits ; 4 :
15878: CALL 27774 0 0
15882: GO 15960
15884: LD_INT 4
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15892
15890: GO 15899
15892: POP
// hHackInvincible ; 5 :
15893: CALL 28222 0 0
15897: GO 15960
15899: LD_INT 5
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15914
15907: POP
// hHackInvisible ; 6 :
15908: CALL 28333 0 0
15912: GO 15960
15914: LD_INT 6
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 15929
15922: POP
// hHackChangeYourSide ; 7 :
15923: CALL 28390 0 0
15927: GO 15960
15929: LD_INT 7
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15937
15935: GO 15944
15937: POP
// hHackChangeUnitSide ; 8 :
15938: CALL 28432 0 0
15942: GO 15960
15944: LD_INT 8
15946: DOUBLE
15947: EQUAL
15948: IFTRUE 15952
15950: GO 15959
15952: POP
// hHackFog ; end ;
15953: CALL 28533 0 0
15957: GO 15960
15959: POP
// end ; end ;
15960: LD_VAR 0 7
15964: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15965: GO 15967
15967: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15968: LD_STRING initStreamRollete();
15970: PPUSH
15971: CALL_OW 559
// InitStreamMode ;
15975: CALL 15984 0 0
// DefineStreamItems ( ) ;
15979: CALL 16448 0 0
// end ;
15983: END
// function InitStreamMode ; begin
15984: LD_INT 0
15986: PPUSH
// streamModeActive := false ;
15987: LD_ADDR_EXP 60
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// normalCounter := 36 ;
15995: LD_ADDR_EXP 61
15999: PUSH
16000: LD_INT 36
16002: ST_TO_ADDR
// hardcoreCounter := 16 ;
16003: LD_ADDR_EXP 62
16007: PUSH
16008: LD_INT 16
16010: ST_TO_ADDR
// sRocket := false ;
16011: LD_ADDR_EXP 65
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sSpeed := false ;
16019: LD_ADDR_EXP 64
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sEngine := false ;
16027: LD_ADDR_EXP 66
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sSpec := false ;
16035: LD_ADDR_EXP 63
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// sLevel := false ;
16043: LD_ADDR_EXP 67
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// sArmoury := false ;
16051: LD_ADDR_EXP 68
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// sRadar := false ;
16059: LD_ADDR_EXP 69
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// sBunker := false ;
16067: LD_ADDR_EXP 70
16071: PUSH
16072: LD_INT 0
16074: ST_TO_ADDR
// sHack := false ;
16075: LD_ADDR_EXP 71
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// sFire := false ;
16083: LD_ADDR_EXP 72
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// sRefresh := false ;
16091: LD_ADDR_EXP 73
16095: PUSH
16096: LD_INT 0
16098: ST_TO_ADDR
// sExp := false ;
16099: LD_ADDR_EXP 74
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// sDepot := false ;
16107: LD_ADDR_EXP 75
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// sFlag := false ;
16115: LD_ADDR_EXP 76
16119: PUSH
16120: LD_INT 0
16122: ST_TO_ADDR
// sKamikadze := false ;
16123: LD_ADDR_EXP 84
16127: PUSH
16128: LD_INT 0
16130: ST_TO_ADDR
// sTroll := false ;
16131: LD_ADDR_EXP 85
16135: PUSH
16136: LD_INT 0
16138: ST_TO_ADDR
// sSlow := false ;
16139: LD_ADDR_EXP 86
16143: PUSH
16144: LD_INT 0
16146: ST_TO_ADDR
// sLack := false ;
16147: LD_ADDR_EXP 87
16151: PUSH
16152: LD_INT 0
16154: ST_TO_ADDR
// sTank := false ;
16155: LD_ADDR_EXP 89
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// sRemote := false ;
16163: LD_ADDR_EXP 90
16167: PUSH
16168: LD_INT 0
16170: ST_TO_ADDR
// sPowell := false ;
16171: LD_ADDR_EXP 91
16175: PUSH
16176: LD_INT 0
16178: ST_TO_ADDR
// sTeleport := false ;
16179: LD_ADDR_EXP 94
16183: PUSH
16184: LD_INT 0
16186: ST_TO_ADDR
// sOilTower := false ;
16187: LD_ADDR_EXP 96
16191: PUSH
16192: LD_INT 0
16194: ST_TO_ADDR
// sShovel := false ;
16195: LD_ADDR_EXP 97
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// sSheik := false ;
16203: LD_ADDR_EXP 98
16207: PUSH
16208: LD_INT 0
16210: ST_TO_ADDR
// sEarthquake := false ;
16211: LD_ADDR_EXP 100
16215: PUSH
16216: LD_INT 0
16218: ST_TO_ADDR
// sAI := false ;
16219: LD_ADDR_EXP 101
16223: PUSH
16224: LD_INT 0
16226: ST_TO_ADDR
// sCargo := false ;
16227: LD_ADDR_EXP 104
16231: PUSH
16232: LD_INT 0
16234: ST_TO_ADDR
// sDLaser := false ;
16235: LD_ADDR_EXP 105
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// sExchange := false ;
16243: LD_ADDR_EXP 106
16247: PUSH
16248: LD_INT 0
16250: ST_TO_ADDR
// sFac := false ;
16251: LD_ADDR_EXP 107
16255: PUSH
16256: LD_INT 0
16258: ST_TO_ADDR
// sPower := false ;
16259: LD_ADDR_EXP 108
16263: PUSH
16264: LD_INT 0
16266: ST_TO_ADDR
// sRandom := false ;
16267: LD_ADDR_EXP 109
16271: PUSH
16272: LD_INT 0
16274: ST_TO_ADDR
// sShield := false ;
16275: LD_ADDR_EXP 110
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// sTime := false ;
16283: LD_ADDR_EXP 111
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// sTools := false ;
16291: LD_ADDR_EXP 112
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// sSold := false ;
16299: LD_ADDR_EXP 77
16303: PUSH
16304: LD_INT 0
16306: ST_TO_ADDR
// sDiff := false ;
16307: LD_ADDR_EXP 78
16311: PUSH
16312: LD_INT 0
16314: ST_TO_ADDR
// sFog := false ;
16315: LD_ADDR_EXP 81
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// sReset := false ;
16323: LD_ADDR_EXP 82
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// sSun := false ;
16331: LD_ADDR_EXP 83
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// sTiger := false ;
16339: LD_ADDR_EXP 79
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// sBomb := false ;
16347: LD_ADDR_EXP 80
16351: PUSH
16352: LD_INT 0
16354: ST_TO_ADDR
// sWound := false ;
16355: LD_ADDR_EXP 88
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// sBetray := false ;
16363: LD_ADDR_EXP 92
16367: PUSH
16368: LD_INT 0
16370: ST_TO_ADDR
// sContamin := false ;
16371: LD_ADDR_EXP 93
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// sOil := false ;
16379: LD_ADDR_EXP 95
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// sStu := false ;
16387: LD_ADDR_EXP 99
16391: PUSH
16392: LD_INT 0
16394: ST_TO_ADDR
// sBazooka := false ;
16395: LD_ADDR_EXP 102
16399: PUSH
16400: LD_INT 0
16402: ST_TO_ADDR
// sMortar := false ;
16403: LD_ADDR_EXP 103
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// sRanger := false ;
16411: LD_ADDR_EXP 113
16415: PUSH
16416: LD_INT 0
16418: ST_TO_ADDR
// sComputer := false ;
16419: LD_ADDR_EXP 114
16423: PUSH
16424: LD_INT 0
16426: ST_TO_ADDR
// s30 := false ;
16427: LD_ADDR_EXP 115
16431: PUSH
16432: LD_INT 0
16434: ST_TO_ADDR
// s60 := false ;
16435: LD_ADDR_EXP 116
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// end ;
16443: LD_VAR 0 1
16447: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
// result := [ ] ;
16455: LD_ADDR_VAR 0 1
16459: PUSH
16460: EMPTY
16461: ST_TO_ADDR
// if campaign_id = 1 then
16462: LD_OWVAR 69
16466: PUSH
16467: LD_INT 1
16469: EQUAL
16470: IFFALSE 19636
// begin case mission_number of 1 :
16472: LD_OWVAR 70
16476: PUSH
16477: LD_INT 1
16479: DOUBLE
16480: EQUAL
16481: IFTRUE 16485
16483: GO 16561
16485: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 4
16496: PUSH
16497: LD_INT 11
16499: PUSH
16500: LD_INT 12
16502: PUSH
16503: LD_INT 15
16505: PUSH
16506: LD_INT 16
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_INT 23
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 101
16531: PUSH
16532: LD_INT 102
16534: PUSH
16535: LD_INT 106
16537: PUSH
16538: LD_INT 116
16540: PUSH
16541: LD_INT 117
16543: PUSH
16544: LD_INT 118
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: ST_TO_ADDR
16559: GO 19634
16561: LD_INT 2
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16653
16569: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16570: LD_ADDR_VAR 0 1
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: LD_INT 4
16580: PUSH
16581: LD_INT 11
16583: PUSH
16584: LD_INT 12
16586: PUSH
16587: LD_INT 15
16589: PUSH
16590: LD_INT 16
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_INT 23
16598: PUSH
16599: LD_INT 26
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 101
16615: PUSH
16616: LD_INT 102
16618: PUSH
16619: LD_INT 105
16621: PUSH
16622: LD_INT 106
16624: PUSH
16625: LD_INT 108
16627: PUSH
16628: LD_INT 116
16630: PUSH
16631: LD_INT 117
16633: PUSH
16634: LD_INT 118
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: ST_TO_ADDR
16651: GO 19634
16653: LD_INT 3
16655: DOUBLE
16656: EQUAL
16657: IFTRUE 16661
16659: GO 16749
16661: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16662: LD_ADDR_VAR 0 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 4
16672: PUSH
16673: LD_INT 5
16675: PUSH
16676: LD_INT 11
16678: PUSH
16679: LD_INT 12
16681: PUSH
16682: LD_INT 15
16684: PUSH
16685: LD_INT 16
16687: PUSH
16688: LD_INT 22
16690: PUSH
16691: LD_INT 26
16693: PUSH
16694: LD_INT 36
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 101
16711: PUSH
16712: LD_INT 102
16714: PUSH
16715: LD_INT 105
16717: PUSH
16718: LD_INT 106
16720: PUSH
16721: LD_INT 108
16723: PUSH
16724: LD_INT 116
16726: PUSH
16727: LD_INT 117
16729: PUSH
16730: LD_INT 118
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: ST_TO_ADDR
16747: GO 19634
16749: LD_INT 4
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16853
16757: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: LD_INT 2
16765: PUSH
16766: LD_INT 4
16768: PUSH
16769: LD_INT 5
16771: PUSH
16772: LD_INT 8
16774: PUSH
16775: LD_INT 11
16777: PUSH
16778: LD_INT 12
16780: PUSH
16781: LD_INT 15
16783: PUSH
16784: LD_INT 16
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 23
16792: PUSH
16793: LD_INT 26
16795: PUSH
16796: LD_INT 36
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 101
16815: PUSH
16816: LD_INT 102
16818: PUSH
16819: LD_INT 105
16821: PUSH
16822: LD_INT 106
16824: PUSH
16825: LD_INT 108
16827: PUSH
16828: LD_INT 116
16830: PUSH
16831: LD_INT 117
16833: PUSH
16834: LD_INT 118
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: ST_TO_ADDR
16851: GO 19634
16853: LD_INT 5
16855: DOUBLE
16856: EQUAL
16857: IFTRUE 16861
16859: GO 16973
16861: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16862: LD_ADDR_VAR 0 1
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 4
16872: PUSH
16873: LD_INT 5
16875: PUSH
16876: LD_INT 6
16878: PUSH
16879: LD_INT 8
16881: PUSH
16882: LD_INT 11
16884: PUSH
16885: LD_INT 12
16887: PUSH
16888: LD_INT 15
16890: PUSH
16891: LD_INT 16
16893: PUSH
16894: LD_INT 22
16896: PUSH
16897: LD_INT 23
16899: PUSH
16900: LD_INT 25
16902: PUSH
16903: LD_INT 26
16905: PUSH
16906: LD_INT 36
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 101
16927: PUSH
16928: LD_INT 102
16930: PUSH
16931: LD_INT 105
16933: PUSH
16934: LD_INT 106
16936: PUSH
16937: LD_INT 108
16939: PUSH
16940: LD_INT 109
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 116
16948: PUSH
16949: LD_INT 117
16951: PUSH
16952: LD_INT 118
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: ST_TO_ADDR
16971: GO 19634
16973: LD_INT 6
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17113
16981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 4
16992: PUSH
16993: LD_INT 5
16995: PUSH
16996: LD_INT 6
16998: PUSH
16999: LD_INT 8
17001: PUSH
17002: LD_INT 11
17004: PUSH
17005: LD_INT 12
17007: PUSH
17008: LD_INT 15
17010: PUSH
17011: LD_INT 16
17013: PUSH
17014: LD_INT 20
17016: PUSH
17017: LD_INT 21
17019: PUSH
17020: LD_INT 22
17022: PUSH
17023: LD_INT 23
17025: PUSH
17026: LD_INT 25
17028: PUSH
17029: LD_INT 26
17031: PUSH
17032: LD_INT 30
17034: PUSH
17035: LD_INT 31
17037: PUSH
17038: LD_INT 32
17040: PUSH
17041: LD_INT 36
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 101
17067: PUSH
17068: LD_INT 102
17070: PUSH
17071: LD_INT 105
17073: PUSH
17074: LD_INT 106
17076: PUSH
17077: LD_INT 108
17079: PUSH
17080: LD_INT 109
17082: PUSH
17083: LD_INT 112
17085: PUSH
17086: LD_INT 116
17088: PUSH
17089: LD_INT 117
17091: PUSH
17092: LD_INT 118
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: ST_TO_ADDR
17111: GO 19634
17113: LD_INT 7
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17233
17121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17122: LD_ADDR_VAR 0 1
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: LD_INT 5
17135: PUSH
17136: LD_INT 7
17138: PUSH
17139: LD_INT 11
17141: PUSH
17142: LD_INT 12
17144: PUSH
17145: LD_INT 15
17147: PUSH
17148: LD_INT 16
17150: PUSH
17151: LD_INT 20
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 23
17162: PUSH
17163: LD_INT 25
17165: PUSH
17166: LD_INT 26
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 101
17187: PUSH
17188: LD_INT 102
17190: PUSH
17191: LD_INT 103
17193: PUSH
17194: LD_INT 105
17196: PUSH
17197: LD_INT 106
17199: PUSH
17200: LD_INT 108
17202: PUSH
17203: LD_INT 112
17205: PUSH
17206: LD_INT 116
17208: PUSH
17209: LD_INT 117
17211: PUSH
17212: LD_INT 118
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: ST_TO_ADDR
17231: GO 19634
17233: LD_INT 8
17235: DOUBLE
17236: EQUAL
17237: IFTRUE 17241
17239: GO 17381
17241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 4
17252: PUSH
17253: LD_INT 5
17255: PUSH
17256: LD_INT 6
17258: PUSH
17259: LD_INT 7
17261: PUSH
17262: LD_INT 8
17264: PUSH
17265: LD_INT 11
17267: PUSH
17268: LD_INT 12
17270: PUSH
17271: LD_INT 15
17273: PUSH
17274: LD_INT 16
17276: PUSH
17277: LD_INT 20
17279: PUSH
17280: LD_INT 21
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: LD_INT 25
17291: PUSH
17292: LD_INT 26
17294: PUSH
17295: LD_INT 30
17297: PUSH
17298: LD_INT 31
17300: PUSH
17301: LD_INT 32
17303: PUSH
17304: LD_INT 36
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 101
17331: PUSH
17332: LD_INT 102
17334: PUSH
17335: LD_INT 103
17337: PUSH
17338: LD_INT 105
17340: PUSH
17341: LD_INT 106
17343: PUSH
17344: LD_INT 108
17346: PUSH
17347: LD_INT 109
17349: PUSH
17350: LD_INT 112
17352: PUSH
17353: LD_INT 116
17355: PUSH
17356: LD_INT 117
17358: PUSH
17359: LD_INT 118
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: ST_TO_ADDR
17379: GO 19634
17381: LD_INT 9
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17537
17389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17390: LD_ADDR_VAR 0 1
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 4
17400: PUSH
17401: LD_INT 5
17403: PUSH
17404: LD_INT 6
17406: PUSH
17407: LD_INT 7
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: LD_INT 11
17415: PUSH
17416: LD_INT 12
17418: PUSH
17419: LD_INT 15
17421: PUSH
17422: LD_INT 16
17424: PUSH
17425: LD_INT 20
17427: PUSH
17428: LD_INT 21
17430: PUSH
17431: LD_INT 22
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: LD_INT 25
17439: PUSH
17440: LD_INT 26
17442: PUSH
17443: LD_INT 28
17445: PUSH
17446: LD_INT 30
17448: PUSH
17449: LD_INT 31
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 36
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 101
17483: PUSH
17484: LD_INT 102
17486: PUSH
17487: LD_INT 103
17489: PUSH
17490: LD_INT 105
17492: PUSH
17493: LD_INT 106
17495: PUSH
17496: LD_INT 108
17498: PUSH
17499: LD_INT 109
17501: PUSH
17502: LD_INT 112
17504: PUSH
17505: LD_INT 114
17507: PUSH
17508: LD_INT 116
17510: PUSH
17511: LD_INT 117
17513: PUSH
17514: LD_INT 118
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: ST_TO_ADDR
17535: GO 19634
17537: LD_INT 10
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17741
17545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: LD_INT 4
17556: PUSH
17557: LD_INT 5
17559: PUSH
17560: LD_INT 6
17562: PUSH
17563: LD_INT 7
17565: PUSH
17566: LD_INT 8
17568: PUSH
17569: LD_INT 9
17571: PUSH
17572: LD_INT 10
17574: PUSH
17575: LD_INT 11
17577: PUSH
17578: LD_INT 12
17580: PUSH
17581: LD_INT 13
17583: PUSH
17584: LD_INT 14
17586: PUSH
17587: LD_INT 15
17589: PUSH
17590: LD_INT 16
17592: PUSH
17593: LD_INT 17
17595: PUSH
17596: LD_INT 18
17598: PUSH
17599: LD_INT 19
17601: PUSH
17602: LD_INT 20
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 22
17610: PUSH
17611: LD_INT 23
17613: PUSH
17614: LD_INT 24
17616: PUSH
17617: LD_INT 25
17619: PUSH
17620: LD_INT 26
17622: PUSH
17623: LD_INT 28
17625: PUSH
17626: LD_INT 30
17628: PUSH
17629: LD_INT 31
17631: PUSH
17632: LD_INT 32
17634: PUSH
17635: LD_INT 36
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 101
17671: PUSH
17672: LD_INT 102
17674: PUSH
17675: LD_INT 103
17677: PUSH
17678: LD_INT 104
17680: PUSH
17681: LD_INT 105
17683: PUSH
17684: LD_INT 106
17686: PUSH
17687: LD_INT 107
17689: PUSH
17690: LD_INT 108
17692: PUSH
17693: LD_INT 109
17695: PUSH
17696: LD_INT 110
17698: PUSH
17699: LD_INT 111
17701: PUSH
17702: LD_INT 112
17704: PUSH
17705: LD_INT 114
17707: PUSH
17708: LD_INT 116
17710: PUSH
17711: LD_INT 117
17713: PUSH
17714: LD_INT 118
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: ST_TO_ADDR
17739: GO 19634
17741: LD_INT 11
17743: DOUBLE
17744: EQUAL
17745: IFTRUE 17749
17747: GO 17953
17749: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: LD_INT 4
17763: PUSH
17764: LD_INT 5
17766: PUSH
17767: LD_INT 6
17769: PUSH
17770: LD_INT 7
17772: PUSH
17773: LD_INT 8
17775: PUSH
17776: LD_INT 9
17778: PUSH
17779: LD_INT 10
17781: PUSH
17782: LD_INT 11
17784: PUSH
17785: LD_INT 12
17787: PUSH
17788: LD_INT 13
17790: PUSH
17791: LD_INT 14
17793: PUSH
17794: LD_INT 15
17796: PUSH
17797: LD_INT 16
17799: PUSH
17800: LD_INT 17
17802: PUSH
17803: LD_INT 18
17805: PUSH
17806: LD_INT 19
17808: PUSH
17809: LD_INT 20
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 22
17817: PUSH
17818: LD_INT 23
17820: PUSH
17821: LD_INT 24
17823: PUSH
17824: LD_INT 25
17826: PUSH
17827: LD_INT 26
17829: PUSH
17830: LD_INT 28
17832: PUSH
17833: LD_INT 30
17835: PUSH
17836: LD_INT 31
17838: PUSH
17839: LD_INT 32
17841: PUSH
17842: LD_INT 34
17844: PUSH
17845: LD_INT 36
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 101
17883: PUSH
17884: LD_INT 102
17886: PUSH
17887: LD_INT 103
17889: PUSH
17890: LD_INT 104
17892: PUSH
17893: LD_INT 105
17895: PUSH
17896: LD_INT 106
17898: PUSH
17899: LD_INT 107
17901: PUSH
17902: LD_INT 108
17904: PUSH
17905: LD_INT 109
17907: PUSH
17908: LD_INT 110
17910: PUSH
17911: LD_INT 111
17913: PUSH
17914: LD_INT 112
17916: PUSH
17917: LD_INT 114
17919: PUSH
17920: LD_INT 116
17922: PUSH
17923: LD_INT 117
17925: PUSH
17926: LD_INT 118
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: ST_TO_ADDR
17951: GO 19634
17953: LD_INT 12
17955: DOUBLE
17956: EQUAL
17957: IFTRUE 17961
17959: GO 18181
17961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17962: LD_ADDR_VAR 0 1
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 3
17975: PUSH
17976: LD_INT 4
17978: PUSH
17979: LD_INT 5
17981: PUSH
17982: LD_INT 6
17984: PUSH
17985: LD_INT 7
17987: PUSH
17988: LD_INT 8
17990: PUSH
17991: LD_INT 9
17993: PUSH
17994: LD_INT 10
17996: PUSH
17997: LD_INT 11
17999: PUSH
18000: LD_INT 12
18002: PUSH
18003: LD_INT 13
18005: PUSH
18006: LD_INT 14
18008: PUSH
18009: LD_INT 15
18011: PUSH
18012: LD_INT 16
18014: PUSH
18015: LD_INT 17
18017: PUSH
18018: LD_INT 18
18020: PUSH
18021: LD_INT 19
18023: PUSH
18024: LD_INT 20
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 22
18032: PUSH
18033: LD_INT 23
18035: PUSH
18036: LD_INT 24
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 26
18044: PUSH
18045: LD_INT 27
18047: PUSH
18048: LD_INT 28
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: LD_INT 31
18056: PUSH
18057: LD_INT 32
18059: PUSH
18060: LD_INT 33
18062: PUSH
18063: LD_INT 34
18065: PUSH
18066: LD_INT 36
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 101
18107: PUSH
18108: LD_INT 102
18110: PUSH
18111: LD_INT 103
18113: PUSH
18114: LD_INT 104
18116: PUSH
18117: LD_INT 105
18119: PUSH
18120: LD_INT 106
18122: PUSH
18123: LD_INT 107
18125: PUSH
18126: LD_INT 108
18128: PUSH
18129: LD_INT 109
18131: PUSH
18132: LD_INT 110
18134: PUSH
18135: LD_INT 111
18137: PUSH
18138: LD_INT 112
18140: PUSH
18141: LD_INT 113
18143: PUSH
18144: LD_INT 114
18146: PUSH
18147: LD_INT 116
18149: PUSH
18150: LD_INT 117
18152: PUSH
18153: LD_INT 118
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: ST_TO_ADDR
18179: GO 19634
18181: LD_INT 13
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18397
18189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: LD_INT 4
18206: PUSH
18207: LD_INT 5
18209: PUSH
18210: LD_INT 8
18212: PUSH
18213: LD_INT 9
18215: PUSH
18216: LD_INT 10
18218: PUSH
18219: LD_INT 11
18221: PUSH
18222: LD_INT 12
18224: PUSH
18225: LD_INT 14
18227: PUSH
18228: LD_INT 15
18230: PUSH
18231: LD_INT 16
18233: PUSH
18234: LD_INT 17
18236: PUSH
18237: LD_INT 18
18239: PUSH
18240: LD_INT 19
18242: PUSH
18243: LD_INT 20
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_INT 23
18254: PUSH
18255: LD_INT 24
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 26
18263: PUSH
18264: LD_INT 27
18266: PUSH
18267: LD_INT 28
18269: PUSH
18270: LD_INT 30
18272: PUSH
18273: LD_INT 31
18275: PUSH
18276: LD_INT 32
18278: PUSH
18279: LD_INT 33
18281: PUSH
18282: LD_INT 34
18284: PUSH
18285: LD_INT 36
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 101
18323: PUSH
18324: LD_INT 102
18326: PUSH
18327: LD_INT 103
18329: PUSH
18330: LD_INT 104
18332: PUSH
18333: LD_INT 105
18335: PUSH
18336: LD_INT 106
18338: PUSH
18339: LD_INT 107
18341: PUSH
18342: LD_INT 108
18344: PUSH
18345: LD_INT 109
18347: PUSH
18348: LD_INT 110
18350: PUSH
18351: LD_INT 111
18353: PUSH
18354: LD_INT 112
18356: PUSH
18357: LD_INT 113
18359: PUSH
18360: LD_INT 114
18362: PUSH
18363: LD_INT 116
18365: PUSH
18366: LD_INT 117
18368: PUSH
18369: LD_INT 118
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: ST_TO_ADDR
18395: GO 19634
18397: LD_INT 14
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18629
18405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18406: LD_ADDR_VAR 0 1
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: LD_INT 4
18422: PUSH
18423: LD_INT 5
18425: PUSH
18426: LD_INT 6
18428: PUSH
18429: LD_INT 7
18431: PUSH
18432: LD_INT 8
18434: PUSH
18435: LD_INT 9
18437: PUSH
18438: LD_INT 10
18440: PUSH
18441: LD_INT 11
18443: PUSH
18444: LD_INT 12
18446: PUSH
18447: LD_INT 13
18449: PUSH
18450: LD_INT 14
18452: PUSH
18453: LD_INT 15
18455: PUSH
18456: LD_INT 16
18458: PUSH
18459: LD_INT 17
18461: PUSH
18462: LD_INT 18
18464: PUSH
18465: LD_INT 19
18467: PUSH
18468: LD_INT 20
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_INT 23
18479: PUSH
18480: LD_INT 24
18482: PUSH
18483: LD_INT 25
18485: PUSH
18486: LD_INT 26
18488: PUSH
18489: LD_INT 27
18491: PUSH
18492: LD_INT 28
18494: PUSH
18495: LD_INT 29
18497: PUSH
18498: LD_INT 30
18500: PUSH
18501: LD_INT 31
18503: PUSH
18504: LD_INT 32
18506: PUSH
18507: LD_INT 33
18509: PUSH
18510: LD_INT 34
18512: PUSH
18513: LD_INT 36
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 101
18555: PUSH
18556: LD_INT 102
18558: PUSH
18559: LD_INT 103
18561: PUSH
18562: LD_INT 104
18564: PUSH
18565: LD_INT 105
18567: PUSH
18568: LD_INT 106
18570: PUSH
18571: LD_INT 107
18573: PUSH
18574: LD_INT 108
18576: PUSH
18577: LD_INT 109
18579: PUSH
18580: LD_INT 110
18582: PUSH
18583: LD_INT 111
18585: PUSH
18586: LD_INT 112
18588: PUSH
18589: LD_INT 113
18591: PUSH
18592: LD_INT 114
18594: PUSH
18595: LD_INT 116
18597: PUSH
18598: LD_INT 117
18600: PUSH
18601: LD_INT 118
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: ST_TO_ADDR
18627: GO 19634
18629: LD_INT 15
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18861
18637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18638: LD_ADDR_VAR 0 1
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 4
18654: PUSH
18655: LD_INT 5
18657: PUSH
18658: LD_INT 6
18660: PUSH
18661: LD_INT 7
18663: PUSH
18664: LD_INT 8
18666: PUSH
18667: LD_INT 9
18669: PUSH
18670: LD_INT 10
18672: PUSH
18673: LD_INT 11
18675: PUSH
18676: LD_INT 12
18678: PUSH
18679: LD_INT 13
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: LD_INT 15
18687: PUSH
18688: LD_INT 16
18690: PUSH
18691: LD_INT 17
18693: PUSH
18694: LD_INT 18
18696: PUSH
18697: LD_INT 19
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 23
18711: PUSH
18712: LD_INT 24
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 26
18720: PUSH
18721: LD_INT 27
18723: PUSH
18724: LD_INT 28
18726: PUSH
18727: LD_INT 29
18729: PUSH
18730: LD_INT 30
18732: PUSH
18733: LD_INT 31
18735: PUSH
18736: LD_INT 32
18738: PUSH
18739: LD_INT 33
18741: PUSH
18742: LD_INT 34
18744: PUSH
18745: LD_INT 36
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 101
18787: PUSH
18788: LD_INT 102
18790: PUSH
18791: LD_INT 103
18793: PUSH
18794: LD_INT 104
18796: PUSH
18797: LD_INT 105
18799: PUSH
18800: LD_INT 106
18802: PUSH
18803: LD_INT 107
18805: PUSH
18806: LD_INT 108
18808: PUSH
18809: LD_INT 109
18811: PUSH
18812: LD_INT 110
18814: PUSH
18815: LD_INT 111
18817: PUSH
18818: LD_INT 112
18820: PUSH
18821: LD_INT 113
18823: PUSH
18824: LD_INT 114
18826: PUSH
18827: LD_INT 116
18829: PUSH
18830: LD_INT 117
18832: PUSH
18833: LD_INT 118
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: ST_TO_ADDR
18859: GO 19634
18861: LD_INT 16
18863: DOUBLE
18864: EQUAL
18865: IFTRUE 18869
18867: GO 19005
18869: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18870: LD_ADDR_VAR 0 1
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 4
18880: PUSH
18881: LD_INT 5
18883: PUSH
18884: LD_INT 7
18886: PUSH
18887: LD_INT 11
18889: PUSH
18890: LD_INT 12
18892: PUSH
18893: LD_INT 15
18895: PUSH
18896: LD_INT 16
18898: PUSH
18899: LD_INT 20
18901: PUSH
18902: LD_INT 21
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_INT 23
18910: PUSH
18911: LD_INT 25
18913: PUSH
18914: LD_INT 26
18916: PUSH
18917: LD_INT 30
18919: PUSH
18920: LD_INT 31
18922: PUSH
18923: LD_INT 32
18925: PUSH
18926: LD_INT 33
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 101
18955: PUSH
18956: LD_INT 102
18958: PUSH
18959: LD_INT 103
18961: PUSH
18962: LD_INT 106
18964: PUSH
18965: LD_INT 108
18967: PUSH
18968: LD_INT 112
18970: PUSH
18971: LD_INT 113
18973: PUSH
18974: LD_INT 114
18976: PUSH
18977: LD_INT 116
18979: PUSH
18980: LD_INT 117
18982: PUSH
18983: LD_INT 118
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19634
19005: LD_INT 17
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19237
19013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19014: LD_ADDR_VAR 0 1
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 2
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: LD_INT 4
19030: PUSH
19031: LD_INT 5
19033: PUSH
19034: LD_INT 6
19036: PUSH
19037: LD_INT 7
19039: PUSH
19040: LD_INT 8
19042: PUSH
19043: LD_INT 9
19045: PUSH
19046: LD_INT 10
19048: PUSH
19049: LD_INT 11
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: LD_INT 13
19057: PUSH
19058: LD_INT 14
19060: PUSH
19061: LD_INT 15
19063: PUSH
19064: LD_INT 16
19066: PUSH
19067: LD_INT 17
19069: PUSH
19070: LD_INT 18
19072: PUSH
19073: LD_INT 19
19075: PUSH
19076: LD_INT 20
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_INT 23
19087: PUSH
19088: LD_INT 24
19090: PUSH
19091: LD_INT 25
19093: PUSH
19094: LD_INT 26
19096: PUSH
19097: LD_INT 27
19099: PUSH
19100: LD_INT 28
19102: PUSH
19103: LD_INT 29
19105: PUSH
19106: LD_INT 30
19108: PUSH
19109: LD_INT 31
19111: PUSH
19112: LD_INT 32
19114: PUSH
19115: LD_INT 33
19117: PUSH
19118: LD_INT 34
19120: PUSH
19121: LD_INT 36
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 101
19163: PUSH
19164: LD_INT 102
19166: PUSH
19167: LD_INT 103
19169: PUSH
19170: LD_INT 104
19172: PUSH
19173: LD_INT 105
19175: PUSH
19176: LD_INT 106
19178: PUSH
19179: LD_INT 107
19181: PUSH
19182: LD_INT 108
19184: PUSH
19185: LD_INT 109
19187: PUSH
19188: LD_INT 110
19190: PUSH
19191: LD_INT 111
19193: PUSH
19194: LD_INT 112
19196: PUSH
19197: LD_INT 113
19199: PUSH
19200: LD_INT 114
19202: PUSH
19203: LD_INT 116
19205: PUSH
19206: LD_INT 117
19208: PUSH
19209: LD_INT 118
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: ST_TO_ADDR
19235: GO 19634
19237: LD_INT 18
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19393
19245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19246: LD_ADDR_VAR 0 1
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: LD_INT 5
19259: PUSH
19260: LD_INT 7
19262: PUSH
19263: LD_INT 11
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: LD_INT 15
19271: PUSH
19272: LD_INT 16
19274: PUSH
19275: LD_INT 20
19277: PUSH
19278: LD_INT 21
19280: PUSH
19281: LD_INT 22
19283: PUSH
19284: LD_INT 23
19286: PUSH
19287: LD_INT 25
19289: PUSH
19290: LD_INT 26
19292: PUSH
19293: LD_INT 30
19295: PUSH
19296: LD_INT 31
19298: PUSH
19299: LD_INT 32
19301: PUSH
19302: LD_INT 33
19304: PUSH
19305: LD_INT 34
19307: PUSH
19308: LD_INT 35
19310: PUSH
19311: LD_INT 36
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 101
19339: PUSH
19340: LD_INT 102
19342: PUSH
19343: LD_INT 103
19345: PUSH
19346: LD_INT 106
19348: PUSH
19349: LD_INT 108
19351: PUSH
19352: LD_INT 112
19354: PUSH
19355: LD_INT 113
19357: PUSH
19358: LD_INT 114
19360: PUSH
19361: LD_INT 115
19363: PUSH
19364: LD_INT 116
19366: PUSH
19367: LD_INT 117
19369: PUSH
19370: LD_INT 118
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ST_TO_ADDR
19391: GO 19634
19393: LD_INT 19
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19633
19401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19402: LD_ADDR_VAR 0 1
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 3
19415: PUSH
19416: LD_INT 4
19418: PUSH
19419: LD_INT 5
19421: PUSH
19422: LD_INT 6
19424: PUSH
19425: LD_INT 7
19427: PUSH
19428: LD_INT 8
19430: PUSH
19431: LD_INT 9
19433: PUSH
19434: LD_INT 10
19436: PUSH
19437: LD_INT 11
19439: PUSH
19440: LD_INT 12
19442: PUSH
19443: LD_INT 13
19445: PUSH
19446: LD_INT 14
19448: PUSH
19449: LD_INT 15
19451: PUSH
19452: LD_INT 16
19454: PUSH
19455: LD_INT 17
19457: PUSH
19458: LD_INT 18
19460: PUSH
19461: LD_INT 19
19463: PUSH
19464: LD_INT 20
19466: PUSH
19467: LD_INT 21
19469: PUSH
19470: LD_INT 22
19472: PUSH
19473: LD_INT 23
19475: PUSH
19476: LD_INT 24
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 26
19484: PUSH
19485: LD_INT 27
19487: PUSH
19488: LD_INT 28
19490: PUSH
19491: LD_INT 29
19493: PUSH
19494: LD_INT 30
19496: PUSH
19497: LD_INT 31
19499: PUSH
19500: LD_INT 32
19502: PUSH
19503: LD_INT 33
19505: PUSH
19506: LD_INT 34
19508: PUSH
19509: LD_INT 35
19511: PUSH
19512: LD_INT 36
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 101
19555: PUSH
19556: LD_INT 102
19558: PUSH
19559: LD_INT 103
19561: PUSH
19562: LD_INT 104
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 107
19573: PUSH
19574: LD_INT 108
19576: PUSH
19577: LD_INT 109
19579: PUSH
19580: LD_INT 110
19582: PUSH
19583: LD_INT 111
19585: PUSH
19586: LD_INT 112
19588: PUSH
19589: LD_INT 113
19591: PUSH
19592: LD_INT 114
19594: PUSH
19595: LD_INT 115
19597: PUSH
19598: LD_INT 116
19600: PUSH
19601: LD_INT 117
19603: PUSH
19604: LD_INT 118
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: ST_TO_ADDR
19631: GO 19634
19633: POP
// end else
19634: GO 19865
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19636: LD_ADDR_VAR 0 1
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 3
19649: PUSH
19650: LD_INT 4
19652: PUSH
19653: LD_INT 5
19655: PUSH
19656: LD_INT 6
19658: PUSH
19659: LD_INT 7
19661: PUSH
19662: LD_INT 8
19664: PUSH
19665: LD_INT 9
19667: PUSH
19668: LD_INT 10
19670: PUSH
19671: LD_INT 11
19673: PUSH
19674: LD_INT 12
19676: PUSH
19677: LD_INT 13
19679: PUSH
19680: LD_INT 14
19682: PUSH
19683: LD_INT 15
19685: PUSH
19686: LD_INT 16
19688: PUSH
19689: LD_INT 17
19691: PUSH
19692: LD_INT 18
19694: PUSH
19695: LD_INT 19
19697: PUSH
19698: LD_INT 20
19700: PUSH
19701: LD_INT 21
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_INT 23
19709: PUSH
19710: LD_INT 24
19712: PUSH
19713: LD_INT 25
19715: PUSH
19716: LD_INT 26
19718: PUSH
19719: LD_INT 27
19721: PUSH
19722: LD_INT 28
19724: PUSH
19725: LD_INT 29
19727: PUSH
19728: LD_INT 30
19730: PUSH
19731: LD_INT 31
19733: PUSH
19734: LD_INT 32
19736: PUSH
19737: LD_INT 33
19739: PUSH
19740: LD_INT 34
19742: PUSH
19743: LD_INT 35
19745: PUSH
19746: LD_INT 36
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 101
19789: PUSH
19790: LD_INT 102
19792: PUSH
19793: LD_INT 103
19795: PUSH
19796: LD_INT 104
19798: PUSH
19799: LD_INT 105
19801: PUSH
19802: LD_INT 106
19804: PUSH
19805: LD_INT 107
19807: PUSH
19808: LD_INT 108
19810: PUSH
19811: LD_INT 109
19813: PUSH
19814: LD_INT 110
19816: PUSH
19817: LD_INT 111
19819: PUSH
19820: LD_INT 112
19822: PUSH
19823: LD_INT 113
19825: PUSH
19826: LD_INT 114
19828: PUSH
19829: LD_INT 115
19831: PUSH
19832: LD_INT 116
19834: PUSH
19835: LD_INT 117
19837: PUSH
19838: LD_INT 118
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: ST_TO_ADDR
// if result then
19865: LD_VAR 0 1
19869: IFFALSE 20158
// begin normal :=  ;
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_STRING 
19878: ST_TO_ADDR
// hardcore :=  ;
19879: LD_ADDR_VAR 0 4
19883: PUSH
19884: LD_STRING 
19886: ST_TO_ADDR
// for i = 1 to normalCounter do
19887: LD_ADDR_VAR 0 5
19891: PUSH
19892: DOUBLE
19893: LD_INT 1
19895: DEC
19896: ST_TO_ADDR
19897: LD_EXP 61
19901: PUSH
19902: FOR_TO
19903: IFFALSE 20004
// begin tmp := 0 ;
19905: LD_ADDR_VAR 0 2
19909: PUSH
19910: LD_STRING 0
19912: ST_TO_ADDR
// if result [ 1 ] then
19913: LD_VAR 0 1
19917: PUSH
19918: LD_INT 1
19920: ARRAY
19921: IFFALSE 19986
// if result [ 1 ] [ 1 ] = i then
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 1
19930: ARRAY
19931: PUSH
19932: LD_INT 1
19934: ARRAY
19935: PUSH
19936: LD_VAR 0 5
19940: EQUAL
19941: IFFALSE 19986
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19943: LD_ADDR_VAR 0 1
19947: PUSH
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_INT 1
19955: PPUSH
19956: LD_VAR 0 1
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 3
19972: PPUSH
19973: CALL_OW 1
19977: ST_TO_ADDR
// tmp := 1 ;
19978: LD_ADDR_VAR 0 2
19982: PUSH
19983: LD_STRING 1
19985: ST_TO_ADDR
// end ; normal := normal & tmp ;
19986: LD_ADDR_VAR 0 3
19990: PUSH
19991: LD_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: STR
20001: ST_TO_ADDR
// end ;
20002: GO 19902
20004: POP
20005: POP
// for i = 1 to hardcoreCounter do
20006: LD_ADDR_VAR 0 5
20010: PUSH
20011: DOUBLE
20012: LD_INT 1
20014: DEC
20015: ST_TO_ADDR
20016: LD_EXP 62
20020: PUSH
20021: FOR_TO
20022: IFFALSE 20127
// begin tmp := 0 ;
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_STRING 0
20031: ST_TO_ADDR
// if result [ 2 ] then
20032: LD_VAR 0 1
20036: PUSH
20037: LD_INT 2
20039: ARRAY
20040: IFFALSE 20109
// if result [ 2 ] [ 1 ] = 100 + i then
20042: LD_VAR 0 1
20046: PUSH
20047: LD_INT 2
20049: ARRAY
20050: PUSH
20051: LD_INT 1
20053: ARRAY
20054: PUSH
20055: LD_INT 100
20057: PUSH
20058: LD_VAR 0 5
20062: PLUS
20063: EQUAL
20064: IFFALSE 20109
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20066: LD_ADDR_VAR 0 1
20070: PUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_INT 2
20078: PPUSH
20079: LD_VAR 0 1
20083: PUSH
20084: LD_INT 2
20086: ARRAY
20087: PPUSH
20088: LD_INT 1
20090: PPUSH
20091: CALL_OW 3
20095: PPUSH
20096: CALL_OW 1
20100: ST_TO_ADDR
// tmp := 1 ;
20101: LD_ADDR_VAR 0 2
20105: PUSH
20106: LD_STRING 1
20108: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20109: LD_ADDR_VAR 0 4
20113: PUSH
20114: LD_VAR 0 4
20118: PUSH
20119: LD_VAR 0 2
20123: STR
20124: ST_TO_ADDR
// end ;
20125: GO 20021
20127: POP
20128: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20129: LD_STRING getStreamItemsFromMission("
20131: PUSH
20132: LD_VAR 0 3
20136: STR
20137: PUSH
20138: LD_STRING ","
20140: STR
20141: PUSH
20142: LD_VAR 0 4
20146: STR
20147: PUSH
20148: LD_STRING ")
20150: STR
20151: PPUSH
20152: CALL_OW 559
// end else
20156: GO 20165
// ToLua ( getStreamItemsFromMission("","") ) ;
20158: LD_STRING getStreamItemsFromMission("","")
20160: PPUSH
20161: CALL_OW 559
// end ;
20165: LD_VAR 0 1
20169: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20170: LD_EXP 60
20174: PUSH
20175: LD_EXP 65
20179: AND
20180: IFFALSE 20304
20182: GO 20184
20184: DISABLE
20185: LD_INT 0
20187: PPUSH
20188: PPUSH
// begin enable ;
20189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20190: LD_ADDR_VAR 0 2
20194: PUSH
20195: LD_INT 22
20197: PUSH
20198: LD_OWVAR 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 7
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 34
20222: PUSH
20223: LD_INT 45
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 34
20232: PUSH
20233: LD_INT 28
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 34
20242: PUSH
20243: LD_INT 47
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 69
20265: ST_TO_ADDR
// if not tmp then
20266: LD_VAR 0 2
20270: NOT
20271: IFFALSE 20275
// exit ;
20273: GO 20304
// for i in tmp do
20275: LD_ADDR_VAR 0 1
20279: PUSH
20280: LD_VAR 0 2
20284: PUSH
20285: FOR_IN
20286: IFFALSE 20302
// begin SetLives ( i , 0 ) ;
20288: LD_VAR 0 1
20292: PPUSH
20293: LD_INT 0
20295: PPUSH
20296: CALL_OW 234
// end ;
20300: GO 20285
20302: POP
20303: POP
// end ;
20304: PPOPN 2
20306: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20307: LD_EXP 60
20311: PUSH
20312: LD_EXP 66
20316: AND
20317: IFFALSE 20401
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin enable ;
20326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 32
20346: PUSH
20347: LD_INT 3
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: ST_TO_ADDR
// if not tmp then
20363: LD_VAR 0 2
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20401
// for i in tmp do
20372: LD_ADDR_VAR 0 1
20376: PUSH
20377: LD_VAR 0 2
20381: PUSH
20382: FOR_IN
20383: IFFALSE 20399
// begin SetLives ( i , 0 ) ;
20385: LD_VAR 0 1
20389: PPUSH
20390: LD_INT 0
20392: PPUSH
20393: CALL_OW 234
// end ;
20397: GO 20382
20399: POP
20400: POP
// end ;
20401: PPOPN 2
20403: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20404: LD_EXP 60
20408: PUSH
20409: LD_EXP 63
20413: AND
20414: IFFALSE 20507
20416: GO 20418
20418: DISABLE
20419: LD_INT 0
20421: PPUSH
// begin enable ;
20422: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20423: LD_ADDR_VAR 0 1
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_OWVAR 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 5
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 25
20455: PUSH
20456: LD_INT 9
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 25
20465: PUSH
20466: LD_INT 8
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20505
// begin SetClass ( i , 1 ) ;
20491: LD_VAR 0 1
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 336
// end ;
20503: GO 20488
20505: POP
20506: POP
// end ;
20507: PPOPN 1
20509: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20510: LD_EXP 60
20514: PUSH
20515: LD_EXP 64
20519: AND
20520: PUSH
20521: LD_OWVAR 65
20525: PUSH
20526: LD_INT 7
20528: LESS
20529: AND
20530: IFFALSE 20544
20532: GO 20534
20534: DISABLE
// begin enable ;
20535: ENABLE
// game_speed := 7 ;
20536: LD_ADDR_OWVAR 65
20540: PUSH
20541: LD_INT 7
20543: ST_TO_ADDR
// end ;
20544: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20545: LD_EXP 60
20549: PUSH
20550: LD_EXP 67
20554: AND
20555: IFFALSE 20757
20557: GO 20559
20559: DISABLE
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
20564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 81
20572: PUSH
20573: LD_OWVAR 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PPUSH
20596: CALL_OW 69
20600: ST_TO_ADDR
// if not tmp then
20601: LD_VAR 0 3
20605: NOT
20606: IFFALSE 20610
// exit ;
20608: GO 20757
// if tmp > 5 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 5
20617: GREATER
20618: IFFALSE 20630
// k := 5 else
20620: LD_ADDR_VAR 0 2
20624: PUSH
20625: LD_INT 5
20627: ST_TO_ADDR
20628: GO 20640
// k := tmp ;
20630: LD_ADDR_VAR 0 2
20634: PUSH
20635: LD_VAR 0 3
20639: ST_TO_ADDR
// for i := 1 to k do
20640: LD_ADDR_VAR 0 1
20644: PUSH
20645: DOUBLE
20646: LD_INT 1
20648: DEC
20649: ST_TO_ADDR
20650: LD_VAR 0 2
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20755
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20658: LD_VAR 0 3
20662: PUSH
20663: LD_VAR 0 1
20667: ARRAY
20668: PPUSH
20669: LD_VAR 0 1
20673: PUSH
20674: LD_INT 4
20676: MOD
20677: PUSH
20678: LD_INT 1
20680: PLUS
20681: PPUSH
20682: CALL_OW 259
20686: PUSH
20687: LD_INT 10
20689: LESS
20690: IFFALSE 20753
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20692: LD_VAR 0 3
20696: PUSH
20697: LD_VAR 0 1
20701: ARRAY
20702: PPUSH
20703: LD_VAR 0 1
20707: PUSH
20708: LD_INT 4
20710: MOD
20711: PUSH
20712: LD_INT 1
20714: PLUS
20715: PPUSH
20716: LD_VAR 0 3
20720: PUSH
20721: LD_VAR 0 1
20725: ARRAY
20726: PPUSH
20727: LD_VAR 0 1
20731: PUSH
20732: LD_INT 4
20734: MOD
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PPUSH
20740: CALL_OW 259
20744: PUSH
20745: LD_INT 1
20747: PLUS
20748: PPUSH
20749: CALL_OW 237
20753: GO 20655
20755: POP
20756: POP
// end ;
20757: PPOPN 3
20759: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20760: LD_EXP 60
20764: PUSH
20765: LD_EXP 68
20769: AND
20770: IFFALSE 20790
20772: GO 20774
20774: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20775: LD_INT 4
20777: PPUSH
20778: LD_OWVAR 2
20782: PPUSH
20783: LD_INT 0
20785: PPUSH
20786: CALL_OW 324
20790: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20791: LD_EXP 60
20795: PUSH
20796: LD_EXP 97
20800: AND
20801: IFFALSE 20821
20803: GO 20805
20805: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20806: LD_INT 19
20808: PPUSH
20809: LD_OWVAR 2
20813: PPUSH
20814: LD_INT 0
20816: PPUSH
20817: CALL_OW 324
20821: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20822: LD_EXP 60
20826: PUSH
20827: LD_EXP 69
20831: AND
20832: IFFALSE 20934
20834: GO 20836
20836: DISABLE
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
// begin enable ;
20841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20842: LD_ADDR_VAR 0 2
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_OWVAR 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 34
20864: PUSH
20865: LD_INT 11
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 34
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: ST_TO_ADDR
// if not tmp then
20896: LD_VAR 0 2
20900: NOT
20901: IFFALSE 20905
// exit ;
20903: GO 20934
// for i in tmp do
20905: LD_ADDR_VAR 0 1
20909: PUSH
20910: LD_VAR 0 2
20914: PUSH
20915: FOR_IN
20916: IFFALSE 20932
// begin SetLives ( i , 0 ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_INT 0
20925: PPUSH
20926: CALL_OW 234
// end ;
20930: GO 20915
20932: POP
20933: POP
// end ;
20934: PPOPN 2
20936: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20937: LD_EXP 60
20941: PUSH
20942: LD_EXP 70
20946: AND
20947: IFFALSE 20967
20949: GO 20951
20951: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20952: LD_INT 32
20954: PPUSH
20955: LD_OWVAR 2
20959: PPUSH
20960: LD_INT 0
20962: PPUSH
20963: CALL_OW 324
20967: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20968: LD_EXP 60
20972: PUSH
20973: LD_EXP 71
20977: AND
20978: IFFALSE 21159
20980: GO 20982
20982: DISABLE
20983: LD_INT 0
20985: PPUSH
20986: PPUSH
20987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20988: LD_ADDR_VAR 0 2
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_OWVAR 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 33
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// if not tmp then
21024: LD_VAR 0 2
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21159
// side := 0 ;
21033: LD_ADDR_VAR 0 3
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// for i := 1 to 8 do
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: DOUBLE
21047: LD_INT 1
21049: DEC
21050: ST_TO_ADDR
21051: LD_INT 8
21053: PUSH
21054: FOR_TO
21055: IFFALSE 21103
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21057: LD_OWVAR 2
21061: PUSH
21062: LD_VAR 0 1
21066: NONEQUAL
21067: PUSH
21068: LD_OWVAR 2
21072: PPUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 81
21082: PUSH
21083: LD_INT 2
21085: EQUAL
21086: AND
21087: IFFALSE 21101
// begin side := i ;
21089: LD_ADDR_VAR 0 3
21093: PUSH
21094: LD_VAR 0 1
21098: ST_TO_ADDR
// break ;
21099: GO 21103
// end ;
21101: GO 21054
21103: POP
21104: POP
// if not side then
21105: LD_VAR 0 3
21109: NOT
21110: IFFALSE 21114
// exit ;
21112: GO 21159
// for i := 1 to tmp do
21114: LD_ADDR_VAR 0 1
21118: PUSH
21119: DOUBLE
21120: LD_INT 1
21122: DEC
21123: ST_TO_ADDR
21124: LD_VAR 0 2
21128: PUSH
21129: FOR_TO
21130: IFFALSE 21157
// if Prob ( 60 ) then
21132: LD_INT 60
21134: PPUSH
21135: CALL_OW 13
21139: IFFALSE 21155
// SetSide ( i , side ) ;
21141: LD_VAR 0 1
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: CALL_OW 235
21155: GO 21129
21157: POP
21158: POP
// end ;
21159: PPOPN 3
21161: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21162: LD_EXP 60
21166: PUSH
21167: LD_EXP 73
21171: AND
21172: IFFALSE 21291
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21180: LD_ADDR_VAR 0 1
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_OWVAR 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 21
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 23
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: PPUSH
21229: CALL_OW 69
21233: PUSH
21234: FOR_IN
21235: IFFALSE 21289
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 257
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 3
21255: PUSH
21256: LD_INT 4
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: IN
21265: IFFALSE 21287
// SetClass ( un , rand ( 1 , 4 ) ) ;
21267: LD_VAR 0 1
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: LD_INT 4
21277: PPUSH
21278: CALL_OW 12
21282: PPUSH
21283: CALL_OW 336
21287: GO 21234
21289: POP
21290: POP
// end ;
21291: PPOPN 1
21293: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21294: LD_EXP 60
21298: PUSH
21299: LD_EXP 72
21303: AND
21304: IFFALSE 21383
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_INT 22
21319: PUSH
21320: LD_OWVAR 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 21
21331: PUSH
21332: LD_INT 3
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 1
21352: NOT
21353: IFFALSE 21357
// exit ;
21355: GO 21383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21357: LD_VAR 0 1
21361: PUSH
21362: LD_INT 1
21364: PPUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 12
21374: ARRAY
21375: PPUSH
21376: LD_INT 100
21378: PPUSH
21379: CALL_OW 234
// end ;
21383: PPOPN 1
21385: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21386: LD_EXP 60
21390: PUSH
21391: LD_EXP 74
21395: AND
21396: IFFALSE 21494
21398: GO 21400
21400: DISABLE
21401: LD_INT 0
21403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21404: LD_ADDR_VAR 0 1
21408: PUSH
21409: LD_INT 22
21411: PUSH
21412: LD_OWVAR 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 21
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PPUSH
21435: CALL_OW 69
21439: ST_TO_ADDR
// if not tmp then
21440: LD_VAR 0 1
21444: NOT
21445: IFFALSE 21449
// exit ;
21447: GO 21494
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21449: LD_VAR 0 1
21453: PUSH
21454: LD_INT 1
21456: PPUSH
21457: LD_VAR 0 1
21461: PPUSH
21462: CALL_OW 12
21466: ARRAY
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: LD_INT 4
21473: PPUSH
21474: CALL_OW 12
21478: PPUSH
21479: LD_INT 3000
21481: PPUSH
21482: LD_INT 9000
21484: PPUSH
21485: CALL_OW 12
21489: PPUSH
21490: CALL_OW 492
// end ;
21494: PPOPN 1
21496: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21497: LD_EXP 60
21501: PUSH
21502: LD_EXP 75
21506: AND
21507: IFFALSE 21527
21509: GO 21511
21511: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21512: LD_INT 1
21514: PPUSH
21515: LD_OWVAR 2
21519: PPUSH
21520: LD_INT 0
21522: PPUSH
21523: CALL_OW 324
21527: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21528: LD_EXP 60
21532: PUSH
21533: LD_EXP 76
21537: AND
21538: IFFALSE 21621
21540: GO 21542
21542: DISABLE
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_OWVAR 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 3
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 69
21582: ST_TO_ADDR
// if not tmp then
21583: LD_VAR 0 2
21587: NOT
21588: IFFALSE 21592
// exit ;
21590: GO 21621
// for i in tmp do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_VAR 0 2
21601: PUSH
21602: FOR_IN
21603: IFFALSE 21619
// SetBLevel ( i , 10 ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: LD_INT 10
21612: PPUSH
21613: CALL_OW 241
21617: GO 21602
21619: POP
21620: POP
// end ;
21621: PPOPN 2
21623: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21624: LD_EXP 60
21628: PUSH
21629: LD_EXP 77
21633: AND
21634: IFFALSE 21745
21636: GO 21638
21638: DISABLE
21639: LD_INT 0
21641: PPUSH
21642: PPUSH
21643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21644: LD_ADDR_VAR 0 3
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_OWVAR 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 25
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PPUSH
21675: CALL_OW 69
21679: ST_TO_ADDR
// if not tmp then
21680: LD_VAR 0 3
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21745
// un := tmp [ rand ( 1 , tmp ) ] ;
21689: LD_ADDR_VAR 0 2
21693: PUSH
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 1
21701: PPUSH
21702: LD_VAR 0 3
21706: PPUSH
21707: CALL_OW 12
21711: ARRAY
21712: ST_TO_ADDR
// if Crawls ( un ) then
21713: LD_VAR 0 2
21717: PPUSH
21718: CALL_OW 318
21722: IFFALSE 21733
// ComWalk ( un ) ;
21724: LD_VAR 0 2
21728: PPUSH
21729: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21733: LD_VAR 0 2
21737: PPUSH
21738: LD_INT 5
21740: PPUSH
21741: CALL_OW 336
// end ;
21745: PPOPN 3
21747: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21748: LD_EXP 60
21752: PUSH
21753: LD_EXP 78
21757: AND
21758: PUSH
21759: LD_OWVAR 67
21763: PUSH
21764: LD_INT 4
21766: LESS
21767: AND
21768: IFFALSE 21787
21770: GO 21772
21772: DISABLE
// begin Difficulty := Difficulty + 1 ;
21773: LD_ADDR_OWVAR 67
21777: PUSH
21778: LD_OWVAR 67
21782: PUSH
21783: LD_INT 1
21785: PLUS
21786: ST_TO_ADDR
// end ;
21787: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21788: LD_EXP 60
21792: PUSH
21793: LD_EXP 79
21797: AND
21798: IFFALSE 21901
21800: GO 21802
21802: DISABLE
21803: LD_INT 0
21805: PPUSH
// begin for i := 1 to 5 do
21806: LD_ADDR_VAR 0 1
21810: PUSH
21811: DOUBLE
21812: LD_INT 1
21814: DEC
21815: ST_TO_ADDR
21816: LD_INT 5
21818: PUSH
21819: FOR_TO
21820: IFFALSE 21899
// begin uc_nation := nation_nature ;
21822: LD_ADDR_OWVAR 21
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// uc_side := 0 ;
21830: LD_ADDR_OWVAR 20
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21838: LD_ADDR_OWVAR 29
21842: PUSH
21843: LD_INT 12
21845: PUSH
21846: LD_INT 12
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: ST_TO_ADDR
// hc_agressivity := 20 ;
21853: LD_ADDR_OWVAR 35
21857: PUSH
21858: LD_INT 20
21860: ST_TO_ADDR
// hc_class := class_tiger ;
21861: LD_ADDR_OWVAR 28
21865: PUSH
21866: LD_INT 14
21868: ST_TO_ADDR
// hc_gallery :=  ;
21869: LD_ADDR_OWVAR 33
21873: PUSH
21874: LD_STRING 
21876: ST_TO_ADDR
// hc_name :=  ;
21877: LD_ADDR_OWVAR 26
21881: PUSH
21882: LD_STRING 
21884: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21885: CALL_OW 44
21889: PPUSH
21890: LD_INT 0
21892: PPUSH
21893: CALL_OW 51
// end ;
21897: GO 21819
21899: POP
21900: POP
// end ;
21901: PPOPN 1
21903: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21904: LD_EXP 60
21908: PUSH
21909: LD_EXP 80
21913: AND
21914: IFFALSE 21923
21916: GO 21918
21918: DISABLE
// StreamSibBomb ;
21919: CALL 21924 0 0
21923: END
// export function StreamSibBomb ; var i , x , y ; begin
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
// result := false ;
21930: LD_ADDR_VAR 0 1
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// for i := 1 to 16 do
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: DOUBLE
21944: LD_INT 1
21946: DEC
21947: ST_TO_ADDR
21948: LD_INT 16
21950: PUSH
21951: FOR_TO
21952: IFFALSE 22151
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21954: LD_ADDR_VAR 0 3
21958: PUSH
21959: LD_INT 10
21961: PUSH
21962: LD_INT 20
21964: PUSH
21965: LD_INT 30
21967: PUSH
21968: LD_INT 40
21970: PUSH
21971: LD_INT 50
21973: PUSH
21974: LD_INT 60
21976: PUSH
21977: LD_INT 70
21979: PUSH
21980: LD_INT 80
21982: PUSH
21983: LD_INT 90
21985: PUSH
21986: LD_INT 100
21988: PUSH
21989: LD_INT 110
21991: PUSH
21992: LD_INT 120
21994: PUSH
21995: LD_INT 130
21997: PUSH
21998: LD_INT 140
22000: PUSH
22001: LD_INT 150
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PPUSH
22024: LD_INT 15
22026: PPUSH
22027: CALL_OW 12
22031: ARRAY
22032: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22033: LD_ADDR_VAR 0 4
22037: PUSH
22038: LD_INT 10
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: LD_INT 40
22049: PUSH
22050: LD_INT 50
22052: PUSH
22053: LD_INT 60
22055: PUSH
22056: LD_INT 70
22058: PUSH
22059: LD_INT 80
22061: PUSH
22062: LD_INT 90
22064: PUSH
22065: LD_INT 100
22067: PUSH
22068: LD_INT 110
22070: PUSH
22071: LD_INT 120
22073: PUSH
22074: LD_INT 130
22076: PUSH
22077: LD_INT 140
22079: PUSH
22080: LD_INT 150
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PPUSH
22103: LD_INT 15
22105: PPUSH
22106: CALL_OW 12
22110: ARRAY
22111: ST_TO_ADDR
// if ValidHex ( x , y ) then
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_VAR 0 4
22121: PPUSH
22122: CALL_OW 488
22126: IFFALSE 22149
// begin result := [ x , y ] ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 3
22137: PUSH
22138: LD_VAR 0 4
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: ST_TO_ADDR
// break ;
22147: GO 22151
// end ; end ;
22149: GO 21951
22151: POP
22152: POP
// if result then
22153: LD_VAR 0 1
22157: IFFALSE 22217
// begin ToLua ( playSibBomb() ) ;
22159: LD_STRING playSibBomb()
22161: PPUSH
22162: CALL_OW 559
// wait ( 0 0$14 ) ;
22166: LD_INT 490
22168: PPUSH
22169: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22173: LD_VAR 0 1
22177: PUSH
22178: LD_INT 1
22180: ARRAY
22181: PPUSH
22182: LD_VAR 0 1
22186: PUSH
22187: LD_INT 2
22189: ARRAY
22190: PPUSH
22191: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22195: LD_VAR 0 1
22199: PUSH
22200: LD_INT 1
22202: ARRAY
22203: PPUSH
22204: LD_VAR 0 1
22208: PUSH
22209: LD_INT 2
22211: ARRAY
22212: PPUSH
22213: CALL_OW 429
// end ; end ;
22217: LD_VAR 0 1
22221: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22222: LD_EXP 60
22226: PUSH
22227: LD_EXP 82
22231: AND
22232: IFFALSE 22244
22234: GO 22236
22236: DISABLE
// YouLost (  ) ;
22237: LD_STRING 
22239: PPUSH
22240: CALL_OW 104
22244: END
// every 0 0$1 trigger StreamModeActive and sFog do
22245: LD_EXP 60
22249: PUSH
22250: LD_EXP 81
22254: AND
22255: IFFALSE 22269
22257: GO 22259
22259: DISABLE
// FogOff ( your_side ) ;
22260: LD_OWVAR 2
22264: PPUSH
22265: CALL_OW 344
22269: END
// every 0 0$1 trigger StreamModeActive and sSun do
22270: LD_EXP 60
22274: PUSH
22275: LD_EXP 83
22279: AND
22280: IFFALSE 22308
22282: GO 22284
22284: DISABLE
// begin solar_recharge_percent := 0 ;
22285: LD_ADDR_OWVAR 79
22289: PUSH
22290: LD_INT 0
22292: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22293: LD_INT 10500
22295: PPUSH
22296: CALL_OW 67
// solar_recharge_percent := 100 ;
22300: LD_ADDR_OWVAR 79
22304: PUSH
22305: LD_INT 100
22307: ST_TO_ADDR
// end ;
22308: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22309: LD_EXP 60
22313: PUSH
22314: LD_EXP 84
22318: AND
22319: IFFALSE 22558
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
22328: PPUSH
// begin tmp := [ ] ;
22329: LD_ADDR_VAR 0 3
22333: PUSH
22334: EMPTY
22335: ST_TO_ADDR
// for i := 1 to 6 do
22336: LD_ADDR_VAR 0 1
22340: PUSH
22341: DOUBLE
22342: LD_INT 1
22344: DEC
22345: ST_TO_ADDR
22346: LD_INT 6
22348: PUSH
22349: FOR_TO
22350: IFFALSE 22455
// begin uc_nation := nation_nature ;
22352: LD_ADDR_OWVAR 21
22356: PUSH
22357: LD_INT 0
22359: ST_TO_ADDR
// uc_side := 0 ;
22360: LD_ADDR_OWVAR 20
22364: PUSH
22365: LD_INT 0
22367: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22368: LD_ADDR_OWVAR 29
22372: PUSH
22373: LD_INT 12
22375: PUSH
22376: LD_INT 12
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: ST_TO_ADDR
// hc_agressivity := 20 ;
22383: LD_ADDR_OWVAR 35
22387: PUSH
22388: LD_INT 20
22390: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22391: LD_ADDR_OWVAR 28
22395: PUSH
22396: LD_INT 17
22398: ST_TO_ADDR
// hc_gallery :=  ;
22399: LD_ADDR_OWVAR 33
22403: PUSH
22404: LD_STRING 
22406: ST_TO_ADDR
// hc_name :=  ;
22407: LD_ADDR_OWVAR 26
22411: PUSH
22412: LD_STRING 
22414: ST_TO_ADDR
// un := CreateHuman ;
22415: LD_ADDR_VAR 0 2
22419: PUSH
22420: CALL_OW 44
22424: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22425: LD_VAR 0 2
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 51
// tmp := tmp ^ un ;
22437: LD_ADDR_VAR 0 3
22441: PUSH
22442: LD_VAR 0 3
22446: PUSH
22447: LD_VAR 0 2
22451: ADD
22452: ST_TO_ADDR
// end ;
22453: GO 22349
22455: POP
22456: POP
// repeat wait ( 0 0$1 ) ;
22457: LD_INT 35
22459: PPUSH
22460: CALL_OW 67
// for un in tmp do
22464: LD_ADDR_VAR 0 2
22468: PUSH
22469: LD_VAR 0 3
22473: PUSH
22474: FOR_IN
22475: IFFALSE 22549
// begin if IsDead ( un ) then
22477: LD_VAR 0 2
22481: PPUSH
22482: CALL_OW 301
22486: IFFALSE 22506
// begin tmp := tmp diff un ;
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_VAR 0 3
22497: PUSH
22498: LD_VAR 0 2
22502: DIFF
22503: ST_TO_ADDR
// continue ;
22504: GO 22474
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22506: LD_VAR 0 2
22510: PPUSH
22511: LD_INT 3
22513: PUSH
22514: LD_INT 22
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PPUSH
22528: CALL_OW 69
22532: PPUSH
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 74
22542: PPUSH
22543: CALL_OW 115
// end ;
22547: GO 22474
22549: POP
22550: POP
// until not tmp ;
22551: LD_VAR 0 3
22555: NOT
22556: IFFALSE 22457
// end ;
22558: PPOPN 3
22560: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22561: LD_EXP 60
22565: PUSH
22566: LD_EXP 85
22570: AND
22571: IFFALSE 22625
22573: GO 22575
22575: DISABLE
// begin ToLua ( displayTroll(); ) ;
22576: LD_STRING displayTroll();
22578: PPUSH
22579: CALL_OW 559
// wait ( 3 3$00 ) ;
22583: LD_INT 6300
22585: PPUSH
22586: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22590: LD_STRING hideTroll();
22592: PPUSH
22593: CALL_OW 559
// wait ( 1 1$00 ) ;
22597: LD_INT 2100
22599: PPUSH
22600: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22604: LD_STRING displayTroll();
22606: PPUSH
22607: CALL_OW 559
// wait ( 1 1$00 ) ;
22611: LD_INT 2100
22613: PPUSH
22614: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22618: LD_STRING hideTroll();
22620: PPUSH
22621: CALL_OW 559
// end ;
22625: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22626: LD_EXP 60
22630: PUSH
22631: LD_EXP 86
22635: AND
22636: IFFALSE 22699
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin p := 0 ;
22644: LD_ADDR_VAR 0 1
22648: PUSH
22649: LD_INT 0
22651: ST_TO_ADDR
// repeat game_speed := 1 ;
22652: LD_ADDR_OWVAR 65
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22660: LD_INT 35
22662: PPUSH
22663: CALL_OW 67
// p := p + 1 ;
22667: LD_ADDR_VAR 0 1
22671: PUSH
22672: LD_VAR 0 1
22676: PUSH
22677: LD_INT 1
22679: PLUS
22680: ST_TO_ADDR
// until p >= 60 ;
22681: LD_VAR 0 1
22685: PUSH
22686: LD_INT 60
22688: GREATEREQUAL
22689: IFFALSE 22652
// game_speed := 4 ;
22691: LD_ADDR_OWVAR 65
22695: PUSH
22696: LD_INT 4
22698: ST_TO_ADDR
// end ;
22699: PPOPN 1
22701: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22702: LD_EXP 60
22706: PUSH
22707: LD_EXP 87
22711: AND
22712: IFFALSE 22858
22714: GO 22716
22716: DISABLE
22717: LD_INT 0
22719: PPUSH
22720: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22721: LD_ADDR_VAR 0 1
22725: PUSH
22726: LD_INT 22
22728: PUSH
22729: LD_OWVAR 2
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 30
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: ST_TO_ADDR
// if not depot then
22775: LD_VAR 0 1
22779: NOT
22780: IFFALSE 22784
// exit ;
22782: GO 22858
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_VAR 0 1
22793: PUSH
22794: LD_INT 1
22796: PPUSH
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 12
22806: ARRAY
22807: PPUSH
22808: CALL_OW 274
22812: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22813: LD_VAR 0 2
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: LD_INT 0
22823: PPUSH
22824: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22828: LD_VAR 0 2
22832: PPUSH
22833: LD_INT 2
22835: PPUSH
22836: LD_INT 0
22838: PPUSH
22839: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22843: LD_VAR 0 2
22847: PPUSH
22848: LD_INT 3
22850: PPUSH
22851: LD_INT 0
22853: PPUSH
22854: CALL_OW 277
// end ;
22858: PPOPN 2
22860: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22861: LD_EXP 60
22865: PUSH
22866: LD_EXP 88
22870: AND
22871: IFFALSE 22968
22873: GO 22875
22875: DISABLE
22876: LD_INT 0
22878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22879: LD_ADDR_VAR 0 1
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_OWVAR 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 21
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 23
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: ST_TO_ADDR
// if not tmp then
22933: LD_VAR 0 1
22937: NOT
22938: IFFALSE 22942
// exit ;
22940: GO 22968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22942: LD_VAR 0 1
22946: PUSH
22947: LD_INT 1
22949: PPUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 12
22959: ARRAY
22960: PPUSH
22961: LD_INT 200
22963: PPUSH
22964: CALL_OW 234
// end ;
22968: PPOPN 1
22970: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22971: LD_EXP 60
22975: PUSH
22976: LD_EXP 89
22980: AND
22981: IFFALSE 23060
22983: GO 22985
22985: DISABLE
22986: LD_INT 0
22988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22989: LD_ADDR_VAR 0 1
22993: PUSH
22994: LD_INT 22
22996: PUSH
22997: LD_OWVAR 2
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PPUSH
23020: CALL_OW 69
23024: ST_TO_ADDR
// if not tmp then
23025: LD_VAR 0 1
23029: NOT
23030: IFFALSE 23034
// exit ;
23032: GO 23060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23034: LD_VAR 0 1
23038: PUSH
23039: LD_INT 1
23041: PPUSH
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 12
23051: ARRAY
23052: PPUSH
23053: LD_INT 60
23055: PPUSH
23056: CALL_OW 234
// end ;
23060: PPOPN 1
23062: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23063: LD_EXP 60
23067: PUSH
23068: LD_EXP 90
23072: AND
23073: IFFALSE 23172
23075: GO 23077
23077: DISABLE
23078: LD_INT 0
23080: PPUSH
23081: PPUSH
// begin enable ;
23082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23083: LD_ADDR_VAR 0 1
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_OWVAR 2
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 61
23102: PUSH
23103: EMPTY
23104: LIST
23105: PUSH
23106: LD_INT 33
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: PPUSH
23121: CALL_OW 69
23125: ST_TO_ADDR
// if not tmp then
23126: LD_VAR 0 1
23130: NOT
23131: IFFALSE 23135
// exit ;
23133: GO 23172
// for i in tmp do
23135: LD_ADDR_VAR 0 2
23139: PUSH
23140: LD_VAR 0 1
23144: PUSH
23145: FOR_IN
23146: IFFALSE 23170
// if IsControledBy ( i ) then
23148: LD_VAR 0 2
23152: PPUSH
23153: CALL_OW 312
23157: IFFALSE 23168
// ComUnlink ( i ) ;
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 136
23168: GO 23145
23170: POP
23171: POP
// end ;
23172: PPOPN 2
23174: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23175: LD_EXP 60
23179: PUSH
23180: LD_EXP 91
23184: AND
23185: IFFALSE 23325
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
// begin ToLua ( displayPowell(); ) ;
23194: LD_STRING displayPowell();
23196: PPUSH
23197: CALL_OW 559
// uc_side := 0 ;
23201: LD_ADDR_OWVAR 20
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
// uc_nation := 2 ;
23209: LD_ADDR_OWVAR 21
23213: PUSH
23214: LD_INT 2
23216: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23217: LD_ADDR_OWVAR 37
23221: PUSH
23222: LD_INT 14
23224: ST_TO_ADDR
// vc_engine := engine_siberite ;
23225: LD_ADDR_OWVAR 39
23229: PUSH
23230: LD_INT 3
23232: ST_TO_ADDR
// vc_control := control_apeman ;
23233: LD_ADDR_OWVAR 38
23237: PUSH
23238: LD_INT 5
23240: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23241: LD_ADDR_OWVAR 40
23245: PUSH
23246: LD_INT 29
23248: ST_TO_ADDR
// un := CreateVehicle ;
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: CALL_OW 45
23258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23271: LD_INT 35
23273: PPUSH
23274: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_INT 22
23285: PUSH
23286: LD_OWVAR 2
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PPUSH
23295: CALL_OW 69
23299: PPUSH
23300: LD_VAR 0 2
23304: PPUSH
23305: CALL_OW 74
23309: PPUSH
23310: CALL_OW 115
// until IsDead ( un ) ;
23314: LD_VAR 0 2
23318: PPUSH
23319: CALL_OW 301
23323: IFFALSE 23271
// end ;
23325: PPOPN 2
23327: END
// every 0 0$1 trigger StreamModeActive and sStu do
23328: LD_EXP 60
23332: PUSH
23333: LD_EXP 99
23337: AND
23338: IFFALSE 23354
23340: GO 23342
23342: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23343: LD_STRING displayStucuk();
23345: PPUSH
23346: CALL_OW 559
// ResetFog ;
23350: CALL_OW 335
// end ;
23354: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23355: LD_EXP 60
23359: PUSH
23360: LD_EXP 92
23364: AND
23365: IFFALSE 23506
23367: GO 23369
23369: DISABLE
23370: LD_INT 0
23372: PPUSH
23373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23374: LD_ADDR_VAR 0 2
23378: PUSH
23379: LD_INT 22
23381: PUSH
23382: LD_OWVAR 2
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 21
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PPUSH
23405: CALL_OW 69
23409: ST_TO_ADDR
// if not tmp then
23410: LD_VAR 0 2
23414: NOT
23415: IFFALSE 23419
// exit ;
23417: GO 23506
// un := tmp [ rand ( 1 , tmp ) ] ;
23419: LD_ADDR_VAR 0 1
23423: PUSH
23424: LD_VAR 0 2
23428: PUSH
23429: LD_INT 1
23431: PPUSH
23432: LD_VAR 0 2
23436: PPUSH
23437: CALL_OW 12
23441: ARRAY
23442: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23443: LD_VAR 0 1
23447: PPUSH
23448: LD_INT 0
23450: PPUSH
23451: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23455: LD_VAR 0 1
23459: PPUSH
23460: LD_OWVAR 3
23464: PUSH
23465: LD_VAR 0 1
23469: DIFF
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 74
23480: PPUSH
23481: CALL_OW 115
// wait ( 0 0$20 ) ;
23485: LD_INT 700
23487: PPUSH
23488: CALL_OW 67
// SetSide ( un , your_side ) ;
23492: LD_VAR 0 1
23496: PPUSH
23497: LD_OWVAR 2
23501: PPUSH
23502: CALL_OW 235
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23509: LD_EXP 60
23513: PUSH
23514: LD_EXP 93
23518: AND
23519: IFFALSE 23625
23521: GO 23523
23523: DISABLE
23524: LD_INT 0
23526: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23527: LD_ADDR_VAR 0 1
23531: PUSH
23532: LD_INT 22
23534: PUSH
23535: LD_OWVAR 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 30
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 69
23580: ST_TO_ADDR
// if not depot then
23581: LD_VAR 0 1
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23625
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23590: LD_VAR 0 1
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PPUSH
23599: CALL_OW 250
23603: PPUSH
23604: LD_VAR 0 1
23608: PUSH
23609: LD_INT 1
23611: ARRAY
23612: PPUSH
23613: CALL_OW 251
23617: PPUSH
23618: LD_INT 70
23620: PPUSH
23621: CALL_OW 495
// end ;
23625: PPOPN 1
23627: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23628: LD_EXP 60
23632: PUSH
23633: LD_EXP 94
23637: AND
23638: IFFALSE 23849
23640: GO 23642
23642: DISABLE
23643: LD_INT 0
23645: PPUSH
23646: PPUSH
23647: PPUSH
23648: PPUSH
23649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23650: LD_ADDR_VAR 0 5
23654: PUSH
23655: LD_INT 22
23657: PUSH
23658: LD_OWVAR 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: ST_TO_ADDR
// if not tmp then
23686: LD_VAR 0 5
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23849
// for i in tmp do
23695: LD_ADDR_VAR 0 1
23699: PUSH
23700: LD_VAR 0 5
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23847
// begin d := rand ( 0 , 5 ) ;
23708: LD_ADDR_VAR 0 4
23712: PUSH
23713: LD_INT 0
23715: PPUSH
23716: LD_INT 5
23718: PPUSH
23719: CALL_OW 12
23723: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23724: LD_ADDR_VAR 0 2
23728: PUSH
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 250
23738: PPUSH
23739: LD_VAR 0 4
23743: PPUSH
23744: LD_INT 3
23746: PPUSH
23747: LD_INT 12
23749: PPUSH
23750: CALL_OW 12
23754: PPUSH
23755: CALL_OW 272
23759: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 251
23774: PPUSH
23775: LD_VAR 0 4
23779: PPUSH
23780: LD_INT 3
23782: PPUSH
23783: LD_INT 12
23785: PPUSH
23786: CALL_OW 12
23790: PPUSH
23791: CALL_OW 273
23795: ST_TO_ADDR
// if ValidHex ( x , y ) then
23796: LD_VAR 0 2
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL_OW 488
23810: IFFALSE 23845
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23812: LD_VAR 0 1
23816: PPUSH
23817: LD_VAR 0 2
23821: PPUSH
23822: LD_VAR 0 3
23826: PPUSH
23827: LD_INT 3
23829: PPUSH
23830: LD_INT 6
23832: PPUSH
23833: CALL_OW 12
23837: PPUSH
23838: LD_INT 1
23840: PPUSH
23841: CALL_OW 483
// end ;
23845: GO 23705
23847: POP
23848: POP
// end ;
23849: PPOPN 5
23851: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23852: LD_EXP 60
23856: PUSH
23857: LD_EXP 95
23861: AND
23862: IFFALSE 23956
23864: GO 23866
23866: DISABLE
23867: LD_INT 0
23869: PPUSH
23870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23871: LD_ADDR_VAR 0 2
23875: PUSH
23876: LD_INT 22
23878: PUSH
23879: LD_OWVAR 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 32
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 21
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 69
23917: ST_TO_ADDR
// if not tmp then
23918: LD_VAR 0 2
23922: NOT
23923: IFFALSE 23927
// exit ;
23925: GO 23956
// for i in tmp do
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_VAR 0 2
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// SetFuel ( i , 0 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 0
23947: PPUSH
23948: CALL_OW 240
23952: GO 23937
23954: POP
23955: POP
// end ;
23956: PPOPN 2
23958: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23959: LD_EXP 60
23963: PUSH
23964: LD_EXP 96
23968: AND
23969: IFFALSE 24035
23971: GO 23973
23973: DISABLE
23974: LD_INT 0
23976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: LD_INT 22
23984: PUSH
23985: LD_OWVAR 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 29
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PPUSH
24008: CALL_OW 69
24012: ST_TO_ADDR
// if not tmp then
24013: LD_VAR 0 1
24017: NOT
24018: IFFALSE 24022
// exit ;
24020: GO 24035
// DestroyUnit ( tmp [ 1 ] ) ;
24022: LD_VAR 0 1
24026: PUSH
24027: LD_INT 1
24029: ARRAY
24030: PPUSH
24031: CALL_OW 65
// end ;
24035: PPOPN 1
24037: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24038: LD_EXP 60
24042: PUSH
24043: LD_EXP 98
24047: AND
24048: IFFALSE 24177
24050: GO 24052
24052: DISABLE
24053: LD_INT 0
24055: PPUSH
// begin uc_side := 0 ;
24056: LD_ADDR_OWVAR 20
24060: PUSH
24061: LD_INT 0
24063: ST_TO_ADDR
// uc_nation := nation_arabian ;
24064: LD_ADDR_OWVAR 21
24068: PUSH
24069: LD_INT 2
24071: ST_TO_ADDR
// hc_gallery :=  ;
24072: LD_ADDR_OWVAR 33
24076: PUSH
24077: LD_STRING 
24079: ST_TO_ADDR
// hc_name :=  ;
24080: LD_ADDR_OWVAR 26
24084: PUSH
24085: LD_STRING 
24087: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24088: LD_INT 1
24090: PPUSH
24091: LD_INT 11
24093: PPUSH
24094: LD_INT 10
24096: PPUSH
24097: CALL_OW 380
// un := CreateHuman ;
24101: LD_ADDR_VAR 0 1
24105: PUSH
24106: CALL_OW 44
24110: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24111: LD_VAR 0 1
24115: PPUSH
24116: LD_INT 1
24118: PPUSH
24119: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24123: LD_INT 35
24125: PPUSH
24126: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_INT 22
24137: PUSH
24138: LD_OWVAR 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 69
24151: PPUSH
24152: LD_VAR 0 1
24156: PPUSH
24157: CALL_OW 74
24161: PPUSH
24162: CALL_OW 115
// until IsDead ( un ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 301
24175: IFFALSE 24123
// end ;
24177: PPOPN 1
24179: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24180: LD_EXP 60
24184: PUSH
24185: LD_EXP 100
24189: AND
24190: IFFALSE 24202
24192: GO 24194
24194: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24195: LD_STRING earthquake(getX(game), 0, 32)
24197: PPUSH
24198: CALL_OW 559
24202: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24203: LD_EXP 60
24207: PUSH
24208: LD_EXP 101
24212: AND
24213: IFFALSE 24304
24215: GO 24217
24217: DISABLE
24218: LD_INT 0
24220: PPUSH
// begin enable ;
24221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24222: LD_ADDR_VAR 0 1
24226: PUSH
24227: LD_INT 22
24229: PUSH
24230: LD_OWVAR 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 21
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 33
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: PPUSH
24264: CALL_OW 69
24268: ST_TO_ADDR
// if not tmp then
24269: LD_VAR 0 1
24273: NOT
24274: IFFALSE 24278
// exit ;
24276: GO 24304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24278: LD_VAR 0 1
24282: PUSH
24283: LD_INT 1
24285: PPUSH
24286: LD_VAR 0 1
24290: PPUSH
24291: CALL_OW 12
24295: ARRAY
24296: PPUSH
24297: LD_INT 1
24299: PPUSH
24300: CALL_OW 234
// end ;
24304: PPOPN 1
24306: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24307: LD_EXP 60
24311: PUSH
24312: LD_EXP 102
24316: AND
24317: IFFALSE 24458
24319: GO 24321
24321: DISABLE
24322: LD_INT 0
24324: PPUSH
24325: PPUSH
24326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24327: LD_ADDR_VAR 0 3
24331: PUSH
24332: LD_INT 22
24334: PUSH
24335: LD_OWVAR 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 25
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PPUSH
24358: CALL_OW 69
24362: ST_TO_ADDR
// if not tmp then
24363: LD_VAR 0 3
24367: NOT
24368: IFFALSE 24372
// exit ;
24370: GO 24458
// un := tmp [ rand ( 1 , tmp ) ] ;
24372: LD_ADDR_VAR 0 2
24376: PUSH
24377: LD_VAR 0 3
24381: PUSH
24382: LD_INT 1
24384: PPUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: CALL_OW 12
24394: ARRAY
24395: ST_TO_ADDR
// if Crawls ( un ) then
24396: LD_VAR 0 2
24400: PPUSH
24401: CALL_OW 318
24405: IFFALSE 24416
// ComWalk ( un ) ;
24407: LD_VAR 0 2
24411: PPUSH
24412: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24416: LD_VAR 0 2
24420: PPUSH
24421: LD_INT 9
24423: PPUSH
24424: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24428: LD_INT 28
24430: PPUSH
24431: LD_OWVAR 2
24435: PPUSH
24436: LD_INT 2
24438: PPUSH
24439: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24443: LD_INT 29
24445: PPUSH
24446: LD_OWVAR 2
24450: PPUSH
24451: LD_INT 2
24453: PPUSH
24454: CALL_OW 322
// end ;
24458: PPOPN 3
24460: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24461: LD_EXP 60
24465: PUSH
24466: LD_EXP 103
24470: AND
24471: IFFALSE 24582
24473: GO 24475
24475: DISABLE
24476: LD_INT 0
24478: PPUSH
24479: PPUSH
24480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 22
24488: PUSH
24489: LD_OWVAR 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 25
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: CALL_OW 69
24516: ST_TO_ADDR
// if not tmp then
24517: LD_VAR 0 3
24521: NOT
24522: IFFALSE 24526
// exit ;
24524: GO 24582
// un := tmp [ rand ( 1 , tmp ) ] ;
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_VAR 0 3
24535: PUSH
24536: LD_INT 1
24538: PPUSH
24539: LD_VAR 0 3
24543: PPUSH
24544: CALL_OW 12
24548: ARRAY
24549: ST_TO_ADDR
// if Crawls ( un ) then
24550: LD_VAR 0 2
24554: PPUSH
24555: CALL_OW 318
24559: IFFALSE 24570
// ComWalk ( un ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_INT 8
24577: PPUSH
24578: CALL_OW 336
// end ;
24582: PPOPN 3
24584: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24585: LD_EXP 60
24589: PUSH
24590: LD_EXP 104
24594: AND
24595: IFFALSE 24739
24597: GO 24599
24599: DISABLE
24600: LD_INT 0
24602: PPUSH
24603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24604: LD_ADDR_VAR 0 2
24608: PUSH
24609: LD_INT 22
24611: PUSH
24612: LD_OWVAR 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 34
24636: PUSH
24637: LD_INT 12
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 34
24646: PUSH
24647: LD_INT 51
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 34
24656: PUSH
24657: LD_INT 32
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: PPUSH
24675: CALL_OW 69
24679: ST_TO_ADDR
// if not tmp then
24680: LD_VAR 0 2
24684: NOT
24685: IFFALSE 24689
// exit ;
24687: GO 24739
// for i in tmp do
24689: LD_ADDR_VAR 0 1
24693: PUSH
24694: LD_VAR 0 2
24698: PUSH
24699: FOR_IN
24700: IFFALSE 24737
// if GetCargo ( i , mat_artifact ) = 0 then
24702: LD_VAR 0 1
24706: PPUSH
24707: LD_INT 4
24709: PPUSH
24710: CALL_OW 289
24714: PUSH
24715: LD_INT 0
24717: EQUAL
24718: IFFALSE 24735
// SetCargo ( i , mat_siberit , 100 ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: LD_INT 3
24727: PPUSH
24728: LD_INT 100
24730: PPUSH
24731: CALL_OW 290
24735: GO 24699
24737: POP
24738: POP
// end ;
24739: PPOPN 2
24741: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24742: LD_EXP 60
24746: PUSH
24747: LD_EXP 105
24751: AND
24752: IFFALSE 24935
24754: GO 24756
24756: DISABLE
24757: LD_INT 0
24759: PPUSH
24760: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24761: LD_ADDR_VAR 0 2
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_OWVAR 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PPUSH
24778: CALL_OW 69
24782: ST_TO_ADDR
// if not tmp then
24783: LD_VAR 0 2
24787: NOT
24788: IFFALSE 24792
// exit ;
24790: GO 24935
// for i := 1 to 2 do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: DOUBLE
24798: LD_INT 1
24800: DEC
24801: ST_TO_ADDR
24802: LD_INT 2
24804: PUSH
24805: FOR_TO
24806: IFFALSE 24933
// begin uc_side := your_side ;
24808: LD_ADDR_OWVAR 20
24812: PUSH
24813: LD_OWVAR 2
24817: ST_TO_ADDR
// uc_nation := nation_american ;
24818: LD_ADDR_OWVAR 21
24822: PUSH
24823: LD_INT 1
24825: ST_TO_ADDR
// vc_chassis := us_morphling ;
24826: LD_ADDR_OWVAR 37
24830: PUSH
24831: LD_INT 5
24833: ST_TO_ADDR
// vc_engine := engine_siberite ;
24834: LD_ADDR_OWVAR 39
24838: PUSH
24839: LD_INT 3
24841: ST_TO_ADDR
// vc_control := control_computer ;
24842: LD_ADDR_OWVAR 38
24846: PUSH
24847: LD_INT 3
24849: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24850: LD_ADDR_OWVAR 40
24854: PUSH
24855: LD_INT 10
24857: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24858: LD_VAR 0 2
24862: PUSH
24863: LD_INT 1
24865: ARRAY
24866: PPUSH
24867: CALL_OW 310
24871: NOT
24872: IFFALSE 24919
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24874: CALL_OW 45
24878: PPUSH
24879: LD_VAR 0 2
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PPUSH
24888: CALL_OW 250
24892: PPUSH
24893: LD_VAR 0 2
24897: PUSH
24898: LD_INT 1
24900: ARRAY
24901: PPUSH
24902: CALL_OW 251
24906: PPUSH
24907: LD_INT 12
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: CALL_OW 50
24917: GO 24931
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24919: CALL_OW 45
24923: PPUSH
24924: LD_INT 1
24926: PPUSH
24927: CALL_OW 51
// end ;
24931: GO 24805
24933: POP
24934: POP
// end ;
24935: PPOPN 2
24937: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24938: LD_EXP 60
24942: PUSH
24943: LD_EXP 106
24947: AND
24948: IFFALSE 25170
24950: GO 24952
24952: DISABLE
24953: LD_INT 0
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24961: LD_ADDR_VAR 0 6
24965: PUSH
24966: LD_INT 22
24968: PUSH
24969: LD_OWVAR 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 21
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: LD_INT 23
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: PPUSH
25010: CALL_OW 69
25014: ST_TO_ADDR
// if not tmp then
25015: LD_VAR 0 6
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25170
// s1 := rand ( 1 , 4 ) ;
25024: LD_ADDR_VAR 0 2
25028: PUSH
25029: LD_INT 1
25031: PPUSH
25032: LD_INT 4
25034: PPUSH
25035: CALL_OW 12
25039: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: LD_VAR 0 6
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: PPUSH
25054: LD_VAR 0 2
25058: PPUSH
25059: CALL_OW 259
25063: ST_TO_ADDR
// if s1 = 1 then
25064: LD_VAR 0 2
25068: PUSH
25069: LD_INT 1
25071: EQUAL
25072: IFFALSE 25092
// s2 := rand ( 2 , 4 ) else
25074: LD_ADDR_VAR 0 3
25078: PUSH
25079: LD_INT 2
25081: PPUSH
25082: LD_INT 4
25084: PPUSH
25085: CALL_OW 12
25089: ST_TO_ADDR
25090: GO 25100
// s2 := 1 ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 1
25099: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25100: LD_ADDR_VAR 0 5
25104: PUSH
25105: LD_VAR 0 6
25109: PUSH
25110: LD_INT 1
25112: ARRAY
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 259
25123: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25124: LD_VAR 0 6
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 5
25142: PPUSH
25143: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25147: LD_VAR 0 6
25151: PUSH
25152: LD_INT 1
25154: ARRAY
25155: PPUSH
25156: LD_VAR 0 3
25160: PPUSH
25161: LD_VAR 0 4
25165: PPUSH
25166: CALL_OW 237
// end ;
25170: PPOPN 6
25172: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25173: LD_EXP 60
25177: PUSH
25178: LD_EXP 107
25182: AND
25183: IFFALSE 25262
25185: GO 25187
25187: DISABLE
25188: LD_INT 0
25190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25191: LD_ADDR_VAR 0 1
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 30
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PPUSH
25222: CALL_OW 69
25226: ST_TO_ADDR
// if not tmp then
25227: LD_VAR 0 1
25231: NOT
25232: IFFALSE 25236
// exit ;
25234: GO 25262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25236: LD_VAR 0 1
25240: PUSH
25241: LD_INT 1
25243: PPUSH
25244: LD_VAR 0 1
25248: PPUSH
25249: CALL_OW 12
25253: ARRAY
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 234
// end ;
25262: PPOPN 1
25264: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25265: LD_EXP 60
25269: PUSH
25270: LD_EXP 108
25274: AND
25275: IFFALSE 25387
25277: GO 25279
25279: DISABLE
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_INT 22
25291: PUSH
25292: LD_OWVAR 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 30
25306: PUSH
25307: LD_INT 27
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 30
25316: PUSH
25317: LD_INT 26
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 30
25326: PUSH
25327: LD_INT 28
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PPUSH
25344: CALL_OW 69
25348: ST_TO_ADDR
// if not tmp then
25349: LD_VAR 0 2
25353: NOT
25354: IFFALSE 25358
// exit ;
25356: GO 25387
// for i in tmp do
25358: LD_ADDR_VAR 0 1
25362: PUSH
25363: LD_VAR 0 2
25367: PUSH
25368: FOR_IN
25369: IFFALSE 25385
// SetLives ( i , 1 ) ;
25371: LD_VAR 0 1
25375: PPUSH
25376: LD_INT 1
25378: PPUSH
25379: CALL_OW 234
25383: GO 25368
25385: POP
25386: POP
// end ;
25387: PPOPN 2
25389: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25390: LD_EXP 60
25394: PUSH
25395: LD_EXP 109
25399: AND
25400: IFFALSE 25687
25402: GO 25404
25404: DISABLE
25405: LD_INT 0
25407: PPUSH
25408: PPUSH
25409: PPUSH
// begin i := rand ( 1 , 7 ) ;
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: LD_INT 1
25417: PPUSH
25418: LD_INT 7
25420: PPUSH
25421: CALL_OW 12
25425: ST_TO_ADDR
// case i of 1 :
25426: LD_VAR 0 1
25430: PUSH
25431: LD_INT 1
25433: DOUBLE
25434: EQUAL
25435: IFTRUE 25439
25437: GO 25449
25439: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25440: LD_STRING earthquake(getX(game), 0, 32)
25442: PPUSH
25443: CALL_OW 559
25447: GO 25687
25449: LD_INT 2
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25471
25457: POP
// begin ToLua ( displayStucuk(); ) ;
25458: LD_STRING displayStucuk();
25460: PPUSH
25461: CALL_OW 559
// ResetFog ;
25465: CALL_OW 335
// end ; 3 :
25469: GO 25687
25471: LD_INT 3
25473: DOUBLE
25474: EQUAL
25475: IFTRUE 25479
25477: GO 25583
25479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25480: LD_ADDR_VAR 0 2
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_OWVAR 2
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 25
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PPUSH
25511: CALL_OW 69
25515: ST_TO_ADDR
// if not tmp then
25516: LD_VAR 0 2
25520: NOT
25521: IFFALSE 25525
// exit ;
25523: GO 25687
// un := tmp [ rand ( 1 , tmp ) ] ;
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_VAR 0 2
25534: PUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 2
25542: PPUSH
25543: CALL_OW 12
25547: ARRAY
25548: ST_TO_ADDR
// if Crawls ( un ) then
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 318
25558: IFFALSE 25569
// ComWalk ( un ) ;
25560: LD_VAR 0 3
25564: PPUSH
25565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25569: LD_VAR 0 3
25573: PPUSH
25574: LD_INT 8
25576: PPUSH
25577: CALL_OW 336
// end ; 4 :
25581: GO 25687
25583: LD_INT 4
25585: DOUBLE
25586: EQUAL
25587: IFTRUE 25591
25589: GO 25665
25591: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25592: LD_ADDR_VAR 0 2
25596: PUSH
25597: LD_INT 22
25599: PUSH
25600: LD_OWVAR 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 30
25611: PUSH
25612: LD_INT 29
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PPUSH
25623: CALL_OW 69
25627: ST_TO_ADDR
// if not tmp then
25628: LD_VAR 0 2
25632: NOT
25633: IFFALSE 25637
// exit ;
25635: GO 25687
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25637: LD_VAR 0 2
25641: PUSH
25642: LD_INT 1
25644: ARRAY
25645: PPUSH
25646: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25650: LD_VAR 0 2
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: PPUSH
25659: CALL_OW 65
// end ; 5 .. 7 :
25663: GO 25687
25665: LD_INT 5
25667: DOUBLE
25668: GREATEREQUAL
25669: IFFALSE 25677
25671: LD_INT 7
25673: DOUBLE
25674: LESSEQUAL
25675: IFTRUE 25679
25677: GO 25686
25679: POP
// StreamSibBomb ; end ;
25680: CALL 21924 0 0
25684: GO 25687
25686: POP
// end ;
25687: PPOPN 3
25689: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25690: LD_EXP 60
25694: PUSH
25695: LD_EXP 110
25699: AND
25700: IFFALSE 25856
25702: GO 25704
25704: DISABLE
25705: LD_INT 0
25707: PPUSH
25708: PPUSH
25709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25710: LD_ADDR_VAR 0 2
25714: PUSH
25715: LD_INT 81
25717: PUSH
25718: LD_OWVAR 2
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 21
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PPUSH
25759: CALL_OW 69
25763: ST_TO_ADDR
// if not tmp then
25764: LD_VAR 0 2
25768: NOT
25769: IFFALSE 25773
// exit ;
25771: GO 25856
// p := 0 ;
25773: LD_ADDR_VAR 0 3
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25781: LD_INT 35
25783: PPUSH
25784: CALL_OW 67
// p := p + 1 ;
25788: LD_ADDR_VAR 0 3
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_INT 1
25800: PLUS
25801: ST_TO_ADDR
// for i in tmp do
25802: LD_ADDR_VAR 0 1
25806: PUSH
25807: LD_VAR 0 2
25811: PUSH
25812: FOR_IN
25813: IFFALSE 25844
// if GetLives ( i ) < 1000 then
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 256
25824: PUSH
25825: LD_INT 1000
25827: LESS
25828: IFFALSE 25842
// SetLives ( i , 1000 ) ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_INT 1000
25837: PPUSH
25838: CALL_OW 234
25842: GO 25812
25844: POP
25845: POP
// until p > 20 ;
25846: LD_VAR 0 3
25850: PUSH
25851: LD_INT 20
25853: GREATER
25854: IFFALSE 25781
// end ;
25856: PPOPN 3
25858: END
// every 0 0$1 trigger StreamModeActive and sTime do
25859: LD_EXP 60
25863: PUSH
25864: LD_EXP 111
25868: AND
25869: IFFALSE 25904
25871: GO 25873
25873: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25874: LD_INT 28
25876: PPUSH
25877: LD_OWVAR 2
25881: PPUSH
25882: LD_INT 2
25884: PPUSH
25885: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25889: LD_INT 30
25891: PPUSH
25892: LD_OWVAR 2
25896: PPUSH
25897: LD_INT 2
25899: PPUSH
25900: CALL_OW 322
// end ;
25904: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25905: LD_EXP 60
25909: PUSH
25910: LD_EXP 112
25914: AND
25915: IFFALSE 26036
25917: GO 25919
25919: DISABLE
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25924: LD_ADDR_VAR 0 2
25928: PUSH
25929: LD_INT 22
25931: PUSH
25932: LD_OWVAR 2
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 21
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 3
25953: PUSH
25954: LD_INT 23
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL_OW 69
25977: ST_TO_ADDR
// if not tmp then
25978: LD_VAR 0 2
25982: NOT
25983: IFFALSE 25987
// exit ;
25985: GO 26036
// for i in tmp do
25987: LD_ADDR_VAR 0 1
25991: PUSH
25992: LD_VAR 0 2
25996: PUSH
25997: FOR_IN
25998: IFFALSE 26034
// begin if Crawls ( i ) then
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 318
26009: IFFALSE 26020
// ComWalk ( i ) ;
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 138
// SetClass ( i , 2 ) ;
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_INT 2
26027: PPUSH
26028: CALL_OW 336
// end ;
26032: GO 25997
26034: POP
26035: POP
// end ;
26036: PPOPN 2
26038: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26039: LD_EXP 60
26043: PUSH
26044: LD_EXP 113
26048: AND
26049: IFFALSE 26337
26051: GO 26053
26053: DISABLE
26054: LD_INT 0
26056: PPUSH
26057: PPUSH
26058: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26059: LD_OWVAR 2
26063: PPUSH
26064: LD_INT 9
26066: PPUSH
26067: LD_INT 1
26069: PPUSH
26070: LD_INT 1
26072: PPUSH
26073: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26077: LD_INT 9
26079: PPUSH
26080: LD_OWVAR 2
26084: PPUSH
26085: CALL_OW 343
// uc_side := 9 ;
26089: LD_ADDR_OWVAR 20
26093: PUSH
26094: LD_INT 9
26096: ST_TO_ADDR
// uc_nation := 2 ;
26097: LD_ADDR_OWVAR 21
26101: PUSH
26102: LD_INT 2
26104: ST_TO_ADDR
// hc_name := Dark Warrior ;
26105: LD_ADDR_OWVAR 26
26109: PUSH
26110: LD_STRING Dark Warrior
26112: ST_TO_ADDR
// hc_gallery :=  ;
26113: LD_ADDR_OWVAR 33
26117: PUSH
26118: LD_STRING 
26120: ST_TO_ADDR
// hc_noskilllimit := true ;
26121: LD_ADDR_OWVAR 76
26125: PUSH
26126: LD_INT 1
26128: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26129: LD_ADDR_OWVAR 31
26133: PUSH
26134: LD_INT 30
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 30
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: ST_TO_ADDR
// un := CreateHuman ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: CALL_OW 44
26161: ST_TO_ADDR
// hc_noskilllimit := false ;
26162: LD_ADDR_OWVAR 76
26166: PUSH
26167: LD_INT 0
26169: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26170: LD_VAR 0 3
26174: PPUSH
26175: LD_INT 1
26177: PPUSH
26178: CALL_OW 51
// ToLua ( playRanger() ) ;
26182: LD_STRING playRanger()
26184: PPUSH
26185: CALL_OW 559
// p := 0 ;
26189: LD_ADDR_VAR 0 2
26193: PUSH
26194: LD_INT 0
26196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26197: LD_INT 35
26199: PPUSH
26200: CALL_OW 67
// p := p + 1 ;
26204: LD_ADDR_VAR 0 2
26208: PUSH
26209: LD_VAR 0 2
26213: PUSH
26214: LD_INT 1
26216: PLUS
26217: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26218: LD_VAR 0 3
26222: PPUSH
26223: CALL_OW 256
26227: PUSH
26228: LD_INT 1000
26230: LESS
26231: IFFALSE 26245
// SetLives ( un , 1000 ) ;
26233: LD_VAR 0 3
26237: PPUSH
26238: LD_INT 1000
26240: PPUSH
26241: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26245: LD_VAR 0 3
26249: PPUSH
26250: LD_INT 81
26252: PUSH
26253: LD_OWVAR 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 91
26264: PUSH
26265: LD_VAR 0 3
26269: PUSH
26270: LD_INT 30
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: PPUSH
26287: LD_VAR 0 3
26291: PPUSH
26292: CALL_OW 74
26296: PPUSH
26297: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26301: LD_VAR 0 2
26305: PUSH
26306: LD_INT 80
26308: GREATER
26309: PUSH
26310: LD_VAR 0 3
26314: PPUSH
26315: CALL_OW 301
26319: OR
26320: IFFALSE 26197
// if un then
26322: LD_VAR 0 3
26326: IFFALSE 26337
// RemoveUnit ( un ) ;
26328: LD_VAR 0 3
26332: PPUSH
26333: CALL_OW 64
// end ;
26337: PPOPN 3
26339: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26340: LD_EXP 114
26344: IFFALSE 26460
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
26352: PPUSH
26353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: LD_INT 81
26361: PUSH
26362: LD_OWVAR 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PPUSH
26385: CALL_OW 69
26389: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26390: LD_STRING playComputer()
26392: PPUSH
26393: CALL_OW 559
// if not tmp then
26397: LD_VAR 0 2
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 26460
// for i in tmp do
26406: LD_ADDR_VAR 0 1
26410: PUSH
26411: LD_VAR 0 2
26415: PUSH
26416: FOR_IN
26417: IFFALSE 26458
// for j := 1 to 4 do
26419: LD_ADDR_VAR 0 3
26423: PUSH
26424: DOUBLE
26425: LD_INT 1
26427: DEC
26428: ST_TO_ADDR
26429: LD_INT 4
26431: PUSH
26432: FOR_TO
26433: IFFALSE 26454
// SetSkill ( i , j , 10 ) ;
26435: LD_VAR 0 1
26439: PPUSH
26440: LD_VAR 0 3
26444: PPUSH
26445: LD_INT 10
26447: PPUSH
26448: CALL_OW 237
26452: GO 26432
26454: POP
26455: POP
26456: GO 26416
26458: POP
26459: POP
// end ;
26460: PPOPN 3
26462: END
// every 0 0$1 trigger s30 do var i , tmp ;
26463: LD_EXP 115
26467: IFFALSE 26536
26469: GO 26471
26471: DISABLE
26472: LD_INT 0
26474: PPUSH
26475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26476: LD_ADDR_VAR 0 2
26480: PUSH
26481: LD_INT 22
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 69
26497: ST_TO_ADDR
// if not tmp then
26498: LD_VAR 0 2
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26536
// for i in tmp do
26507: LD_ADDR_VAR 0 1
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: FOR_IN
26518: IFFALSE 26534
// SetLives ( i , 300 ) ;
26520: LD_VAR 0 1
26524: PPUSH
26525: LD_INT 300
26527: PPUSH
26528: CALL_OW 234
26532: GO 26517
26534: POP
26535: POP
// end ;
26536: PPOPN 2
26538: END
// every 0 0$1 trigger s60 do var i , tmp ;
26539: LD_EXP 116
26543: IFFALSE 26612
26545: GO 26547
26547: DISABLE
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26552: LD_ADDR_VAR 0 2
26556: PUSH
26557: LD_INT 22
26559: PUSH
26560: LD_OWVAR 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 69
26573: ST_TO_ADDR
// if not tmp then
26574: LD_VAR 0 2
26578: NOT
26579: IFFALSE 26583
// exit ;
26581: GO 26612
// for i in tmp do
26583: LD_ADDR_VAR 0 1
26587: PUSH
26588: LD_VAR 0 2
26592: PUSH
26593: FOR_IN
26594: IFFALSE 26610
// SetLives ( i , 600 ) ;
26596: LD_VAR 0 1
26600: PPUSH
26601: LD_INT 600
26603: PPUSH
26604: CALL_OW 234
26608: GO 26593
26610: POP
26611: POP
// end ;
26612: PPOPN 2
26614: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26615: LD_INT 0
26617: PPUSH
// case cmd of 301 :
26618: LD_VAR 0 1
26622: PUSH
26623: LD_INT 301
26625: DOUBLE
26626: EQUAL
26627: IFTRUE 26631
26629: GO 26663
26631: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26632: LD_VAR 0 6
26636: PPUSH
26637: LD_VAR 0 7
26641: PPUSH
26642: LD_VAR 0 8
26646: PPUSH
26647: LD_VAR 0 4
26651: PPUSH
26652: LD_VAR 0 5
26656: PPUSH
26657: CALL 27864 0 5
26661: GO 26784
26663: LD_INT 302
26665: DOUBLE
26666: EQUAL
26667: IFTRUE 26671
26669: GO 26708
26671: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26672: LD_VAR 0 6
26676: PPUSH
26677: LD_VAR 0 7
26681: PPUSH
26682: LD_VAR 0 8
26686: PPUSH
26687: LD_VAR 0 9
26691: PPUSH
26692: LD_VAR 0 4
26696: PPUSH
26697: LD_VAR 0 5
26701: PPUSH
26702: CALL 27955 0 6
26706: GO 26784
26708: LD_INT 303
26710: DOUBLE
26711: EQUAL
26712: IFTRUE 26716
26714: GO 26753
26716: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26717: LD_VAR 0 6
26721: PPUSH
26722: LD_VAR 0 7
26726: PPUSH
26727: LD_VAR 0 8
26731: PPUSH
26732: LD_VAR 0 9
26736: PPUSH
26737: LD_VAR 0 4
26741: PPUSH
26742: LD_VAR 0 5
26746: PPUSH
26747: CALL 26789 0 6
26751: GO 26784
26753: LD_INT 304
26755: DOUBLE
26756: EQUAL
26757: IFTRUE 26761
26759: GO 26783
26761: POP
// hHackTeleport ( unit , x , y ) ; end ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 4
26771: PPUSH
26772: LD_VAR 0 5
26776: PPUSH
26777: CALL 28548 0 3
26781: GO 26784
26783: POP
// end ;
26784: LD_VAR 0 12
26788: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26789: LD_INT 0
26791: PPUSH
26792: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26793: LD_VAR 0 1
26797: PUSH
26798: LD_INT 1
26800: LESS
26801: PUSH
26802: LD_VAR 0 1
26806: PUSH
26807: LD_INT 3
26809: GREATER
26810: OR
26811: PUSH
26812: LD_VAR 0 5
26816: PPUSH
26817: LD_VAR 0 6
26821: PPUSH
26822: CALL_OW 428
26826: OR
26827: IFFALSE 26831
// exit ;
26829: GO 27551
// uc_side := your_side ;
26831: LD_ADDR_OWVAR 20
26835: PUSH
26836: LD_OWVAR 2
26840: ST_TO_ADDR
// uc_nation := nation ;
26841: LD_ADDR_OWVAR 21
26845: PUSH
26846: LD_VAR 0 1
26850: ST_TO_ADDR
// bc_level = 1 ;
26851: LD_ADDR_OWVAR 43
26855: PUSH
26856: LD_INT 1
26858: ST_TO_ADDR
// case btype of 1 :
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: DOUBLE
26867: EQUAL
26868: IFTRUE 26872
26870: GO 26883
26872: POP
// bc_type := b_depot ; 2 :
26873: LD_ADDR_OWVAR 42
26877: PUSH
26878: LD_INT 0
26880: ST_TO_ADDR
26881: GO 27495
26883: LD_INT 2
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26902
26891: POP
// bc_type := b_warehouse ; 3 :
26892: LD_ADDR_OWVAR 42
26896: PUSH
26897: LD_INT 1
26899: ST_TO_ADDR
26900: GO 27495
26902: LD_INT 3
26904: DOUBLE
26905: EQUAL
26906: IFTRUE 26910
26908: GO 26921
26910: POP
// bc_type := b_lab ; 4 .. 9 :
26911: LD_ADDR_OWVAR 42
26915: PUSH
26916: LD_INT 6
26918: ST_TO_ADDR
26919: GO 27495
26921: LD_INT 4
26923: DOUBLE
26924: GREATEREQUAL
26925: IFFALSE 26933
26927: LD_INT 9
26929: DOUBLE
26930: LESSEQUAL
26931: IFTRUE 26935
26933: GO 26987
26935: POP
// begin bc_type := b_lab_half ;
26936: LD_ADDR_OWVAR 42
26940: PUSH
26941: LD_INT 7
26943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26944: LD_ADDR_OWVAR 44
26948: PUSH
26949: LD_INT 10
26951: PUSH
26952: LD_INT 11
26954: PUSH
26955: LD_INT 12
26957: PUSH
26958: LD_INT 15
26960: PUSH
26961: LD_INT 14
26963: PUSH
26964: LD_INT 13
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: PUSH
26975: LD_VAR 0 2
26979: PUSH
26980: LD_INT 3
26982: MINUS
26983: ARRAY
26984: ST_TO_ADDR
// end ; 10 .. 13 :
26985: GO 27495
26987: LD_INT 10
26989: DOUBLE
26990: GREATEREQUAL
26991: IFFALSE 26999
26993: LD_INT 13
26995: DOUBLE
26996: LESSEQUAL
26997: IFTRUE 27001
26999: GO 27078
27001: POP
// begin bc_type := b_lab_full ;
27002: LD_ADDR_OWVAR 42
27006: PUSH
27007: LD_INT 8
27009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27010: LD_ADDR_OWVAR 44
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 12
27020: PUSH
27021: LD_INT 14
27023: PUSH
27024: LD_INT 13
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: PUSH
27033: LD_VAR 0 2
27037: PUSH
27038: LD_INT 9
27040: MINUS
27041: ARRAY
27042: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27043: LD_ADDR_OWVAR 45
27047: PUSH
27048: LD_INT 11
27050: PUSH
27051: LD_INT 15
27053: PUSH
27054: LD_INT 12
27056: PUSH
27057: LD_INT 15
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PUSH
27066: LD_VAR 0 2
27070: PUSH
27071: LD_INT 9
27073: MINUS
27074: ARRAY
27075: ST_TO_ADDR
// end ; 14 :
27076: GO 27495
27078: LD_INT 14
27080: DOUBLE
27081: EQUAL
27082: IFTRUE 27086
27084: GO 27097
27086: POP
// bc_type := b_workshop ; 15 :
27087: LD_ADDR_OWVAR 42
27091: PUSH
27092: LD_INT 2
27094: ST_TO_ADDR
27095: GO 27495
27097: LD_INT 15
27099: DOUBLE
27100: EQUAL
27101: IFTRUE 27105
27103: GO 27116
27105: POP
// bc_type := b_factory ; 16 :
27106: LD_ADDR_OWVAR 42
27110: PUSH
27111: LD_INT 3
27113: ST_TO_ADDR
27114: GO 27495
27116: LD_INT 16
27118: DOUBLE
27119: EQUAL
27120: IFTRUE 27124
27122: GO 27135
27124: POP
// bc_type := b_ext_gun ; 17 :
27125: LD_ADDR_OWVAR 42
27129: PUSH
27130: LD_INT 17
27132: ST_TO_ADDR
27133: GO 27495
27135: LD_INT 17
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27171
27143: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27144: LD_ADDR_OWVAR 42
27148: PUSH
27149: LD_INT 19
27151: PUSH
27152: LD_INT 23
27154: PUSH
27155: LD_INT 19
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: PUSH
27163: LD_VAR 0 1
27167: ARRAY
27168: ST_TO_ADDR
27169: GO 27495
27171: LD_INT 18
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27190
27179: POP
// bc_type := b_ext_radar ; 19 :
27180: LD_ADDR_OWVAR 42
27184: PUSH
27185: LD_INT 20
27187: ST_TO_ADDR
27188: GO 27495
27190: LD_INT 19
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27209
27198: POP
// bc_type := b_ext_radio ; 20 :
27199: LD_ADDR_OWVAR 42
27203: PUSH
27204: LD_INT 22
27206: ST_TO_ADDR
27207: GO 27495
27209: LD_INT 20
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27217
27215: GO 27228
27217: POP
// bc_type := b_ext_siberium ; 21 :
27218: LD_ADDR_OWVAR 42
27222: PUSH
27223: LD_INT 21
27225: ST_TO_ADDR
27226: GO 27495
27228: LD_INT 21
27230: DOUBLE
27231: EQUAL
27232: IFTRUE 27236
27234: GO 27247
27236: POP
// bc_type := b_ext_computer ; 22 :
27237: LD_ADDR_OWVAR 42
27241: PUSH
27242: LD_INT 24
27244: ST_TO_ADDR
27245: GO 27495
27247: LD_INT 22
27249: DOUBLE
27250: EQUAL
27251: IFTRUE 27255
27253: GO 27266
27255: POP
// bc_type := b_ext_track ; 23 :
27256: LD_ADDR_OWVAR 42
27260: PUSH
27261: LD_INT 16
27263: ST_TO_ADDR
27264: GO 27495
27266: LD_INT 23
27268: DOUBLE
27269: EQUAL
27270: IFTRUE 27274
27272: GO 27285
27274: POP
// bc_type := b_ext_laser ; 24 :
27275: LD_ADDR_OWVAR 42
27279: PUSH
27280: LD_INT 25
27282: ST_TO_ADDR
27283: GO 27495
27285: LD_INT 24
27287: DOUBLE
27288: EQUAL
27289: IFTRUE 27293
27291: GO 27304
27293: POP
// bc_type := b_control_tower ; 25 :
27294: LD_ADDR_OWVAR 42
27298: PUSH
27299: LD_INT 36
27301: ST_TO_ADDR
27302: GO 27495
27304: LD_INT 25
27306: DOUBLE
27307: EQUAL
27308: IFTRUE 27312
27310: GO 27323
27312: POP
// bc_type := b_breastwork ; 26 :
27313: LD_ADDR_OWVAR 42
27317: PUSH
27318: LD_INT 31
27320: ST_TO_ADDR
27321: GO 27495
27323: LD_INT 26
27325: DOUBLE
27326: EQUAL
27327: IFTRUE 27331
27329: GO 27342
27331: POP
// bc_type := b_bunker ; 27 :
27332: LD_ADDR_OWVAR 42
27336: PUSH
27337: LD_INT 32
27339: ST_TO_ADDR
27340: GO 27495
27342: LD_INT 27
27344: DOUBLE
27345: EQUAL
27346: IFTRUE 27350
27348: GO 27361
27350: POP
// bc_type := b_turret ; 28 :
27351: LD_ADDR_OWVAR 42
27355: PUSH
27356: LD_INT 33
27358: ST_TO_ADDR
27359: GO 27495
27361: LD_INT 28
27363: DOUBLE
27364: EQUAL
27365: IFTRUE 27369
27367: GO 27380
27369: POP
// bc_type := b_armoury ; 29 :
27370: LD_ADDR_OWVAR 42
27374: PUSH
27375: LD_INT 4
27377: ST_TO_ADDR
27378: GO 27495
27380: LD_INT 29
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27399
27388: POP
// bc_type := b_barracks ; 30 :
27389: LD_ADDR_OWVAR 42
27393: PUSH
27394: LD_INT 5
27396: ST_TO_ADDR
27397: GO 27495
27399: LD_INT 30
27401: DOUBLE
27402: EQUAL
27403: IFTRUE 27407
27405: GO 27418
27407: POP
// bc_type := b_solar_power ; 31 :
27408: LD_ADDR_OWVAR 42
27412: PUSH
27413: LD_INT 27
27415: ST_TO_ADDR
27416: GO 27495
27418: LD_INT 31
27420: DOUBLE
27421: EQUAL
27422: IFTRUE 27426
27424: GO 27437
27426: POP
// bc_type := b_oil_power ; 32 :
27427: LD_ADDR_OWVAR 42
27431: PUSH
27432: LD_INT 26
27434: ST_TO_ADDR
27435: GO 27495
27437: LD_INT 32
27439: DOUBLE
27440: EQUAL
27441: IFTRUE 27445
27443: GO 27456
27445: POP
// bc_type := b_siberite_power ; 33 :
27446: LD_ADDR_OWVAR 42
27450: PUSH
27451: LD_INT 28
27453: ST_TO_ADDR
27454: GO 27495
27456: LD_INT 33
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27475
27464: POP
// bc_type := b_oil_mine ; 34 :
27465: LD_ADDR_OWVAR 42
27469: PUSH
27470: LD_INT 29
27472: ST_TO_ADDR
27473: GO 27495
27475: LD_INT 34
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27483
27481: GO 27494
27483: POP
// bc_type := b_siberite_mine ; end ;
27484: LD_ADDR_OWVAR 42
27488: PUSH
27489: LD_INT 30
27491: ST_TO_ADDR
27492: GO 27495
27494: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27495: LD_ADDR_VAR 0 8
27499: PUSH
27500: LD_VAR 0 5
27504: PPUSH
27505: LD_VAR 0 6
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: CALL_OW 47
27519: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27520: LD_OWVAR 42
27524: PUSH
27525: LD_INT 32
27527: PUSH
27528: LD_INT 33
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: IN
27535: IFFALSE 27551
// PlaceWeaponTurret ( b , weapon ) ;
27537: LD_VAR 0 8
27541: PPUSH
27542: LD_VAR 0 4
27546: PPUSH
27547: CALL_OW 431
// end ;
27551: LD_VAR 0 7
27555: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27556: LD_INT 0
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27562: LD_ADDR_VAR 0 4
27566: PUSH
27567: LD_INT 22
27569: PUSH
27570: LD_OWVAR 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 30
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 30
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PPUSH
27611: CALL_OW 69
27615: ST_TO_ADDR
// if not tmp then
27616: LD_VAR 0 4
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 27684
// for i in tmp do
27625: LD_ADDR_VAR 0 2
27629: PUSH
27630: LD_VAR 0 4
27634: PUSH
27635: FOR_IN
27636: IFFALSE 27682
// for j = 1 to 3 do
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: DOUBLE
27644: LD_INT 1
27646: DEC
27647: ST_TO_ADDR
27648: LD_INT 3
27650: PUSH
27651: FOR_TO
27652: IFFALSE 27678
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27654: LD_VAR 0 2
27658: PPUSH
27659: CALL_OW 274
27663: PPUSH
27664: LD_VAR 0 3
27668: PPUSH
27669: LD_INT 99999
27671: PPUSH
27672: CALL_OW 277
27676: GO 27651
27678: POP
27679: POP
27680: GO 27635
27682: POP
27683: POP
// end ;
27684: LD_VAR 0 1
27688: RET
// export function hHackSetLevel10 ; var i , j ; begin
27689: LD_INT 0
27691: PPUSH
27692: PPUSH
27693: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27694: LD_ADDR_VAR 0 2
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 69
27713: PUSH
27714: FOR_IN
27715: IFFALSE 27767
// if IsSelected ( i ) then
27717: LD_VAR 0 2
27721: PPUSH
27722: CALL_OW 306
27726: IFFALSE 27765
// begin for j := 1 to 4 do
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: DOUBLE
27734: LD_INT 1
27736: DEC
27737: ST_TO_ADDR
27738: LD_INT 4
27740: PUSH
27741: FOR_TO
27742: IFFALSE 27763
// SetSkill ( i , j , 10 ) ;
27744: LD_VAR 0 2
27748: PPUSH
27749: LD_VAR 0 3
27753: PPUSH
27754: LD_INT 10
27756: PPUSH
27757: CALL_OW 237
27761: GO 27741
27763: POP
27764: POP
// end ;
27765: GO 27714
27767: POP
27768: POP
// end ;
27769: LD_VAR 0 1
27773: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27774: LD_INT 0
27776: PPUSH
27777: PPUSH
27778: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27779: LD_ADDR_VAR 0 2
27783: PUSH
27784: LD_INT 22
27786: PUSH
27787: LD_OWVAR 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 21
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PPUSH
27810: CALL_OW 69
27814: PUSH
27815: FOR_IN
27816: IFFALSE 27857
// begin for j := 1 to 4 do
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: DOUBLE
27824: LD_INT 1
27826: DEC
27827: ST_TO_ADDR
27828: LD_INT 4
27830: PUSH
27831: FOR_TO
27832: IFFALSE 27853
// SetSkill ( i , j , 10 ) ;
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_VAR 0 3
27843: PPUSH
27844: LD_INT 10
27846: PPUSH
27847: CALL_OW 237
27851: GO 27831
27853: POP
27854: POP
// end ;
27855: GO 27815
27857: POP
27858: POP
// end ;
27859: LD_VAR 0 1
27863: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27864: LD_INT 0
27866: PPUSH
// uc_side := your_side ;
27867: LD_ADDR_OWVAR 20
27871: PUSH
27872: LD_OWVAR 2
27876: ST_TO_ADDR
// uc_nation := nation ;
27877: LD_ADDR_OWVAR 21
27881: PUSH
27882: LD_VAR 0 1
27886: ST_TO_ADDR
// InitHc ;
27887: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27891: LD_INT 0
27893: PPUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: LD_VAR 0 3
27903: PPUSH
27904: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27908: LD_VAR 0 4
27912: PPUSH
27913: LD_VAR 0 5
27917: PPUSH
27918: CALL_OW 428
27922: PUSH
27923: LD_INT 0
27925: EQUAL
27926: IFFALSE 27950
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27928: CALL_OW 44
27932: PPUSH
27933: LD_VAR 0 4
27937: PPUSH
27938: LD_VAR 0 5
27942: PPUSH
27943: LD_INT 1
27945: PPUSH
27946: CALL_OW 48
// end ;
27950: LD_VAR 0 6
27954: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27955: LD_INT 0
27957: PPUSH
27958: PPUSH
// uc_side := your_side ;
27959: LD_ADDR_OWVAR 20
27963: PUSH
27964: LD_OWVAR 2
27968: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27969: LD_VAR 0 1
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: LD_INT 3
27982: PUSH
27983: LD_INT 4
27985: PUSH
27986: LD_INT 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: IN
27996: IFFALSE 28008
// uc_nation := nation_american else
27998: LD_ADDR_OWVAR 21
28002: PUSH
28003: LD_INT 1
28005: ST_TO_ADDR
28006: GO 28051
// if chassis in [ 11 , 12 , 13 , 14 ] then
28008: LD_VAR 0 1
28012: PUSH
28013: LD_INT 11
28015: PUSH
28016: LD_INT 12
28018: PUSH
28019: LD_INT 13
28021: PUSH
28022: LD_INT 14
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: IN
28031: IFFALSE 28043
// uc_nation := nation_arabian else
28033: LD_ADDR_OWVAR 21
28037: PUSH
28038: LD_INT 2
28040: ST_TO_ADDR
28041: GO 28051
// uc_nation := nation_russian ;
28043: LD_ADDR_OWVAR 21
28047: PUSH
28048: LD_INT 3
28050: ST_TO_ADDR
// vc_chassis := chassis ;
28051: LD_ADDR_OWVAR 37
28055: PUSH
28056: LD_VAR 0 1
28060: ST_TO_ADDR
// vc_engine := engine ;
28061: LD_ADDR_OWVAR 39
28065: PUSH
28066: LD_VAR 0 2
28070: ST_TO_ADDR
// vc_control := control ;
28071: LD_ADDR_OWVAR 38
28075: PUSH
28076: LD_VAR 0 3
28080: ST_TO_ADDR
// vc_weapon := weapon ;
28081: LD_ADDR_OWVAR 40
28085: PUSH
28086: LD_VAR 0 4
28090: ST_TO_ADDR
// un := CreateVehicle ;
28091: LD_ADDR_VAR 0 8
28095: PUSH
28096: CALL_OW 45
28100: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28101: LD_VAR 0 8
28105: PPUSH
28106: LD_INT 0
28108: PPUSH
28109: LD_INT 5
28111: PPUSH
28112: CALL_OW 12
28116: PPUSH
28117: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28121: LD_VAR 0 8
28125: PPUSH
28126: LD_VAR 0 5
28130: PPUSH
28131: LD_VAR 0 6
28135: PPUSH
28136: LD_INT 1
28138: PPUSH
28139: CALL_OW 48
// end ;
28143: LD_VAR 0 7
28147: RET
// export hInvincible ; every 1 do
28148: GO 28150
28150: DISABLE
// hInvincible := [ ] ;
28151: LD_ADDR_EXP 117
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
28158: END
// every 10 do var i ;
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
// begin enable ;
28165: ENABLE
// if not hInvincible then
28166: LD_EXP 117
28170: NOT
28171: IFFALSE 28175
// exit ;
28173: GO 28219
// for i in hInvincible do
28175: LD_ADDR_VAR 0 1
28179: PUSH
28180: LD_EXP 117
28184: PUSH
28185: FOR_IN
28186: IFFALSE 28217
// if GetLives ( i ) < 1000 then
28188: LD_VAR 0 1
28192: PPUSH
28193: CALL_OW 256
28197: PUSH
28198: LD_INT 1000
28200: LESS
28201: IFFALSE 28215
// SetLives ( i , 1000 ) ;
28203: LD_VAR 0 1
28207: PPUSH
28208: LD_INT 1000
28210: PPUSH
28211: CALL_OW 234
28215: GO 28185
28217: POP
28218: POP
// end ;
28219: PPOPN 1
28221: END
// export function hHackInvincible ; var i ; begin
28222: LD_INT 0
28224: PPUSH
28225: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28226: LD_ADDR_VAR 0 2
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 69
28263: PUSH
28264: FOR_IN
28265: IFFALSE 28326
// if IsSelected ( i ) then
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 306
28276: IFFALSE 28324
// begin if i in hInvincible then
28278: LD_VAR 0 2
28282: PUSH
28283: LD_EXP 117
28287: IN
28288: IFFALSE 28308
// hInvincible := hInvincible diff i else
28290: LD_ADDR_EXP 117
28294: PUSH
28295: LD_EXP 117
28299: PUSH
28300: LD_VAR 0 2
28304: DIFF
28305: ST_TO_ADDR
28306: GO 28324
// hInvincible := hInvincible union i ;
28308: LD_ADDR_EXP 117
28312: PUSH
28313: LD_EXP 117
28317: PUSH
28318: LD_VAR 0 2
28322: UNION
28323: ST_TO_ADDR
// end ;
28324: GO 28264
28326: POP
28327: POP
// end ;
28328: LD_VAR 0 1
28332: RET
// export function hHackInvisible ; var i , j ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
28337: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28338: LD_ADDR_VAR 0 2
28342: PUSH
28343: LD_INT 21
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: PUSH
28358: FOR_IN
28359: IFFALSE 28383
// if IsSelected ( i ) then
28361: LD_VAR 0 2
28365: PPUSH
28366: CALL_OW 306
28370: IFFALSE 28381
// ComForceInvisible ( i ) ;
28372: LD_VAR 0 2
28376: PPUSH
28377: CALL_OW 496
28381: GO 28358
28383: POP
28384: POP
// end ;
28385: LD_VAR 0 1
28389: RET
// export function hHackChangeYourSide ; begin
28390: LD_INT 0
28392: PPUSH
// if your_side = 8 then
28393: LD_OWVAR 2
28397: PUSH
28398: LD_INT 8
28400: EQUAL
28401: IFFALSE 28413
// your_side := 0 else
28403: LD_ADDR_OWVAR 2
28407: PUSH
28408: LD_INT 0
28410: ST_TO_ADDR
28411: GO 28427
// your_side := your_side + 1 ;
28413: LD_ADDR_OWVAR 2
28417: PUSH
28418: LD_OWVAR 2
28422: PUSH
28423: LD_INT 1
28425: PLUS
28426: ST_TO_ADDR
// end ;
28427: LD_VAR 0 1
28431: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28432: LD_INT 0
28434: PPUSH
28435: PPUSH
28436: PPUSH
// for i in all_units do
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: LD_OWVAR 3
28446: PUSH
28447: FOR_IN
28448: IFFALSE 28526
// if IsSelected ( i ) then
28450: LD_VAR 0 2
28454: PPUSH
28455: CALL_OW 306
28459: IFFALSE 28524
// begin j := GetSide ( i ) ;
28461: LD_ADDR_VAR 0 3
28465: PUSH
28466: LD_VAR 0 2
28470: PPUSH
28471: CALL_OW 255
28475: ST_TO_ADDR
// if j = 8 then
28476: LD_VAR 0 3
28480: PUSH
28481: LD_INT 8
28483: EQUAL
28484: IFFALSE 28496
// j := 0 else
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
28494: GO 28510
// j := j + 1 ;
28496: LD_ADDR_VAR 0 3
28500: PUSH
28501: LD_VAR 0 3
28505: PUSH
28506: LD_INT 1
28508: PLUS
28509: ST_TO_ADDR
// SetSide ( i , j ) ;
28510: LD_VAR 0 2
28514: PPUSH
28515: LD_VAR 0 3
28519: PPUSH
28520: CALL_OW 235
// end ;
28524: GO 28447
28526: POP
28527: POP
// end ;
28528: LD_VAR 0 1
28532: RET
// export function hHackFog ; begin
28533: LD_INT 0
28535: PPUSH
// FogOff ( true ) ;
28536: LD_INT 1
28538: PPUSH
28539: CALL_OW 344
// end ;
28543: LD_VAR 0 1
28547: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28548: LD_INT 0
28550: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28551: LD_VAR 0 1
28555: PPUSH
28556: LD_VAR 0 2
28560: PPUSH
28561: LD_VAR 0 3
28565: PPUSH
28566: LD_INT 1
28568: PPUSH
28569: LD_INT 1
28571: PPUSH
28572: CALL_OW 483
// CenterOnXY ( x , y ) ;
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 3
28585: PPUSH
28586: CALL_OW 84
// end ; end_of_file
28590: LD_VAR 0 4
28594: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
28599: PPUSH
28600: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28601: LD_VAR 0 1
28605: PPUSH
28606: CALL_OW 264
28610: PUSH
28611: LD_EXP 134
28615: EQUAL
28616: IFFALSE 28688
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28618: LD_INT 68
28620: PPUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 255
28630: PPUSH
28631: CALL_OW 321
28635: PUSH
28636: LD_INT 2
28638: EQUAL
28639: IFFALSE 28651
// eff := 70 else
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_INT 70
28648: ST_TO_ADDR
28649: GO 28659
// eff := 30 ;
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: LD_INT 30
28658: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 250
28668: PPUSH
28669: LD_VAR 0 1
28673: PPUSH
28674: CALL_OW 251
28678: PPUSH
28679: LD_VAR 0 4
28683: PPUSH
28684: CALL_OW 495
// end ; end ;
28688: LD_VAR 0 2
28692: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28693: LD_INT 0
28695: PPUSH
// end ;
28696: LD_VAR 0 4
28700: RET
// export function SOS_Command ( cmd ) ; begin
28701: LD_INT 0
28703: PPUSH
// end ;
28704: LD_VAR 0 2
28708: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28709: LD_INT 0
28711: PPUSH
// end ;
28712: LD_VAR 0 6
28716: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28717: LD_INT 0
28719: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28720: LD_VAR 0 1
28724: PUSH
28725: LD_INT 250
28727: EQUAL
28728: PUSH
28729: LD_VAR 0 2
28733: PPUSH
28734: CALL_OW 264
28738: PUSH
28739: LD_EXP 137
28743: EQUAL
28744: AND
28745: IFFALSE 28766
// MinerPlaceMine ( unit , x , y ) ;
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_VAR 0 4
28756: PPUSH
28757: LD_VAR 0 5
28761: PPUSH
28762: CALL 31115 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28766: LD_VAR 0 1
28770: PUSH
28771: LD_INT 251
28773: EQUAL
28774: PUSH
28775: LD_VAR 0 2
28779: PPUSH
28780: CALL_OW 264
28784: PUSH
28785: LD_EXP 137
28789: EQUAL
28790: AND
28791: IFFALSE 28812
// MinerDetonateMine ( unit , x , y ) ;
28793: LD_VAR 0 2
28797: PPUSH
28798: LD_VAR 0 4
28802: PPUSH
28803: LD_VAR 0 5
28807: PPUSH
28808: CALL 31392 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28812: LD_VAR 0 1
28816: PUSH
28817: LD_INT 252
28819: EQUAL
28820: PUSH
28821: LD_VAR 0 2
28825: PPUSH
28826: CALL_OW 264
28830: PUSH
28831: LD_EXP 137
28835: EQUAL
28836: AND
28837: IFFALSE 28858
// MinerCreateMinefield ( unit , x , y ) ;
28839: LD_VAR 0 2
28843: PPUSH
28844: LD_VAR 0 4
28848: PPUSH
28849: LD_VAR 0 5
28853: PPUSH
28854: CALL 31809 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28858: LD_VAR 0 1
28862: PUSH
28863: LD_INT 253
28865: EQUAL
28866: PUSH
28867: LD_VAR 0 2
28871: PPUSH
28872: CALL_OW 257
28876: PUSH
28877: LD_INT 5
28879: EQUAL
28880: AND
28881: IFFALSE 28902
// ComBinocular ( unit , x , y ) ;
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 4
28892: PPUSH
28893: LD_VAR 0 5
28897: PPUSH
28898: CALL 32180 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28902: LD_VAR 0 1
28906: PUSH
28907: LD_INT 254
28909: EQUAL
28910: PUSH
28911: LD_VAR 0 2
28915: PPUSH
28916: CALL_OW 264
28920: PUSH
28921: LD_EXP 132
28925: EQUAL
28926: AND
28927: PUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: CALL_OW 263
28937: PUSH
28938: LD_INT 3
28940: EQUAL
28941: AND
28942: IFFALSE 28958
// HackDestroyVehicle ( unit , selectedUnit ) ;
28944: LD_VAR 0 2
28948: PPUSH
28949: LD_VAR 0 3
28953: PPUSH
28954: CALL 30475 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28958: LD_VAR 0 1
28962: PUSH
28963: LD_INT 255
28965: EQUAL
28966: PUSH
28967: LD_VAR 0 2
28971: PPUSH
28972: CALL_OW 264
28976: PUSH
28977: LD_INT 14
28979: PUSH
28980: LD_INT 53
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: IN
28987: AND
28988: PUSH
28989: LD_VAR 0 4
28993: PPUSH
28994: LD_VAR 0 5
28998: PPUSH
28999: CALL_OW 488
29003: AND
29004: IFFALSE 29028
// CutTreeXYR ( unit , x , y , 12 ) ;
29006: LD_VAR 0 2
29010: PPUSH
29011: LD_VAR 0 4
29015: PPUSH
29016: LD_VAR 0 5
29020: PPUSH
29021: LD_INT 12
29023: PPUSH
29024: CALL 29041 0 4
// end ;
29028: LD_VAR 0 6
29032: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29033: LD_INT 0
29035: PPUSH
// end ;
29036: LD_VAR 0 4
29040: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29041: LD_INT 0
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29052: LD_VAR 0 1
29056: NOT
29057: PUSH
29058: LD_VAR 0 2
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 488
29072: NOT
29073: OR
29074: PUSH
29075: LD_VAR 0 4
29079: NOT
29080: OR
29081: IFFALSE 29085
// exit ;
29083: GO 29425
// list := [ ] ;
29085: LD_ADDR_VAR 0 13
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// if x - r < 0 then
29092: LD_VAR 0 2
29096: PUSH
29097: LD_VAR 0 4
29101: MINUS
29102: PUSH
29103: LD_INT 0
29105: LESS
29106: IFFALSE 29118
// min_x := 0 else
29108: LD_ADDR_VAR 0 7
29112: PUSH
29113: LD_INT 0
29115: ST_TO_ADDR
29116: GO 29134
// min_x := x - r ;
29118: LD_ADDR_VAR 0 7
29122: PUSH
29123: LD_VAR 0 2
29127: PUSH
29128: LD_VAR 0 4
29132: MINUS
29133: ST_TO_ADDR
// if y - r < 0 then
29134: LD_VAR 0 3
29138: PUSH
29139: LD_VAR 0 4
29143: MINUS
29144: PUSH
29145: LD_INT 0
29147: LESS
29148: IFFALSE 29160
// min_y := 0 else
29150: LD_ADDR_VAR 0 8
29154: PUSH
29155: LD_INT 0
29157: ST_TO_ADDR
29158: GO 29176
// min_y := y - r ;
29160: LD_ADDR_VAR 0 8
29164: PUSH
29165: LD_VAR 0 3
29169: PUSH
29170: LD_VAR 0 4
29174: MINUS
29175: ST_TO_ADDR
// max_x := x + r ;
29176: LD_ADDR_VAR 0 9
29180: PUSH
29181: LD_VAR 0 2
29185: PUSH
29186: LD_VAR 0 4
29190: PLUS
29191: ST_TO_ADDR
// max_y := y + r ;
29192: LD_ADDR_VAR 0 10
29196: PUSH
29197: LD_VAR 0 3
29201: PUSH
29202: LD_VAR 0 4
29206: PLUS
29207: ST_TO_ADDR
// for _x = min_x to max_x do
29208: LD_ADDR_VAR 0 11
29212: PUSH
29213: DOUBLE
29214: LD_VAR 0 7
29218: DEC
29219: ST_TO_ADDR
29220: LD_VAR 0 9
29224: PUSH
29225: FOR_TO
29226: IFFALSE 29343
// for _y = min_y to max_y do
29228: LD_ADDR_VAR 0 12
29232: PUSH
29233: DOUBLE
29234: LD_VAR 0 8
29238: DEC
29239: ST_TO_ADDR
29240: LD_VAR 0 10
29244: PUSH
29245: FOR_TO
29246: IFFALSE 29339
// begin if not ValidHex ( _x , _y ) then
29248: LD_VAR 0 11
29252: PPUSH
29253: LD_VAR 0 12
29257: PPUSH
29258: CALL_OW 488
29262: NOT
29263: IFFALSE 29267
// continue ;
29265: GO 29245
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29267: LD_VAR 0 11
29271: PPUSH
29272: LD_VAR 0 12
29276: PPUSH
29277: CALL_OW 351
29281: PUSH
29282: LD_VAR 0 11
29286: PPUSH
29287: LD_VAR 0 12
29291: PPUSH
29292: CALL_OW 554
29296: AND
29297: IFFALSE 29337
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29299: LD_ADDR_VAR 0 13
29303: PUSH
29304: LD_VAR 0 13
29308: PPUSH
29309: LD_VAR 0 13
29313: PUSH
29314: LD_INT 1
29316: PLUS
29317: PPUSH
29318: LD_VAR 0 11
29322: PUSH
29323: LD_VAR 0 12
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 2
29336: ST_TO_ADDR
// end ;
29337: GO 29245
29339: POP
29340: POP
29341: GO 29225
29343: POP
29344: POP
// if not list then
29345: LD_VAR 0 13
29349: NOT
29350: IFFALSE 29354
// exit ;
29352: GO 29425
// for i in list do
29354: LD_ADDR_VAR 0 6
29358: PUSH
29359: LD_VAR 0 13
29363: PUSH
29364: FOR_IN
29365: IFFALSE 29423
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29367: LD_VAR 0 1
29371: PPUSH
29372: LD_STRING M
29374: PUSH
29375: LD_VAR 0 6
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: PUSH
29384: LD_VAR 0 6
29388: PUSH
29389: LD_INT 2
29391: ARRAY
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: PPUSH
29417: CALL_OW 447
29421: GO 29364
29423: POP
29424: POP
// end ;
29425: LD_VAR 0 5
29429: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29430: LD_EXP 120
29434: NOT
29435: IFFALSE 29485
29437: GO 29439
29439: DISABLE
// begin initHack := true ;
29440: LD_ADDR_EXP 120
29444: PUSH
29445: LD_INT 1
29447: ST_TO_ADDR
// hackTanks := [ ] ;
29448: LD_ADDR_EXP 121
29452: PUSH
29453: EMPTY
29454: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29455: LD_ADDR_EXP 122
29459: PUSH
29460: EMPTY
29461: ST_TO_ADDR
// hackLimit := 3 ;
29462: LD_ADDR_EXP 123
29466: PUSH
29467: LD_INT 3
29469: ST_TO_ADDR
// hackDist := 12 ;
29470: LD_ADDR_EXP 124
29474: PUSH
29475: LD_INT 12
29477: ST_TO_ADDR
// hackCounter := [ ] ;
29478: LD_ADDR_EXP 125
29482: PUSH
29483: EMPTY
29484: ST_TO_ADDR
// end ;
29485: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29486: LD_EXP 120
29490: PUSH
29491: LD_INT 34
29493: PUSH
29494: LD_EXP 132
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PPUSH
29503: CALL_OW 69
29507: AND
29508: IFFALSE 29763
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
// begin enable ;
29517: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29518: LD_ADDR_VAR 0 1
29522: PUSH
29523: LD_INT 34
29525: PUSH
29526: LD_EXP 132
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 69
29539: PUSH
29540: FOR_IN
29541: IFFALSE 29761
// begin if not i in hackTanks then
29543: LD_VAR 0 1
29547: PUSH
29548: LD_EXP 121
29552: IN
29553: NOT
29554: IFFALSE 29637
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29556: LD_ADDR_EXP 121
29560: PUSH
29561: LD_EXP 121
29565: PPUSH
29566: LD_EXP 121
29570: PUSH
29571: LD_INT 1
29573: PLUS
29574: PPUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 1
29584: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29585: LD_ADDR_EXP 122
29589: PUSH
29590: LD_EXP 122
29594: PPUSH
29595: LD_EXP 122
29599: PUSH
29600: LD_INT 1
29602: PLUS
29603: PPUSH
29604: EMPTY
29605: PPUSH
29606: CALL_OW 1
29610: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29611: LD_ADDR_EXP 125
29615: PUSH
29616: LD_EXP 125
29620: PPUSH
29621: LD_EXP 125
29625: PUSH
29626: LD_INT 1
29628: PLUS
29629: PPUSH
29630: EMPTY
29631: PPUSH
29632: CALL_OW 1
29636: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 302
29646: NOT
29647: IFFALSE 29660
// begin HackUnlinkAll ( i ) ;
29649: LD_VAR 0 1
29653: PPUSH
29654: CALL 29766 0 1
// continue ;
29658: GO 29540
// end ; HackCheckCapturedStatus ( i ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL 30209 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29669: LD_ADDR_VAR 0 2
29673: PUSH
29674: LD_INT 81
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 255
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 33
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 91
29703: PUSH
29704: LD_VAR 0 1
29708: PUSH
29709: LD_EXP 124
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 50
29721: PUSH
29722: EMPTY
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// continue ;
29743: GO 29540
// HackLink ( i , tmp ) ;
29745: LD_VAR 0 1
29749: PPUSH
29750: LD_VAR 0 2
29754: PPUSH
29755: CALL 29902 0 2
// end ;
29759: GO 29540
29761: POP
29762: POP
// end ;
29763: PPOPN 2
29765: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29766: LD_INT 0
29768: PPUSH
29769: PPUSH
29770: PPUSH
// if not hack in hackTanks then
29771: LD_VAR 0 1
29775: PUSH
29776: LD_EXP 121
29780: IN
29781: NOT
29782: IFFALSE 29786
// exit ;
29784: GO 29897
// index := GetElementIndex ( hackTanks , hack ) ;
29786: LD_ADDR_VAR 0 4
29790: PUSH
29791: LD_EXP 121
29795: PPUSH
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL 37702 0 2
29805: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29806: LD_EXP 122
29810: PUSH
29811: LD_VAR 0 4
29815: ARRAY
29816: IFFALSE 29897
// begin for i in hackTanksCaptured [ index ] do
29818: LD_ADDR_VAR 0 3
29822: PUSH
29823: LD_EXP 122
29827: PUSH
29828: LD_VAR 0 4
29832: ARRAY
29833: PUSH
29834: FOR_IN
29835: IFFALSE 29861
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29837: LD_VAR 0 3
29841: PUSH
29842: LD_INT 1
29844: ARRAY
29845: PPUSH
29846: LD_VAR 0 3
29850: PUSH
29851: LD_INT 2
29853: ARRAY
29854: PPUSH
29855: CALL_OW 235
29859: GO 29834
29861: POP
29862: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29863: LD_ADDR_EXP 122
29867: PUSH
29868: LD_EXP 122
29872: PPUSH
29873: LD_VAR 0 4
29877: PPUSH
29878: EMPTY
29879: PPUSH
29880: CALL_OW 1
29884: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_INT 0
29892: PPUSH
29893: CALL_OW 505
// end ; end ;
29897: LD_VAR 0 2
29901: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29902: LD_INT 0
29904: PPUSH
29905: PPUSH
29906: PPUSH
// if not hack in hackTanks or not vehicles then
29907: LD_VAR 0 1
29911: PUSH
29912: LD_EXP 121
29916: IN
29917: NOT
29918: PUSH
29919: LD_VAR 0 2
29923: NOT
29924: OR
29925: IFFALSE 29929
// exit ;
29927: GO 30204
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: LD_VAR 0 2
29943: PPUSH
29944: LD_INT 1
29946: PPUSH
29947: LD_INT 1
29949: PPUSH
29950: CALL 38352 0 4
29954: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29955: LD_ADDR_VAR 0 5
29959: PUSH
29960: LD_EXP 121
29964: PPUSH
29965: LD_VAR 0 1
29969: PPUSH
29970: CALL 37702 0 2
29974: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29975: LD_EXP 122
29979: PUSH
29980: LD_VAR 0 5
29984: ARRAY
29985: PUSH
29986: LD_EXP 123
29990: LESS
29991: IFFALSE 30180
// begin for i := 1 to vehicles do
29993: LD_ADDR_VAR 0 4
29997: PUSH
29998: DOUBLE
29999: LD_INT 1
30001: DEC
30002: ST_TO_ADDR
30003: LD_VAR 0 2
30007: PUSH
30008: FOR_TO
30009: IFFALSE 30178
// begin if hackTanksCaptured [ index ] = hackLimit then
30011: LD_EXP 122
30015: PUSH
30016: LD_VAR 0 5
30020: ARRAY
30021: PUSH
30022: LD_EXP 123
30026: EQUAL
30027: IFFALSE 30031
// break ;
30029: GO 30178
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30031: LD_ADDR_EXP 125
30035: PUSH
30036: LD_EXP 125
30040: PPUSH
30041: LD_VAR 0 5
30045: PPUSH
30046: LD_EXP 125
30050: PUSH
30051: LD_VAR 0 5
30055: ARRAY
30056: PUSH
30057: LD_INT 1
30059: PLUS
30060: PPUSH
30061: CALL_OW 1
30065: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30066: LD_ADDR_EXP 122
30070: PUSH
30071: LD_EXP 122
30075: PPUSH
30076: LD_VAR 0 5
30080: PUSH
30081: LD_EXP 122
30085: PUSH
30086: LD_VAR 0 5
30090: ARRAY
30091: PUSH
30092: LD_INT 1
30094: PLUS
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PPUSH
30100: LD_VAR 0 2
30104: PUSH
30105: LD_VAR 0 4
30109: ARRAY
30110: PUSH
30111: LD_VAR 0 2
30115: PUSH
30116: LD_VAR 0 4
30120: ARRAY
30121: PPUSH
30122: CALL_OW 255
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PPUSH
30131: CALL 37917 0 3
30135: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30136: LD_VAR 0 2
30140: PUSH
30141: LD_VAR 0 4
30145: ARRAY
30146: PPUSH
30147: LD_VAR 0 1
30151: PPUSH
30152: CALL_OW 255
30156: PPUSH
30157: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30161: LD_VAR 0 2
30165: PUSH
30166: LD_VAR 0 4
30170: ARRAY
30171: PPUSH
30172: CALL_OW 141
// end ;
30176: GO 30008
30178: POP
30179: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_EXP 122
30189: PUSH
30190: LD_VAR 0 5
30194: ARRAY
30195: PUSH
30196: LD_INT 0
30198: PLUS
30199: PPUSH
30200: CALL_OW 505
// end ;
30204: LD_VAR 0 3
30208: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
30213: PPUSH
30214: PPUSH
// if not hack in hackTanks then
30215: LD_VAR 0 1
30219: PUSH
30220: LD_EXP 121
30224: IN
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30470
// index := GetElementIndex ( hackTanks , hack ) ;
30230: LD_ADDR_VAR 0 4
30234: PUSH
30235: LD_EXP 121
30239: PPUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL 37702 0 2
30249: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30250: LD_ADDR_VAR 0 3
30254: PUSH
30255: DOUBLE
30256: LD_EXP 122
30260: PUSH
30261: LD_VAR 0 4
30265: ARRAY
30266: INC
30267: ST_TO_ADDR
30268: LD_INT 1
30270: PUSH
30271: FOR_DOWNTO
30272: IFFALSE 30444
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30274: LD_ADDR_VAR 0 5
30278: PUSH
30279: LD_EXP 122
30283: PUSH
30284: LD_VAR 0 4
30288: ARRAY
30289: PUSH
30290: LD_VAR 0 3
30294: ARRAY
30295: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30296: LD_VAR 0 5
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: CALL_OW 302
30309: NOT
30310: PUSH
30311: LD_VAR 0 5
30315: PUSH
30316: LD_INT 1
30318: ARRAY
30319: PPUSH
30320: CALL_OW 255
30324: PUSH
30325: LD_VAR 0 1
30329: PPUSH
30330: CALL_OW 255
30334: NONEQUAL
30335: OR
30336: IFFALSE 30442
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30338: LD_VAR 0 5
30342: PUSH
30343: LD_INT 1
30345: ARRAY
30346: PPUSH
30347: CALL_OW 305
30351: PUSH
30352: LD_VAR 0 5
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: CALL_OW 255
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 255
30375: EQUAL
30376: AND
30377: IFFALSE 30401
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30379: LD_VAR 0 5
30383: PUSH
30384: LD_INT 1
30386: ARRAY
30387: PPUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_INT 2
30395: ARRAY
30396: PPUSH
30397: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30401: LD_ADDR_EXP 122
30405: PUSH
30406: LD_EXP 122
30410: PPUSH
30411: LD_VAR 0 4
30415: PPUSH
30416: LD_EXP 122
30420: PUSH
30421: LD_VAR 0 4
30425: ARRAY
30426: PPUSH
30427: LD_VAR 0 3
30431: PPUSH
30432: CALL_OW 3
30436: PPUSH
30437: CALL_OW 1
30441: ST_TO_ADDR
// end ; end ;
30442: GO 30271
30444: POP
30445: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30446: LD_VAR 0 1
30450: PPUSH
30451: LD_EXP 122
30455: PUSH
30456: LD_VAR 0 4
30460: ARRAY
30461: PUSH
30462: LD_INT 0
30464: PLUS
30465: PPUSH
30466: CALL_OW 505
// end ;
30470: LD_VAR 0 2
30474: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
// if not hack in hackTanks then
30481: LD_VAR 0 1
30485: PUSH
30486: LD_EXP 121
30490: IN
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 30581
// index := GetElementIndex ( hackTanks , hack ) ;
30496: LD_ADDR_VAR 0 5
30500: PUSH
30501: LD_EXP 121
30505: PPUSH
30506: LD_VAR 0 1
30510: PPUSH
30511: CALL 37702 0 2
30515: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30516: LD_ADDR_VAR 0 4
30520: PUSH
30521: DOUBLE
30522: LD_INT 1
30524: DEC
30525: ST_TO_ADDR
30526: LD_EXP 122
30530: PUSH
30531: LD_VAR 0 5
30535: ARRAY
30536: PUSH
30537: FOR_TO
30538: IFFALSE 30579
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30540: LD_EXP 122
30544: PUSH
30545: LD_VAR 0 5
30549: ARRAY
30550: PUSH
30551: LD_VAR 0 4
30555: ARRAY
30556: PUSH
30557: LD_INT 1
30559: ARRAY
30560: PUSH
30561: LD_VAR 0 2
30565: EQUAL
30566: IFFALSE 30577
// KillUnit ( vehicle ) ;
30568: LD_VAR 0 2
30572: PPUSH
30573: CALL_OW 66
30577: GO 30537
30579: POP
30580: POP
// end ;
30581: LD_VAR 0 3
30585: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30586: LD_EXP 126
30590: NOT
30591: IFFALSE 30626
30593: GO 30595
30595: DISABLE
// begin initMiner := true ;
30596: LD_ADDR_EXP 126
30600: PUSH
30601: LD_INT 1
30603: ST_TO_ADDR
// minersList := [ ] ;
30604: LD_ADDR_EXP 127
30608: PUSH
30609: EMPTY
30610: ST_TO_ADDR
// minerMinesList := [ ] ;
30611: LD_ADDR_EXP 128
30615: PUSH
30616: EMPTY
30617: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30618: LD_ADDR_EXP 129
30622: PUSH
30623: LD_INT 5
30625: ST_TO_ADDR
// end ;
30626: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30627: LD_EXP 126
30631: PUSH
30632: LD_INT 34
30634: PUSH
30635: LD_EXP 137
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 69
30648: AND
30649: IFFALSE 31112
30651: GO 30653
30653: DISABLE
30654: LD_INT 0
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
// begin enable ;
30660: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30661: LD_ADDR_VAR 0 1
30665: PUSH
30666: LD_INT 34
30668: PUSH
30669: LD_EXP 137
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PPUSH
30678: CALL_OW 69
30682: PUSH
30683: FOR_IN
30684: IFFALSE 30756
// begin if not i in minersList then
30686: LD_VAR 0 1
30690: PUSH
30691: LD_EXP 127
30695: IN
30696: NOT
30697: IFFALSE 30754
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30699: LD_ADDR_EXP 127
30703: PUSH
30704: LD_EXP 127
30708: PPUSH
30709: LD_EXP 127
30713: PUSH
30714: LD_INT 1
30716: PLUS
30717: PPUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 1
30727: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30728: LD_ADDR_EXP 128
30732: PUSH
30733: LD_EXP 128
30737: PPUSH
30738: LD_EXP 128
30742: PUSH
30743: LD_INT 1
30745: PLUS
30746: PPUSH
30747: EMPTY
30748: PPUSH
30749: CALL_OW 1
30753: ST_TO_ADDR
// end end ;
30754: GO 30683
30756: POP
30757: POP
// for i := minerMinesList downto 1 do
30758: LD_ADDR_VAR 0 1
30762: PUSH
30763: DOUBLE
30764: LD_EXP 128
30768: INC
30769: ST_TO_ADDR
30770: LD_INT 1
30772: PUSH
30773: FOR_DOWNTO
30774: IFFALSE 31110
// begin if IsLive ( minersList [ i ] ) then
30776: LD_EXP 127
30780: PUSH
30781: LD_VAR 0 1
30785: ARRAY
30786: PPUSH
30787: CALL_OW 300
30791: IFFALSE 30819
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30793: LD_EXP 127
30797: PUSH
30798: LD_VAR 0 1
30802: ARRAY
30803: PPUSH
30804: LD_EXP 128
30808: PUSH
30809: LD_VAR 0 1
30813: ARRAY
30814: PPUSH
30815: CALL_OW 505
// if not minerMinesList [ i ] then
30819: LD_EXP 128
30823: PUSH
30824: LD_VAR 0 1
30828: ARRAY
30829: NOT
30830: IFFALSE 30834
// continue ;
30832: GO 30773
// for j := minerMinesList [ i ] downto 1 do
30834: LD_ADDR_VAR 0 2
30838: PUSH
30839: DOUBLE
30840: LD_EXP 128
30844: PUSH
30845: LD_VAR 0 1
30849: ARRAY
30850: INC
30851: ST_TO_ADDR
30852: LD_INT 1
30854: PUSH
30855: FOR_DOWNTO
30856: IFFALSE 31106
// begin side := GetSide ( minersList [ i ] ) ;
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_EXP 127
30867: PUSH
30868: LD_VAR 0 1
30872: ARRAY
30873: PPUSH
30874: CALL_OW 255
30878: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30879: LD_ADDR_VAR 0 4
30883: PUSH
30884: LD_EXP 128
30888: PUSH
30889: LD_VAR 0 1
30893: ARRAY
30894: PUSH
30895: LD_VAR 0 2
30899: ARRAY
30900: PUSH
30901: LD_INT 1
30903: ARRAY
30904: PPUSH
30905: LD_EXP 128
30909: PUSH
30910: LD_VAR 0 1
30914: ARRAY
30915: PUSH
30916: LD_VAR 0 2
30920: ARRAY
30921: PUSH
30922: LD_INT 2
30924: ARRAY
30925: PPUSH
30926: CALL_OW 428
30930: ST_TO_ADDR
// if not tmp then
30931: LD_VAR 0 4
30935: NOT
30936: IFFALSE 30940
// continue ;
30938: GO 30855
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30940: LD_VAR 0 4
30944: PUSH
30945: LD_INT 81
30947: PUSH
30948: LD_VAR 0 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 69
30961: IN
30962: PUSH
30963: LD_EXP 128
30967: PUSH
30968: LD_VAR 0 1
30972: ARRAY
30973: PUSH
30974: LD_VAR 0 2
30978: ARRAY
30979: PUSH
30980: LD_INT 1
30982: ARRAY
30983: PPUSH
30984: LD_EXP 128
30988: PUSH
30989: LD_VAR 0 1
30993: ARRAY
30994: PUSH
30995: LD_VAR 0 2
30999: ARRAY
31000: PUSH
31001: LD_INT 2
31003: ARRAY
31004: PPUSH
31005: CALL_OW 458
31009: AND
31010: IFFALSE 31104
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31012: LD_EXP 128
31016: PUSH
31017: LD_VAR 0 1
31021: ARRAY
31022: PUSH
31023: LD_VAR 0 2
31027: ARRAY
31028: PUSH
31029: LD_INT 1
31031: ARRAY
31032: PPUSH
31033: LD_EXP 128
31037: PUSH
31038: LD_VAR 0 1
31042: ARRAY
31043: PUSH
31044: LD_VAR 0 2
31048: ARRAY
31049: PUSH
31050: LD_INT 2
31052: ARRAY
31053: PPUSH
31054: LD_VAR 0 3
31058: PPUSH
31059: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31063: LD_ADDR_EXP 128
31067: PUSH
31068: LD_EXP 128
31072: PPUSH
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_EXP 128
31082: PUSH
31083: LD_VAR 0 1
31087: ARRAY
31088: PPUSH
31089: LD_VAR 0 2
31093: PPUSH
31094: CALL_OW 3
31098: PPUSH
31099: CALL_OW 1
31103: ST_TO_ADDR
// end ; end ;
31104: GO 30855
31106: POP
31107: POP
// end ;
31108: GO 30773
31110: POP
31111: POP
// end ;
31112: PPOPN 4
31114: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31115: LD_INT 0
31117: PPUSH
31118: PPUSH
// result := false ;
31119: LD_ADDR_VAR 0 4
31123: PUSH
31124: LD_INT 0
31126: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 264
31136: PUSH
31137: LD_EXP 137
31141: EQUAL
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31387
// index := GetElementIndex ( minersList , unit ) ;
31147: LD_ADDR_VAR 0 5
31151: PUSH
31152: LD_EXP 127
31156: PPUSH
31157: LD_VAR 0 1
31161: PPUSH
31162: CALL 37702 0 2
31166: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31167: LD_EXP 128
31171: PUSH
31172: LD_VAR 0 5
31176: ARRAY
31177: PUSH
31178: LD_EXP 129
31182: GREATEREQUAL
31183: IFFALSE 31187
// exit ;
31185: GO 31387
// ComMoveXY ( unit , x , y ) ;
31187: LD_VAR 0 1
31191: PPUSH
31192: LD_VAR 0 2
31196: PPUSH
31197: LD_VAR 0 3
31201: PPUSH
31202: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31206: LD_INT 35
31208: PPUSH
31209: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31213: LD_VAR 0 1
31217: PPUSH
31218: LD_VAR 0 2
31222: PPUSH
31223: LD_VAR 0 3
31227: PPUSH
31228: CALL 68474 0 3
31232: NOT
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 314
31243: AND
31244: IFFALSE 31248
// exit ;
31246: GO 31387
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31248: LD_VAR 0 2
31252: PPUSH
31253: LD_VAR 0 3
31257: PPUSH
31258: CALL_OW 428
31262: PUSH
31263: LD_VAR 0 1
31267: EQUAL
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 314
31278: NOT
31279: AND
31280: IFFALSE 31206
// PlaySoundXY ( x , y , PlantMine ) ;
31282: LD_VAR 0 2
31286: PPUSH
31287: LD_VAR 0 3
31291: PPUSH
31292: LD_STRING PlantMine
31294: PPUSH
31295: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 255
31318: PPUSH
31319: LD_INT 0
31321: PPUSH
31322: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31326: LD_ADDR_EXP 128
31330: PUSH
31331: LD_EXP 128
31335: PPUSH
31336: LD_VAR 0 5
31340: PUSH
31341: LD_EXP 128
31345: PUSH
31346: LD_VAR 0 5
31350: ARRAY
31351: PUSH
31352: LD_INT 1
31354: PLUS
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL 37917 0 3
31378: ST_TO_ADDR
// result := true ;
31379: LD_ADDR_VAR 0 4
31383: PUSH
31384: LD_INT 1
31386: ST_TO_ADDR
// end ;
31387: LD_VAR 0 4
31391: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31392: LD_INT 0
31394: PPUSH
31395: PPUSH
31396: PPUSH
// if not unit in minersList then
31397: LD_VAR 0 1
31401: PUSH
31402: LD_EXP 127
31406: IN
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31804
// index := GetElementIndex ( minersList , unit ) ;
31412: LD_ADDR_VAR 0 6
31416: PUSH
31417: LD_EXP 127
31421: PPUSH
31422: LD_VAR 0 1
31426: PPUSH
31427: CALL 37702 0 2
31431: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31432: LD_ADDR_VAR 0 5
31436: PUSH
31437: DOUBLE
31438: LD_EXP 128
31442: PUSH
31443: LD_VAR 0 6
31447: ARRAY
31448: INC
31449: ST_TO_ADDR
31450: LD_INT 1
31452: PUSH
31453: FOR_DOWNTO
31454: IFFALSE 31615
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31456: LD_EXP 128
31460: PUSH
31461: LD_VAR 0 6
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 5
31471: ARRAY
31472: PUSH
31473: LD_INT 1
31475: ARRAY
31476: PUSH
31477: LD_VAR 0 2
31481: EQUAL
31482: PUSH
31483: LD_EXP 128
31487: PUSH
31488: LD_VAR 0 6
31492: ARRAY
31493: PUSH
31494: LD_VAR 0 5
31498: ARRAY
31499: PUSH
31500: LD_INT 2
31502: ARRAY
31503: PUSH
31504: LD_VAR 0 3
31508: EQUAL
31509: AND
31510: IFFALSE 31613
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31512: LD_EXP 128
31516: PUSH
31517: LD_VAR 0 6
31521: ARRAY
31522: PUSH
31523: LD_VAR 0 5
31527: ARRAY
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PPUSH
31533: LD_EXP 128
31537: PUSH
31538: LD_VAR 0 6
31542: ARRAY
31543: PUSH
31544: LD_VAR 0 5
31548: ARRAY
31549: PUSH
31550: LD_INT 2
31552: ARRAY
31553: PPUSH
31554: LD_VAR 0 1
31558: PPUSH
31559: CALL_OW 255
31563: PPUSH
31564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31568: LD_ADDR_EXP 128
31572: PUSH
31573: LD_EXP 128
31577: PPUSH
31578: LD_VAR 0 6
31582: PPUSH
31583: LD_EXP 128
31587: PUSH
31588: LD_VAR 0 6
31592: ARRAY
31593: PPUSH
31594: LD_VAR 0 5
31598: PPUSH
31599: CALL_OW 3
31603: PPUSH
31604: CALL_OW 1
31608: ST_TO_ADDR
// exit ;
31609: POP
31610: POP
31611: GO 31804
// end ; end ;
31613: GO 31453
31615: POP
31616: POP
// for i := minerMinesList [ index ] downto 1 do
31617: LD_ADDR_VAR 0 5
31621: PUSH
31622: DOUBLE
31623: LD_EXP 128
31627: PUSH
31628: LD_VAR 0 6
31632: ARRAY
31633: INC
31634: ST_TO_ADDR
31635: LD_INT 1
31637: PUSH
31638: FOR_DOWNTO
31639: IFFALSE 31802
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31641: LD_EXP 128
31645: PUSH
31646: LD_VAR 0 6
31650: ARRAY
31651: PUSH
31652: LD_VAR 0 5
31656: ARRAY
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: PPUSH
31662: LD_EXP 128
31666: PUSH
31667: LD_VAR 0 6
31671: ARRAY
31672: PUSH
31673: LD_VAR 0 5
31677: ARRAY
31678: PUSH
31679: LD_INT 2
31681: ARRAY
31682: PPUSH
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: CALL_OW 298
31697: PUSH
31698: LD_INT 6
31700: LESS
31701: IFFALSE 31800
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31703: LD_EXP 128
31707: PUSH
31708: LD_VAR 0 6
31712: ARRAY
31713: PUSH
31714: LD_VAR 0 5
31718: ARRAY
31719: PUSH
31720: LD_INT 1
31722: ARRAY
31723: PPUSH
31724: LD_EXP 128
31728: PUSH
31729: LD_VAR 0 6
31733: ARRAY
31734: PUSH
31735: LD_VAR 0 5
31739: ARRAY
31740: PUSH
31741: LD_INT 2
31743: ARRAY
31744: PPUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 255
31754: PPUSH
31755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31759: LD_ADDR_EXP 128
31763: PUSH
31764: LD_EXP 128
31768: PPUSH
31769: LD_VAR 0 6
31773: PPUSH
31774: LD_EXP 128
31778: PUSH
31779: LD_VAR 0 6
31783: ARRAY
31784: PPUSH
31785: LD_VAR 0 5
31789: PPUSH
31790: CALL_OW 3
31794: PPUSH
31795: CALL_OW 1
31799: ST_TO_ADDR
// end ; end ;
31800: GO 31638
31802: POP
31803: POP
// end ;
31804: LD_VAR 0 4
31808: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31809: LD_INT 0
31811: PPUSH
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
31818: PPUSH
31819: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 264
31829: PUSH
31830: LD_EXP 137
31834: EQUAL
31835: NOT
31836: PUSH
31837: LD_VAR 0 1
31841: PUSH
31842: LD_EXP 127
31846: IN
31847: NOT
31848: OR
31849: IFFALSE 31853
// exit ;
31851: GO 32175
// index := GetElementIndex ( minersList , unit ) ;
31853: LD_ADDR_VAR 0 6
31857: PUSH
31858: LD_EXP 127
31862: PPUSH
31863: LD_VAR 0 1
31867: PPUSH
31868: CALL 37702 0 2
31872: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31873: LD_ADDR_VAR 0 8
31877: PUSH
31878: LD_EXP 129
31882: PUSH
31883: LD_EXP 128
31887: PUSH
31888: LD_VAR 0 6
31892: ARRAY
31893: MINUS
31894: ST_TO_ADDR
// if not minesFreeAmount then
31895: LD_VAR 0 8
31899: NOT
31900: IFFALSE 31904
// exit ;
31902: GO 32175
// tmp := [ ] ;
31904: LD_ADDR_VAR 0 7
31908: PUSH
31909: EMPTY
31910: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: DOUBLE
31917: LD_INT 1
31919: DEC
31920: ST_TO_ADDR
31921: LD_VAR 0 8
31925: PUSH
31926: FOR_TO
31927: IFFALSE 32122
// begin _d := rand ( 0 , 5 ) ;
31929: LD_ADDR_VAR 0 11
31933: PUSH
31934: LD_INT 0
31936: PPUSH
31937: LD_INT 5
31939: PPUSH
31940: CALL_OW 12
31944: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31945: LD_ADDR_VAR 0 12
31949: PUSH
31950: LD_INT 2
31952: PPUSH
31953: LD_INT 6
31955: PPUSH
31956: CALL_OW 12
31960: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31961: LD_ADDR_VAR 0 9
31965: PUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: LD_VAR 0 11
31975: PPUSH
31976: LD_VAR 0 12
31980: PPUSH
31981: CALL_OW 272
31985: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31986: LD_ADDR_VAR 0 10
31990: PUSH
31991: LD_VAR 0 3
31995: PPUSH
31996: LD_VAR 0 11
32000: PPUSH
32001: LD_VAR 0 12
32005: PPUSH
32006: CALL_OW 273
32010: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32011: LD_VAR 0 9
32015: PPUSH
32016: LD_VAR 0 10
32020: PPUSH
32021: CALL_OW 488
32025: PUSH
32026: LD_VAR 0 9
32030: PUSH
32031: LD_VAR 0 10
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_VAR 0 7
32044: IN
32045: NOT
32046: AND
32047: PUSH
32048: LD_VAR 0 9
32052: PPUSH
32053: LD_VAR 0 10
32057: PPUSH
32058: CALL_OW 458
32062: NOT
32063: AND
32064: IFFALSE 32106
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32066: LD_ADDR_VAR 0 7
32070: PUSH
32071: LD_VAR 0 7
32075: PPUSH
32076: LD_VAR 0 7
32080: PUSH
32081: LD_INT 1
32083: PLUS
32084: PPUSH
32085: LD_VAR 0 9
32089: PUSH
32090: LD_VAR 0 10
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 1
32103: ST_TO_ADDR
32104: GO 32120
// i := i - 1 ;
32106: LD_ADDR_VAR 0 5
32110: PUSH
32111: LD_VAR 0 5
32115: PUSH
32116: LD_INT 1
32118: MINUS
32119: ST_TO_ADDR
// end ;
32120: GO 31926
32122: POP
32123: POP
// for i in tmp do
32124: LD_ADDR_VAR 0 5
32128: PUSH
32129: LD_VAR 0 7
32133: PUSH
32134: FOR_IN
32135: IFFALSE 32173
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32137: LD_VAR 0 1
32141: PPUSH
32142: LD_VAR 0 5
32146: PUSH
32147: LD_INT 1
32149: ARRAY
32150: PPUSH
32151: LD_VAR 0 5
32155: PUSH
32156: LD_INT 2
32158: ARRAY
32159: PPUSH
32160: CALL 31115 0 3
32164: NOT
32165: IFFALSE 32171
// exit ;
32167: POP
32168: POP
32169: GO 32175
32171: GO 32134
32173: POP
32174: POP
// end ;
32175: LD_VAR 0 4
32179: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32180: LD_INT 0
32182: PPUSH
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
32187: PPUSH
32188: PPUSH
// if not GetClass ( unit ) = class_sniper then
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 257
32198: PUSH
32199: LD_INT 5
32201: EQUAL
32202: NOT
32203: IFFALSE 32207
// exit ;
32205: GO 32595
// dist := 8 ;
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: LD_INT 8
32214: ST_TO_ADDR
// viewRange := 12 ;
32215: LD_ADDR_VAR 0 7
32219: PUSH
32220: LD_INT 12
32222: ST_TO_ADDR
// side := GetSide ( unit ) ;
32223: LD_ADDR_VAR 0 6
32227: PUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 255
32237: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32238: LD_INT 61
32240: PPUSH
32241: LD_VAR 0 6
32245: PPUSH
32246: CALL_OW 321
32250: PUSH
32251: LD_INT 2
32253: EQUAL
32254: IFFALSE 32264
// viewRange := 16 ;
32256: LD_ADDR_VAR 0 7
32260: PUSH
32261: LD_INT 16
32263: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32264: LD_VAR 0 1
32268: PPUSH
32269: LD_VAR 0 2
32273: PPUSH
32274: LD_VAR 0 3
32278: PPUSH
32279: CALL_OW 297
32283: PUSH
32284: LD_VAR 0 5
32288: GREATER
32289: IFFALSE 32368
// begin ComMoveXY ( unit , x , y ) ;
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_VAR 0 2
32300: PPUSH
32301: LD_VAR 0 3
32305: PPUSH
32306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32310: LD_INT 35
32312: PPUSH
32313: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32317: LD_VAR 0 1
32321: PPUSH
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: CALL 68474 0 3
32336: NOT
32337: IFFALSE 32341
// exit ;
32339: GO 32595
// until GetDistUnitXY ( unit , x , y ) < dist ;
32341: LD_VAR 0 1
32345: PPUSH
32346: LD_VAR 0 2
32350: PPUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: CALL_OW 297
32360: PUSH
32361: LD_VAR 0 5
32365: LESS
32366: IFFALSE 32310
// end ; ComTurnXY ( unit , x , y ) ;
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_VAR 0 3
32382: PPUSH
32383: CALL_OW 118
// wait ( 5 ) ;
32387: LD_INT 5
32389: PPUSH
32390: CALL_OW 67
// _d := GetDir ( unit ) ;
32394: LD_ADDR_VAR 0 10
32398: PUSH
32399: LD_VAR 0 1
32403: PPUSH
32404: CALL_OW 254
32408: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32409: LD_ADDR_VAR 0 8
32413: PUSH
32414: LD_VAR 0 1
32418: PPUSH
32419: CALL_OW 250
32423: PPUSH
32424: LD_VAR 0 10
32428: PPUSH
32429: LD_VAR 0 5
32433: PPUSH
32434: CALL_OW 272
32438: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32439: LD_ADDR_VAR 0 9
32443: PUSH
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 251
32453: PPUSH
32454: LD_VAR 0 10
32458: PPUSH
32459: LD_VAR 0 5
32463: PPUSH
32464: CALL_OW 273
32468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32469: LD_VAR 0 8
32473: PPUSH
32474: LD_VAR 0 9
32478: PPUSH
32479: CALL_OW 488
32483: NOT
32484: IFFALSE 32488
// exit ;
32486: GO 32595
// ComAnimCustom ( unit , 1 ) ;
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_INT 1
32495: PPUSH
32496: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32500: LD_VAR 0 8
32504: PPUSH
32505: LD_VAR 0 9
32509: PPUSH
32510: LD_VAR 0 6
32514: PPUSH
32515: LD_VAR 0 7
32519: PPUSH
32520: CALL_OW 330
// repeat wait ( 1 ) ;
32524: LD_INT 1
32526: PPUSH
32527: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32531: LD_VAR 0 1
32535: PPUSH
32536: CALL_OW 316
32540: PUSH
32541: LD_VAR 0 1
32545: PPUSH
32546: CALL_OW 314
32550: OR
32551: PUSH
32552: LD_VAR 0 1
32556: PPUSH
32557: CALL_OW 302
32561: NOT
32562: OR
32563: PUSH
32564: LD_VAR 0 1
32568: PPUSH
32569: CALL_OW 301
32573: OR
32574: IFFALSE 32524
// RemoveSeeing ( _x , _y , side ) ;
32576: LD_VAR 0 8
32580: PPUSH
32581: LD_VAR 0 9
32585: PPUSH
32586: LD_VAR 0 6
32590: PPUSH
32591: CALL_OW 331
// end ; end_of_file
32595: LD_VAR 0 4
32599: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32600: LD_VAR 0 1
32604: PUSH
32605: LD_INT 200
32607: DOUBLE
32608: GREATEREQUAL
32609: IFFALSE 32617
32611: LD_INT 299
32613: DOUBLE
32614: LESSEQUAL
32615: IFTRUE 32619
32617: GO 32651
32619: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32620: LD_VAR 0 1
32624: PPUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: LD_VAR 0 3
32634: PPUSH
32635: LD_VAR 0 4
32639: PPUSH
32640: LD_VAR 0 5
32644: PPUSH
32645: CALL 28717 0 5
32649: GO 32728
32651: LD_INT 300
32653: DOUBLE
32654: GREATEREQUAL
32655: IFFALSE 32663
32657: LD_INT 399
32659: DOUBLE
32660: LESSEQUAL
32661: IFTRUE 32665
32663: GO 32727
32665: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32666: LD_VAR 0 1
32670: PPUSH
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_VAR 0 3
32680: PPUSH
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: LD_VAR 0 6
32695: PPUSH
32696: LD_VAR 0 7
32700: PPUSH
32701: LD_VAR 0 8
32705: PPUSH
32706: LD_VAR 0 9
32710: PPUSH
32711: LD_VAR 0 10
32715: PPUSH
32716: LD_VAR 0 11
32720: PPUSH
32721: CALL 26615 0 11
32725: GO 32728
32727: POP
// end ;
32728: PPOPN 11
32730: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32731: LD_VAR 0 1
32735: PPUSH
32736: LD_VAR 0 2
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: CALL 28709 0 5
// end ; end_of_file end_of_file
32760: PPOPN 5
32762: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
32763: LD_INT 0
32765: PPUSH
// ar_miner := 81 ;
32766: LD_ADDR_EXP 137
32770: PUSH
32771: LD_INT 81
32773: ST_TO_ADDR
// ar_crane := 88 ;
32774: LD_ADDR_EXP 136
32778: PUSH
32779: LD_INT 88
32781: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32782: LD_ADDR_EXP 131
32786: PUSH
32787: LD_INT 89
32789: ST_TO_ADDR
// us_hack := 99 ;
32790: LD_ADDR_EXP 132
32794: PUSH
32795: LD_INT 99
32797: ST_TO_ADDR
// us_artillery := 97 ;
32798: LD_ADDR_EXP 133
32802: PUSH
32803: LD_INT 97
32805: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32806: LD_ADDR_EXP 134
32810: PUSH
32811: LD_INT 91
32813: ST_TO_ADDR
// ar_mortar := 92 ;
32814: LD_ADDR_EXP 135
32818: PUSH
32819: LD_INT 92
32821: ST_TO_ADDR
// ru_radar := 98 ;
32822: LD_ADDR_EXP 130
32826: PUSH
32827: LD_INT 98
32829: ST_TO_ADDR
// tech_Artillery := 80 ;
32830: LD_ADDR_EXP 138
32834: PUSH
32835: LD_INT 80
32837: ST_TO_ADDR
// tech_RadMat := 81 ;
32838: LD_ADDR_EXP 139
32842: PUSH
32843: LD_INT 81
32845: ST_TO_ADDR
// tech_BasicTools := 82 ;
32846: LD_ADDR_EXP 140
32850: PUSH
32851: LD_INT 82
32853: ST_TO_ADDR
// tech_Cargo := 83 ;
32854: LD_ADDR_EXP 141
32858: PUSH
32859: LD_INT 83
32861: ST_TO_ADDR
// tech_Track := 84 ;
32862: LD_ADDR_EXP 142
32866: PUSH
32867: LD_INT 84
32869: ST_TO_ADDR
// tech_Crane := 85 ;
32870: LD_ADDR_EXP 143
32874: PUSH
32875: LD_INT 85
32877: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32878: LD_ADDR_EXP 144
32882: PUSH
32883: LD_INT 86
32885: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32886: LD_ADDR_EXP 145
32890: PUSH
32891: LD_INT 87
32893: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
32894: LD_ADDR_EXP 146
32898: PUSH
32899: LD_INT 88
32901: ST_TO_ADDR
// class_mastodont := 31 ;
32902: LD_ADDR_EXP 147
32906: PUSH
32907: LD_INT 31
32909: ST_TO_ADDR
// class_horse := 21 ;
32910: LD_ADDR_EXP 148
32914: PUSH
32915: LD_INT 21
32917: ST_TO_ADDR
// end ;
32918: LD_VAR 0 1
32922: RET
// every 1 do
32923: GO 32925
32925: DISABLE
// InitGlobalVariables ; end_of_file
32926: CALL 32763 0 0
32930: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
// if exist_mode then
32935: LD_VAR 0 2
32939: IFFALSE 32964
// unit := CreateCharacter ( prefix & ident ) else
32941: LD_ADDR_VAR 0 5
32945: PUSH
32946: LD_VAR 0 3
32950: PUSH
32951: LD_VAR 0 1
32955: STR
32956: PPUSH
32957: CALL_OW 34
32961: ST_TO_ADDR
32962: GO 32979
// unit := NewCharacter ( ident ) ;
32964: LD_ADDR_VAR 0 5
32968: PUSH
32969: LD_VAR 0 1
32973: PPUSH
32974: CALL_OW 25
32978: ST_TO_ADDR
// result := unit ;
32979: LD_ADDR_VAR 0 4
32983: PUSH
32984: LD_VAR 0 5
32988: ST_TO_ADDR
// end ;
32989: LD_VAR 0 4
32993: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32994: LD_INT 0
32996: PPUSH
32997: PPUSH
// if not side or not nation then
32998: LD_VAR 0 1
33002: NOT
33003: PUSH
33004: LD_VAR 0 2
33008: NOT
33009: OR
33010: IFFALSE 33014
// exit ;
33012: GO 33782
// case nation of nation_american :
33014: LD_VAR 0 2
33018: PUSH
33019: LD_INT 1
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33241
33027: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33028: LD_ADDR_VAR 0 4
33032: PUSH
33033: LD_INT 35
33035: PUSH
33036: LD_INT 45
33038: PUSH
33039: LD_INT 46
33041: PUSH
33042: LD_INT 47
33044: PUSH
33045: LD_INT 82
33047: PUSH
33048: LD_INT 83
33050: PUSH
33051: LD_INT 84
33053: PUSH
33054: LD_INT 85
33056: PUSH
33057: LD_INT 86
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 6
33068: PUSH
33069: LD_INT 15
33071: PUSH
33072: LD_INT 16
33074: PUSH
33075: LD_INT 7
33077: PUSH
33078: LD_INT 12
33080: PUSH
33081: LD_INT 13
33083: PUSH
33084: LD_INT 10
33086: PUSH
33087: LD_INT 14
33089: PUSH
33090: LD_INT 20
33092: PUSH
33093: LD_INT 21
33095: PUSH
33096: LD_INT 22
33098: PUSH
33099: LD_INT 25
33101: PUSH
33102: LD_INT 32
33104: PUSH
33105: LD_INT 27
33107: PUSH
33108: LD_INT 36
33110: PUSH
33111: LD_INT 69
33113: PUSH
33114: LD_INT 39
33116: PUSH
33117: LD_INT 34
33119: PUSH
33120: LD_INT 40
33122: PUSH
33123: LD_INT 48
33125: PUSH
33126: LD_INT 49
33128: PUSH
33129: LD_INT 50
33131: PUSH
33132: LD_INT 51
33134: PUSH
33135: LD_INT 52
33137: PUSH
33138: LD_INT 53
33140: PUSH
33141: LD_INT 54
33143: PUSH
33144: LD_INT 55
33146: PUSH
33147: LD_INT 56
33149: PUSH
33150: LD_INT 57
33152: PUSH
33153: LD_INT 58
33155: PUSH
33156: LD_INT 59
33158: PUSH
33159: LD_INT 60
33161: PUSH
33162: LD_INT 61
33164: PUSH
33165: LD_INT 62
33167: PUSH
33168: LD_INT 80
33170: PUSH
33171: LD_INT 82
33173: PUSH
33174: LD_INT 83
33176: PUSH
33177: LD_INT 84
33179: PUSH
33180: LD_INT 85
33182: PUSH
33183: LD_INT 86
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33706
33241: LD_INT 2
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33475
33249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33250: LD_ADDR_VAR 0 4
33254: PUSH
33255: LD_INT 35
33257: PUSH
33258: LD_INT 45
33260: PUSH
33261: LD_INT 46
33263: PUSH
33264: LD_INT 47
33266: PUSH
33267: LD_INT 82
33269: PUSH
33270: LD_INT 83
33272: PUSH
33273: LD_INT 84
33275: PUSH
33276: LD_INT 85
33278: PUSH
33279: LD_INT 87
33281: PUSH
33282: LD_INT 70
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 11
33290: PUSH
33291: LD_INT 3
33293: PUSH
33294: LD_INT 4
33296: PUSH
33297: LD_INT 5
33299: PUSH
33300: LD_INT 6
33302: PUSH
33303: LD_INT 15
33305: PUSH
33306: LD_INT 18
33308: PUSH
33309: LD_INT 7
33311: PUSH
33312: LD_INT 17
33314: PUSH
33315: LD_INT 8
33317: PUSH
33318: LD_INT 20
33320: PUSH
33321: LD_INT 21
33323: PUSH
33324: LD_INT 22
33326: PUSH
33327: LD_INT 72
33329: PUSH
33330: LD_INT 26
33332: PUSH
33333: LD_INT 69
33335: PUSH
33336: LD_INT 39
33338: PUSH
33339: LD_INT 40
33341: PUSH
33342: LD_INT 41
33344: PUSH
33345: LD_INT 42
33347: PUSH
33348: LD_INT 43
33350: PUSH
33351: LD_INT 48
33353: PUSH
33354: LD_INT 49
33356: PUSH
33357: LD_INT 50
33359: PUSH
33360: LD_INT 51
33362: PUSH
33363: LD_INT 52
33365: PUSH
33366: LD_INT 53
33368: PUSH
33369: LD_INT 54
33371: PUSH
33372: LD_INT 55
33374: PUSH
33375: LD_INT 56
33377: PUSH
33378: LD_INT 60
33380: PUSH
33381: LD_INT 61
33383: PUSH
33384: LD_INT 62
33386: PUSH
33387: LD_INT 66
33389: PUSH
33390: LD_INT 67
33392: PUSH
33393: LD_INT 68
33395: PUSH
33396: LD_INT 81
33398: PUSH
33399: LD_INT 82
33401: PUSH
33402: LD_INT 83
33404: PUSH
33405: LD_INT 84
33407: PUSH
33408: LD_INT 85
33410: PUSH
33411: LD_INT 87
33413: PUSH
33414: LD_INT 88
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
33473: GO 33706
33475: LD_INT 3
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33705
33483: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33484: LD_ADDR_VAR 0 4
33488: PUSH
33489: LD_INT 46
33491: PUSH
33492: LD_INT 47
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: LD_INT 82
33503: PUSH
33504: LD_INT 83
33506: PUSH
33507: LD_INT 84
33509: PUSH
33510: LD_INT 85
33512: PUSH
33513: LD_INT 86
33515: PUSH
33516: LD_INT 11
33518: PUSH
33519: LD_INT 9
33521: PUSH
33522: LD_INT 20
33524: PUSH
33525: LD_INT 19
33527: PUSH
33528: LD_INT 21
33530: PUSH
33531: LD_INT 24
33533: PUSH
33534: LD_INT 22
33536: PUSH
33537: LD_INT 25
33539: PUSH
33540: LD_INT 28
33542: PUSH
33543: LD_INT 29
33545: PUSH
33546: LD_INT 30
33548: PUSH
33549: LD_INT 31
33551: PUSH
33552: LD_INT 37
33554: PUSH
33555: LD_INT 38
33557: PUSH
33558: LD_INT 32
33560: PUSH
33561: LD_INT 27
33563: PUSH
33564: LD_INT 33
33566: PUSH
33567: LD_INT 69
33569: PUSH
33570: LD_INT 39
33572: PUSH
33573: LD_INT 34
33575: PUSH
33576: LD_INT 40
33578: PUSH
33579: LD_INT 71
33581: PUSH
33582: LD_INT 23
33584: PUSH
33585: LD_INT 44
33587: PUSH
33588: LD_INT 48
33590: PUSH
33591: LD_INT 49
33593: PUSH
33594: LD_INT 50
33596: PUSH
33597: LD_INT 51
33599: PUSH
33600: LD_INT 52
33602: PUSH
33603: LD_INT 53
33605: PUSH
33606: LD_INT 54
33608: PUSH
33609: LD_INT 55
33611: PUSH
33612: LD_INT 56
33614: PUSH
33615: LD_INT 57
33617: PUSH
33618: LD_INT 58
33620: PUSH
33621: LD_INT 59
33623: PUSH
33624: LD_INT 63
33626: PUSH
33627: LD_INT 64
33629: PUSH
33630: LD_INT 65
33632: PUSH
33633: LD_INT 82
33635: PUSH
33636: LD_INT 83
33638: PUSH
33639: LD_INT 84
33641: PUSH
33642: LD_INT 85
33644: PUSH
33645: LD_INT 86
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 33706
33705: POP
// if state > - 1 and state < 3 then
33706: LD_VAR 0 3
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: GREATER
33715: PUSH
33716: LD_VAR 0 3
33720: PUSH
33721: LD_INT 3
33723: LESS
33724: AND
33725: IFFALSE 33782
// for i in result do
33727: LD_ADDR_VAR 0 5
33731: PUSH
33732: LD_VAR 0 4
33736: PUSH
33737: FOR_IN
33738: IFFALSE 33780
// if GetTech ( i , side ) <> state then
33740: LD_VAR 0 5
33744: PPUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 321
33754: PUSH
33755: LD_VAR 0 3
33759: NONEQUAL
33760: IFFALSE 33778
// result := result diff i ;
33762: LD_ADDR_VAR 0 4
33766: PUSH
33767: LD_VAR 0 4
33771: PUSH
33772: LD_VAR 0 5
33776: DIFF
33777: ST_TO_ADDR
33778: GO 33737
33780: POP
33781: POP
// end ;
33782: LD_VAR 0 4
33786: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33787: LD_INT 0
33789: PPUSH
33790: PPUSH
33791: PPUSH
// result := true ;
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_INT 1
33799: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33800: LD_ADDR_VAR 0 5
33804: PUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 480
33814: ST_TO_ADDR
// if not tmp then
33815: LD_VAR 0 5
33819: NOT
33820: IFFALSE 33824
// exit ;
33822: GO 33873
// for i in tmp do
33824: LD_ADDR_VAR 0 4
33828: PUSH
33829: LD_VAR 0 5
33833: PUSH
33834: FOR_IN
33835: IFFALSE 33871
// if GetTech ( i , side ) <> state_researched then
33837: LD_VAR 0 4
33841: PPUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 321
33851: PUSH
33852: LD_INT 2
33854: NONEQUAL
33855: IFFALSE 33869
// begin result := false ;
33857: LD_ADDR_VAR 0 3
33861: PUSH
33862: LD_INT 0
33864: ST_TO_ADDR
// exit ;
33865: POP
33866: POP
33867: GO 33873
// end ;
33869: GO 33834
33871: POP
33872: POP
// end ;
33873: LD_VAR 0 3
33877: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33878: LD_INT 0
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33893: LD_VAR 0 1
33897: NOT
33898: PUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL_OW 257
33908: PUSH
33909: LD_INT 9
33911: NONEQUAL
33912: OR
33913: IFFALSE 33917
// exit ;
33915: GO 34490
// side := GetSide ( unit ) ;
33917: LD_ADDR_VAR 0 9
33921: PUSH
33922: LD_VAR 0 1
33926: PPUSH
33927: CALL_OW 255
33931: ST_TO_ADDR
// tech_space := tech_spacanom ;
33932: LD_ADDR_VAR 0 12
33936: PUSH
33937: LD_INT 29
33939: ST_TO_ADDR
// tech_time := tech_taurad ;
33940: LD_ADDR_VAR 0 13
33944: PUSH
33945: LD_INT 28
33947: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33948: LD_ADDR_VAR 0 11
33952: PUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL_OW 310
33962: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33963: LD_VAR 0 11
33967: PPUSH
33968: CALL_OW 247
33972: PUSH
33973: LD_INT 2
33975: EQUAL
33976: IFFALSE 33980
// exit ;
33978: GO 34490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33980: LD_ADDR_VAR 0 8
33984: PUSH
33985: LD_INT 81
33987: PUSH
33988: LD_VAR 0 9
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 3
33999: PUSH
34000: LD_INT 21
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PPUSH
34018: CALL_OW 69
34022: ST_TO_ADDR
// if not tmp then
34023: LD_VAR 0 8
34027: NOT
34028: IFFALSE 34032
// exit ;
34030: GO 34490
// if in_unit then
34032: LD_VAR 0 11
34036: IFFALSE 34060
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34038: LD_ADDR_VAR 0 10
34042: PUSH
34043: LD_VAR 0 8
34047: PPUSH
34048: LD_VAR 0 11
34052: PPUSH
34053: CALL_OW 74
34057: ST_TO_ADDR
34058: GO 34080
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34060: LD_ADDR_VAR 0 10
34064: PUSH
34065: LD_VAR 0 8
34069: PPUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 74
34079: ST_TO_ADDR
// if not enemy then
34080: LD_VAR 0 10
34084: NOT
34085: IFFALSE 34089
// exit ;
34087: GO 34490
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34089: LD_VAR 0 11
34093: PUSH
34094: LD_VAR 0 11
34098: PPUSH
34099: LD_VAR 0 10
34103: PPUSH
34104: CALL_OW 296
34108: PUSH
34109: LD_INT 13
34111: GREATER
34112: AND
34113: PUSH
34114: LD_VAR 0 1
34118: PPUSH
34119: LD_VAR 0 10
34123: PPUSH
34124: CALL_OW 296
34128: PUSH
34129: LD_INT 12
34131: GREATER
34132: OR
34133: IFFALSE 34137
// exit ;
34135: GO 34490
// missile := [ 1 ] ;
34137: LD_ADDR_VAR 0 14
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34148: LD_VAR 0 9
34152: PPUSH
34153: LD_VAR 0 12
34157: PPUSH
34158: CALL_OW 325
34162: IFFALSE 34191
// missile := Insert ( missile , missile + 1 , 2 ) ;
34164: LD_ADDR_VAR 0 14
34168: PUSH
34169: LD_VAR 0 14
34173: PPUSH
34174: LD_VAR 0 14
34178: PUSH
34179: LD_INT 1
34181: PLUS
34182: PPUSH
34183: LD_INT 2
34185: PPUSH
34186: CALL_OW 2
34190: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34191: LD_VAR 0 9
34195: PPUSH
34196: LD_VAR 0 13
34200: PPUSH
34201: CALL_OW 325
34205: PUSH
34206: LD_VAR 0 10
34210: PPUSH
34211: CALL_OW 255
34215: PPUSH
34216: LD_VAR 0 13
34220: PPUSH
34221: CALL_OW 325
34225: NOT
34226: AND
34227: IFFALSE 34256
// missile := Insert ( missile , missile + 1 , 3 ) ;
34229: LD_ADDR_VAR 0 14
34233: PUSH
34234: LD_VAR 0 14
34238: PPUSH
34239: LD_VAR 0 14
34243: PUSH
34244: LD_INT 1
34246: PLUS
34247: PPUSH
34248: LD_INT 3
34250: PPUSH
34251: CALL_OW 2
34255: ST_TO_ADDR
// if missile < 2 then
34256: LD_VAR 0 14
34260: PUSH
34261: LD_INT 2
34263: LESS
34264: IFFALSE 34268
// exit ;
34266: GO 34490
// x := GetX ( enemy ) ;
34268: LD_ADDR_VAR 0 4
34272: PUSH
34273: LD_VAR 0 10
34277: PPUSH
34278: CALL_OW 250
34282: ST_TO_ADDR
// y := GetY ( enemy ) ;
34283: LD_ADDR_VAR 0 5
34287: PUSH
34288: LD_VAR 0 10
34292: PPUSH
34293: CALL_OW 251
34297: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34298: LD_ADDR_VAR 0 6
34302: PUSH
34303: LD_VAR 0 4
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PPUSH
34312: LD_INT 1
34314: PPUSH
34315: CALL_OW 12
34319: PLUS
34320: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34321: LD_ADDR_VAR 0 7
34325: PUSH
34326: LD_VAR 0 5
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PPUSH
34335: LD_INT 1
34337: PPUSH
34338: CALL_OW 12
34342: PLUS
34343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34344: LD_VAR 0 6
34348: PPUSH
34349: LD_VAR 0 7
34353: PPUSH
34354: CALL_OW 488
34358: NOT
34359: IFFALSE 34381
// begin _x := x ;
34361: LD_ADDR_VAR 0 6
34365: PUSH
34366: LD_VAR 0 4
34370: ST_TO_ADDR
// _y := y ;
34371: LD_ADDR_VAR 0 7
34375: PUSH
34376: LD_VAR 0 5
34380: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_INT 1
34388: PPUSH
34389: LD_VAR 0 14
34393: PPUSH
34394: CALL_OW 12
34398: ST_TO_ADDR
// case i of 1 :
34399: LD_VAR 0 3
34403: PUSH
34404: LD_INT 1
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34412
34410: GO 34429
34412: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34413: LD_VAR 0 1
34417: PPUSH
34418: LD_VAR 0 10
34422: PPUSH
34423: CALL_OW 115
34427: GO 34490
34429: LD_INT 2
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34459
34437: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34438: LD_VAR 0 1
34442: PPUSH
34443: LD_VAR 0 6
34447: PPUSH
34448: LD_VAR 0 7
34452: PPUSH
34453: CALL_OW 153
34457: GO 34490
34459: LD_INT 3
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34489
34467: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34468: LD_VAR 0 1
34472: PPUSH
34473: LD_VAR 0 6
34477: PPUSH
34478: LD_VAR 0 7
34482: PPUSH
34483: CALL_OW 154
34487: GO 34490
34489: POP
// end ;
34490: LD_VAR 0 2
34494: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34495: LD_INT 0
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
// if not unit or not building then
34503: LD_VAR 0 1
34507: NOT
34508: PUSH
34509: LD_VAR 0 2
34513: NOT
34514: OR
34515: IFFALSE 34519
// exit ;
34517: GO 34677
// x := GetX ( building ) ;
34519: LD_ADDR_VAR 0 5
34523: PUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: CALL_OW 250
34533: ST_TO_ADDR
// y := GetY ( building ) ;
34534: LD_ADDR_VAR 0 6
34538: PUSH
34539: LD_VAR 0 2
34543: PPUSH
34544: CALL_OW 251
34548: ST_TO_ADDR
// for i = 0 to 5 do
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: DOUBLE
34555: LD_INT 0
34557: DEC
34558: ST_TO_ADDR
34559: LD_INT 5
34561: PUSH
34562: FOR_TO
34563: IFFALSE 34675
// begin _x := ShiftX ( x , i , 3 ) ;
34565: LD_ADDR_VAR 0 7
34569: PUSH
34570: LD_VAR 0 5
34574: PPUSH
34575: LD_VAR 0 4
34579: PPUSH
34580: LD_INT 3
34582: PPUSH
34583: CALL_OW 272
34587: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34588: LD_ADDR_VAR 0 8
34592: PUSH
34593: LD_VAR 0 6
34597: PPUSH
34598: LD_VAR 0 4
34602: PPUSH
34603: LD_INT 3
34605: PPUSH
34606: CALL_OW 273
34610: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_VAR 0 8
34620: PPUSH
34621: CALL_OW 488
34625: NOT
34626: IFFALSE 34630
// continue ;
34628: GO 34562
// if HexInfo ( _x , _y ) = 0 then
34630: LD_VAR 0 7
34634: PPUSH
34635: LD_VAR 0 8
34639: PPUSH
34640: CALL_OW 428
34644: PUSH
34645: LD_INT 0
34647: EQUAL
34648: IFFALSE 34673
// begin ComMoveXY ( unit , _x , _y ) ;
34650: LD_VAR 0 1
34654: PPUSH
34655: LD_VAR 0 7
34659: PPUSH
34660: LD_VAR 0 8
34664: PPUSH
34665: CALL_OW 111
// exit ;
34669: POP
34670: POP
34671: GO 34677
// end ; end ;
34673: GO 34562
34675: POP
34676: POP
// end ;
34677: LD_VAR 0 3
34681: RET
// export function ScanBase ( side , base_area ) ; begin
34682: LD_INT 0
34684: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_VAR 0 2
34694: PPUSH
34695: LD_INT 81
34697: PUSH
34698: LD_VAR 0 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 70
34711: ST_TO_ADDR
// end ;
34712: LD_VAR 0 3
34716: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34717: LD_INT 0
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
// result := false ;
34723: LD_ADDR_VAR 0 2
34727: PUSH
34728: LD_INT 0
34730: ST_TO_ADDR
// side := GetSide ( unit ) ;
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 255
34745: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34746: LD_ADDR_VAR 0 4
34750: PUSH
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL_OW 248
34760: ST_TO_ADDR
// case nat of 1 :
34761: LD_VAR 0 4
34765: PUSH
34766: LD_INT 1
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34785
34774: POP
// tech := tech_lassight ; 2 :
34775: LD_ADDR_VAR 0 5
34779: PUSH
34780: LD_INT 12
34782: ST_TO_ADDR
34783: GO 34824
34785: LD_INT 2
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34804
34793: POP
// tech := tech_mortar ; 3 :
34794: LD_ADDR_VAR 0 5
34798: PUSH
34799: LD_INT 41
34801: ST_TO_ADDR
34802: GO 34824
34804: LD_INT 3
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34823
34812: POP
// tech := tech_bazooka ; end ;
34813: LD_ADDR_VAR 0 5
34817: PUSH
34818: LD_INT 44
34820: ST_TO_ADDR
34821: GO 34824
34823: POP
// if Researched ( side , tech ) then
34824: LD_VAR 0 3
34828: PPUSH
34829: LD_VAR 0 5
34833: PPUSH
34834: CALL_OW 325
34838: IFFALSE 34865
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34840: LD_ADDR_VAR 0 2
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 8
34850: PUSH
34851: LD_INT 9
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: PUSH
34859: LD_VAR 0 4
34863: ARRAY
34864: ST_TO_ADDR
// end ;
34865: LD_VAR 0 2
34869: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34870: LD_INT 0
34872: PPUSH
34873: PPUSH
34874: PPUSH
// if not mines then
34875: LD_VAR 0 2
34879: NOT
34880: IFFALSE 34884
// exit ;
34882: GO 35028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34884: LD_ADDR_VAR 0 5
34888: PUSH
34889: LD_INT 81
34891: PUSH
34892: LD_VAR 0 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 21
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PPUSH
34922: CALL_OW 69
34926: ST_TO_ADDR
// for i in mines do
34927: LD_ADDR_VAR 0 4
34931: PUSH
34932: LD_VAR 0 2
34936: PUSH
34937: FOR_IN
34938: IFFALSE 35026
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 1
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 4
34953: PUSH
34954: LD_INT 2
34956: ARRAY
34957: PPUSH
34958: CALL_OW 458
34962: NOT
34963: IFFALSE 34967
// continue ;
34965: GO 34937
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34967: LD_VAR 0 4
34971: PUSH
34972: LD_INT 1
34974: ARRAY
34975: PPUSH
34976: LD_VAR 0 4
34980: PUSH
34981: LD_INT 2
34983: ARRAY
34984: PPUSH
34985: CALL_OW 428
34989: PUSH
34990: LD_VAR 0 5
34994: IN
34995: IFFALSE 35024
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34997: LD_VAR 0 4
35001: PUSH
35002: LD_INT 1
35004: ARRAY
35005: PPUSH
35006: LD_VAR 0 4
35010: PUSH
35011: LD_INT 2
35013: ARRAY
35014: PPUSH
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 456
// end ;
35024: GO 34937
35026: POP
35027: POP
// end ;
35028: LD_VAR 0 3
35032: RET
// export function Count ( array ) ; var i ; begin
35033: LD_INT 0
35035: PPUSH
35036: PPUSH
// result := 0 ;
35037: LD_ADDR_VAR 0 2
35041: PUSH
35042: LD_INT 0
35044: ST_TO_ADDR
// for i in array do
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_VAR 0 1
35054: PUSH
35055: FOR_IN
35056: IFFALSE 35080
// if i then
35058: LD_VAR 0 3
35062: IFFALSE 35078
// result := result + 1 ;
35064: LD_ADDR_VAR 0 2
35068: PUSH
35069: LD_VAR 0 2
35073: PUSH
35074: LD_INT 1
35076: PLUS
35077: ST_TO_ADDR
35078: GO 35055
35080: POP
35081: POP
// end ;
35082: LD_VAR 0 2
35086: RET
// export function IsEmpty ( building ) ; begin
35087: LD_INT 0
35089: PPUSH
// if not building then
35090: LD_VAR 0 1
35094: NOT
35095: IFFALSE 35099
// exit ;
35097: GO 35142
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35099: LD_ADDR_VAR 0 2
35103: PUSH
35104: LD_VAR 0 1
35108: PUSH
35109: LD_INT 22
35111: PUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 255
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 58
35128: PUSH
35129: EMPTY
35130: LIST
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PPUSH
35136: CALL_OW 69
35140: IN
35141: ST_TO_ADDR
// end ;
35142: LD_VAR 0 2
35146: RET
// export function IsNotFull ( building ) ; begin
35147: LD_INT 0
35149: PPUSH
// if not building then
35150: LD_VAR 0 1
35154: NOT
35155: IFFALSE 35159
// exit ;
35157: GO 35178
// result := UnitsInside ( building ) < 6 ;
35159: LD_ADDR_VAR 0 2
35163: PUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 313
35173: PUSH
35174: LD_INT 6
35176: LESS
35177: ST_TO_ADDR
// end ;
35178: LD_VAR 0 2
35182: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35183: LD_INT 0
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
// tmp := [ ] ;
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: EMPTY
35195: ST_TO_ADDR
// list := [ ] ;
35196: LD_ADDR_VAR 0 5
35200: PUSH
35201: EMPTY
35202: ST_TO_ADDR
// for i = 16 to 25 do
35203: LD_ADDR_VAR 0 4
35207: PUSH
35208: DOUBLE
35209: LD_INT 16
35211: DEC
35212: ST_TO_ADDR
35213: LD_INT 25
35215: PUSH
35216: FOR_TO
35217: IFFALSE 35290
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_VAR 0 3
35228: PUSH
35229: LD_INT 22
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 255
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 91
35248: PUSH
35249: LD_VAR 0 1
35253: PUSH
35254: LD_INT 6
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 30
35264: PUSH
35265: LD_VAR 0 4
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: PUSH
35279: EMPTY
35280: LIST
35281: PPUSH
35282: CALL_OW 69
35286: ADD
35287: ST_TO_ADDR
35288: GO 35216
35290: POP
35291: POP
// for i = 1 to tmp do
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: DOUBLE
35298: LD_INT 1
35300: DEC
35301: ST_TO_ADDR
35302: LD_VAR 0 3
35306: PUSH
35307: FOR_TO
35308: IFFALSE 35396
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35310: LD_ADDR_VAR 0 5
35314: PUSH
35315: LD_VAR 0 5
35319: PUSH
35320: LD_VAR 0 3
35324: PUSH
35325: LD_VAR 0 4
35329: ARRAY
35330: PPUSH
35331: CALL_OW 266
35335: PUSH
35336: LD_VAR 0 3
35340: PUSH
35341: LD_VAR 0 4
35345: ARRAY
35346: PPUSH
35347: CALL_OW 250
35351: PUSH
35352: LD_VAR 0 3
35356: PUSH
35357: LD_VAR 0 4
35361: ARRAY
35362: PPUSH
35363: CALL_OW 251
35367: PUSH
35368: LD_VAR 0 3
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: PPUSH
35379: CALL_OW 254
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: ADD
35393: ST_TO_ADDR
35394: GO 35307
35396: POP
35397: POP
// result := list ;
35398: LD_ADDR_VAR 0 2
35402: PUSH
35403: LD_VAR 0 5
35407: ST_TO_ADDR
// end ;
35408: LD_VAR 0 2
35412: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35413: LD_INT 0
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
// if not factory then
35422: LD_VAR 0 1
35426: NOT
35427: IFFALSE 35431
// exit ;
35429: GO 36024
// if control = control_apeman then
35431: LD_VAR 0 4
35435: PUSH
35436: LD_INT 5
35438: EQUAL
35439: IFFALSE 35548
// begin tmp := UnitsInside ( factory ) ;
35441: LD_ADDR_VAR 0 8
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 313
35455: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35456: LD_VAR 0 8
35460: PPUSH
35461: LD_INT 25
35463: PUSH
35464: LD_INT 12
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: CALL_OW 72
35475: NOT
35476: IFFALSE 35486
// control := control_manual ;
35478: LD_ADDR_VAR 0 4
35482: PUSH
35483: LD_INT 1
35485: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35486: LD_ADDR_VAR 0 8
35490: PUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL 35183 0 1
35500: ST_TO_ADDR
// if tmp then
35501: LD_VAR 0 8
35505: IFFALSE 35548
// begin for i in tmp do
35507: LD_ADDR_VAR 0 7
35511: PUSH
35512: LD_VAR 0 8
35516: PUSH
35517: FOR_IN
35518: IFFALSE 35546
// if i [ 1 ] = b_ext_radio then
35520: LD_VAR 0 7
35524: PUSH
35525: LD_INT 1
35527: ARRAY
35528: PUSH
35529: LD_INT 22
35531: EQUAL
35532: IFFALSE 35544
// begin control := control_remote ;
35534: LD_ADDR_VAR 0 4
35538: PUSH
35539: LD_INT 2
35541: ST_TO_ADDR
// break ;
35542: GO 35546
// end ;
35544: GO 35517
35546: POP
35547: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35548: LD_VAR 0 1
35552: PPUSH
35553: LD_VAR 0 2
35557: PPUSH
35558: LD_VAR 0 3
35562: PPUSH
35563: LD_VAR 0 4
35567: PPUSH
35568: LD_VAR 0 5
35572: PPUSH
35573: CALL_OW 448
35577: IFFALSE 35612
// begin result := [ chassis , engine , control , weapon ] ;
35579: LD_ADDR_VAR 0 6
35583: PUSH
35584: LD_VAR 0 2
35588: PUSH
35589: LD_VAR 0 3
35593: PUSH
35594: LD_VAR 0 4
35598: PUSH
35599: LD_VAR 0 5
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// exit ;
35610: GO 36024
// end ; _chassis := AvailableChassisList ( factory ) ;
35612: LD_ADDR_VAR 0 9
35616: PUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 475
35626: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35627: LD_ADDR_VAR 0 11
35631: PUSH
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 476
35641: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35642: LD_ADDR_VAR 0 12
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 477
35656: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35657: LD_ADDR_VAR 0 10
35661: PUSH
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL_OW 478
35671: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35672: LD_VAR 0 9
35676: NOT
35677: PUSH
35678: LD_VAR 0 11
35682: NOT
35683: OR
35684: PUSH
35685: LD_VAR 0 12
35689: NOT
35690: OR
35691: PUSH
35692: LD_VAR 0 10
35696: NOT
35697: OR
35698: IFFALSE 35733
// begin result := [ chassis , engine , control , weapon ] ;
35700: LD_ADDR_VAR 0 6
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_VAR 0 3
35714: PUSH
35715: LD_VAR 0 4
35719: PUSH
35720: LD_VAR 0 5
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
// exit ;
35731: GO 36024
// end ; if not chassis in _chassis then
35733: LD_VAR 0 2
35737: PUSH
35738: LD_VAR 0 9
35742: IN
35743: NOT
35744: IFFALSE 35770
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35746: LD_ADDR_VAR 0 2
35750: PUSH
35751: LD_VAR 0 9
35755: PUSH
35756: LD_INT 1
35758: PPUSH
35759: LD_VAR 0 9
35763: PPUSH
35764: CALL_OW 12
35768: ARRAY
35769: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35770: LD_VAR 0 2
35774: PPUSH
35775: LD_VAR 0 3
35779: PPUSH
35780: CALL 36029 0 2
35784: NOT
35785: IFFALSE 35844
// repeat engine := _engine [ 1 ] ;
35787: LD_ADDR_VAR 0 3
35791: PUSH
35792: LD_VAR 0 11
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35801: LD_ADDR_VAR 0 11
35805: PUSH
35806: LD_VAR 0 11
35810: PPUSH
35811: LD_INT 1
35813: PPUSH
35814: CALL_OW 3
35818: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35819: LD_VAR 0 2
35823: PPUSH
35824: LD_VAR 0 3
35828: PPUSH
35829: CALL 36029 0 2
35833: PUSH
35834: LD_VAR 0 11
35838: PUSH
35839: EMPTY
35840: EQUAL
35841: OR
35842: IFFALSE 35787
// if not control in _control then
35844: LD_VAR 0 4
35848: PUSH
35849: LD_VAR 0 12
35853: IN
35854: NOT
35855: IFFALSE 35881
// control := _control [ rand ( 1 , _control ) ] ;
35857: LD_ADDR_VAR 0 4
35861: PUSH
35862: LD_VAR 0 12
35866: PUSH
35867: LD_INT 1
35869: PPUSH
35870: LD_VAR 0 12
35874: PPUSH
35875: CALL_OW 12
35879: ARRAY
35880: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35881: LD_VAR 0 2
35885: PPUSH
35886: LD_VAR 0 5
35890: PPUSH
35891: CALL 36249 0 2
35895: NOT
35896: IFFALSE 35955
// repeat weapon := _weapon [ 1 ] ;
35898: LD_ADDR_VAR 0 5
35902: PUSH
35903: LD_VAR 0 10
35907: PUSH
35908: LD_INT 1
35910: ARRAY
35911: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35912: LD_ADDR_VAR 0 10
35916: PUSH
35917: LD_VAR 0 10
35921: PPUSH
35922: LD_INT 1
35924: PPUSH
35925: CALL_OW 3
35929: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35930: LD_VAR 0 2
35934: PPUSH
35935: LD_VAR 0 5
35939: PPUSH
35940: CALL 36249 0 2
35944: PUSH
35945: LD_VAR 0 10
35949: PUSH
35950: EMPTY
35951: EQUAL
35952: OR
35953: IFFALSE 35898
// result := [ ] ;
35955: LD_ADDR_VAR 0 6
35959: PUSH
35960: EMPTY
35961: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35962: LD_VAR 0 1
35966: PPUSH
35967: LD_VAR 0 2
35971: PPUSH
35972: LD_VAR 0 3
35976: PPUSH
35977: LD_VAR 0 4
35981: PPUSH
35982: LD_VAR 0 5
35986: PPUSH
35987: CALL_OW 448
35991: IFFALSE 36024
// result := [ chassis , engine , control , weapon ] ;
35993: LD_ADDR_VAR 0 6
35997: PUSH
35998: LD_VAR 0 2
36002: PUSH
36003: LD_VAR 0 3
36007: PUSH
36008: LD_VAR 0 4
36012: PUSH
36013: LD_VAR 0 5
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// end ;
36024: LD_VAR 0 6
36028: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36029: LD_INT 0
36031: PPUSH
// if not chassis or not engine then
36032: LD_VAR 0 1
36036: NOT
36037: PUSH
36038: LD_VAR 0 2
36042: NOT
36043: OR
36044: IFFALSE 36048
// exit ;
36046: GO 36244
// case engine of engine_solar :
36048: LD_VAR 0 2
36052: PUSH
36053: LD_INT 2
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36061
36059: GO 36099
36061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36062: LD_ADDR_VAR 0 3
36066: PUSH
36067: LD_INT 11
36069: PUSH
36070: LD_INT 12
36072: PUSH
36073: LD_INT 13
36075: PUSH
36076: LD_INT 14
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
36097: GO 36228
36099: LD_INT 1
36101: DOUBLE
36102: EQUAL
36103: IFTRUE 36107
36105: GO 36169
36107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_INT 11
36115: PUSH
36116: LD_INT 12
36118: PUSH
36119: LD_INT 13
36121: PUSH
36122: LD_INT 14
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 21
36142: PUSH
36143: LD_INT 23
36145: PUSH
36146: LD_INT 22
36148: PUSH
36149: LD_INT 24
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
36167: GO 36228
36169: LD_INT 3
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36177
36175: GO 36227
36177: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 13
36185: PUSH
36186: LD_INT 14
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: LD_INT 4
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 21
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 24
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
36225: GO 36228
36227: POP
// result := ( chassis in result ) ;
36228: LD_ADDR_VAR 0 3
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: LD_VAR 0 3
36242: IN
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 3
36248: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36249: LD_INT 0
36251: PPUSH
// if not chassis or not weapon then
36252: LD_VAR 0 1
36256: NOT
36257: PUSH
36258: LD_VAR 0 2
36262: NOT
36263: OR
36264: IFFALSE 36268
// exit ;
36266: GO 37330
// case weapon of us_machine_gun :
36268: LD_VAR 0 2
36272: PUSH
36273: LD_INT 2
36275: DOUBLE
36276: EQUAL
36277: IFTRUE 36281
36279: GO 36311
36281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36282: LD_ADDR_VAR 0 3
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 3
36295: PUSH
36296: LD_INT 4
36298: PUSH
36299: LD_INT 5
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
36309: GO 37314
36311: LD_INT 3
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36319
36317: GO 36349
36319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: LD_INT 3
36333: PUSH
36334: LD_INT 4
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
36347: GO 37314
36349: LD_INT 11
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36357
36355: GO 36387
36357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: LD_INT 4
36374: PUSH
36375: LD_INT 5
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
36385: GO 37314
36387: LD_INT 4
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36395
36393: GO 36421
36395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 3
36406: PUSH
36407: LD_INT 4
36409: PUSH
36410: LD_INT 5
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
36419: GO 37314
36421: LD_INT 5
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36429
36427: GO 36455
36429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: LD_INT 4
36443: PUSH
36444: LD_INT 5
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
36453: GO 37314
36455: LD_INT 9
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36489
36463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 4
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
36487: GO 37314
36489: LD_INT 7
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36523
36497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36498: LD_ADDR_VAR 0 3
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: LD_INT 4
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
36521: GO 37314
36523: LD_INT 12
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36531
36529: GO 36557
36531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 4
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
36555: GO 37314
36557: LD_INT 13
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36591
36565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
36589: GO 37314
36591: LD_INT 14
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 36617
36599: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: LD_INT 5
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: ST_TO_ADDR
36615: GO 37314
36617: LD_INT 6
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36625
36623: GO 36643
36625: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36626: LD_ADDR_VAR 0 3
36630: PUSH
36631: LD_INT 4
36633: PUSH
36634: LD_INT 5
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: ST_TO_ADDR
36641: GO 37314
36643: LD_INT 10
36645: DOUBLE
36646: EQUAL
36647: IFTRUE 36651
36649: GO 36669
36651: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36652: LD_ADDR_VAR 0 3
36656: PUSH
36657: LD_INT 4
36659: PUSH
36660: LD_INT 5
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: ST_TO_ADDR
36667: GO 37314
36669: LD_INT 22
36671: DOUBLE
36672: EQUAL
36673: IFTRUE 36677
36675: GO 36703
36677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36678: LD_ADDR_VAR 0 3
36682: PUSH
36683: LD_INT 11
36685: PUSH
36686: LD_INT 12
36688: PUSH
36689: LD_INT 13
36691: PUSH
36692: LD_INT 14
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
36701: GO 37314
36703: LD_INT 23
36705: DOUBLE
36706: EQUAL
36707: IFTRUE 36711
36709: GO 36737
36711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36712: LD_ADDR_VAR 0 3
36716: PUSH
36717: LD_INT 11
36719: PUSH
36720: LD_INT 12
36722: PUSH
36723: LD_INT 13
36725: PUSH
36726: LD_INT 14
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
36735: GO 37314
36737: LD_INT 24
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 36771
36745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36746: LD_ADDR_VAR 0 3
36750: PUSH
36751: LD_INT 11
36753: PUSH
36754: LD_INT 12
36756: PUSH
36757: LD_INT 13
36759: PUSH
36760: LD_INT 14
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
36769: GO 37314
36771: LD_INT 30
36773: DOUBLE
36774: EQUAL
36775: IFTRUE 36779
36777: GO 36805
36779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36780: LD_ADDR_VAR 0 3
36784: PUSH
36785: LD_INT 11
36787: PUSH
36788: LD_INT 12
36790: PUSH
36791: LD_INT 13
36793: PUSH
36794: LD_INT 14
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
36803: GO 37314
36805: LD_INT 25
36807: DOUBLE
36808: EQUAL
36809: IFTRUE 36813
36811: GO 36831
36813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_INT 13
36821: PUSH
36822: LD_INT 14
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: ST_TO_ADDR
36829: GO 37314
36831: LD_INT 27
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36857
36839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36840: LD_ADDR_VAR 0 3
36844: PUSH
36845: LD_INT 13
36847: PUSH
36848: LD_INT 14
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: ST_TO_ADDR
36855: GO 37314
36857: LD_EXP 135
36861: DOUBLE
36862: EQUAL
36863: IFTRUE 36867
36865: GO 36893
36867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_INT 11
36875: PUSH
36876: LD_INT 12
36878: PUSH
36879: LD_INT 13
36881: PUSH
36882: LD_INT 14
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
36891: GO 37314
36893: LD_INT 28
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36919
36901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 13
36909: PUSH
36910: LD_INT 14
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: ST_TO_ADDR
36917: GO 37314
36919: LD_INT 29
36921: DOUBLE
36922: EQUAL
36923: IFTRUE 36927
36925: GO 36945
36927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 13
36935: PUSH
36936: LD_INT 14
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: ST_TO_ADDR
36943: GO 37314
36945: LD_INT 31
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 36971
36953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 13
36961: PUSH
36962: LD_INT 14
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: ST_TO_ADDR
36969: GO 37314
36971: LD_INT 26
36973: DOUBLE
36974: EQUAL
36975: IFTRUE 36979
36977: GO 36997
36979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36980: LD_ADDR_VAR 0 3
36984: PUSH
36985: LD_INT 13
36987: PUSH
36988: LD_INT 14
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: ST_TO_ADDR
36995: GO 37314
36997: LD_INT 42
36999: DOUBLE
37000: EQUAL
37001: IFTRUE 37005
37003: GO 37031
37005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37006: LD_ADDR_VAR 0 3
37010: PUSH
37011: LD_INT 21
37013: PUSH
37014: LD_INT 22
37016: PUSH
37017: LD_INT 23
37019: PUSH
37020: LD_INT 24
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
37029: GO 37314
37031: LD_INT 43
37033: DOUBLE
37034: EQUAL
37035: IFTRUE 37039
37037: GO 37065
37039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_INT 21
37047: PUSH
37048: LD_INT 22
37050: PUSH
37051: LD_INT 23
37053: PUSH
37054: LD_INT 24
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
37063: GO 37314
37065: LD_INT 44
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37099
37073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 21
37081: PUSH
37082: LD_INT 22
37084: PUSH
37085: LD_INT 23
37087: PUSH
37088: LD_INT 24
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
37097: GO 37314
37099: LD_INT 45
37101: DOUBLE
37102: EQUAL
37103: IFTRUE 37107
37105: GO 37133
37107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_INT 21
37115: PUSH
37116: LD_INT 22
37118: PUSH
37119: LD_INT 23
37121: PUSH
37122: LD_INT 24
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
37131: GO 37314
37133: LD_INT 49
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37167
37141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_INT 21
37149: PUSH
37150: LD_INT 22
37152: PUSH
37153: LD_INT 23
37155: PUSH
37156: LD_INT 24
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
37165: GO 37314
37167: LD_INT 51
37169: DOUBLE
37170: EQUAL
37171: IFTRUE 37175
37173: GO 37201
37175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37176: LD_ADDR_VAR 0 3
37180: PUSH
37181: LD_INT 21
37183: PUSH
37184: LD_INT 22
37186: PUSH
37187: LD_INT 23
37189: PUSH
37190: LD_INT 24
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37314
37201: LD_INT 52
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37235
37209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_INT 21
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_INT 23
37223: PUSH
37224: LD_INT 24
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
37233: GO 37314
37235: LD_INT 53
37237: DOUBLE
37238: EQUAL
37239: IFTRUE 37243
37241: GO 37261
37243: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37244: LD_ADDR_VAR 0 3
37248: PUSH
37249: LD_INT 23
37251: PUSH
37252: LD_INT 24
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: ST_TO_ADDR
37259: GO 37314
37261: LD_INT 46
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37287
37269: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 23
37277: PUSH
37278: LD_INT 24
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: ST_TO_ADDR
37285: GO 37314
37287: LD_INT 47
37289: DOUBLE
37290: EQUAL
37291: IFTRUE 37295
37293: GO 37313
37295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37296: LD_ADDR_VAR 0 3
37300: PUSH
37301: LD_INT 23
37303: PUSH
37304: LD_INT 24
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: ST_TO_ADDR
37311: GO 37314
37313: POP
// result := ( chassis in result ) ;
37314: LD_ADDR_VAR 0 3
37318: PUSH
37319: LD_VAR 0 1
37323: PUSH
37324: LD_VAR 0 3
37328: IN
37329: ST_TO_ADDR
// end ;
37330: LD_VAR 0 3
37334: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
// result := array ;
37344: LD_ADDR_VAR 0 5
37348: PUSH
37349: LD_VAR 0 1
37353: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37354: LD_VAR 0 1
37358: NOT
37359: PUSH
37360: LD_VAR 0 2
37364: NOT
37365: OR
37366: PUSH
37367: LD_VAR 0 3
37371: NOT
37372: OR
37373: PUSH
37374: LD_VAR 0 2
37378: PUSH
37379: LD_VAR 0 1
37383: GREATER
37384: OR
37385: PUSH
37386: LD_VAR 0 3
37390: PUSH
37391: LD_VAR 0 1
37395: GREATER
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 37697
// if direction then
37401: LD_VAR 0 4
37405: IFFALSE 37469
// begin d := 1 ;
37407: LD_ADDR_VAR 0 9
37411: PUSH
37412: LD_INT 1
37414: ST_TO_ADDR
// if i_from > i_to then
37415: LD_VAR 0 2
37419: PUSH
37420: LD_VAR 0 3
37424: GREATER
37425: IFFALSE 37451
// length := ( array - i_from ) + i_to else
37427: LD_ADDR_VAR 0 11
37431: PUSH
37432: LD_VAR 0 1
37436: PUSH
37437: LD_VAR 0 2
37441: MINUS
37442: PUSH
37443: LD_VAR 0 3
37447: PLUS
37448: ST_TO_ADDR
37449: GO 37467
// length := i_to - i_from ;
37451: LD_ADDR_VAR 0 11
37455: PUSH
37456: LD_VAR 0 3
37460: PUSH
37461: LD_VAR 0 2
37465: MINUS
37466: ST_TO_ADDR
// end else
37467: GO 37530
// begin d := - 1 ;
37469: LD_ADDR_VAR 0 9
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: ST_TO_ADDR
// if i_from > i_to then
37478: LD_VAR 0 2
37482: PUSH
37483: LD_VAR 0 3
37487: GREATER
37488: IFFALSE 37508
// length := i_from - i_to else
37490: LD_ADDR_VAR 0 11
37494: PUSH
37495: LD_VAR 0 2
37499: PUSH
37500: LD_VAR 0 3
37504: MINUS
37505: ST_TO_ADDR
37506: GO 37530
// length := ( array - i_to ) + i_from ;
37508: LD_ADDR_VAR 0 11
37512: PUSH
37513: LD_VAR 0 1
37517: PUSH
37518: LD_VAR 0 3
37522: MINUS
37523: PUSH
37524: LD_VAR 0 2
37528: PLUS
37529: ST_TO_ADDR
// end ; if not length then
37530: LD_VAR 0 11
37534: NOT
37535: IFFALSE 37539
// exit ;
37537: GO 37697
// tmp := array ;
37539: LD_ADDR_VAR 0 10
37543: PUSH
37544: LD_VAR 0 1
37548: ST_TO_ADDR
// for i = 1 to length do
37549: LD_ADDR_VAR 0 6
37553: PUSH
37554: DOUBLE
37555: LD_INT 1
37557: DEC
37558: ST_TO_ADDR
37559: LD_VAR 0 11
37563: PUSH
37564: FOR_TO
37565: IFFALSE 37685
// begin for j = 1 to array do
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_VAR 0 1
37581: PUSH
37582: FOR_TO
37583: IFFALSE 37671
// begin k := j + d ;
37585: LD_ADDR_VAR 0 8
37589: PUSH
37590: LD_VAR 0 7
37594: PUSH
37595: LD_VAR 0 9
37599: PLUS
37600: ST_TO_ADDR
// if k > array then
37601: LD_VAR 0 8
37605: PUSH
37606: LD_VAR 0 1
37610: GREATER
37611: IFFALSE 37621
// k := 1 ;
37613: LD_ADDR_VAR 0 8
37617: PUSH
37618: LD_INT 1
37620: ST_TO_ADDR
// if not k then
37621: LD_VAR 0 8
37625: NOT
37626: IFFALSE 37638
// k := array ;
37628: LD_ADDR_VAR 0 8
37632: PUSH
37633: LD_VAR 0 1
37637: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37638: LD_ADDR_VAR 0 10
37642: PUSH
37643: LD_VAR 0 10
37647: PPUSH
37648: LD_VAR 0 8
37652: PPUSH
37653: LD_VAR 0 1
37657: PUSH
37658: LD_VAR 0 7
37662: ARRAY
37663: PPUSH
37664: CALL_OW 1
37668: ST_TO_ADDR
// end ;
37669: GO 37582
37671: POP
37672: POP
// array := tmp ;
37673: LD_ADDR_VAR 0 1
37677: PUSH
37678: LD_VAR 0 10
37682: ST_TO_ADDR
// end ;
37683: GO 37564
37685: POP
37686: POP
// result := array ;
37687: LD_ADDR_VAR 0 5
37691: PUSH
37692: LD_VAR 0 1
37696: ST_TO_ADDR
// end ;
37697: LD_VAR 0 5
37701: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37702: LD_INT 0
37704: PPUSH
37705: PPUSH
// result := 0 ;
37706: LD_ADDR_VAR 0 3
37710: PUSH
37711: LD_INT 0
37713: ST_TO_ADDR
// if not array or not value in array then
37714: LD_VAR 0 1
37718: NOT
37719: PUSH
37720: LD_VAR 0 2
37724: PUSH
37725: LD_VAR 0 1
37729: IN
37730: NOT
37731: OR
37732: IFFALSE 37736
// exit ;
37734: GO 37790
// for i = 1 to array do
37736: LD_ADDR_VAR 0 4
37740: PUSH
37741: DOUBLE
37742: LD_INT 1
37744: DEC
37745: ST_TO_ADDR
37746: LD_VAR 0 1
37750: PUSH
37751: FOR_TO
37752: IFFALSE 37788
// if value = array [ i ] then
37754: LD_VAR 0 2
37758: PUSH
37759: LD_VAR 0 1
37763: PUSH
37764: LD_VAR 0 4
37768: ARRAY
37769: EQUAL
37770: IFFALSE 37786
// begin result := i ;
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_VAR 0 4
37781: ST_TO_ADDR
// exit ;
37782: POP
37783: POP
37784: GO 37790
// end ;
37786: GO 37751
37788: POP
37789: POP
// end ;
37790: LD_VAR 0 3
37794: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37795: LD_INT 0
37797: PPUSH
// vc_chassis := chassis ;
37798: LD_ADDR_OWVAR 37
37802: PUSH
37803: LD_VAR 0 1
37807: ST_TO_ADDR
// vc_engine := engine ;
37808: LD_ADDR_OWVAR 39
37812: PUSH
37813: LD_VAR 0 2
37817: ST_TO_ADDR
// vc_control := control ;
37818: LD_ADDR_OWVAR 38
37822: PUSH
37823: LD_VAR 0 3
37827: ST_TO_ADDR
// vc_weapon := weapon ;
37828: LD_ADDR_OWVAR 40
37832: PUSH
37833: LD_VAR 0 4
37837: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37838: LD_ADDR_OWVAR 41
37842: PUSH
37843: LD_VAR 0 5
37847: ST_TO_ADDR
// end ;
37848: LD_VAR 0 6
37852: RET
// export function WantPlant ( unit ) ; var task ; begin
37853: LD_INT 0
37855: PPUSH
37856: PPUSH
// result := false ;
37857: LD_ADDR_VAR 0 2
37861: PUSH
37862: LD_INT 0
37864: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37865: LD_ADDR_VAR 0 3
37869: PUSH
37870: LD_VAR 0 1
37874: PPUSH
37875: CALL_OW 437
37879: ST_TO_ADDR
// if task then
37880: LD_VAR 0 3
37884: IFFALSE 37912
// if task [ 1 ] [ 1 ] = p then
37886: LD_VAR 0 3
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PUSH
37899: LD_STRING p
37901: EQUAL
37902: IFFALSE 37912
// result := true ;
37904: LD_ADDR_VAR 0 2
37908: PUSH
37909: LD_INT 1
37911: ST_TO_ADDR
// end ;
37912: LD_VAR 0 2
37916: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37917: LD_INT 0
37919: PPUSH
37920: PPUSH
37921: PPUSH
37922: PPUSH
// if pos < 1 then
37923: LD_VAR 0 2
37927: PUSH
37928: LD_INT 1
37930: LESS
37931: IFFALSE 37935
// exit ;
37933: GO 38238
// if pos = 1 then
37935: LD_VAR 0 2
37939: PUSH
37940: LD_INT 1
37942: EQUAL
37943: IFFALSE 37976
// result := Replace ( arr , pos [ 1 ] , value ) else
37945: LD_ADDR_VAR 0 4
37949: PUSH
37950: LD_VAR 0 1
37954: PPUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
37974: GO 38238
// begin tmp := arr ;
37976: LD_ADDR_VAR 0 6
37980: PUSH
37981: LD_VAR 0 1
37985: ST_TO_ADDR
// s_arr := [ tmp ] ;
37986: LD_ADDR_VAR 0 7
37990: PUSH
37991: LD_VAR 0 6
37995: PUSH
37996: EMPTY
37997: LIST
37998: ST_TO_ADDR
// for i = 1 to pos - 1 do
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: DOUBLE
38005: LD_INT 1
38007: DEC
38008: ST_TO_ADDR
38009: LD_VAR 0 2
38013: PUSH
38014: LD_INT 1
38016: MINUS
38017: PUSH
38018: FOR_TO
38019: IFFALSE 38064
// begin tmp := tmp [ pos [ i ] ] ;
38021: LD_ADDR_VAR 0 6
38025: PUSH
38026: LD_VAR 0 6
38030: PUSH
38031: LD_VAR 0 2
38035: PUSH
38036: LD_VAR 0 5
38040: ARRAY
38041: ARRAY
38042: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38043: LD_ADDR_VAR 0 7
38047: PUSH
38048: LD_VAR 0 7
38052: PUSH
38053: LD_VAR 0 6
38057: PUSH
38058: EMPTY
38059: LIST
38060: ADD
38061: ST_TO_ADDR
// end ;
38062: GO 38018
38064: POP
38065: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38066: LD_ADDR_VAR 0 6
38070: PUSH
38071: LD_VAR 0 6
38075: PPUSH
38076: LD_VAR 0 2
38080: PUSH
38081: LD_VAR 0 2
38085: ARRAY
38086: PPUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: CALL_OW 1
38096: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38097: LD_ADDR_VAR 0 7
38101: PUSH
38102: LD_VAR 0 7
38106: PPUSH
38107: LD_VAR 0 7
38111: PPUSH
38112: LD_VAR 0 6
38116: PPUSH
38117: CALL_OW 1
38121: ST_TO_ADDR
// for i = s_arr downto 2 do
38122: LD_ADDR_VAR 0 5
38126: PUSH
38127: DOUBLE
38128: LD_VAR 0 7
38132: INC
38133: ST_TO_ADDR
38134: LD_INT 2
38136: PUSH
38137: FOR_DOWNTO
38138: IFFALSE 38222
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38140: LD_ADDR_VAR 0 6
38144: PUSH
38145: LD_VAR 0 7
38149: PUSH
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 1
38157: MINUS
38158: ARRAY
38159: PPUSH
38160: LD_VAR 0 2
38164: PUSH
38165: LD_VAR 0 5
38169: PUSH
38170: LD_INT 1
38172: MINUS
38173: ARRAY
38174: PPUSH
38175: LD_VAR 0 7
38179: PUSH
38180: LD_VAR 0 5
38184: ARRAY
38185: PPUSH
38186: CALL_OW 1
38190: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38191: LD_ADDR_VAR 0 7
38195: PUSH
38196: LD_VAR 0 7
38200: PPUSH
38201: LD_VAR 0 5
38205: PUSH
38206: LD_INT 1
38208: MINUS
38209: PPUSH
38210: LD_VAR 0 6
38214: PPUSH
38215: CALL_OW 1
38219: ST_TO_ADDR
// end ;
38220: GO 38137
38222: POP
38223: POP
// result := s_arr [ 1 ] ;
38224: LD_ADDR_VAR 0 4
38228: PUSH
38229: LD_VAR 0 7
38233: PUSH
38234: LD_INT 1
38236: ARRAY
38237: ST_TO_ADDR
// end ; end ;
38238: LD_VAR 0 4
38242: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38243: LD_INT 0
38245: PPUSH
38246: PPUSH
// if not list then
38247: LD_VAR 0 1
38251: NOT
38252: IFFALSE 38256
// exit ;
38254: GO 38347
// i := list [ pos1 ] ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_VAR 0 2
38270: ARRAY
38271: ST_TO_ADDR
// if not i then
38272: LD_VAR 0 5
38276: NOT
38277: IFFALSE 38281
// exit ;
38279: GO 38347
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38281: LD_ADDR_VAR 0 1
38285: PUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: LD_VAR 0 1
38300: PUSH
38301: LD_VAR 0 3
38305: ARRAY
38306: PPUSH
38307: CALL_OW 1
38311: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38312: LD_ADDR_VAR 0 1
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: LD_VAR 0 5
38331: PPUSH
38332: CALL_OW 1
38336: ST_TO_ADDR
// result := list ;
38337: LD_ADDR_VAR 0 4
38341: PUSH
38342: LD_VAR 0 1
38346: ST_TO_ADDR
// end ;
38347: LD_VAR 0 4
38351: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38352: LD_INT 0
38354: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 250
38369: PPUSH
38370: LD_VAR 0 1
38374: PPUSH
38375: CALL_OW 251
38379: PPUSH
38380: LD_VAR 0 2
38384: PPUSH
38385: LD_VAR 0 3
38389: PPUSH
38390: LD_VAR 0 4
38394: PPUSH
38395: CALL 38405 0 5
38399: ST_TO_ADDR
// end ;
38400: LD_VAR 0 5
38404: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38405: LD_INT 0
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
// if not list then
38411: LD_VAR 0 3
38415: NOT
38416: IFFALSE 38420
// exit ;
38418: GO 38808
// result := [ ] ;
38420: LD_ADDR_VAR 0 6
38424: PUSH
38425: EMPTY
38426: ST_TO_ADDR
// for i in list do
38427: LD_ADDR_VAR 0 7
38431: PUSH
38432: LD_VAR 0 3
38436: PUSH
38437: FOR_IN
38438: IFFALSE 38640
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38440: LD_ADDR_VAR 0 9
38444: PUSH
38445: LD_VAR 0 7
38449: PPUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: LD_VAR 0 2
38459: PPUSH
38460: CALL_OW 297
38464: ST_TO_ADDR
// if not result then
38465: LD_VAR 0 6
38469: NOT
38470: IFFALSE 38496
// result := [ [ i , tmp ] ] else
38472: LD_ADDR_VAR 0 6
38476: PUSH
38477: LD_VAR 0 7
38481: PUSH
38482: LD_VAR 0 9
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: ST_TO_ADDR
38494: GO 38638
// begin if result [ result ] [ 2 ] < tmp then
38496: LD_VAR 0 6
38500: PUSH
38501: LD_VAR 0 6
38505: ARRAY
38506: PUSH
38507: LD_INT 2
38509: ARRAY
38510: PUSH
38511: LD_VAR 0 9
38515: LESS
38516: IFFALSE 38558
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38518: LD_ADDR_VAR 0 6
38522: PUSH
38523: LD_VAR 0 6
38527: PPUSH
38528: LD_VAR 0 6
38532: PUSH
38533: LD_INT 1
38535: PLUS
38536: PPUSH
38537: LD_VAR 0 7
38541: PUSH
38542: LD_VAR 0 9
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 2
38555: ST_TO_ADDR
38556: GO 38638
// for j = 1 to result do
38558: LD_ADDR_VAR 0 8
38562: PUSH
38563: DOUBLE
38564: LD_INT 1
38566: DEC
38567: ST_TO_ADDR
38568: LD_VAR 0 6
38572: PUSH
38573: FOR_TO
38574: IFFALSE 38636
// begin if tmp < result [ j ] [ 2 ] then
38576: LD_VAR 0 9
38580: PUSH
38581: LD_VAR 0 6
38585: PUSH
38586: LD_VAR 0 8
38590: ARRAY
38591: PUSH
38592: LD_INT 2
38594: ARRAY
38595: LESS
38596: IFFALSE 38634
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38598: LD_ADDR_VAR 0 6
38602: PUSH
38603: LD_VAR 0 6
38607: PPUSH
38608: LD_VAR 0 8
38612: PPUSH
38613: LD_VAR 0 7
38617: PUSH
38618: LD_VAR 0 9
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PPUSH
38627: CALL_OW 2
38631: ST_TO_ADDR
// break ;
38632: GO 38636
// end ; end ;
38634: GO 38573
38636: POP
38637: POP
// end ; end ;
38638: GO 38437
38640: POP
38641: POP
// if result and not asc then
38642: LD_VAR 0 6
38646: PUSH
38647: LD_VAR 0 4
38651: NOT
38652: AND
38653: IFFALSE 38728
// begin tmp := result ;
38655: LD_ADDR_VAR 0 9
38659: PUSH
38660: LD_VAR 0 6
38664: ST_TO_ADDR
// for i = tmp downto 1 do
38665: LD_ADDR_VAR 0 7
38669: PUSH
38670: DOUBLE
38671: LD_VAR 0 9
38675: INC
38676: ST_TO_ADDR
38677: LD_INT 1
38679: PUSH
38680: FOR_DOWNTO
38681: IFFALSE 38726
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38683: LD_ADDR_VAR 0 6
38687: PUSH
38688: LD_VAR 0 6
38692: PPUSH
38693: LD_VAR 0 9
38697: PUSH
38698: LD_VAR 0 7
38702: MINUS
38703: PUSH
38704: LD_INT 1
38706: PLUS
38707: PPUSH
38708: LD_VAR 0 9
38712: PUSH
38713: LD_VAR 0 7
38717: ARRAY
38718: PPUSH
38719: CALL_OW 1
38723: ST_TO_ADDR
38724: GO 38680
38726: POP
38727: POP
// end ; tmp := [ ] ;
38728: LD_ADDR_VAR 0 9
38732: PUSH
38733: EMPTY
38734: ST_TO_ADDR
// if mode then
38735: LD_VAR 0 5
38739: IFFALSE 38808
// begin for i = 1 to result do
38741: LD_ADDR_VAR 0 7
38745: PUSH
38746: DOUBLE
38747: LD_INT 1
38749: DEC
38750: ST_TO_ADDR
38751: LD_VAR 0 6
38755: PUSH
38756: FOR_TO
38757: IFFALSE 38796
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38759: LD_ADDR_VAR 0 9
38763: PUSH
38764: LD_VAR 0 9
38768: PPUSH
38769: LD_VAR 0 7
38773: PPUSH
38774: LD_VAR 0 6
38778: PUSH
38779: LD_VAR 0 7
38783: ARRAY
38784: PUSH
38785: LD_INT 1
38787: ARRAY
38788: PPUSH
38789: CALL_OW 1
38793: ST_TO_ADDR
38794: GO 38756
38796: POP
38797: POP
// result := tmp ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 9
38807: ST_TO_ADDR
// end ; end ;
38808: LD_VAR 0 6
38812: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38813: LD_INT 0
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: ST_TO_ADDR
// if not x or not y then
38843: LD_VAR 0 2
38847: NOT
38848: PUSH
38849: LD_VAR 0 3
38853: NOT
38854: OR
38855: IFFALSE 38859
// exit ;
38857: GO 40511
// if not range then
38859: LD_VAR 0 4
38863: NOT
38864: IFFALSE 38874
// range := 10 ;
38866: LD_ADDR_VAR 0 4
38870: PUSH
38871: LD_INT 10
38873: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38874: LD_ADDR_VAR 0 8
38878: PUSH
38879: LD_INT 81
38881: PUSH
38882: LD_VAR 0 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 92
38893: PUSH
38894: LD_VAR 0 2
38898: PUSH
38899: LD_VAR 0 3
38903: PUSH
38904: LD_VAR 0 4
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: LD_INT 21
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: PPUSH
38937: CALL_OW 69
38941: ST_TO_ADDR
// if not tmp then
38942: LD_VAR 0 8
38946: NOT
38947: IFFALSE 38951
// exit ;
38949: GO 40511
// for i in tmp do
38951: LD_ADDR_VAR 0 6
38955: PUSH
38956: LD_VAR 0 8
38960: PUSH
38961: FOR_IN
38962: IFFALSE 40486
// begin points := [ 0 , 0 , 0 ] ;
38964: LD_ADDR_VAR 0 9
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// bpoints := 1 ;
38983: LD_ADDR_VAR 0 10
38987: PUSH
38988: LD_INT 1
38990: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38991: LD_VAR 0 6
38995: PPUSH
38996: CALL_OW 247
39000: PUSH
39001: LD_INT 1
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39009
39007: GO 39587
39009: POP
// begin if GetClass ( i ) = 1 then
39010: LD_VAR 0 6
39014: PPUSH
39015: CALL_OW 257
39019: PUSH
39020: LD_INT 1
39022: EQUAL
39023: IFFALSE 39044
// points := [ 10 , 5 , 3 ] ;
39025: LD_ADDR_VAR 0 9
39029: PUSH
39030: LD_INT 10
39032: PUSH
39033: LD_INT 5
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39044: LD_VAR 0 6
39048: PPUSH
39049: CALL_OW 257
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: LD_INT 4
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: IN
39068: IFFALSE 39089
// points := [ 3 , 2 , 1 ] ;
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39089: LD_VAR 0 6
39093: PPUSH
39094: CALL_OW 257
39098: PUSH
39099: LD_INT 5
39101: EQUAL
39102: IFFALSE 39123
// points := [ 130 , 5 , 2 ] ;
39104: LD_ADDR_VAR 0 9
39108: PUSH
39109: LD_INT 130
39111: PUSH
39112: LD_INT 5
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39123: LD_VAR 0 6
39127: PPUSH
39128: CALL_OW 257
39132: PUSH
39133: LD_INT 8
39135: EQUAL
39136: IFFALSE 39157
// points := [ 35 , 35 , 30 ] ;
39138: LD_ADDR_VAR 0 9
39142: PUSH
39143: LD_INT 35
39145: PUSH
39146: LD_INT 35
39148: PUSH
39149: LD_INT 30
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39157: LD_VAR 0 6
39161: PPUSH
39162: CALL_OW 257
39166: PUSH
39167: LD_INT 9
39169: EQUAL
39170: IFFALSE 39191
// points := [ 20 , 55 , 40 ] ;
39172: LD_ADDR_VAR 0 9
39176: PUSH
39177: LD_INT 20
39179: PUSH
39180: LD_INT 55
39182: PUSH
39183: LD_INT 40
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39191: LD_VAR 0 6
39195: PPUSH
39196: CALL_OW 257
39200: PUSH
39201: LD_INT 12
39203: PUSH
39204: LD_INT 16
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: IN
39211: IFFALSE 39232
// points := [ 5 , 3 , 2 ] ;
39213: LD_ADDR_VAR 0 9
39217: PUSH
39218: LD_INT 5
39220: PUSH
39221: LD_INT 3
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39232: LD_VAR 0 6
39236: PPUSH
39237: CALL_OW 257
39241: PUSH
39242: LD_INT 17
39244: EQUAL
39245: IFFALSE 39266
// points := [ 100 , 50 , 75 ] ;
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: LD_INT 100
39254: PUSH
39255: LD_INT 50
39257: PUSH
39258: LD_INT 75
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39266: LD_VAR 0 6
39270: PPUSH
39271: CALL_OW 257
39275: PUSH
39276: LD_INT 15
39278: EQUAL
39279: IFFALSE 39300
// points := [ 10 , 5 , 3 ] ;
39281: LD_ADDR_VAR 0 9
39285: PUSH
39286: LD_INT 10
39288: PUSH
39289: LD_INT 5
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39300: LD_VAR 0 6
39304: PPUSH
39305: CALL_OW 257
39309: PUSH
39310: LD_INT 14
39312: EQUAL
39313: IFFALSE 39334
// points := [ 10 , 0 , 0 ] ;
39315: LD_ADDR_VAR 0 9
39319: PUSH
39320: LD_INT 10
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39334: LD_VAR 0 6
39338: PPUSH
39339: CALL_OW 257
39343: PUSH
39344: LD_INT 11
39346: EQUAL
39347: IFFALSE 39368
// points := [ 30 , 10 , 5 ] ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_INT 30
39356: PUSH
39357: LD_INT 10
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39368: LD_VAR 0 1
39372: PPUSH
39373: LD_INT 5
39375: PPUSH
39376: CALL_OW 321
39380: PUSH
39381: LD_INT 2
39383: EQUAL
39384: IFFALSE 39401
// bpoints := bpoints * 1.8 ;
39386: LD_ADDR_VAR 0 10
39390: PUSH
39391: LD_VAR 0 10
39395: PUSH
39396: LD_REAL  1.80000000000000E+0000
39399: MUL
39400: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39401: LD_VAR 0 6
39405: PPUSH
39406: CALL_OW 257
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: IN
39429: PUSH
39430: LD_VAR 0 1
39434: PPUSH
39435: LD_INT 51
39437: PPUSH
39438: CALL_OW 321
39442: PUSH
39443: LD_INT 2
39445: EQUAL
39446: AND
39447: IFFALSE 39464
// bpoints := bpoints * 1.2 ;
39449: LD_ADDR_VAR 0 10
39453: PUSH
39454: LD_VAR 0 10
39458: PUSH
39459: LD_REAL  1.20000000000000E+0000
39462: MUL
39463: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39464: LD_VAR 0 6
39468: PPUSH
39469: CALL_OW 257
39473: PUSH
39474: LD_INT 5
39476: PUSH
39477: LD_INT 7
39479: PUSH
39480: LD_INT 9
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: IN
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: LD_INT 52
39496: PPUSH
39497: CALL_OW 321
39501: PUSH
39502: LD_INT 2
39504: EQUAL
39505: AND
39506: IFFALSE 39523
// bpoints := bpoints * 1.5 ;
39508: LD_ADDR_VAR 0 10
39512: PUSH
39513: LD_VAR 0 10
39517: PUSH
39518: LD_REAL  1.50000000000000E+0000
39521: MUL
39522: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_INT 66
39530: PPUSH
39531: CALL_OW 321
39535: PUSH
39536: LD_INT 2
39538: EQUAL
39539: IFFALSE 39556
// bpoints := bpoints * 1.1 ;
39541: LD_ADDR_VAR 0 10
39545: PUSH
39546: LD_VAR 0 10
39550: PUSH
39551: LD_REAL  1.10000000000000E+0000
39554: MUL
39555: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39556: LD_ADDR_VAR 0 10
39560: PUSH
39561: LD_VAR 0 10
39565: PUSH
39566: LD_VAR 0 6
39570: PPUSH
39571: LD_INT 1
39573: PPUSH
39574: CALL_OW 259
39578: PUSH
39579: LD_REAL  1.15000000000000E+0000
39582: MUL
39583: MUL
39584: ST_TO_ADDR
// end ; unit_vehicle :
39585: GO 40415
39587: LD_INT 2
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39595
39593: GO 40403
39595: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39596: LD_VAR 0 6
39600: PPUSH
39601: CALL_OW 264
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: LD_INT 42
39611: PUSH
39612: LD_INT 24
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: IN
39620: IFFALSE 39641
// points := [ 25 , 5 , 3 ] ;
39622: LD_ADDR_VAR 0 9
39626: PUSH
39627: LD_INT 25
39629: PUSH
39630: LD_INT 5
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39641: LD_VAR 0 6
39645: PPUSH
39646: CALL_OW 264
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 43
39656: PUSH
39657: LD_INT 25
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: IN
39665: IFFALSE 39686
// points := [ 40 , 15 , 5 ] ;
39667: LD_ADDR_VAR 0 9
39671: PUSH
39672: LD_INT 40
39674: PUSH
39675: LD_INT 15
39677: PUSH
39678: LD_INT 5
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39686: LD_VAR 0 6
39690: PPUSH
39691: CALL_OW 264
39695: PUSH
39696: LD_INT 3
39698: PUSH
39699: LD_INT 23
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: IN
39706: IFFALSE 39727
// points := [ 7 , 25 , 8 ] ;
39708: LD_ADDR_VAR 0 9
39712: PUSH
39713: LD_INT 7
39715: PUSH
39716: LD_INT 25
39718: PUSH
39719: LD_INT 8
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39727: LD_VAR 0 6
39731: PPUSH
39732: CALL_OW 264
39736: PUSH
39737: LD_INT 5
39739: PUSH
39740: LD_INT 27
39742: PUSH
39743: LD_INT 44
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: IN
39751: IFFALSE 39772
// points := [ 14 , 50 , 16 ] ;
39753: LD_ADDR_VAR 0 9
39757: PUSH
39758: LD_INT 14
39760: PUSH
39761: LD_INT 50
39763: PUSH
39764: LD_INT 16
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39772: LD_VAR 0 6
39776: PPUSH
39777: CALL_OW 264
39781: PUSH
39782: LD_INT 6
39784: PUSH
39785: LD_INT 46
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: IN
39792: IFFALSE 39813
// points := [ 32 , 120 , 70 ] ;
39794: LD_ADDR_VAR 0 9
39798: PUSH
39799: LD_INT 32
39801: PUSH
39802: LD_INT 120
39804: PUSH
39805: LD_INT 70
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39813: LD_VAR 0 6
39817: PPUSH
39818: CALL_OW 264
39822: PUSH
39823: LD_INT 7
39825: PUSH
39826: LD_INT 28
39828: PUSH
39829: LD_INT 45
39831: PUSH
39832: LD_EXP 135
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: IN
39843: IFFALSE 39864
// points := [ 35 , 20 , 45 ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: LD_INT 35
39852: PUSH
39853: LD_INT 20
39855: PUSH
39856: LD_INT 45
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39864: LD_VAR 0 6
39868: PPUSH
39869: CALL_OW 264
39873: PUSH
39874: LD_INT 47
39876: PUSH
39877: EMPTY
39878: LIST
39879: IN
39880: IFFALSE 39901
// points := [ 67 , 45 , 75 ] ;
39882: LD_ADDR_VAR 0 9
39886: PUSH
39887: LD_INT 67
39889: PUSH
39890: LD_INT 45
39892: PUSH
39893: LD_INT 75
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39901: LD_VAR 0 6
39905: PPUSH
39906: CALL_OW 264
39910: PUSH
39911: LD_INT 26
39913: PUSH
39914: EMPTY
39915: LIST
39916: IN
39917: IFFALSE 39938
// points := [ 120 , 30 , 80 ] ;
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_INT 120
39926: PUSH
39927: LD_INT 30
39929: PUSH
39930: LD_INT 80
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39938: LD_VAR 0 6
39942: PPUSH
39943: CALL_OW 264
39947: PUSH
39948: LD_INT 22
39950: PUSH
39951: EMPTY
39952: LIST
39953: IN
39954: IFFALSE 39975
// points := [ 40 , 1 , 1 ] ;
39956: LD_ADDR_VAR 0 9
39960: PUSH
39961: LD_INT 40
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39975: LD_VAR 0 6
39979: PPUSH
39980: CALL_OW 264
39984: PUSH
39985: LD_INT 29
39987: PUSH
39988: EMPTY
39989: LIST
39990: IN
39991: IFFALSE 40012
// points := [ 70 , 200 , 400 ] ;
39993: LD_ADDR_VAR 0 9
39997: PUSH
39998: LD_INT 70
40000: PUSH
40001: LD_INT 200
40003: PUSH
40004: LD_INT 400
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40012: LD_VAR 0 6
40016: PPUSH
40017: CALL_OW 264
40021: PUSH
40022: LD_INT 14
40024: PUSH
40025: LD_INT 53
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: IN
40032: IFFALSE 40053
// points := [ 40 , 10 , 20 ] ;
40034: LD_ADDR_VAR 0 9
40038: PUSH
40039: LD_INT 40
40041: PUSH
40042: LD_INT 10
40044: PUSH
40045: LD_INT 20
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40053: LD_VAR 0 6
40057: PPUSH
40058: CALL_OW 264
40062: PUSH
40063: LD_INT 9
40065: PUSH
40066: EMPTY
40067: LIST
40068: IN
40069: IFFALSE 40090
// points := [ 5 , 70 , 20 ] ;
40071: LD_ADDR_VAR 0 9
40075: PUSH
40076: LD_INT 5
40078: PUSH
40079: LD_INT 70
40081: PUSH
40082: LD_INT 20
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40090: LD_VAR 0 6
40094: PPUSH
40095: CALL_OW 264
40099: PUSH
40100: LD_INT 10
40102: PUSH
40103: EMPTY
40104: LIST
40105: IN
40106: IFFALSE 40127
// points := [ 35 , 110 , 70 ] ;
40108: LD_ADDR_VAR 0 9
40112: PUSH
40113: LD_INT 35
40115: PUSH
40116: LD_INT 110
40118: PUSH
40119: LD_INT 70
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40127: LD_VAR 0 6
40131: PPUSH
40132: CALL_OW 265
40136: PUSH
40137: LD_INT 25
40139: EQUAL
40140: IFFALSE 40161
// points := [ 80 , 65 , 100 ] ;
40142: LD_ADDR_VAR 0 9
40146: PUSH
40147: LD_INT 80
40149: PUSH
40150: LD_INT 65
40152: PUSH
40153: LD_INT 100
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40161: LD_VAR 0 6
40165: PPUSH
40166: CALL_OW 263
40170: PUSH
40171: LD_INT 1
40173: EQUAL
40174: IFFALSE 40209
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40176: LD_ADDR_VAR 0 10
40180: PUSH
40181: LD_VAR 0 10
40185: PUSH
40186: LD_VAR 0 6
40190: PPUSH
40191: CALL_OW 311
40195: PPUSH
40196: LD_INT 3
40198: PPUSH
40199: CALL_OW 259
40203: PUSH
40204: LD_INT 4
40206: MUL
40207: MUL
40208: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40209: LD_VAR 0 6
40213: PPUSH
40214: CALL_OW 263
40218: PUSH
40219: LD_INT 2
40221: EQUAL
40222: IFFALSE 40273
// begin j := IsControledBy ( i ) ;
40224: LD_ADDR_VAR 0 7
40228: PUSH
40229: LD_VAR 0 6
40233: PPUSH
40234: CALL_OW 312
40238: ST_TO_ADDR
// if j then
40239: LD_VAR 0 7
40243: IFFALSE 40273
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40245: LD_ADDR_VAR 0 10
40249: PUSH
40250: LD_VAR 0 10
40254: PUSH
40255: LD_VAR 0 7
40259: PPUSH
40260: LD_INT 3
40262: PPUSH
40263: CALL_OW 259
40267: PUSH
40268: LD_INT 3
40270: MUL
40271: MUL
40272: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40273: LD_VAR 0 6
40277: PPUSH
40278: CALL_OW 264
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: LD_INT 6
40288: PUSH
40289: LD_INT 46
40291: PUSH
40292: LD_INT 44
40294: PUSH
40295: LD_INT 47
40297: PUSH
40298: LD_INT 45
40300: PUSH
40301: LD_INT 28
40303: PUSH
40304: LD_INT 7
40306: PUSH
40307: LD_INT 27
40309: PUSH
40310: LD_INT 29
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: IN
40325: PUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: LD_INT 52
40333: PPUSH
40334: CALL_OW 321
40338: PUSH
40339: LD_INT 2
40341: EQUAL
40342: AND
40343: IFFALSE 40360
// bpoints := bpoints * 1.2 ;
40345: LD_ADDR_VAR 0 10
40349: PUSH
40350: LD_VAR 0 10
40354: PUSH
40355: LD_REAL  1.20000000000000E+0000
40358: MUL
40359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40360: LD_VAR 0 6
40364: PPUSH
40365: CALL_OW 264
40369: PUSH
40370: LD_INT 6
40372: PUSH
40373: LD_INT 46
40375: PUSH
40376: LD_INT 47
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: IN
40384: IFFALSE 40401
// bpoints := bpoints * 1.2 ;
40386: LD_ADDR_VAR 0 10
40390: PUSH
40391: LD_VAR 0 10
40395: PUSH
40396: LD_REAL  1.20000000000000E+0000
40399: MUL
40400: ST_TO_ADDR
// end ; unit_building :
40401: GO 40415
40403: LD_INT 3
40405: DOUBLE
40406: EQUAL
40407: IFTRUE 40411
40409: GO 40414
40411: POP
// ; end ;
40412: GO 40415
40414: POP
// for j = 1 to 3 do
40415: LD_ADDR_VAR 0 7
40419: PUSH
40420: DOUBLE
40421: LD_INT 1
40423: DEC
40424: ST_TO_ADDR
40425: LD_INT 3
40427: PUSH
40428: FOR_TO
40429: IFFALSE 40482
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40431: LD_ADDR_VAR 0 5
40435: PUSH
40436: LD_VAR 0 5
40440: PPUSH
40441: LD_VAR 0 7
40445: PPUSH
40446: LD_VAR 0 5
40450: PUSH
40451: LD_VAR 0 7
40455: ARRAY
40456: PUSH
40457: LD_VAR 0 9
40461: PUSH
40462: LD_VAR 0 7
40466: ARRAY
40467: PUSH
40468: LD_VAR 0 10
40472: MUL
40473: PLUS
40474: PPUSH
40475: CALL_OW 1
40479: ST_TO_ADDR
40480: GO 40428
40482: POP
40483: POP
// end ;
40484: GO 38961
40486: POP
40487: POP
// result := Replace ( result , 4 , tmp ) ;
40488: LD_ADDR_VAR 0 5
40492: PUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: LD_INT 4
40500: PPUSH
40501: LD_VAR 0 8
40505: PPUSH
40506: CALL_OW 1
40510: ST_TO_ADDR
// end ;
40511: LD_VAR 0 5
40515: RET
// export function DangerAtRange ( unit , range ) ; begin
40516: LD_INT 0
40518: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 255
40533: PPUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 250
40543: PPUSH
40544: LD_VAR 0 1
40548: PPUSH
40549: CALL_OW 251
40553: PPUSH
40554: LD_VAR 0 2
40558: PPUSH
40559: CALL 38813 0 4
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 3
40568: RET
// export function DangerInArea ( side , area ) ; begin
40569: LD_INT 0
40571: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_INT 81
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PPUSH
40594: CALL_OW 70
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 3
40603: RET
// export function IsExtension ( b ) ; begin
40604: LD_INT 0
40606: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40607: LD_ADDR_VAR 0 2
40611: PUSH
40612: LD_VAR 0 1
40616: PUSH
40617: LD_INT 23
40619: PUSH
40620: LD_INT 20
40622: PUSH
40623: LD_INT 22
40625: PUSH
40626: LD_INT 17
40628: PUSH
40629: LD_INT 24
40631: PUSH
40632: LD_INT 21
40634: PUSH
40635: LD_INT 19
40637: PUSH
40638: LD_INT 16
40640: PUSH
40641: LD_INT 25
40643: PUSH
40644: LD_INT 18
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: IN
40659: ST_TO_ADDR
// end ;
40660: LD_VAR 0 2
40664: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40665: LD_INT 0
40667: PPUSH
40668: PPUSH
40669: PPUSH
// result := [ ] ;
40670: LD_ADDR_VAR 0 4
40674: PUSH
40675: EMPTY
40676: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40677: LD_ADDR_VAR 0 5
40681: PUSH
40682: LD_VAR 0 2
40686: PPUSH
40687: LD_INT 21
40689: PUSH
40690: LD_INT 3
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PPUSH
40697: CALL_OW 70
40701: ST_TO_ADDR
// if not tmp then
40702: LD_VAR 0 5
40706: NOT
40707: IFFALSE 40711
// exit ;
40709: GO 40775
// if checkLink then
40711: LD_VAR 0 3
40715: IFFALSE 40765
// begin for i in tmp do
40717: LD_ADDR_VAR 0 6
40721: PUSH
40722: LD_VAR 0 5
40726: PUSH
40727: FOR_IN
40728: IFFALSE 40763
// if GetBase ( i ) <> base then
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 274
40739: PUSH
40740: LD_VAR 0 1
40744: NONEQUAL
40745: IFFALSE 40761
// ComLinkToBase ( base , i ) ;
40747: LD_VAR 0 1
40751: PPUSH
40752: LD_VAR 0 6
40756: PPUSH
40757: CALL_OW 169
40761: GO 40727
40763: POP
40764: POP
// end ; result := tmp ;
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_VAR 0 5
40774: ST_TO_ADDR
// end ;
40775: LD_VAR 0 4
40779: RET
// export function ComComplete ( units , b ) ; var i ; begin
40780: LD_INT 0
40782: PPUSH
40783: PPUSH
// if not units then
40784: LD_VAR 0 1
40788: NOT
40789: IFFALSE 40793
// exit ;
40791: GO 40883
// for i in units do
40793: LD_ADDR_VAR 0 4
40797: PUSH
40798: LD_VAR 0 1
40802: PUSH
40803: FOR_IN
40804: IFFALSE 40881
// if BuildingStatus ( b ) = bs_build then
40806: LD_VAR 0 2
40810: PPUSH
40811: CALL_OW 461
40815: PUSH
40816: LD_INT 1
40818: EQUAL
40819: IFFALSE 40879
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40821: LD_VAR 0 4
40825: PPUSH
40826: LD_STRING h
40828: PUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: CALL_OW 250
40838: PUSH
40839: LD_VAR 0 2
40843: PPUSH
40844: CALL_OW 251
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: PUSH
40872: EMPTY
40873: LIST
40874: PPUSH
40875: CALL_OW 446
40879: GO 40803
40881: POP
40882: POP
// end ;
40883: LD_VAR 0 3
40887: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40888: LD_INT 0
40890: PPUSH
40891: PPUSH
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40896: LD_VAR 0 1
40900: NOT
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 263
40911: PUSH
40912: LD_INT 2
40914: NONEQUAL
40915: OR
40916: IFFALSE 40920
// exit ;
40918: GO 41236
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40920: LD_ADDR_VAR 0 6
40924: PUSH
40925: LD_INT 22
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 255
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 30
40947: PUSH
40948: LD_INT 36
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 34
40957: PUSH
40958: LD_INT 31
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PPUSH
40974: CALL_OW 69
40978: ST_TO_ADDR
// if not tmp then
40979: LD_VAR 0 6
40983: NOT
40984: IFFALSE 40988
// exit ;
40986: GO 41236
// result := [ ] ;
40988: LD_ADDR_VAR 0 2
40992: PUSH
40993: EMPTY
40994: ST_TO_ADDR
// for i in tmp do
40995: LD_ADDR_VAR 0 3
40999: PUSH
41000: LD_VAR 0 6
41004: PUSH
41005: FOR_IN
41006: IFFALSE 41077
// begin t := UnitsInside ( i ) ;
41008: LD_ADDR_VAR 0 4
41012: PUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: CALL_OW 313
41022: ST_TO_ADDR
// if t then
41023: LD_VAR 0 4
41027: IFFALSE 41075
// for j in t do
41029: LD_ADDR_VAR 0 7
41033: PUSH
41034: LD_VAR 0 4
41038: PUSH
41039: FOR_IN
41040: IFFALSE 41073
// result := Replace ( result , result + 1 , j ) ;
41042: LD_ADDR_VAR 0 2
41046: PUSH
41047: LD_VAR 0 2
41051: PPUSH
41052: LD_VAR 0 2
41056: PUSH
41057: LD_INT 1
41059: PLUS
41060: PPUSH
41061: LD_VAR 0 7
41065: PPUSH
41066: CALL_OW 1
41070: ST_TO_ADDR
41071: GO 41039
41073: POP
41074: POP
// end ;
41075: GO 41005
41077: POP
41078: POP
// if not result then
41079: LD_VAR 0 2
41083: NOT
41084: IFFALSE 41088
// exit ;
41086: GO 41236
// mech := result [ 1 ] ;
41088: LD_ADDR_VAR 0 5
41092: PUSH
41093: LD_VAR 0 2
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: ST_TO_ADDR
// if result > 1 then
41102: LD_VAR 0 2
41106: PUSH
41107: LD_INT 1
41109: GREATER
41110: IFFALSE 41222
// begin for i = 2 to result do
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: DOUBLE
41118: LD_INT 2
41120: DEC
41121: ST_TO_ADDR
41122: LD_VAR 0 2
41126: PUSH
41127: FOR_TO
41128: IFFALSE 41220
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41130: LD_ADDR_VAR 0 4
41134: PUSH
41135: LD_VAR 0 2
41139: PUSH
41140: LD_VAR 0 3
41144: ARRAY
41145: PPUSH
41146: LD_INT 3
41148: PPUSH
41149: CALL_OW 259
41153: PUSH
41154: LD_VAR 0 2
41158: PUSH
41159: LD_VAR 0 3
41163: ARRAY
41164: PPUSH
41165: CALL_OW 432
41169: MINUS
41170: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41171: LD_VAR 0 4
41175: PUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: LD_INT 3
41183: PPUSH
41184: CALL_OW 259
41188: PUSH
41189: LD_VAR 0 5
41193: PPUSH
41194: CALL_OW 432
41198: MINUS
41199: GREATEREQUAL
41200: IFFALSE 41218
// mech := result [ i ] ;
41202: LD_ADDR_VAR 0 5
41206: PUSH
41207: LD_VAR 0 2
41211: PUSH
41212: LD_VAR 0 3
41216: ARRAY
41217: ST_TO_ADDR
// end ;
41218: GO 41127
41220: POP
41221: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41222: LD_VAR 0 1
41226: PPUSH
41227: LD_VAR 0 5
41231: PPUSH
41232: CALL_OW 135
// end ;
41236: LD_VAR 0 2
41240: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41241: LD_INT 0
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
// result := [ ] ;
41256: LD_ADDR_VAR 0 7
41260: PUSH
41261: EMPTY
41262: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 266
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: IN
41283: NOT
41284: IFFALSE 41288
// exit ;
41286: GO 42922
// if name then
41288: LD_VAR 0 3
41292: IFFALSE 41308
// SetBName ( base_dep , name ) ;
41294: LD_VAR 0 1
41298: PPUSH
41299: LD_VAR 0 3
41303: PPUSH
41304: CALL_OW 500
// base := GetBase ( base_dep ) ;
41308: LD_ADDR_VAR 0 15
41312: PUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 274
41322: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41323: LD_ADDR_VAR 0 16
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL_OW 255
41337: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41338: LD_ADDR_VAR 0 17
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 248
41352: ST_TO_ADDR
// if sources then
41353: LD_VAR 0 5
41357: IFFALSE 41404
// for i = 1 to 3 do
41359: LD_ADDR_VAR 0 8
41363: PUSH
41364: DOUBLE
41365: LD_INT 1
41367: DEC
41368: ST_TO_ADDR
41369: LD_INT 3
41371: PUSH
41372: FOR_TO
41373: IFFALSE 41402
// AddResourceType ( base , i , sources [ i ] ) ;
41375: LD_VAR 0 15
41379: PPUSH
41380: LD_VAR 0 8
41384: PPUSH
41385: LD_VAR 0 5
41389: PUSH
41390: LD_VAR 0 8
41394: ARRAY
41395: PPUSH
41396: CALL_OW 276
41400: GO 41372
41402: POP
41403: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41404: LD_ADDR_VAR 0 18
41408: PUSH
41409: LD_VAR 0 15
41413: PPUSH
41414: LD_VAR 0 2
41418: PPUSH
41419: LD_INT 1
41421: PPUSH
41422: CALL 40665 0 3
41426: ST_TO_ADDR
// InitHc ;
41427: CALL_OW 19
// InitUc ;
41431: CALL_OW 18
// uc_side := side ;
41435: LD_ADDR_OWVAR 20
41439: PUSH
41440: LD_VAR 0 16
41444: ST_TO_ADDR
// uc_nation := nation ;
41445: LD_ADDR_OWVAR 21
41449: PUSH
41450: LD_VAR 0 17
41454: ST_TO_ADDR
// if buildings then
41455: LD_VAR 0 18
41459: IFFALSE 42781
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41461: LD_ADDR_VAR 0 19
41465: PUSH
41466: LD_VAR 0 18
41470: PPUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 30
41476: PUSH
41477: LD_INT 29
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 30
41486: PUSH
41487: LD_INT 30
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: PPUSH
41499: CALL_OW 72
41503: ST_TO_ADDR
// if tmp then
41504: LD_VAR 0 19
41508: IFFALSE 41556
// for i in tmp do
41510: LD_ADDR_VAR 0 8
41514: PUSH
41515: LD_VAR 0 19
41519: PUSH
41520: FOR_IN
41521: IFFALSE 41554
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41523: LD_VAR 0 8
41527: PPUSH
41528: CALL_OW 250
41532: PPUSH
41533: LD_VAR 0 8
41537: PPUSH
41538: CALL_OW 251
41542: PPUSH
41543: LD_VAR 0 16
41547: PPUSH
41548: CALL_OW 441
41552: GO 41520
41554: POP
41555: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41556: LD_VAR 0 18
41560: PPUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 30
41566: PUSH
41567: LD_INT 32
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 30
41576: PUSH
41577: LD_INT 33
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: PPUSH
41589: CALL_OW 72
41593: IFFALSE 41681
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41595: LD_ADDR_VAR 0 8
41599: PUSH
41600: LD_VAR 0 18
41604: PPUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: LD_INT 32
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 30
41620: PUSH
41621: LD_INT 33
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: PPUSH
41633: CALL_OW 72
41637: PUSH
41638: FOR_IN
41639: IFFALSE 41679
// begin if not GetBWeapon ( i ) then
41641: LD_VAR 0 8
41645: PPUSH
41646: CALL_OW 269
41650: NOT
41651: IFFALSE 41677
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41653: LD_VAR 0 8
41657: PPUSH
41658: LD_VAR 0 8
41662: PPUSH
41663: LD_VAR 0 2
41667: PPUSH
41668: CALL 42927 0 2
41672: PPUSH
41673: CALL_OW 431
// end ;
41677: GO 41638
41679: POP
41680: POP
// end ; for i = 1 to personel do
41681: LD_ADDR_VAR 0 8
41685: PUSH
41686: DOUBLE
41687: LD_INT 1
41689: DEC
41690: ST_TO_ADDR
41691: LD_VAR 0 6
41695: PUSH
41696: FOR_TO
41697: IFFALSE 42761
// begin if i > 4 then
41699: LD_VAR 0 8
41703: PUSH
41704: LD_INT 4
41706: GREATER
41707: IFFALSE 41711
// break ;
41709: GO 42761
// case i of 1 :
41711: LD_VAR 0 8
41715: PUSH
41716: LD_INT 1
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41804
41724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41725: LD_ADDR_VAR 0 12
41729: PUSH
41730: LD_VAR 0 18
41734: PPUSH
41735: LD_INT 22
41737: PUSH
41738: LD_VAR 0 16
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 58
41749: PUSH
41750: EMPTY
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 30
41758: PUSH
41759: LD_INT 32
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 30
41768: PUSH
41769: LD_INT 4
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 30
41778: PUSH
41779: LD_INT 5
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: PPUSH
41797: CALL_OW 72
41801: ST_TO_ADDR
41802: GO 42026
41804: LD_INT 2
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41812
41810: GO 41874
41812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41813: LD_ADDR_VAR 0 12
41817: PUSH
41818: LD_VAR 0 18
41822: PPUSH
41823: LD_INT 22
41825: PUSH
41826: LD_VAR 0 16
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 30
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 30
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PPUSH
41867: CALL_OW 72
41871: ST_TO_ADDR
41872: GO 42026
41874: LD_INT 3
41876: DOUBLE
41877: EQUAL
41878: IFTRUE 41882
41880: GO 41944
41882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41883: LD_ADDR_VAR 0 12
41887: PUSH
41888: LD_VAR 0 18
41892: PPUSH
41893: LD_INT 22
41895: PUSH
41896: LD_VAR 0 16
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 30
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 30
41920: PUSH
41921: LD_INT 3
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PPUSH
41937: CALL_OW 72
41941: ST_TO_ADDR
41942: GO 42026
41944: LD_INT 4
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 42025
41952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41953: LD_ADDR_VAR 0 12
41957: PUSH
41958: LD_VAR 0 18
41962: PPUSH
41963: LD_INT 22
41965: PUSH
41966: LD_VAR 0 16
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 30
41980: PUSH
41981: LD_INT 6
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 30
41990: PUSH
41991: LD_INT 7
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: LD_INT 8
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PPUSH
42018: CALL_OW 72
42022: ST_TO_ADDR
42023: GO 42026
42025: POP
// if i = 1 then
42026: LD_VAR 0 8
42030: PUSH
42031: LD_INT 1
42033: EQUAL
42034: IFFALSE 42145
// begin tmp := [ ] ;
42036: LD_ADDR_VAR 0 19
42040: PUSH
42041: EMPTY
42042: ST_TO_ADDR
// for j in f do
42043: LD_ADDR_VAR 0 9
42047: PUSH
42048: LD_VAR 0 12
42052: PUSH
42053: FOR_IN
42054: IFFALSE 42127
// if GetBType ( j ) = b_bunker then
42056: LD_VAR 0 9
42060: PPUSH
42061: CALL_OW 266
42065: PUSH
42066: LD_INT 32
42068: EQUAL
42069: IFFALSE 42096
// tmp := Insert ( tmp , 1 , j ) else
42071: LD_ADDR_VAR 0 19
42075: PUSH
42076: LD_VAR 0 19
42080: PPUSH
42081: LD_INT 1
42083: PPUSH
42084: LD_VAR 0 9
42088: PPUSH
42089: CALL_OW 2
42093: ST_TO_ADDR
42094: GO 42125
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42096: LD_ADDR_VAR 0 19
42100: PUSH
42101: LD_VAR 0 19
42105: PPUSH
42106: LD_VAR 0 19
42110: PUSH
42111: LD_INT 1
42113: PLUS
42114: PPUSH
42115: LD_VAR 0 9
42119: PPUSH
42120: CALL_OW 2
42124: ST_TO_ADDR
42125: GO 42053
42127: POP
42128: POP
// if tmp then
42129: LD_VAR 0 19
42133: IFFALSE 42145
// f := tmp ;
42135: LD_ADDR_VAR 0 12
42139: PUSH
42140: LD_VAR 0 19
42144: ST_TO_ADDR
// end ; x := personel [ i ] ;
42145: LD_ADDR_VAR 0 13
42149: PUSH
42150: LD_VAR 0 6
42154: PUSH
42155: LD_VAR 0 8
42159: ARRAY
42160: ST_TO_ADDR
// if x = - 1 then
42161: LD_VAR 0 13
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: EQUAL
42170: IFFALSE 42379
// begin for j in f do
42172: LD_ADDR_VAR 0 9
42176: PUSH
42177: LD_VAR 0 12
42181: PUSH
42182: FOR_IN
42183: IFFALSE 42375
// repeat InitHc ;
42185: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42189: LD_VAR 0 9
42193: PPUSH
42194: CALL_OW 266
42198: PUSH
42199: LD_INT 5
42201: EQUAL
42202: IFFALSE 42272
// begin if UnitsInside ( j ) < 3 then
42204: LD_VAR 0 9
42208: PPUSH
42209: CALL_OW 313
42213: PUSH
42214: LD_INT 3
42216: LESS
42217: IFFALSE 42253
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42219: LD_INT 0
42221: PPUSH
42222: LD_INT 5
42224: PUSH
42225: LD_INT 8
42227: PUSH
42228: LD_INT 9
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: PUSH
42236: LD_VAR 0 17
42240: ARRAY
42241: PPUSH
42242: LD_VAR 0 4
42246: PPUSH
42247: CALL_OW 380
42251: GO 42270
// PrepareHuman ( false , i , skill ) ;
42253: LD_INT 0
42255: PPUSH
42256: LD_VAR 0 8
42260: PPUSH
42261: LD_VAR 0 4
42265: PPUSH
42266: CALL_OW 380
// end else
42270: GO 42289
// PrepareHuman ( false , i , skill ) ;
42272: LD_INT 0
42274: PPUSH
42275: LD_VAR 0 8
42279: PPUSH
42280: LD_VAR 0 4
42284: PPUSH
42285: CALL_OW 380
// un := CreateHuman ;
42289: LD_ADDR_VAR 0 14
42293: PUSH
42294: CALL_OW 44
42298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 7
42308: PPUSH
42309: LD_INT 1
42311: PPUSH
42312: LD_VAR 0 14
42316: PPUSH
42317: CALL_OW 2
42321: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42322: LD_VAR 0 14
42326: PPUSH
42327: LD_VAR 0 9
42331: PPUSH
42332: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42336: LD_VAR 0 9
42340: PPUSH
42341: CALL_OW 313
42345: PUSH
42346: LD_INT 6
42348: EQUAL
42349: PUSH
42350: LD_VAR 0 9
42354: PPUSH
42355: CALL_OW 266
42359: PUSH
42360: LD_INT 32
42362: PUSH
42363: LD_INT 31
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: IN
42370: OR
42371: IFFALSE 42185
42373: GO 42182
42375: POP
42376: POP
// end else
42377: GO 42759
// for j = 1 to x do
42379: LD_ADDR_VAR 0 9
42383: PUSH
42384: DOUBLE
42385: LD_INT 1
42387: DEC
42388: ST_TO_ADDR
42389: LD_VAR 0 13
42393: PUSH
42394: FOR_TO
42395: IFFALSE 42757
// begin InitHc ;
42397: CALL_OW 19
// if not f then
42401: LD_VAR 0 12
42405: NOT
42406: IFFALSE 42495
// begin PrepareHuman ( false , i , skill ) ;
42408: LD_INT 0
42410: PPUSH
42411: LD_VAR 0 8
42415: PPUSH
42416: LD_VAR 0 4
42420: PPUSH
42421: CALL_OW 380
// un := CreateHuman ;
42425: LD_ADDR_VAR 0 14
42429: PUSH
42430: CALL_OW 44
42434: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42435: LD_ADDR_VAR 0 7
42439: PUSH
42440: LD_VAR 0 7
42444: PPUSH
42445: LD_INT 1
42447: PPUSH
42448: LD_VAR 0 14
42452: PPUSH
42453: CALL_OW 2
42457: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42458: LD_VAR 0 14
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL_OW 250
42472: PPUSH
42473: LD_VAR 0 1
42477: PPUSH
42478: CALL_OW 251
42482: PPUSH
42483: LD_INT 10
42485: PPUSH
42486: LD_INT 0
42488: PPUSH
42489: CALL_OW 50
// continue ;
42493: GO 42394
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42495: LD_VAR 0 12
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PPUSH
42504: CALL_OW 313
42508: PUSH
42509: LD_VAR 0 12
42513: PUSH
42514: LD_INT 1
42516: ARRAY
42517: PPUSH
42518: CALL_OW 266
42522: PUSH
42523: LD_INT 32
42525: PUSH
42526: LD_INT 31
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: IN
42533: AND
42534: PUSH
42535: LD_VAR 0 12
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PPUSH
42544: CALL_OW 313
42548: PUSH
42549: LD_INT 6
42551: EQUAL
42552: OR
42553: IFFALSE 42573
// f := Delete ( f , 1 ) ;
42555: LD_ADDR_VAR 0 12
42559: PUSH
42560: LD_VAR 0 12
42564: PPUSH
42565: LD_INT 1
42567: PPUSH
42568: CALL_OW 3
42572: ST_TO_ADDR
// if not f then
42573: LD_VAR 0 12
42577: NOT
42578: IFFALSE 42596
// begin x := x + 2 ;
42580: LD_ADDR_VAR 0 13
42584: PUSH
42585: LD_VAR 0 13
42589: PUSH
42590: LD_INT 2
42592: PLUS
42593: ST_TO_ADDR
// continue ;
42594: GO 42394
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42596: LD_VAR 0 12
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: PPUSH
42605: CALL_OW 266
42609: PUSH
42610: LD_INT 5
42612: EQUAL
42613: IFFALSE 42687
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42615: LD_VAR 0 12
42619: PUSH
42620: LD_INT 1
42622: ARRAY
42623: PPUSH
42624: CALL_OW 313
42628: PUSH
42629: LD_INT 3
42631: LESS
42632: IFFALSE 42668
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42634: LD_INT 0
42636: PPUSH
42637: LD_INT 5
42639: PUSH
42640: LD_INT 8
42642: PUSH
42643: LD_INT 9
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: LD_VAR 0 17
42655: ARRAY
42656: PPUSH
42657: LD_VAR 0 4
42661: PPUSH
42662: CALL_OW 380
42666: GO 42685
// PrepareHuman ( false , i , skill ) ;
42668: LD_INT 0
42670: PPUSH
42671: LD_VAR 0 8
42675: PPUSH
42676: LD_VAR 0 4
42680: PPUSH
42681: CALL_OW 380
// end else
42685: GO 42704
// PrepareHuman ( false , i , skill ) ;
42687: LD_INT 0
42689: PPUSH
42690: LD_VAR 0 8
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: CALL_OW 380
// un := CreateHuman ;
42704: LD_ADDR_VAR 0 14
42708: PUSH
42709: CALL_OW 44
42713: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42714: LD_ADDR_VAR 0 7
42718: PUSH
42719: LD_VAR 0 7
42723: PPUSH
42724: LD_INT 1
42726: PPUSH
42727: LD_VAR 0 14
42731: PPUSH
42732: CALL_OW 2
42736: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42737: LD_VAR 0 14
42741: PPUSH
42742: LD_VAR 0 12
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PPUSH
42751: CALL_OW 52
// end ;
42755: GO 42394
42757: POP
42758: POP
// end ;
42759: GO 41696
42761: POP
42762: POP
// result := result ^ buildings ;
42763: LD_ADDR_VAR 0 7
42767: PUSH
42768: LD_VAR 0 7
42772: PUSH
42773: LD_VAR 0 18
42777: ADD
42778: ST_TO_ADDR
// end else
42779: GO 42922
// begin for i = 1 to personel do
42781: LD_ADDR_VAR 0 8
42785: PUSH
42786: DOUBLE
42787: LD_INT 1
42789: DEC
42790: ST_TO_ADDR
42791: LD_VAR 0 6
42795: PUSH
42796: FOR_TO
42797: IFFALSE 42920
// begin if i > 4 then
42799: LD_VAR 0 8
42803: PUSH
42804: LD_INT 4
42806: GREATER
42807: IFFALSE 42811
// break ;
42809: GO 42920
// x := personel [ i ] ;
42811: LD_ADDR_VAR 0 13
42815: PUSH
42816: LD_VAR 0 6
42820: PUSH
42821: LD_VAR 0 8
42825: ARRAY
42826: ST_TO_ADDR
// if x = - 1 then
42827: LD_VAR 0 13
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: EQUAL
42836: IFFALSE 42840
// continue ;
42838: GO 42796
// PrepareHuman ( false , i , skill ) ;
42840: LD_INT 0
42842: PPUSH
42843: LD_VAR 0 8
42847: PPUSH
42848: LD_VAR 0 4
42852: PPUSH
42853: CALL_OW 380
// un := CreateHuman ;
42857: LD_ADDR_VAR 0 14
42861: PUSH
42862: CALL_OW 44
42866: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42867: LD_VAR 0 14
42871: PPUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL_OW 250
42881: PPUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 251
42891: PPUSH
42892: LD_INT 10
42894: PPUSH
42895: LD_INT 0
42897: PPUSH
42898: CALL_OW 50
// result := result ^ un ;
42902: LD_ADDR_VAR 0 7
42906: PUSH
42907: LD_VAR 0 7
42911: PUSH
42912: LD_VAR 0 14
42916: ADD
42917: ST_TO_ADDR
// end ;
42918: GO 42796
42920: POP
42921: POP
// end ; end ;
42922: LD_VAR 0 7
42926: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42927: LD_INT 0
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
// result := false ;
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_INT 0
42952: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42953: LD_VAR 0 1
42957: NOT
42958: PUSH
42959: LD_VAR 0 1
42963: PPUSH
42964: CALL_OW 266
42968: PUSH
42969: LD_INT 32
42971: PUSH
42972: LD_INT 33
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: IN
42979: NOT
42980: OR
42981: IFFALSE 42985
// exit ;
42983: GO 44094
// nat := GetNation ( tower ) ;
42985: LD_ADDR_VAR 0 12
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 248
42999: ST_TO_ADDR
// side := GetSide ( tower ) ;
43000: LD_ADDR_VAR 0 16
43004: PUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 255
43014: ST_TO_ADDR
// x := GetX ( tower ) ;
43015: LD_ADDR_VAR 0 10
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 250
43029: ST_TO_ADDR
// y := GetY ( tower ) ;
43030: LD_ADDR_VAR 0 11
43034: PUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 251
43044: ST_TO_ADDR
// if not x or not y then
43045: LD_VAR 0 10
43049: NOT
43050: PUSH
43051: LD_VAR 0 11
43055: NOT
43056: OR
43057: IFFALSE 43061
// exit ;
43059: GO 44094
// weapon := 0 ;
43061: LD_ADDR_VAR 0 18
43065: PUSH
43066: LD_INT 0
43068: ST_TO_ADDR
// fac_list := [ ] ;
43069: LD_ADDR_VAR 0 17
43073: PUSH
43074: EMPTY
43075: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43076: LD_ADDR_VAR 0 6
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: CALL_OW 274
43090: PPUSH
43091: LD_VAR 0 2
43095: PPUSH
43096: LD_INT 0
43098: PPUSH
43099: CALL 40665 0 3
43103: PPUSH
43104: LD_INT 30
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PPUSH
43114: CALL_OW 72
43118: ST_TO_ADDR
// if not factories then
43119: LD_VAR 0 6
43123: NOT
43124: IFFALSE 43128
// exit ;
43126: GO 44094
// for i in factories do
43128: LD_ADDR_VAR 0 8
43132: PUSH
43133: LD_VAR 0 6
43137: PUSH
43138: FOR_IN
43139: IFFALSE 43164
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43141: LD_ADDR_VAR 0 17
43145: PUSH
43146: LD_VAR 0 17
43150: PUSH
43151: LD_VAR 0 8
43155: PPUSH
43156: CALL_OW 478
43160: UNION
43161: ST_TO_ADDR
43162: GO 43138
43164: POP
43165: POP
// if not fac_list then
43166: LD_VAR 0 17
43170: NOT
43171: IFFALSE 43175
// exit ;
43173: GO 44094
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43175: LD_ADDR_VAR 0 5
43179: PUSH
43180: LD_INT 4
43182: PUSH
43183: LD_INT 5
43185: PUSH
43186: LD_INT 9
43188: PUSH
43189: LD_INT 10
43191: PUSH
43192: LD_INT 6
43194: PUSH
43195: LD_INT 7
43197: PUSH
43198: LD_INT 11
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 27
43212: PUSH
43213: LD_INT 28
43215: PUSH
43216: LD_INT 26
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 43
43230: PUSH
43231: LD_INT 44
43233: PUSH
43234: LD_INT 46
43236: PUSH
43237: LD_INT 45
43239: PUSH
43240: LD_INT 47
43242: PUSH
43243: LD_INT 49
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: PUSH
43259: LD_VAR 0 12
43263: ARRAY
43264: ST_TO_ADDR
// list := list isect fac_list ;
43265: LD_ADDR_VAR 0 5
43269: PUSH
43270: LD_VAR 0 5
43274: PUSH
43275: LD_VAR 0 17
43279: ISECT
43280: ST_TO_ADDR
// if not list then
43281: LD_VAR 0 5
43285: NOT
43286: IFFALSE 43290
// exit ;
43288: GO 44094
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43290: LD_VAR 0 12
43294: PUSH
43295: LD_INT 3
43297: EQUAL
43298: PUSH
43299: LD_INT 49
43301: PUSH
43302: LD_VAR 0 5
43306: IN
43307: AND
43308: PUSH
43309: LD_INT 31
43311: PPUSH
43312: LD_VAR 0 16
43316: PPUSH
43317: CALL_OW 321
43321: PUSH
43322: LD_INT 2
43324: EQUAL
43325: AND
43326: IFFALSE 43386
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43328: LD_INT 22
43330: PUSH
43331: LD_VAR 0 16
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 35
43342: PUSH
43343: LD_INT 49
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 91
43352: PUSH
43353: LD_VAR 0 1
43357: PUSH
43358: LD_INT 10
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: LIST
43370: PPUSH
43371: CALL_OW 69
43375: NOT
43376: IFFALSE 43386
// weapon := ru_time_lapser ;
43378: LD_ADDR_VAR 0 18
43382: PUSH
43383: LD_INT 49
43385: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43386: LD_VAR 0 12
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: IN
43401: PUSH
43402: LD_INT 11
43404: PUSH
43405: LD_VAR 0 5
43409: IN
43410: PUSH
43411: LD_INT 30
43413: PUSH
43414: LD_VAR 0 5
43418: IN
43419: OR
43420: AND
43421: PUSH
43422: LD_INT 6
43424: PPUSH
43425: LD_VAR 0 16
43429: PPUSH
43430: CALL_OW 321
43434: PUSH
43435: LD_INT 2
43437: EQUAL
43438: AND
43439: IFFALSE 43604
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43441: LD_INT 22
43443: PUSH
43444: LD_VAR 0 16
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 35
43458: PUSH
43459: LD_INT 11
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 35
43468: PUSH
43469: LD_INT 30
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 91
43483: PUSH
43484: LD_VAR 0 1
43488: PUSH
43489: LD_INT 18
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: PPUSH
43502: CALL_OW 69
43506: NOT
43507: PUSH
43508: LD_INT 22
43510: PUSH
43511: LD_VAR 0 16
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 30
43525: PUSH
43526: LD_INT 32
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: LD_INT 33
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 91
43550: PUSH
43551: LD_VAR 0 1
43555: PUSH
43556: LD_INT 12
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: PPUSH
43572: CALL_OW 69
43576: PUSH
43577: LD_INT 2
43579: GREATER
43580: AND
43581: IFFALSE 43604
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43583: LD_ADDR_VAR 0 18
43587: PUSH
43588: LD_INT 11
43590: PUSH
43591: LD_INT 30
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_VAR 0 12
43602: ARRAY
43603: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43604: LD_VAR 0 18
43608: NOT
43609: PUSH
43610: LD_INT 40
43612: PPUSH
43613: LD_VAR 0 16
43617: PPUSH
43618: CALL_OW 321
43622: PUSH
43623: LD_INT 2
43625: EQUAL
43626: AND
43627: PUSH
43628: LD_INT 7
43630: PUSH
43631: LD_VAR 0 5
43635: IN
43636: PUSH
43637: LD_INT 28
43639: PUSH
43640: LD_VAR 0 5
43644: IN
43645: OR
43646: PUSH
43647: LD_INT 45
43649: PUSH
43650: LD_VAR 0 5
43654: IN
43655: OR
43656: AND
43657: IFFALSE 43911
// begin hex := GetHexInfo ( x , y ) ;
43659: LD_ADDR_VAR 0 4
43663: PUSH
43664: LD_VAR 0 10
43668: PPUSH
43669: LD_VAR 0 11
43673: PPUSH
43674: CALL_OW 546
43678: ST_TO_ADDR
// if hex [ 1 ] then
43679: LD_VAR 0 4
43683: PUSH
43684: LD_INT 1
43686: ARRAY
43687: IFFALSE 43691
// exit ;
43689: GO 44094
// height := hex [ 2 ] ;
43691: LD_ADDR_VAR 0 15
43695: PUSH
43696: LD_VAR 0 4
43700: PUSH
43701: LD_INT 2
43703: ARRAY
43704: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43705: LD_ADDR_VAR 0 14
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 5
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
// for i in tmp do
43728: LD_ADDR_VAR 0 8
43732: PUSH
43733: LD_VAR 0 14
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43909
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43741: LD_ADDR_VAR 0 9
43745: PUSH
43746: LD_VAR 0 10
43750: PPUSH
43751: LD_VAR 0 8
43755: PPUSH
43756: LD_INT 5
43758: PPUSH
43759: CALL_OW 272
43763: PUSH
43764: LD_VAR 0 11
43768: PPUSH
43769: LD_VAR 0 8
43773: PPUSH
43774: LD_INT 5
43776: PPUSH
43777: CALL_OW 273
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43786: LD_VAR 0 9
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: PPUSH
43795: LD_VAR 0 9
43799: PUSH
43800: LD_INT 2
43802: ARRAY
43803: PPUSH
43804: CALL_OW 488
43808: IFFALSE 43907
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43810: LD_ADDR_VAR 0 4
43814: PUSH
43815: LD_VAR 0 9
43819: PUSH
43820: LD_INT 1
43822: ARRAY
43823: PPUSH
43824: LD_VAR 0 9
43828: PUSH
43829: LD_INT 2
43831: ARRAY
43832: PPUSH
43833: CALL_OW 546
43837: ST_TO_ADDR
// if hex [ 1 ] then
43838: LD_VAR 0 4
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: IFFALSE 43850
// continue ;
43848: GO 43738
// h := hex [ 2 ] ;
43850: LD_ADDR_VAR 0 13
43854: PUSH
43855: LD_VAR 0 4
43859: PUSH
43860: LD_INT 2
43862: ARRAY
43863: ST_TO_ADDR
// if h + 7 < height then
43864: LD_VAR 0 13
43868: PUSH
43869: LD_INT 7
43871: PLUS
43872: PUSH
43873: LD_VAR 0 15
43877: LESS
43878: IFFALSE 43907
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43880: LD_ADDR_VAR 0 18
43884: PUSH
43885: LD_INT 7
43887: PUSH
43888: LD_INT 28
43890: PUSH
43891: LD_INT 45
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: PUSH
43899: LD_VAR 0 12
43903: ARRAY
43904: ST_TO_ADDR
// break ;
43905: GO 43909
// end ; end ; end ;
43907: GO 43738
43909: POP
43910: POP
// end ; if not weapon then
43911: LD_VAR 0 18
43915: NOT
43916: IFFALSE 43976
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_VAR 0 5
43927: PUSH
43928: LD_INT 11
43930: PUSH
43931: LD_INT 30
43933: PUSH
43934: LD_INT 49
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: DIFF
43942: ST_TO_ADDR
// if not list then
43943: LD_VAR 0 5
43947: NOT
43948: IFFALSE 43952
// exit ;
43950: GO 44094
// weapon := list [ rand ( 1 , list ) ] ;
43952: LD_ADDR_VAR 0 18
43956: PUSH
43957: LD_VAR 0 5
43961: PUSH
43962: LD_INT 1
43964: PPUSH
43965: LD_VAR 0 5
43969: PPUSH
43970: CALL_OW 12
43974: ARRAY
43975: ST_TO_ADDR
// end ; if weapon then
43976: LD_VAR 0 18
43980: IFFALSE 44094
// begin tmp := CostOfWeapon ( weapon ) ;
43982: LD_ADDR_VAR 0 14
43986: PUSH
43987: LD_VAR 0 18
43991: PPUSH
43992: CALL_OW 451
43996: ST_TO_ADDR
// j := GetBase ( tower ) ;
43997: LD_ADDR_VAR 0 9
44001: PUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 274
44011: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44012: LD_VAR 0 9
44016: PPUSH
44017: LD_INT 1
44019: PPUSH
44020: CALL_OW 275
44024: PUSH
44025: LD_VAR 0 14
44029: PUSH
44030: LD_INT 1
44032: ARRAY
44033: GREATEREQUAL
44034: PUSH
44035: LD_VAR 0 9
44039: PPUSH
44040: LD_INT 2
44042: PPUSH
44043: CALL_OW 275
44047: PUSH
44048: LD_VAR 0 14
44052: PUSH
44053: LD_INT 2
44055: ARRAY
44056: GREATEREQUAL
44057: AND
44058: PUSH
44059: LD_VAR 0 9
44063: PPUSH
44064: LD_INT 3
44066: PPUSH
44067: CALL_OW 275
44071: PUSH
44072: LD_VAR 0 14
44076: PUSH
44077: LD_INT 3
44079: ARRAY
44080: GREATEREQUAL
44081: AND
44082: IFFALSE 44094
// result := weapon ;
44084: LD_ADDR_VAR 0 3
44088: PUSH
44089: LD_VAR 0 18
44093: ST_TO_ADDR
// end ; end ;
44094: LD_VAR 0 3
44098: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44099: LD_INT 0
44101: PPUSH
44102: PPUSH
// result := true ;
44103: LD_ADDR_VAR 0 3
44107: PUSH
44108: LD_INT 1
44110: ST_TO_ADDR
// if array1 = array2 then
44111: LD_VAR 0 1
44115: PUSH
44116: LD_VAR 0 2
44120: EQUAL
44121: IFFALSE 44181
// begin for i = 1 to array1 do
44123: LD_ADDR_VAR 0 4
44127: PUSH
44128: DOUBLE
44129: LD_INT 1
44131: DEC
44132: ST_TO_ADDR
44133: LD_VAR 0 1
44137: PUSH
44138: FOR_TO
44139: IFFALSE 44177
// if array1 [ i ] <> array2 [ i ] then
44141: LD_VAR 0 1
44145: PUSH
44146: LD_VAR 0 4
44150: ARRAY
44151: PUSH
44152: LD_VAR 0 2
44156: PUSH
44157: LD_VAR 0 4
44161: ARRAY
44162: NONEQUAL
44163: IFFALSE 44175
// begin result := false ;
44165: LD_ADDR_VAR 0 3
44169: PUSH
44170: LD_INT 0
44172: ST_TO_ADDR
// break ;
44173: GO 44177
// end ;
44175: GO 44138
44177: POP
44178: POP
// end else
44179: GO 44189
// result := false ;
44181: LD_ADDR_VAR 0 3
44185: PUSH
44186: LD_INT 0
44188: ST_TO_ADDR
// end ;
44189: LD_VAR 0 3
44193: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44194: LD_INT 0
44196: PPUSH
44197: PPUSH
// if not array1 or not array2 then
44198: LD_VAR 0 1
44202: NOT
44203: PUSH
44204: LD_VAR 0 2
44208: NOT
44209: OR
44210: IFFALSE 44214
// exit ;
44212: GO 44278
// result := true ;
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_INT 1
44221: ST_TO_ADDR
// for i = 1 to array1 do
44222: LD_ADDR_VAR 0 4
44226: PUSH
44227: DOUBLE
44228: LD_INT 1
44230: DEC
44231: ST_TO_ADDR
44232: LD_VAR 0 1
44236: PUSH
44237: FOR_TO
44238: IFFALSE 44276
// if array1 [ i ] <> array2 [ i ] then
44240: LD_VAR 0 1
44244: PUSH
44245: LD_VAR 0 4
44249: ARRAY
44250: PUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_VAR 0 4
44260: ARRAY
44261: NONEQUAL
44262: IFFALSE 44274
// begin result := false ;
44264: LD_ADDR_VAR 0 3
44268: PUSH
44269: LD_INT 0
44271: ST_TO_ADDR
// break ;
44272: GO 44276
// end ;
44274: GO 44237
44276: POP
44277: POP
// end ;
44278: LD_VAR 0 3
44282: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// pom := GetBase ( fac ) ;
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 274
44302: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44303: LD_ADDR_VAR 0 4
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 1
44315: ARRAY
44316: PPUSH
44317: LD_VAR 0 2
44321: PUSH
44322: LD_INT 2
44324: ARRAY
44325: PPUSH
44326: LD_VAR 0 2
44330: PUSH
44331: LD_INT 3
44333: ARRAY
44334: PPUSH
44335: LD_VAR 0 2
44339: PUSH
44340: LD_INT 4
44342: ARRAY
44343: PPUSH
44344: CALL_OW 449
44348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44349: LD_ADDR_VAR 0 3
44353: PUSH
44354: LD_VAR 0 5
44358: PPUSH
44359: LD_INT 1
44361: PPUSH
44362: CALL_OW 275
44366: PUSH
44367: LD_VAR 0 4
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: GREATEREQUAL
44376: PUSH
44377: LD_VAR 0 5
44381: PPUSH
44382: LD_INT 2
44384: PPUSH
44385: CALL_OW 275
44389: PUSH
44390: LD_VAR 0 4
44394: PUSH
44395: LD_INT 2
44397: ARRAY
44398: GREATEREQUAL
44399: AND
44400: PUSH
44401: LD_VAR 0 5
44405: PPUSH
44406: LD_INT 3
44408: PPUSH
44409: CALL_OW 275
44413: PUSH
44414: LD_VAR 0 4
44418: PUSH
44419: LD_INT 3
44421: ARRAY
44422: GREATEREQUAL
44423: AND
44424: ST_TO_ADDR
// end ;
44425: LD_VAR 0 3
44429: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44430: LD_INT 0
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
// pom := GetBase ( building ) ;
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 274
44450: ST_TO_ADDR
// if not pom then
44451: LD_VAR 0 3
44455: NOT
44456: IFFALSE 44460
// exit ;
44458: GO 44630
// btype := GetBType ( building ) ;
44460: LD_ADDR_VAR 0 5
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 266
44474: ST_TO_ADDR
// if btype = b_armoury then
44475: LD_VAR 0 5
44479: PUSH
44480: LD_INT 4
44482: EQUAL
44483: IFFALSE 44493
// btype := b_barracks ;
44485: LD_ADDR_VAR 0 5
44489: PUSH
44490: LD_INT 5
44492: ST_TO_ADDR
// if btype = b_depot then
44493: LD_VAR 0 5
44497: PUSH
44498: LD_INT 0
44500: EQUAL
44501: IFFALSE 44511
// btype := b_warehouse ;
44503: LD_ADDR_VAR 0 5
44507: PUSH
44508: LD_INT 1
44510: ST_TO_ADDR
// if btype = b_workshop then
44511: LD_VAR 0 5
44515: PUSH
44516: LD_INT 2
44518: EQUAL
44519: IFFALSE 44529
// btype := b_factory ;
44521: LD_ADDR_VAR 0 5
44525: PUSH
44526: LD_INT 3
44528: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44529: LD_ADDR_VAR 0 4
44533: PUSH
44534: LD_VAR 0 5
44538: PPUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: CALL_OW 248
44548: PPUSH
44549: CALL_OW 450
44553: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44554: LD_ADDR_VAR 0 2
44558: PUSH
44559: LD_VAR 0 3
44563: PPUSH
44564: LD_INT 1
44566: PPUSH
44567: CALL_OW 275
44571: PUSH
44572: LD_VAR 0 4
44576: PUSH
44577: LD_INT 1
44579: ARRAY
44580: GREATEREQUAL
44581: PUSH
44582: LD_VAR 0 3
44586: PPUSH
44587: LD_INT 2
44589: PPUSH
44590: CALL_OW 275
44594: PUSH
44595: LD_VAR 0 4
44599: PUSH
44600: LD_INT 2
44602: ARRAY
44603: GREATEREQUAL
44604: AND
44605: PUSH
44606: LD_VAR 0 3
44610: PPUSH
44611: LD_INT 3
44613: PPUSH
44614: CALL_OW 275
44618: PUSH
44619: LD_VAR 0 4
44623: PUSH
44624: LD_INT 3
44626: ARRAY
44627: GREATEREQUAL
44628: AND
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 2
44634: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
44639: PPUSH
// pom := GetBase ( building ) ;
44640: LD_ADDR_VAR 0 4
44644: PUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 274
44654: ST_TO_ADDR
// if not pom then
44655: LD_VAR 0 4
44659: NOT
44660: IFFALSE 44664
// exit ;
44662: GO 44765
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_VAR 0 2
44673: PPUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: CALL_OW 248
44683: PPUSH
44684: CALL_OW 450
44688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44689: LD_ADDR_VAR 0 3
44693: PUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: LD_INT 1
44701: PPUSH
44702: CALL_OW 275
44706: PUSH
44707: LD_VAR 0 5
44711: PUSH
44712: LD_INT 1
44714: ARRAY
44715: GREATEREQUAL
44716: PUSH
44717: LD_VAR 0 4
44721: PPUSH
44722: LD_INT 2
44724: PPUSH
44725: CALL_OW 275
44729: PUSH
44730: LD_VAR 0 5
44734: PUSH
44735: LD_INT 2
44737: ARRAY
44738: GREATEREQUAL
44739: AND
44740: PUSH
44741: LD_VAR 0 4
44745: PPUSH
44746: LD_INT 3
44748: PPUSH
44749: CALL_OW 275
44753: PUSH
44754: LD_VAR 0 5
44758: PUSH
44759: LD_INT 3
44761: ARRAY
44762: GREATEREQUAL
44763: AND
44764: ST_TO_ADDR
// end ;
44765: LD_VAR 0 3
44769: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44770: LD_INT 0
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
// result := false ;
44783: LD_ADDR_VAR 0 8
44787: PUSH
44788: LD_INT 0
44790: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44791: LD_VAR 0 5
44795: NOT
44796: PUSH
44797: LD_VAR 0 1
44801: NOT
44802: OR
44803: PUSH
44804: LD_VAR 0 2
44808: NOT
44809: OR
44810: PUSH
44811: LD_VAR 0 3
44815: NOT
44816: OR
44817: IFFALSE 44821
// exit ;
44819: GO 45635
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44821: LD_ADDR_VAR 0 14
44825: PUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_VAR 0 2
44835: PPUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: LD_VAR 0 4
44845: PPUSH
44846: LD_VAR 0 5
44850: PUSH
44851: LD_INT 1
44853: ARRAY
44854: PPUSH
44855: CALL_OW 248
44859: PPUSH
44860: LD_INT 0
44862: PPUSH
44863: CALL 46872 0 6
44867: ST_TO_ADDR
// if not hexes then
44868: LD_VAR 0 14
44872: NOT
44873: IFFALSE 44877
// exit ;
44875: GO 45635
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44877: LD_ADDR_VAR 0 17
44881: PUSH
44882: LD_VAR 0 5
44886: PPUSH
44887: LD_INT 22
44889: PUSH
44890: LD_VAR 0 13
44894: PPUSH
44895: CALL_OW 255
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 30
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 30
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PPUSH
44936: CALL_OW 72
44940: ST_TO_ADDR
// for i = 1 to hexes do
44941: LD_ADDR_VAR 0 9
44945: PUSH
44946: DOUBLE
44947: LD_INT 1
44949: DEC
44950: ST_TO_ADDR
44951: LD_VAR 0 14
44955: PUSH
44956: FOR_TO
44957: IFFALSE 45633
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44959: LD_ADDR_VAR 0 13
44963: PUSH
44964: LD_VAR 0 14
44968: PUSH
44969: LD_VAR 0 9
44973: ARRAY
44974: PUSH
44975: LD_INT 1
44977: ARRAY
44978: PPUSH
44979: LD_VAR 0 14
44983: PUSH
44984: LD_VAR 0 9
44988: ARRAY
44989: PUSH
44990: LD_INT 2
44992: ARRAY
44993: PPUSH
44994: CALL_OW 428
44998: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44999: LD_VAR 0 14
45003: PUSH
45004: LD_VAR 0 9
45008: ARRAY
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: PPUSH
45014: LD_VAR 0 14
45018: PUSH
45019: LD_VAR 0 9
45023: ARRAY
45024: PUSH
45025: LD_INT 2
45027: ARRAY
45028: PPUSH
45029: CALL_OW 351
45033: PUSH
45034: LD_VAR 0 14
45038: PUSH
45039: LD_VAR 0 9
45043: ARRAY
45044: PUSH
45045: LD_INT 1
45047: ARRAY
45048: PPUSH
45049: LD_VAR 0 14
45053: PUSH
45054: LD_VAR 0 9
45058: ARRAY
45059: PUSH
45060: LD_INT 2
45062: ARRAY
45063: PPUSH
45064: CALL_OW 488
45068: NOT
45069: OR
45070: PUSH
45071: LD_VAR 0 13
45075: PPUSH
45076: CALL_OW 247
45080: PUSH
45081: LD_INT 3
45083: EQUAL
45084: OR
45085: IFFALSE 45091
// exit ;
45087: POP
45088: POP
45089: GO 45635
// if not tmp then
45091: LD_VAR 0 13
45095: NOT
45096: IFFALSE 45100
// continue ;
45098: GO 44956
// result := true ;
45100: LD_ADDR_VAR 0 8
45104: PUSH
45105: LD_INT 1
45107: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45108: LD_VAR 0 6
45112: PUSH
45113: LD_VAR 0 13
45117: PPUSH
45118: CALL_OW 247
45122: PUSH
45123: LD_INT 2
45125: EQUAL
45126: AND
45127: PUSH
45128: LD_VAR 0 13
45132: PPUSH
45133: CALL_OW 263
45137: PUSH
45138: LD_INT 1
45140: EQUAL
45141: AND
45142: IFFALSE 45306
// begin if IsDrivenBy ( tmp ) then
45144: LD_VAR 0 13
45148: PPUSH
45149: CALL_OW 311
45153: IFFALSE 45157
// continue ;
45155: GO 44956
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45157: LD_VAR 0 6
45161: PPUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 60
45167: PUSH
45168: EMPTY
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: LD_INT 55
45180: PUSH
45181: EMPTY
45182: LIST
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PPUSH
45192: CALL_OW 72
45196: IFFALSE 45304
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45198: LD_ADDR_VAR 0 18
45202: PUSH
45203: LD_VAR 0 6
45207: PPUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 60
45213: PUSH
45214: EMPTY
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 55
45226: PUSH
45227: EMPTY
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PPUSH
45238: CALL_OW 72
45242: PUSH
45243: LD_INT 1
45245: ARRAY
45246: ST_TO_ADDR
// if IsInUnit ( driver ) then
45247: LD_VAR 0 18
45251: PPUSH
45252: CALL_OW 310
45256: IFFALSE 45267
// ComExit ( driver ) ;
45258: LD_VAR 0 18
45262: PPUSH
45263: CALL 70056 0 1
// AddComEnterUnit ( driver , tmp ) ;
45267: LD_VAR 0 18
45271: PPUSH
45272: LD_VAR 0 13
45276: PPUSH
45277: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45281: LD_VAR 0 18
45285: PPUSH
45286: LD_VAR 0 7
45290: PPUSH
45291: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45295: LD_VAR 0 18
45299: PPUSH
45300: CALL_OW 181
// end ; continue ;
45304: GO 44956
// end ; if not cleaners or not tmp in cleaners then
45306: LD_VAR 0 6
45310: NOT
45311: PUSH
45312: LD_VAR 0 13
45316: PUSH
45317: LD_VAR 0 6
45321: IN
45322: NOT
45323: OR
45324: IFFALSE 45631
// begin if dep then
45326: LD_VAR 0 17
45330: IFFALSE 45466
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45332: LD_ADDR_VAR 0 16
45336: PUSH
45337: LD_VAR 0 17
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: PPUSH
45346: CALL_OW 250
45350: PPUSH
45351: LD_VAR 0 17
45355: PUSH
45356: LD_INT 1
45358: ARRAY
45359: PPUSH
45360: CALL_OW 254
45364: PPUSH
45365: LD_INT 5
45367: PPUSH
45368: CALL_OW 272
45372: PUSH
45373: LD_VAR 0 17
45377: PUSH
45378: LD_INT 1
45380: ARRAY
45381: PPUSH
45382: CALL_OW 251
45386: PPUSH
45387: LD_VAR 0 17
45391: PUSH
45392: LD_INT 1
45394: ARRAY
45395: PPUSH
45396: CALL_OW 254
45400: PPUSH
45401: LD_INT 5
45403: PPUSH
45404: CALL_OW 273
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45413: LD_VAR 0 16
45417: PUSH
45418: LD_INT 1
45420: ARRAY
45421: PPUSH
45422: LD_VAR 0 16
45426: PUSH
45427: LD_INT 2
45429: ARRAY
45430: PPUSH
45431: CALL_OW 488
45435: IFFALSE 45466
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45437: LD_VAR 0 13
45441: PPUSH
45442: LD_VAR 0 16
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: LD_VAR 0 16
45455: PUSH
45456: LD_INT 2
45458: ARRAY
45459: PPUSH
45460: CALL_OW 111
// continue ;
45464: GO 44956
// end ; end ; r := GetDir ( tmp ) ;
45466: LD_ADDR_VAR 0 15
45470: PUSH
45471: LD_VAR 0 13
45475: PPUSH
45476: CALL_OW 254
45480: ST_TO_ADDR
// if r = 5 then
45481: LD_VAR 0 15
45485: PUSH
45486: LD_INT 5
45488: EQUAL
45489: IFFALSE 45499
// r := 0 ;
45491: LD_ADDR_VAR 0 15
45495: PUSH
45496: LD_INT 0
45498: ST_TO_ADDR
// for j = r to 5 do
45499: LD_ADDR_VAR 0 10
45503: PUSH
45504: DOUBLE
45505: LD_VAR 0 15
45509: DEC
45510: ST_TO_ADDR
45511: LD_INT 5
45513: PUSH
45514: FOR_TO
45515: IFFALSE 45629
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45517: LD_ADDR_VAR 0 11
45521: PUSH
45522: LD_VAR 0 13
45526: PPUSH
45527: CALL_OW 250
45531: PPUSH
45532: LD_VAR 0 10
45536: PPUSH
45537: LD_INT 2
45539: PPUSH
45540: CALL_OW 272
45544: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45545: LD_ADDR_VAR 0 12
45549: PUSH
45550: LD_VAR 0 13
45554: PPUSH
45555: CALL_OW 251
45559: PPUSH
45560: LD_VAR 0 10
45564: PPUSH
45565: LD_INT 2
45567: PPUSH
45568: CALL_OW 273
45572: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45573: LD_VAR 0 11
45577: PPUSH
45578: LD_VAR 0 12
45582: PPUSH
45583: CALL_OW 488
45587: PUSH
45588: LD_VAR 0 11
45592: PPUSH
45593: LD_VAR 0 12
45597: PPUSH
45598: CALL_OW 428
45602: NOT
45603: AND
45604: IFFALSE 45627
// begin ComMoveXY ( tmp , _x , _y ) ;
45606: LD_VAR 0 13
45610: PPUSH
45611: LD_VAR 0 11
45615: PPUSH
45616: LD_VAR 0 12
45620: PPUSH
45621: CALL_OW 111
// break ;
45625: GO 45629
// end ; end ;
45627: GO 45514
45629: POP
45630: POP
// end ; end ;
45631: GO 44956
45633: POP
45634: POP
// end ;
45635: LD_VAR 0 8
45639: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45640: LD_INT 0
45642: PPUSH
// result := true ;
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 1
45650: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45651: LD_VAR 0 2
45655: PUSH
45656: LD_INT 24
45658: DOUBLE
45659: EQUAL
45660: IFTRUE 45670
45662: LD_INT 33
45664: DOUBLE
45665: EQUAL
45666: IFTRUE 45670
45668: GO 45695
45670: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45671: LD_ADDR_VAR 0 3
45675: PUSH
45676: LD_INT 32
45678: PPUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 321
45688: PUSH
45689: LD_INT 2
45691: EQUAL
45692: ST_TO_ADDR
45693: GO 46015
45695: LD_INT 20
45697: DOUBLE
45698: EQUAL
45699: IFTRUE 45703
45701: GO 45728
45703: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_INT 6
45711: PPUSH
45712: LD_VAR 0 1
45716: PPUSH
45717: CALL_OW 321
45721: PUSH
45722: LD_INT 2
45724: EQUAL
45725: ST_TO_ADDR
45726: GO 46015
45728: LD_INT 22
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45742
45734: LD_INT 36
45736: DOUBLE
45737: EQUAL
45738: IFTRUE 45742
45740: GO 45767
45742: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45743: LD_ADDR_VAR 0 3
45747: PUSH
45748: LD_INT 15
45750: PPUSH
45751: LD_VAR 0 1
45755: PPUSH
45756: CALL_OW 321
45760: PUSH
45761: LD_INT 2
45763: EQUAL
45764: ST_TO_ADDR
45765: GO 46015
45767: LD_INT 30
45769: DOUBLE
45770: EQUAL
45771: IFTRUE 45775
45773: GO 45800
45775: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45776: LD_ADDR_VAR 0 3
45780: PUSH
45781: LD_INT 20
45783: PPUSH
45784: LD_VAR 0 1
45788: PPUSH
45789: CALL_OW 321
45793: PUSH
45794: LD_INT 2
45796: EQUAL
45797: ST_TO_ADDR
45798: GO 46015
45800: LD_INT 28
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45814
45806: LD_INT 21
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45839
45814: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 21
45822: PPUSH
45823: LD_VAR 0 1
45827: PPUSH
45828: CALL_OW 321
45832: PUSH
45833: LD_INT 2
45835: EQUAL
45836: ST_TO_ADDR
45837: GO 46015
45839: LD_INT 16
45841: DOUBLE
45842: EQUAL
45843: IFTRUE 45847
45845: GO 45874
45847: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45848: LD_ADDR_VAR 0 3
45852: PUSH
45853: LD_EXP 142
45857: PPUSH
45858: LD_VAR 0 1
45862: PPUSH
45863: CALL_OW 321
45867: PUSH
45868: LD_INT 2
45870: EQUAL
45871: ST_TO_ADDR
45872: GO 46015
45874: LD_INT 19
45876: DOUBLE
45877: EQUAL
45878: IFTRUE 45888
45880: LD_INT 23
45882: DOUBLE
45883: EQUAL
45884: IFTRUE 45888
45886: GO 45915
45888: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45889: LD_ADDR_VAR 0 3
45893: PUSH
45894: LD_EXP 141
45898: PPUSH
45899: LD_VAR 0 1
45903: PPUSH
45904: CALL_OW 321
45908: PUSH
45909: LD_INT 2
45911: EQUAL
45912: ST_TO_ADDR
45913: GO 46015
45915: LD_INT 17
45917: DOUBLE
45918: EQUAL
45919: IFTRUE 45923
45921: GO 45948
45923: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45924: LD_ADDR_VAR 0 3
45928: PUSH
45929: LD_INT 39
45931: PPUSH
45932: LD_VAR 0 1
45936: PPUSH
45937: CALL_OW 321
45941: PUSH
45942: LD_INT 2
45944: EQUAL
45945: ST_TO_ADDR
45946: GO 46015
45948: LD_INT 18
45950: DOUBLE
45951: EQUAL
45952: IFTRUE 45956
45954: GO 45981
45956: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45957: LD_ADDR_VAR 0 3
45961: PUSH
45962: LD_INT 40
45964: PPUSH
45965: LD_VAR 0 1
45969: PPUSH
45970: CALL_OW 321
45974: PUSH
45975: LD_INT 2
45977: EQUAL
45978: ST_TO_ADDR
45979: GO 46015
45981: LD_INT 27
45983: DOUBLE
45984: EQUAL
45985: IFTRUE 45989
45987: GO 46014
45989: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45990: LD_ADDR_VAR 0 3
45994: PUSH
45995: LD_INT 35
45997: PPUSH
45998: LD_VAR 0 1
46002: PPUSH
46003: CALL_OW 321
46007: PUSH
46008: LD_INT 2
46010: EQUAL
46011: ST_TO_ADDR
46012: GO 46015
46014: POP
// end ;
46015: LD_VAR 0 3
46019: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46020: LD_INT 0
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
// result := false ;
46033: LD_ADDR_VAR 0 6
46037: PUSH
46038: LD_INT 0
46040: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46041: LD_VAR 0 1
46045: NOT
46046: PUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: CALL_OW 266
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: IN
46067: NOT
46068: OR
46069: PUSH
46070: LD_VAR 0 2
46074: NOT
46075: OR
46076: PUSH
46077: LD_VAR 0 5
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: LD_INT 4
46096: PUSH
46097: LD_INT 5
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: IN
46108: NOT
46109: OR
46110: PUSH
46111: LD_VAR 0 3
46115: PPUSH
46116: LD_VAR 0 4
46120: PPUSH
46121: CALL_OW 488
46125: NOT
46126: OR
46127: IFFALSE 46131
// exit ;
46129: GO 46867
// side := GetSide ( depot ) ;
46131: LD_ADDR_VAR 0 9
46135: PUSH
46136: LD_VAR 0 1
46140: PPUSH
46141: CALL_OW 255
46145: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46146: LD_VAR 0 9
46150: PPUSH
46151: LD_VAR 0 2
46155: PPUSH
46156: CALL 45640 0 2
46160: NOT
46161: IFFALSE 46165
// exit ;
46163: GO 46867
// pom := GetBase ( depot ) ;
46165: LD_ADDR_VAR 0 10
46169: PUSH
46170: LD_VAR 0 1
46174: PPUSH
46175: CALL_OW 274
46179: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46180: LD_ADDR_VAR 0 11
46184: PUSH
46185: LD_VAR 0 2
46189: PPUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 248
46199: PPUSH
46200: CALL_OW 450
46204: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46205: LD_VAR 0 10
46209: PPUSH
46210: LD_INT 1
46212: PPUSH
46213: CALL_OW 275
46217: PUSH
46218: LD_VAR 0 11
46222: PUSH
46223: LD_INT 1
46225: ARRAY
46226: GREATEREQUAL
46227: PUSH
46228: LD_VAR 0 10
46232: PPUSH
46233: LD_INT 2
46235: PPUSH
46236: CALL_OW 275
46240: PUSH
46241: LD_VAR 0 11
46245: PUSH
46246: LD_INT 2
46248: ARRAY
46249: GREATEREQUAL
46250: AND
46251: PUSH
46252: LD_VAR 0 10
46256: PPUSH
46257: LD_INT 3
46259: PPUSH
46260: CALL_OW 275
46264: PUSH
46265: LD_VAR 0 11
46269: PUSH
46270: LD_INT 3
46272: ARRAY
46273: GREATEREQUAL
46274: AND
46275: NOT
46276: IFFALSE 46280
// exit ;
46278: GO 46867
// if GetBType ( depot ) = b_depot then
46280: LD_VAR 0 1
46284: PPUSH
46285: CALL_OW 266
46289: PUSH
46290: LD_INT 0
46292: EQUAL
46293: IFFALSE 46305
// dist := 28 else
46295: LD_ADDR_VAR 0 14
46299: PUSH
46300: LD_INT 28
46302: ST_TO_ADDR
46303: GO 46313
// dist := 36 ;
46305: LD_ADDR_VAR 0 14
46309: PUSH
46310: LD_INT 36
46312: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46313: LD_VAR 0 1
46317: PPUSH
46318: LD_VAR 0 3
46322: PPUSH
46323: LD_VAR 0 4
46327: PPUSH
46328: CALL_OW 297
46332: PUSH
46333: LD_VAR 0 14
46337: GREATER
46338: IFFALSE 46342
// exit ;
46340: GO 46867
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46342: LD_ADDR_VAR 0 12
46346: PUSH
46347: LD_VAR 0 2
46351: PPUSH
46352: LD_VAR 0 3
46356: PPUSH
46357: LD_VAR 0 4
46361: PPUSH
46362: LD_VAR 0 5
46366: PPUSH
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 248
46376: PPUSH
46377: LD_INT 0
46379: PPUSH
46380: CALL 46872 0 6
46384: ST_TO_ADDR
// if not hexes then
46385: LD_VAR 0 12
46389: NOT
46390: IFFALSE 46394
// exit ;
46392: GO 46867
// hex := GetHexInfo ( x , y ) ;
46394: LD_ADDR_VAR 0 15
46398: PUSH
46399: LD_VAR 0 3
46403: PPUSH
46404: LD_VAR 0 4
46408: PPUSH
46409: CALL_OW 546
46413: ST_TO_ADDR
// if hex [ 1 ] then
46414: LD_VAR 0 15
46418: PUSH
46419: LD_INT 1
46421: ARRAY
46422: IFFALSE 46426
// exit ;
46424: GO 46867
// height := hex [ 2 ] ;
46426: LD_ADDR_VAR 0 13
46430: PUSH
46431: LD_VAR 0 15
46435: PUSH
46436: LD_INT 2
46438: ARRAY
46439: ST_TO_ADDR
// for i = 1 to hexes do
46440: LD_ADDR_VAR 0 7
46444: PUSH
46445: DOUBLE
46446: LD_INT 1
46448: DEC
46449: ST_TO_ADDR
46450: LD_VAR 0 12
46454: PUSH
46455: FOR_TO
46456: IFFALSE 46786
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46458: LD_VAR 0 12
46462: PUSH
46463: LD_VAR 0 7
46467: ARRAY
46468: PUSH
46469: LD_INT 1
46471: ARRAY
46472: PPUSH
46473: LD_VAR 0 12
46477: PUSH
46478: LD_VAR 0 7
46482: ARRAY
46483: PUSH
46484: LD_INT 2
46486: ARRAY
46487: PPUSH
46488: CALL_OW 488
46492: NOT
46493: PUSH
46494: LD_VAR 0 12
46498: PUSH
46499: LD_VAR 0 7
46503: ARRAY
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: PPUSH
46509: LD_VAR 0 12
46513: PUSH
46514: LD_VAR 0 7
46518: ARRAY
46519: PUSH
46520: LD_INT 2
46522: ARRAY
46523: PPUSH
46524: CALL_OW 428
46528: PUSH
46529: LD_INT 0
46531: GREATER
46532: OR
46533: PUSH
46534: LD_VAR 0 12
46538: PUSH
46539: LD_VAR 0 7
46543: ARRAY
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PPUSH
46549: LD_VAR 0 12
46553: PUSH
46554: LD_VAR 0 7
46558: ARRAY
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: PPUSH
46564: CALL_OW 351
46568: OR
46569: IFFALSE 46575
// exit ;
46571: POP
46572: POP
46573: GO 46867
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46575: LD_ADDR_VAR 0 8
46579: PUSH
46580: LD_VAR 0 12
46584: PUSH
46585: LD_VAR 0 7
46589: ARRAY
46590: PUSH
46591: LD_INT 1
46593: ARRAY
46594: PPUSH
46595: LD_VAR 0 12
46599: PUSH
46600: LD_VAR 0 7
46604: ARRAY
46605: PUSH
46606: LD_INT 2
46608: ARRAY
46609: PPUSH
46610: CALL_OW 546
46614: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46615: LD_VAR 0 8
46619: PUSH
46620: LD_INT 1
46622: ARRAY
46623: PUSH
46624: LD_VAR 0 8
46628: PUSH
46629: LD_INT 2
46631: ARRAY
46632: PUSH
46633: LD_VAR 0 13
46637: PUSH
46638: LD_INT 2
46640: PLUS
46641: GREATER
46642: OR
46643: PUSH
46644: LD_VAR 0 8
46648: PUSH
46649: LD_INT 2
46651: ARRAY
46652: PUSH
46653: LD_VAR 0 13
46657: PUSH
46658: LD_INT 2
46660: MINUS
46661: LESS
46662: OR
46663: PUSH
46664: LD_VAR 0 8
46668: PUSH
46669: LD_INT 3
46671: ARRAY
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 8
46678: PUSH
46679: LD_INT 9
46681: PUSH
46682: LD_INT 10
46684: PUSH
46685: LD_INT 11
46687: PUSH
46688: LD_INT 12
46690: PUSH
46691: LD_INT 13
46693: PUSH
46694: LD_INT 16
46696: PUSH
46697: LD_INT 17
46699: PUSH
46700: LD_INT 18
46702: PUSH
46703: LD_INT 19
46705: PUSH
46706: LD_INT 20
46708: PUSH
46709: LD_INT 21
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: IN
46727: NOT
46728: OR
46729: PUSH
46730: LD_VAR 0 8
46734: PUSH
46735: LD_INT 5
46737: ARRAY
46738: NOT
46739: OR
46740: PUSH
46741: LD_VAR 0 8
46745: PUSH
46746: LD_INT 6
46748: ARRAY
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 7
46758: PUSH
46759: LD_INT 9
46761: PUSH
46762: LD_INT 10
46764: PUSH
46765: LD_INT 11
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: IN
46776: NOT
46777: OR
46778: IFFALSE 46784
// exit ;
46780: POP
46781: POP
46782: GO 46867
// end ;
46784: GO 46455
46786: POP
46787: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46788: LD_VAR 0 9
46792: PPUSH
46793: LD_VAR 0 3
46797: PPUSH
46798: LD_VAR 0 4
46802: PPUSH
46803: LD_INT 20
46805: PPUSH
46806: CALL 38813 0 4
46810: PUSH
46811: LD_INT 4
46813: ARRAY
46814: IFFALSE 46818
// exit ;
46816: GO 46867
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46818: LD_VAR 0 2
46822: PUSH
46823: LD_INT 29
46825: PUSH
46826: LD_INT 30
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: IN
46833: PUSH
46834: LD_VAR 0 3
46838: PPUSH
46839: LD_VAR 0 4
46843: PPUSH
46844: LD_VAR 0 9
46848: PPUSH
46849: CALL_OW 440
46853: NOT
46854: AND
46855: IFFALSE 46859
// exit ;
46857: GO 46867
// result := true ;
46859: LD_ADDR_VAR 0 6
46863: PUSH
46864: LD_INT 1
46866: ST_TO_ADDR
// end ;
46867: LD_VAR 0 6
46871: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46872: LD_INT 0
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
46882: PPUSH
46883: PPUSH
46884: PPUSH
46885: PPUSH
46886: PPUSH
46887: PPUSH
46888: PPUSH
46889: PPUSH
46890: PPUSH
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
// result = [ ] ;
46932: LD_ADDR_VAR 0 7
46936: PUSH
46937: EMPTY
46938: ST_TO_ADDR
// temp_list = [ ] ;
46939: LD_ADDR_VAR 0 9
46943: PUSH
46944: EMPTY
46945: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46946: LD_VAR 0 4
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: LD_INT 5
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: IN
46977: NOT
46978: PUSH
46979: LD_VAR 0 1
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: IN
46994: PUSH
46995: LD_VAR 0 5
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: IN
47014: NOT
47015: AND
47016: OR
47017: IFFALSE 47021
// exit ;
47019: GO 65412
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47021: LD_VAR 0 1
47025: PUSH
47026: LD_INT 6
47028: PUSH
47029: LD_INT 7
47031: PUSH
47032: LD_INT 8
47034: PUSH
47035: LD_INT 13
47037: PUSH
47038: LD_INT 12
47040: PUSH
47041: LD_INT 15
47043: PUSH
47044: LD_INT 11
47046: PUSH
47047: LD_INT 14
47049: PUSH
47050: LD_INT 10
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: IN
47064: IFFALSE 47074
// btype = b_lab ;
47066: LD_ADDR_VAR 0 1
47070: PUSH
47071: LD_INT 6
47073: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47074: LD_VAR 0 6
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: IN
47093: NOT
47094: PUSH
47095: LD_VAR 0 1
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 6
47114: PUSH
47115: LD_INT 36
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: LD_INT 31
47126: PUSH
47127: LD_INT 32
47129: PUSH
47130: LD_INT 33
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: IN
47146: NOT
47147: PUSH
47148: LD_VAR 0 6
47152: PUSH
47153: LD_INT 1
47155: EQUAL
47156: AND
47157: OR
47158: PUSH
47159: LD_VAR 0 1
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: IN
47174: NOT
47175: PUSH
47176: LD_VAR 0 6
47180: PUSH
47181: LD_INT 2
47183: EQUAL
47184: AND
47185: OR
47186: IFFALSE 47196
// mode = 0 ;
47188: LD_ADDR_VAR 0 6
47192: PUSH
47193: LD_INT 0
47195: ST_TO_ADDR
// case mode of 0 :
47196: LD_VAR 0 6
47200: PUSH
47201: LD_INT 0
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 58662
47209: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47210: LD_ADDR_VAR 0 11
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47403: LD_ADDR_VAR 0 12
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47599: LD_ADDR_VAR 0 13
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: NEG
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47798: LD_ADDR_VAR 0 14
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 3
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47994: LD_ADDR_VAR 0 15
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48187: LD_ADDR_VAR 0 16
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48380: LD_ADDR_VAR 0 17
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48610: LD_ADDR_VAR 0 18
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48840: LD_ADDR_VAR 0 19
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49070: LD_ADDR_VAR 0 20
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49300: LD_ADDR_VAR 0 21
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49530: LD_ADDR_VAR 0 22
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49760: LD_ADDR_VAR 0 23
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50040: LD_ADDR_VAR 0 24
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50316: LD_ADDR_VAR 0 25
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50590: LD_ADDR_VAR 0 26
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50866: LD_ADDR_VAR 0 27
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51146: LD_ADDR_VAR 0 28
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51428: LD_ADDR_VAR 0 29
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51707: LD_ADDR_VAR 0 30
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51985: LD_ADDR_VAR 0 31
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52263: LD_ADDR_VAR 0 32
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52541: LD_ADDR_VAR 0 33
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52820: LD_ADDR_VAR 0 34
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53100: LD_ADDR_VAR 0 35
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53212: LD_ADDR_VAR 0 36
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53324: LD_ADDR_VAR 0 37
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53436: LD_ADDR_VAR 0 38
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53548: LD_ADDR_VAR 0 39
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53660: LD_ADDR_VAR 0 40
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53772: LD_ADDR_VAR 0 41
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54122: LD_ADDR_VAR 0 42
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54472: LD_ADDR_VAR 0 43
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54820: LD_ADDR_VAR 0 44
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55170: LD_ADDR_VAR 0 45
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55520: LD_ADDR_VAR 0 46
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55868: LD_ADDR_VAR 0 47
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56019: LD_ADDR_VAR 0 48
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56166: LD_ADDR_VAR 0 49
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56310: LD_ADDR_VAR 0 50
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56454: LD_ADDR_VAR 0 51
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56601: LD_ADDR_VAR 0 52
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56752: LD_ADDR_VAR 0 53
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56982: LD_ADDR_VAR 0 54
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 55
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57442: LD_ADDR_VAR 0 56
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57672: LD_ADDR_VAR 0 57
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57902: LD_ADDR_VAR 0 58
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58132: LD_ADDR_VAR 0 59
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58220: LD_ADDR_VAR 0 60
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58308: LD_ADDR_VAR 0 61
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58396: LD_ADDR_VAR 0 62
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58484: LD_ADDR_VAR 0 63
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58572: LD_ADDR_VAR 0 64
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: ST_TO_ADDR
// end ; 1 :
58660: GO 64557
58662: LD_INT 1
58664: DOUBLE
58665: EQUAL
58666: IFTRUE 58670
58668: GO 61293
58670: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58671: LD_ADDR_VAR 0 11
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58715: LD_ADDR_VAR 0 12
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58756: LD_ADDR_VAR 0 13
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58796: LD_ADDR_VAR 0 14
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58837: LD_ADDR_VAR 0 15
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58881: LD_ADDR_VAR 0 16
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58927: LD_ADDR_VAR 0 17
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58971: LD_ADDR_VAR 0 18
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59012: LD_ADDR_VAR 0 19
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59052: LD_ADDR_VAR 0 20
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59093: LD_ADDR_VAR 0 21
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 3
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59137: LD_ADDR_VAR 0 22
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59183: LD_ADDR_VAR 0 23
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 4
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: LIST
59226: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59227: LD_ADDR_VAR 0 24
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59268: LD_ADDR_VAR 0 25
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59308: LD_ADDR_VAR 0 26
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59349: LD_ADDR_VAR 0 27
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59393: LD_ADDR_VAR 0 28
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 4
59424: NEG
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59439: LD_ADDR_VAR 0 29
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 5
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 6
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 6
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 5
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59594: LD_ADDR_VAR 0 30
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 4
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 4
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 5
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 5
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 6
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 6
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59737: LD_ADDR_VAR 0 31
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 4
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 4
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 5
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 6
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 6
59844: PUSH
59845: LD_INT 6
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 5
59854: PUSH
59855: LD_INT 6
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59876: LD_ADDR_VAR 0 32
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 4
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 5
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 5
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 6
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 6
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60019: LD_ADDR_VAR 0 33
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 4
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 5
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 5
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 5
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 6
60139: NEG
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 6
60150: NEG
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60174: LD_ADDR_VAR 0 34
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 4
60229: NEG
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: LD_INT 4
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 4
60253: NEG
60254: PUSH
60255: LD_INT 5
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 5
60265: NEG
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 5
60277: NEG
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 5
60289: NEG
60290: PUSH
60291: LD_INT 6
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 6
60301: NEG
60302: PUSH
60303: LD_INT 5
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 6
60313: NEG
60314: PUSH
60315: LD_INT 6
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60337: LD_ADDR_VAR 0 41
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60381: LD_ADDR_VAR 0 42
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60422: LD_ADDR_VAR 0 43
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60462: LD_ADDR_VAR 0 44
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60503: LD_ADDR_VAR 0 45
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60547: LD_ADDR_VAR 0 46
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60593: LD_ADDR_VAR 0 47
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60626: LD_ADDR_VAR 0 48
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60657: LD_ADDR_VAR 0 49
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60686: LD_ADDR_VAR 0 50
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60715: LD_ADDR_VAR 0 51
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60746: LD_ADDR_VAR 0 52
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60779: LD_ADDR_VAR 0 53
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60823: LD_ADDR_VAR 0 54
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60864: LD_ADDR_VAR 0 55
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60904: LD_ADDR_VAR 0 56
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60945: LD_ADDR_VAR 0 57
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60989: LD_ADDR_VAR 0 58
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61035: LD_ADDR_VAR 0 59
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61079: LD_ADDR_VAR 0 60
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61120: LD_ADDR_VAR 0 61
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61160: LD_ADDR_VAR 0 62
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61201: LD_ADDR_VAR 0 63
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61245: LD_ADDR_VAR 0 64
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: ST_TO_ADDR
// end ; 2 :
61291: GO 64557
61293: LD_INT 2
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61301
61299: GO 64556
61301: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61302: LD_ADDR_VAR 0 29
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 5
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 4
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 5
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 5
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 3
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 5
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 4
61664: NEG
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 4
61687: NEG
61688: PUSH
61689: LD_INT 4
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: NEG
61700: PUSH
61701: LD_INT 5
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 5
61747: NEG
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 5
61759: NEG
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 5
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 5
61783: NEG
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61840: LD_ADDR_VAR 0 30
61844: PUSH
61845: LD_INT 4
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 4
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 5
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 5
61877: PUSH
61878: LD_INT 5
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: LD_INT 5
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 5
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 5
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 4
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 4
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 4
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 5
62086: NEG
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 5
62097: NEG
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 5
62109: NEG
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: LD_INT 3
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: LD_INT 4
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 4
62204: NEG
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 4
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 5
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 4
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 4
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 5
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 3
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: LD_INT 5
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62387: LD_ADDR_VAR 0 31
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 5
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 5
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 4
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: LD_INT 4
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 4
62601: NEG
62602: PUSH
62603: LD_INT 5
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: LD_INT 4
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 5
62649: NEG
62650: PUSH
62651: LD_INT 4
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 5
62661: NEG
62662: PUSH
62663: LD_INT 5
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: LD_INT 5
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: NEG
62686: PUSH
62687: LD_INT 3
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 3
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 4
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 4
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 4
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 4
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 5
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 4
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 5
62882: PUSH
62883: LD_INT 2
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62937: LD_ADDR_VAR 0 32
62941: PUSH
62942: LD_INT 4
62944: NEG
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 4
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: NEG
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 5
63000: NEG
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 5
63011: NEG
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 5
63023: NEG
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: LD_INT 3
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: NEG
63059: PUSH
63060: LD_INT 4
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 4
63106: NEG
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 4
63118: NEG
63119: PUSH
63120: LD_INT 4
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 4
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 4
63142: NEG
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 4
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 5
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 4
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 4
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 5
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 5
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 4
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 5
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 5
63379: PUSH
63380: LD_INT 5
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 4
63389: PUSH
63390: LD_INT 5
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 5
63419: PUSH
63420: LD_INT 3
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63484: LD_ADDR_VAR 0 33
63488: PUSH
63489: LD_INT 4
63491: NEG
63492: PUSH
63493: LD_INT 4
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 4
63503: NEG
63504: PUSH
63505: LD_INT 5
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: LD_INT 4
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 3
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 4
63539: NEG
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 5
63551: NEG
63552: PUSH
63553: LD_INT 4
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 5
63563: NEG
63564: PUSH
63565: LD_INT 5
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: LD_INT 5
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 5
63587: NEG
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 4
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 3
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 4
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 4
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 4
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 5
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 5
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 3
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: LD_INT 4
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: LD_INT 4
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 4
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 4
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 5
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 5
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 3
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: LD_INT 5
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64022: LD_ADDR_VAR 0 34
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 4
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 5
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 4
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: LD_INT 3
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 4
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 4
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: LD_INT 4
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 4
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 5
64244: PUSH
64245: LD_INT 4
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: LD_INT 5
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: LD_INT 5
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 3
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 5
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 3
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 4
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 4
64407: NEG
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 4
64418: NEG
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 4
64452: NEG
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 5
64463: NEG
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 5
64474: NEG
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: NEG
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 3
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// end ; end ;
64554: GO 64557
64556: POP
// case btype of b_depot , b_warehouse :
64557: LD_VAR 0 1
64561: PUSH
64562: LD_INT 0
64564: DOUBLE
64565: EQUAL
64566: IFTRUE 64576
64568: LD_INT 1
64570: DOUBLE
64571: EQUAL
64572: IFTRUE 64576
64574: GO 64777
64576: POP
// case nation of nation_american :
64577: LD_VAR 0 5
64581: PUSH
64582: LD_INT 1
64584: DOUBLE
64585: EQUAL
64586: IFTRUE 64590
64588: GO 64646
64590: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64591: LD_ADDR_VAR 0 9
64595: PUSH
64596: LD_VAR 0 11
64600: PUSH
64601: LD_VAR 0 12
64605: PUSH
64606: LD_VAR 0 13
64610: PUSH
64611: LD_VAR 0 14
64615: PUSH
64616: LD_VAR 0 15
64620: PUSH
64621: LD_VAR 0 16
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: PUSH
64634: LD_VAR 0 4
64638: PUSH
64639: LD_INT 1
64641: PLUS
64642: ARRAY
64643: ST_TO_ADDR
64644: GO 64775
64646: LD_INT 2
64648: DOUBLE
64649: EQUAL
64650: IFTRUE 64654
64652: GO 64710
64654: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64655: LD_ADDR_VAR 0 9
64659: PUSH
64660: LD_VAR 0 17
64664: PUSH
64665: LD_VAR 0 18
64669: PUSH
64670: LD_VAR 0 19
64674: PUSH
64675: LD_VAR 0 20
64679: PUSH
64680: LD_VAR 0 21
64684: PUSH
64685: LD_VAR 0 22
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: PUSH
64698: LD_VAR 0 4
64702: PUSH
64703: LD_INT 1
64705: PLUS
64706: ARRAY
64707: ST_TO_ADDR
64708: GO 64775
64710: LD_INT 3
64712: DOUBLE
64713: EQUAL
64714: IFTRUE 64718
64716: GO 64774
64718: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64719: LD_ADDR_VAR 0 9
64723: PUSH
64724: LD_VAR 0 23
64728: PUSH
64729: LD_VAR 0 24
64733: PUSH
64734: LD_VAR 0 25
64738: PUSH
64739: LD_VAR 0 26
64743: PUSH
64744: LD_VAR 0 27
64748: PUSH
64749: LD_VAR 0 28
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: PUSH
64762: LD_VAR 0 4
64766: PUSH
64767: LD_INT 1
64769: PLUS
64770: ARRAY
64771: ST_TO_ADDR
64772: GO 64775
64774: POP
64775: GO 65330
64777: LD_INT 2
64779: DOUBLE
64780: EQUAL
64781: IFTRUE 64791
64783: LD_INT 3
64785: DOUBLE
64786: EQUAL
64787: IFTRUE 64791
64789: GO 64847
64791: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64792: LD_ADDR_VAR 0 9
64796: PUSH
64797: LD_VAR 0 29
64801: PUSH
64802: LD_VAR 0 30
64806: PUSH
64807: LD_VAR 0 31
64811: PUSH
64812: LD_VAR 0 32
64816: PUSH
64817: LD_VAR 0 33
64821: PUSH
64822: LD_VAR 0 34
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_VAR 0 4
64839: PUSH
64840: LD_INT 1
64842: PLUS
64843: ARRAY
64844: ST_TO_ADDR
64845: GO 65330
64847: LD_INT 16
64849: DOUBLE
64850: EQUAL
64851: IFTRUE 64909
64853: LD_INT 17
64855: DOUBLE
64856: EQUAL
64857: IFTRUE 64909
64859: LD_INT 18
64861: DOUBLE
64862: EQUAL
64863: IFTRUE 64909
64865: LD_INT 19
64867: DOUBLE
64868: EQUAL
64869: IFTRUE 64909
64871: LD_INT 22
64873: DOUBLE
64874: EQUAL
64875: IFTRUE 64909
64877: LD_INT 20
64879: DOUBLE
64880: EQUAL
64881: IFTRUE 64909
64883: LD_INT 21
64885: DOUBLE
64886: EQUAL
64887: IFTRUE 64909
64889: LD_INT 23
64891: DOUBLE
64892: EQUAL
64893: IFTRUE 64909
64895: LD_INT 24
64897: DOUBLE
64898: EQUAL
64899: IFTRUE 64909
64901: LD_INT 25
64903: DOUBLE
64904: EQUAL
64905: IFTRUE 64909
64907: GO 64965
64909: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64910: LD_ADDR_VAR 0 9
64914: PUSH
64915: LD_VAR 0 35
64919: PUSH
64920: LD_VAR 0 36
64924: PUSH
64925: LD_VAR 0 37
64929: PUSH
64930: LD_VAR 0 38
64934: PUSH
64935: LD_VAR 0 39
64939: PUSH
64940: LD_VAR 0 40
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: PUSH
64953: LD_VAR 0 4
64957: PUSH
64958: LD_INT 1
64960: PLUS
64961: ARRAY
64962: ST_TO_ADDR
64963: GO 65330
64965: LD_INT 6
64967: DOUBLE
64968: EQUAL
64969: IFTRUE 65021
64971: LD_INT 7
64973: DOUBLE
64974: EQUAL
64975: IFTRUE 65021
64977: LD_INT 8
64979: DOUBLE
64980: EQUAL
64981: IFTRUE 65021
64983: LD_INT 13
64985: DOUBLE
64986: EQUAL
64987: IFTRUE 65021
64989: LD_INT 12
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 65021
64995: LD_INT 15
64997: DOUBLE
64998: EQUAL
64999: IFTRUE 65021
65001: LD_INT 11
65003: DOUBLE
65004: EQUAL
65005: IFTRUE 65021
65007: LD_INT 14
65009: DOUBLE
65010: EQUAL
65011: IFTRUE 65021
65013: LD_INT 10
65015: DOUBLE
65016: EQUAL
65017: IFTRUE 65021
65019: GO 65077
65021: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65022: LD_ADDR_VAR 0 9
65026: PUSH
65027: LD_VAR 0 41
65031: PUSH
65032: LD_VAR 0 42
65036: PUSH
65037: LD_VAR 0 43
65041: PUSH
65042: LD_VAR 0 44
65046: PUSH
65047: LD_VAR 0 45
65051: PUSH
65052: LD_VAR 0 46
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: PUSH
65065: LD_VAR 0 4
65069: PUSH
65070: LD_INT 1
65072: PLUS
65073: ARRAY
65074: ST_TO_ADDR
65075: GO 65330
65077: LD_INT 36
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65085
65083: GO 65141
65085: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65086: LD_ADDR_VAR 0 9
65090: PUSH
65091: LD_VAR 0 47
65095: PUSH
65096: LD_VAR 0 48
65100: PUSH
65101: LD_VAR 0 49
65105: PUSH
65106: LD_VAR 0 50
65110: PUSH
65111: LD_VAR 0 51
65115: PUSH
65116: LD_VAR 0 52
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: PUSH
65129: LD_VAR 0 4
65133: PUSH
65134: LD_INT 1
65136: PLUS
65137: ARRAY
65138: ST_TO_ADDR
65139: GO 65330
65141: LD_INT 4
65143: DOUBLE
65144: EQUAL
65145: IFTRUE 65167
65147: LD_INT 5
65149: DOUBLE
65150: EQUAL
65151: IFTRUE 65167
65153: LD_INT 34
65155: DOUBLE
65156: EQUAL
65157: IFTRUE 65167
65159: LD_INT 37
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65167
65165: GO 65223
65167: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65168: LD_ADDR_VAR 0 9
65172: PUSH
65173: LD_VAR 0 53
65177: PUSH
65178: LD_VAR 0 54
65182: PUSH
65183: LD_VAR 0 55
65187: PUSH
65188: LD_VAR 0 56
65192: PUSH
65193: LD_VAR 0 57
65197: PUSH
65198: LD_VAR 0 58
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: PUSH
65211: LD_VAR 0 4
65215: PUSH
65216: LD_INT 1
65218: PLUS
65219: ARRAY
65220: ST_TO_ADDR
65221: GO 65330
65223: LD_INT 31
65225: DOUBLE
65226: EQUAL
65227: IFTRUE 65273
65229: LD_INT 32
65231: DOUBLE
65232: EQUAL
65233: IFTRUE 65273
65235: LD_INT 33
65237: DOUBLE
65238: EQUAL
65239: IFTRUE 65273
65241: LD_INT 27
65243: DOUBLE
65244: EQUAL
65245: IFTRUE 65273
65247: LD_INT 26
65249: DOUBLE
65250: EQUAL
65251: IFTRUE 65273
65253: LD_INT 28
65255: DOUBLE
65256: EQUAL
65257: IFTRUE 65273
65259: LD_INT 29
65261: DOUBLE
65262: EQUAL
65263: IFTRUE 65273
65265: LD_INT 30
65267: DOUBLE
65268: EQUAL
65269: IFTRUE 65273
65271: GO 65329
65273: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65274: LD_ADDR_VAR 0 9
65278: PUSH
65279: LD_VAR 0 59
65283: PUSH
65284: LD_VAR 0 60
65288: PUSH
65289: LD_VAR 0 61
65293: PUSH
65294: LD_VAR 0 62
65298: PUSH
65299: LD_VAR 0 63
65303: PUSH
65304: LD_VAR 0 64
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: LD_VAR 0 4
65321: PUSH
65322: LD_INT 1
65324: PLUS
65325: ARRAY
65326: ST_TO_ADDR
65327: GO 65330
65329: POP
// temp_list2 = [ ] ;
65330: LD_ADDR_VAR 0 10
65334: PUSH
65335: EMPTY
65336: ST_TO_ADDR
// for i in temp_list do
65337: LD_ADDR_VAR 0 8
65341: PUSH
65342: LD_VAR 0 9
65346: PUSH
65347: FOR_IN
65348: IFFALSE 65400
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65350: LD_ADDR_VAR 0 10
65354: PUSH
65355: LD_VAR 0 10
65359: PUSH
65360: LD_VAR 0 8
65364: PUSH
65365: LD_INT 1
65367: ARRAY
65368: PUSH
65369: LD_VAR 0 2
65373: PLUS
65374: PUSH
65375: LD_VAR 0 8
65379: PUSH
65380: LD_INT 2
65382: ARRAY
65383: PUSH
65384: LD_VAR 0 3
65388: PLUS
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: ADD
65397: ST_TO_ADDR
65398: GO 65347
65400: POP
65401: POP
// result = temp_list2 ;
65402: LD_ADDR_VAR 0 7
65406: PUSH
65407: LD_VAR 0 10
65411: ST_TO_ADDR
// end ;
65412: LD_VAR 0 7
65416: RET
// export function EnemyInRange ( unit , dist ) ; begin
65417: LD_INT 0
65419: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65420: LD_ADDR_VAR 0 3
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: CALL_OW 255
65434: PPUSH
65435: LD_VAR 0 1
65439: PPUSH
65440: CALL_OW 250
65444: PPUSH
65445: LD_VAR 0 1
65449: PPUSH
65450: CALL_OW 251
65454: PPUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: CALL 38813 0 4
65464: PUSH
65465: LD_INT 4
65467: ARRAY
65468: ST_TO_ADDR
// end ;
65469: LD_VAR 0 3
65473: RET
// export function PlayerSeeMe ( unit ) ; begin
65474: LD_INT 0
65476: PPUSH
// result := See ( your_side , unit ) ;
65477: LD_ADDR_VAR 0 2
65481: PUSH
65482: LD_OWVAR 2
65486: PPUSH
65487: LD_VAR 0 1
65491: PPUSH
65492: CALL_OW 292
65496: ST_TO_ADDR
// end ;
65497: LD_VAR 0 2
65501: RET
// export function ReverseDir ( unit ) ; begin
65502: LD_INT 0
65504: PPUSH
// if not unit then
65505: LD_VAR 0 1
65509: NOT
65510: IFFALSE 65514
// exit ;
65512: GO 65537
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65514: LD_ADDR_VAR 0 2
65518: PUSH
65519: LD_VAR 0 1
65523: PPUSH
65524: CALL_OW 254
65528: PUSH
65529: LD_INT 3
65531: PLUS
65532: PUSH
65533: LD_INT 6
65535: MOD
65536: ST_TO_ADDR
// end ;
65537: LD_VAR 0 2
65541: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65542: LD_INT 0
65544: PPUSH
65545: PPUSH
65546: PPUSH
65547: PPUSH
65548: PPUSH
// if not hexes then
65549: LD_VAR 0 2
65553: NOT
65554: IFFALSE 65558
// exit ;
65556: GO 65706
// dist := 9999 ;
65558: LD_ADDR_VAR 0 5
65562: PUSH
65563: LD_INT 9999
65565: ST_TO_ADDR
// for i = 1 to hexes do
65566: LD_ADDR_VAR 0 4
65570: PUSH
65571: DOUBLE
65572: LD_INT 1
65574: DEC
65575: ST_TO_ADDR
65576: LD_VAR 0 2
65580: PUSH
65581: FOR_TO
65582: IFFALSE 65694
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65584: LD_VAR 0 1
65588: PPUSH
65589: LD_VAR 0 2
65593: PUSH
65594: LD_VAR 0 4
65598: ARRAY
65599: PUSH
65600: LD_INT 1
65602: ARRAY
65603: PPUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_VAR 0 4
65613: ARRAY
65614: PUSH
65615: LD_INT 2
65617: ARRAY
65618: PPUSH
65619: CALL_OW 297
65623: PUSH
65624: LD_VAR 0 5
65628: LESS
65629: IFFALSE 65692
// begin hex := hexes [ i ] ;
65631: LD_ADDR_VAR 0 7
65635: PUSH
65636: LD_VAR 0 2
65640: PUSH
65641: LD_VAR 0 4
65645: ARRAY
65646: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65647: LD_ADDR_VAR 0 5
65651: PUSH
65652: LD_VAR 0 1
65656: PPUSH
65657: LD_VAR 0 2
65661: PUSH
65662: LD_VAR 0 4
65666: ARRAY
65667: PUSH
65668: LD_INT 1
65670: ARRAY
65671: PPUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_VAR 0 4
65681: ARRAY
65682: PUSH
65683: LD_INT 2
65685: ARRAY
65686: PPUSH
65687: CALL_OW 297
65691: ST_TO_ADDR
// end ; end ;
65692: GO 65581
65694: POP
65695: POP
// result := hex ;
65696: LD_ADDR_VAR 0 3
65700: PUSH
65701: LD_VAR 0 7
65705: ST_TO_ADDR
// end ;
65706: LD_VAR 0 3
65710: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65711: LD_INT 0
65713: PPUSH
65714: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65715: LD_VAR 0 1
65719: NOT
65720: PUSH
65721: LD_VAR 0 1
65725: PUSH
65726: LD_INT 21
65728: PUSH
65729: LD_INT 2
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 23
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PPUSH
65750: CALL_OW 69
65754: IN
65755: NOT
65756: OR
65757: IFFALSE 65761
// exit ;
65759: GO 65808
// for i = 1 to 3 do
65761: LD_ADDR_VAR 0 3
65765: PUSH
65766: DOUBLE
65767: LD_INT 1
65769: DEC
65770: ST_TO_ADDR
65771: LD_INT 3
65773: PUSH
65774: FOR_TO
65775: IFFALSE 65806
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65777: LD_VAR 0 1
65781: PPUSH
65782: CALL_OW 250
65786: PPUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: CALL_OW 251
65796: PPUSH
65797: LD_INT 1
65799: PPUSH
65800: CALL_OW 453
65804: GO 65774
65806: POP
65807: POP
// end ;
65808: LD_VAR 0 2
65812: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65813: LD_INT 0
65815: PPUSH
65816: PPUSH
65817: PPUSH
65818: PPUSH
65819: PPUSH
65820: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65821: LD_VAR 0 1
65825: NOT
65826: PUSH
65827: LD_VAR 0 2
65831: NOT
65832: OR
65833: PUSH
65834: LD_VAR 0 1
65838: PPUSH
65839: CALL_OW 314
65843: OR
65844: IFFALSE 65848
// exit ;
65846: GO 66289
// x := GetX ( enemy_unit ) ;
65848: LD_ADDR_VAR 0 7
65852: PUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: CALL_OW 250
65862: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65863: LD_ADDR_VAR 0 8
65867: PUSH
65868: LD_VAR 0 2
65872: PPUSH
65873: CALL_OW 251
65877: ST_TO_ADDR
// if not x or not y then
65878: LD_VAR 0 7
65882: NOT
65883: PUSH
65884: LD_VAR 0 8
65888: NOT
65889: OR
65890: IFFALSE 65894
// exit ;
65892: GO 66289
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65894: LD_ADDR_VAR 0 6
65898: PUSH
65899: LD_VAR 0 7
65903: PPUSH
65904: LD_INT 0
65906: PPUSH
65907: LD_INT 4
65909: PPUSH
65910: CALL_OW 272
65914: PUSH
65915: LD_VAR 0 8
65919: PPUSH
65920: LD_INT 0
65922: PPUSH
65923: LD_INT 4
65925: PPUSH
65926: CALL_OW 273
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_VAR 0 7
65939: PPUSH
65940: LD_INT 1
65942: PPUSH
65943: LD_INT 4
65945: PPUSH
65946: CALL_OW 272
65950: PUSH
65951: LD_VAR 0 8
65955: PPUSH
65956: LD_INT 1
65958: PPUSH
65959: LD_INT 4
65961: PPUSH
65962: CALL_OW 273
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_VAR 0 7
65975: PPUSH
65976: LD_INT 2
65978: PPUSH
65979: LD_INT 4
65981: PPUSH
65982: CALL_OW 272
65986: PUSH
65987: LD_VAR 0 8
65991: PPUSH
65992: LD_INT 2
65994: PPUSH
65995: LD_INT 4
65997: PPUSH
65998: CALL_OW 273
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_VAR 0 7
66011: PPUSH
66012: LD_INT 3
66014: PPUSH
66015: LD_INT 4
66017: PPUSH
66018: CALL_OW 272
66022: PUSH
66023: LD_VAR 0 8
66027: PPUSH
66028: LD_INT 3
66030: PPUSH
66031: LD_INT 4
66033: PPUSH
66034: CALL_OW 273
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_VAR 0 7
66047: PPUSH
66048: LD_INT 4
66050: PPUSH
66051: LD_INT 4
66053: PPUSH
66054: CALL_OW 272
66058: PUSH
66059: LD_VAR 0 8
66063: PPUSH
66064: LD_INT 4
66066: PPUSH
66067: LD_INT 4
66069: PPUSH
66070: CALL_OW 273
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_VAR 0 7
66083: PPUSH
66084: LD_INT 5
66086: PPUSH
66087: LD_INT 4
66089: PPUSH
66090: CALL_OW 272
66094: PUSH
66095: LD_VAR 0 8
66099: PPUSH
66100: LD_INT 5
66102: PPUSH
66103: LD_INT 4
66105: PPUSH
66106: CALL_OW 273
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// for i = tmp downto 1 do
66123: LD_ADDR_VAR 0 4
66127: PUSH
66128: DOUBLE
66129: LD_VAR 0 6
66133: INC
66134: ST_TO_ADDR
66135: LD_INT 1
66137: PUSH
66138: FOR_DOWNTO
66139: IFFALSE 66240
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66141: LD_VAR 0 6
66145: PUSH
66146: LD_VAR 0 4
66150: ARRAY
66151: PUSH
66152: LD_INT 1
66154: ARRAY
66155: PPUSH
66156: LD_VAR 0 6
66160: PUSH
66161: LD_VAR 0 4
66165: ARRAY
66166: PUSH
66167: LD_INT 2
66169: ARRAY
66170: PPUSH
66171: CALL_OW 488
66175: NOT
66176: PUSH
66177: LD_VAR 0 6
66181: PUSH
66182: LD_VAR 0 4
66186: ARRAY
66187: PUSH
66188: LD_INT 1
66190: ARRAY
66191: PPUSH
66192: LD_VAR 0 6
66196: PUSH
66197: LD_VAR 0 4
66201: ARRAY
66202: PUSH
66203: LD_INT 2
66205: ARRAY
66206: PPUSH
66207: CALL_OW 428
66211: PUSH
66212: LD_INT 0
66214: NONEQUAL
66215: OR
66216: IFFALSE 66238
// tmp := Delete ( tmp , i ) ;
66218: LD_ADDR_VAR 0 6
66222: PUSH
66223: LD_VAR 0 6
66227: PPUSH
66228: LD_VAR 0 4
66232: PPUSH
66233: CALL_OW 3
66237: ST_TO_ADDR
66238: GO 66138
66240: POP
66241: POP
// j := GetClosestHex ( unit , tmp ) ;
66242: LD_ADDR_VAR 0 5
66246: PUSH
66247: LD_VAR 0 1
66251: PPUSH
66252: LD_VAR 0 6
66256: PPUSH
66257: CALL 65542 0 2
66261: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66262: LD_VAR 0 1
66266: PPUSH
66267: LD_VAR 0 5
66271: PUSH
66272: LD_INT 1
66274: ARRAY
66275: PPUSH
66276: LD_VAR 0 5
66280: PUSH
66281: LD_INT 2
66283: ARRAY
66284: PPUSH
66285: CALL_OW 111
// end ;
66289: LD_VAR 0 3
66293: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
66298: PPUSH
// uc_side = 0 ;
66299: LD_ADDR_OWVAR 20
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// uc_nation = 0 ;
66307: LD_ADDR_OWVAR 21
66311: PUSH
66312: LD_INT 0
66314: ST_TO_ADDR
// InitHc_All ( ) ;
66315: CALL_OW 584
// InitVc ;
66319: CALL_OW 20
// if mastodonts then
66323: LD_VAR 0 6
66327: IFFALSE 66394
// for i = 1 to mastodonts do
66329: LD_ADDR_VAR 0 11
66333: PUSH
66334: DOUBLE
66335: LD_INT 1
66337: DEC
66338: ST_TO_ADDR
66339: LD_VAR 0 6
66343: PUSH
66344: FOR_TO
66345: IFFALSE 66392
// begin vc_chassis := 31 ;
66347: LD_ADDR_OWVAR 37
66351: PUSH
66352: LD_INT 31
66354: ST_TO_ADDR
// vc_control := control_rider ;
66355: LD_ADDR_OWVAR 38
66359: PUSH
66360: LD_INT 4
66362: ST_TO_ADDR
// animal := CreateVehicle ;
66363: LD_ADDR_VAR 0 12
66367: PUSH
66368: CALL_OW 45
66372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66373: LD_VAR 0 12
66377: PPUSH
66378: LD_VAR 0 8
66382: PPUSH
66383: LD_INT 0
66385: PPUSH
66386: CALL 68582 0 3
// end ;
66390: GO 66344
66392: POP
66393: POP
// if horses then
66394: LD_VAR 0 5
66398: IFFALSE 66465
// for i = 1 to horses do
66400: LD_ADDR_VAR 0 11
66404: PUSH
66405: DOUBLE
66406: LD_INT 1
66408: DEC
66409: ST_TO_ADDR
66410: LD_VAR 0 5
66414: PUSH
66415: FOR_TO
66416: IFFALSE 66463
// begin hc_class := 21 ;
66418: LD_ADDR_OWVAR 28
66422: PUSH
66423: LD_INT 21
66425: ST_TO_ADDR
// hc_gallery :=  ;
66426: LD_ADDR_OWVAR 33
66430: PUSH
66431: LD_STRING 
66433: ST_TO_ADDR
// animal := CreateHuman ;
66434: LD_ADDR_VAR 0 12
66438: PUSH
66439: CALL_OW 44
66443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66444: LD_VAR 0 12
66448: PPUSH
66449: LD_VAR 0 8
66453: PPUSH
66454: LD_INT 0
66456: PPUSH
66457: CALL 68582 0 3
// end ;
66461: GO 66415
66463: POP
66464: POP
// if birds then
66465: LD_VAR 0 1
66469: IFFALSE 66536
// for i = 1 to birds do
66471: LD_ADDR_VAR 0 11
66475: PUSH
66476: DOUBLE
66477: LD_INT 1
66479: DEC
66480: ST_TO_ADDR
66481: LD_VAR 0 1
66485: PUSH
66486: FOR_TO
66487: IFFALSE 66534
// begin hc_class = 18 ;
66489: LD_ADDR_OWVAR 28
66493: PUSH
66494: LD_INT 18
66496: ST_TO_ADDR
// hc_gallery =  ;
66497: LD_ADDR_OWVAR 33
66501: PUSH
66502: LD_STRING 
66504: ST_TO_ADDR
// animal := CreateHuman ;
66505: LD_ADDR_VAR 0 12
66509: PUSH
66510: CALL_OW 44
66514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66515: LD_VAR 0 12
66519: PPUSH
66520: LD_VAR 0 8
66524: PPUSH
66525: LD_INT 0
66527: PPUSH
66528: CALL 68582 0 3
// end ;
66532: GO 66486
66534: POP
66535: POP
// if tigers then
66536: LD_VAR 0 2
66540: IFFALSE 66624
// for i = 1 to tigers do
66542: LD_ADDR_VAR 0 11
66546: PUSH
66547: DOUBLE
66548: LD_INT 1
66550: DEC
66551: ST_TO_ADDR
66552: LD_VAR 0 2
66556: PUSH
66557: FOR_TO
66558: IFFALSE 66622
// begin hc_class = class_tiger ;
66560: LD_ADDR_OWVAR 28
66564: PUSH
66565: LD_INT 14
66567: ST_TO_ADDR
// hc_gallery =  ;
66568: LD_ADDR_OWVAR 33
66572: PUSH
66573: LD_STRING 
66575: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66576: LD_ADDR_OWVAR 35
66580: PUSH
66581: LD_INT 7
66583: NEG
66584: PPUSH
66585: LD_INT 7
66587: PPUSH
66588: CALL_OW 12
66592: ST_TO_ADDR
// animal := CreateHuman ;
66593: LD_ADDR_VAR 0 12
66597: PUSH
66598: CALL_OW 44
66602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66603: LD_VAR 0 12
66607: PPUSH
66608: LD_VAR 0 8
66612: PPUSH
66613: LD_INT 0
66615: PPUSH
66616: CALL 68582 0 3
// end ;
66620: GO 66557
66622: POP
66623: POP
// if apemans then
66624: LD_VAR 0 3
66628: IFFALSE 66751
// for i = 1 to apemans do
66630: LD_ADDR_VAR 0 11
66634: PUSH
66635: DOUBLE
66636: LD_INT 1
66638: DEC
66639: ST_TO_ADDR
66640: LD_VAR 0 3
66644: PUSH
66645: FOR_TO
66646: IFFALSE 66749
// begin hc_class = class_apeman ;
66648: LD_ADDR_OWVAR 28
66652: PUSH
66653: LD_INT 12
66655: ST_TO_ADDR
// hc_gallery =  ;
66656: LD_ADDR_OWVAR 33
66660: PUSH
66661: LD_STRING 
66663: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66664: LD_ADDR_OWVAR 35
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PPUSH
66673: LD_INT 2
66675: PPUSH
66676: CALL_OW 12
66680: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66681: LD_ADDR_OWVAR 31
66685: PUSH
66686: LD_INT 1
66688: PPUSH
66689: LD_INT 3
66691: PPUSH
66692: CALL_OW 12
66696: PUSH
66697: LD_INT 1
66699: PPUSH
66700: LD_INT 3
66702: PPUSH
66703: CALL_OW 12
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// animal := CreateHuman ;
66720: LD_ADDR_VAR 0 12
66724: PUSH
66725: CALL_OW 44
66729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66730: LD_VAR 0 12
66734: PPUSH
66735: LD_VAR 0 8
66739: PPUSH
66740: LD_INT 0
66742: PPUSH
66743: CALL 68582 0 3
// end ;
66747: GO 66645
66749: POP
66750: POP
// if enchidnas then
66751: LD_VAR 0 4
66755: IFFALSE 66822
// for i = 1 to enchidnas do
66757: LD_ADDR_VAR 0 11
66761: PUSH
66762: DOUBLE
66763: LD_INT 1
66765: DEC
66766: ST_TO_ADDR
66767: LD_VAR 0 4
66771: PUSH
66772: FOR_TO
66773: IFFALSE 66820
// begin hc_class = 13 ;
66775: LD_ADDR_OWVAR 28
66779: PUSH
66780: LD_INT 13
66782: ST_TO_ADDR
// hc_gallery =  ;
66783: LD_ADDR_OWVAR 33
66787: PUSH
66788: LD_STRING 
66790: ST_TO_ADDR
// animal := CreateHuman ;
66791: LD_ADDR_VAR 0 12
66795: PUSH
66796: CALL_OW 44
66800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66801: LD_VAR 0 12
66805: PPUSH
66806: LD_VAR 0 8
66810: PPUSH
66811: LD_INT 0
66813: PPUSH
66814: CALL 68582 0 3
// end ;
66818: GO 66772
66820: POP
66821: POP
// if fishes then
66822: LD_VAR 0 7
66826: IFFALSE 66893
// for i = 1 to fishes do
66828: LD_ADDR_VAR 0 11
66832: PUSH
66833: DOUBLE
66834: LD_INT 1
66836: DEC
66837: ST_TO_ADDR
66838: LD_VAR 0 7
66842: PUSH
66843: FOR_TO
66844: IFFALSE 66891
// begin hc_class = 20 ;
66846: LD_ADDR_OWVAR 28
66850: PUSH
66851: LD_INT 20
66853: ST_TO_ADDR
// hc_gallery =  ;
66854: LD_ADDR_OWVAR 33
66858: PUSH
66859: LD_STRING 
66861: ST_TO_ADDR
// animal := CreateHuman ;
66862: LD_ADDR_VAR 0 12
66866: PUSH
66867: CALL_OW 44
66871: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66872: LD_VAR 0 12
66876: PPUSH
66877: LD_VAR 0 9
66881: PPUSH
66882: LD_INT 0
66884: PPUSH
66885: CALL 68582 0 3
// end ;
66889: GO 66843
66891: POP
66892: POP
// end ;
66893: LD_VAR 0 10
66897: RET
// export function WantHeal ( sci , unit ) ; begin
66898: LD_INT 0
66900: PPUSH
// if GetTaskList ( sci ) > 0 then
66901: LD_VAR 0 1
66905: PPUSH
66906: CALL_OW 437
66910: PUSH
66911: LD_INT 0
66913: GREATER
66914: IFFALSE 66984
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66916: LD_VAR 0 1
66920: PPUSH
66921: CALL_OW 437
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PUSH
66934: LD_STRING l
66936: EQUAL
66937: PUSH
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 437
66947: PUSH
66948: LD_INT 1
66950: ARRAY
66951: PUSH
66952: LD_INT 4
66954: ARRAY
66955: PUSH
66956: LD_VAR 0 2
66960: EQUAL
66961: AND
66962: IFFALSE 66974
// result := true else
66964: LD_ADDR_VAR 0 3
66968: PUSH
66969: LD_INT 1
66971: ST_TO_ADDR
66972: GO 66982
// result := false ;
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: LD_INT 0
66981: ST_TO_ADDR
// end else
66982: GO 66992
// result := false ;
66984: LD_ADDR_VAR 0 3
66988: PUSH
66989: LD_INT 0
66991: ST_TO_ADDR
// end ;
66992: LD_VAR 0 3
66996: RET
// export function HealTarget ( sci ) ; begin
66997: LD_INT 0
66999: PPUSH
// if not sci then
67000: LD_VAR 0 1
67004: NOT
67005: IFFALSE 67009
// exit ;
67007: GO 67074
// result := 0 ;
67009: LD_ADDR_VAR 0 2
67013: PUSH
67014: LD_INT 0
67016: ST_TO_ADDR
// if GetTaskList ( sci ) then
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 437
67026: IFFALSE 67074
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67028: LD_VAR 0 1
67032: PPUSH
67033: CALL_OW 437
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: PUSH
67042: LD_INT 1
67044: ARRAY
67045: PUSH
67046: LD_STRING l
67048: EQUAL
67049: IFFALSE 67074
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67051: LD_ADDR_VAR 0 2
67055: PUSH
67056: LD_VAR 0 1
67060: PPUSH
67061: CALL_OW 437
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PUSH
67070: LD_INT 4
67072: ARRAY
67073: ST_TO_ADDR
// end ;
67074: LD_VAR 0 2
67078: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67079: LD_INT 0
67081: PPUSH
67082: PPUSH
67083: PPUSH
67084: PPUSH
// if not base_units then
67085: LD_VAR 0 1
67089: NOT
67090: IFFALSE 67094
// exit ;
67092: GO 67181
// result := false ;
67094: LD_ADDR_VAR 0 2
67098: PUSH
67099: LD_INT 0
67101: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67102: LD_ADDR_VAR 0 5
67106: PUSH
67107: LD_VAR 0 1
67111: PPUSH
67112: LD_INT 21
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PPUSH
67122: CALL_OW 72
67126: ST_TO_ADDR
// if not tmp then
67127: LD_VAR 0 5
67131: NOT
67132: IFFALSE 67136
// exit ;
67134: GO 67181
// for i in tmp do
67136: LD_ADDR_VAR 0 3
67140: PUSH
67141: LD_VAR 0 5
67145: PUSH
67146: FOR_IN
67147: IFFALSE 67179
// begin result := EnemyInRange ( i , 22 ) ;
67149: LD_ADDR_VAR 0 2
67153: PUSH
67154: LD_VAR 0 3
67158: PPUSH
67159: LD_INT 22
67161: PPUSH
67162: CALL 65417 0 2
67166: ST_TO_ADDR
// if result then
67167: LD_VAR 0 2
67171: IFFALSE 67177
// exit ;
67173: POP
67174: POP
67175: GO 67181
// end ;
67177: GO 67146
67179: POP
67180: POP
// end ;
67181: LD_VAR 0 2
67185: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67186: LD_INT 0
67188: PPUSH
67189: PPUSH
// if not units then
67190: LD_VAR 0 1
67194: NOT
67195: IFFALSE 67199
// exit ;
67197: GO 67269
// result := [ ] ;
67199: LD_ADDR_VAR 0 3
67203: PUSH
67204: EMPTY
67205: ST_TO_ADDR
// for i in units do
67206: LD_ADDR_VAR 0 4
67210: PUSH
67211: LD_VAR 0 1
67215: PUSH
67216: FOR_IN
67217: IFFALSE 67267
// if GetTag ( i ) = tag then
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 110
67228: PUSH
67229: LD_VAR 0 2
67233: EQUAL
67234: IFFALSE 67265
// result := Replace ( result , result + 1 , i ) ;
67236: LD_ADDR_VAR 0 3
67240: PUSH
67241: LD_VAR 0 3
67245: PPUSH
67246: LD_VAR 0 3
67250: PUSH
67251: LD_INT 1
67253: PLUS
67254: PPUSH
67255: LD_VAR 0 4
67259: PPUSH
67260: CALL_OW 1
67264: ST_TO_ADDR
67265: GO 67216
67267: POP
67268: POP
// end ;
67269: LD_VAR 0 3
67273: RET
// export function IsDriver ( un ) ; begin
67274: LD_INT 0
67276: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67277: LD_ADDR_VAR 0 2
67281: PUSH
67282: LD_VAR 0 1
67286: PUSH
67287: LD_INT 55
67289: PUSH
67290: EMPTY
67291: LIST
67292: PPUSH
67293: CALL_OW 69
67297: IN
67298: ST_TO_ADDR
// end ;
67299: LD_VAR 0 2
67303: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67304: LD_INT 0
67306: PPUSH
67307: PPUSH
// list := [ ] ;
67308: LD_ADDR_VAR 0 5
67312: PUSH
67313: EMPTY
67314: ST_TO_ADDR
// case d of 0 :
67315: LD_VAR 0 3
67319: PUSH
67320: LD_INT 0
67322: DOUBLE
67323: EQUAL
67324: IFTRUE 67328
67326: GO 67461
67328: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67329: LD_ADDR_VAR 0 5
67333: PUSH
67334: LD_VAR 0 1
67338: PUSH
67339: LD_INT 4
67341: MINUS
67342: PUSH
67343: LD_VAR 0 2
67347: PUSH
67348: LD_INT 4
67350: MINUS
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: PUSH
67360: LD_VAR 0 1
67364: PUSH
67365: LD_INT 3
67367: MINUS
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: LD_VAR 0 1
67386: PUSH
67387: LD_INT 4
67389: PLUS
67390: PUSH
67391: LD_VAR 0 2
67395: PUSH
67396: LD_INT 4
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: PUSH
67404: LD_VAR 0 1
67408: PUSH
67409: LD_INT 3
67411: PLUS
67412: PUSH
67413: LD_VAR 0 2
67417: PUSH
67418: LD_INT 3
67420: PLUS
67421: PUSH
67422: LD_INT 5
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: PUSH
67430: LD_VAR 0 1
67434: PUSH
67435: LD_VAR 0 2
67439: PUSH
67440: LD_INT 4
67442: PLUS
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// end ; 1 :
67459: GO 68159
67461: LD_INT 1
67463: DOUBLE
67464: EQUAL
67465: IFTRUE 67469
67467: GO 67602
67469: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67470: LD_ADDR_VAR 0 5
67474: PUSH
67475: LD_VAR 0 1
67479: PUSH
67480: LD_VAR 0 2
67484: PUSH
67485: LD_INT 4
67487: MINUS
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: PUSH
67497: LD_VAR 0 1
67501: PUSH
67502: LD_INT 3
67504: MINUS
67505: PUSH
67506: LD_VAR 0 2
67510: PUSH
67511: LD_INT 3
67513: MINUS
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: LIST
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 4
67530: MINUS
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: LD_VAR 0 2
67554: PUSH
67555: LD_INT 3
67557: PLUS
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: LIST
67566: PUSH
67567: LD_VAR 0 1
67571: PUSH
67572: LD_INT 4
67574: PLUS
67575: PUSH
67576: LD_VAR 0 2
67580: PUSH
67581: LD_INT 4
67583: PLUS
67584: PUSH
67585: LD_INT 5
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: ST_TO_ADDR
// end ; 2 :
67600: GO 68159
67602: LD_INT 2
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67610
67608: GO 67739
67610: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67611: LD_ADDR_VAR 0 5
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_VAR 0 2
67625: PUSH
67626: LD_INT 3
67628: MINUS
67629: PUSH
67630: LD_INT 3
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: LD_INT 4
67645: PLUS
67646: PUSH
67647: LD_VAR 0 2
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: PUSH
67660: LD_VAR 0 1
67664: PUSH
67665: LD_VAR 0 2
67669: PUSH
67670: LD_INT 4
67672: PLUS
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: LIST
67681: PUSH
67682: LD_VAR 0 1
67686: PUSH
67687: LD_INT 3
67689: MINUS
67690: PUSH
67691: LD_VAR 0 2
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: PUSH
67704: LD_VAR 0 1
67708: PUSH
67709: LD_INT 4
67711: MINUS
67712: PUSH
67713: LD_VAR 0 2
67717: PUSH
67718: LD_INT 4
67720: MINUS
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// end ; 3 :
67737: GO 68159
67739: LD_INT 3
67741: DOUBLE
67742: EQUAL
67743: IFTRUE 67747
67745: GO 67880
67747: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67748: LD_ADDR_VAR 0 5
67752: PUSH
67753: LD_VAR 0 1
67757: PUSH
67758: LD_INT 3
67760: PLUS
67761: PUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_INT 4
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: LD_VAR 0 1
67779: PUSH
67780: LD_INT 4
67782: PLUS
67783: PUSH
67784: LD_VAR 0 2
67788: PUSH
67789: LD_INT 4
67791: PLUS
67792: PUSH
67793: LD_INT 5
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: PUSH
67801: LD_VAR 0 1
67805: PUSH
67806: LD_INT 4
67808: MINUS
67809: PUSH
67810: LD_VAR 0 2
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: LIST
67822: PUSH
67823: LD_VAR 0 1
67827: PUSH
67828: LD_VAR 0 2
67832: PUSH
67833: LD_INT 4
67835: MINUS
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: PUSH
67845: LD_VAR 0 1
67849: PUSH
67850: LD_INT 3
67852: MINUS
67853: PUSH
67854: LD_VAR 0 2
67858: PUSH
67859: LD_INT 3
67861: MINUS
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: ST_TO_ADDR
// end ; 4 :
67878: GO 68159
67880: LD_INT 4
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67888
67886: GO 68021
67888: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67889: LD_ADDR_VAR 0 5
67893: PUSH
67894: LD_VAR 0 1
67898: PUSH
67899: LD_VAR 0 2
67903: PUSH
67904: LD_INT 4
67906: PLUS
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: PUSH
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 3
67923: PLUS
67924: PUSH
67925: LD_VAR 0 2
67929: PUSH
67930: LD_INT 3
67932: PLUS
67933: PUSH
67934: LD_INT 5
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: PUSH
67942: LD_VAR 0 1
67946: PUSH
67947: LD_INT 4
67949: PLUS
67950: PUSH
67951: LD_VAR 0 2
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: LD_VAR 0 1
67968: PUSH
67969: LD_VAR 0 2
67973: PUSH
67974: LD_INT 3
67976: MINUS
67977: PUSH
67978: LD_INT 3
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: LIST
67985: PUSH
67986: LD_VAR 0 1
67990: PUSH
67991: LD_INT 4
67993: MINUS
67994: PUSH
67995: LD_VAR 0 2
67999: PUSH
68000: LD_INT 4
68002: MINUS
68003: PUSH
68004: LD_INT 2
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: ST_TO_ADDR
// end ; 5 :
68019: GO 68159
68021: LD_INT 5
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68029
68027: GO 68158
68029: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_INT 4
68042: MINUS
68043: PUSH
68044: LD_VAR 0 2
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: PUSH
68057: LD_VAR 0 1
68061: PUSH
68062: LD_VAR 0 2
68066: PUSH
68067: LD_INT 4
68069: MINUS
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: PUSH
68079: LD_VAR 0 1
68083: PUSH
68084: LD_INT 4
68086: PLUS
68087: PUSH
68088: LD_VAR 0 2
68092: PUSH
68093: LD_INT 4
68095: PLUS
68096: PUSH
68097: LD_INT 5
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: LIST
68104: PUSH
68105: LD_VAR 0 1
68109: PUSH
68110: LD_INT 3
68112: PLUS
68113: PUSH
68114: LD_VAR 0 2
68118: PUSH
68119: LD_INT 4
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: PUSH
68127: LD_VAR 0 1
68131: PUSH
68132: LD_VAR 0 2
68136: PUSH
68137: LD_INT 3
68139: PLUS
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: ST_TO_ADDR
// end ; end ;
68156: GO 68159
68158: POP
// result := list ;
68159: LD_ADDR_VAR 0 4
68163: PUSH
68164: LD_VAR 0 5
68168: ST_TO_ADDR
// end ;
68169: LD_VAR 0 4
68173: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68174: LD_INT 0
68176: PPUSH
68177: PPUSH
68178: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68179: LD_VAR 0 1
68183: NOT
68184: PUSH
68185: LD_VAR 0 2
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: LD_INT 2
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: IN
68208: NOT
68209: OR
68210: IFFALSE 68214
// exit ;
68212: GO 68306
// tmp := [ ] ;
68214: LD_ADDR_VAR 0 5
68218: PUSH
68219: EMPTY
68220: ST_TO_ADDR
// for i in units do
68221: LD_ADDR_VAR 0 4
68225: PUSH
68226: LD_VAR 0 1
68230: PUSH
68231: FOR_IN
68232: IFFALSE 68275
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 5
68243: PPUSH
68244: LD_VAR 0 5
68248: PUSH
68249: LD_INT 1
68251: PLUS
68252: PPUSH
68253: LD_VAR 0 4
68257: PPUSH
68258: LD_VAR 0 2
68262: PPUSH
68263: CALL_OW 259
68267: PPUSH
68268: CALL_OW 2
68272: ST_TO_ADDR
68273: GO 68231
68275: POP
68276: POP
// if not tmp then
68277: LD_VAR 0 5
68281: NOT
68282: IFFALSE 68286
// exit ;
68284: GO 68306
// result := SortListByListDesc ( units , tmp ) ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_VAR 0 5
68300: PPUSH
68301: CALL_OW 77
68305: ST_TO_ADDR
// end ;
68306: LD_VAR 0 3
68310: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68311: LD_INT 0
68313: PPUSH
68314: PPUSH
68315: PPUSH
// result := false ;
68316: LD_ADDR_VAR 0 3
68320: PUSH
68321: LD_INT 0
68323: ST_TO_ADDR
// x := GetX ( building ) ;
68324: LD_ADDR_VAR 0 4
68328: PUSH
68329: LD_VAR 0 2
68333: PPUSH
68334: CALL_OW 250
68338: ST_TO_ADDR
// y := GetY ( building ) ;
68339: LD_ADDR_VAR 0 5
68343: PUSH
68344: LD_VAR 0 2
68348: PPUSH
68349: CALL_OW 251
68353: ST_TO_ADDR
// if not building or not x or not y then
68354: LD_VAR 0 2
68358: NOT
68359: PUSH
68360: LD_VAR 0 4
68364: NOT
68365: OR
68366: PUSH
68367: LD_VAR 0 5
68371: NOT
68372: OR
68373: IFFALSE 68377
// exit ;
68375: GO 68469
// if GetTaskList ( unit ) then
68377: LD_VAR 0 1
68381: PPUSH
68382: CALL_OW 437
68386: IFFALSE 68469
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68388: LD_STRING e
68390: PUSH
68391: LD_VAR 0 1
68395: PPUSH
68396: CALL_OW 437
68400: PUSH
68401: LD_INT 1
68403: ARRAY
68404: PUSH
68405: LD_INT 1
68407: ARRAY
68408: EQUAL
68409: PUSH
68410: LD_VAR 0 4
68414: PUSH
68415: LD_VAR 0 1
68419: PPUSH
68420: CALL_OW 437
68424: PUSH
68425: LD_INT 1
68427: ARRAY
68428: PUSH
68429: LD_INT 2
68431: ARRAY
68432: EQUAL
68433: AND
68434: PUSH
68435: LD_VAR 0 5
68439: PUSH
68440: LD_VAR 0 1
68444: PPUSH
68445: CALL_OW 437
68449: PUSH
68450: LD_INT 1
68452: ARRAY
68453: PUSH
68454: LD_INT 3
68456: ARRAY
68457: EQUAL
68458: AND
68459: IFFALSE 68469
// result := true end ;
68461: LD_ADDR_VAR 0 3
68465: PUSH
68466: LD_INT 1
68468: ST_TO_ADDR
// end ;
68469: LD_VAR 0 3
68473: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68474: LD_INT 0
68476: PPUSH
// result := false ;
68477: LD_ADDR_VAR 0 4
68481: PUSH
68482: LD_INT 0
68484: ST_TO_ADDR
// if GetTaskList ( unit ) then
68485: LD_VAR 0 1
68489: PPUSH
68490: CALL_OW 437
68494: IFFALSE 68577
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68496: LD_STRING M
68498: PUSH
68499: LD_VAR 0 1
68503: PPUSH
68504: CALL_OW 437
68508: PUSH
68509: LD_INT 1
68511: ARRAY
68512: PUSH
68513: LD_INT 1
68515: ARRAY
68516: EQUAL
68517: PUSH
68518: LD_VAR 0 2
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 437
68532: PUSH
68533: LD_INT 1
68535: ARRAY
68536: PUSH
68537: LD_INT 2
68539: ARRAY
68540: EQUAL
68541: AND
68542: PUSH
68543: LD_VAR 0 3
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: CALL_OW 437
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: PUSH
68562: LD_INT 3
68564: ARRAY
68565: EQUAL
68566: AND
68567: IFFALSE 68577
// result := true ;
68569: LD_ADDR_VAR 0 4
68573: PUSH
68574: LD_INT 1
68576: ST_TO_ADDR
// end ; end ;
68577: LD_VAR 0 4
68581: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
// if not unit or not area then
68588: LD_VAR 0 1
68592: NOT
68593: PUSH
68594: LD_VAR 0 2
68598: NOT
68599: OR
68600: IFFALSE 68604
// exit ;
68602: GO 68768
// tmp := AreaToList ( area , i ) ;
68604: LD_ADDR_VAR 0 6
68608: PUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: LD_VAR 0 5
68618: PPUSH
68619: CALL_OW 517
68623: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68624: LD_ADDR_VAR 0 5
68628: PUSH
68629: DOUBLE
68630: LD_INT 1
68632: DEC
68633: ST_TO_ADDR
68634: LD_VAR 0 6
68638: PUSH
68639: LD_INT 1
68641: ARRAY
68642: PUSH
68643: FOR_TO
68644: IFFALSE 68766
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68646: LD_ADDR_VAR 0 7
68650: PUSH
68651: LD_VAR 0 6
68655: PUSH
68656: LD_INT 1
68658: ARRAY
68659: PUSH
68660: LD_VAR 0 5
68664: ARRAY
68665: PUSH
68666: LD_VAR 0 6
68670: PUSH
68671: LD_INT 2
68673: ARRAY
68674: PUSH
68675: LD_VAR 0 5
68679: ARRAY
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68685: LD_VAR 0 7
68689: PUSH
68690: LD_INT 1
68692: ARRAY
68693: PPUSH
68694: LD_VAR 0 7
68698: PUSH
68699: LD_INT 2
68701: ARRAY
68702: PPUSH
68703: CALL_OW 428
68707: PUSH
68708: LD_INT 0
68710: EQUAL
68711: IFFALSE 68764
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68713: LD_VAR 0 1
68717: PPUSH
68718: LD_VAR 0 7
68722: PUSH
68723: LD_INT 1
68725: ARRAY
68726: PPUSH
68727: LD_VAR 0 7
68731: PUSH
68732: LD_INT 2
68734: ARRAY
68735: PPUSH
68736: LD_VAR 0 3
68740: PPUSH
68741: CALL_OW 48
// result := IsPlaced ( unit ) ;
68745: LD_ADDR_VAR 0 4
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 305
68759: ST_TO_ADDR
// exit ;
68760: POP
68761: POP
68762: GO 68768
// end ; end ;
68764: GO 68643
68766: POP
68767: POP
// end ;
68768: LD_VAR 0 4
68772: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68773: LD_INT 0
68775: PPUSH
68776: PPUSH
68777: PPUSH
// if not side or side > 8 then
68778: LD_VAR 0 1
68782: NOT
68783: PUSH
68784: LD_VAR 0 1
68788: PUSH
68789: LD_INT 8
68791: GREATER
68792: OR
68793: IFFALSE 68797
// exit ;
68795: GO 68984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68797: LD_ADDR_VAR 0 4
68801: PUSH
68802: LD_INT 22
68804: PUSH
68805: LD_VAR 0 1
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 21
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PPUSH
68828: CALL_OW 69
68832: ST_TO_ADDR
// if not tmp then
68833: LD_VAR 0 4
68837: NOT
68838: IFFALSE 68842
// exit ;
68840: GO 68984
// enable_addtolog := true ;
68842: LD_ADDR_OWVAR 81
68846: PUSH
68847: LD_INT 1
68849: ST_TO_ADDR
// AddToLog ( [ ) ;
68850: LD_STRING [
68852: PPUSH
68853: CALL_OW 561
// for i in tmp do
68857: LD_ADDR_VAR 0 3
68861: PUSH
68862: LD_VAR 0 4
68866: PUSH
68867: FOR_IN
68868: IFFALSE 68975
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68870: LD_STRING [
68872: PUSH
68873: LD_VAR 0 3
68877: PPUSH
68878: CALL_OW 266
68882: STR
68883: PUSH
68884: LD_STRING , 
68886: STR
68887: PUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: CALL_OW 250
68897: STR
68898: PUSH
68899: LD_STRING , 
68901: STR
68902: PUSH
68903: LD_VAR 0 3
68907: PPUSH
68908: CALL_OW 251
68912: STR
68913: PUSH
68914: LD_STRING , 
68916: STR
68917: PUSH
68918: LD_VAR 0 3
68922: PPUSH
68923: CALL_OW 254
68927: STR
68928: PUSH
68929: LD_STRING , 
68931: STR
68932: PUSH
68933: LD_VAR 0 3
68937: PPUSH
68938: LD_INT 1
68940: PPUSH
68941: CALL_OW 268
68945: STR
68946: PUSH
68947: LD_STRING , 
68949: STR
68950: PUSH
68951: LD_VAR 0 3
68955: PPUSH
68956: LD_INT 2
68958: PPUSH
68959: CALL_OW 268
68963: STR
68964: PUSH
68965: LD_STRING ],
68967: STR
68968: PPUSH
68969: CALL_OW 561
// end ;
68973: GO 68867
68975: POP
68976: POP
// AddToLog ( ]; ) ;
68977: LD_STRING ];
68979: PPUSH
68980: CALL_OW 561
// end ;
68984: LD_VAR 0 2
68988: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68989: LD_INT 0
68991: PPUSH
68992: PPUSH
68993: PPUSH
68994: PPUSH
68995: PPUSH
// if not area or not rate or not max then
68996: LD_VAR 0 1
69000: NOT
69001: PUSH
69002: LD_VAR 0 2
69006: NOT
69007: OR
69008: PUSH
69009: LD_VAR 0 4
69013: NOT
69014: OR
69015: IFFALSE 69019
// exit ;
69017: GO 69211
// while 1 do
69019: LD_INT 1
69021: IFFALSE 69211
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69023: LD_ADDR_VAR 0 9
69027: PUSH
69028: LD_VAR 0 1
69032: PPUSH
69033: LD_INT 1
69035: PPUSH
69036: CALL_OW 287
69040: PUSH
69041: LD_INT 10
69043: MUL
69044: ST_TO_ADDR
// r := rate / 10 ;
69045: LD_ADDR_VAR 0 7
69049: PUSH
69050: LD_VAR 0 2
69054: PUSH
69055: LD_INT 10
69057: DIVREAL
69058: ST_TO_ADDR
// time := 1 1$00 ;
69059: LD_ADDR_VAR 0 8
69063: PUSH
69064: LD_INT 2100
69066: ST_TO_ADDR
// if amount < min then
69067: LD_VAR 0 9
69071: PUSH
69072: LD_VAR 0 3
69076: LESS
69077: IFFALSE 69095
// r := r * 2 else
69079: LD_ADDR_VAR 0 7
69083: PUSH
69084: LD_VAR 0 7
69088: PUSH
69089: LD_INT 2
69091: MUL
69092: ST_TO_ADDR
69093: GO 69121
// if amount > max then
69095: LD_VAR 0 9
69099: PUSH
69100: LD_VAR 0 4
69104: GREATER
69105: IFFALSE 69121
// r := r / 2 ;
69107: LD_ADDR_VAR 0 7
69111: PUSH
69112: LD_VAR 0 7
69116: PUSH
69117: LD_INT 2
69119: DIVREAL
69120: ST_TO_ADDR
// time := time / r ;
69121: LD_ADDR_VAR 0 8
69125: PUSH
69126: LD_VAR 0 8
69130: PUSH
69131: LD_VAR 0 7
69135: DIVREAL
69136: ST_TO_ADDR
// if time < 0 then
69137: LD_VAR 0 8
69141: PUSH
69142: LD_INT 0
69144: LESS
69145: IFFALSE 69162
// time := time * - 1 ;
69147: LD_ADDR_VAR 0 8
69151: PUSH
69152: LD_VAR 0 8
69156: PUSH
69157: LD_INT 1
69159: NEG
69160: MUL
69161: ST_TO_ADDR
// wait ( time ) ;
69162: LD_VAR 0 8
69166: PPUSH
69167: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69171: LD_INT 35
69173: PPUSH
69174: LD_INT 875
69176: PPUSH
69177: CALL_OW 12
69181: PPUSH
69182: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69186: LD_INT 1
69188: PPUSH
69189: LD_INT 5
69191: PPUSH
69192: CALL_OW 12
69196: PPUSH
69197: LD_VAR 0 1
69201: PPUSH
69202: LD_INT 1
69204: PPUSH
69205: CALL_OW 55
// end ;
69209: GO 69019
// end ;
69211: LD_VAR 0 5
69215: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69216: LD_INT 0
69218: PPUSH
69219: PPUSH
69220: PPUSH
69221: PPUSH
69222: PPUSH
69223: PPUSH
69224: PPUSH
69225: PPUSH
// if not turrets or not factories then
69226: LD_VAR 0 1
69230: NOT
69231: PUSH
69232: LD_VAR 0 2
69236: NOT
69237: OR
69238: IFFALSE 69242
// exit ;
69240: GO 69549
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69242: LD_ADDR_VAR 0 10
69246: PUSH
69247: LD_INT 5
69249: PUSH
69250: LD_INT 6
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 24
69284: PUSH
69285: LD_INT 25
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 23
69294: PUSH
69295: LD_INT 27
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 42
69308: PUSH
69309: LD_INT 43
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 44
69318: PUSH
69319: LD_INT 46
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 45
69328: PUSH
69329: LD_INT 47
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: ST_TO_ADDR
// result := [ ] ;
69346: LD_ADDR_VAR 0 3
69350: PUSH
69351: EMPTY
69352: ST_TO_ADDR
// for i in turrets do
69353: LD_ADDR_VAR 0 4
69357: PUSH
69358: LD_VAR 0 1
69362: PUSH
69363: FOR_IN
69364: IFFALSE 69547
// begin nat := GetNation ( i ) ;
69366: LD_ADDR_VAR 0 7
69370: PUSH
69371: LD_VAR 0 4
69375: PPUSH
69376: CALL_OW 248
69380: ST_TO_ADDR
// weapon := 0 ;
69381: LD_ADDR_VAR 0 8
69385: PUSH
69386: LD_INT 0
69388: ST_TO_ADDR
// if not nat then
69389: LD_VAR 0 7
69393: NOT
69394: IFFALSE 69398
// continue ;
69396: GO 69363
// for j in list [ nat ] do
69398: LD_ADDR_VAR 0 5
69402: PUSH
69403: LD_VAR 0 10
69407: PUSH
69408: LD_VAR 0 7
69412: ARRAY
69413: PUSH
69414: FOR_IN
69415: IFFALSE 69456
// if GetBWeapon ( i ) = j [ 1 ] then
69417: LD_VAR 0 4
69421: PPUSH
69422: CALL_OW 269
69426: PUSH
69427: LD_VAR 0 5
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: EQUAL
69436: IFFALSE 69454
// begin weapon := j [ 2 ] ;
69438: LD_ADDR_VAR 0 8
69442: PUSH
69443: LD_VAR 0 5
69447: PUSH
69448: LD_INT 2
69450: ARRAY
69451: ST_TO_ADDR
// break ;
69452: GO 69456
// end ;
69454: GO 69414
69456: POP
69457: POP
// if not weapon then
69458: LD_VAR 0 8
69462: NOT
69463: IFFALSE 69467
// continue ;
69465: GO 69363
// for k in factories do
69467: LD_ADDR_VAR 0 6
69471: PUSH
69472: LD_VAR 0 2
69476: PUSH
69477: FOR_IN
69478: IFFALSE 69543
// begin weapons := AvailableWeaponList ( k ) ;
69480: LD_ADDR_VAR 0 9
69484: PUSH
69485: LD_VAR 0 6
69489: PPUSH
69490: CALL_OW 478
69494: ST_TO_ADDR
// if not weapons then
69495: LD_VAR 0 9
69499: NOT
69500: IFFALSE 69504
// continue ;
69502: GO 69477
// if weapon in weapons then
69504: LD_VAR 0 8
69508: PUSH
69509: LD_VAR 0 9
69513: IN
69514: IFFALSE 69541
// begin result := [ i , weapon ] ;
69516: LD_ADDR_VAR 0 3
69520: PUSH
69521: LD_VAR 0 4
69525: PUSH
69526: LD_VAR 0 8
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: ST_TO_ADDR
// exit ;
69535: POP
69536: POP
69537: POP
69538: POP
69539: GO 69549
// end ; end ;
69541: GO 69477
69543: POP
69544: POP
// end ;
69545: GO 69363
69547: POP
69548: POP
// end ;
69549: LD_VAR 0 3
69553: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69554: LD_INT 0
69556: PPUSH
// if not side or side > 8 then
69557: LD_VAR 0 3
69561: NOT
69562: PUSH
69563: LD_VAR 0 3
69567: PUSH
69568: LD_INT 8
69570: GREATER
69571: OR
69572: IFFALSE 69576
// exit ;
69574: GO 69635
// if not range then
69576: LD_VAR 0 4
69580: NOT
69581: IFFALSE 69592
// range := - 12 ;
69583: LD_ADDR_VAR 0 4
69587: PUSH
69588: LD_INT 12
69590: NEG
69591: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_VAR 0 2
69601: PPUSH
69602: LD_VAR 0 3
69606: PPUSH
69607: LD_VAR 0 4
69611: PPUSH
69612: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69616: LD_VAR 0 1
69620: PPUSH
69621: LD_VAR 0 2
69625: PPUSH
69626: LD_VAR 0 3
69630: PPUSH
69631: CALL_OW 331
// end ;
69635: LD_VAR 0 5
69639: RET
// export function Video ( mode ) ; begin
69640: LD_INT 0
69642: PPUSH
// ingame_video = mode ;
69643: LD_ADDR_OWVAR 52
69647: PUSH
69648: LD_VAR 0 1
69652: ST_TO_ADDR
// interface_hidden = mode ;
69653: LD_ADDR_OWVAR 54
69657: PUSH
69658: LD_VAR 0 1
69662: ST_TO_ADDR
// end ;
69663: LD_VAR 0 2
69667: RET
// export function Join ( array , element ) ; begin
69668: LD_INT 0
69670: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69671: LD_ADDR_VAR 0 3
69675: PUSH
69676: LD_VAR 0 1
69680: PPUSH
69681: LD_VAR 0 1
69685: PUSH
69686: LD_INT 1
69688: PLUS
69689: PPUSH
69690: LD_VAR 0 2
69694: PPUSH
69695: CALL_OW 1
69699: ST_TO_ADDR
// end ;
69700: LD_VAR 0 3
69704: RET
// export function JoinUnion ( array , element ) ; begin
69705: LD_INT 0
69707: PPUSH
// result := array union element ;
69708: LD_ADDR_VAR 0 3
69712: PUSH
69713: LD_VAR 0 1
69717: PUSH
69718: LD_VAR 0 2
69722: UNION
69723: ST_TO_ADDR
// end ;
69724: LD_VAR 0 3
69728: RET
// export function GetBehemoths ( side ) ; begin
69729: LD_INT 0
69731: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69732: LD_ADDR_VAR 0 2
69736: PUSH
69737: LD_INT 22
69739: PUSH
69740: LD_VAR 0 1
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 31
69751: PUSH
69752: LD_INT 25
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PPUSH
69763: CALL_OW 69
69767: ST_TO_ADDR
// end ;
69768: LD_VAR 0 2
69772: RET
// export function Shuffle ( array ) ; var i , index ; begin
69773: LD_INT 0
69775: PPUSH
69776: PPUSH
69777: PPUSH
// result := [ ] ;
69778: LD_ADDR_VAR 0 2
69782: PUSH
69783: EMPTY
69784: ST_TO_ADDR
// if not array then
69785: LD_VAR 0 1
69789: NOT
69790: IFFALSE 69794
// exit ;
69792: GO 69893
// Randomize ;
69794: CALL_OW 10
// for i = array downto 1 do
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: DOUBLE
69804: LD_VAR 0 1
69808: INC
69809: ST_TO_ADDR
69810: LD_INT 1
69812: PUSH
69813: FOR_DOWNTO
69814: IFFALSE 69891
// begin index := rand ( 1 , array ) ;
69816: LD_ADDR_VAR 0 4
69820: PUSH
69821: LD_INT 1
69823: PPUSH
69824: LD_VAR 0 1
69828: PPUSH
69829: CALL_OW 12
69833: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69834: LD_ADDR_VAR 0 2
69838: PUSH
69839: LD_VAR 0 2
69843: PPUSH
69844: LD_VAR 0 2
69848: PUSH
69849: LD_INT 1
69851: PLUS
69852: PPUSH
69853: LD_VAR 0 1
69857: PUSH
69858: LD_VAR 0 4
69862: ARRAY
69863: PPUSH
69864: CALL_OW 2
69868: ST_TO_ADDR
// array := Delete ( array , index ) ;
69869: LD_ADDR_VAR 0 1
69873: PUSH
69874: LD_VAR 0 1
69878: PPUSH
69879: LD_VAR 0 4
69883: PPUSH
69884: CALL_OW 3
69888: ST_TO_ADDR
// end ;
69889: GO 69813
69891: POP
69892: POP
// end ;
69893: LD_VAR 0 2
69897: RET
// export function GetBaseMaterials ( base ) ; begin
69898: LD_INT 0
69900: PPUSH
// result := [ 0 , 0 , 0 ] ;
69901: LD_ADDR_VAR 0 2
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: ST_TO_ADDR
// if not base then
69920: LD_VAR 0 1
69924: NOT
69925: IFFALSE 69929
// exit ;
69927: GO 69978
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_VAR 0 1
69938: PPUSH
69939: LD_INT 1
69941: PPUSH
69942: CALL_OW 275
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: LD_INT 2
69954: PPUSH
69955: CALL_OW 275
69959: PUSH
69960: LD_VAR 0 1
69964: PPUSH
69965: LD_INT 3
69967: PPUSH
69968: CALL_OW 275
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: LIST
69977: ST_TO_ADDR
// end ;
69978: LD_VAR 0 2
69982: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69983: LD_INT 0
69985: PPUSH
69986: PPUSH
// result := array ;
69987: LD_ADDR_VAR 0 3
69991: PUSH
69992: LD_VAR 0 1
69996: ST_TO_ADDR
// if size > 0 then
69997: LD_VAR 0 2
70001: PUSH
70002: LD_INT 0
70004: GREATER
70005: IFFALSE 70051
// for i := array downto size do
70007: LD_ADDR_VAR 0 4
70011: PUSH
70012: DOUBLE
70013: LD_VAR 0 1
70017: INC
70018: ST_TO_ADDR
70019: LD_VAR 0 2
70023: PUSH
70024: FOR_DOWNTO
70025: IFFALSE 70049
// result := Delete ( result , result ) ;
70027: LD_ADDR_VAR 0 3
70031: PUSH
70032: LD_VAR 0 3
70036: PPUSH
70037: LD_VAR 0 3
70041: PPUSH
70042: CALL_OW 3
70046: ST_TO_ADDR
70047: GO 70024
70049: POP
70050: POP
// end ;
70051: LD_VAR 0 3
70055: RET
// export function ComExit ( unit ) ; var tmp ; begin
70056: LD_INT 0
70058: PPUSH
70059: PPUSH
// if not IsInUnit ( unit ) then
70060: LD_VAR 0 1
70064: PPUSH
70065: CALL_OW 310
70069: NOT
70070: IFFALSE 70074
// exit ;
70072: GO 70134
// tmp := IsInUnit ( unit ) ;
70074: LD_ADDR_VAR 0 3
70078: PUSH
70079: LD_VAR 0 1
70083: PPUSH
70084: CALL_OW 310
70088: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70089: LD_VAR 0 3
70093: PPUSH
70094: CALL_OW 247
70098: PUSH
70099: LD_INT 2
70101: EQUAL
70102: IFFALSE 70115
// ComExitVehicle ( unit ) else
70104: LD_VAR 0 1
70108: PPUSH
70109: CALL_OW 121
70113: GO 70124
// ComExitBuilding ( unit ) ;
70115: LD_VAR 0 1
70119: PPUSH
70120: CALL_OW 122
// result := tmp ;
70124: LD_ADDR_VAR 0 2
70128: PUSH
70129: LD_VAR 0 3
70133: ST_TO_ADDR
// end ;
70134: LD_VAR 0 2
70138: RET
// export function ComExitAll ( units ) ; var i ; begin
70139: LD_INT 0
70141: PPUSH
70142: PPUSH
// if not units then
70143: LD_VAR 0 1
70147: NOT
70148: IFFALSE 70152
// exit ;
70150: GO 70178
// for i in units do
70152: LD_ADDR_VAR 0 3
70156: PUSH
70157: LD_VAR 0 1
70161: PUSH
70162: FOR_IN
70163: IFFALSE 70176
// ComExit ( i ) ;
70165: LD_VAR 0 3
70169: PPUSH
70170: CALL 70056 0 1
70174: GO 70162
70176: POP
70177: POP
// end ;
70178: LD_VAR 0 2
70182: RET
// export function ResetHc ; begin
70183: LD_INT 0
70185: PPUSH
// InitHc ;
70186: CALL_OW 19
// hc_importance := 0 ;
70190: LD_ADDR_OWVAR 32
70194: PUSH
70195: LD_INT 0
70197: ST_TO_ADDR
// end ;
70198: LD_VAR 0 1
70202: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70203: LD_INT 0
70205: PPUSH
70206: PPUSH
70207: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70208: LD_ADDR_VAR 0 6
70212: PUSH
70213: LD_VAR 0 1
70217: PUSH
70218: LD_VAR 0 3
70222: PLUS
70223: PUSH
70224: LD_INT 2
70226: DIV
70227: ST_TO_ADDR
// if _x < 0 then
70228: LD_VAR 0 6
70232: PUSH
70233: LD_INT 0
70235: LESS
70236: IFFALSE 70253
// _x := _x * - 1 ;
70238: LD_ADDR_VAR 0 6
70242: PUSH
70243: LD_VAR 0 6
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: MUL
70252: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70253: LD_ADDR_VAR 0 7
70257: PUSH
70258: LD_VAR 0 2
70262: PUSH
70263: LD_VAR 0 4
70267: PLUS
70268: PUSH
70269: LD_INT 2
70271: DIV
70272: ST_TO_ADDR
// if _y < 0 then
70273: LD_VAR 0 7
70277: PUSH
70278: LD_INT 0
70280: LESS
70281: IFFALSE 70298
// _y := _y * - 1 ;
70283: LD_ADDR_VAR 0 7
70287: PUSH
70288: LD_VAR 0 7
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: MUL
70297: ST_TO_ADDR
// result := [ _x , _y ] ;
70298: LD_ADDR_VAR 0 5
70302: PUSH
70303: LD_VAR 0 6
70307: PUSH
70308: LD_VAR 0 7
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: ST_TO_ADDR
// end ;
70317: LD_VAR 0 5
70321: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70322: LD_INT 0
70324: PPUSH
70325: PPUSH
70326: PPUSH
70327: PPUSH
// task := GetTaskList ( unit ) ;
70328: LD_ADDR_VAR 0 7
70332: PUSH
70333: LD_VAR 0 1
70337: PPUSH
70338: CALL_OW 437
70342: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70343: LD_VAR 0 7
70347: NOT
70348: PUSH
70349: LD_VAR 0 1
70353: PPUSH
70354: LD_VAR 0 2
70358: PPUSH
70359: CALL_OW 308
70363: NOT
70364: AND
70365: IFFALSE 70369
// exit ;
70367: GO 70487
// if IsInArea ( unit , area ) then
70369: LD_VAR 0 1
70373: PPUSH
70374: LD_VAR 0 2
70378: PPUSH
70379: CALL_OW 308
70383: IFFALSE 70401
// begin ComMoveToArea ( unit , goAway ) ;
70385: LD_VAR 0 1
70389: PPUSH
70390: LD_VAR 0 3
70394: PPUSH
70395: CALL_OW 113
// exit ;
70399: GO 70487
// end ; if task [ 1 ] [ 1 ] <> M then
70401: LD_VAR 0 7
70405: PUSH
70406: LD_INT 1
70408: ARRAY
70409: PUSH
70410: LD_INT 1
70412: ARRAY
70413: PUSH
70414: LD_STRING M
70416: NONEQUAL
70417: IFFALSE 70421
// exit ;
70419: GO 70487
// x := task [ 1 ] [ 2 ] ;
70421: LD_ADDR_VAR 0 5
70425: PUSH
70426: LD_VAR 0 7
70430: PUSH
70431: LD_INT 1
70433: ARRAY
70434: PUSH
70435: LD_INT 2
70437: ARRAY
70438: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70439: LD_ADDR_VAR 0 6
70443: PUSH
70444: LD_VAR 0 7
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PUSH
70453: LD_INT 3
70455: ARRAY
70456: ST_TO_ADDR
// if InArea ( x , y , area ) then
70457: LD_VAR 0 5
70461: PPUSH
70462: LD_VAR 0 6
70466: PPUSH
70467: LD_VAR 0 2
70471: PPUSH
70472: CALL_OW 309
70476: IFFALSE 70487
// ComStop ( unit ) ;
70478: LD_VAR 0 1
70482: PPUSH
70483: CALL_OW 141
// end ;
70487: LD_VAR 0 4
70491: RET
// export function Abs ( value ) ; begin
70492: LD_INT 0
70494: PPUSH
// result := value ;
70495: LD_ADDR_VAR 0 2
70499: PUSH
70500: LD_VAR 0 1
70504: ST_TO_ADDR
// if value < 0 then
70505: LD_VAR 0 1
70509: PUSH
70510: LD_INT 0
70512: LESS
70513: IFFALSE 70530
// result := value * - 1 ;
70515: LD_ADDR_VAR 0 2
70519: PUSH
70520: LD_VAR 0 1
70524: PUSH
70525: LD_INT 1
70527: NEG
70528: MUL
70529: ST_TO_ADDR
// end ;
70530: LD_VAR 0 2
70534: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70535: LD_INT 0
70537: PPUSH
70538: PPUSH
70539: PPUSH
70540: PPUSH
70541: PPUSH
70542: PPUSH
70543: PPUSH
70544: PPUSH
// if not unit or not building then
70545: LD_VAR 0 1
70549: NOT
70550: PUSH
70551: LD_VAR 0 2
70555: NOT
70556: OR
70557: IFFALSE 70561
// exit ;
70559: GO 70787
// x := GetX ( building ) ;
70561: LD_ADDR_VAR 0 4
70565: PUSH
70566: LD_VAR 0 2
70570: PPUSH
70571: CALL_OW 250
70575: ST_TO_ADDR
// y := GetY ( building ) ;
70576: LD_ADDR_VAR 0 6
70580: PUSH
70581: LD_VAR 0 2
70585: PPUSH
70586: CALL_OW 251
70590: ST_TO_ADDR
// d := GetDir ( building ) ;
70591: LD_ADDR_VAR 0 8
70595: PUSH
70596: LD_VAR 0 2
70600: PPUSH
70601: CALL_OW 254
70605: ST_TO_ADDR
// r := 4 ;
70606: LD_ADDR_VAR 0 9
70610: PUSH
70611: LD_INT 4
70613: ST_TO_ADDR
// for i := 1 to 5 do
70614: LD_ADDR_VAR 0 10
70618: PUSH
70619: DOUBLE
70620: LD_INT 1
70622: DEC
70623: ST_TO_ADDR
70624: LD_INT 5
70626: PUSH
70627: FOR_TO
70628: IFFALSE 70785
// begin _x := ShiftX ( x , d , r + i ) ;
70630: LD_ADDR_VAR 0 5
70634: PUSH
70635: LD_VAR 0 4
70639: PPUSH
70640: LD_VAR 0 8
70644: PPUSH
70645: LD_VAR 0 9
70649: PUSH
70650: LD_VAR 0 10
70654: PLUS
70655: PPUSH
70656: CALL_OW 272
70660: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70661: LD_ADDR_VAR 0 7
70665: PUSH
70666: LD_VAR 0 6
70670: PPUSH
70671: LD_VAR 0 8
70675: PPUSH
70676: LD_VAR 0 9
70680: PUSH
70681: LD_VAR 0 10
70685: PLUS
70686: PPUSH
70687: CALL_OW 273
70691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70692: LD_VAR 0 5
70696: PPUSH
70697: LD_VAR 0 7
70701: PPUSH
70702: CALL_OW 488
70706: PUSH
70707: LD_VAR 0 5
70711: PPUSH
70712: LD_VAR 0 7
70716: PPUSH
70717: CALL_OW 428
70721: PPUSH
70722: CALL_OW 247
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: IN
70737: NOT
70738: AND
70739: IFFALSE 70783
// begin ComMoveXY ( unit , _x , _y ) ;
70741: LD_VAR 0 1
70745: PPUSH
70746: LD_VAR 0 5
70750: PPUSH
70751: LD_VAR 0 7
70755: PPUSH
70756: CALL_OW 111
// result := [ _x , _y ] ;
70760: LD_ADDR_VAR 0 3
70764: PUSH
70765: LD_VAR 0 5
70769: PUSH
70770: LD_VAR 0 7
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: ST_TO_ADDR
// exit ;
70779: POP
70780: POP
70781: GO 70787
// end ; end ;
70783: GO 70627
70785: POP
70786: POP
// end ;
70787: LD_VAR 0 3
70791: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70792: LD_INT 0
70794: PPUSH
70795: PPUSH
70796: PPUSH
// result := 0 ;
70797: LD_ADDR_VAR 0 3
70801: PUSH
70802: LD_INT 0
70804: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70805: LD_VAR 0 1
70809: PUSH
70810: LD_INT 0
70812: LESS
70813: PUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_INT 8
70821: GREATER
70822: OR
70823: PUSH
70824: LD_VAR 0 2
70828: PUSH
70829: LD_INT 0
70831: LESS
70832: OR
70833: PUSH
70834: LD_VAR 0 2
70838: PUSH
70839: LD_INT 8
70841: GREATER
70842: OR
70843: IFFALSE 70847
// exit ;
70845: GO 70922
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70847: LD_ADDR_VAR 0 4
70851: PUSH
70852: LD_INT 22
70854: PUSH
70855: LD_VAR 0 2
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PPUSH
70864: CALL_OW 69
70868: PUSH
70869: FOR_IN
70870: IFFALSE 70920
// begin un := UnitShoot ( i ) ;
70872: LD_ADDR_VAR 0 5
70876: PUSH
70877: LD_VAR 0 4
70881: PPUSH
70882: CALL_OW 504
70886: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70887: LD_VAR 0 5
70891: PPUSH
70892: CALL_OW 255
70896: PUSH
70897: LD_VAR 0 1
70901: EQUAL
70902: IFFALSE 70918
// begin result := un ;
70904: LD_ADDR_VAR 0 3
70908: PUSH
70909: LD_VAR 0 5
70913: ST_TO_ADDR
// exit ;
70914: POP
70915: POP
70916: GO 70922
// end ; end ;
70918: GO 70869
70920: POP
70921: POP
// end ;
70922: LD_VAR 0 3
70926: RET
// export function GetCargoBay ( units ) ; begin
70927: LD_INT 0
70929: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70930: LD_ADDR_VAR 0 2
70934: PUSH
70935: LD_VAR 0 1
70939: PPUSH
70940: LD_INT 2
70942: PUSH
70943: LD_INT 34
70945: PUSH
70946: LD_INT 12
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 34
70955: PUSH
70956: LD_INT 51
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 34
70965: PUSH
70966: LD_INT 32
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 34
70975: PUSH
70976: LD_EXP 131
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: PPUSH
70992: CALL_OW 72
70996: ST_TO_ADDR
// end ;
70997: LD_VAR 0 2
71001: RET
// export function Negate ( value ) ; begin
71002: LD_INT 0
71004: PPUSH
// result := not value ;
71005: LD_ADDR_VAR 0 2
71009: PUSH
71010: LD_VAR 0 1
71014: NOT
71015: ST_TO_ADDR
// end ;
71016: LD_VAR 0 2
71020: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71021: LD_INT 0
71023: PPUSH
71024: PPUSH
71025: PPUSH
71026: PPUSH
71027: PPUSH
71028: PPUSH
71029: PPUSH
71030: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71031: LD_VAR 0 1
71035: PPUSH
71036: LD_VAR 0 2
71040: PPUSH
71041: CALL_OW 488
71045: NOT
71046: PUSH
71047: LD_VAR 0 3
71051: PPUSH
71052: LD_VAR 0 4
71056: PPUSH
71057: CALL_OW 488
71061: NOT
71062: OR
71063: IFFALSE 71076
// begin result := - 1 ;
71065: LD_ADDR_VAR 0 5
71069: PUSH
71070: LD_INT 1
71072: NEG
71073: ST_TO_ADDR
// exit ;
71074: GO 71311
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71076: LD_ADDR_VAR 0 12
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: LD_VAR 0 2
71090: PPUSH
71091: LD_VAR 0 3
71095: PPUSH
71096: LD_VAR 0 4
71100: PPUSH
71101: CALL 70203 0 4
71105: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71106: LD_ADDR_VAR 0 11
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: LD_VAR 0 2
71120: PPUSH
71121: LD_VAR 0 12
71125: PUSH
71126: LD_INT 1
71128: ARRAY
71129: PPUSH
71130: LD_VAR 0 12
71134: PUSH
71135: LD_INT 2
71137: ARRAY
71138: PPUSH
71139: CALL_OW 298
71143: ST_TO_ADDR
// distance := 9999 ;
71144: LD_ADDR_VAR 0 10
71148: PUSH
71149: LD_INT 9999
71151: ST_TO_ADDR
// for i := 0 to 5 do
71152: LD_ADDR_VAR 0 6
71156: PUSH
71157: DOUBLE
71158: LD_INT 0
71160: DEC
71161: ST_TO_ADDR
71162: LD_INT 5
71164: PUSH
71165: FOR_TO
71166: IFFALSE 71309
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71168: LD_ADDR_VAR 0 7
71172: PUSH
71173: LD_VAR 0 1
71177: PPUSH
71178: LD_VAR 0 6
71182: PPUSH
71183: LD_VAR 0 11
71187: PPUSH
71188: CALL_OW 272
71192: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71193: LD_ADDR_VAR 0 8
71197: PUSH
71198: LD_VAR 0 2
71202: PPUSH
71203: LD_VAR 0 6
71207: PPUSH
71208: LD_VAR 0 11
71212: PPUSH
71213: CALL_OW 273
71217: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71218: LD_VAR 0 7
71222: PPUSH
71223: LD_VAR 0 8
71227: PPUSH
71228: CALL_OW 488
71232: NOT
71233: IFFALSE 71237
// continue ;
71235: GO 71165
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71237: LD_ADDR_VAR 0 9
71241: PUSH
71242: LD_VAR 0 12
71246: PUSH
71247: LD_INT 1
71249: ARRAY
71250: PPUSH
71251: LD_VAR 0 12
71255: PUSH
71256: LD_INT 2
71258: ARRAY
71259: PPUSH
71260: LD_VAR 0 7
71264: PPUSH
71265: LD_VAR 0 8
71269: PPUSH
71270: CALL_OW 298
71274: ST_TO_ADDR
// if tmp < distance then
71275: LD_VAR 0 9
71279: PUSH
71280: LD_VAR 0 10
71284: LESS
71285: IFFALSE 71307
// begin result := i ;
71287: LD_ADDR_VAR 0 5
71291: PUSH
71292: LD_VAR 0 6
71296: ST_TO_ADDR
// distance := tmp ;
71297: LD_ADDR_VAR 0 10
71301: PUSH
71302: LD_VAR 0 9
71306: ST_TO_ADDR
// end ; end ;
71307: GO 71165
71309: POP
71310: POP
// end ;
71311: LD_VAR 0 5
71315: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71316: LD_INT 0
71318: PPUSH
71319: PPUSH
// if not driver or not IsInUnit ( driver ) then
71320: LD_VAR 0 1
71324: NOT
71325: PUSH
71326: LD_VAR 0 1
71330: PPUSH
71331: CALL_OW 310
71335: NOT
71336: OR
71337: IFFALSE 71341
// exit ;
71339: GO 71431
// vehicle := IsInUnit ( driver ) ;
71341: LD_ADDR_VAR 0 3
71345: PUSH
71346: LD_VAR 0 1
71350: PPUSH
71351: CALL_OW 310
71355: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71356: LD_VAR 0 1
71360: PPUSH
71361: LD_STRING \
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: PUSH
71391: LD_STRING E
71393: PUSH
71394: LD_INT 0
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: LD_VAR 0 3
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 446
// end ;
71431: LD_VAR 0 2
71435: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71436: LD_INT 0
71438: PPUSH
71439: PPUSH
// if not driver or not IsInUnit ( driver ) then
71440: LD_VAR 0 1
71444: NOT
71445: PUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: CALL_OW 310
71455: NOT
71456: OR
71457: IFFALSE 71461
// exit ;
71459: GO 71551
// vehicle := IsInUnit ( driver ) ;
71461: LD_ADDR_VAR 0 3
71465: PUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 310
71475: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71476: LD_VAR 0 1
71480: PPUSH
71481: LD_STRING \
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: PUSH
71511: LD_STRING E
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: LD_INT 0
71519: PUSH
71520: LD_VAR 0 3
71524: PUSH
71525: LD_INT 0
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PPUSH
71547: CALL_OW 447
// end ;
71551: LD_VAR 0 2
71555: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71556: LD_INT 0
71558: PPUSH
71559: PPUSH
71560: PPUSH
// tmp := [ ] ;
71561: LD_ADDR_VAR 0 5
71565: PUSH
71566: EMPTY
71567: ST_TO_ADDR
// for i in units do
71568: LD_ADDR_VAR 0 4
71572: PUSH
71573: LD_VAR 0 1
71577: PUSH
71578: FOR_IN
71579: IFFALSE 71617
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71581: LD_ADDR_VAR 0 5
71585: PUSH
71586: LD_VAR 0 5
71590: PPUSH
71591: LD_VAR 0 5
71595: PUSH
71596: LD_INT 1
71598: PLUS
71599: PPUSH
71600: LD_VAR 0 4
71604: PPUSH
71605: CALL_OW 256
71609: PPUSH
71610: CALL_OW 2
71614: ST_TO_ADDR
71615: GO 71578
71617: POP
71618: POP
// if not tmp then
71619: LD_VAR 0 5
71623: NOT
71624: IFFALSE 71628
// exit ;
71626: GO 71676
// if asc then
71628: LD_VAR 0 2
71632: IFFALSE 71656
// result := SortListByListAsc ( units , tmp ) else
71634: LD_ADDR_VAR 0 3
71638: PUSH
71639: LD_VAR 0 1
71643: PPUSH
71644: LD_VAR 0 5
71648: PPUSH
71649: CALL_OW 76
71653: ST_TO_ADDR
71654: GO 71676
// result := SortListByListDesc ( units , tmp ) ;
71656: LD_ADDR_VAR 0 3
71660: PUSH
71661: LD_VAR 0 1
71665: PPUSH
71666: LD_VAR 0 5
71670: PPUSH
71671: CALL_OW 77
71675: ST_TO_ADDR
// end ;
71676: LD_VAR 0 3
71680: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71681: LD_INT 0
71683: PPUSH
71684: PPUSH
// task := GetTaskList ( mech ) ;
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_VAR 0 1
71694: PPUSH
71695: CALL_OW 437
71699: ST_TO_ADDR
// if not task then
71700: LD_VAR 0 4
71704: NOT
71705: IFFALSE 71709
// exit ;
71707: GO 71751
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71709: LD_ADDR_VAR 0 3
71713: PUSH
71714: LD_VAR 0 4
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_INT 1
71725: ARRAY
71726: PUSH
71727: LD_STRING r
71729: EQUAL
71730: PUSH
71731: LD_VAR 0 4
71735: PUSH
71736: LD_INT 1
71738: ARRAY
71739: PUSH
71740: LD_INT 4
71742: ARRAY
71743: PUSH
71744: LD_VAR 0 2
71748: EQUAL
71749: AND
71750: ST_TO_ADDR
// end ;
71751: LD_VAR 0 3
71755: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71756: LD_INT 0
71758: PPUSH
// SetDir ( unit , d ) ;
71759: LD_VAR 0 1
71763: PPUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71773: LD_VAR 0 1
71777: PPUSH
71778: LD_VAR 0 2
71782: PPUSH
71783: LD_VAR 0 3
71787: PPUSH
71788: LD_VAR 0 5
71792: PPUSH
71793: CALL_OW 48
// end ;
71797: LD_VAR 0 6
71801: RET
// export function ToNaturalNumber ( number ) ; begin
71802: LD_INT 0
71804: PPUSH
// result := number div 1 ;
71805: LD_ADDR_VAR 0 2
71809: PUSH
71810: LD_VAR 0 1
71814: PUSH
71815: LD_INT 1
71817: DIV
71818: ST_TO_ADDR
// if number < 0 then
71819: LD_VAR 0 1
71823: PUSH
71824: LD_INT 0
71826: LESS
71827: IFFALSE 71837
// result := 0 ;
71829: LD_ADDR_VAR 0 2
71833: PUSH
71834: LD_INT 0
71836: ST_TO_ADDR
// end ;
71837: LD_VAR 0 2
71841: RET
// export function SortByClass ( units , class ) ; var un ; begin
71842: LD_INT 0
71844: PPUSH
71845: PPUSH
// if not units or not class then
71846: LD_VAR 0 1
71850: NOT
71851: PUSH
71852: LD_VAR 0 2
71856: NOT
71857: OR
71858: IFFALSE 71862
// exit ;
71860: GO 71957
// result := [ ] ;
71862: LD_ADDR_VAR 0 3
71866: PUSH
71867: EMPTY
71868: ST_TO_ADDR
// for un in units do
71869: LD_ADDR_VAR 0 4
71873: PUSH
71874: LD_VAR 0 1
71878: PUSH
71879: FOR_IN
71880: IFFALSE 71955
// if GetClass ( un ) = class then
71882: LD_VAR 0 4
71886: PPUSH
71887: CALL_OW 257
71891: PUSH
71892: LD_VAR 0 2
71896: EQUAL
71897: IFFALSE 71924
// result := Insert ( result , 1 , un ) else
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_VAR 0 3
71908: PPUSH
71909: LD_INT 1
71911: PPUSH
71912: LD_VAR 0 4
71916: PPUSH
71917: CALL_OW 2
71921: ST_TO_ADDR
71922: GO 71953
// result := Replace ( result , result + 1 , un ) ;
71924: LD_ADDR_VAR 0 3
71928: PUSH
71929: LD_VAR 0 3
71933: PPUSH
71934: LD_VAR 0 3
71938: PUSH
71939: LD_INT 1
71941: PLUS
71942: PPUSH
71943: LD_VAR 0 4
71947: PPUSH
71948: CALL_OW 1
71952: ST_TO_ADDR
71953: GO 71879
71955: POP
71956: POP
// end ;
71957: LD_VAR 0 3
71961: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71962: LD_INT 0
71964: PPUSH
71965: PPUSH
71966: PPUSH
71967: PPUSH
71968: PPUSH
71969: PPUSH
71970: PPUSH
// result := [ ] ;
71971: LD_ADDR_VAR 0 4
71975: PUSH
71976: EMPTY
71977: ST_TO_ADDR
// if x - r < 0 then
71978: LD_VAR 0 1
71982: PUSH
71983: LD_VAR 0 3
71987: MINUS
71988: PUSH
71989: LD_INT 0
71991: LESS
71992: IFFALSE 72004
// min_x := 0 else
71994: LD_ADDR_VAR 0 8
71998: PUSH
71999: LD_INT 0
72001: ST_TO_ADDR
72002: GO 72020
// min_x := x - r ;
72004: LD_ADDR_VAR 0 8
72008: PUSH
72009: LD_VAR 0 1
72013: PUSH
72014: LD_VAR 0 3
72018: MINUS
72019: ST_TO_ADDR
// if y - r < 0 then
72020: LD_VAR 0 2
72024: PUSH
72025: LD_VAR 0 3
72029: MINUS
72030: PUSH
72031: LD_INT 0
72033: LESS
72034: IFFALSE 72046
// min_y := 0 else
72036: LD_ADDR_VAR 0 7
72040: PUSH
72041: LD_INT 0
72043: ST_TO_ADDR
72044: GO 72062
// min_y := y - r ;
72046: LD_ADDR_VAR 0 7
72050: PUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_VAR 0 3
72060: MINUS
72061: ST_TO_ADDR
// max_x := x + r ;
72062: LD_ADDR_VAR 0 9
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_VAR 0 3
72076: PLUS
72077: ST_TO_ADDR
// max_y := y + r ;
72078: LD_ADDR_VAR 0 10
72082: PUSH
72083: LD_VAR 0 2
72087: PUSH
72088: LD_VAR 0 3
72092: PLUS
72093: ST_TO_ADDR
// for _x = min_x to max_x do
72094: LD_ADDR_VAR 0 5
72098: PUSH
72099: DOUBLE
72100: LD_VAR 0 8
72104: DEC
72105: ST_TO_ADDR
72106: LD_VAR 0 9
72110: PUSH
72111: FOR_TO
72112: IFFALSE 72213
// for _y = min_y to max_y do
72114: LD_ADDR_VAR 0 6
72118: PUSH
72119: DOUBLE
72120: LD_VAR 0 7
72124: DEC
72125: ST_TO_ADDR
72126: LD_VAR 0 10
72130: PUSH
72131: FOR_TO
72132: IFFALSE 72209
// begin if not ValidHex ( _x , _y ) then
72134: LD_VAR 0 5
72138: PPUSH
72139: LD_VAR 0 6
72143: PPUSH
72144: CALL_OW 488
72148: NOT
72149: IFFALSE 72153
// continue ;
72151: GO 72131
// if GetResourceTypeXY ( _x , _y ) then
72153: LD_VAR 0 5
72157: PPUSH
72158: LD_VAR 0 6
72162: PPUSH
72163: CALL_OW 283
72167: IFFALSE 72207
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72169: LD_ADDR_VAR 0 4
72173: PUSH
72174: LD_VAR 0 4
72178: PPUSH
72179: LD_VAR 0 4
72183: PUSH
72184: LD_INT 1
72186: PLUS
72187: PPUSH
72188: LD_VAR 0 5
72192: PUSH
72193: LD_VAR 0 6
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PPUSH
72202: CALL_OW 1
72206: ST_TO_ADDR
// end ;
72207: GO 72131
72209: POP
72210: POP
72211: GO 72111
72213: POP
72214: POP
// end ;
72215: LD_VAR 0 4
72219: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72220: LD_INT 0
72222: PPUSH
72223: PPUSH
72224: PPUSH
72225: PPUSH
72226: PPUSH
72227: PPUSH
72228: PPUSH
72229: PPUSH
// if not units then
72230: LD_VAR 0 1
72234: NOT
72235: IFFALSE 72239
// exit ;
72237: GO 72664
// result := UnitFilter ( units , [ f_ok ] ) ;
72239: LD_ADDR_VAR 0 3
72243: PUSH
72244: LD_VAR 0 1
72248: PPUSH
72249: LD_INT 50
72251: PUSH
72252: EMPTY
72253: LIST
72254: PPUSH
72255: CALL_OW 72
72259: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72260: LD_ADDR_VAR 0 8
72264: PUSH
72265: LD_VAR 0 1
72269: PUSH
72270: LD_INT 1
72272: ARRAY
72273: PPUSH
72274: CALL_OW 255
72278: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72279: LD_ADDR_VAR 0 10
72283: PUSH
72284: LD_INT 29
72286: PUSH
72287: LD_EXP 134
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: ST_TO_ADDR
// if not result then
72296: LD_VAR 0 3
72300: NOT
72301: IFFALSE 72305
// exit ;
72303: GO 72664
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72305: LD_ADDR_VAR 0 5
72309: PUSH
72310: LD_INT 81
72312: PUSH
72313: LD_VAR 0 8
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PPUSH
72322: CALL_OW 69
72326: ST_TO_ADDR
// for i in result do
72327: LD_ADDR_VAR 0 4
72331: PUSH
72332: LD_VAR 0 3
72336: PUSH
72337: FOR_IN
72338: IFFALSE 72662
// begin tag := GetTag ( i ) + 1 ;
72340: LD_ADDR_VAR 0 9
72344: PUSH
72345: LD_VAR 0 4
72349: PPUSH
72350: CALL_OW 110
72354: PUSH
72355: LD_INT 1
72357: PLUS
72358: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72359: LD_ADDR_VAR 0 7
72363: PUSH
72364: LD_VAR 0 4
72368: PPUSH
72369: CALL_OW 250
72373: PPUSH
72374: LD_VAR 0 4
72378: PPUSH
72379: CALL_OW 251
72383: PPUSH
72384: LD_INT 6
72386: PPUSH
72387: CALL 71962 0 3
72391: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72392: LD_VAR 0 7
72396: PUSH
72397: LD_VAR 0 4
72401: PPUSH
72402: CALL_OW 264
72406: PUSH
72407: LD_VAR 0 10
72411: IN
72412: NOT
72413: AND
72414: IFFALSE 72453
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72416: LD_VAR 0 4
72420: PPUSH
72421: LD_VAR 0 7
72425: PUSH
72426: LD_INT 1
72428: ARRAY
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PPUSH
72434: LD_VAR 0 7
72438: PUSH
72439: LD_INT 1
72441: ARRAY
72442: PUSH
72443: LD_INT 2
72445: ARRAY
72446: PPUSH
72447: CALL_OW 116
72451: GO 72660
// if path > tag then
72453: LD_VAR 0 2
72457: PUSH
72458: LD_VAR 0 9
72462: GREATER
72463: IFFALSE 72630
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
72465: LD_ADDR_VAR 0 6
72469: PUSH
72470: LD_VAR 0 5
72474: PPUSH
72475: LD_INT 91
72477: PUSH
72478: LD_VAR 0 4
72482: PUSH
72483: LD_INT 12
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: PPUSH
72491: CALL_OW 72
72495: ST_TO_ADDR
// if nearEnemy then
72496: LD_VAR 0 6
72500: IFFALSE 72528
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72502: LD_VAR 0 4
72506: PPUSH
72507: LD_VAR 0 6
72511: PPUSH
72512: LD_VAR 0 4
72516: PPUSH
72517: CALL_OW 74
72521: PPUSH
72522: CALL_OW 115
72526: GO 72628
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72528: LD_VAR 0 4
72532: PPUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_VAR 0 9
72542: ARRAY
72543: PUSH
72544: LD_INT 1
72546: ARRAY
72547: PPUSH
72548: LD_VAR 0 2
72552: PUSH
72553: LD_VAR 0 9
72557: ARRAY
72558: PUSH
72559: LD_INT 2
72561: ARRAY
72562: PPUSH
72563: CALL_OW 297
72567: PUSH
72568: LD_INT 6
72570: GREATER
72571: IFFALSE 72614
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72573: LD_VAR 0 4
72577: PPUSH
72578: LD_VAR 0 2
72582: PUSH
72583: LD_VAR 0 9
72587: ARRAY
72588: PUSH
72589: LD_INT 1
72591: ARRAY
72592: PPUSH
72593: LD_VAR 0 2
72597: PUSH
72598: LD_VAR 0 9
72602: ARRAY
72603: PUSH
72604: LD_INT 2
72606: ARRAY
72607: PPUSH
72608: CALL_OW 114
72612: GO 72628
// SetTag ( i , tag ) ;
72614: LD_VAR 0 4
72618: PPUSH
72619: LD_VAR 0 9
72623: PPUSH
72624: CALL_OW 109
// end else
72628: GO 72660
// if enemy then
72630: LD_VAR 0 5
72634: IFFALSE 72660
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72636: LD_VAR 0 4
72640: PPUSH
72641: LD_VAR 0 5
72645: PPUSH
72646: LD_VAR 0 4
72650: PPUSH
72651: CALL_OW 74
72655: PPUSH
72656: CALL_OW 115
// end ;
72660: GO 72337
72662: POP
72663: POP
// end ;
72664: LD_VAR 0 3
72668: RET
