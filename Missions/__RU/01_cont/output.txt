// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareRussian ;
  24: CALL 11510 0 0
// PrepareAmericans ;
  28: CALL 11083 0 0
// PrepareNature ;
  32: CALL 12212 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 24
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 26
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 27
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 30
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 31
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 32
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 33
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 34
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 35
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 36
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 37
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 38
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 29
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 34
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 34
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 43
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 43
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 43
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 43
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 43
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 43
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 43
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 43
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 43
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 43
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 43
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 43
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1917
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 43
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 43
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1917
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Gnyevko , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PUSH
1612: LD_EXP 51
1616: DIFF
1617: PPUSH
1618: LD_EXP 10
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PPUSH
1627: LD_EXP 10
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PPUSH
1636: CALL_OW 73
1640: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1641: LD_VAR 0 1
1645: PPUSH
1646: LD_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_EXP 10
1659: PUSH
1660: LD_INT 2
1662: ARRAY
1663: PPUSH
1664: CALL_OW 111
// case nearUnit of Burlak :
1668: LD_VAR 0 1
1672: PUSH
1673: LD_EXP 43
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1698
1683: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1684: LD_EXP 43
1688: PPUSH
1689: LD_STRING D3-Bur-2a
1691: PPUSH
1692: CALL_OW 88
1696: GO 1790
1698: LD_EXP 48
1702: DOUBLE
1703: EQUAL
1704: IFTRUE 1708
1706: GO 1723
1708: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1709: LD_EXP 48
1713: PPUSH
1714: LD_STRING D2a-Bel-1
1716: PPUSH
1717: CALL_OW 88
1721: GO 1790
1723: LD_EXP 50
1727: DOUBLE
1728: EQUAL
1729: IFTRUE 1733
1731: GO 1748
1733: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1734: LD_EXP 50
1738: PPUSH
1739: LD_STRING D2a-Kir-1
1741: PPUSH
1742: CALL_OW 88
1746: GO 1790
1748: POP
// if GetSex ( nearUnit ) = sex_male then
1749: LD_VAR 0 1
1753: PPUSH
1754: CALL_OW 258
1758: PUSH
1759: LD_INT 1
1761: EQUAL
1762: IFFALSE 1778
// Say ( nearUnit , D2a-RSol1-1 ) else
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_STRING D2a-RSol1-1
1771: PPUSH
1772: CALL_OW 88
1776: GO 1790
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1778: LD_VAR 0 1
1782: PPUSH
1783: LD_STRING D2a-RFSol1-1
1785: PPUSH
1786: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1790: LD_EXP 51
1794: PPUSH
1795: CALL_OW 255
1799: PUSH
1800: LD_INT 3
1802: EQUAL
1803: PUSH
1804: LD_EXP 51
1808: PPUSH
1809: CALL_OW 302
1813: AND
1814: IFFALSE 1828
// Say ( Gnyevko , D2a-Gny-1 ) ;
1816: LD_EXP 51
1820: PPUSH
1821: LD_STRING D2a-Gny-1
1823: PPUSH
1824: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1828: LD_EXP 9
1832: PUSH
1833: LD_EXP 8
1837: EQUAL
1838: IFFALSE 1852
// Say ( Burlak , D3-Bur-2 ) ;
1840: LD_EXP 43
1844: PPUSH
1845: LD_STRING D3-Bur-2
1847: PPUSH
1848: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1852: LD_EXP 51
1856: PPUSH
1857: CALL_OW 255
1861: PUSH
1862: LD_INT 8
1864: EQUAL
1865: IFFALSE 1917
// begin Say ( Burlak , D12-Bur-1 ) ;
1867: LD_EXP 43
1871: PPUSH
1872: LD_STRING D12-Bur-1
1874: PPUSH
1875: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1879: LD_EXP 48
1883: PPUSH
1884: CALL_OW 255
1888: PUSH
1889: LD_INT 3
1891: EQUAL
1892: PUSH
1893: LD_EXP 48
1897: PPUSH
1898: CALL_OW 302
1902: AND
1903: IFFALSE 1917
// Say ( Belkov , D12-Bel-2 ) ;
1905: LD_EXP 48
1909: PPUSH
1910: LD_STRING D12-Bel-2
1912: PPUSH
1913: CALL_OW 88
// end ; end ; end ;
1917: PPOPN 1
1919: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1920: LD_INT 3
1922: PPUSH
1923: LD_EXP 51
1927: PPUSH
1928: CALL_OW 292
1932: IFFALSE 2470
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1941: LD_EXP 51
1945: PPUSH
1946: LD_EXP 36
1950: PPUSH
1951: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1955: LD_EXP 51
1959: PPUSH
1960: CALL_OW 87
// DialogueOn ;
1964: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1968: LD_ADDR_VAR 0 1
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 21
1985: PUSH
1986: LD_INT 1
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PPUSH
1997: CALL_OW 69
2001: PPUSH
2002: LD_EXP 51
2006: PPUSH
2007: CALL_OW 74
2011: ST_TO_ADDR
// if nearUnit = Burlak then
2012: LD_VAR 0 1
2016: PUSH
2017: LD_EXP 43
2021: EQUAL
2022: IFFALSE 2340
// begin Say ( Burlak , D3-Bur-1 ) ;
2024: LD_EXP 43
2028: PPUSH
2029: LD_STRING D3-Bur-1
2031: PPUSH
2032: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2036: LD_EXP 51
2040: PPUSH
2041: LD_STRING D3-Gny-1
2043: PPUSH
2044: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2048: LD_EXP 43
2052: PPUSH
2053: LD_STRING D3-Bur-2b
2055: PPUSH
2056: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2060: LD_INT 22
2062: PUSH
2063: LD_INT 3
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 21
2072: PUSH
2073: LD_INT 1
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PPUSH
2084: CALL_OW 69
2088: PUSH
2089: LD_INT 1
2091: EQUAL
2092: PUSH
2093: LD_EXP 13
2097: NOT
2098: AND
2099: IFFALSE 2151
// begin Say ( Burlak , D3-Bur-2c ) ;
2101: LD_EXP 43
2105: PPUSH
2106: LD_STRING D3-Bur-2c
2108: PPUSH
2109: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2113: LD_EXP 51
2117: PPUSH
2118: LD_STRING D3-Gny-2
2120: PPUSH
2121: CALL_OW 88
// DialogueOff ;
2125: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2129: LD_EXP 51
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 235
// gnyevkoSaved = true ;
2141: LD_ADDR_EXP 11
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// exit ;
2149: GO 2470
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2151: LD_INT 22
2153: PUSH
2154: LD_INT 3
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 21
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: PUSH
2180: LD_INT 1
2182: GREATER
2183: PUSH
2184: LD_EXP 13
2188: OR
2189: PUSH
2190: LD_EXP 21
2194: NOT
2195: AND
2196: IFFALSE 2248
// begin Say ( Burlak , D3-Bur-2d ) ;
2198: LD_EXP 43
2202: PPUSH
2203: LD_STRING D3-Bur-2d
2205: PPUSH
2206: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2210: LD_EXP 51
2214: PPUSH
2215: LD_STRING D3-Gny-2
2217: PPUSH
2218: CALL_OW 88
// DialogueOff ;
2222: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2226: LD_EXP 51
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: CALL_OW 235
// gnyevkoSaved = true ;
2238: LD_ADDR_EXP 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// exit ;
2246: GO 2470
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2248: LD_INT 22
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 21
2260: PUSH
2261: LD_INT 1
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL_OW 69
2276: PUSH
2277: LD_INT 1
2279: GREATER
2280: PUSH
2281: LD_EXP 21
2285: AND
2286: IFFALSE 2338
// begin Say ( Burlak , D3-Bur-2e ) ;
2288: LD_EXP 43
2292: PPUSH
2293: LD_STRING D3-Bur-2e
2295: PPUSH
2296: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2300: LD_EXP 51
2304: PPUSH
2305: LD_STRING D3-Gny-2
2307: PPUSH
2308: CALL_OW 88
// DialogueOff ;
2312: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2316: LD_EXP 51
2320: PPUSH
2321: LD_INT 3
2323: PPUSH
2324: CALL_OW 235
// gnyevkoSaved = true ;
2328: LD_ADDR_EXP 11
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// exit ;
2336: GO 2470
// end ; end else
2338: GO 2470
// begin if GetSex ( nearUnit ) = sex_male then
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 258
2349: PUSH
2350: LD_INT 1
2352: EQUAL
2353: IFFALSE 2369
// Say ( nearUnit , D3-RSol1-1 ) else
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_STRING D3-RSol1-1
2362: PPUSH
2363: CALL_OW 88
2367: GO 2381
// Say ( nearUnit , D3-RFSol1-1 ) ;
2369: LD_VAR 0 1
2373: PPUSH
2374: LD_STRING D3-RFSol1-1
2376: PPUSH
2377: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2381: LD_EXP 51
2385: PPUSH
2386: LD_STRING D3-Gny-1
2388: PPUSH
2389: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 258
2402: PUSH
2403: LD_INT 1
2405: EQUAL
2406: IFFALSE 2422
// Say ( nearUnit , D3-RSol1-2 ) else
2408: LD_VAR 0 1
2412: PPUSH
2413: LD_STRING D3-RSol1-2
2415: PPUSH
2416: CALL_OW 88
2420: GO 2434
// Say ( nearUnit , D3-RFSol1-2 ) ;
2422: LD_VAR 0 1
2426: PPUSH
2427: LD_STRING D3-RFSol1-2
2429: PPUSH
2430: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2434: LD_EXP 51
2438: PPUSH
2439: LD_STRING D3-Gny-2a
2441: PPUSH
2442: CALL_OW 88
// DialogueOff ;
2446: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2450: LD_EXP 51
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 235
// gnyevkoSaved = true ;
2462: LD_ADDR_EXP 11
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// end ; end ;
2470: PPOPN 2
2472: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2473: LD_EXP 11
2477: NOT
2478: PUSH
2479: LD_EXP 20
2483: NOT
2484: OR
2485: IFFALSE 2680
2487: GO 2489
2489: DISABLE
2490: LD_INT 0
2492: PPUSH
// begin enable ;
2493: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2494: LD_EXP 11
2498: NOT
2499: PUSH
2500: LD_EXP 37
2504: PUSH
2505: LD_INT 70
2507: GREATER
2508: AND
2509: IFFALSE 2587
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2511: LD_ADDR_VAR 0 1
2515: PUSH
2516: LD_INT 22
2518: PUSH
2519: LD_INT 0
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 25
2528: PUSH
2529: LD_INT 12
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2585
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2548: LD_VAR 0 1
2552: PPUSH
2553: LD_EXP 51
2557: PPUSH
2558: CALL_OW 250
2562: PPUSH
2563: LD_EXP 51
2567: PPUSH
2568: CALL_OW 251
2572: PPUSH
2573: LD_INT 10
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL 8195 0 5
2583: GO 2545
2585: POP
2586: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2587: LD_EXP 20
2591: NOT
2592: PUSH
2593: LD_EXP 38
2597: PUSH
2598: LD_INT 70
2600: GREATER
2601: AND
2602: IFFALSE 2680
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2604: LD_ADDR_VAR 0 1
2608: PUSH
2609: LD_INT 22
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 25
2621: PUSH
2622: LD_INT 12
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL_OW 69
2637: PUSH
2638: FOR_IN
2639: IFFALSE 2678
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2641: LD_VAR 0 1
2645: PPUSH
2646: LD_EXP 50
2650: PPUSH
2651: CALL_OW 250
2655: PPUSH
2656: LD_EXP 50
2660: PPUSH
2661: CALL_OW 251
2665: PPUSH
2666: LD_INT 10
2668: PPUSH
2669: LD_INT 0
2671: PPUSH
2672: CALL 8195 0 5
2676: GO 2638
2678: POP
2679: POP
// end ;
2680: PPOPN 1
2682: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2683: LD_EXP 11
2687: NOT
2688: PUSH
2689: LD_EXP 20
2693: NOT
2694: OR
2695: IFFALSE 2774
2697: GO 2699
2699: DISABLE
// begin enable ;
2700: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2701: LD_EXP 11
2705: NOT
2706: PUSH
2707: LD_EXP 37
2711: PUSH
2712: LD_INT 0
2714: GREATER
2715: AND
2716: IFFALSE 2732
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2718: LD_ADDR_EXP 37
2722: PUSH
2723: LD_EXP 37
2727: PUSH
2728: LD_INT 35
2730: MINUS
2731: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2732: LD_EXP 50
2736: PPUSH
2737: CALL_OW 305
2741: PUSH
2742: LD_EXP 20
2746: NOT
2747: AND
2748: PUSH
2749: LD_EXP 38
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: AND
2758: IFFALSE 2774
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2760: LD_ADDR_EXP 38
2764: PUSH
2765: LD_EXP 38
2769: PUSH
2770: LD_INT 35
2772: MINUS
2773: ST_TO_ADDR
// end ;
2774: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2775: LD_INT 3
2777: PPUSH
2778: LD_EXP 44
2782: PPUSH
2783: CALL_OW 292
2787: PUSH
2788: LD_INT 6
2790: PPUSH
2791: LD_EXP 43
2795: PPUSH
2796: CALL_OW 292
2800: OR
2801: PUSH
2802: LD_INT 6
2804: PPUSH
2805: LD_EXP 51
2809: PPUSH
2810: CALL_OW 292
2814: OR
2815: PUSH
2816: LD_EXP 13
2820: NOT
2821: AND
2822: IFFALSE 3729
2824: GO 2826
2826: DISABLE
// begin enable ;
2827: ENABLE
// InGameOn ;
2828: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2832: LD_EXP 44
2836: PPUSH
2837: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2841: LD_EXP 51
2845: PPUSH
2846: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 51
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 200
// DialogueOn ;
2868: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2872: LD_EXP 12
2876: IFFALSE 3128
// begin meetPokryshkin = true ;
2878: LD_ADDR_EXP 13
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2886: LD_INT 6
2888: PPUSH
2889: LD_INT 3
2891: PPUSH
2892: CALL_OW 343
// DialogueOff ;
2896: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2900: LD_EXP 43
2904: PPUSH
2905: LD_EXP 44
2909: PPUSH
2910: CALL_OW 250
2914: PPUSH
2915: LD_EXP 44
2919: PPUSH
2920: CALL_OW 251
2924: PPUSH
2925: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2929: LD_EXP 43
2933: PPUSH
2934: LD_EXP 44
2938: PPUSH
2939: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2943: LD_EXP 44
2947: PPUSH
2948: LD_EXP 43
2952: PPUSH
2953: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2957: LD_EXP 51
2961: PPUSH
2962: LD_STRING D4-Gny-3
2964: PPUSH
2965: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2969: LD_EXP 43
2973: PPUSH
2974: LD_STRING D4-Bur-3
2976: PPUSH
2977: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2981: LD_EXP 44
2985: PPUSH
2986: LD_STRING D4-Pok-4
2988: PPUSH
2989: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2993: LD_EXP 39
2997: PPUSH
2998: LD_INT 18
3000: PPUSH
3001: LD_INT 1
3003: PPUSH
3004: CALL_OW 49
// wait ( 0 0$2 ) ;
3008: LD_INT 70
3010: PPUSH
3011: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3015: LD_EXP 43
3019: PPUSH
3020: LD_STRING D4-Bur-4
3022: PPUSH
3023: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3027: LD_EXP 44
3031: PPUSH
3032: LD_STRING D4-Pok-5
3034: PPUSH
3035: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3039: LD_EXP 39
3043: PPUSH
3044: LD_STRING D4-Sol1-5
3046: PPUSH
3047: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3051: LD_EXP 44
3055: PPUSH
3056: LD_STRING D4-Pok-6
3058: PPUSH
3059: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3063: LD_EXP 44
3067: PPUSH
3068: LD_STRING D4-Pok-6a
3070: PPUSH
3071: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3075: LD_EXP 43
3079: PPUSH
3080: LD_STRING D4-Bur-6
3082: PPUSH
3083: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3087: LD_EXP 44
3091: PPUSH
3092: LD_STRING D4-Pok-7
3094: PPUSH
3095: CALL_OW 88
// DialogueOff ;
3099: CALL_OW 7
// InGameOff ;
3103: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3107: LD_STRING M2
3109: PPUSH
3110: CALL_OW 337
// goToHill = true ;
3114: LD_ADDR_EXP 14
3118: PUSH
3119: LD_INT 1
3121: ST_TO_ADDR
// MoveToHill ;
3122: CALL 10075 0 0
// exit ;
3126: GO 3729
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3128: LD_EXP 43
3132: PUSH
3133: LD_EXP 51
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3146: LD_EXP 44
3150: PPUSH
3151: LD_STRING D4-Pok-1
3153: PPUSH
3154: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3158: LD_EXP 51
3162: PPUSH
3163: CALL_OW 255
3167: PUSH
3168: LD_INT 3
3170: EQUAL
3171: PUSH
3172: LD_EXP 51
3176: PPUSH
3177: CALL_OW 302
3181: AND
3182: IFFALSE 3196
// Say ( Gnyevko , D4-Gny-1 ) ;
3184: LD_EXP 51
3188: PPUSH
3189: LD_STRING D4-Gny-1
3191: PPUSH
3192: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3196: LD_EXP 43
3200: PPUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 6
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: PUSH
3211: LD_INT 21
3213: PUSH
3214: LD_INT 1
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 69
3229: PPUSH
3230: LD_EXP 43
3234: PPUSH
3235: CALL_OW 74
3239: PPUSH
3240: CALL_OW 296
3244: PUSH
3245: LD_INT 8
3247: GREATER
3248: PUSH
3249: LD_EXP 43
3253: PPUSH
3254: LD_EXP 51
3258: PPUSH
3259: CALL_OW 296
3263: PUSH
3264: LD_INT 8
3266: GREATER
3267: AND
3268: PUSH
3269: LD_EXP 51
3273: PPUSH
3274: CALL_OW 255
3278: PUSH
3279: LD_INT 3
3281: EQUAL
3282: AND
3283: PUSH
3284: LD_EXP 51
3288: PPUSH
3289: CALL_OW 302
3293: AND
3294: IFFALSE 3392
// begin ComWalk ( Gnyevko ) ;
3296: LD_EXP 51
3300: PPUSH
3301: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3305: LD_EXP 44
3309: PPUSH
3310: LD_STRING D4-Pok-2
3312: PPUSH
3313: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3317: LD_EXP 51
3321: PPUSH
3322: LD_STRING D4-Gny-2
3324: PPUSH
3325: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3329: LD_EXP 44
3333: PPUSH
3334: LD_STRING D4-Pok-3
3336: PPUSH
3337: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3341: LD_ADDR_EXP 12
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3349: LD_EXP 51
3353: PPUSH
3354: LD_INT 6
3356: PPUSH
3357: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3361: LD_EXP 51
3365: PPUSH
3366: LD_EXP 44
3370: PPUSH
3371: CALL_OW 250
3375: PPUSH
3376: LD_EXP 44
3380: PPUSH
3381: CALL_OW 251
3385: PPUSH
3386: CALL_OW 171
// end else
3390: GO 3721
// begin meetPokryshkin = true ;
3392: LD_ADDR_EXP 13
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3400: LD_INT 6
3402: PPUSH
3403: LD_INT 3
3405: PPUSH
3406: CALL_OW 343
// DialogueOff ;
3410: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3414: LD_EXP 51
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 3
3426: EQUAL
3427: PUSH
3428: LD_EXP 51
3432: PPUSH
3433: CALL_OW 302
3437: AND
3438: IFFALSE 3515
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3440: LD_EXP 43
3444: PUSH
3445: LD_EXP 51
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PPUSH
3454: LD_EXP 44
3458: PPUSH
3459: CALL_OW 250
3463: PPUSH
3464: LD_EXP 44
3468: PPUSH
3469: CALL_OW 251
3473: PPUSH
3474: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3478: LD_EXP 43
3482: PUSH
3483: LD_EXP 51
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: LD_EXP 44
3496: PPUSH
3497: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3501: LD_EXP 51
3505: PPUSH
3506: LD_INT 6
3508: PPUSH
3509: CALL_OW 235
// end else
3513: GO 3558
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3515: LD_EXP 43
3519: PPUSH
3520: LD_EXP 44
3524: PPUSH
3525: CALL_OW 250
3529: PPUSH
3530: LD_EXP 44
3534: PPUSH
3535: CALL_OW 251
3539: PPUSH
3540: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3544: LD_EXP 43
3548: PPUSH
3549: LD_EXP 44
3553: PPUSH
3554: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3558: LD_EXP 44
3562: PPUSH
3563: LD_EXP 43
3567: PPUSH
3568: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3572: LD_EXP 43
3576: PPUSH
3577: LD_STRING D4-Bur-3
3579: PPUSH
3580: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3584: LD_EXP 44
3588: PPUSH
3589: LD_STRING D4-Pok-4
3591: PPUSH
3592: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3596: LD_EXP 39
3600: PPUSH
3601: LD_INT 18
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: CALL_OW 49
// wait ( 0 0$2 ) ;
3611: LD_INT 70
3613: PPUSH
3614: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3618: LD_EXP 43
3622: PPUSH
3623: LD_STRING D4-Bur-4
3625: PPUSH
3626: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3630: LD_EXP 44
3634: PPUSH
3635: LD_STRING D4-Pok-5
3637: PPUSH
3638: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3642: LD_EXP 39
3646: PPUSH
3647: LD_STRING D4-Sol1-5
3649: PPUSH
3650: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3654: LD_EXP 44
3658: PPUSH
3659: LD_STRING D4-Pok-6
3661: PPUSH
3662: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3666: LD_EXP 44
3670: PPUSH
3671: LD_STRING D4-Pok-6a
3673: PPUSH
3674: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3678: LD_EXP 43
3682: PPUSH
3683: LD_STRING D4-Bur-6
3685: PPUSH
3686: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3690: LD_EXP 44
3694: PPUSH
3695: LD_STRING D4-Pok-7
3697: PPUSH
3698: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3702: LD_STRING M2
3704: PPUSH
3705: CALL_OW 337
// goToHill = true ;
3709: LD_ADDR_EXP 14
3713: PUSH
3714: LD_INT 1
3716: ST_TO_ADDR
// MoveToHill ;
3717: CALL 10075 0 0
// end ; DialogueOff ;
3721: CALL_OW 7
// InGameOff ;
3725: CALL_OW 9
// end ;
3729: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3730: LD_EXP 43
3734: PPUSH
3735: LD_EXP 44
3739: PPUSH
3740: CALL_OW 296
3744: PUSH
3745: LD_INT 10
3747: GREATER
3748: PUSH
3749: LD_EXP 14
3753: AND
3754: PUSH
3755: LD_EXP 17
3759: NOT
3760: AND
3761: IFFALSE 3962
3763: GO 3765
3765: DISABLE
3766: LD_INT 0
3768: PPUSH
// begin enable ;
3769: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3770: LD_ADDR_VAR 0 1
3774: PUSH
3775: LD_EXP 44
3779: PUSH
3780: LD_EXP 45
3784: PUSH
3785: LD_EXP 46
3789: PUSH
3790: LD_EXP 47
3794: PUSH
3795: LD_EXP 48
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3807: LD_EXP 51
3811: PPUSH
3812: CALL_OW 255
3816: PUSH
3817: LD_INT 6
3819: EQUAL
3820: PUSH
3821: LD_EXP 11
3825: AND
3826: IFFALSE 3844
// ruSolds = ruSolds ^ Gnyevko ;
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_VAR 0 1
3837: PUSH
3838: LD_EXP 51
3842: ADD
3843: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3853: LD_EXP 43
3857: PPUSH
3858: CALL_OW 87
// DialogueOn ;
3862: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3866: LD_EXP 44
3870: PPUSH
3871: LD_STRING DSplit-Pok-1
3873: PPUSH
3874: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3878: LD_EXP 43
3882: PPUSH
3883: LD_STRING DSplit-Bur-1
3885: PPUSH
3886: CALL_OW 88
// DialogueOff ;
3890: CALL_OW 7
// InGameOn ;
3894: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3898: LD_EXP 43
3902: PPUSH
3903: LD_EXP 44
3907: PPUSH
3908: CALL_OW 250
3912: PPUSH
3913: LD_EXP 44
3917: PPUSH
3918: CALL_OW 251
3922: PPUSH
3923: CALL_OW 111
// wait ( 0 0$1 ) ;
3927: LD_INT 35
3929: PPUSH
3930: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3934: LD_EXP 43
3938: PPUSH
3939: LD_EXP 44
3943: PPUSH
3944: CALL_OW 296
3948: PUSH
3949: LD_INT 6
3951: LESS
3952: IFFALSE 3898
// InGameOff ;
3954: CALL_OW 9
// MoveToHill ;
3958: CALL 10075 0 0
// end ;
3962: PPOPN 1
3964: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3965: LD_INT 0
3967: PPUSH
3968: PPUSH
// traitor = true ;
3969: LD_ADDR_EXP 17
3973: PUSH
3974: LD_INT 1
3976: ST_TO_ADDR
// DialogueOn ;
3977: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3981: LD_EXP 44
3985: PPUSH
3986: LD_STRING DAttack-Pok-1
3988: PPUSH
3989: CALL_OW 88
// DialogueOff ;
3993: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3997: LD_INT 3
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: LD_INT 2
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4013: LD_INT 22
4015: PUSH
4016: LD_INT 6
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 21
4025: PUSH
4026: LD_INT 1
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 69
4041: PPUSH
4042: LD_EXP 43
4046: PPUSH
4047: CALL_OW 115
// end ;
4051: LD_VAR 0 1
4055: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4056: LD_EXP 44
4060: PPUSH
4061: LD_INT 65
4063: PPUSH
4064: LD_INT 59
4066: PPUSH
4067: CALL_OW 297
4071: PUSH
4072: LD_INT 4
4074: LESS
4075: PUSH
4076: LD_EXP 17
4080: NOT
4081: AND
4082: IFFALSE 4279
4084: GO 4086
4086: DISABLE
// begin InGameOn ;
4087: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4091: LD_INT 55
4093: PPUSH
4094: LD_INT 50
4096: PPUSH
4097: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4101: LD_EXP 43
4105: PPUSH
4106: LD_INT 66
4108: PPUSH
4109: LD_INT 57
4111: PPUSH
4112: CALL_OW 111
// AddComHold ( Burlak ) ;
4116: LD_EXP 43
4120: PPUSH
4121: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4125: LD_EXP 39
4129: PPUSH
4130: LD_INT 59
4132: PPUSH
4133: LD_INT 55
4135: PPUSH
4136: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4140: LD_INT 35
4142: PPUSH
4143: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4147: LD_INT 1
4149: PPUSH
4150: LD_EXP 44
4154: PPUSH
4155: CALL_OW 292
4159: IFFALSE 4140
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4161: LD_EXP 39
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 87
// ComStop ( Charles ) ;
4179: LD_EXP 39
4183: PPUSH
4184: CALL_OW 141
// AddComHold ( Charles ) ;
4188: LD_EXP 39
4192: PPUSH
4193: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4197: LD_EXP 39
4201: PPUSH
4202: LD_EXP 44
4206: PPUSH
4207: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4211: LD_EXP 39
4215: PPUSH
4216: LD_STRING D5-Sol1-1
4218: PPUSH
4219: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4223: LD_EXP 44
4227: PPUSH
4228: LD_STRING D5-Pok-1
4230: PPUSH
4231: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4235: LD_INT 1
4237: PPUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4251: LD_INT 1
4253: PPUSH
4254: LD_INT 3
4256: PPUSH
4257: LD_INT 2
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4267: LD_EXP 39
4271: PPUSH
4272: LD_STRING D5-Sol1-2
4274: PPUSH
4275: CALL_OW 88
// end ;
4279: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4280: LD_EXP 39
4284: PPUSH
4285: CALL_OW 301
4289: PUSH
4290: LD_EXP 14
4294: AND
4295: IFFALSE 4888
4297: GO 4299
4299: DISABLE
4300: LD_INT 0
4302: PPUSH
// begin goToHill = false ;
4303: LD_ADDR_EXP 14
4307: PUSH
4308: LD_INT 0
4310: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4311: LD_INT 22
4313: PUSH
4314: LD_INT 6
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 21
4323: PUSH
4324: LD_INT 1
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PPUSH
4335: CALL_OW 69
4339: PPUSH
4340: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4344: LD_INT 22
4346: PUSH
4347: LD_INT 6
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 21
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PPUSH
4373: CALL_OW 138
// wait ( 0 0$1 ) ;
4377: LD_INT 35
4379: PPUSH
4380: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4384: LD_INT 55
4386: PPUSH
4387: LD_INT 50
4389: PPUSH
4390: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4394: LD_EXP 43
4398: PPUSH
4399: LD_INT 56
4401: PPUSH
4402: LD_INT 56
4404: PPUSH
4405: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4409: LD_INT 22
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 21
4421: PUSH
4422: LD_INT 1
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: PPUSH
4438: LD_INT 56
4440: PPUSH
4441: LD_INT 56
4443: PPUSH
4444: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4448: LD_EXP 43
4452: PPUSH
4453: LD_STRING D5-Bur-2
4455: PPUSH
4456: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4460: LD_EXP 44
4464: PPUSH
4465: LD_STRING D5-Pok-2
4467: PPUSH
4468: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4472: LD_EXP 48
4476: PPUSH
4477: LD_STRING D5-Bel-2
4479: PPUSH
4480: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4484: LD_EXP 44
4488: PPUSH
4489: LD_STRING D5-Pok-3
4491: PPUSH
4492: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4496: LD_EXP 51
4500: PPUSH
4501: CALL_OW 255
4505: PUSH
4506: LD_INT 6
4508: EQUAL
4509: IFFALSE 4523
// Say ( Gnyevko , D5-Gny-3 ) ;
4511: LD_EXP 51
4515: PPUSH
4516: LD_STRING D5-Gny-3
4518: PPUSH
4519: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4523: LD_EXP 43
4527: PPUSH
4528: LD_STRING D5-Bur-3
4530: PPUSH
4531: CALL_OW 88
// interface_hidden = true ;
4535: LD_ADDR_OWVAR 54
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// IngameOff ;
4543: CALL_OW 9
// wait ( 0 0$2 ) ;
4547: LD_INT 70
4549: PPUSH
4550: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4554: LD_EXP 43
4558: PPUSH
4559: LD_INT 85
4561: PPUSH
4562: LD_INT 64
4564: PPUSH
4565: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 6
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 1
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PPUSH
4598: LD_INT 85
4600: PPUSH
4601: LD_INT 64
4603: PPUSH
4604: CALL_OW 111
// interface_hidden = false ;
4608: LD_ADDR_OWVAR 54
4612: PUSH
4613: LD_INT 0
4615: ST_TO_ADDR
// InGameOn ;
4616: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4620: LD_EXP 43
4624: PPUSH
4625: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4629: LD_EXP 44
4633: PPUSH
4634: LD_STRING D6-Pok-1
4636: PPUSH
4637: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4641: LD_EXP 43
4645: PPUSH
4646: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4650: LD_EXP 43
4654: PPUSH
4655: LD_STRING D6-Bur-1
4657: PPUSH
4658: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4662: LD_EXP 43
4666: PPUSH
4667: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4671: LD_EXP 44
4675: PPUSH
4676: LD_STRING D6-Pok-2
4678: PPUSH
4679: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4683: LD_EXP 43
4687: PPUSH
4688: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4692: LD_EXP 48
4696: PPUSH
4697: LD_STRING D6-Bel-2
4699: PPUSH
4700: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4704: LD_EXP 43
4708: PPUSH
4709: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4713: LD_EXP 43
4717: PPUSH
4718: LD_STRING D6-Bur-2
4720: PPUSH
4721: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4725: LD_EXP 43
4729: PPUSH
4730: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4734: LD_EXP 44
4738: PPUSH
4739: LD_STRING D6-Pok-3
4741: PPUSH
4742: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4746: LD_EXP 43
4750: PPUSH
4751: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4755: LD_EXP 52
4759: PPUSH
4760: LD_STRING D6-Kur-3
4762: PPUSH
4763: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4767: LD_EXP 43
4771: PPUSH
4772: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4776: LD_EXP 44
4780: PPUSH
4781: LD_STRING D6-Pok-4
4783: PPUSH
4784: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4788: LD_EXP 43
4792: PPUSH
4793: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4797: LD_EXP 48
4801: PPUSH
4802: LD_STRING D6-Bel-4
4804: PPUSH
4805: CALL_OW 88
// InGameOff ;
4809: CALL_OW 9
// interface_hidden = false ;
4813: LD_ADDR_OWVAR 54
4817: PUSH
4818: LD_INT 0
4820: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4821: LD_EXP 44
4825: PPUSH
4826: LD_INT 23
4828: PPUSH
4829: CALL_OW 115
// wait ( 0 0$5 ) ;
4833: LD_INT 175
4835: PPUSH
4836: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4840: LD_INT 22
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 21
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 69
4868: PPUSH
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4876: LD_INT 1
4878: PPUSH
4879: LD_EXP 51
4883: PPUSH
4884: CALL_OW 471
// end ;
4888: PPOPN 1
4890: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4891: LD_INT 1
4893: PPUSH
4894: LD_EXP 44
4898: PPUSH
4899: CALL_OW 292
4903: PUSH
4904: LD_EXP 39
4908: PPUSH
4909: CALL_OW 301
4913: AND
4914: IFFALSE 4933
4916: GO 4918
4918: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4919: LD_EXP 40
4923: PPUSH
4924: LD_EXP 44
4928: PPUSH
4929: CALL_OW 115
4933: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 23
4939: PPUSH
4940: CALL_OW 292
4944: IFFALSE 4973
4946: GO 4948
4948: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4949: LD_EXP 44
4953: PPUSH
4954: LD_STRING D7-Pok-1
4956: PPUSH
4957: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4961: LD_EXP 40
4965: PPUSH
4966: LD_STRING D7-FSol1-1
4968: PPUSH
4969: CALL_OW 88
// end ;
4973: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4974: LD_EXP 44
4978: PPUSH
4979: CALL_OW 303
4983: IFFALSE 5515
4985: GO 4987
4987: DISABLE
4988: LD_INT 0
4990: PPUSH
4991: PPUSH
4992: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_INT 22
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 50
5020: PUSH
5021: EMPTY
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 69
5033: PUSH
5034: LD_EXP 48
5038: DIFF
5039: ST_TO_ADDR
// DialogueOn ;
5040: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5044: LD_EXP 48
5048: PPUSH
5049: LD_STRING D7a-Bel-1
5051: PPUSH
5052: CALL_OW 88
// DialogueOff ;
5056: CALL_OW 7
// for i := 1 to ruSolds do
5060: LD_ADDR_VAR 0 1
5064: PUSH
5065: DOUBLE
5066: LD_INT 1
5068: DEC
5069: ST_TO_ADDR
5070: LD_VAR 0 3
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5134
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5078: LD_VAR 0 3
5082: PUSH
5083: LD_VAR 0 1
5087: ARRAY
5088: PPUSH
5089: LD_INT 87
5091: PUSH
5092: LD_VAR 0 1
5096: PLUS
5097: PPUSH
5098: LD_INT 63
5100: PUSH
5101: LD_VAR 0 1
5105: PLUS
5106: PPUSH
5107: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5111: LD_VAR 0 3
5115: PUSH
5116: LD_VAR 0 1
5120: ARRAY
5121: PPUSH
5122: LD_INT 89
5124: PPUSH
5125: LD_INT 67
5127: PPUSH
5128: CALL_OW 178
// end ;
5132: GO 5075
5134: POP
5135: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5136: LD_EXP 48
5140: PPUSH
5141: LD_INT 89
5143: PPUSH
5144: LD_INT 67
5146: PPUSH
5147: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5151: LD_EXP 48
5155: PPUSH
5156: LD_INT 88
5158: PPUSH
5159: LD_INT 66
5161: PPUSH
5162: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5166: LD_EXP 45
5170: PPUSH
5171: LD_STRING D7a-RSol1-1
5173: PPUSH
5174: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5178: LD_EXP 40
5182: PPUSH
5183: LD_STRING D7a-FSol1-1
5185: PPUSH
5186: CALL_OW 88
// wait ( 0 0$12 ) ;
5190: LD_INT 420
5192: PPUSH
5193: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5197: LD_EXP 48
5201: PPUSH
5202: LD_STRING D7b-Bel-1
5204: PPUSH
5205: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5209: LD_EXP 46
5213: PPUSH
5214: LD_STRING D7b-FSol1-1
5216: PPUSH
5217: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5221: LD_EXP 48
5225: PPUSH
5226: LD_STRING D7b-Bel-2
5228: PPUSH
5229: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5233: LD_EXP 45
5237: PPUSH
5238: LD_STRING D7b-RSol1-2
5240: PPUSH
5241: CALL_OW 88
// for unit in ruSolds do
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 3
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5489
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5258: LD_EXP 43
5262: PPUSH
5263: LD_VAR 0 2
5267: PPUSH
5268: CALL_OW 296
5272: PUSH
5273: LD_INT 7
5275: LESS
5276: IFFALSE 5487
// begin InGameOn ;
5278: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5282: LD_EXP 48
5286: PUSH
5287: LD_EXP 45
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PPUSH
5296: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5300: LD_EXP 43
5304: PPUSH
5305: LD_INT 88
5307: PPUSH
5308: LD_INT 66
5310: PPUSH
5311: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5315: LD_EXP 48
5319: PPUSH
5320: LD_EXP 43
5324: PPUSH
5325: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5329: LD_EXP 43
5333: PPUSH
5334: LD_INT 90
5336: PPUSH
5337: LD_INT 66
5339: PPUSH
5340: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5344: LD_EXP 43
5348: PPUSH
5349: LD_STRING D7b-Bur-3
5351: PPUSH
5352: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5356: LD_EXP 48
5360: PPUSH
5361: LD_STRING D7b-Bel-4
5363: PPUSH
5364: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5368: LD_EXP 43
5372: PPUSH
5373: LD_STRING D7b-Bur-4
5375: PPUSH
5376: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5380: LD_EXP 48
5384: PPUSH
5385: LD_STRING D7b-Bel-5
5387: PPUSH
5388: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5392: LD_EXP 46
5396: PPUSH
5397: LD_STRING D7b-FSol1-5
5399: PPUSH
5400: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5404: LD_EXP 48
5408: PPUSH
5409: LD_STRING D7b-Bel-6
5411: PPUSH
5412: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5416: LD_EXP 43
5420: PPUSH
5421: LD_STRING D7b-Bur-6
5423: PPUSH
5424: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5428: LD_EXP 45
5432: PPUSH
5433: LD_STRING D7b-RSol1-6
5435: PPUSH
5436: CALL_OW 88
// InGameOff ;
5440: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5444: LD_VAR 0 3
5448: PPUSH
5449: LD_INT 3
5451: PPUSH
5452: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5456: LD_EXP 48
5460: PPUSH
5461: LD_INT 3
5463: PPUSH
5464: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5468: LD_STRING M3
5470: PPUSH
5471: CALL_OW 337
// secondAttack = true ;
5475: LD_ADDR_EXP 16
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// exit ;
5483: POP
5484: POP
5485: GO 5515
// end ;
5487: GO 5255
5489: POP
5490: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5491: LD_EXP 48
5495: PPUSH
5496: LD_STRING D7b-Bel-3
5498: PPUSH
5499: CALL_OW 88
// InGameOff ;
5503: CALL_OW 9
// belkovWaitForGorky = true ;
5507: LD_ADDR_EXP 15
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// end ;
5515: PPOPN 3
5517: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5518: LD_EXP 15
5522: IFFALSE 5832
5524: GO 5526
5526: DISABLE
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
// begin enable ;
5531: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 22
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 21
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: ST_TO_ADDR
// for unit in ruSolds do
5566: LD_ADDR_VAR 0 1
5570: PUSH
5571: LD_VAR 0 2
5575: PUSH
5576: FOR_IN
5577: IFFALSE 5830
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5579: LD_EXP 43
5583: PPUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 296
5593: PUSH
5594: LD_INT 7
5596: LESS
5597: IFFALSE 5828
// begin belkovWaitForGorky = false ;
5599: LD_ADDR_EXP 15
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// InGameOn ;
5607: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5611: LD_EXP 48
5615: PUSH
5616: LD_EXP 45
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5629: LD_EXP 43
5633: PPUSH
5634: LD_INT 88
5636: PPUSH
5637: LD_INT 66
5639: PPUSH
5640: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5644: LD_EXP 48
5648: PPUSH
5649: LD_EXP 43
5653: PPUSH
5654: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5658: LD_EXP 43
5662: PPUSH
5663: LD_INT 90
5665: PPUSH
5666: LD_INT 66
5668: PPUSH
5669: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5673: LD_EXP 48
5677: PPUSH
5678: LD_STRING D7b-Bel-3a
5680: PPUSH
5681: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5685: LD_EXP 43
5689: PPUSH
5690: LD_STRING D7b-Bur-3
5692: PPUSH
5693: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5697: LD_EXP 48
5701: PPUSH
5702: LD_STRING D7b-Bel-4
5704: PPUSH
5705: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5709: LD_EXP 43
5713: PPUSH
5714: LD_STRING D7b-Bur-4
5716: PPUSH
5717: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5721: LD_EXP 48
5725: PPUSH
5726: LD_STRING D7b-Bel-5
5728: PPUSH
5729: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5733: LD_EXP 46
5737: PPUSH
5738: LD_STRING D7b-FSol1-5
5740: PPUSH
5741: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5745: LD_EXP 48
5749: PPUSH
5750: LD_STRING D7b-Bel-6
5752: PPUSH
5753: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5757: LD_EXP 43
5761: PPUSH
5762: LD_STRING D7b-Bur-6
5764: PPUSH
5765: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5769: LD_EXP 45
5773: PPUSH
5774: LD_STRING D7a-RSol1-6
5776: PPUSH
5777: CALL_OW 88
// InGameOff ;
5781: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_INT 3
5792: PPUSH
5793: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5797: LD_EXP 48
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5809: LD_STRING M3
5811: PPUSH
5812: CALL_OW 337
// secondAttack = true ;
5816: LD_ADDR_EXP 16
5820: PUSH
5821: LD_INT 1
5823: ST_TO_ADDR
// exit ;
5824: POP
5825: POP
5826: GO 5832
// end ;
5828: GO 5576
5830: POP
5831: POP
// end ;
5832: PPOPN 2
5834: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5839: LD_EXP 40
5843: PPUSH
5844: LD_STRING D8-FSol1-1
5846: PPUSH
5847: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5851: LD_EXP 41
5855: PPUSH
5856: LD_STRING D8-Glad-1
5858: PPUSH
5859: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5863: LD_EXP 43
5867: PPUSH
5868: LD_STRING D8-Bur-1
5870: PPUSH
5871: CALL_OW 88
// secondAttack = false ;
5875: LD_ADDR_EXP 16
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5883: LD_ADDR_VAR 0 2
5887: PUSH
5888: LD_INT 22
5890: PUSH
5891: LD_INT 3
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 21
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PPUSH
5912: CALL_OW 69
5916: PPUSH
5917: LD_INT 23
5919: PPUSH
5920: CALL_OW 74
5924: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5925: LD_EXP 42
5929: PPUSH
5930: CALL_OW 122
// wait ( 0 0$1 ) ;
5934: LD_INT 35
5936: PPUSH
5937: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5941: LD_EXP 42
5945: PPUSH
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 175
// end ;
5955: LD_VAR 0 1
5959: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5960: LD_INT 23
5962: PPUSH
5963: CALL_OW 256
5967: PUSH
5968: LD_INT 350
5970: LESS
5971: PUSH
5972: LD_INT 23
5974: PPUSH
5975: CALL_OW 256
5979: PUSH
5980: LD_INT 250
5982: GREATER
5983: AND
5984: PUSH
5985: LD_INT 20
5987: PPUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 3
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 21
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 70
6016: PUSH
6017: LD_INT 0
6019: GREATER
6020: AND
6021: PUSH
6022: LD_EXP 23
6026: NOT
6027: AND
6028: IFFALSE 6045
6030: GO 6032
6032: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6033: LD_EXP 40
6037: PPUSH
6038: LD_STRING D8-FSol1-2
6040: PPUSH
6041: CALL_OW 88
6045: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6046: LD_INT 23
6048: PPUSH
6049: CALL_OW 303
6053: PUSH
6054: LD_INT 22
6056: PPUSH
6057: CALL_OW 302
6061: AND
6062: PUSH
6063: LD_EXP 23
6067: NOT
6068: AND
6069: IFFALSE 6139
6071: GO 6073
6073: DISABLE
// begin amRetreat = true ;
6074: LD_ADDR_EXP 23
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6082: LD_EXP 40
6086: PPUSH
6087: LD_STRING D8-FSol1-2a
6089: PPUSH
6090: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6094: LD_EXP 41
6098: PUSH
6099: LD_EXP 40
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PPUSH
6108: LD_INT 21
6110: PPUSH
6111: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6115: LD_EXP 41
6119: PPUSH
6120: LD_STRING D8-Glad-2
6122: PPUSH
6123: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6127: LD_EXP 43
6131: PPUSH
6132: LD_STRING D8-Bur-2
6134: PPUSH
6135: CALL_OW 88
// end ;
6139: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6140: LD_INT 22
6142: PPUSH
6143: CALL_OW 303
6147: PUSH
6148: LD_INT 23
6150: PPUSH
6151: CALL_OW 302
6155: AND
6156: PUSH
6157: LD_EXP 23
6161: NOT
6162: AND
6163: IFFALSE 6233
6165: GO 6167
6167: DISABLE
// begin amRetreat = true ;
6168: LD_ADDR_EXP 23
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6176: LD_EXP 40
6180: PPUSH
6181: LD_STRING D8-FSol1-2a
6183: PPUSH
6184: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6188: LD_EXP 41
6192: PUSH
6193: LD_EXP 40
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PPUSH
6202: LD_INT 21
6204: PPUSH
6205: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6209: LD_EXP 41
6213: PPUSH
6214: LD_STRING D8-Glad-2
6216: PPUSH
6217: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6221: LD_EXP 43
6225: PPUSH
6226: LD_STRING D8-Bur-2
6228: PPUSH
6229: CALL_OW 88
// end ;
6233: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6234: LD_INT 23
6236: PPUSH
6237: CALL_OW 256
6241: PUSH
6242: LD_INT 500
6244: LESS
6245: PUSH
6246: LD_OWVAR 67
6250: PUSH
6251: LD_INT 3
6253: EQUAL
6254: AND
6255: PUSH
6256: LD_EXP 23
6260: NOT
6261: AND
6262: IFFALSE 6332
6264: GO 6266
6266: DISABLE
// begin amRetreat = true ;
6267: LD_ADDR_EXP 23
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6275: LD_EXP 40
6279: PPUSH
6280: LD_STRING D8-FSol1-2a
6282: PPUSH
6283: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6287: LD_EXP 41
6291: PUSH
6292: LD_EXP 40
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: LD_INT 21
6303: PPUSH
6304: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6308: LD_EXP 41
6312: PPUSH
6313: LD_STRING D8-Glad-2
6315: PPUSH
6316: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6320: LD_EXP 43
6324: PPUSH
6325: LD_STRING D8-Bur-2
6327: PPUSH
6328: CALL_OW 88
// end ;
6332: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6333: LD_INT 22
6335: PUSH
6336: LD_INT 1
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: LD_INT 21
6345: PUSH
6346: LD_INT 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 50
6355: PUSH
6356: EMPTY
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: PPUSH
6364: CALL_OW 69
6368: PUSH
6369: LD_INT 0
6371: GREATER
6372: IFFALSE 6500
6374: GO 6376
6376: DISABLE
6377: LD_INT 0
6379: PPUSH
// begin enable ;
6380: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_INT 21
6388: PPUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 21
6401: PUSH
6402: LD_INT 1
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 70
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6498
// begin if unit = Gladstone then
6421: LD_VAR 0 1
6425: PUSH
6426: LD_EXP 41
6430: EQUAL
6431: IFFALSE 6461
// begin gladstoneEscape = true ;
6433: LD_ADDR_EXP 18
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6441: LD_EXP 41
6445: PPUSH
6446: LD_EXP 27
6450: PUSH
6451: LD_STRING Gladstone
6453: STR
6454: PPUSH
6455: CALL_OW 38
// end else
6459: GO 6487
// begin JohannaEscape = true ;
6461: LD_ADDR_EXP 19
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6469: LD_EXP 40
6473: PPUSH
6474: LD_EXP 27
6478: PUSH
6479: LD_STRING Johanna
6481: STR
6482: PPUSH
6483: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 64
// end ;
6496: GO 6418
6498: POP
6499: POP
// end ;
6500: PPOPN 1
6502: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6503: LD_EXP 41
6507: PPUSH
6508: CALL_OW 301
6512: PUSH
6513: LD_EXP 40
6517: PPUSH
6518: CALL_OW 301
6522: AND
6523: IFFALSE 6540
6525: GO 6527
6527: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6528: LD_EXP 43
6532: PPUSH
6533: LD_STRING D9-Bur-1
6535: PPUSH
6536: CALL_OW 88
6540: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6541: LD_EXP 40
6545: PPUSH
6546: CALL_OW 301
6550: PUSH
6551: LD_EXP 18
6555: AND
6556: PUSH
6557: LD_EXP 19
6561: NOT
6562: AND
6563: IFFALSE 6580
6565: GO 6567
6567: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6568: LD_EXP 43
6572: PPUSH
6573: LD_STRING D9-Bur-1a
6575: PPUSH
6576: CALL_OW 88
6580: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6581: LD_EXP 41
6585: PPUSH
6586: CALL_OW 301
6590: PUSH
6591: LD_EXP 18
6595: NOT
6596: AND
6597: PUSH
6598: LD_EXP 19
6602: AND
6603: IFFALSE 6620
6605: GO 6607
6607: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6608: LD_EXP 43
6612: PPUSH
6613: LD_STRING D9-Bur-1b
6615: PPUSH
6616: CALL_OW 88
6620: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6621: LD_EXP 18
6625: PUSH
6626: LD_EXP 19
6630: AND
6631: IFFALSE 6648
6633: GO 6635
6635: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6636: LD_EXP 43
6640: PPUSH
6641: LD_STRING D9-Bur-1c
6643: PPUSH
6644: CALL_OW 88
6648: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 21
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 50
6671: PUSH
6672: EMPTY
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 69
6684: PUSH
6685: LD_INT 0
6687: EQUAL
6688: IFFALSE 6936
6690: GO 6692
6692: DISABLE
6693: LD_INT 0
6695: PPUSH
6696: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6697: LD_ADDR_VAR 0 1
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 21
6714: PUSH
6715: LD_INT 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 50
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: PUSH
6738: LD_EXP 43
6742: PUSH
6743: LD_EXP 51
6747: PUSH
6748: LD_EXP 48
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: DIFF
6758: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_INT 26
6771: PUSH
6772: LD_INT 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PPUSH
6779: CALL_OW 72
6783: ST_TO_ADDR
// DialogueOn ;
6784: CALL_OW 6
// if IsOK ( Belkov ) then
6788: LD_EXP 48
6792: PPUSH
6793: CALL_OW 302
6797: IFFALSE 6811
// Say ( Belkov , D10-Bel-1 ) ;
6799: LD_EXP 48
6803: PPUSH
6804: LD_STRING D10-Bel-1
6806: PPUSH
6807: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: GREATER
6819: PUSH
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 0
6827: GREATER
6828: PUSH
6829: LD_EXP 48
6833: PPUSH
6834: CALL_OW 302
6838: OR
6839: AND
6840: IFFALSE 6907
// begin Say ( Burlak , D10-Bur-1 ) ;
6842: LD_EXP 43
6846: PPUSH
6847: LD_STRING D10-Bur-1
6849: PPUSH
6850: CALL_OW 88
// if IsOK ( Belkov ) then
6854: LD_EXP 48
6858: PPUSH
6859: CALL_OW 302
6863: IFFALSE 6879
// Say ( Belkov , D10-Bel-1a ) else
6865: LD_EXP 48
6869: PPUSH
6870: LD_STRING D10-Bel-1a
6872: PPUSH
6873: CALL_OW 88
6877: GO 6895
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6879: LD_VAR 0 2
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_STRING D10-RSol1-1
6890: PPUSH
6891: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6895: LD_EXP 43
6899: PPUSH
6900: LD_STRING D10-Bur-2
6902: PPUSH
6903: CALL_OW 88
// end ; DialogueOff ;
6907: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6911: LD_STRING M4a
6913: PPUSH
6914: CALL_OW 337
// evacuationAvailable = true ;
6918: LD_ADDR_EXP 21
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6926: LD_INT 1
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 424
// end ;
6936: PPOPN 2
6938: END
// every 0 0$15 trigger evacuationAvailable and GetSide ( Kirilenkova ) = 6 do var randomSold ;
6939: LD_EXP 21
6943: PUSH
6944: LD_EXP 50
6948: PPUSH
6949: CALL_OW 255
6953: PUSH
6954: LD_INT 6
6956: EQUAL
6957: AND
6958: IFFALSE 7497
6960: GO 6962
6962: DISABLE
6963: LD_INT 0
6965: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6966: LD_EXP 50
6970: PPUSH
6971: LD_INT 22
6973: PPUSH
6974: LD_INT 1
6976: PPUSH
6977: CALL_OW 49
// wait ( 0 0$3 ) ;
6981: LD_INT 105
6983: PPUSH
6984: CALL_OW 67
// DialogueOn ;
6988: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6992: LD_EXP 50
6996: PPUSH
6997: LD_STRING D11b-Kir-1
6999: PPUSH
7000: CALL_OW 94
// if IsOK ( Belkov ) then
7004: LD_EXP 48
7008: PPUSH
7009: CALL_OW 302
7013: IFFALSE 7041
// begin Say ( Belkov , D11b-Bel-1 ) ;
7015: LD_EXP 48
7019: PPUSH
7020: LD_STRING D11b-Bel-1
7022: PPUSH
7023: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7027: LD_EXP 48
7031: PPUSH
7032: LD_STRING D11b-Bel-1a
7034: PPUSH
7035: CALL_OW 94
// end else
7039: GO 7096
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7041: LD_ADDR_VAR 0 1
7045: PUSH
7046: LD_INT 22
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 21
7058: PUSH
7059: LD_INT 1
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 50
7068: PUSH
7069: EMPTY
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: PPUSH
7077: CALL_OW 69
7081: PPUSH
7082: LD_STRING D11b-RSol1-1
7084: PPUSH
7085: LD_STRING D11b-RFSol1-1
7087: PPUSH
7088: LD_INT 0
7090: PPUSH
7091: CALL 7862 0 4
7095: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7096: LD_INT 24
7098: PPUSH
7099: LD_INT 22
7101: PUSH
7102: LD_INT 0
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 12
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 70
7127: PUSH
7128: LD_INT 0
7130: GREATER
7131: IFFALSE 7147
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7133: LD_EXP 50
7137: PPUSH
7138: LD_STRING D11b1-Kir-1
7140: PPUSH
7141: CALL_OW 94
7145: GO 7159
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7147: LD_EXP 50
7151: PPUSH
7152: LD_STRING D11b2-Kir-1
7154: PPUSH
7155: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7159: LD_EXP 6
7163: PUSH
7164: LD_INT 24
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 0
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 12
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 70
7195: PUSH
7196: LD_INT 0
7198: GREATER
7199: AND
7200: IFFALSE 7335
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7202: LD_EXP 43
7206: PPUSH
7207: LD_STRING D11b1-Bur-1
7209: PPUSH
7210: CALL_OW 88
// if IsOk ( Belkov ) then
7214: LD_EXP 48
7218: PPUSH
7219: CALL_OW 302
7223: IFFALSE 7239
// Say ( Belkov , D11b2-Bel-1 ) else
7225: LD_EXP 48
7229: PPUSH
7230: LD_STRING D11b2-Bel-1
7232: PPUSH
7233: CALL_OW 88
7237: GO 7280
// begin if GetSex ( randomSold ) = sex_male then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 258
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: IFFALSE 7268
// Say ( randomSold , D11b1-RSol1-1 ) else
7254: LD_VAR 0 1
7258: PPUSH
7259: LD_STRING D11b1-RSol1-1
7261: PPUSH
7262: CALL_OW 88
7266: GO 7280
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7268: LD_VAR 0 1
7272: PPUSH
7273: LD_STRING D11b1-RFSol1-1
7275: PPUSH
7276: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7280: LD_INT 22
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 1
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 50
7302: PUSH
7303: EMPTY
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: PPUSH
7311: CALL_OW 69
7315: PPUSH
7316: LD_STRING D11b1-RSol1-1
7318: PPUSH
7319: LD_STRING D11b1-RFSol1-1
7321: PPUSH
7322: LD_INT 0
7324: PPUSH
7325: CALL 7862 0 4
// DialogueOff ;
7329: CALL_OW 7
// exit ;
7333: GO 7497
// end ; if spotWaterfall then
7335: LD_EXP 7
7339: IFFALSE 7425
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7341: LD_EXP 43
7345: PPUSH
7346: LD_STRING D11b1-Bur-1a
7348: PPUSH
7349: CALL_OW 88
// if IsOk ( Belkov ) then
7353: LD_EXP 48
7357: PPUSH
7358: CALL_OW 302
7362: IFFALSE 7378
// Say ( Belkov , D11b2-Bel-1 ) else
7364: LD_EXP 48
7368: PPUSH
7369: LD_STRING D11b2-Bel-1
7371: PPUSH
7372: CALL_OW 88
7376: GO 7419
// begin if GetSex ( randomSold ) = sex_male then
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 258
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: IFFALSE 7407
// Say ( randomSold , D11b1-RSol1-1 ) else
7393: LD_VAR 0 1
7397: PPUSH
7398: LD_STRING D11b1-RSol1-1
7400: PPUSH
7401: CALL_OW 88
7405: GO 7419
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7407: LD_VAR 0 1
7411: PPUSH
7412: LD_STRING D11b1-RFSol1-1
7414: PPUSH
7415: CALL_OW 88
// end ; DialogueOff ;
7419: CALL_OW 7
// exit ;
7423: GO 7497
// end ; if IsOk ( Belkov ) then
7425: LD_EXP 48
7429: PPUSH
7430: CALL_OW 302
7434: IFFALSE 7450
// Say ( Belkov , D11b1-Bel-1 ) else
7436: LD_EXP 48
7440: PPUSH
7441: LD_STRING D11b1-Bel-1
7443: PPUSH
7444: CALL_OW 88
7448: GO 7491
// begin if GetSex ( randomSold ) = sex_male then
7450: LD_VAR 0 1
7454: PPUSH
7455: CALL_OW 258
7459: PUSH
7460: LD_INT 1
7462: EQUAL
7463: IFFALSE 7479
// Say ( randomSold , D11b1-RSol1-1 ) else
7465: LD_VAR 0 1
7469: PPUSH
7470: LD_STRING D11b1-RSol1-1
7472: PPUSH
7473: CALL_OW 88
7477: GO 7491
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_STRING D11b1-RFSol1-1
7486: PPUSH
7487: CALL_OW 88
// end ; DialogueOff ;
7491: CALL_OW 7
// exit ;
7495: GO 7497
// end ;
7497: PPOPN 1
7499: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7500: LD_INT 3
7502: PPUSH
7503: LD_EXP 50
7507: PPUSH
7508: CALL_OW 292
7512: IFFALSE 7742
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7520: LD_EXP 50
7524: PPUSH
7525: LD_INT 3
7527: PPUSH
7528: CALL_OW 235
// jelenaSaved = true ;
7532: LD_ADDR_EXP 20
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7540: LD_EXP 50
7544: PPUSH
7545: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7549: LD_ADDR_VAR 0 1
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 21
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 50
7576: PUSH
7577: EMPTY
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PPUSH
7590: LD_EXP 50
7594: PPUSH
7595: CALL_OW 74
7599: ST_TO_ADDR
// DialogueOn ;
7600: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7604: LD_EXP 50
7608: PPUSH
7609: LD_STRING D11a-Kir-1
7611: PPUSH
7612: CALL_OW 88
// if nearUnit = Belkov then
7616: LD_VAR 0 1
7620: PUSH
7621: LD_EXP 48
7625: EQUAL
7626: IFFALSE 7666
// begin Say ( Belkov , D11a-Bel-1 ) ;
7628: LD_EXP 48
7632: PPUSH
7633: LD_STRING D11a-Bel-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7640: LD_EXP 50
7644: PPUSH
7645: LD_STRING D11a-Kir-2
7647: PPUSH
7648: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7652: LD_EXP 48
7656: PPUSH
7657: LD_STRING D11a-Bel-2
7659: PPUSH
7660: CALL_OW 88
// end else
7664: GO 7707
// begin if GetSex ( nearUnit ) = sex_male then
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 258
7675: PUSH
7676: LD_INT 1
7678: EQUAL
7679: IFFALSE 7695
// Say ( nearUnit , D11a-RSol1-2 ) else
7681: LD_VAR 0 1
7685: PPUSH
7686: LD_STRING D11a-RSol1-2
7688: PPUSH
7689: CALL_OW 88
7693: GO 7707
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_STRING D11a-RFSol1-2
7702: PPUSH
7703: CALL_OW 88
// end ; DialogueOff ;
7707: CALL_OW 7
// wait ( 0 0$5 ) ;
7711: LD_INT 175
7713: PPUSH
7714: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7718: LD_EXP 50
7722: PPUSH
7723: LD_STRING D11c-Kir-1
7725: PPUSH
7726: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7730: LD_EXP 43
7734: PPUSH
7735: LD_STRING D11c-Bur-1
7737: PPUSH
7738: CALL_OW 88
// end ;
7742: PPOPN 1
7744: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7745: LD_EXP 21
7749: PUSH
7750: LD_INT 1
7752: PPUSH
7753: LD_INT 22
7755: PUSH
7756: LD_INT 3
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 21
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PPUSH
7777: CALL_OW 70
7781: PUSH
7782: LD_INT 0
7784: GREATER
7785: AND
7786: IFFALSE 7798
7788: GO 7790
7790: DISABLE
// begin Query ( QExit1 ) ;
7791: LD_STRING QExit1
7793: PPUSH
7794: CALL_OW 97
// end ; end_of_file
7798: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7799: LD_INT 0
7801: PPUSH
7802: PPUSH
// if exist_mode then
7803: LD_VAR 0 2
7807: IFFALSE 7832
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7809: LD_ADDR_VAR 0 4
7813: PUSH
7814: LD_EXP 28
7818: PUSH
7819: LD_VAR 0 1
7823: STR
7824: PPUSH
7825: CALL_OW 34
7829: ST_TO_ADDR
7830: GO 7847
// unit := NewCharacter ( ident ) ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 25
7846: ST_TO_ADDR
// result := unit ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: LD_VAR 0 4
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7862: LD_INT 0
7864: PPUSH
7865: PPUSH
7866: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7867: LD_ADDR_VAR 0 1
7871: PUSH
7872: LD_VAR 0 1
7876: PUSH
7877: LD_EXP 43
7881: PUSH
7882: LD_EXP 51
7886: PUSH
7887: LD_EXP 48
7891: PUSH
7892: LD_EXP 50
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: DIFF
7903: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7904: LD_ADDR_VAR 0 7
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 1
7916: PPUSH
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 12
7926: ARRAY
7927: ST_TO_ADDR
// if radio then
7928: LD_VAR 0 4
7932: IFFALSE 7981
// begin if GetSex ( speaker ) = sex_male then
7934: LD_VAR 0 7
7938: PPUSH
7939: CALL_OW 258
7943: PUSH
7944: LD_INT 1
7946: EQUAL
7947: IFFALSE 7965
// SayRadio ( speaker , dialogMID ) else
7949: LD_VAR 0 7
7953: PPUSH
7954: LD_VAR 0 2
7958: PPUSH
7959: CALL_OW 94
7963: GO 7979
// SayRadio ( speaker , dialogFID ) ;
7965: LD_VAR 0 7
7969: PPUSH
7970: LD_VAR 0 3
7974: PPUSH
7975: CALL_OW 94
// end else
7979: GO 8026
// begin if GetSex ( speaker ) = sex_male then
7981: LD_VAR 0 7
7985: PPUSH
7986: CALL_OW 258
7990: PUSH
7991: LD_INT 1
7993: EQUAL
7994: IFFALSE 8012
// Say ( speaker , dialogMID ) else
7996: LD_VAR 0 7
8000: PPUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL_OW 88
8010: GO 8026
// Say ( speaker , dialogFID ) ;
8012: LD_VAR 0 7
8016: PPUSH
8017: LD_VAR 0 3
8021: PPUSH
8022: CALL_OW 88
// end ; result := speaker ;
8026: LD_ADDR_VAR 0 5
8030: PUSH
8031: LD_VAR 0 7
8035: ST_TO_ADDR
// end ;
8036: LD_VAR 0 5
8040: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8041: LD_INT 0
8043: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8044: LD_VAR 0 1
8048: PPUSH
8049: CALL_OW 255
8053: PUSH
8054: LD_OWVAR 2
8058: EQUAL
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 302
8069: AND
8070: IFFALSE 8092
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8072: LD_VAR 0 1
8076: PPUSH
8077: LD_EXP 27
8081: PUSH
8082: LD_VAR 0 2
8086: STR
8087: PPUSH
8088: CALL_OW 38
// end ;
8092: LD_VAR 0 3
8096: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
8101: PPUSH
// resultCharactersToSave = [ ] ;
8102: LD_ADDR_VAR 0 5
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// for unit in characters do
8109: LD_ADDR_VAR 0 4
8113: PUSH
8114: LD_VAR 0 1
8118: PUSH
8119: FOR_IN
8120: IFFALSE 8168
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8122: LD_VAR 0 4
8126: PPUSH
8127: CALL_OW 255
8131: PUSH
8132: LD_OWVAR 2
8136: EQUAL
8137: PUSH
8138: LD_VAR 0 4
8142: PPUSH
8143: CALL_OW 302
8147: AND
8148: IFFALSE 8166
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8150: LD_ADDR_VAR 0 5
8154: PUSH
8155: LD_VAR 0 5
8159: PUSH
8160: LD_VAR 0 4
8164: ADD
8165: ST_TO_ADDR
8166: GO 8119
8168: POP
8169: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8170: LD_VAR 0 5
8174: PPUSH
8175: LD_EXP 27
8179: PUSH
8180: LD_VAR 0 2
8184: STR
8185: PPUSH
8186: CALL_OW 38
// end ;
8190: LD_VAR 0 3
8194: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8195: LD_INT 0
8197: PPUSH
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8209: LD_VAR 0 1
8213: PPUSH
8214: CALL_OW 302
8218: NOT
8219: PUSH
8220: LD_VAR 0 4
8224: PUSH
8225: LD_INT 1
8227: EQUAL
8228: OR
8229: PUSH
8230: LD_VAR 0 2
8234: PPUSH
8235: LD_VAR 0 3
8239: PPUSH
8240: CALL_OW 488
8244: NOT
8245: OR
8246: PUSH
8247: LD_VAR 0 1
8251: PPUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: CALL_OW 297
8266: PUSH
8267: LD_VAR 0 4
8271: GREATEREQUAL
8272: OR
8273: PUSH
8274: LD_VAR 0 5
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: LD_INT 0
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: IN
8289: NOT
8290: OR
8291: IFFALSE 8295
// exit ;
8293: GO 9852
// attempts = 0 ;
8295: LD_ADDR_VAR 0 17
8299: PUSH
8300: LD_INT 0
8302: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8303: LD_ADDR_VAR 0 7
8307: PUSH
8308: EMPTY
8309: ST_TO_ADDR
// list_coords = [ ] ;
8310: LD_ADDR_VAR 0 8
8314: PUSH
8315: EMPTY
8316: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_VAR 0 3
8331: PPUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 250
8341: PPUSH
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL_OW 251
8351: PPUSH
8352: CALL 9857 0 4
8356: ST_TO_ADDR
// if attempts = 0 then
8357: LD_VAR 0 17
8361: PUSH
8362: LD_INT 0
8364: EQUAL
8365: IFFALSE 8473
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8367: LD_ADDR_VAR 0 10
8371: PUSH
8372: LD_VAR 0 9
8376: PUSH
8377: LD_VAR 0 9
8381: PUSH
8382: LD_INT 1
8384: PLUS
8385: PUSH
8386: LD_VAR 0 9
8390: PUSH
8391: LD_INT 1
8393: MINUS
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8400: LD_VAR 0 10
8404: PUSH
8405: LD_INT 2
8407: ARRAY
8408: PUSH
8409: LD_INT 6
8411: EQUAL
8412: IFFALSE 8435
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8414: LD_ADDR_VAR 0 10
8418: PUSH
8419: LD_VAR 0 10
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_INT 0
8429: PPUSH
8430: CALL_OW 1
8434: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8435: LD_VAR 0 10
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: NEG
8447: EQUAL
8448: IFFALSE 8471
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8450: LD_ADDR_VAR 0 10
8454: PUSH
8455: LD_VAR 0 10
8459: PPUSH
8460: LD_INT 3
8462: PPUSH
8463: LD_INT 5
8465: PPUSH
8466: CALL_OW 1
8470: ST_TO_ADDR
// end else
8471: GO 8510
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8473: LD_ADDR_VAR 0 10
8477: PUSH
8478: LD_INT 0
8480: PUSH
8481: LD_INT 1
8483: PUSH
8484: LD_INT 2
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: LD_INT 4
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_VAR 0 9
8508: DIFF
8509: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8510: LD_ADDR_VAR 0 14
8514: PUSH
8515: DOUBLE
8516: LD_INT 1
8518: DEC
8519: ST_TO_ADDR
8520: LD_VAR 0 10
8524: PUSH
8525: LD_INT 0
8527: PLUS
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8852
// case dir_list [ c ] of 0 :
8532: LD_VAR 0 10
8536: PUSH
8537: LD_VAR 0 14
8541: ARRAY
8542: PUSH
8543: LD_INT 0
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8592
8551: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8552: LD_ADDR_VAR 0 8
8556: PUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: LD_INT 1
8564: PPUSH
8565: LD_VAR 0 2
8569: PUSH
8570: LD_VAR 0 3
8574: PUSH
8575: LD_VAR 0 4
8579: MINUS
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 2
8589: ST_TO_ADDR
8590: GO 8850
8592: LD_INT 1
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8641
8600: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8601: LD_ADDR_VAR 0 8
8605: PUSH
8606: LD_VAR 0 8
8610: PPUSH
8611: LD_INT 1
8613: PPUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_VAR 0 4
8623: PLUS
8624: PUSH
8625: LD_VAR 0 3
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 2
8638: ST_TO_ADDR
8639: GO 8850
8641: LD_INT 2
8643: DOUBLE
8644: EQUAL
8645: IFTRUE 8649
8647: GO 8696
8649: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8650: LD_ADDR_VAR 0 8
8654: PUSH
8655: LD_VAR 0 8
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: LD_VAR 0 2
8667: PUSH
8668: LD_VAR 0 4
8672: PLUS
8673: PUSH
8674: LD_VAR 0 3
8678: PUSH
8679: LD_VAR 0 4
8683: PLUS
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 2
8693: ST_TO_ADDR
8694: GO 8850
8696: LD_INT 3
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8745
8704: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8705: LD_ADDR_VAR 0 8
8709: PUSH
8710: LD_VAR 0 8
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_VAR 0 2
8722: PUSH
8723: LD_VAR 0 3
8727: PUSH
8728: LD_VAR 0 4
8732: PLUS
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 2
8742: ST_TO_ADDR
8743: GO 8850
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8794
8753: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8754: LD_ADDR_VAR 0 8
8758: PUSH
8759: LD_VAR 0 8
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 2
8771: PUSH
8772: LD_VAR 0 4
8776: MINUS
8777: PUSH
8778: LD_VAR 0 3
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 2
8791: ST_TO_ADDR
8792: GO 8850
8794: LD_INT 5
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8849
8802: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8803: LD_ADDR_VAR 0 8
8807: PUSH
8808: LD_VAR 0 8
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_VAR 0 2
8820: PUSH
8821: LD_VAR 0 4
8825: MINUS
8826: PUSH
8827: LD_VAR 0 3
8831: PUSH
8832: LD_VAR 0 4
8836: MINUS
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 2
8846: ST_TO_ADDR
8847: GO 8850
8849: POP
8850: GO 8529
8852: POP
8853: POP
// if dist < 30 then
8854: LD_VAR 0 4
8858: PUSH
8859: LD_INT 30
8861: LESS
8862: IFFALSE 8874
// c = 1 else
8864: LD_ADDR_VAR 0 14
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
8872: GO 8882
// c = 2 ;
8874: LD_ADDR_VAR 0 14
8878: PUSH
8879: LD_INT 2
8881: ST_TO_ADDR
// b = 1 ;
8882: LD_ADDR_VAR 0 11
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8890: LD_VAR 0 11
8894: PUSH
8895: LD_VAR 0 4
8899: PUSH
8900: LD_INT 1
8902: MINUS
8903: LESSEQUAL
8904: IFFALSE 9332
// begin if 0 in dir_list and 1 in dir_list then
8906: LD_INT 0
8908: PUSH
8909: LD_VAR 0 10
8913: IN
8914: PUSH
8915: LD_INT 1
8917: PUSH
8918: LD_VAR 0 10
8922: IN
8923: AND
8924: IFFALSE 8976
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8926: LD_ADDR_VAR 0 8
8930: PUSH
8931: LD_VAR 0 8
8935: PPUSH
8936: LD_INT 1
8938: PPUSH
8939: LD_VAR 0 2
8943: PUSH
8944: LD_VAR 0 11
8948: PLUS
8949: PUSH
8950: LD_VAR 0 3
8954: PUSH
8955: LD_VAR 0 4
8959: MINUS
8960: PUSH
8961: LD_VAR 0 11
8965: PLUS
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 2
8975: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8976: LD_INT 1
8978: PUSH
8979: LD_VAR 0 10
8983: IN
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_VAR 0 10
8992: IN
8993: AND
8994: IFFALSE 9040
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8996: LD_ADDR_VAR 0 8
9000: PUSH
9001: LD_VAR 0 8
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: LD_VAR 0 2
9013: PUSH
9014: LD_VAR 0 4
9018: PLUS
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 11
9029: PLUS
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 2
9039: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9040: LD_INT 2
9042: PUSH
9043: LD_VAR 0 10
9047: IN
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: LD_VAR 0 10
9056: IN
9057: AND
9058: IFFALSE 9110
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9060: LD_ADDR_VAR 0 8
9064: PUSH
9065: LD_VAR 0 8
9069: PPUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_VAR 0 4
9082: PLUS
9083: PUSH
9084: LD_VAR 0 11
9088: MINUS
9089: PUSH
9090: LD_VAR 0 3
9094: PUSH
9095: LD_VAR 0 4
9099: PLUS
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PPUSH
9105: CALL_OW 2
9109: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9110: LD_INT 3
9112: PUSH
9113: LD_VAR 0 10
9117: IN
9118: PUSH
9119: LD_INT 4
9121: PUSH
9122: LD_VAR 0 10
9126: IN
9127: AND
9128: IFFALSE 9180
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: LD_VAR 0 8
9139: PPUSH
9140: LD_INT 1
9142: PPUSH
9143: LD_VAR 0 2
9147: PUSH
9148: LD_VAR 0 11
9152: MINUS
9153: PUSH
9154: LD_VAR 0 3
9158: PUSH
9159: LD_VAR 0 4
9163: PLUS
9164: PUSH
9165: LD_VAR 0 11
9169: MINUS
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 2
9179: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9180: LD_INT 4
9182: PUSH
9183: LD_VAR 0 10
9187: IN
9188: PUSH
9189: LD_INT 5
9191: PUSH
9192: LD_VAR 0 10
9196: IN
9197: AND
9198: IFFALSE 9244
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9200: LD_ADDR_VAR 0 8
9204: PUSH
9205: LD_VAR 0 8
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_VAR 0 2
9217: PUSH
9218: LD_VAR 0 4
9222: MINUS
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: LD_VAR 0 11
9233: MINUS
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 2
9243: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9244: LD_INT 5
9246: PUSH
9247: LD_VAR 0 10
9251: IN
9252: PUSH
9253: LD_INT 0
9255: PUSH
9256: LD_VAR 0 10
9260: IN
9261: AND
9262: IFFALSE 9314
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9264: LD_ADDR_VAR 0 8
9268: PUSH
9269: LD_VAR 0 8
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_VAR 0 2
9281: PUSH
9282: LD_VAR 0 4
9286: MINUS
9287: PUSH
9288: LD_VAR 0 11
9292: PLUS
9293: PUSH
9294: LD_VAR 0 3
9298: PUSH
9299: LD_VAR 0 4
9303: MINUS
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PPUSH
9309: CALL_OW 2
9313: ST_TO_ADDR
// b = b + c end ;
9314: LD_ADDR_VAR 0 11
9318: PUSH
9319: LD_VAR 0 11
9323: PUSH
9324: LD_VAR 0 14
9328: PLUS
9329: ST_TO_ADDR
9330: GO 8890
// if list_coords = 0 then
9332: LD_VAR 0 8
9336: PUSH
9337: LD_INT 0
9339: EQUAL
9340: IFFALSE 9344
// exit ;
9342: GO 9852
// repeat min_dist = 5000 ;
9344: LD_ADDR_VAR 0 12
9348: PUSH
9349: LD_INT 5000
9351: ST_TO_ADDR
// for b in list_coords do
9352: LD_ADDR_VAR 0 11
9356: PUSH
9357: LD_VAR 0 8
9361: PUSH
9362: FOR_IN
9363: IFFALSE 9422
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9365: LD_ADDR_VAR 0 13
9369: PUSH
9370: LD_VAR 0 1
9374: PPUSH
9375: LD_VAR 0 11
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PPUSH
9384: LD_VAR 0 11
9388: PUSH
9389: LD_INT 2
9391: ARRAY
9392: PPUSH
9393: CALL_OW 297
9397: ST_TO_ADDR
// if temp_dist < min_dist then
9398: LD_VAR 0 13
9402: PUSH
9403: LD_VAR 0 12
9407: LESS
9408: IFFALSE 9420
// min_dist = temp_dist ;
9410: LD_ADDR_VAR 0 12
9414: PUSH
9415: LD_VAR 0 13
9419: ST_TO_ADDR
// end ;
9420: GO 9362
9422: POP
9423: POP
// c = 0 ;
9424: LD_ADDR_VAR 0 14
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// repeat c = c + 1 ;
9432: LD_ADDR_VAR 0 14
9436: PUSH
9437: LD_VAR 0 14
9441: PUSH
9442: LD_INT 1
9444: PLUS
9445: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_VAR 0 8
9455: PUSH
9456: LD_VAR 0 14
9460: ARRAY
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: LD_VAR 0 8
9470: PUSH
9471: LD_VAR 0 14
9475: ARRAY
9476: PUSH
9477: LD_INT 2
9479: ARRAY
9480: PPUSH
9481: CALL_OW 297
9485: PUSH
9486: LD_VAR 0 12
9490: EQUAL
9491: IFFALSE 9556
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9493: LD_ADDR_VAR 0 7
9497: PUSH
9498: LD_VAR 0 7
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: LD_VAR 0 8
9510: PUSH
9511: LD_VAR 0 14
9515: ARRAY
9516: PPUSH
9517: CALL_OW 2
9521: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9522: LD_ADDR_VAR 0 8
9526: PUSH
9527: LD_VAR 0 8
9531: PPUSH
9532: LD_VAR 0 14
9536: PPUSH
9537: CALL_OW 3
9541: ST_TO_ADDR
// c = c - 1 ;
9542: LD_ADDR_VAR 0 14
9546: PUSH
9547: LD_VAR 0 14
9551: PUSH
9552: LD_INT 1
9554: MINUS
9555: ST_TO_ADDR
// end ; until c = list_coords ;
9556: LD_VAR 0 14
9560: PUSH
9561: LD_VAR 0 8
9565: EQUAL
9566: IFFALSE 9432
// c = 0 ;
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// if list_nearest > 0 then
9576: LD_VAR 0 7
9580: PUSH
9581: LD_INT 0
9583: GREATER
9584: IFFALSE 9726
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9586: LD_ADDR_VAR 0 15
9590: PUSH
9591: LD_INT 1
9593: PPUSH
9594: LD_VAR 0 7
9598: PPUSH
9599: CALL_OW 12
9603: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9604: LD_ADDR_VAR 0 16
9608: PUSH
9609: LD_VAR 0 7
9613: PUSH
9614: LD_VAR 0 15
9618: ARRAY
9619: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9620: LD_VAR 0 16
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 16
9633: PUSH
9634: LD_INT 2
9636: ARRAY
9637: PPUSH
9638: CALL_OW 488
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: PUSH
9647: LD_VAR 0 16
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: LD_VAR 0 16
9660: PUSH
9661: LD_INT 2
9663: ARRAY
9664: PPUSH
9665: CALL_OW 428
9669: PUSH
9670: LD_INT 0
9672: EQUAL
9673: AND
9674: IFFALSE 9686
// c = 1 else
9676: LD_ADDR_VAR 0 14
9680: PUSH
9681: LD_INT 1
9683: ST_TO_ADDR
9684: GO 9706
// list_nearest = Delete ( list_nearest , rand_num ) ;
9686: LD_ADDR_VAR 0 7
9690: PUSH
9691: LD_VAR 0 7
9695: PPUSH
9696: LD_VAR 0 15
9700: PPUSH
9701: CALL_OW 3
9705: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9706: LD_VAR 0 14
9710: PUSH
9711: LD_INT 1
9713: EQUAL
9714: PUSH
9715: LD_VAR 0 7
9719: PUSH
9720: LD_INT 0
9722: EQUAL
9723: OR
9724: IFFALSE 9586
// end ; until c = 1 or list_coords = 0 ;
9726: LD_VAR 0 14
9730: PUSH
9731: LD_INT 1
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 8
9739: PUSH
9740: LD_INT 0
9742: EQUAL
9743: OR
9744: IFFALSE 9344
// attempts = attempts + 1 ;
9746: LD_ADDR_VAR 0 17
9750: PUSH
9751: LD_VAR 0 17
9755: PUSH
9756: LD_INT 1
9758: PLUS
9759: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9760: LD_VAR 0 14
9764: PUSH
9765: LD_INT 1
9767: EQUAL
9768: PUSH
9769: LD_VAR 0 17
9773: PUSH
9774: LD_INT 1
9776: GREATER
9777: OR
9778: IFFALSE 8303
// if c = 1 then
9780: LD_VAR 0 14
9784: PUSH
9785: LD_INT 1
9787: EQUAL
9788: IFFALSE 9852
// if add then
9790: LD_VAR 0 5
9794: IFFALSE 9825
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_VAR 0 16
9805: PUSH
9806: LD_INT 1
9808: ARRAY
9809: PPUSH
9810: LD_VAR 0 16
9814: PUSH
9815: LD_INT 2
9817: ARRAY
9818: PPUSH
9819: CALL_OW 171
9823: GO 9852
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_VAR 0 16
9834: PUSH
9835: LD_INT 1
9837: ARRAY
9838: PPUSH
9839: LD_VAR 0 16
9843: PUSH
9844: LD_INT 2
9846: ARRAY
9847: PPUSH
9848: CALL_OW 111
// end ;
9852: LD_VAR 0 6
9856: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9857: LD_INT 0
9859: PPUSH
9860: PPUSH
9861: PPUSH
9862: PPUSH
9863: PPUSH
9864: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9865: LD_VAR 0 1
9869: PPUSH
9870: LD_VAR 0 2
9874: PPUSH
9875: CALL_OW 488
9879: NOT
9880: PUSH
9881: LD_VAR 0 3
9885: PPUSH
9886: LD_VAR 0 4
9890: PPUSH
9891: CALL_OW 488
9895: NOT
9896: OR
9897: IFFALSE 9910
// begin result = - 1 ;
9899: LD_ADDR_VAR 0 5
9903: PUSH
9904: LD_INT 1
9906: NEG
9907: ST_TO_ADDR
// exit ;
9908: GO 10070
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9910: LD_ADDR_VAR 0 6
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: LD_VAR 0 2
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: LD_VAR 0 4
9934: PPUSH
9935: CALL_OW 298
9939: ST_TO_ADDR
// dist_2 = 99999 ;
9940: LD_ADDR_VAR 0 7
9944: PUSH
9945: LD_INT 99999
9947: ST_TO_ADDR
// for b = 0 to 5 do
9948: LD_ADDR_VAR 0 8
9952: PUSH
9953: DOUBLE
9954: LD_INT 0
9956: DEC
9957: ST_TO_ADDR
9958: LD_INT 5
9960: PUSH
9961: FOR_TO
9962: IFFALSE 10058
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9964: LD_ADDR_VAR 0 9
9968: PUSH
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 8
9978: PPUSH
9979: LD_VAR 0 6
9983: PPUSH
9984: CALL_OW 272
9988: PPUSH
9989: LD_VAR 0 2
9993: PPUSH
9994: LD_VAR 0 8
9998: PPUSH
9999: LD_VAR 0 6
10003: PPUSH
10004: CALL_OW 273
10008: PPUSH
10009: LD_VAR 0 3
10013: PPUSH
10014: LD_VAR 0 4
10018: PPUSH
10019: CALL_OW 298
10023: ST_TO_ADDR
// if temp_dist < dist_2 then
10024: LD_VAR 0 9
10028: PUSH
10029: LD_VAR 0 7
10033: LESS
10034: IFFALSE 10056
// begin dist_2 = temp_dist ;
10036: LD_ADDR_VAR 0 7
10040: PUSH
10041: LD_VAR 0 9
10045: ST_TO_ADDR
// dir = b ;
10046: LD_ADDR_VAR 0 10
10050: PUSH
10051: LD_VAR 0 8
10055: ST_TO_ADDR
// end ; end ;
10056: GO 9961
10058: POP
10059: POP
// result = dir ;
10060: LD_ADDR_VAR 0 5
10064: PUSH
10065: LD_VAR 0 10
10069: ST_TO_ADDR
// end ;
10070: LD_VAR 0 5
10074: RET
// export function MoveToHill ; begin
10075: LD_INT 0
10077: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10078: LD_EXP 44
10082: PPUSH
10083: LD_INT 65
10085: PPUSH
10086: LD_INT 59
10088: PPUSH
10089: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10093: LD_EXP 44
10097: PPUSH
10098: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10102: LD_EXP 45
10106: PPUSH
10107: LD_INT 65
10109: PPUSH
10110: LD_INT 58
10112: PPUSH
10113: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10117: LD_EXP 45
10121: PPUSH
10122: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10126: LD_EXP 46
10130: PPUSH
10131: LD_INT 64
10133: PPUSH
10134: LD_INT 57
10136: PPUSH
10137: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10141: LD_EXP 46
10145: PPUSH
10146: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10150: LD_EXP 47
10154: PPUSH
10155: LD_INT 64
10157: PPUSH
10158: LD_INT 56
10160: PPUSH
10161: CALL_OW 111
// AddComCrawl ( Balei ) ;
10165: LD_EXP 47
10169: PPUSH
10170: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10174: LD_EXP 48
10178: PPUSH
10179: LD_INT 63
10181: PPUSH
10182: LD_INT 55
10184: PPUSH
10185: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10189: LD_EXP 48
10193: PPUSH
10194: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10198: LD_EXP 49
10202: PPUSH
10203: LD_INT 66
10205: PPUSH
10206: LD_INT 58
10208: PPUSH
10209: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10213: LD_EXP 49
10217: PPUSH
10218: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10222: LD_EXP 51
10226: PPUSH
10227: CALL_OW 255
10231: PUSH
10232: LD_INT 6
10234: EQUAL
10235: PUSH
10236: LD_EXP 11
10240: AND
10241: IFFALSE 10267
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10243: LD_EXP 51
10247: PPUSH
10248: LD_INT 63
10250: PPUSH
10251: LD_INT 54
10253: PPUSH
10254: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10258: LD_EXP 51
10262: PPUSH
10263: CALL_OW 197
// end ; end ; end_of_file
10267: LD_VAR 0 1
10271: RET
// export function BurlakDying ; begin
10272: LD_INT 0
10274: PPUSH
// YouLost ( Burlak ) ;
10275: LD_STRING Burlak
10277: PPUSH
10278: CALL_OW 104
// end ;
10282: LD_VAR 0 1
10286: RET
// every 0 0$1 trigger kirovSolds = 0 do
10287: LD_EXP 53
10291: PUSH
10292: LD_INT 0
10294: EQUAL
10295: IFFALSE 10307
10297: GO 10299
10299: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10300: LD_STRING KirovSoldsDie
10302: PPUSH
10303: CALL_OW 104
10307: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10308: LD_EXP 21
10312: PUSH
10313: LD_INT 1
10315: PPUSH
10316: LD_INT 22
10318: PUSH
10319: LD_INT 3
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 71
10344: PUSH
10345: LD_INT 0
10347: EQUAL
10348: AND
10349: IFFALSE 10543
10351: GO 10353
10353: DISABLE
10354: LD_INT 0
10356: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10357: LD_EXP 50
10361: PPUSH
10362: CALL_OW 302
10366: PUSH
10367: LD_EXP 50
10371: PPUSH
10372: CALL_OW 255
10376: PUSH
10377: LD_INT 8
10379: EQUAL
10380: AND
10381: PUSH
10382: LD_EXP 51
10386: PPUSH
10387: CALL_OW 302
10391: PUSH
10392: LD_EXP 51
10396: PPUSH
10397: CALL_OW 255
10401: PUSH
10402: LD_INT 8
10404: EQUAL
10405: AND
10406: OR
10407: IFFALSE 10539
// begin case Query ( QExit2 ) of 1 :
10409: LD_STRING QExit2
10411: PPUSH
10412: CALL_OW 97
10416: PUSH
10417: LD_INT 1
10419: DOUBLE
10420: EQUAL
10421: IFTRUE 10425
10423: GO 10517
10425: POP
// begin if IsOk ( Belkov ) then
10426: LD_EXP 48
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10451
// Say ( Belkov , D12-Bel-1 ) else
10437: LD_EXP 48
10441: PPUSH
10442: LD_STRING D12-Bel-1
10444: PPUSH
10445: CALL_OW 88
10449: GO 10511
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10451: LD_INT 22
10453: PUSH
10454: LD_INT 3
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 21
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 50
10473: PUSH
10474: EMPTY
10475: LIST
10476: PUSH
10477: LD_INT 26
10479: PUSH
10480: LD_INT 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PPUSH
10493: CALL_OW 69
10497: PPUSH
10498: LD_STRING D12-RSol1-1
10500: PPUSH
10501: LD_STRING 
10503: PPUSH
10504: LD_INT 0
10506: PPUSH
10507: CALL 7862 0 4
// FinishMission ;
10511: CALL 10546 0 0
// end ; 2 :
10515: GO 10537
10517: LD_INT 2
10519: DOUBLE
10520: EQUAL
10521: IFTRUE 10525
10523: GO 10536
10525: POP
// begin wait ( 0 0$5 ) ;
10526: LD_INT 175
10528: PPUSH
10529: CALL_OW 67
// enable ;
10533: ENABLE
// end ; end ;
10534: GO 10537
10536: POP
// end else
10537: GO 10543
// FinishMission ;
10539: CALL 10546 0 0
// end ;
10543: PPOPN 1
10545: END
// function FinishMission ; begin
10546: LD_INT 0
10548: PPUSH
// SetRewards ;
10549: CALL 10570 0 0
// SavePlayerCharacters ;
10553: CALL 10921 0 0
// SaveGlobalVariables ;
10557: CALL 11051 0 0
// YouWin ;
10561: CALL_OW 103
// end ;
10565: LD_VAR 0 1
10569: RET
// function SetRewards ; begin
10570: LD_INT 0
10572: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10573: LD_EXP 18
10577: NOT
10578: PUSH
10579: LD_EXP 19
10583: NOT
10584: AND
10585: IFFALSE 10597
// AddMedal ( NoEscape , 1 ) ;
10587: LD_STRING NoEscape
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10597: LD_EXP 18
10601: PUSH
10602: LD_EXP 19
10606: NOT
10607: AND
10608: IFFALSE 10621
// AddMedal ( NoEscape , - 1 ) ;
10610: LD_STRING NoEscape
10612: PPUSH
10613: LD_INT 1
10615: NEG
10616: PPUSH
10617: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10621: LD_EXP 18
10625: NOT
10626: PUSH
10627: LD_EXP 19
10631: AND
10632: IFFALSE 10645
// AddMedal ( NoEscape , - 2 ) ;
10634: LD_STRING NoEscape
10636: PPUSH
10637: LD_INT 2
10639: NEG
10640: PPUSH
10641: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10645: LD_EXP 18
10649: PUSH
10650: LD_EXP 19
10654: AND
10655: IFFALSE 10668
// AddMedal ( NoEscape , - 3 ) ;
10657: LD_STRING NoEscape
10659: PPUSH
10660: LD_INT 3
10662: NEG
10663: PPUSH
10664: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10668: LD_EXP 11
10672: PUSH
10673: LD_EXP 51
10677: PPUSH
10678: CALL_OW 302
10682: AND
10683: PUSH
10684: LD_EXP 20
10688: AND
10689: PUSH
10690: LD_EXP 50
10694: PPUSH
10695: CALL_OW 302
10699: AND
10700: IFFALSE 10712
// AddMedal ( Gnyevko , 1 ) ;
10702: LD_STRING Gnyevko
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10712: LD_EXP 11
10716: NOT
10717: PUSH
10718: LD_EXP 20
10722: AND
10723: PUSH
10724: LD_EXP 50
10728: PPUSH
10729: CALL_OW 302
10733: AND
10734: IFFALSE 10747
// AddMedal ( Gnyevko , - 1 ) ;
10736: LD_STRING Gnyevko
10738: PPUSH
10739: LD_INT 1
10741: NEG
10742: PPUSH
10743: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10747: LD_EXP 11
10751: PUSH
10752: LD_EXP 20
10756: NOT
10757: PUSH
10758: LD_EXP 51
10762: PPUSH
10763: CALL_OW 302
10767: NOT
10768: OR
10769: PUSH
10770: LD_EXP 50
10774: PPUSH
10775: CALL_OW 302
10779: NOT
10780: OR
10781: AND
10782: IFFALSE 10795
// AddMedal ( Gnyevko , - 2 ) ;
10784: LD_STRING Gnyevko
10786: PPUSH
10787: LD_INT 2
10789: NEG
10790: PPUSH
10791: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10795: LD_EXP 11
10799: NOT
10800: PUSH
10801: LD_EXP 20
10805: NOT
10806: AND
10807: PUSH
10808: LD_EXP 51
10812: PPUSH
10813: CALL_OW 302
10817: NOT
10818: PUSH
10819: LD_EXP 50
10823: PPUSH
10824: CALL_OW 302
10828: NOT
10829: AND
10830: OR
10831: IFFALSE 10844
// AddMedal ( Gnyevko , - 3 ) ;
10833: LD_STRING Gnyevko
10835: PPUSH
10836: LD_INT 3
10838: NEG
10839: PPUSH
10840: CALL_OW 101
// if lostComradesCounter = 0 then
10844: LD_EXP 22
10848: PUSH
10849: LD_INT 0
10851: EQUAL
10852: IFFALSE 10866
// AddMedal ( NoLosses , 1 ) else
10854: LD_STRING NoLosses
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 101
10864: GO 10876
// AddMedal ( NoLosses , 0 ) ;
10866: LD_STRING NoLosses
10868: PPUSH
10869: LD_INT 0
10871: PPUSH
10872: CALL_OW 101
// GiveMedals ( Main ) ;
10876: LD_STRING Main
10878: PPUSH
10879: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10883: LD_INT 22
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 69
10911: PPUSH
10912: CALL_OW 43
// end ;
10916: LD_VAR 0 1
10920: RET
// function SavePlayerCharacters ; var others ; begin
10921: LD_INT 0
10923: PPUSH
10924: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10925: LD_EXP 43
10929: PPUSH
10930: LD_STRING Burlak
10932: PPUSH
10933: CALL 8041 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10937: LD_EXP 51
10941: PPUSH
10942: LD_STRING Gnyevko
10944: PPUSH
10945: CALL 8041 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10949: LD_EXP 48
10953: PPUSH
10954: LD_STRING Belkov
10956: PPUSH
10957: CALL 8041 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10961: LD_EXP 50
10965: PPUSH
10966: LD_STRING Kirilenkova
10968: PPUSH
10969: CALL 8041 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_INT 22
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 69
11006: PUSH
11007: LD_EXP 43
11011: PUSH
11012: LD_EXP 51
11016: PUSH
11017: LD_EXP 48
11021: PUSH
11022: LD_EXP 50
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: DIFF
11033: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
11034: LD_VAR 0 2
11038: PPUSH
11039: LD_STRING other_survivors
11041: PPUSH
11042: CALL 8097 0 2
// end ;
11046: LD_VAR 0 1
11050: RET
// function SaveGlobalVariables ; begin
11051: LD_INT 0
11053: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11054: LD_EXP 1
11058: PPUSH
11059: LD_STRING 01_GladstoneStatus
11061: PPUSH
11062: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11066: LD_EXP 2
11070: PPUSH
11071: LD_STRING 01_JohannaStatus
11073: PPUSH
11074: CALL_OW 39
// end ; end_of_file
11078: LD_VAR 0 1
11082: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
11087: PPUSH
// uc_side = 1 ;
11088: LD_ADDR_OWVAR 20
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// hc_class := 1 ;
11096: LD_ADDR_OWVAR 28
11100: PUSH
11101: LD_INT 1
11103: ST_TO_ADDR
// hc_sex := sex_male ;
11104: LD_ADDR_OWVAR 27
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11112: LD_ADDR_OWVAR 33
11116: PUSH
11117: LD_STRING AmGalRemake
11119: ST_TO_ADDR
// hc_face_number := 1 ;
11120: LD_ADDR_OWVAR 34
11124: PUSH
11125: LD_INT 1
11127: ST_TO_ADDR
// hc_name := Charles Brown ;
11128: LD_ADDR_OWVAR 26
11132: PUSH
11133: LD_STRING Charles Brown
11135: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11136: LD_ADDR_OWVAR 29
11140: PUSH
11141: LD_INT 12
11143: PUSH
11144: LD_INT 11
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11151: LD_ADDR_OWVAR 31
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: LD_INT 0
11161: PUSH
11162: LD_INT 1
11164: PUSH
11165: LD_INT 1
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: ST_TO_ADDR
// Charles = CreateHuman ;
11174: LD_ADDR_EXP 39
11178: PUSH
11179: CALL_OW 44
11183: ST_TO_ADDR
// hc_class := 1 ;
11184: LD_ADDR_OWVAR 28
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// hc_sex := sex_female ;
11192: LD_ADDR_OWVAR 27
11196: PUSH
11197: LD_INT 2
11199: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11200: LD_ADDR_OWVAR 33
11204: PUSH
11205: LD_STRING AmGalRemake
11207: ST_TO_ADDR
// hc_face_number := 2 ;
11208: LD_ADDR_OWVAR 34
11212: PUSH
11213: LD_INT 2
11215: ST_TO_ADDR
// hc_name := Johanna Holland ;
11216: LD_ADDR_OWVAR 26
11220: PUSH
11221: LD_STRING Johanna Holland
11223: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11224: LD_ADDR_OWVAR 29
11228: PUSH
11229: LD_INT 12
11231: PUSH
11232: LD_INT 11
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11239: LD_ADDR_OWVAR 31
11243: PUSH
11244: LD_EXP 33
11248: PUSH
11249: LD_INT 0
11251: PPUSH
11252: LD_INT 2
11254: PPUSH
11255: CALL_OW 12
11259: PUSH
11260: LD_INT 0
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: CALL_OW 12
11270: PUSH
11271: LD_INT 0
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: CALL_OW 12
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: ST_TO_ADDR
// Johanna = CreateHuman ;
11288: LD_ADDR_EXP 40
11292: PUSH
11293: CALL_OW 44
11297: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11298: LD_EXP 40
11302: PPUSH
11303: LD_INT 19
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11313: LD_EXP 40
11317: PPUSH
11318: LD_INT 23
11320: PPUSH
11321: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11325: LD_ADDR_EXP 41
11329: PUSH
11330: LD_STRING Gladstone
11332: PPUSH
11333: LD_INT 0
11335: PPUSH
11336: CALL 7799 0 2
11340: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11341: LD_EXP 41
11345: PPUSH
11346: LD_INT 22
11348: PPUSH
11349: CALL_OW 52
// amApemans = [ ] ;
11353: LD_ADDR_EXP 42
11357: PUSH
11358: EMPTY
11359: ST_TO_ADDR
// for i := 1 to amApeAmount do
11360: LD_ADDR_VAR 0 2
11364: PUSH
11365: DOUBLE
11366: LD_INT 1
11368: DEC
11369: ST_TO_ADDR
11370: LD_EXP 32
11374: PUSH
11375: FOR_TO
11376: IFFALSE 11491
// begin hc_class := class_apeman ;
11378: LD_ADDR_OWVAR 28
11382: PUSH
11383: LD_INT 12
11385: ST_TO_ADDR
// hc_gallery :=  ;
11386: LD_ADDR_OWVAR 33
11390: PUSH
11391: LD_STRING 
11393: ST_TO_ADDR
// hc_name :=  ;
11394: LD_ADDR_OWVAR 26
11398: PUSH
11399: LD_STRING 
11401: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11402: LD_ADDR_OWVAR 31
11406: PUSH
11407: LD_EXP 33
11411: PUSH
11412: LD_INT 0
11414: PPUSH
11415: LD_INT 2
11417: PPUSH
11418: CALL_OW 12
11422: PUSH
11423: LD_INT 0
11425: PPUSH
11426: LD_INT 2
11428: PPUSH
11429: CALL_OW 12
11433: PUSH
11434: LD_INT 0
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: CALL_OW 12
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: ST_TO_ADDR
// ape = CreateHuman ;
11451: LD_ADDR_VAR 0 3
11455: PUSH
11456: CALL_OW 44
11460: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 22
11468: PPUSH
11469: CALL_OW 52
// amApemans = amApemans ^ ape ;
11473: LD_ADDR_EXP 42
11477: PUSH
11478: LD_EXP 42
11482: PUSH
11483: LD_VAR 0 3
11487: ADD
11488: ST_TO_ADDR
// end ;
11489: GO 11375
11491: POP
11492: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11493: LD_INT 23
11495: PPUSH
11496: LD_EXP 30
11500: PPUSH
11501: CALL_OW 234
// end ; end_of_file
11505: LD_VAR 0 1
11509: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11510: LD_INT 0
11512: PPUSH
// PrepareHero ;
11513: CALL 11538 0 0
// PreparePokryshkinTeams ;
11517: CALL 11632 0 0
// PrepareJelena ;
11521: CALL 11897 0 0
// PrepareGnyevko ;
11525: CALL 11929 0 0
// PrepareKurin ;
11529: CALL 11600 0 0
// end ;
11533: LD_VAR 0 1
11537: RET
// function PrepareHero ; begin
11538: LD_INT 0
11540: PPUSH
// uc_side = 3 ;
11541: LD_ADDR_OWVAR 20
11545: PUSH
11546: LD_INT 3
11548: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11549: LD_ADDR_EXP 43
11553: PUSH
11554: LD_STRING Burlak
11556: PPUSH
11557: LD_INT 0
11559: PPUSH
11560: CALL 7799 0 2
11564: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11565: LD_EXP 43
11569: PPUSH
11570: LD_EXP 34
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PPUSH
11579: LD_EXP 34
11583: PUSH
11584: LD_INT 2
11586: ARRAY
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 48
// end ;
11595: LD_VAR 0 1
11599: RET
// function PrepareKurin ; begin
11600: LD_INT 0
11602: PPUSH
// uc_side = 6 ;
11603: LD_ADDR_OWVAR 20
11607: PUSH
11608: LD_INT 6
11610: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11611: LD_ADDR_EXP 52
11615: PUSH
11616: LD_STRING Kurin
11618: PPUSH
11619: LD_INT 0
11621: PPUSH
11622: CALL 7799 0 2
11626: ST_TO_ADDR
// end ;
11627: LD_VAR 0 1
11631: RET
// function PreparePokryshkinTeams ; begin
11632: LD_INT 0
11634: PPUSH
// uc_side = 6 ;
11635: LD_ADDR_OWVAR 20
11639: PUSH
11640: LD_INT 6
11642: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11643: LD_ADDR_EXP 44
11647: PUSH
11648: LD_STRING Pokryshkin
11650: PPUSH
11651: LD_INT 0
11653: PPUSH
11654: CALL 7799 0 2
11658: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11659: LD_ADDR_EXP 45
11663: PUSH
11664: LD_STRING Saseda
11666: PPUSH
11667: LD_INT 0
11669: PPUSH
11670: CALL 7799 0 2
11674: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11675: LD_ADDR_EXP 46
11679: PUSH
11680: LD_STRING Jaworska
11682: PPUSH
11683: LD_INT 0
11685: PPUSH
11686: CALL 7799 0 2
11690: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11691: LD_ADDR_EXP 47
11695: PUSH
11696: LD_STRING Balei
11698: PPUSH
11699: LD_INT 0
11701: PPUSH
11702: CALL 7799 0 2
11706: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11707: LD_ADDR_EXP 48
11711: PUSH
11712: LD_STRING Belkov
11714: PPUSH
11715: LD_INT 0
11717: PPUSH
11718: CALL 7799 0 2
11722: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
11723: LD_EXP 44
11727: PPUSH
11728: LD_INT 25
11730: PPUSH
11731: LD_INT 0
11733: PPUSH
11734: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11738: LD_EXP 45
11742: PPUSH
11743: LD_INT 17
11745: PPUSH
11746: LD_INT 0
11748: PPUSH
11749: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11753: LD_EXP 46
11757: PPUSH
11758: LD_INT 17
11760: PPUSH
11761: LD_INT 0
11763: PPUSH
11764: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11768: LD_EXP 47
11772: PPUSH
11773: LD_INT 17
11775: PPUSH
11776: LD_INT 0
11778: PPUSH
11779: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11783: LD_EXP 48
11787: PPUSH
11788: LD_INT 17
11790: PPUSH
11791: LD_INT 0
11793: PPUSH
11794: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11798: LD_ADDR_EXP 53
11802: PUSH
11803: LD_EXP 44
11807: PUSH
11808: LD_EXP 45
11812: PUSH
11813: LD_EXP 47
11817: PUSH
11818: LD_EXP 48
11822: PUSH
11823: LD_EXP 46
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: ST_TO_ADDR
// if Difficulty < 3 then
11835: LD_OWVAR 67
11839: PUSH
11840: LD_INT 3
11842: LESS
11843: IFFALSE 11892
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11845: LD_ADDR_EXP 49
11849: PUSH
11850: LD_STRING Jaunzeme
11852: PPUSH
11853: LD_INT 0
11855: PPUSH
11856: CALL 7799 0 2
11860: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
11861: LD_EXP 49
11865: PPUSH
11866: LD_INT 26
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11876: LD_ADDR_EXP 53
11880: PUSH
11881: LD_EXP 53
11885: PUSH
11886: LD_EXP 49
11890: ADD
11891: ST_TO_ADDR
// end ; end ;
11892: LD_VAR 0 1
11896: RET
// function PrepareJelena ; begin
11897: LD_INT 0
11899: PPUSH
// uc_side = 8 ;
11900: LD_ADDR_OWVAR 20
11904: PUSH
11905: LD_INT 8
11907: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11908: LD_ADDR_EXP 50
11912: PUSH
11913: LD_STRING Kirilenkova
11915: PPUSH
11916: LD_INT 0
11918: PPUSH
11919: CALL 7799 0 2
11923: ST_TO_ADDR
// end ;
11924: LD_VAR 0 1
11928: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11929: LD_INT 0
11931: PPUSH
11932: PPUSH
11933: PPUSH
11934: PPUSH
// uc_side = 8 ;
11935: LD_ADDR_OWVAR 20
11939: PUSH
11940: LD_INT 8
11942: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11943: LD_ADDR_EXP 51
11947: PUSH
11948: LD_STRING Gnyevko
11950: PPUSH
11951: LD_INT 0
11953: PPUSH
11954: CALL 7799 0 2
11958: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11959: LD_ADDR_VAR 0 4
11963: PUSH
11964: LD_EXP 35
11968: PUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_EXP 35
11976: PPUSH
11977: CALL_OW 12
11981: ARRAY
11982: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11983: LD_EXP 51
11987: PPUSH
11988: LD_VAR 0 4
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 4
12001: PUSH
12002: LD_INT 2
12004: ARRAY
12005: PPUSH
12006: LD_INT 0
12008: PPUSH
12009: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
12013: LD_EXP 51
12017: PPUSH
12018: LD_INT 500
12020: PPUSH
12021: CALL_OW 234
// ComHold ( Gnyevko ) ;
12025: LD_EXP 51
12029: PPUSH
12030: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: DOUBLE
12040: LD_INT 1
12042: DEC
12043: ST_TO_ADDR
12044: LD_EXP 24
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 2
12058: PUSH
12059: LD_INT 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_OWVAR 67
12071: ARRAY
12072: MINUS
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12205
// begin uc_side = 0 ;
12077: LD_ADDR_OWVAR 20
12081: PUSH
12082: LD_INT 0
12084: ST_TO_ADDR
// uc_nation = nation_nature ;
12085: LD_ADDR_OWVAR 21
12089: PUSH
12090: LD_INT 0
12092: ST_TO_ADDR
// hc_class = class_apeman ;
12093: LD_ADDR_OWVAR 28
12097: PUSH
12098: LD_INT 12
12100: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12101: LD_ADDR_OWVAR 31
12105: PUSH
12106: LD_EXP 25
12110: PUSH
12111: LD_INT 1
12113: ARRAY
12114: PUSH
12115: LD_EXP 25
12119: PUSH
12120: LD_INT 2
12122: ARRAY
12123: PUSH
12124: LD_EXP 25
12128: PUSH
12129: LD_INT 3
12131: ARRAY
12132: PUSH
12133: LD_EXP 25
12137: PUSH
12138: LD_INT 4
12140: ARRAY
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12148: LD_ADDR_OWVAR 35
12152: PUSH
12153: LD_EXP 31
12157: ST_TO_ADDR
// un = CreateHuman ;
12158: LD_ADDR_VAR 0 2
12162: PUSH
12163: CALL_OW 44
12167: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12168: LD_VAR 0 2
12172: PPUSH
12173: LD_EXP 51
12177: PPUSH
12178: CALL_OW 250
12182: PPUSH
12183: LD_EXP 51
12187: PPUSH
12188: CALL_OW 251
12192: PPUSH
12193: LD_INT 8
12195: PPUSH
12196: LD_INT 0
12198: PPUSH
12199: CALL_OW 50
// end ;
12203: GO 12074
12205: POP
12206: POP
// end ; end_of_file
12207: LD_VAR 0 1
12211: RET
// export function PrepareNature ; var i , un ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12217: LD_ADDR_VAR 0 2
12221: PUSH
12222: DOUBLE
12223: LD_INT 1
12225: DEC
12226: ST_TO_ADDR
12227: LD_EXP 24
12231: PUSH
12232: LD_INT 1
12234: ARRAY
12235: PUSH
12236: FOR_TO
12237: IFFALSE 12347
// begin uc_side = 0 ;
12239: LD_ADDR_OWVAR 20
12243: PUSH
12244: LD_INT 0
12246: ST_TO_ADDR
// uc_nation = nation_nature ;
12247: LD_ADDR_OWVAR 21
12251: PUSH
12252: LD_INT 0
12254: ST_TO_ADDR
// hc_class = class_apeman ;
12255: LD_ADDR_OWVAR 28
12259: PUSH
12260: LD_INT 12
12262: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12263: LD_ADDR_OWVAR 31
12267: PUSH
12268: LD_EXP 25
12272: PUSH
12273: LD_INT 1
12275: ARRAY
12276: PUSH
12277: LD_EXP 25
12281: PUSH
12282: LD_INT 2
12284: ARRAY
12285: PUSH
12286: LD_EXP 25
12290: PUSH
12291: LD_INT 3
12293: ARRAY
12294: PUSH
12295: LD_EXP 25
12299: PUSH
12300: LD_INT 4
12302: ARRAY
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12310: LD_ADDR_OWVAR 35
12314: PUSH
12315: LD_EXP 31
12319: ST_TO_ADDR
// un = CreateHuman ;
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: CALL_OW 44
12329: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 16
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 49
// end ;
12345: GO 12236
12347: POP
12348: POP
// for i := 1 to animalsAmount [ 2 ] do
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: DOUBLE
12355: LD_INT 1
12357: DEC
12358: ST_TO_ADDR
12359: LD_EXP 24
12363: PUSH
12364: LD_INT 2
12366: ARRAY
12367: PUSH
12368: FOR_TO
12369: IFFALSE 12479
// begin uc_side = 0 ;
12371: LD_ADDR_OWVAR 20
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// uc_nation = nation_nature ;
12379: LD_ADDR_OWVAR 21
12383: PUSH
12384: LD_INT 0
12386: ST_TO_ADDR
// hc_class = class_phororhacos ;
12387: LD_ADDR_OWVAR 28
12391: PUSH
12392: LD_INT 18
12394: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12395: LD_ADDR_OWVAR 31
12399: PUSH
12400: LD_EXP 25
12404: PUSH
12405: LD_INT 1
12407: ARRAY
12408: PUSH
12409: LD_EXP 25
12413: PUSH
12414: LD_INT 2
12416: ARRAY
12417: PUSH
12418: LD_EXP 25
12422: PUSH
12423: LD_INT 3
12425: ARRAY
12426: PUSH
12427: LD_EXP 25
12431: PUSH
12432: LD_INT 4
12434: ARRAY
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12442: LD_ADDR_OWVAR 35
12446: PUSH
12447: LD_EXP 26
12451: ST_TO_ADDR
// un = CreateHuman ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: CALL_OW 44
12461: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 15
12469: PPUSH
12470: LD_INT 0
12472: PPUSH
12473: CALL_OW 49
// end ;
12477: GO 12368
12479: POP
12480: POP
// for i := 1 to animalsAmount [ 3 ] do
12481: LD_ADDR_VAR 0 2
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_EXP 24
12495: PUSH
12496: LD_INT 3
12498: ARRAY
12499: PUSH
12500: FOR_TO
12501: IFFALSE 12611
// begin uc_side = 0 ;
12503: LD_ADDR_OWVAR 20
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// uc_nation = nation_nature ;
12511: LD_ADDR_OWVAR 21
12515: PUSH
12516: LD_INT 0
12518: ST_TO_ADDR
// hc_class = class_tiger ;
12519: LD_ADDR_OWVAR 28
12523: PUSH
12524: LD_INT 14
12526: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12527: LD_ADDR_OWVAR 31
12531: PUSH
12532: LD_EXP 25
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PUSH
12541: LD_EXP 25
12545: PUSH
12546: LD_INT 2
12548: ARRAY
12549: PUSH
12550: LD_EXP 25
12554: PUSH
12555: LD_INT 3
12557: ARRAY
12558: PUSH
12559: LD_EXP 25
12563: PUSH
12564: LD_INT 4
12566: ARRAY
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12574: LD_ADDR_OWVAR 35
12578: PUSH
12579: LD_EXP 26
12583: ST_TO_ADDR
// un = CreateHuman ;
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: CALL_OW 44
12593: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 15
12601: PPUSH
12602: LD_INT 0
12604: PPUSH
12605: CALL_OW 49
// end ;
12609: GO 12500
12611: POP
12612: POP
// for i := 1 to animalsAmount [ 4 ] do
12613: LD_ADDR_VAR 0 2
12617: PUSH
12618: DOUBLE
12619: LD_INT 1
12621: DEC
12622: ST_TO_ADDR
12623: LD_EXP 24
12627: PUSH
12628: LD_INT 4
12630: ARRAY
12631: PUSH
12632: FOR_TO
12633: IFFALSE 12743
// begin uc_side = 0 ;
12635: LD_ADDR_OWVAR 20
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// uc_nation = nation_nature ;
12643: LD_ADDR_OWVAR 21
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// hc_class = 21 ;
12651: LD_ADDR_OWVAR 28
12655: PUSH
12656: LD_INT 21
12658: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12659: LD_ADDR_OWVAR 31
12663: PUSH
12664: LD_EXP 25
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: PUSH
12673: LD_EXP 25
12677: PUSH
12678: LD_INT 2
12680: ARRAY
12681: PUSH
12682: LD_EXP 25
12686: PUSH
12687: LD_INT 3
12689: ARRAY
12690: PUSH
12691: LD_EXP 25
12695: PUSH
12696: LD_INT 4
12698: ARRAY
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12706: LD_ADDR_OWVAR 35
12710: PUSH
12711: LD_EXP 26
12715: ST_TO_ADDR
// un = CreateHuman ;
12716: LD_ADDR_VAR 0 3
12720: PUSH
12721: CALL_OW 44
12725: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 15
12733: PPUSH
12734: LD_INT 0
12736: PPUSH
12737: CALL_OW 49
// end ;
12741: GO 12632
12743: POP
12744: POP
// end ; end_of_file
12745: LD_VAR 0 1
12749: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12750: LD_VAR 0 1
12754: PUSH
12755: LD_EXP 43
12759: EQUAL
12760: PUSH
12761: LD_EXP 50
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 3
12773: EQUAL
12774: NOT
12775: AND
12776: PUSH
12777: LD_EXP 50
12781: PPUSH
12782: CALL_OW 302
12786: NOT
12787: AND
12788: IFFALSE 12794
// BurlakDying ;
12790: CALL 10272 0 0
// if unit = Gladstone then
12794: LD_VAR 0 1
12798: PUSH
12799: LD_EXP 41
12803: EQUAL
12804: IFFALSE 12814
// gladstoneStatus = 0 ;
12806: LD_ADDR_EXP 1
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// if unit = Johanna then
12814: LD_VAR 0 1
12818: PUSH
12819: LD_EXP 40
12823: EQUAL
12824: IFFALSE 12834
// johannaStatus = 0 ;
12826: LD_ADDR_EXP 2
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// end ;
12834: PPOPN 1
12836: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12837: LD_VAR 0 1
12841: PUSH
12842: LD_EXP 43
12846: EQUAL
12847: IFFALSE 12853
// BurlakDying ;
12849: CALL 10272 0 0
// if GetSide ( unit ) = 3 then
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 255
12862: PUSH
12863: LD_INT 3
12865: EQUAL
12866: IFFALSE 12882
// lostComradesCounter = lostComradesCounter + 1 ;
12868: LD_ADDR_EXP 22
12872: PUSH
12873: LD_EXP 22
12877: PUSH
12878: LD_INT 1
12880: PLUS
12881: ST_TO_ADDR
// if unit in kirovSolds then
12882: LD_VAR 0 1
12886: PUSH
12887: LD_EXP 53
12891: IN
12892: IFFALSE 12910
// kirovSolds = kirovSolds diff unit ;
12894: LD_ADDR_EXP 53
12898: PUSH
12899: LD_EXP 53
12903: PUSH
12904: LD_VAR 0 1
12908: DIFF
12909: ST_TO_ADDR
// end ;
12910: PPOPN 1
12912: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12913: LD_VAR 0 1
12917: PUSH
12918: LD_INT 3
12920: EQUAL
12921: PUSH
12922: LD_VAR 0 2
12926: PUSH
12927: LD_INT 1
12929: EQUAL
12930: AND
12931: PUSH
12932: LD_VAR 0 1
12936: PUSH
12937: LD_INT 1
12939: EQUAL
12940: PUSH
12941: LD_VAR 0 2
12945: PUSH
12946: LD_INT 3
12948: EQUAL
12949: AND
12950: PUSH
12951: LD_EXP 16
12955: PUSH
12956: LD_INT 1
12958: EQUAL
12959: AND
12960: OR
12961: IFFALSE 12967
// Dial_SecondAttack ;
12963: CALL 5835 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 3
12974: EQUAL
12975: PUSH
12976: LD_VAR 0 2
12980: PUSH
12981: LD_INT 6
12983: EQUAL
12984: AND
12985: PUSH
12986: LD_EXP 17
12990: NOT
12991: AND
12992: IFFALSE 12998
// Dialogue_AttackComrade ;
12994: CALL 3965 0 0
// end ; end_of_file
12998: PPOPN 2
13000: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
// if not missionNumber then
13005: LD_VAR 0 2
13009: NOT
13010: IFFALSE 13014
// exit ;
13012: GO 13144
// achiv := false ;
13014: LD_ADDR_VAR 0 7
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// case campaignNumber of 1 :
13022: LD_VAR 0 1
13026: PUSH
13027: LD_INT 1
13029: DOUBLE
13030: EQUAL
13031: IFTRUE 13035
13033: GO 13046
13035: POP
// achiv := ACH_GOTA ; 2 :
13036: LD_ADDR_VAR 0 7
13040: PUSH
13041: LD_STRING ACH_GOTA
13043: ST_TO_ADDR
13044: GO 13096
13046: LD_INT 2
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13057
13054: POP
// ; 3 :
13055: GO 13096
13057: LD_INT 3
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13076
13065: POP
// achiv := ACH_MOTSU ; 4 :
13066: LD_ADDR_VAR 0 7
13070: PUSH
13071: LD_STRING ACH_MOTSU
13073: ST_TO_ADDR
13074: GO 13096
13076: LD_INT 4
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13095
13084: POP
// achiv := ACH_LOP ; end ;
13085: LD_ADDR_VAR 0 7
13089: PUSH
13090: LD_STRING ACH_LOP
13092: ST_TO_ADDR
13093: GO 13096
13095: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13096: LD_OWVAR 67
13100: PUSH
13101: LD_INT 3
13103: EQUAL
13104: PUSH
13105: LD_VAR 0 7
13109: AND
13110: PUSH
13111: LD_VAR 0 3
13115: AND
13116: PUSH
13117: LD_VAR 0 4
13121: AND
13122: PUSH
13123: LD_VAR 0 5
13127: AND
13128: IFFALSE 13144
// SetAchievementEX ( achiv , missionNumber ) ;
13130: LD_VAR 0 7
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 564
// end ;
13144: LD_VAR 0 6
13148: RET
// export function SA_BehemothConstructed ; begin
13149: LD_INT 0
13151: PPUSH
// SetAchievement ( ACH_SMC ) ;
13152: LD_STRING ACH_SMC
13154: PPUSH
13155: CALL_OW 543
// end ;
13159: LD_VAR 0 1
13163: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13164: LD_VAR 0 2
13168: PUSH
13169: LD_INT 1
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13184
13177: POP
// HackUnlimitedResources ; 2 :
13178: CALL 13368 0 0
13182: GO 13365
13184: LD_INT 2
13186: DOUBLE
13187: EQUAL
13188: IFTRUE 13192
13190: GO 13199
13192: POP
// HackSetLevel10 ; 3 :
13193: CALL 13501 0 0
13197: GO 13365
13199: LD_INT 3
13201: DOUBLE
13202: EQUAL
13203: IFTRUE 13207
13205: GO 13214
13207: POP
// HackSetLevel10YourUnits ; 4 :
13208: CALL 13586 0 0
13212: GO 13365
13214: LD_INT 4
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13244
13222: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_VAR 0 4
13232: PPUSH
13233: LD_VAR 0 5
13237: PPUSH
13238: CALL 13676 0 3
13242: GO 13365
13244: LD_INT 5
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13259
13252: POP
// HackSpawnVehicle ; 6 :
13253: CALL 13737 0 0
13257: GO 13365
13259: LD_INT 6
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13274
13267: POP
// HackInvincible ; 7 :
13268: CALL 14812 0 0
13272: GO 13365
13274: LD_INT 7
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13289
13282: POP
// HackInvisible ; 8 :
13283: CALL 14923 0 0
13287: GO 13365
13289: LD_INT 8
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13304
13297: POP
// HackChangeYourSide ; 9 :
13298: CALL 14980 0 0
13302: GO 13365
13304: LD_INT 9
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13319
13312: POP
// HackChangeUnitSide ; 10 :
13313: CALL 15022 0 0
13317: GO 13365
13319: LD_INT 10
13321: DOUBLE
13322: EQUAL
13323: IFTRUE 13327
13325: GO 13334
13327: POP
// HackFog ; 11 :
13328: CALL 15123 0 0
13332: GO 13365
13334: LD_INT 11
13336: DOUBLE
13337: EQUAL
13338: IFTRUE 13342
13340: GO 13349
13342: POP
// HackApeman ; 12 :
13343: CALL 15138 0 0
13347: GO 13365
13349: LD_INT 12
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13364
13357: POP
// HackBoom ; end ;
13358: CALL 15223 0 0
13362: GO 13365
13364: POP
// end ;
13365: PPOPN 6
13367: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 22
13381: PUSH
13382: LD_OWVAR 2
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 0
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 30
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 69
13427: ST_TO_ADDR
// if not tmp then
13428: LD_VAR 0 4
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 13496
// for i in tmp do
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_VAR 0 4
13446: PUSH
13447: FOR_IN
13448: IFFALSE 13494
// for j = 1 to 3 do
13450: LD_ADDR_VAR 0 3
13454: PUSH
13455: DOUBLE
13456: LD_INT 1
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 3
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13490
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13466: LD_VAR 0 2
13470: PPUSH
13471: CALL_OW 274
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 99999
13483: PPUSH
13484: CALL_OW 277
13488: GO 13463
13490: POP
13491: POP
13492: GO 13447
13494: POP
13495: POP
// end ;
13496: LD_VAR 0 1
13500: RET
// export function HackSetLevel10 ; var i , j ; begin
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
13505: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13506: LD_ADDR_VAR 0 2
13510: PUSH
13511: LD_INT 21
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13579
// if IsSelected ( i ) then
13529: LD_VAR 0 2
13533: PPUSH
13534: CALL_OW 306
13538: IFFALSE 13577
// begin for j := 1 to 4 do
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: DOUBLE
13546: LD_INT 1
13548: DEC
13549: ST_TO_ADDR
13550: LD_INT 4
13552: PUSH
13553: FOR_TO
13554: IFFALSE 13575
// SetSkill ( i , j , 10 ) ;
13556: LD_VAR 0 2
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: LD_INT 10
13568: PPUSH
13569: CALL_OW 237
13573: GO 13553
13575: POP
13576: POP
// end ;
13577: GO 13526
13579: POP
13580: POP
// end ;
13581: LD_VAR 0 1
13585: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13586: LD_INT 0
13588: PPUSH
13589: PPUSH
13590: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: LD_INT 22
13598: PUSH
13599: LD_OWVAR 2
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: PUSH
13627: FOR_IN
13628: IFFALSE 13669
// begin for j := 1 to 4 do
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: DOUBLE
13636: LD_INT 1
13638: DEC
13639: ST_TO_ADDR
13640: LD_INT 4
13642: PUSH
13643: FOR_TO
13644: IFFALSE 13665
// SetSkill ( i , j , 10 ) ;
13646: LD_VAR 0 2
13650: PPUSH
13651: LD_VAR 0 3
13655: PPUSH
13656: LD_INT 10
13658: PPUSH
13659: CALL_OW 237
13663: GO 13643
13665: POP
13666: POP
// end ;
13667: GO 13627
13669: POP
13670: POP
// end ;
13671: LD_VAR 0 1
13675: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13676: LD_INT 0
13678: PPUSH
// uc_side := your_side ;
13679: LD_ADDR_OWVAR 20
13683: PUSH
13684: LD_OWVAR 2
13688: ST_TO_ADDR
// uc_nation := nation ;
13689: LD_ADDR_OWVAR 21
13693: PUSH
13694: LD_VAR 0 1
13698: ST_TO_ADDR
// InitHc ;
13699: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13703: LD_INT 0
13705: PPUSH
13706: LD_VAR 0 2
13710: PPUSH
13711: LD_VAR 0 3
13715: PPUSH
13716: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13720: CALL_OW 44
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 51
// end ;
13732: LD_VAR 0 4
13736: RET
// export function HackSpawnVehicle ; begin
13737: LD_INT 0
13739: PPUSH
// uc_side := your_side ;
13740: LD_ADDR_OWVAR 20
13744: PUSH
13745: LD_OWVAR 2
13749: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13750: LD_ADDR_OWVAR 21
13754: PUSH
13755: LD_INT 1
13757: PPUSH
13758: LD_INT 3
13760: PPUSH
13761: CALL_OW 12
13765: ST_TO_ADDR
// InitVc ;
13766: CALL_OW 20
// case uc_nation of 1 :
13770: LD_OWVAR 21
13774: PUSH
13775: LD_INT 1
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 14090
13783: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
13784: LD_ADDR_OWVAR 37
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: LD_INT 3
13797: PUSH
13798: LD_INT 4
13800: PUSH
13801: LD_INT 5
13803: PUSH
13804: LD_INT 11
13806: PUSH
13807: LD_INT 12
13809: PUSH
13810: LD_INT 13
13812: PUSH
13813: LD_INT 14
13815: PUSH
13816: LD_INT 21
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 23
13824: PUSH
13825: LD_INT 24
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 1
13845: PPUSH
13846: LD_INT 13
13848: PPUSH
13849: CALL_OW 12
13853: ARRAY
13854: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
13855: LD_ADDR_OWVAR 38
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: LD_INT 3
13865: PUSH
13866: LD_INT 4
13868: PUSH
13869: LD_INT 5
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 1
13880: PPUSH
13881: LD_INT 4
13883: PPUSH
13884: CALL_OW 12
13888: ARRAY
13889: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
13890: LD_ADDR_OWVAR 39
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 3
13914: PPUSH
13915: CALL_OW 12
13919: ARRAY
13920: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
13921: LD_ADDR_OWVAR 40
13925: PUSH
13926: LD_INT 14
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 13
13934: PUSH
13935: LD_INT 5
13937: PUSH
13938: LD_INT 10
13940: PUSH
13941: LD_INT 4
13943: PUSH
13944: LD_INT 6
13946: PUSH
13947: LD_INT 9
13949: PUSH
13950: LD_INT 3
13952: PUSH
13953: LD_INT 2
13955: PUSH
13956: LD_INT 11
13958: PUSH
13959: LD_INT 7
13961: PUSH
13962: LD_INT 8
13964: PUSH
13965: LD_INT 15
13967: PUSH
13968: LD_INT 32
13970: PUSH
13971: LD_INT 31
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 26
13979: PUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 27
13985: PUSH
13986: LD_INT 23
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 30
13994: PUSH
13995: LD_INT 28
13997: PUSH
13998: LD_INT 29
14000: PUSH
14001: LD_INT 53
14003: PUSH
14004: LD_INT 51
14006: PUSH
14007: LD_INT 52
14009: PUSH
14010: LD_INT 43
14012: PUSH
14013: LD_INT 44
14015: PUSH
14016: LD_INT 46
14018: PUSH
14019: LD_INT 42
14021: PUSH
14022: LD_INT 47
14024: PUSH
14025: LD_INT 45
14027: PUSH
14028: LD_INT 48
14030: PUSH
14031: LD_INT 55
14033: PUSH
14034: LD_INT 49
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 1
14078: PPUSH
14079: LD_INT 37
14081: PPUSH
14082: CALL_OW 12
14086: ARRAY
14087: ST_TO_ADDR
// end ; 2 :
14088: GO 14721
14090: LD_INT 2
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14405
14098: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14099: LD_ADDR_OWVAR 37
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: LD_INT 2
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: LD_INT 4
14115: PUSH
14116: LD_INT 5
14118: PUSH
14119: LD_INT 11
14121: PUSH
14122: LD_INT 12
14124: PUSH
14125: LD_INT 13
14127: PUSH
14128: LD_INT 14
14130: PUSH
14131: LD_INT 21
14133: PUSH
14134: LD_INT 22
14136: PUSH
14137: LD_INT 23
14139: PUSH
14140: LD_INT 24
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 1
14160: PPUSH
14161: LD_INT 13
14163: PPUSH
14164: CALL_OW 12
14168: ARRAY
14169: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14170: LD_ADDR_OWVAR 38
14174: PUSH
14175: LD_INT 1
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: LD_INT 4
14183: PUSH
14184: LD_INT 5
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 1
14195: PPUSH
14196: LD_INT 4
14198: PPUSH
14199: CALL_OW 12
14203: ARRAY
14204: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14205: LD_ADDR_OWVAR 39
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: LD_INT 2
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 1
14226: PPUSH
14227: LD_INT 3
14229: PPUSH
14230: CALL_OW 12
14234: ARRAY
14235: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14236: LD_ADDR_OWVAR 40
14240: PUSH
14241: LD_INT 14
14243: PUSH
14244: LD_INT 12
14246: PUSH
14247: LD_INT 13
14249: PUSH
14250: LD_INT 5
14252: PUSH
14253: LD_INT 10
14255: PUSH
14256: LD_INT 4
14258: PUSH
14259: LD_INT 6
14261: PUSH
14262: LD_INT 9
14264: PUSH
14265: LD_INT 3
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 11
14273: PUSH
14274: LD_INT 7
14276: PUSH
14277: LD_INT 8
14279: PUSH
14280: LD_INT 15
14282: PUSH
14283: LD_INT 32
14285: PUSH
14286: LD_INT 31
14288: PUSH
14289: LD_INT 24
14291: PUSH
14292: LD_INT 26
14294: PUSH
14295: LD_INT 25
14297: PUSH
14298: LD_INT 27
14300: PUSH
14301: LD_INT 23
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 28
14312: PUSH
14313: LD_INT 29
14315: PUSH
14316: LD_INT 53
14318: PUSH
14319: LD_INT 51
14321: PUSH
14322: LD_INT 52
14324: PUSH
14325: LD_INT 43
14327: PUSH
14328: LD_INT 44
14330: PUSH
14331: LD_INT 46
14333: PUSH
14334: LD_INT 42
14336: PUSH
14337: LD_INT 47
14339: PUSH
14340: LD_INT 45
14342: PUSH
14343: LD_INT 48
14345: PUSH
14346: LD_INT 55
14348: PUSH
14349: LD_INT 49
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 1
14393: PPUSH
14394: LD_INT 37
14396: PPUSH
14397: CALL_OW 12
14401: ARRAY
14402: ST_TO_ADDR
// end ; 3 :
14403: GO 14721
14405: LD_INT 3
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14720
14413: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14414: LD_ADDR_OWVAR 37
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: LD_INT 2
14424: PUSH
14425: LD_INT 3
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: LD_INT 5
14433: PUSH
14434: LD_INT 11
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: LD_INT 13
14442: PUSH
14443: LD_INT 14
14445: PUSH
14446: LD_INT 21
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_INT 23
14454: PUSH
14455: LD_INT 24
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 1
14475: PPUSH
14476: LD_INT 13
14478: PPUSH
14479: CALL_OW 12
14483: ARRAY
14484: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14485: LD_ADDR_OWVAR 38
14489: PUSH
14490: LD_INT 1
14492: PUSH
14493: LD_INT 3
14495: PUSH
14496: LD_INT 4
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 1
14510: PPUSH
14511: LD_INT 4
14513: PPUSH
14514: CALL_OW 12
14518: ARRAY
14519: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14520: LD_ADDR_OWVAR 39
14524: PUSH
14525: LD_INT 1
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 1
14541: PPUSH
14542: LD_INT 3
14544: PPUSH
14545: CALL_OW 12
14549: ARRAY
14550: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14551: LD_ADDR_OWVAR 40
14555: PUSH
14556: LD_INT 14
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 13
14564: PUSH
14565: LD_INT 5
14567: PUSH
14568: LD_INT 10
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 6
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 11
14588: PUSH
14589: LD_INT 7
14591: PUSH
14592: LD_INT 8
14594: PUSH
14595: LD_INT 15
14597: PUSH
14598: LD_INT 32
14600: PUSH
14601: LD_INT 31
14603: PUSH
14604: LD_INT 24
14606: PUSH
14607: LD_INT 26
14609: PUSH
14610: LD_INT 25
14612: PUSH
14613: LD_INT 27
14615: PUSH
14616: LD_INT 23
14618: PUSH
14619: LD_INT 22
14621: PUSH
14622: LD_INT 30
14624: PUSH
14625: LD_INT 28
14627: PUSH
14628: LD_INT 29
14630: PUSH
14631: LD_INT 53
14633: PUSH
14634: LD_INT 51
14636: PUSH
14637: LD_INT 52
14639: PUSH
14640: LD_INT 43
14642: PUSH
14643: LD_INT 44
14645: PUSH
14646: LD_INT 46
14648: PUSH
14649: LD_INT 42
14651: PUSH
14652: LD_INT 47
14654: PUSH
14655: LD_INT 45
14657: PUSH
14658: LD_INT 48
14660: PUSH
14661: LD_INT 55
14663: PUSH
14664: LD_INT 49
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 37
14711: PPUSH
14712: CALL_OW 12
14716: ARRAY
14717: ST_TO_ADDR
// end ; end ;
14718: GO 14721
14720: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14721: CALL_OW 45
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 51
// end ;
14733: LD_VAR 0 1
14737: RET
// export invincible ; every 1 do
14738: GO 14740
14740: DISABLE
// invincible := [ ] ;
14741: LD_ADDR_EXP 54
14745: PUSH
14746: EMPTY
14747: ST_TO_ADDR
14748: END
// every 10 do var i ;
14749: GO 14751
14751: DISABLE
14752: LD_INT 0
14754: PPUSH
// begin enable ;
14755: ENABLE
// if not invincible then
14756: LD_EXP 54
14760: NOT
14761: IFFALSE 14765
// exit ;
14763: GO 14809
// for i in invincible do
14765: LD_ADDR_VAR 0 1
14769: PUSH
14770: LD_EXP 54
14774: PUSH
14775: FOR_IN
14776: IFFALSE 14807
// if GetLives ( i ) < 1000 then
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 256
14787: PUSH
14788: LD_INT 1000
14790: LESS
14791: IFFALSE 14805
// SetLives ( i , 1000 ) ;
14793: LD_VAR 0 1
14797: PPUSH
14798: LD_INT 1000
14800: PPUSH
14801: CALL_OW 234
14805: GO 14775
14807: POP
14808: POP
// end ;
14809: PPOPN 1
14811: END
// export function HackInvincible ; var i ; begin
14812: LD_INT 0
14814: PPUSH
14815: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14816: LD_ADDR_VAR 0 2
14820: PUSH
14821: LD_INT 2
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 1
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PPUSH
14849: CALL_OW 69
14853: PUSH
14854: FOR_IN
14855: IFFALSE 14916
// if IsSelected ( i ) then
14857: LD_VAR 0 2
14861: PPUSH
14862: CALL_OW 306
14866: IFFALSE 14914
// begin if i in invincible then
14868: LD_VAR 0 2
14872: PUSH
14873: LD_EXP 54
14877: IN
14878: IFFALSE 14898
// invincible := invincible diff i else
14880: LD_ADDR_EXP 54
14884: PUSH
14885: LD_EXP 54
14889: PUSH
14890: LD_VAR 0 2
14894: DIFF
14895: ST_TO_ADDR
14896: GO 14914
// invincible := invincible union i ;
14898: LD_ADDR_EXP 54
14902: PUSH
14903: LD_EXP 54
14907: PUSH
14908: LD_VAR 0 2
14912: UNION
14913: ST_TO_ADDR
// end ;
14914: GO 14854
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 1
14922: RET
// export function HackInvisible ; var i , j ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 69
14947: PUSH
14948: FOR_IN
14949: IFFALSE 14973
// if IsSelected ( i ) then
14951: LD_VAR 0 2
14955: PPUSH
14956: CALL_OW 306
14960: IFFALSE 14971
// begin ComForceInvisible ( i ) ;
14962: LD_VAR 0 2
14966: PPUSH
14967: CALL_OW 496
// end ;
14971: GO 14948
14973: POP
14974: POP
// end ;
14975: LD_VAR 0 1
14979: RET
// export function HackChangeYourSide ; begin
14980: LD_INT 0
14982: PPUSH
// if your_side = 8 then
14983: LD_OWVAR 2
14987: PUSH
14988: LD_INT 8
14990: EQUAL
14991: IFFALSE 15003
// your_side := 0 else
14993: LD_ADDR_OWVAR 2
14997: PUSH
14998: LD_INT 0
15000: ST_TO_ADDR
15001: GO 15017
// your_side := your_side + 1 ;
15003: LD_ADDR_OWVAR 2
15007: PUSH
15008: LD_OWVAR 2
15012: PUSH
15013: LD_INT 1
15015: PLUS
15016: ST_TO_ADDR
// end ;
15017: LD_VAR 0 1
15021: RET
// export function HackChangeUnitSide ; var i , j ; begin
15022: LD_INT 0
15024: PPUSH
15025: PPUSH
15026: PPUSH
// for i in all_units do
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_OWVAR 3
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15116
// if IsSelected ( i ) then
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 306
15049: IFFALSE 15114
// begin j := GetSide ( i ) ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 2
15060: PPUSH
15061: CALL_OW 255
15065: ST_TO_ADDR
// if j = 8 then
15066: LD_VAR 0 3
15070: PUSH
15071: LD_INT 8
15073: EQUAL
15074: IFFALSE 15086
// j := 0 else
15076: LD_ADDR_VAR 0 3
15080: PUSH
15081: LD_INT 0
15083: ST_TO_ADDR
15084: GO 15100
// j := j + 1 ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_VAR 0 3
15095: PUSH
15096: LD_INT 1
15098: PLUS
15099: ST_TO_ADDR
// SetSide ( i , j ) ;
15100: LD_VAR 0 2
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: CALL_OW 235
// end ;
15114: GO 15037
15116: POP
15117: POP
// end ;
15118: LD_VAR 0 1
15122: RET
// export function HackFog ; begin
15123: LD_INT 0
15125: PPUSH
// FogOff ( true ) ;
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 344
// end ;
15133: LD_VAR 0 1
15137: RET
// export function HackApeman ; begin
15138: LD_INT 0
15140: PPUSH
// uc_side := your_side ;
15141: LD_ADDR_OWVAR 20
15145: PUSH
15146: LD_OWVAR 2
15150: ST_TO_ADDR
// uc_nation := 0 ;
15151: LD_ADDR_OWVAR 21
15155: PUSH
15156: LD_INT 0
15158: ST_TO_ADDR
// hc_name :=  ;
15159: LD_ADDR_OWVAR 26
15163: PUSH
15164: LD_STRING 
15166: ST_TO_ADDR
// hc_gallery :=  ;
15167: LD_ADDR_OWVAR 33
15171: PUSH
15172: LD_STRING 
15174: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15175: LD_ADDR_OWVAR 31
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 0
15185: PUSH
15186: LD_INT 0
15188: PUSH
15189: LD_INT 0
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: ST_TO_ADDR
// hc_class := class_apeman ;
15198: LD_ADDR_OWVAR 28
15202: PUSH
15203: LD_INT 12
15205: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15206: CALL_OW 44
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 51
// end ;
15218: LD_VAR 0 1
15222: RET
// export function HackBoom ; begin
15223: LD_INT 0
15225: PPUSH
// uc_side := your_side ;
15226: LD_ADDR_OWVAR 20
15230: PUSH
15231: LD_OWVAR 2
15235: ST_TO_ADDR
// uc_nation := 1 ;
15236: LD_ADDR_OWVAR 21
15240: PUSH
15241: LD_INT 1
15243: ST_TO_ADDR
// vc_chassis := us_morphling ;
15244: LD_ADDR_OWVAR 37
15248: PUSH
15249: LD_INT 5
15251: ST_TO_ADDR
// vc_engine := engine_siberite ;
15252: LD_ADDR_OWVAR 39
15256: PUSH
15257: LD_INT 3
15259: ST_TO_ADDR
// vc_control := control_computer ;
15260: LD_ADDR_OWVAR 38
15264: PUSH
15265: LD_INT 3
15267: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
15268: LD_ADDR_OWVAR 40
15272: PUSH
15273: LD_INT 8
15275: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15276: CALL_OW 45
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 51
// end ;
15288: LD_VAR 0 1
15292: RET
