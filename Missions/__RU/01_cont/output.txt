// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 276 0 0
// PrepareNature ;
  24: CALL 11809 0 0
// PrepareRussian ;
  28: CALL 11127 0 0
// PrepareAmericans ;
  32: CALL 10700 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 10
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 12
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 13
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 16
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 17
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 18
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 19
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 14
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 20
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 22
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 21
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 9
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 22
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: PUSH
 210: LD_INT 25
 212: PUSH
 213: LD_INT 12
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PPUSH
 224: CALL_OW 69
 228: PUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 22
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 25
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: PPUSH
 256: CALL_OW 69
 260: PPUSH
 261: CALL_OW 12
 265: ARRAY
 266: ST_TO_ADDR
// MissionIntro ;
 267: CALL 807 0 0
// end ; end_of_file
 271: LD_VAR 0 1
 275: RET
// export function InitMapConfig ; begin
 276: LD_INT 0
 278: PPUSH
// BaseMapConfig ;
 279: CALL 292 0 0
// MissionMapConfig ;
 283: CALL 378 0 0
// end ;
 287: LD_VAR 0 1
 291: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 292: LD_INT 0
 294: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 295: LD_ADDR_EXP 23
 299: PUSH
 300: LD_INT 5
 302: PUSH
 303: LD_INT 4
 305: PUSH
 306: LD_INT 2
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 318: LD_ADDR_EXP 24
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: LD_INT 2
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: ST_TO_ADDR
// animalsAgression = 0 ;
 341: LD_ADDR_EXP 25
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// debugMode = 0 ;
 349: LD_ADDR_EXP 28
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// missionPrefix = 01_ ;
 357: LD_ADDR_EXP 26
 361: PUSH
 362: LD_STRING 01_
 364: ST_TO_ADDR
// previousMissionPrefix =  ;
 365: LD_ADDR_EXP 27
 369: PUSH
 370: LD_STRING 
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 378: LD_INT 0
 380: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 381: LD_ADDR_EXP 29
 385: PUSH
 386: LD_INT 800
 388: PUSH
 389: LD_INT 900
 391: PUSH
 392: LD_INT 950
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 406: LD_ADDR_EXP 30
 410: PUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 5
 416: PPUSH
 417: CALL_OW 12
 421: PUSH
 422: LD_OWVAR 67
 426: MUL
 427: ST_TO_ADDR
// amApeAmount = [ 3 , 4 , 5 ] [ Difficulty ] ;
 428: LD_ADDR_EXP 31
 432: PUSH
 433: LD_INT 3
 435: PUSH
 436: LD_INT 4
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 453: LD_ADDR_EXP 32
 457: PUSH
 458: LD_INT 0
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 2
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: PUSH
 472: LD_OWVAR 67
 476: ARRAY
 477: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 478: LD_ADDR_EXP 33
 482: PUSH
 483: LD_INT 78
 485: PUSH
 486: LD_INT 87
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 15 , 7 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 493: LD_ADDR_EXP 34
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 7
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 99
 510: PUSH
 511: LD_INT 7
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 131
 520: PUSH
 521: LD_INT 81
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 533: LD_ADDR_EXP 35
 537: PUSH
 538: LD_INT 21000
 540: PUSH
 541: LD_INT 16800
 543: PUSH
 544: LD_INT 12600
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: PUSH
 552: LD_OWVAR 67
 556: ARRAY
 557: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 558: LD_ADDR_EXP 36
 562: PUSH
 563: LD_INT 6300
 565: PUSH
 566: LD_INT 5250
 568: PUSH
 569: LD_INT 4200
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: PUSH
 577: LD_OWVAR 67
 581: ARRAY
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 1
 587: RET
// every 0 0$1 trigger debugMode do var i ;
 588: LD_EXP 28
 592: IFFALSE 804
 594: GO 596
 596: DISABLE
 597: LD_INT 0
 599: PPUSH
// begin enable ;
 600: ENABLE
// FogOff ( your_side ) ;
 601: LD_OWVAR 2
 605: PPUSH
 606: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 610: LD_ADDR_VAR 0 1
 614: PUSH
 615: LD_INT 22
 617: PUSH
 618: LD_OWVAR 2
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: LD_INT 21
 632: PUSH
 633: LD_INT 1
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 21
 642: PUSH
 643: LD_INT 2
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PPUSH
 659: CALL_OW 69
 663: PUSH
 664: FOR_IN
 665: IFFALSE 681
// SetLives ( i , 1000 ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_INT 1000
 674: PPUSH
 675: CALL_OW 234
 679: GO 664
 681: POP
 682: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 683: LD_ADDR_VAR 0 1
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_OWVAR 2
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: PUSH
 700: LD_INT 2
 702: PUSH
 703: LD_INT 30
 705: PUSH
 706: LD_INT 0
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 30
 715: PUSH
 716: LD_INT 1
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PPUSH
 732: CALL_OW 69
 736: PUSH
 737: FOR_IN
 738: IFFALSE 802
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: CALL_OW 274
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 9999
 755: PPUSH
 756: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 760: LD_VAR 0 1
 764: PPUSH
 765: CALL_OW 274
 769: PPUSH
 770: LD_INT 2
 772: PPUSH
 773: LD_INT 9999
 775: PPUSH
 776: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 780: LD_VAR 0 1
 784: PPUSH
 785: CALL_OW 274
 789: PPUSH
 790: LD_INT 3
 792: PPUSH
 793: LD_INT 9999
 795: PPUSH
 796: CALL_OW 277
// end ;
 800: GO 737
 802: POP
 803: POP
// end ; end_of_file
 804: PPOPN 1
 806: END
// export function MissionIntro ; begin
 807: LD_INT 0
 809: PPUSH
// InGameOn ;
 810: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 814: LD_EXP 33
 818: PUSH
 819: LD_INT 1
 821: ARRAY
 822: PUSH
 823: LD_INT 8
 825: MINUS
 826: PPUSH
 827: LD_EXP 33
 831: PUSH
 832: LD_INT 2
 834: ARRAY
 835: PUSH
 836: LD_INT 8
 838: MINUS
 839: PPUSH
 840: CALL_OW 84
// wait ( 0 0$3 ) ;
 844: LD_INT 105
 846: PPUSH
 847: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 851: LD_EXP 41
 855: PPUSH
 856: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 860: LD_EXP 41
 864: PPUSH
 865: LD_STRING D1-Bur-1
 867: PPUSH
 868: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 872: LD_EXP 41
 876: PPUSH
 877: LD_INT 94
 879: PPUSH
 880: LD_INT 89
 882: PPUSH
 883: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 887: LD_INT 94
 889: PPUSH
 890: LD_INT 89
 892: PPUSH
 893: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 897: LD_EXP 41
 901: PPUSH
 902: LD_STRING D1-Bur-1a
 904: PPUSH
 905: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 909: LD_EXP 41
 913: PPUSH
 914: LD_INT 102
 916: PPUSH
 917: LD_INT 88
 919: PPUSH
 920: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 924: LD_INT 102
 926: PPUSH
 927: LD_INT 88
 929: PPUSH
 930: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 934: LD_EXP 41
 938: PPUSH
 939: LD_STRING D1-Bur-1b
 941: PPUSH
 942: CALL_OW 88
// InGameOff ;
 946: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 950: LD_STRING M1
 952: PPUSH
 953: CALL_OW 337
// SaveForQuickRestart ;
 957: CALL_OW 22
// introEnd = true ;
 961: LD_ADDR_EXP 3
 965: PUSH
 966: LD_INT 1
 968: ST_TO_ADDR
// end ;
 969: LD_VAR 0 1
 973: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
 974: LD_EXP 41
 978: PPUSH
 979: LD_INT 74
 981: PPUSH
 982: LD_INT 88
 984: PPUSH
 985: CALL_OW 297
 989: PUSH
 990: LD_INT 5
 992: LESS
 993: PUSH
 994: LD_EXP 3
 998: AND
 999: IFFALSE 1024
1001: GO 1003
1003: DISABLE
// begin spotWaterfall = true ;
1004: LD_ADDR_EXP 6
1008: PUSH
1009: LD_INT 1
1011: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1012: LD_EXP 41
1016: PPUSH
1017: LD_STRING DWaterfall-Bur-1
1019: PPUSH
1020: CALL_OW 88
// end ;
1024: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1025: LD_EXP 41
1029: PPUSH
1030: LD_INT 130
1032: PPUSH
1033: LD_INT 96
1035: PPUSH
1036: CALL_OW 297
1040: PUSH
1041: LD_INT 5
1043: LESS
1044: PUSH
1045: LD_EXP 3
1049: AND
1050: IFFALSE 1067
1052: GO 1054
1054: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1055: LD_EXP 41
1059: PPUSH
1060: LD_STRING DCorpse-Bur-1
1062: PPUSH
1063: CALL_OW 88
1067: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1068: LD_EXP 4
1072: NOT
1073: IFFALSE 1167
1075: GO 1077
1077: DISABLE
1078: LD_INT 0
1080: PPUSH
// begin enable ;
1081: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1082: LD_ADDR_VAR 0 1
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 25
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PPUSH
1111: CALL_OW 69
1115: PUSH
1116: FOR_IN
1117: IFFALSE 1165
// if GetDistUnits ( apeman , Burlak ) < 7 then
1119: LD_VAR 0 1
1123: PPUSH
1124: LD_EXP 41
1128: PPUSH
1129: CALL_OW 296
1133: PUSH
1134: LD_INT 7
1136: LESS
1137: IFFALSE 1163
// begin apemansContact = true ;
1139: LD_ADDR_EXP 4
1143: PUSH
1144: LD_INT 1
1146: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1147: LD_EXP 41
1151: PPUSH
1152: LD_STRING D2-Bur-1
1154: PPUSH
1155: CALL_OW 88
// exit ;
1159: POP
1160: POP
1161: GO 1167
// end ;
1163: GO 1116
1165: POP
1166: POP
// end ;
1167: PPOPN 1
1169: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1170: LD_EXP 5
1174: NOT
1175: IFFALSE 1291
1177: GO 1179
1179: DISABLE
1180: LD_INT 0
1182: PPUSH
1183: PPUSH
// begin enable ;
1184: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 0
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 25
1202: PUSH
1203: LD_INT 12
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PPUSH
1214: CALL_OW 69
1218: PUSH
1219: FOR_IN
1220: IFFALSE 1289
// if Attacks ( apeman ) then
1222: LD_VAR 0 2
1226: PPUSH
1227: CALL_OW 320
1231: IFFALSE 1287
// if GetSide ( Attacks ( apeman ) ) = 3 then
1233: LD_VAR 0 2
1237: PPUSH
1238: CALL_OW 320
1242: PPUSH
1243: CALL_OW 255
1247: PUSH
1248: LD_INT 3
1250: EQUAL
1251: IFFALSE 1287
// begin attackedByApeman = true ;
1253: LD_ADDR_EXP 5
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1261: LD_ADDR_EXP 7
1265: PUSH
1266: LD_VAR 0 2
1270: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1271: LD_EXP 41
1275: PPUSH
1276: LD_STRING D2-Bur-1a
1278: PPUSH
1279: CALL_OW 88
// exit ;
1283: POP
1284: POP
1285: GO 1291
// end ;
1287: GO 1219
1289: POP
1290: POP
// end ;
1291: PPOPN 2
1293: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1294: LD_EXP 8
1298: PPUSH
1299: CALL_OW 303
1303: IFFALSE 1337
1305: GO 1307
1307: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1308: LD_ADDR_EXP 9
1312: PUSH
1313: LD_EXP 8
1317: PPUSH
1318: CALL_OW 250
1322: PUSH
1323: LD_EXP 8
1327: PPUSH
1328: CALL_OW 251
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: ST_TO_ADDR
1337: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1338: LD_EXP 8
1342: PPUSH
1343: CALL_OW 301
1347: PUSH
1348: LD_INT 3
1350: PPUSH
1351: LD_EXP 9
1355: PUSH
1356: LD_INT 1
1358: ARRAY
1359: PPUSH
1360: LD_EXP 9
1364: PUSH
1365: LD_INT 2
1367: ARRAY
1368: PPUSH
1369: CALL_OW 293
1373: AND
1374: IFFALSE 1775
1376: GO 1378
1378: DISABLE
1379: LD_INT 0
1381: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1382: LD_EXP 41
1386: PPUSH
1387: LD_STRING D2a-Bur-1
1389: PPUSH
1390: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1394: LD_INT 22
1396: PUSH
1397: LD_INT 3
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 21
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PPUSH
1418: CALL_OW 69
1422: PUSH
1423: LD_INT 1
1425: EQUAL
1426: IFFALSE 1442
// Say ( Burlak , D2a-Bur-2 ) else
1428: LD_EXP 41
1432: PPUSH
1433: LD_STRING D2a-Bur-2
1435: PPUSH
1436: CALL_OW 88
1440: GO 1775
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1442: LD_ADDR_VAR 0 1
1446: PUSH
1447: LD_INT 22
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 21
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 69
1475: PPUSH
1476: LD_EXP 9
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: LD_EXP 9
1489: PUSH
1490: LD_INT 2
1492: ARRAY
1493: PPUSH
1494: CALL_OW 73
1498: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1499: LD_VAR 0 1
1503: PPUSH
1504: LD_EXP 9
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: LD_EXP 9
1517: PUSH
1518: LD_INT 2
1520: ARRAY
1521: PPUSH
1522: CALL_OW 111
// case nearUnit of Burlak :
1526: LD_VAR 0 1
1530: PUSH
1531: LD_EXP 41
1535: DOUBLE
1536: EQUAL
1537: IFTRUE 1541
1539: GO 1556
1541: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1542: LD_EXP 41
1546: PPUSH
1547: LD_STRING D3-Bur-2a
1549: PPUSH
1550: CALL_OW 88
1554: GO 1648
1556: LD_EXP 46
1560: DOUBLE
1561: EQUAL
1562: IFTRUE 1566
1564: GO 1581
1566: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1567: LD_EXP 46
1571: PPUSH
1572: LD_STRING D2a-Bel-1
1574: PPUSH
1575: CALL_OW 88
1579: GO 1648
1581: LD_EXP 48
1585: DOUBLE
1586: EQUAL
1587: IFTRUE 1591
1589: GO 1606
1591: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1592: LD_EXP 48
1596: PPUSH
1597: LD_STRING D2a-Kir-1
1599: PPUSH
1600: CALL_OW 88
1604: GO 1648
1606: POP
// if GetSex ( nearUnit ) = sex_male then
1607: LD_VAR 0 1
1611: PPUSH
1612: CALL_OW 258
1616: PUSH
1617: LD_INT 1
1619: EQUAL
1620: IFFALSE 1636
// Say ( nearUnit , D2a-RSol1-1 ) else
1622: LD_VAR 0 1
1626: PPUSH
1627: LD_STRING D2a-RSol1-1
1629: PPUSH
1630: CALL_OW 88
1634: GO 1648
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1636: LD_VAR 0 1
1640: PPUSH
1641: LD_STRING D2a-RFSol1-1
1643: PPUSH
1644: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1648: LD_EXP 49
1652: PPUSH
1653: CALL_OW 255
1657: PUSH
1658: LD_INT 3
1660: EQUAL
1661: PUSH
1662: LD_EXP 49
1666: PPUSH
1667: CALL_OW 302
1671: AND
1672: IFFALSE 1686
// Say ( Gnyevko , D2a-Gny-1 ) ;
1674: LD_EXP 49
1678: PPUSH
1679: LD_STRING D2a-Gny-1
1681: PPUSH
1682: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1686: LD_EXP 8
1690: PUSH
1691: LD_EXP 7
1695: EQUAL
1696: IFFALSE 1710
// Say ( Burlak , D3-Bur-2 ) ;
1698: LD_EXP 41
1702: PPUSH
1703: LD_STRING D3-Bur-2
1705: PPUSH
1706: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1710: LD_EXP 49
1714: PPUSH
1715: CALL_OW 255
1719: PUSH
1720: LD_INT 8
1722: EQUAL
1723: IFFALSE 1775
// begin Say ( Burlak , D12-Bur-1 ) ;
1725: LD_EXP 41
1729: PPUSH
1730: LD_STRING D12-Bur-1
1732: PPUSH
1733: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1737: LD_EXP 46
1741: PPUSH
1742: CALL_OW 255
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: PUSH
1751: LD_EXP 46
1755: PPUSH
1756: CALL_OW 302
1760: AND
1761: IFFALSE 1775
// Say ( Belkov , D12-Bel-2 ) ;
1763: LD_EXP 46
1767: PPUSH
1768: LD_STRING D12-Bel-2
1770: PPUSH
1771: CALL_OW 88
// end ; end ; end ;
1775: PPOPN 1
1777: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1778: LD_INT 3
1780: PPUSH
1781: LD_EXP 49
1785: PPUSH
1786: CALL_OW 292
1790: IFFALSE 2314
1792: GO 1794
1794: DISABLE
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1799: LD_EXP 49
1803: PPUSH
1804: CALL_OW 87
// DialogueOn ;
1808: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1812: LD_ADDR_VAR 0 1
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 21
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PPUSH
1841: CALL_OW 69
1845: PPUSH
1846: LD_EXP 49
1850: PPUSH
1851: CALL_OW 74
1855: ST_TO_ADDR
// if nearUnit = Burlak then
1856: LD_VAR 0 1
1860: PUSH
1861: LD_EXP 41
1865: EQUAL
1866: IFFALSE 2184
// begin Say ( Burlak , D3-Bur-1 ) ;
1868: LD_EXP 41
1872: PPUSH
1873: LD_STRING D3-Bur-1
1875: PPUSH
1876: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
1880: LD_EXP 49
1884: PPUSH
1885: LD_STRING D3-Gny-1
1887: PPUSH
1888: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
1892: LD_EXP 41
1896: PPUSH
1897: LD_STRING D3-Bur-2b
1899: PPUSH
1900: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
1904: LD_INT 22
1906: PUSH
1907: LD_INT 3
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 21
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: PUSH
1937: LD_EXP 12
1941: NOT
1942: AND
1943: IFFALSE 1995
// begin Say ( Burlak , D3-Bur-2c ) ;
1945: LD_EXP 41
1949: PPUSH
1950: LD_STRING D3-Bur-2c
1952: PPUSH
1953: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
1957: LD_EXP 49
1961: PPUSH
1962: LD_STRING D3-Gny-2
1964: PPUSH
1965: CALL_OW 88
// DialogueOff ;
1969: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
1973: LD_EXP 49
1977: PPUSH
1978: LD_INT 3
1980: PPUSH
1981: CALL_OW 235
// gnyevkoSaved = true ;
1985: LD_ADDR_EXP 10
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// exit ;
1993: GO 2314
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
1995: LD_INT 22
1997: PUSH
1998: LD_INT 3
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 21
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PPUSH
2019: CALL_OW 69
2023: PUSH
2024: LD_INT 1
2026: GREATER
2027: PUSH
2028: LD_EXP 12
2032: OR
2033: PUSH
2034: LD_EXP 20
2038: NOT
2039: AND
2040: IFFALSE 2092
// begin Say ( Burlak , D3-Bur-2d ) ;
2042: LD_EXP 41
2046: PPUSH
2047: LD_STRING D3-Bur-2d
2049: PPUSH
2050: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2054: LD_EXP 49
2058: PPUSH
2059: LD_STRING D3-Gny-2
2061: PPUSH
2062: CALL_OW 88
// DialogueOff ;
2066: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2070: LD_EXP 49
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: CALL_OW 235
// gnyevkoSaved = true ;
2082: LD_ADDR_EXP 10
2086: PUSH
2087: LD_INT 1
2089: ST_TO_ADDR
// exit ;
2090: GO 2314
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2092: LD_INT 22
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 21
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PPUSH
2116: CALL_OW 69
2120: PUSH
2121: LD_INT 1
2123: GREATER
2124: PUSH
2125: LD_EXP 20
2129: AND
2130: IFFALSE 2182
// begin Say ( Burlak , D3-Bur-2e ) ;
2132: LD_EXP 41
2136: PPUSH
2137: LD_STRING D3-Bur-2e
2139: PPUSH
2140: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2144: LD_EXP 49
2148: PPUSH
2149: LD_STRING D3-Gny-2
2151: PPUSH
2152: CALL_OW 88
// DialogueOff ;
2156: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2160: LD_EXP 49
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 235
// gnyevkoSaved = true ;
2172: LD_ADDR_EXP 10
2176: PUSH
2177: LD_INT 1
2179: ST_TO_ADDR
// exit ;
2180: GO 2314
// end ; end else
2182: GO 2314
// begin if GetSex ( nearUnit ) = sex_male then
2184: LD_VAR 0 1
2188: PPUSH
2189: CALL_OW 258
2193: PUSH
2194: LD_INT 1
2196: EQUAL
2197: IFFALSE 2213
// Say ( nearUnit , D3-RSol1-1 ) else
2199: LD_VAR 0 1
2203: PPUSH
2204: LD_STRING D3-RSol1-1
2206: PPUSH
2207: CALL_OW 88
2211: GO 2225
// Say ( nearUnit , D3-RFSol1-1 ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_STRING D3-RFSol1-1
2220: PPUSH
2221: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2225: LD_EXP 49
2229: PPUSH
2230: LD_STRING D3-Gny-1
2232: PPUSH
2233: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2237: LD_VAR 0 1
2241: PPUSH
2242: CALL_OW 258
2246: PUSH
2247: LD_INT 1
2249: EQUAL
2250: IFFALSE 2266
// Say ( nearUnit , D3-RSol1-2 ) else
2252: LD_VAR 0 1
2256: PPUSH
2257: LD_STRING D3-RSol1-2
2259: PPUSH
2260: CALL_OW 88
2264: GO 2278
// Say ( nearUnit , D3-RFSol1-2 ) ;
2266: LD_VAR 0 1
2270: PPUSH
2271: LD_STRING D3-RFSol1-2
2273: PPUSH
2274: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2278: LD_EXP 49
2282: PPUSH
2283: LD_STRING D3-Gny-2a
2285: PPUSH
2286: CALL_OW 88
// DialogueOff ;
2290: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2294: LD_EXP 49
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL_OW 235
// gnyevkoSaved = true ;
2306: LD_ADDR_EXP 10
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// end ; end ;
2314: PPOPN 2
2316: END
// every 1 trigger not gnyevkoSaved and not jelenaSaved do var ape ;
2317: LD_EXP 10
2321: NOT
2322: PUSH
2323: LD_EXP 19
2327: NOT
2328: AND
2329: IFFALSE 2524
2331: GO 2333
2333: DISABLE
2334: LD_INT 0
2336: PPUSH
// begin enable ;
2337: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2338: LD_EXP 10
2342: NOT
2343: PUSH
2344: LD_EXP 35
2348: PUSH
2349: LD_INT 70
2351: GREATER
2352: AND
2353: IFFALSE 2431
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2355: LD_ADDR_VAR 0 1
2359: PUSH
2360: LD_INT 22
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 25
2372: PUSH
2373: LD_INT 12
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: PPUSH
2384: CALL_OW 69
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2429
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_EXP 49
2401: PPUSH
2402: CALL_OW 250
2406: PPUSH
2407: LD_EXP 49
2411: PPUSH
2412: CALL_OW 251
2416: PPUSH
2417: LD_INT 10
2419: PPUSH
2420: LD_INT 0
2422: PPUSH
2423: CALL 7882 0 5
2427: GO 2389
2429: POP
2430: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2431: LD_EXP 19
2435: NOT
2436: PUSH
2437: LD_EXP 36
2441: PUSH
2442: LD_INT 70
2444: GREATER
2445: AND
2446: IFFALSE 2524
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: LD_INT 22
2455: PUSH
2456: LD_INT 0
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PUSH
2463: LD_INT 25
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PPUSH
2477: CALL_OW 69
2481: PUSH
2482: FOR_IN
2483: IFFALSE 2522
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2485: LD_VAR 0 1
2489: PPUSH
2490: LD_EXP 48
2494: PPUSH
2495: CALL_OW 250
2499: PPUSH
2500: LD_EXP 48
2504: PPUSH
2505: CALL_OW 251
2509: PPUSH
2510: LD_INT 10
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL 7882 0 5
2520: GO 2482
2522: POP
2523: POP
// end ;
2524: PPOPN 1
2526: END
// every 0 0$1 trigger not gnyevkoSaved and not jelenaSaved do
2527: LD_EXP 10
2531: NOT
2532: PUSH
2533: LD_EXP 19
2537: NOT
2538: AND
2539: IFFALSE 2618
2541: GO 2543
2543: DISABLE
// begin enable ;
2544: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2545: LD_EXP 10
2549: NOT
2550: PUSH
2551: LD_EXP 35
2555: PUSH
2556: LD_INT 0
2558: GREATER
2559: AND
2560: IFFALSE 2576
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2562: LD_ADDR_EXP 35
2566: PUSH
2567: LD_EXP 35
2571: PUSH
2572: LD_INT 35
2574: MINUS
2575: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2576: LD_EXP 48
2580: PPUSH
2581: CALL_OW 305
2585: PUSH
2586: LD_EXP 19
2590: NOT
2591: AND
2592: PUSH
2593: LD_EXP 36
2597: PUSH
2598: LD_INT 0
2600: GREATER
2601: AND
2602: IFFALSE 2618
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2604: LD_ADDR_EXP 36
2608: PUSH
2609: LD_EXP 36
2613: PUSH
2614: LD_INT 35
2616: MINUS
2617: ST_TO_ADDR
// end ;
2618: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2619: LD_INT 3
2621: PPUSH
2622: LD_EXP 42
2626: PPUSH
2627: CALL_OW 292
2631: PUSH
2632: LD_EXP 12
2636: NOT
2637: AND
2638: IFFALSE 3473
2640: GO 2642
2642: DISABLE
// begin enable ;
2643: ENABLE
// InGameOn ;
2644: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2648: LD_EXP 42
2652: PPUSH
2653: CALL_OW 87
// ComHold ( [ Burlak , Gnyevko ] ) ;
2657: LD_EXP 41
2661: PUSH
2662: LD_EXP 49
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 140
// DialogueOn ;
2675: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2679: LD_EXP 11
2683: IFFALSE 2935
// begin meetPokryshkin = true ;
2685: LD_ADDR_EXP 12
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2693: LD_INT 6
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: CALL_OW 343
// DialogueOff ;
2703: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2707: LD_EXP 41
2711: PPUSH
2712: LD_EXP 42
2716: PPUSH
2717: CALL_OW 250
2721: PPUSH
2722: LD_EXP 42
2726: PPUSH
2727: CALL_OW 251
2731: PPUSH
2732: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2736: LD_EXP 41
2740: PPUSH
2741: LD_EXP 42
2745: PPUSH
2746: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2750: LD_EXP 42
2754: PPUSH
2755: LD_EXP 41
2759: PPUSH
2760: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2764: LD_EXP 49
2768: PPUSH
2769: LD_STRING D4-Gny-3
2771: PPUSH
2772: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2776: LD_EXP 41
2780: PPUSH
2781: LD_STRING D4-Bur-3
2783: PPUSH
2784: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2788: LD_EXP 42
2792: PPUSH
2793: LD_STRING D4-Pok-4
2795: PPUSH
2796: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2800: LD_EXP 37
2804: PPUSH
2805: LD_INT 18
2807: PPUSH
2808: LD_INT 1
2810: PPUSH
2811: CALL_OW 49
// wait ( 0 0$2 ) ;
2815: LD_INT 70
2817: PPUSH
2818: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2822: LD_EXP 41
2826: PPUSH
2827: LD_STRING D4-Bur-4
2829: PPUSH
2830: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
2834: LD_EXP 42
2838: PPUSH
2839: LD_STRING D4-Pok-5
2841: PPUSH
2842: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
2846: LD_EXP 37
2850: PPUSH
2851: LD_STRING D4-Sol1-5
2853: PPUSH
2854: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
2858: LD_EXP 42
2862: PPUSH
2863: LD_STRING D4-Pok-6
2865: PPUSH
2866: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
2870: LD_EXP 42
2874: PPUSH
2875: LD_STRING D4-Pok-6a
2877: PPUSH
2878: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
2882: LD_EXP 41
2886: PPUSH
2887: LD_STRING D4-Bur-6
2889: PPUSH
2890: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
2894: LD_EXP 42
2898: PPUSH
2899: LD_STRING D4-Pok-7
2901: PPUSH
2902: CALL_OW 88
// DialogueOff ;
2906: CALL_OW 7
// InGameOff ;
2910: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
2914: LD_STRING M2
2916: PPUSH
2917: CALL_OW 337
// goToHill = true ;
2921: LD_ADDR_EXP 13
2925: PUSH
2926: LD_INT 1
2928: ST_TO_ADDR
// MoveToHill ;
2929: CALL 9762 0 0
// exit ;
2933: GO 3473
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
2935: LD_EXP 41
2939: PUSH
2940: LD_EXP 49
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
2953: LD_EXP 42
2957: PPUSH
2958: LD_STRING D4-Pok-1
2960: PPUSH
2961: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2965: LD_EXP 49
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 3
2977: EQUAL
2978: PUSH
2979: LD_EXP 49
2983: PPUSH
2984: CALL_OW 302
2988: AND
2989: IFFALSE 3003
// Say ( Gnyevko , D4-Gny-1 ) ;
2991: LD_EXP 49
2995: PPUSH
2996: LD_STRING D4-Gny-1
2998: PPUSH
2999: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3003: LD_EXP 41
3007: PPUSH
3008: LD_EXP 49
3012: PPUSH
3013: CALL_OW 296
3017: PUSH
3018: LD_INT 8
3020: GREATER
3021: PUSH
3022: LD_EXP 49
3026: PPUSH
3027: CALL_OW 255
3031: PUSH
3032: LD_INT 3
3034: EQUAL
3035: AND
3036: PUSH
3037: LD_EXP 49
3041: PPUSH
3042: CALL_OW 302
3046: AND
3047: IFFALSE 3136
// begin Say ( Pokryshkin , D4-Pok-2 ) ;
3049: LD_EXP 42
3053: PPUSH
3054: LD_STRING D4-Pok-2
3056: PPUSH
3057: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3061: LD_EXP 49
3065: PPUSH
3066: LD_STRING D4-Gny-2
3068: PPUSH
3069: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3073: LD_EXP 42
3077: PPUSH
3078: LD_STRING D4-Pok-3
3080: PPUSH
3081: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3085: LD_ADDR_EXP 11
3089: PUSH
3090: LD_INT 1
3092: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3093: LD_EXP 49
3097: PPUSH
3098: LD_INT 6
3100: PPUSH
3101: CALL_OW 235
// ComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3105: LD_EXP 49
3109: PPUSH
3110: LD_EXP 42
3114: PPUSH
3115: CALL_OW 250
3119: PPUSH
3120: LD_EXP 42
3124: PPUSH
3125: CALL_OW 251
3129: PPUSH
3130: CALL_OW 111
// end else
3134: GO 3465
// begin meetPokryshkin = true ;
3136: LD_ADDR_EXP 12
3140: PUSH
3141: LD_INT 1
3143: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3144: LD_INT 6
3146: PPUSH
3147: LD_INT 3
3149: PPUSH
3150: CALL_OW 343
// DialogueOff ;
3154: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3158: LD_EXP 49
3162: PPUSH
3163: CALL_OW 255
3167: PUSH
3168: LD_INT 3
3170: EQUAL
3171: PUSH
3172: LD_EXP 49
3176: PPUSH
3177: CALL_OW 302
3181: AND
3182: IFFALSE 3259
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3184: LD_EXP 41
3188: PUSH
3189: LD_EXP 49
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PPUSH
3198: LD_EXP 42
3202: PPUSH
3203: CALL_OW 250
3207: PPUSH
3208: LD_EXP 42
3212: PPUSH
3213: CALL_OW 251
3217: PPUSH
3218: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3222: LD_EXP 41
3226: PUSH
3227: LD_EXP 49
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: LD_EXP 42
3240: PPUSH
3241: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3245: LD_EXP 49
3249: PPUSH
3250: LD_INT 6
3252: PPUSH
3253: CALL_OW 235
// end else
3257: GO 3302
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3259: LD_EXP 41
3263: PPUSH
3264: LD_EXP 42
3268: PPUSH
3269: CALL_OW 250
3273: PPUSH
3274: LD_EXP 42
3278: PPUSH
3279: CALL_OW 251
3283: PPUSH
3284: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3288: LD_EXP 41
3292: PPUSH
3293: LD_EXP 42
3297: PPUSH
3298: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3302: LD_EXP 42
3306: PPUSH
3307: LD_EXP 41
3311: PPUSH
3312: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3316: LD_EXP 41
3320: PPUSH
3321: LD_STRING D4-Bur-3
3323: PPUSH
3324: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3328: LD_EXP 42
3332: PPUSH
3333: LD_STRING D4-Pok-4
3335: PPUSH
3336: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3340: LD_EXP 37
3344: PPUSH
3345: LD_INT 18
3347: PPUSH
3348: LD_INT 1
3350: PPUSH
3351: CALL_OW 49
// wait ( 0 0$2 ) ;
3355: LD_INT 70
3357: PPUSH
3358: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3362: LD_EXP 41
3366: PPUSH
3367: LD_STRING D4-Bur-4
3369: PPUSH
3370: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3374: LD_EXP 42
3378: PPUSH
3379: LD_STRING D4-Pok-5
3381: PPUSH
3382: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3386: LD_EXP 37
3390: PPUSH
3391: LD_STRING D4-Sol1-5
3393: PPUSH
3394: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3398: LD_EXP 42
3402: PPUSH
3403: LD_STRING D4-Pok-6
3405: PPUSH
3406: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3410: LD_EXP 42
3414: PPUSH
3415: LD_STRING D4-Pok-6a
3417: PPUSH
3418: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3422: LD_EXP 41
3426: PPUSH
3427: LD_STRING D4-Bur-6
3429: PPUSH
3430: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3434: LD_EXP 42
3438: PPUSH
3439: LD_STRING D4-Pok-7
3441: PPUSH
3442: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3446: LD_STRING M2
3448: PPUSH
3449: CALL_OW 337
// goToHill = true ;
3453: LD_ADDR_EXP 13
3457: PUSH
3458: LD_INT 1
3460: ST_TO_ADDR
// MoveToHill ;
3461: CALL 9762 0 0
// end ; DialogueOff ;
3465: CALL_OW 7
// InGameOff ;
3469: CALL_OW 9
// end ;
3473: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3474: LD_EXP 41
3478: PPUSH
3479: LD_EXP 42
3483: PPUSH
3484: CALL_OW 296
3488: PUSH
3489: LD_INT 10
3491: GREATER
3492: PUSH
3493: LD_EXP 13
3497: AND
3498: PUSH
3499: LD_EXP 16
3503: NOT
3504: AND
3505: IFFALSE 3706
3507: GO 3509
3509: DISABLE
3510: LD_INT 0
3512: PPUSH
// begin enable ;
3513: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3514: LD_ADDR_VAR 0 1
3518: PUSH
3519: LD_EXP 42
3523: PUSH
3524: LD_EXP 43
3528: PUSH
3529: LD_EXP 44
3533: PUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_EXP 46
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3551: LD_EXP 49
3555: PPUSH
3556: CALL_OW 255
3560: PUSH
3561: LD_INT 6
3563: EQUAL
3564: PUSH
3565: LD_EXP 10
3569: AND
3570: IFFALSE 3588
// ruSolds = ruSolds ^ Gnyevko ;
3572: LD_ADDR_VAR 0 1
3576: PUSH
3577: LD_VAR 0 1
3581: PUSH
3582: LD_EXP 49
3586: ADD
3587: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3597: LD_EXP 41
3601: PPUSH
3602: CALL_OW 87
// DialogueOn ;
3606: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3610: LD_EXP 42
3614: PPUSH
3615: LD_STRING DSplit-Pok-1
3617: PPUSH
3618: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3622: LD_EXP 41
3626: PPUSH
3627: LD_STRING DSplit-Bur-1
3629: PPUSH
3630: CALL_OW 88
// DialogueOff ;
3634: CALL_OW 7
// InGameOn ;
3638: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3642: LD_EXP 41
3646: PPUSH
3647: LD_EXP 42
3651: PPUSH
3652: CALL_OW 250
3656: PPUSH
3657: LD_EXP 42
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: CALL_OW 111
// wait ( 0 0$1 ) ;
3671: LD_INT 35
3673: PPUSH
3674: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3678: LD_EXP 41
3682: PPUSH
3683: LD_EXP 42
3687: PPUSH
3688: CALL_OW 296
3692: PUSH
3693: LD_INT 6
3695: LESS
3696: IFFALSE 3642
// InGameOff ;
3698: CALL_OW 9
// MoveToHill ;
3702: CALL 9762 0 0
// end ;
3706: PPOPN 1
3708: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3709: LD_INT 0
3711: PPUSH
3712: PPUSH
// traitor = true ;
3713: LD_ADDR_EXP 16
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// DialogueOn ;
3721: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3725: LD_EXP 42
3729: PPUSH
3730: LD_STRING DAttack-Pok-1
3732: PPUSH
3733: CALL_OW 88
// DialogueOff ;
3737: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 6
3746: PPUSH
3747: LD_INT 2
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
3757: LD_INT 22
3759: PUSH
3760: LD_INT 6
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 21
3769: PUSH
3770: LD_INT 1
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 41
3790: PPUSH
3791: CALL_OW 115
// end ;
3795: LD_VAR 0 1
3799: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
3800: LD_EXP 42
3804: PPUSH
3805: LD_INT 65
3807: PPUSH
3808: LD_INT 59
3810: PPUSH
3811: CALL_OW 297
3815: PUSH
3816: LD_INT 4
3818: LESS
3819: PUSH
3820: LD_EXP 16
3824: NOT
3825: AND
3826: IFFALSE 4023
3828: GO 3830
3830: DISABLE
// begin InGameOn ;
3831: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
3835: LD_INT 55
3837: PPUSH
3838: LD_INT 50
3840: PPUSH
3841: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
3845: LD_EXP 41
3849: PPUSH
3850: LD_INT 66
3852: PPUSH
3853: LD_INT 57
3855: PPUSH
3856: CALL_OW 111
// AddComHold ( Burlak ) ;
3860: LD_EXP 41
3864: PPUSH
3865: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
3869: LD_EXP 37
3873: PPUSH
3874: LD_INT 59
3876: PPUSH
3877: LD_INT 55
3879: PPUSH
3880: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
3891: LD_INT 1
3893: PPUSH
3894: LD_EXP 42
3898: PPUSH
3899: CALL_OW 292
3903: IFFALSE 3884
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
3905: LD_EXP 37
3909: PUSH
3910: LD_EXP 42
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PPUSH
3919: CALL_OW 87
// ComStop ( Charles ) ;
3923: LD_EXP 37
3927: PPUSH
3928: CALL_OW 141
// AddComHold ( Charles ) ;
3932: LD_EXP 37
3936: PPUSH
3937: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
3941: LD_EXP 37
3945: PPUSH
3946: LD_EXP 42
3950: PPUSH
3951: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
3955: LD_EXP 37
3959: PPUSH
3960: LD_STRING D5-Sol1-1
3962: PPUSH
3963: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
3967: LD_EXP 42
3971: PPUSH
3972: LD_STRING D5-Pok-1
3974: PPUSH
3975: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
3979: LD_INT 1
3981: PPUSH
3982: LD_INT 6
3984: PPUSH
3985: LD_INT 2
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
3995: LD_INT 1
3997: PPUSH
3998: LD_INT 3
4000: PPUSH
4001: LD_INT 2
4003: PPUSH
4004: LD_INT 1
4006: PPUSH
4007: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4011: LD_EXP 37
4015: PPUSH
4016: LD_STRING D5-Sol1-2
4018: PPUSH
4019: CALL_OW 88
// end ;
4023: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4024: LD_EXP 37
4028: PPUSH
4029: CALL_OW 301
4033: PUSH
4034: LD_EXP 13
4038: AND
4039: IFFALSE 4567
4041: GO 4043
4043: DISABLE
4044: LD_INT 0
4046: PPUSH
// begin goToHill = false ;
4047: LD_ADDR_EXP 13
4051: PUSH
4052: LD_INT 0
4054: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4055: LD_INT 22
4057: PUSH
4058: LD_INT 6
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 21
4067: PUSH
4068: LD_INT 1
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PPUSH
4084: CALL_OW 138
// wait ( 0 0$1 ) ;
4088: LD_INT 35
4090: PPUSH
4091: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4095: LD_INT 55
4097: PPUSH
4098: LD_INT 50
4100: PPUSH
4101: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4105: LD_EXP 41
4109: PPUSH
4110: LD_INT 56
4112: PPUSH
4113: LD_INT 56
4115: PPUSH
4116: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4120: LD_INT 22
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 21
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PPUSH
4144: CALL_OW 69
4148: PPUSH
4149: LD_INT 56
4151: PPUSH
4152: LD_INT 56
4154: PPUSH
4155: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4159: LD_EXP 41
4163: PPUSH
4164: LD_STRING D5-Bur-2
4166: PPUSH
4167: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4171: LD_EXP 42
4175: PPUSH
4176: LD_STRING D5-Pok-2
4178: PPUSH
4179: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4183: LD_EXP 46
4187: PPUSH
4188: LD_STRING D5-Bel-2
4190: PPUSH
4191: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4195: LD_EXP 42
4199: PPUSH
4200: LD_STRING D5-Pok-3
4202: PPUSH
4203: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4207: LD_EXP 49
4211: PPUSH
4212: CALL_OW 255
4216: PUSH
4217: LD_INT 6
4219: EQUAL
4220: IFFALSE 4234
// Say ( Gnyevko , D5-Gny-3 ) ;
4222: LD_EXP 49
4226: PPUSH
4227: LD_STRING D5-Gny-3
4229: PPUSH
4230: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4234: LD_EXP 41
4238: PPUSH
4239: LD_STRING D5-Bur-3
4241: PPUSH
4242: CALL_OW 88
// wait ( 0 0$2 ) ;
4246: LD_INT 70
4248: PPUSH
4249: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4253: LD_EXP 41
4257: PPUSH
4258: LD_INT 85
4260: PPUSH
4261: LD_INT 64
4263: PPUSH
4264: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4268: LD_INT 22
4270: PUSH
4271: LD_INT 6
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_INT 21
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PPUSH
4292: CALL_OW 69
4296: PPUSH
4297: LD_INT 85
4299: PPUSH
4300: LD_INT 64
4302: PPUSH
4303: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
4307: LD_EXP 41
4311: PPUSH
4312: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4316: LD_EXP 42
4320: PPUSH
4321: LD_STRING D6-Pok-1
4323: PPUSH
4324: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4328: LD_EXP 41
4332: PPUSH
4333: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4337: LD_EXP 41
4341: PPUSH
4342: LD_STRING D6-Bur-1
4344: PPUSH
4345: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4349: LD_EXP 41
4353: PPUSH
4354: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4358: LD_EXP 42
4362: PPUSH
4363: LD_STRING D6-Pok-2
4365: PPUSH
4366: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4370: LD_EXP 41
4374: PPUSH
4375: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4379: LD_EXP 46
4383: PPUSH
4384: LD_STRING D6-Bel-2
4386: PPUSH
4387: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4391: LD_EXP 41
4395: PPUSH
4396: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4400: LD_EXP 41
4404: PPUSH
4405: LD_STRING D6-Bur-2
4407: PPUSH
4408: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4412: LD_EXP 41
4416: PPUSH
4417: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4421: LD_EXP 42
4425: PPUSH
4426: LD_STRING D6-Pok-3
4428: PPUSH
4429: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4433: LD_EXP 41
4437: PPUSH
4438: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4442: LD_EXP 50
4446: PPUSH
4447: LD_STRING D6-Kur-3
4449: PPUSH
4450: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4454: LD_EXP 41
4458: PPUSH
4459: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4463: LD_EXP 42
4467: PPUSH
4468: LD_STRING D6-Pok-4
4470: PPUSH
4471: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4475: LD_EXP 41
4479: PPUSH
4480: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4484: LD_EXP 46
4488: PPUSH
4489: LD_STRING D6-Bel-4
4491: PPUSH
4492: CALL_OW 88
// InGameOff ;
4496: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4500: LD_EXP 42
4504: PPUSH
4505: LD_INT 23
4507: PPUSH
4508: CALL_OW 115
// wait ( 0 0$5 ) ;
4512: LD_INT 175
4514: PPUSH
4515: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4519: LD_INT 22
4521: PUSH
4522: LD_INT 6
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 21
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PPUSH
4548: LD_INT 23
4550: PPUSH
4551: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4555: LD_INT 1
4557: PPUSH
4558: LD_EXP 49
4562: PPUSH
4563: CALL_OW 471
// end ;
4567: PPOPN 1
4569: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4570: LD_INT 1
4572: PPUSH
4573: LD_EXP 42
4577: PPUSH
4578: CALL_OW 292
4582: PUSH
4583: LD_EXP 37
4587: PPUSH
4588: CALL_OW 301
4592: AND
4593: IFFALSE 4612
4595: GO 4597
4597: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4598: LD_EXP 38
4602: PPUSH
4603: LD_EXP 42
4607: PPUSH
4608: CALL_OW 115
4612: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4613: LD_INT 3
4615: PPUSH
4616: LD_INT 23
4618: PPUSH
4619: CALL_OW 292
4623: IFFALSE 4652
4625: GO 4627
4627: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4628: LD_EXP 42
4632: PPUSH
4633: LD_STRING D7-Pok-1
4635: PPUSH
4636: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4640: LD_EXP 38
4644: PPUSH
4645: LD_STRING D7-FSol1-1
4647: PPUSH
4648: CALL_OW 88
// end ;
4652: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4653: LD_EXP 42
4657: PPUSH
4658: CALL_OW 303
4662: IFFALSE 5194
4664: GO 4666
4666: DISABLE
4667: LD_INT 0
4669: PPUSH
4670: PPUSH
4671: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 6
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 21
4689: PUSH
4690: LD_INT 1
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 50
4699: PUSH
4700: EMPTY
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: PPUSH
4708: CALL_OW 69
4712: PUSH
4713: LD_EXP 46
4717: DIFF
4718: ST_TO_ADDR
// DialogueOn ;
4719: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_STRING D7a-Bel-1
4730: PPUSH
4731: CALL_OW 88
// DialogueOff ;
4735: CALL_OW 7
// for i := 1 to ruSolds do
4739: LD_ADDR_VAR 0 1
4743: PUSH
4744: DOUBLE
4745: LD_INT 1
4747: DEC
4748: ST_TO_ADDR
4749: LD_VAR 0 3
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4813
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
4757: LD_VAR 0 3
4761: PUSH
4762: LD_VAR 0 1
4766: ARRAY
4767: PPUSH
4768: LD_INT 87
4770: PUSH
4771: LD_VAR 0 1
4775: PLUS
4776: PPUSH
4777: LD_INT 63
4779: PUSH
4780: LD_VAR 0 1
4784: PLUS
4785: PPUSH
4786: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
4790: LD_VAR 0 3
4794: PUSH
4795: LD_VAR 0 1
4799: ARRAY
4800: PPUSH
4801: LD_INT 89
4803: PPUSH
4804: LD_INT 67
4806: PPUSH
4807: CALL_OW 178
// end ;
4811: GO 4754
4813: POP
4814: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
4815: LD_EXP 46
4819: PPUSH
4820: LD_INT 89
4822: PPUSH
4823: LD_INT 67
4825: PPUSH
4826: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
4830: LD_EXP 46
4834: PPUSH
4835: LD_INT 88
4837: PPUSH
4838: LD_INT 66
4840: PPUSH
4841: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
4845: LD_EXP 43
4849: PPUSH
4850: LD_STRING D7a-RSol1-1
4852: PPUSH
4853: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
4857: LD_EXP 38
4861: PPUSH
4862: LD_STRING D7a-FSol1-1
4864: PPUSH
4865: CALL_OW 88
// wait ( 0 0$12 ) ;
4869: LD_INT 420
4871: PPUSH
4872: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
4876: LD_EXP 46
4880: PPUSH
4881: LD_STRING D7b-Bel-1
4883: PPUSH
4884: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
4888: LD_EXP 44
4892: PPUSH
4893: LD_STRING D7b-FSol1-1
4895: PPUSH
4896: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
4900: LD_EXP 46
4904: PPUSH
4905: LD_STRING D7b-Bel-2
4907: PPUSH
4908: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
4912: LD_EXP 43
4916: PPUSH
4917: LD_STRING D7b-RSol1-2
4919: PPUSH
4920: CALL_OW 88
// for unit in ruSolds do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: LD_VAR 0 3
4933: PUSH
4934: FOR_IN
4935: IFFALSE 5168
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4937: LD_EXP 41
4941: PPUSH
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 296
4951: PUSH
4952: LD_INT 7
4954: LESS
4955: IFFALSE 5166
// begin InGameOn ;
4957: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4961: LD_EXP 46
4965: PUSH
4966: LD_EXP 43
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
4979: LD_EXP 41
4983: PPUSH
4984: LD_INT 88
4986: PPUSH
4987: LD_INT 66
4989: PPUSH
4990: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4994: LD_EXP 46
4998: PPUSH
4999: LD_EXP 41
5003: PPUSH
5004: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5008: LD_EXP 41
5012: PPUSH
5013: LD_INT 90
5015: PPUSH
5016: LD_INT 66
5018: PPUSH
5019: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5023: LD_EXP 41
5027: PPUSH
5028: LD_STRING D7b-Bur-3
5030: PPUSH
5031: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5035: LD_EXP 46
5039: PPUSH
5040: LD_STRING D7b-Bel-4
5042: PPUSH
5043: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5047: LD_EXP 41
5051: PPUSH
5052: LD_STRING D7b-Bur-4
5054: PPUSH
5055: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5059: LD_EXP 46
5063: PPUSH
5064: LD_STRING D7b-Bel-5
5066: PPUSH
5067: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5071: LD_EXP 44
5075: PPUSH
5076: LD_STRING D7b-FSol1-5
5078: PPUSH
5079: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5083: LD_EXP 46
5087: PPUSH
5088: LD_STRING D7b-Bel-6
5090: PPUSH
5091: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5095: LD_EXP 41
5099: PPUSH
5100: LD_STRING D7b-Bur-6
5102: PPUSH
5103: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5107: LD_EXP 43
5111: PPUSH
5112: LD_STRING D7b-RSol1-6
5114: PPUSH
5115: CALL_OW 88
// InGameOff ;
5119: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5123: LD_VAR 0 3
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_INT 3
5142: PPUSH
5143: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5147: LD_STRING M3
5149: PPUSH
5150: CALL_OW 337
// secondAttack = true ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 1
5161: ST_TO_ADDR
// exit ;
5162: POP
5163: POP
5164: GO 5194
// end ;
5166: GO 4934
5168: POP
5169: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5170: LD_EXP 46
5174: PPUSH
5175: LD_STRING D7b-Bel-3
5177: PPUSH
5178: CALL_OW 88
// InGameOff ;
5182: CALL_OW 9
// belkovWaitForGorky = true ;
5186: LD_ADDR_EXP 14
5190: PUSH
5191: LD_INT 1
5193: ST_TO_ADDR
// end ;
5194: PPOPN 3
5196: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5197: LD_EXP 14
5201: IFFALSE 5511
5203: GO 5205
5205: DISABLE
5206: LD_INT 0
5208: PPUSH
5209: PPUSH
// begin enable ;
5210: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_INT 22
5218: PUSH
5219: LD_INT 6
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 21
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 69
5244: ST_TO_ADDR
// for unit in ruSolds do
5245: LD_ADDR_VAR 0 1
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5509
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5258: LD_EXP 41
5262: PPUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 296
5272: PUSH
5273: LD_INT 7
5275: LESS
5276: IFFALSE 5507
// begin belkovWaitForGorky = false ;
5278: LD_ADDR_EXP 14
5282: PUSH
5283: LD_INT 0
5285: ST_TO_ADDR
// InGameOn ;
5286: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5290: LD_EXP 46
5294: PUSH
5295: LD_EXP 43
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5308: LD_EXP 41
5312: PPUSH
5313: LD_INT 88
5315: PPUSH
5316: LD_INT 66
5318: PPUSH
5319: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5323: LD_EXP 46
5327: PPUSH
5328: LD_EXP 41
5332: PPUSH
5333: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5337: LD_EXP 41
5341: PPUSH
5342: LD_INT 90
5344: PPUSH
5345: LD_INT 66
5347: PPUSH
5348: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7b-Bel-3a
5359: PPUSH
5360: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5364: LD_EXP 41
5368: PPUSH
5369: LD_STRING D7b-Bur-3
5371: PPUSH
5372: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5376: LD_EXP 46
5380: PPUSH
5381: LD_STRING D7b-Bel-4
5383: PPUSH
5384: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5388: LD_EXP 41
5392: PPUSH
5393: LD_STRING D7b-Bur-4
5395: PPUSH
5396: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5400: LD_EXP 46
5404: PPUSH
5405: LD_STRING D7b-Bel-5
5407: PPUSH
5408: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5412: LD_EXP 44
5416: PPUSH
5417: LD_STRING D7b-FSol1-5
5419: PPUSH
5420: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5424: LD_EXP 46
5428: PPUSH
5429: LD_STRING D7b-Bel-6
5431: PPUSH
5432: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5436: LD_EXP 41
5440: PPUSH
5441: LD_STRING D7b-Bur-6
5443: PPUSH
5444: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5448: LD_EXP 43
5452: PPUSH
5453: LD_STRING D7a-RSol1-6
5455: PPUSH
5456: CALL_OW 88
// InGameOff ;
5460: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5464: LD_VAR 0 2
5468: PPUSH
5469: LD_INT 3
5471: PPUSH
5472: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5476: LD_EXP 46
5480: PPUSH
5481: LD_INT 3
5483: PPUSH
5484: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5488: LD_STRING M3
5490: PPUSH
5491: CALL_OW 337
// secondAttack = true ;
5495: LD_ADDR_EXP 15
5499: PUSH
5500: LD_INT 1
5502: ST_TO_ADDR
// exit ;
5503: POP
5504: POP
5505: GO 5511
// end ;
5507: GO 5255
5509: POP
5510: POP
// end ;
5511: PPOPN 2
5513: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5514: LD_INT 0
5516: PPUSH
5517: PPUSH
// DialogueOn ;
5518: CALL_OW 6
// Say ( Johanna , D8-FSol1-1 ) ;
5522: LD_EXP 38
5526: PPUSH
5527: LD_STRING D8-FSol1-1
5529: PPUSH
5530: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5534: LD_EXP 39
5538: PPUSH
5539: LD_STRING D8-Glad-1
5541: PPUSH
5542: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5546: LD_EXP 41
5550: PPUSH
5551: LD_STRING D8-Bur-1
5553: PPUSH
5554: CALL_OW 88
// DialogueOff ;
5558: CALL_OW 7
// secondAttack = false ;
5562: LD_ADDR_EXP 15
5566: PUSH
5567: LD_INT 0
5569: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_INT 22
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_INT 23
5606: PPUSH
5607: CALL_OW 74
5611: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5612: LD_EXP 40
5616: PPUSH
5617: CALL_OW 122
// wait ( 0 0$1 ) ;
5621: LD_INT 35
5623: PPUSH
5624: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5628: LD_EXP 40
5632: PPUSH
5633: LD_VAR 0 2
5637: PPUSH
5638: CALL_OW 175
// end ;
5642: LD_VAR 0 1
5646: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
5647: LD_INT 23
5649: PPUSH
5650: CALL_OW 256
5654: PUSH
5655: LD_INT 350
5657: LESS
5658: PUSH
5659: LD_INT 23
5661: PPUSH
5662: CALL_OW 256
5666: PUSH
5667: LD_INT 250
5669: GREATER
5670: AND
5671: PUSH
5672: LD_INT 20
5674: PPUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 3
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 21
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PPUSH
5699: CALL_OW 70
5703: PUSH
5704: LD_INT 0
5706: GREATER
5707: AND
5708: IFFALSE 5725
5710: GO 5712
5712: DISABLE
// begin Say ( Johanna , D8-FSol1-2 ) ;
5713: LD_EXP 38
5717: PPUSH
5718: LD_STRING D8-FSol1-2
5720: PPUSH
5721: CALL_OW 88
// end ;
5725: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
5726: LD_INT 23
5728: PPUSH
5729: CALL_OW 303
5733: PUSH
5734: LD_INT 22
5736: PPUSH
5737: CALL_OW 302
5741: AND
5742: PUSH
5743: LD_EXP 22
5747: NOT
5748: AND
5749: IFFALSE 5819
5751: GO 5753
5753: DISABLE
// begin amRetreat = true ;
5754: LD_ADDR_EXP 22
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
5762: LD_EXP 38
5766: PPUSH
5767: LD_STRING D8-FSol1-2a
5769: PPUSH
5770: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5774: LD_EXP 39
5778: PUSH
5779: LD_EXP 38
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: LD_INT 21
5790: PPUSH
5791: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5795: LD_EXP 39
5799: PPUSH
5800: LD_STRING D8-Glad-2
5802: PPUSH
5803: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5807: LD_EXP 41
5811: PPUSH
5812: LD_STRING D8-Bur-2
5814: PPUSH
5815: CALL_OW 88
// end ;
5819: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
5820: LD_INT 22
5822: PPUSH
5823: CALL_OW 303
5827: PUSH
5828: LD_INT 23
5830: PPUSH
5831: CALL_OW 302
5835: AND
5836: PUSH
5837: LD_EXP 22
5841: NOT
5842: AND
5843: IFFALSE 5913
5845: GO 5847
5847: DISABLE
// begin amRetreat = true ;
5848: LD_ADDR_EXP 22
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
5856: LD_EXP 38
5860: PPUSH
5861: LD_STRING D8-FSol1-2a
5863: PPUSH
5864: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5868: LD_EXP 39
5872: PUSH
5873: LD_EXP 38
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PPUSH
5882: LD_INT 21
5884: PPUSH
5885: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5889: LD_EXP 39
5893: PPUSH
5894: LD_STRING D8-Glad-2
5896: PPUSH
5897: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5901: LD_EXP 41
5905: PPUSH
5906: LD_STRING D8-Bur-2
5908: PPUSH
5909: CALL_OW 88
// end ;
5913: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and not amRetreat do
5914: LD_INT 23
5916: PPUSH
5917: CALL_OW 256
5921: PUSH
5922: LD_INT 500
5924: LESS
5925: PUSH
5926: LD_EXP 22
5930: NOT
5931: AND
5932: IFFALSE 6002
5934: GO 5936
5936: DISABLE
// begin amRetreat = true ;
5937: LD_ADDR_EXP 22
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
5945: LD_EXP 38
5949: PPUSH
5950: LD_STRING D8-FSol1-2a
5952: PPUSH
5953: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5957: LD_EXP 39
5961: PUSH
5962: LD_EXP 38
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: LD_INT 21
5973: PPUSH
5974: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5978: LD_EXP 39
5982: PPUSH
5983: LD_STRING D8-Glad-2
5985: PPUSH
5986: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5990: LD_EXP 41
5994: PPUSH
5995: LD_STRING D8-Bur-2
5997: PPUSH
5998: CALL_OW 88
// end ;
6002: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6003: LD_INT 22
6005: PUSH
6006: LD_INT 1
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 21
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 50
6025: PUSH
6026: EMPTY
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: PUSH
6039: LD_INT 0
6041: GREATER
6042: IFFALSE 6170
6044: GO 6046
6046: DISABLE
6047: LD_INT 0
6049: PPUSH
// begin enable ;
6050: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6051: LD_ADDR_VAR 0 1
6055: PUSH
6056: LD_INT 21
6058: PPUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 21
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PPUSH
6083: CALL_OW 70
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6168
// begin if unit = Gladstone then
6091: LD_VAR 0 1
6095: PUSH
6096: LD_EXP 39
6100: EQUAL
6101: IFFALSE 6131
// begin gladstoneEscape = true ;
6103: LD_ADDR_EXP 17
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6111: LD_EXP 39
6115: PPUSH
6116: LD_EXP 26
6120: PUSH
6121: LD_STRING Gladstone
6123: STR
6124: PPUSH
6125: CALL_OW 38
// end else
6129: GO 6157
// begin JohannaEscape = true ;
6131: LD_ADDR_EXP 18
6135: PUSH
6136: LD_INT 1
6138: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6139: LD_EXP 38
6143: PPUSH
6144: LD_EXP 26
6148: PUSH
6149: LD_STRING Johanna
6151: STR
6152: PPUSH
6153: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 64
// end ;
6166: GO 6088
6168: POP
6169: POP
// end ;
6170: PPOPN 1
6172: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6173: LD_EXP 39
6177: PPUSH
6178: CALL_OW 301
6182: PUSH
6183: LD_EXP 38
6187: PPUSH
6188: CALL_OW 301
6192: AND
6193: IFFALSE 6210
6195: GO 6197
6197: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6198: LD_EXP 41
6202: PPUSH
6203: LD_STRING D9-Bur-1
6205: PPUSH
6206: CALL_OW 88
6210: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6211: LD_EXP 38
6215: PPUSH
6216: CALL_OW 301
6220: PUSH
6221: LD_EXP 17
6225: AND
6226: PUSH
6227: LD_EXP 18
6231: NOT
6232: AND
6233: IFFALSE 6250
6235: GO 6237
6237: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6238: LD_EXP 41
6242: PPUSH
6243: LD_STRING D9-Bur-1a
6245: PPUSH
6246: CALL_OW 88
6250: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6251: LD_EXP 39
6255: PPUSH
6256: CALL_OW 301
6260: PUSH
6261: LD_EXP 17
6265: NOT
6266: AND
6267: PUSH
6268: LD_EXP 18
6272: AND
6273: IFFALSE 6290
6275: GO 6277
6277: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6278: LD_EXP 41
6282: PPUSH
6283: LD_STRING D9-Bur-1b
6285: PPUSH
6286: CALL_OW 88
6290: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6291: LD_EXP 17
6295: PUSH
6296: LD_EXP 18
6300: AND
6301: IFFALSE 6318
6303: GO 6305
6305: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6306: LD_EXP 41
6310: PPUSH
6311: LD_STRING D9-Bur-1c
6313: PPUSH
6314: CALL_OW 88
6318: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6319: LD_INT 22
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 21
6331: PUSH
6332: LD_INT 3
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 50
6341: PUSH
6342: EMPTY
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 69
6354: PUSH
6355: LD_INT 0
6357: EQUAL
6358: IFFALSE 6606
6360: GO 6362
6362: DISABLE
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_INT 22
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 21
6384: PUSH
6385: LD_INT 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 50
6394: PUSH
6395: EMPTY
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: PPUSH
6403: CALL_OW 69
6407: PUSH
6408: LD_EXP 41
6412: PUSH
6413: LD_EXP 49
6417: PUSH
6418: LD_EXP 46
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: DIFF
6428: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_VAR 0 1
6438: PPUSH
6439: LD_INT 26
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 72
6453: ST_TO_ADDR
// DialogueOn ;
6454: CALL_OW 6
// if IsOK ( Belkov ) then
6458: LD_EXP 46
6462: PPUSH
6463: CALL_OW 302
6467: IFFALSE 6481
// Say ( Belkov , D10-Bel-1 ) ;
6469: LD_EXP 46
6473: PPUSH
6474: LD_STRING D10-Bel-1
6476: PPUSH
6477: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6481: LD_VAR 0 1
6485: PUSH
6486: LD_INT 0
6488: GREATER
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: LD_INT 0
6497: GREATER
6498: PUSH
6499: LD_EXP 46
6503: PPUSH
6504: CALL_OW 302
6508: OR
6509: AND
6510: IFFALSE 6577
// begin Say ( Burlak , D10-Bur-1 ) ;
6512: LD_EXP 41
6516: PPUSH
6517: LD_STRING D10-Bur-1
6519: PPUSH
6520: CALL_OW 88
// if IsOK ( Belkov ) then
6524: LD_EXP 46
6528: PPUSH
6529: CALL_OW 302
6533: IFFALSE 6549
// Say ( Belkov , D10-Bel-1a ) else
6535: LD_EXP 46
6539: PPUSH
6540: LD_STRING D10-Bel-1a
6542: PPUSH
6543: CALL_OW 88
6547: GO 6565
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6549: LD_VAR 0 2
6553: PUSH
6554: LD_INT 1
6556: ARRAY
6557: PPUSH
6558: LD_STRING D10-RSol1-1
6560: PPUSH
6561: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6565: LD_EXP 41
6569: PPUSH
6570: LD_STRING D10-Bur-2
6572: PPUSH
6573: CALL_OW 88
// end ; DialogueOff ;
6577: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6581: LD_STRING M4a
6583: PPUSH
6584: CALL_OW 337
// evacuationAvailable = true ;
6588: LD_ADDR_EXP 20
6592: PUSH
6593: LD_INT 1
6595: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: CALL_OW 424
// end ;
6606: PPOPN 2
6608: END
// every 0 0$15 trigger evacuationAvailable do
6609: LD_EXP 20
6613: IFFALSE 7186
6615: GO 6617
6617: DISABLE
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6618: LD_EXP 48
6622: PPUSH
6623: LD_INT 22
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 49
// wait ( 0 0$3 ) ;
6633: LD_INT 105
6635: PPUSH
6636: CALL_OW 67
// DialogueOn ;
6640: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6644: LD_EXP 48
6648: PPUSH
6649: LD_STRING D11b-Kir-1
6651: PPUSH
6652: CALL_OW 94
// if IsOK ( Belkov ) then
6656: LD_EXP 46
6660: PPUSH
6661: CALL_OW 302
6665: IFFALSE 6693
// begin Say ( Belkov , D11b-Bel-1 ) ;
6667: LD_EXP 46
6671: PPUSH
6672: LD_STRING D11b-Bel-1
6674: PPUSH
6675: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6679: LD_EXP 46
6683: PPUSH
6684: LD_STRING D11b-Bel-1a
6686: PPUSH
6687: CALL_OW 94
// end else
6691: GO 6742
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , true ) ;
6693: LD_INT 22
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 21
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 50
6715: PUSH
6716: EMPTY
6717: LIST
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: PPUSH
6729: LD_STRING D11b-RSol1-1
6731: PPUSH
6732: LD_STRING D11b-RFSol1-1
6734: PPUSH
6735: LD_INT 1
6737: PPUSH
6738: CALL 7549 0 4
// end ; if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6742: LD_INT 22
6744: PUSH
6745: LD_INT 0
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 25
6754: PUSH
6755: LD_INT 12
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: PUSH
6771: LD_INT 0
6773: GREATER
6774: IFFALSE 6790
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
6776: LD_EXP 48
6780: PPUSH
6781: LD_STRING D11b1-Kir-1
6783: PPUSH
6784: CALL_OW 94
6788: GO 6802
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
6790: LD_EXP 48
6794: PPUSH
6795: LD_STRING D11b2-Kir-1
6797: PPUSH
6798: CALL_OW 94
// if attackedByApeman and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6802: LD_EXP 5
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 0
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 25
6819: PUSH
6820: LD_INT 12
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 69
6835: PUSH
6836: LD_INT 0
6838: GREATER
6839: AND
6840: IFFALSE 7008
// begin Say ( Burlak , D11b1-Bur-1 ) ;
6842: LD_EXP 41
6846: PPUSH
6847: LD_STRING D11b1-Bur-1
6849: PPUSH
6850: CALL_OW 88
// if IsOk ( Belkov ) then
6854: LD_EXP 46
6858: PPUSH
6859: CALL_OW 302
6863: IFFALSE 6879
// Say ( Belkov , D11b2-Bel-1 ) else
6865: LD_EXP 46
6869: PPUSH
6870: LD_STRING D11b2-Bel-1
6872: PPUSH
6873: CALL_OW 88
6877: GO 6928
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6879: LD_INT 22
6881: PUSH
6882: LD_INT 1
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 21
6891: PUSH
6892: LD_INT 1
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 50
6901: PUSH
6902: EMPTY
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: PPUSH
6910: CALL_OW 69
6914: PPUSH
6915: LD_STRING D11b1-RSol1-1
6917: PPUSH
6918: LD_STRING D11b1-RFSol1-1
6920: PPUSH
6921: LD_INT 0
6923: PPUSH
6924: CALL 7549 0 4
// if IsOk ( Belkov ) then
6928: LD_EXP 46
6932: PPUSH
6933: CALL_OW 302
6937: IFFALSE 6953
// Say ( Belkov , D11b1-Bel-1 ) else
6939: LD_EXP 46
6943: PPUSH
6944: LD_STRING D11b1-Bel-1
6946: PPUSH
6947: CALL_OW 88
6951: GO 7002
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6953: LD_INT 22
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 50
6975: PUSH
6976: EMPTY
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 69
6988: PPUSH
6989: LD_STRING D11b1-RSol1-1
6991: PPUSH
6992: LD_STRING D11b1-RFSol1-1
6994: PPUSH
6995: LD_INT 0
6997: PPUSH
6998: CALL 7549 0 4
// DialogueOff ;
7002: CALL_OW 7
// exit ;
7006: GO 7186
// end ; if spotWaterfall then
7008: LD_EXP 6
7012: IFFALSE 7106
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7014: LD_EXP 41
7018: PPUSH
7019: LD_STRING D11b1-Bur-1a
7021: PPUSH
7022: CALL_OW 88
// if IsOk ( Belkov ) then
7026: LD_EXP 46
7030: PPUSH
7031: CALL_OW 302
7035: IFFALSE 7051
// Say ( Belkov , D11b2-Bel-1 ) else
7037: LD_EXP 46
7041: PPUSH
7042: LD_STRING D11b2-Bel-1
7044: PPUSH
7045: CALL_OW 88
7049: GO 7100
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 21
7063: PUSH
7064: LD_INT 1
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 50
7073: PUSH
7074: EMPTY
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_STRING D11b1-RSol1-1
7089: PPUSH
7090: LD_STRING D11b1-RFSol1-1
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL 7549 0 4
// DialogueOff ;
7100: CALL_OW 7
// exit ;
7104: GO 7186
// end ; if IsOk ( Belkov ) then
7106: LD_EXP 46
7110: PPUSH
7111: CALL_OW 302
7115: IFFALSE 7131
// Say ( Belkov , D11b1-Bel-1 ) else
7117: LD_EXP 46
7121: PPUSH
7122: LD_STRING D11b1-Bel-1
7124: PPUSH
7125: CALL_OW 88
7129: GO 7180
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7131: LD_INT 22
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 50
7153: PUSH
7154: EMPTY
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: PPUSH
7167: LD_STRING D11b1-RSol1-1
7169: PPUSH
7170: LD_STRING D11b1-RFSol1-1
7172: PPUSH
7173: LD_INT 0
7175: PPUSH
7176: CALL 7549 0 4
// DialogueOff ;
7180: CALL_OW 7
// exit ;
7184: GO 7186
// end ;
7186: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7187: LD_INT 3
7189: PPUSH
7190: LD_EXP 48
7194: PPUSH
7195: CALL_OW 292
7199: IFFALSE 7429
7201: GO 7203
7203: DISABLE
7204: LD_INT 0
7206: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
7207: LD_EXP 48
7211: PPUSH
7212: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 21
7233: PUSH
7234: LD_INT 1
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 50
7243: PUSH
7244: EMPTY
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: PPUSH
7257: LD_EXP 48
7261: PPUSH
7262: CALL_OW 74
7266: ST_TO_ADDR
// DialogueOn ;
7267: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7271: LD_EXP 48
7275: PPUSH
7276: LD_STRING D11a-Kir-1
7278: PPUSH
7279: CALL_OW 88
// if nearUnit = Belkov then
7283: LD_VAR 0 1
7287: PUSH
7288: LD_EXP 46
7292: EQUAL
7293: IFFALSE 7333
// begin Say ( Belkov , D11a-Bel-1 ) ;
7295: LD_EXP 46
7299: PPUSH
7300: LD_STRING D11a-Bel-1
7302: PPUSH
7303: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7307: LD_EXP 48
7311: PPUSH
7312: LD_STRING D11a-Kir-2
7314: PPUSH
7315: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7319: LD_EXP 46
7323: PPUSH
7324: LD_STRING D11a-Bel-2
7326: PPUSH
7327: CALL_OW 88
// end else
7331: GO 7374
// begin if GetSex ( nearUnit ) = sex_male then
7333: LD_VAR 0 1
7337: PPUSH
7338: CALL_OW 258
7342: PUSH
7343: LD_INT 1
7345: EQUAL
7346: IFFALSE 7362
// Say ( nearUnit , D11a-RSol1-2 ) else
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_STRING D11a-RSol1-2
7355: PPUSH
7356: CALL_OW 88
7360: GO 7374
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7362: LD_VAR 0 1
7366: PPUSH
7367: LD_STRING D11a-RFSol1-2
7369: PPUSH
7370: CALL_OW 88
// end ; DialogueOff ;
7374: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
7378: LD_EXP 48
7382: PPUSH
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 235
// jelenaSaved = true ;
7390: LD_ADDR_EXP 19
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7398: LD_INT 175
7400: PPUSH
7401: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7405: LD_EXP 48
7409: PPUSH
7410: LD_STRING D11c-Kir-1
7412: PPUSH
7413: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7417: LD_EXP 41
7421: PPUSH
7422: LD_STRING D11c-Bur-1
7424: PPUSH
7425: CALL_OW 88
// end ;
7429: PPOPN 1
7431: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7432: LD_EXP 20
7436: PUSH
7437: LD_INT 1
7439: PPUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 70
7468: PUSH
7469: LD_INT 0
7471: GREATER
7472: AND
7473: IFFALSE 7485
7475: GO 7477
7477: DISABLE
// begin Query ( QExit1 ) ;
7478: LD_STRING QExit1
7480: PPUSH
7481: CALL_OW 97
// end ; end_of_file
7485: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
// if exist_mode then
7490: LD_VAR 0 2
7494: IFFALSE 7519
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7496: LD_ADDR_VAR 0 4
7500: PUSH
7501: LD_EXP 27
7505: PUSH
7506: LD_VAR 0 1
7510: STR
7511: PPUSH
7512: CALL_OW 34
7516: ST_TO_ADDR
7517: GO 7534
// unit := NewCharacter ( ident ) ;
7519: LD_ADDR_VAR 0 4
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 25
7533: ST_TO_ADDR
// result := unit ;
7534: LD_ADDR_VAR 0 3
7538: PUSH
7539: LD_VAR 0 4
7543: ST_TO_ADDR
// end ;
7544: LD_VAR 0 3
7548: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7549: LD_INT 0
7551: PPUSH
7552: PPUSH
7553: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7554: LD_ADDR_VAR 0 1
7558: PUSH
7559: LD_VAR 0 1
7563: PUSH
7564: LD_EXP 41
7568: PUSH
7569: LD_EXP 49
7573: PUSH
7574: LD_EXP 46
7578: PUSH
7579: LD_EXP 48
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: DIFF
7590: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7591: LD_ADDR_VAR 0 7
7595: PUSH
7596: LD_VAR 0 1
7600: PUSH
7601: LD_INT 1
7603: PPUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 12
7613: ARRAY
7614: ST_TO_ADDR
// if radio then
7615: LD_VAR 0 4
7619: IFFALSE 7668
// begin if GetSex ( speaker ) = sex_male then
7621: LD_VAR 0 7
7625: PPUSH
7626: CALL_OW 258
7630: PUSH
7631: LD_INT 1
7633: EQUAL
7634: IFFALSE 7652
// SayRadio ( speaker , dialogMID ) else
7636: LD_VAR 0 7
7640: PPUSH
7641: LD_VAR 0 2
7645: PPUSH
7646: CALL_OW 94
7650: GO 7666
// SayRadio ( speaker , dialogFID ) ;
7652: LD_VAR 0 7
7656: PPUSH
7657: LD_VAR 0 3
7661: PPUSH
7662: CALL_OW 94
// end else
7666: GO 7713
// begin if GetSex ( speaker ) = sex_male then
7668: LD_VAR 0 7
7672: PPUSH
7673: CALL_OW 258
7677: PUSH
7678: LD_INT 1
7680: EQUAL
7681: IFFALSE 7699
// Say ( speaker , dialogMID ) else
7683: LD_VAR 0 7
7687: PPUSH
7688: LD_VAR 0 2
7692: PPUSH
7693: CALL_OW 88
7697: GO 7713
// Say ( speaker , dialogFID ) ;
7699: LD_VAR 0 7
7703: PPUSH
7704: LD_VAR 0 3
7708: PPUSH
7709: CALL_OW 88
// end ; result := speaker ;
7713: LD_ADDR_VAR 0 5
7717: PUSH
7718: LD_VAR 0 7
7722: ST_TO_ADDR
// end ;
7723: LD_VAR 0 5
7727: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7728: LD_INT 0
7730: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 255
7740: PUSH
7741: LD_OWVAR 2
7745: EQUAL
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 302
7756: AND
7757: IFFALSE 7779
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_EXP 26
7768: PUSH
7769: LD_VAR 0 2
7773: STR
7774: PPUSH
7775: CALL_OW 38
// end ;
7779: LD_VAR 0 3
7783: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
7788: PPUSH
// resultCharactersToSave = [ ] ;
7789: LD_ADDR_VAR 0 5
7793: PUSH
7794: EMPTY
7795: ST_TO_ADDR
// for unit in characters do
7796: LD_ADDR_VAR 0 4
7800: PUSH
7801: LD_VAR 0 1
7805: PUSH
7806: FOR_IN
7807: IFFALSE 7855
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
7809: LD_VAR 0 4
7813: PPUSH
7814: CALL_OW 255
7818: PUSH
7819: LD_OWVAR 2
7823: EQUAL
7824: PUSH
7825: LD_VAR 0 4
7829: PPUSH
7830: CALL_OW 302
7834: AND
7835: IFFALSE 7853
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7837: LD_ADDR_VAR 0 5
7841: PUSH
7842: LD_VAR 0 5
7846: PUSH
7847: LD_VAR 0 4
7851: ADD
7852: ST_TO_ADDR
7853: GO 7806
7855: POP
7856: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7857: LD_VAR 0 5
7861: PPUSH
7862: LD_EXP 26
7866: PUSH
7867: LD_VAR 0 2
7871: STR
7872: PPUSH
7873: CALL_OW 38
// end ;
7877: LD_VAR 0 3
7881: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
7882: LD_INT 0
7884: PPUSH
7885: PPUSH
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 302
7905: NOT
7906: PUSH
7907: LD_VAR 0 4
7911: PUSH
7912: LD_INT 1
7914: EQUAL
7915: OR
7916: PUSH
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: CALL_OW 488
7931: NOT
7932: OR
7933: PUSH
7934: LD_VAR 0 1
7938: PPUSH
7939: LD_VAR 0 2
7943: PPUSH
7944: LD_VAR 0 3
7948: PPUSH
7949: CALL_OW 297
7953: PUSH
7954: LD_VAR 0 4
7958: GREATEREQUAL
7959: OR
7960: PUSH
7961: LD_VAR 0 5
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 0
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: IN
7976: NOT
7977: OR
7978: IFFALSE 7982
// exit ;
7980: GO 9539
// attempts = 0 ;
7982: LD_ADDR_VAR 0 17
7986: PUSH
7987: LD_INT 0
7989: ST_TO_ADDR
// repeat list_nearest = [ ] ;
7990: LD_ADDR_VAR 0 7
7994: PUSH
7995: EMPTY
7996: ST_TO_ADDR
// list_coords = [ ] ;
7997: LD_ADDR_VAR 0 8
8001: PUSH
8002: EMPTY
8003: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8004: LD_ADDR_VAR 0 9
8008: PUSH
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_VAR 0 3
8018: PPUSH
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 250
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 251
8038: PPUSH
8039: CALL 9544 0 4
8043: ST_TO_ADDR
// if attempts = 0 then
8044: LD_VAR 0 17
8048: PUSH
8049: LD_INT 0
8051: EQUAL
8052: IFFALSE 8160
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8054: LD_ADDR_VAR 0 10
8058: PUSH
8059: LD_VAR 0 9
8063: PUSH
8064: LD_VAR 0 9
8068: PUSH
8069: LD_INT 1
8071: PLUS
8072: PUSH
8073: LD_VAR 0 9
8077: PUSH
8078: LD_INT 1
8080: MINUS
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8087: LD_VAR 0 10
8091: PUSH
8092: LD_INT 2
8094: ARRAY
8095: PUSH
8096: LD_INT 6
8098: EQUAL
8099: IFFALSE 8122
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8101: LD_ADDR_VAR 0 10
8105: PUSH
8106: LD_VAR 0 10
8110: PPUSH
8111: LD_INT 2
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 1
8121: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8122: LD_VAR 0 10
8126: PUSH
8127: LD_INT 3
8129: ARRAY
8130: PUSH
8131: LD_INT 1
8133: NEG
8134: EQUAL
8135: IFFALSE 8158
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8137: LD_ADDR_VAR 0 10
8141: PUSH
8142: LD_VAR 0 10
8146: PPUSH
8147: LD_INT 3
8149: PPUSH
8150: LD_INT 5
8152: PPUSH
8153: CALL_OW 1
8157: ST_TO_ADDR
// end else
8158: GO 8197
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8160: LD_ADDR_VAR 0 10
8164: PUSH
8165: LD_INT 0
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: LD_INT 4
8179: PUSH
8180: LD_INT 5
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_VAR 0 9
8195: DIFF
8196: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8197: LD_ADDR_VAR 0 14
8201: PUSH
8202: DOUBLE
8203: LD_INT 1
8205: DEC
8206: ST_TO_ADDR
8207: LD_VAR 0 10
8211: PUSH
8212: LD_INT 0
8214: PLUS
8215: PUSH
8216: FOR_TO
8217: IFFALSE 8539
// case dir_list [ c ] of 0 :
8219: LD_VAR 0 10
8223: PUSH
8224: LD_VAR 0 14
8228: ARRAY
8229: PUSH
8230: LD_INT 0
8232: DOUBLE
8233: EQUAL
8234: IFTRUE 8238
8236: GO 8279
8238: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8239: LD_ADDR_VAR 0 8
8243: PUSH
8244: LD_VAR 0 8
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_VAR 0 3
8261: PUSH
8262: LD_VAR 0 4
8266: MINUS
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 2
8276: ST_TO_ADDR
8277: GO 8537
8279: LD_INT 1
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8328
8287: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8288: LD_ADDR_VAR 0 8
8292: PUSH
8293: LD_VAR 0 8
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_VAR 0 2
8305: PUSH
8306: LD_VAR 0 4
8310: PLUS
8311: PUSH
8312: LD_VAR 0 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 2
8325: ST_TO_ADDR
8326: GO 8537
8328: LD_INT 2
8330: DOUBLE
8331: EQUAL
8332: IFTRUE 8336
8334: GO 8383
8336: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8337: LD_ADDR_VAR 0 8
8341: PUSH
8342: LD_VAR 0 8
8346: PPUSH
8347: LD_INT 1
8349: PPUSH
8350: LD_VAR 0 2
8354: PUSH
8355: LD_VAR 0 4
8359: PLUS
8360: PUSH
8361: LD_VAR 0 3
8365: PUSH
8366: LD_VAR 0 4
8370: PLUS
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 2
8380: ST_TO_ADDR
8381: GO 8537
8383: LD_INT 3
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8432
8391: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8392: LD_ADDR_VAR 0 8
8396: PUSH
8397: LD_VAR 0 8
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: LD_VAR 0 2
8409: PUSH
8410: LD_VAR 0 3
8414: PUSH
8415: LD_VAR 0 4
8419: PLUS
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PPUSH
8425: CALL_OW 2
8429: ST_TO_ADDR
8430: GO 8537
8432: LD_INT 4
8434: DOUBLE
8435: EQUAL
8436: IFTRUE 8440
8438: GO 8481
8440: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8441: LD_ADDR_VAR 0 8
8445: PUSH
8446: LD_VAR 0 8
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_VAR 0 2
8458: PUSH
8459: LD_VAR 0 4
8463: MINUS
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 2
8478: ST_TO_ADDR
8479: GO 8537
8481: LD_INT 5
8483: DOUBLE
8484: EQUAL
8485: IFTRUE 8489
8487: GO 8536
8489: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8490: LD_ADDR_VAR 0 8
8494: PUSH
8495: LD_VAR 0 8
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_VAR 0 2
8507: PUSH
8508: LD_VAR 0 4
8512: MINUS
8513: PUSH
8514: LD_VAR 0 3
8518: PUSH
8519: LD_VAR 0 4
8523: MINUS
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PPUSH
8529: CALL_OW 2
8533: ST_TO_ADDR
8534: GO 8537
8536: POP
8537: GO 8216
8539: POP
8540: POP
// if dist < 30 then
8541: LD_VAR 0 4
8545: PUSH
8546: LD_INT 30
8548: LESS
8549: IFFALSE 8561
// c = 1 else
8551: LD_ADDR_VAR 0 14
8555: PUSH
8556: LD_INT 1
8558: ST_TO_ADDR
8559: GO 8569
// c = 2 ;
8561: LD_ADDR_VAR 0 14
8565: PUSH
8566: LD_INT 2
8568: ST_TO_ADDR
// b = 1 ;
8569: LD_ADDR_VAR 0 11
8573: PUSH
8574: LD_INT 1
8576: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8577: LD_VAR 0 11
8581: PUSH
8582: LD_VAR 0 4
8586: PUSH
8587: LD_INT 1
8589: MINUS
8590: LESSEQUAL
8591: IFFALSE 9019
// begin if 0 in dir_list and 1 in dir_list then
8593: LD_INT 0
8595: PUSH
8596: LD_VAR 0 10
8600: IN
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: LD_VAR 0 10
8609: IN
8610: AND
8611: IFFALSE 8663
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8613: LD_ADDR_VAR 0 8
8617: PUSH
8618: LD_VAR 0 8
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 11
8635: PLUS
8636: PUSH
8637: LD_VAR 0 3
8641: PUSH
8642: LD_VAR 0 4
8646: MINUS
8647: PUSH
8648: LD_VAR 0 11
8652: PLUS
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PPUSH
8658: CALL_OW 2
8662: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8663: LD_INT 1
8665: PUSH
8666: LD_VAR 0 10
8670: IN
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: LD_VAR 0 10
8679: IN
8680: AND
8681: IFFALSE 8727
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8683: LD_ADDR_VAR 0 8
8687: PUSH
8688: LD_VAR 0 8
8692: PPUSH
8693: LD_INT 1
8695: PPUSH
8696: LD_VAR 0 2
8700: PUSH
8701: LD_VAR 0 4
8705: PLUS
8706: PUSH
8707: LD_VAR 0 3
8711: PUSH
8712: LD_VAR 0 11
8716: PLUS
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 2
8726: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
8727: LD_INT 2
8729: PUSH
8730: LD_VAR 0 10
8734: IN
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: LD_VAR 0 10
8743: IN
8744: AND
8745: IFFALSE 8797
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
8747: LD_ADDR_VAR 0 8
8751: PUSH
8752: LD_VAR 0 8
8756: PPUSH
8757: LD_INT 1
8759: PPUSH
8760: LD_VAR 0 2
8764: PUSH
8765: LD_VAR 0 4
8769: PLUS
8770: PUSH
8771: LD_VAR 0 11
8775: MINUS
8776: PUSH
8777: LD_VAR 0 3
8781: PUSH
8782: LD_VAR 0 4
8786: PLUS
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PPUSH
8792: CALL_OW 2
8796: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
8797: LD_INT 3
8799: PUSH
8800: LD_VAR 0 10
8804: IN
8805: PUSH
8806: LD_INT 4
8808: PUSH
8809: LD_VAR 0 10
8813: IN
8814: AND
8815: IFFALSE 8867
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
8817: LD_ADDR_VAR 0 8
8821: PUSH
8822: LD_VAR 0 8
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_VAR 0 11
8839: MINUS
8840: PUSH
8841: LD_VAR 0 3
8845: PUSH
8846: LD_VAR 0 4
8850: PLUS
8851: PUSH
8852: LD_VAR 0 11
8856: MINUS
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 2
8866: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
8867: LD_INT 4
8869: PUSH
8870: LD_VAR 0 10
8874: IN
8875: PUSH
8876: LD_INT 5
8878: PUSH
8879: LD_VAR 0 10
8883: IN
8884: AND
8885: IFFALSE 8931
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
8887: LD_ADDR_VAR 0 8
8891: PUSH
8892: LD_VAR 0 8
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_VAR 0 2
8904: PUSH
8905: LD_VAR 0 4
8909: MINUS
8910: PUSH
8911: LD_VAR 0 3
8915: PUSH
8916: LD_VAR 0 11
8920: MINUS
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 2
8930: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
8931: LD_INT 5
8933: PUSH
8934: LD_VAR 0 10
8938: IN
8939: PUSH
8940: LD_INT 0
8942: PUSH
8943: LD_VAR 0 10
8947: IN
8948: AND
8949: IFFALSE 9001
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
8951: LD_ADDR_VAR 0 8
8955: PUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 2
8968: PUSH
8969: LD_VAR 0 4
8973: MINUS
8974: PUSH
8975: LD_VAR 0 11
8979: PLUS
8980: PUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_VAR 0 4
8990: MINUS
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 2
9000: ST_TO_ADDR
// b = b + c end ;
9001: LD_ADDR_VAR 0 11
9005: PUSH
9006: LD_VAR 0 11
9010: PUSH
9011: LD_VAR 0 14
9015: PLUS
9016: ST_TO_ADDR
9017: GO 8577
// if list_coords = 0 then
9019: LD_VAR 0 8
9023: PUSH
9024: LD_INT 0
9026: EQUAL
9027: IFFALSE 9031
// exit ;
9029: GO 9539
// repeat min_dist = 5000 ;
9031: LD_ADDR_VAR 0 12
9035: PUSH
9036: LD_INT 5000
9038: ST_TO_ADDR
// for b in list_coords do
9039: LD_ADDR_VAR 0 11
9043: PUSH
9044: LD_VAR 0 8
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9109
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9052: LD_ADDR_VAR 0 13
9056: PUSH
9057: LD_VAR 0 1
9061: PPUSH
9062: LD_VAR 0 11
9066: PUSH
9067: LD_INT 1
9069: ARRAY
9070: PPUSH
9071: LD_VAR 0 11
9075: PUSH
9076: LD_INT 2
9078: ARRAY
9079: PPUSH
9080: CALL_OW 297
9084: ST_TO_ADDR
// if temp_dist < min_dist then
9085: LD_VAR 0 13
9089: PUSH
9090: LD_VAR 0 12
9094: LESS
9095: IFFALSE 9107
// min_dist = temp_dist ;
9097: LD_ADDR_VAR 0 12
9101: PUSH
9102: LD_VAR 0 13
9106: ST_TO_ADDR
// end ;
9107: GO 9049
9109: POP
9110: POP
// c = 0 ;
9111: LD_ADDR_VAR 0 14
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// repeat c = c + 1 ;
9119: LD_ADDR_VAR 0 14
9123: PUSH
9124: LD_VAR 0 14
9128: PUSH
9129: LD_INT 1
9131: PLUS
9132: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_VAR 0 8
9142: PUSH
9143: LD_VAR 0 14
9147: ARRAY
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 8
9157: PUSH
9158: LD_VAR 0 14
9162: ARRAY
9163: PUSH
9164: LD_INT 2
9166: ARRAY
9167: PPUSH
9168: CALL_OW 297
9172: PUSH
9173: LD_VAR 0 12
9177: EQUAL
9178: IFFALSE 9243
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 7
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: LD_VAR 0 8
9197: PUSH
9198: LD_VAR 0 14
9202: ARRAY
9203: PPUSH
9204: CALL_OW 2
9208: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9209: LD_ADDR_VAR 0 8
9213: PUSH
9214: LD_VAR 0 8
9218: PPUSH
9219: LD_VAR 0 14
9223: PPUSH
9224: CALL_OW 3
9228: ST_TO_ADDR
// c = c - 1 ;
9229: LD_ADDR_VAR 0 14
9233: PUSH
9234: LD_VAR 0 14
9238: PUSH
9239: LD_INT 1
9241: MINUS
9242: ST_TO_ADDR
// end ; until c = list_coords ;
9243: LD_VAR 0 14
9247: PUSH
9248: LD_VAR 0 8
9252: EQUAL
9253: IFFALSE 9119
// c = 0 ;
9255: LD_ADDR_VAR 0 14
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// if list_nearest > 0 then
9263: LD_VAR 0 7
9267: PUSH
9268: LD_INT 0
9270: GREATER
9271: IFFALSE 9413
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9273: LD_ADDR_VAR 0 15
9277: PUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_VAR 0 7
9285: PPUSH
9286: CALL_OW 12
9290: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9291: LD_ADDR_VAR 0 16
9295: PUSH
9296: LD_VAR 0 7
9300: PUSH
9301: LD_VAR 0 15
9305: ARRAY
9306: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9307: LD_VAR 0 16
9311: PUSH
9312: LD_INT 1
9314: ARRAY
9315: PPUSH
9316: LD_VAR 0 16
9320: PUSH
9321: LD_INT 2
9323: ARRAY
9324: PPUSH
9325: CALL_OW 488
9329: PUSH
9330: LD_INT 0
9332: GREATER
9333: PUSH
9334: LD_VAR 0 16
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_VAR 0 16
9347: PUSH
9348: LD_INT 2
9350: ARRAY
9351: PPUSH
9352: CALL_OW 428
9356: PUSH
9357: LD_INT 0
9359: EQUAL
9360: AND
9361: IFFALSE 9373
// c = 1 else
9363: LD_ADDR_VAR 0 14
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
9371: GO 9393
// list_nearest = Delete ( list_nearest , rand_num ) ;
9373: LD_ADDR_VAR 0 7
9377: PUSH
9378: LD_VAR 0 7
9382: PPUSH
9383: LD_VAR 0 15
9387: PPUSH
9388: CALL_OW 3
9392: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9393: LD_VAR 0 14
9397: PUSH
9398: LD_INT 1
9400: EQUAL
9401: PUSH
9402: LD_VAR 0 7
9406: PUSH
9407: LD_INT 0
9409: EQUAL
9410: OR
9411: IFFALSE 9273
// end ; until c = 1 or list_coords = 0 ;
9413: LD_VAR 0 14
9417: PUSH
9418: LD_INT 1
9420: EQUAL
9421: PUSH
9422: LD_VAR 0 8
9426: PUSH
9427: LD_INT 0
9429: EQUAL
9430: OR
9431: IFFALSE 9031
// attempts = attempts + 1 ;
9433: LD_ADDR_VAR 0 17
9437: PUSH
9438: LD_VAR 0 17
9442: PUSH
9443: LD_INT 1
9445: PLUS
9446: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9447: LD_VAR 0 14
9451: PUSH
9452: LD_INT 1
9454: EQUAL
9455: PUSH
9456: LD_VAR 0 17
9460: PUSH
9461: LD_INT 1
9463: GREATER
9464: OR
9465: IFFALSE 7990
// if c = 1 then
9467: LD_VAR 0 14
9471: PUSH
9472: LD_INT 1
9474: EQUAL
9475: IFFALSE 9539
// if add then
9477: LD_VAR 0 5
9481: IFFALSE 9512
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9483: LD_VAR 0 1
9487: PPUSH
9488: LD_VAR 0 16
9492: PUSH
9493: LD_INT 1
9495: ARRAY
9496: PPUSH
9497: LD_VAR 0 16
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PPUSH
9506: CALL_OW 171
9510: GO 9539
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9512: LD_VAR 0 1
9516: PPUSH
9517: LD_VAR 0 16
9521: PUSH
9522: LD_INT 1
9524: ARRAY
9525: PPUSH
9526: LD_VAR 0 16
9530: PUSH
9531: LD_INT 2
9533: ARRAY
9534: PPUSH
9535: CALL_OW 111
// end ;
9539: LD_VAR 0 6
9543: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9544: LD_INT 0
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9552: LD_VAR 0 1
9556: PPUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: CALL_OW 488
9566: NOT
9567: PUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_VAR 0 4
9577: PPUSH
9578: CALL_OW 488
9582: NOT
9583: OR
9584: IFFALSE 9597
// begin result = - 1 ;
9586: LD_ADDR_VAR 0 5
9590: PUSH
9591: LD_INT 1
9593: NEG
9594: ST_TO_ADDR
// exit ;
9595: GO 9757
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9597: LD_ADDR_VAR 0 6
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_VAR 0 4
9621: PPUSH
9622: CALL_OW 298
9626: ST_TO_ADDR
// dist_2 = 99999 ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_INT 99999
9634: ST_TO_ADDR
// for b = 0 to 5 do
9635: LD_ADDR_VAR 0 8
9639: PUSH
9640: DOUBLE
9641: LD_INT 0
9643: DEC
9644: ST_TO_ADDR
9645: LD_INT 5
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9745
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9651: LD_ADDR_VAR 0 9
9655: PUSH
9656: LD_VAR 0 1
9660: PPUSH
9661: LD_VAR 0 8
9665: PPUSH
9666: LD_VAR 0 6
9670: PPUSH
9671: CALL_OW 272
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: LD_VAR 0 8
9685: PPUSH
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 273
9695: PPUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_VAR 0 4
9705: PPUSH
9706: CALL_OW 298
9710: ST_TO_ADDR
// if temp_dist < dist_2 then
9711: LD_VAR 0 9
9715: PUSH
9716: LD_VAR 0 7
9720: LESS
9721: IFFALSE 9743
// begin dist_2 = temp_dist ;
9723: LD_ADDR_VAR 0 7
9727: PUSH
9728: LD_VAR 0 9
9732: ST_TO_ADDR
// dir = b ;
9733: LD_ADDR_VAR 0 10
9737: PUSH
9738: LD_VAR 0 8
9742: ST_TO_ADDR
// end ; end ;
9743: GO 9648
9745: POP
9746: POP
// result = dir ;
9747: LD_ADDR_VAR 0 5
9751: PUSH
9752: LD_VAR 0 10
9756: ST_TO_ADDR
// end ;
9757: LD_VAR 0 5
9761: RET
// export function MoveToHill ; begin
9762: LD_INT 0
9764: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
9765: LD_EXP 42
9769: PPUSH
9770: LD_INT 65
9772: PPUSH
9773: LD_INT 59
9775: PPUSH
9776: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
9780: LD_EXP 42
9784: PPUSH
9785: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
9789: LD_EXP 43
9793: PPUSH
9794: LD_INT 65
9796: PPUSH
9797: LD_INT 58
9799: PPUSH
9800: CALL_OW 111
// AddComCrawl ( Saseda ) ;
9804: LD_EXP 43
9808: PPUSH
9809: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
9813: LD_EXP 44
9817: PPUSH
9818: LD_INT 64
9820: PPUSH
9821: LD_INT 57
9823: PPUSH
9824: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
9828: LD_EXP 44
9832: PPUSH
9833: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
9837: LD_EXP 45
9841: PPUSH
9842: LD_INT 64
9844: PPUSH
9845: LD_INT 56
9847: PPUSH
9848: CALL_OW 111
// AddComCrawl ( Balei ) ;
9852: LD_EXP 45
9856: PPUSH
9857: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
9861: LD_EXP 46
9865: PPUSH
9866: LD_INT 63
9868: PPUSH
9869: LD_INT 55
9871: PPUSH
9872: CALL_OW 111
// AddComCrawl ( Belkov ) ;
9876: LD_EXP 46
9880: PPUSH
9881: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
9885: LD_EXP 47
9889: PPUSH
9890: LD_INT 66
9892: PPUSH
9893: LD_INT 58
9895: PPUSH
9896: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
9900: LD_EXP 47
9904: PPUSH
9905: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
9909: LD_EXP 49
9913: PPUSH
9914: CALL_OW 255
9918: PUSH
9919: LD_INT 6
9921: EQUAL
9922: PUSH
9923: LD_EXP 10
9927: AND
9928: IFFALSE 9954
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
9930: LD_EXP 49
9934: PPUSH
9935: LD_INT 63
9937: PPUSH
9938: LD_INT 54
9940: PPUSH
9941: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
9945: LD_EXP 49
9949: PPUSH
9950: CALL_OW 197
// end ; end ; end_of_file
9954: LD_VAR 0 1
9958: RET
// export function BurlakDying ; begin
9959: LD_INT 0
9961: PPUSH
// YouLost ( Burlak ) ;
9962: LD_STRING Burlak
9964: PPUSH
9965: CALL_OW 104
// end ;
9969: LD_VAR 0 1
9973: RET
// every 0 0$1 trigger kirovSolds = 0 do
9974: LD_EXP 51
9978: PUSH
9979: LD_INT 0
9981: EQUAL
9982: IFFALSE 9994
9984: GO 9986
9986: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
9987: LD_STRING KirovSoldsDie
9989: PPUSH
9990: CALL_OW 104
9994: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
9995: LD_EXP 20
9999: PUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_INT 22
10005: PUSH
10006: LD_INT 3
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 21
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PPUSH
10027: CALL_OW 71
10031: PUSH
10032: LD_INT 0
10034: EQUAL
10035: AND
10036: IFFALSE 10184
10038: GO 10040
10040: DISABLE
10041: LD_INT 0
10043: PPUSH
// begin case Query ( QExit2 ) of 1 :
10044: LD_STRING QExit2
10046: PPUSH
10047: CALL_OW 97
10051: PUSH
10052: LD_INT 1
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10164
10060: POP
// begin if IsOk ( Belkov ) then
10061: LD_EXP 46
10065: PPUSH
10066: CALL_OW 302
10070: IFFALSE 10086
// Say ( Belkov , D12-Bel-1 ) else
10072: LD_EXP 46
10076: PPUSH
10077: LD_STRING D12-Bel-1
10079: PPUSH
10080: CALL_OW 88
10084: GO 10146
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10086: LD_INT 22
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 21
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 50
10108: PUSH
10109: EMPTY
10110: LIST
10111: PUSH
10112: LD_INT 26
10114: PUSH
10115: LD_INT 1
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: PPUSH
10128: CALL_OW 69
10132: PPUSH
10133: LD_STRING D12-RSol1-1
10135: PPUSH
10136: LD_STRING 
10138: PPUSH
10139: LD_INT 0
10141: PPUSH
10142: CALL 7549 0 4
// SetRewards ;
10146: CALL 10187 0 0
// SavePlayerCharacters ;
10150: CALL 10538 0 0
// SaveGlobalVariables ;
10154: CALL 10668 0 0
// YouWin ;
10158: CALL_OW 103
// end ; 2 :
10162: GO 10184
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10183
10172: POP
// begin wait ( 0 0$5 ) ;
10173: LD_INT 175
10175: PPUSH
10176: CALL_OW 67
// enable ;
10180: ENABLE
// end ; end ;
10181: GO 10184
10183: POP
// end ;
10184: PPOPN 1
10186: END
// function SetRewards ; begin
10187: LD_INT 0
10189: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10190: LD_EXP 17
10194: NOT
10195: PUSH
10196: LD_EXP 18
10200: NOT
10201: AND
10202: IFFALSE 10214
// AddMedal ( NoEscape , 1 ) ;
10204: LD_STRING NoEscape
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10214: LD_EXP 17
10218: PUSH
10219: LD_EXP 18
10223: NOT
10224: AND
10225: IFFALSE 10238
// AddMedal ( NoEscape , - 1 ) ;
10227: LD_STRING NoEscape
10229: PPUSH
10230: LD_INT 1
10232: NEG
10233: PPUSH
10234: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10238: LD_EXP 17
10242: NOT
10243: PUSH
10244: LD_EXP 18
10248: AND
10249: IFFALSE 10262
// AddMedal ( NoEscape , - 2 ) ;
10251: LD_STRING NoEscape
10253: PPUSH
10254: LD_INT 2
10256: NEG
10257: PPUSH
10258: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10262: LD_EXP 17
10266: PUSH
10267: LD_EXP 18
10271: AND
10272: IFFALSE 10285
// AddMedal ( NoEscape , - 3 ) ;
10274: LD_STRING NoEscape
10276: PPUSH
10277: LD_INT 3
10279: NEG
10280: PPUSH
10281: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10285: LD_EXP 10
10289: PUSH
10290: LD_EXP 49
10294: PPUSH
10295: CALL_OW 302
10299: AND
10300: PUSH
10301: LD_EXP 19
10305: AND
10306: PUSH
10307: LD_EXP 48
10311: PPUSH
10312: CALL_OW 302
10316: AND
10317: IFFALSE 10329
// AddMedal ( Gnyevko , 1 ) ;
10319: LD_STRING Gnyevko
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10329: LD_EXP 10
10333: NOT
10334: PUSH
10335: LD_EXP 19
10339: AND
10340: PUSH
10341: LD_EXP 48
10345: PPUSH
10346: CALL_OW 302
10350: AND
10351: IFFALSE 10364
// AddMedal ( Gnyevko , - 1 ) ;
10353: LD_STRING Gnyevko
10355: PPUSH
10356: LD_INT 1
10358: NEG
10359: PPUSH
10360: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10364: LD_EXP 10
10368: PUSH
10369: LD_EXP 19
10373: NOT
10374: PUSH
10375: LD_EXP 49
10379: PPUSH
10380: CALL_OW 302
10384: NOT
10385: OR
10386: PUSH
10387: LD_EXP 48
10391: PPUSH
10392: CALL_OW 302
10396: NOT
10397: OR
10398: AND
10399: IFFALSE 10412
// AddMedal ( Gnyevko , - 2 ) ;
10401: LD_STRING Gnyevko
10403: PPUSH
10404: LD_INT 2
10406: NEG
10407: PPUSH
10408: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10412: LD_EXP 10
10416: NOT
10417: PUSH
10418: LD_EXP 19
10422: NOT
10423: AND
10424: PUSH
10425: LD_EXP 49
10429: PPUSH
10430: CALL_OW 302
10434: NOT
10435: PUSH
10436: LD_EXP 48
10440: PPUSH
10441: CALL_OW 302
10445: NOT
10446: AND
10447: OR
10448: IFFALSE 10461
// AddMedal ( Gnyevko , - 3 ) ;
10450: LD_STRING Gnyevko
10452: PPUSH
10453: LD_INT 3
10455: NEG
10456: PPUSH
10457: CALL_OW 101
// if lostComradesCounter = 0 then
10461: LD_EXP 21
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: IFFALSE 10483
// AddMedal ( NoLosses , 1 ) else
10471: LD_STRING NoLosses
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 101
10481: GO 10493
// AddMedal ( NoLosses , 0 ) ;
10483: LD_STRING NoLosses
10485: PPUSH
10486: LD_INT 0
10488: PPUSH
10489: CALL_OW 101
// GiveMedals ( Main ) ;
10493: LD_STRING Main
10495: PPUSH
10496: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10500: LD_INT 22
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 21
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 69
10528: PPUSH
10529: CALL_OW 43
// end ;
10533: LD_VAR 0 1
10537: RET
// function SavePlayerCharacters ; var others ; begin
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10542: LD_EXP 41
10546: PPUSH
10547: LD_STRING Burlak
10549: PPUSH
10550: CALL 7728 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10554: LD_EXP 49
10558: PPUSH
10559: LD_STRING Gnyevko
10561: PPUSH
10562: CALL 7728 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10566: LD_EXP 46
10570: PPUSH
10571: LD_STRING Belkov
10573: PPUSH
10574: CALL 7728 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10578: LD_EXP 48
10582: PPUSH
10583: LD_STRING Kirilenkova
10585: PPUSH
10586: CALL 7728 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_INT 3
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 21
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: PUSH
10624: LD_EXP 41
10628: PUSH
10629: LD_EXP 49
10633: PUSH
10634: LD_EXP 46
10638: PUSH
10639: LD_EXP 48
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: DIFF
10650: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
10651: LD_VAR 0 2
10655: PPUSH
10656: LD_STRING other_survivors
10658: PPUSH
10659: CALL 7784 0 2
// end ;
10663: LD_VAR 0 1
10667: RET
// function SaveGlobalVariables ; begin
10668: LD_INT 0
10670: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
10671: LD_EXP 1
10675: PPUSH
10676: LD_STRING 01_GladstoneStatus
10678: PPUSH
10679: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
10683: LD_EXP 2
10687: PPUSH
10688: LD_STRING 01_JohannaStatus
10690: PPUSH
10691: CALL_OW 39
// end ; end_of_file
10695: LD_VAR 0 1
10699: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
10700: LD_INT 0
10702: PPUSH
10703: PPUSH
10704: PPUSH
// uc_side = 1 ;
10705: LD_ADDR_OWVAR 20
10709: PUSH
10710: LD_INT 1
10712: ST_TO_ADDR
// hc_class := 1 ;
10713: LD_ADDR_OWVAR 28
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// hc_sex := sex_male ;
10721: LD_ADDR_OWVAR 27
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
10729: LD_ADDR_OWVAR 33
10733: PUSH
10734: LD_STRING AmGalRemake
10736: ST_TO_ADDR
// hc_face_number := 1 ;
10737: LD_ADDR_OWVAR 34
10741: PUSH
10742: LD_INT 1
10744: ST_TO_ADDR
// hc_name := Charles Brown ;
10745: LD_ADDR_OWVAR 26
10749: PUSH
10750: LD_STRING Charles Brown
10752: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
10753: LD_ADDR_OWVAR 29
10757: PUSH
10758: LD_INT 12
10760: PUSH
10761: LD_INT 11
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
10768: LD_ADDR_OWVAR 31
10772: PUSH
10773: LD_INT 1
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: LD_INT 1
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: ST_TO_ADDR
// Charles = CreateHuman ;
10791: LD_ADDR_EXP 37
10795: PUSH
10796: CALL_OW 44
10800: ST_TO_ADDR
// hc_class := 1 ;
10801: LD_ADDR_OWVAR 28
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// hc_sex := sex_female ;
10809: LD_ADDR_OWVAR 27
10813: PUSH
10814: LD_INT 2
10816: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
10817: LD_ADDR_OWVAR 33
10821: PUSH
10822: LD_STRING AmGalRemake
10824: ST_TO_ADDR
// hc_face_number := 2 ;
10825: LD_ADDR_OWVAR 34
10829: PUSH
10830: LD_INT 2
10832: ST_TO_ADDR
// hc_name := Johanna Holland ;
10833: LD_ADDR_OWVAR 26
10837: PUSH
10838: LD_STRING Johanna Holland
10840: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
10841: LD_ADDR_OWVAR 29
10845: PUSH
10846: LD_INT 12
10848: PUSH
10849: LD_INT 11
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
10856: LD_ADDR_OWVAR 31
10860: PUSH
10861: LD_EXP 32
10865: PUSH
10866: LD_INT 0
10868: PPUSH
10869: LD_INT 2
10871: PPUSH
10872: CALL_OW 12
10876: PUSH
10877: LD_INT 0
10879: PPUSH
10880: LD_INT 2
10882: PPUSH
10883: CALL_OW 12
10887: PUSH
10888: LD_INT 0
10890: PPUSH
10891: LD_INT 2
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: ST_TO_ADDR
// Johanna = CreateHuman ;
10905: LD_ADDR_EXP 38
10909: PUSH
10910: CALL_OW 44
10914: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
10915: LD_EXP 38
10919: PPUSH
10920: LD_INT 19
10922: PPUSH
10923: LD_INT 0
10925: PPUSH
10926: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
10930: LD_EXP 38
10934: PPUSH
10935: LD_INT 23
10937: PPUSH
10938: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
10942: LD_ADDR_EXP 39
10946: PUSH
10947: LD_STRING Gladstone
10949: PPUSH
10950: LD_INT 0
10952: PPUSH
10953: CALL 7486 0 2
10957: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
10958: LD_EXP 39
10962: PPUSH
10963: LD_INT 22
10965: PPUSH
10966: CALL_OW 52
// amApemans = [ ] ;
10970: LD_ADDR_EXP 40
10974: PUSH
10975: EMPTY
10976: ST_TO_ADDR
// for i := 1 to amApeAmount do
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: DOUBLE
10983: LD_INT 1
10985: DEC
10986: ST_TO_ADDR
10987: LD_EXP 31
10991: PUSH
10992: FOR_TO
10993: IFFALSE 11108
// begin hc_class := class_apeman ;
10995: LD_ADDR_OWVAR 28
10999: PUSH
11000: LD_INT 12
11002: ST_TO_ADDR
// hc_gallery :=  ;
11003: LD_ADDR_OWVAR 33
11007: PUSH
11008: LD_STRING 
11010: ST_TO_ADDR
// hc_name :=  ;
11011: LD_ADDR_OWVAR 26
11015: PUSH
11016: LD_STRING 
11018: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11019: LD_ADDR_OWVAR 31
11023: PUSH
11024: LD_EXP 32
11028: PUSH
11029: LD_INT 0
11031: PPUSH
11032: LD_INT 2
11034: PPUSH
11035: CALL_OW 12
11039: PUSH
11040: LD_INT 0
11042: PPUSH
11043: LD_INT 2
11045: PPUSH
11046: CALL_OW 12
11050: PUSH
11051: LD_INT 0
11053: PPUSH
11054: LD_INT 2
11056: PPUSH
11057: CALL_OW 12
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: ST_TO_ADDR
// ape = CreateHuman ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: CALL_OW 44
11077: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 22
11085: PPUSH
11086: CALL_OW 52
// amApemans = amApemans ^ ape ;
11090: LD_ADDR_EXP 40
11094: PUSH
11095: LD_EXP 40
11099: PUSH
11100: LD_VAR 0 3
11104: ADD
11105: ST_TO_ADDR
// end ;
11106: GO 10992
11108: POP
11109: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11110: LD_INT 23
11112: PPUSH
11113: LD_EXP 29
11117: PPUSH
11118: CALL_OW 234
// end ; end_of_file
11122: LD_VAR 0 1
11126: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11127: LD_INT 0
11129: PPUSH
// PrepareHero ;
11130: CALL 11155 0 0
// PreparePokryshkinTeams ;
11134: CALL 11249 0 0
// PrepareJelena ;
11138: CALL 11494 0 0
// PrepareGnyevko ;
11142: CALL 11526 0 0
// PrepareKurin ;
11146: CALL 11217 0 0
// end ;
11150: LD_VAR 0 1
11154: RET
// function PrepareHero ; begin
11155: LD_INT 0
11157: PPUSH
// uc_side = 3 ;
11158: LD_ADDR_OWVAR 20
11162: PUSH
11163: LD_INT 3
11165: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11166: LD_ADDR_EXP 41
11170: PUSH
11171: LD_STRING Burlak
11173: PPUSH
11174: LD_INT 0
11176: PPUSH
11177: CALL 7486 0 2
11181: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11182: LD_EXP 41
11186: PPUSH
11187: LD_EXP 33
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: LD_EXP 33
11200: PUSH
11201: LD_INT 2
11203: ARRAY
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 48
// end ;
11212: LD_VAR 0 1
11216: RET
// function PrepareKurin ; begin
11217: LD_INT 0
11219: PPUSH
// uc_side = 6 ;
11220: LD_ADDR_OWVAR 20
11224: PUSH
11225: LD_INT 6
11227: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11228: LD_ADDR_EXP 50
11232: PUSH
11233: LD_STRING Kurin
11235: PPUSH
11236: LD_INT 0
11238: PPUSH
11239: CALL 7486 0 2
11243: ST_TO_ADDR
// end ;
11244: LD_VAR 0 1
11248: RET
// function PreparePokryshkinTeams ; begin
11249: LD_INT 0
11251: PPUSH
// uc_side = 6 ;
11252: LD_ADDR_OWVAR 20
11256: PUSH
11257: LD_INT 6
11259: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11260: LD_ADDR_EXP 42
11264: PUSH
11265: LD_STRING Pokryshkin
11267: PPUSH
11268: LD_INT 0
11270: PPUSH
11271: CALL 7486 0 2
11275: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11276: LD_ADDR_EXP 43
11280: PUSH
11281: LD_STRING Saseda
11283: PPUSH
11284: LD_INT 0
11286: PPUSH
11287: CALL 7486 0 2
11291: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11292: LD_ADDR_EXP 44
11296: PUSH
11297: LD_STRING Jaworska
11299: PPUSH
11300: LD_INT 0
11302: PPUSH
11303: CALL 7486 0 2
11307: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11308: LD_ADDR_EXP 45
11312: PUSH
11313: LD_STRING Balei
11315: PPUSH
11316: LD_INT 0
11318: PPUSH
11319: CALL 7486 0 2
11323: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11324: LD_ADDR_EXP 46
11328: PUSH
11329: LD_STRING Belkov
11331: PPUSH
11332: LD_INT 0
11334: PPUSH
11335: CALL 7486 0 2
11339: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11340: LD_ADDR_EXP 47
11344: PUSH
11345: LD_STRING Jaunzeme
11347: PPUSH
11348: LD_INT 0
11350: PPUSH
11351: CALL 7486 0 2
11355: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
11356: LD_EXP 42
11360: PPUSH
11361: LD_INT 17
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11371: LD_EXP 43
11375: PPUSH
11376: LD_INT 17
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11386: LD_EXP 44
11390: PPUSH
11391: LD_INT 17
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11401: LD_EXP 45
11405: PPUSH
11406: LD_INT 17
11408: PPUSH
11409: LD_INT 0
11411: PPUSH
11412: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11416: LD_EXP 46
11420: PPUSH
11421: LD_INT 17
11423: PPUSH
11424: LD_INT 0
11426: PPUSH
11427: CALL_OW 49
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
11431: LD_EXP 47
11435: PPUSH
11436: LD_INT 17
11438: PPUSH
11439: LD_INT 0
11441: PPUSH
11442: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Jaunzeme , Balei , Belkov , Jaworska ] ;
11446: LD_ADDR_EXP 51
11450: PUSH
11451: LD_EXP 42
11455: PUSH
11456: LD_EXP 43
11460: PUSH
11461: LD_EXP 47
11465: PUSH
11466: LD_EXP 45
11470: PUSH
11471: LD_EXP 46
11475: PUSH
11476: LD_EXP 44
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: ST_TO_ADDR
// end ;
11489: LD_VAR 0 1
11493: RET
// function PrepareJelena ; begin
11494: LD_INT 0
11496: PPUSH
// uc_side = 8 ;
11497: LD_ADDR_OWVAR 20
11501: PUSH
11502: LD_INT 8
11504: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11505: LD_ADDR_EXP 48
11509: PUSH
11510: LD_STRING Kirilenkova
11512: PPUSH
11513: LD_INT 0
11515: PPUSH
11516: CALL 7486 0 2
11520: ST_TO_ADDR
// end ;
11521: LD_VAR 0 1
11525: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
// uc_side = 8 ;
11532: LD_ADDR_OWVAR 20
11536: PUSH
11537: LD_INT 8
11539: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11540: LD_ADDR_EXP 49
11544: PUSH
11545: LD_STRING Gnyevko
11547: PPUSH
11548: LD_INT 0
11550: PPUSH
11551: CALL 7486 0 2
11555: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11556: LD_ADDR_VAR 0 4
11560: PUSH
11561: LD_EXP 34
11565: PUSH
11566: LD_INT 1
11568: PPUSH
11569: LD_EXP 34
11573: PPUSH
11574: CALL_OW 12
11578: ARRAY
11579: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11580: LD_EXP 49
11584: PPUSH
11585: LD_VAR 0 4
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 4
11598: PUSH
11599: LD_INT 2
11601: ARRAY
11602: PPUSH
11603: LD_INT 0
11605: PPUSH
11606: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11610: LD_EXP 49
11614: PPUSH
11615: LD_INT 500
11617: PPUSH
11618: CALL_OW 234
// ComHold ( Gnyevko ) ;
11622: LD_EXP 49
11626: PPUSH
11627: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: DOUBLE
11637: LD_INT 1
11639: DEC
11640: ST_TO_ADDR
11641: LD_EXP 23
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PUSH
11650: LD_INT 3
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: LD_OWVAR 67
11668: ARRAY
11669: MINUS
11670: PUSH
11671: FOR_TO
11672: IFFALSE 11802
// begin uc_side = 0 ;
11674: LD_ADDR_OWVAR 20
11678: PUSH
11679: LD_INT 0
11681: ST_TO_ADDR
// uc_nation = nation_nature ;
11682: LD_ADDR_OWVAR 21
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// hc_class = class_apeman ;
11690: LD_ADDR_OWVAR 28
11694: PUSH
11695: LD_INT 12
11697: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11698: LD_ADDR_OWVAR 31
11702: PUSH
11703: LD_EXP 24
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PUSH
11712: LD_EXP 24
11716: PUSH
11717: LD_INT 2
11719: ARRAY
11720: PUSH
11721: LD_EXP 24
11725: PUSH
11726: LD_INT 3
11728: ARRAY
11729: PUSH
11730: LD_EXP 24
11734: PUSH
11735: LD_INT 4
11737: ARRAY
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: ST_TO_ADDR
// hc_agressivity = apeAgression ;
11745: LD_ADDR_OWVAR 35
11749: PUSH
11750: LD_EXP 30
11754: ST_TO_ADDR
// un = CreateHuman ;
11755: LD_ADDR_VAR 0 2
11759: PUSH
11760: CALL_OW 44
11764: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
11765: LD_VAR 0 2
11769: PPUSH
11770: LD_EXP 49
11774: PPUSH
11775: CALL_OW 250
11779: PPUSH
11780: LD_EXP 49
11784: PPUSH
11785: CALL_OW 251
11789: PPUSH
11790: LD_INT 8
11792: PPUSH
11793: LD_INT 0
11795: PPUSH
11796: CALL_OW 50
// end ;
11800: GO 11671
11802: POP
11803: POP
// end ; end_of_file
11804: LD_VAR 0 1
11808: RET
// export function PrepareNature ; var i , un ; begin
11809: LD_INT 0
11811: PPUSH
11812: PPUSH
11813: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
11814: LD_ADDR_VAR 0 2
11818: PUSH
11819: DOUBLE
11820: LD_INT 1
11822: DEC
11823: ST_TO_ADDR
11824: LD_EXP 23
11828: PUSH
11829: LD_INT 1
11831: ARRAY
11832: PUSH
11833: FOR_TO
11834: IFFALSE 11944
// begin uc_side = 0 ;
11836: LD_ADDR_OWVAR 20
11840: PUSH
11841: LD_INT 0
11843: ST_TO_ADDR
// uc_nation = nation_nature ;
11844: LD_ADDR_OWVAR 21
11848: PUSH
11849: LD_INT 0
11851: ST_TO_ADDR
// hc_class = class_apeman ;
11852: LD_ADDR_OWVAR 28
11856: PUSH
11857: LD_INT 12
11859: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11860: LD_ADDR_OWVAR 31
11864: PUSH
11865: LD_EXP 24
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PUSH
11874: LD_EXP 24
11878: PUSH
11879: LD_INT 2
11881: ARRAY
11882: PUSH
11883: LD_EXP 24
11887: PUSH
11888: LD_INT 3
11890: ARRAY
11891: PUSH
11892: LD_EXP 24
11896: PUSH
11897: LD_INT 4
11899: ARRAY
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: ST_TO_ADDR
// hc_agressivity = apeAgression ;
11907: LD_ADDR_OWVAR 35
11911: PUSH
11912: LD_EXP 30
11916: ST_TO_ADDR
// un = CreateHuman ;
11917: LD_ADDR_VAR 0 3
11921: PUSH
11922: CALL_OW 44
11926: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 16
11934: PPUSH
11935: LD_INT 0
11937: PPUSH
11938: CALL_OW 49
// end ;
11942: GO 11833
11944: POP
11945: POP
// for i := 1 to animalsAmount [ 2 ] do
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: DOUBLE
11952: LD_INT 1
11954: DEC
11955: ST_TO_ADDR
11956: LD_EXP 23
11960: PUSH
11961: LD_INT 2
11963: ARRAY
11964: PUSH
11965: FOR_TO
11966: IFFALSE 12076
// begin uc_side = 0 ;
11968: LD_ADDR_OWVAR 20
11972: PUSH
11973: LD_INT 0
11975: ST_TO_ADDR
// uc_nation = nation_nature ;
11976: LD_ADDR_OWVAR 21
11980: PUSH
11981: LD_INT 0
11983: ST_TO_ADDR
// hc_class = class_phororhacos ;
11984: LD_ADDR_OWVAR 28
11988: PUSH
11989: LD_INT 18
11991: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11992: LD_ADDR_OWVAR 31
11996: PUSH
11997: LD_EXP 24
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: PUSH
12006: LD_EXP 24
12010: PUSH
12011: LD_INT 2
12013: ARRAY
12014: PUSH
12015: LD_EXP 24
12019: PUSH
12020: LD_INT 3
12022: ARRAY
12023: PUSH
12024: LD_EXP 24
12028: PUSH
12029: LD_INT 4
12031: ARRAY
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12039: LD_ADDR_OWVAR 35
12043: PUSH
12044: LD_EXP 25
12048: ST_TO_ADDR
// un = CreateHuman ;
12049: LD_ADDR_VAR 0 3
12053: PUSH
12054: CALL_OW 44
12058: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 15
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL_OW 49
// end ;
12074: GO 11965
12076: POP
12077: POP
// for i := 1 to animalsAmount [ 3 ] do
12078: LD_ADDR_VAR 0 2
12082: PUSH
12083: DOUBLE
12084: LD_INT 1
12086: DEC
12087: ST_TO_ADDR
12088: LD_EXP 23
12092: PUSH
12093: LD_INT 3
12095: ARRAY
12096: PUSH
12097: FOR_TO
12098: IFFALSE 12208
// begin uc_side = 0 ;
12100: LD_ADDR_OWVAR 20
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// uc_nation = nation_nature ;
12108: LD_ADDR_OWVAR 21
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// hc_class = class_tiger ;
12116: LD_ADDR_OWVAR 28
12120: PUSH
12121: LD_INT 14
12123: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12124: LD_ADDR_OWVAR 31
12128: PUSH
12129: LD_EXP 24
12133: PUSH
12134: LD_INT 1
12136: ARRAY
12137: PUSH
12138: LD_EXP 24
12142: PUSH
12143: LD_INT 2
12145: ARRAY
12146: PUSH
12147: LD_EXP 24
12151: PUSH
12152: LD_INT 3
12154: ARRAY
12155: PUSH
12156: LD_EXP 24
12160: PUSH
12161: LD_INT 4
12163: ARRAY
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12171: LD_ADDR_OWVAR 35
12175: PUSH
12176: LD_EXP 25
12180: ST_TO_ADDR
// un = CreateHuman ;
12181: LD_ADDR_VAR 0 3
12185: PUSH
12186: CALL_OW 44
12190: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_INT 15
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 49
// end ;
12206: GO 12097
12208: POP
12209: POP
// for i := 1 to animalsAmount [ 4 ] do
12210: LD_ADDR_VAR 0 2
12214: PUSH
12215: DOUBLE
12216: LD_INT 1
12218: DEC
12219: ST_TO_ADDR
12220: LD_EXP 23
12224: PUSH
12225: LD_INT 4
12227: ARRAY
12228: PUSH
12229: FOR_TO
12230: IFFALSE 12340
// begin uc_side = 0 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// uc_nation = nation_nature ;
12240: LD_ADDR_OWVAR 21
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// hc_class = 21 ;
12248: LD_ADDR_OWVAR 28
12252: PUSH
12253: LD_INT 21
12255: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12256: LD_ADDR_OWVAR 31
12260: PUSH
12261: LD_EXP 24
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PUSH
12270: LD_EXP 24
12274: PUSH
12275: LD_INT 2
12277: ARRAY
12278: PUSH
12279: LD_EXP 24
12283: PUSH
12284: LD_INT 3
12286: ARRAY
12287: PUSH
12288: LD_EXP 24
12292: PUSH
12293: LD_INT 4
12295: ARRAY
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12303: LD_ADDR_OWVAR 35
12307: PUSH
12308: LD_EXP 25
12312: ST_TO_ADDR
// un = CreateHuman ;
12313: LD_ADDR_VAR 0 3
12317: PUSH
12318: CALL_OW 44
12322: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 15
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL_OW 49
// end ;
12338: GO 12229
12340: POP
12341: POP
// end ; end_of_file
12342: LD_VAR 0 1
12346: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12347: LD_VAR 0 1
12351: PUSH
12352: LD_EXP 41
12356: EQUAL
12357: PUSH
12358: LD_EXP 48
12362: PPUSH
12363: CALL_OW 255
12367: PUSH
12368: LD_INT 3
12370: EQUAL
12371: NOT
12372: AND
12373: PUSH
12374: LD_EXP 48
12378: PPUSH
12379: CALL_OW 302
12383: NOT
12384: AND
12385: IFFALSE 12391
// BurlakDying ;
12387: CALL 9959 0 0
// if unit = Gladstone then
12391: LD_VAR 0 1
12395: PUSH
12396: LD_EXP 39
12400: EQUAL
12401: IFFALSE 12411
// gladstoneStatus = 0 ;
12403: LD_ADDR_EXP 1
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// if unit = Johanna then
12411: LD_VAR 0 1
12415: PUSH
12416: LD_EXP 38
12420: EQUAL
12421: IFFALSE 12431
// johannaStatus = 0 ;
12423: LD_ADDR_EXP 2
12427: PUSH
12428: LD_INT 0
12430: ST_TO_ADDR
// end ;
12431: PPOPN 1
12433: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12434: LD_VAR 0 1
12438: PUSH
12439: LD_EXP 41
12443: EQUAL
12444: IFFALSE 12450
// BurlakDying ;
12446: CALL 9959 0 0
// if GetSide ( unit ) = 3 then
12450: LD_VAR 0 1
12454: PPUSH
12455: CALL_OW 255
12459: PUSH
12460: LD_INT 3
12462: EQUAL
12463: IFFALSE 12479
// lostComradesCounter = lostComradesCounter + 1 ;
12465: LD_ADDR_EXP 21
12469: PUSH
12470: LD_EXP 21
12474: PUSH
12475: LD_INT 1
12477: PLUS
12478: ST_TO_ADDR
// if unit in kirovSolds then
12479: LD_VAR 0 1
12483: PUSH
12484: LD_EXP 51
12488: IN
12489: IFFALSE 12507
// kirovSolds = kirovSolds diff unit ;
12491: LD_ADDR_EXP 51
12495: PUSH
12496: LD_EXP 51
12500: PUSH
12501: LD_VAR 0 1
12505: DIFF
12506: ST_TO_ADDR
// end ;
12507: PPOPN 1
12509: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12510: LD_VAR 0 1
12514: PUSH
12515: LD_INT 3
12517: EQUAL
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_INT 1
12526: EQUAL
12527: AND
12528: PUSH
12529: LD_VAR 0 1
12533: PUSH
12534: LD_INT 1
12536: EQUAL
12537: PUSH
12538: LD_VAR 0 2
12542: PUSH
12543: LD_INT 3
12545: EQUAL
12546: AND
12547: PUSH
12548: LD_EXP 15
12552: PUSH
12553: LD_INT 1
12555: EQUAL
12556: AND
12557: OR
12558: IFFALSE 12564
// Dial_SecondAttack ;
12560: CALL 5514 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12564: LD_VAR 0 1
12568: PUSH
12569: LD_INT 3
12571: EQUAL
12572: PUSH
12573: LD_VAR 0 2
12577: PUSH
12578: LD_INT 6
12580: EQUAL
12581: AND
12582: PUSH
12583: LD_EXP 16
12587: NOT
12588: AND
12589: IFFALSE 12595
// Dialogue_AttackComrade ;
12591: CALL 3709 0 0
// end ; end_of_file
12595: PPOPN 2
12597: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12598: LD_INT 0
12600: PPUSH
12601: PPUSH
// if not missionNumber then
12602: LD_VAR 0 2
12606: NOT
12607: IFFALSE 12611
// exit ;
12609: GO 12741
// achiv := false ;
12611: LD_ADDR_VAR 0 7
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// case campaignNumber of 1 :
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12643
12632: POP
// achiv := ACH_GOTA ; 2 :
12633: LD_ADDR_VAR 0 7
12637: PUSH
12638: LD_STRING ACH_GOTA
12640: ST_TO_ADDR
12641: GO 12693
12643: LD_INT 2
12645: DOUBLE
12646: EQUAL
12647: IFTRUE 12651
12649: GO 12654
12651: POP
// ; 3 :
12652: GO 12693
12654: LD_INT 3
12656: DOUBLE
12657: EQUAL
12658: IFTRUE 12662
12660: GO 12673
12662: POP
// achiv := ACH_MOTSU ; 4 :
12663: LD_ADDR_VAR 0 7
12667: PUSH
12668: LD_STRING ACH_MOTSU
12670: ST_TO_ADDR
12671: GO 12693
12673: LD_INT 4
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 12692
12681: POP
// achiv := ACH_LOP ; end ;
12682: LD_ADDR_VAR 0 7
12686: PUSH
12687: LD_STRING ACH_LOP
12689: ST_TO_ADDR
12690: GO 12693
12692: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
12693: LD_OWVAR 67
12697: PUSH
12698: LD_INT 3
12700: EQUAL
12701: PUSH
12702: LD_VAR 0 7
12706: AND
12707: PUSH
12708: LD_VAR 0 3
12712: AND
12713: PUSH
12714: LD_VAR 0 4
12718: AND
12719: PUSH
12720: LD_VAR 0 5
12724: AND
12725: IFFALSE 12741
// SetAchievementEX ( achiv , missionNumber ) ;
12727: LD_VAR 0 7
12731: PPUSH
12732: LD_VAR 0 2
12736: PPUSH
12737: CALL_OW 564
// end ;
12741: LD_VAR 0 6
12745: RET
// export function SA_BehemothConstructed ; begin
12746: LD_INT 0
12748: PPUSH
// SetAchievement ( ACH_SMC ) ;
12749: LD_STRING ACH_SMC
12751: PPUSH
12752: CALL_OW 543
// end ;
12756: LD_VAR 0 1
12760: RET
