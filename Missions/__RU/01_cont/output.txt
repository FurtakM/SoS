// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 276 0 0
// PrepareNature ;
  24: CALL 12094 0 0
// PrepareRussian ;
  28: CALL 11392 0 0
// PrepareAmericans ;
  32: CALL 10965 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 22
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: EMPTY
 207: LIST
 208: LIST
 209: PUSH
 210: LD_INT 25
 212: PUSH
 213: LD_INT 12
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PPUSH
 224: CALL_OW 69
 228: PUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 22
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 25
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: PPUSH
 256: CALL_OW 69
 260: PPUSH
 261: CALL_OW 12
 265: ARRAY
 266: ST_TO_ADDR
// MissionIntro ;
 267: CALL 832 0 0
// end ; end_of_file
 271: LD_VAR 0 1
 275: RET
// export function InitMapConfig ; begin
 276: LD_INT 0
 278: PPUSH
// BaseMapConfig ;
 279: CALL 292 0 0
// MissionMapConfig ;
 283: CALL 378 0 0
// end ;
 287: LD_VAR 0 1
 291: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 292: LD_INT 0
 294: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 295: LD_ADDR_EXP 24
 299: PUSH
 300: LD_INT 5
 302: PUSH
 303: LD_INT 4
 305: PUSH
 306: LD_INT 2
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 318: LD_ADDR_EXP 25
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: LD_INT 2
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: ST_TO_ADDR
// animalsAgression = 0 ;
 341: LD_ADDR_EXP 26
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// debugMode = 0 ;
 349: LD_ADDR_EXP 29
 353: PUSH
 354: LD_INT 0
 356: ST_TO_ADDR
// missionPrefix = 01_ ;
 357: LD_ADDR_EXP 27
 361: PUSH
 362: LD_STRING 01_
 364: ST_TO_ADDR
// previousMissionPrefix =  ;
 365: LD_ADDR_EXP 28
 369: PUSH
 370: LD_STRING 
 372: ST_TO_ADDR
// end ;
 373: LD_VAR 0 1
 377: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 378: LD_INT 0
 380: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 381: LD_ADDR_EXP 30
 385: PUSH
 386: LD_INT 800
 388: PUSH
 389: LD_INT 900
 391: PUSH
 392: LD_INT 950
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 406: LD_ADDR_EXP 31
 410: PUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 5
 416: PPUSH
 417: CALL_OW 12
 421: PUSH
 422: LD_OWVAR 67
 426: MUL
 427: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 428: LD_ADDR_EXP 32
 432: PUSH
 433: LD_INT 5
 435: PUSH
 436: LD_INT 6
 438: PUSH
 439: LD_INT 6
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 453: LD_ADDR_EXP 33
 457: PUSH
 458: LD_INT 0
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 2
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: PUSH
 472: LD_OWVAR 67
 476: ARRAY
 477: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 478: LD_ADDR_EXP 34
 482: PUSH
 483: LD_INT 78
 485: PUSH
 486: LD_INT 87
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 493: LD_ADDR_EXP 35
 497: PUSH
 498: LD_INT 72
 500: PUSH
 501: LD_INT 115
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 99
 510: PUSH
 511: LD_INT 7
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 131
 520: PUSH
 521: LD_INT 81
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 533: LD_ADDR_EXP 36
 537: PUSH
 538: LD_INT 600
 540: PUSH
 541: LD_INT 550
 543: PUSH
 544: LD_INT 500
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: PUSH
 552: LD_OWVAR 67
 556: ARRAY
 557: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 558: LD_ADDR_EXP 37
 562: PUSH
 563: LD_INT 21000
 565: PUSH
 566: LD_INT 16800
 568: PUSH
 569: LD_INT 12600
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: PUSH
 577: LD_OWVAR 67
 581: ARRAY
 582: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 583: LD_ADDR_EXP 38
 587: PUSH
 588: LD_INT 6300
 590: PUSH
 591: LD_INT 5250
 593: PUSH
 594: LD_INT 4200
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: PUSH
 602: LD_OWVAR 67
 606: ARRAY
 607: ST_TO_ADDR
// end ;
 608: LD_VAR 0 1
 612: RET
// every 0 0$1 trigger debugMode do var i ;
 613: LD_EXP 29
 617: IFFALSE 829
 619: GO 621
 621: DISABLE
 622: LD_INT 0
 624: PPUSH
// begin enable ;
 625: ENABLE
// FogOff ( your_side ) ;
 626: LD_OWVAR 2
 630: PPUSH
 631: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 635: LD_ADDR_VAR 0 1
 639: PUSH
 640: LD_INT 22
 642: PUSH
 643: LD_OWVAR 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 1
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 21
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 69
 688: PUSH
 689: FOR_IN
 690: IFFALSE 706
// SetLives ( i , 1000 ) ;
 692: LD_VAR 0 1
 696: PPUSH
 697: LD_INT 1000
 699: PPUSH
 700: CALL_OW 234
 704: GO 689
 706: POP
 707: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 708: LD_ADDR_VAR 0 1
 712: PUSH
 713: LD_INT 22
 715: PUSH
 716: LD_OWVAR 2
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 2
 727: PUSH
 728: LD_INT 30
 730: PUSH
 731: LD_INT 0
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 30
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PPUSH
 757: CALL_OW 69
 761: PUSH
 762: FOR_IN
 763: IFFALSE 827
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 274
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: LD_INT 9999
 780: PPUSH
 781: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 785: LD_VAR 0 1
 789: PPUSH
 790: CALL_OW 274
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: LD_INT 9999
 800: PPUSH
 801: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 805: LD_VAR 0 1
 809: PPUSH
 810: CALL_OW 274
 814: PPUSH
 815: LD_INT 3
 817: PPUSH
 818: LD_INT 9999
 820: PPUSH
 821: CALL_OW 277
// end ;
 825: GO 762
 827: POP
 828: POP
// end ; end_of_file
 829: PPOPN 1
 831: END
// export function MissionIntro ; begin
 832: LD_INT 0
 834: PPUSH
// InGameOn ;
 835: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 839: LD_EXP 34
 843: PUSH
 844: LD_INT 1
 846: ARRAY
 847: PUSH
 848: LD_INT 8
 850: MINUS
 851: PPUSH
 852: LD_EXP 34
 856: PUSH
 857: LD_INT 2
 859: ARRAY
 860: PUSH
 861: LD_INT 8
 863: MINUS
 864: PPUSH
 865: CALL_OW 84
// wait ( 0 0$3 ) ;
 869: LD_INT 105
 871: PPUSH
 872: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 876: LD_EXP 43
 880: PPUSH
 881: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 885: LD_EXP 43
 889: PPUSH
 890: LD_STRING D1-Bur-1
 892: PPUSH
 893: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 897: LD_EXP 43
 901: PPUSH
 902: LD_INT 94
 904: PPUSH
 905: LD_INT 89
 907: PPUSH
 908: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 912: LD_INT 94
 914: PPUSH
 915: LD_INT 89
 917: PPUSH
 918: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 922: LD_EXP 43
 926: PPUSH
 927: LD_STRING D1-Bur-1a
 929: PPUSH
 930: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 934: LD_EXP 43
 938: PPUSH
 939: LD_INT 102
 941: PPUSH
 942: LD_INT 88
 944: PPUSH
 945: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 949: LD_INT 102
 951: PPUSH
 952: LD_INT 88
 954: PPUSH
 955: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 959: LD_EXP 43
 963: PPUSH
 964: LD_STRING D1-Bur-1b
 966: PPUSH
 967: CALL_OW 88
// InGameOff ;
 971: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 975: LD_STRING M1
 977: PPUSH
 978: CALL_OW 337
// SaveForQuickRestart ;
 982: CALL_OW 22
// introEnd = true ;
 986: LD_ADDR_EXP 3
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// end ;
 994: LD_VAR 0 1
 998: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
 999: LD_EXP 43
1003: PPUSH
1004: LD_INT 74
1006: PPUSH
1007: LD_INT 88
1009: PPUSH
1010: CALL_OW 297
1014: PUSH
1015: LD_INT 5
1017: LESS
1018: PUSH
1019: LD_EXP 3
1023: AND
1024: IFFALSE 1049
1026: GO 1028
1028: DISABLE
// begin spotWaterfall = true ;
1029: LD_ADDR_EXP 7
1033: PUSH
1034: LD_INT 1
1036: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1037: LD_EXP 43
1041: PPUSH
1042: LD_STRING DWaterfall-Bur-1
1044: PPUSH
1045: CALL_OW 88
// end ;
1049: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1050: LD_EXP 43
1054: PPUSH
1055: LD_INT 130
1057: PPUSH
1058: LD_INT 96
1060: PPUSH
1061: CALL_OW 297
1065: PUSH
1066: LD_INT 5
1068: LESS
1069: PUSH
1070: LD_EXP 3
1074: AND
1075: IFFALSE 1092
1077: GO 1079
1079: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1080: LD_EXP 43
1084: PPUSH
1085: LD_STRING DCorpse-Bur-1
1087: PPUSH
1088: CALL_OW 88
1092: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1093: LD_EXP 4
1097: NOT
1098: IFFALSE 1192
1100: GO 1102
1102: DISABLE
1103: LD_INT 0
1105: PPUSH
// begin enable ;
1106: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1107: LD_ADDR_VAR 0 1
1111: PUSH
1112: LD_INT 22
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 25
1124: PUSH
1125: LD_INT 12
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PPUSH
1136: CALL_OW 69
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1190
// if GetDistUnits ( apeman , Burlak ) < 7 then
1144: LD_VAR 0 1
1148: PPUSH
1149: LD_EXP 43
1153: PPUSH
1154: CALL_OW 296
1158: PUSH
1159: LD_INT 7
1161: LESS
1162: IFFALSE 1188
// begin apemansContact = true ;
1164: LD_ADDR_EXP 4
1168: PUSH
1169: LD_INT 1
1171: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1172: LD_EXP 43
1176: PPUSH
1177: LD_STRING D2-Bur-1
1179: PPUSH
1180: CALL_OW 88
// exit ;
1184: POP
1185: POP
1186: GO 1192
// end ;
1188: GO 1141
1190: POP
1191: POP
// end ;
1192: PPOPN 1
1194: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1195: LD_EXP 5
1199: NOT
1200: IFFALSE 1316
1202: GO 1204
1204: DISABLE
1205: LD_INT 0
1207: PPUSH
1208: PPUSH
// begin enable ;
1209: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1210: LD_ADDR_VAR 0 2
1214: PUSH
1215: LD_INT 22
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 25
1227: PUSH
1228: LD_INT 12
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PPUSH
1239: CALL_OW 69
1243: PUSH
1244: FOR_IN
1245: IFFALSE 1314
// if Attacks ( apeman ) then
1247: LD_VAR 0 2
1251: PPUSH
1252: CALL_OW 320
1256: IFFALSE 1312
// if GetSide ( Attacks ( apeman ) ) = 3 then
1258: LD_VAR 0 2
1262: PPUSH
1263: CALL_OW 320
1267: PPUSH
1268: CALL_OW 255
1272: PUSH
1273: LD_INT 3
1275: EQUAL
1276: IFFALSE 1312
// begin attackedByApeman = true ;
1278: LD_ADDR_EXP 5
1282: PUSH
1283: LD_INT 1
1285: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1286: LD_ADDR_EXP 8
1290: PUSH
1291: LD_VAR 0 2
1295: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1296: LD_EXP 43
1300: PPUSH
1301: LD_STRING D2-Bur-1a
1303: PPUSH
1304: CALL_OW 88
// exit ;
1308: POP
1309: POP
1310: GO 1316
// end ;
1312: GO 1244
1314: POP
1315: POP
// end ;
1316: PPOPN 2
1318: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1319: LD_EXP 6
1323: NOT
1324: IFFALSE 1421
1326: GO 1328
1328: DISABLE
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
// begin enable ;
1333: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1334: LD_ADDR_VAR 0 2
1338: PUSH
1339: LD_INT 24
1341: PPUSH
1342: LD_INT 22
1344: PUSH
1345: LD_INT 0
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 25
1354: PUSH
1355: LD_INT 12
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 70
1370: PUSH
1371: FOR_IN
1372: IFFALSE 1419
// if Attacks ( apeman ) then
1374: LD_VAR 0 2
1378: PPUSH
1379: CALL_OW 320
1383: IFFALSE 1417
// if GetSide ( Attacks ( apeman ) ) = 3 then
1385: LD_VAR 0 2
1389: PPUSH
1390: CALL_OW 320
1394: PPUSH
1395: CALL_OW 255
1399: PUSH
1400: LD_INT 3
1402: EQUAL
1403: IFFALSE 1417
// begin attackedByApemanNearLake = true ;
1405: LD_ADDR_EXP 6
1409: PUSH
1410: LD_INT 1
1412: ST_TO_ADDR
// exit ;
1413: POP
1414: POP
1415: GO 1421
// end ;
1417: GO 1371
1419: POP
1420: POP
// end ;
1421: PPOPN 2
1423: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1424: LD_EXP 9
1428: PPUSH
1429: CALL_OW 303
1433: IFFALSE 1467
1435: GO 1437
1437: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1438: LD_ADDR_EXP 10
1442: PUSH
1443: LD_EXP 9
1447: PPUSH
1448: CALL_OW 250
1452: PUSH
1453: LD_EXP 9
1457: PPUSH
1458: CALL_OW 251
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: ST_TO_ADDR
1467: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1468: LD_EXP 9
1472: PPUSH
1473: CALL_OW 301
1477: PUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_EXP 10
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: LD_EXP 10
1494: PUSH
1495: LD_INT 2
1497: ARRAY
1498: PPUSH
1499: CALL_OW 293
1503: AND
1504: IFFALSE 1905
1506: GO 1508
1508: DISABLE
1509: LD_INT 0
1511: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1512: LD_EXP 43
1516: PPUSH
1517: LD_STRING D2a-Bur-1
1519: PPUSH
1520: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1524: LD_INT 22
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 21
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 69
1552: PUSH
1553: LD_INT 1
1555: EQUAL
1556: IFFALSE 1572
// Say ( Burlak , D2a-Bur-2 ) else
1558: LD_EXP 43
1562: PPUSH
1563: LD_STRING D2a-Bur-2
1565: PPUSH
1566: CALL_OW 88
1570: GO 1905
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1572: LD_ADDR_VAR 0 1
1576: PUSH
1577: LD_INT 22
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 21
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PPUSH
1601: CALL_OW 69
1605: PPUSH
1606: LD_EXP 10
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PPUSH
1615: LD_EXP 10
1619: PUSH
1620: LD_INT 2
1622: ARRAY
1623: PPUSH
1624: CALL_OW 73
1628: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1629: LD_VAR 0 1
1633: PPUSH
1634: LD_EXP 10
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_EXP 10
1647: PUSH
1648: LD_INT 2
1650: ARRAY
1651: PPUSH
1652: CALL_OW 111
// case nearUnit of Burlak :
1656: LD_VAR 0 1
1660: PUSH
1661: LD_EXP 43
1665: DOUBLE
1666: EQUAL
1667: IFTRUE 1671
1669: GO 1686
1671: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1672: LD_EXP 43
1676: PPUSH
1677: LD_STRING D3-Bur-2a
1679: PPUSH
1680: CALL_OW 88
1684: GO 1778
1686: LD_EXP 48
1690: DOUBLE
1691: EQUAL
1692: IFTRUE 1696
1694: GO 1711
1696: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1697: LD_EXP 48
1701: PPUSH
1702: LD_STRING D2a-Bel-1
1704: PPUSH
1705: CALL_OW 88
1709: GO 1778
1711: LD_EXP 50
1715: DOUBLE
1716: EQUAL
1717: IFTRUE 1721
1719: GO 1736
1721: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1722: LD_EXP 50
1726: PPUSH
1727: LD_STRING D2a-Kir-1
1729: PPUSH
1730: CALL_OW 88
1734: GO 1778
1736: POP
// if GetSex ( nearUnit ) = sex_male then
1737: LD_VAR 0 1
1741: PPUSH
1742: CALL_OW 258
1746: PUSH
1747: LD_INT 1
1749: EQUAL
1750: IFFALSE 1766
// Say ( nearUnit , D2a-RSol1-1 ) else
1752: LD_VAR 0 1
1756: PPUSH
1757: LD_STRING D2a-RSol1-1
1759: PPUSH
1760: CALL_OW 88
1764: GO 1778
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1766: LD_VAR 0 1
1770: PPUSH
1771: LD_STRING D2a-RFSol1-1
1773: PPUSH
1774: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1778: LD_EXP 51
1782: PPUSH
1783: CALL_OW 255
1787: PUSH
1788: LD_INT 3
1790: EQUAL
1791: PUSH
1792: LD_EXP 51
1796: PPUSH
1797: CALL_OW 302
1801: AND
1802: IFFALSE 1816
// Say ( Gnyevko , D2a-Gny-1 ) ;
1804: LD_EXP 51
1808: PPUSH
1809: LD_STRING D2a-Gny-1
1811: PPUSH
1812: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1816: LD_EXP 9
1820: PUSH
1821: LD_EXP 8
1825: EQUAL
1826: IFFALSE 1840
// Say ( Burlak , D3-Bur-2 ) ;
1828: LD_EXP 43
1832: PPUSH
1833: LD_STRING D3-Bur-2
1835: PPUSH
1836: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1840: LD_EXP 51
1844: PPUSH
1845: CALL_OW 255
1849: PUSH
1850: LD_INT 8
1852: EQUAL
1853: IFFALSE 1905
// begin Say ( Burlak , D12-Bur-1 ) ;
1855: LD_EXP 43
1859: PPUSH
1860: LD_STRING D12-Bur-1
1862: PPUSH
1863: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1867: LD_EXP 48
1871: PPUSH
1872: CALL_OW 255
1876: PUSH
1877: LD_INT 3
1879: EQUAL
1880: PUSH
1881: LD_EXP 48
1885: PPUSH
1886: CALL_OW 302
1890: AND
1891: IFFALSE 1905
// Say ( Belkov , D12-Bel-2 ) ;
1893: LD_EXP 48
1897: PPUSH
1898: LD_STRING D12-Bel-2
1900: PPUSH
1901: CALL_OW 88
// end ; end ; end ;
1905: PPOPN 1
1907: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 51
1915: PPUSH
1916: CALL_OW 292
1920: IFFALSE 2458
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1929: LD_EXP 51
1933: PPUSH
1934: LD_EXP 36
1938: PPUSH
1939: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1943: LD_EXP 51
1947: PPUSH
1948: CALL_OW 87
// DialogueOn ;
1952: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1956: LD_ADDR_VAR 0 1
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 3
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 21
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PPUSH
1990: LD_EXP 51
1994: PPUSH
1995: CALL_OW 74
1999: ST_TO_ADDR
// if nearUnit = Burlak then
2000: LD_VAR 0 1
2004: PUSH
2005: LD_EXP 43
2009: EQUAL
2010: IFFALSE 2328
// begin Say ( Burlak , D3-Bur-1 ) ;
2012: LD_EXP 43
2016: PPUSH
2017: LD_STRING D3-Bur-1
2019: PPUSH
2020: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2024: LD_EXP 51
2028: PPUSH
2029: LD_STRING D3-Gny-1
2031: PPUSH
2032: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2036: LD_EXP 43
2040: PPUSH
2041: LD_STRING D3-Bur-2b
2043: PPUSH
2044: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2048: LD_INT 22
2050: PUSH
2051: LD_INT 3
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 21
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PPUSH
2072: CALL_OW 69
2076: PUSH
2077: LD_INT 1
2079: EQUAL
2080: PUSH
2081: LD_EXP 13
2085: NOT
2086: AND
2087: IFFALSE 2139
// begin Say ( Burlak , D3-Bur-2c ) ;
2089: LD_EXP 43
2093: PPUSH
2094: LD_STRING D3-Bur-2c
2096: PPUSH
2097: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2101: LD_EXP 51
2105: PPUSH
2106: LD_STRING D3-Gny-2
2108: PPUSH
2109: CALL_OW 88
// DialogueOff ;
2113: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2117: LD_EXP 51
2121: PPUSH
2122: LD_INT 3
2124: PPUSH
2125: CALL_OW 235
// gnyevkoSaved = true ;
2129: LD_ADDR_EXP 11
2133: PUSH
2134: LD_INT 1
2136: ST_TO_ADDR
// exit ;
2137: GO 2458
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2139: LD_INT 22
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 21
2151: PUSH
2152: LD_INT 1
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PPUSH
2163: CALL_OW 69
2167: PUSH
2168: LD_INT 1
2170: GREATER
2171: PUSH
2172: LD_EXP 13
2176: OR
2177: PUSH
2178: LD_EXP 21
2182: NOT
2183: AND
2184: IFFALSE 2236
// begin Say ( Burlak , D3-Bur-2d ) ;
2186: LD_EXP 43
2190: PPUSH
2191: LD_STRING D3-Bur-2d
2193: PPUSH
2194: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2198: LD_EXP 51
2202: PPUSH
2203: LD_STRING D3-Gny-2
2205: PPUSH
2206: CALL_OW 88
// DialogueOff ;
2210: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2214: LD_EXP 51
2218: PPUSH
2219: LD_INT 3
2221: PPUSH
2222: CALL_OW 235
// gnyevkoSaved = true ;
2226: LD_ADDR_EXP 11
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// exit ;
2234: GO 2458
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2236: LD_INT 22
2238: PUSH
2239: LD_INT 3
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 21
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 69
2264: PUSH
2265: LD_INT 1
2267: GREATER
2268: PUSH
2269: LD_EXP 21
2273: AND
2274: IFFALSE 2326
// begin Say ( Burlak , D3-Bur-2e ) ;
2276: LD_EXP 43
2280: PPUSH
2281: LD_STRING D3-Bur-2e
2283: PPUSH
2284: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2288: LD_EXP 51
2292: PPUSH
2293: LD_STRING D3-Gny-2
2295: PPUSH
2296: CALL_OW 88
// DialogueOff ;
2300: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2304: LD_EXP 51
2308: PPUSH
2309: LD_INT 3
2311: PPUSH
2312: CALL_OW 235
// gnyevkoSaved = true ;
2316: LD_ADDR_EXP 11
2320: PUSH
2321: LD_INT 1
2323: ST_TO_ADDR
// exit ;
2324: GO 2458
// end ; end else
2326: GO 2458
// begin if GetSex ( nearUnit ) = sex_male then
2328: LD_VAR 0 1
2332: PPUSH
2333: CALL_OW 258
2337: PUSH
2338: LD_INT 1
2340: EQUAL
2341: IFFALSE 2357
// Say ( nearUnit , D3-RSol1-1 ) else
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_STRING D3-RSol1-1
2350: PPUSH
2351: CALL_OW 88
2355: GO 2369
// Say ( nearUnit , D3-RFSol1-1 ) ;
2357: LD_VAR 0 1
2361: PPUSH
2362: LD_STRING D3-RFSol1-1
2364: PPUSH
2365: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2369: LD_EXP 51
2373: PPUSH
2374: LD_STRING D3-Gny-1
2376: PPUSH
2377: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2381: LD_VAR 0 1
2385: PPUSH
2386: CALL_OW 258
2390: PUSH
2391: LD_INT 1
2393: EQUAL
2394: IFFALSE 2410
// Say ( nearUnit , D3-RSol1-2 ) else
2396: LD_VAR 0 1
2400: PPUSH
2401: LD_STRING D3-RSol1-2
2403: PPUSH
2404: CALL_OW 88
2408: GO 2422
// Say ( nearUnit , D3-RFSol1-2 ) ;
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RFSol1-2
2417: PPUSH
2418: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2422: LD_EXP 51
2426: PPUSH
2427: LD_STRING D3-Gny-2a
2429: PPUSH
2430: CALL_OW 88
// DialogueOff ;
2434: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2438: LD_EXP 51
2442: PPUSH
2443: LD_INT 3
2445: PPUSH
2446: CALL_OW 235
// gnyevkoSaved = true ;
2450: LD_ADDR_EXP 11
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// end ; end ;
2458: PPOPN 2
2460: END
// every 1 trigger not gnyevkoSaved and not jelenaSaved do var ape ;
2461: LD_EXP 11
2465: NOT
2466: PUSH
2467: LD_EXP 20
2471: NOT
2472: AND
2473: IFFALSE 2668
2475: GO 2477
2477: DISABLE
2478: LD_INT 0
2480: PPUSH
// begin enable ;
2481: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2482: LD_EXP 11
2486: NOT
2487: PUSH
2488: LD_EXP 37
2492: PUSH
2493: LD_INT 70
2495: GREATER
2496: AND
2497: IFFALSE 2575
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2499: LD_ADDR_VAR 0 1
2503: PUSH
2504: LD_INT 22
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 12
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: PUSH
2533: FOR_IN
2534: IFFALSE 2573
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2536: LD_VAR 0 1
2540: PPUSH
2541: LD_EXP 51
2545: PPUSH
2546: CALL_OW 250
2550: PPUSH
2551: LD_EXP 51
2555: PPUSH
2556: CALL_OW 251
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL 8147 0 5
2571: GO 2533
2573: POP
2574: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2575: LD_EXP 20
2579: NOT
2580: PUSH
2581: LD_EXP 38
2585: PUSH
2586: LD_INT 70
2588: GREATER
2589: AND
2590: IFFALSE 2668
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2592: LD_ADDR_VAR 0 1
2596: PUSH
2597: LD_INT 22
2599: PUSH
2600: LD_INT 0
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 25
2609: PUSH
2610: LD_INT 12
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 69
2625: PUSH
2626: FOR_IN
2627: IFFALSE 2666
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2629: LD_VAR 0 1
2633: PPUSH
2634: LD_EXP 50
2638: PPUSH
2639: CALL_OW 250
2643: PPUSH
2644: LD_EXP 50
2648: PPUSH
2649: CALL_OW 251
2653: PPUSH
2654: LD_INT 10
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 8147 0 5
2664: GO 2626
2666: POP
2667: POP
// end ;
2668: PPOPN 1
2670: END
// every 0 0$1 trigger not gnyevkoSaved and not jelenaSaved do
2671: LD_EXP 11
2675: NOT
2676: PUSH
2677: LD_EXP 20
2681: NOT
2682: AND
2683: IFFALSE 2762
2685: GO 2687
2687: DISABLE
// begin enable ;
2688: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2689: LD_EXP 11
2693: NOT
2694: PUSH
2695: LD_EXP 37
2699: PUSH
2700: LD_INT 0
2702: GREATER
2703: AND
2704: IFFALSE 2720
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2706: LD_ADDR_EXP 37
2710: PUSH
2711: LD_EXP 37
2715: PUSH
2716: LD_INT 35
2718: MINUS
2719: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2720: LD_EXP 50
2724: PPUSH
2725: CALL_OW 305
2729: PUSH
2730: LD_EXP 20
2734: NOT
2735: AND
2736: PUSH
2737: LD_EXP 38
2741: PUSH
2742: LD_INT 0
2744: GREATER
2745: AND
2746: IFFALSE 2762
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2748: LD_ADDR_EXP 38
2752: PUSH
2753: LD_EXP 38
2757: PUSH
2758: LD_INT 35
2760: MINUS
2761: ST_TO_ADDR
// end ;
2762: END
// every 0 0$1 trigger not meetPokryshkin and FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var unitInArea ;
2763: LD_EXP 13
2767: NOT
2768: PUSH
2769: LD_INT 23
2771: PPUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 3
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 21
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 70
2800: PUSH
2801: LD_INT 0
2803: GREATER
2804: AND
2805: IFFALSE 2888
2807: GO 2809
2809: DISABLE
2810: LD_INT 0
2812: PPUSH
// begin enable ;
2813: ENABLE
// unitInArea = FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
2814: LD_ADDR_VAR 0 1
2818: PUSH
2819: LD_INT 23
2821: PPUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 70
2850: ST_TO_ADDR
// ComMoveXY ( Pokryshkin , GetX ( unitInArea [ 1 ] ) , GetY ( unitInArea [ 1 ] ) ) ;
2851: LD_EXP 44
2855: PPUSH
2856: LD_VAR 0 1
2860: PUSH
2861: LD_INT 1
2863: ARRAY
2864: PPUSH
2865: CALL_OW 250
2869: PPUSH
2870: LD_VAR 0 1
2874: PUSH
2875: LD_INT 1
2877: ARRAY
2878: PPUSH
2879: CALL_OW 251
2883: PPUSH
2884: CALL_OW 111
// end ;
2888: PPOPN 1
2890: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2891: LD_INT 3
2893: PPUSH
2894: LD_EXP 44
2898: PPUSH
2899: CALL_OW 292
2903: PUSH
2904: LD_EXP 13
2908: NOT
2909: AND
2910: IFFALSE 3763
2912: GO 2914
2914: DISABLE
// begin enable ;
2915: ENABLE
// InGameOn ;
2916: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2920: LD_EXP 44
2924: PPUSH
2925: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2929: LD_EXP 51
2933: PPUSH
2934: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2938: LD_EXP 43
2942: PUSH
2943: LD_EXP 51
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 200
// DialogueOn ;
2956: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2960: LD_EXP 12
2964: IFFALSE 3216
// begin meetPokryshkin = true ;
2966: LD_ADDR_EXP 13
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2974: LD_INT 6
2976: PPUSH
2977: LD_INT 3
2979: PPUSH
2980: CALL_OW 343
// DialogueOff ;
2984: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2988: LD_EXP 43
2992: PPUSH
2993: LD_EXP 44
2997: PPUSH
2998: CALL_OW 250
3002: PPUSH
3003: LD_EXP 44
3007: PPUSH
3008: CALL_OW 251
3012: PPUSH
3013: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3017: LD_EXP 43
3021: PPUSH
3022: LD_EXP 44
3026: PPUSH
3027: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3031: LD_EXP 44
3035: PPUSH
3036: LD_EXP 43
3040: PPUSH
3041: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3045: LD_EXP 51
3049: PPUSH
3050: LD_STRING D4-Gny-3
3052: PPUSH
3053: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3057: LD_EXP 43
3061: PPUSH
3062: LD_STRING D4-Bur-3
3064: PPUSH
3065: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3069: LD_EXP 44
3073: PPUSH
3074: LD_STRING D4-Pok-4
3076: PPUSH
3077: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3081: LD_EXP 39
3085: PPUSH
3086: LD_INT 18
3088: PPUSH
3089: LD_INT 1
3091: PPUSH
3092: CALL_OW 49
// wait ( 0 0$2 ) ;
3096: LD_INT 70
3098: PPUSH
3099: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3103: LD_EXP 43
3107: PPUSH
3108: LD_STRING D4-Bur-4
3110: PPUSH
3111: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3115: LD_EXP 44
3119: PPUSH
3120: LD_STRING D4-Pok-5
3122: PPUSH
3123: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3127: LD_EXP 39
3131: PPUSH
3132: LD_STRING D4-Sol1-5
3134: PPUSH
3135: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3139: LD_EXP 44
3143: PPUSH
3144: LD_STRING D4-Pok-6
3146: PPUSH
3147: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3151: LD_EXP 44
3155: PPUSH
3156: LD_STRING D4-Pok-6a
3158: PPUSH
3159: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3163: LD_EXP 43
3167: PPUSH
3168: LD_STRING D4-Bur-6
3170: PPUSH
3171: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3175: LD_EXP 44
3179: PPUSH
3180: LD_STRING D4-Pok-7
3182: PPUSH
3183: CALL_OW 88
// DialogueOff ;
3187: CALL_OW 7
// InGameOff ;
3191: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3195: LD_STRING M2
3197: PPUSH
3198: CALL_OW 337
// goToHill = true ;
3202: LD_ADDR_EXP 14
3206: PUSH
3207: LD_INT 1
3209: ST_TO_ADDR
// MoveToHill ;
3210: CALL 10027 0 0
// exit ;
3214: GO 3763
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3216: LD_EXP 43
3220: PUSH
3221: LD_EXP 51
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3234: LD_EXP 44
3238: PPUSH
3239: LD_STRING D4-Pok-1
3241: PPUSH
3242: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3246: LD_EXP 51
3250: PPUSH
3251: CALL_OW 255
3255: PUSH
3256: LD_INT 3
3258: EQUAL
3259: PUSH
3260: LD_EXP 51
3264: PPUSH
3265: CALL_OW 302
3269: AND
3270: IFFALSE 3284
// Say ( Gnyevko , D4-Gny-1 ) ;
3272: LD_EXP 51
3276: PPUSH
3277: LD_STRING D4-Gny-1
3279: PPUSH
3280: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3284: LD_EXP 43
3288: PPUSH
3289: LD_EXP 51
3293: PPUSH
3294: CALL_OW 296
3298: PUSH
3299: LD_INT 8
3301: GREATER
3302: PUSH
3303: LD_EXP 51
3307: PPUSH
3308: CALL_OW 255
3312: PUSH
3313: LD_INT 3
3315: EQUAL
3316: AND
3317: PUSH
3318: LD_EXP 51
3322: PPUSH
3323: CALL_OW 302
3327: AND
3328: IFFALSE 3426
// begin ComWalk ( Gnyevko ) ;
3330: LD_EXP 51
3334: PPUSH
3335: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3339: LD_EXP 44
3343: PPUSH
3344: LD_STRING D4-Pok-2
3346: PPUSH
3347: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3351: LD_EXP 51
3355: PPUSH
3356: LD_STRING D4-Gny-2
3358: PPUSH
3359: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3363: LD_EXP 44
3367: PPUSH
3368: LD_STRING D4-Pok-3
3370: PPUSH
3371: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3375: LD_ADDR_EXP 12
3379: PUSH
3380: LD_INT 1
3382: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3383: LD_EXP 51
3387: PPUSH
3388: LD_INT 6
3390: PPUSH
3391: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3395: LD_EXP 51
3399: PPUSH
3400: LD_EXP 44
3404: PPUSH
3405: CALL_OW 250
3409: PPUSH
3410: LD_EXP 44
3414: PPUSH
3415: CALL_OW 251
3419: PPUSH
3420: CALL_OW 171
// end else
3424: GO 3755
// begin meetPokryshkin = true ;
3426: LD_ADDR_EXP 13
3430: PUSH
3431: LD_INT 1
3433: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3434: LD_INT 6
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: CALL_OW 343
// DialogueOff ;
3444: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3448: LD_EXP 51
3452: PPUSH
3453: CALL_OW 255
3457: PUSH
3458: LD_INT 3
3460: EQUAL
3461: PUSH
3462: LD_EXP 51
3466: PPUSH
3467: CALL_OW 302
3471: AND
3472: IFFALSE 3549
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3474: LD_EXP 43
3478: PUSH
3479: LD_EXP 51
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PPUSH
3488: LD_EXP 44
3492: PPUSH
3493: CALL_OW 250
3497: PPUSH
3498: LD_EXP 44
3502: PPUSH
3503: CALL_OW 251
3507: PPUSH
3508: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3512: LD_EXP 43
3516: PUSH
3517: LD_EXP 51
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 44
3530: PPUSH
3531: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3535: LD_EXP 51
3539: PPUSH
3540: LD_INT 6
3542: PPUSH
3543: CALL_OW 235
// end else
3547: GO 3592
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3549: LD_EXP 43
3553: PPUSH
3554: LD_EXP 44
3558: PPUSH
3559: CALL_OW 250
3563: PPUSH
3564: LD_EXP 44
3568: PPUSH
3569: CALL_OW 251
3573: PPUSH
3574: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3578: LD_EXP 43
3582: PPUSH
3583: LD_EXP 44
3587: PPUSH
3588: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3592: LD_EXP 44
3596: PPUSH
3597: LD_EXP 43
3601: PPUSH
3602: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3606: LD_EXP 43
3610: PPUSH
3611: LD_STRING D4-Bur-3
3613: PPUSH
3614: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3618: LD_EXP 44
3622: PPUSH
3623: LD_STRING D4-Pok-4
3625: PPUSH
3626: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3630: LD_EXP 39
3634: PPUSH
3635: LD_INT 18
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: CALL_OW 49
// wait ( 0 0$2 ) ;
3645: LD_INT 70
3647: PPUSH
3648: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3652: LD_EXP 43
3656: PPUSH
3657: LD_STRING D4-Bur-4
3659: PPUSH
3660: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3664: LD_EXP 44
3668: PPUSH
3669: LD_STRING D4-Pok-5
3671: PPUSH
3672: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3676: LD_EXP 39
3680: PPUSH
3681: LD_STRING D4-Sol1-5
3683: PPUSH
3684: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3688: LD_EXP 44
3692: PPUSH
3693: LD_STRING D4-Pok-6
3695: PPUSH
3696: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3700: LD_EXP 44
3704: PPUSH
3705: LD_STRING D4-Pok-6a
3707: PPUSH
3708: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3712: LD_EXP 43
3716: PPUSH
3717: LD_STRING D4-Bur-6
3719: PPUSH
3720: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3724: LD_EXP 44
3728: PPUSH
3729: LD_STRING D4-Pok-7
3731: PPUSH
3732: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3736: LD_STRING M2
3738: PPUSH
3739: CALL_OW 337
// goToHill = true ;
3743: LD_ADDR_EXP 14
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// MoveToHill ;
3751: CALL 10027 0 0
// end ; DialogueOff ;
3755: CALL_OW 7
// InGameOff ;
3759: CALL_OW 9
// end ;
3763: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3764: LD_EXP 43
3768: PPUSH
3769: LD_EXP 44
3773: PPUSH
3774: CALL_OW 296
3778: PUSH
3779: LD_INT 10
3781: GREATER
3782: PUSH
3783: LD_EXP 14
3787: AND
3788: PUSH
3789: LD_EXP 17
3793: NOT
3794: AND
3795: IFFALSE 3996
3797: GO 3799
3799: DISABLE
3800: LD_INT 0
3802: PPUSH
// begin enable ;
3803: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3804: LD_ADDR_VAR 0 1
3808: PUSH
3809: LD_EXP 44
3813: PUSH
3814: LD_EXP 45
3818: PUSH
3819: LD_EXP 46
3823: PUSH
3824: LD_EXP 47
3828: PUSH
3829: LD_EXP 48
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3841: LD_EXP 51
3845: PPUSH
3846: CALL_OW 255
3850: PUSH
3851: LD_INT 6
3853: EQUAL
3854: PUSH
3855: LD_EXP 11
3859: AND
3860: IFFALSE 3878
// ruSolds = ruSolds ^ Gnyevko ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_VAR 0 1
3871: PUSH
3872: LD_EXP 51
3876: ADD
3877: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3887: LD_EXP 43
3891: PPUSH
3892: CALL_OW 87
// DialogueOn ;
3896: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3900: LD_EXP 44
3904: PPUSH
3905: LD_STRING DSplit-Pok-1
3907: PPUSH
3908: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3912: LD_EXP 43
3916: PPUSH
3917: LD_STRING DSplit-Bur-1
3919: PPUSH
3920: CALL_OW 88
// DialogueOff ;
3924: CALL_OW 7
// InGameOn ;
3928: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_EXP 44
3941: PPUSH
3942: CALL_OW 250
3946: PPUSH
3947: LD_EXP 44
3951: PPUSH
3952: CALL_OW 251
3956: PPUSH
3957: CALL_OW 111
// wait ( 0 0$1 ) ;
3961: LD_INT 35
3963: PPUSH
3964: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3968: LD_EXP 43
3972: PPUSH
3973: LD_EXP 44
3977: PPUSH
3978: CALL_OW 296
3982: PUSH
3983: LD_INT 6
3985: LESS
3986: IFFALSE 3932
// InGameOff ;
3988: CALL_OW 9
// MoveToHill ;
3992: CALL 10027 0 0
// end ;
3996: PPOPN 1
3998: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3999: LD_INT 0
4001: PPUSH
4002: PPUSH
// traitor = true ;
4003: LD_ADDR_EXP 17
4007: PUSH
4008: LD_INT 1
4010: ST_TO_ADDR
// DialogueOn ;
4011: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4015: LD_EXP 44
4019: PPUSH
4020: LD_STRING DAttack-Pok-1
4022: PPUSH
4023: CALL_OW 88
// DialogueOff ;
4027: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4031: LD_INT 3
4033: PPUSH
4034: LD_INT 6
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: LD_INT 1
4042: PPUSH
4043: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4047: LD_INT 22
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 21
4059: PUSH
4060: LD_INT 1
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PPUSH
4076: LD_EXP 43
4080: PPUSH
4081: CALL_OW 115
// end ;
4085: LD_VAR 0 1
4089: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4090: LD_EXP 44
4094: PPUSH
4095: LD_INT 65
4097: PPUSH
4098: LD_INT 59
4100: PPUSH
4101: CALL_OW 297
4105: PUSH
4106: LD_INT 4
4108: LESS
4109: PUSH
4110: LD_EXP 17
4114: NOT
4115: AND
4116: IFFALSE 4313
4118: GO 4120
4120: DISABLE
// begin InGameOn ;
4121: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4125: LD_INT 55
4127: PPUSH
4128: LD_INT 50
4130: PPUSH
4131: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4135: LD_EXP 43
4139: PPUSH
4140: LD_INT 66
4142: PPUSH
4143: LD_INT 57
4145: PPUSH
4146: CALL_OW 111
// AddComHold ( Burlak ) ;
4150: LD_EXP 43
4154: PPUSH
4155: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4159: LD_EXP 39
4163: PPUSH
4164: LD_INT 59
4166: PPUSH
4167: LD_INT 55
4169: PPUSH
4170: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4174: LD_INT 35
4176: PPUSH
4177: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4181: LD_INT 1
4183: PPUSH
4184: LD_EXP 44
4188: PPUSH
4189: CALL_OW 292
4193: IFFALSE 4174
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4195: LD_EXP 39
4199: PUSH
4200: LD_EXP 44
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 87
// ComStop ( Charles ) ;
4213: LD_EXP 39
4217: PPUSH
4218: CALL_OW 141
// AddComHold ( Charles ) ;
4222: LD_EXP 39
4226: PPUSH
4227: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4231: LD_EXP 39
4235: PPUSH
4236: LD_EXP 44
4240: PPUSH
4241: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4245: LD_EXP 39
4249: PPUSH
4250: LD_STRING D5-Sol1-1
4252: PPUSH
4253: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4257: LD_EXP 44
4261: PPUSH
4262: LD_STRING D5-Pok-1
4264: PPUSH
4265: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 6
4274: PPUSH
4275: LD_INT 2
4277: PPUSH
4278: LD_INT 1
4280: PPUSH
4281: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 3
4290: PPUSH
4291: LD_INT 2
4293: PPUSH
4294: LD_INT 1
4296: PPUSH
4297: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4301: LD_EXP 39
4305: PPUSH
4306: LD_STRING D5-Sol1-2
4308: PPUSH
4309: CALL_OW 88
// end ;
4313: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4314: LD_EXP 39
4318: PPUSH
4319: CALL_OW 301
4323: PUSH
4324: LD_EXP 14
4328: AND
4329: IFFALSE 4857
4331: GO 4333
4333: DISABLE
4334: LD_INT 0
4336: PPUSH
// begin goToHill = false ;
4337: LD_ADDR_EXP 14
4341: PUSH
4342: LD_INT 0
4344: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4345: LD_INT 22
4347: PUSH
4348: LD_INT 6
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 69
4373: PPUSH
4374: CALL_OW 138
// wait ( 0 0$1 ) ;
4378: LD_INT 35
4380: PPUSH
4381: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4385: LD_INT 55
4387: PPUSH
4388: LD_INT 50
4390: PPUSH
4391: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4395: LD_EXP 43
4399: PPUSH
4400: LD_INT 56
4402: PPUSH
4403: LD_INT 56
4405: PPUSH
4406: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4410: LD_INT 22
4412: PUSH
4413: LD_INT 6
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 21
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PPUSH
4434: CALL_OW 69
4438: PPUSH
4439: LD_INT 56
4441: PPUSH
4442: LD_INT 56
4444: PPUSH
4445: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4449: LD_EXP 43
4453: PPUSH
4454: LD_STRING D5-Bur-2
4456: PPUSH
4457: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4461: LD_EXP 44
4465: PPUSH
4466: LD_STRING D5-Pok-2
4468: PPUSH
4469: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4473: LD_EXP 48
4477: PPUSH
4478: LD_STRING D5-Bel-2
4480: PPUSH
4481: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4485: LD_EXP 44
4489: PPUSH
4490: LD_STRING D5-Pok-3
4492: PPUSH
4493: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4497: LD_EXP 51
4501: PPUSH
4502: CALL_OW 255
4506: PUSH
4507: LD_INT 6
4509: EQUAL
4510: IFFALSE 4524
// Say ( Gnyevko , D5-Gny-3 ) ;
4512: LD_EXP 51
4516: PPUSH
4517: LD_STRING D5-Gny-3
4519: PPUSH
4520: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4524: LD_EXP 43
4528: PPUSH
4529: LD_STRING D5-Bur-3
4531: PPUSH
4532: CALL_OW 88
// wait ( 0 0$2 ) ;
4536: LD_INT 70
4538: PPUSH
4539: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4543: LD_EXP 43
4547: PPUSH
4548: LD_INT 85
4550: PPUSH
4551: LD_INT 64
4553: PPUSH
4554: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4558: LD_INT 22
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 21
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: PPUSH
4587: LD_INT 85
4589: PPUSH
4590: LD_INT 64
4592: PPUSH
4593: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
4597: LD_EXP 43
4601: PPUSH
4602: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4606: LD_EXP 44
4610: PPUSH
4611: LD_STRING D6-Pok-1
4613: PPUSH
4614: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4618: LD_EXP 43
4622: PPUSH
4623: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4627: LD_EXP 43
4631: PPUSH
4632: LD_STRING D6-Bur-1
4634: PPUSH
4635: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4639: LD_EXP 43
4643: PPUSH
4644: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4648: LD_EXP 44
4652: PPUSH
4653: LD_STRING D6-Pok-2
4655: PPUSH
4656: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4660: LD_EXP 43
4664: PPUSH
4665: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4669: LD_EXP 48
4673: PPUSH
4674: LD_STRING D6-Bel-2
4676: PPUSH
4677: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4681: LD_EXP 43
4685: PPUSH
4686: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4690: LD_EXP 43
4694: PPUSH
4695: LD_STRING D6-Bur-2
4697: PPUSH
4698: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4702: LD_EXP 43
4706: PPUSH
4707: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4711: LD_EXP 44
4715: PPUSH
4716: LD_STRING D6-Pok-3
4718: PPUSH
4719: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 43
4727: PPUSH
4728: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4732: LD_EXP 52
4736: PPUSH
4737: LD_STRING D6-Kur-3
4739: PPUSH
4740: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 43
4748: PPUSH
4749: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4753: LD_EXP 44
4757: PPUSH
4758: LD_STRING D6-Pok-4
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 43
4769: PPUSH
4770: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4774: LD_EXP 48
4778: PPUSH
4779: LD_STRING D6-Bel-4
4781: PPUSH
4782: CALL_OW 88
// InGameOff ;
4786: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4790: LD_EXP 44
4794: PPUSH
4795: LD_INT 23
4797: PPUSH
4798: CALL_OW 115
// wait ( 0 0$5 ) ;
4802: LD_INT 175
4804: PPUSH
4805: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4809: LD_INT 22
4811: PUSH
4812: LD_INT 6
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 21
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 69
4837: PPUSH
4838: LD_INT 23
4840: PPUSH
4841: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4845: LD_INT 1
4847: PPUSH
4848: LD_EXP 51
4852: PPUSH
4853: CALL_OW 471
// end ;
4857: PPOPN 1
4859: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4860: LD_INT 1
4862: PPUSH
4863: LD_EXP 44
4867: PPUSH
4868: CALL_OW 292
4872: PUSH
4873: LD_EXP 39
4877: PPUSH
4878: CALL_OW 301
4882: AND
4883: IFFALSE 4902
4885: GO 4887
4887: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4888: LD_EXP 40
4892: PPUSH
4893: LD_EXP 44
4897: PPUSH
4898: CALL_OW 115
4902: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4903: LD_INT 3
4905: PPUSH
4906: LD_INT 23
4908: PPUSH
4909: CALL_OW 292
4913: IFFALSE 4942
4915: GO 4917
4917: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4918: LD_EXP 44
4922: PPUSH
4923: LD_STRING D7-Pok-1
4925: PPUSH
4926: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4930: LD_EXP 40
4934: PPUSH
4935: LD_STRING D7-FSol1-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4943: LD_EXP 44
4947: PPUSH
4948: CALL_OW 303
4952: IFFALSE 5484
4954: GO 4956
4956: DISABLE
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
4961: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 22
4969: PUSH
4970: LD_INT 6
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 21
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 50
4989: PUSH
4990: EMPTY
4991: LIST
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: PPUSH
4998: CALL_OW 69
5002: PUSH
5003: LD_EXP 48
5007: DIFF
5008: ST_TO_ADDR
// DialogueOn ;
5009: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5013: LD_EXP 48
5017: PPUSH
5018: LD_STRING D7a-Bel-1
5020: PPUSH
5021: CALL_OW 88
// DialogueOff ;
5025: CALL_OW 7
// for i := 1 to ruSolds do
5029: LD_ADDR_VAR 0 1
5033: PUSH
5034: DOUBLE
5035: LD_INT 1
5037: DEC
5038: ST_TO_ADDR
5039: LD_VAR 0 3
5043: PUSH
5044: FOR_TO
5045: IFFALSE 5103
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5047: LD_VAR 0 3
5051: PUSH
5052: LD_VAR 0 1
5056: ARRAY
5057: PPUSH
5058: LD_INT 87
5060: PUSH
5061: LD_VAR 0 1
5065: PLUS
5066: PPUSH
5067: LD_INT 63
5069: PUSH
5070: LD_VAR 0 1
5074: PLUS
5075: PPUSH
5076: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5080: LD_VAR 0 3
5084: PUSH
5085: LD_VAR 0 1
5089: ARRAY
5090: PPUSH
5091: LD_INT 89
5093: PPUSH
5094: LD_INT 67
5096: PPUSH
5097: CALL_OW 178
// end ;
5101: GO 5044
5103: POP
5104: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5105: LD_EXP 48
5109: PPUSH
5110: LD_INT 89
5112: PPUSH
5113: LD_INT 67
5115: PPUSH
5116: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5120: LD_EXP 48
5124: PPUSH
5125: LD_INT 88
5127: PPUSH
5128: LD_INT 66
5130: PPUSH
5131: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5135: LD_EXP 45
5139: PPUSH
5140: LD_STRING D7a-RSol1-1
5142: PPUSH
5143: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5147: LD_EXP 40
5151: PPUSH
5152: LD_STRING D7a-FSol1-1
5154: PPUSH
5155: CALL_OW 88
// wait ( 0 0$12 ) ;
5159: LD_INT 420
5161: PPUSH
5162: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5166: LD_EXP 48
5170: PPUSH
5171: LD_STRING D7b-Bel-1
5173: PPUSH
5174: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5178: LD_EXP 46
5182: PPUSH
5183: LD_STRING D7b-FSol1-1
5185: PPUSH
5186: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5190: LD_EXP 48
5194: PPUSH
5195: LD_STRING D7b-Bel-2
5197: PPUSH
5198: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5202: LD_EXP 45
5206: PPUSH
5207: LD_STRING D7b-RSol1-2
5209: PPUSH
5210: CALL_OW 88
// for unit in ruSolds do
5214: LD_ADDR_VAR 0 2
5218: PUSH
5219: LD_VAR 0 3
5223: PUSH
5224: FOR_IN
5225: IFFALSE 5458
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5227: LD_EXP 43
5231: PPUSH
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 296
5241: PUSH
5242: LD_INT 7
5244: LESS
5245: IFFALSE 5456
// begin InGameOn ;
5247: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5251: LD_EXP 48
5255: PUSH
5256: LD_EXP 45
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5269: LD_EXP 43
5273: PPUSH
5274: LD_INT 88
5276: PPUSH
5277: LD_INT 66
5279: PPUSH
5280: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5284: LD_EXP 48
5288: PPUSH
5289: LD_EXP 43
5293: PPUSH
5294: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5298: LD_EXP 43
5302: PPUSH
5303: LD_INT 90
5305: PPUSH
5306: LD_INT 66
5308: PPUSH
5309: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5313: LD_EXP 43
5317: PPUSH
5318: LD_STRING D7b-Bur-3
5320: PPUSH
5321: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5325: LD_EXP 48
5329: PPUSH
5330: LD_STRING D7b-Bel-4
5332: PPUSH
5333: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5337: LD_EXP 43
5341: PPUSH
5342: LD_STRING D7b-Bur-4
5344: PPUSH
5345: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5349: LD_EXP 48
5353: PPUSH
5354: LD_STRING D7b-Bel-5
5356: PPUSH
5357: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5361: LD_EXP 46
5365: PPUSH
5366: LD_STRING D7b-FSol1-5
5368: PPUSH
5369: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5373: LD_EXP 48
5377: PPUSH
5378: LD_STRING D7b-Bel-6
5380: PPUSH
5381: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5385: LD_EXP 43
5389: PPUSH
5390: LD_STRING D7b-Bur-6
5392: PPUSH
5393: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5397: LD_EXP 45
5401: PPUSH
5402: LD_STRING D7b-RSol1-6
5404: PPUSH
5405: CALL_OW 88
// InGameOff ;
5409: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5413: LD_VAR 0 3
5417: PPUSH
5418: LD_INT 3
5420: PPUSH
5421: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5425: LD_EXP 48
5429: PPUSH
5430: LD_INT 3
5432: PPUSH
5433: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5437: LD_STRING M3
5439: PPUSH
5440: CALL_OW 337
// secondAttack = true ;
5444: LD_ADDR_EXP 16
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// exit ;
5452: POP
5453: POP
5454: GO 5484
// end ;
5456: GO 5224
5458: POP
5459: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5460: LD_EXP 48
5464: PPUSH
5465: LD_STRING D7b-Bel-3
5467: PPUSH
5468: CALL_OW 88
// InGameOff ;
5472: CALL_OW 9
// belkovWaitForGorky = true ;
5476: LD_ADDR_EXP 15
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// end ;
5484: PPOPN 3
5486: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5487: LD_EXP 15
5491: IFFALSE 5801
5493: GO 5495
5495: DISABLE
5496: LD_INT 0
5498: PPUSH
5499: PPUSH
// begin enable ;
5500: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_INT 22
5508: PUSH
5509: LD_INT 6
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 21
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL_OW 69
5534: ST_TO_ADDR
// for unit in ruSolds do
5535: LD_ADDR_VAR 0 1
5539: PUSH
5540: LD_VAR 0 2
5544: PUSH
5545: FOR_IN
5546: IFFALSE 5799
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5548: LD_EXP 43
5552: PPUSH
5553: LD_VAR 0 1
5557: PPUSH
5558: CALL_OW 296
5562: PUSH
5563: LD_INT 7
5565: LESS
5566: IFFALSE 5797
// begin belkovWaitForGorky = false ;
5568: LD_ADDR_EXP 15
5572: PUSH
5573: LD_INT 0
5575: ST_TO_ADDR
// InGameOn ;
5576: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5580: LD_EXP 48
5584: PUSH
5585: LD_EXP 45
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5598: LD_EXP 43
5602: PPUSH
5603: LD_INT 88
5605: PPUSH
5606: LD_INT 66
5608: PPUSH
5609: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5613: LD_EXP 48
5617: PPUSH
5618: LD_EXP 43
5622: PPUSH
5623: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5627: LD_EXP 43
5631: PPUSH
5632: LD_INT 90
5634: PPUSH
5635: LD_INT 66
5637: PPUSH
5638: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5642: LD_EXP 48
5646: PPUSH
5647: LD_STRING D7b-Bel-3a
5649: PPUSH
5650: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5654: LD_EXP 43
5658: PPUSH
5659: LD_STRING D7b-Bur-3
5661: PPUSH
5662: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5666: LD_EXP 48
5670: PPUSH
5671: LD_STRING D7b-Bel-4
5673: PPUSH
5674: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5678: LD_EXP 43
5682: PPUSH
5683: LD_STRING D7b-Bur-4
5685: PPUSH
5686: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5690: LD_EXP 48
5694: PPUSH
5695: LD_STRING D7b-Bel-5
5697: PPUSH
5698: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5702: LD_EXP 46
5706: PPUSH
5707: LD_STRING D7b-FSol1-5
5709: PPUSH
5710: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_STRING D7b-Bel-6
5721: PPUSH
5722: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5726: LD_EXP 43
5730: PPUSH
5731: LD_STRING D7b-Bur-6
5733: PPUSH
5734: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5738: LD_EXP 45
5742: PPUSH
5743: LD_STRING D7a-RSol1-6
5745: PPUSH
5746: CALL_OW 88
// InGameOff ;
5750: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_INT 3
5761: PPUSH
5762: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5766: LD_EXP 48
5770: PPUSH
5771: LD_INT 3
5773: PPUSH
5774: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5778: LD_STRING M3
5780: PPUSH
5781: CALL_OW 337
// secondAttack = true ;
5785: LD_ADDR_EXP 16
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// exit ;
5793: POP
5794: POP
5795: GO 5801
// end ;
5797: GO 5545
5799: POP
5800: POP
// end ;
5801: PPOPN 2
5803: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5804: LD_INT 0
5806: PPUSH
5807: PPUSH
// DialogueOn ;
5808: CALL_OW 6
// Say ( Johanna , D8-FSol1-1 ) ;
5812: LD_EXP 40
5816: PPUSH
5817: LD_STRING D8-FSol1-1
5819: PPUSH
5820: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5824: LD_EXP 41
5828: PPUSH
5829: LD_STRING D8-Glad-1
5831: PPUSH
5832: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5836: LD_EXP 43
5840: PPUSH
5841: LD_STRING D8-Bur-1
5843: PPUSH
5844: CALL_OW 88
// DialogueOff ;
5848: CALL_OW 7
// secondAttack = false ;
5852: LD_ADDR_EXP 16
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5860: LD_ADDR_VAR 0 2
5864: PUSH
5865: LD_INT 22
5867: PUSH
5868: LD_INT 3
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 21
5877: PUSH
5878: LD_INT 1
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PPUSH
5889: CALL_OW 69
5893: PPUSH
5894: LD_INT 23
5896: PPUSH
5897: CALL_OW 74
5901: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5902: LD_EXP 42
5906: PPUSH
5907: CALL_OW 122
// wait ( 0 0$1 ) ;
5911: LD_INT 35
5913: PPUSH
5914: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5918: LD_EXP 42
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 175
// end ;
5932: LD_VAR 0 1
5936: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5937: LD_INT 23
5939: PPUSH
5940: CALL_OW 256
5944: PUSH
5945: LD_INT 350
5947: LESS
5948: PUSH
5949: LD_INT 23
5951: PPUSH
5952: CALL_OW 256
5956: PUSH
5957: LD_INT 250
5959: GREATER
5960: AND
5961: PUSH
5962: LD_INT 20
5964: PPUSH
5965: LD_INT 22
5967: PUSH
5968: LD_INT 3
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 21
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 70
5993: PUSH
5994: LD_INT 0
5996: GREATER
5997: AND
5998: PUSH
5999: LD_EXP 23
6003: NOT
6004: AND
6005: IFFALSE 6022
6007: GO 6009
6009: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6010: LD_EXP 40
6014: PPUSH
6015: LD_STRING D8-FSol1-2
6017: PPUSH
6018: CALL_OW 88
6022: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6023: LD_INT 23
6025: PPUSH
6026: CALL_OW 303
6030: PUSH
6031: LD_INT 22
6033: PPUSH
6034: CALL_OW 302
6038: AND
6039: PUSH
6040: LD_EXP 23
6044: NOT
6045: AND
6046: IFFALSE 6116
6048: GO 6050
6050: DISABLE
// begin amRetreat = true ;
6051: LD_ADDR_EXP 23
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6059: LD_EXP 40
6063: PPUSH
6064: LD_STRING D8-FSol1-2a
6066: PPUSH
6067: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6071: LD_EXP 41
6075: PUSH
6076: LD_EXP 40
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PPUSH
6085: LD_INT 21
6087: PPUSH
6088: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6092: LD_EXP 41
6096: PPUSH
6097: LD_STRING D8-Glad-2
6099: PPUSH
6100: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6104: LD_EXP 43
6108: PPUSH
6109: LD_STRING D8-Bur-2
6111: PPUSH
6112: CALL_OW 88
// end ;
6116: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6117: LD_INT 22
6119: PPUSH
6120: CALL_OW 303
6124: PUSH
6125: LD_INT 23
6127: PPUSH
6128: CALL_OW 302
6132: AND
6133: PUSH
6134: LD_EXP 23
6138: NOT
6139: AND
6140: IFFALSE 6210
6142: GO 6144
6144: DISABLE
// begin amRetreat = true ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 1
6152: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6153: LD_EXP 40
6157: PPUSH
6158: LD_STRING D8-FSol1-2a
6160: PPUSH
6161: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6165: LD_EXP 41
6169: PUSH
6170: LD_EXP 40
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PPUSH
6179: LD_INT 21
6181: PPUSH
6182: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6186: LD_EXP 41
6190: PPUSH
6191: LD_STRING D8-Glad-2
6193: PPUSH
6194: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6198: LD_EXP 43
6202: PPUSH
6203: LD_STRING D8-Bur-2
6205: PPUSH
6206: CALL_OW 88
// end ;
6210: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and not amRetreat do
6211: LD_INT 23
6213: PPUSH
6214: CALL_OW 256
6218: PUSH
6219: LD_INT 500
6221: LESS
6222: PUSH
6223: LD_EXP 23
6227: NOT
6228: AND
6229: IFFALSE 6299
6231: GO 6233
6233: DISABLE
// begin amRetreat = true ;
6234: LD_ADDR_EXP 23
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6242: LD_EXP 40
6246: PPUSH
6247: LD_STRING D8-FSol1-2a
6249: PPUSH
6250: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6254: LD_EXP 41
6258: PUSH
6259: LD_EXP 40
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: LD_INT 21
6270: PPUSH
6271: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6275: LD_EXP 41
6279: PPUSH
6280: LD_STRING D8-Glad-2
6282: PPUSH
6283: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6287: LD_EXP 43
6291: PPUSH
6292: LD_STRING D8-Bur-2
6294: PPUSH
6295: CALL_OW 88
// end ;
6299: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6300: LD_INT 22
6302: PUSH
6303: LD_INT 1
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: LD_INT 21
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 50
6322: PUSH
6323: EMPTY
6324: LIST
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: PPUSH
6331: CALL_OW 69
6335: PUSH
6336: LD_INT 0
6338: GREATER
6339: IFFALSE 6467
6341: GO 6343
6343: DISABLE
6344: LD_INT 0
6346: PPUSH
// begin enable ;
6347: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6348: LD_ADDR_VAR 0 1
6352: PUSH
6353: LD_INT 21
6355: PPUSH
6356: LD_INT 22
6358: PUSH
6359: LD_INT 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 21
6368: PUSH
6369: LD_INT 1
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6465
// begin if unit = Gladstone then
6388: LD_VAR 0 1
6392: PUSH
6393: LD_EXP 41
6397: EQUAL
6398: IFFALSE 6428
// begin gladstoneEscape = true ;
6400: LD_ADDR_EXP 18
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6408: LD_EXP 41
6412: PPUSH
6413: LD_EXP 27
6417: PUSH
6418: LD_STRING Gladstone
6420: STR
6421: PPUSH
6422: CALL_OW 38
// end else
6426: GO 6454
// begin JohannaEscape = true ;
6428: LD_ADDR_EXP 19
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6436: LD_EXP 40
6440: PPUSH
6441: LD_EXP 27
6445: PUSH
6446: LD_STRING Johanna
6448: STR
6449: PPUSH
6450: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6454: LD_VAR 0 1
6458: PPUSH
6459: CALL_OW 64
// end ;
6463: GO 6385
6465: POP
6466: POP
// end ;
6467: PPOPN 1
6469: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6470: LD_EXP 41
6474: PPUSH
6475: CALL_OW 301
6479: PUSH
6480: LD_EXP 40
6484: PPUSH
6485: CALL_OW 301
6489: AND
6490: IFFALSE 6507
6492: GO 6494
6494: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6495: LD_EXP 43
6499: PPUSH
6500: LD_STRING D9-Bur-1
6502: PPUSH
6503: CALL_OW 88
6507: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6508: LD_EXP 40
6512: PPUSH
6513: CALL_OW 301
6517: PUSH
6518: LD_EXP 18
6522: AND
6523: PUSH
6524: LD_EXP 19
6528: NOT
6529: AND
6530: IFFALSE 6547
6532: GO 6534
6534: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6535: LD_EXP 43
6539: PPUSH
6540: LD_STRING D9-Bur-1a
6542: PPUSH
6543: CALL_OW 88
6547: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6548: LD_EXP 41
6552: PPUSH
6553: CALL_OW 301
6557: PUSH
6558: LD_EXP 18
6562: NOT
6563: AND
6564: PUSH
6565: LD_EXP 19
6569: AND
6570: IFFALSE 6587
6572: GO 6574
6574: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6575: LD_EXP 43
6579: PPUSH
6580: LD_STRING D9-Bur-1b
6582: PPUSH
6583: CALL_OW 88
6587: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6588: LD_EXP 18
6592: PUSH
6593: LD_EXP 19
6597: AND
6598: IFFALSE 6615
6600: GO 6602
6602: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6603: LD_EXP 43
6607: PPUSH
6608: LD_STRING D9-Bur-1c
6610: PPUSH
6611: CALL_OW 88
6615: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6616: LD_INT 22
6618: PUSH
6619: LD_INT 1
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 21
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 50
6638: PUSH
6639: EMPTY
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: PUSH
6652: LD_INT 0
6654: EQUAL
6655: IFFALSE 6903
6657: GO 6659
6659: DISABLE
6660: LD_INT 0
6662: PPUSH
6663: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6664: LD_ADDR_VAR 0 1
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 21
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 50
6691: PUSH
6692: EMPTY
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PUSH
6705: LD_EXP 43
6709: PUSH
6710: LD_EXP 51
6714: PUSH
6715: LD_EXP 48
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: DIFF
6725: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_VAR 0 1
6735: PPUSH
6736: LD_INT 26
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PPUSH
6746: CALL_OW 72
6750: ST_TO_ADDR
// DialogueOn ;
6751: CALL_OW 6
// if IsOK ( Belkov ) then
6755: LD_EXP 48
6759: PPUSH
6760: CALL_OW 302
6764: IFFALSE 6778
// Say ( Belkov , D10-Bel-1 ) ;
6766: LD_EXP 48
6770: PPUSH
6771: LD_STRING D10-Bel-1
6773: PPUSH
6774: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 0
6785: GREATER
6786: PUSH
6787: LD_VAR 0 2
6791: PUSH
6792: LD_INT 0
6794: GREATER
6795: PUSH
6796: LD_EXP 48
6800: PPUSH
6801: CALL_OW 302
6805: OR
6806: AND
6807: IFFALSE 6874
// begin Say ( Burlak , D10-Bur-1 ) ;
6809: LD_EXP 43
6813: PPUSH
6814: LD_STRING D10-Bur-1
6816: PPUSH
6817: CALL_OW 88
// if IsOK ( Belkov ) then
6821: LD_EXP 48
6825: PPUSH
6826: CALL_OW 302
6830: IFFALSE 6846
// Say ( Belkov , D10-Bel-1a ) else
6832: LD_EXP 48
6836: PPUSH
6837: LD_STRING D10-Bel-1a
6839: PPUSH
6840: CALL_OW 88
6844: GO 6862
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6846: LD_VAR 0 2
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_STRING D10-RSol1-1
6857: PPUSH
6858: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6862: LD_EXP 43
6866: PPUSH
6867: LD_STRING D10-Bur-2
6869: PPUSH
6870: CALL_OW 88
// end ; DialogueOff ;
6874: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6878: LD_STRING M4a
6880: PPUSH
6881: CALL_OW 337
// evacuationAvailable = true ;
6885: LD_ADDR_EXP 21
6889: PUSH
6890: LD_INT 1
6892: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6893: LD_INT 1
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 424
// end ;
6903: PPOPN 2
6905: END
// every 0 0$15 trigger evacuationAvailable do var randomSold ;
6906: LD_EXP 21
6910: IFFALSE 7449
6912: GO 6914
6914: DISABLE
6915: LD_INT 0
6917: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6918: LD_EXP 50
6922: PPUSH
6923: LD_INT 22
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 49
// wait ( 0 0$3 ) ;
6933: LD_INT 105
6935: PPUSH
6936: CALL_OW 67
// DialogueOn ;
6940: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6944: LD_EXP 50
6948: PPUSH
6949: LD_STRING D11b-Kir-1
6951: PPUSH
6952: CALL_OW 94
// if IsOK ( Belkov ) then
6956: LD_EXP 48
6960: PPUSH
6961: CALL_OW 302
6965: IFFALSE 6993
// begin Say ( Belkov , D11b-Bel-1 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING D11b-Bel-1
6974: PPUSH
6975: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6979: LD_EXP 48
6983: PPUSH
6984: LD_STRING D11b-Bel-1a
6986: PPUSH
6987: CALL_OW 94
// end else
6991: GO 7048
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
6993: LD_ADDR_VAR 0 1
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 21
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 50
7020: PUSH
7021: EMPTY
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: PPUSH
7034: LD_STRING D11b-RSol1-1
7036: PPUSH
7037: LD_STRING D11b-RFSol1-1
7039: PPUSH
7040: LD_INT 0
7042: PPUSH
7043: CALL 7814 0 4
7047: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7048: LD_INT 24
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 0
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 12
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: PUSH
7080: LD_INT 0
7082: GREATER
7083: IFFALSE 7099
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7085: LD_EXP 50
7089: PPUSH
7090: LD_STRING D11b1-Kir-1
7092: PPUSH
7093: CALL_OW 94
7097: GO 7111
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7099: LD_EXP 50
7103: PPUSH
7104: LD_STRING D11b2-Kir-1
7106: PPUSH
7107: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7111: LD_EXP 6
7115: PUSH
7116: LD_INT 24
7118: PPUSH
7119: LD_INT 22
7121: PUSH
7122: LD_INT 0
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 25
7131: PUSH
7132: LD_INT 12
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PPUSH
7143: CALL_OW 70
7147: PUSH
7148: LD_INT 0
7150: GREATER
7151: AND
7152: IFFALSE 7287
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7154: LD_EXP 43
7158: PPUSH
7159: LD_STRING D11b1-Bur-1
7161: PPUSH
7162: CALL_OW 88
// if IsOk ( Belkov ) then
7166: LD_EXP 48
7170: PPUSH
7171: CALL_OW 302
7175: IFFALSE 7191
// Say ( Belkov , D11b2-Bel-1 ) else
7177: LD_EXP 48
7181: PPUSH
7182: LD_STRING D11b2-Bel-1
7184: PPUSH
7185: CALL_OW 88
7189: GO 7232
// begin if GetSex ( randomSold ) = sex_male then
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 258
7200: PUSH
7201: LD_INT 1
7203: EQUAL
7204: IFFALSE 7220
// Say ( randomSold , D11b1-RSol1-1 ) else
7206: LD_VAR 0 1
7210: PPUSH
7211: LD_STRING D11b1-RSol1-1
7213: PPUSH
7214: CALL_OW 88
7218: GO 7232
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7220: LD_VAR 0 1
7224: PPUSH
7225: LD_STRING D11b1-RFSol1-1
7227: PPUSH
7228: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7232: LD_INT 22
7234: PUSH
7235: LD_INT 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 21
7244: PUSH
7245: LD_INT 1
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 50
7254: PUSH
7255: EMPTY
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: PPUSH
7268: LD_STRING D11b1-RSol1-1
7270: PPUSH
7271: LD_STRING D11b1-RFSol1-1
7273: PPUSH
7274: LD_INT 0
7276: PPUSH
7277: CALL 7814 0 4
// DialogueOff ;
7281: CALL_OW 7
// exit ;
7285: GO 7449
// end ; if spotWaterfall then
7287: LD_EXP 7
7291: IFFALSE 7377
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7293: LD_EXP 43
7297: PPUSH
7298: LD_STRING D11b1-Bur-1a
7300: PPUSH
7301: CALL_OW 88
// if IsOk ( Belkov ) then
7305: LD_EXP 48
7309: PPUSH
7310: CALL_OW 302
7314: IFFALSE 7330
// Say ( Belkov , D11b2-Bel-1 ) else
7316: LD_EXP 48
7320: PPUSH
7321: LD_STRING D11b2-Bel-1
7323: PPUSH
7324: CALL_OW 88
7328: GO 7371
// begin if GetSex ( randomSold ) = sex_male then
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 258
7339: PUSH
7340: LD_INT 1
7342: EQUAL
7343: IFFALSE 7359
// Say ( randomSold , D11b1-RSol1-1 ) else
7345: LD_VAR 0 1
7349: PPUSH
7350: LD_STRING D11b1-RSol1-1
7352: PPUSH
7353: CALL_OW 88
7357: GO 7371
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_STRING D11b1-RFSol1-1
7366: PPUSH
7367: CALL_OW 88
// end ; DialogueOff ;
7371: CALL_OW 7
// exit ;
7375: GO 7449
// end ; if IsOk ( Belkov ) then
7377: LD_EXP 48
7381: PPUSH
7382: CALL_OW 302
7386: IFFALSE 7402
// Say ( Belkov , D11b1-Bel-1 ) else
7388: LD_EXP 48
7392: PPUSH
7393: LD_STRING D11b1-Bel-1
7395: PPUSH
7396: CALL_OW 88
7400: GO 7443
// begin if GetSex ( randomSold ) = sex_male then
7402: LD_VAR 0 1
7406: PPUSH
7407: CALL_OW 258
7411: PUSH
7412: LD_INT 1
7414: EQUAL
7415: IFFALSE 7431
// Say ( randomSold , D11b1-RSol1-1 ) else
7417: LD_VAR 0 1
7421: PPUSH
7422: LD_STRING D11b1-RSol1-1
7424: PPUSH
7425: CALL_OW 88
7429: GO 7443
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_STRING D11b1-RFSol1-1
7438: PPUSH
7439: CALL_OW 88
// end ; DialogueOff ;
7443: CALL_OW 7
// exit ;
7447: GO 7449
// end ;
7449: PPOPN 1
7451: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7452: LD_INT 3
7454: PPUSH
7455: LD_EXP 50
7459: PPUSH
7460: CALL_OW 292
7464: IFFALSE 7694
7466: GO 7468
7468: DISABLE
7469: LD_INT 0
7471: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
7472: LD_EXP 50
7476: PPUSH
7477: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7481: LD_ADDR_VAR 0 1
7485: PUSH
7486: LD_INT 22
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 21
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 50
7508: PUSH
7509: EMPTY
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_EXP 50
7526: PPUSH
7527: CALL_OW 74
7531: ST_TO_ADDR
// DialogueOn ;
7532: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7536: LD_EXP 50
7540: PPUSH
7541: LD_STRING D11a-Kir-1
7543: PPUSH
7544: CALL_OW 88
// if nearUnit = Belkov then
7548: LD_VAR 0 1
7552: PUSH
7553: LD_EXP 48
7557: EQUAL
7558: IFFALSE 7598
// begin Say ( Belkov , D11a-Bel-1 ) ;
7560: LD_EXP 48
7564: PPUSH
7565: LD_STRING D11a-Bel-1
7567: PPUSH
7568: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7572: LD_EXP 50
7576: PPUSH
7577: LD_STRING D11a-Kir-2
7579: PPUSH
7580: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7584: LD_EXP 48
7588: PPUSH
7589: LD_STRING D11a-Bel-2
7591: PPUSH
7592: CALL_OW 88
// end else
7596: GO 7639
// begin if GetSex ( nearUnit ) = sex_male then
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 258
7607: PUSH
7608: LD_INT 1
7610: EQUAL
7611: IFFALSE 7627
// Say ( nearUnit , D11a-RSol1-2 ) else
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_STRING D11a-RSol1-2
7620: PPUSH
7621: CALL_OW 88
7625: GO 7639
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7627: LD_VAR 0 1
7631: PPUSH
7632: LD_STRING D11a-RFSol1-2
7634: PPUSH
7635: CALL_OW 88
// end ; DialogueOff ;
7639: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
7643: LD_EXP 50
7647: PPUSH
7648: LD_INT 3
7650: PPUSH
7651: CALL_OW 235
// jelenaSaved = true ;
7655: LD_ADDR_EXP 20
7659: PUSH
7660: LD_INT 1
7662: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7670: LD_EXP 50
7674: PPUSH
7675: LD_STRING D11c-Kir-1
7677: PPUSH
7678: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7682: LD_EXP 43
7686: PPUSH
7687: LD_STRING D11c-Bur-1
7689: PPUSH
7690: CALL_OW 88
// end ;
7694: PPOPN 1
7696: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7697: LD_EXP 21
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 22
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 21
7717: PUSH
7718: LD_INT 1
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 70
7733: PUSH
7734: LD_INT 0
7736: GREATER
7737: AND
7738: IFFALSE 7750
7740: GO 7742
7742: DISABLE
// begin Query ( QExit1 ) ;
7743: LD_STRING QExit1
7745: PPUSH
7746: CALL_OW 97
// end ; end_of_file
7750: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7751: LD_INT 0
7753: PPUSH
7754: PPUSH
// if exist_mode then
7755: LD_VAR 0 2
7759: IFFALSE 7784
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7761: LD_ADDR_VAR 0 4
7765: PUSH
7766: LD_EXP 28
7770: PUSH
7771: LD_VAR 0 1
7775: STR
7776: PPUSH
7777: CALL_OW 34
7781: ST_TO_ADDR
7782: GO 7799
// unit := NewCharacter ( ident ) ;
7784: LD_ADDR_VAR 0 4
7788: PUSH
7789: LD_VAR 0 1
7793: PPUSH
7794: CALL_OW 25
7798: ST_TO_ADDR
// result := unit ;
7799: LD_ADDR_VAR 0 3
7803: PUSH
7804: LD_VAR 0 4
7808: ST_TO_ADDR
// end ;
7809: LD_VAR 0 3
7813: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7814: LD_INT 0
7816: PPUSH
7817: PPUSH
7818: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_VAR 0 1
7828: PUSH
7829: LD_EXP 43
7833: PUSH
7834: LD_EXP 51
7838: PUSH
7839: LD_EXP 48
7843: PUSH
7844: LD_EXP 50
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: DIFF
7855: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: LD_INT 1
7868: PPUSH
7869: LD_VAR 0 1
7873: PPUSH
7874: CALL_OW 12
7878: ARRAY
7879: ST_TO_ADDR
// if radio then
7880: LD_VAR 0 4
7884: IFFALSE 7933
// begin if GetSex ( speaker ) = sex_male then
7886: LD_VAR 0 7
7890: PPUSH
7891: CALL_OW 258
7895: PUSH
7896: LD_INT 1
7898: EQUAL
7899: IFFALSE 7917
// SayRadio ( speaker , dialogMID ) else
7901: LD_VAR 0 7
7905: PPUSH
7906: LD_VAR 0 2
7910: PPUSH
7911: CALL_OW 94
7915: GO 7931
// SayRadio ( speaker , dialogFID ) ;
7917: LD_VAR 0 7
7921: PPUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: CALL_OW 94
// end else
7931: GO 7978
// begin if GetSex ( speaker ) = sex_male then
7933: LD_VAR 0 7
7937: PPUSH
7938: CALL_OW 258
7942: PUSH
7943: LD_INT 1
7945: EQUAL
7946: IFFALSE 7964
// Say ( speaker , dialogMID ) else
7948: LD_VAR 0 7
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 88
7962: GO 7978
// Say ( speaker , dialogFID ) ;
7964: LD_VAR 0 7
7968: PPUSH
7969: LD_VAR 0 3
7973: PPUSH
7974: CALL_OW 88
// end ; result := speaker ;
7978: LD_ADDR_VAR 0 5
7982: PUSH
7983: LD_VAR 0 7
7987: ST_TO_ADDR
// end ;
7988: LD_VAR 0 5
7992: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7993: LD_INT 0
7995: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 255
8005: PUSH
8006: LD_OWVAR 2
8010: EQUAL
8011: PUSH
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 302
8021: AND
8022: IFFALSE 8044
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_EXP 27
8033: PUSH
8034: LD_VAR 0 2
8038: STR
8039: PPUSH
8040: CALL_OW 38
// end ;
8044: LD_VAR 0 3
8048: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8049: LD_INT 0
8051: PPUSH
8052: PPUSH
8053: PPUSH
// resultCharactersToSave = [ ] ;
8054: LD_ADDR_VAR 0 5
8058: PUSH
8059: EMPTY
8060: ST_TO_ADDR
// for unit in characters do
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_VAR 0 1
8070: PUSH
8071: FOR_IN
8072: IFFALSE 8120
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8074: LD_VAR 0 4
8078: PPUSH
8079: CALL_OW 255
8083: PUSH
8084: LD_OWVAR 2
8088: EQUAL
8089: PUSH
8090: LD_VAR 0 4
8094: PPUSH
8095: CALL_OW 302
8099: AND
8100: IFFALSE 8118
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8102: LD_ADDR_VAR 0 5
8106: PUSH
8107: LD_VAR 0 5
8111: PUSH
8112: LD_VAR 0 4
8116: ADD
8117: ST_TO_ADDR
8118: GO 8071
8120: POP
8121: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8122: LD_VAR 0 5
8126: PPUSH
8127: LD_EXP 27
8131: PUSH
8132: LD_VAR 0 2
8136: STR
8137: PPUSH
8138: CALL_OW 38
// end ;
8142: LD_VAR 0 3
8146: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8147: LD_INT 0
8149: PPUSH
8150: PPUSH
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
8157: PPUSH
8158: PPUSH
8159: PPUSH
8160: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 302
8170: NOT
8171: PUSH
8172: LD_VAR 0 4
8176: PUSH
8177: LD_INT 1
8179: EQUAL
8180: OR
8181: PUSH
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 3
8191: PPUSH
8192: CALL_OW 488
8196: NOT
8197: OR
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: LD_VAR 0 2
8208: PPUSH
8209: LD_VAR 0 3
8213: PPUSH
8214: CALL_OW 297
8218: PUSH
8219: LD_VAR 0 4
8223: GREATEREQUAL
8224: OR
8225: PUSH
8226: LD_VAR 0 5
8230: PUSH
8231: LD_INT 1
8233: PUSH
8234: LD_INT 0
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: IN
8241: NOT
8242: OR
8243: IFFALSE 8247
// exit ;
8245: GO 9804
// attempts = 0 ;
8247: LD_ADDR_VAR 0 17
8251: PUSH
8252: LD_INT 0
8254: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8255: LD_ADDR_VAR 0 7
8259: PUSH
8260: EMPTY
8261: ST_TO_ADDR
// list_coords = [ ] ;
8262: LD_ADDR_VAR 0 8
8266: PUSH
8267: EMPTY
8268: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_VAR 0 2
8278: PPUSH
8279: LD_VAR 0 3
8283: PPUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 250
8293: PPUSH
8294: LD_VAR 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: CALL 9809 0 4
8308: ST_TO_ADDR
// if attempts = 0 then
8309: LD_VAR 0 17
8313: PUSH
8314: LD_INT 0
8316: EQUAL
8317: IFFALSE 8425
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8319: LD_ADDR_VAR 0 10
8323: PUSH
8324: LD_VAR 0 9
8328: PUSH
8329: LD_VAR 0 9
8333: PUSH
8334: LD_INT 1
8336: PLUS
8337: PUSH
8338: LD_VAR 0 9
8342: PUSH
8343: LD_INT 1
8345: MINUS
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8352: LD_VAR 0 10
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PUSH
8361: LD_INT 6
8363: EQUAL
8364: IFFALSE 8387
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8366: LD_ADDR_VAR 0 10
8370: PUSH
8371: LD_VAR 0 10
8375: PPUSH
8376: LD_INT 2
8378: PPUSH
8379: LD_INT 0
8381: PPUSH
8382: CALL_OW 1
8386: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8387: LD_VAR 0 10
8391: PUSH
8392: LD_INT 3
8394: ARRAY
8395: PUSH
8396: LD_INT 1
8398: NEG
8399: EQUAL
8400: IFFALSE 8423
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8402: LD_ADDR_VAR 0 10
8406: PUSH
8407: LD_VAR 0 10
8411: PPUSH
8412: LD_INT 3
8414: PPUSH
8415: LD_INT 5
8417: PPUSH
8418: CALL_OW 1
8422: ST_TO_ADDR
// end else
8423: GO 8462
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8425: LD_ADDR_VAR 0 10
8429: PUSH
8430: LD_INT 0
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: LD_INT 4
8444: PUSH
8445: LD_INT 5
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: PUSH
8456: LD_VAR 0 9
8460: DIFF
8461: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8462: LD_ADDR_VAR 0 14
8466: PUSH
8467: DOUBLE
8468: LD_INT 1
8470: DEC
8471: ST_TO_ADDR
8472: LD_VAR 0 10
8476: PUSH
8477: LD_INT 0
8479: PLUS
8480: PUSH
8481: FOR_TO
8482: IFFALSE 8804
// case dir_list [ c ] of 0 :
8484: LD_VAR 0 10
8488: PUSH
8489: LD_VAR 0 14
8493: ARRAY
8494: PUSH
8495: LD_INT 0
8497: DOUBLE
8498: EQUAL
8499: IFTRUE 8503
8501: GO 8544
8503: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8504: LD_ADDR_VAR 0 8
8508: PUSH
8509: LD_VAR 0 8
8513: PPUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_VAR 0 2
8521: PUSH
8522: LD_VAR 0 3
8526: PUSH
8527: LD_VAR 0 4
8531: MINUS
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PPUSH
8537: CALL_OW 2
8541: ST_TO_ADDR
8542: GO 8802
8544: LD_INT 1
8546: DOUBLE
8547: EQUAL
8548: IFTRUE 8552
8550: GO 8593
8552: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8553: LD_ADDR_VAR 0 8
8557: PUSH
8558: LD_VAR 0 8
8562: PPUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 2
8570: PUSH
8571: LD_VAR 0 4
8575: PLUS
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 2
8590: ST_TO_ADDR
8591: GO 8802
8593: LD_INT 2
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8648
8601: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8602: LD_ADDR_VAR 0 8
8606: PUSH
8607: LD_VAR 0 8
8611: PPUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_VAR 0 2
8619: PUSH
8620: LD_VAR 0 4
8624: PLUS
8625: PUSH
8626: LD_VAR 0 3
8630: PUSH
8631: LD_VAR 0 4
8635: PLUS
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PPUSH
8641: CALL_OW 2
8645: ST_TO_ADDR
8646: GO 8802
8648: LD_INT 3
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8697
8656: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8657: LD_ADDR_VAR 0 8
8661: PUSH
8662: LD_VAR 0 8
8666: PPUSH
8667: LD_INT 1
8669: PPUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_VAR 0 3
8679: PUSH
8680: LD_VAR 0 4
8684: PLUS
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 2
8694: ST_TO_ADDR
8695: GO 8802
8697: LD_INT 4
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8746
8705: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8706: LD_ADDR_VAR 0 8
8710: PUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: LD_VAR 0 2
8723: PUSH
8724: LD_VAR 0 4
8728: MINUS
8729: PUSH
8730: LD_VAR 0 3
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 2
8743: ST_TO_ADDR
8744: GO 8802
8746: LD_INT 5
8748: DOUBLE
8749: EQUAL
8750: IFTRUE 8754
8752: GO 8801
8754: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8755: LD_ADDR_VAR 0 8
8759: PUSH
8760: LD_VAR 0 8
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: LD_VAR 0 2
8772: PUSH
8773: LD_VAR 0 4
8777: MINUS
8778: PUSH
8779: LD_VAR 0 3
8783: PUSH
8784: LD_VAR 0 4
8788: MINUS
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 2
8798: ST_TO_ADDR
8799: GO 8802
8801: POP
8802: GO 8481
8804: POP
8805: POP
// if dist < 30 then
8806: LD_VAR 0 4
8810: PUSH
8811: LD_INT 30
8813: LESS
8814: IFFALSE 8826
// c = 1 else
8816: LD_ADDR_VAR 0 14
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
8824: GO 8834
// c = 2 ;
8826: LD_ADDR_VAR 0 14
8830: PUSH
8831: LD_INT 2
8833: ST_TO_ADDR
// b = 1 ;
8834: LD_ADDR_VAR 0 11
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8842: LD_VAR 0 11
8846: PUSH
8847: LD_VAR 0 4
8851: PUSH
8852: LD_INT 1
8854: MINUS
8855: LESSEQUAL
8856: IFFALSE 9284
// begin if 0 in dir_list and 1 in dir_list then
8858: LD_INT 0
8860: PUSH
8861: LD_VAR 0 10
8865: IN
8866: PUSH
8867: LD_INT 1
8869: PUSH
8870: LD_VAR 0 10
8874: IN
8875: AND
8876: IFFALSE 8928
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8878: LD_ADDR_VAR 0 8
8882: PUSH
8883: LD_VAR 0 8
8887: PPUSH
8888: LD_INT 1
8890: PPUSH
8891: LD_VAR 0 2
8895: PUSH
8896: LD_VAR 0 11
8900: PLUS
8901: PUSH
8902: LD_VAR 0 3
8906: PUSH
8907: LD_VAR 0 4
8911: MINUS
8912: PUSH
8913: LD_VAR 0 11
8917: PLUS
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 2
8927: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8928: LD_INT 1
8930: PUSH
8931: LD_VAR 0 10
8935: IN
8936: PUSH
8937: LD_INT 2
8939: PUSH
8940: LD_VAR 0 10
8944: IN
8945: AND
8946: IFFALSE 8992
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8948: LD_ADDR_VAR 0 8
8952: PUSH
8953: LD_VAR 0 8
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_VAR 0 2
8965: PUSH
8966: LD_VAR 0 4
8970: PLUS
8971: PUSH
8972: LD_VAR 0 3
8976: PUSH
8977: LD_VAR 0 11
8981: PLUS
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 2
8991: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
8992: LD_INT 2
8994: PUSH
8995: LD_VAR 0 10
8999: IN
9000: PUSH
9001: LD_INT 3
9003: PUSH
9004: LD_VAR 0 10
9008: IN
9009: AND
9010: IFFALSE 9062
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9012: LD_ADDR_VAR 0 8
9016: PUSH
9017: LD_VAR 0 8
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_VAR 0 2
9029: PUSH
9030: LD_VAR 0 4
9034: PLUS
9035: PUSH
9036: LD_VAR 0 11
9040: MINUS
9041: PUSH
9042: LD_VAR 0 3
9046: PUSH
9047: LD_VAR 0 4
9051: PLUS
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 2
9061: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9062: LD_INT 3
9064: PUSH
9065: LD_VAR 0 10
9069: IN
9070: PUSH
9071: LD_INT 4
9073: PUSH
9074: LD_VAR 0 10
9078: IN
9079: AND
9080: IFFALSE 9132
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9082: LD_ADDR_VAR 0 8
9086: PUSH
9087: LD_VAR 0 8
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: LD_VAR 0 2
9099: PUSH
9100: LD_VAR 0 11
9104: MINUS
9105: PUSH
9106: LD_VAR 0 3
9110: PUSH
9111: LD_VAR 0 4
9115: PLUS
9116: PUSH
9117: LD_VAR 0 11
9121: MINUS
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 2
9131: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9132: LD_INT 4
9134: PUSH
9135: LD_VAR 0 10
9139: IN
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: LD_VAR 0 10
9148: IN
9149: AND
9150: IFFALSE 9196
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9152: LD_ADDR_VAR 0 8
9156: PUSH
9157: LD_VAR 0 8
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: LD_VAR 0 2
9169: PUSH
9170: LD_VAR 0 4
9174: MINUS
9175: PUSH
9176: LD_VAR 0 3
9180: PUSH
9181: LD_VAR 0 11
9185: MINUS
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 2
9195: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9196: LD_INT 5
9198: PUSH
9199: LD_VAR 0 10
9203: IN
9204: PUSH
9205: LD_INT 0
9207: PUSH
9208: LD_VAR 0 10
9212: IN
9213: AND
9214: IFFALSE 9266
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9216: LD_ADDR_VAR 0 8
9220: PUSH
9221: LD_VAR 0 8
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: LD_VAR 0 2
9233: PUSH
9234: LD_VAR 0 4
9238: MINUS
9239: PUSH
9240: LD_VAR 0 11
9244: PLUS
9245: PUSH
9246: LD_VAR 0 3
9250: PUSH
9251: LD_VAR 0 4
9255: MINUS
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 2
9265: ST_TO_ADDR
// b = b + c end ;
9266: LD_ADDR_VAR 0 11
9270: PUSH
9271: LD_VAR 0 11
9275: PUSH
9276: LD_VAR 0 14
9280: PLUS
9281: ST_TO_ADDR
9282: GO 8842
// if list_coords = 0 then
9284: LD_VAR 0 8
9288: PUSH
9289: LD_INT 0
9291: EQUAL
9292: IFFALSE 9296
// exit ;
9294: GO 9804
// repeat min_dist = 5000 ;
9296: LD_ADDR_VAR 0 12
9300: PUSH
9301: LD_INT 5000
9303: ST_TO_ADDR
// for b in list_coords do
9304: LD_ADDR_VAR 0 11
9308: PUSH
9309: LD_VAR 0 8
9313: PUSH
9314: FOR_IN
9315: IFFALSE 9374
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9317: LD_ADDR_VAR 0 13
9321: PUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: LD_VAR 0 11
9331: PUSH
9332: LD_INT 1
9334: ARRAY
9335: PPUSH
9336: LD_VAR 0 11
9340: PUSH
9341: LD_INT 2
9343: ARRAY
9344: PPUSH
9345: CALL_OW 297
9349: ST_TO_ADDR
// if temp_dist < min_dist then
9350: LD_VAR 0 13
9354: PUSH
9355: LD_VAR 0 12
9359: LESS
9360: IFFALSE 9372
// min_dist = temp_dist ;
9362: LD_ADDR_VAR 0 12
9366: PUSH
9367: LD_VAR 0 13
9371: ST_TO_ADDR
// end ;
9372: GO 9314
9374: POP
9375: POP
// c = 0 ;
9376: LD_ADDR_VAR 0 14
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// repeat c = c + 1 ;
9384: LD_ADDR_VAR 0 14
9388: PUSH
9389: LD_VAR 0 14
9393: PUSH
9394: LD_INT 1
9396: PLUS
9397: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9398: LD_VAR 0 1
9402: PPUSH
9403: LD_VAR 0 8
9407: PUSH
9408: LD_VAR 0 14
9412: ARRAY
9413: PUSH
9414: LD_INT 1
9416: ARRAY
9417: PPUSH
9418: LD_VAR 0 8
9422: PUSH
9423: LD_VAR 0 14
9427: ARRAY
9428: PUSH
9429: LD_INT 2
9431: ARRAY
9432: PPUSH
9433: CALL_OW 297
9437: PUSH
9438: LD_VAR 0 12
9442: EQUAL
9443: IFFALSE 9508
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9445: LD_ADDR_VAR 0 7
9449: PUSH
9450: LD_VAR 0 7
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: LD_VAR 0 8
9462: PUSH
9463: LD_VAR 0 14
9467: ARRAY
9468: PPUSH
9469: CALL_OW 2
9473: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9474: LD_ADDR_VAR 0 8
9478: PUSH
9479: LD_VAR 0 8
9483: PPUSH
9484: LD_VAR 0 14
9488: PPUSH
9489: CALL_OW 3
9493: ST_TO_ADDR
// c = c - 1 ;
9494: LD_ADDR_VAR 0 14
9498: PUSH
9499: LD_VAR 0 14
9503: PUSH
9504: LD_INT 1
9506: MINUS
9507: ST_TO_ADDR
// end ; until c = list_coords ;
9508: LD_VAR 0 14
9512: PUSH
9513: LD_VAR 0 8
9517: EQUAL
9518: IFFALSE 9384
// c = 0 ;
9520: LD_ADDR_VAR 0 14
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// if list_nearest > 0 then
9528: LD_VAR 0 7
9532: PUSH
9533: LD_INT 0
9535: GREATER
9536: IFFALSE 9678
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9538: LD_ADDR_VAR 0 15
9542: PUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_VAR 0 7
9550: PPUSH
9551: CALL_OW 12
9555: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9556: LD_ADDR_VAR 0 16
9560: PUSH
9561: LD_VAR 0 7
9565: PUSH
9566: LD_VAR 0 15
9570: ARRAY
9571: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9572: LD_VAR 0 16
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: LD_VAR 0 16
9585: PUSH
9586: LD_INT 2
9588: ARRAY
9589: PPUSH
9590: CALL_OW 488
9594: PUSH
9595: LD_INT 0
9597: GREATER
9598: PUSH
9599: LD_VAR 0 16
9603: PUSH
9604: LD_INT 1
9606: ARRAY
9607: PPUSH
9608: LD_VAR 0 16
9612: PUSH
9613: LD_INT 2
9615: ARRAY
9616: PPUSH
9617: CALL_OW 428
9621: PUSH
9622: LD_INT 0
9624: EQUAL
9625: AND
9626: IFFALSE 9638
// c = 1 else
9628: LD_ADDR_VAR 0 14
9632: PUSH
9633: LD_INT 1
9635: ST_TO_ADDR
9636: GO 9658
// list_nearest = Delete ( list_nearest , rand_num ) ;
9638: LD_ADDR_VAR 0 7
9642: PUSH
9643: LD_VAR 0 7
9647: PPUSH
9648: LD_VAR 0 15
9652: PPUSH
9653: CALL_OW 3
9657: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9658: LD_VAR 0 14
9662: PUSH
9663: LD_INT 1
9665: EQUAL
9666: PUSH
9667: LD_VAR 0 7
9671: PUSH
9672: LD_INT 0
9674: EQUAL
9675: OR
9676: IFFALSE 9538
// end ; until c = 1 or list_coords = 0 ;
9678: LD_VAR 0 14
9682: PUSH
9683: LD_INT 1
9685: EQUAL
9686: PUSH
9687: LD_VAR 0 8
9691: PUSH
9692: LD_INT 0
9694: EQUAL
9695: OR
9696: IFFALSE 9296
// attempts = attempts + 1 ;
9698: LD_ADDR_VAR 0 17
9702: PUSH
9703: LD_VAR 0 17
9707: PUSH
9708: LD_INT 1
9710: PLUS
9711: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9712: LD_VAR 0 14
9716: PUSH
9717: LD_INT 1
9719: EQUAL
9720: PUSH
9721: LD_VAR 0 17
9725: PUSH
9726: LD_INT 1
9728: GREATER
9729: OR
9730: IFFALSE 8255
// if c = 1 then
9732: LD_VAR 0 14
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: IFFALSE 9804
// if add then
9742: LD_VAR 0 5
9746: IFFALSE 9777
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_VAR 0 16
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PPUSH
9762: LD_VAR 0 16
9766: PUSH
9767: LD_INT 2
9769: ARRAY
9770: PPUSH
9771: CALL_OW 171
9775: GO 9804
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9777: LD_VAR 0 1
9781: PPUSH
9782: LD_VAR 0 16
9786: PUSH
9787: LD_INT 1
9789: ARRAY
9790: PPUSH
9791: LD_VAR 0 16
9795: PUSH
9796: LD_INT 2
9798: ARRAY
9799: PPUSH
9800: CALL_OW 111
// end ;
9804: LD_VAR 0 6
9808: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9809: LD_INT 0
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
9816: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9817: LD_VAR 0 1
9821: PPUSH
9822: LD_VAR 0 2
9826: PPUSH
9827: CALL_OW 488
9831: NOT
9832: PUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_VAR 0 4
9842: PPUSH
9843: CALL_OW 488
9847: NOT
9848: OR
9849: IFFALSE 9862
// begin result = - 1 ;
9851: LD_ADDR_VAR 0 5
9855: PUSH
9856: LD_INT 1
9858: NEG
9859: ST_TO_ADDR
// exit ;
9860: GO 10022
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9862: LD_ADDR_VAR 0 6
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_VAR 0 2
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_VAR 0 4
9886: PPUSH
9887: CALL_OW 298
9891: ST_TO_ADDR
// dist_2 = 99999 ;
9892: LD_ADDR_VAR 0 7
9896: PUSH
9897: LD_INT 99999
9899: ST_TO_ADDR
// for b = 0 to 5 do
9900: LD_ADDR_VAR 0 8
9904: PUSH
9905: DOUBLE
9906: LD_INT 0
9908: DEC
9909: ST_TO_ADDR
9910: LD_INT 5
9912: PUSH
9913: FOR_TO
9914: IFFALSE 10010
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9916: LD_ADDR_VAR 0 9
9920: PUSH
9921: LD_VAR 0 1
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: LD_VAR 0 6
9935: PPUSH
9936: CALL_OW 272
9940: PPUSH
9941: LD_VAR 0 2
9945: PPUSH
9946: LD_VAR 0 8
9950: PPUSH
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 273
9960: PPUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 298
9975: ST_TO_ADDR
// if temp_dist < dist_2 then
9976: LD_VAR 0 9
9980: PUSH
9981: LD_VAR 0 7
9985: LESS
9986: IFFALSE 10008
// begin dist_2 = temp_dist ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_VAR 0 9
9997: ST_TO_ADDR
// dir = b ;
9998: LD_ADDR_VAR 0 10
10002: PUSH
10003: LD_VAR 0 8
10007: ST_TO_ADDR
// end ; end ;
10008: GO 9913
10010: POP
10011: POP
// result = dir ;
10012: LD_ADDR_VAR 0 5
10016: PUSH
10017: LD_VAR 0 10
10021: ST_TO_ADDR
// end ;
10022: LD_VAR 0 5
10026: RET
// export function MoveToHill ; begin
10027: LD_INT 0
10029: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10030: LD_EXP 44
10034: PPUSH
10035: LD_INT 65
10037: PPUSH
10038: LD_INT 59
10040: PPUSH
10041: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10045: LD_EXP 44
10049: PPUSH
10050: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10054: LD_EXP 45
10058: PPUSH
10059: LD_INT 65
10061: PPUSH
10062: LD_INT 58
10064: PPUSH
10065: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10069: LD_EXP 45
10073: PPUSH
10074: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10078: LD_EXP 46
10082: PPUSH
10083: LD_INT 64
10085: PPUSH
10086: LD_INT 57
10088: PPUSH
10089: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10093: LD_EXP 46
10097: PPUSH
10098: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10102: LD_EXP 47
10106: PPUSH
10107: LD_INT 64
10109: PPUSH
10110: LD_INT 56
10112: PPUSH
10113: CALL_OW 111
// AddComCrawl ( Balei ) ;
10117: LD_EXP 47
10121: PPUSH
10122: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10126: LD_EXP 48
10130: PPUSH
10131: LD_INT 63
10133: PPUSH
10134: LD_INT 55
10136: PPUSH
10137: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10141: LD_EXP 48
10145: PPUSH
10146: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10150: LD_EXP 49
10154: PPUSH
10155: LD_INT 66
10157: PPUSH
10158: LD_INT 58
10160: PPUSH
10161: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10165: LD_EXP 49
10169: PPUSH
10170: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10174: LD_EXP 51
10178: PPUSH
10179: CALL_OW 255
10183: PUSH
10184: LD_INT 6
10186: EQUAL
10187: PUSH
10188: LD_EXP 11
10192: AND
10193: IFFALSE 10219
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10195: LD_EXP 51
10199: PPUSH
10200: LD_INT 63
10202: PPUSH
10203: LD_INT 54
10205: PPUSH
10206: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10210: LD_EXP 51
10214: PPUSH
10215: CALL_OW 197
// end ; end ; end_of_file
10219: LD_VAR 0 1
10223: RET
// export function BurlakDying ; begin
10224: LD_INT 0
10226: PPUSH
// YouLost ( Burlak ) ;
10227: LD_STRING Burlak
10229: PPUSH
10230: CALL_OW 104
// end ;
10234: LD_VAR 0 1
10238: RET
// every 0 0$1 trigger kirovSolds = 0 do
10239: LD_EXP 53
10243: PUSH
10244: LD_INT 0
10246: EQUAL
10247: IFFALSE 10259
10249: GO 10251
10251: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10252: LD_STRING KirovSoldsDie
10254: PPUSH
10255: CALL_OW 104
10259: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10260: LD_EXP 21
10264: PUSH
10265: LD_INT 1
10267: PPUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 3
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 71
10296: PUSH
10297: LD_INT 0
10299: EQUAL
10300: AND
10301: IFFALSE 10449
10303: GO 10305
10305: DISABLE
10306: LD_INT 0
10308: PPUSH
// begin case Query ( QExit2 ) of 1 :
10309: LD_STRING QExit2
10311: PPUSH
10312: CALL_OW 97
10316: PUSH
10317: LD_INT 1
10319: DOUBLE
10320: EQUAL
10321: IFTRUE 10325
10323: GO 10429
10325: POP
// begin if IsOk ( Belkov ) then
10326: LD_EXP 48
10330: PPUSH
10331: CALL_OW 302
10335: IFFALSE 10351
// Say ( Belkov , D12-Bel-1 ) else
10337: LD_EXP 48
10341: PPUSH
10342: LD_STRING D12-Bel-1
10344: PPUSH
10345: CALL_OW 88
10349: GO 10411
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10351: LD_INT 22
10353: PUSH
10354: LD_INT 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 21
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 50
10373: PUSH
10374: EMPTY
10375: LIST
10376: PUSH
10377: LD_INT 26
10379: PUSH
10380: LD_INT 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_STRING D12-RSol1-1
10400: PPUSH
10401: LD_STRING 
10403: PPUSH
10404: LD_INT 0
10406: PPUSH
10407: CALL 7814 0 4
// SetRewards ;
10411: CALL 10452 0 0
// SavePlayerCharacters ;
10415: CALL 10803 0 0
// SaveGlobalVariables ;
10419: CALL 10933 0 0
// YouWin ;
10423: CALL_OW 103
// end ; 2 :
10427: GO 10449
10429: LD_INT 2
10431: DOUBLE
10432: EQUAL
10433: IFTRUE 10437
10435: GO 10448
10437: POP
// begin wait ( 0 0$5 ) ;
10438: LD_INT 175
10440: PPUSH
10441: CALL_OW 67
// enable ;
10445: ENABLE
// end ; end ;
10446: GO 10449
10448: POP
// end ;
10449: PPOPN 1
10451: END
// function SetRewards ; begin
10452: LD_INT 0
10454: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10455: LD_EXP 18
10459: NOT
10460: PUSH
10461: LD_EXP 19
10465: NOT
10466: AND
10467: IFFALSE 10479
// AddMedal ( NoEscape , 1 ) ;
10469: LD_STRING NoEscape
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10479: LD_EXP 18
10483: PUSH
10484: LD_EXP 19
10488: NOT
10489: AND
10490: IFFALSE 10503
// AddMedal ( NoEscape , - 1 ) ;
10492: LD_STRING NoEscape
10494: PPUSH
10495: LD_INT 1
10497: NEG
10498: PPUSH
10499: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10503: LD_EXP 18
10507: NOT
10508: PUSH
10509: LD_EXP 19
10513: AND
10514: IFFALSE 10527
// AddMedal ( NoEscape , - 2 ) ;
10516: LD_STRING NoEscape
10518: PPUSH
10519: LD_INT 2
10521: NEG
10522: PPUSH
10523: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10527: LD_EXP 18
10531: PUSH
10532: LD_EXP 19
10536: AND
10537: IFFALSE 10550
// AddMedal ( NoEscape , - 3 ) ;
10539: LD_STRING NoEscape
10541: PPUSH
10542: LD_INT 3
10544: NEG
10545: PPUSH
10546: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10550: LD_EXP 11
10554: PUSH
10555: LD_EXP 51
10559: PPUSH
10560: CALL_OW 302
10564: AND
10565: PUSH
10566: LD_EXP 20
10570: AND
10571: PUSH
10572: LD_EXP 50
10576: PPUSH
10577: CALL_OW 302
10581: AND
10582: IFFALSE 10594
// AddMedal ( Gnyevko , 1 ) ;
10584: LD_STRING Gnyevko
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10594: LD_EXP 11
10598: NOT
10599: PUSH
10600: LD_EXP 20
10604: AND
10605: PUSH
10606: LD_EXP 50
10610: PPUSH
10611: CALL_OW 302
10615: AND
10616: IFFALSE 10629
// AddMedal ( Gnyevko , - 1 ) ;
10618: LD_STRING Gnyevko
10620: PPUSH
10621: LD_INT 1
10623: NEG
10624: PPUSH
10625: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10629: LD_EXP 11
10633: PUSH
10634: LD_EXP 20
10638: NOT
10639: PUSH
10640: LD_EXP 51
10644: PPUSH
10645: CALL_OW 302
10649: NOT
10650: OR
10651: PUSH
10652: LD_EXP 50
10656: PPUSH
10657: CALL_OW 302
10661: NOT
10662: OR
10663: AND
10664: IFFALSE 10677
// AddMedal ( Gnyevko , - 2 ) ;
10666: LD_STRING Gnyevko
10668: PPUSH
10669: LD_INT 2
10671: NEG
10672: PPUSH
10673: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10677: LD_EXP 11
10681: NOT
10682: PUSH
10683: LD_EXP 20
10687: NOT
10688: AND
10689: PUSH
10690: LD_EXP 51
10694: PPUSH
10695: CALL_OW 302
10699: NOT
10700: PUSH
10701: LD_EXP 50
10705: PPUSH
10706: CALL_OW 302
10710: NOT
10711: AND
10712: OR
10713: IFFALSE 10726
// AddMedal ( Gnyevko , - 3 ) ;
10715: LD_STRING Gnyevko
10717: PPUSH
10718: LD_INT 3
10720: NEG
10721: PPUSH
10722: CALL_OW 101
// if lostComradesCounter = 0 then
10726: LD_EXP 22
10730: PUSH
10731: LD_INT 0
10733: EQUAL
10734: IFFALSE 10748
// AddMedal ( NoLosses , 1 ) else
10736: LD_STRING NoLosses
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 101
10746: GO 10758
// AddMedal ( NoLosses , 0 ) ;
10748: LD_STRING NoLosses
10750: PPUSH
10751: LD_INT 0
10753: PPUSH
10754: CALL_OW 101
// GiveMedals ( Main ) ;
10758: LD_STRING Main
10760: PPUSH
10761: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10765: LD_INT 22
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 21
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 69
10793: PPUSH
10794: CALL_OW 43
// end ;
10798: LD_VAR 0 1
10802: RET
// function SavePlayerCharacters ; var others ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10807: LD_EXP 43
10811: PPUSH
10812: LD_STRING Burlak
10814: PPUSH
10815: CALL 7993 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10819: LD_EXP 51
10823: PPUSH
10824: LD_STRING Gnyevko
10826: PPUSH
10827: CALL 7993 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10831: LD_EXP 48
10835: PPUSH
10836: LD_STRING Belkov
10838: PPUSH
10839: CALL 7993 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10843: LD_EXP 50
10847: PPUSH
10848: LD_STRING Kirilenkova
10850: PPUSH
10851: CALL 7993 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 21
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 69
10888: PUSH
10889: LD_EXP 43
10893: PUSH
10894: LD_EXP 51
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 50
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: DIFF
10915: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
10916: LD_VAR 0 2
10920: PPUSH
10921: LD_STRING other_survivors
10923: PPUSH
10924: CALL 8049 0 2
// end ;
10928: LD_VAR 0 1
10932: RET
// function SaveGlobalVariables ; begin
10933: LD_INT 0
10935: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
10936: LD_EXP 1
10940: PPUSH
10941: LD_STRING 01_GladstoneStatus
10943: PPUSH
10944: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
10948: LD_EXP 2
10952: PPUSH
10953: LD_STRING 01_JohannaStatus
10955: PPUSH
10956: CALL_OW 39
// end ; end_of_file
10960: LD_VAR 0 1
10964: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
10965: LD_INT 0
10967: PPUSH
10968: PPUSH
10969: PPUSH
// uc_side = 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// hc_class := 1 ;
10978: LD_ADDR_OWVAR 28
10982: PUSH
10983: LD_INT 1
10985: ST_TO_ADDR
// hc_sex := sex_male ;
10986: LD_ADDR_OWVAR 27
10990: PUSH
10991: LD_INT 1
10993: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
10994: LD_ADDR_OWVAR 33
10998: PUSH
10999: LD_STRING AmGalRemake
11001: ST_TO_ADDR
// hc_face_number := 1 ;
11002: LD_ADDR_OWVAR 34
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// hc_name := Charles Brown ;
11010: LD_ADDR_OWVAR 26
11014: PUSH
11015: LD_STRING Charles Brown
11017: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11018: LD_ADDR_OWVAR 29
11022: PUSH
11023: LD_INT 12
11025: PUSH
11026: LD_INT 11
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11033: LD_ADDR_OWVAR 31
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: LD_INT 0
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: ST_TO_ADDR
// Charles = CreateHuman ;
11056: LD_ADDR_EXP 39
11060: PUSH
11061: CALL_OW 44
11065: ST_TO_ADDR
// hc_class := 1 ;
11066: LD_ADDR_OWVAR 28
11070: PUSH
11071: LD_INT 1
11073: ST_TO_ADDR
// hc_sex := sex_female ;
11074: LD_ADDR_OWVAR 27
11078: PUSH
11079: LD_INT 2
11081: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11082: LD_ADDR_OWVAR 33
11086: PUSH
11087: LD_STRING AmGalRemake
11089: ST_TO_ADDR
// hc_face_number := 2 ;
11090: LD_ADDR_OWVAR 34
11094: PUSH
11095: LD_INT 2
11097: ST_TO_ADDR
// hc_name := Johanna Holland ;
11098: LD_ADDR_OWVAR 26
11102: PUSH
11103: LD_STRING Johanna Holland
11105: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11106: LD_ADDR_OWVAR 29
11110: PUSH
11111: LD_INT 12
11113: PUSH
11114: LD_INT 11
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11121: LD_ADDR_OWVAR 31
11125: PUSH
11126: LD_EXP 33
11130: PUSH
11131: LD_INT 0
11133: PPUSH
11134: LD_INT 2
11136: PPUSH
11137: CALL_OW 12
11141: PUSH
11142: LD_INT 0
11144: PPUSH
11145: LD_INT 2
11147: PPUSH
11148: CALL_OW 12
11152: PUSH
11153: LD_INT 0
11155: PPUSH
11156: LD_INT 2
11158: PPUSH
11159: CALL_OW 12
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: ST_TO_ADDR
// Johanna = CreateHuman ;
11170: LD_ADDR_EXP 40
11174: PUSH
11175: CALL_OW 44
11179: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11180: LD_EXP 40
11184: PPUSH
11185: LD_INT 19
11187: PPUSH
11188: LD_INT 0
11190: PPUSH
11191: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11195: LD_EXP 40
11199: PPUSH
11200: LD_INT 23
11202: PPUSH
11203: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11207: LD_ADDR_EXP 41
11211: PUSH
11212: LD_STRING Gladstone
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL 7751 0 2
11222: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11223: LD_EXP 41
11227: PPUSH
11228: LD_INT 22
11230: PPUSH
11231: CALL_OW 52
// amApemans = [ ] ;
11235: LD_ADDR_EXP 42
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// for i := 1 to amApeAmount do
11242: LD_ADDR_VAR 0 2
11246: PUSH
11247: DOUBLE
11248: LD_INT 1
11250: DEC
11251: ST_TO_ADDR
11252: LD_EXP 32
11256: PUSH
11257: FOR_TO
11258: IFFALSE 11373
// begin hc_class := class_apeman ;
11260: LD_ADDR_OWVAR 28
11264: PUSH
11265: LD_INT 12
11267: ST_TO_ADDR
// hc_gallery :=  ;
11268: LD_ADDR_OWVAR 33
11272: PUSH
11273: LD_STRING 
11275: ST_TO_ADDR
// hc_name :=  ;
11276: LD_ADDR_OWVAR 26
11280: PUSH
11281: LD_STRING 
11283: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11284: LD_ADDR_OWVAR 31
11288: PUSH
11289: LD_EXP 33
11293: PUSH
11294: LD_INT 0
11296: PPUSH
11297: LD_INT 2
11299: PPUSH
11300: CALL_OW 12
11304: PUSH
11305: LD_INT 0
11307: PPUSH
11308: LD_INT 2
11310: PPUSH
11311: CALL_OW 12
11315: PUSH
11316: LD_INT 0
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: ST_TO_ADDR
// ape = CreateHuman ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 22
11350: PPUSH
11351: CALL_OW 52
// amApemans = amApemans ^ ape ;
11355: LD_ADDR_EXP 42
11359: PUSH
11360: LD_EXP 42
11364: PUSH
11365: LD_VAR 0 3
11369: ADD
11370: ST_TO_ADDR
// end ;
11371: GO 11257
11373: POP
11374: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11375: LD_INT 23
11377: PPUSH
11378: LD_EXP 30
11382: PPUSH
11383: CALL_OW 234
// end ; end_of_file
11387: LD_VAR 0 1
11391: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11392: LD_INT 0
11394: PPUSH
// PrepareHero ;
11395: CALL 11420 0 0
// PreparePokryshkinTeams ;
11399: CALL 11514 0 0
// PrepareJelena ;
11403: CALL 11779 0 0
// PrepareGnyevko ;
11407: CALL 11811 0 0
// PrepareKurin ;
11411: CALL 11482 0 0
// end ;
11415: LD_VAR 0 1
11419: RET
// function PrepareHero ; begin
11420: LD_INT 0
11422: PPUSH
// uc_side = 3 ;
11423: LD_ADDR_OWVAR 20
11427: PUSH
11428: LD_INT 3
11430: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11431: LD_ADDR_EXP 43
11435: PUSH
11436: LD_STRING Burlak
11438: PPUSH
11439: LD_INT 0
11441: PPUSH
11442: CALL 7751 0 2
11446: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11447: LD_EXP 43
11451: PPUSH
11452: LD_EXP 34
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: PPUSH
11461: LD_EXP 34
11465: PUSH
11466: LD_INT 2
11468: ARRAY
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 48
// end ;
11477: LD_VAR 0 1
11481: RET
// function PrepareKurin ; begin
11482: LD_INT 0
11484: PPUSH
// uc_side = 6 ;
11485: LD_ADDR_OWVAR 20
11489: PUSH
11490: LD_INT 6
11492: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11493: LD_ADDR_EXP 52
11497: PUSH
11498: LD_STRING Kurin
11500: PPUSH
11501: LD_INT 0
11503: PPUSH
11504: CALL 7751 0 2
11508: ST_TO_ADDR
// end ;
11509: LD_VAR 0 1
11513: RET
// function PreparePokryshkinTeams ; begin
11514: LD_INT 0
11516: PPUSH
// uc_side = 6 ;
11517: LD_ADDR_OWVAR 20
11521: PUSH
11522: LD_INT 6
11524: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11525: LD_ADDR_EXP 44
11529: PUSH
11530: LD_STRING Pokryshkin
11532: PPUSH
11533: LD_INT 0
11535: PPUSH
11536: CALL 7751 0 2
11540: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11541: LD_ADDR_EXP 45
11545: PUSH
11546: LD_STRING Saseda
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL 7751 0 2
11556: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11557: LD_ADDR_EXP 46
11561: PUSH
11562: LD_STRING Jaworska
11564: PPUSH
11565: LD_INT 0
11567: PPUSH
11568: CALL 7751 0 2
11572: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11573: LD_ADDR_EXP 47
11577: PUSH
11578: LD_STRING Balei
11580: PPUSH
11581: LD_INT 0
11583: PPUSH
11584: CALL 7751 0 2
11588: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11589: LD_ADDR_EXP 48
11593: PUSH
11594: LD_STRING Belkov
11596: PPUSH
11597: LD_INT 0
11599: PPUSH
11600: CALL 7751 0 2
11604: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
11605: LD_EXP 44
11609: PPUSH
11610: LD_INT 17
11612: PPUSH
11613: LD_INT 0
11615: PPUSH
11616: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11620: LD_EXP 45
11624: PPUSH
11625: LD_INT 17
11627: PPUSH
11628: LD_INT 0
11630: PPUSH
11631: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11635: LD_EXP 46
11639: PPUSH
11640: LD_INT 17
11642: PPUSH
11643: LD_INT 0
11645: PPUSH
11646: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11650: LD_EXP 47
11654: PPUSH
11655: LD_INT 17
11657: PPUSH
11658: LD_INT 0
11660: PPUSH
11661: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11665: LD_EXP 48
11669: PPUSH
11670: LD_INT 17
11672: PPUSH
11673: LD_INT 0
11675: PPUSH
11676: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11680: LD_ADDR_EXP 53
11684: PUSH
11685: LD_EXP 44
11689: PUSH
11690: LD_EXP 45
11694: PUSH
11695: LD_EXP 47
11699: PUSH
11700: LD_EXP 48
11704: PUSH
11705: LD_EXP 46
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: ST_TO_ADDR
// if Difficulty < 3 then
11717: LD_OWVAR 67
11721: PUSH
11722: LD_INT 3
11724: LESS
11725: IFFALSE 11774
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11727: LD_ADDR_EXP 49
11731: PUSH
11732: LD_STRING Jaunzeme
11734: PPUSH
11735: LD_INT 0
11737: PPUSH
11738: CALL 7751 0 2
11742: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
11743: LD_EXP 49
11747: PPUSH
11748: LD_INT 17
11750: PPUSH
11751: LD_INT 0
11753: PPUSH
11754: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11758: LD_ADDR_EXP 53
11762: PUSH
11763: LD_EXP 53
11767: PUSH
11768: LD_EXP 49
11772: ADD
11773: ST_TO_ADDR
// end ; end ;
11774: LD_VAR 0 1
11778: RET
// function PrepareJelena ; begin
11779: LD_INT 0
11781: PPUSH
// uc_side = 8 ;
11782: LD_ADDR_OWVAR 20
11786: PUSH
11787: LD_INT 8
11789: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11790: LD_ADDR_EXP 50
11794: PUSH
11795: LD_STRING Kirilenkova
11797: PPUSH
11798: LD_INT 0
11800: PPUSH
11801: CALL 7751 0 2
11805: ST_TO_ADDR
// end ;
11806: LD_VAR 0 1
11810: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11811: LD_INT 0
11813: PPUSH
11814: PPUSH
11815: PPUSH
11816: PPUSH
// uc_side = 8 ;
11817: LD_ADDR_OWVAR 20
11821: PUSH
11822: LD_INT 8
11824: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11825: LD_ADDR_EXP 51
11829: PUSH
11830: LD_STRING Gnyevko
11832: PPUSH
11833: LD_INT 0
11835: PPUSH
11836: CALL 7751 0 2
11840: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11841: LD_ADDR_VAR 0 4
11845: PUSH
11846: LD_EXP 35
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_EXP 35
11858: PPUSH
11859: CALL_OW 12
11863: ARRAY
11864: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11865: LD_EXP 51
11869: PPUSH
11870: LD_VAR 0 4
11874: PUSH
11875: LD_INT 1
11877: ARRAY
11878: PPUSH
11879: LD_VAR 0 4
11883: PUSH
11884: LD_INT 2
11886: ARRAY
11887: PPUSH
11888: LD_INT 0
11890: PPUSH
11891: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11895: LD_EXP 51
11899: PPUSH
11900: LD_INT 500
11902: PPUSH
11903: CALL_OW 234
// ComHold ( Gnyevko ) ;
11907: LD_EXP 51
11911: PPUSH
11912: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
11916: LD_ADDR_VAR 0 3
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_EXP 24
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PUSH
11935: LD_INT 3
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: PUSH
11949: LD_OWVAR 67
11953: ARRAY
11954: MINUS
11955: PUSH
11956: FOR_TO
11957: IFFALSE 12087
// begin uc_side = 0 ;
11959: LD_ADDR_OWVAR 20
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// uc_nation = nation_nature ;
11967: LD_ADDR_OWVAR 21
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// hc_class = class_apeman ;
11975: LD_ADDR_OWVAR 28
11979: PUSH
11980: LD_INT 12
11982: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11983: LD_ADDR_OWVAR 31
11987: PUSH
11988: LD_EXP 25
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PUSH
11997: LD_EXP 25
12001: PUSH
12002: LD_INT 2
12004: ARRAY
12005: PUSH
12006: LD_EXP 25
12010: PUSH
12011: LD_INT 3
12013: ARRAY
12014: PUSH
12015: LD_EXP 25
12019: PUSH
12020: LD_INT 4
12022: ARRAY
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12030: LD_ADDR_OWVAR 35
12034: PUSH
12035: LD_EXP 31
12039: ST_TO_ADDR
// un = CreateHuman ;
12040: LD_ADDR_VAR 0 2
12044: PUSH
12045: CALL_OW 44
12049: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12050: LD_VAR 0 2
12054: PPUSH
12055: LD_EXP 51
12059: PPUSH
12060: CALL_OW 250
12064: PPUSH
12065: LD_EXP 51
12069: PPUSH
12070: CALL_OW 251
12074: PPUSH
12075: LD_INT 8
12077: PPUSH
12078: LD_INT 0
12080: PPUSH
12081: CALL_OW 50
// end ;
12085: GO 11956
12087: POP
12088: POP
// end ; end_of_file
12089: LD_VAR 0 1
12093: RET
// export function PrepareNature ; var i , un ; begin
12094: LD_INT 0
12096: PPUSH
12097: PPUSH
12098: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12099: LD_ADDR_VAR 0 2
12103: PUSH
12104: DOUBLE
12105: LD_INT 1
12107: DEC
12108: ST_TO_ADDR
12109: LD_EXP 24
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PUSH
12118: FOR_TO
12119: IFFALSE 12229
// begin uc_side = 0 ;
12121: LD_ADDR_OWVAR 20
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// uc_nation = nation_nature ;
12129: LD_ADDR_OWVAR 21
12133: PUSH
12134: LD_INT 0
12136: ST_TO_ADDR
// hc_class = class_apeman ;
12137: LD_ADDR_OWVAR 28
12141: PUSH
12142: LD_INT 12
12144: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12145: LD_ADDR_OWVAR 31
12149: PUSH
12150: LD_EXP 25
12154: PUSH
12155: LD_INT 1
12157: ARRAY
12158: PUSH
12159: LD_EXP 25
12163: PUSH
12164: LD_INT 2
12166: ARRAY
12167: PUSH
12168: LD_EXP 25
12172: PUSH
12173: LD_INT 3
12175: ARRAY
12176: PUSH
12177: LD_EXP 25
12181: PUSH
12182: LD_INT 4
12184: ARRAY
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12192: LD_ADDR_OWVAR 35
12196: PUSH
12197: LD_EXP 31
12201: ST_TO_ADDR
// un = CreateHuman ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: CALL_OW 44
12211: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 16
12219: PPUSH
12220: LD_INT 0
12222: PPUSH
12223: CALL_OW 49
// end ;
12227: GO 12118
12229: POP
12230: POP
// for i := 1 to animalsAmount [ 2 ] do
12231: LD_ADDR_VAR 0 2
12235: PUSH
12236: DOUBLE
12237: LD_INT 1
12239: DEC
12240: ST_TO_ADDR
12241: LD_EXP 24
12245: PUSH
12246: LD_INT 2
12248: ARRAY
12249: PUSH
12250: FOR_TO
12251: IFFALSE 12361
// begin uc_side = 0 ;
12253: LD_ADDR_OWVAR 20
12257: PUSH
12258: LD_INT 0
12260: ST_TO_ADDR
// uc_nation = nation_nature ;
12261: LD_ADDR_OWVAR 21
12265: PUSH
12266: LD_INT 0
12268: ST_TO_ADDR
// hc_class = class_phororhacos ;
12269: LD_ADDR_OWVAR 28
12273: PUSH
12274: LD_INT 18
12276: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12277: LD_ADDR_OWVAR 31
12281: PUSH
12282: LD_EXP 25
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PUSH
12291: LD_EXP 25
12295: PUSH
12296: LD_INT 2
12298: ARRAY
12299: PUSH
12300: LD_EXP 25
12304: PUSH
12305: LD_INT 3
12307: ARRAY
12308: PUSH
12309: LD_EXP 25
12313: PUSH
12314: LD_INT 4
12316: ARRAY
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12324: LD_ADDR_OWVAR 35
12328: PUSH
12329: LD_EXP 26
12333: ST_TO_ADDR
// un = CreateHuman ;
12334: LD_ADDR_VAR 0 3
12338: PUSH
12339: CALL_OW 44
12343: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 15
12351: PPUSH
12352: LD_INT 0
12354: PPUSH
12355: CALL_OW 49
// end ;
12359: GO 12250
12361: POP
12362: POP
// for i := 1 to animalsAmount [ 3 ] do
12363: LD_ADDR_VAR 0 2
12367: PUSH
12368: DOUBLE
12369: LD_INT 1
12371: DEC
12372: ST_TO_ADDR
12373: LD_EXP 24
12377: PUSH
12378: LD_INT 3
12380: ARRAY
12381: PUSH
12382: FOR_TO
12383: IFFALSE 12493
// begin uc_side = 0 ;
12385: LD_ADDR_OWVAR 20
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// uc_nation = nation_nature ;
12393: LD_ADDR_OWVAR 21
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// hc_class = class_tiger ;
12401: LD_ADDR_OWVAR 28
12405: PUSH
12406: LD_INT 14
12408: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12409: LD_ADDR_OWVAR 31
12413: PUSH
12414: LD_EXP 25
12418: PUSH
12419: LD_INT 1
12421: ARRAY
12422: PUSH
12423: LD_EXP 25
12427: PUSH
12428: LD_INT 2
12430: ARRAY
12431: PUSH
12432: LD_EXP 25
12436: PUSH
12437: LD_INT 3
12439: ARRAY
12440: PUSH
12441: LD_EXP 25
12445: PUSH
12446: LD_INT 4
12448: ARRAY
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12456: LD_ADDR_OWVAR 35
12460: PUSH
12461: LD_EXP 26
12465: ST_TO_ADDR
// un = CreateHuman ;
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: CALL_OW 44
12475: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12476: LD_VAR 0 3
12480: PPUSH
12481: LD_INT 15
12483: PPUSH
12484: LD_INT 0
12486: PPUSH
12487: CALL_OW 49
// end ;
12491: GO 12382
12493: POP
12494: POP
// for i := 1 to animalsAmount [ 4 ] do
12495: LD_ADDR_VAR 0 2
12499: PUSH
12500: DOUBLE
12501: LD_INT 1
12503: DEC
12504: ST_TO_ADDR
12505: LD_EXP 24
12509: PUSH
12510: LD_INT 4
12512: ARRAY
12513: PUSH
12514: FOR_TO
12515: IFFALSE 12625
// begin uc_side = 0 ;
12517: LD_ADDR_OWVAR 20
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// uc_nation = nation_nature ;
12525: LD_ADDR_OWVAR 21
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// hc_class = 21 ;
12533: LD_ADDR_OWVAR 28
12537: PUSH
12538: LD_INT 21
12540: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12541: LD_ADDR_OWVAR 31
12545: PUSH
12546: LD_EXP 25
12550: PUSH
12551: LD_INT 1
12553: ARRAY
12554: PUSH
12555: LD_EXP 25
12559: PUSH
12560: LD_INT 2
12562: ARRAY
12563: PUSH
12564: LD_EXP 25
12568: PUSH
12569: LD_INT 3
12571: ARRAY
12572: PUSH
12573: LD_EXP 25
12577: PUSH
12578: LD_INT 4
12580: ARRAY
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12588: LD_ADDR_OWVAR 35
12592: PUSH
12593: LD_EXP 26
12597: ST_TO_ADDR
// un = CreateHuman ;
12598: LD_ADDR_VAR 0 3
12602: PUSH
12603: CALL_OW 44
12607: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12608: LD_VAR 0 3
12612: PPUSH
12613: LD_INT 15
12615: PPUSH
12616: LD_INT 0
12618: PPUSH
12619: CALL_OW 49
// end ;
12623: GO 12514
12625: POP
12626: POP
// end ; end_of_file
12627: LD_VAR 0 1
12631: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12632: LD_VAR 0 1
12636: PUSH
12637: LD_EXP 43
12641: EQUAL
12642: PUSH
12643: LD_EXP 50
12647: PPUSH
12648: CALL_OW 255
12652: PUSH
12653: LD_INT 3
12655: EQUAL
12656: NOT
12657: AND
12658: PUSH
12659: LD_EXP 50
12663: PPUSH
12664: CALL_OW 302
12668: NOT
12669: AND
12670: IFFALSE 12676
// BurlakDying ;
12672: CALL 10224 0 0
// if unit = Gladstone then
12676: LD_VAR 0 1
12680: PUSH
12681: LD_EXP 41
12685: EQUAL
12686: IFFALSE 12696
// gladstoneStatus = 0 ;
12688: LD_ADDR_EXP 1
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// if unit = Johanna then
12696: LD_VAR 0 1
12700: PUSH
12701: LD_EXP 40
12705: EQUAL
12706: IFFALSE 12716
// johannaStatus = 0 ;
12708: LD_ADDR_EXP 2
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// end ;
12716: PPOPN 1
12718: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12719: LD_VAR 0 1
12723: PUSH
12724: LD_EXP 43
12728: EQUAL
12729: IFFALSE 12735
// BurlakDying ;
12731: CALL 10224 0 0
// if GetSide ( unit ) = 3 then
12735: LD_VAR 0 1
12739: PPUSH
12740: CALL_OW 255
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 12764
// lostComradesCounter = lostComradesCounter + 1 ;
12750: LD_ADDR_EXP 22
12754: PUSH
12755: LD_EXP 22
12759: PUSH
12760: LD_INT 1
12762: PLUS
12763: ST_TO_ADDR
// if unit in kirovSolds then
12764: LD_VAR 0 1
12768: PUSH
12769: LD_EXP 53
12773: IN
12774: IFFALSE 12792
// kirovSolds = kirovSolds diff unit ;
12776: LD_ADDR_EXP 53
12780: PUSH
12781: LD_EXP 53
12785: PUSH
12786: LD_VAR 0 1
12790: DIFF
12791: ST_TO_ADDR
// end ;
12792: PPOPN 1
12794: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12795: LD_VAR 0 1
12799: PUSH
12800: LD_INT 3
12802: EQUAL
12803: PUSH
12804: LD_VAR 0 2
12808: PUSH
12809: LD_INT 1
12811: EQUAL
12812: AND
12813: PUSH
12814: LD_VAR 0 1
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: PUSH
12823: LD_VAR 0 2
12827: PUSH
12828: LD_INT 3
12830: EQUAL
12831: AND
12832: PUSH
12833: LD_EXP 16
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: AND
12842: OR
12843: IFFALSE 12849
// Dial_SecondAttack ;
12845: CALL 5804 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12849: LD_VAR 0 1
12853: PUSH
12854: LD_INT 3
12856: EQUAL
12857: PUSH
12858: LD_VAR 0 2
12862: PUSH
12863: LD_INT 6
12865: EQUAL
12866: AND
12867: PUSH
12868: LD_EXP 17
12872: NOT
12873: AND
12874: IFFALSE 12880
// Dialogue_AttackComrade ;
12876: CALL 3999 0 0
// end ; end_of_file
12880: PPOPN 2
12882: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
// if not missionNumber then
12887: LD_VAR 0 2
12891: NOT
12892: IFFALSE 12896
// exit ;
12894: GO 13026
// achiv := false ;
12896: LD_ADDR_VAR 0 7
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// case campaignNumber of 1 :
12904: LD_VAR 0 1
12908: PUSH
12909: LD_INT 1
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12928
12917: POP
// achiv := ACH_GOTA ; 2 :
12918: LD_ADDR_VAR 0 7
12922: PUSH
12923: LD_STRING ACH_GOTA
12925: ST_TO_ADDR
12926: GO 12978
12928: LD_INT 2
12930: DOUBLE
12931: EQUAL
12932: IFTRUE 12936
12934: GO 12939
12936: POP
// ; 3 :
12937: GO 12978
12939: LD_INT 3
12941: DOUBLE
12942: EQUAL
12943: IFTRUE 12947
12945: GO 12958
12947: POP
// achiv := ACH_MOTSU ; 4 :
12948: LD_ADDR_VAR 0 7
12952: PUSH
12953: LD_STRING ACH_MOTSU
12955: ST_TO_ADDR
12956: GO 12978
12958: LD_INT 4
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 12977
12966: POP
// achiv := ACH_LOP ; end ;
12967: LD_ADDR_VAR 0 7
12971: PUSH
12972: LD_STRING ACH_LOP
12974: ST_TO_ADDR
12975: GO 12978
12977: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
12978: LD_OWVAR 67
12982: PUSH
12983: LD_INT 3
12985: EQUAL
12986: PUSH
12987: LD_VAR 0 7
12991: AND
12992: PUSH
12993: LD_VAR 0 3
12997: AND
12998: PUSH
12999: LD_VAR 0 4
13003: AND
13004: PUSH
13005: LD_VAR 0 5
13009: AND
13010: IFFALSE 13026
// SetAchievementEX ( achiv , missionNumber ) ;
13012: LD_VAR 0 7
13016: PPUSH
13017: LD_VAR 0 2
13021: PPUSH
13022: CALL_OW 564
// end ;
13026: LD_VAR 0 6
13030: RET
// export function SA_BehemothConstructed ; begin
13031: LD_INT 0
13033: PPUSH
// SetAchievement ( ACH_SMC ) ;
13034: LD_STRING ACH_SMC
13036: PPUSH
13037: CALL_OW 543
// end ;
13041: LD_VAR 0 1
13045: RET
