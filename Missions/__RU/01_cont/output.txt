// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12608 0 0
// PrepareAmericans ;
  28: CALL 12181 0 0
// CreateNature ;
  32: CALL 13312 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8472 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8472 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10352 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10352 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10352 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5686
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5668
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5658
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5686
// end else
5656: GO 5666
// belkovWaitForGorky = true ;
5658: LD_ADDR_EXP 16
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
5666: GO 5424
5668: POP
5669: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5670: LD_EXP 51
5674: PPUSH
5675: LD_STRING D7b-Bel-3
5677: PPUSH
5678: CALL_OW 88
// InGameOff ;
5682: CALL_OW 9
// end ;
5686: PPOPN 3
5688: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5689: LD_EXP 16
5693: PUSH
5694: LD_EXP 18
5698: NOT
5699: AND
5700: IFFALSE 6034
5702: GO 5704
5704: DISABLE
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// begin enable ;
5709: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5710: LD_ADDR_VAR 0 2
5714: PUSH
5715: LD_INT 22
5717: PUSH
5718: LD_INT 6
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 21
5727: PUSH
5728: LD_INT 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PPUSH
5739: CALL_OW 69
5743: ST_TO_ADDR
// for unit in ruSolds do
5744: LD_ADDR_VAR 0 1
5748: PUSH
5749: LD_VAR 0 2
5753: PUSH
5754: FOR_IN
5755: IFFALSE 6032
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5757: LD_EXP 46
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 296
5771: PUSH
5772: LD_INT 7
5774: LESS
5775: IFFALSE 6030
// begin if not IsInUnit ( Johanna ) then
5777: LD_EXP 43
5781: PPUSH
5782: CALL_OW 310
5786: NOT
5787: IFFALSE 5801
// ComEnterUnit ( Johanna , am_bun ) ;
5789: LD_EXP 43
5793: PPUSH
5794: LD_INT 23
5796: PPUSH
5797: CALL_OW 120
// belkovWaitForGorky = false ;
5801: LD_ADDR_EXP 16
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// InGameOn ;
5809: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5813: LD_EXP 51
5817: PUSH
5818: LD_EXP 48
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PPUSH
5827: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5831: LD_EXP 46
5835: PPUSH
5836: LD_INT 88
5838: PPUSH
5839: LD_INT 66
5841: PPUSH
5842: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5846: LD_EXP 51
5850: PPUSH
5851: LD_EXP 46
5855: PPUSH
5856: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5860: LD_EXP 46
5864: PPUSH
5865: LD_INT 90
5867: PPUSH
5868: LD_INT 66
5870: PPUSH
5871: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5875: LD_EXP 51
5879: PPUSH
5880: LD_STRING D7b-Bel-3a
5882: PPUSH
5883: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5887: LD_EXP 46
5891: PPUSH
5892: LD_STRING D7b-Bur-3
5894: PPUSH
5895: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5899: LD_EXP 51
5903: PPUSH
5904: LD_STRING D7b-Bel-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5911: LD_EXP 46
5915: PPUSH
5916: LD_STRING D7b-Bur-4
5918: PPUSH
5919: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5923: LD_EXP 51
5927: PPUSH
5928: LD_STRING D7b-Bel-5
5930: PPUSH
5931: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5935: LD_EXP 49
5939: PPUSH
5940: LD_STRING D7b-FSol1-5
5942: PPUSH
5943: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5947: LD_EXP 51
5951: PPUSH
5952: LD_STRING D7b-Bel-6
5954: PPUSH
5955: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5959: LD_EXP 46
5963: PPUSH
5964: LD_STRING D7b-Bur-6
5966: PPUSH
5967: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5971: LD_EXP 48
5975: PPUSH
5976: LD_STRING D7a-RSol1-6
5978: PPUSH
5979: CALL_OW 88
// InGameOff ;
5983: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5987: LD_VAR 0 2
5991: PPUSH
5992: LD_INT 3
5994: PPUSH
5995: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5999: LD_EXP 51
6003: PPUSH
6004: LD_INT 3
6006: PPUSH
6007: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
6011: LD_STRING M3
6013: PPUSH
6014: CALL_OW 337
// secondAttack = true ;
6018: LD_ADDR_EXP 17
6022: PUSH
6023: LD_INT 1
6025: ST_TO_ADDR
// exit ;
6026: POP
6027: POP
6028: GO 6034
// end ;
6030: GO 5754
6032: POP
6033: POP
// end ;
6034: PPOPN 2
6036: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6041: LD_EXP 43
6045: PPUSH
6046: LD_STRING D8-FSol1-1
6048: PPUSH
6049: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6053: LD_EXP 44
6057: PPUSH
6058: LD_STRING D8-Glad-1
6060: PPUSH
6061: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6065: LD_EXP 46
6069: PPUSH
6070: LD_STRING D8-Bur-1
6072: PPUSH
6073: CALL_OW 88
// secondAttack = false ;
6077: LD_ADDR_EXP 17
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6085: LD_ADDR_VAR 0 2
6089: PUSH
6090: LD_INT 22
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 21
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: PPUSH
6119: LD_INT 23
6121: PPUSH
6122: CALL_OW 74
6126: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6127: LD_EXP 45
6131: PPUSH
6132: CALL_OW 122
// wait ( 0 0$1 ) ;
6136: LD_INT 35
6138: PPUSH
6139: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_VAR 0 2
6152: PPUSH
6153: CALL_OW 175
// end ;
6157: LD_VAR 0 1
6161: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6162: LD_INT 23
6164: PPUSH
6165: CALL_OW 256
6169: PUSH
6170: LD_INT 350
6172: LESS
6173: PUSH
6174: LD_INT 23
6176: PPUSH
6177: CALL_OW 256
6181: PUSH
6182: LD_INT 250
6184: GREATER
6185: AND
6186: PUSH
6187: LD_INT 20
6189: PPUSH
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: PUSH
6219: LD_INT 0
6221: GREATER
6222: AND
6223: PUSH
6224: LD_EXP 24
6228: NOT
6229: AND
6230: IFFALSE 6247
6232: GO 6234
6234: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6235: LD_EXP 43
6239: PPUSH
6240: LD_STRING D8-FSol1-2
6242: PPUSH
6243: CALL_OW 88
6247: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6248: LD_INT 23
6250: PPUSH
6251: CALL_OW 303
6255: PUSH
6256: LD_INT 22
6258: PPUSH
6259: CALL_OW 302
6263: AND
6264: PUSH
6265: LD_EXP 24
6269: NOT
6270: AND
6271: IFFALSE 6341
6273: GO 6275
6275: DISABLE
// begin amRetreat = true ;
6276: LD_ADDR_EXP 24
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6284: LD_EXP 43
6288: PPUSH
6289: LD_STRING D8-FSol1-2a
6291: PPUSH
6292: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6296: LD_EXP 44
6300: PUSH
6301: LD_EXP 43
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PPUSH
6310: LD_INT 21
6312: PPUSH
6313: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6317: LD_EXP 44
6321: PPUSH
6322: LD_STRING D8-Glad-2
6324: PPUSH
6325: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6329: LD_EXP 46
6333: PPUSH
6334: LD_STRING D8-Bur-2
6336: PPUSH
6337: CALL_OW 88
// end ;
6341: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6342: LD_INT 22
6344: PPUSH
6345: CALL_OW 303
6349: PUSH
6350: LD_INT 23
6352: PPUSH
6353: CALL_OW 302
6357: AND
6358: PUSH
6359: LD_EXP 24
6363: NOT
6364: AND
6365: IFFALSE 6435
6367: GO 6369
6369: DISABLE
// begin amRetreat = true ;
6370: LD_ADDR_EXP 24
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6378: LD_EXP 43
6382: PPUSH
6383: LD_STRING D8-FSol1-2a
6385: PPUSH
6386: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6390: LD_EXP 44
6394: PUSH
6395: LD_EXP 43
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: LD_INT 21
6406: PPUSH
6407: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6411: LD_EXP 44
6415: PPUSH
6416: LD_STRING D8-Glad-2
6418: PPUSH
6419: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6423: LD_EXP 46
6427: PPUSH
6428: LD_STRING D8-Bur-2
6430: PPUSH
6431: CALL_OW 88
// end ;
6435: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6436: LD_INT 23
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 500
6446: LESS
6447: PUSH
6448: LD_OWVAR 67
6452: PUSH
6453: LD_INT 3
6455: EQUAL
6456: AND
6457: PUSH
6458: LD_EXP 24
6462: NOT
6463: AND
6464: IFFALSE 6534
6466: GO 6468
6468: DISABLE
// begin amRetreat = true ;
6469: LD_ADDR_EXP 24
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6477: LD_EXP 43
6481: PPUSH
6482: LD_STRING D8-FSol1-2a
6484: PPUSH
6485: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6489: LD_EXP 44
6493: PUSH
6494: LD_EXP 43
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PPUSH
6503: LD_INT 21
6505: PPUSH
6506: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6510: LD_EXP 44
6514: PPUSH
6515: LD_STRING D8-Glad-2
6517: PPUSH
6518: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6522: LD_EXP 46
6526: PPUSH
6527: LD_STRING D8-Bur-2
6529: PPUSH
6530: CALL_OW 88
// end ;
6534: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6535: LD_INT 22
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 21
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 50
6557: PUSH
6558: EMPTY
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 69
6570: PUSH
6571: LD_INT 0
6573: GREATER
6574: IFFALSE 6702
6576: GO 6578
6578: DISABLE
6579: LD_INT 0
6581: PPUSH
// begin enable ;
6582: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: LD_INT 21
6590: PPUSH
6591: LD_INT 22
6593: PUSH
6594: LD_INT 1
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 21
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: PUSH
6620: FOR_IN
6621: IFFALSE 6700
// begin if unit = Gladstone then
6623: LD_VAR 0 1
6627: PUSH
6628: LD_EXP 44
6632: EQUAL
6633: IFFALSE 6663
// begin gladstoneEscape = true ;
6635: LD_ADDR_EXP 19
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6643: LD_EXP 44
6647: PPUSH
6648: LD_EXP 30
6652: PUSH
6653: LD_STRING Gladstone
6655: STR
6656: PPUSH
6657: CALL_OW 38
// end else
6661: GO 6689
// begin JohannaEscape = true ;
6663: LD_ADDR_EXP 20
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6671: LD_EXP 43
6675: PPUSH
6676: LD_EXP 30
6680: PUSH
6681: LD_STRING Johanna
6683: STR
6684: PPUSH
6685: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 64
// end ;
6698: GO 6620
6700: POP
6701: POP
// end ;
6702: PPOPN 1
6704: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6705: LD_EXP 44
6709: PPUSH
6710: CALL_OW 301
6714: PUSH
6715: LD_EXP 43
6719: PPUSH
6720: CALL_OW 301
6724: AND
6725: IFFALSE 6742
6727: GO 6729
6729: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6730: LD_EXP 46
6734: PPUSH
6735: LD_STRING D9-Bur-1
6737: PPUSH
6738: CALL_OW 88
6742: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6743: LD_EXP 43
6747: PPUSH
6748: CALL_OW 301
6752: PUSH
6753: LD_EXP 19
6757: AND
6758: PUSH
6759: LD_EXP 20
6763: NOT
6764: AND
6765: IFFALSE 6782
6767: GO 6769
6769: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6770: LD_EXP 46
6774: PPUSH
6775: LD_STRING D9-Bur-1a
6777: PPUSH
6778: CALL_OW 88
6782: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6783: LD_EXP 44
6787: PPUSH
6788: CALL_OW 301
6792: PUSH
6793: LD_EXP 19
6797: NOT
6798: AND
6799: PUSH
6800: LD_EXP 20
6804: AND
6805: IFFALSE 6822
6807: GO 6809
6809: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6810: LD_EXP 46
6814: PPUSH
6815: LD_STRING D9-Bur-1b
6817: PPUSH
6818: CALL_OW 88
6822: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6823: LD_EXP 19
6827: PUSH
6828: LD_EXP 20
6832: AND
6833: IFFALSE 6850
6835: GO 6837
6837: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6838: LD_EXP 46
6842: PPUSH
6843: LD_STRING D9-Bur-1c
6845: PPUSH
6846: CALL_OW 88
6850: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6851: LD_INT 22
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 50
6873: PUSH
6874: EMPTY
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: PUSH
6887: LD_INT 0
6889: EQUAL
6890: IFFALSE 7138
6892: GO 6894
6894: DISABLE
6895: LD_INT 0
6897: PPUSH
6898: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6899: LD_ADDR_VAR 0 1
6903: PUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 3
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 21
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 50
6926: PUSH
6927: EMPTY
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 69
6939: PUSH
6940: LD_EXP 46
6944: PUSH
6945: LD_EXP 54
6949: PUSH
6950: LD_EXP 51
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: DIFF
6960: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6961: LD_ADDR_VAR 0 2
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: LD_INT 26
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 72
6985: ST_TO_ADDR
// DialogueOn ;
6986: CALL_OW 6
// if IsOK ( Belkov ) then
6990: LD_EXP 51
6994: PPUSH
6995: CALL_OW 302
6999: IFFALSE 7013
// Say ( Belkov , D10-Bel-1 ) ;
7001: LD_EXP 51
7005: PPUSH
7006: LD_STRING D10-Bel-1
7008: PPUSH
7009: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_INT 0
7020: GREATER
7021: PUSH
7022: LD_VAR 0 2
7026: PUSH
7027: LD_INT 0
7029: GREATER
7030: PUSH
7031: LD_EXP 51
7035: PPUSH
7036: CALL_OW 302
7040: OR
7041: AND
7042: IFFALSE 7109
// begin Say ( Burlak , D10-Bur-1 ) ;
7044: LD_EXP 46
7048: PPUSH
7049: LD_STRING D10-Bur-1
7051: PPUSH
7052: CALL_OW 88
// if IsOK ( Belkov ) then
7056: LD_EXP 51
7060: PPUSH
7061: CALL_OW 302
7065: IFFALSE 7081
// Say ( Belkov , D10-Bel-1a ) else
7067: LD_EXP 51
7071: PPUSH
7072: LD_STRING D10-Bel-1a
7074: PPUSH
7075: CALL_OW 88
7079: GO 7097
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: ARRAY
7089: PPUSH
7090: LD_STRING D10-RSol1-1
7092: PPUSH
7093: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7097: LD_EXP 46
7101: PPUSH
7102: LD_STRING D10-Bur-2
7104: PPUSH
7105: CALL_OW 88
// end ; DialogueOff ;
7109: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7113: LD_STRING M4a
7115: PPUSH
7116: CALL_OW 337
// evacuationAvailable = true ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 424
// end ;
7138: PPOPN 2
7140: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7141: LD_EXP 22
7145: PUSH
7146: LD_EXP 25
7150: NOT
7151: AND
7152: IFFALSE 7762
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7160: LD_EXP 53
7164: PPUSH
7165: LD_INT 22
7167: PPUSH
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 49
// wait ( 0 0$3 ) ;
7175: LD_INT 105
7177: PPUSH
7178: CALL_OW 67
// jelenaSpawned = true ;
7182: LD_ADDR_EXP 25
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7190: LD_INT 22
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 21
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 50
7212: PUSH
7213: EMPTY
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PPUSH
7226: LD_EXP 53
7230: PPUSH
7231: CALL_OW 74
7235: PPUSH
7236: LD_EXP 53
7240: PPUSH
7241: CALL_OW 296
7245: PUSH
7246: LD_INT 9
7248: LESS
7249: IFFALSE 7253
// exit ;
7251: GO 7762
// DialogueOn ;
7253: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7257: LD_EXP 53
7261: PPUSH
7262: LD_STRING D11b-Kir-1
7264: PPUSH
7265: CALL_OW 94
// if IsOK ( Belkov ) then
7269: LD_EXP 51
7273: PPUSH
7274: CALL_OW 302
7278: IFFALSE 7306
// begin Say ( Belkov , D11b-Bel-1 ) ;
7280: LD_EXP 51
7284: PPUSH
7285: LD_STRING D11b-Bel-1
7287: PPUSH
7288: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7292: LD_EXP 51
7296: PPUSH
7297: LD_STRING D11b-Bel-1a
7299: PPUSH
7300: CALL_OW 94
// end else
7304: GO 7361
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7306: LD_ADDR_VAR 0 1
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 21
7323: PUSH
7324: LD_INT 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 50
7333: PUSH
7334: EMPTY
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D11b-RSol1-1
7349: PPUSH
7350: LD_STRING D11b-RFSol1-1
7352: PPUSH
7353: LD_INT 0
7355: PPUSH
7356: CALL 8139 0 4
7360: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7361: LD_INT 24
7363: PPUSH
7364: LD_INT 22
7366: PUSH
7367: LD_INT 0
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 12
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 70
7392: PUSH
7393: LD_INT 0
7395: GREATER
7396: IFFALSE 7412
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7398: LD_EXP 53
7402: PPUSH
7403: LD_STRING D11b1-Kir-1
7405: PPUSH
7406: CALL_OW 94
7410: GO 7424
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7412: LD_EXP 53
7416: PPUSH
7417: LD_STRING D11b2-Kir-1
7419: PPUSH
7420: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7424: LD_EXP 6
7428: PUSH
7429: LD_INT 24
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 25
7444: PUSH
7445: LD_INT 12
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: PUSH
7461: LD_INT 0
7463: GREATER
7464: AND
7465: IFFALSE 7600
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7467: LD_EXP 46
7471: PPUSH
7472: LD_STRING D11b1-Bur-1
7474: PPUSH
7475: CALL_OW 88
// if IsOk ( Belkov ) then
7479: LD_EXP 51
7483: PPUSH
7484: CALL_OW 302
7488: IFFALSE 7504
// Say ( Belkov , D11b2-Bel-1 ) else
7490: LD_EXP 51
7494: PPUSH
7495: LD_STRING D11b2-Bel-1
7497: PPUSH
7498: CALL_OW 88
7502: GO 7545
// begin if GetSex ( randomSold ) = sex_male then
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 258
7513: PUSH
7514: LD_INT 1
7516: EQUAL
7517: IFFALSE 7533
// Say ( randomSold , D11b1-RSol1-1 ) else
7519: LD_VAR 0 1
7523: PPUSH
7524: LD_STRING D11b1-RSol1-1
7526: PPUSH
7527: CALL_OW 88
7531: GO 7545
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_STRING D11b1-RFSol1-1
7540: PPUSH
7541: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7545: LD_INT 22
7547: PUSH
7548: LD_INT 1
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 21
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 50
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PPUSH
7581: LD_STRING D11b1-RSol1-1
7583: PPUSH
7584: LD_STRING D11b1-RFSol1-1
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: CALL 8139 0 4
// DialogueOff ;
7594: CALL_OW 7
// exit ;
7598: GO 7762
// end ; if spotWaterfall then
7600: LD_EXP 7
7604: IFFALSE 7690
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7606: LD_EXP 46
7610: PPUSH
7611: LD_STRING D11b1-Bur-1a
7613: PPUSH
7614: CALL_OW 88
// if IsOk ( Belkov ) then
7618: LD_EXP 51
7622: PPUSH
7623: CALL_OW 302
7627: IFFALSE 7643
// Say ( Belkov , D11b2-Bel-1 ) else
7629: LD_EXP 51
7633: PPUSH
7634: LD_STRING D11b2-Bel-1
7636: PPUSH
7637: CALL_OW 88
7641: GO 7684
// begin if GetSex ( randomSold ) = sex_male then
7643: LD_VAR 0 1
7647: PPUSH
7648: CALL_OW 258
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: IFFALSE 7672
// Say ( randomSold , D11b1-RSol1-1 ) else
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_STRING D11b1-RSol1-1
7665: PPUSH
7666: CALL_OW 88
7670: GO 7684
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: LD_STRING D11b1-RFSol1-1
7679: PPUSH
7680: CALL_OW 88
// end ; DialogueOff ;
7684: CALL_OW 7
// exit ;
7688: GO 7762
// end ; if IsOk ( Belkov ) then
7690: LD_EXP 51
7694: PPUSH
7695: CALL_OW 302
7699: IFFALSE 7715
// Say ( Belkov , D11b1-Bel-1 ) else
7701: LD_EXP 51
7705: PPUSH
7706: LD_STRING D11b1-Bel-1
7708: PPUSH
7709: CALL_OW 88
7713: GO 7756
// begin if GetSex ( randomSold ) = sex_male then
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 258
7724: PUSH
7725: LD_INT 1
7727: EQUAL
7728: IFFALSE 7744
// Say ( randomSold , D11b1-RSol1-1 ) else
7730: LD_VAR 0 1
7734: PPUSH
7735: LD_STRING D11b1-RSol1-1
7737: PPUSH
7738: CALL_OW 88
7742: GO 7756
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7744: LD_VAR 0 1
7748: PPUSH
7749: LD_STRING D11b1-RFSol1-1
7751: PPUSH
7752: CALL_OW 88
// end ; DialogueOff ;
7756: CALL_OW 7
// exit ;
7760: GO 7762
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7765: LD_INT 3
7767: PPUSH
7768: LD_EXP 53
7772: PPUSH
7773: CALL_OW 292
7777: PUSH
7778: LD_EXP 25
7782: AND
7783: IFFALSE 8019
7785: GO 7787
7787: DISABLE
7788: LD_INT 0
7790: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7791: LD_EXP 53
7795: PPUSH
7796: LD_INT 3
7798: PPUSH
7799: CALL_OW 235
// jelenaSaved = true ;
7803: LD_ADDR_EXP 21
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7811: LD_EXP 53
7815: PPUSH
7816: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7820: LD_ADDR_VAR 0 1
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 3
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 50
7847: PUSH
7848: EMPTY
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: PUSH
7861: LD_EXP 53
7865: DIFF
7866: PPUSH
7867: LD_EXP 53
7871: PPUSH
7872: CALL_OW 74
7876: ST_TO_ADDR
// DialogueOn ;
7877: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7881: LD_EXP 53
7885: PPUSH
7886: LD_STRING D11a-Kir-1
7888: PPUSH
7889: CALL_OW 88
// if nearUnit = Belkov then
7893: LD_VAR 0 1
7897: PUSH
7898: LD_EXP 51
7902: EQUAL
7903: IFFALSE 7943
// begin Say ( Belkov , D11a-Bel-1 ) ;
7905: LD_EXP 51
7909: PPUSH
7910: LD_STRING D11a-Bel-1
7912: PPUSH
7913: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7917: LD_EXP 53
7921: PPUSH
7922: LD_STRING D11a-Kir-2
7924: PPUSH
7925: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7929: LD_EXP 51
7933: PPUSH
7934: LD_STRING D11a-Bel-2
7936: PPUSH
7937: CALL_OW 88
// end else
7941: GO 7984
// begin if GetSex ( nearUnit ) = sex_male then
7943: LD_VAR 0 1
7947: PPUSH
7948: CALL_OW 258
7952: PUSH
7953: LD_INT 1
7955: EQUAL
7956: IFFALSE 7972
// Say ( nearUnit , D11a-RSol1-2 ) else
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_STRING D11a-RSol1-2
7965: PPUSH
7966: CALL_OW 88
7970: GO 7984
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_STRING D11a-RFSol1-2
7979: PPUSH
7980: CALL_OW 88
// end ; DialogueOff ;
7984: CALL_OW 7
// wait ( 0 0$5 ) ;
7988: LD_INT 175
7990: PPUSH
7991: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7995: LD_EXP 53
7999: PPUSH
8000: LD_STRING D11c-Kir-1
8002: PPUSH
8003: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8007: LD_EXP 46
8011: PPUSH
8012: LD_STRING D11c-Bur-1
8014: PPUSH
8015: CALL_OW 88
// end ;
8019: PPOPN 1
8021: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8022: LD_EXP 22
8026: PUSH
8027: LD_INT 1
8029: PPUSH
8030: LD_INT 22
8032: PUSH
8033: LD_INT 3
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PPUSH
8054: CALL_OW 70
8058: PUSH
8059: LD_INT 0
8061: GREATER
8062: AND
8063: IFFALSE 8075
8065: GO 8067
8067: DISABLE
// begin Query ( QExit1 ) ;
8068: LD_STRING QExit1
8070: PPUSH
8071: CALL_OW 97
// end ; end_of_file
8075: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// if exist_mode then
8080: LD_VAR 0 2
8084: IFFALSE 8109
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_EXP 31
8095: PUSH
8096: LD_VAR 0 1
8100: STR
8101: PPUSH
8102: CALL_OW 34
8106: ST_TO_ADDR
8107: GO 8124
// unit := NewCharacter ( ident ) ;
8109: LD_ADDR_VAR 0 4
8113: PUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 25
8123: ST_TO_ADDR
// result := unit ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_VAR 0 4
8133: ST_TO_ADDR
// end ;
8134: LD_VAR 0 3
8138: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8139: LD_INT 0
8141: PPUSH
8142: PPUSH
8143: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8144: LD_ADDR_VAR 0 1
8148: PUSH
8149: LD_VAR 0 1
8153: PUSH
8154: LD_EXP 46
8158: PUSH
8159: LD_EXP 54
8163: PUSH
8164: LD_EXP 51
8168: PUSH
8169: LD_EXP 53
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: DIFF
8180: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8181: LD_ADDR_VAR 0 7
8185: PUSH
8186: LD_VAR 0 1
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 12
8203: ARRAY
8204: ST_TO_ADDR
// if radio then
8205: LD_VAR 0 4
8209: IFFALSE 8258
// begin if GetSex ( speaker ) = sex_male then
8211: LD_VAR 0 7
8215: PPUSH
8216: CALL_OW 258
8220: PUSH
8221: LD_INT 1
8223: EQUAL
8224: IFFALSE 8242
// SayRadio ( speaker , dialogMID ) else
8226: LD_VAR 0 7
8230: PPUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 94
8240: GO 8256
// SayRadio ( speaker , dialogFID ) ;
8242: LD_VAR 0 7
8246: PPUSH
8247: LD_VAR 0 3
8251: PPUSH
8252: CALL_OW 94
// end else
8256: GO 8303
// begin if GetSex ( speaker ) = sex_male then
8258: LD_VAR 0 7
8262: PPUSH
8263: CALL_OW 258
8267: PUSH
8268: LD_INT 1
8270: EQUAL
8271: IFFALSE 8289
// Say ( speaker , dialogMID ) else
8273: LD_VAR 0 7
8277: PPUSH
8278: LD_VAR 0 2
8282: PPUSH
8283: CALL_OW 88
8287: GO 8303
// Say ( speaker , dialogFID ) ;
8289: LD_VAR 0 7
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: CALL_OW 88
// end ; result := speaker ;
8303: LD_ADDR_VAR 0 5
8307: PUSH
8308: LD_VAR 0 7
8312: ST_TO_ADDR
// end ;
8313: LD_VAR 0 5
8317: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8318: LD_INT 0
8320: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 255
8330: PUSH
8331: LD_OWVAR 2
8335: EQUAL
8336: PUSH
8337: LD_VAR 0 1
8341: PPUSH
8342: CALL_OW 302
8346: AND
8347: IFFALSE 8369
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_EXP 30
8358: PUSH
8359: LD_VAR 0 2
8363: STR
8364: PPUSH
8365: CALL_OW 38
// end ;
8369: LD_VAR 0 3
8373: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
8378: PPUSH
// resultCharactersToSave = [ ] ;
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: EMPTY
8385: ST_TO_ADDR
// for unit in characters do
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_VAR 0 1
8395: PUSH
8396: FOR_IN
8397: IFFALSE 8445
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8399: LD_VAR 0 4
8403: PPUSH
8404: CALL_OW 255
8408: PUSH
8409: LD_OWVAR 2
8413: EQUAL
8414: PUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: CALL_OW 302
8424: AND
8425: IFFALSE 8443
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8427: LD_ADDR_VAR 0 5
8431: PUSH
8432: LD_VAR 0 5
8436: PUSH
8437: LD_VAR 0 4
8441: ADD
8442: ST_TO_ADDR
8443: GO 8396
8445: POP
8446: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_EXP 30
8456: PUSH
8457: LD_VAR 0 2
8461: STR
8462: PPUSH
8463: CALL_OW 38
// end ;
8467: LD_VAR 0 3
8471: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8472: LD_INT 0
8474: PPUSH
8475: PPUSH
8476: PPUSH
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 302
8495: NOT
8496: PUSH
8497: LD_VAR 0 4
8501: PUSH
8502: LD_INT 1
8504: EQUAL
8505: OR
8506: PUSH
8507: LD_VAR 0 2
8511: PPUSH
8512: LD_VAR 0 3
8516: PPUSH
8517: CALL_OW 488
8521: NOT
8522: OR
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_VAR 0 3
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_VAR 0 4
8548: GREATEREQUAL
8549: OR
8550: PUSH
8551: LD_VAR 0 5
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: LD_INT 0
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: IN
8566: NOT
8567: OR
8568: IFFALSE 8572
// exit ;
8570: GO 10129
// attempts = 0 ;
8572: LD_ADDR_VAR 0 17
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8580: LD_ADDR_VAR 0 7
8584: PUSH
8585: EMPTY
8586: ST_TO_ADDR
// list_coords = [ ] ;
8587: LD_ADDR_VAR 0 8
8591: PUSH
8592: EMPTY
8593: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8594: LD_ADDR_VAR 0 9
8598: PUSH
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 250
8618: PPUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 251
8628: PPUSH
8629: CALL 10134 0 4
8633: ST_TO_ADDR
// if attempts = 0 then
8634: LD_VAR 0 17
8638: PUSH
8639: LD_INT 0
8641: EQUAL
8642: IFFALSE 8750
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8644: LD_ADDR_VAR 0 10
8648: PUSH
8649: LD_VAR 0 9
8653: PUSH
8654: LD_VAR 0 9
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: PUSH
8663: LD_VAR 0 9
8667: PUSH
8668: LD_INT 1
8670: MINUS
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8677: LD_VAR 0 10
8681: PUSH
8682: LD_INT 2
8684: ARRAY
8685: PUSH
8686: LD_INT 6
8688: EQUAL
8689: IFFALSE 8712
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8691: LD_ADDR_VAR 0 10
8695: PUSH
8696: LD_VAR 0 10
8700: PPUSH
8701: LD_INT 2
8703: PPUSH
8704: LD_INT 0
8706: PPUSH
8707: CALL_OW 1
8711: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8712: LD_VAR 0 10
8716: PUSH
8717: LD_INT 3
8719: ARRAY
8720: PUSH
8721: LD_INT 1
8723: NEG
8724: EQUAL
8725: IFFALSE 8748
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8727: LD_ADDR_VAR 0 10
8731: PUSH
8732: LD_VAR 0 10
8736: PPUSH
8737: LD_INT 3
8739: PPUSH
8740: LD_INT 5
8742: PPUSH
8743: CALL_OW 1
8747: ST_TO_ADDR
// end else
8748: GO 8787
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8750: LD_ADDR_VAR 0 10
8754: PUSH
8755: LD_INT 0
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: LD_INT 5
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: LD_VAR 0 9
8785: DIFF
8786: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8787: LD_ADDR_VAR 0 14
8791: PUSH
8792: DOUBLE
8793: LD_INT 1
8795: DEC
8796: ST_TO_ADDR
8797: LD_VAR 0 10
8801: PUSH
8802: LD_INT 0
8804: PLUS
8805: PUSH
8806: FOR_TO
8807: IFFALSE 9129
// case dir_list [ c ] of 0 :
8809: LD_VAR 0 10
8813: PUSH
8814: LD_VAR 0 14
8818: ARRAY
8819: PUSH
8820: LD_INT 0
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8869
8828: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8829: LD_ADDR_VAR 0 8
8833: PUSH
8834: LD_VAR 0 8
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: LD_VAR 0 2
8846: PUSH
8847: LD_VAR 0 3
8851: PUSH
8852: LD_VAR 0 4
8856: MINUS
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 2
8866: ST_TO_ADDR
8867: GO 9127
8869: LD_INT 1
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8918
8877: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8878: LD_ADDR_VAR 0 8
8882: PUSH
8883: LD_VAR 0 8
8887: PPUSH
8888: LD_INT 1
8890: PPUSH
8891: LD_VAR 0 2
8895: PUSH
8896: LD_VAR 0 4
8900: PLUS
8901: PUSH
8902: LD_VAR 0 3
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PPUSH
8911: CALL_OW 2
8915: ST_TO_ADDR
8916: GO 9127
8918: LD_INT 2
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8973
8926: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8927: LD_ADDR_VAR 0 8
8931: PUSH
8932: LD_VAR 0 8
8936: PPUSH
8937: LD_INT 1
8939: PPUSH
8940: LD_VAR 0 2
8944: PUSH
8945: LD_VAR 0 4
8949: PLUS
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_VAR 0 4
8960: PLUS
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 2
8970: ST_TO_ADDR
8971: GO 9127
8973: LD_INT 3
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9022
8981: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8982: LD_ADDR_VAR 0 8
8986: PUSH
8987: LD_VAR 0 8
8991: PPUSH
8992: LD_INT 1
8994: PPUSH
8995: LD_VAR 0 2
8999: PUSH
9000: LD_VAR 0 3
9004: PUSH
9005: LD_VAR 0 4
9009: PLUS
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 2
9019: ST_TO_ADDR
9020: GO 9127
9022: LD_INT 4
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9071
9030: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9031: LD_ADDR_VAR 0 8
9035: PUSH
9036: LD_VAR 0 8
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 2
9048: PUSH
9049: LD_VAR 0 4
9053: MINUS
9054: PUSH
9055: LD_VAR 0 3
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 2
9068: ST_TO_ADDR
9069: GO 9127
9071: LD_INT 5
9073: DOUBLE
9074: EQUAL
9075: IFTRUE 9079
9077: GO 9126
9079: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9080: LD_ADDR_VAR 0 8
9084: PUSH
9085: LD_VAR 0 8
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 2
9097: PUSH
9098: LD_VAR 0 4
9102: MINUS
9103: PUSH
9104: LD_VAR 0 3
9108: PUSH
9109: LD_VAR 0 4
9113: MINUS
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 2
9123: ST_TO_ADDR
9124: GO 9127
9126: POP
9127: GO 8806
9129: POP
9130: POP
// if dist < 30 then
9131: LD_VAR 0 4
9135: PUSH
9136: LD_INT 30
9138: LESS
9139: IFFALSE 9151
// c = 1 else
9141: LD_ADDR_VAR 0 14
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
9149: GO 9159
// c = 2 ;
9151: LD_ADDR_VAR 0 14
9155: PUSH
9156: LD_INT 2
9158: ST_TO_ADDR
// b = 1 ;
9159: LD_ADDR_VAR 0 11
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9167: LD_VAR 0 11
9171: PUSH
9172: LD_VAR 0 4
9176: PUSH
9177: LD_INT 1
9179: MINUS
9180: LESSEQUAL
9181: IFFALSE 9609
// begin if 0 in dir_list and 1 in dir_list then
9183: LD_INT 0
9185: PUSH
9186: LD_VAR 0 10
9190: IN
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: LD_VAR 0 10
9199: IN
9200: AND
9201: IFFALSE 9253
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9203: LD_ADDR_VAR 0 8
9207: PUSH
9208: LD_VAR 0 8
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: LD_VAR 0 2
9220: PUSH
9221: LD_VAR 0 11
9225: PLUS
9226: PUSH
9227: LD_VAR 0 3
9231: PUSH
9232: LD_VAR 0 4
9236: MINUS
9237: PUSH
9238: LD_VAR 0 11
9242: PLUS
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 2
9252: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9253: LD_INT 1
9255: PUSH
9256: LD_VAR 0 10
9260: IN
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_VAR 0 10
9269: IN
9270: AND
9271: IFFALSE 9317
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9273: LD_ADDR_VAR 0 8
9277: PUSH
9278: LD_VAR 0 8
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_VAR 0 2
9290: PUSH
9291: LD_VAR 0 4
9295: PLUS
9296: PUSH
9297: LD_VAR 0 3
9301: PUSH
9302: LD_VAR 0 11
9306: PLUS
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 2
9316: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9317: LD_INT 2
9319: PUSH
9320: LD_VAR 0 10
9324: IN
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: LD_VAR 0 10
9333: IN
9334: AND
9335: IFFALSE 9387
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9337: LD_ADDR_VAR 0 8
9341: PUSH
9342: LD_VAR 0 8
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: LD_VAR 0 2
9354: PUSH
9355: LD_VAR 0 4
9359: PLUS
9360: PUSH
9361: LD_VAR 0 11
9365: MINUS
9366: PUSH
9367: LD_VAR 0 3
9371: PUSH
9372: LD_VAR 0 4
9376: PLUS
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 2
9386: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9387: LD_INT 3
9389: PUSH
9390: LD_VAR 0 10
9394: IN
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: LD_VAR 0 10
9403: IN
9404: AND
9405: IFFALSE 9457
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9407: LD_ADDR_VAR 0 8
9411: PUSH
9412: LD_VAR 0 8
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_VAR 0 2
9424: PUSH
9425: LD_VAR 0 11
9429: MINUS
9430: PUSH
9431: LD_VAR 0 3
9435: PUSH
9436: LD_VAR 0 4
9440: PLUS
9441: PUSH
9442: LD_VAR 0 11
9446: MINUS
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 2
9456: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9457: LD_INT 4
9459: PUSH
9460: LD_VAR 0 10
9464: IN
9465: PUSH
9466: LD_INT 5
9468: PUSH
9469: LD_VAR 0 10
9473: IN
9474: AND
9475: IFFALSE 9521
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9477: LD_ADDR_VAR 0 8
9481: PUSH
9482: LD_VAR 0 8
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: LD_VAR 0 2
9494: PUSH
9495: LD_VAR 0 4
9499: MINUS
9500: PUSH
9501: LD_VAR 0 3
9505: PUSH
9506: LD_VAR 0 11
9510: MINUS
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PPUSH
9516: CALL_OW 2
9520: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9521: LD_INT 5
9523: PUSH
9524: LD_VAR 0 10
9528: IN
9529: PUSH
9530: LD_INT 0
9532: PUSH
9533: LD_VAR 0 10
9537: IN
9538: AND
9539: IFFALSE 9591
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9541: LD_ADDR_VAR 0 8
9545: PUSH
9546: LD_VAR 0 8
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_VAR 0 2
9558: PUSH
9559: LD_VAR 0 4
9563: MINUS
9564: PUSH
9565: LD_VAR 0 11
9569: PLUS
9570: PUSH
9571: LD_VAR 0 3
9575: PUSH
9576: LD_VAR 0 4
9580: MINUS
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: CALL_OW 2
9590: ST_TO_ADDR
// b = b + c end ;
9591: LD_ADDR_VAR 0 11
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: LD_VAR 0 14
9605: PLUS
9606: ST_TO_ADDR
9607: GO 9167
// if list_coords = 0 then
9609: LD_VAR 0 8
9613: PUSH
9614: LD_INT 0
9616: EQUAL
9617: IFFALSE 9621
// exit ;
9619: GO 10129
// repeat min_dist = 5000 ;
9621: LD_ADDR_VAR 0 12
9625: PUSH
9626: LD_INT 5000
9628: ST_TO_ADDR
// for b in list_coords do
9629: LD_ADDR_VAR 0 11
9633: PUSH
9634: LD_VAR 0 8
9638: PUSH
9639: FOR_IN
9640: IFFALSE 9699
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9642: LD_ADDR_VAR 0 13
9646: PUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_VAR 0 11
9656: PUSH
9657: LD_INT 1
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 11
9665: PUSH
9666: LD_INT 2
9668: ARRAY
9669: PPUSH
9670: CALL_OW 297
9674: ST_TO_ADDR
// if temp_dist < min_dist then
9675: LD_VAR 0 13
9679: PUSH
9680: LD_VAR 0 12
9684: LESS
9685: IFFALSE 9697
// min_dist = temp_dist ;
9687: LD_ADDR_VAR 0 12
9691: PUSH
9692: LD_VAR 0 13
9696: ST_TO_ADDR
// end ;
9697: GO 9639
9699: POP
9700: POP
// c = 0 ;
9701: LD_ADDR_VAR 0 14
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// repeat c = c + 1 ;
9709: LD_ADDR_VAR 0 14
9713: PUSH
9714: LD_VAR 0 14
9718: PUSH
9719: LD_INT 1
9721: PLUS
9722: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9723: LD_VAR 0 1
9727: PPUSH
9728: LD_VAR 0 8
9732: PUSH
9733: LD_VAR 0 14
9737: ARRAY
9738: PUSH
9739: LD_INT 1
9741: ARRAY
9742: PPUSH
9743: LD_VAR 0 8
9747: PUSH
9748: LD_VAR 0 14
9752: ARRAY
9753: PUSH
9754: LD_INT 2
9756: ARRAY
9757: PPUSH
9758: CALL_OW 297
9762: PUSH
9763: LD_VAR 0 12
9767: EQUAL
9768: IFFALSE 9833
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9770: LD_ADDR_VAR 0 7
9774: PUSH
9775: LD_VAR 0 7
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: LD_VAR 0 8
9787: PUSH
9788: LD_VAR 0 14
9792: ARRAY
9793: PPUSH
9794: CALL_OW 2
9798: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9799: LD_ADDR_VAR 0 8
9803: PUSH
9804: LD_VAR 0 8
9808: PPUSH
9809: LD_VAR 0 14
9813: PPUSH
9814: CALL_OW 3
9818: ST_TO_ADDR
// c = c - 1 ;
9819: LD_ADDR_VAR 0 14
9823: PUSH
9824: LD_VAR 0 14
9828: PUSH
9829: LD_INT 1
9831: MINUS
9832: ST_TO_ADDR
// end ; until c = list_coords ;
9833: LD_VAR 0 14
9837: PUSH
9838: LD_VAR 0 8
9842: EQUAL
9843: IFFALSE 9709
// c = 0 ;
9845: LD_ADDR_VAR 0 14
9849: PUSH
9850: LD_INT 0
9852: ST_TO_ADDR
// if list_nearest > 0 then
9853: LD_VAR 0 7
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 10003
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9863: LD_ADDR_VAR 0 15
9867: PUSH
9868: LD_INT 1
9870: PPUSH
9871: LD_VAR 0 7
9875: PPUSH
9876: CALL_OW 12
9880: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9881: LD_ADDR_VAR 0 16
9885: PUSH
9886: LD_VAR 0 7
9890: PUSH
9891: LD_VAR 0 15
9895: ARRAY
9896: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9897: LD_VAR 0 16
9901: PUSH
9902: LD_INT 1
9904: ARRAY
9905: PPUSH
9906: LD_VAR 0 16
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PPUSH
9915: CALL_OW 488
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: PUSH
9924: LD_VAR 0 16
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_VAR 0 16
9937: PUSH
9938: LD_INT 2
9940: ARRAY
9941: PPUSH
9942: CALL_OW 428
9946: PUSH
9947: LD_INT 0
9949: EQUAL
9950: AND
9951: IFFALSE 9963
// c = 1 else
9953: LD_ADDR_VAR 0 14
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
9961: GO 9983
// list_nearest = Delete ( list_nearest , rand_num ) ;
9963: LD_ADDR_VAR 0 7
9967: PUSH
9968: LD_VAR 0 7
9972: PPUSH
9973: LD_VAR 0 15
9977: PPUSH
9978: CALL_OW 3
9982: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9983: LD_VAR 0 14
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: PUSH
9992: LD_VAR 0 7
9996: PUSH
9997: LD_INT 0
9999: EQUAL
10000: OR
10001: IFFALSE 9863
// end ; until c = 1 or list_coords = 0 ;
10003: LD_VAR 0 14
10007: PUSH
10008: LD_INT 1
10010: EQUAL
10011: PUSH
10012: LD_VAR 0 8
10016: PUSH
10017: LD_INT 0
10019: EQUAL
10020: OR
10021: IFFALSE 9621
// attempts = attempts + 1 ;
10023: LD_ADDR_VAR 0 17
10027: PUSH
10028: LD_VAR 0 17
10032: PUSH
10033: LD_INT 1
10035: PLUS
10036: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10037: LD_VAR 0 14
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: PUSH
10046: LD_VAR 0 17
10050: PUSH
10051: LD_INT 1
10053: GREATER
10054: OR
10055: IFFALSE 8580
// if c = 1 then
10057: LD_VAR 0 14
10061: PUSH
10062: LD_INT 1
10064: EQUAL
10065: IFFALSE 10129
// if add then
10067: LD_VAR 0 5
10071: IFFALSE 10102
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10073: LD_VAR 0 1
10077: PPUSH
10078: LD_VAR 0 16
10082: PUSH
10083: LD_INT 1
10085: ARRAY
10086: PPUSH
10087: LD_VAR 0 16
10091: PUSH
10092: LD_INT 2
10094: ARRAY
10095: PPUSH
10096: CALL_OW 171
10100: GO 10129
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_VAR 0 16
10111: PUSH
10112: LD_INT 1
10114: ARRAY
10115: PPUSH
10116: LD_VAR 0 16
10120: PUSH
10121: LD_INT 2
10123: ARRAY
10124: PPUSH
10125: CALL_OW 111
// end ;
10129: LD_VAR 0 6
10133: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
10138: PPUSH
10139: PPUSH
10140: PPUSH
10141: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10142: LD_VAR 0 1
10146: PPUSH
10147: LD_VAR 0 2
10151: PPUSH
10152: CALL_OW 488
10156: NOT
10157: PUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 488
10172: NOT
10173: OR
10174: IFFALSE 10187
// begin result = - 1 ;
10176: LD_ADDR_VAR 0 5
10180: PUSH
10181: LD_INT 1
10183: NEG
10184: ST_TO_ADDR
// exit ;
10185: GO 10347
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_VAR 0 2
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_VAR 0 4
10211: PPUSH
10212: CALL_OW 298
10216: ST_TO_ADDR
// dist_2 = 99999 ;
10217: LD_ADDR_VAR 0 7
10221: PUSH
10222: LD_INT 99999
10224: ST_TO_ADDR
// for b = 0 to 5 do
10225: LD_ADDR_VAR 0 8
10229: PUSH
10230: DOUBLE
10231: LD_INT 0
10233: DEC
10234: ST_TO_ADDR
10235: LD_INT 5
10237: PUSH
10238: FOR_TO
10239: IFFALSE 10335
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10241: LD_ADDR_VAR 0 9
10245: PUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: LD_VAR 0 8
10255: PPUSH
10256: LD_VAR 0 6
10260: PPUSH
10261: CALL_OW 272
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_VAR 0 6
10280: PPUSH
10281: CALL_OW 273
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: LD_VAR 0 4
10295: PPUSH
10296: CALL_OW 298
10300: ST_TO_ADDR
// if temp_dist < dist_2 then
10301: LD_VAR 0 9
10305: PUSH
10306: LD_VAR 0 7
10310: LESS
10311: IFFALSE 10333
// begin dist_2 = temp_dist ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 9
10322: ST_TO_ADDR
// dir = b ;
10323: LD_ADDR_VAR 0 10
10327: PUSH
10328: LD_VAR 0 8
10332: ST_TO_ADDR
// end ; end ;
10333: GO 10238
10335: POP
10336: POP
// result = dir ;
10337: LD_ADDR_VAR 0 5
10341: PUSH
10342: LD_VAR 0 10
10346: ST_TO_ADDR
// end ;
10347: LD_VAR 0 5
10351: RET
// export function MoveToHill ; begin
10352: LD_INT 0
10354: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 59
10365: PPUSH
10366: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10370: LD_EXP 47
10374: PPUSH
10375: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10379: LD_EXP 48
10383: PPUSH
10384: LD_INT 65
10386: PPUSH
10387: LD_INT 58
10389: PPUSH
10390: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10394: LD_EXP 48
10398: PPUSH
10399: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10403: LD_EXP 49
10407: PPUSH
10408: LD_INT 64
10410: PPUSH
10411: LD_INT 57
10413: PPUSH
10414: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10418: LD_EXP 49
10422: PPUSH
10423: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10427: LD_EXP 50
10431: PPUSH
10432: LD_INT 64
10434: PPUSH
10435: LD_INT 56
10437: PPUSH
10438: CALL_OW 111
// AddComCrawl ( Balei ) ;
10442: LD_EXP 50
10446: PPUSH
10447: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10451: LD_EXP 51
10455: PPUSH
10456: LD_INT 63
10458: PPUSH
10459: LD_INT 55
10461: PPUSH
10462: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10466: LD_EXP 51
10470: PPUSH
10471: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10475: LD_EXP 52
10479: PPUSH
10480: LD_INT 66
10482: PPUSH
10483: LD_INT 58
10485: PPUSH
10486: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10490: LD_EXP 52
10494: PPUSH
10495: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10499: LD_EXP 54
10503: PPUSH
10504: CALL_OW 255
10508: PUSH
10509: LD_INT 6
10511: EQUAL
10512: PUSH
10513: LD_EXP 12
10517: AND
10518: IFFALSE 10544
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10520: LD_EXP 54
10524: PPUSH
10525: LD_INT 63
10527: PPUSH
10528: LD_INT 54
10530: PPUSH
10531: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10535: LD_EXP 54
10539: PPUSH
10540: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10544: LD_EXP 47
10548: PPUSH
10549: LD_INT 65
10551: PPUSH
10552: LD_INT 59
10554: PPUSH
10555: CALL_OW 297
10559: PUSH
10560: LD_INT 7
10562: LESS
10563: IFFALSE 10589
// begin ComCrawl ( Pokryshkin ) ;
10565: LD_EXP 47
10569: PPUSH
10570: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10574: LD_EXP 47
10578: PPUSH
10579: LD_INT 65
10581: PPUSH
10582: LD_INT 59
10584: PPUSH
10585: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10589: LD_EXP 48
10593: PPUSH
10594: LD_INT 65
10596: PPUSH
10597: LD_INT 58
10599: PPUSH
10600: CALL_OW 297
10604: PUSH
10605: LD_INT 7
10607: LESS
10608: IFFALSE 10634
// begin ComCrawl ( Saseda ) ;
10610: LD_EXP 48
10614: PPUSH
10615: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10619: LD_EXP 48
10623: PPUSH
10624: LD_INT 65
10626: PPUSH
10627: LD_INT 58
10629: PPUSH
10630: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10634: LD_EXP 49
10638: PPUSH
10639: LD_INT 64
10641: PPUSH
10642: LD_INT 57
10644: PPUSH
10645: CALL_OW 297
10649: PUSH
10650: LD_INT 7
10652: LESS
10653: IFFALSE 10679
// begin ComCrawl ( Jaworska ) ;
10655: LD_EXP 49
10659: PPUSH
10660: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10664: LD_EXP 49
10668: PPUSH
10669: LD_INT 64
10671: PPUSH
10672: LD_INT 57
10674: PPUSH
10675: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10679: LD_EXP 50
10683: PPUSH
10684: LD_INT 64
10686: PPUSH
10687: LD_INT 56
10689: PPUSH
10690: CALL_OW 297
10694: PUSH
10695: LD_INT 7
10697: LESS
10698: IFFALSE 10724
// begin ComCrawl ( Balei ) ;
10700: LD_EXP 50
10704: PPUSH
10705: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10709: LD_EXP 50
10713: PPUSH
10714: LD_INT 64
10716: PPUSH
10717: LD_INT 56
10719: PPUSH
10720: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10724: LD_EXP 51
10728: PPUSH
10729: LD_INT 63
10731: PPUSH
10732: LD_INT 55
10734: PPUSH
10735: CALL_OW 297
10739: PUSH
10740: LD_INT 7
10742: LESS
10743: IFFALSE 10769
// begin ComCrawl ( Belkov ) ;
10745: LD_EXP 51
10749: PPUSH
10750: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 63
10761: PPUSH
10762: LD_INT 55
10764: PPUSH
10765: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10769: LD_EXP 52
10773: PPUSH
10774: LD_INT 66
10776: PPUSH
10777: LD_INT 58
10779: PPUSH
10780: CALL_OW 297
10784: PUSH
10785: LD_INT 7
10787: LESS
10788: IFFALSE 10814
// begin ComCrawl ( Jaunzeme ) ;
10790: LD_EXP 52
10794: PPUSH
10795: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10799: LD_EXP 52
10803: PPUSH
10804: LD_INT 66
10806: PPUSH
10807: LD_INT 58
10809: PPUSH
10810: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10814: LD_EXP 54
10818: PPUSH
10819: LD_INT 63
10821: PPUSH
10822: LD_INT 54
10824: PPUSH
10825: CALL_OW 297
10829: PUSH
10830: LD_INT 7
10832: LESS
10833: PUSH
10834: LD_EXP 54
10838: PPUSH
10839: CALL_OW 255
10843: PUSH
10844: LD_INT 6
10846: EQUAL
10847: AND
10848: PUSH
10849: LD_EXP 12
10853: AND
10854: IFFALSE 10880
// begin ComCrawl ( Gnyevko ) ;
10856: LD_EXP 54
10860: PPUSH
10861: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10865: LD_EXP 54
10869: PPUSH
10870: LD_INT 63
10872: PPUSH
10873: LD_INT 54
10875: PPUSH
10876: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10880: LD_INT 35
10882: PPUSH
10883: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10887: LD_EXP 42
10891: PPUSH
10892: CALL_OW 303
10896: PUSH
10897: LD_EXP 42
10901: PPUSH
10902: CALL_OW 301
10906: OR
10907: IFFALSE 10544
// end ;
10909: LD_VAR 0 1
10913: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10914: LD_EXP 42
10918: PPUSH
10919: CALL_OW 303
10923: NOT
10924: PUSH
10925: LD_EXP 42
10929: PPUSH
10930: CALL_OW 301
10934: NOT
10935: OR
10936: PUSH
10937: LD_EXP 15
10941: AND
10942: IFFALSE 11284
10944: GO 10946
10946: DISABLE
// begin enable ;
10947: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10948: LD_EXP 47
10952: PPUSH
10953: LD_INT 65
10955: PPUSH
10956: LD_INT 59
10958: PPUSH
10959: CALL_OW 297
10963: PUSH
10964: LD_INT 7
10966: LESS
10967: IFFALSE 10993
// begin ComCrawl ( Pokryshkin ) ;
10969: LD_EXP 47
10973: PPUSH
10974: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10978: LD_EXP 47
10982: PPUSH
10983: LD_INT 65
10985: PPUSH
10986: LD_INT 59
10988: PPUSH
10989: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10993: LD_EXP 48
10997: PPUSH
10998: LD_INT 65
11000: PPUSH
11001: LD_INT 58
11003: PPUSH
11004: CALL_OW 297
11008: PUSH
11009: LD_INT 7
11011: LESS
11012: IFFALSE 11038
// begin ComCrawl ( Saseda ) ;
11014: LD_EXP 48
11018: PPUSH
11019: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11023: LD_EXP 48
11027: PPUSH
11028: LD_INT 65
11030: PPUSH
11031: LD_INT 58
11033: PPUSH
11034: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11038: LD_EXP 49
11042: PPUSH
11043: LD_INT 64
11045: PPUSH
11046: LD_INT 57
11048: PPUSH
11049: CALL_OW 297
11053: PUSH
11054: LD_INT 7
11056: LESS
11057: IFFALSE 11083
// begin ComCrawl ( Jaworska ) ;
11059: LD_EXP 49
11063: PPUSH
11064: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11068: LD_EXP 49
11072: PPUSH
11073: LD_INT 64
11075: PPUSH
11076: LD_INT 57
11078: PPUSH
11079: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11083: LD_EXP 50
11087: PPUSH
11088: LD_INT 64
11090: PPUSH
11091: LD_INT 56
11093: PPUSH
11094: CALL_OW 297
11098: PUSH
11099: LD_INT 7
11101: LESS
11102: IFFALSE 11128
// begin ComCrawl ( Balei ) ;
11104: LD_EXP 50
11108: PPUSH
11109: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11113: LD_EXP 50
11117: PPUSH
11118: LD_INT 64
11120: PPUSH
11121: LD_INT 56
11123: PPUSH
11124: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11128: LD_EXP 51
11132: PPUSH
11133: LD_INT 63
11135: PPUSH
11136: LD_INT 55
11138: PPUSH
11139: CALL_OW 297
11143: PUSH
11144: LD_INT 7
11146: LESS
11147: IFFALSE 11173
// begin ComCrawl ( Belkov ) ;
11149: LD_EXP 51
11153: PPUSH
11154: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11158: LD_EXP 51
11162: PPUSH
11163: LD_INT 63
11165: PPUSH
11166: LD_INT 55
11168: PPUSH
11169: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11173: LD_EXP 52
11177: PPUSH
11178: LD_INT 66
11180: PPUSH
11181: LD_INT 58
11183: PPUSH
11184: CALL_OW 297
11188: PUSH
11189: LD_INT 7
11191: LESS
11192: IFFALSE 11218
// begin ComCrawl ( Jaunzeme ) ;
11194: LD_EXP 52
11198: PPUSH
11199: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11203: LD_EXP 52
11207: PPUSH
11208: LD_INT 66
11210: PPUSH
11211: LD_INT 58
11213: PPUSH
11214: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11218: LD_EXP 54
11222: PPUSH
11223: LD_INT 63
11225: PPUSH
11226: LD_INT 54
11228: PPUSH
11229: CALL_OW 297
11233: PUSH
11234: LD_INT 7
11236: LESS
11237: PUSH
11238: LD_EXP 54
11242: PPUSH
11243: CALL_OW 255
11247: PUSH
11248: LD_INT 6
11250: EQUAL
11251: AND
11252: PUSH
11253: LD_EXP 12
11257: AND
11258: IFFALSE 11284
// begin ComCrawl ( Gnyevko ) ;
11260: LD_EXP 54
11264: PPUSH
11265: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11269: LD_EXP 54
11273: PPUSH
11274: LD_INT 63
11276: PPUSH
11277: LD_INT 54
11279: PPUSH
11280: CALL_OW 171
// end ; end ; end_of_file
11284: END
// export function BurlakDying ; begin
11285: LD_INT 0
11287: PPUSH
// YouLost ( Burlak ) ;
11288: LD_STRING Burlak
11290: PPUSH
11291: CALL_OW 104
// end ;
11295: LD_VAR 0 1
11299: RET
// every 0 0$1 trigger kirovSolds = 0 do
11300: LD_EXP 56
11304: PUSH
11305: LD_INT 0
11307: EQUAL
11308: IFFALSE 11320
11310: GO 11312
11312: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11313: LD_STRING KirovSoldsDie
11315: PPUSH
11316: CALL_OW 104
11320: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11321: LD_EXP 22
11325: PUSH
11326: LD_INT 1
11328: PPUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 71
11357: PUSH
11358: LD_INT 0
11360: EQUAL
11361: AND
11362: IFFALSE 11641
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11370: LD_EXP 53
11374: PPUSH
11375: CALL_OW 302
11379: PUSH
11380: LD_EXP 53
11384: PPUSH
11385: CALL_OW 255
11389: PUSH
11390: LD_INT 8
11392: EQUAL
11393: AND
11394: PUSH
11395: LD_EXP 54
11399: PPUSH
11400: CALL_OW 302
11404: PUSH
11405: LD_EXP 54
11409: PPUSH
11410: CALL_OW 255
11414: PUSH
11415: LD_INT 8
11417: EQUAL
11418: AND
11419: OR
11420: IFFALSE 11552
// begin case Query ( QExit2 ) of 1 :
11422: LD_STRING QExit2
11424: PPUSH
11425: CALL_OW 97
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11530
11438: POP
// begin if IsOk ( Belkov ) then
11439: LD_EXP 51
11443: PPUSH
11444: CALL_OW 302
11448: IFFALSE 11464
// Say ( Belkov , D12-Bel-1 ) else
11450: LD_EXP 51
11454: PPUSH
11455: LD_STRING D12-Bel-1
11457: PPUSH
11458: CALL_OW 88
11462: GO 11524
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11464: LD_INT 22
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 50
11486: PUSH
11487: EMPTY
11488: LIST
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: PPUSH
11506: CALL_OW 69
11510: PPUSH
11511: LD_STRING D12-RSol1-1
11513: PPUSH
11514: LD_STRING 
11516: PPUSH
11517: LD_INT 0
11519: PPUSH
11520: CALL 8139 0 4
// FinishMission ;
11524: CALL 11644 0 0
// end ; 2 :
11528: GO 11550
11530: LD_INT 2
11532: DOUBLE
11533: EQUAL
11534: IFTRUE 11538
11536: GO 11549
11538: POP
// begin wait ( 0 0$5 ) ;
11539: LD_INT 175
11541: PPUSH
11542: CALL_OW 67
// enable ;
11546: ENABLE
// end ; end ;
11547: GO 11550
11549: POP
// end else
11550: GO 11641
// begin if IsOk ( Belkov ) then
11552: LD_EXP 51
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11577
// Say ( Belkov , D12-Bel-1 ) else
11563: LD_EXP 51
11567: PPUSH
11568: LD_STRING D12-Bel-1
11570: PPUSH
11571: CALL_OW 88
11575: GO 11637
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11577: LD_INT 22
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 50
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: LD_INT 26
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: PPUSH
11624: LD_STRING D12-RSol1-1
11626: PPUSH
11627: LD_STRING 
11629: PPUSH
11630: LD_INT 0
11632: PPUSH
11633: CALL 8139 0 4
// FinishMission ;
11637: CALL 11644 0 0
// end ; end ;
11641: PPOPN 1
11643: END
// function FinishMission ; begin
11644: LD_INT 0
11646: PPUSH
// SetRewards ;
11647: CALL 11668 0 0
// SavePlayerCharacters ;
11651: CALL 12019 0 0
// SaveGlobalVariables ;
11655: CALL 12149 0 0
// YouWin ;
11659: CALL_OW 103
// end ;
11663: LD_VAR 0 1
11667: RET
// function SetRewards ; begin
11668: LD_INT 0
11670: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11671: LD_EXP 19
11675: NOT
11676: PUSH
11677: LD_EXP 20
11681: NOT
11682: AND
11683: IFFALSE 11695
// AddMedal ( NoEscape , 1 ) ;
11685: LD_STRING NoEscape
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11695: LD_EXP 19
11699: PUSH
11700: LD_EXP 20
11704: NOT
11705: AND
11706: IFFALSE 11719
// AddMedal ( NoEscape , - 1 ) ;
11708: LD_STRING NoEscape
11710: PPUSH
11711: LD_INT 1
11713: NEG
11714: PPUSH
11715: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11719: LD_EXP 19
11723: NOT
11724: PUSH
11725: LD_EXP 20
11729: AND
11730: IFFALSE 11743
// AddMedal ( NoEscape , - 2 ) ;
11732: LD_STRING NoEscape
11734: PPUSH
11735: LD_INT 2
11737: NEG
11738: PPUSH
11739: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11743: LD_EXP 19
11747: PUSH
11748: LD_EXP 20
11752: AND
11753: IFFALSE 11766
// AddMedal ( NoEscape , - 3 ) ;
11755: LD_STRING NoEscape
11757: PPUSH
11758: LD_INT 3
11760: NEG
11761: PPUSH
11762: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11766: LD_EXP 12
11770: PUSH
11771: LD_EXP 54
11775: PPUSH
11776: CALL_OW 302
11780: AND
11781: PUSH
11782: LD_EXP 21
11786: AND
11787: PUSH
11788: LD_EXP 53
11792: PPUSH
11793: CALL_OW 302
11797: AND
11798: IFFALSE 11810
// AddMedal ( Gnyevko , 1 ) ;
11800: LD_STRING Gnyevko
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11810: LD_EXP 12
11814: NOT
11815: PUSH
11816: LD_EXP 21
11820: AND
11821: PUSH
11822: LD_EXP 53
11826: PPUSH
11827: CALL_OW 302
11831: AND
11832: IFFALSE 11845
// AddMedal ( Gnyevko , - 1 ) ;
11834: LD_STRING Gnyevko
11836: PPUSH
11837: LD_INT 1
11839: NEG
11840: PPUSH
11841: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11845: LD_EXP 12
11849: PUSH
11850: LD_EXP 21
11854: NOT
11855: PUSH
11856: LD_EXP 54
11860: PPUSH
11861: CALL_OW 302
11865: NOT
11866: OR
11867: PUSH
11868: LD_EXP 53
11872: PPUSH
11873: CALL_OW 302
11877: NOT
11878: OR
11879: AND
11880: IFFALSE 11893
// AddMedal ( Gnyevko , - 2 ) ;
11882: LD_STRING Gnyevko
11884: PPUSH
11885: LD_INT 2
11887: NEG
11888: PPUSH
11889: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11893: LD_EXP 12
11897: NOT
11898: PUSH
11899: LD_EXP 21
11903: NOT
11904: AND
11905: PUSH
11906: LD_EXP 54
11910: PPUSH
11911: CALL_OW 302
11915: NOT
11916: PUSH
11917: LD_EXP 53
11921: PPUSH
11922: CALL_OW 302
11926: NOT
11927: AND
11928: OR
11929: IFFALSE 11942
// AddMedal ( Gnyevko , - 3 ) ;
11931: LD_STRING Gnyevko
11933: PPUSH
11934: LD_INT 3
11936: NEG
11937: PPUSH
11938: CALL_OW 101
// if lostComradesCounter = 0 then
11942: LD_EXP 23
11946: PUSH
11947: LD_INT 0
11949: EQUAL
11950: IFFALSE 11964
// AddMedal ( NoLosses , 1 ) else
11952: LD_STRING NoLosses
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 101
11962: GO 11974
// AddMedal ( NoLosses , 0 ) ;
11964: LD_STRING NoLosses
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 101
// GiveMedals ( Main ) ;
11974: LD_STRING Main
11976: PPUSH
11977: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11981: LD_INT 22
11983: PUSH
11984: LD_INT 3
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PPUSH
12010: CALL_OW 43
// end ;
12014: LD_VAR 0 1
12018: RET
// function SavePlayerCharacters ; var others ; begin
12019: LD_INT 0
12021: PPUSH
12022: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12023: LD_EXP 46
12027: PPUSH
12028: LD_STRING Burlak
12030: PPUSH
12031: CALL 8318 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12035: LD_EXP 54
12039: PPUSH
12040: LD_STRING Gnyevko
12042: PPUSH
12043: CALL 8318 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12047: LD_EXP 51
12051: PPUSH
12052: LD_STRING Belkov
12054: PPUSH
12055: CALL 8318 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12059: LD_EXP 53
12063: PPUSH
12064: LD_STRING Kirilenkova
12066: PPUSH
12067: CALL 8318 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 21
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: PUSH
12105: LD_EXP 46
12109: PUSH
12110: LD_EXP 54
12114: PUSH
12115: LD_EXP 51
12119: PUSH
12120: LD_EXP 53
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: DIFF
12131: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12132: LD_VAR 0 2
12136: PPUSH
12137: LD_STRING other_survivors
12139: PPUSH
12140: CALL 8374 0 2
// end ;
12144: LD_VAR 0 1
12148: RET
// function SaveGlobalVariables ; begin
12149: LD_INT 0
12151: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12152: LD_EXP 1
12156: PPUSH
12157: LD_STRING 01_GladstoneStatus
12159: PPUSH
12160: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12164: LD_EXP 2
12168: PPUSH
12169: LD_STRING 01_JohannaStatus
12171: PPUSH
12172: CALL_OW 39
// end ; end_of_file
12176: LD_VAR 0 1
12180: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12181: LD_INT 0
12183: PPUSH
12184: PPUSH
12185: PPUSH
// uc_side = 1 ;
12186: LD_ADDR_OWVAR 20
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// hc_class := 1 ;
12194: LD_ADDR_OWVAR 28
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// hc_sex := sex_male ;
12202: LD_ADDR_OWVAR 27
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12210: LD_ADDR_OWVAR 33
12214: PUSH
12215: LD_STRING AmGalRemake
12217: ST_TO_ADDR
// hc_face_number := 1 ;
12218: LD_ADDR_OWVAR 34
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// hc_name := Charles Brown ;
12226: LD_ADDR_OWVAR 26
12230: PUSH
12231: LD_STRING Charles Brown
12233: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12234: LD_ADDR_OWVAR 29
12238: PUSH
12239: LD_INT 12
12241: PUSH
12242: LD_INT 11
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12249: LD_ADDR_OWVAR 31
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: LD_INT 0
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: ST_TO_ADDR
// Charles = CreateHuman ;
12272: LD_ADDR_EXP 42
12276: PUSH
12277: CALL_OW 44
12281: ST_TO_ADDR
// hc_class := 1 ;
12282: LD_ADDR_OWVAR 28
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// hc_sex := sex_female ;
12290: LD_ADDR_OWVAR 27
12294: PUSH
12295: LD_INT 2
12297: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12298: LD_ADDR_OWVAR 33
12302: PUSH
12303: LD_STRING AmGalRemake
12305: ST_TO_ADDR
// hc_face_number := 2 ;
12306: LD_ADDR_OWVAR 34
12310: PUSH
12311: LD_INT 2
12313: ST_TO_ADDR
// hc_name := Johanna Holland ;
12314: LD_ADDR_OWVAR 26
12318: PUSH
12319: LD_STRING Johanna Holland
12321: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12322: LD_ADDR_OWVAR 29
12326: PUSH
12327: LD_INT 12
12329: PUSH
12330: LD_INT 11
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12337: LD_ADDR_OWVAR 31
12341: PUSH
12342: LD_EXP 36
12346: PUSH
12347: LD_INT 0
12349: PPUSH
12350: LD_INT 2
12352: PPUSH
12353: CALL_OW 12
12357: PUSH
12358: LD_INT 0
12360: PPUSH
12361: LD_INT 2
12363: PPUSH
12364: CALL_OW 12
12368: PUSH
12369: LD_INT 0
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: CALL_OW 12
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: ST_TO_ADDR
// Johanna = CreateHuman ;
12386: LD_ADDR_EXP 43
12390: PUSH
12391: CALL_OW 44
12395: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12396: LD_EXP 43
12400: PPUSH
12401: LD_INT 19
12403: PPUSH
12404: LD_INT 0
12406: PPUSH
12407: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12411: LD_EXP 43
12415: PPUSH
12416: LD_INT 23
12418: PPUSH
12419: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12423: LD_ADDR_EXP 44
12427: PUSH
12428: LD_STRING Gladstone
12430: PPUSH
12431: LD_INT 0
12433: PPUSH
12434: CALL 8076 0 2
12438: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12439: LD_EXP 44
12443: PPUSH
12444: LD_INT 22
12446: PPUSH
12447: CALL_OW 52
// amApemans = [ ] ;
12451: LD_ADDR_EXP 45
12455: PUSH
12456: EMPTY
12457: ST_TO_ADDR
// for i := 1 to amApeAmount do
12458: LD_ADDR_VAR 0 2
12462: PUSH
12463: DOUBLE
12464: LD_INT 1
12466: DEC
12467: ST_TO_ADDR
12468: LD_EXP 35
12472: PUSH
12473: FOR_TO
12474: IFFALSE 12589
// begin hc_class := class_apeman ;
12476: LD_ADDR_OWVAR 28
12480: PUSH
12481: LD_INT 12
12483: ST_TO_ADDR
// hc_gallery :=  ;
12484: LD_ADDR_OWVAR 33
12488: PUSH
12489: LD_STRING 
12491: ST_TO_ADDR
// hc_name :=  ;
12492: LD_ADDR_OWVAR 26
12496: PUSH
12497: LD_STRING 
12499: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12500: LD_ADDR_OWVAR 31
12504: PUSH
12505: LD_EXP 36
12509: PUSH
12510: LD_INT 0
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 0
12523: PPUSH
12524: LD_INT 2
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 0
12534: PPUSH
12535: LD_INT 2
12537: PPUSH
12538: CALL_OW 12
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: ST_TO_ADDR
// ape = CreateHuman ;
12549: LD_ADDR_VAR 0 3
12553: PUSH
12554: CALL_OW 44
12558: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 22
12566: PPUSH
12567: CALL_OW 52
// amApemans = amApemans ^ ape ;
12571: LD_ADDR_EXP 45
12575: PUSH
12576: LD_EXP 45
12580: PUSH
12581: LD_VAR 0 3
12585: ADD
12586: ST_TO_ADDR
// end ;
12587: GO 12473
12589: POP
12590: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12591: LD_INT 23
12593: PPUSH
12594: LD_EXP 33
12598: PPUSH
12599: CALL_OW 234
// end ; end_of_file
12603: LD_VAR 0 1
12607: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12608: LD_INT 0
12610: PPUSH
// PrepareHero ;
12611: CALL 12636 0 0
// PreparePokryshkinTeams ;
12615: CALL 12730 0 0
// PrepareJelena ;
12619: CALL 12995 0 0
// PrepareGnyevko ;
12623: CALL 13027 0 0
// PrepareKurin ;
12627: CALL 12698 0 0
// end ;
12631: LD_VAR 0 1
12635: RET
// function PrepareHero ; begin
12636: LD_INT 0
12638: PPUSH
// uc_side = 3 ;
12639: LD_ADDR_OWVAR 20
12643: PUSH
12644: LD_INT 3
12646: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
12647: LD_ADDR_EXP 46
12651: PUSH
12652: LD_STRING Burlak
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL 8076 0 2
12662: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12663: LD_EXP 46
12667: PPUSH
12668: LD_EXP 37
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_EXP 37
12681: PUSH
12682: LD_INT 2
12684: ARRAY
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 48
// end ;
12693: LD_VAR 0 1
12697: RET
// function PrepareKurin ; begin
12698: LD_INT 0
12700: PPUSH
// uc_side = 6 ;
12701: LD_ADDR_OWVAR 20
12705: PUSH
12706: LD_INT 6
12708: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
12709: LD_ADDR_EXP 55
12713: PUSH
12714: LD_STRING Kurin
12716: PPUSH
12717: LD_INT 0
12719: PPUSH
12720: CALL 8076 0 2
12724: ST_TO_ADDR
// end ;
12725: LD_VAR 0 1
12729: RET
// function PreparePokryshkinTeams ; begin
12730: LD_INT 0
12732: PPUSH
// uc_side = 6 ;
12733: LD_ADDR_OWVAR 20
12737: PUSH
12738: LD_INT 6
12740: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
12741: LD_ADDR_EXP 47
12745: PUSH
12746: LD_STRING Pokryshkin
12748: PPUSH
12749: LD_INT 0
12751: PPUSH
12752: CALL 8076 0 2
12756: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
12757: LD_ADDR_EXP 48
12761: PUSH
12762: LD_STRING Saseda
12764: PPUSH
12765: LD_INT 0
12767: PPUSH
12768: CALL 8076 0 2
12772: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
12773: LD_ADDR_EXP 49
12777: PUSH
12778: LD_STRING Jaworska
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: CALL 8076 0 2
12788: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
12789: LD_ADDR_EXP 50
12793: PUSH
12794: LD_STRING Balei
12796: PPUSH
12797: LD_INT 0
12799: PPUSH
12800: CALL 8076 0 2
12804: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
12805: LD_ADDR_EXP 51
12809: PUSH
12810: LD_STRING Belkov
12812: PPUSH
12813: LD_INT 0
12815: PPUSH
12816: CALL 8076 0 2
12820: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12821: LD_EXP 47
12825: PPUSH
12826: LD_INT 25
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12836: LD_EXP 48
12840: PPUSH
12841: LD_INT 17
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12851: LD_EXP 49
12855: PPUSH
12856: LD_INT 17
12858: PPUSH
12859: LD_INT 0
12861: PPUSH
12862: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12866: LD_EXP 50
12870: PPUSH
12871: LD_INT 17
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12881: LD_EXP 51
12885: PPUSH
12886: LD_INT 17
12888: PPUSH
12889: LD_INT 0
12891: PPUSH
12892: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12896: LD_ADDR_EXP 56
12900: PUSH
12901: LD_EXP 47
12905: PUSH
12906: LD_EXP 48
12910: PUSH
12911: LD_EXP 50
12915: PUSH
12916: LD_EXP 51
12920: PUSH
12921: LD_EXP 49
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: ST_TO_ADDR
// if Difficulty < 3 then
12933: LD_OWVAR 67
12937: PUSH
12938: LD_INT 3
12940: LESS
12941: IFFALSE 12990
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
12943: LD_ADDR_EXP 52
12947: PUSH
12948: LD_STRING Jaunzeme
12950: PPUSH
12951: LD_INT 0
12953: PPUSH
12954: CALL 8076 0 2
12958: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12959: LD_EXP 52
12963: PPUSH
12964: LD_INT 26
12966: PPUSH
12967: LD_INT 0
12969: PPUSH
12970: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12974: LD_ADDR_EXP 56
12978: PUSH
12979: LD_EXP 56
12983: PUSH
12984: LD_EXP 52
12988: ADD
12989: ST_TO_ADDR
// end ; end ;
12990: LD_VAR 0 1
12994: RET
// function PrepareJelena ; begin
12995: LD_INT 0
12997: PPUSH
// uc_side = 8 ;
12998: LD_ADDR_OWVAR 20
13002: PUSH
13003: LD_INT 8
13005: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13006: LD_ADDR_EXP 53
13010: PUSH
13011: LD_STRING Kirilenkova
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL 8076 0 2
13021: ST_TO_ADDR
// end ;
13022: LD_VAR 0 1
13026: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
// uc_side = 8 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 8
13040: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13041: LD_ADDR_EXP 54
13045: PUSH
13046: LD_STRING Gnyevko
13048: PPUSH
13049: LD_INT 0
13051: PPUSH
13052: CALL 8076 0 2
13056: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13057: LD_ADDR_VAR 0 4
13061: PUSH
13062: LD_EXP 38
13066: PUSH
13067: LD_INT 1
13069: PPUSH
13070: LD_EXP 38
13074: PPUSH
13075: CALL_OW 12
13079: ARRAY
13080: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13081: LD_EXP 54
13085: PPUSH
13086: LD_VAR 0 4
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: LD_VAR 0 4
13099: PUSH
13100: LD_INT 2
13102: ARRAY
13103: PPUSH
13104: LD_INT 0
13106: PPUSH
13107: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13111: LD_EXP 54
13115: PPUSH
13116: LD_EXP 39
13120: PPUSH
13121: CALL_OW 234
// ComHold ( Gnyevko ) ;
13125: LD_EXP 54
13129: PPUSH
13130: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: DOUBLE
13140: LD_INT 1
13142: DEC
13143: ST_TO_ADDR
13144: LD_EXP 27
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: MINUS
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13305
// begin uc_side = 0 ;
13177: LD_ADDR_OWVAR 20
13181: PUSH
13182: LD_INT 0
13184: ST_TO_ADDR
// uc_nation = nation_nature ;
13185: LD_ADDR_OWVAR 21
13189: PUSH
13190: LD_INT 0
13192: ST_TO_ADDR
// hc_class = class_apeman ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 12
13200: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13201: LD_ADDR_OWVAR 31
13205: PUSH
13206: LD_EXP 28
13210: PUSH
13211: LD_INT 1
13213: ARRAY
13214: PUSH
13215: LD_EXP 28
13219: PUSH
13220: LD_INT 2
13222: ARRAY
13223: PUSH
13224: LD_EXP 28
13228: PUSH
13229: LD_INT 3
13231: ARRAY
13232: PUSH
13233: LD_EXP 28
13237: PUSH
13238: LD_INT 4
13240: ARRAY
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13248: LD_ADDR_OWVAR 35
13252: PUSH
13253: LD_EXP 34
13257: ST_TO_ADDR
// un = CreateHuman ;
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: CALL_OW 44
13267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_EXP 54
13277: PPUSH
13278: CALL_OW 250
13282: PPUSH
13283: LD_EXP 54
13287: PPUSH
13288: CALL_OW 251
13292: PPUSH
13293: LD_INT 8
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 50
// end ;
13303: GO 13174
13305: POP
13306: POP
// end ; end_of_file
13307: LD_VAR 0 1
13311: RET
// export function CreateNature ; var i , un ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: DOUBLE
13323: LD_INT 1
13325: DEC
13326: ST_TO_ADDR
13327: LD_EXP 27
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PUSH
13336: FOR_TO
13337: IFFALSE 13447
// begin uc_side = 0 ;
13339: LD_ADDR_OWVAR 20
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// uc_nation = nation_nature ;
13347: LD_ADDR_OWVAR 21
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// hc_class = class_apeman ;
13355: LD_ADDR_OWVAR 28
13359: PUSH
13360: LD_INT 12
13362: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13363: LD_ADDR_OWVAR 31
13367: PUSH
13368: LD_EXP 28
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PUSH
13377: LD_EXP 28
13381: PUSH
13382: LD_INT 2
13384: ARRAY
13385: PUSH
13386: LD_EXP 28
13390: PUSH
13391: LD_INT 3
13393: ARRAY
13394: PUSH
13395: LD_EXP 28
13399: PUSH
13400: LD_INT 4
13402: ARRAY
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13410: LD_ADDR_OWVAR 35
13414: PUSH
13415: LD_EXP 34
13419: ST_TO_ADDR
// un = CreateHuman ;
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: CALL_OW 44
13429: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 16
13437: PPUSH
13438: LD_INT 0
13440: PPUSH
13441: CALL_OW 49
// end ;
13445: GO 13336
13447: POP
13448: POP
// for i := 1 to animalsAmount [ 2 ] do
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: DOUBLE
13455: LD_INT 1
13457: DEC
13458: ST_TO_ADDR
13459: LD_EXP 27
13463: PUSH
13464: LD_INT 2
13466: ARRAY
13467: PUSH
13468: FOR_TO
13469: IFFALSE 13579
// begin uc_side = 0 ;
13471: LD_ADDR_OWVAR 20
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// uc_nation = nation_nature ;
13479: LD_ADDR_OWVAR 21
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// hc_class = class_phororhacos ;
13487: LD_ADDR_OWVAR 28
13491: PUSH
13492: LD_INT 18
13494: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13495: LD_ADDR_OWVAR 31
13499: PUSH
13500: LD_EXP 28
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PUSH
13509: LD_EXP 28
13513: PUSH
13514: LD_INT 2
13516: ARRAY
13517: PUSH
13518: LD_EXP 28
13522: PUSH
13523: LD_INT 3
13525: ARRAY
13526: PUSH
13527: LD_EXP 28
13531: PUSH
13532: LD_INT 4
13534: ARRAY
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13542: LD_ADDR_OWVAR 35
13546: PUSH
13547: LD_EXP 29
13551: ST_TO_ADDR
// un = CreateHuman ;
13552: LD_ADDR_VAR 0 3
13556: PUSH
13557: CALL_OW 44
13561: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 15
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL_OW 49
// end ;
13577: GO 13468
13579: POP
13580: POP
// for i := 1 to animalsAmount [ 3 ] do
13581: LD_ADDR_VAR 0 2
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_EXP 27
13595: PUSH
13596: LD_INT 3
13598: ARRAY
13599: PUSH
13600: FOR_TO
13601: IFFALSE 13711
// begin uc_side = 0 ;
13603: LD_ADDR_OWVAR 20
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// uc_nation = nation_nature ;
13611: LD_ADDR_OWVAR 21
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// hc_class = class_tiger ;
13619: LD_ADDR_OWVAR 28
13623: PUSH
13624: LD_INT 14
13626: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13627: LD_ADDR_OWVAR 31
13631: PUSH
13632: LD_EXP 28
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PUSH
13641: LD_EXP 28
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PUSH
13650: LD_EXP 28
13654: PUSH
13655: LD_INT 3
13657: ARRAY
13658: PUSH
13659: LD_EXP 28
13663: PUSH
13664: LD_INT 4
13666: ARRAY
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13674: LD_ADDR_OWVAR 35
13678: PUSH
13679: LD_EXP 29
13683: ST_TO_ADDR
// un = CreateHuman ;
13684: LD_ADDR_VAR 0 3
13688: PUSH
13689: CALL_OW 44
13693: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13694: LD_VAR 0 3
13698: PPUSH
13699: LD_INT 15
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 49
// end ;
13709: GO 13600
13711: POP
13712: POP
// for i := 1 to animalsAmount [ 4 ] do
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: DOUBLE
13719: LD_INT 1
13721: DEC
13722: ST_TO_ADDR
13723: LD_EXP 27
13727: PUSH
13728: LD_INT 4
13730: ARRAY
13731: PUSH
13732: FOR_TO
13733: IFFALSE 13843
// begin uc_side = 0 ;
13735: LD_ADDR_OWVAR 20
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// uc_nation = nation_nature ;
13743: LD_ADDR_OWVAR 21
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// hc_class = 21 ;
13751: LD_ADDR_OWVAR 28
13755: PUSH
13756: LD_INT 21
13758: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13759: LD_ADDR_OWVAR 31
13763: PUSH
13764: LD_EXP 28
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PUSH
13773: LD_EXP 28
13777: PUSH
13778: LD_INT 2
13780: ARRAY
13781: PUSH
13782: LD_EXP 28
13786: PUSH
13787: LD_INT 3
13789: ARRAY
13790: PUSH
13791: LD_EXP 28
13795: PUSH
13796: LD_INT 4
13798: ARRAY
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13806: LD_ADDR_OWVAR 35
13810: PUSH
13811: LD_EXP 29
13815: ST_TO_ADDR
// un = CreateHuman ;
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: CALL_OW 44
13825: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 15
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 49
// end ;
13841: GO 13732
13843: POP
13844: POP
// end ; end_of_file
13845: LD_VAR 0 1
13849: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13850: LD_VAR 0 1
13854: PUSH
13855: LD_EXP 46
13859: EQUAL
13860: PUSH
13861: LD_EXP 53
13865: PPUSH
13866: CALL_OW 255
13870: PUSH
13871: LD_INT 3
13873: EQUAL
13874: NOT
13875: AND
13876: PUSH
13877: LD_EXP 53
13881: PPUSH
13882: CALL_OW 302
13886: NOT
13887: AND
13888: IFFALSE 13894
// BurlakDying ;
13890: CALL 11285 0 0
// if unit = Gladstone then
13894: LD_VAR 0 1
13898: PUSH
13899: LD_EXP 44
13903: EQUAL
13904: IFFALSE 13914
// gladstoneStatus = 0 ;
13906: LD_ADDR_EXP 1
13910: PUSH
13911: LD_INT 0
13913: ST_TO_ADDR
// if unit = Johanna then
13914: LD_VAR 0 1
13918: PUSH
13919: LD_EXP 43
13923: EQUAL
13924: IFFALSE 13934
// johannaStatus = 0 ;
13926: LD_ADDR_EXP 2
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// end ;
13934: PPOPN 1
13936: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13937: LD_VAR 0 1
13941: PUSH
13942: LD_EXP 46
13946: EQUAL
13947: IFFALSE 13953
// BurlakDying ;
13949: CALL 11285 0 0
// if GetSide ( unit ) = 3 then
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 255
13962: PUSH
13963: LD_INT 3
13965: EQUAL
13966: IFFALSE 13982
// lostComradesCounter = lostComradesCounter + 1 ;
13968: LD_ADDR_EXP 23
13972: PUSH
13973: LD_EXP 23
13977: PUSH
13978: LD_INT 1
13980: PLUS
13981: ST_TO_ADDR
// if unit in kirovSolds then
13982: LD_VAR 0 1
13986: PUSH
13987: LD_EXP 56
13991: IN
13992: IFFALSE 14010
// kirovSolds = kirovSolds diff unit ;
13994: LD_ADDR_EXP 56
13998: PUSH
13999: LD_EXP 56
14003: PUSH
14004: LD_VAR 0 1
14008: DIFF
14009: ST_TO_ADDR
// end ;
14010: PPOPN 1
14012: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 2
14026: PUSH
14027: LD_INT 1
14029: EQUAL
14030: AND
14031: PUSH
14032: LD_VAR 0 1
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: PUSH
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_EXP 17
14055: PUSH
14056: LD_INT 1
14058: EQUAL
14059: AND
14060: OR
14061: IFFALSE 14067
// Dial_SecondAttack ;
14063: CALL 6037 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14067: LD_VAR 0 1
14071: PUSH
14072: LD_INT 3
14074: EQUAL
14075: PUSH
14076: LD_VAR 0 2
14080: PUSH
14081: LD_INT 6
14083: EQUAL
14084: AND
14085: PUSH
14086: LD_EXP 18
14090: NOT
14091: AND
14092: IFFALSE 14098
// Dialogue_AttackComrade ;
14094: CALL 4123 0 0
// end ; end_of_file
14098: PPOPN 2
14100: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14101: LD_EXP 53
14105: PPUSH
14106: CALL_OW 255
14110: PUSH
14111: LD_INT 3
14113: EQUAL
14114: PUSH
14115: LD_EXP 26
14119: PUSH
14120: LD_INT 525
14122: LESS
14123: AND
14124: IFFALSE 14136
14126: GO 14128
14128: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14129: LD_STRING ACH_YELENA
14131: PPUSH
14132: CALL_OW 543
14136: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14137: LD_INT 23
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 25
14152: PUSH
14153: LD_INT 14
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 25
14162: PUSH
14163: LD_INT 18
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 25
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: NOT
14195: IFFALSE 14207
14197: GO 14199
14199: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14200: LD_STRING ACH_NATURE
14202: PPUSH
14203: CALL_OW 543
14207: END
// every 0 0$1 trigger Attacks ( Burlak ) = am_bun and belkovWaitForGorky do
14208: LD_EXP 46
14212: PPUSH
14213: CALL_OW 320
14217: PUSH
14218: LD_INT 23
14220: EQUAL
14221: PUSH
14222: LD_EXP 16
14226: AND
14227: IFFALSE 14320
14229: GO 14231
14231: DISABLE
// begin ComExitBuilding ( Johanna ) ;
14232: LD_EXP 43
14236: PPUSH
14237: CALL_OW 122
// wait ( 0 0$1 ) ;
14241: LD_INT 35
14243: PPUSH
14244: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14248: LD_INT 35
14250: PPUSH
14251: CALL_OW 67
// ComAttackUnit ( Johanna , Burlak ) ;
14255: LD_EXP 43
14259: PPUSH
14260: LD_EXP 46
14264: PPUSH
14265: CALL_OW 115
// until IsDead ( Burlak ) or GetDistUnits ( Burlak , Johanna ) > 10 or not belkovWaitForGorky ;
14269: LD_EXP 46
14273: PPUSH
14274: CALL_OW 301
14278: PUSH
14279: LD_EXP 46
14283: PPUSH
14284: LD_EXP 43
14288: PPUSH
14289: CALL_OW 296
14293: PUSH
14294: LD_INT 10
14296: GREATER
14297: OR
14298: PUSH
14299: LD_EXP 16
14303: NOT
14304: OR
14305: IFFALSE 14248
// ComEnterUnit ( Johanna , am_bun ) ;
14307: LD_EXP 43
14311: PPUSH
14312: LD_INT 23
14314: PPUSH
14315: CALL_OW 120
// enable ;
14319: ENABLE
// end ; end_of_file
14320: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
// if not missionNumber then
14325: LD_VAR 0 2
14329: NOT
14330: IFFALSE 14334
// exit ;
14332: GO 14464
// achiv := false ;
14334: LD_ADDR_VAR 0 7
14338: PUSH
14339: LD_INT 0
14341: ST_TO_ADDR
// case campaignNumber of 1 :
14342: LD_VAR 0 1
14346: PUSH
14347: LD_INT 1
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14366
14355: POP
// achiv := ACH_GOTA ; 2 :
14356: LD_ADDR_VAR 0 7
14360: PUSH
14361: LD_STRING ACH_GOTA
14363: ST_TO_ADDR
14364: GO 14416
14366: LD_INT 2
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14377
14374: POP
// ; 3 :
14375: GO 14416
14377: LD_INT 3
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// achiv := ACH_MOTSU ; 4 :
14386: LD_ADDR_VAR 0 7
14390: PUSH
14391: LD_STRING ACH_MOTSU
14393: ST_TO_ADDR
14394: GO 14416
14396: LD_INT 4
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// achiv := ACH_LOP ; end ;
14405: LD_ADDR_VAR 0 7
14409: PUSH
14410: LD_STRING ACH_LOP
14412: ST_TO_ADDR
14413: GO 14416
14415: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14416: LD_OWVAR 67
14420: PUSH
14421: LD_INT 3
14423: EQUAL
14424: PUSH
14425: LD_VAR 0 7
14429: AND
14430: PUSH
14431: LD_VAR 0 3
14435: AND
14436: PUSH
14437: LD_VAR 0 4
14441: AND
14442: PUSH
14443: LD_VAR 0 5
14447: AND
14448: IFFALSE 14464
// SetAchievementEX ( achiv , missionNumber ) ;
14450: LD_VAR 0 7
14454: PPUSH
14455: LD_VAR 0 2
14459: PPUSH
14460: CALL_OW 564
// end ;
14464: LD_VAR 0 6
14468: RET
// export function SA_BehemothConstructed ; begin
14469: LD_INT 0
14471: PPUSH
// SetAchievement ( ACH_SMC ) ;
14472: LD_STRING ACH_SMC
14474: PPUSH
14475: CALL_OW 543
// end ; end_of_file
14479: LD_VAR 0 1
14483: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14484: LD_VAR 0 2
14488: PUSH
14489: LD_INT 100
14491: EQUAL
14492: IFFALSE 15441
// begin if not StreamModeActive then
14494: LD_EXP 57
14498: NOT
14499: IFFALSE 14509
// StreamModeActive := true ;
14501: LD_ADDR_EXP 57
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// if p3 = 0 then
14509: LD_VAR 0 3
14513: PUSH
14514: LD_INT 0
14516: EQUAL
14517: IFFALSE 14523
// InitStreamMode ;
14519: CALL 15599 0 0
// if p3 = 1 then
14523: LD_VAR 0 3
14527: PUSH
14528: LD_INT 1
14530: EQUAL
14531: IFFALSE 14541
// sRocket := true ;
14533: LD_ADDR_EXP 62
14537: PUSH
14538: LD_INT 1
14540: ST_TO_ADDR
// if p3 = 2 then
14541: LD_VAR 0 3
14545: PUSH
14546: LD_INT 2
14548: EQUAL
14549: IFFALSE 14559
// sSpeed := true ;
14551: LD_ADDR_EXP 61
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// if p3 = 3 then
14559: LD_VAR 0 3
14563: PUSH
14564: LD_INT 3
14566: EQUAL
14567: IFFALSE 14577
// sEngine := true ;
14569: LD_ADDR_EXP 63
14573: PUSH
14574: LD_INT 1
14576: ST_TO_ADDR
// if p3 = 4 then
14577: LD_VAR 0 3
14581: PUSH
14582: LD_INT 4
14584: EQUAL
14585: IFFALSE 14595
// sSpec := true ;
14587: LD_ADDR_EXP 60
14591: PUSH
14592: LD_INT 1
14594: ST_TO_ADDR
// if p3 = 5 then
14595: LD_VAR 0 3
14599: PUSH
14600: LD_INT 5
14602: EQUAL
14603: IFFALSE 14613
// sLevel := true ;
14605: LD_ADDR_EXP 64
14609: PUSH
14610: LD_INT 1
14612: ST_TO_ADDR
// if p3 = 6 then
14613: LD_VAR 0 3
14617: PUSH
14618: LD_INT 6
14620: EQUAL
14621: IFFALSE 14631
// sArmoury := true ;
14623: LD_ADDR_EXP 65
14627: PUSH
14628: LD_INT 1
14630: ST_TO_ADDR
// if p3 = 7 then
14631: LD_VAR 0 3
14635: PUSH
14636: LD_INT 7
14638: EQUAL
14639: IFFALSE 14649
// sRadar := true ;
14641: LD_ADDR_EXP 66
14645: PUSH
14646: LD_INT 1
14648: ST_TO_ADDR
// if p3 = 8 then
14649: LD_VAR 0 3
14653: PUSH
14654: LD_INT 8
14656: EQUAL
14657: IFFALSE 14667
// sBunker := true ;
14659: LD_ADDR_EXP 67
14663: PUSH
14664: LD_INT 1
14666: ST_TO_ADDR
// if p3 = 9 then
14667: LD_VAR 0 3
14671: PUSH
14672: LD_INT 9
14674: EQUAL
14675: IFFALSE 14685
// sHack := true ;
14677: LD_ADDR_EXP 68
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// if p3 = 10 then
14685: LD_VAR 0 3
14689: PUSH
14690: LD_INT 10
14692: EQUAL
14693: IFFALSE 14703
// sFire := true ;
14695: LD_ADDR_EXP 69
14699: PUSH
14700: LD_INT 1
14702: ST_TO_ADDR
// if p3 = 11 then
14703: LD_VAR 0 3
14707: PUSH
14708: LD_INT 11
14710: EQUAL
14711: IFFALSE 14721
// sRefresh := true ;
14713: LD_ADDR_EXP 70
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// if p3 = 12 then
14721: LD_VAR 0 3
14725: PUSH
14726: LD_INT 12
14728: EQUAL
14729: IFFALSE 14739
// sExp := true ;
14731: LD_ADDR_EXP 71
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// if p3 = 13 then
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 13
14746: EQUAL
14747: IFFALSE 14757
// sDepot := true ;
14749: LD_ADDR_EXP 72
14753: PUSH
14754: LD_INT 1
14756: ST_TO_ADDR
// if p3 = 14 then
14757: LD_VAR 0 3
14761: PUSH
14762: LD_INT 14
14764: EQUAL
14765: IFFALSE 14775
// sFlag := true ;
14767: LD_ADDR_EXP 73
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if p3 = 15 then
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 15
14782: EQUAL
14783: IFFALSE 14793
// sKamikadze := true ;
14785: LD_ADDR_EXP 81
14789: PUSH
14790: LD_INT 1
14792: ST_TO_ADDR
// if p3 = 16 then
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 16
14800: EQUAL
14801: IFFALSE 14811
// sTroll := true ;
14803: LD_ADDR_EXP 82
14807: PUSH
14808: LD_INT 1
14810: ST_TO_ADDR
// if p3 = 17 then
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 17
14818: EQUAL
14819: IFFALSE 14829
// sSlow := true ;
14821: LD_ADDR_EXP 83
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// if p3 = 18 then
14829: LD_VAR 0 3
14833: PUSH
14834: LD_INT 18
14836: EQUAL
14837: IFFALSE 14847
// sLack := true ;
14839: LD_ADDR_EXP 84
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// if p3 = 19 then
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 19
14854: EQUAL
14855: IFFALSE 14865
// sTank := true ;
14857: LD_ADDR_EXP 86
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// if p3 = 20 then
14865: LD_VAR 0 3
14869: PUSH
14870: LD_INT 20
14872: EQUAL
14873: IFFALSE 14883
// sRemote := true ;
14875: LD_ADDR_EXP 87
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// if p3 = 21 then
14883: LD_VAR 0 3
14887: PUSH
14888: LD_INT 21
14890: EQUAL
14891: IFFALSE 14901
// sPowell := true ;
14893: LD_ADDR_EXP 88
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// if p3 = 22 then
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 22
14908: EQUAL
14909: IFFALSE 14919
// sTeleport := true ;
14911: LD_ADDR_EXP 91
14915: PUSH
14916: LD_INT 1
14918: ST_TO_ADDR
// if p3 = 23 then
14919: LD_VAR 0 3
14923: PUSH
14924: LD_INT 23
14926: EQUAL
14927: IFFALSE 14937
// sOilTower := true ;
14929: LD_ADDR_EXP 93
14933: PUSH
14934: LD_INT 1
14936: ST_TO_ADDR
// if p3 = 24 then
14937: LD_VAR 0 3
14941: PUSH
14942: LD_INT 24
14944: EQUAL
14945: IFFALSE 14955
// sShovel := true ;
14947: LD_ADDR_EXP 94
14951: PUSH
14952: LD_INT 1
14954: ST_TO_ADDR
// if p3 = 25 then
14955: LD_VAR 0 3
14959: PUSH
14960: LD_INT 25
14962: EQUAL
14963: IFFALSE 14973
// sSheik := true ;
14965: LD_ADDR_EXP 95
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// if p3 = 26 then
14973: LD_VAR 0 3
14977: PUSH
14978: LD_INT 26
14980: EQUAL
14981: IFFALSE 14991
// sEarthquake := true ;
14983: LD_ADDR_EXP 97
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if p3 = 27 then
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 27
14998: EQUAL
14999: IFFALSE 15009
// sAI := true ;
15001: LD_ADDR_EXP 98
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// if p3 = 28 then
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 28
15016: EQUAL
15017: IFFALSE 15027
// sCargo := true ;
15019: LD_ADDR_EXP 101
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// if p3 = 29 then
15027: LD_VAR 0 3
15031: PUSH
15032: LD_INT 29
15034: EQUAL
15035: IFFALSE 15045
// sDLaser := true ;
15037: LD_ADDR_EXP 102
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// if p3 = 30 then
15045: LD_VAR 0 3
15049: PUSH
15050: LD_INT 30
15052: EQUAL
15053: IFFALSE 15063
// sExchange := true ;
15055: LD_ADDR_EXP 103
15059: PUSH
15060: LD_INT 1
15062: ST_TO_ADDR
// if p3 = 31 then
15063: LD_VAR 0 3
15067: PUSH
15068: LD_INT 31
15070: EQUAL
15071: IFFALSE 15081
// sFac := true ;
15073: LD_ADDR_EXP 104
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
// if p3 = 32 then
15081: LD_VAR 0 3
15085: PUSH
15086: LD_INT 32
15088: EQUAL
15089: IFFALSE 15099
// sPower := true ;
15091: LD_ADDR_EXP 105
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// if p3 = 33 then
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 33
15106: EQUAL
15107: IFFALSE 15117
// sRandom := true ;
15109: LD_ADDR_EXP 106
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// if p3 = 34 then
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 34
15124: EQUAL
15125: IFFALSE 15135
// sShield := true ;
15127: LD_ADDR_EXP 107
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// if p3 = 35 then
15135: LD_VAR 0 3
15139: PUSH
15140: LD_INT 35
15142: EQUAL
15143: IFFALSE 15153
// sTime := true ;
15145: LD_ADDR_EXP 108
15149: PUSH
15150: LD_INT 1
15152: ST_TO_ADDR
// if p3 = 36 then
15153: LD_VAR 0 3
15157: PUSH
15158: LD_INT 36
15160: EQUAL
15161: IFFALSE 15171
// sTools := true ;
15163: LD_ADDR_EXP 109
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// if p3 = 101 then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 101
15178: EQUAL
15179: IFFALSE 15189
// sSold := true ;
15181: LD_ADDR_EXP 74
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// if p3 = 102 then
15189: LD_VAR 0 3
15193: PUSH
15194: LD_INT 102
15196: EQUAL
15197: IFFALSE 15207
// sDiff := true ;
15199: LD_ADDR_EXP 75
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 103 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 103
15214: EQUAL
15215: IFFALSE 15225
// sFog := true ;
15217: LD_ADDR_EXP 78
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// if p3 = 104 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 104
15232: EQUAL
15233: IFFALSE 15243
// sReset := true ;
15235: LD_ADDR_EXP 79
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// if p3 = 105 then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 105
15250: EQUAL
15251: IFFALSE 15261
// sSun := true ;
15253: LD_ADDR_EXP 80
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// if p3 = 106 then
15261: LD_VAR 0 3
15265: PUSH
15266: LD_INT 106
15268: EQUAL
15269: IFFALSE 15279
// sTiger := true ;
15271: LD_ADDR_EXP 76
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if p3 = 107 then
15279: LD_VAR 0 3
15283: PUSH
15284: LD_INT 107
15286: EQUAL
15287: IFFALSE 15297
// sBomb := true ;
15289: LD_ADDR_EXP 77
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// if p3 = 108 then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 108
15304: EQUAL
15305: IFFALSE 15315
// sWound := true ;
15307: LD_ADDR_EXP 85
15311: PUSH
15312: LD_INT 1
15314: ST_TO_ADDR
// if p3 = 109 then
15315: LD_VAR 0 3
15319: PUSH
15320: LD_INT 109
15322: EQUAL
15323: IFFALSE 15333
// sBetray := true ;
15325: LD_ADDR_EXP 89
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if p3 = 110 then
15333: LD_VAR 0 3
15337: PUSH
15338: LD_INT 110
15340: EQUAL
15341: IFFALSE 15351
// sContamin := true ;
15343: LD_ADDR_EXP 90
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// if p3 = 111 then
15351: LD_VAR 0 3
15355: PUSH
15356: LD_INT 111
15358: EQUAL
15359: IFFALSE 15369
// sOil := true ;
15361: LD_ADDR_EXP 92
15365: PUSH
15366: LD_INT 1
15368: ST_TO_ADDR
// if p3 = 112 then
15369: LD_VAR 0 3
15373: PUSH
15374: LD_INT 112
15376: EQUAL
15377: IFFALSE 15387
// sStu := true ;
15379: LD_ADDR_EXP 96
15383: PUSH
15384: LD_INT 1
15386: ST_TO_ADDR
// if p3 = 113 then
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 113
15394: EQUAL
15395: IFFALSE 15405
// sBazooka := true ;
15397: LD_ADDR_EXP 99
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// if p3 = 114 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 114
15412: EQUAL
15413: IFFALSE 15423
// sMortar := true ;
15415: LD_ADDR_EXP 100
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 115 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 115
15430: EQUAL
15431: IFFALSE 15441
// sRanger := true ;
15433: LD_ADDR_EXP 110
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// end ; if p2 = 101 then
15441: LD_VAR 0 2
15445: PUSH
15446: LD_INT 101
15448: EQUAL
15449: IFFALSE 15577
// begin case p3 of 1 :
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 1
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15471
15464: POP
// hHackUnlimitedResources ; 2 :
15465: CALL 26612 0 0
15469: GO 15577
15471: LD_INT 2
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15486
15479: POP
// hHackSetLevel10 ; 3 :
15480: CALL 26745 0 0
15484: GO 15577
15486: LD_INT 3
15488: DOUBLE
15489: EQUAL
15490: IFTRUE 15494
15492: GO 15501
15494: POP
// hHackSetLevel10YourUnits ; 4 :
15495: CALL 26830 0 0
15499: GO 15577
15501: LD_INT 4
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15516
15509: POP
// hHackInvincible ; 5 :
15510: CALL 27278 0 0
15514: GO 15577
15516: LD_INT 5
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15531
15524: POP
// hHackInvisible ; 6 :
15525: CALL 27389 0 0
15529: GO 15577
15531: LD_INT 6
15533: DOUBLE
15534: EQUAL
15535: IFTRUE 15539
15537: GO 15546
15539: POP
// hHackChangeYourSide ; 7 :
15540: CALL 27446 0 0
15544: GO 15577
15546: LD_INT 7
15548: DOUBLE
15549: EQUAL
15550: IFTRUE 15554
15552: GO 15561
15554: POP
// hHackChangeUnitSide ; 8 :
15555: CALL 27488 0 0
15559: GO 15577
15561: LD_INT 8
15563: DOUBLE
15564: EQUAL
15565: IFTRUE 15569
15567: GO 15576
15569: POP
// hHackFog ; end ;
15570: CALL 27589 0 0
15574: GO 15577
15576: POP
// end ; end ;
15577: PPOPN 6
15579: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15580: GO 15582
15582: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15583: LD_STRING initStreamRollete();
15585: PPUSH
15586: CALL_OW 559
// InitStreamMode ;
15590: CALL 15599 0 0
// DefineStreamItems ( ) ;
15594: CALL 16039 0 0
// end ;
15598: END
// function InitStreamMode ; begin
15599: LD_INT 0
15601: PPUSH
// streamModeActive := false ;
15602: LD_ADDR_EXP 57
15606: PUSH
15607: LD_INT 0
15609: ST_TO_ADDR
// normalCounter := 36 ;
15610: LD_ADDR_EXP 58
15614: PUSH
15615: LD_INT 36
15617: ST_TO_ADDR
// hardcoreCounter := 16 ;
15618: LD_ADDR_EXP 59
15622: PUSH
15623: LD_INT 16
15625: ST_TO_ADDR
// sRocket := false ;
15626: LD_ADDR_EXP 62
15630: PUSH
15631: LD_INT 0
15633: ST_TO_ADDR
// sSpeed := false ;
15634: LD_ADDR_EXP 61
15638: PUSH
15639: LD_INT 0
15641: ST_TO_ADDR
// sEngine := false ;
15642: LD_ADDR_EXP 63
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// sSpec := false ;
15650: LD_ADDR_EXP 60
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// sLevel := false ;
15658: LD_ADDR_EXP 64
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// sArmoury := false ;
15666: LD_ADDR_EXP 65
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// sRadar := false ;
15674: LD_ADDR_EXP 66
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// sBunker := false ;
15682: LD_ADDR_EXP 67
15686: PUSH
15687: LD_INT 0
15689: ST_TO_ADDR
// sHack := false ;
15690: LD_ADDR_EXP 68
15694: PUSH
15695: LD_INT 0
15697: ST_TO_ADDR
// sFire := false ;
15698: LD_ADDR_EXP 69
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// sRefresh := false ;
15706: LD_ADDR_EXP 70
15710: PUSH
15711: LD_INT 0
15713: ST_TO_ADDR
// sExp := false ;
15714: LD_ADDR_EXP 71
15718: PUSH
15719: LD_INT 0
15721: ST_TO_ADDR
// sDepot := false ;
15722: LD_ADDR_EXP 72
15726: PUSH
15727: LD_INT 0
15729: ST_TO_ADDR
// sFlag := false ;
15730: LD_ADDR_EXP 73
15734: PUSH
15735: LD_INT 0
15737: ST_TO_ADDR
// sKamikadze := false ;
15738: LD_ADDR_EXP 81
15742: PUSH
15743: LD_INT 0
15745: ST_TO_ADDR
// sTroll := false ;
15746: LD_ADDR_EXP 82
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// sSlow := false ;
15754: LD_ADDR_EXP 83
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
// sLack := false ;
15762: LD_ADDR_EXP 84
15766: PUSH
15767: LD_INT 0
15769: ST_TO_ADDR
// sTank := false ;
15770: LD_ADDR_EXP 86
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// sRemote := false ;
15778: LD_ADDR_EXP 87
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// sPowell := false ;
15786: LD_ADDR_EXP 88
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// sTeleport := false ;
15794: LD_ADDR_EXP 91
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// sOilTower := false ;
15802: LD_ADDR_EXP 93
15806: PUSH
15807: LD_INT 0
15809: ST_TO_ADDR
// sShovel := false ;
15810: LD_ADDR_EXP 94
15814: PUSH
15815: LD_INT 0
15817: ST_TO_ADDR
// sSheik := false ;
15818: LD_ADDR_EXP 95
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// sEarthquake := false ;
15826: LD_ADDR_EXP 97
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// sAI := false ;
15834: LD_ADDR_EXP 98
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// sCargo := false ;
15842: LD_ADDR_EXP 101
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// sDLaser := false ;
15850: LD_ADDR_EXP 102
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// sExchange := false ;
15858: LD_ADDR_EXP 103
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// sFac := false ;
15866: LD_ADDR_EXP 104
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// sPower := false ;
15874: LD_ADDR_EXP 105
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// sRandom := false ;
15882: LD_ADDR_EXP 106
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// sShield := false ;
15890: LD_ADDR_EXP 107
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// sTime := false ;
15898: LD_ADDR_EXP 108
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sTools := false ;
15906: LD_ADDR_EXP 109
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sSold := false ;
15914: LD_ADDR_EXP 74
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sDiff := false ;
15922: LD_ADDR_EXP 75
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sFog := false ;
15930: LD_ADDR_EXP 78
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sReset := false ;
15938: LD_ADDR_EXP 79
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sSun := false ;
15946: LD_ADDR_EXP 80
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sTiger := false ;
15954: LD_ADDR_EXP 76
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sBomb := false ;
15962: LD_ADDR_EXP 77
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// sWound := false ;
15970: LD_ADDR_EXP 85
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// sBetray := false ;
15978: LD_ADDR_EXP 89
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// sContamin := false ;
15986: LD_ADDR_EXP 90
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// sOil := false ;
15994: LD_ADDR_EXP 92
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// sStu := false ;
16002: LD_ADDR_EXP 96
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// sBazooka := false ;
16010: LD_ADDR_EXP 99
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// sMortar := false ;
16018: LD_ADDR_EXP 100
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// sRanger := false ;
16026: LD_ADDR_EXP 110
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// end ;
16034: LD_VAR 0 1
16038: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16039: LD_INT 0
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
// result := [ ] ;
16046: LD_ADDR_VAR 0 1
16050: PUSH
16051: EMPTY
16052: ST_TO_ADDR
// if campaign_id = 1 then
16053: LD_OWVAR 69
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: IFFALSE 18999
// begin case mission_number of 1 :
16063: LD_OWVAR 70
16067: PUSH
16068: LD_INT 1
16070: DOUBLE
16071: EQUAL
16072: IFTRUE 16076
16074: GO 16140
16076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16077: LD_ADDR_VAR 0 1
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 4
16087: PUSH
16088: LD_INT 11
16090: PUSH
16091: LD_INT 12
16093: PUSH
16094: LD_INT 15
16096: PUSH
16097: LD_INT 16
16099: PUSH
16100: LD_INT 22
16102: PUSH
16103: LD_INT 23
16105: PUSH
16106: LD_INT 26
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 101
16122: PUSH
16123: LD_INT 102
16125: PUSH
16126: LD_INT 106
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: ST_TO_ADDR
16138: GO 18997
16140: LD_INT 2
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16220
16148: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 4
16159: PUSH
16160: LD_INT 11
16162: PUSH
16163: LD_INT 12
16165: PUSH
16166: LD_INT 15
16168: PUSH
16169: LD_INT 16
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_INT 23
16177: PUSH
16178: LD_INT 26
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 101
16194: PUSH
16195: LD_INT 102
16197: PUSH
16198: LD_INT 105
16200: PUSH
16201: LD_INT 106
16203: PUSH
16204: LD_INT 108
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: ST_TO_ADDR
16218: GO 18997
16220: LD_INT 3
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16304
16228: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 2
16236: PUSH
16237: LD_INT 4
16239: PUSH
16240: LD_INT 5
16242: PUSH
16243: LD_INT 11
16245: PUSH
16246: LD_INT 12
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: LD_INT 16
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_INT 26
16260: PUSH
16261: LD_INT 36
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 101
16278: PUSH
16279: LD_INT 102
16281: PUSH
16282: LD_INT 105
16284: PUSH
16285: LD_INT 106
16287: PUSH
16288: LD_INT 108
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: ST_TO_ADDR
16302: GO 18997
16304: LD_INT 4
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16396
16312: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16313: LD_ADDR_VAR 0 1
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: LD_INT 4
16323: PUSH
16324: LD_INT 5
16326: PUSH
16327: LD_INT 8
16329: PUSH
16330: LD_INT 11
16332: PUSH
16333: LD_INT 12
16335: PUSH
16336: LD_INT 15
16338: PUSH
16339: LD_INT 16
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_INT 23
16347: PUSH
16348: LD_INT 26
16350: PUSH
16351: LD_INT 36
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 101
16370: PUSH
16371: LD_INT 102
16373: PUSH
16374: LD_INT 105
16376: PUSH
16377: LD_INT 106
16379: PUSH
16380: LD_INT 108
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: ST_TO_ADDR
16394: GO 18997
16396: LD_INT 5
16398: DOUBLE
16399: EQUAL
16400: IFTRUE 16404
16402: GO 16504
16404: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: LD_INT 5
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 11
16427: PUSH
16428: LD_INT 12
16430: PUSH
16431: LD_INT 15
16433: PUSH
16434: LD_INT 16
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_INT 23
16442: PUSH
16443: LD_INT 25
16445: PUSH
16446: LD_INT 26
16448: PUSH
16449: LD_INT 36
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 101
16470: PUSH
16471: LD_INT 102
16473: PUSH
16474: LD_INT 105
16476: PUSH
16477: LD_INT 106
16479: PUSH
16480: LD_INT 108
16482: PUSH
16483: LD_INT 109
16485: PUSH
16486: LD_INT 112
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: ST_TO_ADDR
16502: GO 18997
16504: LD_INT 6
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 16632
16512: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 4
16523: PUSH
16524: LD_INT 5
16526: PUSH
16527: LD_INT 6
16529: PUSH
16530: LD_INT 8
16532: PUSH
16533: LD_INT 11
16535: PUSH
16536: LD_INT 12
16538: PUSH
16539: LD_INT 15
16541: PUSH
16542: LD_INT 16
16544: PUSH
16545: LD_INT 20
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 22
16553: PUSH
16554: LD_INT 23
16556: PUSH
16557: LD_INT 25
16559: PUSH
16560: LD_INT 26
16562: PUSH
16563: LD_INT 30
16565: PUSH
16566: LD_INT 31
16568: PUSH
16569: LD_INT 32
16571: PUSH
16572: LD_INT 36
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 101
16598: PUSH
16599: LD_INT 102
16601: PUSH
16602: LD_INT 105
16604: PUSH
16605: LD_INT 106
16607: PUSH
16608: LD_INT 108
16610: PUSH
16611: LD_INT 109
16613: PUSH
16614: LD_INT 112
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: ST_TO_ADDR
16630: GO 18997
16632: LD_INT 7
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16740
16640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: LD_INT 5
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: LD_INT 11
16660: PUSH
16661: LD_INT 12
16663: PUSH
16664: LD_INT 15
16666: PUSH
16667: LD_INT 16
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 22
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 25
16684: PUSH
16685: LD_INT 26
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 101
16706: PUSH
16707: LD_INT 102
16709: PUSH
16710: LD_INT 103
16712: PUSH
16713: LD_INT 105
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 108
16721: PUSH
16722: LD_INT 112
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: ST_TO_ADDR
16738: GO 18997
16740: LD_INT 8
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16876
16748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16749: LD_ADDR_VAR 0 1
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 6
16765: PUSH
16766: LD_INT 7
16768: PUSH
16769: LD_INT 8
16771: PUSH
16772: LD_INT 11
16774: PUSH
16775: LD_INT 12
16777: PUSH
16778: LD_INT 15
16780: PUSH
16781: LD_INT 16
16783: PUSH
16784: LD_INT 20
16786: PUSH
16787: LD_INT 21
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_INT 23
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 26
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 31
16807: PUSH
16808: LD_INT 32
16810: PUSH
16811: LD_INT 36
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 101
16838: PUSH
16839: LD_INT 102
16841: PUSH
16842: LD_INT 103
16844: PUSH
16845: LD_INT 105
16847: PUSH
16848: LD_INT 106
16850: PUSH
16851: LD_INT 108
16853: PUSH
16854: LD_INT 109
16856: PUSH
16857: LD_INT 112
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: ST_TO_ADDR
16874: GO 18997
16876: LD_INT 9
16878: DOUBLE
16879: EQUAL
16880: IFTRUE 16884
16882: GO 17020
16884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: LD_INT 4
16895: PUSH
16896: LD_INT 5
16898: PUSH
16899: LD_INT 6
16901: PUSH
16902: LD_INT 7
16904: PUSH
16905: LD_INT 8
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 28
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 31
16946: PUSH
16947: LD_INT 32
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 101
16978: PUSH
16979: LD_INT 102
16981: PUSH
16982: LD_INT 103
16984: PUSH
16985: LD_INT 105
16987: PUSH
16988: LD_INT 106
16990: PUSH
16991: LD_INT 108
16993: PUSH
16994: LD_INT 109
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 114
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: ST_TO_ADDR
17018: GO 18997
17020: LD_INT 10
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17212
17028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 4
17039: PUSH
17040: LD_INT 5
17042: PUSH
17043: LD_INT 6
17045: PUSH
17046: LD_INT 7
17048: PUSH
17049: LD_INT 8
17051: PUSH
17052: LD_INT 9
17054: PUSH
17055: LD_INT 10
17057: PUSH
17058: LD_INT 11
17060: PUSH
17061: LD_INT 12
17063: PUSH
17064: LD_INT 13
17066: PUSH
17067: LD_INT 14
17069: PUSH
17070: LD_INT 15
17072: PUSH
17073: LD_INT 16
17075: PUSH
17076: LD_INT 17
17078: PUSH
17079: LD_INT 18
17081: PUSH
17082: LD_INT 19
17084: PUSH
17085: LD_INT 20
17087: PUSH
17088: LD_INT 21
17090: PUSH
17091: LD_INT 22
17093: PUSH
17094: LD_INT 23
17096: PUSH
17097: LD_INT 24
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 26
17105: PUSH
17106: LD_INT 28
17108: PUSH
17109: LD_INT 30
17111: PUSH
17112: LD_INT 31
17114: PUSH
17115: LD_INT 32
17117: PUSH
17118: LD_INT 36
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 101
17154: PUSH
17155: LD_INT 102
17157: PUSH
17158: LD_INT 103
17160: PUSH
17161: LD_INT 104
17163: PUSH
17164: LD_INT 105
17166: PUSH
17167: LD_INT 106
17169: PUSH
17170: LD_INT 107
17172: PUSH
17173: LD_INT 108
17175: PUSH
17176: LD_INT 109
17178: PUSH
17179: LD_INT 110
17181: PUSH
17182: LD_INT 111
17184: PUSH
17185: LD_INT 112
17187: PUSH
17188: LD_INT 114
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
17210: GO 18997
17212: LD_INT 11
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17412
17220: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17221: LD_ADDR_VAR 0 1
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: LD_INT 4
17234: PUSH
17235: LD_INT 5
17237: PUSH
17238: LD_INT 6
17240: PUSH
17241: LD_INT 7
17243: PUSH
17244: LD_INT 8
17246: PUSH
17247: LD_INT 9
17249: PUSH
17250: LD_INT 10
17252: PUSH
17253: LD_INT 11
17255: PUSH
17256: LD_INT 12
17258: PUSH
17259: LD_INT 13
17261: PUSH
17262: LD_INT 14
17264: PUSH
17265: LD_INT 15
17267: PUSH
17268: LD_INT 16
17270: PUSH
17271: LD_INT 17
17273: PUSH
17274: LD_INT 18
17276: PUSH
17277: LD_INT 19
17279: PUSH
17280: LD_INT 20
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 22
17288: PUSH
17289: LD_INT 23
17291: PUSH
17292: LD_INT 24
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 28
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 31
17309: PUSH
17310: LD_INT 32
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 36
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 101
17354: PUSH
17355: LD_INT 102
17357: PUSH
17358: LD_INT 103
17360: PUSH
17361: LD_INT 104
17363: PUSH
17364: LD_INT 105
17366: PUSH
17367: LD_INT 106
17369: PUSH
17370: LD_INT 107
17372: PUSH
17373: LD_INT 108
17375: PUSH
17376: LD_INT 109
17378: PUSH
17379: LD_INT 110
17381: PUSH
17382: LD_INT 111
17384: PUSH
17385: LD_INT 112
17387: PUSH
17388: LD_INT 114
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: ST_TO_ADDR
17410: GO 18997
17412: LD_INT 12
17414: DOUBLE
17415: EQUAL
17416: IFTRUE 17420
17418: GO 17628
17420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: LD_INT 4
17437: PUSH
17438: LD_INT 5
17440: PUSH
17441: LD_INT 6
17443: PUSH
17444: LD_INT 7
17446: PUSH
17447: LD_INT 8
17449: PUSH
17450: LD_INT 9
17452: PUSH
17453: LD_INT 10
17455: PUSH
17456: LD_INT 11
17458: PUSH
17459: LD_INT 12
17461: PUSH
17462: LD_INT 13
17464: PUSH
17465: LD_INT 14
17467: PUSH
17468: LD_INT 15
17470: PUSH
17471: LD_INT 16
17473: PUSH
17474: LD_INT 17
17476: PUSH
17477: LD_INT 18
17479: PUSH
17480: LD_INT 19
17482: PUSH
17483: LD_INT 20
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 22
17491: PUSH
17492: LD_INT 23
17494: PUSH
17495: LD_INT 24
17497: PUSH
17498: LD_INT 25
17500: PUSH
17501: LD_INT 26
17503: PUSH
17504: LD_INT 27
17506: PUSH
17507: LD_INT 28
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: LD_INT 31
17515: PUSH
17516: LD_INT 32
17518: PUSH
17519: LD_INT 33
17521: PUSH
17522: LD_INT 34
17524: PUSH
17525: LD_INT 36
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 101
17566: PUSH
17567: LD_INT 102
17569: PUSH
17570: LD_INT 103
17572: PUSH
17573: LD_INT 104
17575: PUSH
17576: LD_INT 105
17578: PUSH
17579: LD_INT 106
17581: PUSH
17582: LD_INT 107
17584: PUSH
17585: LD_INT 108
17587: PUSH
17588: LD_INT 109
17590: PUSH
17591: LD_INT 110
17593: PUSH
17594: LD_INT 111
17596: PUSH
17597: LD_INT 112
17599: PUSH
17600: LD_INT 113
17602: PUSH
17603: LD_INT 114
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 18997
17628: LD_INT 13
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17832
17636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 3
17650: PUSH
17651: LD_INT 4
17653: PUSH
17654: LD_INT 5
17656: PUSH
17657: LD_INT 8
17659: PUSH
17660: LD_INT 9
17662: PUSH
17663: LD_INT 10
17665: PUSH
17666: LD_INT 11
17668: PUSH
17669: LD_INT 12
17671: PUSH
17672: LD_INT 14
17674: PUSH
17675: LD_INT 15
17677: PUSH
17678: LD_INT 16
17680: PUSH
17681: LD_INT 17
17683: PUSH
17684: LD_INT 18
17686: PUSH
17687: LD_INT 19
17689: PUSH
17690: LD_INT 20
17692: PUSH
17693: LD_INT 21
17695: PUSH
17696: LD_INT 22
17698: PUSH
17699: LD_INT 23
17701: PUSH
17702: LD_INT 24
17704: PUSH
17705: LD_INT 25
17707: PUSH
17708: LD_INT 26
17710: PUSH
17711: LD_INT 27
17713: PUSH
17714: LD_INT 28
17716: PUSH
17717: LD_INT 30
17719: PUSH
17720: LD_INT 31
17722: PUSH
17723: LD_INT 32
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: LD_INT 34
17731: PUSH
17732: LD_INT 36
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 101
17770: PUSH
17771: LD_INT 102
17773: PUSH
17774: LD_INT 103
17776: PUSH
17777: LD_INT 104
17779: PUSH
17780: LD_INT 105
17782: PUSH
17783: LD_INT 106
17785: PUSH
17786: LD_INT 107
17788: PUSH
17789: LD_INT 108
17791: PUSH
17792: LD_INT 109
17794: PUSH
17795: LD_INT 110
17797: PUSH
17798: LD_INT 111
17800: PUSH
17801: LD_INT 112
17803: PUSH
17804: LD_INT 113
17806: PUSH
17807: LD_INT 114
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: ST_TO_ADDR
17830: GO 18997
17832: LD_INT 14
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 18052
17840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17841: LD_ADDR_VAR 0 1
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: LD_INT 3
17854: PUSH
17855: LD_INT 4
17857: PUSH
17858: LD_INT 5
17860: PUSH
17861: LD_INT 6
17863: PUSH
17864: LD_INT 7
17866: PUSH
17867: LD_INT 8
17869: PUSH
17870: LD_INT 9
17872: PUSH
17873: LD_INT 10
17875: PUSH
17876: LD_INT 11
17878: PUSH
17879: LD_INT 12
17881: PUSH
17882: LD_INT 13
17884: PUSH
17885: LD_INT 14
17887: PUSH
17888: LD_INT 15
17890: PUSH
17891: LD_INT 16
17893: PUSH
17894: LD_INT 17
17896: PUSH
17897: LD_INT 18
17899: PUSH
17900: LD_INT 19
17902: PUSH
17903: LD_INT 20
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_INT 23
17914: PUSH
17915: LD_INT 24
17917: PUSH
17918: LD_INT 25
17920: PUSH
17921: LD_INT 26
17923: PUSH
17924: LD_INT 27
17926: PUSH
17927: LD_INT 28
17929: PUSH
17930: LD_INT 29
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 31
17938: PUSH
17939: LD_INT 32
17941: PUSH
17942: LD_INT 33
17944: PUSH
17945: LD_INT 34
17947: PUSH
17948: LD_INT 36
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 101
17990: PUSH
17991: LD_INT 102
17993: PUSH
17994: LD_INT 103
17996: PUSH
17997: LD_INT 104
17999: PUSH
18000: LD_INT 105
18002: PUSH
18003: LD_INT 106
18005: PUSH
18006: LD_INT 107
18008: PUSH
18009: LD_INT 108
18011: PUSH
18012: LD_INT 109
18014: PUSH
18015: LD_INT 110
18017: PUSH
18018: LD_INT 111
18020: PUSH
18021: LD_INT 112
18023: PUSH
18024: LD_INT 113
18026: PUSH
18027: LD_INT 114
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: ST_TO_ADDR
18050: GO 18997
18052: LD_INT 15
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18272
18060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18061: LD_ADDR_VAR 0 1
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: LD_INT 3
18074: PUSH
18075: LD_INT 4
18077: PUSH
18078: LD_INT 5
18080: PUSH
18081: LD_INT 6
18083: PUSH
18084: LD_INT 7
18086: PUSH
18087: LD_INT 8
18089: PUSH
18090: LD_INT 9
18092: PUSH
18093: LD_INT 10
18095: PUSH
18096: LD_INT 11
18098: PUSH
18099: LD_INT 12
18101: PUSH
18102: LD_INT 13
18104: PUSH
18105: LD_INT 14
18107: PUSH
18108: LD_INT 15
18110: PUSH
18111: LD_INT 16
18113: PUSH
18114: LD_INT 17
18116: PUSH
18117: LD_INT 18
18119: PUSH
18120: LD_INT 19
18122: PUSH
18123: LD_INT 20
18125: PUSH
18126: LD_INT 21
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_INT 23
18134: PUSH
18135: LD_INT 24
18137: PUSH
18138: LD_INT 25
18140: PUSH
18141: LD_INT 26
18143: PUSH
18144: LD_INT 27
18146: PUSH
18147: LD_INT 28
18149: PUSH
18150: LD_INT 29
18152: PUSH
18153: LD_INT 30
18155: PUSH
18156: LD_INT 31
18158: PUSH
18159: LD_INT 32
18161: PUSH
18162: LD_INT 33
18164: PUSH
18165: LD_INT 34
18167: PUSH
18168: LD_INT 36
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 101
18210: PUSH
18211: LD_INT 102
18213: PUSH
18214: LD_INT 103
18216: PUSH
18217: LD_INT 104
18219: PUSH
18220: LD_INT 105
18222: PUSH
18223: LD_INT 106
18225: PUSH
18226: LD_INT 107
18228: PUSH
18229: LD_INT 108
18231: PUSH
18232: LD_INT 109
18234: PUSH
18235: LD_INT 110
18237: PUSH
18238: LD_INT 111
18240: PUSH
18241: LD_INT 112
18243: PUSH
18244: LD_INT 113
18246: PUSH
18247: LD_INT 114
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
18270: GO 18997
18272: LD_INT 16
18274: DOUBLE
18275: EQUAL
18276: IFTRUE 18280
18278: GO 18404
18280: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18281: LD_ADDR_VAR 0 1
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: LD_INT 5
18294: PUSH
18295: LD_INT 7
18297: PUSH
18298: LD_INT 11
18300: PUSH
18301: LD_INT 12
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 20
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_INT 23
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 26
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 31
18333: PUSH
18334: LD_INT 32
18336: PUSH
18337: LD_INT 33
18339: PUSH
18340: LD_INT 34
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 101
18366: PUSH
18367: LD_INT 102
18369: PUSH
18370: LD_INT 103
18372: PUSH
18373: LD_INT 106
18375: PUSH
18376: LD_INT 108
18378: PUSH
18379: LD_INT 112
18381: PUSH
18382: LD_INT 113
18384: PUSH
18385: LD_INT 114
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: ST_TO_ADDR
18402: GO 18997
18404: LD_INT 17
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18624
18412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18413: LD_ADDR_VAR 0 1
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: LD_INT 4
18429: PUSH
18430: LD_INT 5
18432: PUSH
18433: LD_INT 6
18435: PUSH
18436: LD_INT 7
18438: PUSH
18439: LD_INT 8
18441: PUSH
18442: LD_INT 9
18444: PUSH
18445: LD_INT 10
18447: PUSH
18448: LD_INT 11
18450: PUSH
18451: LD_INT 12
18453: PUSH
18454: LD_INT 13
18456: PUSH
18457: LD_INT 14
18459: PUSH
18460: LD_INT 15
18462: PUSH
18463: LD_INT 16
18465: PUSH
18466: LD_INT 17
18468: PUSH
18469: LD_INT 18
18471: PUSH
18472: LD_INT 19
18474: PUSH
18475: LD_INT 20
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_INT 23
18486: PUSH
18487: LD_INT 24
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 26
18495: PUSH
18496: LD_INT 27
18498: PUSH
18499: LD_INT 28
18501: PUSH
18502: LD_INT 29
18504: PUSH
18505: LD_INT 30
18507: PUSH
18508: LD_INT 31
18510: PUSH
18511: LD_INT 32
18513: PUSH
18514: LD_INT 33
18516: PUSH
18517: LD_INT 34
18519: PUSH
18520: LD_INT 36
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 101
18562: PUSH
18563: LD_INT 102
18565: PUSH
18566: LD_INT 103
18568: PUSH
18569: LD_INT 104
18571: PUSH
18572: LD_INT 105
18574: PUSH
18575: LD_INT 106
18577: PUSH
18578: LD_INT 107
18580: PUSH
18581: LD_INT 108
18583: PUSH
18584: LD_INT 109
18586: PUSH
18587: LD_INT 110
18589: PUSH
18590: LD_INT 111
18592: PUSH
18593: LD_INT 112
18595: PUSH
18596: LD_INT 113
18598: PUSH
18599: LD_INT 114
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: ST_TO_ADDR
18622: GO 18997
18624: LD_INT 18
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18768
18632: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18633: LD_ADDR_VAR 0 1
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 4
18643: PUSH
18644: LD_INT 5
18646: PUSH
18647: LD_INT 7
18649: PUSH
18650: LD_INT 11
18652: PUSH
18653: LD_INT 12
18655: PUSH
18656: LD_INT 15
18658: PUSH
18659: LD_INT 16
18661: PUSH
18662: LD_INT 20
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 26
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 31
18685: PUSH
18686: LD_INT 32
18688: PUSH
18689: LD_INT 33
18691: PUSH
18692: LD_INT 34
18694: PUSH
18695: LD_INT 35
18697: PUSH
18698: LD_INT 36
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 101
18726: PUSH
18727: LD_INT 102
18729: PUSH
18730: LD_INT 103
18732: PUSH
18733: LD_INT 106
18735: PUSH
18736: LD_INT 108
18738: PUSH
18739: LD_INT 112
18741: PUSH
18742: LD_INT 113
18744: PUSH
18745: LD_INT 114
18747: PUSH
18748: LD_INT 115
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: ST_TO_ADDR
18766: GO 18997
18768: LD_INT 19
18770: DOUBLE
18771: EQUAL
18772: IFTRUE 18776
18774: GO 18996
18776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: LD_INT 4
18793: PUSH
18794: LD_INT 5
18796: PUSH
18797: LD_INT 6
18799: PUSH
18800: LD_INT 7
18802: PUSH
18803: LD_INT 8
18805: PUSH
18806: LD_INT 9
18808: PUSH
18809: LD_INT 10
18811: PUSH
18812: LD_INT 11
18814: PUSH
18815: LD_INT 12
18817: PUSH
18818: LD_INT 13
18820: PUSH
18821: LD_INT 14
18823: PUSH
18824: LD_INT 15
18826: PUSH
18827: LD_INT 16
18829: PUSH
18830: LD_INT 17
18832: PUSH
18833: LD_INT 18
18835: PUSH
18836: LD_INT 19
18838: PUSH
18839: LD_INT 20
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 24
18853: PUSH
18854: LD_INT 25
18856: PUSH
18857: LD_INT 26
18859: PUSH
18860: LD_INT 27
18862: PUSH
18863: LD_INT 28
18865: PUSH
18866: LD_INT 29
18868: PUSH
18869: LD_INT 30
18871: PUSH
18872: LD_INT 31
18874: PUSH
18875: LD_INT 32
18877: PUSH
18878: LD_INT 33
18880: PUSH
18881: LD_INT 34
18883: PUSH
18884: LD_INT 35
18886: PUSH
18887: LD_INT 36
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 101
18930: PUSH
18931: LD_INT 102
18933: PUSH
18934: LD_INT 103
18936: PUSH
18937: LD_INT 104
18939: PUSH
18940: LD_INT 105
18942: PUSH
18943: LD_INT 106
18945: PUSH
18946: LD_INT 107
18948: PUSH
18949: LD_INT 108
18951: PUSH
18952: LD_INT 109
18954: PUSH
18955: LD_INT 110
18957: PUSH
18958: LD_INT 111
18960: PUSH
18961: LD_INT 112
18963: PUSH
18964: LD_INT 113
18966: PUSH
18967: LD_INT 114
18969: PUSH
18970: LD_INT 115
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 18997
18996: POP
// end else
18997: GO 19216
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18999: LD_ADDR_VAR 0 1
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 6
19021: PUSH
19022: LD_INT 7
19024: PUSH
19025: LD_INT 8
19027: PUSH
19028: LD_INT 9
19030: PUSH
19031: LD_INT 10
19033: PUSH
19034: LD_INT 11
19036: PUSH
19037: LD_INT 12
19039: PUSH
19040: LD_INT 13
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: LD_INT 15
19048: PUSH
19049: LD_INT 16
19051: PUSH
19052: LD_INT 17
19054: PUSH
19055: LD_INT 18
19057: PUSH
19058: LD_INT 19
19060: PUSH
19061: LD_INT 20
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 22
19069: PUSH
19070: LD_INT 23
19072: PUSH
19073: LD_INT 24
19075: PUSH
19076: LD_INT 25
19078: PUSH
19079: LD_INT 26
19081: PUSH
19082: LD_INT 27
19084: PUSH
19085: LD_INT 28
19087: PUSH
19088: LD_INT 29
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 31
19096: PUSH
19097: LD_INT 32
19099: PUSH
19100: LD_INT 33
19102: PUSH
19103: LD_INT 34
19105: PUSH
19106: LD_INT 35
19108: PUSH
19109: LD_INT 36
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 101
19152: PUSH
19153: LD_INT 102
19155: PUSH
19156: LD_INT 103
19158: PUSH
19159: LD_INT 104
19161: PUSH
19162: LD_INT 105
19164: PUSH
19165: LD_INT 106
19167: PUSH
19168: LD_INT 107
19170: PUSH
19171: LD_INT 108
19173: PUSH
19174: LD_INT 109
19176: PUSH
19177: LD_INT 110
19179: PUSH
19180: LD_INT 111
19182: PUSH
19183: LD_INT 112
19185: PUSH
19186: LD_INT 113
19188: PUSH
19189: LD_INT 114
19191: PUSH
19192: LD_INT 115
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: ST_TO_ADDR
// if result then
19216: LD_VAR 0 1
19220: IFFALSE 19509
// begin normal :=  ;
19222: LD_ADDR_VAR 0 3
19226: PUSH
19227: LD_STRING 
19229: ST_TO_ADDR
// hardcore :=  ;
19230: LD_ADDR_VAR 0 4
19234: PUSH
19235: LD_STRING 
19237: ST_TO_ADDR
// for i = 1 to normalCounter do
19238: LD_ADDR_VAR 0 5
19242: PUSH
19243: DOUBLE
19244: LD_INT 1
19246: DEC
19247: ST_TO_ADDR
19248: LD_EXP 58
19252: PUSH
19253: FOR_TO
19254: IFFALSE 19355
// begin tmp := 0 ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: LD_STRING 0
19263: ST_TO_ADDR
// if result [ 1 ] then
19264: LD_VAR 0 1
19268: PUSH
19269: LD_INT 1
19271: ARRAY
19272: IFFALSE 19337
// if result [ 1 ] [ 1 ] = i then
19274: LD_VAR 0 1
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PUSH
19287: LD_VAR 0 5
19291: EQUAL
19292: IFFALSE 19337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19294: LD_ADDR_VAR 0 1
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: LD_VAR 0 1
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PPUSH
19316: LD_INT 1
19318: PPUSH
19319: CALL_OW 3
19323: PPUSH
19324: CALL_OW 1
19328: ST_TO_ADDR
// tmp := 1 ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_STRING 1
19336: ST_TO_ADDR
// end ; normal := normal & tmp ;
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_VAR 0 3
19346: PUSH
19347: LD_VAR 0 2
19351: STR
19352: ST_TO_ADDR
// end ;
19353: GO 19253
19355: POP
19356: POP
// for i = 1 to hardcoreCounter do
19357: LD_ADDR_VAR 0 5
19361: PUSH
19362: DOUBLE
19363: LD_INT 1
19365: DEC
19366: ST_TO_ADDR
19367: LD_EXP 59
19371: PUSH
19372: FOR_TO
19373: IFFALSE 19478
// begin tmp := 0 ;
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: LD_STRING 0
19382: ST_TO_ADDR
// if result [ 2 ] then
19383: LD_VAR 0 1
19387: PUSH
19388: LD_INT 2
19390: ARRAY
19391: IFFALSE 19460
// if result [ 2 ] [ 1 ] = 100 + i then
19393: LD_VAR 0 1
19397: PUSH
19398: LD_INT 2
19400: ARRAY
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PUSH
19406: LD_INT 100
19408: PUSH
19409: LD_VAR 0 5
19413: PLUS
19414: EQUAL
19415: IFFALSE 19460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19417: LD_ADDR_VAR 0 1
19421: PUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_INT 2
19429: PPUSH
19430: LD_VAR 0 1
19434: PUSH
19435: LD_INT 2
19437: ARRAY
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 3
19446: PPUSH
19447: CALL_OW 1
19451: ST_TO_ADDR
// tmp := 1 ;
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: LD_STRING 1
19459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19460: LD_ADDR_VAR 0 4
19464: PUSH
19465: LD_VAR 0 4
19469: PUSH
19470: LD_VAR 0 2
19474: STR
19475: ST_TO_ADDR
// end ;
19476: GO 19372
19478: POP
19479: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19480: LD_STRING getStreamItemsFromMission("
19482: PUSH
19483: LD_VAR 0 3
19487: STR
19488: PUSH
19489: LD_STRING ","
19491: STR
19492: PUSH
19493: LD_VAR 0 4
19497: STR
19498: PUSH
19499: LD_STRING ")
19501: STR
19502: PPUSH
19503: CALL_OW 559
// end else
19507: GO 19516
// ToLua ( getStreamItemsFromMission("","") ) ;
19509: LD_STRING getStreamItemsFromMission("","")
19511: PPUSH
19512: CALL_OW 559
// end ;
19516: LD_VAR 0 1
19520: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19521: LD_EXP 57
19525: PUSH
19526: LD_EXP 62
19530: AND
19531: IFFALSE 19655
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
19539: PPUSH
// begin enable ;
19540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19541: LD_ADDR_VAR 0 2
19545: PUSH
19546: LD_INT 22
19548: PUSH
19549: LD_OWVAR 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 34
19563: PUSH
19564: LD_INT 7
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 45
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 28
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 34
19593: PUSH
19594: LD_INT 47
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PPUSH
19612: CALL_OW 69
19616: ST_TO_ADDR
// if not tmp then
19617: LD_VAR 0 2
19621: NOT
19622: IFFALSE 19626
// exit ;
19624: GO 19655
// for i in tmp do
19626: LD_ADDR_VAR 0 1
19630: PUSH
19631: LD_VAR 0 2
19635: PUSH
19636: FOR_IN
19637: IFFALSE 19653
// begin SetLives ( i , 0 ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_INT 0
19646: PPUSH
19647: CALL_OW 234
// end ;
19651: GO 19636
19653: POP
19654: POP
// end ;
19655: PPOPN 2
19657: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19658: LD_EXP 57
19662: PUSH
19663: LD_EXP 63
19667: AND
19668: IFFALSE 19752
19670: GO 19672
19672: DISABLE
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
// begin enable ;
19677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 32
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: ST_TO_ADDR
// if not tmp then
19714: LD_VAR 0 2
19718: NOT
19719: IFFALSE 19723
// exit ;
19721: GO 19752
// for i in tmp do
19723: LD_ADDR_VAR 0 1
19727: PUSH
19728: LD_VAR 0 2
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19750
// begin SetLives ( i , 0 ) ;
19736: LD_VAR 0 1
19740: PPUSH
19741: LD_INT 0
19743: PPUSH
19744: CALL_OW 234
// end ;
19748: GO 19733
19750: POP
19751: POP
// end ;
19752: PPOPN 2
19754: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19755: LD_EXP 57
19759: PUSH
19760: LD_EXP 60
19764: AND
19765: IFFALSE 19858
19767: GO 19769
19769: DISABLE
19770: LD_INT 0
19772: PPUSH
// begin enable ;
19773: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19774: LD_ADDR_VAR 0 1
19778: PUSH
19779: LD_INT 22
19781: PUSH
19782: LD_OWVAR 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 5
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 25
19806: PUSH
19807: LD_INT 9
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 25
19816: PUSH
19817: LD_INT 8
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PPUSH
19834: CALL_OW 69
19838: PUSH
19839: FOR_IN
19840: IFFALSE 19856
// begin SetClass ( i , 1 ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 336
// end ;
19854: GO 19839
19856: POP
19857: POP
// end ;
19858: PPOPN 1
19860: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19861: LD_EXP 57
19865: PUSH
19866: LD_EXP 61
19870: AND
19871: PUSH
19872: LD_OWVAR 65
19876: PUSH
19877: LD_INT 7
19879: LESS
19880: AND
19881: IFFALSE 19895
19883: GO 19885
19885: DISABLE
// begin enable ;
19886: ENABLE
// game_speed := 7 ;
19887: LD_ADDR_OWVAR 65
19891: PUSH
19892: LD_INT 7
19894: ST_TO_ADDR
// end ;
19895: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19896: LD_EXP 57
19900: PUSH
19901: LD_EXP 64
19905: AND
19906: IFFALSE 20108
19908: GO 19910
19910: DISABLE
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19916: LD_ADDR_VAR 0 3
19920: PUSH
19921: LD_INT 81
19923: PUSH
19924: LD_OWVAR 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 21
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: ST_TO_ADDR
// if not tmp then
19952: LD_VAR 0 3
19956: NOT
19957: IFFALSE 19961
// exit ;
19959: GO 20108
// if tmp > 5 then
19961: LD_VAR 0 3
19965: PUSH
19966: LD_INT 5
19968: GREATER
19969: IFFALSE 19981
// k := 5 else
19971: LD_ADDR_VAR 0 2
19975: PUSH
19976: LD_INT 5
19978: ST_TO_ADDR
19979: GO 19991
// k := tmp ;
19981: LD_ADDR_VAR 0 2
19985: PUSH
19986: LD_VAR 0 3
19990: ST_TO_ADDR
// for i := 1 to k do
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 2
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20106
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_VAR 0 1
20018: ARRAY
20019: PPUSH
20020: LD_VAR 0 1
20024: PUSH
20025: LD_INT 4
20027: MOD
20028: PUSH
20029: LD_INT 1
20031: PLUS
20032: PPUSH
20033: CALL_OW 259
20037: PUSH
20038: LD_INT 10
20040: LESS
20041: IFFALSE 20104
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20043: LD_VAR 0 3
20047: PUSH
20048: LD_VAR 0 1
20052: ARRAY
20053: PPUSH
20054: LD_VAR 0 1
20058: PUSH
20059: LD_INT 4
20061: MOD
20062: PUSH
20063: LD_INT 1
20065: PLUS
20066: PPUSH
20067: LD_VAR 0 3
20071: PUSH
20072: LD_VAR 0 1
20076: ARRAY
20077: PPUSH
20078: LD_VAR 0 1
20082: PUSH
20083: LD_INT 4
20085: MOD
20086: PUSH
20087: LD_INT 1
20089: PLUS
20090: PPUSH
20091: CALL_OW 259
20095: PUSH
20096: LD_INT 1
20098: PLUS
20099: PPUSH
20100: CALL_OW 237
20104: GO 20006
20106: POP
20107: POP
// end ;
20108: PPOPN 3
20110: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20111: LD_EXP 57
20115: PUSH
20116: LD_EXP 65
20120: AND
20121: IFFALSE 20141
20123: GO 20125
20125: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20126: LD_INT 4
20128: PPUSH
20129: LD_OWVAR 2
20133: PPUSH
20134: LD_INT 0
20136: PPUSH
20137: CALL_OW 324
20141: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20142: LD_EXP 57
20146: PUSH
20147: LD_EXP 94
20151: AND
20152: IFFALSE 20172
20154: GO 20156
20156: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20157: LD_INT 19
20159: PPUSH
20160: LD_OWVAR 2
20164: PPUSH
20165: LD_INT 0
20167: PPUSH
20168: CALL_OW 324
20172: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20173: LD_EXP 57
20177: PUSH
20178: LD_EXP 66
20182: AND
20183: IFFALSE 20285
20185: GO 20187
20187: DISABLE
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
// begin enable ;
20192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20193: LD_ADDR_VAR 0 2
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_OWVAR 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 34
20215: PUSH
20216: LD_INT 11
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 34
20225: PUSH
20226: LD_INT 30
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 69
20246: ST_TO_ADDR
// if not tmp then
20247: LD_VAR 0 2
20251: NOT
20252: IFFALSE 20256
// exit ;
20254: GO 20285
// for i in tmp do
20256: LD_ADDR_VAR 0 1
20260: PUSH
20261: LD_VAR 0 2
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20283
// begin SetLives ( i , 0 ) ;
20269: LD_VAR 0 1
20273: PPUSH
20274: LD_INT 0
20276: PPUSH
20277: CALL_OW 234
// end ;
20281: GO 20266
20283: POP
20284: POP
// end ;
20285: PPOPN 2
20287: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20288: LD_EXP 57
20292: PUSH
20293: LD_EXP 67
20297: AND
20298: IFFALSE 20318
20300: GO 20302
20302: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20303: LD_INT 32
20305: PPUSH
20306: LD_OWVAR 2
20310: PPUSH
20311: LD_INT 0
20313: PPUSH
20314: CALL_OW 324
20318: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20319: LD_EXP 57
20323: PUSH
20324: LD_EXP 68
20328: AND
20329: IFFALSE 20510
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 22
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 33
20358: PUSH
20359: LD_INT 3
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: ST_TO_ADDR
// if not tmp then
20375: LD_VAR 0 2
20379: NOT
20380: IFFALSE 20384
// exit ;
20382: GO 20510
// side := 0 ;
20384: LD_ADDR_VAR 0 3
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// for i := 1 to 8 do
20392: LD_ADDR_VAR 0 1
20396: PUSH
20397: DOUBLE
20398: LD_INT 1
20400: DEC
20401: ST_TO_ADDR
20402: LD_INT 8
20404: PUSH
20405: FOR_TO
20406: IFFALSE 20454
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20408: LD_OWVAR 2
20412: PUSH
20413: LD_VAR 0 1
20417: NONEQUAL
20418: PUSH
20419: LD_OWVAR 2
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 81
20433: PUSH
20434: LD_INT 2
20436: EQUAL
20437: AND
20438: IFFALSE 20452
// begin side := i ;
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_VAR 0 1
20449: ST_TO_ADDR
// break ;
20450: GO 20454
// end ;
20452: GO 20405
20454: POP
20455: POP
// if not side then
20456: LD_VAR 0 3
20460: NOT
20461: IFFALSE 20465
// exit ;
20463: GO 20510
// for i := 1 to tmp do
20465: LD_ADDR_VAR 0 1
20469: PUSH
20470: DOUBLE
20471: LD_INT 1
20473: DEC
20474: ST_TO_ADDR
20475: LD_VAR 0 2
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20508
// if Prob ( 60 ) then
20483: LD_INT 60
20485: PPUSH
20486: CALL_OW 13
20490: IFFALSE 20506
// SetSide ( i , side ) ;
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 235
20506: GO 20480
20508: POP
20509: POP
// end ;
20510: PPOPN 3
20512: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20513: LD_EXP 57
20517: PUSH
20518: LD_EXP 70
20522: AND
20523: IFFALSE 20642
20525: GO 20527
20527: DISABLE
20528: LD_INT 0
20530: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20531: LD_ADDR_VAR 0 1
20535: PUSH
20536: LD_INT 22
20538: PUSH
20539: LD_OWVAR 2
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 21
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: LD_INT 23
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: PUSH
20585: FOR_IN
20586: IFFALSE 20640
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 257
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: LD_INT 4
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: IN
20616: IFFALSE 20638
// SetClass ( un , rand ( 1 , 4 ) ) ;
20618: LD_VAR 0 1
20622: PPUSH
20623: LD_INT 1
20625: PPUSH
20626: LD_INT 4
20628: PPUSH
20629: CALL_OW 12
20633: PPUSH
20634: CALL_OW 336
20638: GO 20585
20640: POP
20641: POP
// end ;
20642: PPOPN 1
20644: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20645: LD_EXP 57
20649: PUSH
20650: LD_EXP 69
20654: AND
20655: IFFALSE 20734
20657: GO 20659
20659: DISABLE
20660: LD_INT 0
20662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20663: LD_ADDR_VAR 0 1
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_OWVAR 2
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 3
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PPUSH
20694: CALL_OW 69
20698: ST_TO_ADDR
// if not tmp then
20699: LD_VAR 0 1
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 20734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 1
20715: PPUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 12
20725: ARRAY
20726: PPUSH
20727: LD_INT 100
20729: PPUSH
20730: CALL_OW 234
// end ;
20734: PPOPN 1
20736: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20737: LD_EXP 57
20741: PUSH
20742: LD_EXP 71
20746: AND
20747: IFFALSE 20845
20749: GO 20751
20751: DISABLE
20752: LD_INT 0
20754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20755: LD_ADDR_VAR 0 1
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_OWVAR 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: ST_TO_ADDR
// if not tmp then
20791: LD_VAR 0 1
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20845
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20800: LD_VAR 0 1
20804: PUSH
20805: LD_INT 1
20807: PPUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 12
20817: ARRAY
20818: PPUSH
20819: LD_INT 1
20821: PPUSH
20822: LD_INT 4
20824: PPUSH
20825: CALL_OW 12
20829: PPUSH
20830: LD_INT 3000
20832: PPUSH
20833: LD_INT 9000
20835: PPUSH
20836: CALL_OW 12
20840: PPUSH
20841: CALL_OW 492
// end ;
20845: PPOPN 1
20847: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20848: LD_EXP 57
20852: PUSH
20853: LD_EXP 72
20857: AND
20858: IFFALSE 20878
20860: GO 20862
20862: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20863: LD_INT 1
20865: PPUSH
20866: LD_OWVAR 2
20870: PPUSH
20871: LD_INT 0
20873: PPUSH
20874: CALL_OW 324
20878: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20879: LD_EXP 57
20883: PUSH
20884: LD_EXP 73
20888: AND
20889: IFFALSE 20972
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
20897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20898: LD_ADDR_VAR 0 2
20902: PUSH
20903: LD_INT 22
20905: PUSH
20906: LD_OWVAR 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 2
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 20972
// for i in tmp do
20943: LD_ADDR_VAR 0 1
20947: PUSH
20948: LD_VAR 0 2
20952: PUSH
20953: FOR_IN
20954: IFFALSE 20970
// SetBLevel ( i , 10 ) ;
20956: LD_VAR 0 1
20960: PPUSH
20961: LD_INT 10
20963: PPUSH
20964: CALL_OW 241
20968: GO 20953
20970: POP
20971: POP
// end ;
20972: PPOPN 2
20974: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20975: LD_EXP 57
20979: PUSH
20980: LD_EXP 74
20984: AND
20985: IFFALSE 21096
20987: GO 20989
20989: DISABLE
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20995: LD_ADDR_VAR 0 3
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_OWVAR 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 25
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PPUSH
21026: CALL_OW 69
21030: ST_TO_ADDR
// if not tmp then
21031: LD_VAR 0 3
21035: NOT
21036: IFFALSE 21040
// exit ;
21038: GO 21096
// un := tmp [ rand ( 1 , tmp ) ] ;
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_VAR 0 3
21057: PPUSH
21058: CALL_OW 12
21062: ARRAY
21063: ST_TO_ADDR
// if Crawls ( un ) then
21064: LD_VAR 0 2
21068: PPUSH
21069: CALL_OW 318
21073: IFFALSE 21084
// ComWalk ( un ) ;
21075: LD_VAR 0 2
21079: PPUSH
21080: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21084: LD_VAR 0 2
21088: PPUSH
21089: LD_INT 5
21091: PPUSH
21092: CALL_OW 336
// end ;
21096: PPOPN 3
21098: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21099: LD_EXP 57
21103: PUSH
21104: LD_EXP 75
21108: AND
21109: PUSH
21110: LD_OWVAR 67
21114: PUSH
21115: LD_INT 3
21117: LESS
21118: AND
21119: IFFALSE 21138
21121: GO 21123
21123: DISABLE
// Difficulty := Difficulty + 1 ;
21124: LD_ADDR_OWVAR 67
21128: PUSH
21129: LD_OWVAR 67
21133: PUSH
21134: LD_INT 1
21136: PLUS
21137: ST_TO_ADDR
21138: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21139: LD_EXP 57
21143: PUSH
21144: LD_EXP 76
21148: AND
21149: IFFALSE 21252
21151: GO 21153
21153: DISABLE
21154: LD_INT 0
21156: PPUSH
// begin for i := 1 to 5 do
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: DOUBLE
21163: LD_INT 1
21165: DEC
21166: ST_TO_ADDR
21167: LD_INT 5
21169: PUSH
21170: FOR_TO
21171: IFFALSE 21250
// begin uc_nation := nation_nature ;
21173: LD_ADDR_OWVAR 21
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// uc_side := 0 ;
21181: LD_ADDR_OWVAR 20
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21189: LD_ADDR_OWVAR 29
21193: PUSH
21194: LD_INT 12
21196: PUSH
21197: LD_INT 12
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: ST_TO_ADDR
// hc_agressivity := 20 ;
21204: LD_ADDR_OWVAR 35
21208: PUSH
21209: LD_INT 20
21211: ST_TO_ADDR
// hc_class := class_tiger ;
21212: LD_ADDR_OWVAR 28
21216: PUSH
21217: LD_INT 14
21219: ST_TO_ADDR
// hc_gallery :=  ;
21220: LD_ADDR_OWVAR 33
21224: PUSH
21225: LD_STRING 
21227: ST_TO_ADDR
// hc_name :=  ;
21228: LD_ADDR_OWVAR 26
21232: PUSH
21233: LD_STRING 
21235: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21236: CALL_OW 44
21240: PPUSH
21241: LD_INT 0
21243: PPUSH
21244: CALL_OW 51
// end ;
21248: GO 21170
21250: POP
21251: POP
// end ;
21252: PPOPN 1
21254: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21255: LD_EXP 57
21259: PUSH
21260: LD_EXP 77
21264: AND
21265: IFFALSE 21274
21267: GO 21269
21269: DISABLE
// StreamSibBomb ;
21270: CALL 21275 0 0
21274: END
// export function StreamSibBomb ; var i , x , y ; begin
21275: LD_INT 0
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
// result := false ;
21281: LD_ADDR_VAR 0 1
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// for i := 1 to 16 do
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_INT 16
21301: PUSH
21302: FOR_TO
21303: IFFALSE 21502
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 10
21312: PUSH
21313: LD_INT 20
21315: PUSH
21316: LD_INT 30
21318: PUSH
21319: LD_INT 40
21321: PUSH
21322: LD_INT 50
21324: PUSH
21325: LD_INT 60
21327: PUSH
21328: LD_INT 70
21330: PUSH
21331: LD_INT 80
21333: PUSH
21334: LD_INT 90
21336: PUSH
21337: LD_INT 100
21339: PUSH
21340: LD_INT 110
21342: PUSH
21343: LD_INT 120
21345: PUSH
21346: LD_INT 130
21348: PUSH
21349: LD_INT 140
21351: PUSH
21352: LD_INT 150
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PPUSH
21375: LD_INT 15
21377: PPUSH
21378: CALL_OW 12
21382: ARRAY
21383: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21384: LD_ADDR_VAR 0 4
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 20
21394: PUSH
21395: LD_INT 30
21397: PUSH
21398: LD_INT 40
21400: PUSH
21401: LD_INT 50
21403: PUSH
21404: LD_INT 60
21406: PUSH
21407: LD_INT 70
21409: PUSH
21410: LD_INT 80
21412: PUSH
21413: LD_INT 90
21415: PUSH
21416: LD_INT 100
21418: PUSH
21419: LD_INT 110
21421: PUSH
21422: LD_INT 120
21424: PUSH
21425: LD_INT 130
21427: PUSH
21428: LD_INT 140
21430: PUSH
21431: LD_INT 150
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: PPUSH
21454: LD_INT 15
21456: PPUSH
21457: CALL_OW 12
21461: ARRAY
21462: ST_TO_ADDR
// if ValidHex ( x , y ) then
21463: LD_VAR 0 3
21467: PPUSH
21468: LD_VAR 0 4
21472: PPUSH
21473: CALL_OW 488
21477: IFFALSE 21500
// begin result := [ x , y ] ;
21479: LD_ADDR_VAR 0 1
21483: PUSH
21484: LD_VAR 0 3
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: ST_TO_ADDR
// break ;
21498: GO 21502
// end ; end ;
21500: GO 21302
21502: POP
21503: POP
// if result then
21504: LD_VAR 0 1
21508: IFFALSE 21568
// begin ToLua ( playSibBomb() ) ;
21510: LD_STRING playSibBomb()
21512: PPUSH
21513: CALL_OW 559
// wait ( 0 0$14 ) ;
21517: LD_INT 490
21519: PPUSH
21520: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: LD_VAR 0 1
21537: PUSH
21538: LD_INT 2
21540: ARRAY
21541: PPUSH
21542: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: ARRAY
21554: PPUSH
21555: LD_VAR 0 1
21559: PUSH
21560: LD_INT 2
21562: ARRAY
21563: PPUSH
21564: CALL_OW 429
// end ; end ;
21568: LD_VAR 0 1
21572: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21573: LD_EXP 57
21577: PUSH
21578: LD_EXP 79
21582: AND
21583: IFFALSE 21595
21585: GO 21587
21587: DISABLE
// YouLost (  ) ;
21588: LD_STRING 
21590: PPUSH
21591: CALL_OW 104
21595: END
// every 0 0$1 trigger StreamModeActive and sFog do
21596: LD_EXP 57
21600: PUSH
21601: LD_EXP 78
21605: AND
21606: IFFALSE 21620
21608: GO 21610
21610: DISABLE
// FogOff ( your_side ) ;
21611: LD_OWVAR 2
21615: PPUSH
21616: CALL_OW 344
21620: END
// every 0 0$1 trigger StreamModeActive and sSun do
21621: LD_EXP 57
21625: PUSH
21626: LD_EXP 80
21630: AND
21631: IFFALSE 21659
21633: GO 21635
21635: DISABLE
// begin solar_recharge_percent := 0 ;
21636: LD_ADDR_OWVAR 79
21640: PUSH
21641: LD_INT 0
21643: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21644: LD_INT 10500
21646: PPUSH
21647: CALL_OW 67
// solar_recharge_percent := 100 ;
21651: LD_ADDR_OWVAR 79
21655: PUSH
21656: LD_INT 100
21658: ST_TO_ADDR
// end ;
21659: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21660: LD_EXP 57
21664: PUSH
21665: LD_EXP 81
21669: AND
21670: IFFALSE 21909
21672: GO 21674
21674: DISABLE
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
// begin tmp := [ ] ;
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: EMPTY
21686: ST_TO_ADDR
// for i := 1 to 6 do
21687: LD_ADDR_VAR 0 1
21691: PUSH
21692: DOUBLE
21693: LD_INT 1
21695: DEC
21696: ST_TO_ADDR
21697: LD_INT 6
21699: PUSH
21700: FOR_TO
21701: IFFALSE 21806
// begin uc_nation := nation_nature ;
21703: LD_ADDR_OWVAR 21
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// uc_side := 0 ;
21711: LD_ADDR_OWVAR 20
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21719: LD_ADDR_OWVAR 29
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 12
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
// hc_agressivity := 20 ;
21734: LD_ADDR_OWVAR 35
21738: PUSH
21739: LD_INT 20
21741: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21742: LD_ADDR_OWVAR 28
21746: PUSH
21747: LD_INT 17
21749: ST_TO_ADDR
// hc_gallery :=  ;
21750: LD_ADDR_OWVAR 33
21754: PUSH
21755: LD_STRING 
21757: ST_TO_ADDR
// hc_name :=  ;
21758: LD_ADDR_OWVAR 26
21762: PUSH
21763: LD_STRING 
21765: ST_TO_ADDR
// un := CreateHuman ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: CALL_OW 44
21775: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21776: LD_VAR 0 2
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: CALL_OW 51
// tmp := tmp ^ un ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_VAR 0 3
21797: PUSH
21798: LD_VAR 0 2
21802: ADD
21803: ST_TO_ADDR
// end ;
21804: GO 21700
21806: POP
21807: POP
// repeat wait ( 0 0$1 ) ;
21808: LD_INT 35
21810: PPUSH
21811: CALL_OW 67
// for un in tmp do
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_VAR 0 3
21824: PUSH
21825: FOR_IN
21826: IFFALSE 21900
// begin if IsDead ( un ) then
21828: LD_VAR 0 2
21832: PPUSH
21833: CALL_OW 301
21837: IFFALSE 21857
// begin tmp := tmp diff un ;
21839: LD_ADDR_VAR 0 3
21843: PUSH
21844: LD_VAR 0 3
21848: PUSH
21849: LD_VAR 0 2
21853: DIFF
21854: ST_TO_ADDR
// continue ;
21855: GO 21825
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21857: LD_VAR 0 2
21861: PPUSH
21862: LD_INT 3
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: CALL_OW 69
21883: PPUSH
21884: LD_VAR 0 2
21888: PPUSH
21889: CALL_OW 74
21893: PPUSH
21894: CALL_OW 115
// end ;
21898: GO 21825
21900: POP
21901: POP
// until not tmp ;
21902: LD_VAR 0 3
21906: NOT
21907: IFFALSE 21808
// end ;
21909: PPOPN 3
21911: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21912: LD_EXP 57
21916: PUSH
21917: LD_EXP 82
21921: AND
21922: IFFALSE 21976
21924: GO 21926
21926: DISABLE
// begin ToLua ( displayTroll(); ) ;
21927: LD_STRING displayTroll();
21929: PPUSH
21930: CALL_OW 559
// wait ( 3 3$00 ) ;
21934: LD_INT 6300
21936: PPUSH
21937: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21941: LD_STRING hideTroll();
21943: PPUSH
21944: CALL_OW 559
// wait ( 1 1$00 ) ;
21948: LD_INT 2100
21950: PPUSH
21951: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21955: LD_STRING displayTroll();
21957: PPUSH
21958: CALL_OW 559
// wait ( 1 1$00 ) ;
21962: LD_INT 2100
21964: PPUSH
21965: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21969: LD_STRING hideTroll();
21971: PPUSH
21972: CALL_OW 559
// end ;
21976: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21977: LD_EXP 57
21981: PUSH
21982: LD_EXP 83
21986: AND
21987: IFFALSE 22050
21989: GO 21991
21991: DISABLE
21992: LD_INT 0
21994: PPUSH
// begin p := 0 ;
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_INT 0
22002: ST_TO_ADDR
// repeat game_speed := 1 ;
22003: LD_ADDR_OWVAR 65
22007: PUSH
22008: LD_INT 1
22010: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22011: LD_INT 35
22013: PPUSH
22014: CALL_OW 67
// p := p + 1 ;
22018: LD_ADDR_VAR 0 1
22022: PUSH
22023: LD_VAR 0 1
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: ST_TO_ADDR
// until p >= 60 ;
22032: LD_VAR 0 1
22036: PUSH
22037: LD_INT 60
22039: GREATEREQUAL
22040: IFFALSE 22003
// game_speed := 4 ;
22042: LD_ADDR_OWVAR 65
22046: PUSH
22047: LD_INT 4
22049: ST_TO_ADDR
// end ;
22050: PPOPN 1
22052: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22053: LD_EXP 57
22057: PUSH
22058: LD_EXP 84
22062: AND
22063: IFFALSE 22209
22065: GO 22067
22067: DISABLE
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: LD_INT 22
22079: PUSH
22080: LD_OWVAR 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 69
22125: ST_TO_ADDR
// if not depot then
22126: LD_VAR 0 1
22130: NOT
22131: IFFALSE 22135
// exit ;
22133: GO 22209
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 1
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 12
22157: ARRAY
22158: PPUSH
22159: CALL_OW 274
22163: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_INT 0
22174: PPUSH
22175: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22179: LD_VAR 0 2
22183: PPUSH
22184: LD_INT 2
22186: PPUSH
22187: LD_INT 0
22189: PPUSH
22190: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_INT 3
22201: PPUSH
22202: LD_INT 0
22204: PPUSH
22205: CALL_OW 277
// end ;
22209: PPOPN 2
22211: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22212: LD_EXP 57
22216: PUSH
22217: LD_EXP 85
22221: AND
22222: IFFALSE 22319
22224: GO 22226
22226: DISABLE
22227: LD_INT 0
22229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_INT 22
22237: PUSH
22238: LD_OWVAR 2
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 21
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: PPUSH
22279: CALL_OW 69
22283: ST_TO_ADDR
// if not tmp then
22284: LD_VAR 0 1
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22293: LD_VAR 0 1
22297: PUSH
22298: LD_INT 1
22300: PPUSH
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 12
22310: ARRAY
22311: PPUSH
22312: LD_INT 200
22314: PPUSH
22315: CALL_OW 234
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22322: LD_EXP 57
22326: PUSH
22327: LD_EXP 86
22331: AND
22332: IFFALSE 22411
22334: GO 22336
22336: DISABLE
22337: LD_INT 0
22339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22340: LD_ADDR_VAR 0 1
22344: PUSH
22345: LD_INT 22
22347: PUSH
22348: LD_OWVAR 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PPUSH
22371: CALL_OW 69
22375: ST_TO_ADDR
// if not tmp then
22376: LD_VAR 0 1
22380: NOT
22381: IFFALSE 22385
// exit ;
22383: GO 22411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_VAR 0 1
22397: PPUSH
22398: CALL_OW 12
22402: ARRAY
22403: PPUSH
22404: LD_INT 60
22406: PPUSH
22407: CALL_OW 234
// end ;
22411: PPOPN 1
22413: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22414: LD_EXP 57
22418: PUSH
22419: LD_EXP 87
22423: AND
22424: IFFALSE 22523
22426: GO 22428
22428: DISABLE
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
// begin enable ;
22433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22434: LD_ADDR_VAR 0 1
22438: PUSH
22439: LD_INT 22
22441: PUSH
22442: LD_OWVAR 2
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 61
22453: PUSH
22454: EMPTY
22455: LIST
22456: PUSH
22457: LD_INT 33
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: PPUSH
22472: CALL_OW 69
22476: ST_TO_ADDR
// if not tmp then
22477: LD_VAR 0 1
22481: NOT
22482: IFFALSE 22486
// exit ;
22484: GO 22523
// for i in tmp do
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_VAR 0 1
22495: PUSH
22496: FOR_IN
22497: IFFALSE 22521
// if IsControledBy ( i ) then
22499: LD_VAR 0 2
22503: PPUSH
22504: CALL_OW 312
22508: IFFALSE 22519
// ComUnlink ( i ) ;
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 136
22519: GO 22496
22521: POP
22522: POP
// end ;
22523: PPOPN 2
22525: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22526: LD_EXP 57
22530: PUSH
22531: LD_EXP 88
22535: AND
22536: IFFALSE 22676
22538: GO 22540
22540: DISABLE
22541: LD_INT 0
22543: PPUSH
22544: PPUSH
// begin ToLua ( displayPowell(); ) ;
22545: LD_STRING displayPowell();
22547: PPUSH
22548: CALL_OW 559
// uc_side := 0 ;
22552: LD_ADDR_OWVAR 20
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// uc_nation := 2 ;
22560: LD_ADDR_OWVAR 21
22564: PUSH
22565: LD_INT 2
22567: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22568: LD_ADDR_OWVAR 37
22572: PUSH
22573: LD_INT 14
22575: ST_TO_ADDR
// vc_engine := engine_siberite ;
22576: LD_ADDR_OWVAR 39
22580: PUSH
22581: LD_INT 3
22583: ST_TO_ADDR
// vc_control := control_apeman ;
22584: LD_ADDR_OWVAR 38
22588: PUSH
22589: LD_INT 5
22591: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22592: LD_ADDR_OWVAR 40
22596: PUSH
22597: LD_INT 29
22599: ST_TO_ADDR
// un := CreateVehicle ;
22600: LD_ADDR_VAR 0 2
22604: PUSH
22605: CALL_OW 45
22609: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22610: LD_VAR 0 2
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22622: LD_INT 35
22624: PPUSH
22625: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 22
22636: PUSH
22637: LD_OWVAR 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PPUSH
22646: CALL_OW 69
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: CALL_OW 74
22660: PPUSH
22661: CALL_OW 115
// until IsDead ( un ) ;
22665: LD_VAR 0 2
22669: PPUSH
22670: CALL_OW 301
22674: IFFALSE 22622
// end ;
22676: PPOPN 2
22678: END
// every 0 0$1 trigger StreamModeActive and sStu do
22679: LD_EXP 57
22683: PUSH
22684: LD_EXP 96
22688: AND
22689: IFFALSE 22705
22691: GO 22693
22693: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22694: LD_STRING displayStucuk();
22696: PPUSH
22697: CALL_OW 559
// ResetFog ;
22701: CALL_OW 335
// end ;
22705: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22706: LD_EXP 57
22710: PUSH
22711: LD_EXP 89
22715: AND
22716: IFFALSE 22857
22718: GO 22720
22720: DISABLE
22721: LD_INT 0
22723: PPUSH
22724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22725: LD_ADDR_VAR 0 2
22729: PUSH
22730: LD_INT 22
22732: PUSH
22733: LD_OWVAR 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 21
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 69
22760: ST_TO_ADDR
// if not tmp then
22761: LD_VAR 0 2
22765: NOT
22766: IFFALSE 22770
// exit ;
22768: GO 22857
// un := tmp [ rand ( 1 , tmp ) ] ;
22770: LD_ADDR_VAR 0 1
22774: PUSH
22775: LD_VAR 0 2
22779: PUSH
22780: LD_INT 1
22782: PPUSH
22783: LD_VAR 0 2
22787: PPUSH
22788: CALL_OW 12
22792: ARRAY
22793: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22794: LD_VAR 0 1
22798: PPUSH
22799: LD_INT 0
22801: PPUSH
22802: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22806: LD_VAR 0 1
22810: PPUSH
22811: LD_OWVAR 3
22815: PUSH
22816: LD_VAR 0 1
22820: DIFF
22821: PPUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 74
22831: PPUSH
22832: CALL_OW 115
// wait ( 0 0$20 ) ;
22836: LD_INT 700
22838: PPUSH
22839: CALL_OW 67
// SetSide ( un , your_side ) ;
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_OWVAR 2
22852: PPUSH
22853: CALL_OW 235
// end ;
22857: PPOPN 2
22859: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22860: LD_EXP 57
22864: PUSH
22865: LD_EXP 90
22869: AND
22870: IFFALSE 22976
22872: GO 22874
22874: DISABLE
22875: LD_INT 0
22877: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_OWVAR 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 30
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 30
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 69
22931: ST_TO_ADDR
// if not depot then
22932: LD_VAR 0 1
22936: NOT
22937: IFFALSE 22941
// exit ;
22939: GO 22976
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22941: LD_VAR 0 1
22945: PUSH
22946: LD_INT 1
22948: ARRAY
22949: PPUSH
22950: CALL_OW 250
22954: PPUSH
22955: LD_VAR 0 1
22959: PUSH
22960: LD_INT 1
22962: ARRAY
22963: PPUSH
22964: CALL_OW 251
22968: PPUSH
22969: LD_INT 70
22971: PPUSH
22972: CALL_OW 495
// end ;
22976: PPOPN 1
22978: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22979: LD_EXP 57
22983: PUSH
22984: LD_EXP 91
22988: AND
22989: IFFALSE 23200
22991: GO 22993
22993: DISABLE
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_OWVAR 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 21
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PPUSH
23032: CALL_OW 69
23036: ST_TO_ADDR
// if not tmp then
23037: LD_VAR 0 5
23041: NOT
23042: IFFALSE 23046
// exit ;
23044: GO 23200
// for i in tmp do
23046: LD_ADDR_VAR 0 1
23050: PUSH
23051: LD_VAR 0 5
23055: PUSH
23056: FOR_IN
23057: IFFALSE 23198
// begin d := rand ( 0 , 5 ) ;
23059: LD_ADDR_VAR 0 4
23063: PUSH
23064: LD_INT 0
23066: PPUSH
23067: LD_INT 5
23069: PPUSH
23070: CALL_OW 12
23074: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 250
23089: PPUSH
23090: LD_VAR 0 4
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: LD_INT 12
23100: PPUSH
23101: CALL_OW 12
23105: PPUSH
23106: CALL_OW 272
23110: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 251
23125: PPUSH
23126: LD_VAR 0 4
23130: PPUSH
23131: LD_INT 3
23133: PPUSH
23134: LD_INT 12
23136: PPUSH
23137: CALL_OW 12
23141: PPUSH
23142: CALL_OW 273
23146: ST_TO_ADDR
// if ValidHex ( x , y ) then
23147: LD_VAR 0 2
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: CALL_OW 488
23161: IFFALSE 23196
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_VAR 0 2
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: LD_INT 3
23180: PPUSH
23181: LD_INT 6
23183: PPUSH
23184: CALL_OW 12
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 483
// end ;
23196: GO 23056
23198: POP
23199: POP
// end ;
23200: PPOPN 5
23202: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23203: LD_EXP 57
23207: PUSH
23208: LD_EXP 92
23212: AND
23213: IFFALSE 23307
23215: GO 23217
23217: DISABLE
23218: LD_INT 0
23220: PPUSH
23221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: LD_INT 22
23229: PUSH
23230: LD_OWVAR 2
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 32
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 21
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: PPUSH
23264: CALL_OW 69
23268: ST_TO_ADDR
// if not tmp then
23269: LD_VAR 0 2
23273: NOT
23274: IFFALSE 23278
// exit ;
23276: GO 23307
// for i in tmp do
23278: LD_ADDR_VAR 0 1
23282: PUSH
23283: LD_VAR 0 2
23287: PUSH
23288: FOR_IN
23289: IFFALSE 23305
// SetFuel ( i , 0 ) ;
23291: LD_VAR 0 1
23295: PPUSH
23296: LD_INT 0
23298: PPUSH
23299: CALL_OW 240
23303: GO 23288
23305: POP
23306: POP
// end ;
23307: PPOPN 2
23309: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23310: LD_EXP 57
23314: PUSH
23315: LD_EXP 93
23319: AND
23320: IFFALSE 23386
23322: GO 23324
23324: DISABLE
23325: LD_INT 0
23327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: LD_INT 22
23335: PUSH
23336: LD_OWVAR 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 29
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: ST_TO_ADDR
// if not tmp then
23364: LD_VAR 0 1
23368: NOT
23369: IFFALSE 23373
// exit ;
23371: GO 23386
// DestroyUnit ( tmp [ 1 ] ) ;
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 1
23380: ARRAY
23381: PPUSH
23382: CALL_OW 65
// end ;
23386: PPOPN 1
23388: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23389: LD_EXP 57
23393: PUSH
23394: LD_EXP 95
23398: AND
23399: IFFALSE 23528
23401: GO 23403
23403: DISABLE
23404: LD_INT 0
23406: PPUSH
// begin uc_side := 0 ;
23407: LD_ADDR_OWVAR 20
23411: PUSH
23412: LD_INT 0
23414: ST_TO_ADDR
// uc_nation := nation_arabian ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 2
23422: ST_TO_ADDR
// hc_gallery :=  ;
23423: LD_ADDR_OWVAR 33
23427: PUSH
23428: LD_STRING 
23430: ST_TO_ADDR
// hc_name :=  ;
23431: LD_ADDR_OWVAR 26
23435: PUSH
23436: LD_STRING 
23438: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23439: LD_INT 1
23441: PPUSH
23442: LD_INT 11
23444: PPUSH
23445: LD_INT 10
23447: PPUSH
23448: CALL_OW 380
// un := CreateHuman ;
23452: LD_ADDR_VAR 0 1
23456: PUSH
23457: CALL_OW 44
23461: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23462: LD_VAR 0 1
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23474: LD_INT 35
23476: PPUSH
23477: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23481: LD_VAR 0 1
23485: PPUSH
23486: LD_INT 22
23488: PUSH
23489: LD_OWVAR 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 69
23502: PPUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 74
23512: PPUSH
23513: CALL_OW 115
// until IsDead ( un ) ;
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 301
23526: IFFALSE 23474
// end ;
23528: PPOPN 1
23530: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23531: LD_EXP 57
23535: PUSH
23536: LD_EXP 97
23540: AND
23541: IFFALSE 23553
23543: GO 23545
23545: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23546: LD_STRING earthquake(getX(game), 0, 32)
23548: PPUSH
23549: CALL_OW 559
23553: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23554: LD_EXP 57
23558: PUSH
23559: LD_EXP 98
23563: AND
23564: IFFALSE 23655
23566: GO 23568
23568: DISABLE
23569: LD_INT 0
23571: PPUSH
// begin enable ;
23572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23573: LD_ADDR_VAR 0 1
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_OWVAR 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 21
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 33
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: PPUSH
23615: CALL_OW 69
23619: ST_TO_ADDR
// if not tmp then
23620: LD_VAR 0 1
23624: NOT
23625: IFFALSE 23629
// exit ;
23627: GO 23655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23629: LD_VAR 0 1
23633: PUSH
23634: LD_INT 1
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 12
23646: ARRAY
23647: PPUSH
23648: LD_INT 1
23650: PPUSH
23651: CALL_OW 234
// end ;
23655: PPOPN 1
23657: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23658: LD_EXP 57
23662: PUSH
23663: LD_EXP 99
23667: AND
23668: IFFALSE 23809
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23678: LD_ADDR_VAR 0 3
23682: PUSH
23683: LD_INT 22
23685: PUSH
23686: LD_OWVAR 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 25
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PPUSH
23709: CALL_OW 69
23713: ST_TO_ADDR
// if not tmp then
23714: LD_VAR 0 3
23718: NOT
23719: IFFALSE 23723
// exit ;
23721: GO 23809
// un := tmp [ rand ( 1 , tmp ) ] ;
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_INT 1
23735: PPUSH
23736: LD_VAR 0 3
23740: PPUSH
23741: CALL_OW 12
23745: ARRAY
23746: ST_TO_ADDR
// if Crawls ( un ) then
23747: LD_VAR 0 2
23751: PPUSH
23752: CALL_OW 318
23756: IFFALSE 23767
// ComWalk ( un ) ;
23758: LD_VAR 0 2
23762: PPUSH
23763: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23767: LD_VAR 0 2
23771: PPUSH
23772: LD_INT 9
23774: PPUSH
23775: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23779: LD_INT 28
23781: PPUSH
23782: LD_OWVAR 2
23786: PPUSH
23787: LD_INT 2
23789: PPUSH
23790: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23794: LD_INT 29
23796: PPUSH
23797: LD_OWVAR 2
23801: PPUSH
23802: LD_INT 2
23804: PPUSH
23805: CALL_OW 322
// end ;
23809: PPOPN 3
23811: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23812: LD_EXP 57
23816: PUSH
23817: LD_EXP 100
23821: AND
23822: IFFALSE 23933
23824: GO 23826
23826: DISABLE
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
23831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_OWVAR 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PPUSH
23863: CALL_OW 69
23867: ST_TO_ADDR
// if not tmp then
23868: LD_VAR 0 3
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23933
// un := tmp [ rand ( 1 , tmp ) ] ;
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_VAR 0 3
23886: PUSH
23887: LD_INT 1
23889: PPUSH
23890: LD_VAR 0 3
23894: PPUSH
23895: CALL_OW 12
23899: ARRAY
23900: ST_TO_ADDR
// if Crawls ( un ) then
23901: LD_VAR 0 2
23905: PPUSH
23906: CALL_OW 318
23910: IFFALSE 23921
// ComWalk ( un ) ;
23912: LD_VAR 0 2
23916: PPUSH
23917: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_INT 8
23928: PPUSH
23929: CALL_OW 336
// end ;
23933: PPOPN 3
23935: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23936: LD_EXP 57
23940: PUSH
23941: LD_EXP 101
23945: AND
23946: IFFALSE 24090
23948: GO 23950
23950: DISABLE
23951: LD_INT 0
23953: PPUSH
23954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_OWVAR 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 21
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 34
23987: PUSH
23988: LD_INT 12
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 34
23997: PUSH
23998: LD_INT 51
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 34
24007: PUSH
24008: LD_INT 32
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: PPUSH
24026: CALL_OW 69
24030: ST_TO_ADDR
// if not tmp then
24031: LD_VAR 0 2
24035: NOT
24036: IFFALSE 24040
// exit ;
24038: GO 24090
// for i in tmp do
24040: LD_ADDR_VAR 0 1
24044: PUSH
24045: LD_VAR 0 2
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24088
// if GetCargo ( i , mat_artifact ) = 0 then
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_INT 4
24060: PPUSH
24061: CALL_OW 289
24065: PUSH
24066: LD_INT 0
24068: EQUAL
24069: IFFALSE 24086
// SetCargo ( i , mat_siberit , 100 ) ;
24071: LD_VAR 0 1
24075: PPUSH
24076: LD_INT 3
24078: PPUSH
24079: LD_INT 100
24081: PPUSH
24082: CALL_OW 290
24086: GO 24050
24088: POP
24089: POP
// end ;
24090: PPOPN 2
24092: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24093: LD_EXP 57
24097: PUSH
24098: LD_EXP 102
24102: AND
24103: IFFALSE 24286
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
24111: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24112: LD_ADDR_VAR 0 2
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: ST_TO_ADDR
// if not tmp then
24134: LD_VAR 0 2
24138: NOT
24139: IFFALSE 24143
// exit ;
24141: GO 24286
// for i := 1 to 2 do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: DOUBLE
24149: LD_INT 1
24151: DEC
24152: ST_TO_ADDR
24153: LD_INT 2
24155: PUSH
24156: FOR_TO
24157: IFFALSE 24284
// begin uc_side := your_side ;
24159: LD_ADDR_OWVAR 20
24163: PUSH
24164: LD_OWVAR 2
24168: ST_TO_ADDR
// uc_nation := nation_american ;
24169: LD_ADDR_OWVAR 21
24173: PUSH
24174: LD_INT 1
24176: ST_TO_ADDR
// vc_chassis := us_morphling ;
24177: LD_ADDR_OWVAR 37
24181: PUSH
24182: LD_INT 5
24184: ST_TO_ADDR
// vc_engine := engine_siberite ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_INT 3
24192: ST_TO_ADDR
// vc_control := control_computer ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_INT 3
24200: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24201: LD_ADDR_OWVAR 40
24205: PUSH
24206: LD_INT 10
24208: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24209: LD_VAR 0 2
24213: PUSH
24214: LD_INT 1
24216: ARRAY
24217: PPUSH
24218: CALL_OW 310
24222: NOT
24223: IFFALSE 24270
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24225: CALL_OW 45
24229: PPUSH
24230: LD_VAR 0 2
24234: PUSH
24235: LD_INT 1
24237: ARRAY
24238: PPUSH
24239: CALL_OW 250
24243: PPUSH
24244: LD_VAR 0 2
24248: PUSH
24249: LD_INT 1
24251: ARRAY
24252: PPUSH
24253: CALL_OW 251
24257: PPUSH
24258: LD_INT 12
24260: PPUSH
24261: LD_INT 1
24263: PPUSH
24264: CALL_OW 50
24268: GO 24282
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24270: CALL_OW 45
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: CALL_OW 51
// end ;
24282: GO 24156
24284: POP
24285: POP
// end ;
24286: PPOPN 2
24288: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24289: LD_EXP 57
24293: PUSH
24294: LD_EXP 103
24298: AND
24299: IFFALSE 24521
24301: GO 24303
24303: DISABLE
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
24310: PPUSH
24311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24312: LD_ADDR_VAR 0 6
24316: PUSH
24317: LD_INT 22
24319: PUSH
24320: LD_OWVAR 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 21
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 23
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: PPUSH
24361: CALL_OW 69
24365: ST_TO_ADDR
// if not tmp then
24366: LD_VAR 0 6
24370: NOT
24371: IFFALSE 24375
// exit ;
24373: GO 24521
// s1 := rand ( 1 , 4 ) ;
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 1
24382: PPUSH
24383: LD_INT 4
24385: PPUSH
24386: CALL_OW 12
24390: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24391: LD_ADDR_VAR 0 4
24395: PUSH
24396: LD_VAR 0 6
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: PPUSH
24405: LD_VAR 0 2
24409: PPUSH
24410: CALL_OW 259
24414: ST_TO_ADDR
// if s1 = 1 then
24415: LD_VAR 0 2
24419: PUSH
24420: LD_INT 1
24422: EQUAL
24423: IFFALSE 24443
// s2 := rand ( 2 , 4 ) else
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: LD_INT 2
24432: PPUSH
24433: LD_INT 4
24435: PPUSH
24436: CALL_OW 12
24440: ST_TO_ADDR
24441: GO 24451
// s2 := 1 ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 1
24450: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24451: LD_ADDR_VAR 0 5
24455: PUSH
24456: LD_VAR 0 6
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: CALL_OW 259
24474: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24475: LD_VAR 0 6
24479: PUSH
24480: LD_INT 1
24482: ARRAY
24483: PPUSH
24484: LD_VAR 0 2
24488: PPUSH
24489: LD_VAR 0 5
24493: PPUSH
24494: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24498: LD_VAR 0 6
24502: PUSH
24503: LD_INT 1
24505: ARRAY
24506: PPUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: CALL_OW 237
// end ;
24521: PPOPN 6
24523: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24524: LD_EXP 57
24528: PUSH
24529: LD_EXP 104
24533: AND
24534: IFFALSE 24613
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24542: LD_ADDR_VAR 0 1
24546: PUSH
24547: LD_INT 22
24549: PUSH
24550: LD_OWVAR 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PPUSH
24573: CALL_OW 69
24577: ST_TO_ADDR
// if not tmp then
24578: LD_VAR 0 1
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 24613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24587: LD_VAR 0 1
24591: PUSH
24592: LD_INT 1
24594: PPUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 12
24604: ARRAY
24605: PPUSH
24606: LD_INT 1
24608: PPUSH
24609: CALL_OW 234
// end ;
24613: PPOPN 1
24615: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24616: LD_EXP 57
24620: PUSH
24621: LD_EXP 105
24625: AND
24626: IFFALSE 24738
24628: GO 24630
24630: DISABLE
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24635: LD_ADDR_VAR 0 2
24639: PUSH
24640: LD_INT 22
24642: PUSH
24643: LD_OWVAR 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: LD_INT 30
24657: PUSH
24658: LD_INT 27
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 28
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PPUSH
24695: CALL_OW 69
24699: ST_TO_ADDR
// if not tmp then
24700: LD_VAR 0 2
24704: NOT
24705: IFFALSE 24709
// exit ;
24707: GO 24738
// for i in tmp do
24709: LD_ADDR_VAR 0 1
24713: PUSH
24714: LD_VAR 0 2
24718: PUSH
24719: FOR_IN
24720: IFFALSE 24736
// SetLives ( i , 1 ) ;
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 234
24734: GO 24719
24736: POP
24737: POP
// end ;
24738: PPOPN 2
24740: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24741: LD_EXP 57
24745: PUSH
24746: LD_EXP 106
24750: AND
24751: IFFALSE 25025
24753: GO 24755
24755: DISABLE
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
// begin i := rand ( 1 , 7 ) ;
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_INT 1
24768: PPUSH
24769: LD_INT 7
24771: PPUSH
24772: CALL_OW 12
24776: ST_TO_ADDR
// case i of 1 :
24777: LD_VAR 0 1
24781: PUSH
24782: LD_INT 1
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24800
24790: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24791: LD_STRING earthquake(getX(game), 0, 32)
24793: PPUSH
24794: CALL_OW 559
24798: GO 25025
24800: LD_INT 2
24802: DOUBLE
24803: EQUAL
24804: IFTRUE 24808
24806: GO 24822
24808: POP
// begin ToLua ( displayStucuk(); ) ;
24809: LD_STRING displayStucuk();
24811: PPUSH
24812: CALL_OW 559
// ResetFog ;
24816: CALL_OW 335
// end ; 3 :
24820: GO 25025
24822: LD_INT 3
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24934
24830: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_OWVAR 2
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 25
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PPUSH
24862: CALL_OW 69
24866: ST_TO_ADDR
// if not tmp then
24867: LD_VAR 0 2
24871: NOT
24872: IFFALSE 24876
// exit ;
24874: GO 25025
// un := tmp [ rand ( 1 , tmp ) ] ;
24876: LD_ADDR_VAR 0 3
24880: PUSH
24881: LD_VAR 0 2
24885: PUSH
24886: LD_INT 1
24888: PPUSH
24889: LD_VAR 0 2
24893: PPUSH
24894: CALL_OW 12
24898: ARRAY
24899: ST_TO_ADDR
// if Crawls ( un ) then
24900: LD_VAR 0 3
24904: PPUSH
24905: CALL_OW 318
24909: IFFALSE 24920
// ComWalk ( un ) ;
24911: LD_VAR 0 3
24915: PPUSH
24916: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24920: LD_VAR 0 3
24924: PPUSH
24925: LD_INT 8
24927: PPUSH
24928: CALL_OW 336
// end ; 4 :
24932: GO 25025
24934: LD_INT 4
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 25003
24942: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24943: LD_ADDR_VAR 0 2
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 30
24962: PUSH
24963: LD_INT 29
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: CALL_OW 69
24978: ST_TO_ADDR
// if not tmp then
24979: LD_VAR 0 2
24983: NOT
24984: IFFALSE 24988
// exit ;
24986: GO 25025
// DestroyUnit ( tmp [ 1 ] ) ;
24988: LD_VAR 0 2
24992: PUSH
24993: LD_INT 1
24995: ARRAY
24996: PPUSH
24997: CALL_OW 65
// end ; 5 .. 7 :
25001: GO 25025
25003: LD_INT 5
25005: DOUBLE
25006: GREATEREQUAL
25007: IFFALSE 25015
25009: LD_INT 7
25011: DOUBLE
25012: LESSEQUAL
25013: IFTRUE 25017
25015: GO 25024
25017: POP
// StreamSibBomb ; end ;
25018: CALL 21275 0 0
25022: GO 25025
25024: POP
// end ;
25025: PPOPN 3
25027: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25028: LD_EXP 57
25032: PUSH
25033: LD_EXP 107
25037: AND
25038: IFFALSE 25194
25040: GO 25042
25042: DISABLE
25043: LD_INT 0
25045: PPUSH
25046: PPUSH
25047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25048: LD_ADDR_VAR 0 2
25052: PUSH
25053: LD_INT 81
25055: PUSH
25056: LD_OWVAR 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 21
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 21
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 69
25101: ST_TO_ADDR
// if not tmp then
25102: LD_VAR 0 2
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25194
// p := 0 ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 0
25118: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25119: LD_INT 35
25121: PPUSH
25122: CALL_OW 67
// p := p + 1 ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_VAR 0 3
25135: PUSH
25136: LD_INT 1
25138: PLUS
25139: ST_TO_ADDR
// for i in tmp do
25140: LD_ADDR_VAR 0 1
25144: PUSH
25145: LD_VAR 0 2
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25182
// if GetLives ( i ) < 1000 then
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 256
25162: PUSH
25163: LD_INT 1000
25165: LESS
25166: IFFALSE 25180
// SetLives ( i , 1000 ) ;
25168: LD_VAR 0 1
25172: PPUSH
25173: LD_INT 1000
25175: PPUSH
25176: CALL_OW 234
25180: GO 25150
25182: POP
25183: POP
// until p > 20 ;
25184: LD_VAR 0 3
25188: PUSH
25189: LD_INT 20
25191: GREATER
25192: IFFALSE 25119
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sTime do
25197: LD_EXP 57
25201: PUSH
25202: LD_EXP 108
25206: AND
25207: IFFALSE 25242
25209: GO 25211
25211: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25212: LD_INT 28
25214: PPUSH
25215: LD_OWVAR 2
25219: PPUSH
25220: LD_INT 2
25222: PPUSH
25223: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25227: LD_INT 30
25229: PPUSH
25230: LD_OWVAR 2
25234: PPUSH
25235: LD_INT 2
25237: PPUSH
25238: CALL_OW 322
// end ;
25242: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25243: LD_EXP 57
25247: PUSH
25248: LD_EXP 109
25252: AND
25253: IFFALSE 25374
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
25261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25262: LD_ADDR_VAR 0 2
25266: PUSH
25267: LD_INT 22
25269: PUSH
25270: LD_OWVAR 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: LD_INT 23
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: PPUSH
25311: CALL_OW 69
25315: ST_TO_ADDR
// if not tmp then
25316: LD_VAR 0 2
25320: NOT
25321: IFFALSE 25325
// exit ;
25323: GO 25374
// for i in tmp do
25325: LD_ADDR_VAR 0 1
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: FOR_IN
25336: IFFALSE 25372
// begin if Crawls ( i ) then
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 318
25347: IFFALSE 25358
// ComWalk ( i ) ;
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 138
// SetClass ( i , 2 ) ;
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_INT 2
25365: PPUSH
25366: CALL_OW 336
// end ;
25370: GO 25335
25372: POP
25373: POP
// end ;
25374: PPOPN 2
25376: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25377: LD_EXP 57
25381: PUSH
25382: LD_EXP 110
25386: AND
25387: IFFALSE 25668
25389: GO 25391
25391: DISABLE
25392: LD_INT 0
25394: PPUSH
25395: PPUSH
25396: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25397: LD_OWVAR 2
25401: PPUSH
25402: LD_INT 9
25404: PPUSH
25405: LD_INT 1
25407: PPUSH
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25415: LD_INT 9
25417: PPUSH
25418: LD_OWVAR 2
25422: PPUSH
25423: CALL_OW 343
// uc_side := 9 ;
25427: LD_ADDR_OWVAR 20
25431: PUSH
25432: LD_INT 9
25434: ST_TO_ADDR
// uc_nation := 2 ;
25435: LD_ADDR_OWVAR 21
25439: PUSH
25440: LD_INT 2
25442: ST_TO_ADDR
// hc_name := Dark Warrior ;
25443: LD_ADDR_OWVAR 26
25447: PUSH
25448: LD_STRING Dark Warrior
25450: ST_TO_ADDR
// hc_gallery :=  ;
25451: LD_ADDR_OWVAR 33
25455: PUSH
25456: LD_STRING 
25458: ST_TO_ADDR
// hc_noskilllimit := true ;
25459: LD_ADDR_OWVAR 76
25463: PUSH
25464: LD_INT 1
25466: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25467: LD_ADDR_OWVAR 31
25471: PUSH
25472: LD_INT 30
25474: PUSH
25475: LD_INT 30
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: LD_INT 30
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
// un := CreateHuman ;
25490: LD_ADDR_VAR 0 3
25494: PUSH
25495: CALL_OW 44
25499: ST_TO_ADDR
// hc_noskilllimit := false ;
25500: LD_ADDR_OWVAR 76
25504: PUSH
25505: LD_INT 0
25507: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25508: LD_VAR 0 3
25512: PPUSH
25513: LD_INT 1
25515: PPUSH
25516: CALL_OW 51
// p := 0 ;
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: LD_INT 0
25527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25528: LD_INT 35
25530: PPUSH
25531: CALL_OW 67
// p := p + 1 ;
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_VAR 0 2
25544: PUSH
25545: LD_INT 1
25547: PLUS
25548: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 256
25558: PUSH
25559: LD_INT 1000
25561: LESS
25562: IFFALSE 25576
// SetLives ( un , 1000 ) ;
25564: LD_VAR 0 3
25568: PPUSH
25569: LD_INT 1000
25571: PPUSH
25572: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25576: LD_VAR 0 3
25580: PPUSH
25581: LD_INT 81
25583: PUSH
25584: LD_OWVAR 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 91
25595: PUSH
25596: LD_VAR 0 3
25600: PUSH
25601: LD_INT 30
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: PPUSH
25618: LD_VAR 0 3
25622: PPUSH
25623: CALL_OW 74
25627: PPUSH
25628: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25632: LD_VAR 0 2
25636: PUSH
25637: LD_INT 60
25639: GREATER
25640: PUSH
25641: LD_VAR 0 3
25645: PPUSH
25646: CALL_OW 301
25650: OR
25651: IFFALSE 25528
// if un then
25653: LD_VAR 0 3
25657: IFFALSE 25668
// RemoveUnit ( un ) ;
25659: LD_VAR 0 3
25663: PPUSH
25664: CALL_OW 64
// end ;
25668: PPOPN 3
25670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25671: LD_INT 0
25673: PPUSH
// case cmd of 301 :
25674: LD_VAR 0 1
25678: PUSH
25679: LD_INT 301
25681: DOUBLE
25682: EQUAL
25683: IFTRUE 25687
25685: GO 25719
25687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25688: LD_VAR 0 6
25692: PPUSH
25693: LD_VAR 0 7
25697: PPUSH
25698: LD_VAR 0 8
25702: PPUSH
25703: LD_VAR 0 4
25707: PPUSH
25708: LD_VAR 0 5
25712: PPUSH
25713: CALL 26920 0 5
25717: GO 25840
25719: LD_INT 302
25721: DOUBLE
25722: EQUAL
25723: IFTRUE 25727
25725: GO 25764
25727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25728: LD_VAR 0 6
25732: PPUSH
25733: LD_VAR 0 7
25737: PPUSH
25738: LD_VAR 0 8
25742: PPUSH
25743: LD_VAR 0 9
25747: PPUSH
25748: LD_VAR 0 4
25752: PPUSH
25753: LD_VAR 0 5
25757: PPUSH
25758: CALL 27011 0 6
25762: GO 25840
25764: LD_INT 303
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25809
25772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25773: LD_VAR 0 6
25777: PPUSH
25778: LD_VAR 0 7
25782: PPUSH
25783: LD_VAR 0 8
25787: PPUSH
25788: LD_VAR 0 9
25792: PPUSH
25793: LD_VAR 0 4
25797: PPUSH
25798: LD_VAR 0 5
25802: PPUSH
25803: CALL 25845 0 6
25807: GO 25840
25809: LD_INT 304
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25839
25817: POP
// hHackTeleport ( unit , x , y ) ; end ;
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 4
25827: PPUSH
25828: LD_VAR 0 5
25832: PPUSH
25833: CALL 27604 0 3
25837: GO 25840
25839: POP
// end ;
25840: LD_VAR 0 12
25844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 1
25856: LESS
25857: PUSH
25858: LD_VAR 0 1
25862: PUSH
25863: LD_INT 3
25865: GREATER
25866: OR
25867: PUSH
25868: LD_VAR 0 5
25872: PPUSH
25873: LD_VAR 0 6
25877: PPUSH
25878: CALL_OW 428
25882: OR
25883: IFFALSE 25887
// exit ;
25885: GO 26607
// uc_side := your_side ;
25887: LD_ADDR_OWVAR 20
25891: PUSH
25892: LD_OWVAR 2
25896: ST_TO_ADDR
// uc_nation := nation ;
25897: LD_ADDR_OWVAR 21
25901: PUSH
25902: LD_VAR 0 1
25906: ST_TO_ADDR
// bc_level = 1 ;
25907: LD_ADDR_OWVAR 43
25911: PUSH
25912: LD_INT 1
25914: ST_TO_ADDR
// case btype of 1 :
25915: LD_VAR 0 2
25919: PUSH
25920: LD_INT 1
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 25939
25928: POP
// bc_type := b_depot ; 2 :
25929: LD_ADDR_OWVAR 42
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
25937: GO 26551
25939: LD_INT 2
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 25958
25947: POP
// bc_type := b_warehouse ; 3 :
25948: LD_ADDR_OWVAR 42
25952: PUSH
25953: LD_INT 1
25955: ST_TO_ADDR
25956: GO 26551
25958: LD_INT 3
25960: DOUBLE
25961: EQUAL
25962: IFTRUE 25966
25964: GO 25977
25966: POP
// bc_type := b_lab ; 4 .. 9 :
25967: LD_ADDR_OWVAR 42
25971: PUSH
25972: LD_INT 6
25974: ST_TO_ADDR
25975: GO 26551
25977: LD_INT 4
25979: DOUBLE
25980: GREATEREQUAL
25981: IFFALSE 25989
25983: LD_INT 9
25985: DOUBLE
25986: LESSEQUAL
25987: IFTRUE 25991
25989: GO 26043
25991: POP
// begin bc_type := b_lab_half ;
25992: LD_ADDR_OWVAR 42
25996: PUSH
25997: LD_INT 7
25999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26000: LD_ADDR_OWVAR 44
26004: PUSH
26005: LD_INT 10
26007: PUSH
26008: LD_INT 11
26010: PUSH
26011: LD_INT 12
26013: PUSH
26014: LD_INT 15
26016: PUSH
26017: LD_INT 14
26019: PUSH
26020: LD_INT 13
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PUSH
26031: LD_VAR 0 2
26035: PUSH
26036: LD_INT 3
26038: MINUS
26039: ARRAY
26040: ST_TO_ADDR
// end ; 10 .. 13 :
26041: GO 26551
26043: LD_INT 10
26045: DOUBLE
26046: GREATEREQUAL
26047: IFFALSE 26055
26049: LD_INT 13
26051: DOUBLE
26052: LESSEQUAL
26053: IFTRUE 26057
26055: GO 26134
26057: POP
// begin bc_type := b_lab_full ;
26058: LD_ADDR_OWVAR 42
26062: PUSH
26063: LD_INT 8
26065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26066: LD_ADDR_OWVAR 44
26070: PUSH
26071: LD_INT 10
26073: PUSH
26074: LD_INT 12
26076: PUSH
26077: LD_INT 14
26079: PUSH
26080: LD_INT 13
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 9
26096: MINUS
26097: ARRAY
26098: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26099: LD_ADDR_OWVAR 45
26103: PUSH
26104: LD_INT 11
26106: PUSH
26107: LD_INT 15
26109: PUSH
26110: LD_INT 12
26112: PUSH
26113: LD_INT 15
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 9
26129: MINUS
26130: ARRAY
26131: ST_TO_ADDR
// end ; 14 :
26132: GO 26551
26134: LD_INT 14
26136: DOUBLE
26137: EQUAL
26138: IFTRUE 26142
26140: GO 26153
26142: POP
// bc_type := b_workshop ; 15 :
26143: LD_ADDR_OWVAR 42
26147: PUSH
26148: LD_INT 2
26150: ST_TO_ADDR
26151: GO 26551
26153: LD_INT 15
26155: DOUBLE
26156: EQUAL
26157: IFTRUE 26161
26159: GO 26172
26161: POP
// bc_type := b_factory ; 16 :
26162: LD_ADDR_OWVAR 42
26166: PUSH
26167: LD_INT 3
26169: ST_TO_ADDR
26170: GO 26551
26172: LD_INT 16
26174: DOUBLE
26175: EQUAL
26176: IFTRUE 26180
26178: GO 26191
26180: POP
// bc_type := b_ext_gun ; 17 :
26181: LD_ADDR_OWVAR 42
26185: PUSH
26186: LD_INT 17
26188: ST_TO_ADDR
26189: GO 26551
26191: LD_INT 17
26193: DOUBLE
26194: EQUAL
26195: IFTRUE 26199
26197: GO 26227
26199: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26200: LD_ADDR_OWVAR 42
26204: PUSH
26205: LD_INT 19
26207: PUSH
26208: LD_INT 23
26210: PUSH
26211: LD_INT 19
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: PUSH
26219: LD_VAR 0 1
26223: ARRAY
26224: ST_TO_ADDR
26225: GO 26551
26227: LD_INT 18
26229: DOUBLE
26230: EQUAL
26231: IFTRUE 26235
26233: GO 26246
26235: POP
// bc_type := b_ext_radar ; 19 :
26236: LD_ADDR_OWVAR 42
26240: PUSH
26241: LD_INT 20
26243: ST_TO_ADDR
26244: GO 26551
26246: LD_INT 19
26248: DOUBLE
26249: EQUAL
26250: IFTRUE 26254
26252: GO 26265
26254: POP
// bc_type := b_ext_radio ; 20 :
26255: LD_ADDR_OWVAR 42
26259: PUSH
26260: LD_INT 22
26262: ST_TO_ADDR
26263: GO 26551
26265: LD_INT 20
26267: DOUBLE
26268: EQUAL
26269: IFTRUE 26273
26271: GO 26284
26273: POP
// bc_type := b_ext_siberium ; 21 :
26274: LD_ADDR_OWVAR 42
26278: PUSH
26279: LD_INT 21
26281: ST_TO_ADDR
26282: GO 26551
26284: LD_INT 21
26286: DOUBLE
26287: EQUAL
26288: IFTRUE 26292
26290: GO 26303
26292: POP
// bc_type := b_ext_computer ; 22 :
26293: LD_ADDR_OWVAR 42
26297: PUSH
26298: LD_INT 24
26300: ST_TO_ADDR
26301: GO 26551
26303: LD_INT 22
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26322
26311: POP
// bc_type := b_ext_track ; 23 :
26312: LD_ADDR_OWVAR 42
26316: PUSH
26317: LD_INT 16
26319: ST_TO_ADDR
26320: GO 26551
26322: LD_INT 23
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26341
26330: POP
// bc_type := b_ext_laser ; 24 :
26331: LD_ADDR_OWVAR 42
26335: PUSH
26336: LD_INT 25
26338: ST_TO_ADDR
26339: GO 26551
26341: LD_INT 24
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26360
26349: POP
// bc_type := b_control_tower ; 25 :
26350: LD_ADDR_OWVAR 42
26354: PUSH
26355: LD_INT 36
26357: ST_TO_ADDR
26358: GO 26551
26360: LD_INT 25
26362: DOUBLE
26363: EQUAL
26364: IFTRUE 26368
26366: GO 26379
26368: POP
// bc_type := b_breastwork ; 26 :
26369: LD_ADDR_OWVAR 42
26373: PUSH
26374: LD_INT 31
26376: ST_TO_ADDR
26377: GO 26551
26379: LD_INT 26
26381: DOUBLE
26382: EQUAL
26383: IFTRUE 26387
26385: GO 26398
26387: POP
// bc_type := b_bunker ; 27 :
26388: LD_ADDR_OWVAR 42
26392: PUSH
26393: LD_INT 32
26395: ST_TO_ADDR
26396: GO 26551
26398: LD_INT 27
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26417
26406: POP
// bc_type := b_turret ; 28 :
26407: LD_ADDR_OWVAR 42
26411: PUSH
26412: LD_INT 33
26414: ST_TO_ADDR
26415: GO 26551
26417: LD_INT 28
26419: DOUBLE
26420: EQUAL
26421: IFTRUE 26425
26423: GO 26436
26425: POP
// bc_type := b_armoury ; 29 :
26426: LD_ADDR_OWVAR 42
26430: PUSH
26431: LD_INT 4
26433: ST_TO_ADDR
26434: GO 26551
26436: LD_INT 29
26438: DOUBLE
26439: EQUAL
26440: IFTRUE 26444
26442: GO 26455
26444: POP
// bc_type := b_barracks ; 30 :
26445: LD_ADDR_OWVAR 42
26449: PUSH
26450: LD_INT 5
26452: ST_TO_ADDR
26453: GO 26551
26455: LD_INT 30
26457: DOUBLE
26458: EQUAL
26459: IFTRUE 26463
26461: GO 26474
26463: POP
// bc_type := b_solar_power ; 31 :
26464: LD_ADDR_OWVAR 42
26468: PUSH
26469: LD_INT 27
26471: ST_TO_ADDR
26472: GO 26551
26474: LD_INT 31
26476: DOUBLE
26477: EQUAL
26478: IFTRUE 26482
26480: GO 26493
26482: POP
// bc_type := b_oil_power ; 32 :
26483: LD_ADDR_OWVAR 42
26487: PUSH
26488: LD_INT 26
26490: ST_TO_ADDR
26491: GO 26551
26493: LD_INT 32
26495: DOUBLE
26496: EQUAL
26497: IFTRUE 26501
26499: GO 26512
26501: POP
// bc_type := b_siberite_power ; 33 :
26502: LD_ADDR_OWVAR 42
26506: PUSH
26507: LD_INT 28
26509: ST_TO_ADDR
26510: GO 26551
26512: LD_INT 33
26514: DOUBLE
26515: EQUAL
26516: IFTRUE 26520
26518: GO 26531
26520: POP
// bc_type := b_oil_mine ; 34 :
26521: LD_ADDR_OWVAR 42
26525: PUSH
26526: LD_INT 29
26528: ST_TO_ADDR
26529: GO 26551
26531: LD_INT 34
26533: DOUBLE
26534: EQUAL
26535: IFTRUE 26539
26537: GO 26550
26539: POP
// bc_type := b_siberite_mine ; end ;
26540: LD_ADDR_OWVAR 42
26544: PUSH
26545: LD_INT 30
26547: ST_TO_ADDR
26548: GO 26551
26550: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26551: LD_ADDR_VAR 0 8
26555: PUSH
26556: LD_VAR 0 5
26560: PPUSH
26561: LD_VAR 0 6
26565: PPUSH
26566: LD_VAR 0 3
26570: PPUSH
26571: CALL_OW 47
26575: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26576: LD_OWVAR 42
26580: PUSH
26581: LD_INT 32
26583: PUSH
26584: LD_INT 33
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: IN
26591: IFFALSE 26607
// PlaceWeaponTurret ( b , weapon ) ;
26593: LD_VAR 0 8
26597: PPUSH
26598: LD_VAR 0 4
26602: PPUSH
26603: CALL_OW 431
// end ;
26607: LD_VAR 0 7
26611: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26612: LD_INT 0
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26618: LD_ADDR_VAR 0 4
26622: PUSH
26623: LD_INT 22
26625: PUSH
26626: LD_OWVAR 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 30
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 30
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 4
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26740
// for i in tmp do
26681: LD_ADDR_VAR 0 2
26685: PUSH
26686: LD_VAR 0 4
26690: PUSH
26691: FOR_IN
26692: IFFALSE 26738
// for j = 1 to 3 do
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: DOUBLE
26700: LD_INT 1
26702: DEC
26703: ST_TO_ADDR
26704: LD_INT 3
26706: PUSH
26707: FOR_TO
26708: IFFALSE 26734
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26710: LD_VAR 0 2
26714: PPUSH
26715: CALL_OW 274
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: LD_INT 99999
26727: PPUSH
26728: CALL_OW 277
26732: GO 26707
26734: POP
26735: POP
26736: GO 26691
26738: POP
26739: POP
// end ;
26740: LD_VAR 0 1
26744: RET
// export function hHackSetLevel10 ; var i , j ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: LD_INT 21
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 69
26769: PUSH
26770: FOR_IN
26771: IFFALSE 26823
// if IsSelected ( i ) then
26773: LD_VAR 0 2
26777: PPUSH
26778: CALL_OW 306
26782: IFFALSE 26821
// begin for j := 1 to 4 do
26784: LD_ADDR_VAR 0 3
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_INT 4
26796: PUSH
26797: FOR_TO
26798: IFFALSE 26819
// SetSkill ( i , j , 10 ) ;
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: LD_INT 10
26812: PPUSH
26813: CALL_OW 237
26817: GO 26797
26819: POP
26820: POP
// end ;
26821: GO 26770
26823: POP
26824: POP
// end ;
26825: LD_VAR 0 1
26829: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26830: LD_INT 0
26832: PPUSH
26833: PPUSH
26834: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26835: LD_ADDR_VAR 0 2
26839: PUSH
26840: LD_INT 22
26842: PUSH
26843: LD_OWVAR 2
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 21
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: PUSH
26871: FOR_IN
26872: IFFALSE 26913
// begin for j := 1 to 4 do
26874: LD_ADDR_VAR 0 3
26878: PUSH
26879: DOUBLE
26880: LD_INT 1
26882: DEC
26883: ST_TO_ADDR
26884: LD_INT 4
26886: PUSH
26887: FOR_TO
26888: IFFALSE 26909
// SetSkill ( i , j , 10 ) ;
26890: LD_VAR 0 2
26894: PPUSH
26895: LD_VAR 0 3
26899: PPUSH
26900: LD_INT 10
26902: PPUSH
26903: CALL_OW 237
26907: GO 26887
26909: POP
26910: POP
// end ;
26911: GO 26871
26913: POP
26914: POP
// end ;
26915: LD_VAR 0 1
26919: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26920: LD_INT 0
26922: PPUSH
// uc_side := your_side ;
26923: LD_ADDR_OWVAR 20
26927: PUSH
26928: LD_OWVAR 2
26932: ST_TO_ADDR
// uc_nation := nation ;
26933: LD_ADDR_OWVAR 21
26937: PUSH
26938: LD_VAR 0 1
26942: ST_TO_ADDR
// InitHc ;
26943: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26947: LD_INT 0
26949: PPUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 3
26959: PPUSH
26960: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_VAR 0 5
26973: PPUSH
26974: CALL_OW 428
26978: PUSH
26979: LD_INT 0
26981: EQUAL
26982: IFFALSE 27006
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26984: CALL_OW 44
26988: PPUSH
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_VAR 0 5
26998: PPUSH
26999: LD_INT 1
27001: PPUSH
27002: CALL_OW 48
// end ;
27006: LD_VAR 0 6
27010: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
// uc_side := your_side ;
27015: LD_ADDR_OWVAR 20
27019: PUSH
27020: LD_OWVAR 2
27024: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 4
27041: PUSH
27042: LD_INT 5
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: IN
27052: IFFALSE 27064
// uc_nation := nation_american else
27054: LD_ADDR_OWVAR 21
27058: PUSH
27059: LD_INT 1
27061: ST_TO_ADDR
27062: GO 27107
// if chassis in [ 11 , 12 , 13 , 14 ] then
27064: LD_VAR 0 1
27068: PUSH
27069: LD_INT 11
27071: PUSH
27072: LD_INT 12
27074: PUSH
27075: LD_INT 13
27077: PUSH
27078: LD_INT 14
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: IN
27087: IFFALSE 27099
// uc_nation := nation_arabian else
27089: LD_ADDR_OWVAR 21
27093: PUSH
27094: LD_INT 2
27096: ST_TO_ADDR
27097: GO 27107
// uc_nation := nation_russian ;
27099: LD_ADDR_OWVAR 21
27103: PUSH
27104: LD_INT 3
27106: ST_TO_ADDR
// vc_chassis := chassis ;
27107: LD_ADDR_OWVAR 37
27111: PUSH
27112: LD_VAR 0 1
27116: ST_TO_ADDR
// vc_engine := engine ;
27117: LD_ADDR_OWVAR 39
27121: PUSH
27122: LD_VAR 0 2
27126: ST_TO_ADDR
// vc_control := control ;
27127: LD_ADDR_OWVAR 38
27131: PUSH
27132: LD_VAR 0 3
27136: ST_TO_ADDR
// vc_weapon := weapon ;
27137: LD_ADDR_OWVAR 40
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// un := CreateVehicle ;
27147: LD_ADDR_VAR 0 8
27151: PUSH
27152: CALL_OW 45
27156: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27157: LD_VAR 0 8
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_INT 5
27167: PPUSH
27168: CALL_OW 12
27172: PPUSH
27173: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27177: LD_VAR 0 8
27181: PPUSH
27182: LD_VAR 0 5
27186: PPUSH
27187: LD_VAR 0 6
27191: PPUSH
27192: LD_INT 1
27194: PPUSH
27195: CALL_OW 48
// end ;
27199: LD_VAR 0 7
27203: RET
// export hInvincible ; every 1 do
27204: GO 27206
27206: DISABLE
// hInvincible := [ ] ;
27207: LD_ADDR_EXP 111
27211: PUSH
27212: EMPTY
27213: ST_TO_ADDR
27214: END
// every 10 do var i ;
27215: GO 27217
27217: DISABLE
27218: LD_INT 0
27220: PPUSH
// begin enable ;
27221: ENABLE
// if not hInvincible then
27222: LD_EXP 111
27226: NOT
27227: IFFALSE 27231
// exit ;
27229: GO 27275
// for i in hInvincible do
27231: LD_ADDR_VAR 0 1
27235: PUSH
27236: LD_EXP 111
27240: PUSH
27241: FOR_IN
27242: IFFALSE 27273
// if GetLives ( i ) < 1000 then
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 256
27253: PUSH
27254: LD_INT 1000
27256: LESS
27257: IFFALSE 27271
// SetLives ( i , 1000 ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: LD_INT 1000
27266: PPUSH
27267: CALL_OW 234
27271: GO 27241
27273: POP
27274: POP
// end ;
27275: PPOPN 1
27277: END
// export function hHackInvincible ; var i ; begin
27278: LD_INT 0
27280: PPUSH
27281: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 21
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: PPUSH
27315: CALL_OW 69
27319: PUSH
27320: FOR_IN
27321: IFFALSE 27382
// if IsSelected ( i ) then
27323: LD_VAR 0 2
27327: PPUSH
27328: CALL_OW 306
27332: IFFALSE 27380
// begin if i in hInvincible then
27334: LD_VAR 0 2
27338: PUSH
27339: LD_EXP 111
27343: IN
27344: IFFALSE 27364
// hInvincible := hInvincible diff i else
27346: LD_ADDR_EXP 111
27350: PUSH
27351: LD_EXP 111
27355: PUSH
27356: LD_VAR 0 2
27360: DIFF
27361: ST_TO_ADDR
27362: GO 27380
// hInvincible := hInvincible union i ;
27364: LD_ADDR_EXP 111
27368: PUSH
27369: LD_EXP 111
27373: PUSH
27374: LD_VAR 0 2
27378: UNION
27379: ST_TO_ADDR
// end ;
27380: GO 27320
27382: POP
27383: POP
// end ;
27384: LD_VAR 0 1
27388: RET
// export function hHackInvisible ; var i , j ; begin
27389: LD_INT 0
27391: PPUSH
27392: PPUSH
27393: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 21
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 69
27413: PUSH
27414: FOR_IN
27415: IFFALSE 27439
// if IsSelected ( i ) then
27417: LD_VAR 0 2
27421: PPUSH
27422: CALL_OW 306
27426: IFFALSE 27437
// ComForceInvisible ( i ) ;
27428: LD_VAR 0 2
27432: PPUSH
27433: CALL_OW 496
27437: GO 27414
27439: POP
27440: POP
// end ;
27441: LD_VAR 0 1
27445: RET
// export function hHackChangeYourSide ; begin
27446: LD_INT 0
27448: PPUSH
// if your_side = 8 then
27449: LD_OWVAR 2
27453: PUSH
27454: LD_INT 8
27456: EQUAL
27457: IFFALSE 27469
// your_side := 0 else
27459: LD_ADDR_OWVAR 2
27463: PUSH
27464: LD_INT 0
27466: ST_TO_ADDR
27467: GO 27483
// your_side := your_side + 1 ;
27469: LD_ADDR_OWVAR 2
27473: PUSH
27474: LD_OWVAR 2
27478: PUSH
27479: LD_INT 1
27481: PLUS
27482: ST_TO_ADDR
// end ;
27483: LD_VAR 0 1
27487: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
27492: PPUSH
// for i in all_units do
27493: LD_ADDR_VAR 0 2
27497: PUSH
27498: LD_OWVAR 3
27502: PUSH
27503: FOR_IN
27504: IFFALSE 27582
// if IsSelected ( i ) then
27506: LD_VAR 0 2
27510: PPUSH
27511: CALL_OW 306
27515: IFFALSE 27580
// begin j := GetSide ( i ) ;
27517: LD_ADDR_VAR 0 3
27521: PUSH
27522: LD_VAR 0 2
27526: PPUSH
27527: CALL_OW 255
27531: ST_TO_ADDR
// if j = 8 then
27532: LD_VAR 0 3
27536: PUSH
27537: LD_INT 8
27539: EQUAL
27540: IFFALSE 27552
// j := 0 else
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_INT 0
27549: ST_TO_ADDR
27550: GO 27566
// j := j + 1 ;
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_VAR 0 3
27561: PUSH
27562: LD_INT 1
27564: PLUS
27565: ST_TO_ADDR
// SetSide ( i , j ) ;
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL_OW 235
// end ;
27580: GO 27503
27582: POP
27583: POP
// end ;
27584: LD_VAR 0 1
27588: RET
// export function hHackFog ; begin
27589: LD_INT 0
27591: PPUSH
// FogOff ( true ) ;
27592: LD_INT 1
27594: PPUSH
27595: CALL_OW 344
// end ;
27599: LD_VAR 0 1
27603: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27604: LD_INT 0
27606: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_VAR 0 2
27616: PPUSH
27617: LD_VAR 0 3
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 483
// CenterOnXY ( x , y ) ;
27632: LD_VAR 0 2
27636: PPUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: CALL_OW 84
// end ; end_of_file
27646: LD_VAR 0 4
27650: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27651: LD_INT 0
27653: PPUSH
27654: PPUSH
27655: PPUSH
27656: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 264
27666: PUSH
27667: LD_EXP 128
27671: EQUAL
27672: IFFALSE 27744
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27674: LD_INT 68
27676: PPUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 255
27686: PPUSH
27687: CALL_OW 321
27691: PUSH
27692: LD_INT 2
27694: EQUAL
27695: IFFALSE 27707
// eff := 70 else
27697: LD_ADDR_VAR 0 4
27701: PUSH
27702: LD_INT 70
27704: ST_TO_ADDR
27705: GO 27715
// eff := 30 ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_INT 30
27714: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 250
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 251
27734: PPUSH
27735: LD_VAR 0 4
27739: PPUSH
27740: CALL_OW 495
// end ; end ;
27744: LD_VAR 0 2
27748: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27749: LD_INT 0
27751: PPUSH
// end ;
27752: LD_VAR 0 4
27756: RET
// export function SOS_Command ( cmd ) ; begin
27757: LD_INT 0
27759: PPUSH
// end ;
27760: LD_VAR 0 2
27764: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27765: LD_INT 0
27767: PPUSH
// if cmd = 121 then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 121
27775: EQUAL
27776: IFFALSE 27778
// end ;
27778: LD_VAR 0 6
27782: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27783: LD_INT 0
27785: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27786: LD_VAR 0 1
27790: PUSH
27791: LD_INT 250
27793: EQUAL
27794: PUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_EXP 131
27809: EQUAL
27810: AND
27811: IFFALSE 27832
// MinerPlaceMine ( unit , x , y ) ;
27813: LD_VAR 0 2
27817: PPUSH
27818: LD_VAR 0 4
27822: PPUSH
27823: LD_VAR 0 5
27827: PPUSH
27828: CALL 30181 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27832: LD_VAR 0 1
27836: PUSH
27837: LD_INT 251
27839: EQUAL
27840: PUSH
27841: LD_VAR 0 2
27845: PPUSH
27846: CALL_OW 264
27850: PUSH
27851: LD_EXP 131
27855: EQUAL
27856: AND
27857: IFFALSE 27878
// MinerDetonateMine ( unit , x , y ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 4
27868: PPUSH
27869: LD_VAR 0 5
27873: PPUSH
27874: CALL 30458 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27878: LD_VAR 0 1
27882: PUSH
27883: LD_INT 252
27885: EQUAL
27886: PUSH
27887: LD_VAR 0 2
27891: PPUSH
27892: CALL_OW 264
27896: PUSH
27897: LD_EXP 131
27901: EQUAL
27902: AND
27903: IFFALSE 27924
// MinerCreateMinefield ( unit , x , y ) ;
27905: LD_VAR 0 2
27909: PPUSH
27910: LD_VAR 0 4
27914: PPUSH
27915: LD_VAR 0 5
27919: PPUSH
27920: CALL 30875 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 253
27931: EQUAL
27932: PUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 257
27942: PUSH
27943: LD_INT 5
27945: EQUAL
27946: AND
27947: IFFALSE 27968
// ComBinocular ( unit , x , y ) ;
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 4
27958: PPUSH
27959: LD_VAR 0 5
27963: PPUSH
27964: CALL 31246 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 254
27975: EQUAL
27976: PUSH
27977: LD_VAR 0 2
27981: PPUSH
27982: CALL_OW 264
27986: PUSH
27987: LD_EXP 126
27991: EQUAL
27992: AND
27993: PUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 263
28003: PUSH
28004: LD_INT 3
28006: EQUAL
28007: AND
28008: IFFALSE 28024
// HackDestroyVehicle ( unit , selectedUnit ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: CALL 29541 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28024: LD_VAR 0 1
28028: PUSH
28029: LD_INT 255
28031: EQUAL
28032: PUSH
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 264
28042: PUSH
28043: LD_INT 14
28045: PUSH
28046: LD_INT 53
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: IN
28053: AND
28054: PUSH
28055: LD_VAR 0 4
28059: PPUSH
28060: LD_VAR 0 5
28064: PPUSH
28065: CALL_OW 488
28069: AND
28070: IFFALSE 28094
// CutTreeXYR ( unit , x , y , 12 ) ;
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 4
28081: PPUSH
28082: LD_VAR 0 5
28086: PPUSH
28087: LD_INT 12
28089: PPUSH
28090: CALL 28107 0 4
// end ;
28094: LD_VAR 0 6
28098: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28099: LD_INT 0
28101: PPUSH
// end ;
28102: LD_VAR 0 4
28106: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
28116: PPUSH
28117: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28118: LD_VAR 0 1
28122: NOT
28123: PUSH
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 3
28133: PPUSH
28134: CALL_OW 488
28138: NOT
28139: OR
28140: PUSH
28141: LD_VAR 0 4
28145: NOT
28146: OR
28147: IFFALSE 28151
// exit ;
28149: GO 28491
// list := [ ] ;
28151: LD_ADDR_VAR 0 13
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
// if x - r < 0 then
28158: LD_VAR 0 2
28162: PUSH
28163: LD_VAR 0 4
28167: MINUS
28168: PUSH
28169: LD_INT 0
28171: LESS
28172: IFFALSE 28184
// min_x := 0 else
28174: LD_ADDR_VAR 0 7
28178: PUSH
28179: LD_INT 0
28181: ST_TO_ADDR
28182: GO 28200
// min_x := x - r ;
28184: LD_ADDR_VAR 0 7
28188: PUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_VAR 0 4
28198: MINUS
28199: ST_TO_ADDR
// if y - r < 0 then
28200: LD_VAR 0 3
28204: PUSH
28205: LD_VAR 0 4
28209: MINUS
28210: PUSH
28211: LD_INT 0
28213: LESS
28214: IFFALSE 28226
// min_y := 0 else
28216: LD_ADDR_VAR 0 8
28220: PUSH
28221: LD_INT 0
28223: ST_TO_ADDR
28224: GO 28242
// min_y := y - r ;
28226: LD_ADDR_VAR 0 8
28230: PUSH
28231: LD_VAR 0 3
28235: PUSH
28236: LD_VAR 0 4
28240: MINUS
28241: ST_TO_ADDR
// max_x := x + r ;
28242: LD_ADDR_VAR 0 9
28246: PUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 4
28256: PLUS
28257: ST_TO_ADDR
// max_y := y + r ;
28258: LD_ADDR_VAR 0 10
28262: PUSH
28263: LD_VAR 0 3
28267: PUSH
28268: LD_VAR 0 4
28272: PLUS
28273: ST_TO_ADDR
// for _x = min_x to max_x do
28274: LD_ADDR_VAR 0 11
28278: PUSH
28279: DOUBLE
28280: LD_VAR 0 7
28284: DEC
28285: ST_TO_ADDR
28286: LD_VAR 0 9
28290: PUSH
28291: FOR_TO
28292: IFFALSE 28409
// for _y = min_y to max_y do
28294: LD_ADDR_VAR 0 12
28298: PUSH
28299: DOUBLE
28300: LD_VAR 0 8
28304: DEC
28305: ST_TO_ADDR
28306: LD_VAR 0 10
28310: PUSH
28311: FOR_TO
28312: IFFALSE 28405
// begin if not ValidHex ( _x , _y ) then
28314: LD_VAR 0 11
28318: PPUSH
28319: LD_VAR 0 12
28323: PPUSH
28324: CALL_OW 488
28328: NOT
28329: IFFALSE 28333
// continue ;
28331: GO 28311
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28333: LD_VAR 0 11
28337: PPUSH
28338: LD_VAR 0 12
28342: PPUSH
28343: CALL_OW 351
28347: PUSH
28348: LD_VAR 0 11
28352: PPUSH
28353: LD_VAR 0 12
28357: PPUSH
28358: CALL_OW 554
28362: AND
28363: IFFALSE 28403
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28365: LD_ADDR_VAR 0 13
28369: PUSH
28370: LD_VAR 0 13
28374: PPUSH
28375: LD_VAR 0 13
28379: PUSH
28380: LD_INT 1
28382: PLUS
28383: PPUSH
28384: LD_VAR 0 11
28388: PUSH
28389: LD_VAR 0 12
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PPUSH
28398: CALL_OW 2
28402: ST_TO_ADDR
// end ;
28403: GO 28311
28405: POP
28406: POP
28407: GO 28291
28409: POP
28410: POP
// if not list then
28411: LD_VAR 0 13
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28491
// for i in list do
28420: LD_ADDR_VAR 0 6
28424: PUSH
28425: LD_VAR 0 13
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28489
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28433: LD_VAR 0 1
28437: PPUSH
28438: LD_STRING M
28440: PUSH
28441: LD_VAR 0 6
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PUSH
28450: LD_VAR 0 6
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: PPUSH
28483: CALL_OW 447
28487: GO 28430
28489: POP
28490: POP
// end ;
28491: LD_VAR 0 5
28495: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28496: LD_EXP 114
28500: NOT
28501: IFFALSE 28551
28503: GO 28505
28505: DISABLE
// begin initHack := true ;
28506: LD_ADDR_EXP 114
28510: PUSH
28511: LD_INT 1
28513: ST_TO_ADDR
// hackTanks := [ ] ;
28514: LD_ADDR_EXP 115
28518: PUSH
28519: EMPTY
28520: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28521: LD_ADDR_EXP 116
28525: PUSH
28526: EMPTY
28527: ST_TO_ADDR
// hackLimit := 3 ;
28528: LD_ADDR_EXP 117
28532: PUSH
28533: LD_INT 3
28535: ST_TO_ADDR
// hackDist := 12 ;
28536: LD_ADDR_EXP 118
28540: PUSH
28541: LD_INT 12
28543: ST_TO_ADDR
// hackCounter := [ ] ;
28544: LD_ADDR_EXP 119
28548: PUSH
28549: EMPTY
28550: ST_TO_ADDR
// end ;
28551: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28552: LD_EXP 114
28556: PUSH
28557: LD_INT 34
28559: PUSH
28560: LD_EXP 126
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 69
28573: AND
28574: IFFALSE 28829
28576: GO 28578
28578: DISABLE
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
// begin enable ;
28583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28584: LD_ADDR_VAR 0 1
28588: PUSH
28589: LD_INT 34
28591: PUSH
28592: LD_EXP 126
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 69
28605: PUSH
28606: FOR_IN
28607: IFFALSE 28827
// begin if not i in hackTanks then
28609: LD_VAR 0 1
28613: PUSH
28614: LD_EXP 115
28618: IN
28619: NOT
28620: IFFALSE 28703
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28622: LD_ADDR_EXP 115
28626: PUSH
28627: LD_EXP 115
28631: PPUSH
28632: LD_EXP 115
28636: PUSH
28637: LD_INT 1
28639: PLUS
28640: PPUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 1
28650: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28651: LD_ADDR_EXP 116
28655: PUSH
28656: LD_EXP 116
28660: PPUSH
28661: LD_EXP 116
28665: PUSH
28666: LD_INT 1
28668: PLUS
28669: PPUSH
28670: EMPTY
28671: PPUSH
28672: CALL_OW 1
28676: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28677: LD_ADDR_EXP 119
28681: PUSH
28682: LD_EXP 119
28686: PPUSH
28687: LD_EXP 119
28691: PUSH
28692: LD_INT 1
28694: PLUS
28695: PPUSH
28696: EMPTY
28697: PPUSH
28698: CALL_OW 1
28702: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 302
28712: NOT
28713: IFFALSE 28726
// begin HackUnlinkAll ( i ) ;
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL 28832 0 1
// continue ;
28724: GO 28606
// end ; HackCheckCapturedStatus ( i ) ;
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL 29275 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_INT 81
28742: PUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL_OW 255
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 33
28759: PUSH
28760: LD_INT 3
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 91
28769: PUSH
28770: LD_VAR 0 1
28774: PUSH
28775: LD_EXP 118
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 50
28787: PUSH
28788: EMPTY
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 2
28806: NOT
28807: IFFALSE 28811
// continue ;
28809: GO 28606
// HackLink ( i , tmp ) ;
28811: LD_VAR 0 1
28815: PPUSH
28816: LD_VAR 0 2
28820: PPUSH
28821: CALL 28968 0 2
// end ;
28825: GO 28606
28827: POP
28828: POP
// end ;
28829: PPOPN 2
28831: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
28836: PPUSH
// if not hack in hackTanks then
28837: LD_VAR 0 1
28841: PUSH
28842: LD_EXP 115
28846: IN
28847: NOT
28848: IFFALSE 28852
// exit ;
28850: GO 28963
// index := GetElementIndex ( hackTanks , hack ) ;
28852: LD_ADDR_VAR 0 4
28856: PUSH
28857: LD_EXP 115
28861: PPUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL 36596 0 2
28871: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28872: LD_EXP 116
28876: PUSH
28877: LD_VAR 0 4
28881: ARRAY
28882: IFFALSE 28963
// begin for i in hackTanksCaptured [ index ] do
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_EXP 116
28893: PUSH
28894: LD_VAR 0 4
28898: ARRAY
28899: PUSH
28900: FOR_IN
28901: IFFALSE 28927
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28903: LD_VAR 0 3
28907: PUSH
28908: LD_INT 1
28910: ARRAY
28911: PPUSH
28912: LD_VAR 0 3
28916: PUSH
28917: LD_INT 2
28919: ARRAY
28920: PPUSH
28921: CALL_OW 235
28925: GO 28900
28927: POP
28928: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28929: LD_ADDR_EXP 116
28933: PUSH
28934: LD_EXP 116
28938: PPUSH
28939: LD_VAR 0 4
28943: PPUSH
28944: EMPTY
28945: PPUSH
28946: CALL_OW 1
28950: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28951: LD_VAR 0 1
28955: PPUSH
28956: LD_INT 0
28958: PPUSH
28959: CALL_OW 505
// end ; end ;
28963: LD_VAR 0 2
28967: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
28972: PPUSH
// if not hack in hackTanks or not vehicles then
28973: LD_VAR 0 1
28977: PUSH
28978: LD_EXP 115
28982: IN
28983: NOT
28984: PUSH
28985: LD_VAR 0 2
28989: NOT
28990: OR
28991: IFFALSE 28995
// exit ;
28993: GO 29270
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: LD_VAR 0 2
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: LD_INT 1
29015: PPUSH
29016: CALL 37246 0 4
29020: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29021: LD_ADDR_VAR 0 5
29025: PUSH
29026: LD_EXP 115
29030: PPUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL 36596 0 2
29040: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29041: LD_EXP 116
29045: PUSH
29046: LD_VAR 0 5
29050: ARRAY
29051: PUSH
29052: LD_EXP 117
29056: LESS
29057: IFFALSE 29246
// begin for i := 1 to vehicles do
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: DOUBLE
29065: LD_INT 1
29067: DEC
29068: ST_TO_ADDR
29069: LD_VAR 0 2
29073: PUSH
29074: FOR_TO
29075: IFFALSE 29244
// begin if hackTanksCaptured [ index ] = hackLimit then
29077: LD_EXP 116
29081: PUSH
29082: LD_VAR 0 5
29086: ARRAY
29087: PUSH
29088: LD_EXP 117
29092: EQUAL
29093: IFFALSE 29097
// break ;
29095: GO 29244
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29097: LD_ADDR_EXP 119
29101: PUSH
29102: LD_EXP 119
29106: PPUSH
29107: LD_VAR 0 5
29111: PPUSH
29112: LD_EXP 119
29116: PUSH
29117: LD_VAR 0 5
29121: ARRAY
29122: PUSH
29123: LD_INT 1
29125: PLUS
29126: PPUSH
29127: CALL_OW 1
29131: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29132: LD_ADDR_EXP 116
29136: PUSH
29137: LD_EXP 116
29141: PPUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_EXP 116
29151: PUSH
29152: LD_VAR 0 5
29156: ARRAY
29157: PUSH
29158: LD_INT 1
29160: PLUS
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: LD_VAR 0 2
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: PUSH
29177: LD_VAR 0 2
29181: PUSH
29182: LD_VAR 0 4
29186: ARRAY
29187: PPUSH
29188: CALL_OW 255
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL 36811 0 3
29201: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29202: LD_VAR 0 2
29206: PUSH
29207: LD_VAR 0 4
29211: ARRAY
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 255
29222: PPUSH
29223: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29227: LD_VAR 0 2
29231: PUSH
29232: LD_VAR 0 4
29236: ARRAY
29237: PPUSH
29238: CALL_OW 141
// end ;
29242: GO 29074
29244: POP
29245: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29246: LD_VAR 0 1
29250: PPUSH
29251: LD_EXP 116
29255: PUSH
29256: LD_VAR 0 5
29260: ARRAY
29261: PUSH
29262: LD_INT 0
29264: PLUS
29265: PPUSH
29266: CALL_OW 505
// end ;
29270: LD_VAR 0 3
29274: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
// if not hack in hackTanks then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_EXP 115
29290: IN
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29536
// index := GetElementIndex ( hackTanks , hack ) ;
29296: LD_ADDR_VAR 0 4
29300: PUSH
29301: LD_EXP 115
29305: PPUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL 36596 0 2
29315: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: DOUBLE
29322: LD_EXP 116
29326: PUSH
29327: LD_VAR 0 4
29331: ARRAY
29332: INC
29333: ST_TO_ADDR
29334: LD_INT 1
29336: PUSH
29337: FOR_DOWNTO
29338: IFFALSE 29510
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29340: LD_ADDR_VAR 0 5
29344: PUSH
29345: LD_EXP 116
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PUSH
29356: LD_VAR 0 3
29360: ARRAY
29361: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29362: LD_VAR 0 5
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: CALL_OW 302
29375: NOT
29376: PUSH
29377: LD_VAR 0 5
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: CALL_OW 255
29390: PUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: CALL_OW 255
29400: NONEQUAL
29401: OR
29402: IFFALSE 29508
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29404: LD_VAR 0 5
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: PPUSH
29413: CALL_OW 305
29417: PUSH
29418: LD_VAR 0 5
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: CALL_OW 255
29431: PUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 255
29441: EQUAL
29442: AND
29443: IFFALSE 29467
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29445: LD_VAR 0 5
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 5
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29467: LD_ADDR_EXP 116
29471: PUSH
29472: LD_EXP 116
29476: PPUSH
29477: LD_VAR 0 4
29481: PPUSH
29482: LD_EXP 116
29486: PUSH
29487: LD_VAR 0 4
29491: ARRAY
29492: PPUSH
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 3
29502: PPUSH
29503: CALL_OW 1
29507: ST_TO_ADDR
// end ; end ;
29508: GO 29337
29510: POP
29511: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_EXP 116
29521: PUSH
29522: LD_VAR 0 4
29526: ARRAY
29527: PUSH
29528: LD_INT 0
29530: PLUS
29531: PPUSH
29532: CALL_OW 505
// end ;
29536: LD_VAR 0 2
29540: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29541: LD_INT 0
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
// if not hack in hackTanks then
29547: LD_VAR 0 1
29551: PUSH
29552: LD_EXP 115
29556: IN
29557: NOT
29558: IFFALSE 29562
// exit ;
29560: GO 29647
// index := GetElementIndex ( hackTanks , hack ) ;
29562: LD_ADDR_VAR 0 5
29566: PUSH
29567: LD_EXP 115
29571: PPUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL 36596 0 2
29581: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29582: LD_ADDR_VAR 0 4
29586: PUSH
29587: DOUBLE
29588: LD_INT 1
29590: DEC
29591: ST_TO_ADDR
29592: LD_EXP 116
29596: PUSH
29597: LD_VAR 0 5
29601: ARRAY
29602: PUSH
29603: FOR_TO
29604: IFFALSE 29645
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29606: LD_EXP 116
29610: PUSH
29611: LD_VAR 0 5
29615: ARRAY
29616: PUSH
29617: LD_VAR 0 4
29621: ARRAY
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PUSH
29627: LD_VAR 0 2
29631: EQUAL
29632: IFFALSE 29643
// KillUnit ( vehicle ) ;
29634: LD_VAR 0 2
29638: PPUSH
29639: CALL_OW 66
29643: GO 29603
29645: POP
29646: POP
// end ;
29647: LD_VAR 0 3
29651: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29652: LD_EXP 120
29656: NOT
29657: IFFALSE 29692
29659: GO 29661
29661: DISABLE
// begin initMiner := true ;
29662: LD_ADDR_EXP 120
29666: PUSH
29667: LD_INT 1
29669: ST_TO_ADDR
// minersList := [ ] ;
29670: LD_ADDR_EXP 121
29674: PUSH
29675: EMPTY
29676: ST_TO_ADDR
// minerMinesList := [ ] ;
29677: LD_ADDR_EXP 122
29681: PUSH
29682: EMPTY
29683: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29684: LD_ADDR_EXP 123
29688: PUSH
29689: LD_INT 5
29691: ST_TO_ADDR
// end ;
29692: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29693: LD_EXP 120
29697: PUSH
29698: LD_INT 34
29700: PUSH
29701: LD_EXP 131
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: AND
29715: IFFALSE 30178
29717: GO 29719
29719: DISABLE
29720: LD_INT 0
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
// begin enable ;
29726: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29727: LD_ADDR_VAR 0 1
29731: PUSH
29732: LD_INT 34
29734: PUSH
29735: LD_EXP 131
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 69
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29822
// begin if not i in minersList then
29752: LD_VAR 0 1
29756: PUSH
29757: LD_EXP 121
29761: IN
29762: NOT
29763: IFFALSE 29820
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29765: LD_ADDR_EXP 121
29769: PUSH
29770: LD_EXP 121
29774: PPUSH
29775: LD_EXP 121
29779: PUSH
29780: LD_INT 1
29782: PLUS
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 1
29793: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29794: LD_ADDR_EXP 122
29798: PUSH
29799: LD_EXP 122
29803: PPUSH
29804: LD_EXP 122
29808: PUSH
29809: LD_INT 1
29811: PLUS
29812: PPUSH
29813: EMPTY
29814: PPUSH
29815: CALL_OW 1
29819: ST_TO_ADDR
// end end ;
29820: GO 29749
29822: POP
29823: POP
// for i := minerMinesList downto 1 do
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: DOUBLE
29830: LD_EXP 122
29834: INC
29835: ST_TO_ADDR
29836: LD_INT 1
29838: PUSH
29839: FOR_DOWNTO
29840: IFFALSE 30176
// begin if IsLive ( minersList [ i ] ) then
29842: LD_EXP 121
29846: PUSH
29847: LD_VAR 0 1
29851: ARRAY
29852: PPUSH
29853: CALL_OW 300
29857: IFFALSE 29885
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29859: LD_EXP 121
29863: PUSH
29864: LD_VAR 0 1
29868: ARRAY
29869: PPUSH
29870: LD_EXP 122
29874: PUSH
29875: LD_VAR 0 1
29879: ARRAY
29880: PPUSH
29881: CALL_OW 505
// if not minerMinesList [ i ] then
29885: LD_EXP 122
29889: PUSH
29890: LD_VAR 0 1
29894: ARRAY
29895: NOT
29896: IFFALSE 29900
// continue ;
29898: GO 29839
// for j := minerMinesList [ i ] downto 1 do
29900: LD_ADDR_VAR 0 2
29904: PUSH
29905: DOUBLE
29906: LD_EXP 122
29910: PUSH
29911: LD_VAR 0 1
29915: ARRAY
29916: INC
29917: ST_TO_ADDR
29918: LD_INT 1
29920: PUSH
29921: FOR_DOWNTO
29922: IFFALSE 30172
// begin side := GetSide ( minersList [ i ] ) ;
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_EXP 121
29933: PUSH
29934: LD_VAR 0 1
29938: ARRAY
29939: PPUSH
29940: CALL_OW 255
29944: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29945: LD_ADDR_VAR 0 4
29949: PUSH
29950: LD_EXP 122
29954: PUSH
29955: LD_VAR 0 1
29959: ARRAY
29960: PUSH
29961: LD_VAR 0 2
29965: ARRAY
29966: PUSH
29967: LD_INT 1
29969: ARRAY
29970: PPUSH
29971: LD_EXP 122
29975: PUSH
29976: LD_VAR 0 1
29980: ARRAY
29981: PUSH
29982: LD_VAR 0 2
29986: ARRAY
29987: PUSH
29988: LD_INT 2
29990: ARRAY
29991: PPUSH
29992: CALL_OW 428
29996: ST_TO_ADDR
// if not tmp then
29997: LD_VAR 0 4
30001: NOT
30002: IFFALSE 30006
// continue ;
30004: GO 29921
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30006: LD_VAR 0 4
30010: PUSH
30011: LD_INT 81
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PPUSH
30023: CALL_OW 69
30027: IN
30028: PUSH
30029: LD_EXP 122
30033: PUSH
30034: LD_VAR 0 1
30038: ARRAY
30039: PUSH
30040: LD_VAR 0 2
30044: ARRAY
30045: PUSH
30046: LD_INT 1
30048: ARRAY
30049: PPUSH
30050: LD_EXP 122
30054: PUSH
30055: LD_VAR 0 1
30059: ARRAY
30060: PUSH
30061: LD_VAR 0 2
30065: ARRAY
30066: PUSH
30067: LD_INT 2
30069: ARRAY
30070: PPUSH
30071: CALL_OW 458
30075: AND
30076: IFFALSE 30170
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30078: LD_EXP 122
30082: PUSH
30083: LD_VAR 0 1
30087: ARRAY
30088: PUSH
30089: LD_VAR 0 2
30093: ARRAY
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: LD_EXP 122
30103: PUSH
30104: LD_VAR 0 1
30108: ARRAY
30109: PUSH
30110: LD_VAR 0 2
30114: ARRAY
30115: PUSH
30116: LD_INT 2
30118: ARRAY
30119: PPUSH
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30129: LD_ADDR_EXP 122
30133: PUSH
30134: LD_EXP 122
30138: PPUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: LD_EXP 122
30148: PUSH
30149: LD_VAR 0 1
30153: ARRAY
30154: PPUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL_OW 3
30164: PPUSH
30165: CALL_OW 1
30169: ST_TO_ADDR
// end ; end ;
30170: GO 29921
30172: POP
30173: POP
// end ;
30174: GO 29839
30176: POP
30177: POP
// end ;
30178: PPOPN 4
30180: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
// result := false ;
30185: LD_ADDR_VAR 0 4
30189: PUSH
30190: LD_INT 0
30192: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 264
30202: PUSH
30203: LD_EXP 131
30207: EQUAL
30208: NOT
30209: IFFALSE 30213
// exit ;
30211: GO 30453
// index := GetElementIndex ( minersList , unit ) ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_EXP 121
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL 36596 0 2
30232: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30233: LD_EXP 122
30237: PUSH
30238: LD_VAR 0 5
30242: ARRAY
30243: PUSH
30244: LD_EXP 123
30248: GREATEREQUAL
30249: IFFALSE 30253
// exit ;
30251: GO 30453
// ComMoveXY ( unit , x , y ) ;
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: LD_VAR 0 3
30267: PPUSH
30268: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30272: LD_INT 35
30274: PPUSH
30275: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30279: LD_VAR 0 1
30283: PPUSH
30284: LD_VAR 0 2
30288: PPUSH
30289: LD_VAR 0 3
30293: PPUSH
30294: CALL 66660 0 3
30298: NOT
30299: PUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 314
30309: AND
30310: IFFALSE 30314
// exit ;
30312: GO 30453
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 428
30328: PUSH
30329: LD_VAR 0 1
30333: EQUAL
30334: PUSH
30335: LD_VAR 0 1
30339: PPUSH
30340: CALL_OW 314
30344: NOT
30345: AND
30346: IFFALSE 30272
// PlaySoundXY ( x , y , PlantMine ) ;
30348: LD_VAR 0 2
30352: PPUSH
30353: LD_VAR 0 3
30357: PPUSH
30358: LD_STRING PlantMine
30360: PPUSH
30361: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30365: LD_VAR 0 2
30369: PPUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 255
30384: PPUSH
30385: LD_INT 0
30387: PPUSH
30388: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30392: LD_ADDR_EXP 122
30396: PUSH
30397: LD_EXP 122
30401: PPUSH
30402: LD_VAR 0 5
30406: PUSH
30407: LD_EXP 122
30411: PUSH
30412: LD_VAR 0 5
30416: ARRAY
30417: PUSH
30418: LD_INT 1
30420: PLUS
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PPUSH
30426: LD_VAR 0 2
30430: PUSH
30431: LD_VAR 0 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL 36811 0 3
30444: ST_TO_ADDR
// result := true ;
30445: LD_ADDR_VAR 0 4
30449: PUSH
30450: LD_INT 1
30452: ST_TO_ADDR
// end ;
30453: LD_VAR 0 4
30457: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30458: LD_INT 0
30460: PPUSH
30461: PPUSH
30462: PPUSH
// if not unit in minersList then
30463: LD_VAR 0 1
30467: PUSH
30468: LD_EXP 121
30472: IN
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30870
// index := GetElementIndex ( minersList , unit ) ;
30478: LD_ADDR_VAR 0 6
30482: PUSH
30483: LD_EXP 121
30487: PPUSH
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL 36596 0 2
30497: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: DOUBLE
30504: LD_EXP 122
30508: PUSH
30509: LD_VAR 0 6
30513: ARRAY
30514: INC
30515: ST_TO_ADDR
30516: LD_INT 1
30518: PUSH
30519: FOR_DOWNTO
30520: IFFALSE 30681
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30522: LD_EXP 122
30526: PUSH
30527: LD_VAR 0 6
30531: ARRAY
30532: PUSH
30533: LD_VAR 0 5
30537: ARRAY
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PUSH
30543: LD_VAR 0 2
30547: EQUAL
30548: PUSH
30549: LD_EXP 122
30553: PUSH
30554: LD_VAR 0 6
30558: ARRAY
30559: PUSH
30560: LD_VAR 0 5
30564: ARRAY
30565: PUSH
30566: LD_INT 2
30568: ARRAY
30569: PUSH
30570: LD_VAR 0 3
30574: EQUAL
30575: AND
30576: IFFALSE 30679
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30578: LD_EXP 122
30582: PUSH
30583: LD_VAR 0 6
30587: ARRAY
30588: PUSH
30589: LD_VAR 0 5
30593: ARRAY
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_EXP 122
30603: PUSH
30604: LD_VAR 0 6
30608: ARRAY
30609: PUSH
30610: LD_VAR 0 5
30614: ARRAY
30615: PUSH
30616: LD_INT 2
30618: ARRAY
30619: PPUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: CALL_OW 255
30629: PPUSH
30630: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30634: LD_ADDR_EXP 122
30638: PUSH
30639: LD_EXP 122
30643: PPUSH
30644: LD_VAR 0 6
30648: PPUSH
30649: LD_EXP 122
30653: PUSH
30654: LD_VAR 0 6
30658: ARRAY
30659: PPUSH
30660: LD_VAR 0 5
30664: PPUSH
30665: CALL_OW 3
30669: PPUSH
30670: CALL_OW 1
30674: ST_TO_ADDR
// exit ;
30675: POP
30676: POP
30677: GO 30870
// end ; end ;
30679: GO 30519
30681: POP
30682: POP
// for i := minerMinesList [ index ] downto 1 do
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: DOUBLE
30689: LD_EXP 122
30693: PUSH
30694: LD_VAR 0 6
30698: ARRAY
30699: INC
30700: ST_TO_ADDR
30701: LD_INT 1
30703: PUSH
30704: FOR_DOWNTO
30705: IFFALSE 30868
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30707: LD_EXP 122
30711: PUSH
30712: LD_VAR 0 6
30716: ARRAY
30717: PUSH
30718: LD_VAR 0 5
30722: ARRAY
30723: PUSH
30724: LD_INT 1
30726: ARRAY
30727: PPUSH
30728: LD_EXP 122
30732: PUSH
30733: LD_VAR 0 6
30737: ARRAY
30738: PUSH
30739: LD_VAR 0 5
30743: ARRAY
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 2
30753: PPUSH
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL_OW 298
30763: PUSH
30764: LD_INT 6
30766: LESS
30767: IFFALSE 30866
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30769: LD_EXP 122
30773: PUSH
30774: LD_VAR 0 6
30778: ARRAY
30779: PUSH
30780: LD_VAR 0 5
30784: ARRAY
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: LD_EXP 122
30794: PUSH
30795: LD_VAR 0 6
30799: ARRAY
30800: PUSH
30801: LD_VAR 0 5
30805: ARRAY
30806: PUSH
30807: LD_INT 2
30809: ARRAY
30810: PPUSH
30811: LD_VAR 0 1
30815: PPUSH
30816: CALL_OW 255
30820: PPUSH
30821: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30825: LD_ADDR_EXP 122
30829: PUSH
30830: LD_EXP 122
30834: PPUSH
30835: LD_VAR 0 6
30839: PPUSH
30840: LD_EXP 122
30844: PUSH
30845: LD_VAR 0 6
30849: ARRAY
30850: PPUSH
30851: LD_VAR 0 5
30855: PPUSH
30856: CALL_OW 3
30860: PPUSH
30861: CALL_OW 1
30865: ST_TO_ADDR
// end ; end ;
30866: GO 30704
30868: POP
30869: POP
// end ;
30870: LD_VAR 0 4
30874: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 264
30895: PUSH
30896: LD_EXP 131
30900: EQUAL
30901: NOT
30902: PUSH
30903: LD_VAR 0 1
30907: PUSH
30908: LD_EXP 121
30912: IN
30913: NOT
30914: OR
30915: IFFALSE 30919
// exit ;
30917: GO 31241
// index := GetElementIndex ( minersList , unit ) ;
30919: LD_ADDR_VAR 0 6
30923: PUSH
30924: LD_EXP 121
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL 36596 0 2
30938: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: LD_EXP 123
30948: PUSH
30949: LD_EXP 122
30953: PUSH
30954: LD_VAR 0 6
30958: ARRAY
30959: MINUS
30960: ST_TO_ADDR
// if not minesFreeAmount then
30961: LD_VAR 0 8
30965: NOT
30966: IFFALSE 30970
// exit ;
30968: GO 31241
// tmp := [ ] ;
30970: LD_ADDR_VAR 0 7
30974: PUSH
30975: EMPTY
30976: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30977: LD_ADDR_VAR 0 5
30981: PUSH
30982: DOUBLE
30983: LD_INT 1
30985: DEC
30986: ST_TO_ADDR
30987: LD_VAR 0 8
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31188
// begin _d := rand ( 0 , 5 ) ;
30995: LD_ADDR_VAR 0 11
30999: PUSH
31000: LD_INT 0
31002: PPUSH
31003: LD_INT 5
31005: PPUSH
31006: CALL_OW 12
31010: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31011: LD_ADDR_VAR 0 12
31015: PUSH
31016: LD_INT 2
31018: PPUSH
31019: LD_INT 6
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31027: LD_ADDR_VAR 0 9
31031: PUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 11
31041: PPUSH
31042: LD_VAR 0 12
31046: PPUSH
31047: CALL_OW 272
31051: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31052: LD_ADDR_VAR 0 10
31056: PUSH
31057: LD_VAR 0 3
31061: PPUSH
31062: LD_VAR 0 11
31066: PPUSH
31067: LD_VAR 0 12
31071: PPUSH
31072: CALL_OW 273
31076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31077: LD_VAR 0 9
31081: PPUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: CALL_OW 488
31091: PUSH
31092: LD_VAR 0 9
31096: PUSH
31097: LD_VAR 0 10
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_VAR 0 7
31110: IN
31111: NOT
31112: AND
31113: PUSH
31114: LD_VAR 0 9
31118: PPUSH
31119: LD_VAR 0 10
31123: PPUSH
31124: CALL_OW 458
31128: NOT
31129: AND
31130: IFFALSE 31172
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31132: LD_ADDR_VAR 0 7
31136: PUSH
31137: LD_VAR 0 7
31141: PPUSH
31142: LD_VAR 0 7
31146: PUSH
31147: LD_INT 1
31149: PLUS
31150: PPUSH
31151: LD_VAR 0 9
31155: PUSH
31156: LD_VAR 0 10
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
31170: GO 31186
// i := i - 1 ;
31172: LD_ADDR_VAR 0 5
31176: PUSH
31177: LD_VAR 0 5
31181: PUSH
31182: LD_INT 1
31184: MINUS
31185: ST_TO_ADDR
// end ;
31186: GO 30992
31188: POP
31189: POP
// for i in tmp do
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_VAR 0 7
31199: PUSH
31200: FOR_IN
31201: IFFALSE 31239
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31203: LD_VAR 0 1
31207: PPUSH
31208: LD_VAR 0 5
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PPUSH
31217: LD_VAR 0 5
31221: PUSH
31222: LD_INT 2
31224: ARRAY
31225: PPUSH
31226: CALL 30181 0 3
31230: NOT
31231: IFFALSE 31237
// exit ;
31233: POP
31234: POP
31235: GO 31241
31237: GO 31200
31239: POP
31240: POP
// end ;
31241: LD_VAR 0 4
31245: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
// if not GetClass ( unit ) = class_sniper then
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 257
31264: PUSH
31265: LD_INT 5
31267: EQUAL
31268: NOT
31269: IFFALSE 31273
// exit ;
31271: GO 31661
// dist := 8 ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_INT 8
31280: ST_TO_ADDR
// viewRange := 12 ;
31281: LD_ADDR_VAR 0 7
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
// side := GetSide ( unit ) ;
31289: LD_ADDR_VAR 0 6
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 255
31303: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31304: LD_INT 61
31306: PPUSH
31307: LD_VAR 0 6
31311: PPUSH
31312: CALL_OW 321
31316: PUSH
31317: LD_INT 2
31319: EQUAL
31320: IFFALSE 31330
// viewRange := 16 ;
31322: LD_ADDR_VAR 0 7
31326: PUSH
31327: LD_INT 16
31329: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31330: LD_VAR 0 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: LD_VAR 0 3
31344: PPUSH
31345: CALL_OW 297
31349: PUSH
31350: LD_VAR 0 5
31354: GREATER
31355: IFFALSE 31434
// begin ComMoveXY ( unit , x , y ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_VAR 0 2
31366: PPUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31376: LD_INT 35
31378: PPUSH
31379: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31383: LD_VAR 0 1
31387: PPUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: LD_VAR 0 3
31397: PPUSH
31398: CALL 66660 0 3
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31661
// until GetDistUnitXY ( unit , x , y ) < dist ;
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 2
31416: PPUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 297
31426: PUSH
31427: LD_VAR 0 5
31431: LESS
31432: IFFALSE 31376
// end ; ComTurnXY ( unit , x , y ) ;
31434: LD_VAR 0 1
31438: PPUSH
31439: LD_VAR 0 2
31443: PPUSH
31444: LD_VAR 0 3
31448: PPUSH
31449: CALL_OW 118
// wait ( 5 ) ;
31453: LD_INT 5
31455: PPUSH
31456: CALL_OW 67
// _d := GetDir ( unit ) ;
31460: LD_ADDR_VAR 0 10
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 254
31474: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31475: LD_ADDR_VAR 0 8
31479: PUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 250
31489: PPUSH
31490: LD_VAR 0 10
31494: PPUSH
31495: LD_VAR 0 5
31499: PPUSH
31500: CALL_OW 272
31504: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 251
31519: PPUSH
31520: LD_VAR 0 10
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: CALL_OW 273
31534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_VAR 0 9
31544: PPUSH
31545: CALL_OW 488
31549: NOT
31550: IFFALSE 31554
// exit ;
31552: GO 31661
// ComAnimCustom ( unit , 1 ) ;
31554: LD_VAR 0 1
31558: PPUSH
31559: LD_INT 1
31561: PPUSH
31562: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31566: LD_VAR 0 8
31570: PPUSH
31571: LD_VAR 0 9
31575: PPUSH
31576: LD_VAR 0 6
31580: PPUSH
31581: LD_VAR 0 7
31585: PPUSH
31586: CALL_OW 330
// repeat wait ( 1 ) ;
31590: LD_INT 1
31592: PPUSH
31593: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31597: LD_VAR 0 1
31601: PPUSH
31602: CALL_OW 316
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 314
31616: OR
31617: PUSH
31618: LD_VAR 0 1
31622: PPUSH
31623: CALL_OW 302
31627: NOT
31628: OR
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 301
31639: OR
31640: IFFALSE 31590
// RemoveSeeing ( _x , _y , side ) ;
31642: LD_VAR 0 8
31646: PPUSH
31647: LD_VAR 0 9
31651: PPUSH
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 331
// end ; end_of_file
31661: LD_VAR 0 4
31665: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31666: LD_VAR 0 1
31670: PUSH
31671: LD_INT 200
31673: DOUBLE
31674: GREATEREQUAL
31675: IFFALSE 31683
31677: LD_INT 299
31679: DOUBLE
31680: LESSEQUAL
31681: IFTRUE 31685
31683: GO 31717
31685: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
31686: LD_VAR 0 1
31690: PPUSH
31691: LD_VAR 0 2
31695: PPUSH
31696: LD_VAR 0 3
31700: PPUSH
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL 27783 0 5
31715: GO 31718
31717: POP
// end ; end_of_file end_of_file
31718: PPOPN 11
31720: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31721: LD_INT 0
31723: PPUSH
// ar_miner := 81 ;
31724: LD_ADDR_EXP 131
31728: PUSH
31729: LD_INT 81
31731: ST_TO_ADDR
// ar_crane := 88 ;
31732: LD_ADDR_EXP 130
31736: PUSH
31737: LD_INT 88
31739: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31740: LD_ADDR_EXP 125
31744: PUSH
31745: LD_INT 89
31747: ST_TO_ADDR
// us_hack := 99 ;
31748: LD_ADDR_EXP 126
31752: PUSH
31753: LD_INT 99
31755: ST_TO_ADDR
// us_artillery := 97 ;
31756: LD_ADDR_EXP 127
31760: PUSH
31761: LD_INT 97
31763: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31764: LD_ADDR_EXP 128
31768: PUSH
31769: LD_INT 91
31771: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31772: LD_ADDR_EXP 129
31776: PUSH
31777: LD_INT 92
31779: ST_TO_ADDR
// ru_radar := 98 ;
31780: LD_ADDR_EXP 124
31784: PUSH
31785: LD_INT 98
31787: ST_TO_ADDR
// tech_Artillery := 80 ;
31788: LD_ADDR_EXP 132
31792: PUSH
31793: LD_INT 80
31795: ST_TO_ADDR
// tech_RadMat := 81 ;
31796: LD_ADDR_EXP 133
31800: PUSH
31801: LD_INT 81
31803: ST_TO_ADDR
// tech_BasicTools := 82 ;
31804: LD_ADDR_EXP 134
31808: PUSH
31809: LD_INT 82
31811: ST_TO_ADDR
// tech_Cargo := 83 ;
31812: LD_ADDR_EXP 135
31816: PUSH
31817: LD_INT 83
31819: ST_TO_ADDR
// tech_Track := 84 ;
31820: LD_ADDR_EXP 136
31824: PUSH
31825: LD_INT 84
31827: ST_TO_ADDR
// tech_Crane := 85 ;
31828: LD_ADDR_EXP 137
31832: PUSH
31833: LD_INT 85
31835: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31836: LD_ADDR_EXP 138
31840: PUSH
31841: LD_INT 86
31843: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31844: LD_ADDR_EXP 139
31848: PUSH
31849: LD_INT 87
31851: ST_TO_ADDR
// end ;
31852: LD_VAR 0 1
31856: RET
// every 1 do
31857: GO 31859
31859: DISABLE
// InitGlobalVariables ; end_of_file
31860: CALL 31721 0 0
31864: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31865: LD_INT 0
31867: PPUSH
31868: PPUSH
// if exist_mode then
31869: LD_VAR 0 2
31873: IFFALSE 31898
// unit := CreateCharacter ( prefix & ident ) else
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_VAR 0 3
31884: PUSH
31885: LD_VAR 0 1
31889: STR
31890: PPUSH
31891: CALL_OW 34
31895: ST_TO_ADDR
31896: GO 31913
// unit := NewCharacter ( ident ) ;
31898: LD_ADDR_VAR 0 5
31902: PUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 25
31912: ST_TO_ADDR
// result := unit ;
31913: LD_ADDR_VAR 0 4
31917: PUSH
31918: LD_VAR 0 5
31922: ST_TO_ADDR
// end ;
31923: LD_VAR 0 4
31927: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31928: LD_INT 0
31930: PPUSH
31931: PPUSH
// if not side or not nation then
31932: LD_VAR 0 1
31936: NOT
31937: PUSH
31938: LD_VAR 0 2
31942: NOT
31943: OR
31944: IFFALSE 31948
// exit ;
31946: GO 32712
// case nation of nation_american :
31948: LD_VAR 0 2
31952: PUSH
31953: LD_INT 1
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 32175
31961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_INT 35
31969: PUSH
31970: LD_INT 45
31972: PUSH
31973: LD_INT 46
31975: PUSH
31976: LD_INT 47
31978: PUSH
31979: LD_INT 82
31981: PUSH
31982: LD_INT 83
31984: PUSH
31985: LD_INT 84
31987: PUSH
31988: LD_INT 85
31990: PUSH
31991: LD_INT 86
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: LD_INT 6
32002: PUSH
32003: LD_INT 15
32005: PUSH
32006: LD_INT 16
32008: PUSH
32009: LD_INT 7
32011: PUSH
32012: LD_INT 12
32014: PUSH
32015: LD_INT 13
32017: PUSH
32018: LD_INT 10
32020: PUSH
32021: LD_INT 14
32023: PUSH
32024: LD_INT 20
32026: PUSH
32027: LD_INT 21
32029: PUSH
32030: LD_INT 22
32032: PUSH
32033: LD_INT 25
32035: PUSH
32036: LD_INT 32
32038: PUSH
32039: LD_INT 27
32041: PUSH
32042: LD_INT 36
32044: PUSH
32045: LD_INT 69
32047: PUSH
32048: LD_INT 39
32050: PUSH
32051: LD_INT 34
32053: PUSH
32054: LD_INT 40
32056: PUSH
32057: LD_INT 48
32059: PUSH
32060: LD_INT 49
32062: PUSH
32063: LD_INT 50
32065: PUSH
32066: LD_INT 51
32068: PUSH
32069: LD_INT 52
32071: PUSH
32072: LD_INT 53
32074: PUSH
32075: LD_INT 54
32077: PUSH
32078: LD_INT 55
32080: PUSH
32081: LD_INT 56
32083: PUSH
32084: LD_INT 57
32086: PUSH
32087: LD_INT 58
32089: PUSH
32090: LD_INT 59
32092: PUSH
32093: LD_INT 60
32095: PUSH
32096: LD_INT 61
32098: PUSH
32099: LD_INT 62
32101: PUSH
32102: LD_INT 80
32104: PUSH
32105: LD_INT 82
32107: PUSH
32108: LD_INT 83
32110: PUSH
32111: LD_INT 84
32113: PUSH
32114: LD_INT 85
32116: PUSH
32117: LD_INT 86
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: ST_TO_ADDR
32173: GO 32636
32175: LD_INT 2
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32405
32183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32184: LD_ADDR_VAR 0 4
32188: PUSH
32189: LD_INT 35
32191: PUSH
32192: LD_INT 45
32194: PUSH
32195: LD_INT 46
32197: PUSH
32198: LD_INT 47
32200: PUSH
32201: LD_INT 82
32203: PUSH
32204: LD_INT 83
32206: PUSH
32207: LD_INT 84
32209: PUSH
32210: LD_INT 85
32212: PUSH
32213: LD_INT 87
32215: PUSH
32216: LD_INT 70
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 11
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: LD_INT 6
32236: PUSH
32237: LD_INT 15
32239: PUSH
32240: LD_INT 18
32242: PUSH
32243: LD_INT 7
32245: PUSH
32246: LD_INT 17
32248: PUSH
32249: LD_INT 8
32251: PUSH
32252: LD_INT 20
32254: PUSH
32255: LD_INT 21
32257: PUSH
32258: LD_INT 22
32260: PUSH
32261: LD_INT 72
32263: PUSH
32264: LD_INT 26
32266: PUSH
32267: LD_INT 69
32269: PUSH
32270: LD_INT 39
32272: PUSH
32273: LD_INT 40
32275: PUSH
32276: LD_INT 41
32278: PUSH
32279: LD_INT 42
32281: PUSH
32282: LD_INT 43
32284: PUSH
32285: LD_INT 48
32287: PUSH
32288: LD_INT 49
32290: PUSH
32291: LD_INT 50
32293: PUSH
32294: LD_INT 51
32296: PUSH
32297: LD_INT 52
32299: PUSH
32300: LD_INT 53
32302: PUSH
32303: LD_INT 54
32305: PUSH
32306: LD_INT 55
32308: PUSH
32309: LD_INT 56
32311: PUSH
32312: LD_INT 60
32314: PUSH
32315: LD_INT 61
32317: PUSH
32318: LD_INT 62
32320: PUSH
32321: LD_INT 66
32323: PUSH
32324: LD_INT 67
32326: PUSH
32327: LD_INT 68
32329: PUSH
32330: LD_INT 81
32332: PUSH
32333: LD_INT 82
32335: PUSH
32336: LD_INT 83
32338: PUSH
32339: LD_INT 84
32341: PUSH
32342: LD_INT 85
32344: PUSH
32345: LD_INT 87
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: ST_TO_ADDR
32403: GO 32636
32405: LD_INT 3
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32635
32413: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: LD_INT 46
32421: PUSH
32422: LD_INT 47
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 82
32433: PUSH
32434: LD_INT 83
32436: PUSH
32437: LD_INT 84
32439: PUSH
32440: LD_INT 85
32442: PUSH
32443: LD_INT 86
32445: PUSH
32446: LD_INT 11
32448: PUSH
32449: LD_INT 9
32451: PUSH
32452: LD_INT 20
32454: PUSH
32455: LD_INT 19
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 24
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_INT 25
32469: PUSH
32470: LD_INT 28
32472: PUSH
32473: LD_INT 29
32475: PUSH
32476: LD_INT 30
32478: PUSH
32479: LD_INT 31
32481: PUSH
32482: LD_INT 37
32484: PUSH
32485: LD_INT 38
32487: PUSH
32488: LD_INT 32
32490: PUSH
32491: LD_INT 27
32493: PUSH
32494: LD_INT 33
32496: PUSH
32497: LD_INT 69
32499: PUSH
32500: LD_INT 39
32502: PUSH
32503: LD_INT 34
32505: PUSH
32506: LD_INT 40
32508: PUSH
32509: LD_INT 71
32511: PUSH
32512: LD_INT 23
32514: PUSH
32515: LD_INT 44
32517: PUSH
32518: LD_INT 48
32520: PUSH
32521: LD_INT 49
32523: PUSH
32524: LD_INT 50
32526: PUSH
32527: LD_INT 51
32529: PUSH
32530: LD_INT 52
32532: PUSH
32533: LD_INT 53
32535: PUSH
32536: LD_INT 54
32538: PUSH
32539: LD_INT 55
32541: PUSH
32542: LD_INT 56
32544: PUSH
32545: LD_INT 57
32547: PUSH
32548: LD_INT 58
32550: PUSH
32551: LD_INT 59
32553: PUSH
32554: LD_INT 63
32556: PUSH
32557: LD_INT 64
32559: PUSH
32560: LD_INT 65
32562: PUSH
32563: LD_INT 82
32565: PUSH
32566: LD_INT 83
32568: PUSH
32569: LD_INT 84
32571: PUSH
32572: LD_INT 85
32574: PUSH
32575: LD_INT 86
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
32633: GO 32636
32635: POP
// if state > - 1 and state < 3 then
32636: LD_VAR 0 3
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: GREATER
32645: PUSH
32646: LD_VAR 0 3
32650: PUSH
32651: LD_INT 3
32653: LESS
32654: AND
32655: IFFALSE 32712
// for i in result do
32657: LD_ADDR_VAR 0 5
32661: PUSH
32662: LD_VAR 0 4
32666: PUSH
32667: FOR_IN
32668: IFFALSE 32710
// if GetTech ( i , side ) <> state then
32670: LD_VAR 0 5
32674: PPUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 321
32684: PUSH
32685: LD_VAR 0 3
32689: NONEQUAL
32690: IFFALSE 32708
// result := result diff i ;
32692: LD_ADDR_VAR 0 4
32696: PUSH
32697: LD_VAR 0 4
32701: PUSH
32702: LD_VAR 0 5
32706: DIFF
32707: ST_TO_ADDR
32708: GO 32667
32710: POP
32711: POP
// end ;
32712: LD_VAR 0 4
32716: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32717: LD_INT 0
32719: PPUSH
32720: PPUSH
32721: PPUSH
// result := true ;
32722: LD_ADDR_VAR 0 3
32726: PUSH
32727: LD_INT 1
32729: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32730: LD_ADDR_VAR 0 5
32734: PUSH
32735: LD_VAR 0 2
32739: PPUSH
32740: CALL_OW 480
32744: ST_TO_ADDR
// if not tmp then
32745: LD_VAR 0 5
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 32803
// for i in tmp do
32754: LD_ADDR_VAR 0 4
32758: PUSH
32759: LD_VAR 0 5
32763: PUSH
32764: FOR_IN
32765: IFFALSE 32801
// if GetTech ( i , side ) <> state_researched then
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_VAR 0 1
32776: PPUSH
32777: CALL_OW 321
32781: PUSH
32782: LD_INT 2
32784: NONEQUAL
32785: IFFALSE 32799
// begin result := false ;
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 0
32794: ST_TO_ADDR
// exit ;
32795: POP
32796: POP
32797: GO 32803
// end ;
32799: GO 32764
32801: POP
32802: POP
// end ;
32803: LD_VAR 0 3
32807: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32808: LD_INT 0
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
32814: PPUSH
32815: PPUSH
32816: PPUSH
32817: PPUSH
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32823: LD_VAR 0 1
32827: NOT
32828: PUSH
32829: LD_VAR 0 1
32833: PPUSH
32834: CALL_OW 257
32838: PUSH
32839: LD_INT 9
32841: NONEQUAL
32842: OR
32843: IFFALSE 32847
// exit ;
32845: GO 33420
// side := GetSide ( unit ) ;
32847: LD_ADDR_VAR 0 9
32851: PUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 255
32861: ST_TO_ADDR
// tech_space := tech_spacanom ;
32862: LD_ADDR_VAR 0 12
32866: PUSH
32867: LD_INT 29
32869: ST_TO_ADDR
// tech_time := tech_taurad ;
32870: LD_ADDR_VAR 0 13
32874: PUSH
32875: LD_INT 28
32877: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32878: LD_ADDR_VAR 0 11
32882: PUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 310
32892: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32893: LD_VAR 0 11
32897: PPUSH
32898: CALL_OW 247
32902: PUSH
32903: LD_INT 2
32905: EQUAL
32906: IFFALSE 32910
// exit ;
32908: GO 33420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32910: LD_ADDR_VAR 0 8
32914: PUSH
32915: LD_INT 81
32917: PUSH
32918: LD_VAR 0 9
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 21
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PPUSH
32948: CALL_OW 69
32952: ST_TO_ADDR
// if not tmp then
32953: LD_VAR 0 8
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33420
// if in_unit then
32962: LD_VAR 0 11
32966: IFFALSE 32990
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32968: LD_ADDR_VAR 0 10
32972: PUSH
32973: LD_VAR 0 8
32977: PPUSH
32978: LD_VAR 0 11
32982: PPUSH
32983: CALL_OW 74
32987: ST_TO_ADDR
32988: GO 33010
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32990: LD_ADDR_VAR 0 10
32994: PUSH
32995: LD_VAR 0 8
32999: PPUSH
33000: LD_VAR 0 1
33004: PPUSH
33005: CALL_OW 74
33009: ST_TO_ADDR
// if not enemy then
33010: LD_VAR 0 10
33014: NOT
33015: IFFALSE 33019
// exit ;
33017: GO 33420
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33019: LD_VAR 0 11
33023: PUSH
33024: LD_VAR 0 11
33028: PPUSH
33029: LD_VAR 0 10
33033: PPUSH
33034: CALL_OW 296
33038: PUSH
33039: LD_INT 13
33041: GREATER
33042: AND
33043: PUSH
33044: LD_VAR 0 1
33048: PPUSH
33049: LD_VAR 0 10
33053: PPUSH
33054: CALL_OW 296
33058: PUSH
33059: LD_INT 12
33061: GREATER
33062: OR
33063: IFFALSE 33067
// exit ;
33065: GO 33420
// missile := [ 1 ] ;
33067: LD_ADDR_VAR 0 14
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33078: LD_VAR 0 9
33082: PPUSH
33083: LD_VAR 0 12
33087: PPUSH
33088: CALL_OW 325
33092: IFFALSE 33121
// missile := Insert ( missile , missile + 1 , 2 ) ;
33094: LD_ADDR_VAR 0 14
33098: PUSH
33099: LD_VAR 0 14
33103: PPUSH
33104: LD_VAR 0 14
33108: PUSH
33109: LD_INT 1
33111: PLUS
33112: PPUSH
33113: LD_INT 2
33115: PPUSH
33116: CALL_OW 2
33120: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33121: LD_VAR 0 9
33125: PPUSH
33126: LD_VAR 0 13
33130: PPUSH
33131: CALL_OW 325
33135: PUSH
33136: LD_VAR 0 10
33140: PPUSH
33141: CALL_OW 255
33145: PPUSH
33146: LD_VAR 0 13
33150: PPUSH
33151: CALL_OW 325
33155: NOT
33156: AND
33157: IFFALSE 33186
// missile := Insert ( missile , missile + 1 , 3 ) ;
33159: LD_ADDR_VAR 0 14
33163: PUSH
33164: LD_VAR 0 14
33168: PPUSH
33169: LD_VAR 0 14
33173: PUSH
33174: LD_INT 1
33176: PLUS
33177: PPUSH
33178: LD_INT 3
33180: PPUSH
33181: CALL_OW 2
33185: ST_TO_ADDR
// if missile < 2 then
33186: LD_VAR 0 14
33190: PUSH
33191: LD_INT 2
33193: LESS
33194: IFFALSE 33198
// exit ;
33196: GO 33420
// x := GetX ( enemy ) ;
33198: LD_ADDR_VAR 0 4
33202: PUSH
33203: LD_VAR 0 10
33207: PPUSH
33208: CALL_OW 250
33212: ST_TO_ADDR
// y := GetY ( enemy ) ;
33213: LD_ADDR_VAR 0 5
33217: PUSH
33218: LD_VAR 0 10
33222: PPUSH
33223: CALL_OW 251
33227: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33228: LD_ADDR_VAR 0 6
33232: PUSH
33233: LD_VAR 0 4
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PPUSH
33242: LD_INT 1
33244: PPUSH
33245: CALL_OW 12
33249: PLUS
33250: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33251: LD_ADDR_VAR 0 7
33255: PUSH
33256: LD_VAR 0 5
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PPUSH
33265: LD_INT 1
33267: PPUSH
33268: CALL_OW 12
33272: PLUS
33273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33274: LD_VAR 0 6
33278: PPUSH
33279: LD_VAR 0 7
33283: PPUSH
33284: CALL_OW 488
33288: NOT
33289: IFFALSE 33311
// begin _x := x ;
33291: LD_ADDR_VAR 0 6
33295: PUSH
33296: LD_VAR 0 4
33300: ST_TO_ADDR
// _y := y ;
33301: LD_ADDR_VAR 0 7
33305: PUSH
33306: LD_VAR 0 5
33310: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_INT 1
33318: PPUSH
33319: LD_VAR 0 14
33323: PPUSH
33324: CALL_OW 12
33328: ST_TO_ADDR
// case i of 1 :
33329: LD_VAR 0 3
33333: PUSH
33334: LD_INT 1
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33359
33342: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33343: LD_VAR 0 1
33347: PPUSH
33348: LD_VAR 0 10
33352: PPUSH
33353: CALL_OW 115
33357: GO 33420
33359: LD_INT 2
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33389
33367: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_VAR 0 6
33377: PPUSH
33378: LD_VAR 0 7
33382: PPUSH
33383: CALL_OW 153
33387: GO 33420
33389: LD_INT 3
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33397
33395: GO 33419
33397: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_VAR 0 6
33407: PPUSH
33408: LD_VAR 0 7
33412: PPUSH
33413: CALL_OW 154
33417: GO 33420
33419: POP
// end ;
33420: LD_VAR 0 2
33424: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33425: LD_INT 0
33427: PPUSH
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
33432: PPUSH
// if not unit or not building then
33433: LD_VAR 0 1
33437: NOT
33438: PUSH
33439: LD_VAR 0 2
33443: NOT
33444: OR
33445: IFFALSE 33449
// exit ;
33447: GO 33607
// x := GetX ( building ) ;
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_VAR 0 2
33458: PPUSH
33459: CALL_OW 250
33463: ST_TO_ADDR
// y := GetY ( building ) ;
33464: LD_ADDR_VAR 0 6
33468: PUSH
33469: LD_VAR 0 2
33473: PPUSH
33474: CALL_OW 251
33478: ST_TO_ADDR
// for i = 0 to 5 do
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: DOUBLE
33485: LD_INT 0
33487: DEC
33488: ST_TO_ADDR
33489: LD_INT 5
33491: PUSH
33492: FOR_TO
33493: IFFALSE 33605
// begin _x := ShiftX ( x , i , 3 ) ;
33495: LD_ADDR_VAR 0 7
33499: PUSH
33500: LD_VAR 0 5
33504: PPUSH
33505: LD_VAR 0 4
33509: PPUSH
33510: LD_INT 3
33512: PPUSH
33513: CALL_OW 272
33517: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33518: LD_ADDR_VAR 0 8
33522: PUSH
33523: LD_VAR 0 6
33527: PPUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: LD_INT 3
33535: PPUSH
33536: CALL_OW 273
33540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33541: LD_VAR 0 7
33545: PPUSH
33546: LD_VAR 0 8
33550: PPUSH
33551: CALL_OW 488
33555: NOT
33556: IFFALSE 33560
// continue ;
33558: GO 33492
// if HexInfo ( _x , _y ) = 0 then
33560: LD_VAR 0 7
33564: PPUSH
33565: LD_VAR 0 8
33569: PPUSH
33570: CALL_OW 428
33574: PUSH
33575: LD_INT 0
33577: EQUAL
33578: IFFALSE 33603
// begin ComMoveXY ( unit , _x , _y ) ;
33580: LD_VAR 0 1
33584: PPUSH
33585: LD_VAR 0 7
33589: PPUSH
33590: LD_VAR 0 8
33594: PPUSH
33595: CALL_OW 111
// exit ;
33599: POP
33600: POP
33601: GO 33607
// end ; end ;
33603: GO 33492
33605: POP
33606: POP
// end ;
33607: LD_VAR 0 3
33611: RET
// export function ScanBase ( side , base_area ) ; begin
33612: LD_INT 0
33614: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_VAR 0 2
33624: PPUSH
33625: LD_INT 81
33627: PUSH
33628: LD_VAR 0 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PPUSH
33637: CALL_OW 70
33641: ST_TO_ADDR
// end ;
33642: LD_VAR 0 3
33646: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33647: LD_INT 0
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
// result := false ;
33653: LD_ADDR_VAR 0 2
33657: PUSH
33658: LD_INT 0
33660: ST_TO_ADDR
// side := GetSide ( unit ) ;
33661: LD_ADDR_VAR 0 3
33665: PUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: CALL_OW 255
33675: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33676: LD_ADDR_VAR 0 4
33680: PUSH
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 248
33690: ST_TO_ADDR
// case nat of 1 :
33691: LD_VAR 0 4
33695: PUSH
33696: LD_INT 1
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33715
33704: POP
// tech := tech_lassight ; 2 :
33705: LD_ADDR_VAR 0 5
33709: PUSH
33710: LD_INT 12
33712: ST_TO_ADDR
33713: GO 33754
33715: LD_INT 2
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33734
33723: POP
// tech := tech_mortar ; 3 :
33724: LD_ADDR_VAR 0 5
33728: PUSH
33729: LD_INT 41
33731: ST_TO_ADDR
33732: GO 33754
33734: LD_INT 3
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33753
33742: POP
// tech := tech_bazooka ; end ;
33743: LD_ADDR_VAR 0 5
33747: PUSH
33748: LD_INT 44
33750: ST_TO_ADDR
33751: GO 33754
33753: POP
// if Researched ( side , tech ) then
33754: LD_VAR 0 3
33758: PPUSH
33759: LD_VAR 0 5
33763: PPUSH
33764: CALL_OW 325
33768: IFFALSE 33795
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33770: LD_ADDR_VAR 0 2
33774: PUSH
33775: LD_INT 5
33777: PUSH
33778: LD_INT 8
33780: PUSH
33781: LD_INT 9
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: LD_VAR 0 4
33793: ARRAY
33794: ST_TO_ADDR
// end ;
33795: LD_VAR 0 2
33799: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33800: LD_INT 0
33802: PPUSH
33803: PPUSH
33804: PPUSH
// if not mines then
33805: LD_VAR 0 2
33809: NOT
33810: IFFALSE 33814
// exit ;
33812: GO 33958
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33814: LD_ADDR_VAR 0 5
33818: PUSH
33819: LD_INT 81
33821: PUSH
33822: LD_VAR 0 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: PUSH
33834: LD_INT 21
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PPUSH
33852: CALL_OW 69
33856: ST_TO_ADDR
// for i in mines do
33857: LD_ADDR_VAR 0 4
33861: PUSH
33862: LD_VAR 0 2
33866: PUSH
33867: FOR_IN
33868: IFFALSE 33956
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33870: LD_VAR 0 4
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 4
33883: PUSH
33884: LD_INT 2
33886: ARRAY
33887: PPUSH
33888: CALL_OW 458
33892: NOT
33893: IFFALSE 33897
// continue ;
33895: GO 33867
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33897: LD_VAR 0 4
33901: PUSH
33902: LD_INT 1
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 4
33910: PUSH
33911: LD_INT 2
33913: ARRAY
33914: PPUSH
33915: CALL_OW 428
33919: PUSH
33920: LD_VAR 0 5
33924: IN
33925: IFFALSE 33954
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33927: LD_VAR 0 4
33931: PUSH
33932: LD_INT 1
33934: ARRAY
33935: PPUSH
33936: LD_VAR 0 4
33940: PUSH
33941: LD_INT 2
33943: ARRAY
33944: PPUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 456
// end ;
33954: GO 33867
33956: POP
33957: POP
// end ;
33958: LD_VAR 0 3
33962: RET
// export function Count ( array ) ; var i ; begin
33963: LD_INT 0
33965: PPUSH
33966: PPUSH
// result := 0 ;
33967: LD_ADDR_VAR 0 2
33971: PUSH
33972: LD_INT 0
33974: ST_TO_ADDR
// for i in array do
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_VAR 0 1
33984: PUSH
33985: FOR_IN
33986: IFFALSE 34010
// if i then
33988: LD_VAR 0 3
33992: IFFALSE 34008
// result := result + 1 ;
33994: LD_ADDR_VAR 0 2
33998: PUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_INT 1
34006: PLUS
34007: ST_TO_ADDR
34008: GO 33985
34010: POP
34011: POP
// end ;
34012: LD_VAR 0 2
34016: RET
// export function IsEmpty ( building ) ; begin
34017: LD_INT 0
34019: PPUSH
// if not building then
34020: LD_VAR 0 1
34024: NOT
34025: IFFALSE 34029
// exit ;
34027: GO 34072
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34029: LD_ADDR_VAR 0 2
34033: PUSH
34034: LD_VAR 0 1
34038: PUSH
34039: LD_INT 22
34041: PUSH
34042: LD_VAR 0 1
34046: PPUSH
34047: CALL_OW 255
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 58
34058: PUSH
34059: EMPTY
34060: LIST
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PPUSH
34066: CALL_OW 69
34070: IN
34071: ST_TO_ADDR
// end ;
34072: LD_VAR 0 2
34076: RET
// export function IsNotFull ( building ) ; begin
34077: LD_INT 0
34079: PPUSH
// if not building then
34080: LD_VAR 0 1
34084: NOT
34085: IFFALSE 34089
// exit ;
34087: GO 34108
// result := UnitsInside ( building ) < 6 ;
34089: LD_ADDR_VAR 0 2
34093: PUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 313
34103: PUSH
34104: LD_INT 6
34106: LESS
34107: ST_TO_ADDR
// end ;
34108: LD_VAR 0 2
34112: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34113: LD_INT 0
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
// tmp := [ ] ;
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: EMPTY
34125: ST_TO_ADDR
// list := [ ] ;
34126: LD_ADDR_VAR 0 5
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
// for i = 16 to 25 do
34133: LD_ADDR_VAR 0 4
34137: PUSH
34138: DOUBLE
34139: LD_INT 16
34141: DEC
34142: ST_TO_ADDR
34143: LD_INT 25
34145: PUSH
34146: FOR_TO
34147: IFFALSE 34220
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_VAR 0 3
34158: PUSH
34159: LD_INT 22
34161: PUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 255
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 91
34178: PUSH
34179: LD_VAR 0 1
34183: PUSH
34184: LD_INT 6
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 30
34194: PUSH
34195: LD_VAR 0 4
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: PUSH
34209: EMPTY
34210: LIST
34211: PPUSH
34212: CALL_OW 69
34216: ADD
34217: ST_TO_ADDR
34218: GO 34146
34220: POP
34221: POP
// for i = 1 to tmp do
34222: LD_ADDR_VAR 0 4
34226: PUSH
34227: DOUBLE
34228: LD_INT 1
34230: DEC
34231: ST_TO_ADDR
34232: LD_VAR 0 3
34236: PUSH
34237: FOR_TO
34238: IFFALSE 34326
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34240: LD_ADDR_VAR 0 5
34244: PUSH
34245: LD_VAR 0 5
34249: PUSH
34250: LD_VAR 0 3
34254: PUSH
34255: LD_VAR 0 4
34259: ARRAY
34260: PPUSH
34261: CALL_OW 266
34265: PUSH
34266: LD_VAR 0 3
34270: PUSH
34271: LD_VAR 0 4
34275: ARRAY
34276: PPUSH
34277: CALL_OW 250
34281: PUSH
34282: LD_VAR 0 3
34286: PUSH
34287: LD_VAR 0 4
34291: ARRAY
34292: PPUSH
34293: CALL_OW 251
34297: PUSH
34298: LD_VAR 0 3
34302: PUSH
34303: LD_VAR 0 4
34307: ARRAY
34308: PPUSH
34309: CALL_OW 254
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: ADD
34323: ST_TO_ADDR
34324: GO 34237
34326: POP
34327: POP
// result := list ;
34328: LD_ADDR_VAR 0 2
34332: PUSH
34333: LD_VAR 0 5
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 2
34342: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
// if not factory then
34352: LD_VAR 0 1
34356: NOT
34357: IFFALSE 34361
// exit ;
34359: GO 34954
// if control = control_apeman then
34361: LD_VAR 0 4
34365: PUSH
34366: LD_INT 5
34368: EQUAL
34369: IFFALSE 34478
// begin tmp := UnitsInside ( factory ) ;
34371: LD_ADDR_VAR 0 8
34375: PUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: CALL_OW 313
34385: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34386: LD_VAR 0 8
34390: PPUSH
34391: LD_INT 25
34393: PUSH
34394: LD_INT 12
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PPUSH
34401: CALL_OW 72
34405: NOT
34406: IFFALSE 34416
// control := control_manual ;
34408: LD_ADDR_VAR 0 4
34412: PUSH
34413: LD_INT 1
34415: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34416: LD_ADDR_VAR 0 8
34420: PUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL 34113 0 1
34430: ST_TO_ADDR
// if tmp then
34431: LD_VAR 0 8
34435: IFFALSE 34478
// begin for i in tmp do
34437: LD_ADDR_VAR 0 7
34441: PUSH
34442: LD_VAR 0 8
34446: PUSH
34447: FOR_IN
34448: IFFALSE 34476
// if i [ 1 ] = b_ext_radio then
34450: LD_VAR 0 7
34454: PUSH
34455: LD_INT 1
34457: ARRAY
34458: PUSH
34459: LD_INT 22
34461: EQUAL
34462: IFFALSE 34474
// begin control := control_remote ;
34464: LD_ADDR_VAR 0 4
34468: PUSH
34469: LD_INT 2
34471: ST_TO_ADDR
// break ;
34472: GO 34476
// end ;
34474: GO 34447
34476: POP
34477: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34478: LD_VAR 0 1
34482: PPUSH
34483: LD_VAR 0 2
34487: PPUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: LD_VAR 0 4
34497: PPUSH
34498: LD_VAR 0 5
34502: PPUSH
34503: CALL_OW 448
34507: IFFALSE 34542
// begin result := [ chassis , engine , control , weapon ] ;
34509: LD_ADDR_VAR 0 6
34513: PUSH
34514: LD_VAR 0 2
34518: PUSH
34519: LD_VAR 0 3
34523: PUSH
34524: LD_VAR 0 4
34528: PUSH
34529: LD_VAR 0 5
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// exit ;
34540: GO 34954
// end ; _chassis := AvailableChassisList ( factory ) ;
34542: LD_ADDR_VAR 0 9
34546: PUSH
34547: LD_VAR 0 1
34551: PPUSH
34552: CALL_OW 475
34556: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34557: LD_ADDR_VAR 0 11
34561: PUSH
34562: LD_VAR 0 1
34566: PPUSH
34567: CALL_OW 476
34571: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34572: LD_ADDR_VAR 0 12
34576: PUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: CALL_OW 477
34586: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34587: LD_ADDR_VAR 0 10
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 478
34601: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34602: LD_VAR 0 9
34606: NOT
34607: PUSH
34608: LD_VAR 0 11
34612: NOT
34613: OR
34614: PUSH
34615: LD_VAR 0 12
34619: NOT
34620: OR
34621: PUSH
34622: LD_VAR 0 10
34626: NOT
34627: OR
34628: IFFALSE 34663
// begin result := [ chassis , engine , control , weapon ] ;
34630: LD_ADDR_VAR 0 6
34634: PUSH
34635: LD_VAR 0 2
34639: PUSH
34640: LD_VAR 0 3
34644: PUSH
34645: LD_VAR 0 4
34649: PUSH
34650: LD_VAR 0 5
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: ST_TO_ADDR
// exit ;
34661: GO 34954
// end ; if not chassis in _chassis then
34663: LD_VAR 0 2
34667: PUSH
34668: LD_VAR 0 9
34672: IN
34673: NOT
34674: IFFALSE 34700
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34676: LD_ADDR_VAR 0 2
34680: PUSH
34681: LD_VAR 0 9
34685: PUSH
34686: LD_INT 1
34688: PPUSH
34689: LD_VAR 0 9
34693: PPUSH
34694: CALL_OW 12
34698: ARRAY
34699: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34700: LD_VAR 0 2
34704: PPUSH
34705: LD_VAR 0 3
34709: PPUSH
34710: CALL 34959 0 2
34714: NOT
34715: IFFALSE 34774
// repeat engine := _engine [ 1 ] ;
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_VAR 0 11
34726: PUSH
34727: LD_INT 1
34729: ARRAY
34730: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34731: LD_ADDR_VAR 0 11
34735: PUSH
34736: LD_VAR 0 11
34740: PPUSH
34741: LD_INT 1
34743: PPUSH
34744: CALL_OW 3
34748: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34749: LD_VAR 0 2
34753: PPUSH
34754: LD_VAR 0 3
34758: PPUSH
34759: CALL 34959 0 2
34763: PUSH
34764: LD_VAR 0 11
34768: PUSH
34769: EMPTY
34770: EQUAL
34771: OR
34772: IFFALSE 34717
// if not control in _control then
34774: LD_VAR 0 4
34778: PUSH
34779: LD_VAR 0 12
34783: IN
34784: NOT
34785: IFFALSE 34811
// control := _control [ rand ( 1 , _control ) ] ;
34787: LD_ADDR_VAR 0 4
34791: PUSH
34792: LD_VAR 0 12
34796: PUSH
34797: LD_INT 1
34799: PPUSH
34800: LD_VAR 0 12
34804: PPUSH
34805: CALL_OW 12
34809: ARRAY
34810: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34811: LD_VAR 0 2
34815: PPUSH
34816: LD_VAR 0 5
34820: PPUSH
34821: CALL 35179 0 2
34825: NOT
34826: IFFALSE 34885
// repeat weapon := _weapon [ 1 ] ;
34828: LD_ADDR_VAR 0 5
34832: PUSH
34833: LD_VAR 0 10
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34842: LD_ADDR_VAR 0 10
34846: PUSH
34847: LD_VAR 0 10
34851: PPUSH
34852: LD_INT 1
34854: PPUSH
34855: CALL_OW 3
34859: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34860: LD_VAR 0 2
34864: PPUSH
34865: LD_VAR 0 5
34869: PPUSH
34870: CALL 35179 0 2
34874: PUSH
34875: LD_VAR 0 10
34879: PUSH
34880: EMPTY
34881: EQUAL
34882: OR
34883: IFFALSE 34828
// result := [ ] ;
34885: LD_ADDR_VAR 0 6
34889: PUSH
34890: EMPTY
34891: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34892: LD_VAR 0 1
34896: PPUSH
34897: LD_VAR 0 2
34901: PPUSH
34902: LD_VAR 0 3
34906: PPUSH
34907: LD_VAR 0 4
34911: PPUSH
34912: LD_VAR 0 5
34916: PPUSH
34917: CALL_OW 448
34921: IFFALSE 34954
// result := [ chassis , engine , control , weapon ] ;
34923: LD_ADDR_VAR 0 6
34927: PUSH
34928: LD_VAR 0 2
34932: PUSH
34933: LD_VAR 0 3
34937: PUSH
34938: LD_VAR 0 4
34942: PUSH
34943: LD_VAR 0 5
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// end ;
34954: LD_VAR 0 6
34958: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34959: LD_INT 0
34961: PPUSH
// if not chassis or not engine then
34962: LD_VAR 0 1
34966: NOT
34967: PUSH
34968: LD_VAR 0 2
34972: NOT
34973: OR
34974: IFFALSE 34978
// exit ;
34976: GO 35174
// case engine of engine_solar :
34978: LD_VAR 0 2
34982: PUSH
34983: LD_INT 2
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34991
34989: GO 35029
34991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34992: LD_ADDR_VAR 0 3
34996: PUSH
34997: LD_INT 11
34999: PUSH
35000: LD_INT 12
35002: PUSH
35003: LD_INT 13
35005: PUSH
35006: LD_INT 14
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 3
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
35027: GO 35158
35029: LD_INT 1
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35099
35037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35038: LD_ADDR_VAR 0 3
35042: PUSH
35043: LD_INT 11
35045: PUSH
35046: LD_INT 12
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: LD_INT 5
35069: PUSH
35070: LD_INT 21
35072: PUSH
35073: LD_INT 23
35075: PUSH
35076: LD_INT 22
35078: PUSH
35079: LD_INT 24
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35158
35099: LD_INT 3
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35157
35107: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 13
35115: PUSH
35116: LD_INT 14
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: LD_INT 4
35127: PUSH
35128: LD_INT 5
35130: PUSH
35131: LD_INT 21
35133: PUSH
35134: LD_INT 22
35136: PUSH
35137: LD_INT 23
35139: PUSH
35140: LD_INT 24
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: ST_TO_ADDR
35155: GO 35158
35157: POP
// result := ( chassis in result ) ;
35158: LD_ADDR_VAR 0 3
35162: PUSH
35163: LD_VAR 0 1
35167: PUSH
35168: LD_VAR 0 3
35172: IN
35173: ST_TO_ADDR
// end ;
35174: LD_VAR 0 3
35178: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35179: LD_INT 0
35181: PPUSH
// if not chassis or not weapon then
35182: LD_VAR 0 1
35186: NOT
35187: PUSH
35188: LD_VAR 0 2
35192: NOT
35193: OR
35194: IFFALSE 35198
// exit ;
35196: GO 36224
// case weapon of us_machine_gun :
35198: LD_VAR 0 2
35202: PUSH
35203: LD_INT 2
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35241
35211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35212: LD_ADDR_VAR 0 3
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 4
35228: PUSH
35229: LD_INT 5
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
35239: GO 36208
35241: LD_INT 3
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35249
35247: GO 35279
35249: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35250: LD_ADDR_VAR 0 3
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 4
35266: PUSH
35267: LD_INT 5
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
35277: GO 36208
35279: LD_INT 11
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35287
35285: GO 35317
35287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: LD_INT 4
35304: PUSH
35305: LD_INT 5
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
35315: GO 36208
35317: LD_INT 4
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35325
35323: GO 35351
35325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 3
35336: PUSH
35337: LD_INT 4
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
35349: GO 36208
35351: LD_INT 5
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35385
35359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 4
35373: PUSH
35374: LD_INT 5
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
35383: GO 36208
35385: LD_INT 9
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35419
35393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
35417: GO 36208
35419: LD_INT 7
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35453
35427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 36208
35453: LD_INT 12
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35487
35461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: LD_INT 5
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 36208
35487: LD_INT 13
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35521
35495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: LD_INT 5
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 36208
35521: LD_INT 14
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35547
35529: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: LD_INT 5
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 36208
35547: LD_INT 6
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35573
35555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 4
35563: PUSH
35564: LD_INT 5
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 36208
35573: LD_INT 10
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35599
35581: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 4
35589: PUSH
35590: LD_INT 5
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: ST_TO_ADDR
35597: GO 36208
35599: LD_INT 22
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35607
35605: GO 35633
35607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35608: LD_ADDR_VAR 0 3
35612: PUSH
35613: LD_INT 11
35615: PUSH
35616: LD_INT 12
35618: PUSH
35619: LD_INT 13
35621: PUSH
35622: LD_INT 14
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
35631: GO 36208
35633: LD_INT 23
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35667
35641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35642: LD_ADDR_VAR 0 3
35646: PUSH
35647: LD_INT 11
35649: PUSH
35650: LD_INT 12
35652: PUSH
35653: LD_INT 13
35655: PUSH
35656: LD_INT 14
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
35665: GO 36208
35667: LD_INT 24
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35701
35675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35676: LD_ADDR_VAR 0 3
35680: PUSH
35681: LD_INT 11
35683: PUSH
35684: LD_INT 12
35686: PUSH
35687: LD_INT 13
35689: PUSH
35690: LD_INT 14
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
35699: GO 36208
35701: LD_INT 30
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35709
35707: GO 35735
35709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35710: LD_ADDR_VAR 0 3
35714: PUSH
35715: LD_INT 11
35717: PUSH
35718: LD_INT 12
35720: PUSH
35721: LD_INT 13
35723: PUSH
35724: LD_INT 14
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
35733: GO 36208
35735: LD_INT 25
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35761
35743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_INT 13
35751: PUSH
35752: LD_INT 14
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: ST_TO_ADDR
35759: GO 36208
35761: LD_INT 27
35763: DOUBLE
35764: EQUAL
35765: IFTRUE 35769
35767: GO 35787
35769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35770: LD_ADDR_VAR 0 3
35774: PUSH
35775: LD_INT 13
35777: PUSH
35778: LD_INT 14
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: ST_TO_ADDR
35785: GO 36208
35787: LD_INT 28
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35813
35795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35796: LD_ADDR_VAR 0 3
35800: PUSH
35801: LD_INT 13
35803: PUSH
35804: LD_INT 14
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: ST_TO_ADDR
35811: GO 36208
35813: LD_INT 29
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35839
35821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_INT 13
35829: PUSH
35830: LD_INT 14
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: ST_TO_ADDR
35837: GO 36208
35839: LD_INT 31
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35847
35845: GO 35865
35847: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 13
35855: PUSH
35856: LD_INT 14
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: ST_TO_ADDR
35863: GO 36208
35865: LD_INT 26
35867: DOUBLE
35868: EQUAL
35869: IFTRUE 35873
35871: GO 35891
35873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35874: LD_ADDR_VAR 0 3
35878: PUSH
35879: LD_INT 13
35881: PUSH
35882: LD_INT 14
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: ST_TO_ADDR
35889: GO 36208
35891: LD_INT 42
35893: DOUBLE
35894: EQUAL
35895: IFTRUE 35899
35897: GO 35925
35899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_INT 21
35907: PUSH
35908: LD_INT 22
35910: PUSH
35911: LD_INT 23
35913: PUSH
35914: LD_INT 24
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
35923: GO 36208
35925: LD_INT 43
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35933
35931: GO 35959
35933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35934: LD_ADDR_VAR 0 3
35938: PUSH
35939: LD_INT 21
35941: PUSH
35942: LD_INT 22
35944: PUSH
35945: LD_INT 23
35947: PUSH
35948: LD_INT 24
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
35957: GO 36208
35959: LD_INT 44
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35967
35965: GO 35993
35967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35968: LD_ADDR_VAR 0 3
35972: PUSH
35973: LD_INT 21
35975: PUSH
35976: LD_INT 22
35978: PUSH
35979: LD_INT 23
35981: PUSH
35982: LD_INT 24
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
35991: GO 36208
35993: LD_INT 45
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36027
36001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: LD_INT 21
36009: PUSH
36010: LD_INT 22
36012: PUSH
36013: LD_INT 23
36015: PUSH
36016: LD_INT 24
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: ST_TO_ADDR
36025: GO 36208
36027: LD_INT 49
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36061
36035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 21
36043: PUSH
36044: LD_INT 22
36046: PUSH
36047: LD_INT 23
36049: PUSH
36050: LD_INT 24
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: ST_TO_ADDR
36059: GO 36208
36061: LD_INT 51
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36095
36069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_INT 21
36077: PUSH
36078: LD_INT 22
36080: PUSH
36081: LD_INT 23
36083: PUSH
36084: LD_INT 24
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
36093: GO 36208
36095: LD_INT 52
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36103
36101: GO 36129
36103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36104: LD_ADDR_VAR 0 3
36108: PUSH
36109: LD_INT 21
36111: PUSH
36112: LD_INT 22
36114: PUSH
36115: LD_INT 23
36117: PUSH
36118: LD_INT 24
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
36127: GO 36208
36129: LD_INT 53
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36155
36137: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_INT 23
36145: PUSH
36146: LD_INT 24
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: ST_TO_ADDR
36153: GO 36208
36155: LD_INT 46
36157: DOUBLE
36158: EQUAL
36159: IFTRUE 36163
36161: GO 36181
36163: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36164: LD_ADDR_VAR 0 3
36168: PUSH
36169: LD_INT 23
36171: PUSH
36172: LD_INT 24
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: ST_TO_ADDR
36179: GO 36208
36181: LD_INT 47
36183: DOUBLE
36184: EQUAL
36185: IFTRUE 36189
36187: GO 36207
36189: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: LD_INT 23
36197: PUSH
36198: LD_INT 24
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: ST_TO_ADDR
36205: GO 36208
36207: POP
// result := ( chassis in result ) ;
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: LD_VAR 0 1
36217: PUSH
36218: LD_VAR 0 3
36222: IN
36223: ST_TO_ADDR
// end ;
36224: LD_VAR 0 3
36228: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36229: LD_INT 0
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
// result := array ;
36238: LD_ADDR_VAR 0 5
36242: PUSH
36243: LD_VAR 0 1
36247: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36248: LD_VAR 0 1
36252: NOT
36253: PUSH
36254: LD_VAR 0 2
36258: NOT
36259: OR
36260: PUSH
36261: LD_VAR 0 3
36265: NOT
36266: OR
36267: PUSH
36268: LD_VAR 0 2
36272: PUSH
36273: LD_VAR 0 1
36277: GREATER
36278: OR
36279: PUSH
36280: LD_VAR 0 3
36284: PUSH
36285: LD_VAR 0 1
36289: GREATER
36290: OR
36291: IFFALSE 36295
// exit ;
36293: GO 36591
// if direction then
36295: LD_VAR 0 4
36299: IFFALSE 36363
// begin d := 1 ;
36301: LD_ADDR_VAR 0 9
36305: PUSH
36306: LD_INT 1
36308: ST_TO_ADDR
// if i_from > i_to then
36309: LD_VAR 0 2
36313: PUSH
36314: LD_VAR 0 3
36318: GREATER
36319: IFFALSE 36345
// length := ( array - i_from ) + i_to else
36321: LD_ADDR_VAR 0 11
36325: PUSH
36326: LD_VAR 0 1
36330: PUSH
36331: LD_VAR 0 2
36335: MINUS
36336: PUSH
36337: LD_VAR 0 3
36341: PLUS
36342: ST_TO_ADDR
36343: GO 36361
// length := i_to - i_from ;
36345: LD_ADDR_VAR 0 11
36349: PUSH
36350: LD_VAR 0 3
36354: PUSH
36355: LD_VAR 0 2
36359: MINUS
36360: ST_TO_ADDR
// end else
36361: GO 36424
// begin d := - 1 ;
36363: LD_ADDR_VAR 0 9
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: ST_TO_ADDR
// if i_from > i_to then
36372: LD_VAR 0 2
36376: PUSH
36377: LD_VAR 0 3
36381: GREATER
36382: IFFALSE 36402
// length := i_from - i_to else
36384: LD_ADDR_VAR 0 11
36388: PUSH
36389: LD_VAR 0 2
36393: PUSH
36394: LD_VAR 0 3
36398: MINUS
36399: ST_TO_ADDR
36400: GO 36424
// length := ( array - i_to ) + i_from ;
36402: LD_ADDR_VAR 0 11
36406: PUSH
36407: LD_VAR 0 1
36411: PUSH
36412: LD_VAR 0 3
36416: MINUS
36417: PUSH
36418: LD_VAR 0 2
36422: PLUS
36423: ST_TO_ADDR
// end ; if not length then
36424: LD_VAR 0 11
36428: NOT
36429: IFFALSE 36433
// exit ;
36431: GO 36591
// tmp := array ;
36433: LD_ADDR_VAR 0 10
36437: PUSH
36438: LD_VAR 0 1
36442: ST_TO_ADDR
// for i = 1 to length do
36443: LD_ADDR_VAR 0 6
36447: PUSH
36448: DOUBLE
36449: LD_INT 1
36451: DEC
36452: ST_TO_ADDR
36453: LD_VAR 0 11
36457: PUSH
36458: FOR_TO
36459: IFFALSE 36579
// begin for j = 1 to array do
36461: LD_ADDR_VAR 0 7
36465: PUSH
36466: DOUBLE
36467: LD_INT 1
36469: DEC
36470: ST_TO_ADDR
36471: LD_VAR 0 1
36475: PUSH
36476: FOR_TO
36477: IFFALSE 36565
// begin k := j + d ;
36479: LD_ADDR_VAR 0 8
36483: PUSH
36484: LD_VAR 0 7
36488: PUSH
36489: LD_VAR 0 9
36493: PLUS
36494: ST_TO_ADDR
// if k > array then
36495: LD_VAR 0 8
36499: PUSH
36500: LD_VAR 0 1
36504: GREATER
36505: IFFALSE 36515
// k := 1 ;
36507: LD_ADDR_VAR 0 8
36511: PUSH
36512: LD_INT 1
36514: ST_TO_ADDR
// if not k then
36515: LD_VAR 0 8
36519: NOT
36520: IFFALSE 36532
// k := array ;
36522: LD_ADDR_VAR 0 8
36526: PUSH
36527: LD_VAR 0 1
36531: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36532: LD_ADDR_VAR 0 10
36536: PUSH
36537: LD_VAR 0 10
36541: PPUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_VAR 0 1
36551: PUSH
36552: LD_VAR 0 7
36556: ARRAY
36557: PPUSH
36558: CALL_OW 1
36562: ST_TO_ADDR
// end ;
36563: GO 36476
36565: POP
36566: POP
// array := tmp ;
36567: LD_ADDR_VAR 0 1
36571: PUSH
36572: LD_VAR 0 10
36576: ST_TO_ADDR
// end ;
36577: GO 36458
36579: POP
36580: POP
// result := array ;
36581: LD_ADDR_VAR 0 5
36585: PUSH
36586: LD_VAR 0 1
36590: ST_TO_ADDR
// end ;
36591: LD_VAR 0 5
36595: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
// result := 0 ;
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_INT 0
36607: ST_TO_ADDR
// if not array or not value in array then
36608: LD_VAR 0 1
36612: NOT
36613: PUSH
36614: LD_VAR 0 2
36618: PUSH
36619: LD_VAR 0 1
36623: IN
36624: NOT
36625: OR
36626: IFFALSE 36630
// exit ;
36628: GO 36684
// for i = 1 to array do
36630: LD_ADDR_VAR 0 4
36634: PUSH
36635: DOUBLE
36636: LD_INT 1
36638: DEC
36639: ST_TO_ADDR
36640: LD_VAR 0 1
36644: PUSH
36645: FOR_TO
36646: IFFALSE 36682
// if value = array [ i ] then
36648: LD_VAR 0 2
36652: PUSH
36653: LD_VAR 0 1
36657: PUSH
36658: LD_VAR 0 4
36662: ARRAY
36663: EQUAL
36664: IFFALSE 36680
// begin result := i ;
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_VAR 0 4
36675: ST_TO_ADDR
// exit ;
36676: POP
36677: POP
36678: GO 36684
// end ;
36680: GO 36645
36682: POP
36683: POP
// end ;
36684: LD_VAR 0 3
36688: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36689: LD_INT 0
36691: PPUSH
// vc_chassis := chassis ;
36692: LD_ADDR_OWVAR 37
36696: PUSH
36697: LD_VAR 0 1
36701: ST_TO_ADDR
// vc_engine := engine ;
36702: LD_ADDR_OWVAR 39
36706: PUSH
36707: LD_VAR 0 2
36711: ST_TO_ADDR
// vc_control := control ;
36712: LD_ADDR_OWVAR 38
36716: PUSH
36717: LD_VAR 0 3
36721: ST_TO_ADDR
// vc_weapon := weapon ;
36722: LD_ADDR_OWVAR 40
36726: PUSH
36727: LD_VAR 0 4
36731: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36732: LD_ADDR_OWVAR 41
36736: PUSH
36737: LD_VAR 0 5
36741: ST_TO_ADDR
// end ;
36742: LD_VAR 0 6
36746: RET
// export function WantPlant ( unit ) ; var task ; begin
36747: LD_INT 0
36749: PPUSH
36750: PPUSH
// result := false ;
36751: LD_ADDR_VAR 0 2
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36759: LD_ADDR_VAR 0 3
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 437
36773: ST_TO_ADDR
// if task then
36774: LD_VAR 0 3
36778: IFFALSE 36806
// if task [ 1 ] [ 1 ] = p then
36780: LD_VAR 0 3
36784: PUSH
36785: LD_INT 1
36787: ARRAY
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PUSH
36793: LD_STRING p
36795: EQUAL
36796: IFFALSE 36806
// result := true ;
36798: LD_ADDR_VAR 0 2
36802: PUSH
36803: LD_INT 1
36805: ST_TO_ADDR
// end ;
36806: LD_VAR 0 2
36810: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36811: LD_INT 0
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
// if pos < 1 then
36817: LD_VAR 0 2
36821: PUSH
36822: LD_INT 1
36824: LESS
36825: IFFALSE 36829
// exit ;
36827: GO 37132
// if pos = 1 then
36829: LD_VAR 0 2
36833: PUSH
36834: LD_INT 1
36836: EQUAL
36837: IFFALSE 36870
// result := Replace ( arr , pos [ 1 ] , value ) else
36839: LD_ADDR_VAR 0 4
36843: PUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_INT 1
36856: ARRAY
36857: PPUSH
36858: LD_VAR 0 3
36862: PPUSH
36863: CALL_OW 1
36867: ST_TO_ADDR
36868: GO 37132
// begin tmp := arr ;
36870: LD_ADDR_VAR 0 6
36874: PUSH
36875: LD_VAR 0 1
36879: ST_TO_ADDR
// s_arr := [ tmp ] ;
36880: LD_ADDR_VAR 0 7
36884: PUSH
36885: LD_VAR 0 6
36889: PUSH
36890: EMPTY
36891: LIST
36892: ST_TO_ADDR
// for i = 1 to pos - 1 do
36893: LD_ADDR_VAR 0 5
36897: PUSH
36898: DOUBLE
36899: LD_INT 1
36901: DEC
36902: ST_TO_ADDR
36903: LD_VAR 0 2
36907: PUSH
36908: LD_INT 1
36910: MINUS
36911: PUSH
36912: FOR_TO
36913: IFFALSE 36958
// begin tmp := tmp [ pos [ i ] ] ;
36915: LD_ADDR_VAR 0 6
36919: PUSH
36920: LD_VAR 0 6
36924: PUSH
36925: LD_VAR 0 2
36929: PUSH
36930: LD_VAR 0 5
36934: ARRAY
36935: ARRAY
36936: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36937: LD_ADDR_VAR 0 7
36941: PUSH
36942: LD_VAR 0 7
36946: PUSH
36947: LD_VAR 0 6
36951: PUSH
36952: EMPTY
36953: LIST
36954: ADD
36955: ST_TO_ADDR
// end ;
36956: GO 36912
36958: POP
36959: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36960: LD_ADDR_VAR 0 6
36964: PUSH
36965: LD_VAR 0 6
36969: PPUSH
36970: LD_VAR 0 2
36974: PUSH
36975: LD_VAR 0 2
36979: ARRAY
36980: PPUSH
36981: LD_VAR 0 3
36985: PPUSH
36986: CALL_OW 1
36990: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36991: LD_ADDR_VAR 0 7
36995: PUSH
36996: LD_VAR 0 7
37000: PPUSH
37001: LD_VAR 0 7
37005: PPUSH
37006: LD_VAR 0 6
37010: PPUSH
37011: CALL_OW 1
37015: ST_TO_ADDR
// for i = s_arr downto 2 do
37016: LD_ADDR_VAR 0 5
37020: PUSH
37021: DOUBLE
37022: LD_VAR 0 7
37026: INC
37027: ST_TO_ADDR
37028: LD_INT 2
37030: PUSH
37031: FOR_DOWNTO
37032: IFFALSE 37116
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37034: LD_ADDR_VAR 0 6
37038: PUSH
37039: LD_VAR 0 7
37043: PUSH
37044: LD_VAR 0 5
37048: PUSH
37049: LD_INT 1
37051: MINUS
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 2
37058: PUSH
37059: LD_VAR 0 5
37063: PUSH
37064: LD_INT 1
37066: MINUS
37067: ARRAY
37068: PPUSH
37069: LD_VAR 0 7
37073: PUSH
37074: LD_VAR 0 5
37078: ARRAY
37079: PPUSH
37080: CALL_OW 1
37084: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37085: LD_ADDR_VAR 0 7
37089: PUSH
37090: LD_VAR 0 7
37094: PPUSH
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: MINUS
37103: PPUSH
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// end ;
37114: GO 37031
37116: POP
37117: POP
// result := s_arr [ 1 ] ;
37118: LD_ADDR_VAR 0 4
37122: PUSH
37123: LD_VAR 0 7
37127: PUSH
37128: LD_INT 1
37130: ARRAY
37131: ST_TO_ADDR
// end ; end ;
37132: LD_VAR 0 4
37136: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37137: LD_INT 0
37139: PPUSH
37140: PPUSH
// if not list then
37141: LD_VAR 0 1
37145: NOT
37146: IFFALSE 37150
// exit ;
37148: GO 37241
// i := list [ pos1 ] ;
37150: LD_ADDR_VAR 0 5
37154: PUSH
37155: LD_VAR 0 1
37159: PUSH
37160: LD_VAR 0 2
37164: ARRAY
37165: ST_TO_ADDR
// if not i then
37166: LD_VAR 0 5
37170: NOT
37171: IFFALSE 37175
// exit ;
37173: GO 37241
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37175: LD_ADDR_VAR 0 1
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: LD_VAR 0 2
37189: PPUSH
37190: LD_VAR 0 1
37194: PUSH
37195: LD_VAR 0 3
37199: ARRAY
37200: PPUSH
37201: CALL_OW 1
37205: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37206: LD_ADDR_VAR 0 1
37210: PUSH
37211: LD_VAR 0 1
37215: PPUSH
37216: LD_VAR 0 3
37220: PPUSH
37221: LD_VAR 0 5
37225: PPUSH
37226: CALL_OW 1
37230: ST_TO_ADDR
// result := list ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 1
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 4
37245: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37246: LD_INT 0
37248: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37249: LD_ADDR_VAR 0 5
37253: PUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL_OW 250
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 251
37273: PPUSH
37274: LD_VAR 0 2
37278: PPUSH
37279: LD_VAR 0 3
37283: PPUSH
37284: LD_VAR 0 4
37288: PPUSH
37289: CALL 37299 0 5
37293: ST_TO_ADDR
// end ;
37294: LD_VAR 0 5
37298: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37299: LD_INT 0
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
// if not list then
37305: LD_VAR 0 3
37309: NOT
37310: IFFALSE 37314
// exit ;
37312: GO 37702
// result := [ ] ;
37314: LD_ADDR_VAR 0 6
37318: PUSH
37319: EMPTY
37320: ST_TO_ADDR
// for i in list do
37321: LD_ADDR_VAR 0 7
37325: PUSH
37326: LD_VAR 0 3
37330: PUSH
37331: FOR_IN
37332: IFFALSE 37534
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37334: LD_ADDR_VAR 0 9
37338: PUSH
37339: LD_VAR 0 7
37343: PPUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: LD_VAR 0 2
37353: PPUSH
37354: CALL_OW 297
37358: ST_TO_ADDR
// if not result then
37359: LD_VAR 0 6
37363: NOT
37364: IFFALSE 37390
// result := [ [ i , tmp ] ] else
37366: LD_ADDR_VAR 0 6
37370: PUSH
37371: LD_VAR 0 7
37375: PUSH
37376: LD_VAR 0 9
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: ST_TO_ADDR
37388: GO 37532
// begin if result [ result ] [ 2 ] < tmp then
37390: LD_VAR 0 6
37394: PUSH
37395: LD_VAR 0 6
37399: ARRAY
37400: PUSH
37401: LD_INT 2
37403: ARRAY
37404: PUSH
37405: LD_VAR 0 9
37409: LESS
37410: IFFALSE 37452
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37412: LD_ADDR_VAR 0 6
37416: PUSH
37417: LD_VAR 0 6
37421: PPUSH
37422: LD_VAR 0 6
37426: PUSH
37427: LD_INT 1
37429: PLUS
37430: PPUSH
37431: LD_VAR 0 7
37435: PUSH
37436: LD_VAR 0 9
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PPUSH
37445: CALL_OW 2
37449: ST_TO_ADDR
37450: GO 37532
// for j = 1 to result do
37452: LD_ADDR_VAR 0 8
37456: PUSH
37457: DOUBLE
37458: LD_INT 1
37460: DEC
37461: ST_TO_ADDR
37462: LD_VAR 0 6
37466: PUSH
37467: FOR_TO
37468: IFFALSE 37530
// begin if tmp < result [ j ] [ 2 ] then
37470: LD_VAR 0 9
37474: PUSH
37475: LD_VAR 0 6
37479: PUSH
37480: LD_VAR 0 8
37484: ARRAY
37485: PUSH
37486: LD_INT 2
37488: ARRAY
37489: LESS
37490: IFFALSE 37528
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37492: LD_ADDR_VAR 0 6
37496: PUSH
37497: LD_VAR 0 6
37501: PPUSH
37502: LD_VAR 0 8
37506: PPUSH
37507: LD_VAR 0 7
37511: PUSH
37512: LD_VAR 0 9
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 2
37525: ST_TO_ADDR
// break ;
37526: GO 37530
// end ; end ;
37528: GO 37467
37530: POP
37531: POP
// end ; end ;
37532: GO 37331
37534: POP
37535: POP
// if result and not asc then
37536: LD_VAR 0 6
37540: PUSH
37541: LD_VAR 0 4
37545: NOT
37546: AND
37547: IFFALSE 37622
// begin tmp := result ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_VAR 0 6
37558: ST_TO_ADDR
// for i = tmp downto 1 do
37559: LD_ADDR_VAR 0 7
37563: PUSH
37564: DOUBLE
37565: LD_VAR 0 9
37569: INC
37570: ST_TO_ADDR
37571: LD_INT 1
37573: PUSH
37574: FOR_DOWNTO
37575: IFFALSE 37620
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37577: LD_ADDR_VAR 0 6
37581: PUSH
37582: LD_VAR 0 6
37586: PPUSH
37587: LD_VAR 0 9
37591: PUSH
37592: LD_VAR 0 7
37596: MINUS
37597: PUSH
37598: LD_INT 1
37600: PLUS
37601: PPUSH
37602: LD_VAR 0 9
37606: PUSH
37607: LD_VAR 0 7
37611: ARRAY
37612: PPUSH
37613: CALL_OW 1
37617: ST_TO_ADDR
37618: GO 37574
37620: POP
37621: POP
// end ; tmp := [ ] ;
37622: LD_ADDR_VAR 0 9
37626: PUSH
37627: EMPTY
37628: ST_TO_ADDR
// if mode then
37629: LD_VAR 0 5
37633: IFFALSE 37702
// begin for i = 1 to result do
37635: LD_ADDR_VAR 0 7
37639: PUSH
37640: DOUBLE
37641: LD_INT 1
37643: DEC
37644: ST_TO_ADDR
37645: LD_VAR 0 6
37649: PUSH
37650: FOR_TO
37651: IFFALSE 37690
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37653: LD_ADDR_VAR 0 9
37657: PUSH
37658: LD_VAR 0 9
37662: PPUSH
37663: LD_VAR 0 7
37667: PPUSH
37668: LD_VAR 0 6
37672: PUSH
37673: LD_VAR 0 7
37677: ARRAY
37678: PUSH
37679: LD_INT 1
37681: ARRAY
37682: PPUSH
37683: CALL_OW 1
37687: ST_TO_ADDR
37688: GO 37650
37690: POP
37691: POP
// result := tmp ;
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_VAR 0 9
37701: ST_TO_ADDR
// end ; end ;
37702: LD_VAR 0 6
37706: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37707: LD_INT 0
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37715: LD_ADDR_VAR 0 5
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// if not x or not y then
37737: LD_VAR 0 2
37741: NOT
37742: PUSH
37743: LD_VAR 0 3
37747: NOT
37748: OR
37749: IFFALSE 37753
// exit ;
37751: GO 39399
// if not range then
37753: LD_VAR 0 4
37757: NOT
37758: IFFALSE 37768
// range := 10 ;
37760: LD_ADDR_VAR 0 4
37764: PUSH
37765: LD_INT 10
37767: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37768: LD_ADDR_VAR 0 8
37772: PUSH
37773: LD_INT 81
37775: PUSH
37776: LD_VAR 0 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 92
37787: PUSH
37788: LD_VAR 0 2
37792: PUSH
37793: LD_VAR 0 3
37797: PUSH
37798: LD_VAR 0 4
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: LD_INT 21
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: PPUSH
37831: CALL_OW 69
37835: ST_TO_ADDR
// if not tmp then
37836: LD_VAR 0 8
37840: NOT
37841: IFFALSE 37845
// exit ;
37843: GO 39399
// for i in tmp do
37845: LD_ADDR_VAR 0 6
37849: PUSH
37850: LD_VAR 0 8
37854: PUSH
37855: FOR_IN
37856: IFFALSE 39374
// begin points := [ 0 , 0 , 0 ] ;
37858: LD_ADDR_VAR 0 9
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: ST_TO_ADDR
// bpoints := 1 ;
37877: LD_ADDR_VAR 0 10
37881: PUSH
37882: LD_INT 1
37884: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37885: LD_VAR 0 6
37889: PPUSH
37890: CALL_OW 247
37894: PUSH
37895: LD_INT 1
37897: DOUBLE
37898: EQUAL
37899: IFTRUE 37903
37901: GO 38481
37903: POP
// begin if GetClass ( i ) = 1 then
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 257
37913: PUSH
37914: LD_INT 1
37916: EQUAL
37917: IFFALSE 37938
// points := [ 10 , 5 , 3 ] ;
37919: LD_ADDR_VAR 0 9
37923: PUSH
37924: LD_INT 10
37926: PUSH
37927: LD_INT 5
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37938: LD_VAR 0 6
37942: PPUSH
37943: CALL_OW 257
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: LD_INT 4
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: IN
37962: IFFALSE 37983
// points := [ 3 , 2 , 1 ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 257
37992: PUSH
37993: LD_INT 5
37995: EQUAL
37996: IFFALSE 38017
// points := [ 130 , 5 , 2 ] ;
37998: LD_ADDR_VAR 0 9
38002: PUSH
38003: LD_INT 130
38005: PUSH
38006: LD_INT 5
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38017: LD_VAR 0 6
38021: PPUSH
38022: CALL_OW 257
38026: PUSH
38027: LD_INT 8
38029: EQUAL
38030: IFFALSE 38051
// points := [ 35 , 35 , 30 ] ;
38032: LD_ADDR_VAR 0 9
38036: PUSH
38037: LD_INT 35
38039: PUSH
38040: LD_INT 35
38042: PUSH
38043: LD_INT 30
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38051: LD_VAR 0 6
38055: PPUSH
38056: CALL_OW 257
38060: PUSH
38061: LD_INT 9
38063: EQUAL
38064: IFFALSE 38085
// points := [ 20 , 55 , 40 ] ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_INT 20
38073: PUSH
38074: LD_INT 55
38076: PUSH
38077: LD_INT 40
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 257
38094: PUSH
38095: LD_INT 12
38097: PUSH
38098: LD_INT 16
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: IN
38105: IFFALSE 38126
// points := [ 5 , 3 , 2 ] ;
38107: LD_ADDR_VAR 0 9
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38126: LD_VAR 0 6
38130: PPUSH
38131: CALL_OW 257
38135: PUSH
38136: LD_INT 17
38138: EQUAL
38139: IFFALSE 38160
// points := [ 100 , 50 , 75 ] ;
38141: LD_ADDR_VAR 0 9
38145: PUSH
38146: LD_INT 100
38148: PUSH
38149: LD_INT 50
38151: PUSH
38152: LD_INT 75
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38160: LD_VAR 0 6
38164: PPUSH
38165: CALL_OW 257
38169: PUSH
38170: LD_INT 15
38172: EQUAL
38173: IFFALSE 38194
// points := [ 10 , 5 , 3 ] ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_INT 10
38182: PUSH
38183: LD_INT 5
38185: PUSH
38186: LD_INT 3
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38194: LD_VAR 0 6
38198: PPUSH
38199: CALL_OW 257
38203: PUSH
38204: LD_INT 14
38206: EQUAL
38207: IFFALSE 38228
// points := [ 10 , 0 , 0 ] ;
38209: LD_ADDR_VAR 0 9
38213: PUSH
38214: LD_INT 10
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38228: LD_VAR 0 6
38232: PPUSH
38233: CALL_OW 257
38237: PUSH
38238: LD_INT 11
38240: EQUAL
38241: IFFALSE 38262
// points := [ 30 , 10 , 5 ] ;
38243: LD_ADDR_VAR 0 9
38247: PUSH
38248: LD_INT 30
38250: PUSH
38251: LD_INT 10
38253: PUSH
38254: LD_INT 5
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38262: LD_VAR 0 1
38266: PPUSH
38267: LD_INT 5
38269: PPUSH
38270: CALL_OW 321
38274: PUSH
38275: LD_INT 2
38277: EQUAL
38278: IFFALSE 38295
// bpoints := bpoints * 1.8 ;
38280: LD_ADDR_VAR 0 10
38284: PUSH
38285: LD_VAR 0 10
38289: PUSH
38290: LD_REAL  1.80000000000000E+0000
38293: MUL
38294: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38295: LD_VAR 0 6
38299: PPUSH
38300: CALL_OW 257
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: LD_INT 2
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: LD_INT 4
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: IN
38323: PUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: LD_INT 51
38331: PPUSH
38332: CALL_OW 321
38336: PUSH
38337: LD_INT 2
38339: EQUAL
38340: AND
38341: IFFALSE 38358
// bpoints := bpoints * 1.2 ;
38343: LD_ADDR_VAR 0 10
38347: PUSH
38348: LD_VAR 0 10
38352: PUSH
38353: LD_REAL  1.20000000000000E+0000
38356: MUL
38357: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38358: LD_VAR 0 6
38362: PPUSH
38363: CALL_OW 257
38367: PUSH
38368: LD_INT 5
38370: PUSH
38371: LD_INT 7
38373: PUSH
38374: LD_INT 9
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: IN
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: LD_INT 52
38390: PPUSH
38391: CALL_OW 321
38395: PUSH
38396: LD_INT 2
38398: EQUAL
38399: AND
38400: IFFALSE 38417
// bpoints := bpoints * 1.5 ;
38402: LD_ADDR_VAR 0 10
38406: PUSH
38407: LD_VAR 0 10
38411: PUSH
38412: LD_REAL  1.50000000000000E+0000
38415: MUL
38416: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38417: LD_VAR 0 1
38421: PPUSH
38422: LD_INT 66
38424: PPUSH
38425: CALL_OW 321
38429: PUSH
38430: LD_INT 2
38432: EQUAL
38433: IFFALSE 38450
// bpoints := bpoints * 1.1 ;
38435: LD_ADDR_VAR 0 10
38439: PUSH
38440: LD_VAR 0 10
38444: PUSH
38445: LD_REAL  1.10000000000000E+0000
38448: MUL
38449: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38450: LD_ADDR_VAR 0 10
38454: PUSH
38455: LD_VAR 0 10
38459: PUSH
38460: LD_VAR 0 6
38464: PPUSH
38465: LD_INT 1
38467: PPUSH
38468: CALL_OW 259
38472: PUSH
38473: LD_REAL  1.15000000000000E+0000
38476: MUL
38477: MUL
38478: ST_TO_ADDR
// end ; unit_vehicle :
38479: GO 39303
38481: LD_INT 2
38483: DOUBLE
38484: EQUAL
38485: IFTRUE 38489
38487: GO 39291
38489: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38490: LD_VAR 0 6
38494: PPUSH
38495: CALL_OW 264
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 42
38505: PUSH
38506: LD_INT 24
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: IN
38514: IFFALSE 38535
// points := [ 25 , 5 , 3 ] ;
38516: LD_ADDR_VAR 0 9
38520: PUSH
38521: LD_INT 25
38523: PUSH
38524: LD_INT 5
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38535: LD_VAR 0 6
38539: PPUSH
38540: CALL_OW 264
38544: PUSH
38545: LD_INT 4
38547: PUSH
38548: LD_INT 43
38550: PUSH
38551: LD_INT 25
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: IN
38559: IFFALSE 38580
// points := [ 40 , 15 , 5 ] ;
38561: LD_ADDR_VAR 0 9
38565: PUSH
38566: LD_INT 40
38568: PUSH
38569: LD_INT 15
38571: PUSH
38572: LD_INT 5
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38580: LD_VAR 0 6
38584: PPUSH
38585: CALL_OW 264
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: LD_INT 23
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: IN
38600: IFFALSE 38621
// points := [ 7 , 25 , 8 ] ;
38602: LD_ADDR_VAR 0 9
38606: PUSH
38607: LD_INT 7
38609: PUSH
38610: LD_INT 25
38612: PUSH
38613: LD_INT 8
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38621: LD_VAR 0 6
38625: PPUSH
38626: CALL_OW 264
38630: PUSH
38631: LD_INT 5
38633: PUSH
38634: LD_INT 27
38636: PUSH
38637: LD_INT 44
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: IN
38645: IFFALSE 38666
// points := [ 14 , 50 , 16 ] ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_INT 14
38654: PUSH
38655: LD_INT 50
38657: PUSH
38658: LD_INT 16
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38666: LD_VAR 0 6
38670: PPUSH
38671: CALL_OW 264
38675: PUSH
38676: LD_INT 6
38678: PUSH
38679: LD_INT 46
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: IN
38686: IFFALSE 38707
// points := [ 32 , 120 , 70 ] ;
38688: LD_ADDR_VAR 0 9
38692: PUSH
38693: LD_INT 32
38695: PUSH
38696: LD_INT 120
38698: PUSH
38699: LD_INT 70
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38707: LD_VAR 0 6
38711: PPUSH
38712: CALL_OW 264
38716: PUSH
38717: LD_INT 7
38719: PUSH
38720: LD_INT 28
38722: PUSH
38723: LD_INT 45
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: IN
38731: IFFALSE 38752
// points := [ 35 , 20 , 45 ] ;
38733: LD_ADDR_VAR 0 9
38737: PUSH
38738: LD_INT 35
38740: PUSH
38741: LD_INT 20
38743: PUSH
38744: LD_INT 45
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38752: LD_VAR 0 6
38756: PPUSH
38757: CALL_OW 264
38761: PUSH
38762: LD_INT 47
38764: PUSH
38765: EMPTY
38766: LIST
38767: IN
38768: IFFALSE 38789
// points := [ 67 , 45 , 75 ] ;
38770: LD_ADDR_VAR 0 9
38774: PUSH
38775: LD_INT 67
38777: PUSH
38778: LD_INT 45
38780: PUSH
38781: LD_INT 75
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38789: LD_VAR 0 6
38793: PPUSH
38794: CALL_OW 264
38798: PUSH
38799: LD_INT 26
38801: PUSH
38802: EMPTY
38803: LIST
38804: IN
38805: IFFALSE 38826
// points := [ 120 , 30 , 80 ] ;
38807: LD_ADDR_VAR 0 9
38811: PUSH
38812: LD_INT 120
38814: PUSH
38815: LD_INT 30
38817: PUSH
38818: LD_INT 80
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38826: LD_VAR 0 6
38830: PPUSH
38831: CALL_OW 264
38835: PUSH
38836: LD_INT 22
38838: PUSH
38839: EMPTY
38840: LIST
38841: IN
38842: IFFALSE 38863
// points := [ 40 , 1 , 1 ] ;
38844: LD_ADDR_VAR 0 9
38848: PUSH
38849: LD_INT 40
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38863: LD_VAR 0 6
38867: PPUSH
38868: CALL_OW 264
38872: PUSH
38873: LD_INT 29
38875: PUSH
38876: EMPTY
38877: LIST
38878: IN
38879: IFFALSE 38900
// points := [ 70 , 200 , 400 ] ;
38881: LD_ADDR_VAR 0 9
38885: PUSH
38886: LD_INT 70
38888: PUSH
38889: LD_INT 200
38891: PUSH
38892: LD_INT 400
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38900: LD_VAR 0 6
38904: PPUSH
38905: CALL_OW 264
38909: PUSH
38910: LD_INT 14
38912: PUSH
38913: LD_INT 53
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: IN
38920: IFFALSE 38941
// points := [ 40 , 10 , 20 ] ;
38922: LD_ADDR_VAR 0 9
38926: PUSH
38927: LD_INT 40
38929: PUSH
38930: LD_INT 10
38932: PUSH
38933: LD_INT 20
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38941: LD_VAR 0 6
38945: PPUSH
38946: CALL_OW 264
38950: PUSH
38951: LD_INT 9
38953: PUSH
38954: EMPTY
38955: LIST
38956: IN
38957: IFFALSE 38978
// points := [ 5 , 70 , 20 ] ;
38959: LD_ADDR_VAR 0 9
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: LD_INT 70
38969: PUSH
38970: LD_INT 20
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38978: LD_VAR 0 6
38982: PPUSH
38983: CALL_OW 264
38987: PUSH
38988: LD_INT 10
38990: PUSH
38991: EMPTY
38992: LIST
38993: IN
38994: IFFALSE 39015
// points := [ 35 , 110 , 70 ] ;
38996: LD_ADDR_VAR 0 9
39000: PUSH
39001: LD_INT 35
39003: PUSH
39004: LD_INT 110
39006: PUSH
39007: LD_INT 70
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39015: LD_VAR 0 6
39019: PPUSH
39020: CALL_OW 265
39024: PUSH
39025: LD_INT 25
39027: EQUAL
39028: IFFALSE 39049
// points := [ 80 , 65 , 100 ] ;
39030: LD_ADDR_VAR 0 9
39034: PUSH
39035: LD_INT 80
39037: PUSH
39038: LD_INT 65
39040: PUSH
39041: LD_INT 100
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39049: LD_VAR 0 6
39053: PPUSH
39054: CALL_OW 263
39058: PUSH
39059: LD_INT 1
39061: EQUAL
39062: IFFALSE 39097
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39064: LD_ADDR_VAR 0 10
39068: PUSH
39069: LD_VAR 0 10
39073: PUSH
39074: LD_VAR 0 6
39078: PPUSH
39079: CALL_OW 311
39083: PPUSH
39084: LD_INT 3
39086: PPUSH
39087: CALL_OW 259
39091: PUSH
39092: LD_INT 4
39094: MUL
39095: MUL
39096: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39097: LD_VAR 0 6
39101: PPUSH
39102: CALL_OW 263
39106: PUSH
39107: LD_INT 2
39109: EQUAL
39110: IFFALSE 39161
// begin j := IsControledBy ( i ) ;
39112: LD_ADDR_VAR 0 7
39116: PUSH
39117: LD_VAR 0 6
39121: PPUSH
39122: CALL_OW 312
39126: ST_TO_ADDR
// if j then
39127: LD_VAR 0 7
39131: IFFALSE 39161
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39133: LD_ADDR_VAR 0 10
39137: PUSH
39138: LD_VAR 0 10
39142: PUSH
39143: LD_VAR 0 7
39147: PPUSH
39148: LD_INT 3
39150: PPUSH
39151: CALL_OW 259
39155: PUSH
39156: LD_INT 3
39158: MUL
39159: MUL
39160: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39161: LD_VAR 0 6
39165: PPUSH
39166: CALL_OW 264
39170: PUSH
39171: LD_INT 5
39173: PUSH
39174: LD_INT 6
39176: PUSH
39177: LD_INT 46
39179: PUSH
39180: LD_INT 44
39182: PUSH
39183: LD_INT 47
39185: PUSH
39186: LD_INT 45
39188: PUSH
39189: LD_INT 28
39191: PUSH
39192: LD_INT 7
39194: PUSH
39195: LD_INT 27
39197: PUSH
39198: LD_INT 29
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: IN
39213: PUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: LD_INT 52
39221: PPUSH
39222: CALL_OW 321
39226: PUSH
39227: LD_INT 2
39229: EQUAL
39230: AND
39231: IFFALSE 39248
// bpoints := bpoints * 1.2 ;
39233: LD_ADDR_VAR 0 10
39237: PUSH
39238: LD_VAR 0 10
39242: PUSH
39243: LD_REAL  1.20000000000000E+0000
39246: MUL
39247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39248: LD_VAR 0 6
39252: PPUSH
39253: CALL_OW 264
39257: PUSH
39258: LD_INT 6
39260: PUSH
39261: LD_INT 46
39263: PUSH
39264: LD_INT 47
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: IN
39272: IFFALSE 39289
// bpoints := bpoints * 1.2 ;
39274: LD_ADDR_VAR 0 10
39278: PUSH
39279: LD_VAR 0 10
39283: PUSH
39284: LD_REAL  1.20000000000000E+0000
39287: MUL
39288: ST_TO_ADDR
// end ; unit_building :
39289: GO 39303
39291: LD_INT 3
39293: DOUBLE
39294: EQUAL
39295: IFTRUE 39299
39297: GO 39302
39299: POP
// ; end ;
39300: GO 39303
39302: POP
// for j = 1 to 3 do
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: DOUBLE
39309: LD_INT 1
39311: DEC
39312: ST_TO_ADDR
39313: LD_INT 3
39315: PUSH
39316: FOR_TO
39317: IFFALSE 39370
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39319: LD_ADDR_VAR 0 5
39323: PUSH
39324: LD_VAR 0 5
39328: PPUSH
39329: LD_VAR 0 7
39333: PPUSH
39334: LD_VAR 0 5
39338: PUSH
39339: LD_VAR 0 7
39343: ARRAY
39344: PUSH
39345: LD_VAR 0 9
39349: PUSH
39350: LD_VAR 0 7
39354: ARRAY
39355: PUSH
39356: LD_VAR 0 10
39360: MUL
39361: PLUS
39362: PPUSH
39363: CALL_OW 1
39367: ST_TO_ADDR
39368: GO 39316
39370: POP
39371: POP
// end ;
39372: GO 37855
39374: POP
39375: POP
// result := Replace ( result , 4 , tmp ) ;
39376: LD_ADDR_VAR 0 5
39380: PUSH
39381: LD_VAR 0 5
39385: PPUSH
39386: LD_INT 4
39388: PPUSH
39389: LD_VAR 0 8
39393: PPUSH
39394: CALL_OW 1
39398: ST_TO_ADDR
// end ;
39399: LD_VAR 0 5
39403: RET
// export function DangerAtRange ( unit , range ) ; begin
39404: LD_INT 0
39406: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39407: LD_ADDR_VAR 0 3
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 255
39421: PPUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 250
39431: PPUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 251
39441: PPUSH
39442: LD_VAR 0 2
39446: PPUSH
39447: CALL 37707 0 4
39451: ST_TO_ADDR
// end ;
39452: LD_VAR 0 3
39456: RET
// export function DangerInArea ( side , area ) ; begin
39457: LD_INT 0
39459: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39460: LD_ADDR_VAR 0 3
39464: PUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: LD_INT 81
39472: PUSH
39473: LD_VAR 0 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PPUSH
39482: CALL_OW 70
39486: ST_TO_ADDR
// end ;
39487: LD_VAR 0 3
39491: RET
// export function IsExtension ( b ) ; begin
39492: LD_INT 0
39494: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39495: LD_ADDR_VAR 0 2
39499: PUSH
39500: LD_VAR 0 1
39504: PUSH
39505: LD_INT 23
39507: PUSH
39508: LD_INT 20
39510: PUSH
39511: LD_INT 22
39513: PUSH
39514: LD_INT 17
39516: PUSH
39517: LD_INT 24
39519: PUSH
39520: LD_INT 21
39522: PUSH
39523: LD_INT 19
39525: PUSH
39526: LD_INT 16
39528: PUSH
39529: LD_INT 25
39531: PUSH
39532: LD_INT 18
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: IN
39547: ST_TO_ADDR
// end ;
39548: LD_VAR 0 2
39552: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39553: LD_INT 0
39555: PPUSH
39556: PPUSH
39557: PPUSH
// result := [ ] ;
39558: LD_ADDR_VAR 0 3
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39565: LD_ADDR_VAR 0 4
39569: PUSH
39570: LD_VAR 0 2
39574: PPUSH
39575: LD_INT 21
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PPUSH
39585: CALL_OW 70
39589: ST_TO_ADDR
// if not tmp then
39590: LD_VAR 0 4
39594: NOT
39595: IFFALSE 39599
// exit ;
39597: GO 39657
// for i in tmp do
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 4
39608: PUSH
39609: FOR_IN
39610: IFFALSE 39645
// if GetBase ( i ) <> base then
39612: LD_VAR 0 5
39616: PPUSH
39617: CALL_OW 274
39621: PUSH
39622: LD_VAR 0 1
39626: NONEQUAL
39627: IFFALSE 39643
// ComLinkToBase ( base , i ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_VAR 0 5
39638: PPUSH
39639: CALL_OW 169
39643: GO 39609
39645: POP
39646: POP
// result := tmp ;
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_VAR 0 4
39656: ST_TO_ADDR
// end ;
39657: LD_VAR 0 3
39661: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39662: LD_INT 0
39664: PPUSH
39665: PPUSH
// if BuildingStatus ( b ) = bs_build then
39666: LD_VAR 0 2
39670: PPUSH
39671: CALL_OW 461
39675: PUSH
39676: LD_INT 1
39678: EQUAL
39679: IFFALSE 39739
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39681: LD_VAR 0 1
39685: PPUSH
39686: LD_STRING h
39688: PUSH
39689: LD_VAR 0 2
39693: PPUSH
39694: CALL_OW 250
39698: PUSH
39699: LD_VAR 0 2
39703: PPUSH
39704: CALL_OW 251
39708: PUSH
39709: LD_VAR 0 2
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: PPUSH
39735: CALL_OW 446
// end ;
39739: LD_VAR 0 3
39743: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39744: LD_INT 0
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39752: LD_VAR 0 1
39756: NOT
39757: PUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 263
39767: PUSH
39768: LD_INT 2
39770: EQUAL
39771: NOT
39772: OR
39773: IFFALSE 39777
// exit ;
39775: GO 40093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39777: LD_ADDR_VAR 0 6
39781: PUSH
39782: LD_INT 22
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 255
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: LD_INT 30
39804: PUSH
39805: LD_INT 36
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 34
39814: PUSH
39815: LD_INT 31
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PPUSH
39831: CALL_OW 69
39835: ST_TO_ADDR
// if not tmp then
39836: LD_VAR 0 6
39840: NOT
39841: IFFALSE 39845
// exit ;
39843: GO 40093
// result := [ ] ;
39845: LD_ADDR_VAR 0 2
39849: PUSH
39850: EMPTY
39851: ST_TO_ADDR
// for i in tmp do
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_VAR 0 6
39861: PUSH
39862: FOR_IN
39863: IFFALSE 39934
// begin t := UnitsInside ( i ) ;
39865: LD_ADDR_VAR 0 4
39869: PUSH
39870: LD_VAR 0 3
39874: PPUSH
39875: CALL_OW 313
39879: ST_TO_ADDR
// if t then
39880: LD_VAR 0 4
39884: IFFALSE 39932
// for j in t do
39886: LD_ADDR_VAR 0 7
39890: PUSH
39891: LD_VAR 0 4
39895: PUSH
39896: FOR_IN
39897: IFFALSE 39930
// result := Insert ( result , result + 1 , j ) ;
39899: LD_ADDR_VAR 0 2
39903: PUSH
39904: LD_VAR 0 2
39908: PPUSH
39909: LD_VAR 0 2
39913: PUSH
39914: LD_INT 1
39916: PLUS
39917: PPUSH
39918: LD_VAR 0 7
39922: PPUSH
39923: CALL_OW 2
39927: ST_TO_ADDR
39928: GO 39896
39930: POP
39931: POP
// end ;
39932: GO 39862
39934: POP
39935: POP
// if not result then
39936: LD_VAR 0 2
39940: NOT
39941: IFFALSE 39945
// exit ;
39943: GO 40093
// mech := result [ 1 ] ;
39945: LD_ADDR_VAR 0 5
39949: PUSH
39950: LD_VAR 0 2
39954: PUSH
39955: LD_INT 1
39957: ARRAY
39958: ST_TO_ADDR
// if result > 1 then
39959: LD_VAR 0 2
39963: PUSH
39964: LD_INT 1
39966: GREATER
39967: IFFALSE 40079
// for i = 2 to result do
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: DOUBLE
39975: LD_INT 2
39977: DEC
39978: ST_TO_ADDR
39979: LD_VAR 0 2
39983: PUSH
39984: FOR_TO
39985: IFFALSE 40077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39987: LD_ADDR_VAR 0 4
39991: PUSH
39992: LD_VAR 0 2
39996: PUSH
39997: LD_VAR 0 3
40001: ARRAY
40002: PPUSH
40003: LD_INT 3
40005: PPUSH
40006: CALL_OW 259
40010: PUSH
40011: LD_VAR 0 2
40015: PUSH
40016: LD_VAR 0 3
40020: ARRAY
40021: PPUSH
40022: CALL_OW 432
40026: MINUS
40027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40028: LD_VAR 0 4
40032: PUSH
40033: LD_VAR 0 5
40037: PPUSH
40038: LD_INT 3
40040: PPUSH
40041: CALL_OW 259
40045: PUSH
40046: LD_VAR 0 5
40050: PPUSH
40051: CALL_OW 432
40055: MINUS
40056: GREATEREQUAL
40057: IFFALSE 40075
// mech := result [ i ] ;
40059: LD_ADDR_VAR 0 5
40063: PUSH
40064: LD_VAR 0 2
40068: PUSH
40069: LD_VAR 0 3
40073: ARRAY
40074: ST_TO_ADDR
// end ;
40075: GO 39984
40077: POP
40078: POP
// ComLinkTo ( vehicle , mech ) ;
40079: LD_VAR 0 1
40083: PPUSH
40084: LD_VAR 0 5
40088: PPUSH
40089: CALL_OW 135
// end ;
40093: LD_VAR 0 2
40097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40098: LD_INT 0
40100: PPUSH
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
// result := [ ] ;
40113: LD_ADDR_VAR 0 7
40117: PUSH
40118: EMPTY
40119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 266
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: IN
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 41776
// if name then
40145: LD_VAR 0 3
40149: IFFALSE 40165
// SetBName ( base_dep , name ) ;
40151: LD_VAR 0 1
40155: PPUSH
40156: LD_VAR 0 3
40160: PPUSH
40161: CALL_OW 500
// base := GetBase ( base_dep ) ;
40165: LD_ADDR_VAR 0 15
40169: PUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: CALL_OW 274
40179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40180: LD_ADDR_VAR 0 16
40184: PUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 255
40194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40195: LD_ADDR_VAR 0 17
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 248
40209: ST_TO_ADDR
// if sources then
40210: LD_VAR 0 5
40214: IFFALSE 40261
// for i = 1 to 3 do
40216: LD_ADDR_VAR 0 8
40220: PUSH
40221: DOUBLE
40222: LD_INT 1
40224: DEC
40225: ST_TO_ADDR
40226: LD_INT 3
40228: PUSH
40229: FOR_TO
40230: IFFALSE 40259
// AddResourceType ( base , i , sources [ i ] ) ;
40232: LD_VAR 0 15
40236: PPUSH
40237: LD_VAR 0 8
40241: PPUSH
40242: LD_VAR 0 5
40246: PUSH
40247: LD_VAR 0 8
40251: ARRAY
40252: PPUSH
40253: CALL_OW 276
40257: GO 40229
40259: POP
40260: POP
// buildings := GetBaseBuildings ( base , area ) ;
40261: LD_ADDR_VAR 0 18
40265: PUSH
40266: LD_VAR 0 15
40270: PPUSH
40271: LD_VAR 0 2
40275: PPUSH
40276: CALL 39553 0 2
40280: ST_TO_ADDR
// InitHc ;
40281: CALL_OW 19
// InitUc ;
40285: CALL_OW 18
// uc_side := side ;
40289: LD_ADDR_OWVAR 20
40293: PUSH
40294: LD_VAR 0 16
40298: ST_TO_ADDR
// uc_nation := nation ;
40299: LD_ADDR_OWVAR 21
40303: PUSH
40304: LD_VAR 0 17
40308: ST_TO_ADDR
// if buildings then
40309: LD_VAR 0 18
40313: IFFALSE 41635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40315: LD_ADDR_VAR 0 19
40319: PUSH
40320: LD_VAR 0 18
40324: PPUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 29
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: LD_INT 30
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: PPUSH
40353: CALL_OW 72
40357: ST_TO_ADDR
// if tmp then
40358: LD_VAR 0 19
40362: IFFALSE 40410
// for i in tmp do
40364: LD_ADDR_VAR 0 8
40368: PUSH
40369: LD_VAR 0 19
40373: PUSH
40374: FOR_IN
40375: IFFALSE 40408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40377: LD_VAR 0 8
40381: PPUSH
40382: CALL_OW 250
40386: PPUSH
40387: LD_VAR 0 8
40391: PPUSH
40392: CALL_OW 251
40396: PPUSH
40397: LD_VAR 0 16
40401: PPUSH
40402: CALL_OW 441
40406: GO 40374
40408: POP
40409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40410: LD_VAR 0 18
40414: PPUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 30
40420: PUSH
40421: LD_INT 32
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 30
40430: PUSH
40431: LD_INT 33
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PPUSH
40443: CALL_OW 72
40447: IFFALSE 40535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40449: LD_ADDR_VAR 0 8
40453: PUSH
40454: LD_VAR 0 18
40458: PPUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 30
40464: PUSH
40465: LD_INT 32
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 30
40474: PUSH
40475: LD_INT 33
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: PPUSH
40487: CALL_OW 72
40491: PUSH
40492: FOR_IN
40493: IFFALSE 40533
// begin if not GetBWeapon ( i ) then
40495: LD_VAR 0 8
40499: PPUSH
40500: CALL_OW 269
40504: NOT
40505: IFFALSE 40531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40507: LD_VAR 0 8
40511: PPUSH
40512: LD_VAR 0 8
40516: PPUSH
40517: LD_VAR 0 2
40521: PPUSH
40522: CALL 41781 0 2
40526: PPUSH
40527: CALL_OW 431
// end ;
40531: GO 40492
40533: POP
40534: POP
// end ; for i = 1 to personel do
40535: LD_ADDR_VAR 0 8
40539: PUSH
40540: DOUBLE
40541: LD_INT 1
40543: DEC
40544: ST_TO_ADDR
40545: LD_VAR 0 6
40549: PUSH
40550: FOR_TO
40551: IFFALSE 41615
// begin if i > 4 then
40553: LD_VAR 0 8
40557: PUSH
40558: LD_INT 4
40560: GREATER
40561: IFFALSE 40565
// break ;
40563: GO 41615
// case i of 1 :
40565: LD_VAR 0 8
40569: PUSH
40570: LD_INT 1
40572: DOUBLE
40573: EQUAL
40574: IFTRUE 40578
40576: GO 40658
40578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40579: LD_ADDR_VAR 0 12
40583: PUSH
40584: LD_VAR 0 18
40588: PPUSH
40589: LD_INT 22
40591: PUSH
40592: LD_VAR 0 16
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 58
40603: PUSH
40604: EMPTY
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 30
40612: PUSH
40613: LD_INT 32
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 30
40622: PUSH
40623: LD_INT 4
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 30
40632: PUSH
40633: LD_INT 5
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: PPUSH
40651: CALL_OW 72
40655: ST_TO_ADDR
40656: GO 40880
40658: LD_INT 2
40660: DOUBLE
40661: EQUAL
40662: IFTRUE 40666
40664: GO 40728
40666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40667: LD_ADDR_VAR 0 12
40671: PUSH
40672: LD_VAR 0 18
40676: PPUSH
40677: LD_INT 22
40679: PUSH
40680: LD_VAR 0 16
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 30
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 30
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PPUSH
40721: CALL_OW 72
40725: ST_TO_ADDR
40726: GO 40880
40728: LD_INT 3
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40798
40736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40737: LD_ADDR_VAR 0 12
40741: PUSH
40742: LD_VAR 0 18
40746: PPUSH
40747: LD_INT 22
40749: PUSH
40750: LD_VAR 0 16
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: LD_INT 30
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 30
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PPUSH
40791: CALL_OW 72
40795: ST_TO_ADDR
40796: GO 40880
40798: LD_INT 4
40800: DOUBLE
40801: EQUAL
40802: IFTRUE 40806
40804: GO 40879
40806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40807: LD_ADDR_VAR 0 12
40811: PUSH
40812: LD_VAR 0 18
40816: PPUSH
40817: LD_INT 22
40819: PUSH
40820: LD_VAR 0 16
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 30
40834: PUSH
40835: LD_INT 6
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 30
40844: PUSH
40845: LD_INT 7
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 30
40854: PUSH
40855: LD_INT 8
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PPUSH
40872: CALL_OW 72
40876: ST_TO_ADDR
40877: GO 40880
40879: POP
// if i = 1 then
40880: LD_VAR 0 8
40884: PUSH
40885: LD_INT 1
40887: EQUAL
40888: IFFALSE 40999
// begin tmp := [ ] ;
40890: LD_ADDR_VAR 0 19
40894: PUSH
40895: EMPTY
40896: ST_TO_ADDR
// for j in f do
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_VAR 0 12
40906: PUSH
40907: FOR_IN
40908: IFFALSE 40981
// if GetBType ( j ) = b_bunker then
40910: LD_VAR 0 9
40914: PPUSH
40915: CALL_OW 266
40919: PUSH
40920: LD_INT 32
40922: EQUAL
40923: IFFALSE 40950
// tmp := Insert ( tmp , 1 , j ) else
40925: LD_ADDR_VAR 0 19
40929: PUSH
40930: LD_VAR 0 19
40934: PPUSH
40935: LD_INT 1
40937: PPUSH
40938: LD_VAR 0 9
40942: PPUSH
40943: CALL_OW 2
40947: ST_TO_ADDR
40948: GO 40979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40950: LD_ADDR_VAR 0 19
40954: PUSH
40955: LD_VAR 0 19
40959: PPUSH
40960: LD_VAR 0 19
40964: PUSH
40965: LD_INT 1
40967: PLUS
40968: PPUSH
40969: LD_VAR 0 9
40973: PPUSH
40974: CALL_OW 2
40978: ST_TO_ADDR
40979: GO 40907
40981: POP
40982: POP
// if tmp then
40983: LD_VAR 0 19
40987: IFFALSE 40999
// f := tmp ;
40989: LD_ADDR_VAR 0 12
40993: PUSH
40994: LD_VAR 0 19
40998: ST_TO_ADDR
// end ; x := personel [ i ] ;
40999: LD_ADDR_VAR 0 13
41003: PUSH
41004: LD_VAR 0 6
41008: PUSH
41009: LD_VAR 0 8
41013: ARRAY
41014: ST_TO_ADDR
// if x = - 1 then
41015: LD_VAR 0 13
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: EQUAL
41024: IFFALSE 41233
// begin for j in f do
41026: LD_ADDR_VAR 0 9
41030: PUSH
41031: LD_VAR 0 12
41035: PUSH
41036: FOR_IN
41037: IFFALSE 41229
// repeat InitHc ;
41039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41043: LD_VAR 0 9
41047: PPUSH
41048: CALL_OW 266
41052: PUSH
41053: LD_INT 5
41055: EQUAL
41056: IFFALSE 41126
// begin if UnitsInside ( j ) < 3 then
41058: LD_VAR 0 9
41062: PPUSH
41063: CALL_OW 313
41067: PUSH
41068: LD_INT 3
41070: LESS
41071: IFFALSE 41107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41073: LD_INT 0
41075: PPUSH
41076: LD_INT 5
41078: PUSH
41079: LD_INT 8
41081: PUSH
41082: LD_INT 9
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: PUSH
41090: LD_VAR 0 17
41094: ARRAY
41095: PPUSH
41096: LD_VAR 0 4
41100: PPUSH
41101: CALL_OW 380
41105: GO 41124
// PrepareHuman ( false , i , skill ) ;
41107: LD_INT 0
41109: PPUSH
41110: LD_VAR 0 8
41114: PPUSH
41115: LD_VAR 0 4
41119: PPUSH
41120: CALL_OW 380
// end else
41124: GO 41143
// PrepareHuman ( false , i , skill ) ;
41126: LD_INT 0
41128: PPUSH
41129: LD_VAR 0 8
41133: PPUSH
41134: LD_VAR 0 4
41138: PPUSH
41139: CALL_OW 380
// un := CreateHuman ;
41143: LD_ADDR_VAR 0 14
41147: PUSH
41148: CALL_OW 44
41152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41153: LD_ADDR_VAR 0 7
41157: PUSH
41158: LD_VAR 0 7
41162: PPUSH
41163: LD_INT 1
41165: PPUSH
41166: LD_VAR 0 14
41170: PPUSH
41171: CALL_OW 2
41175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41176: LD_VAR 0 14
41180: PPUSH
41181: LD_VAR 0 9
41185: PPUSH
41186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41190: LD_VAR 0 9
41194: PPUSH
41195: CALL_OW 313
41199: PUSH
41200: LD_INT 6
41202: EQUAL
41203: PUSH
41204: LD_VAR 0 9
41208: PPUSH
41209: CALL_OW 266
41213: PUSH
41214: LD_INT 32
41216: PUSH
41217: LD_INT 31
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: IN
41224: OR
41225: IFFALSE 41039
41227: GO 41036
41229: POP
41230: POP
// end else
41231: GO 41613
// for j = 1 to x do
41233: LD_ADDR_VAR 0 9
41237: PUSH
41238: DOUBLE
41239: LD_INT 1
41241: DEC
41242: ST_TO_ADDR
41243: LD_VAR 0 13
41247: PUSH
41248: FOR_TO
41249: IFFALSE 41611
// begin InitHc ;
41251: CALL_OW 19
// if not f then
41255: LD_VAR 0 12
41259: NOT
41260: IFFALSE 41349
// begin PrepareHuman ( false , i , skill ) ;
41262: LD_INT 0
41264: PPUSH
41265: LD_VAR 0 8
41269: PPUSH
41270: LD_VAR 0 4
41274: PPUSH
41275: CALL_OW 380
// un := CreateHuman ;
41279: LD_ADDR_VAR 0 14
41283: PUSH
41284: CALL_OW 44
41288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41289: LD_ADDR_VAR 0 7
41293: PUSH
41294: LD_VAR 0 7
41298: PPUSH
41299: LD_INT 1
41301: PPUSH
41302: LD_VAR 0 14
41306: PPUSH
41307: CALL_OW 2
41311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41312: LD_VAR 0 14
41316: PPUSH
41317: LD_VAR 0 1
41321: PPUSH
41322: CALL_OW 250
41326: PPUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 251
41336: PPUSH
41337: LD_INT 10
41339: PPUSH
41340: LD_INT 0
41342: PPUSH
41343: CALL_OW 50
// continue ;
41347: GO 41248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41349: LD_VAR 0 12
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: PPUSH
41358: CALL_OW 313
41362: PUSH
41363: LD_VAR 0 12
41367: PUSH
41368: LD_INT 1
41370: ARRAY
41371: PPUSH
41372: CALL_OW 266
41376: PUSH
41377: LD_INT 32
41379: PUSH
41380: LD_INT 31
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: IN
41387: AND
41388: PUSH
41389: LD_VAR 0 12
41393: PUSH
41394: LD_INT 1
41396: ARRAY
41397: PPUSH
41398: CALL_OW 313
41402: PUSH
41403: LD_INT 6
41405: EQUAL
41406: OR
41407: IFFALSE 41427
// f := Delete ( f , 1 ) ;
41409: LD_ADDR_VAR 0 12
41413: PUSH
41414: LD_VAR 0 12
41418: PPUSH
41419: LD_INT 1
41421: PPUSH
41422: CALL_OW 3
41426: ST_TO_ADDR
// if not f then
41427: LD_VAR 0 12
41431: NOT
41432: IFFALSE 41450
// begin x := x + 2 ;
41434: LD_ADDR_VAR 0 13
41438: PUSH
41439: LD_VAR 0 13
41443: PUSH
41444: LD_INT 2
41446: PLUS
41447: ST_TO_ADDR
// continue ;
41448: GO 41248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41450: LD_VAR 0 12
41454: PUSH
41455: LD_INT 1
41457: ARRAY
41458: PPUSH
41459: CALL_OW 266
41463: PUSH
41464: LD_INT 5
41466: EQUAL
41467: IFFALSE 41541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41469: LD_VAR 0 12
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: PPUSH
41478: CALL_OW 313
41482: PUSH
41483: LD_INT 3
41485: LESS
41486: IFFALSE 41522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41488: LD_INT 0
41490: PPUSH
41491: LD_INT 5
41493: PUSH
41494: LD_INT 8
41496: PUSH
41497: LD_INT 9
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: PUSH
41505: LD_VAR 0 17
41509: ARRAY
41510: PPUSH
41511: LD_VAR 0 4
41515: PPUSH
41516: CALL_OW 380
41520: GO 41539
// PrepareHuman ( false , i , skill ) ;
41522: LD_INT 0
41524: PPUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: LD_VAR 0 4
41534: PPUSH
41535: CALL_OW 380
// end else
41539: GO 41558
// PrepareHuman ( false , i , skill ) ;
41541: LD_INT 0
41543: PPUSH
41544: LD_VAR 0 8
41548: PPUSH
41549: LD_VAR 0 4
41553: PPUSH
41554: CALL_OW 380
// un := CreateHuman ;
41558: LD_ADDR_VAR 0 14
41562: PUSH
41563: CALL_OW 44
41567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41568: LD_ADDR_VAR 0 7
41572: PUSH
41573: LD_VAR 0 7
41577: PPUSH
41578: LD_INT 1
41580: PPUSH
41581: LD_VAR 0 14
41585: PPUSH
41586: CALL_OW 2
41590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41591: LD_VAR 0 14
41595: PPUSH
41596: LD_VAR 0 12
41600: PUSH
41601: LD_INT 1
41603: ARRAY
41604: PPUSH
41605: CALL_OW 52
// end ;
41609: GO 41248
41611: POP
41612: POP
// end ;
41613: GO 40550
41615: POP
41616: POP
// result := result ^ buildings ;
41617: LD_ADDR_VAR 0 7
41621: PUSH
41622: LD_VAR 0 7
41626: PUSH
41627: LD_VAR 0 18
41631: ADD
41632: ST_TO_ADDR
// end else
41633: GO 41776
// begin for i = 1 to personel do
41635: LD_ADDR_VAR 0 8
41639: PUSH
41640: DOUBLE
41641: LD_INT 1
41643: DEC
41644: ST_TO_ADDR
41645: LD_VAR 0 6
41649: PUSH
41650: FOR_TO
41651: IFFALSE 41774
// begin if i > 4 then
41653: LD_VAR 0 8
41657: PUSH
41658: LD_INT 4
41660: GREATER
41661: IFFALSE 41665
// break ;
41663: GO 41774
// x := personel [ i ] ;
41665: LD_ADDR_VAR 0 13
41669: PUSH
41670: LD_VAR 0 6
41674: PUSH
41675: LD_VAR 0 8
41679: ARRAY
41680: ST_TO_ADDR
// if x = - 1 then
41681: LD_VAR 0 13
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: EQUAL
41690: IFFALSE 41694
// continue ;
41692: GO 41650
// PrepareHuman ( false , i , skill ) ;
41694: LD_INT 0
41696: PPUSH
41697: LD_VAR 0 8
41701: PPUSH
41702: LD_VAR 0 4
41706: PPUSH
41707: CALL_OW 380
// un := CreateHuman ;
41711: LD_ADDR_VAR 0 14
41715: PUSH
41716: CALL_OW 44
41720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41721: LD_VAR 0 14
41725: PPUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 250
41735: PPUSH
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 251
41745: PPUSH
41746: LD_INT 10
41748: PPUSH
41749: LD_INT 0
41751: PPUSH
41752: CALL_OW 50
// result := result ^ un ;
41756: LD_ADDR_VAR 0 7
41760: PUSH
41761: LD_VAR 0 7
41765: PUSH
41766: LD_VAR 0 14
41770: ADD
41771: ST_TO_ADDR
// end ;
41772: GO 41650
41774: POP
41775: POP
// end ; end ;
41776: LD_VAR 0 7
41780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41781: LD_INT 0
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
41798: PPUSH
// result := false ;
41799: LD_ADDR_VAR 0 3
41803: PUSH
41804: LD_INT 0
41806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41807: LD_VAR 0 1
41811: NOT
41812: PUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL_OW 266
41822: PUSH
41823: LD_INT 32
41825: PUSH
41826: LD_INT 33
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: IN
41833: NOT
41834: OR
41835: IFFALSE 41839
// exit ;
41837: GO 42975
// nat := GetNation ( tower ) ;
41839: LD_ADDR_VAR 0 12
41843: PUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 248
41853: ST_TO_ADDR
// side := GetSide ( tower ) ;
41854: LD_ADDR_VAR 0 16
41858: PUSH
41859: LD_VAR 0 1
41863: PPUSH
41864: CALL_OW 255
41868: ST_TO_ADDR
// x := GetX ( tower ) ;
41869: LD_ADDR_VAR 0 10
41873: PUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 250
41883: ST_TO_ADDR
// y := GetY ( tower ) ;
41884: LD_ADDR_VAR 0 11
41888: PUSH
41889: LD_VAR 0 1
41893: PPUSH
41894: CALL_OW 251
41898: ST_TO_ADDR
// if not x or not y then
41899: LD_VAR 0 10
41903: NOT
41904: PUSH
41905: LD_VAR 0 11
41909: NOT
41910: OR
41911: IFFALSE 41915
// exit ;
41913: GO 42975
// weapon := 0 ;
41915: LD_ADDR_VAR 0 18
41919: PUSH
41920: LD_INT 0
41922: ST_TO_ADDR
// fac_list := [ ] ;
41923: LD_ADDR_VAR 0 17
41927: PUSH
41928: EMPTY
41929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41930: LD_ADDR_VAR 0 6
41934: PUSH
41935: LD_VAR 0 1
41939: PPUSH
41940: CALL_OW 274
41944: PPUSH
41945: LD_VAR 0 2
41949: PPUSH
41950: CALL 39553 0 2
41954: PPUSH
41955: LD_INT 30
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PPUSH
41965: CALL_OW 72
41969: ST_TO_ADDR
// if not factories then
41970: LD_VAR 0 6
41974: NOT
41975: IFFALSE 41979
// exit ;
41977: GO 42975
// for i in factories do
41979: LD_ADDR_VAR 0 8
41983: PUSH
41984: LD_VAR 0 6
41988: PUSH
41989: FOR_IN
41990: IFFALSE 42015
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41992: LD_ADDR_VAR 0 17
41996: PUSH
41997: LD_VAR 0 17
42001: PUSH
42002: LD_VAR 0 8
42006: PPUSH
42007: CALL_OW 478
42011: UNION
42012: ST_TO_ADDR
42013: GO 41989
42015: POP
42016: POP
// if not fac_list then
42017: LD_VAR 0 17
42021: NOT
42022: IFFALSE 42026
// exit ;
42024: GO 42975
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42026: LD_ADDR_VAR 0 5
42030: PUSH
42031: LD_INT 4
42033: PUSH
42034: LD_INT 5
42036: PUSH
42037: LD_INT 9
42039: PUSH
42040: LD_INT 10
42042: PUSH
42043: LD_INT 6
42045: PUSH
42046: LD_INT 7
42048: PUSH
42049: LD_INT 11
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 27
42063: PUSH
42064: LD_INT 28
42066: PUSH
42067: LD_INT 26
42069: PUSH
42070: LD_INT 30
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 43
42081: PUSH
42082: LD_INT 44
42084: PUSH
42085: LD_INT 46
42087: PUSH
42088: LD_INT 45
42090: PUSH
42091: LD_INT 47
42093: PUSH
42094: LD_INT 49
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: PUSH
42110: LD_VAR 0 12
42114: ARRAY
42115: ST_TO_ADDR
// for i in list do
42116: LD_ADDR_VAR 0 8
42120: PUSH
42121: LD_VAR 0 5
42125: PUSH
42126: FOR_IN
42127: IFFALSE 42160
// if not i in fac_list then
42129: LD_VAR 0 8
42133: PUSH
42134: LD_VAR 0 17
42138: IN
42139: NOT
42140: IFFALSE 42158
// list := list diff i ;
42142: LD_ADDR_VAR 0 5
42146: PUSH
42147: LD_VAR 0 5
42151: PUSH
42152: LD_VAR 0 8
42156: DIFF
42157: ST_TO_ADDR
42158: GO 42126
42160: POP
42161: POP
// if not list then
42162: LD_VAR 0 5
42166: NOT
42167: IFFALSE 42171
// exit ;
42169: GO 42975
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42171: LD_VAR 0 12
42175: PUSH
42176: LD_INT 3
42178: EQUAL
42179: PUSH
42180: LD_INT 49
42182: PUSH
42183: LD_VAR 0 5
42187: IN
42188: AND
42189: PUSH
42190: LD_INT 31
42192: PPUSH
42193: LD_VAR 0 16
42197: PPUSH
42198: CALL_OW 321
42202: PUSH
42203: LD_INT 2
42205: EQUAL
42206: AND
42207: IFFALSE 42267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42209: LD_INT 22
42211: PUSH
42212: LD_VAR 0 16
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 35
42223: PUSH
42224: LD_INT 49
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 91
42233: PUSH
42234: LD_VAR 0 1
42238: PUSH
42239: LD_INT 10
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: PPUSH
42252: CALL_OW 69
42256: NOT
42257: IFFALSE 42267
// weapon := ru_time_lapser ;
42259: LD_ADDR_VAR 0 18
42263: PUSH
42264: LD_INT 49
42266: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42267: LD_VAR 0 12
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: IN
42282: PUSH
42283: LD_INT 11
42285: PUSH
42286: LD_VAR 0 5
42290: IN
42291: PUSH
42292: LD_INT 30
42294: PUSH
42295: LD_VAR 0 5
42299: IN
42300: OR
42301: AND
42302: PUSH
42303: LD_INT 6
42305: PPUSH
42306: LD_VAR 0 16
42310: PPUSH
42311: CALL_OW 321
42315: PUSH
42316: LD_INT 2
42318: EQUAL
42319: AND
42320: IFFALSE 42485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42322: LD_INT 22
42324: PUSH
42325: LD_VAR 0 16
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 35
42339: PUSH
42340: LD_INT 11
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 35
42349: PUSH
42350: LD_INT 30
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 91
42364: PUSH
42365: LD_VAR 0 1
42369: PUSH
42370: LD_INT 18
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: PPUSH
42383: CALL_OW 69
42387: NOT
42388: PUSH
42389: LD_INT 22
42391: PUSH
42392: LD_VAR 0 16
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 30
42406: PUSH
42407: LD_INT 32
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 30
42416: PUSH
42417: LD_INT 33
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 91
42431: PUSH
42432: LD_VAR 0 1
42436: PUSH
42437: LD_INT 12
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: PPUSH
42453: CALL_OW 69
42457: PUSH
42458: LD_INT 2
42460: GREATER
42461: AND
42462: IFFALSE 42485
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42464: LD_ADDR_VAR 0 18
42468: PUSH
42469: LD_INT 11
42471: PUSH
42472: LD_INT 30
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_VAR 0 12
42483: ARRAY
42484: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42485: LD_VAR 0 18
42489: NOT
42490: PUSH
42491: LD_INT 40
42493: PPUSH
42494: LD_VAR 0 16
42498: PPUSH
42499: CALL_OW 321
42503: PUSH
42504: LD_INT 2
42506: EQUAL
42507: AND
42508: PUSH
42509: LD_INT 7
42511: PUSH
42512: LD_VAR 0 5
42516: IN
42517: PUSH
42518: LD_INT 28
42520: PUSH
42521: LD_VAR 0 5
42525: IN
42526: OR
42527: PUSH
42528: LD_INT 45
42530: PUSH
42531: LD_VAR 0 5
42535: IN
42536: OR
42537: AND
42538: IFFALSE 42792
// begin hex := GetHexInfo ( x , y ) ;
42540: LD_ADDR_VAR 0 4
42544: PUSH
42545: LD_VAR 0 10
42549: PPUSH
42550: LD_VAR 0 11
42554: PPUSH
42555: CALL_OW 546
42559: ST_TO_ADDR
// if hex [ 1 ] then
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: IFFALSE 42572
// exit ;
42570: GO 42975
// height := hex [ 2 ] ;
42572: LD_ADDR_VAR 0 15
42576: PUSH
42577: LD_VAR 0 4
42581: PUSH
42582: LD_INT 2
42584: ARRAY
42585: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42586: LD_ADDR_VAR 0 14
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: LD_INT 5
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// for i in tmp do
42609: LD_ADDR_VAR 0 8
42613: PUSH
42614: LD_VAR 0 14
42618: PUSH
42619: FOR_IN
42620: IFFALSE 42790
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42622: LD_ADDR_VAR 0 9
42626: PUSH
42627: LD_VAR 0 10
42631: PPUSH
42632: LD_VAR 0 8
42636: PPUSH
42637: LD_INT 5
42639: PPUSH
42640: CALL_OW 272
42644: PUSH
42645: LD_VAR 0 11
42649: PPUSH
42650: LD_VAR 0 8
42654: PPUSH
42655: LD_INT 5
42657: PPUSH
42658: CALL_OW 273
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42667: LD_VAR 0 9
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: PPUSH
42676: LD_VAR 0 9
42680: PUSH
42681: LD_INT 2
42683: ARRAY
42684: PPUSH
42685: CALL_OW 488
42689: IFFALSE 42788
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42691: LD_ADDR_VAR 0 4
42695: PUSH
42696: LD_VAR 0 9
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: LD_VAR 0 9
42709: PUSH
42710: LD_INT 2
42712: ARRAY
42713: PPUSH
42714: CALL_OW 546
42718: ST_TO_ADDR
// if hex [ 1 ] then
42719: LD_VAR 0 4
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: IFFALSE 42731
// continue ;
42729: GO 42619
// h := hex [ 2 ] ;
42731: LD_ADDR_VAR 0 13
42735: PUSH
42736: LD_VAR 0 4
42740: PUSH
42741: LD_INT 2
42743: ARRAY
42744: ST_TO_ADDR
// if h + 7 < height then
42745: LD_VAR 0 13
42749: PUSH
42750: LD_INT 7
42752: PLUS
42753: PUSH
42754: LD_VAR 0 15
42758: LESS
42759: IFFALSE 42788
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42761: LD_ADDR_VAR 0 18
42765: PUSH
42766: LD_INT 7
42768: PUSH
42769: LD_INT 28
42771: PUSH
42772: LD_INT 45
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: PUSH
42780: LD_VAR 0 12
42784: ARRAY
42785: ST_TO_ADDR
// break ;
42786: GO 42790
// end ; end ; end ;
42788: GO 42619
42790: POP
42791: POP
// end ; if not weapon then
42792: LD_VAR 0 18
42796: NOT
42797: IFFALSE 42857
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42799: LD_ADDR_VAR 0 5
42803: PUSH
42804: LD_VAR 0 5
42808: PUSH
42809: LD_INT 11
42811: PUSH
42812: LD_INT 30
42814: PUSH
42815: LD_INT 49
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: DIFF
42823: ST_TO_ADDR
// if not list then
42824: LD_VAR 0 5
42828: NOT
42829: IFFALSE 42833
// exit ;
42831: GO 42975
// weapon := list [ rand ( 1 , list ) ] ;
42833: LD_ADDR_VAR 0 18
42837: PUSH
42838: LD_VAR 0 5
42842: PUSH
42843: LD_INT 1
42845: PPUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: CALL_OW 12
42855: ARRAY
42856: ST_TO_ADDR
// end ; if weapon then
42857: LD_VAR 0 18
42861: IFFALSE 42975
// begin tmp := CostOfWeapon ( weapon ) ;
42863: LD_ADDR_VAR 0 14
42867: PUSH
42868: LD_VAR 0 18
42872: PPUSH
42873: CALL_OW 451
42877: ST_TO_ADDR
// j := GetBase ( tower ) ;
42878: LD_ADDR_VAR 0 9
42882: PUSH
42883: LD_VAR 0 1
42887: PPUSH
42888: CALL_OW 274
42892: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42893: LD_VAR 0 9
42897: PPUSH
42898: LD_INT 1
42900: PPUSH
42901: CALL_OW 275
42905: PUSH
42906: LD_VAR 0 14
42910: PUSH
42911: LD_INT 1
42913: ARRAY
42914: GREATEREQUAL
42915: PUSH
42916: LD_VAR 0 9
42920: PPUSH
42921: LD_INT 2
42923: PPUSH
42924: CALL_OW 275
42928: PUSH
42929: LD_VAR 0 14
42933: PUSH
42934: LD_INT 2
42936: ARRAY
42937: GREATEREQUAL
42938: AND
42939: PUSH
42940: LD_VAR 0 9
42944: PPUSH
42945: LD_INT 3
42947: PPUSH
42948: CALL_OW 275
42952: PUSH
42953: LD_VAR 0 14
42957: PUSH
42958: LD_INT 3
42960: ARRAY
42961: GREATEREQUAL
42962: AND
42963: IFFALSE 42975
// result := weapon ;
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_VAR 0 18
42974: ST_TO_ADDR
// end ; end ;
42975: LD_VAR 0 3
42979: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42980: LD_INT 0
42982: PPUSH
42983: PPUSH
// result := true ;
42984: LD_ADDR_VAR 0 3
42988: PUSH
42989: LD_INT 1
42991: ST_TO_ADDR
// if array1 = array2 then
42992: LD_VAR 0 1
42996: PUSH
42997: LD_VAR 0 2
43001: EQUAL
43002: IFFALSE 43062
// begin for i = 1 to array1 do
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: DOUBLE
43010: LD_INT 1
43012: DEC
43013: ST_TO_ADDR
43014: LD_VAR 0 1
43018: PUSH
43019: FOR_TO
43020: IFFALSE 43058
// if array1 [ i ] <> array2 [ i ] then
43022: LD_VAR 0 1
43026: PUSH
43027: LD_VAR 0 4
43031: ARRAY
43032: PUSH
43033: LD_VAR 0 2
43037: PUSH
43038: LD_VAR 0 4
43042: ARRAY
43043: NONEQUAL
43044: IFFALSE 43056
// begin result := false ;
43046: LD_ADDR_VAR 0 3
43050: PUSH
43051: LD_INT 0
43053: ST_TO_ADDR
// break ;
43054: GO 43058
// end ;
43056: GO 43019
43058: POP
43059: POP
// end else
43060: GO 43070
// result := false ;
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 0
43069: ST_TO_ADDR
// end ;
43070: LD_VAR 0 3
43074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43075: LD_INT 0
43077: PPUSH
43078: PPUSH
43079: PPUSH
// pom := GetBase ( fac ) ;
43080: LD_ADDR_VAR 0 5
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 274
43094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43095: LD_ADDR_VAR 0 4
43099: PUSH
43100: LD_VAR 0 2
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PPUSH
43109: LD_VAR 0 2
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: PPUSH
43118: LD_VAR 0 2
43122: PUSH
43123: LD_INT 3
43125: ARRAY
43126: PPUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_INT 4
43134: ARRAY
43135: PPUSH
43136: CALL_OW 449
43140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43141: LD_ADDR_VAR 0 3
43145: PUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: LD_INT 1
43153: PPUSH
43154: CALL_OW 275
43158: PUSH
43159: LD_VAR 0 4
43163: PUSH
43164: LD_INT 1
43166: ARRAY
43167: GREATEREQUAL
43168: PUSH
43169: LD_VAR 0 5
43173: PPUSH
43174: LD_INT 2
43176: PPUSH
43177: CALL_OW 275
43181: PUSH
43182: LD_VAR 0 4
43186: PUSH
43187: LD_INT 2
43189: ARRAY
43190: GREATEREQUAL
43191: AND
43192: PUSH
43193: LD_VAR 0 5
43197: PPUSH
43198: LD_INT 3
43200: PPUSH
43201: CALL_OW 275
43205: PUSH
43206: LD_VAR 0 4
43210: PUSH
43211: LD_INT 3
43213: ARRAY
43214: GREATEREQUAL
43215: AND
43216: ST_TO_ADDR
// end ;
43217: LD_VAR 0 3
43221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43222: LD_INT 0
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
// pom := GetBase ( building ) ;
43228: LD_ADDR_VAR 0 3
43232: PUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 274
43242: ST_TO_ADDR
// if not pom then
43243: LD_VAR 0 3
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 43422
// btype := GetBType ( building ) ;
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 266
43266: ST_TO_ADDR
// if btype = b_armoury then
43267: LD_VAR 0 5
43271: PUSH
43272: LD_INT 4
43274: EQUAL
43275: IFFALSE 43285
// btype := b_barracks ;
43277: LD_ADDR_VAR 0 5
43281: PUSH
43282: LD_INT 5
43284: ST_TO_ADDR
// if btype = b_depot then
43285: LD_VAR 0 5
43289: PUSH
43290: LD_INT 0
43292: EQUAL
43293: IFFALSE 43303
// btype := b_warehouse ;
43295: LD_ADDR_VAR 0 5
43299: PUSH
43300: LD_INT 1
43302: ST_TO_ADDR
// if btype = b_workshop then
43303: LD_VAR 0 5
43307: PUSH
43308: LD_INT 2
43310: EQUAL
43311: IFFALSE 43321
// btype := b_factory ;
43313: LD_ADDR_VAR 0 5
43317: PUSH
43318: LD_INT 3
43320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43321: LD_ADDR_VAR 0 4
43325: PUSH
43326: LD_VAR 0 5
43330: PPUSH
43331: LD_VAR 0 1
43335: PPUSH
43336: CALL_OW 248
43340: PPUSH
43341: CALL_OW 450
43345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43346: LD_ADDR_VAR 0 2
43350: PUSH
43351: LD_VAR 0 3
43355: PPUSH
43356: LD_INT 1
43358: PPUSH
43359: CALL_OW 275
43363: PUSH
43364: LD_VAR 0 4
43368: PUSH
43369: LD_INT 1
43371: ARRAY
43372: GREATEREQUAL
43373: PUSH
43374: LD_VAR 0 3
43378: PPUSH
43379: LD_INT 2
43381: PPUSH
43382: CALL_OW 275
43386: PUSH
43387: LD_VAR 0 4
43391: PUSH
43392: LD_INT 2
43394: ARRAY
43395: GREATEREQUAL
43396: AND
43397: PUSH
43398: LD_VAR 0 3
43402: PPUSH
43403: LD_INT 3
43405: PPUSH
43406: CALL_OW 275
43410: PUSH
43411: LD_VAR 0 4
43415: PUSH
43416: LD_INT 3
43418: ARRAY
43419: GREATEREQUAL
43420: AND
43421: ST_TO_ADDR
// end ;
43422: LD_VAR 0 2
43426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43427: LD_INT 0
43429: PPUSH
43430: PPUSH
43431: PPUSH
// pom := GetBase ( building ) ;
43432: LD_ADDR_VAR 0 4
43436: PUSH
43437: LD_VAR 0 1
43441: PPUSH
43442: CALL_OW 274
43446: ST_TO_ADDR
// if not pom then
43447: LD_VAR 0 4
43451: NOT
43452: IFFALSE 43456
// exit ;
43454: GO 43557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43456: LD_ADDR_VAR 0 5
43460: PUSH
43461: LD_VAR 0 2
43465: PPUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL_OW 248
43475: PPUSH
43476: CALL_OW 450
43480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 4
43490: PPUSH
43491: LD_INT 1
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 5
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: GREATEREQUAL
43508: PUSH
43509: LD_VAR 0 4
43513: PPUSH
43514: LD_INT 2
43516: PPUSH
43517: CALL_OW 275
43521: PUSH
43522: LD_VAR 0 5
43526: PUSH
43527: LD_INT 2
43529: ARRAY
43530: GREATEREQUAL
43531: AND
43532: PUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: CALL_OW 275
43545: PUSH
43546: LD_VAR 0 5
43550: PUSH
43551: LD_INT 3
43553: ARRAY
43554: GREATEREQUAL
43555: AND
43556: ST_TO_ADDR
// end ;
43557: LD_VAR 0 3
43561: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43562: LD_INT 0
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
// result := false ;
43574: LD_ADDR_VAR 0 6
43578: PUSH
43579: LD_INT 0
43581: ST_TO_ADDR
// if not base or not btype or not x or not y then
43582: LD_VAR 0 1
43586: NOT
43587: PUSH
43588: LD_VAR 0 2
43592: NOT
43593: OR
43594: PUSH
43595: LD_VAR 0 3
43599: NOT
43600: OR
43601: PUSH
43602: LD_VAR 0 4
43606: NOT
43607: OR
43608: IFFALSE 43612
// exit ;
43610: GO 44221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43612: LD_ADDR_VAR 0 12
43616: PUSH
43617: LD_VAR 0 2
43621: PPUSH
43622: LD_VAR 0 3
43626: PPUSH
43627: LD_VAR 0 4
43631: PPUSH
43632: LD_VAR 0 5
43636: PPUSH
43637: LD_VAR 0 1
43641: PUSH
43642: LD_INT 1
43644: ARRAY
43645: PPUSH
43646: CALL_OW 248
43650: PPUSH
43651: LD_INT 0
43653: PPUSH
43654: CALL 45058 0 6
43658: ST_TO_ADDR
// if not hexes then
43659: LD_VAR 0 12
43663: NOT
43664: IFFALSE 43668
// exit ;
43666: GO 44221
// for i = 1 to hexes do
43668: LD_ADDR_VAR 0 7
43672: PUSH
43673: DOUBLE
43674: LD_INT 1
43676: DEC
43677: ST_TO_ADDR
43678: LD_VAR 0 12
43682: PUSH
43683: FOR_TO
43684: IFFALSE 44219
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43686: LD_ADDR_VAR 0 11
43690: PUSH
43691: LD_VAR 0 12
43695: PUSH
43696: LD_VAR 0 7
43700: ARRAY
43701: PUSH
43702: LD_INT 1
43704: ARRAY
43705: PPUSH
43706: LD_VAR 0 12
43710: PUSH
43711: LD_VAR 0 7
43715: ARRAY
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: PPUSH
43721: CALL_OW 428
43725: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43726: LD_VAR 0 12
43730: PUSH
43731: LD_VAR 0 7
43735: ARRAY
43736: PUSH
43737: LD_INT 1
43739: ARRAY
43740: PPUSH
43741: LD_VAR 0 12
43745: PUSH
43746: LD_VAR 0 7
43750: ARRAY
43751: PUSH
43752: LD_INT 2
43754: ARRAY
43755: PPUSH
43756: CALL_OW 351
43760: PUSH
43761: LD_VAR 0 12
43765: PUSH
43766: LD_VAR 0 7
43770: ARRAY
43771: PUSH
43772: LD_INT 1
43774: ARRAY
43775: PPUSH
43776: LD_VAR 0 12
43780: PUSH
43781: LD_VAR 0 7
43785: ARRAY
43786: PUSH
43787: LD_INT 2
43789: ARRAY
43790: PPUSH
43791: CALL_OW 488
43795: NOT
43796: OR
43797: PUSH
43798: LD_VAR 0 11
43802: PPUSH
43803: CALL_OW 247
43807: PUSH
43808: LD_INT 3
43810: EQUAL
43811: OR
43812: IFFALSE 43818
// exit ;
43814: POP
43815: POP
43816: GO 44221
// if not tmp or not tmp in base then
43818: LD_VAR 0 11
43822: NOT
43823: PUSH
43824: LD_VAR 0 11
43828: PUSH
43829: LD_VAR 0 1
43833: IN
43834: NOT
43835: OR
43836: IFFALSE 43840
// continue ;
43838: GO 43683
// result := true ;
43840: LD_ADDR_VAR 0 6
43844: PUSH
43845: LD_INT 1
43847: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43848: LD_ADDR_VAR 0 15
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_INT 22
43860: PUSH
43861: LD_VAR 0 11
43865: PPUSH
43866: CALL_OW 255
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 30
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 30
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PPUSH
43907: CALL_OW 72
43911: ST_TO_ADDR
// if dep then
43912: LD_VAR 0 15
43916: IFFALSE 44052
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43918: LD_ADDR_VAR 0 14
43922: PUSH
43923: LD_VAR 0 15
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PPUSH
43932: CALL_OW 250
43936: PPUSH
43937: LD_VAR 0 15
43941: PUSH
43942: LD_INT 1
43944: ARRAY
43945: PPUSH
43946: CALL_OW 254
43950: PPUSH
43951: LD_INT 5
43953: PPUSH
43954: CALL_OW 272
43958: PUSH
43959: LD_VAR 0 15
43963: PUSH
43964: LD_INT 1
43966: ARRAY
43967: PPUSH
43968: CALL_OW 251
43972: PPUSH
43973: LD_VAR 0 15
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: PPUSH
43982: CALL_OW 254
43986: PPUSH
43987: LD_INT 5
43989: PPUSH
43990: CALL_OW 273
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43999: LD_VAR 0 14
44003: PUSH
44004: LD_INT 1
44006: ARRAY
44007: PPUSH
44008: LD_VAR 0 14
44012: PUSH
44013: LD_INT 2
44015: ARRAY
44016: PPUSH
44017: CALL_OW 488
44021: IFFALSE 44052
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44023: LD_VAR 0 11
44027: PPUSH
44028: LD_VAR 0 14
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: LD_VAR 0 14
44041: PUSH
44042: LD_INT 2
44044: ARRAY
44045: PPUSH
44046: CALL_OW 111
// continue ;
44050: GO 43683
// end ; end ; r := GetDir ( tmp ) ;
44052: LD_ADDR_VAR 0 13
44056: PUSH
44057: LD_VAR 0 11
44061: PPUSH
44062: CALL_OW 254
44066: ST_TO_ADDR
// if r = 5 then
44067: LD_VAR 0 13
44071: PUSH
44072: LD_INT 5
44074: EQUAL
44075: IFFALSE 44085
// r := 0 ;
44077: LD_ADDR_VAR 0 13
44081: PUSH
44082: LD_INT 0
44084: ST_TO_ADDR
// for j = r to 5 do
44085: LD_ADDR_VAR 0 8
44089: PUSH
44090: DOUBLE
44091: LD_VAR 0 13
44095: DEC
44096: ST_TO_ADDR
44097: LD_INT 5
44099: PUSH
44100: FOR_TO
44101: IFFALSE 44215
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44103: LD_ADDR_VAR 0 9
44107: PUSH
44108: LD_VAR 0 11
44112: PPUSH
44113: CALL_OW 250
44117: PPUSH
44118: LD_VAR 0 8
44122: PPUSH
44123: LD_INT 2
44125: PPUSH
44126: CALL_OW 272
44130: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44131: LD_ADDR_VAR 0 10
44135: PUSH
44136: LD_VAR 0 11
44140: PPUSH
44141: CALL_OW 251
44145: PPUSH
44146: LD_VAR 0 8
44150: PPUSH
44151: LD_INT 2
44153: PPUSH
44154: CALL_OW 273
44158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44159: LD_VAR 0 9
44163: PPUSH
44164: LD_VAR 0 10
44168: PPUSH
44169: CALL_OW 488
44173: PUSH
44174: LD_VAR 0 9
44178: PPUSH
44179: LD_VAR 0 10
44183: PPUSH
44184: CALL_OW 428
44188: NOT
44189: AND
44190: IFFALSE 44213
// begin ComMoveXY ( tmp , _x , _y ) ;
44192: LD_VAR 0 11
44196: PPUSH
44197: LD_VAR 0 9
44201: PPUSH
44202: LD_VAR 0 10
44206: PPUSH
44207: CALL_OW 111
// break ;
44211: GO 44215
// end ; end ;
44213: GO 44100
44215: POP
44216: POP
// end ;
44217: GO 43683
44219: POP
44220: POP
// end ;
44221: LD_VAR 0 6
44225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44226: LD_INT 0
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// result := false ;
44238: LD_ADDR_VAR 0 6
44242: PUSH
44243: LD_INT 0
44245: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44246: LD_VAR 0 1
44250: NOT
44251: PUSH
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 266
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: IN
44272: NOT
44273: OR
44274: PUSH
44275: LD_VAR 0 2
44279: NOT
44280: OR
44281: PUSH
44282: LD_VAR 0 5
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 4
44301: PUSH
44302: LD_INT 5
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: IN
44313: NOT
44314: OR
44315: PUSH
44316: LD_VAR 0 3
44320: PPUSH
44321: LD_VAR 0 4
44325: PPUSH
44326: CALL_OW 488
44330: NOT
44331: OR
44332: IFFALSE 44336
// exit ;
44334: GO 45053
// pom := GetBase ( depot ) ;
44336: LD_ADDR_VAR 0 10
44340: PUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: CALL_OW 274
44350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44351: LD_ADDR_VAR 0 11
44355: PUSH
44356: LD_VAR 0 2
44360: PPUSH
44361: LD_VAR 0 1
44365: PPUSH
44366: CALL_OW 248
44370: PPUSH
44371: CALL_OW 450
44375: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44376: LD_VAR 0 10
44380: PPUSH
44381: LD_INT 1
44383: PPUSH
44384: CALL_OW 275
44388: PUSH
44389: LD_VAR 0 11
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: GREATEREQUAL
44398: PUSH
44399: LD_VAR 0 10
44403: PPUSH
44404: LD_INT 2
44406: PPUSH
44407: CALL_OW 275
44411: PUSH
44412: LD_VAR 0 11
44416: PUSH
44417: LD_INT 2
44419: ARRAY
44420: GREATEREQUAL
44421: AND
44422: PUSH
44423: LD_VAR 0 10
44427: PPUSH
44428: LD_INT 3
44430: PPUSH
44431: CALL_OW 275
44435: PUSH
44436: LD_VAR 0 11
44440: PUSH
44441: LD_INT 3
44443: ARRAY
44444: GREATEREQUAL
44445: AND
44446: NOT
44447: IFFALSE 44451
// exit ;
44449: GO 45053
// if GetBType ( depot ) = b_depot then
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 266
44460: PUSH
44461: LD_INT 0
44463: EQUAL
44464: IFFALSE 44476
// dist := 28 else
44466: LD_ADDR_VAR 0 14
44470: PUSH
44471: LD_INT 28
44473: ST_TO_ADDR
44474: GO 44484
// dist := 36 ;
44476: LD_ADDR_VAR 0 14
44480: PUSH
44481: LD_INT 36
44483: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_VAR 0 3
44493: PPUSH
44494: LD_VAR 0 4
44498: PPUSH
44499: CALL_OW 297
44503: PUSH
44504: LD_VAR 0 14
44508: GREATER
44509: IFFALSE 44513
// exit ;
44511: GO 45053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44513: LD_ADDR_VAR 0 12
44517: PUSH
44518: LD_VAR 0 2
44522: PPUSH
44523: LD_VAR 0 3
44527: PPUSH
44528: LD_VAR 0 4
44532: PPUSH
44533: LD_VAR 0 5
44537: PPUSH
44538: LD_VAR 0 1
44542: PPUSH
44543: CALL_OW 248
44547: PPUSH
44548: LD_INT 0
44550: PPUSH
44551: CALL 45058 0 6
44555: ST_TO_ADDR
// if not hexes then
44556: LD_VAR 0 12
44560: NOT
44561: IFFALSE 44565
// exit ;
44563: GO 45053
// hex := GetHexInfo ( x , y ) ;
44565: LD_ADDR_VAR 0 15
44569: PUSH
44570: LD_VAR 0 3
44574: PPUSH
44575: LD_VAR 0 4
44579: PPUSH
44580: CALL_OW 546
44584: ST_TO_ADDR
// if hex [ 1 ] then
44585: LD_VAR 0 15
44589: PUSH
44590: LD_INT 1
44592: ARRAY
44593: IFFALSE 44597
// exit ;
44595: GO 45053
// height := hex [ 2 ] ;
44597: LD_ADDR_VAR 0 13
44601: PUSH
44602: LD_VAR 0 15
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: ST_TO_ADDR
// for i = 1 to hexes do
44611: LD_ADDR_VAR 0 7
44615: PUSH
44616: DOUBLE
44617: LD_INT 1
44619: DEC
44620: ST_TO_ADDR
44621: LD_VAR 0 12
44625: PUSH
44626: FOR_TO
44627: IFFALSE 44957
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44629: LD_VAR 0 12
44633: PUSH
44634: LD_VAR 0 7
44638: ARRAY
44639: PUSH
44640: LD_INT 1
44642: ARRAY
44643: PPUSH
44644: LD_VAR 0 12
44648: PUSH
44649: LD_VAR 0 7
44653: ARRAY
44654: PUSH
44655: LD_INT 2
44657: ARRAY
44658: PPUSH
44659: CALL_OW 488
44663: NOT
44664: PUSH
44665: LD_VAR 0 12
44669: PUSH
44670: LD_VAR 0 7
44674: ARRAY
44675: PUSH
44676: LD_INT 1
44678: ARRAY
44679: PPUSH
44680: LD_VAR 0 12
44684: PUSH
44685: LD_VAR 0 7
44689: ARRAY
44690: PUSH
44691: LD_INT 2
44693: ARRAY
44694: PPUSH
44695: CALL_OW 428
44699: PUSH
44700: LD_INT 0
44702: GREATER
44703: OR
44704: PUSH
44705: LD_VAR 0 12
44709: PUSH
44710: LD_VAR 0 7
44714: ARRAY
44715: PUSH
44716: LD_INT 1
44718: ARRAY
44719: PPUSH
44720: LD_VAR 0 12
44724: PUSH
44725: LD_VAR 0 7
44729: ARRAY
44730: PUSH
44731: LD_INT 2
44733: ARRAY
44734: PPUSH
44735: CALL_OW 351
44739: OR
44740: IFFALSE 44746
// exit ;
44742: POP
44743: POP
44744: GO 45053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44746: LD_ADDR_VAR 0 8
44750: PUSH
44751: LD_VAR 0 12
44755: PUSH
44756: LD_VAR 0 7
44760: ARRAY
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PPUSH
44766: LD_VAR 0 12
44770: PUSH
44771: LD_VAR 0 7
44775: ARRAY
44776: PUSH
44777: LD_INT 2
44779: ARRAY
44780: PPUSH
44781: CALL_OW 546
44785: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44786: LD_VAR 0 8
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: PUSH
44795: LD_VAR 0 8
44799: PUSH
44800: LD_INT 2
44802: ARRAY
44803: PUSH
44804: LD_VAR 0 13
44808: PUSH
44809: LD_INT 2
44811: PLUS
44812: GREATER
44813: OR
44814: PUSH
44815: LD_VAR 0 8
44819: PUSH
44820: LD_INT 2
44822: ARRAY
44823: PUSH
44824: LD_VAR 0 13
44828: PUSH
44829: LD_INT 2
44831: MINUS
44832: LESS
44833: OR
44834: PUSH
44835: LD_VAR 0 8
44839: PUSH
44840: LD_INT 3
44842: ARRAY
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 8
44849: PUSH
44850: LD_INT 9
44852: PUSH
44853: LD_INT 10
44855: PUSH
44856: LD_INT 11
44858: PUSH
44859: LD_INT 12
44861: PUSH
44862: LD_INT 13
44864: PUSH
44865: LD_INT 16
44867: PUSH
44868: LD_INT 17
44870: PUSH
44871: LD_INT 18
44873: PUSH
44874: LD_INT 19
44876: PUSH
44877: LD_INT 20
44879: PUSH
44880: LD_INT 21
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: IN
44898: NOT
44899: OR
44900: PUSH
44901: LD_VAR 0 8
44905: PUSH
44906: LD_INT 5
44908: ARRAY
44909: NOT
44910: OR
44911: PUSH
44912: LD_VAR 0 8
44916: PUSH
44917: LD_INT 6
44919: ARRAY
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 7
44929: PUSH
44930: LD_INT 9
44932: PUSH
44933: LD_INT 10
44935: PUSH
44936: LD_INT 11
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: IN
44947: NOT
44948: OR
44949: IFFALSE 44955
// exit ;
44951: POP
44952: POP
44953: GO 45053
// end ;
44955: GO 44626
44957: POP
44958: POP
// side := GetSide ( depot ) ;
44959: LD_ADDR_VAR 0 9
44963: PUSH
44964: LD_VAR 0 1
44968: PPUSH
44969: CALL_OW 255
44973: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44974: LD_VAR 0 9
44978: PPUSH
44979: LD_VAR 0 3
44983: PPUSH
44984: LD_VAR 0 4
44988: PPUSH
44989: LD_INT 20
44991: PPUSH
44992: CALL 37707 0 4
44996: PUSH
44997: LD_INT 4
44999: ARRAY
45000: IFFALSE 45004
// exit ;
45002: GO 45053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45004: LD_VAR 0 2
45008: PUSH
45009: LD_INT 29
45011: PUSH
45012: LD_INT 30
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: IN
45019: PUSH
45020: LD_VAR 0 3
45024: PPUSH
45025: LD_VAR 0 4
45029: PPUSH
45030: LD_VAR 0 9
45034: PPUSH
45035: CALL_OW 440
45039: NOT
45040: AND
45041: IFFALSE 45045
// exit ;
45043: GO 45053
// result := true ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: LD_INT 1
45052: ST_TO_ADDR
// end ;
45053: LD_VAR 0 6
45057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
// result = [ ] ;
45118: LD_ADDR_VAR 0 7
45122: PUSH
45123: EMPTY
45124: ST_TO_ADDR
// temp_list = [ ] ;
45125: LD_ADDR_VAR 0 9
45129: PUSH
45130: EMPTY
45131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45132: LD_VAR 0 4
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 4
45151: PUSH
45152: LD_INT 5
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: IN
45163: NOT
45164: PUSH
45165: LD_VAR 0 1
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: IN
45180: PUSH
45181: LD_VAR 0 5
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: IN
45200: NOT
45201: AND
45202: OR
45203: IFFALSE 45207
// exit ;
45205: GO 63598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 6
45214: PUSH
45215: LD_INT 7
45217: PUSH
45218: LD_INT 8
45220: PUSH
45221: LD_INT 13
45223: PUSH
45224: LD_INT 12
45226: PUSH
45227: LD_INT 15
45229: PUSH
45230: LD_INT 11
45232: PUSH
45233: LD_INT 14
45235: PUSH
45236: LD_INT 10
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: IN
45250: IFFALSE 45260
// btype = b_lab ;
45252: LD_ADDR_VAR 0 1
45256: PUSH
45257: LD_INT 6
45259: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45260: LD_VAR 0 6
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: IN
45279: NOT
45280: PUSH
45281: LD_VAR 0 1
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 6
45300: PUSH
45301: LD_INT 36
45303: PUSH
45304: LD_INT 4
45306: PUSH
45307: LD_INT 5
45309: PUSH
45310: LD_INT 31
45312: PUSH
45313: LD_INT 32
45315: PUSH
45316: LD_INT 33
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: IN
45332: NOT
45333: PUSH
45334: LD_VAR 0 6
45338: PUSH
45339: LD_INT 1
45341: EQUAL
45342: AND
45343: OR
45344: PUSH
45345: LD_VAR 0 1
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: IN
45360: NOT
45361: PUSH
45362: LD_VAR 0 6
45366: PUSH
45367: LD_INT 2
45369: EQUAL
45370: AND
45371: OR
45372: IFFALSE 45382
// mode = 0 ;
45374: LD_ADDR_VAR 0 6
45378: PUSH
45379: LD_INT 0
45381: ST_TO_ADDR
// case mode of 0 :
45382: LD_VAR 0 6
45386: PUSH
45387: LD_INT 0
45389: DOUBLE
45390: EQUAL
45391: IFTRUE 45395
45393: GO 56848
45395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45396: LD_ADDR_VAR 0 11
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45589: LD_ADDR_VAR 0 12
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45785: LD_ADDR_VAR 0 13
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: NEG
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45984: LD_ADDR_VAR 0 14
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46180: LD_ADDR_VAR 0 15
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46373: LD_ADDR_VAR 0 16
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46566: LD_ADDR_VAR 0 17
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46796: LD_ADDR_VAR 0 18
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47026: LD_ADDR_VAR 0 19
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47256: LD_ADDR_VAR 0 20
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47486: LD_ADDR_VAR 0 21
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47716: LD_ADDR_VAR 0 22
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47946: LD_ADDR_VAR 0 23
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48226: LD_ADDR_VAR 0 24
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48502: LD_ADDR_VAR 0 25
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 3
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 3
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48776: LD_ADDR_VAR 0 26
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49052: LD_ADDR_VAR 0 27
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49332: LD_ADDR_VAR 0 28
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49614: LD_ADDR_VAR 0 29
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49893: LD_ADDR_VAR 0 30
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50171: LD_ADDR_VAR 0 31
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50449: LD_ADDR_VAR 0 32
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50727: LD_ADDR_VAR 0 33
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51006: LD_ADDR_VAR 0 34
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51286: LD_ADDR_VAR 0 35
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51398: LD_ADDR_VAR 0 36
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51510: LD_ADDR_VAR 0 37
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51622: LD_ADDR_VAR 0 38
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51734: LD_ADDR_VAR 0 39
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51846: LD_ADDR_VAR 0 40
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51958: LD_ADDR_VAR 0 41
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52308: LD_ADDR_VAR 0 42
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52658: LD_ADDR_VAR 0 43
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53006: LD_ADDR_VAR 0 44
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53356: LD_ADDR_VAR 0 45
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53706: LD_ADDR_VAR 0 46
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 3
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: NEG
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54054: LD_ADDR_VAR 0 47
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54205: LD_ADDR_VAR 0 48
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54352: LD_ADDR_VAR 0 49
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54496: LD_ADDR_VAR 0 50
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54640: LD_ADDR_VAR 0 51
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54787: LD_ADDR_VAR 0 52
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54938: LD_ADDR_VAR 0 53
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55168: LD_ADDR_VAR 0 54
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55398: LD_ADDR_VAR 0 55
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55628: LD_ADDR_VAR 0 56
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55858: LD_ADDR_VAR 0 57
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56088: LD_ADDR_VAR 0 58
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56318: LD_ADDR_VAR 0 59
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56406: LD_ADDR_VAR 0 60
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56494: LD_ADDR_VAR 0 61
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56582: LD_ADDR_VAR 0 62
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56670: LD_ADDR_VAR 0 63
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56758: LD_ADDR_VAR 0 64
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// end ; 1 :
56846: GO 62743
56848: LD_INT 1
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56856
56854: GO 59479
56856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56857: LD_ADDR_VAR 0 11
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56901: LD_ADDR_VAR 0 12
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56942: LD_ADDR_VAR 0 13
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56982: LD_ADDR_VAR 0 14
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 15
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57067: LD_ADDR_VAR 0 16
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 3
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57113: LD_ADDR_VAR 0 17
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57157: LD_ADDR_VAR 0 18
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57198: LD_ADDR_VAR 0 19
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57238: LD_ADDR_VAR 0 20
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57279: LD_ADDR_VAR 0 21
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57323: LD_ADDR_VAR 0 22
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57369: LD_ADDR_VAR 0 23
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57413: LD_ADDR_VAR 0 24
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57454: LD_ADDR_VAR 0 25
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 4
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57494: LD_ADDR_VAR 0 26
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57535: LD_ADDR_VAR 0 27
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57579: LD_ADDR_VAR 0 28
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: NEG
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57625: LD_ADDR_VAR 0 29
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 4
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 4
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 5
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 5
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 4
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 6
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 6
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 5
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57780: LD_ADDR_VAR 0 30
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 4
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 5
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 5
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 6
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 6
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57923: LD_ADDR_VAR 0 31
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 4
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: LD_INT 4
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 4
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 5
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: LD_INT 5
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 6
58020: PUSH
58021: LD_INT 5
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 6
58030: PUSH
58031: LD_INT 6
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 5
58040: PUSH
58041: LD_INT 6
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58062: LD_ADDR_VAR 0 32
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 4
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 5
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 6
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 6
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58205: LD_ADDR_VAR 0 33
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 4
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 5
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 5
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 6
58325: NEG
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 6
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58360: LD_ADDR_VAR 0 34
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 4
58415: NEG
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 4
58427: NEG
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 4
58439: NEG
58440: PUSH
58441: LD_INT 5
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 5
58451: NEG
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 5
58463: NEG
58464: PUSH
58465: LD_INT 5
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: LD_INT 6
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 6
58487: NEG
58488: PUSH
58489: LD_INT 5
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 6
58499: NEG
58500: PUSH
58501: LD_INT 6
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58523: LD_ADDR_VAR 0 41
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58567: LD_ADDR_VAR 0 42
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58608: LD_ADDR_VAR 0 43
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58648: LD_ADDR_VAR 0 44
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58689: LD_ADDR_VAR 0 45
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58733: LD_ADDR_VAR 0 46
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58779: LD_ADDR_VAR 0 47
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 3
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58812: LD_ADDR_VAR 0 48
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58843: LD_ADDR_VAR 0 49
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58872: LD_ADDR_VAR 0 50
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58901: LD_ADDR_VAR 0 51
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58932: LD_ADDR_VAR 0 52
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58965: LD_ADDR_VAR 0 53
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59009: LD_ADDR_VAR 0 54
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59050: LD_ADDR_VAR 0 55
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59090: LD_ADDR_VAR 0 56
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59131: LD_ADDR_VAR 0 57
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59175: LD_ADDR_VAR 0 58
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59221: LD_ADDR_VAR 0 59
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59265: LD_ADDR_VAR 0 60
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59306: LD_ADDR_VAR 0 61
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59346: LD_ADDR_VAR 0 62
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59387: LD_ADDR_VAR 0 63
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59431: LD_ADDR_VAR 0 64
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// end ; 2 :
59477: GO 62743
59479: LD_INT 2
59481: DOUBLE
59482: EQUAL
59483: IFTRUE 59487
59485: GO 62742
59487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59488: LD_ADDR_VAR 0 29
59492: PUSH
59493: LD_INT 4
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 4
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 4
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 5
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 5
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 4
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 4
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 4
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 4
59873: NEG
59874: PUSH
59875: LD_INT 4
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 4
59885: NEG
59886: PUSH
59887: LD_INT 5
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PUSH
59935: LD_INT 4
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 5
59945: NEG
59946: PUSH
59947: LD_INT 5
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: LD_INT 5
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 5
59969: NEG
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60026: LD_ADDR_VAR 0 30
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: LD_INT 4
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 5
60063: PUSH
60064: LD_INT 5
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: LD_INT 4
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: PUSH
60114: LD_INT 5
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 5
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 5
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: LD_INT 4
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 4
60390: NEG
60391: PUSH
60392: LD_INT 4
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 4
60414: NEG
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 4
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 4
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 5
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 5
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60573: LD_ADDR_VAR 0 31
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 4
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 4
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 5
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 5
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 5
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: NEG
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 4
60775: NEG
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: LD_INT 5
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 5
60835: NEG
60836: PUSH
60837: LD_INT 4
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 5
60847: NEG
60848: PUSH
60849: LD_INT 5
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: LD_INT 5
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 5
60871: NEG
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 4
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 5
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 5
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61123: LD_ADDR_VAR 0 32
61127: PUSH
61128: LD_INT 4
61130: NEG
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 4
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 5
61186: NEG
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 5
61209: NEG
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: LD_INT 4
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 4
61292: NEG
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 4
61304: NEG
61305: PUSH
61306: LD_INT 4
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 4
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: NEG
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 4
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 5
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: LD_INT 4
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 5
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 3
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 5
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 4
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 5
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: PUSH
61576: LD_INT 5
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: LD_INT 4
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 5
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61670: LD_ADDR_VAR 0 33
61674: PUSH
61675: LD_INT 4
61677: NEG
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: LD_INT 5
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 5
61737: NEG
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 5
61749: NEG
61750: PUSH
61751: LD_INT 5
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 5
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 5
61773: NEG
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 4
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 4
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 5
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: LD_INT 4
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: LD_INT 4
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 4
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 4
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 5
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 5
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 4
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 3
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62208: LD_ADDR_VAR 0 34
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 4
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 5
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 4
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 3
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 4
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 5
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 5
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 4
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 4
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 4
62410: PUSH
62411: LD_INT 4
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 5
62430: PUSH
62431: LD_INT 4
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 5
62440: PUSH
62441: LD_INT 5
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 4
62450: PUSH
62451: LD_INT 5
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 4
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 5
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: LD_INT 5
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 4
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 4
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 4
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 4
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 4
62638: NEG
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 5
62649: NEG
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 5
62660: NEG
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 5
62672: NEG
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: ST_TO_ADDR
// end ; end ;
62740: GO 62743
62742: POP
// case btype of b_depot , b_warehouse :
62743: LD_VAR 0 1
62747: PUSH
62748: LD_INT 0
62750: DOUBLE
62751: EQUAL
62752: IFTRUE 62762
62754: LD_INT 1
62756: DOUBLE
62757: EQUAL
62758: IFTRUE 62762
62760: GO 62963
62762: POP
// case nation of nation_american :
62763: LD_VAR 0 5
62767: PUSH
62768: LD_INT 1
62770: DOUBLE
62771: EQUAL
62772: IFTRUE 62776
62774: GO 62832
62776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62777: LD_ADDR_VAR 0 9
62781: PUSH
62782: LD_VAR 0 11
62786: PUSH
62787: LD_VAR 0 12
62791: PUSH
62792: LD_VAR 0 13
62796: PUSH
62797: LD_VAR 0 14
62801: PUSH
62802: LD_VAR 0 15
62806: PUSH
62807: LD_VAR 0 16
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: LD_VAR 0 4
62824: PUSH
62825: LD_INT 1
62827: PLUS
62828: ARRAY
62829: ST_TO_ADDR
62830: GO 62961
62832: LD_INT 2
62834: DOUBLE
62835: EQUAL
62836: IFTRUE 62840
62838: GO 62896
62840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62841: LD_ADDR_VAR 0 9
62845: PUSH
62846: LD_VAR 0 17
62850: PUSH
62851: LD_VAR 0 18
62855: PUSH
62856: LD_VAR 0 19
62860: PUSH
62861: LD_VAR 0 20
62865: PUSH
62866: LD_VAR 0 21
62870: PUSH
62871: LD_VAR 0 22
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_VAR 0 4
62888: PUSH
62889: LD_INT 1
62891: PLUS
62892: ARRAY
62893: ST_TO_ADDR
62894: GO 62961
62896: LD_INT 3
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62904
62902: GO 62960
62904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62905: LD_ADDR_VAR 0 9
62909: PUSH
62910: LD_VAR 0 23
62914: PUSH
62915: LD_VAR 0 24
62919: PUSH
62920: LD_VAR 0 25
62924: PUSH
62925: LD_VAR 0 26
62929: PUSH
62930: LD_VAR 0 27
62934: PUSH
62935: LD_VAR 0 28
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: ARRAY
62957: ST_TO_ADDR
62958: GO 62961
62960: POP
62961: GO 63516
62963: LD_INT 2
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62977
62969: LD_INT 3
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62977
62975: GO 63033
62977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62978: LD_ADDR_VAR 0 9
62982: PUSH
62983: LD_VAR 0 29
62987: PUSH
62988: LD_VAR 0 30
62992: PUSH
62993: LD_VAR 0 31
62997: PUSH
62998: LD_VAR 0 32
63002: PUSH
63003: LD_VAR 0 33
63007: PUSH
63008: LD_VAR 0 34
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: PUSH
63021: LD_VAR 0 4
63025: PUSH
63026: LD_INT 1
63028: PLUS
63029: ARRAY
63030: ST_TO_ADDR
63031: GO 63516
63033: LD_INT 16
63035: DOUBLE
63036: EQUAL
63037: IFTRUE 63095
63039: LD_INT 17
63041: DOUBLE
63042: EQUAL
63043: IFTRUE 63095
63045: LD_INT 18
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63095
63051: LD_INT 19
63053: DOUBLE
63054: EQUAL
63055: IFTRUE 63095
63057: LD_INT 22
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63095
63063: LD_INT 20
63065: DOUBLE
63066: EQUAL
63067: IFTRUE 63095
63069: LD_INT 21
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63095
63075: LD_INT 23
63077: DOUBLE
63078: EQUAL
63079: IFTRUE 63095
63081: LD_INT 24
63083: DOUBLE
63084: EQUAL
63085: IFTRUE 63095
63087: LD_INT 25
63089: DOUBLE
63090: EQUAL
63091: IFTRUE 63095
63093: GO 63151
63095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63096: LD_ADDR_VAR 0 9
63100: PUSH
63101: LD_VAR 0 35
63105: PUSH
63106: LD_VAR 0 36
63110: PUSH
63111: LD_VAR 0 37
63115: PUSH
63116: LD_VAR 0 38
63120: PUSH
63121: LD_VAR 0 39
63125: PUSH
63126: LD_VAR 0 40
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: PUSH
63139: LD_VAR 0 4
63143: PUSH
63144: LD_INT 1
63146: PLUS
63147: ARRAY
63148: ST_TO_ADDR
63149: GO 63516
63151: LD_INT 6
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63207
63157: LD_INT 7
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63207
63163: LD_INT 8
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63207
63169: LD_INT 13
63171: DOUBLE
63172: EQUAL
63173: IFTRUE 63207
63175: LD_INT 12
63177: DOUBLE
63178: EQUAL
63179: IFTRUE 63207
63181: LD_INT 15
63183: DOUBLE
63184: EQUAL
63185: IFTRUE 63207
63187: LD_INT 11
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63207
63193: LD_INT 14
63195: DOUBLE
63196: EQUAL
63197: IFTRUE 63207
63199: LD_INT 10
63201: DOUBLE
63202: EQUAL
63203: IFTRUE 63207
63205: GO 63263
63207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63208: LD_ADDR_VAR 0 9
63212: PUSH
63213: LD_VAR 0 41
63217: PUSH
63218: LD_VAR 0 42
63222: PUSH
63223: LD_VAR 0 43
63227: PUSH
63228: LD_VAR 0 44
63232: PUSH
63233: LD_VAR 0 45
63237: PUSH
63238: LD_VAR 0 46
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: PUSH
63251: LD_VAR 0 4
63255: PUSH
63256: LD_INT 1
63258: PLUS
63259: ARRAY
63260: ST_TO_ADDR
63261: GO 63516
63263: LD_INT 36
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63271
63269: GO 63327
63271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63272: LD_ADDR_VAR 0 9
63276: PUSH
63277: LD_VAR 0 47
63281: PUSH
63282: LD_VAR 0 48
63286: PUSH
63287: LD_VAR 0 49
63291: PUSH
63292: LD_VAR 0 50
63296: PUSH
63297: LD_VAR 0 51
63301: PUSH
63302: LD_VAR 0 52
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: PUSH
63315: LD_VAR 0 4
63319: PUSH
63320: LD_INT 1
63322: PLUS
63323: ARRAY
63324: ST_TO_ADDR
63325: GO 63516
63327: LD_INT 4
63329: DOUBLE
63330: EQUAL
63331: IFTRUE 63353
63333: LD_INT 5
63335: DOUBLE
63336: EQUAL
63337: IFTRUE 63353
63339: LD_INT 34
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63353
63345: LD_INT 37
63347: DOUBLE
63348: EQUAL
63349: IFTRUE 63353
63351: GO 63409
63353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63354: LD_ADDR_VAR 0 9
63358: PUSH
63359: LD_VAR 0 53
63363: PUSH
63364: LD_VAR 0 54
63368: PUSH
63369: LD_VAR 0 55
63373: PUSH
63374: LD_VAR 0 56
63378: PUSH
63379: LD_VAR 0 57
63383: PUSH
63384: LD_VAR 0 58
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: PUSH
63397: LD_VAR 0 4
63401: PUSH
63402: LD_INT 1
63404: PLUS
63405: ARRAY
63406: ST_TO_ADDR
63407: GO 63516
63409: LD_INT 31
63411: DOUBLE
63412: EQUAL
63413: IFTRUE 63459
63415: LD_INT 32
63417: DOUBLE
63418: EQUAL
63419: IFTRUE 63459
63421: LD_INT 33
63423: DOUBLE
63424: EQUAL
63425: IFTRUE 63459
63427: LD_INT 27
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63459
63433: LD_INT 26
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63459
63439: LD_INT 28
63441: DOUBLE
63442: EQUAL
63443: IFTRUE 63459
63445: LD_INT 29
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63459
63451: LD_INT 30
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63459
63457: GO 63515
63459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63460: LD_ADDR_VAR 0 9
63464: PUSH
63465: LD_VAR 0 59
63469: PUSH
63470: LD_VAR 0 60
63474: PUSH
63475: LD_VAR 0 61
63479: PUSH
63480: LD_VAR 0 62
63484: PUSH
63485: LD_VAR 0 63
63489: PUSH
63490: LD_VAR 0 64
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: PUSH
63503: LD_VAR 0 4
63507: PUSH
63508: LD_INT 1
63510: PLUS
63511: ARRAY
63512: ST_TO_ADDR
63513: GO 63516
63515: POP
// temp_list2 = [ ] ;
63516: LD_ADDR_VAR 0 10
63520: PUSH
63521: EMPTY
63522: ST_TO_ADDR
// for i in temp_list do
63523: LD_ADDR_VAR 0 8
63527: PUSH
63528: LD_VAR 0 9
63532: PUSH
63533: FOR_IN
63534: IFFALSE 63586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63536: LD_ADDR_VAR 0 10
63540: PUSH
63541: LD_VAR 0 10
63545: PUSH
63546: LD_VAR 0 8
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PUSH
63555: LD_VAR 0 2
63559: PLUS
63560: PUSH
63561: LD_VAR 0 8
63565: PUSH
63566: LD_INT 2
63568: ARRAY
63569: PUSH
63570: LD_VAR 0 3
63574: PLUS
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: EMPTY
63581: LIST
63582: ADD
63583: ST_TO_ADDR
63584: GO 63533
63586: POP
63587: POP
// result = temp_list2 ;
63588: LD_ADDR_VAR 0 7
63592: PUSH
63593: LD_VAR 0 10
63597: ST_TO_ADDR
// end ;
63598: LD_VAR 0 7
63602: RET
// export function EnemyInRange ( unit , dist ) ; begin
63603: LD_INT 0
63605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63606: LD_ADDR_VAR 0 3
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 255
63620: PPUSH
63621: LD_VAR 0 1
63625: PPUSH
63626: CALL_OW 250
63630: PPUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 251
63640: PPUSH
63641: LD_VAR 0 2
63645: PPUSH
63646: CALL 37707 0 4
63650: PUSH
63651: LD_INT 4
63653: ARRAY
63654: ST_TO_ADDR
// end ;
63655: LD_VAR 0 3
63659: RET
// export function PlayerSeeMe ( unit ) ; begin
63660: LD_INT 0
63662: PPUSH
// result := See ( your_side , unit ) ;
63663: LD_ADDR_VAR 0 2
63667: PUSH
63668: LD_OWVAR 2
63672: PPUSH
63673: LD_VAR 0 1
63677: PPUSH
63678: CALL_OW 292
63682: ST_TO_ADDR
// end ;
63683: LD_VAR 0 2
63687: RET
// export function ReverseDir ( unit ) ; begin
63688: LD_INT 0
63690: PPUSH
// if not unit then
63691: LD_VAR 0 1
63695: NOT
63696: IFFALSE 63700
// exit ;
63698: GO 63723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63700: LD_ADDR_VAR 0 2
63704: PUSH
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 254
63714: PUSH
63715: LD_INT 3
63717: PLUS
63718: PUSH
63719: LD_INT 6
63721: MOD
63722: ST_TO_ADDR
// end ;
63723: LD_VAR 0 2
63727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
// if not hexes then
63735: LD_VAR 0 2
63739: NOT
63740: IFFALSE 63744
// exit ;
63742: GO 63892
// dist := 9999 ;
63744: LD_ADDR_VAR 0 5
63748: PUSH
63749: LD_INT 9999
63751: ST_TO_ADDR
// for i = 1 to hexes do
63752: LD_ADDR_VAR 0 4
63756: PUSH
63757: DOUBLE
63758: LD_INT 1
63760: DEC
63761: ST_TO_ADDR
63762: LD_VAR 0 2
63766: PUSH
63767: FOR_TO
63768: IFFALSE 63880
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63770: LD_VAR 0 1
63774: PPUSH
63775: LD_VAR 0 2
63779: PUSH
63780: LD_VAR 0 4
63784: ARRAY
63785: PUSH
63786: LD_INT 1
63788: ARRAY
63789: PPUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_VAR 0 4
63799: ARRAY
63800: PUSH
63801: LD_INT 2
63803: ARRAY
63804: PPUSH
63805: CALL_OW 297
63809: PUSH
63810: LD_VAR 0 5
63814: LESS
63815: IFFALSE 63878
// begin hex := hexes [ i ] ;
63817: LD_ADDR_VAR 0 7
63821: PUSH
63822: LD_VAR 0 2
63826: PUSH
63827: LD_VAR 0 4
63831: ARRAY
63832: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63833: LD_ADDR_VAR 0 5
63837: PUSH
63838: LD_VAR 0 1
63842: PPUSH
63843: LD_VAR 0 2
63847: PUSH
63848: LD_VAR 0 4
63852: ARRAY
63853: PUSH
63854: LD_INT 1
63856: ARRAY
63857: PPUSH
63858: LD_VAR 0 2
63862: PUSH
63863: LD_VAR 0 4
63867: ARRAY
63868: PUSH
63869: LD_INT 2
63871: ARRAY
63872: PPUSH
63873: CALL_OW 297
63877: ST_TO_ADDR
// end ; end ;
63878: GO 63767
63880: POP
63881: POP
// result := hex ;
63882: LD_ADDR_VAR 0 3
63886: PUSH
63887: LD_VAR 0 7
63891: ST_TO_ADDR
// end ;
63892: LD_VAR 0 3
63896: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63897: LD_INT 0
63899: PPUSH
63900: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63901: LD_VAR 0 1
63905: NOT
63906: PUSH
63907: LD_VAR 0 1
63911: PUSH
63912: LD_INT 21
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 23
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PPUSH
63936: CALL_OW 69
63940: IN
63941: NOT
63942: OR
63943: IFFALSE 63947
// exit ;
63945: GO 63994
// for i = 1 to 3 do
63947: LD_ADDR_VAR 0 3
63951: PUSH
63952: DOUBLE
63953: LD_INT 1
63955: DEC
63956: ST_TO_ADDR
63957: LD_INT 3
63959: PUSH
63960: FOR_TO
63961: IFFALSE 63992
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 250
63972: PPUSH
63973: LD_VAR 0 1
63977: PPUSH
63978: CALL_OW 251
63982: PPUSH
63983: LD_INT 1
63985: PPUSH
63986: CALL_OW 453
63990: GO 63960
63992: POP
63993: POP
// end ;
63994: LD_VAR 0 2
63998: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63999: LD_INT 0
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
64005: PPUSH
64006: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64007: LD_VAR 0 1
64011: NOT
64012: PUSH
64013: LD_VAR 0 2
64017: NOT
64018: OR
64019: PUSH
64020: LD_VAR 0 1
64024: PPUSH
64025: CALL_OW 314
64029: OR
64030: IFFALSE 64034
// exit ;
64032: GO 64475
// x := GetX ( enemy_unit ) ;
64034: LD_ADDR_VAR 0 7
64038: PUSH
64039: LD_VAR 0 2
64043: PPUSH
64044: CALL_OW 250
64048: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64049: LD_ADDR_VAR 0 8
64053: PUSH
64054: LD_VAR 0 2
64058: PPUSH
64059: CALL_OW 251
64063: ST_TO_ADDR
// if not x or not y then
64064: LD_VAR 0 7
64068: NOT
64069: PUSH
64070: LD_VAR 0 8
64074: NOT
64075: OR
64076: IFFALSE 64080
// exit ;
64078: GO 64475
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64080: LD_ADDR_VAR 0 6
64084: PUSH
64085: LD_VAR 0 7
64089: PPUSH
64090: LD_INT 0
64092: PPUSH
64093: LD_INT 4
64095: PPUSH
64096: CALL_OW 272
64100: PUSH
64101: LD_VAR 0 8
64105: PPUSH
64106: LD_INT 0
64108: PPUSH
64109: LD_INT 4
64111: PPUSH
64112: CALL_OW 273
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_VAR 0 7
64125: PPUSH
64126: LD_INT 1
64128: PPUSH
64129: LD_INT 4
64131: PPUSH
64132: CALL_OW 272
64136: PUSH
64137: LD_VAR 0 8
64141: PPUSH
64142: LD_INT 1
64144: PPUSH
64145: LD_INT 4
64147: PPUSH
64148: CALL_OW 273
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_VAR 0 7
64161: PPUSH
64162: LD_INT 2
64164: PPUSH
64165: LD_INT 4
64167: PPUSH
64168: CALL_OW 272
64172: PUSH
64173: LD_VAR 0 8
64177: PPUSH
64178: LD_INT 2
64180: PPUSH
64181: LD_INT 4
64183: PPUSH
64184: CALL_OW 273
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_VAR 0 7
64197: PPUSH
64198: LD_INT 3
64200: PPUSH
64201: LD_INT 4
64203: PPUSH
64204: CALL_OW 272
64208: PUSH
64209: LD_VAR 0 8
64213: PPUSH
64214: LD_INT 3
64216: PPUSH
64217: LD_INT 4
64219: PPUSH
64220: CALL_OW 273
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_VAR 0 7
64233: PPUSH
64234: LD_INT 4
64236: PPUSH
64237: LD_INT 4
64239: PPUSH
64240: CALL_OW 272
64244: PUSH
64245: LD_VAR 0 8
64249: PPUSH
64250: LD_INT 4
64252: PPUSH
64253: LD_INT 4
64255: PPUSH
64256: CALL_OW 273
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_VAR 0 7
64269: PPUSH
64270: LD_INT 5
64272: PPUSH
64273: LD_INT 4
64275: PPUSH
64276: CALL_OW 272
64280: PUSH
64281: LD_VAR 0 8
64285: PPUSH
64286: LD_INT 5
64288: PPUSH
64289: LD_INT 4
64291: PPUSH
64292: CALL_OW 273
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// for i = tmp downto 1 do
64309: LD_ADDR_VAR 0 4
64313: PUSH
64314: DOUBLE
64315: LD_VAR 0 6
64319: INC
64320: ST_TO_ADDR
64321: LD_INT 1
64323: PUSH
64324: FOR_DOWNTO
64325: IFFALSE 64426
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64327: LD_VAR 0 6
64331: PUSH
64332: LD_VAR 0 4
64336: ARRAY
64337: PUSH
64338: LD_INT 1
64340: ARRAY
64341: PPUSH
64342: LD_VAR 0 6
64346: PUSH
64347: LD_VAR 0 4
64351: ARRAY
64352: PUSH
64353: LD_INT 2
64355: ARRAY
64356: PPUSH
64357: CALL_OW 488
64361: NOT
64362: PUSH
64363: LD_VAR 0 6
64367: PUSH
64368: LD_VAR 0 4
64372: ARRAY
64373: PUSH
64374: LD_INT 1
64376: ARRAY
64377: PPUSH
64378: LD_VAR 0 6
64382: PUSH
64383: LD_VAR 0 4
64387: ARRAY
64388: PUSH
64389: LD_INT 2
64391: ARRAY
64392: PPUSH
64393: CALL_OW 428
64397: PUSH
64398: LD_INT 0
64400: NONEQUAL
64401: OR
64402: IFFALSE 64424
// tmp := Delete ( tmp , i ) ;
64404: LD_ADDR_VAR 0 6
64408: PUSH
64409: LD_VAR 0 6
64413: PPUSH
64414: LD_VAR 0 4
64418: PPUSH
64419: CALL_OW 3
64423: ST_TO_ADDR
64424: GO 64324
64426: POP
64427: POP
// j := GetClosestHex ( unit , tmp ) ;
64428: LD_ADDR_VAR 0 5
64432: PUSH
64433: LD_VAR 0 1
64437: PPUSH
64438: LD_VAR 0 6
64442: PPUSH
64443: CALL 63728 0 2
64447: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64448: LD_VAR 0 1
64452: PPUSH
64453: LD_VAR 0 5
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: PPUSH
64462: LD_VAR 0 5
64466: PUSH
64467: LD_INT 2
64469: ARRAY
64470: PPUSH
64471: CALL_OW 111
// end ;
64475: LD_VAR 0 3
64479: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64480: LD_INT 0
64482: PPUSH
64483: PPUSH
64484: PPUSH
// uc_side = 0 ;
64485: LD_ADDR_OWVAR 20
64489: PUSH
64490: LD_INT 0
64492: ST_TO_ADDR
// uc_nation = 0 ;
64493: LD_ADDR_OWVAR 21
64497: PUSH
64498: LD_INT 0
64500: ST_TO_ADDR
// InitHc_All ( ) ;
64501: CALL_OW 584
// InitVc ;
64505: CALL_OW 20
// if mastodonts then
64509: LD_VAR 0 6
64513: IFFALSE 64580
// for i = 1 to mastodonts do
64515: LD_ADDR_VAR 0 11
64519: PUSH
64520: DOUBLE
64521: LD_INT 1
64523: DEC
64524: ST_TO_ADDR
64525: LD_VAR 0 6
64529: PUSH
64530: FOR_TO
64531: IFFALSE 64578
// begin vc_chassis := 31 ;
64533: LD_ADDR_OWVAR 37
64537: PUSH
64538: LD_INT 31
64540: ST_TO_ADDR
// vc_control := control_rider ;
64541: LD_ADDR_OWVAR 38
64545: PUSH
64546: LD_INT 4
64548: ST_TO_ADDR
// animal := CreateVehicle ;
64549: LD_ADDR_VAR 0 12
64553: PUSH
64554: CALL_OW 45
64558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64559: LD_VAR 0 12
64563: PPUSH
64564: LD_VAR 0 8
64568: PPUSH
64569: LD_INT 0
64571: PPUSH
64572: CALL 66768 0 3
// end ;
64576: GO 64530
64578: POP
64579: POP
// if horses then
64580: LD_VAR 0 5
64584: IFFALSE 64651
// for i = 1 to horses do
64586: LD_ADDR_VAR 0 11
64590: PUSH
64591: DOUBLE
64592: LD_INT 1
64594: DEC
64595: ST_TO_ADDR
64596: LD_VAR 0 5
64600: PUSH
64601: FOR_TO
64602: IFFALSE 64649
// begin hc_class := 21 ;
64604: LD_ADDR_OWVAR 28
64608: PUSH
64609: LD_INT 21
64611: ST_TO_ADDR
// hc_gallery :=  ;
64612: LD_ADDR_OWVAR 33
64616: PUSH
64617: LD_STRING 
64619: ST_TO_ADDR
// animal := CreateHuman ;
64620: LD_ADDR_VAR 0 12
64624: PUSH
64625: CALL_OW 44
64629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64630: LD_VAR 0 12
64634: PPUSH
64635: LD_VAR 0 8
64639: PPUSH
64640: LD_INT 0
64642: PPUSH
64643: CALL 66768 0 3
// end ;
64647: GO 64601
64649: POP
64650: POP
// if birds then
64651: LD_VAR 0 1
64655: IFFALSE 64722
// for i = 1 to birds do
64657: LD_ADDR_VAR 0 11
64661: PUSH
64662: DOUBLE
64663: LD_INT 1
64665: DEC
64666: ST_TO_ADDR
64667: LD_VAR 0 1
64671: PUSH
64672: FOR_TO
64673: IFFALSE 64720
// begin hc_class = 18 ;
64675: LD_ADDR_OWVAR 28
64679: PUSH
64680: LD_INT 18
64682: ST_TO_ADDR
// hc_gallery =  ;
64683: LD_ADDR_OWVAR 33
64687: PUSH
64688: LD_STRING 
64690: ST_TO_ADDR
// animal := CreateHuman ;
64691: LD_ADDR_VAR 0 12
64695: PUSH
64696: CALL_OW 44
64700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64701: LD_VAR 0 12
64705: PPUSH
64706: LD_VAR 0 8
64710: PPUSH
64711: LD_INT 0
64713: PPUSH
64714: CALL 66768 0 3
// end ;
64718: GO 64672
64720: POP
64721: POP
// if tigers then
64722: LD_VAR 0 2
64726: IFFALSE 64810
// for i = 1 to tigers do
64728: LD_ADDR_VAR 0 11
64732: PUSH
64733: DOUBLE
64734: LD_INT 1
64736: DEC
64737: ST_TO_ADDR
64738: LD_VAR 0 2
64742: PUSH
64743: FOR_TO
64744: IFFALSE 64808
// begin hc_class = class_tiger ;
64746: LD_ADDR_OWVAR 28
64750: PUSH
64751: LD_INT 14
64753: ST_TO_ADDR
// hc_gallery =  ;
64754: LD_ADDR_OWVAR 33
64758: PUSH
64759: LD_STRING 
64761: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64762: LD_ADDR_OWVAR 35
64766: PUSH
64767: LD_INT 7
64769: NEG
64770: PPUSH
64771: LD_INT 7
64773: PPUSH
64774: CALL_OW 12
64778: ST_TO_ADDR
// animal := CreateHuman ;
64779: LD_ADDR_VAR 0 12
64783: PUSH
64784: CALL_OW 44
64788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64789: LD_VAR 0 12
64793: PPUSH
64794: LD_VAR 0 8
64798: PPUSH
64799: LD_INT 0
64801: PPUSH
64802: CALL 66768 0 3
// end ;
64806: GO 64743
64808: POP
64809: POP
// if apemans then
64810: LD_VAR 0 3
64814: IFFALSE 64937
// for i = 1 to apemans do
64816: LD_ADDR_VAR 0 11
64820: PUSH
64821: DOUBLE
64822: LD_INT 1
64824: DEC
64825: ST_TO_ADDR
64826: LD_VAR 0 3
64830: PUSH
64831: FOR_TO
64832: IFFALSE 64935
// begin hc_class = class_apeman ;
64834: LD_ADDR_OWVAR 28
64838: PUSH
64839: LD_INT 12
64841: ST_TO_ADDR
// hc_gallery =  ;
64842: LD_ADDR_OWVAR 33
64846: PUSH
64847: LD_STRING 
64849: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64850: LD_ADDR_OWVAR 35
64854: PUSH
64855: LD_INT 5
64857: NEG
64858: PPUSH
64859: LD_INT 5
64861: PPUSH
64862: CALL_OW 12
64866: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64867: LD_ADDR_OWVAR 31
64871: PUSH
64872: LD_INT 1
64874: PPUSH
64875: LD_INT 3
64877: PPUSH
64878: CALL_OW 12
64882: PUSH
64883: LD_INT 1
64885: PPUSH
64886: LD_INT 3
64888: PPUSH
64889: CALL_OW 12
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// animal := CreateHuman ;
64906: LD_ADDR_VAR 0 12
64910: PUSH
64911: CALL_OW 44
64915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64916: LD_VAR 0 12
64920: PPUSH
64921: LD_VAR 0 8
64925: PPUSH
64926: LD_INT 0
64928: PPUSH
64929: CALL 66768 0 3
// end ;
64933: GO 64831
64935: POP
64936: POP
// if enchidnas then
64937: LD_VAR 0 4
64941: IFFALSE 65008
// for i = 1 to enchidnas do
64943: LD_ADDR_VAR 0 11
64947: PUSH
64948: DOUBLE
64949: LD_INT 1
64951: DEC
64952: ST_TO_ADDR
64953: LD_VAR 0 4
64957: PUSH
64958: FOR_TO
64959: IFFALSE 65006
// begin hc_class = 13 ;
64961: LD_ADDR_OWVAR 28
64965: PUSH
64966: LD_INT 13
64968: ST_TO_ADDR
// hc_gallery =  ;
64969: LD_ADDR_OWVAR 33
64973: PUSH
64974: LD_STRING 
64976: ST_TO_ADDR
// animal := CreateHuman ;
64977: LD_ADDR_VAR 0 12
64981: PUSH
64982: CALL_OW 44
64986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64987: LD_VAR 0 12
64991: PPUSH
64992: LD_VAR 0 8
64996: PPUSH
64997: LD_INT 0
64999: PPUSH
65000: CALL 66768 0 3
// end ;
65004: GO 64958
65006: POP
65007: POP
// if fishes then
65008: LD_VAR 0 7
65012: IFFALSE 65079
// for i = 1 to fishes do
65014: LD_ADDR_VAR 0 11
65018: PUSH
65019: DOUBLE
65020: LD_INT 1
65022: DEC
65023: ST_TO_ADDR
65024: LD_VAR 0 7
65028: PUSH
65029: FOR_TO
65030: IFFALSE 65077
// begin hc_class = 20 ;
65032: LD_ADDR_OWVAR 28
65036: PUSH
65037: LD_INT 20
65039: ST_TO_ADDR
// hc_gallery =  ;
65040: LD_ADDR_OWVAR 33
65044: PUSH
65045: LD_STRING 
65047: ST_TO_ADDR
// animal := CreateHuman ;
65048: LD_ADDR_VAR 0 12
65052: PUSH
65053: CALL_OW 44
65057: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65058: LD_VAR 0 12
65062: PPUSH
65063: LD_VAR 0 9
65067: PPUSH
65068: LD_INT 0
65070: PPUSH
65071: CALL 66768 0 3
// end ;
65075: GO 65029
65077: POP
65078: POP
// end ;
65079: LD_VAR 0 10
65083: RET
// export function WantHeal ( sci , unit ) ; begin
65084: LD_INT 0
65086: PPUSH
// if GetTaskList ( sci ) > 0 then
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 437
65096: PUSH
65097: LD_INT 0
65099: GREATER
65100: IFFALSE 65170
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65102: LD_VAR 0 1
65106: PPUSH
65107: CALL_OW 437
65111: PUSH
65112: LD_INT 1
65114: ARRAY
65115: PUSH
65116: LD_INT 1
65118: ARRAY
65119: PUSH
65120: LD_STRING l
65122: EQUAL
65123: PUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: CALL_OW 437
65133: PUSH
65134: LD_INT 1
65136: ARRAY
65137: PUSH
65138: LD_INT 4
65140: ARRAY
65141: PUSH
65142: LD_VAR 0 2
65146: EQUAL
65147: AND
65148: IFFALSE 65160
// result := true else
65150: LD_ADDR_VAR 0 3
65154: PUSH
65155: LD_INT 1
65157: ST_TO_ADDR
65158: GO 65168
// result := false ;
65160: LD_ADDR_VAR 0 3
65164: PUSH
65165: LD_INT 0
65167: ST_TO_ADDR
// end else
65168: GO 65178
// result := false ;
65170: LD_ADDR_VAR 0 3
65174: PUSH
65175: LD_INT 0
65177: ST_TO_ADDR
// end ;
65178: LD_VAR 0 3
65182: RET
// export function HealTarget ( sci ) ; begin
65183: LD_INT 0
65185: PPUSH
// if not sci then
65186: LD_VAR 0 1
65190: NOT
65191: IFFALSE 65195
// exit ;
65193: GO 65260
// result := 0 ;
65195: LD_ADDR_VAR 0 2
65199: PUSH
65200: LD_INT 0
65202: ST_TO_ADDR
// if GetTaskList ( sci ) then
65203: LD_VAR 0 1
65207: PPUSH
65208: CALL_OW 437
65212: IFFALSE 65260
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65214: LD_VAR 0 1
65218: PPUSH
65219: CALL_OW 437
65223: PUSH
65224: LD_INT 1
65226: ARRAY
65227: PUSH
65228: LD_INT 1
65230: ARRAY
65231: PUSH
65232: LD_STRING l
65234: EQUAL
65235: IFFALSE 65260
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 437
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PUSH
65256: LD_INT 4
65258: ARRAY
65259: ST_TO_ADDR
// end ;
65260: LD_VAR 0 2
65264: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65265: LD_INT 0
65267: PPUSH
65268: PPUSH
65269: PPUSH
65270: PPUSH
// if not base_units then
65271: LD_VAR 0 1
65275: NOT
65276: IFFALSE 65280
// exit ;
65278: GO 65367
// result := false ;
65280: LD_ADDR_VAR 0 2
65284: PUSH
65285: LD_INT 0
65287: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65288: LD_ADDR_VAR 0 5
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: LD_INT 21
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PPUSH
65308: CALL_OW 72
65312: ST_TO_ADDR
// if not tmp then
65313: LD_VAR 0 5
65317: NOT
65318: IFFALSE 65322
// exit ;
65320: GO 65367
// for i in tmp do
65322: LD_ADDR_VAR 0 3
65326: PUSH
65327: LD_VAR 0 5
65331: PUSH
65332: FOR_IN
65333: IFFALSE 65365
// begin result := EnemyInRange ( i , 22 ) ;
65335: LD_ADDR_VAR 0 2
65339: PUSH
65340: LD_VAR 0 3
65344: PPUSH
65345: LD_INT 22
65347: PPUSH
65348: CALL 63603 0 2
65352: ST_TO_ADDR
// if result then
65353: LD_VAR 0 2
65357: IFFALSE 65363
// exit ;
65359: POP
65360: POP
65361: GO 65367
// end ;
65363: GO 65332
65365: POP
65366: POP
// end ;
65367: LD_VAR 0 2
65371: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65372: LD_INT 0
65374: PPUSH
65375: PPUSH
// if not units then
65376: LD_VAR 0 1
65380: NOT
65381: IFFALSE 65385
// exit ;
65383: GO 65455
// result := [ ] ;
65385: LD_ADDR_VAR 0 3
65389: PUSH
65390: EMPTY
65391: ST_TO_ADDR
// for i in units do
65392: LD_ADDR_VAR 0 4
65396: PUSH
65397: LD_VAR 0 1
65401: PUSH
65402: FOR_IN
65403: IFFALSE 65453
// if GetTag ( i ) = tag then
65405: LD_VAR 0 4
65409: PPUSH
65410: CALL_OW 110
65414: PUSH
65415: LD_VAR 0 2
65419: EQUAL
65420: IFFALSE 65451
// result := Insert ( result , result + 1 , i ) ;
65422: LD_ADDR_VAR 0 3
65426: PUSH
65427: LD_VAR 0 3
65431: PPUSH
65432: LD_VAR 0 3
65436: PUSH
65437: LD_INT 1
65439: PLUS
65440: PPUSH
65441: LD_VAR 0 4
65445: PPUSH
65446: CALL_OW 2
65450: ST_TO_ADDR
65451: GO 65402
65453: POP
65454: POP
// end ;
65455: LD_VAR 0 3
65459: RET
// export function IsDriver ( un ) ; begin
65460: LD_INT 0
65462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65463: LD_ADDR_VAR 0 2
65467: PUSH
65468: LD_VAR 0 1
65472: PUSH
65473: LD_INT 55
65475: PUSH
65476: EMPTY
65477: LIST
65478: PPUSH
65479: CALL_OW 69
65483: IN
65484: ST_TO_ADDR
// end ;
65485: LD_VAR 0 2
65489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65490: LD_INT 0
65492: PPUSH
65493: PPUSH
// list := [ ] ;
65494: LD_ADDR_VAR 0 5
65498: PUSH
65499: EMPTY
65500: ST_TO_ADDR
// case d of 0 :
65501: LD_VAR 0 3
65505: PUSH
65506: LD_INT 0
65508: DOUBLE
65509: EQUAL
65510: IFTRUE 65514
65512: GO 65647
65514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65515: LD_ADDR_VAR 0 5
65519: PUSH
65520: LD_VAR 0 1
65524: PUSH
65525: LD_INT 4
65527: MINUS
65528: PUSH
65529: LD_VAR 0 2
65533: PUSH
65534: LD_INT 4
65536: MINUS
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: LD_INT 3
65553: MINUS
65554: PUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: PUSH
65568: LD_VAR 0 1
65572: PUSH
65573: LD_INT 4
65575: PLUS
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_INT 4
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_INT 3
65597: PLUS
65598: PUSH
65599: LD_VAR 0 2
65603: PUSH
65604: LD_INT 3
65606: PLUS
65607: PUSH
65608: LD_INT 5
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 4
65628: PLUS
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// end ; 1 :
65645: GO 66345
65647: LD_INT 1
65649: DOUBLE
65650: EQUAL
65651: IFTRUE 65655
65653: GO 65788
65655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65656: LD_ADDR_VAR 0 5
65660: PUSH
65661: LD_VAR 0 1
65665: PUSH
65666: LD_VAR 0 2
65670: PUSH
65671: LD_INT 4
65673: MINUS
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 3
65690: MINUS
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 3
65699: MINUS
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: LIST
65708: PUSH
65709: LD_VAR 0 1
65713: PUSH
65714: LD_INT 4
65716: MINUS
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: PUSH
65731: LD_VAR 0 1
65735: PUSH
65736: LD_VAR 0 2
65740: PUSH
65741: LD_INT 3
65743: PLUS
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: PUSH
65753: LD_VAR 0 1
65757: PUSH
65758: LD_INT 4
65760: PLUS
65761: PUSH
65762: LD_VAR 0 2
65766: PUSH
65767: LD_INT 4
65769: PLUS
65770: PUSH
65771: LD_INT 5
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: ST_TO_ADDR
// end ; 2 :
65786: GO 66345
65788: LD_INT 2
65790: DOUBLE
65791: EQUAL
65792: IFTRUE 65796
65794: GO 65925
65796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65797: LD_ADDR_VAR 0 5
65801: PUSH
65802: LD_VAR 0 1
65806: PUSH
65807: LD_VAR 0 2
65811: PUSH
65812: LD_INT 3
65814: MINUS
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: PUSH
65824: LD_VAR 0 1
65828: PUSH
65829: LD_INT 4
65831: PLUS
65832: PUSH
65833: LD_VAR 0 2
65837: PUSH
65838: LD_INT 4
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: PUSH
65846: LD_VAR 0 1
65850: PUSH
65851: LD_VAR 0 2
65855: PUSH
65856: LD_INT 4
65858: PLUS
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: PUSH
65868: LD_VAR 0 1
65872: PUSH
65873: LD_INT 3
65875: MINUS
65876: PUSH
65877: LD_VAR 0 2
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: LD_VAR 0 1
65894: PUSH
65895: LD_INT 4
65897: MINUS
65898: PUSH
65899: LD_VAR 0 2
65903: PUSH
65904: LD_INT 4
65906: MINUS
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// end ; 3 :
65923: GO 66345
65925: LD_INT 3
65927: DOUBLE
65928: EQUAL
65929: IFTRUE 65933
65931: GO 66066
65933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65934: LD_ADDR_VAR 0 5
65938: PUSH
65939: LD_VAR 0 1
65943: PUSH
65944: LD_INT 3
65946: PLUS
65947: PUSH
65948: LD_VAR 0 2
65952: PUSH
65953: LD_INT 4
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: PUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 4
65968: PLUS
65969: PUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_INT 4
65977: PLUS
65978: PUSH
65979: LD_INT 5
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_INT 4
65994: MINUS
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: LD_VAR 0 2
66018: PUSH
66019: LD_INT 4
66021: MINUS
66022: PUSH
66023: LD_INT 3
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: LD_VAR 0 1
66035: PUSH
66036: LD_INT 3
66038: MINUS
66039: PUSH
66040: LD_VAR 0 2
66044: PUSH
66045: LD_INT 3
66047: MINUS
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// end ; 4 :
66064: GO 66345
66066: LD_INT 4
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66074
66072: GO 66207
66074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_INT 4
66092: PLUS
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: LD_INT 3
66109: PLUS
66110: PUSH
66111: LD_VAR 0 2
66115: PUSH
66116: LD_INT 3
66118: PLUS
66119: PUSH
66120: LD_INT 5
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 4
66135: PLUS
66136: PUSH
66137: LD_VAR 0 2
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_VAR 0 2
66159: PUSH
66160: LD_INT 3
66162: MINUS
66163: PUSH
66164: LD_INT 3
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: LD_VAR 0 1
66176: PUSH
66177: LD_INT 4
66179: MINUS
66180: PUSH
66181: LD_VAR 0 2
66185: PUSH
66186: LD_INT 4
66188: MINUS
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// end ; 5 :
66205: GO 66345
66207: LD_INT 5
66209: DOUBLE
66210: EQUAL
66211: IFTRUE 66215
66213: GO 66344
66215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_VAR 0 1
66225: PUSH
66226: LD_INT 4
66228: MINUS
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: LD_INT 4
66255: MINUS
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 4
66272: PLUS
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 4
66281: PLUS
66282: PUSH
66283: LD_INT 5
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: LIST
66290: PUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_INT 3
66298: PLUS
66299: PUSH
66300: LD_VAR 0 2
66304: PUSH
66305: LD_INT 4
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: PUSH
66313: LD_VAR 0 1
66317: PUSH
66318: LD_VAR 0 2
66322: PUSH
66323: LD_INT 3
66325: PLUS
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: ST_TO_ADDR
// end ; end ;
66342: GO 66345
66344: POP
// result := list ;
66345: LD_ADDR_VAR 0 4
66349: PUSH
66350: LD_VAR 0 5
66354: ST_TO_ADDR
// end ;
66355: LD_VAR 0 4
66359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66360: LD_INT 0
66362: PPUSH
66363: PPUSH
66364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66365: LD_VAR 0 1
66369: NOT
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: LD_INT 4
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: IN
66394: NOT
66395: OR
66396: IFFALSE 66400
// exit ;
66398: GO 66492
// tmp := [ ] ;
66400: LD_ADDR_VAR 0 5
66404: PUSH
66405: EMPTY
66406: ST_TO_ADDR
// for i in units do
66407: LD_ADDR_VAR 0 4
66411: PUSH
66412: LD_VAR 0 1
66416: PUSH
66417: FOR_IN
66418: IFFALSE 66461
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66420: LD_ADDR_VAR 0 5
66424: PUSH
66425: LD_VAR 0 5
66429: PPUSH
66430: LD_VAR 0 5
66434: PUSH
66435: LD_INT 1
66437: PLUS
66438: PPUSH
66439: LD_VAR 0 4
66443: PPUSH
66444: LD_VAR 0 2
66448: PPUSH
66449: CALL_OW 259
66453: PPUSH
66454: CALL_OW 2
66458: ST_TO_ADDR
66459: GO 66417
66461: POP
66462: POP
// if not tmp then
66463: LD_VAR 0 5
66467: NOT
66468: IFFALSE 66472
// exit ;
66470: GO 66492
// result := SortListByListDesc ( units , tmp ) ;
66472: LD_ADDR_VAR 0 3
66476: PUSH
66477: LD_VAR 0 1
66481: PPUSH
66482: LD_VAR 0 5
66486: PPUSH
66487: CALL_OW 77
66491: ST_TO_ADDR
// end ;
66492: LD_VAR 0 3
66496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66497: LD_INT 0
66499: PPUSH
66500: PPUSH
66501: PPUSH
// result := false ;
66502: LD_ADDR_VAR 0 3
66506: PUSH
66507: LD_INT 0
66509: ST_TO_ADDR
// x := GetX ( building ) ;
66510: LD_ADDR_VAR 0 4
66514: PUSH
66515: LD_VAR 0 2
66519: PPUSH
66520: CALL_OW 250
66524: ST_TO_ADDR
// y := GetY ( building ) ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 2
66534: PPUSH
66535: CALL_OW 251
66539: ST_TO_ADDR
// if not building or not x or not y then
66540: LD_VAR 0 2
66544: NOT
66545: PUSH
66546: LD_VAR 0 4
66550: NOT
66551: OR
66552: PUSH
66553: LD_VAR 0 5
66557: NOT
66558: OR
66559: IFFALSE 66563
// exit ;
66561: GO 66655
// if GetTaskList ( unit ) then
66563: LD_VAR 0 1
66567: PPUSH
66568: CALL_OW 437
66572: IFFALSE 66655
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66574: LD_STRING e
66576: PUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: CALL_OW 437
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PUSH
66591: LD_INT 1
66593: ARRAY
66594: EQUAL
66595: PUSH
66596: LD_VAR 0 4
66600: PUSH
66601: LD_VAR 0 1
66605: PPUSH
66606: CALL_OW 437
66610: PUSH
66611: LD_INT 1
66613: ARRAY
66614: PUSH
66615: LD_INT 2
66617: ARRAY
66618: EQUAL
66619: AND
66620: PUSH
66621: LD_VAR 0 5
66625: PUSH
66626: LD_VAR 0 1
66630: PPUSH
66631: CALL_OW 437
66635: PUSH
66636: LD_INT 1
66638: ARRAY
66639: PUSH
66640: LD_INT 3
66642: ARRAY
66643: EQUAL
66644: AND
66645: IFFALSE 66655
// result := true end ;
66647: LD_ADDR_VAR 0 3
66651: PUSH
66652: LD_INT 1
66654: ST_TO_ADDR
// end ;
66655: LD_VAR 0 3
66659: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66660: LD_INT 0
66662: PPUSH
// result := false ;
66663: LD_ADDR_VAR 0 4
66667: PUSH
66668: LD_INT 0
66670: ST_TO_ADDR
// if GetTaskList ( unit ) then
66671: LD_VAR 0 1
66675: PPUSH
66676: CALL_OW 437
66680: IFFALSE 66763
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66682: LD_STRING M
66684: PUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 437
66694: PUSH
66695: LD_INT 1
66697: ARRAY
66698: PUSH
66699: LD_INT 1
66701: ARRAY
66702: EQUAL
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: CALL_OW 437
66718: PUSH
66719: LD_INT 1
66721: ARRAY
66722: PUSH
66723: LD_INT 2
66725: ARRAY
66726: EQUAL
66727: AND
66728: PUSH
66729: LD_VAR 0 3
66733: PUSH
66734: LD_VAR 0 1
66738: PPUSH
66739: CALL_OW 437
66743: PUSH
66744: LD_INT 1
66746: ARRAY
66747: PUSH
66748: LD_INT 3
66750: ARRAY
66751: EQUAL
66752: AND
66753: IFFALSE 66763
// result := true ;
66755: LD_ADDR_VAR 0 4
66759: PUSH
66760: LD_INT 1
66762: ST_TO_ADDR
// end ; end ;
66763: LD_VAR 0 4
66767: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66768: LD_INT 0
66770: PPUSH
66771: PPUSH
66772: PPUSH
66773: PPUSH
// if not unit or not area then
66774: LD_VAR 0 1
66778: NOT
66779: PUSH
66780: LD_VAR 0 2
66784: NOT
66785: OR
66786: IFFALSE 66790
// exit ;
66788: GO 66954
// tmp := AreaToList ( area , i ) ;
66790: LD_ADDR_VAR 0 6
66794: PUSH
66795: LD_VAR 0 2
66799: PPUSH
66800: LD_VAR 0 5
66804: PPUSH
66805: CALL_OW 517
66809: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66810: LD_ADDR_VAR 0 5
66814: PUSH
66815: DOUBLE
66816: LD_INT 1
66818: DEC
66819: ST_TO_ADDR
66820: LD_VAR 0 6
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PUSH
66829: FOR_TO
66830: IFFALSE 66952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66832: LD_ADDR_VAR 0 7
66836: PUSH
66837: LD_VAR 0 6
66841: PUSH
66842: LD_INT 1
66844: ARRAY
66845: PUSH
66846: LD_VAR 0 5
66850: ARRAY
66851: PUSH
66852: LD_VAR 0 6
66856: PUSH
66857: LD_INT 2
66859: ARRAY
66860: PUSH
66861: LD_VAR 0 5
66865: ARRAY
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66871: LD_VAR 0 7
66875: PUSH
66876: LD_INT 1
66878: ARRAY
66879: PPUSH
66880: LD_VAR 0 7
66884: PUSH
66885: LD_INT 2
66887: ARRAY
66888: PPUSH
66889: CALL_OW 428
66893: PUSH
66894: LD_INT 0
66896: EQUAL
66897: IFFALSE 66950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66899: LD_VAR 0 1
66903: PPUSH
66904: LD_VAR 0 7
66908: PUSH
66909: LD_INT 1
66911: ARRAY
66912: PPUSH
66913: LD_VAR 0 7
66917: PUSH
66918: LD_INT 2
66920: ARRAY
66921: PPUSH
66922: LD_VAR 0 3
66926: PPUSH
66927: CALL_OW 48
// result := IsPlaced ( unit ) ;
66931: LD_ADDR_VAR 0 4
66935: PUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 305
66945: ST_TO_ADDR
// exit ;
66946: POP
66947: POP
66948: GO 66954
// end ; end ;
66950: GO 66829
66952: POP
66953: POP
// end ;
66954: LD_VAR 0 4
66958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66959: LD_INT 0
66961: PPUSH
66962: PPUSH
66963: PPUSH
// if not side or side > 8 then
66964: LD_VAR 0 1
66968: NOT
66969: PUSH
66970: LD_VAR 0 1
66974: PUSH
66975: LD_INT 8
66977: GREATER
66978: OR
66979: IFFALSE 66983
// exit ;
66981: GO 67170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66983: LD_ADDR_VAR 0 4
66987: PUSH
66988: LD_INT 22
66990: PUSH
66991: LD_VAR 0 1
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 21
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PPUSH
67014: CALL_OW 69
67018: ST_TO_ADDR
// if not tmp then
67019: LD_VAR 0 4
67023: NOT
67024: IFFALSE 67028
// exit ;
67026: GO 67170
// enable_addtolog := true ;
67028: LD_ADDR_OWVAR 81
67032: PUSH
67033: LD_INT 1
67035: ST_TO_ADDR
// AddToLog ( [ ) ;
67036: LD_STRING [
67038: PPUSH
67039: CALL_OW 561
// for i in tmp do
67043: LD_ADDR_VAR 0 3
67047: PUSH
67048: LD_VAR 0 4
67052: PUSH
67053: FOR_IN
67054: IFFALSE 67161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67056: LD_STRING [
67058: PUSH
67059: LD_VAR 0 3
67063: PPUSH
67064: CALL_OW 266
67068: STR
67069: PUSH
67070: LD_STRING , 
67072: STR
67073: PUSH
67074: LD_VAR 0 3
67078: PPUSH
67079: CALL_OW 250
67083: STR
67084: PUSH
67085: LD_STRING , 
67087: STR
67088: PUSH
67089: LD_VAR 0 3
67093: PPUSH
67094: CALL_OW 251
67098: STR
67099: PUSH
67100: LD_STRING , 
67102: STR
67103: PUSH
67104: LD_VAR 0 3
67108: PPUSH
67109: CALL_OW 254
67113: STR
67114: PUSH
67115: LD_STRING , 
67117: STR
67118: PUSH
67119: LD_VAR 0 3
67123: PPUSH
67124: LD_INT 1
67126: PPUSH
67127: CALL_OW 268
67131: STR
67132: PUSH
67133: LD_STRING , 
67135: STR
67136: PUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: LD_INT 2
67144: PPUSH
67145: CALL_OW 268
67149: STR
67150: PUSH
67151: LD_STRING ],
67153: STR
67154: PPUSH
67155: CALL_OW 561
// end ;
67159: GO 67053
67161: POP
67162: POP
// AddToLog ( ]; ) ;
67163: LD_STRING ];
67165: PPUSH
67166: CALL_OW 561
// end ;
67170: LD_VAR 0 2
67174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67175: LD_INT 0
67177: PPUSH
67178: PPUSH
67179: PPUSH
67180: PPUSH
67181: PPUSH
// if not area or not rate or not max then
67182: LD_VAR 0 1
67186: NOT
67187: PUSH
67188: LD_VAR 0 2
67192: NOT
67193: OR
67194: PUSH
67195: LD_VAR 0 4
67199: NOT
67200: OR
67201: IFFALSE 67205
// exit ;
67203: GO 67397
// while 1 do
67205: LD_INT 1
67207: IFFALSE 67397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67209: LD_ADDR_VAR 0 9
67213: PUSH
67214: LD_VAR 0 1
67218: PPUSH
67219: LD_INT 1
67221: PPUSH
67222: CALL_OW 287
67226: PUSH
67227: LD_INT 10
67229: MUL
67230: ST_TO_ADDR
// r := rate / 10 ;
67231: LD_ADDR_VAR 0 7
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: LD_INT 10
67243: DIVREAL
67244: ST_TO_ADDR
// time := 1 1$00 ;
67245: LD_ADDR_VAR 0 8
67249: PUSH
67250: LD_INT 2100
67252: ST_TO_ADDR
// if amount < min then
67253: LD_VAR 0 9
67257: PUSH
67258: LD_VAR 0 3
67262: LESS
67263: IFFALSE 67281
// r := r * 2 else
67265: LD_ADDR_VAR 0 7
67269: PUSH
67270: LD_VAR 0 7
67274: PUSH
67275: LD_INT 2
67277: MUL
67278: ST_TO_ADDR
67279: GO 67307
// if amount > max then
67281: LD_VAR 0 9
67285: PUSH
67286: LD_VAR 0 4
67290: GREATER
67291: IFFALSE 67307
// r := r / 2 ;
67293: LD_ADDR_VAR 0 7
67297: PUSH
67298: LD_VAR 0 7
67302: PUSH
67303: LD_INT 2
67305: DIVREAL
67306: ST_TO_ADDR
// time := time / r ;
67307: LD_ADDR_VAR 0 8
67311: PUSH
67312: LD_VAR 0 8
67316: PUSH
67317: LD_VAR 0 7
67321: DIVREAL
67322: ST_TO_ADDR
// if time < 0 then
67323: LD_VAR 0 8
67327: PUSH
67328: LD_INT 0
67330: LESS
67331: IFFALSE 67348
// time := time * - 1 ;
67333: LD_ADDR_VAR 0 8
67337: PUSH
67338: LD_VAR 0 8
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: MUL
67347: ST_TO_ADDR
// wait ( time ) ;
67348: LD_VAR 0 8
67352: PPUSH
67353: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67357: LD_INT 35
67359: PPUSH
67360: LD_INT 875
67362: PPUSH
67363: CALL_OW 12
67367: PPUSH
67368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67372: LD_INT 1
67374: PPUSH
67375: LD_INT 5
67377: PPUSH
67378: CALL_OW 12
67382: PPUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_INT 1
67390: PPUSH
67391: CALL_OW 55
// end ;
67395: GO 67205
// end ;
67397: LD_VAR 0 5
67401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67402: LD_INT 0
67404: PPUSH
67405: PPUSH
67406: PPUSH
67407: PPUSH
67408: PPUSH
67409: PPUSH
67410: PPUSH
67411: PPUSH
// if not turrets or not factories then
67412: LD_VAR 0 1
67416: NOT
67417: PUSH
67418: LD_VAR 0 2
67422: NOT
67423: OR
67424: IFFALSE 67428
// exit ;
67426: GO 67735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67428: LD_ADDR_VAR 0 10
67432: PUSH
67433: LD_INT 5
67435: PUSH
67436: LD_INT 6
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 4
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 3
67455: PUSH
67456: LD_INT 5
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 24
67470: PUSH
67471: LD_INT 25
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 23
67480: PUSH
67481: LD_INT 27
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 42
67494: PUSH
67495: LD_INT 43
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 44
67504: PUSH
67505: LD_INT 46
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 45
67514: PUSH
67515: LD_INT 47
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// result := [ ] ;
67532: LD_ADDR_VAR 0 3
67536: PUSH
67537: EMPTY
67538: ST_TO_ADDR
// for i in turrets do
67539: LD_ADDR_VAR 0 4
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: FOR_IN
67550: IFFALSE 67733
// begin nat := GetNation ( i ) ;
67552: LD_ADDR_VAR 0 7
67556: PUSH
67557: LD_VAR 0 4
67561: PPUSH
67562: CALL_OW 248
67566: ST_TO_ADDR
// weapon := 0 ;
67567: LD_ADDR_VAR 0 8
67571: PUSH
67572: LD_INT 0
67574: ST_TO_ADDR
// if not nat then
67575: LD_VAR 0 7
67579: NOT
67580: IFFALSE 67584
// continue ;
67582: GO 67549
// for j in list [ nat ] do
67584: LD_ADDR_VAR 0 5
67588: PUSH
67589: LD_VAR 0 10
67593: PUSH
67594: LD_VAR 0 7
67598: ARRAY
67599: PUSH
67600: FOR_IN
67601: IFFALSE 67642
// if GetBWeapon ( i ) = j [ 1 ] then
67603: LD_VAR 0 4
67607: PPUSH
67608: CALL_OW 269
67612: PUSH
67613: LD_VAR 0 5
67617: PUSH
67618: LD_INT 1
67620: ARRAY
67621: EQUAL
67622: IFFALSE 67640
// begin weapon := j [ 2 ] ;
67624: LD_ADDR_VAR 0 8
67628: PUSH
67629: LD_VAR 0 5
67633: PUSH
67634: LD_INT 2
67636: ARRAY
67637: ST_TO_ADDR
// break ;
67638: GO 67642
// end ;
67640: GO 67600
67642: POP
67643: POP
// if not weapon then
67644: LD_VAR 0 8
67648: NOT
67649: IFFALSE 67653
// continue ;
67651: GO 67549
// for k in factories do
67653: LD_ADDR_VAR 0 6
67657: PUSH
67658: LD_VAR 0 2
67662: PUSH
67663: FOR_IN
67664: IFFALSE 67729
// begin weapons := AvailableWeaponList ( k ) ;
67666: LD_ADDR_VAR 0 9
67670: PUSH
67671: LD_VAR 0 6
67675: PPUSH
67676: CALL_OW 478
67680: ST_TO_ADDR
// if not weapons then
67681: LD_VAR 0 9
67685: NOT
67686: IFFALSE 67690
// continue ;
67688: GO 67663
// if weapon in weapons then
67690: LD_VAR 0 8
67694: PUSH
67695: LD_VAR 0 9
67699: IN
67700: IFFALSE 67727
// begin result := [ i , weapon ] ;
67702: LD_ADDR_VAR 0 3
67706: PUSH
67707: LD_VAR 0 4
67711: PUSH
67712: LD_VAR 0 8
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: ST_TO_ADDR
// exit ;
67721: POP
67722: POP
67723: POP
67724: POP
67725: GO 67735
// end ; end ;
67727: GO 67663
67729: POP
67730: POP
// end ;
67731: GO 67549
67733: POP
67734: POP
// end ;
67735: LD_VAR 0 3
67739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67740: LD_INT 0
67742: PPUSH
// if not side or side > 8 then
67743: LD_VAR 0 3
67747: NOT
67748: PUSH
67749: LD_VAR 0 3
67753: PUSH
67754: LD_INT 8
67756: GREATER
67757: OR
67758: IFFALSE 67762
// exit ;
67760: GO 67821
// if not range then
67762: LD_VAR 0 4
67766: NOT
67767: IFFALSE 67778
// range := - 12 ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_INT 12
67776: NEG
67777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_VAR 0 2
67787: PPUSH
67788: LD_VAR 0 3
67792: PPUSH
67793: LD_VAR 0 4
67797: PPUSH
67798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: CALL_OW 331
// end ;
67821: LD_VAR 0 5
67825: RET
// export function Video ( mode ) ; begin
67826: LD_INT 0
67828: PPUSH
// ingame_video = mode ;
67829: LD_ADDR_OWVAR 52
67833: PUSH
67834: LD_VAR 0 1
67838: ST_TO_ADDR
// interface_hidden = mode ;
67839: LD_ADDR_OWVAR 54
67843: PUSH
67844: LD_VAR 0 1
67848: ST_TO_ADDR
// end ;
67849: LD_VAR 0 2
67853: RET
// export function Join ( array , element ) ; begin
67854: LD_INT 0
67856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67857: LD_ADDR_VAR 0 3
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 1
67874: PLUS
67875: PPUSH
67876: LD_VAR 0 2
67880: PPUSH
67881: CALL_OW 1
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 3
67890: RET
// export function JoinUnion ( array , element ) ; begin
67891: LD_INT 0
67893: PPUSH
// result := array union element ;
67894: LD_ADDR_VAR 0 3
67898: PUSH
67899: LD_VAR 0 1
67903: PUSH
67904: LD_VAR 0 2
67908: UNION
67909: ST_TO_ADDR
// end ;
67910: LD_VAR 0 3
67914: RET
// export function GetBehemoths ( side ) ; begin
67915: LD_INT 0
67917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67918: LD_ADDR_VAR 0 2
67922: PUSH
67923: LD_INT 22
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 31
67937: PUSH
67938: LD_INT 25
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PPUSH
67949: CALL_OW 69
67953: ST_TO_ADDR
// end ;
67954: LD_VAR 0 2
67958: RET
// export function Shuffle ( array ) ; var i , index ; begin
67959: LD_INT 0
67961: PPUSH
67962: PPUSH
67963: PPUSH
// result := [ ] ;
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: EMPTY
67970: ST_TO_ADDR
// if not array then
67971: LD_VAR 0 1
67975: NOT
67976: IFFALSE 67980
// exit ;
67978: GO 68079
// Randomize ;
67980: CALL_OW 10
// for i = array downto 1 do
67984: LD_ADDR_VAR 0 3
67988: PUSH
67989: DOUBLE
67990: LD_VAR 0 1
67994: INC
67995: ST_TO_ADDR
67996: LD_INT 1
67998: PUSH
67999: FOR_DOWNTO
68000: IFFALSE 68077
// begin index := rand ( 1 , array ) ;
68002: LD_ADDR_VAR 0 4
68006: PUSH
68007: LD_INT 1
68009: PPUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: CALL_OW 12
68019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68020: LD_ADDR_VAR 0 2
68024: PUSH
68025: LD_VAR 0 2
68029: PPUSH
68030: LD_VAR 0 2
68034: PUSH
68035: LD_INT 1
68037: PLUS
68038: PPUSH
68039: LD_VAR 0 1
68043: PUSH
68044: LD_VAR 0 4
68048: ARRAY
68049: PPUSH
68050: CALL_OW 2
68054: ST_TO_ADDR
// array := Delete ( array , index ) ;
68055: LD_ADDR_VAR 0 1
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: CALL_OW 3
68074: ST_TO_ADDR
// end ;
68075: GO 67999
68077: POP
68078: POP
// end ;
68079: LD_VAR 0 2
68083: RET
// export function GetBaseMaterials ( base ) ; begin
68084: LD_INT 0
68086: PPUSH
// result := [ 0 , 0 , 0 ] ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// if not base then
68106: LD_VAR 0 1
68110: NOT
68111: IFFALSE 68115
// exit ;
68113: GO 68164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68115: LD_ADDR_VAR 0 2
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: LD_INT 1
68127: PPUSH
68128: CALL_OW 275
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: LD_INT 2
68140: PPUSH
68141: CALL_OW 275
68145: PUSH
68146: LD_VAR 0 1
68150: PPUSH
68151: LD_INT 3
68153: PPUSH
68154: CALL_OW 275
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: ST_TO_ADDR
// end ;
68164: LD_VAR 0 2
68168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68169: LD_INT 0
68171: PPUSH
68172: PPUSH
// result := array ;
68173: LD_ADDR_VAR 0 3
68177: PUSH
68178: LD_VAR 0 1
68182: ST_TO_ADDR
// if size > 0 then
68183: LD_VAR 0 2
68187: PUSH
68188: LD_INT 0
68190: GREATER
68191: IFFALSE 68237
// for i := array downto size do
68193: LD_ADDR_VAR 0 4
68197: PUSH
68198: DOUBLE
68199: LD_VAR 0 1
68203: INC
68204: ST_TO_ADDR
68205: LD_VAR 0 2
68209: PUSH
68210: FOR_DOWNTO
68211: IFFALSE 68235
// result := Delete ( result , result ) ;
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_VAR 0 3
68222: PPUSH
68223: LD_VAR 0 3
68227: PPUSH
68228: CALL_OW 3
68232: ST_TO_ADDR
68233: GO 68210
68235: POP
68236: POP
// end ;
68237: LD_VAR 0 3
68241: RET
// export function ComExit ( unit ) ; var tmp ; begin
68242: LD_INT 0
68244: PPUSH
68245: PPUSH
// if not IsInUnit ( unit ) then
68246: LD_VAR 0 1
68250: PPUSH
68251: CALL_OW 310
68255: NOT
68256: IFFALSE 68260
// exit ;
68258: GO 68320
// tmp := IsInUnit ( unit ) ;
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: CALL_OW 310
68274: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68275: LD_VAR 0 3
68279: PPUSH
68280: CALL_OW 247
68284: PUSH
68285: LD_INT 2
68287: EQUAL
68288: IFFALSE 68301
// ComExitVehicle ( unit ) else
68290: LD_VAR 0 1
68294: PPUSH
68295: CALL_OW 121
68299: GO 68310
// ComExitBuilding ( unit ) ;
68301: LD_VAR 0 1
68305: PPUSH
68306: CALL_OW 122
// result := tmp ;
68310: LD_ADDR_VAR 0 2
68314: PUSH
68315: LD_VAR 0 3
68319: ST_TO_ADDR
// end ;
68320: LD_VAR 0 2
68324: RET
// export function ResetHc ; begin
68325: LD_INT 0
68327: PPUSH
// InitHc ;
68328: CALL_OW 19
// hc_importance := 0 ;
68332: LD_ADDR_OWVAR 32
68336: PUSH
68337: LD_INT 0
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 1
68344: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68345: LD_INT 0
68347: PPUSH
68348: PPUSH
68349: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68350: LD_ADDR_VAR 0 6
68354: PUSH
68355: LD_VAR 0 1
68359: PUSH
68360: LD_VAR 0 3
68364: PLUS
68365: PUSH
68366: LD_INT 2
68368: DIV
68369: ST_TO_ADDR
// if _x < 0 then
68370: LD_VAR 0 6
68374: PUSH
68375: LD_INT 0
68377: LESS
68378: IFFALSE 68395
// _x := _x * - 1 ;
68380: LD_ADDR_VAR 0 6
68384: PUSH
68385: LD_VAR 0 6
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: MUL
68394: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68395: LD_ADDR_VAR 0 7
68399: PUSH
68400: LD_VAR 0 2
68404: PUSH
68405: LD_VAR 0 4
68409: PLUS
68410: PUSH
68411: LD_INT 2
68413: DIV
68414: ST_TO_ADDR
// if _y < 0 then
68415: LD_VAR 0 7
68419: PUSH
68420: LD_INT 0
68422: LESS
68423: IFFALSE 68440
// _y := _y * - 1 ;
68425: LD_ADDR_VAR 0 7
68429: PUSH
68430: LD_VAR 0 7
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: MUL
68439: ST_TO_ADDR
// result := [ _x , _y ] ;
68440: LD_ADDR_VAR 0 5
68444: PUSH
68445: LD_VAR 0 6
68449: PUSH
68450: LD_VAR 0 7
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: ST_TO_ADDR
// end ;
68459: LD_VAR 0 5
68463: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68464: LD_INT 0
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
// task := GetTaskList ( unit ) ;
68470: LD_ADDR_VAR 0 7
68474: PUSH
68475: LD_VAR 0 1
68479: PPUSH
68480: CALL_OW 437
68484: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68485: LD_VAR 0 7
68489: NOT
68490: PUSH
68491: LD_VAR 0 1
68495: PPUSH
68496: LD_VAR 0 2
68500: PPUSH
68501: CALL_OW 308
68505: NOT
68506: AND
68507: IFFALSE 68511
// exit ;
68509: GO 68629
// if IsInArea ( unit , area ) then
68511: LD_VAR 0 1
68515: PPUSH
68516: LD_VAR 0 2
68520: PPUSH
68521: CALL_OW 308
68525: IFFALSE 68543
// begin ComMoveToArea ( unit , goAway ) ;
68527: LD_VAR 0 1
68531: PPUSH
68532: LD_VAR 0 3
68536: PPUSH
68537: CALL_OW 113
// exit ;
68541: GO 68629
// end ; if task [ 1 ] [ 1 ] <> M then
68543: LD_VAR 0 7
68547: PUSH
68548: LD_INT 1
68550: ARRAY
68551: PUSH
68552: LD_INT 1
68554: ARRAY
68555: PUSH
68556: LD_STRING M
68558: NONEQUAL
68559: IFFALSE 68563
// exit ;
68561: GO 68629
// x := task [ 1 ] [ 2 ] ;
68563: LD_ADDR_VAR 0 5
68567: PUSH
68568: LD_VAR 0 7
68572: PUSH
68573: LD_INT 1
68575: ARRAY
68576: PUSH
68577: LD_INT 2
68579: ARRAY
68580: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68581: LD_ADDR_VAR 0 6
68585: PUSH
68586: LD_VAR 0 7
68590: PUSH
68591: LD_INT 1
68593: ARRAY
68594: PUSH
68595: LD_INT 3
68597: ARRAY
68598: ST_TO_ADDR
// if InArea ( x , y , area ) then
68599: LD_VAR 0 5
68603: PPUSH
68604: LD_VAR 0 6
68608: PPUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: CALL_OW 309
68618: IFFALSE 68629
// ComStop ( unit ) ;
68620: LD_VAR 0 1
68624: PPUSH
68625: CALL_OW 141
// end ;
68629: LD_VAR 0 4
68633: RET
// export function Abs ( value ) ; begin
68634: LD_INT 0
68636: PPUSH
// result := value ;
68637: LD_ADDR_VAR 0 2
68641: PUSH
68642: LD_VAR 0 1
68646: ST_TO_ADDR
// if value < 0 then
68647: LD_VAR 0 1
68651: PUSH
68652: LD_INT 0
68654: LESS
68655: IFFALSE 68672
// result := value * - 1 ;
68657: LD_ADDR_VAR 0 2
68661: PUSH
68662: LD_VAR 0 1
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: MUL
68671: ST_TO_ADDR
// end ;
68672: LD_VAR 0 2
68676: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68677: LD_INT 0
68679: PPUSH
68680: PPUSH
68681: PPUSH
68682: PPUSH
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
// if not unit or not building then
68687: LD_VAR 0 1
68691: NOT
68692: PUSH
68693: LD_VAR 0 2
68697: NOT
68698: OR
68699: IFFALSE 68703
// exit ;
68701: GO 68929
// x := GetX ( building ) ;
68703: LD_ADDR_VAR 0 4
68707: PUSH
68708: LD_VAR 0 2
68712: PPUSH
68713: CALL_OW 250
68717: ST_TO_ADDR
// y := GetY ( building ) ;
68718: LD_ADDR_VAR 0 6
68722: PUSH
68723: LD_VAR 0 2
68727: PPUSH
68728: CALL_OW 251
68732: ST_TO_ADDR
// d := GetDir ( building ) ;
68733: LD_ADDR_VAR 0 8
68737: PUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: CALL_OW 254
68747: ST_TO_ADDR
// r := 4 ;
68748: LD_ADDR_VAR 0 9
68752: PUSH
68753: LD_INT 4
68755: ST_TO_ADDR
// for i := 1 to 5 do
68756: LD_ADDR_VAR 0 10
68760: PUSH
68761: DOUBLE
68762: LD_INT 1
68764: DEC
68765: ST_TO_ADDR
68766: LD_INT 5
68768: PUSH
68769: FOR_TO
68770: IFFALSE 68927
// begin _x := ShiftX ( x , d , r + i ) ;
68772: LD_ADDR_VAR 0 5
68776: PUSH
68777: LD_VAR 0 4
68781: PPUSH
68782: LD_VAR 0 8
68786: PPUSH
68787: LD_VAR 0 9
68791: PUSH
68792: LD_VAR 0 10
68796: PLUS
68797: PPUSH
68798: CALL_OW 272
68802: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68803: LD_ADDR_VAR 0 7
68807: PUSH
68808: LD_VAR 0 6
68812: PPUSH
68813: LD_VAR 0 8
68817: PPUSH
68818: LD_VAR 0 9
68822: PUSH
68823: LD_VAR 0 10
68827: PLUS
68828: PPUSH
68829: CALL_OW 273
68833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68834: LD_VAR 0 5
68838: PPUSH
68839: LD_VAR 0 7
68843: PPUSH
68844: CALL_OW 488
68848: PUSH
68849: LD_VAR 0 5
68853: PPUSH
68854: LD_VAR 0 7
68858: PPUSH
68859: CALL_OW 428
68863: PPUSH
68864: CALL_OW 247
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: IN
68879: NOT
68880: AND
68881: IFFALSE 68925
// begin ComMoveXY ( unit , _x , _y ) ;
68883: LD_VAR 0 1
68887: PPUSH
68888: LD_VAR 0 5
68892: PPUSH
68893: LD_VAR 0 7
68897: PPUSH
68898: CALL_OW 111
// result := [ _x , _y ] ;
68902: LD_ADDR_VAR 0 3
68906: PUSH
68907: LD_VAR 0 5
68911: PUSH
68912: LD_VAR 0 7
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: ST_TO_ADDR
// exit ;
68921: POP
68922: POP
68923: GO 68929
// end ; end ;
68925: GO 68769
68927: POP
68928: POP
// end ;
68929: LD_VAR 0 3
68933: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68934: LD_INT 0
68936: PPUSH
68937: PPUSH
68938: PPUSH
// result := 0 ;
68939: LD_ADDR_VAR 0 3
68943: PUSH
68944: LD_INT 0
68946: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68947: LD_VAR 0 1
68951: PUSH
68952: LD_INT 0
68954: LESS
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_INT 8
68963: GREATER
68964: OR
68965: PUSH
68966: LD_VAR 0 2
68970: PUSH
68971: LD_INT 0
68973: LESS
68974: OR
68975: PUSH
68976: LD_VAR 0 2
68980: PUSH
68981: LD_INT 8
68983: GREATER
68984: OR
68985: IFFALSE 68989
// exit ;
68987: GO 69064
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68989: LD_ADDR_VAR 0 4
68993: PUSH
68994: LD_INT 22
68996: PUSH
68997: LD_VAR 0 2
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PPUSH
69006: CALL_OW 69
69010: PUSH
69011: FOR_IN
69012: IFFALSE 69062
// begin un := UnitShoot ( i ) ;
69014: LD_ADDR_VAR 0 5
69018: PUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: CALL_OW 504
69028: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69029: LD_VAR 0 5
69033: PPUSH
69034: CALL_OW 255
69038: PUSH
69039: LD_VAR 0 1
69043: EQUAL
69044: IFFALSE 69060
// begin result := un ;
69046: LD_ADDR_VAR 0 3
69050: PUSH
69051: LD_VAR 0 5
69055: ST_TO_ADDR
// exit ;
69056: POP
69057: POP
69058: GO 69064
// end ; end ;
69060: GO 69011
69062: POP
69063: POP
// end ;
69064: LD_VAR 0 3
69068: RET
