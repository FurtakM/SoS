// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 9566 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 1986 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , frankEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// frankEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 9945 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 9945 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 9945 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 9945 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 9945 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 9945 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 9945 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 9945 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 9945 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 9945 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Frank ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 9945 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 43917 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 47812 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: PUSH
1132: LD_EXP 14
1136: AND
1137: IFFALSE 1311
1139: GO 1141
1141: DISABLE
// begin uc_side := 1 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 1
1149: ST_TO_ADDR
// uc_nation := nation_american ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 1
1157: ST_TO_ADDR
// hc_class := class_soldier ;
1158: LD_ADDR_OWVAR 28
1162: PUSH
1163: LD_INT 1
1165: ST_TO_ADDR
// hc_sex := sex_male ;
1166: LD_ADDR_OWVAR 27
1170: PUSH
1171: LD_INT 1
1173: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1174: LD_ADDR_OWVAR 33
1178: PUSH
1179: LD_STRING SecondCharsGal
1181: ST_TO_ADDR
// hc_face_number := 50 ;
1182: LD_ADDR_OWVAR 34
1186: PUSH
1187: LD_INT 50
1189: ST_TO_ADDR
// hc_name := Frank Hughes ;
1190: LD_ADDR_OWVAR 26
1194: PUSH
1195: LD_STRING Frank Hughes
1197: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1198: LD_ADDR_OWVAR 29
1202: PUSH
1203: LD_INT 10
1205: PUSH
1206: LD_INT 10
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
1213: LD_ADDR_OWVAR 30
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 0
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1236: LD_ADDR_OWVAR 31
1240: PUSH
1241: LD_OWVAR 67
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 0
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// Frank := CreateHuman ;
1261: LD_ADDR_EXP 35
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// PlaceUnitXY ( Frank , 77 , 19 , true ) ;
1271: LD_EXP 35
1275: PPUSH
1276: LD_INT 77
1278: PPUSH
1279: LD_INT 19
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL_OW 48
// wait ( 0 0$2 ) ;
1289: LD_INT 70
1291: PPUSH
1292: CALL_OW 67
// ComAgressiveMove ( Frank , 50 , 21 ) ;
1296: LD_EXP 35
1300: PPUSH
1301: LD_INT 50
1303: PPUSH
1304: LD_INT 21
1306: PPUSH
1307: CALL_OW 114
// end ;
1311: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1312: LD_EXP 15
1316: IFFALSE 1764
1318: GO 1320
1320: DISABLE
1321: LD_INT 0
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
// begin enable ;
1327: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1328: LD_ADDR_VAR 0 4
1332: PUSH
1333: LD_EXP 36
1337: PPUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 120
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: PPUSH
1358: CALL_OW 72
1362: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: LD_EXP 36
1372: PPUSH
1373: LD_INT 120
1375: PUSH
1376: LD_INT 2
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 72
1387: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1388: LD_ADDR_VAR 0 3
1392: PUSH
1393: LD_INT 17
1395: PPUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PPUSH
1406: CALL_OW 70
1410: ST_TO_ADDR
// if IsOk ( Frank ) then
1411: LD_EXP 35
1415: PPUSH
1416: CALL_OW 302
1420: IFFALSE 1442
// tmp := Join ( tmp , Frank ) ;
1422: LD_ADDR_VAR 0 4
1426: PUSH
1427: LD_VAR 0 4
1431: PPUSH
1432: LD_EXP 35
1436: PPUSH
1437: CALL 47812 0 2
1441: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1442: LD_VAR 0 4
1446: PPUSH
1447: LD_INT 3
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: LD_INT 1000
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 72
1468: IFFALSE 1507
// begin if IsInUnit ( Gladstone ) then
1470: LD_EXP 33
1474: PPUSH
1475: CALL_OW 310
1479: IFFALSE 1505
// begin ComExitBuilding ( Gladstone ) ;
1481: LD_EXP 33
1485: PPUSH
1486: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1490: LD_EXP 33
1494: PPUSH
1495: LD_INT 39
1497: PPUSH
1498: LD_INT 7
1500: PPUSH
1501: CALL_OW 171
// end ; end else
1505: GO 1531
// if not IsInUnit ( Gladstone ) then
1507: LD_EXP 33
1511: PPUSH
1512: CALL_OW 310
1516: NOT
1517: IFFALSE 1531
// ComEnterUnit ( Gladstone , usLab ) ;
1519: LD_EXP 33
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 120
// if eng then
1531: LD_VAR 0 2
1535: IFFALSE 1604
// if GetLives ( usBun1 ) < 1000 then
1537: LD_INT 3
1539: PPUSH
1540: CALL_OW 256
1544: PUSH
1545: LD_INT 1000
1547: LESS
1548: IFFALSE 1564
// ComRepairBuilding ( eng , usBun1 ) else
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL_OW 130
1562: GO 1604
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1564: LD_VAR 0 2
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_INT 37
1575: PPUSH
1576: LD_INT 9
1578: PPUSH
1579: CALL_OW 297
1583: PUSH
1584: LD_INT 5
1586: GREATER
1587: IFFALSE 1604
// ComMoveXY ( eng , 37 , 9 ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: LD_INT 37
1596: PPUSH
1597: LD_INT 9
1599: PPUSH
1600: CALL_OW 111
// for i in tmp do
1604: LD_ADDR_VAR 0 1
1608: PUSH
1609: LD_VAR 0 4
1613: PUSH
1614: FOR_IN
1615: IFFALSE 1762
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL_OW 256
1626: PUSH
1627: LD_INT 600
1629: LESS
1630: PUSH
1631: LD_VAR 0 1
1635: PPUSH
1636: LD_INT 37
1638: PPUSH
1639: LD_INT 9
1641: PPUSH
1642: CALL_OW 297
1646: PUSH
1647: LD_INT 5
1649: GREATER
1650: AND
1651: IFFALSE 1670
// begin ComMoveXY ( i , 37 , 9 ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 37
1660: PPUSH
1661: LD_INT 9
1663: PPUSH
1664: CALL_OW 111
// continue ;
1668: GO 1614
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1670: LD_VAR 0 3
1674: NOT
1675: PUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: LD_INT 37
1683: PPUSH
1684: LD_INT 9
1686: PPUSH
1687: CALL_OW 297
1691: PUSH
1692: LD_INT 5
1694: GREATER
1695: AND
1696: IFFALSE 1715
// begin ComMoveXY ( i , 37 , 9 ) ;
1698: LD_VAR 0 1
1702: PPUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_INT 9
1708: PPUSH
1709: CALL_OW 111
// continue ;
1713: GO 1614
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1715: LD_VAR 0 3
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: CALL_OW 256
1729: PUSH
1730: LD_INT 1000
1732: EQUAL
1733: AND
1734: IFFALSE 1760
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 3
1745: PPUSH
1746: LD_VAR 0 1
1750: PPUSH
1751: CALL_OW 74
1755: PPUSH
1756: CALL_OW 115
// end ;
1760: GO 1614
1762: POP
1763: POP
// end ; end_of_file
1764: PPOPN 4
1766: END
// every 0 0$1 trigger not attackedByApe do var un ;
1767: LD_EXP 7
1771: NOT
1772: IFFALSE 1846
1774: GO 1776
1776: DISABLE
1777: LD_INT 0
1779: PPUSH
// begin enable ;
1780: ENABLE
// un := UnitShoot ( Burlak ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_EXP 22
1790: PPUSH
1791: CALL_OW 504
1795: ST_TO_ADDR
// if un > - 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: NEG
1804: GREATER
1805: IFFALSE 1846
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 0
1819: EQUAL
1820: PUSH
1821: LD_VAR 0 1
1825: PPUSH
1826: CALL_OW 257
1830: PUSH
1831: LD_INT 12
1833: EQUAL
1834: AND
1835: IFFALSE 1846
// begin attackedByApe := true ;
1837: LD_ADDR_EXP 7
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// disable ;
1845: DISABLE
// end ; end ;
1846: PPOPN 1
1848: END
// on UnitDestroyed ( un ) do begin if not apeRadioKilled and GetTag ( un ) = tApeRadio then
1849: LD_EXP 9
1853: NOT
1854: PUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 110
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: AND
1869: IFFALSE 1881
// apeRadioKilled := un ;
1871: LD_ADDR_EXP 9
1875: PUSH
1876: LD_VAR 0 1
1880: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1881: LD_VAR 0 1
1885: PPUSH
1886: CALL_OW 255
1890: PUSH
1891: LD_INT 3
1893: EQUAL
1894: PUSH
1895: LD_VAR 0 1
1899: PPUSH
1900: CALL_OW 247
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: AND
1909: IFFALSE 1926
// loseCounter := Inc ( loseCounter ) ;
1911: LD_ADDR_EXP 20
1915: PUSH
1916: LD_EXP 20
1920: PPUSH
1921: CALL 49173 0 1
1925: ST_TO_ADDR
// end ;
1926: PPOPN 1
1928: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
1929: LD_VAR 0 1
1933: PPUSH
1934: CALL_OW 255
1938: PUSH
1939: LD_INT 3
1941: EQUAL
1942: IFFALSE 1952
// someoneGetsHurt := true ;
1944: LD_ADDR_EXP 21
1948: PUSH
1949: LD_INT 1
1951: ST_TO_ADDR
// end ;
1952: PPOPN 1
1954: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
1955: LD_VAR 0 1
1959: PUSH
1960: LD_INT 3
1962: EQUAL
1963: PUSH
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 6
1971: EQUAL
1972: AND
1973: IFFALSE 1983
// attackedAllied := true ;
1975: LD_ADDR_EXP 13
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// end ; end_of_file
1983: PPOPN 2
1985: END
// export function Action ; begin
1986: LD_INT 0
1988: PPUSH
// InGameOn ;
1989: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
1993: LD_INT 78
1995: PPUSH
1996: LD_INT 85
1998: PPUSH
1999: CALL_OW 86
// wait ( 0 0$2 ) ;
2003: LD_INT 70
2005: PPUSH
2006: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2010: LD_EXP 22
2014: PPUSH
2015: LD_INT 78
2017: PPUSH
2018: LD_INT 85
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL 49952 0 5
// ComHold ( Burlak ) ;
2031: LD_EXP 22
2035: PPUSH
2036: CALL_OW 140
// wait ( 0 0$3 ) ;
2040: LD_INT 105
2042: PPUSH
2043: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2047: LD_EXP 22
2051: PPUSH
2052: LD_INT 79
2054: PPUSH
2055: LD_INT 89
2057: PPUSH
2058: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2062: LD_INT 18
2064: PPUSH
2065: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2069: LD_EXP 22
2073: PPUSH
2074: LD_STRING D1-Bur-1
2076: PPUSH
2077: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2081: LD_EXP 22
2085: PPUSH
2086: LD_INT 81
2088: PPUSH
2089: LD_INT 87
2091: PPUSH
2092: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2096: LD_INT 10
2098: PPUSH
2099: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2103: LD_EXP 22
2107: PPUSH
2108: LD_STRING D1-Bur-1a
2110: PPUSH
2111: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2115: LD_EXP 22
2119: PPUSH
2120: LD_INT 85
2122: PPUSH
2123: LD_INT 90
2125: PPUSH
2126: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2130: LD_INT 18
2132: PPUSH
2133: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2137: LD_EXP 22
2141: PPUSH
2142: LD_STRING D1-Bur-1b
2144: PPUSH
2145: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2149: LD_EXP 22
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2164: LD_INT 10
2166: PPUSH
2167: CALL_OW 67
// InGameOff ;
2171: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2175: LD_STRING M1
2177: PPUSH
2178: CALL_OW 337
// SaveForQuickRestart ;
2182: CALL_OW 22
// if debug then
2186: LD_EXP 1
2190: IFFALSE 2199
// FogOff ( 3 ) ;
2192: LD_INT 3
2194: PPUSH
2195: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2199: LD_INT 350
2201: PUSH
2202: LD_INT 70
2204: PUSH
2205: LD_OWVAR 67
2209: MUL
2210: MINUS
2211: PPUSH
2212: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2216: LD_EXP 22
2220: PPUSH
2221: LD_INT 80
2223: PPUSH
2224: LD_INT 87
2226: PPUSH
2227: CALL_OW 297
2231: PUSH
2232: LD_INT 8
2234: LESS
2235: IFFALSE 2241
// SendApemanAttack ;
2237: CALL 9297 0 0
// end ;
2241: LD_VAR 0 1
2245: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2246: LD_EXP 22
2250: PPUSH
2251: LD_INT 6
2253: PPUSH
2254: CALL_OW 308
2258: IFFALSE 2300
2260: GO 2262
2262: DISABLE
// begin waterfallSpotted := true ;
2263: LD_ADDR_EXP 8
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2271: LD_INT 75
2273: PPUSH
2274: LD_INT 89
2276: PPUSH
2277: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2281: LD_INT 7
2283: PPUSH
2284: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2288: LD_EXP 22
2292: PPUSH
2293: LD_STRING DWaterfall-Bur-1
2295: PPUSH
2296: CALL_OW 88
// end ;
2300: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2301: LD_EXP 22
2305: PPUSH
2306: LD_INT 25
2308: PUSH
2309: LD_INT 12
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PPUSH
2316: CALL_OW 69
2320: PPUSH
2321: LD_EXP 22
2325: PPUSH
2326: CALL_OW 74
2330: PPUSH
2331: CALL_OW 296
2335: PUSH
2336: LD_INT 6
2338: LESS
2339: IFFALSE 2430
2341: GO 2343
2343: DISABLE
// begin apeSpotted := true ;
2344: LD_ADDR_EXP 6
2348: PUSH
2349: LD_INT 1
2351: ST_TO_ADDR
// if joinedToBelkov then
2352: LD_EXP 3
2356: IFFALSE 2360
// exit ;
2358: GO 2430
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2360: LD_EXP 22
2364: PPUSH
2365: LD_INT 25
2367: PUSH
2368: LD_INT 12
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PPUSH
2380: LD_EXP 22
2384: PPUSH
2385: CALL_OW 74
2389: PPUSH
2390: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2394: LD_INT 10
2396: PPUSH
2397: CALL_OW 67
// DialogueOn ;
2401: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2405: LD_EXP 22
2409: PPUSH
2410: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2414: LD_EXP 22
2418: PPUSH
2419: LD_STRING D2-Bur-1
2421: PPUSH
2422: CALL_OW 88
// DialogueOff ;
2426: CALL_OW 7
// end ;
2430: END
// every 0 0$1 trigger attackedByApe do
2431: LD_EXP 7
2435: IFFALSE 2459
2437: GO 2439
2439: DISABLE
// begin wait ( 0 0$0.3 ) ;
2440: LD_INT 10
2442: PPUSH
2443: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2447: LD_EXP 22
2451: PPUSH
2452: LD_STRING D2-Bur-1a
2454: PPUSH
2455: CALL_OW 88
// end ;
2459: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2460: LD_INT 3
2462: PPUSH
2463: LD_INT 130
2465: PPUSH
2466: LD_INT 97
2468: PPUSH
2469: CALL_OW 293
2473: PUSH
2474: LD_EXP 22
2478: PPUSH
2479: LD_INT 130
2481: PPUSH
2482: LD_INT 97
2484: PPUSH
2485: CALL_OW 297
2489: PUSH
2490: LD_INT 6
2492: LESS
2493: AND
2494: PUSH
2495: LD_EXP 3
2499: NOT
2500: AND
2501: PUSH
2502: LD_EXP 4
2506: NOT
2507: AND
2508: IFFALSE 2533
2510: GO 2512
2512: DISABLE
// begin DialogueOn ;
2513: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2517: LD_EXP 22
2521: PPUSH
2522: LD_STRING DCorpse-Bur-1
2524: PPUSH
2525: CALL_OW 88
// DialogueOff ;
2529: CALL_OW 7
// end ;
2533: END
// every 0 0$1 trigger apeRadioKilled do var un ;
2534: LD_EXP 9
2538: IFFALSE 2857
2540: GO 2542
2542: DISABLE
2543: LD_INT 0
2545: PPUSH
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , apeRadioKilled ) ;
2546: LD_ADDR_VAR 0 1
2550: PUSH
2551: LD_INT 22
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 21
2563: PUSH
2564: LD_INT 1
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL_OW 69
2579: PPUSH
2580: LD_EXP 9
2584: PPUSH
2585: CALL_OW 74
2589: ST_TO_ADDR
// if not un in [ Kirilenkova , Belkov , Burlak , Saseda , Jaworska ] or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 31
2599: PUSH
2600: LD_EXP 27
2604: PUSH
2605: LD_EXP 22
2609: PUSH
2610: LD_EXP 24
2614: PUSH
2615: LD_EXP 25
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: IN
2627: NOT
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 21
2641: PUSH
2642: LD_INT 1
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PPUSH
2653: CALL_OW 69
2657: PUSH
2658: LD_INT 1
2660: EQUAL
2661: OR
2662: IFFALSE 2666
// exit ;
2664: GO 2857
// DialogueOn ;
2666: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2670: LD_EXP 9
2674: PPUSH
2675: CALL_OW 87
// case un of Kirilenkova :
2679: LD_VAR 0 1
2683: PUSH
2684: LD_EXP 31
2688: DOUBLE
2689: EQUAL
2690: IFTRUE 2694
2692: GO 2709
2694: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2695: LD_EXP 31
2699: PPUSH
2700: LD_STRING D2a-Kir-1
2702: PPUSH
2703: CALL_OW 88
2707: GO 2810
2709: LD_EXP 27
2713: DOUBLE
2714: EQUAL
2715: IFTRUE 2719
2717: GO 2734
2719: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2720: LD_EXP 27
2724: PPUSH
2725: LD_STRING D2a-Bel-1
2727: PPUSH
2728: CALL_OW 88
2732: GO 2810
2734: LD_EXP 22
2738: DOUBLE
2739: EQUAL
2740: IFTRUE 2744
2742: GO 2759
2744: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2745: LD_EXP 22
2749: PPUSH
2750: LD_STRING D2a-Bur-1
2752: PPUSH
2753: CALL_OW 88
2757: GO 2810
2759: LD_EXP 25
2763: DOUBLE
2764: EQUAL
2765: IFTRUE 2769
2767: GO 2784
2769: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2770: LD_EXP 25
2774: PPUSH
2775: LD_STRING D2a-RFSol1-1
2777: PPUSH
2778: CALL_OW 88
2782: GO 2810
2784: LD_EXP 24
2788: DOUBLE
2789: EQUAL
2790: IFTRUE 2794
2792: GO 2809
2794: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2795: LD_EXP 24
2799: PPUSH
2800: LD_STRING D2a-RSol1-1
2802: PPUSH
2803: CALL_OW 88
2807: GO 2810
2809: POP
// if hasGnyevko then
2810: LD_EXP 4
2814: IFFALSE 2841
// begin if IsOk ( Gnyevko ) then
2816: LD_EXP 30
2820: PPUSH
2821: CALL_OW 302
2825: IFFALSE 2839
// Say ( Gnyevko , D2a-Gny-1 ) ;
2827: LD_EXP 30
2831: PPUSH
2832: LD_STRING D2a-Gny-1
2834: PPUSH
2835: CALL_OW 88
// end else
2839: GO 2853
// Say ( Burlak , D2a-Bur-2 ) ;
2841: LD_EXP 22
2845: PPUSH
2846: LD_STRING D2a-Bur-2
2848: PPUSH
2849: CALL_OW 88
// DialogueOff ;
2853: CALL_OW 7
// end ;
2857: PPOPN 1
2859: END
// every 0 0$1 do var un , tmp ;
2860: GO 2862
2862: DISABLE
2863: LD_INT 0
2865: PPUSH
2866: PPUSH
// begin if Difficulty = 1 then
2867: LD_OWVAR 67
2871: PUSH
2872: LD_INT 1
2874: EQUAL
2875: IFFALSE 2879
// exit ;
2877: GO 3020
// wait ( 7 7$00 - ( 1 1$00 * Difficulty ) ) ;
2879: LD_INT 14700
2881: PUSH
2882: LD_INT 2100
2884: PUSH
2885: LD_OWVAR 67
2889: MUL
2890: MINUS
2891: PPUSH
2892: CALL_OW 67
// if hasGnyevko then
2896: LD_EXP 4
2900: IFFALSE 2904
// exit ;
2902: GO 3020
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
2904: LD_ADDR_VAR 0 2
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 0
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 25
2921: PUSH
2922: LD_INT 14
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PPUSH
2933: CALL_OW 69
2937: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
2938: LD_ADDR_VAR 0 1
2942: PUSH
2943: LD_VAR 0 2
2947: PPUSH
2948: LD_EXP 30
2952: PPUSH
2953: CALL_OW 74
2957: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2958: LD_INT 35
2960: PPUSH
2961: CALL_OW 67
// if hasGnyevko then
2965: LD_EXP 4
2969: IFFALSE 2982
// begin ComFree ( un ) ;
2971: LD_VAR 0 1
2975: PPUSH
2976: CALL_OW 139
// exit ;
2980: GO 3020
// end ; if not HasTask ( un ) then
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 314
2991: NOT
2992: IFFALSE 3008
// ComAttackUnit ( un , Gnyevko ) ;
2994: LD_VAR 0 1
2998: PPUSH
2999: LD_EXP 30
3003: PPUSH
3004: CALL_OW 115
// until not IsOk ( un ) ;
3008: LD_VAR 0 1
3012: PPUSH
3013: CALL_OW 302
3017: NOT
3018: IFFALSE 2958
// end ;
3020: PPOPN 2
3022: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3023: LD_INT 3
3025: PPUSH
3026: LD_EXP 30
3030: PPUSH
3031: CALL_OW 292
3035: PUSH
3036: LD_EXP 30
3040: PPUSH
3041: CALL_OW 302
3045: AND
3046: PUSH
3047: LD_EXP 4
3051: NOT
3052: AND
3053: IFFALSE 3476
3055: GO 3057
3057: DISABLE
3058: LD_INT 0
3060: PPUSH
// begin hasGnyevko := true ;
3061: LD_ADDR_EXP 4
3065: PUSH
3066: LD_INT 1
3068: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3069: LD_ADDR_VAR 0 1
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 21
3086: PUSH
3087: LD_INT 1
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PPUSH
3103: LD_EXP 30
3107: PPUSH
3108: CALL_OW 74
3112: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3113: LD_VAR 0 1
3117: PUSH
3118: LD_EXP 22
3122: PUSH
3123: LD_EXP 24
3127: PUSH
3128: LD_EXP 25
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: IN
3138: NOT
3139: IFFALSE 3151
// un := Burlak ;
3141: LD_ADDR_VAR 0 1
3145: PUSH
3146: LD_EXP 22
3150: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3151: LD_EXP 30
3155: PPUSH
3156: LD_VAR 0 1
3160: PPUSH
3161: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3165: LD_INT 10
3167: PPUSH
3168: CALL_OW 67
// DialogueOn ;
3172: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3176: LD_EXP 30
3180: PPUSH
3181: CALL_OW 87
// case un of Burlak :
3185: LD_VAR 0 1
3189: PUSH
3190: LD_EXP 22
3194: DOUBLE
3195: EQUAL
3196: IFTRUE 3200
3198: GO 3215
3200: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3201: LD_EXP 22
3205: PPUSH
3206: LD_STRING D3-Bur-1
3208: PPUSH
3209: CALL_OW 88
3213: GO 3266
3215: LD_EXP 24
3219: DOUBLE
3220: EQUAL
3221: IFTRUE 3225
3223: GO 3240
3225: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3226: LD_EXP 24
3230: PPUSH
3231: LD_STRING D3-RSol1-1
3233: PPUSH
3234: CALL_OW 88
3238: GO 3266
3240: LD_EXP 25
3244: DOUBLE
3245: EQUAL
3246: IFTRUE 3250
3248: GO 3265
3250: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3251: LD_EXP 25
3255: PPUSH
3256: LD_STRING D3-RFSol1-1
3258: PPUSH
3259: CALL_OW 88
3263: GO 3266
3265: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3266: LD_EXP 30
3270: PPUSH
3271: LD_STRING D3-Gny-1
3273: PPUSH
3274: CALL_OW 88
// if un = Burlak then
3278: LD_VAR 0 1
3282: PUSH
3283: LD_EXP 22
3287: EQUAL
3288: IFFALSE 3410
// begin if attackedByApe then
3290: LD_EXP 7
3294: IFFALSE 3310
// Say ( Burlak , D3-Bur-2 ) else
3296: LD_EXP 22
3300: PPUSH
3301: LD_STRING D3-Bur-2
3303: PPUSH
3304: CALL_OW 88
3308: GO 3342
// if apeRadioKilled then
3310: LD_EXP 9
3314: IFFALSE 3330
// Say ( Burlak , D3-Bur-2a ) else
3316: LD_EXP 22
3320: PPUSH
3321: LD_STRING D3-Bur-2a
3323: PPUSH
3324: CALL_OW 88
3328: GO 3342
// Say ( Burlak , D3-Bur-2b ) ;
3330: LD_EXP 22
3334: PPUSH
3335: LD_STRING D3-Bur-2b
3337: PPUSH
3338: CALL_OW 88
// if not joinedToBelkov then
3342: LD_EXP 3
3346: NOT
3347: IFFALSE 3363
// Say ( Burlak , D3-Bur-2c ) else
3349: LD_EXP 22
3353: PPUSH
3354: LD_STRING D3-Bur-2c
3356: PPUSH
3357: CALL_OW 88
3361: GO 3396
// if not americansDefeated then
3363: LD_EXP 10
3367: NOT
3368: IFFALSE 3384
// Say ( Burlak , D3-Bur-2d ) else
3370: LD_EXP 22
3374: PPUSH
3375: LD_STRING D3-Bur-2d
3377: PPUSH
3378: CALL_OW 88
3382: GO 3396
// Say ( Burlak , D3-Bur-2e ) ;
3384: LD_EXP 22
3388: PPUSH
3389: LD_STRING D3-Bur-2e
3391: PPUSH
3392: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3396: LD_EXP 30
3400: PPUSH
3401: LD_STRING D3-Gny-2
3403: PPUSH
3404: CALL_OW 88
// end else
3408: GO 3460
// begin if un = Saseda then
3410: LD_VAR 0 1
3414: PUSH
3415: LD_EXP 24
3419: EQUAL
3420: IFFALSE 3436
// Say ( Saseda , D3-RSol1-2 ) else
3422: LD_EXP 24
3426: PPUSH
3427: LD_STRING D3-RSol1-2
3429: PPUSH
3430: CALL_OW 88
3434: GO 3448
// Say ( Jaworska , D3-RFSol1-2 ) ;
3436: LD_EXP 25
3440: PPUSH
3441: LD_STRING D3-RFSol1-2
3443: PPUSH
3444: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3448: LD_EXP 30
3452: PPUSH
3453: LD_STRING D3-Gny-2a
3455: PPUSH
3456: CALL_OW 88
// end ; DialogueOff ;
3460: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3464: LD_EXP 30
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: CALL_OW 235
// end ;
3476: PPOPN 1
3478: END
// function GnyevkoPokryshkinScene ; begin
3479: LD_INT 0
3481: PPUSH
// gnyevkoMeetPokryshkin := true ;
3482: LD_ADDR_EXP 11
3486: PUSH
3487: LD_INT 1
3489: ST_TO_ADDR
// ComHold ( Burlak ) ;
3490: LD_EXP 22
3494: PPUSH
3495: CALL_OW 140
// InGameOn ;
3499: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3503: LD_INT 76
3505: PPUSH
3506: LD_INT 56
3508: PPUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_INT 12
3514: PPUSH
3515: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3519: LD_EXP 23
3523: PPUSH
3524: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3528: LD_EXP 30
3532: PPUSH
3533: LD_INT 6
3535: PPUSH
3536: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3540: LD_EXP 30
3544: PPUSH
3545: LD_INT 79
3547: PPUSH
3548: LD_INT 56
3550: PPUSH
3551: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3555: LD_EXP 23
3559: PPUSH
3560: LD_STRING D4-Pok-1
3562: PPUSH
3563: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3567: LD_EXP 30
3571: PPUSH
3572: LD_STRING D4-Gny-1a
3574: PPUSH
3575: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3579: LD_EXP 30
3583: PPUSH
3584: LD_STRING D4-Gny-2
3586: PPUSH
3587: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3591: LD_EXP 23
3595: PPUSH
3596: LD_STRING D4-Pok-3
3598: PPUSH
3599: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3603: LD_INT 76
3605: PPUSH
3606: LD_INT 56
3608: PPUSH
3609: LD_INT 3
3611: PPUSH
3612: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3616: LD_EXP 22
3620: PPUSH
3621: CALL_OW 87
// InGameOff ;
3625: CALL_OW 9
// ComFree ( Burlak ) ;
3629: LD_EXP 22
3633: PPUSH
3634: CALL_OW 139
// end ;
3638: LD_VAR 0 1
3642: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3643: LD_EXP 24
3647: PUSH
3648: LD_EXP 25
3652: PUSH
3653: LD_EXP 26
3657: PUSH
3658: LD_EXP 27
3662: PUSH
3663: LD_EXP 28
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PPUSH
3675: LD_INT 101
3677: PUSH
3678: LD_INT 3
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 72
3689: IFFALSE 5269
3691: GO 3693
3693: DISABLE
// begin if hasGnyevko then
3694: LD_EXP 4
3698: IFFALSE 3774
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3700: LD_EXP 22
3704: PPUSH
3705: LD_EXP 30
3709: PPUSH
3710: CALL_OW 296
3714: PUSH
3715: LD_INT 4
3717: GREATER
3718: PUSH
3719: LD_INT 6
3721: PPUSH
3722: LD_EXP 30
3726: PPUSH
3727: CALL_OW 292
3731: AND
3732: PUSH
3733: LD_INT 6
3735: PPUSH
3736: LD_EXP 22
3740: PPUSH
3741: CALL_OW 292
3745: NOT
3746: AND
3747: IFFALSE 3774
// begin GnyevkoPokryshkinScene ;
3749: CALL 3479 0 0
// repeat wait ( 0 0$1 ) ;
3753: LD_INT 35
3755: PPUSH
3756: CALL_OW 67
// until See ( 6 , Burlak ) ;
3760: LD_INT 6
3762: PPUSH
3763: LD_EXP 22
3767: PPUSH
3768: CALL_OW 292
3772: IFFALSE 3753
// end ; end ; joinedToBelkov := true ;
3774: LD_ADDR_EXP 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// Video ( true ) ;
3782: LD_INT 1
3784: PPUSH
3785: CALL 47784 0 1
// ChangeSideFog ( 6 , 3 ) ;
3789: LD_INT 6
3791: PPUSH
3792: LD_INT 3
3794: PPUSH
3795: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3799: LD_INT 76
3801: PPUSH
3802: LD_INT 56
3804: PPUSH
3805: LD_INT 3
3807: PPUSH
3808: LD_INT 12
3810: PPUSH
3811: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3815: LD_EXP 23
3819: PPUSH
3820: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
3824: LD_EXP 23
3828: PPUSH
3829: LD_EXP 22
3833: PPUSH
3834: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
3838: LD_EXP 23
3842: PPUSH
3843: LD_STRING D4-Pok-1
3845: PPUSH
3846: CALL_OW 88
// if gnyevkoMeetPokryshkin then
3850: LD_EXP 11
3854: IFFALSE 3870
// Say ( Gnyevko , D4-Gny-3 ) else
3856: LD_EXP 30
3860: PPUSH
3861: LD_STRING D4-Gny-3
3863: PPUSH
3864: CALL_OW 88
3868: GO 3926
// if hasGnyevko and IsOk ( Gnyevko ) then
3870: LD_EXP 4
3874: PUSH
3875: LD_EXP 30
3879: PPUSH
3880: CALL_OW 302
3884: AND
3885: IFFALSE 3926
// begin SetSide ( Gnyevko , 6 ) ;
3887: LD_EXP 30
3891: PPUSH
3892: LD_INT 6
3894: PPUSH
3895: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
3899: LD_EXP 30
3903: PPUSH
3904: LD_STRING D4-Gny-1
3906: PPUSH
3907: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
3911: LD_EXP 30
3915: PPUSH
3916: LD_INT 83
3918: PPUSH
3919: LD_INT 60
3921: PPUSH
3922: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
3926: LD_EXP 22
3930: PPUSH
3931: LD_EXP 23
3935: PPUSH
3936: CALL_OW 112
// repeat wait ( 3 ) ;
3940: LD_INT 3
3942: PPUSH
3943: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
3947: LD_EXP 22
3951: PPUSH
3952: LD_EXP 23
3956: PPUSH
3957: CALL_OW 296
3961: PUSH
3962: LD_INT 5
3964: LESS
3965: IFFALSE 3940
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3967: LD_EXP 23
3971: PPUSH
3972: LD_EXP 22
3976: PPUSH
3977: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
3981: LD_EXP 22
3985: PPUSH
3986: LD_EXP 23
3990: PPUSH
3991: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3995: LD_EXP 22
3999: PPUSH
4000: LD_STRING D4-Bur-3
4002: PPUSH
4003: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4007: LD_EXP 23
4011: PPUSH
4012: LD_STRING D4-Pok-4
4014: PPUSH
4015: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4019: LD_EXP 32
4023: PPUSH
4024: LD_INT 31
4026: PPUSH
4027: LD_INT 51
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: CALL_OW 48
// wait ( 0 0$2 ) ;
4037: LD_INT 70
4039: PPUSH
4040: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4044: LD_EXP 22
4048: PPUSH
4049: LD_STRING D4-Bur-4
4051: PPUSH
4052: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4056: LD_EXP 23
4060: PPUSH
4061: LD_STRING D4-Pok-5
4063: PPUSH
4064: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4068: LD_EXP 32
4072: PPUSH
4073: LD_STRING D4-Sol1-5
4075: PPUSH
4076: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4080: LD_EXP 23
4084: PPUSH
4085: LD_STRING D4-Pok-6
4087: PPUSH
4088: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4092: LD_EXP 23
4096: PPUSH
4097: LD_STRING D4-Pok-6a
4099: PPUSH
4100: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4104: LD_EXP 22
4108: PPUSH
4109: LD_STRING D4-Bur-6
4111: PPUSH
4112: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4116: LD_EXP 23
4120: PPUSH
4121: LD_STRING D4-Pok-7
4123: PPUSH
4124: CALL_OW 88
// Video ( false ) ;
4128: LD_INT 0
4130: PPUSH
4131: CALL 47784 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4135: LD_INT 76
4137: PPUSH
4138: LD_INT 56
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4148: LD_STRING M2
4150: PPUSH
4151: CALL_OW 337
// ComFree ( Burlak ) ;
4155: LD_EXP 22
4159: PPUSH
4160: CALL_OW 139
// followPokryshkin := true ;
4164: LD_ADDR_EXP 12
4168: PUSH
4169: LD_INT 1
4171: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4172: LD_INT 70
4174: PPUSH
4175: CALL_OW 67
// MoveToHill ;
4179: CALL 9752 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4183: LD_INT 65
4185: PPUSH
4186: LD_INT 57
4188: PPUSH
4189: LD_INT 3
4191: PPUSH
4192: LD_INT 9
4194: NEG
4195: PPUSH
4196: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4200: LD_INT 35
4202: PPUSH
4203: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4207: LD_EXP 23
4211: PPUSH
4212: LD_INT 65
4214: PPUSH
4215: LD_INT 59
4217: PPUSH
4218: CALL_OW 297
4222: PUSH
4223: LD_INT 5
4225: LESS
4226: IFFALSE 4200
// followPokryshkin := false ;
4228: LD_ADDR_EXP 12
4232: PUSH
4233: LD_INT 0
4235: ST_TO_ADDR
// InGameOn ;
4236: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4240: LD_EXP 23
4244: PPUSH
4245: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4249: LD_EXP 22
4253: PPUSH
4254: LD_INT 69
4256: PPUSH
4257: LD_INT 65
4259: PPUSH
4260: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4264: LD_EXP 32
4268: PPUSH
4269: LD_INT 58
4271: PPUSH
4272: LD_INT 57
4274: PPUSH
4275: CALL_OW 111
// repeat wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4286: LD_EXP 32
4290: PPUSH
4291: LD_INT 58
4293: PPUSH
4294: LD_INT 57
4296: PPUSH
4297: CALL_OW 297
4301: PUSH
4302: LD_INT 4
4304: LESS
4305: IFFALSE 4279
// SetLives ( Brown , 300 ) ;
4307: LD_EXP 32
4311: PPUSH
4312: LD_INT 300
4314: PPUSH
4315: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4319: LD_EXP 32
4323: PPUSH
4324: LD_STRING D5-Sol1-1
4326: PPUSH
4327: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4331: LD_EXP 23
4335: PPUSH
4336: LD_STRING D5-Pok-1
4338: PPUSH
4339: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4343: LD_EXP 23
4347: PUSH
4348: LD_EXP 27
4352: PUSH
4353: LD_EXP 26
4357: PUSH
4358: LD_EXP 25
4362: PUSH
4363: LD_EXP 24
4367: PUSH
4368: LD_EXP 28
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: PPUSH
4381: LD_EXP 32
4385: PPUSH
4386: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4390: LD_EXP 32
4394: PPUSH
4395: LD_STRING D5-Sol1-2
4397: PPUSH
4398: CALL_OW 91
// KillUnit ( Brown ) ;
4402: LD_EXP 32
4406: PPUSH
4407: CALL_OW 66
// ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4411: LD_EXP 23
4415: PUSH
4416: LD_EXP 27
4420: PUSH
4421: LD_EXP 26
4425: PUSH
4426: LD_EXP 25
4430: PUSH
4431: LD_EXP 24
4435: PUSH
4436: LD_EXP 28
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 138
// if hasGnyevko then
4453: LD_EXP 4
4457: IFFALSE 4468
// ComWalk ( Gnyevko ) ;
4459: LD_EXP 30
4463: PPUSH
4464: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4468: LD_EXP 23
4472: PPUSH
4473: LD_INT 60
4475: PPUSH
4476: LD_INT 56
4478: PPUSH
4479: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4483: LD_INT 18
4485: PPUSH
4486: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4490: LD_EXP 27
4494: PPUSH
4495: LD_INT 61
4497: PPUSH
4498: LD_INT 59
4500: PPUSH
4501: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4505: LD_EXP 23
4509: PPUSH
4510: LD_INT 58
4512: PPUSH
4513: LD_INT 57
4515: PPUSH
4516: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4520: LD_EXP 27
4524: PPUSH
4525: LD_INT 58
4527: PPUSH
4528: LD_INT 57
4530: PPUSH
4531: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4535: LD_EXP 22
4539: PPUSH
4540: LD_INT 62
4542: PPUSH
4543: LD_INT 58
4545: PPUSH
4546: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4550: LD_EXP 22
4554: PPUSH
4555: LD_INT 61
4557: PPUSH
4558: LD_INT 58
4560: PPUSH
4561: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4565: LD_EXP 27
4569: PPUSH
4570: LD_INT 58
4572: PPUSH
4573: LD_INT 57
4575: PPUSH
4576: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4580: LD_EXP 23
4584: PPUSH
4585: LD_STRING D4-Pok-2
4587: PPUSH
4588: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4592: LD_INT 10
4594: PPUSH
4595: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4599: LD_EXP 22
4603: PPUSH
4604: LD_STRING D5-Bur-2
4606: PPUSH
4607: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4611: LD_EXP 23
4615: PPUSH
4616: LD_STRING D5-Pok-2
4618: PPUSH
4619: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4623: LD_EXP 27
4627: PPUSH
4628: LD_EXP 22
4632: PPUSH
4633: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4637: LD_EXP 27
4641: PPUSH
4642: LD_STRING D5-Bel-2
4644: PPUSH
4645: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4649: LD_EXP 23
4653: PPUSH
4654: LD_EXP 27
4658: PPUSH
4659: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4663: LD_EXP 23
4667: PPUSH
4668: LD_STRING D5-Pok-3
4670: PPUSH
4671: CALL_OW 88
// if hasGnyevko then
4675: LD_EXP 4
4679: IFFALSE 4707
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4681: LD_EXP 30
4685: PPUSH
4686: LD_EXP 22
4690: PPUSH
4691: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4695: LD_EXP 30
4699: PPUSH
4700: LD_STRING D5-Gny-3
4702: PPUSH
4703: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4707: LD_EXP 22
4711: PPUSH
4712: LD_STRING D5-Bur-3
4714: PPUSH
4715: CALL_OW 88
// wait ( 0 0$2 ) ;
4719: LD_INT 70
4721: PPUSH
4722: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4726: LD_EXP 23
4730: PPUSH
4731: LD_INT 78
4733: PPUSH
4734: LD_INT 57
4736: PPUSH
4737: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4741: LD_EXP 23
4745: PPUSH
4746: LD_STRING D6-Pok-1
4748: PPUSH
4749: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4753: LD_EXP 22
4757: PPUSH
4758: LD_INT 75
4760: PPUSH
4761: LD_INT 56
4763: PPUSH
4764: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4768: LD_EXP 22
4772: PPUSH
4773: LD_INT 83
4775: PPUSH
4776: LD_INT 62
4778: PPUSH
4779: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
4783: LD_EXP 27
4787: PPUSH
4788: LD_INT 80
4790: PPUSH
4791: LD_INT 64
4793: PPUSH
4794: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
4798: LD_EXP 25
4802: PPUSH
4803: LD_INT 83
4805: PPUSH
4806: LD_INT 67
4808: PPUSH
4809: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
4813: LD_EXP 26
4817: PPUSH
4818: LD_INT 81
4820: PPUSH
4821: LD_INT 52
4823: PPUSH
4824: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
4828: LD_EXP 24
4832: PPUSH
4833: LD_INT 78
4835: PPUSH
4836: LD_INT 54
4838: PPUSH
4839: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
4843: LD_EXP 28
4847: PPUSH
4848: LD_INT 75
4850: PPUSH
4851: LD_INT 62
4853: PPUSH
4854: CALL_OW 111
// if hasGnyevko then
4858: LD_EXP 4
4862: IFFALSE 4893
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
4864: LD_EXP 30
4868: PPUSH
4869: LD_INT 77
4871: PPUSH
4872: LD_INT 60
4874: PPUSH
4875: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
4879: LD_EXP 30
4883: PPUSH
4884: LD_EXP 22
4888: PPUSH
4889: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
4893: LD_EXP 22
4897: PPUSH
4898: LD_STRING D6-Bur-1
4900: PPUSH
4901: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
4905: LD_INT 65
4907: PPUSH
4908: LD_INT 57
4910: PPUSH
4911: LD_INT 3
4913: PPUSH
4914: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
4918: LD_EXP 23
4922: PPUSH
4923: LD_INT 87
4925: PPUSH
4926: LD_INT 66
4928: PPUSH
4929: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
4933: LD_EXP 26
4937: PPUSH
4938: LD_INT 92
4940: PPUSH
4941: LD_INT 60
4943: PPUSH
4944: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
4948: LD_EXP 24
4952: PPUSH
4953: LD_INT 90
4955: PPUSH
4956: LD_INT 64
4958: PPUSH
4959: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
4963: LD_EXP 25
4967: PPUSH
4968: LD_INT 87
4970: PPUSH
4971: LD_INT 73
4973: PPUSH
4974: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
4978: LD_EXP 28
4982: PPUSH
4983: LD_INT 87
4985: PPUSH
4986: LD_INT 69
4988: PPUSH
4989: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
4993: LD_EXP 27
4997: PPUSH
4998: LD_INT 90
5000: PPUSH
5001: LD_INT 71
5003: PPUSH
5004: CALL_OW 171
// CenterOnXY ( 84 , 64 ) ;
5008: LD_INT 84
5010: PPUSH
5011: LD_INT 64
5013: PPUSH
5014: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5018: LD_EXP 23
5022: PPUSH
5023: LD_STRING D6-Pok-2
5025: PPUSH
5026: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5030: LD_EXP 25
5034: PPUSH
5035: LD_INT 113
5037: PPUSH
5038: LD_INT 104
5040: PPUSH
5041: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5045: LD_EXP 28
5049: PPUSH
5050: LD_INT 107
5052: PPUSH
5053: LD_INT 106
5055: PPUSH
5056: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5060: LD_EXP 24
5064: PPUSH
5065: LD_INT 125
5067: PPUSH
5068: LD_INT 97
5070: PPUSH
5071: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5075: LD_EXP 26
5079: PPUSH
5080: LD_INT 124
5082: PPUSH
5083: LD_INT 101
5085: PPUSH
5086: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5090: LD_EXP 27
5094: PPUSH
5095: LD_INT 119
5097: PPUSH
5098: LD_INT 101
5100: PPUSH
5101: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5105: LD_EXP 22
5109: PPUSH
5110: LD_EXP 23
5114: PPUSH
5115: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5119: LD_EXP 27
5123: PPUSH
5124: LD_STRING D6-Bel-2
5126: PPUSH
5127: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5131: LD_EXP 23
5135: PPUSH
5136: LD_INT 119
5138: PPUSH
5139: LD_INT 93
5141: PPUSH
5142: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5146: LD_EXP 22
5150: PPUSH
5151: LD_STRING D6-Bur-2
5153: PPUSH
5154: CALL_OW 88
// CenterOnXY ( 105 , 82 ) ;
5158: LD_INT 105
5160: PPUSH
5161: LD_INT 82
5163: PPUSH
5164: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5168: LD_EXP 23
5172: PPUSH
5173: LD_STRING D6-Pok-3
5175: PPUSH
5176: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5180: LD_EXP 23
5184: PPUSH
5185: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5189: LD_EXP 29
5193: PPUSH
5194: LD_STRING D6-Kur-3
5196: PPUSH
5197: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5201: LD_EXP 25
5205: PUSH
5206: LD_EXP 27
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 22
5220: PUSH
5221: LD_EXP 26
5225: PUSH
5226: LD_EXP 28
5230: PUSH
5231: LD_EXP 30
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5249: LD_EXP 23
5253: PPUSH
5254: LD_STRING D6-Pok-4
5256: PPUSH
5257: CALL_OW 88
// InGameOff ;
5261: CALL_OW 9
// AttackOnTimsBase ;
5265: CALL 5270 0 0
// end ;
5269: END
// function AttackOnTimsBase ; var i , tmp ; begin
5270: LD_INT 0
5272: PPUSH
5273: PPUSH
5274: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5275: LD_INT 6
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: LD_INT 2
5283: PPUSH
5284: LD_INT 1
5286: PPUSH
5287: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5291: LD_INT 3
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: LD_INT 2
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_INT 22
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PUSH
5322: LD_INT 21
5324: PUSH
5325: LD_INT 1
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 69
5340: PUSH
5341: LD_EXP 23
5345: DIFF
5346: ST_TO_ADDR
// for i in tmp do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_VAR 0 3
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5374
// DoNotAttack ( 1 , i ) ;
5360: LD_INT 1
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 471
5372: GO 5357
5374: POP
5375: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_INT 65
5383: PPUSH
5384: LD_INT 40
5386: PPUSH
5387: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5391: LD_VAR 0 3
5395: PPUSH
5396: LD_INT 75
5398: PPUSH
5399: LD_INT 51
5401: PPUSH
5402: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5406: LD_EXP 27
5410: PPUSH
5411: LD_STRING D6-Bel-4
5413: PPUSH
5414: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5418: LD_EXP 23
5422: PPUSH
5423: LD_INT 57
5425: PPUSH
5426: LD_INT 30
5428: PPUSH
5429: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5433: LD_VAR 0 3
5437: PPUSH
5438: LD_INT 60
5440: PPUSH
5441: LD_INT 35
5443: PPUSH
5444: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5448: LD_INT 35
5450: PPUSH
5451: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5455: LD_EXP 23
5459: PPUSH
5460: LD_INT 65
5462: PPUSH
5463: LD_INT 40
5465: PPUSH
5466: CALL_OW 297
5470: PUSH
5471: LD_INT 4
5473: LESS
5474: IFFALSE 5448
// Say ( Pokryshkin , D7-Pok-1 ) ;
5476: LD_EXP 23
5480: PPUSH
5481: LD_STRING D7-Pok-1
5483: PPUSH
5484: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5488: LD_INT 10
5490: PPUSH
5491: CALL_OW 67
// Say ( Holland , D7-FSol1-1 ) ;
5495: LD_EXP 34
5499: PPUSH
5500: LD_STRING D7-FSol1-1
5502: PPUSH
5503: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5507: LD_INT 35
5509: PPUSH
5510: CALL_OW 67
// until IsDying ( Pokryshkin ) ;
5514: LD_EXP 23
5518: PPUSH
5519: CALL_OW 303
5523: IFFALSE 5507
// Say ( Belkov , D7a-Bel-1 ) ;
5525: LD_EXP 27
5529: PPUSH
5530: LD_STRING D7a-Bel-1
5532: PPUSH
5533: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5537: LD_VAR 0 3
5541: PPUSH
5542: LD_INT 85
5544: PPUSH
5545: LD_INT 63
5547: PPUSH
5548: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5552: LD_EXP 24
5556: PPUSH
5557: LD_STRING D7a-RSol1-1
5559: PPUSH
5560: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5564: LD_EXP 34
5568: PPUSH
5569: LD_STRING D7a-FSol1-1
5571: PPUSH
5572: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5576: LD_INT 35
5578: PPUSH
5579: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5583: LD_EXP 27
5587: PPUSH
5588: LD_INT 85
5590: PPUSH
5591: LD_INT 63
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_INT 8
5601: LESS
5602: IFFALSE 5576
// for i in tmp do
5604: LD_ADDR_VAR 0 2
5608: PUSH
5609: LD_VAR 0 3
5613: PUSH
5614: FOR_IN
5615: IFFALSE 5631
// NormalAttack ( 1 , i ) ;
5617: LD_INT 1
5619: PPUSH
5620: LD_VAR 0 2
5624: PPUSH
5625: CALL_OW 472
5629: GO 5614
5631: POP
5632: POP
// InGameOn ;
5633: CALL_OW 8
// CenterNowOnUnits ( Belkov ) ;
5637: LD_EXP 27
5641: PPUSH
5642: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5646: LD_EXP 27
5650: PPUSH
5651: LD_STRING D7b-Bel-1
5653: PPUSH
5654: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5658: LD_EXP 27
5662: PPUSH
5663: LD_EXP 25
5667: PPUSH
5668: CALL_OW 119
// for i in tmp diff Belkov do
5672: LD_ADDR_VAR 0 2
5676: PUSH
5677: LD_VAR 0 3
5681: PUSH
5682: LD_EXP 27
5686: DIFF
5687: PUSH
5688: FOR_IN
5689: IFFALSE 5707
// ComTurnUnit ( i , Belkov ) ;
5691: LD_VAR 0 2
5695: PPUSH
5696: LD_EXP 27
5700: PPUSH
5701: CALL_OW 119
5705: GO 5688
5707: POP
5708: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5709: LD_EXP 25
5713: PPUSH
5714: LD_STRING D7b-FSol1-1
5716: PPUSH
5717: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5721: LD_EXP 27
5725: PPUSH
5726: LD_STRING D7b-Bel-2
5728: PPUSH
5729: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5733: LD_EXP 24
5737: PPUSH
5738: LD_STRING D7b-RSol1-2
5740: PPUSH
5741: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5745: LD_EXP 27
5749: PPUSH
5750: LD_EXP 22
5754: PPUSH
5755: CALL_OW 296
5759: PUSH
5760: LD_INT 10
5762: GREATER
5763: IFFALSE 5861
// begin Say ( Belkov , D7b-Bel-3 ) ;
5765: LD_EXP 27
5769: PPUSH
5770: LD_STRING D7b-Bel-3
5772: PPUSH
5773: CALL_OW 88
// InGameOff ;
5777: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
5781: LD_INT 35
5783: PPUSH
5784: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
5788: LD_EXP 22
5792: PPUSH
5793: LD_EXP 27
5797: PPUSH
5798: CALL_OW 296
5802: PUSH
5803: LD_INT 10
5805: LESSEQUAL
5806: IFFALSE 5781
// InGameOn ;
5808: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
5812: LD_EXP 22
5816: PPUSH
5817: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
5821: LD_EXP 22
5825: PPUSH
5826: LD_EXP 27
5830: PPUSH
5831: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
5835: LD_EXP 27
5839: PPUSH
5840: LD_EXP 22
5844: PPUSH
5845: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
5849: LD_EXP 27
5853: PPUSH
5854: LD_STRING D7b-Bel-3a
5856: PPUSH
5857: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
5861: LD_EXP 22
5865: PPUSH
5866: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
5870: LD_EXP 22
5874: PPUSH
5875: LD_EXP 27
5879: PPUSH
5880: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
5884: LD_EXP 22
5888: PPUSH
5889: LD_STRING D7b-Bur-3
5891: PPUSH
5892: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
5896: LD_EXP 22
5900: PPUSH
5901: LD_EXP 27
5905: PPUSH
5906: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
5910: LD_VAR 0 3
5914: PPUSH
5915: LD_EXP 22
5919: PPUSH
5920: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
5924: LD_EXP 27
5928: PPUSH
5929: LD_STRING D7b-Bel-4
5931: PPUSH
5932: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5936: LD_EXP 22
5940: PPUSH
5941: LD_STRING D7b-Bur-4
5943: PPUSH
5944: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5948: LD_EXP 27
5952: PPUSH
5953: LD_STRING D7b-Bel-5
5955: PPUSH
5956: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING D7b-FSol1-5
5967: PPUSH
5968: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5972: LD_EXP 27
5976: PPUSH
5977: LD_STRING D7b-Bel-6
5979: PPUSH
5980: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5984: LD_EXP 22
5988: PPUSH
5989: LD_STRING D7b-Bur-6
5991: PPUSH
5992: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5996: LD_EXP 24
6000: PPUSH
6001: LD_STRING D7b-RSol1-6
6003: PPUSH
6004: CALL_OW 88
// InGameOff ;
6008: CALL_OW 9
// for i in tmp do
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: FOR_IN
6023: IFFALSE 6039
// SetSide ( i , 3 ) ;
6025: LD_VAR 0 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL_OW 235
6037: GO 6022
6039: POP
6040: POP
// ChangeMissionObjectives ( M3 ) ;
6041: LD_STRING M3
6043: PPUSH
6044: CALL_OW 337
// burlakAsCommander := true ;
6048: LD_ADDR_EXP 14
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// end ;
6056: LD_VAR 0 1
6060: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6061: LD_EXP 12
6065: PUSH
6066: LD_EXP 23
6070: PPUSH
6071: LD_EXP 22
6075: PPUSH
6076: CALL_OW 296
6080: PUSH
6081: LD_INT 10
6083: GREATER
6084: AND
6085: IFFALSE 6231
6087: GO 6089
6089: DISABLE
// begin InGameOn ;
6090: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6094: LD_EXP 23
6098: PPUSH
6099: LD_EXP 22
6103: PPUSH
6104: CALL_OW 119
// ComHold ( Burlak ) ;
6108: LD_EXP 22
6112: PPUSH
6113: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6117: LD_EXP 23
6121: PPUSH
6122: LD_STRING DSplit-Pok-1
6124: PPUSH
6125: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6129: LD_EXP 22
6133: PPUSH
6134: LD_EXP 23
6138: PPUSH
6139: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6143: LD_EXP 22
6147: PPUSH
6148: LD_STRING DSplit-Bur-1
6150: PPUSH
6151: CALL_OW 88
// repeat wait ( 3 ) ;
6155: LD_INT 3
6157: PPUSH
6158: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6162: LD_EXP 23
6166: PPUSH
6167: LD_EXP 22
6171: PPUSH
6172: CALL_OW 296
6176: PUSH
6177: LD_INT 6
6179: LESS
6180: IFFALSE 6155
// InGameOff ;
6182: CALL_OW 9
// ComFree ( Burlak ) ;
6186: LD_EXP 22
6190: PPUSH
6191: CALL_OW 139
// if IsOk ( Brown ) then
6195: LD_EXP 32
6199: PPUSH
6200: CALL_OW 302
6204: IFFALSE 6230
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6206: LD_EXP 23
6210: PPUSH
6211: LD_INT 65
6213: PPUSH
6214: LD_INT 59
6216: PPUSH
6217: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6221: LD_EXP 23
6225: PPUSH
6226: CALL_OW 197
// end ; enable ;
6230: ENABLE
// end ;
6231: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6232: LD_EXP 13
6236: PUSH
6237: LD_EXP 23
6241: PPUSH
6242: CALL_OW 302
6246: AND
6247: PUSH
6248: LD_EXP 3
6252: AND
6253: IFFALSE 6285
6255: GO 6257
6257: DISABLE
// begin DialogueOn ;
6258: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6262: LD_EXP 23
6266: PPUSH
6267: LD_STRING DAttack-Pok-1
6269: PPUSH
6270: CALL_OW 88
// DialogueOff ;
6274: CALL_OW 7
// YouLost ( Ally ) ;
6278: LD_STRING Ally
6280: PPUSH
6281: CALL_OW 104
// end ;
6285: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6286: LD_INT 18
6288: PPUSH
6289: LD_INT 22
6291: PUSH
6292: LD_INT 3
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 70
6317: PUSH
6318: LD_INT 3
6320: PPUSH
6321: CALL_OW 302
6325: AND
6326: IFFALSE 6338
6328: GO 6330
6330: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6331: LD_STRING ACH_BACKENTRANCE
6333: PPUSH
6334: CALL_OW 543
6338: END
// every 0 0$1 trigger burlakAsCommander do
6339: LD_EXP 14
6343: IFFALSE 6507
6345: GO 6347
6347: DISABLE
// begin if Difficulty > 1 then
6348: LD_OWVAR 67
6352: PUSH
6353: LD_INT 1
6355: GREATER
6356: IFFALSE 6368
// SetLives ( usBun1 , 1000 ) ;
6358: LD_INT 3
6360: PPUSH
6361: LD_INT 1000
6363: PPUSH
6364: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6375: LD_INT 1
6377: PPUSH
6378: LD_INT 22
6380: PUSH
6381: LD_INT 3
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 21
6390: PUSH
6391: LD_INT 1
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: PPUSH
6407: CALL 51095 0 2
6411: IFFALSE 6368
// Say ( Holland , D8-FSol1-1 ) ;
6413: LD_EXP 34
6417: PPUSH
6418: LD_STRING D8-FSol1-1
6420: PPUSH
6421: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6425: LD_EXP 33
6429: PPUSH
6430: LD_STRING D8-Glad-1
6432: PPUSH
6433: CALL_OW 88
// activeAmericanScript := true ;
6437: LD_ADDR_EXP 15
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6445: LD_EXP 22
6449: PPUSH
6450: LD_STRING D8-Bur-1
6452: PPUSH
6453: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6457: LD_INT 70
6459: PPUSH
6460: CALL_OW 67
// if not IsOk ( usBun1 ) then
6464: LD_INT 3
6466: PPUSH
6467: CALL_OW 302
6471: NOT
6472: IFFALSE 6476
// exit ;
6474: GO 6507
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6476: LD_INT 14
6478: PPUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 3
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PPUSH
6489: CALL_OW 70
6493: IFFALSE 6457
// Say ( Holland , D8-FSol1-2 ) ;
6495: LD_EXP 34
6499: PPUSH
6500: LD_STRING D8-FSol1-2
6502: PPUSH
6503: CALL_OW 88
// end ;
6507: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6508: LD_EXP 33
6512: PPUSH
6513: LD_INT 15
6515: PPUSH
6516: CALL_OW 308
6520: PUSH
6521: LD_EXP 33
6525: PPUSH
6526: LD_INT 71
6528: PPUSH
6529: LD_INT 1
6531: PPUSH
6532: CALL_OW 307
6536: OR
6537: IFFALSE 6569
6539: GO 6541
6541: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6542: LD_EXP 33
6546: PPUSH
6547: CALL_OW 64
// gladstoneEscaped := true ;
6551: LD_ADDR_EXP 16
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6559: LD_INT 1
6561: PPUSH
6562: LD_STRING 01_GladstoneEscaped
6564: PPUSH
6565: CALL_OW 39
// end ;
6569: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6570: LD_EXP 34
6574: PPUSH
6575: LD_INT 15
6577: PPUSH
6578: CALL_OW 308
6582: PUSH
6583: LD_EXP 34
6587: PPUSH
6588: LD_INT 72
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: CALL_OW 307
6598: OR
6599: IFFALSE 6631
6601: GO 6603
6603: DISABLE
// begin RemoveUnit ( Holland ) ;
6604: LD_EXP 34
6608: PPUSH
6609: CALL_OW 64
// hollandEscaped := true ;
6613: LD_ADDR_EXP 17
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6621: LD_INT 1
6623: PPUSH
6624: LD_STRING 01_HollandEscaped
6626: PPUSH
6627: CALL_OW 39
// end ;
6631: END
// every 0 0$1 trigger IsInArea ( Frank , escapeArea ) or IsAt ( Frank , 70 , 1 ) do
6632: LD_EXP 35
6636: PPUSH
6637: LD_INT 15
6639: PPUSH
6640: CALL_OW 308
6644: PUSH
6645: LD_EXP 35
6649: PPUSH
6650: LD_INT 70
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: CALL_OW 307
6660: OR
6661: IFFALSE 6693
6663: GO 6665
6665: DISABLE
// begin RemoveUnit ( Frank ) ;
6666: LD_EXP 35
6670: PPUSH
6671: CALL_OW 64
// frankEscaped := true ;
6675: LD_ADDR_EXP 18
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// SaveVariable ( 1 , 01_FrankEscaped ) ;
6683: LD_INT 1
6685: PPUSH
6686: LD_STRING 01_FrankEscaped
6688: PPUSH
6689: CALL_OW 39
// end ;
6693: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6694: LD_INT 3
6696: PPUSH
6697: CALL_OW 302
6701: NOT
6702: IFFALSE 8343
6704: GO 6706
6706: DISABLE
6707: LD_INT 0
6709: PPUSH
6710: PPUSH
6711: PPUSH
// begin activeAmericanScript := false ;
6712: LD_ADDR_EXP 15
6716: PUSH
6717: LD_INT 0
6719: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6720: LD_EXP 33
6724: PPUSH
6725: CALL_OW 310
6729: IFFALSE 6740
// ComExitBuilding ( Gladstone ) ;
6731: LD_EXP 33
6735: PPUSH
6736: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
6740: LD_EXP 33
6744: PPUSH
6745: LD_INT 71
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
6755: LD_EXP 34
6759: PPUSH
6760: LD_INT 72
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: CALL_OW 111
// ComMoveXY ( Frank , 70 , 1 ) ;
6770: LD_EXP 35
6774: PPUSH
6775: LD_INT 70
6777: PPUSH
6778: LD_INT 1
6780: PPUSH
6781: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
6785: LD_EXP 34
6789: PPUSH
6790: LD_STRING D8-FSol1-2a
6792: PPUSH
6793: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
6797: LD_EXP 33
6801: PPUSH
6802: LD_STRING D8-Glad-2
6804: PPUSH
6805: CALL_OW 88
// wait ( 0 0$1 ) ;
6809: LD_INT 35
6811: PPUSH
6812: CALL_OW 67
// DialogueOn ;
6816: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
6820: LD_EXP 33
6824: PPUSH
6825: CALL_OW 250
6829: PPUSH
6830: LD_EXP 33
6834: PPUSH
6835: CALL_OW 251
6839: PPUSH
6840: LD_INT 3
6842: PPUSH
6843: LD_INT 3
6845: NEG
6846: PPUSH
6847: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
6851: LD_EXP 33
6855: PPUSH
6856: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
6860: LD_EXP 22
6864: PPUSH
6865: LD_STRING D8-Bur-2
6867: PPUSH
6868: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
6872: LD_EXP 33
6876: PPUSH
6877: CALL_OW 250
6881: PPUSH
6882: LD_EXP 33
6886: PPUSH
6887: CALL_OW 251
6891: PPUSH
6892: LD_INT 3
6894: PPUSH
6895: CALL_OW 331
// DialogueOff ;
6899: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
6903: LD_INT 35
6905: PPUSH
6906: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
6910: LD_EXP 33
6914: PPUSH
6915: CALL_OW 302
6919: NOT
6920: PUSH
6921: LD_EXP 34
6925: PPUSH
6926: CALL_OW 302
6930: NOT
6931: AND
6932: IFFALSE 6903
// if gladstoneEscaped and hollandEscaped then
6934: LD_EXP 16
6938: PUSH
6939: LD_EXP 17
6943: AND
6944: IFFALSE 6960
// Say ( Burlak , D9-Bur-1c ) else
6946: LD_EXP 22
6950: PPUSH
6951: LD_STRING D9-Bur-1c
6953: PPUSH
6954: CALL_OW 88
6958: GO 7012
// if hollandEscaped then
6960: LD_EXP 17
6964: IFFALSE 6980
// Say ( Burlak , D9-Bur-1b ) else
6966: LD_EXP 22
6970: PPUSH
6971: LD_STRING D9-Bur-1b
6973: PPUSH
6974: CALL_OW 88
6978: GO 7012
// if gladstoneEscaped then
6980: LD_EXP 16
6984: IFFALSE 7000
// Say ( Burlak , D9-Bur-1a ) else
6986: LD_EXP 22
6990: PPUSH
6991: LD_STRING D9-Bur-1a
6993: PPUSH
6994: CALL_OW 88
6998: GO 7012
// Say ( Burlak , D9-Bur-1 ) ;
7000: LD_EXP 22
7004: PPUSH
7005: LD_STRING D9-Bur-1
7007: PPUSH
7008: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7019: LD_INT 22
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 50
7031: PUSH
7032: EMPTY
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: NOT
7044: IFFALSE 7012
// DialogueOn ;
7046: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7050: LD_EXP 27
7054: PPUSH
7055: LD_STRING D10-Bel-1
7057: PPUSH
7058: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7062: LD_EXP 22
7066: PPUSH
7067: LD_STRING D10-Bur-1
7069: PPUSH
7070: CALL_OW 88
// if IsOk ( Belkov ) then
7074: LD_EXP 27
7078: PPUSH
7079: CALL_OW 302
7083: IFFALSE 7099
// Say ( Belkov , D10-Bel-1a ) else
7085: LD_EXP 27
7089: PPUSH
7090: LD_STRING D10-Bel-1a
7092: PPUSH
7093: CALL_OW 88
7097: GO 7172
// if IsOk ( Saseda ) then
7099: LD_EXP 24
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Saseda , D10-RSol1-1 ) else
7110: LD_EXP 24
7114: PPUSH
7115: LD_STRING D10-RSol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7172
// if IsOk ( Balei ) then
7124: LD_EXP 26
7128: PPUSH
7129: CALL_OW 302
7133: IFFALSE 7149
// Say ( Balei , D10-RSol1-1 ) else
7135: LD_EXP 26
7139: PPUSH
7140: LD_STRING D10-RSol1-1
7142: PPUSH
7143: CALL_OW 88
7147: GO 7172
// if IsOk ( Jaunzeme ) then
7149: LD_EXP 28
7153: PPUSH
7154: CALL_OW 302
7158: IFFALSE 7172
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7160: LD_EXP 28
7164: PPUSH
7165: LD_STRING D10-RSol1-1
7167: PPUSH
7168: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7172: LD_ADDR_VAR 0 1
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 25
7189: PUSH
7190: LD_INT 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 26
7199: PUSH
7200: LD_INT 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PUSH
7217: LD_EXP 22
7221: PUSH
7222: LD_EXP 30
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: DIFF
7231: ST_TO_ADDR
// if tmp then
7232: LD_VAR 0 1
7236: IFFALSE 7250
// Say ( Burlak , D10-Bur-2 ) ;
7238: LD_EXP 22
7242: PPUSH
7243: LD_STRING D10-Bur-2
7245: PPUSH
7246: CALL_OW 88
// DialogueOff ;
7250: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7254: LD_EXP 16
7258: PUSH
7259: LD_EXP 17
7263: OR
7264: IFFALSE 7275
// ChangeMissionObjectives ( M4b ) else
7266: LD_STRING M4b
7268: PPUSH
7269: CALL_OW 337
7273: GO 7282
// ChangeMissionObjectives ( M4a ) ;
7275: LD_STRING M4a
7277: PPUSH
7278: CALL_OW 337
// canEnd := true ;
7282: LD_ADDR_EXP 19
7286: PUSH
7287: LD_INT 1
7289: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7290: LD_INT 16
7292: PPUSH
7293: LD_INT 1
7295: PPUSH
7296: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7300: LD_INT 700
7302: PPUSH
7303: LD_INT 1400
7305: PPUSH
7306: CALL_OW 12
7310: PPUSH
7311: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7315: LD_INT 35
7317: PPUSH
7318: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7322: LD_EXP 31
7326: PPUSH
7327: LD_INT 12
7329: PPUSH
7330: LD_INT 1
7332: PPUSH
7333: CALL_OW 49
7337: IFFALSE 7315
// wait ( 0 0$2 ) ;
7339: LD_INT 70
7341: PPUSH
7342: CALL_OW 67
// if not See ( 3 , Kirilenkova ) then
7346: LD_INT 3
7348: PPUSH
7349: LD_EXP 31
7353: PPUSH
7354: CALL_OW 292
7358: NOT
7359: IFFALSE 7810
// begin DialogueOn ;
7361: CALL_OW 6
// InGameOn ;
7365: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7369: LD_EXP 31
7373: PPUSH
7374: LD_STRING D11b-Kir-1
7376: PPUSH
7377: CALL_OW 586
// if IsOk ( Belkov ) then
7381: LD_EXP 27
7385: PPUSH
7386: CALL_OW 302
7390: IFFALSE 7418
// begin Say ( Belkov , D11b-Bel-1 ) ;
7392: LD_EXP 27
7396: PPUSH
7397: LD_STRING D11b-Bel-1
7399: PPUSH
7400: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7404: LD_EXP 27
7408: PPUSH
7409: LD_STRING D11b-Bel-1a
7411: PPUSH
7412: CALL_OW 88
// end else
7416: GO 7491
// if IsOk ( Jaworska ) then
7418: LD_EXP 25
7422: PPUSH
7423: CALL_OW 302
7427: IFFALSE 7443
// Say ( Jaworska , D11b-RFSol1-1 ) else
7429: LD_EXP 25
7433: PPUSH
7434: LD_STRING D11b-RFSol1-1
7436: PPUSH
7437: CALL_OW 88
7441: GO 7491
// if IsOk ( Saseda ) then
7443: LD_EXP 24
7447: PPUSH
7448: CALL_OW 302
7452: IFFALSE 7468
// Say ( Saseda , D11b-RSol1-1 ) else
7454: LD_EXP 24
7458: PPUSH
7459: LD_STRING D11b-RSol1-1
7461: PPUSH
7462: CALL_OW 88
7466: GO 7491
// if IsOk ( Balei ) then
7468: LD_EXP 26
7472: PPUSH
7473: CALL_OW 302
7477: IFFALSE 7491
// Say ( Balei , D11b-RSol1-1 ) ;
7479: LD_EXP 26
7483: PPUSH
7484: LD_STRING D11b-RSol1-1
7486: PPUSH
7487: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7491: LD_INT 22
7493: PUSH
7494: LD_INT 0
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 25
7503: PUSH
7504: LD_INT 12
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 91
7513: PUSH
7514: LD_EXP 31
7518: PUSH
7519: LD_INT 12
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: PPUSH
7532: CALL_OW 69
7536: IFFALSE 7614
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7538: LD_EXP 31
7542: PPUSH
7543: LD_STRING D11b1-Kir-1
7545: PPUSH
7546: CALL_OW 586
// if attackedByApe then
7550: LD_EXP 7
7554: IFFALSE 7582
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7556: LD_EXP 22
7560: PPUSH
7561: LD_STRING D11b1-Bur-1
7563: PPUSH
7564: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7568: LD_EXP 27
7572: PPUSH
7573: LD_STRING D11b2-Bel-1
7575: PPUSH
7576: CALL_OW 88
// end else
7580: GO 7612
// if waterfallSpotted then
7582: LD_EXP 8
7586: IFFALSE 7612
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7588: LD_EXP 22
7592: PPUSH
7593: LD_STRING D11b1-Bur-1a
7595: PPUSH
7596: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7600: LD_EXP 27
7604: PPUSH
7605: LD_STRING D11b2-Bel-1
7607: PPUSH
7608: CALL_OW 88
// end ; end else
7612: GO 7656
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7614: LD_EXP 31
7618: PPUSH
7619: LD_STRING D11b2-Kir-1
7621: PPUSH
7622: CALL_OW 586
// if waterfallSpotted then
7626: LD_EXP 8
7630: IFFALSE 7656
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7632: LD_EXP 22
7636: PPUSH
7637: LD_STRING D11b1-Bur-1a
7639: PPUSH
7640: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7644: LD_EXP 27
7648: PPUSH
7649: LD_STRING D11b2-Bel-1
7651: PPUSH
7652: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7656: LD_EXP 8
7660: NOT
7661: PUSH
7662: LD_EXP 7
7666: NOT
7667: AND
7668: IFFALSE 7768
// begin if IsOk ( Belkov ) then
7670: LD_EXP 27
7674: PPUSH
7675: CALL_OW 302
7679: IFFALSE 7695
// Say ( Belkov , D11b1-Bel-1 ) else
7681: LD_EXP 27
7685: PPUSH
7686: LD_STRING D11b1-Bel-1
7688: PPUSH
7689: CALL_OW 88
7693: GO 7768
// if IsOk ( Saseda ) then
7695: LD_EXP 24
7699: PPUSH
7700: CALL_OW 302
7704: IFFALSE 7720
// Say ( Saseda , D11b1-RSol1-1 ) else
7706: LD_EXP 24
7710: PPUSH
7711: LD_STRING D11b1-RSol1-1
7713: PPUSH
7714: CALL_OW 88
7718: GO 7768
// if IsOk ( Jaworska ) then
7720: LD_EXP 25
7724: PPUSH
7725: CALL_OW 302
7729: IFFALSE 7745
// Say ( Jaworska , D11b1-RFSol1-1 ) else
7731: LD_EXP 25
7735: PPUSH
7736: LD_STRING D11b1-RFSol1-1
7738: PPUSH
7739: CALL_OW 88
7743: GO 7768
// if IsOk ( Balei ) then
7745: LD_EXP 26
7749: PPUSH
7750: CALL_OW 302
7754: IFFALSE 7768
// Say ( Balei , D11b1-RSol1-1 ) ;
7756: LD_EXP 26
7760: PPUSH
7761: LD_STRING D11b1-RSol1-1
7763: PPUSH
7764: CALL_OW 88
// end ; DialogueOff ;
7768: CALL_OW 7
// InGameOff ;
7772: CALL_OW 9
// wait ( 1 1$00 - ( 0 0$10 * Difficulty ) ) ;
7776: LD_INT 2100
7778: PUSH
7779: LD_INT 350
7781: PUSH
7782: LD_OWVAR 67
7786: MUL
7787: MINUS
7788: PPUSH
7789: CALL_OW 67
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
7793: LD_EXP 31
7797: PPUSH
7798: LD_INT 75
7800: PPUSH
7801: LD_INT 95
7803: PPUSH
7804: CALL_OW 111
// end else
7808: GO 8046
// begin DialogueOn ;
7810: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
7814: LD_EXP 31
7818: PPUSH
7819: LD_INT 3
7821: PPUSH
7822: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
7826: LD_EXP 31
7830: PPUSH
7831: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7835: LD_EXP 31
7839: PPUSH
7840: LD_STRING D11a-Kir-1
7842: PPUSH
7843: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
7847: LD_EXP 31
7851: PPUSH
7852: LD_EXP 27
7856: PPUSH
7857: CALL_OW 296
7861: PUSH
7862: LD_INT 8
7864: LESS
7865: IFFALSE 7879
// Say ( Belkov , D11a-Bel-1 ) ;
7867: LD_EXP 27
7871: PPUSH
7872: LD_STRING D11a-Bel-1
7874: PPUSH
7875: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7879: LD_EXP 31
7883: PPUSH
7884: LD_STRING D11a-Kir-2
7886: PPUSH
7887: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
7891: LD_EXP 31
7895: PPUSH
7896: LD_EXP 27
7900: PPUSH
7901: CALL_OW 296
7905: PUSH
7906: LD_INT 8
7908: LESS
7909: IFFALSE 7925
// Say ( Belkov , D11a-Bel-2 ) else
7911: LD_EXP 27
7915: PPUSH
7916: LD_STRING D11a-Bel-2
7918: PPUSH
7919: CALL_OW 88
7923: GO 8025
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
7925: LD_EXP 31
7929: PPUSH
7930: LD_EXP 24
7934: PPUSH
7935: CALL_OW 296
7939: PUSH
7940: LD_INT 8
7942: LESS
7943: IFFALSE 7959
// Say ( Saseda , D11a-RSol1-2 ) else
7945: LD_EXP 24
7949: PPUSH
7950: LD_STRING D11a-RSol1-2
7952: PPUSH
7953: CALL_OW 88
7957: GO 8025
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
7959: LD_EXP 31
7963: PPUSH
7964: LD_EXP 25
7968: PPUSH
7969: CALL_OW 296
7973: PUSH
7974: LD_INT 8
7976: LESS
7977: IFFALSE 7993
// Say ( Jaworska , D11a-RFSol1-2 ) else
7979: LD_EXP 25
7983: PPUSH
7984: LD_STRING D11a-RFSol1-2
7986: PPUSH
7987: CALL_OW 88
7991: GO 8025
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
7993: LD_EXP 31
7997: PPUSH
7998: LD_EXP 26
8002: PPUSH
8003: CALL_OW 296
8007: PUSH
8008: LD_INT 8
8010: LESS
8011: IFFALSE 8025
// Say ( Balei , D11a-RSol1-2 ) ;
8013: LD_EXP 26
8017: PPUSH
8018: LD_STRING D11a-RSol1-2
8020: PPUSH
8021: CALL_OW 88
// DialogueOff ;
8025: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8029: LD_STRING ACH_YELENA
8031: PPUSH
8032: CALL_OW 543
// hasKirilenkova := true ;
8036: LD_ADDR_EXP 5
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// exit ;
8044: GO 8343
// end ; p := 0 ;
8046: LD_ADDR_VAR 0 3
8050: PUSH
8051: LD_INT 0
8053: ST_TO_ADDR
// if Difficulty > 2 then
8054: LD_OWVAR 67
8058: PUSH
8059: LD_INT 2
8061: GREATER
8062: IFFALSE 8142
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8064: LD_INT 5
8066: NEG
8067: PUSH
8068: LD_INT 8
8070: NEG
8071: PUSH
8072: LD_INT 10
8074: NEG
8075: PUSH
8076: LD_INT 12
8078: NEG
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_OWVAR 67
8090: ARRAY
8091: PPUSH
8092: CALL 44004 0 1
// ape := CreateHuman ;
8096: LD_ADDR_VAR 0 2
8100: PUSH
8101: CALL_OW 44
8105: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_INT 65
8113: PPUSH
8114: LD_INT 89
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: LD_INT 0
8122: PPUSH
8123: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8127: LD_VAR 0 2
8131: PPUSH
8132: LD_INT 74
8134: PPUSH
8135: LD_INT 94
8137: PPUSH
8138: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8142: LD_INT 35
8144: PPUSH
8145: CALL_OW 67
// p := Inc ( p ) ;
8149: LD_ADDR_VAR 0 3
8153: PUSH
8154: LD_VAR 0 3
8158: PPUSH
8159: CALL 49173 0 1
8163: ST_TO_ADDR
// if p > 120 and IsOk ( ape ) and not HasTask ( ape ) then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 120
8171: GREATER
8172: PUSH
8173: LD_VAR 0 2
8177: PPUSH
8178: CALL_OW 302
8182: AND
8183: PUSH
8184: LD_VAR 0 2
8188: PPUSH
8189: CALL_OW 314
8193: NOT
8194: AND
8195: IFFALSE 8211
// ComAttackUnit ( ape , Kirilenkova ) ;
8197: LD_VAR 0 2
8201: PPUSH
8202: LD_EXP 31
8206: PPUSH
8207: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8211: LD_INT 3
8213: PPUSH
8214: LD_EXP 31
8218: PPUSH
8219: CALL_OW 292
8223: PUSH
8224: LD_EXP 31
8228: PPUSH
8229: CALL_OW 302
8233: AND
8234: IFFALSE 8142
// if p < 15 then
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 15
8243: LESS
8244: IFFALSE 8253
// SetAchievement ( ACH_YELENA ) ;
8246: LD_STRING ACH_YELENA
8248: PPUSH
8249: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8253: LD_EXP 31
8257: PPUSH
8258: LD_EXP 22
8262: PPUSH
8263: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8267: LD_INT 10
8269: PPUSH
8270: CALL_OW 67
// DialogueOn ;
8274: CALL_OW 6
// InGameOn ;
8278: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8282: LD_EXP 31
8286: PPUSH
8287: LD_INT 3
8289: PPUSH
8290: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8294: LD_EXP 31
8298: PPUSH
8299: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8303: LD_EXP 31
8307: PPUSH
8308: LD_STRING D11c-Kir-1
8310: PPUSH
8311: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8315: LD_EXP 22
8319: PPUSH
8320: LD_STRING D11c-Bur-1
8322: PPUSH
8323: CALL_OW 88
// DialogueOff ;
8327: CALL_OW 7
// InGameOff ;
8331: CALL_OW 9
// hasKirilenkova := true ;
8335: LD_ADDR_EXP 5
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// end ;
8343: PPOPN 3
8345: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8346: LD_EXP 19
8350: PUSH
8351: LD_EXP 22
8355: PPUSH
8356: LD_INT 16
8358: PPUSH
8359: CALL_OW 308
8363: AND
8364: IFFALSE 8749
8366: GO 8368
8368: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8369: LD_INT 22
8371: PUSH
8372: LD_INT 3
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 50
8391: PUSH
8392: EMPTY
8393: LIST
8394: PUSH
8395: LD_INT 3
8397: PUSH
8398: LD_INT 95
8400: PUSH
8401: LD_INT 16
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: PPUSH
8418: CALL_OW 69
8422: IFFALSE 8431
// Query ( QExit1 ) ;
8424: LD_STRING QExit1
8426: PPUSH
8427: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8431: LD_INT 35
8433: PPUSH
8434: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 50
8460: PUSH
8461: EMPTY
8462: LIST
8463: PUSH
8464: LD_INT 3
8466: PUSH
8467: LD_INT 95
8469: PUSH
8470: LD_INT 16
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 69
8491: NOT
8492: IFFALSE 8431
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8494: LD_EXP 27
8498: PUSH
8499: LD_EXP 24
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: LD_INT 157
8510: PPUSH
8511: LD_INT 118
8513: PPUSH
8514: CALL_OW 73
8518: PUSH
8519: LD_EXP 27
8523: EQUAL
8524: PUSH
8525: LD_EXP 27
8529: PPUSH
8530: CALL_OW 302
8534: AND
8535: IFFALSE 8551
// Say ( Belkov , D12-Bel-1 ) else
8537: LD_EXP 27
8541: PPUSH
8542: LD_STRING D12-Bel-1
8544: PPUSH
8545: CALL_OW 88
8549: GO 8599
// if IsOk ( Saseda ) then
8551: LD_EXP 24
8555: PPUSH
8556: CALL_OW 302
8560: IFFALSE 8576
// Say ( Saseda , D12-RSol1-1 ) else
8562: LD_EXP 24
8566: PPUSH
8567: LD_STRING D12-RSol1-1
8569: PPUSH
8570: CALL_OW 88
8574: GO 8599
// if IsOk ( Balei ) then
8576: LD_EXP 26
8580: PPUSH
8581: CALL_OW 302
8585: IFFALSE 8599
// Say ( Balei , D12-RSol1-1 ) ;
8587: LD_EXP 26
8591: PPUSH
8592: LD_STRING D12-RSol1-1
8594: PPUSH
8595: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
8599: LD_EXP 9
8603: PUSH
8604: LD_EXP 4
8608: NOT
8609: AND
8610: IFFALSE 8745
// begin DialogueOn ;
8612: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
8616: LD_EXP 22
8620: PPUSH
8621: LD_STRING D12-Bur-1
8623: PPUSH
8624: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
8628: LD_EXP 27
8632: PPUSH
8633: LD_STRING D12-Bel-2
8635: PPUSH
8636: CALL_OW 88
// DialogueOff ;
8640: CALL_OW 7
// if Query ( QExit2 ) = 1 then
8644: LD_STRING QExit2
8646: PPUSH
8647: CALL_OW 97
8651: PUSH
8652: LD_INT 1
8654: EQUAL
8655: IFFALSE 8663
// begin FinishMission ;
8657: CALL 8750 0 0
// exit ;
8661: GO 8749
// end ; repeat wait ( 0 0$3 ) ;
8663: LD_INT 105
8665: PPUSH
8666: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8670: LD_INT 22
8672: PUSH
8673: LD_INT 3
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 21
8682: PUSH
8683: LD_INT 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 50
8692: PUSH
8693: EMPTY
8694: LIST
8695: PUSH
8696: LD_INT 3
8698: PUSH
8699: LD_INT 95
8701: PUSH
8702: LD_INT 16
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: NOT
8724: IFFALSE 8741
// if Query ( QExit2 ) = 1 then
8726: LD_STRING QExit2
8728: PPUSH
8729: CALL_OW 97
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: IFFALSE 8741
// break ;
8739: GO 8745
// until false ;
8741: LD_INT 0
8743: IFFALSE 8663
// end ; FinishMission ;
8745: CALL 8750 0 0
// end ;
8749: END
// function FinishMission ; begin
8750: LD_INT 0
8752: PPUSH
// if tick <= 4 4$00 then
8753: LD_OWVAR 1
8757: PUSH
8758: LD_INT 8400
8760: LESSEQUAL
8761: IFFALSE 8770
// SetAchievement ( ACH_RSPEED_1 ) ;
8763: LD_STRING ACH_RSPEED_1
8765: PPUSH
8766: CALL_OW 543
// if not someoneGetsHurt then
8770: LD_EXP 21
8774: NOT
8775: IFFALSE 8784
// SetAchievement ( ACH_BANDAGE ) ;
8777: LD_STRING ACH_BANDAGE
8779: PPUSH
8780: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or frankEscaped ) then
8784: LD_EXP 16
8788: PUSH
8789: LD_EXP 17
8793: PUSH
8794: LD_EXP 18
8798: OR
8799: AND
8800: IFFALSE 8815
// AddMedal ( NoEscape , - 3 ) else
8802: LD_STRING NoEscape
8804: PPUSH
8805: LD_INT 3
8807: NEG
8808: PPUSH
8809: CALL_OW 101
8813: GO 8869
// if gladstoneEscaped then
8815: LD_EXP 16
8819: IFFALSE 8834
// AddMedal ( NoEscape , - 1 ) else
8821: LD_STRING NoEscape
8823: PPUSH
8824: LD_INT 1
8826: NEG
8827: PPUSH
8828: CALL_OW 101
8832: GO 8869
// if hollandEscaped or frankEscaped then
8834: LD_EXP 17
8838: PUSH
8839: LD_EXP 18
8843: OR
8844: IFFALSE 8859
// AddMedal ( NoEscape , - 2 ) else
8846: LD_STRING NoEscape
8848: PPUSH
8849: LD_INT 2
8851: NEG
8852: PPUSH
8853: CALL_OW 101
8857: GO 8869
// AddMedal ( NoEscape , 1 ) ;
8859: LD_STRING NoEscape
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
8869: LD_EXP 4
8873: PUSH
8874: LD_EXP 30
8878: PPUSH
8879: CALL_OW 302
8883: AND
8884: PUSH
8885: LD_EXP 5
8889: AND
8890: PUSH
8891: LD_EXP 31
8895: PPUSH
8896: CALL_OW 302
8900: AND
8901: IFFALSE 8915
// AddMedal ( Gnyevko , 1 ) else
8903: LD_STRING Gnyevko
8905: PPUSH
8906: LD_INT 1
8908: PPUSH
8909: CALL_OW 101
8913: GO 9014
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
8915: LD_EXP 30
8919: PPUSH
8920: CALL_OW 302
8924: NOT
8925: PUSH
8926: LD_EXP 31
8930: PPUSH
8931: CALL_OW 302
8935: NOT
8936: AND
8937: IFFALSE 8952
// AddMedal ( Gnyevko , - 3 ) else
8939: LD_STRING Gnyevko
8941: PPUSH
8942: LD_INT 3
8944: NEG
8945: PPUSH
8946: CALL_OW 101
8950: GO 9014
// if not hasGnyevko then
8952: LD_EXP 4
8956: NOT
8957: IFFALSE 8972
// AddMedal ( Gnyevko , - 1 ) else
8959: LD_STRING Gnyevko
8961: PPUSH
8962: LD_INT 1
8964: NEG
8965: PPUSH
8966: CALL_OW 101
8970: GO 9014
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
8972: LD_EXP 30
8976: PPUSH
8977: CALL_OW 302
8981: NOT
8982: PUSH
8983: LD_EXP 31
8987: PPUSH
8988: CALL_OW 302
8992: NOT
8993: OR
8994: PUSH
8995: LD_EXP 5
8999: NOT
9000: OR
9001: IFFALSE 9014
// AddMedal ( Gnyevko , - 2 ) ;
9003: LD_STRING Gnyevko
9005: PPUSH
9006: LD_INT 2
9008: NEG
9009: PPUSH
9010: CALL_OW 101
// if loseCounter then
9014: LD_EXP 20
9018: IFFALSE 9033
// AddMedal ( NoLosses , - 1 ) else
9020: LD_STRING NoLosses
9022: PPUSH
9023: LD_INT 1
9025: NEG
9026: PPUSH
9027: CALL_OW 101
9031: GO 9043
// AddMedal ( NoLosses , 1 ) ;
9033: LD_STRING NoLosses
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 101
// GiveMedals ( MAIN ) ;
9043: LD_STRING MAIN
9045: PPUSH
9046: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9050: LD_INT 22
9052: PUSH
9053: LD_INT 3
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 21
9062: PUSH
9063: LD_INT 1
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 50
9072: PUSH
9073: EMPTY
9074: LIST
9075: PUSH
9076: LD_INT 23
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: PPUSH
9097: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9101: LD_EXP 22
9105: PPUSH
9106: LD_EXP 2
9110: PUSH
9111: LD_STRING Burlak
9113: STR
9114: PPUSH
9115: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9119: LD_EXP 30
9123: PPUSH
9124: CALL_OW 302
9128: PUSH
9129: LD_EXP 4
9133: AND
9134: IFFALSE 9154
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9136: LD_EXP 30
9140: PPUSH
9141: LD_EXP 2
9145: PUSH
9146: LD_STRING Gnyevko
9148: STR
9149: PPUSH
9150: CALL_OW 38
// if IsOk ( Belkov ) then
9154: LD_EXP 27
9158: PPUSH
9159: CALL_OW 302
9163: IFFALSE 9183
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9165: LD_EXP 27
9169: PPUSH
9170: LD_EXP 2
9174: PUSH
9175: LD_STRING Belkov
9177: STR
9178: PPUSH
9179: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9183: LD_EXP 31
9187: PPUSH
9188: CALL_OW 302
9192: PUSH
9193: LD_EXP 5
9197: AND
9198: IFFALSE 9218
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9200: LD_EXP 31
9204: PPUSH
9205: LD_EXP 2
9209: PUSH
9210: LD_STRING Kirilenkova
9212: STR
9213: PPUSH
9214: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9218: LD_INT 22
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 50
9230: PUSH
9231: EMPTY
9232: LIST
9233: PUSH
9234: LD_INT 21
9236: PUSH
9237: LD_INT 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: PUSH
9254: LD_EXP 22
9258: PUSH
9259: LD_EXP 30
9263: PUSH
9264: LD_EXP 27
9268: PUSH
9269: LD_EXP 31
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: DIFF
9280: PPUSH
9281: LD_STRING 01_belkovTeam
9283: PPUSH
9284: CALL_OW 38
// YouWin ;
9288: CALL_OW 103
// end ; end_of_file
9292: LD_VAR 0 1
9296: RET
// export function SendApemanAttack ; var ape ; begin
9297: LD_INT 0
9299: PPUSH
9300: PPUSH
// PrepareApeman ( 0 ) ;
9301: LD_INT 0
9303: PPUSH
9304: CALL 44004 0 1
// ape := CreateHuman ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: CALL_OW 44
9317: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9318: LD_VAR 0 2
9322: PPUSH
9323: LD_INT 65
9325: PPUSH
9326: LD_INT 89
9328: PPUSH
9329: LD_INT 0
9331: PPUSH
9332: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_EXP 22
9345: PPUSH
9346: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9350: LD_INT 35
9352: PPUSH
9353: CALL_OW 67
// if joinedToBelkov then
9357: LD_EXP 3
9361: IFFALSE 9380
// begin ComMoveXY ( ape , 66 , 90 ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: LD_INT 66
9370: PPUSH
9371: LD_INT 90
9373: PPUSH
9374: CALL_OW 111
// exit ;
9378: GO 9561
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9380: LD_VAR 0 2
9384: PPUSH
9385: LD_EXP 22
9389: PPUSH
9390: CALL_OW 296
9394: PUSH
9395: LD_INT 5
9397: LESS
9398: IFFALSE 9350
// wait ( 0 0$0.3 ) ;
9400: LD_INT 10
9402: PPUSH
9403: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9407: LD_VAR 0 2
9411: PPUSH
9412: LD_EXP 22
9416: PPUSH
9417: CALL_OW 119
// if HasTask ( Burlak ) then
9421: LD_EXP 22
9425: PPUSH
9426: CALL_OW 314
9430: IFFALSE 9441
// wait ( 0 0$3 ) else
9432: LD_INT 105
9434: PPUSH
9435: CALL_OW 67
9439: GO 9448
// wait ( 0 0$10 ) ;
9441: LD_INT 350
9443: PPUSH
9444: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9448: LD_INT 6
9450: PPUSH
9451: LD_VAR 0 2
9455: PPUSH
9456: CALL_OW 292
9460: PUSH
9461: LD_EXP 3
9465: OR
9466: IFFALSE 9485
// begin ComMoveXY ( ape , 66 , 90 ) ;
9468: LD_VAR 0 2
9472: PPUSH
9473: LD_INT 66
9475: PPUSH
9476: LD_INT 90
9478: PPUSH
9479: CALL_OW 111
// exit ;
9483: GO 9561
// end ; ComAttackUnit ( ape , Burlak ) ;
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_EXP 22
9494: PPUSH
9495: CALL_OW 115
// repeat wait ( 1 ) ;
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9506: LD_VAR 0 2
9510: PPUSH
9511: CALL_OW 256
9515: PUSH
9516: LD_INT 980
9518: LESS
9519: PUSH
9520: LD_VAR 0 2
9524: PPUSH
9525: CALL_OW 504
9529: PUSH
9530: LD_EXP 22
9534: EQUAL
9535: AND
9536: PUSH
9537: LD_VAR 0 2
9541: PPUSH
9542: CALL_OW 583
9546: AND
9547: IFFALSE 9499
// SetLives ( ape , 200 ) ;
9549: LD_VAR 0 2
9553: PPUSH
9554: LD_INT 200
9556: PPUSH
9557: CALL_OW 234
// end ;
9561: LD_VAR 0 1
9565: RET
// export function CreateNature ; var i , ape , r ; begin
9566: LD_INT 0
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
9572: LD_INT 5
9574: PPUSH
9575: LD_INT 3
9577: PUSH
9578: LD_INT 4
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: LD_INT 6
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: LD_OWVAR 67
9597: ARRAY
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: LD_INT 0
9610: PPUSH
9611: LD_INT 3
9613: PPUSH
9614: LD_INT 7
9616: PPUSH
9617: LD_INT 8
9619: PPUSH
9620: CALL 44489 0 9
// r := rand ( 1 , 3 ) ;
9624: LD_ADDR_VAR 0 4
9628: PUSH
9629: LD_INT 1
9631: PPUSH
9632: LD_INT 3
9634: PPUSH
9635: CALL_OW 12
9639: ST_TO_ADDR
// for i := 1 to 3 do
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_INT 3
9652: PUSH
9653: FOR_TO
9654: IFFALSE 9745
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
9656: LD_INT 5
9658: NEG
9659: PUSH
9660: LD_INT 8
9662: NEG
9663: PUSH
9664: LD_INT 10
9666: NEG
9667: PUSH
9668: LD_INT 12
9670: NEG
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_OWVAR 67
9682: ARRAY
9683: PPUSH
9684: CALL 44004 0 1
// ape := CreateHuman ;
9688: LD_ADDR_VAR 0 3
9692: PUSH
9693: CALL_OW 44
9697: ST_TO_ADDR
// if i = r then
9698: LD_VAR 0 2
9702: PUSH
9703: LD_VAR 0 4
9707: EQUAL
9708: IFFALSE 9722
// SetTag ( i , tApeRadio ) ;
9710: LD_VAR 0 2
9714: PPUSH
9715: LD_INT 1
9717: PPUSH
9718: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
9722: LD_VAR 0 3
9726: PPUSH
9727: LD_INT 66
9729: PPUSH
9730: LD_INT 92
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: LD_INT 0
9738: PPUSH
9739: CALL_OW 50
// end ;
9743: GO 9653
9745: POP
9746: POP
// end ;
9747: LD_VAR 0 1
9751: RET
// export function MoveToHill ; begin
9752: LD_INT 0
9754: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
9755: LD_EXP 23
9759: PPUSH
9760: LD_INT 65
9762: PPUSH
9763: LD_INT 59
9765: PPUSH
9766: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
9770: LD_EXP 23
9774: PPUSH
9775: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
9779: LD_EXP 24
9783: PPUSH
9784: LD_INT 65
9786: PPUSH
9787: LD_INT 58
9789: PPUSH
9790: CALL_OW 111
// AddComCrawl ( Saseda ) ;
9794: LD_EXP 24
9798: PPUSH
9799: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_INT 64
9810: PPUSH
9811: LD_INT 57
9813: PPUSH
9814: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
9818: LD_EXP 25
9822: PPUSH
9823: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
9827: LD_EXP 26
9831: PPUSH
9832: LD_INT 64
9834: PPUSH
9835: LD_INT 56
9837: PPUSH
9838: CALL_OW 111
// AddComCrawl ( Balei ) ;
9842: LD_EXP 26
9846: PPUSH
9847: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
9851: LD_EXP 27
9855: PPUSH
9856: LD_INT 63
9858: PPUSH
9859: LD_INT 55
9861: PPUSH
9862: CALL_OW 111
// AddComCrawl ( Belkov ) ;
9866: LD_EXP 27
9870: PPUSH
9871: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
9875: LD_EXP 28
9879: PPUSH
9880: LD_INT 66
9882: PPUSH
9883: LD_INT 58
9885: PPUSH
9886: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
9890: LD_EXP 28
9894: PPUSH
9895: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
9899: LD_EXP 4
9903: PUSH
9904: LD_EXP 30
9908: PPUSH
9909: CALL_OW 302
9913: AND
9914: IFFALSE 9940
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
9916: LD_EXP 30
9920: PPUSH
9921: LD_INT 63
9923: PPUSH
9924: LD_INT 54
9926: PPUSH
9927: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
9931: LD_EXP 30
9935: PPUSH
9936: CALL_OW 197
// end ; end ; end_of_file
9940: LD_VAR 0 1
9944: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9945: LD_INT 0
9947: PPUSH
9948: PPUSH
// if exist_mode then
9949: LD_VAR 0 2
9953: IFFALSE 9999
// begin unit := CreateCharacter ( prefix & ident ) ;
9955: LD_ADDR_VAR 0 5
9959: PUSH
9960: LD_VAR 0 3
9964: PUSH
9965: LD_VAR 0 1
9969: STR
9970: PPUSH
9971: CALL_OW 34
9975: ST_TO_ADDR
// if unit then
9976: LD_VAR 0 5
9980: IFFALSE 9997
// DeleteCharacters ( prefix & ident ) ;
9982: LD_VAR 0 3
9986: PUSH
9987: LD_VAR 0 1
9991: STR
9992: PPUSH
9993: CALL_OW 40
// end else
9997: GO 10014
// unit := NewCharacter ( ident ) ;
9999: LD_ADDR_VAR 0 5
10003: PUSH
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 25
10013: ST_TO_ADDR
// result := unit ;
10014: LD_ADDR_VAR 0 4
10018: PUSH
10019: LD_VAR 0 5
10023: ST_TO_ADDR
// end ;
10024: LD_VAR 0 4
10028: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10029: LD_INT 0
10031: PPUSH
10032: PPUSH
// if exist_mode then
10033: LD_VAR 0 2
10037: IFFALSE 10062
// unit := CreateCharacter ( prefix & ident ) else
10039: LD_ADDR_VAR 0 5
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 1
10053: STR
10054: PPUSH
10055: CALL_OW 34
10059: ST_TO_ADDR
10060: GO 10077
// unit := NewCharacter ( ident ) ;
10062: LD_ADDR_VAR 0 5
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 25
10076: ST_TO_ADDR
// result := unit ;
10077: LD_ADDR_VAR 0 4
10081: PUSH
10082: LD_VAR 0 5
10086: ST_TO_ADDR
// end ;
10087: LD_VAR 0 4
10091: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10092: LD_INT 0
10094: PPUSH
10095: PPUSH
// if not side or not nation then
10096: LD_VAR 0 1
10100: NOT
10101: PUSH
10102: LD_VAR 0 2
10106: NOT
10107: OR
10108: IFFALSE 10112
// exit ;
10110: GO 10880
// case nation of nation_american :
10112: LD_VAR 0 2
10116: PUSH
10117: LD_INT 1
10119: DOUBLE
10120: EQUAL
10121: IFTRUE 10125
10123: GO 10339
10125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10126: LD_ADDR_VAR 0 4
10130: PUSH
10131: LD_INT 35
10133: PUSH
10134: LD_INT 45
10136: PUSH
10137: LD_INT 46
10139: PUSH
10140: LD_INT 47
10142: PUSH
10143: LD_INT 82
10145: PUSH
10146: LD_INT 83
10148: PUSH
10149: LD_INT 84
10151: PUSH
10152: LD_INT 85
10154: PUSH
10155: LD_INT 86
10157: PUSH
10158: LD_INT 1
10160: PUSH
10161: LD_INT 2
10163: PUSH
10164: LD_INT 6
10166: PUSH
10167: LD_INT 15
10169: PUSH
10170: LD_INT 16
10172: PUSH
10173: LD_INT 7
10175: PUSH
10176: LD_INT 12
10178: PUSH
10179: LD_INT 13
10181: PUSH
10182: LD_INT 10
10184: PUSH
10185: LD_INT 14
10187: PUSH
10188: LD_INT 20
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 32
10202: PUSH
10203: LD_INT 27
10205: PUSH
10206: LD_INT 36
10208: PUSH
10209: LD_INT 69
10211: PUSH
10212: LD_INT 39
10214: PUSH
10215: LD_INT 34
10217: PUSH
10218: LD_INT 40
10220: PUSH
10221: LD_INT 48
10223: PUSH
10224: LD_INT 49
10226: PUSH
10227: LD_INT 50
10229: PUSH
10230: LD_INT 51
10232: PUSH
10233: LD_INT 52
10235: PUSH
10236: LD_INT 53
10238: PUSH
10239: LD_INT 54
10241: PUSH
10242: LD_INT 55
10244: PUSH
10245: LD_INT 56
10247: PUSH
10248: LD_INT 57
10250: PUSH
10251: LD_INT 58
10253: PUSH
10254: LD_INT 59
10256: PUSH
10257: LD_INT 60
10259: PUSH
10260: LD_INT 61
10262: PUSH
10263: LD_INT 62
10265: PUSH
10266: LD_INT 80
10268: PUSH
10269: LD_INT 82
10271: PUSH
10272: LD_INT 83
10274: PUSH
10275: LD_INT 84
10277: PUSH
10278: LD_INT 85
10280: PUSH
10281: LD_INT 86
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: ST_TO_ADDR
10337: GO 10804
10339: LD_INT 2
10341: DOUBLE
10342: EQUAL
10343: IFTRUE 10347
10345: GO 10573
10347: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10348: LD_ADDR_VAR 0 4
10352: PUSH
10353: LD_INT 35
10355: PUSH
10356: LD_INT 45
10358: PUSH
10359: LD_INT 46
10361: PUSH
10362: LD_INT 47
10364: PUSH
10365: LD_INT 82
10367: PUSH
10368: LD_INT 83
10370: PUSH
10371: LD_INT 84
10373: PUSH
10374: LD_INT 85
10376: PUSH
10377: LD_INT 87
10379: PUSH
10380: LD_INT 70
10382: PUSH
10383: LD_INT 1
10385: PUSH
10386: LD_INT 11
10388: PUSH
10389: LD_INT 3
10391: PUSH
10392: LD_INT 4
10394: PUSH
10395: LD_INT 5
10397: PUSH
10398: LD_INT 6
10400: PUSH
10401: LD_INT 15
10403: PUSH
10404: LD_INT 18
10406: PUSH
10407: LD_INT 7
10409: PUSH
10410: LD_INT 17
10412: PUSH
10413: LD_INT 8
10415: PUSH
10416: LD_INT 20
10418: PUSH
10419: LD_INT 21
10421: PUSH
10422: LD_INT 22
10424: PUSH
10425: LD_INT 72
10427: PUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 69
10433: PUSH
10434: LD_INT 39
10436: PUSH
10437: LD_INT 40
10439: PUSH
10440: LD_INT 41
10442: PUSH
10443: LD_INT 42
10445: PUSH
10446: LD_INT 43
10448: PUSH
10449: LD_INT 48
10451: PUSH
10452: LD_INT 49
10454: PUSH
10455: LD_INT 50
10457: PUSH
10458: LD_INT 51
10460: PUSH
10461: LD_INT 52
10463: PUSH
10464: LD_INT 53
10466: PUSH
10467: LD_INT 54
10469: PUSH
10470: LD_INT 55
10472: PUSH
10473: LD_INT 56
10475: PUSH
10476: LD_INT 60
10478: PUSH
10479: LD_INT 61
10481: PUSH
10482: LD_INT 62
10484: PUSH
10485: LD_INT 66
10487: PUSH
10488: LD_INT 67
10490: PUSH
10491: LD_INT 68
10493: PUSH
10494: LD_INT 81
10496: PUSH
10497: LD_INT 82
10499: PUSH
10500: LD_INT 83
10502: PUSH
10503: LD_INT 84
10505: PUSH
10506: LD_INT 85
10508: PUSH
10509: LD_INT 87
10511: PUSH
10512: LD_INT 88
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: ST_TO_ADDR
10571: GO 10804
10573: LD_INT 3
10575: DOUBLE
10576: EQUAL
10577: IFTRUE 10581
10579: GO 10803
10581: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10582: LD_ADDR_VAR 0 4
10586: PUSH
10587: LD_INT 46
10589: PUSH
10590: LD_INT 47
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: LD_INT 2
10598: PUSH
10599: LD_INT 82
10601: PUSH
10602: LD_INT 83
10604: PUSH
10605: LD_INT 84
10607: PUSH
10608: LD_INT 85
10610: PUSH
10611: LD_INT 86
10613: PUSH
10614: LD_INT 11
10616: PUSH
10617: LD_INT 9
10619: PUSH
10620: LD_INT 20
10622: PUSH
10623: LD_INT 19
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 24
10631: PUSH
10632: LD_INT 22
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 28
10640: PUSH
10641: LD_INT 29
10643: PUSH
10644: LD_INT 30
10646: PUSH
10647: LD_INT 31
10649: PUSH
10650: LD_INT 37
10652: PUSH
10653: LD_INT 38
10655: PUSH
10656: LD_INT 32
10658: PUSH
10659: LD_INT 27
10661: PUSH
10662: LD_INT 33
10664: PUSH
10665: LD_INT 69
10667: PUSH
10668: LD_INT 39
10670: PUSH
10671: LD_INT 34
10673: PUSH
10674: LD_INT 40
10676: PUSH
10677: LD_INT 71
10679: PUSH
10680: LD_INT 23
10682: PUSH
10683: LD_INT 44
10685: PUSH
10686: LD_INT 48
10688: PUSH
10689: LD_INT 49
10691: PUSH
10692: LD_INT 50
10694: PUSH
10695: LD_INT 51
10697: PUSH
10698: LD_INT 52
10700: PUSH
10701: LD_INT 53
10703: PUSH
10704: LD_INT 54
10706: PUSH
10707: LD_INT 55
10709: PUSH
10710: LD_INT 56
10712: PUSH
10713: LD_INT 57
10715: PUSH
10716: LD_INT 58
10718: PUSH
10719: LD_INT 59
10721: PUSH
10722: LD_INT 63
10724: PUSH
10725: LD_INT 64
10727: PUSH
10728: LD_INT 65
10730: PUSH
10731: LD_INT 82
10733: PUSH
10734: LD_INT 83
10736: PUSH
10737: LD_INT 84
10739: PUSH
10740: LD_INT 85
10742: PUSH
10743: LD_INT 86
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: ST_TO_ADDR
10801: GO 10804
10803: POP
// if state > - 1 and state < 3 then
10804: LD_VAR 0 3
10808: PUSH
10809: LD_INT 1
10811: NEG
10812: GREATER
10813: PUSH
10814: LD_VAR 0 3
10818: PUSH
10819: LD_INT 3
10821: LESS
10822: AND
10823: IFFALSE 10880
// for i in result do
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_VAR 0 4
10834: PUSH
10835: FOR_IN
10836: IFFALSE 10878
// if GetTech ( i , side ) <> state then
10838: LD_VAR 0 5
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 321
10852: PUSH
10853: LD_VAR 0 3
10857: NONEQUAL
10858: IFFALSE 10876
// result := result diff i ;
10860: LD_ADDR_VAR 0 4
10864: PUSH
10865: LD_VAR 0 4
10869: PUSH
10870: LD_VAR 0 5
10874: DIFF
10875: ST_TO_ADDR
10876: GO 10835
10878: POP
10879: POP
// end ;
10880: LD_VAR 0 4
10884: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10885: LD_INT 0
10887: PPUSH
10888: PPUSH
10889: PPUSH
// result := true ;
10890: LD_ADDR_VAR 0 3
10894: PUSH
10895: LD_INT 1
10897: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10898: LD_ADDR_VAR 0 5
10902: PUSH
10903: LD_VAR 0 2
10907: PPUSH
10908: CALL_OW 480
10912: ST_TO_ADDR
// if not tmp then
10913: LD_VAR 0 5
10917: NOT
10918: IFFALSE 10922
// exit ;
10920: GO 10971
// for i in tmp do
10922: LD_ADDR_VAR 0 4
10926: PUSH
10927: LD_VAR 0 5
10931: PUSH
10932: FOR_IN
10933: IFFALSE 10969
// if GetTech ( i , side ) <> state_researched then
10935: LD_VAR 0 4
10939: PPUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: CALL_OW 321
10949: PUSH
10950: LD_INT 2
10952: NONEQUAL
10953: IFFALSE 10967
// begin result := false ;
10955: LD_ADDR_VAR 0 3
10959: PUSH
10960: LD_INT 0
10962: ST_TO_ADDR
// exit ;
10963: POP
10964: POP
10965: GO 10971
// end ;
10967: GO 10932
10969: POP
10970: POP
// end ;
10971: LD_VAR 0 3
10975: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
10990: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10991: LD_VAR 0 1
10995: NOT
10996: PUSH
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 257
11006: PUSH
11007: LD_INT 9
11009: NONEQUAL
11010: OR
11011: IFFALSE 11015
// exit ;
11013: GO 11588
// side := GetSide ( unit ) ;
11015: LD_ADDR_VAR 0 9
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 255
11029: ST_TO_ADDR
// tech_space := tech_spacanom ;
11030: LD_ADDR_VAR 0 12
11034: PUSH
11035: LD_INT 29
11037: ST_TO_ADDR
// tech_time := tech_taurad ;
11038: LD_ADDR_VAR 0 13
11042: PUSH
11043: LD_INT 28
11045: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11046: LD_ADDR_VAR 0 11
11050: PUSH
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 310
11060: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11061: LD_VAR 0 11
11065: PPUSH
11066: CALL_OW 247
11070: PUSH
11071: LD_INT 2
11073: EQUAL
11074: IFFALSE 11078
// exit ;
11076: GO 11588
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11078: LD_ADDR_VAR 0 8
11082: PUSH
11083: LD_INT 81
11085: PUSH
11086: LD_VAR 0 9
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 21
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PPUSH
11116: CALL_OW 69
11120: ST_TO_ADDR
// if not tmp then
11121: LD_VAR 0 8
11125: NOT
11126: IFFALSE 11130
// exit ;
11128: GO 11588
// if in_unit then
11130: LD_VAR 0 11
11134: IFFALSE 11158
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11136: LD_ADDR_VAR 0 10
11140: PUSH
11141: LD_VAR 0 8
11145: PPUSH
11146: LD_VAR 0 11
11150: PPUSH
11151: CALL_OW 74
11155: ST_TO_ADDR
11156: GO 11178
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11158: LD_ADDR_VAR 0 10
11162: PUSH
11163: LD_VAR 0 8
11167: PPUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 74
11177: ST_TO_ADDR
// if not enemy then
11178: LD_VAR 0 10
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11588
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11187: LD_VAR 0 11
11191: PUSH
11192: LD_VAR 0 11
11196: PPUSH
11197: LD_VAR 0 10
11201: PPUSH
11202: CALL_OW 296
11206: PUSH
11207: LD_INT 13
11209: GREATER
11210: AND
11211: PUSH
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_VAR 0 10
11221: PPUSH
11222: CALL_OW 296
11226: PUSH
11227: LD_INT 12
11229: GREATER
11230: OR
11231: IFFALSE 11235
// exit ;
11233: GO 11588
// missile := [ 1 ] ;
11235: LD_ADDR_VAR 0 14
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11246: LD_VAR 0 9
11250: PPUSH
11251: LD_VAR 0 12
11255: PPUSH
11256: CALL_OW 325
11260: IFFALSE 11289
// missile := Replace ( missile , missile + 1 , 2 ) ;
11262: LD_ADDR_VAR 0 14
11266: PUSH
11267: LD_VAR 0 14
11271: PPUSH
11272: LD_VAR 0 14
11276: PUSH
11277: LD_INT 1
11279: PLUS
11280: PPUSH
11281: LD_INT 2
11283: PPUSH
11284: CALL_OW 1
11288: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11289: LD_VAR 0 9
11293: PPUSH
11294: LD_VAR 0 13
11298: PPUSH
11299: CALL_OW 325
11303: PUSH
11304: LD_VAR 0 10
11308: PPUSH
11309: CALL_OW 255
11313: PPUSH
11314: LD_VAR 0 13
11318: PPUSH
11319: CALL_OW 325
11323: NOT
11324: AND
11325: IFFALSE 11354
// missile := Replace ( missile , missile + 1 , 3 ) ;
11327: LD_ADDR_VAR 0 14
11331: PUSH
11332: LD_VAR 0 14
11336: PPUSH
11337: LD_VAR 0 14
11341: PUSH
11342: LD_INT 1
11344: PLUS
11345: PPUSH
11346: LD_INT 3
11348: PPUSH
11349: CALL_OW 1
11353: ST_TO_ADDR
// if missile < 2 then
11354: LD_VAR 0 14
11358: PUSH
11359: LD_INT 2
11361: LESS
11362: IFFALSE 11366
// exit ;
11364: GO 11588
// x := GetX ( enemy ) ;
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: LD_VAR 0 10
11375: PPUSH
11376: CALL_OW 250
11380: ST_TO_ADDR
// y := GetY ( enemy ) ;
11381: LD_ADDR_VAR 0 5
11385: PUSH
11386: LD_VAR 0 10
11390: PPUSH
11391: CALL_OW 251
11395: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11396: LD_ADDR_VAR 0 6
11400: PUSH
11401: LD_VAR 0 4
11405: PUSH
11406: LD_INT 1
11408: NEG
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 12
11417: PLUS
11418: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11419: LD_ADDR_VAR 0 7
11423: PUSH
11424: LD_VAR 0 5
11428: PUSH
11429: LD_INT 1
11431: NEG
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 12
11440: PLUS
11441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11442: LD_VAR 0 6
11446: PPUSH
11447: LD_VAR 0 7
11451: PPUSH
11452: CALL_OW 488
11456: NOT
11457: IFFALSE 11479
// begin _x := x ;
11459: LD_ADDR_VAR 0 6
11463: PUSH
11464: LD_VAR 0 4
11468: ST_TO_ADDR
// _y := y ;
11469: LD_ADDR_VAR 0 7
11473: PUSH
11474: LD_VAR 0 5
11478: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 1
11486: PPUSH
11487: LD_VAR 0 14
11491: PPUSH
11492: CALL_OW 12
11496: ST_TO_ADDR
// case i of 1 :
11497: LD_VAR 0 3
11501: PUSH
11502: LD_INT 1
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11527
11510: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11511: LD_VAR 0 1
11515: PPUSH
11516: LD_VAR 0 10
11520: PPUSH
11521: CALL_OW 115
11525: GO 11588
11527: LD_INT 2
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 11557
11535: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: LD_VAR 0 7
11550: PPUSH
11551: CALL_OW 153
11555: GO 11588
11557: LD_INT 3
11559: DOUBLE
11560: EQUAL
11561: IFTRUE 11565
11563: GO 11587
11565: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11566: LD_VAR 0 1
11570: PPUSH
11571: LD_VAR 0 6
11575: PPUSH
11576: LD_VAR 0 7
11580: PPUSH
11581: CALL_OW 154
11585: GO 11588
11587: POP
// end ;
11588: LD_VAR 0 2
11592: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11593: LD_INT 0
11595: PPUSH
11596: PPUSH
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
// if not unit or not building then
11601: LD_VAR 0 1
11605: NOT
11606: PUSH
11607: LD_VAR 0 2
11611: NOT
11612: OR
11613: IFFALSE 11617
// exit ;
11615: GO 11775
// x := GetX ( building ) ;
11617: LD_ADDR_VAR 0 5
11621: PUSH
11622: LD_VAR 0 2
11626: PPUSH
11627: CALL_OW 250
11631: ST_TO_ADDR
// y := GetY ( building ) ;
11632: LD_ADDR_VAR 0 6
11636: PUSH
11637: LD_VAR 0 2
11641: PPUSH
11642: CALL_OW 251
11646: ST_TO_ADDR
// for i = 0 to 5 do
11647: LD_ADDR_VAR 0 4
11651: PUSH
11652: DOUBLE
11653: LD_INT 0
11655: DEC
11656: ST_TO_ADDR
11657: LD_INT 5
11659: PUSH
11660: FOR_TO
11661: IFFALSE 11773
// begin _x := ShiftX ( x , i , 3 ) ;
11663: LD_ADDR_VAR 0 7
11667: PUSH
11668: LD_VAR 0 5
11672: PPUSH
11673: LD_VAR 0 4
11677: PPUSH
11678: LD_INT 3
11680: PPUSH
11681: CALL_OW 272
11685: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11686: LD_ADDR_VAR 0 8
11690: PUSH
11691: LD_VAR 0 6
11695: PPUSH
11696: LD_VAR 0 4
11700: PPUSH
11701: LD_INT 3
11703: PPUSH
11704: CALL_OW 273
11708: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11709: LD_VAR 0 7
11713: PPUSH
11714: LD_VAR 0 8
11718: PPUSH
11719: CALL_OW 488
11723: NOT
11724: IFFALSE 11728
// continue ;
11726: GO 11660
// if HexInfo ( _x , _y ) = 0 then
11728: LD_VAR 0 7
11732: PPUSH
11733: LD_VAR 0 8
11737: PPUSH
11738: CALL_OW 428
11742: PUSH
11743: LD_INT 0
11745: EQUAL
11746: IFFALSE 11771
// begin ComMoveXY ( unit , _x , _y ) ;
11748: LD_VAR 0 1
11752: PPUSH
11753: LD_VAR 0 7
11757: PPUSH
11758: LD_VAR 0 8
11762: PPUSH
11763: CALL_OW 111
// exit ;
11767: POP
11768: POP
11769: GO 11775
// end ; end ;
11771: GO 11660
11773: POP
11774: POP
// end ;
11775: LD_VAR 0 3
11779: RET
// export function ScanBase ( side , base_area ) ; begin
11780: LD_INT 0
11782: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11783: LD_ADDR_VAR 0 3
11787: PUSH
11788: LD_VAR 0 2
11792: PPUSH
11793: LD_INT 81
11795: PUSH
11796: LD_VAR 0 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 70
11809: ST_TO_ADDR
// end ;
11810: LD_VAR 0 3
11814: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
11820: PPUSH
// result := false ;
11821: LD_ADDR_VAR 0 2
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// side := GetSide ( unit ) ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 255
11843: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11844: LD_ADDR_VAR 0 4
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 248
11858: ST_TO_ADDR
// case nat of 1 :
11859: LD_VAR 0 4
11863: PUSH
11864: LD_INT 1
11866: DOUBLE
11867: EQUAL
11868: IFTRUE 11872
11870: GO 11883
11872: POP
// tech := tech_lassight ; 2 :
11873: LD_ADDR_VAR 0 5
11877: PUSH
11878: LD_INT 12
11880: ST_TO_ADDR
11881: GO 11922
11883: LD_INT 2
11885: DOUBLE
11886: EQUAL
11887: IFTRUE 11891
11889: GO 11902
11891: POP
// tech := tech_mortar ; 3 :
11892: LD_ADDR_VAR 0 5
11896: PUSH
11897: LD_INT 41
11899: ST_TO_ADDR
11900: GO 11922
11902: LD_INT 3
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 11921
11910: POP
// tech := tech_bazooka ; end ;
11911: LD_ADDR_VAR 0 5
11915: PUSH
11916: LD_INT 44
11918: ST_TO_ADDR
11919: GO 11922
11921: POP
// if Researched ( side , tech ) then
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_VAR 0 5
11931: PPUSH
11932: CALL_OW 325
11936: IFFALSE 11963
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11938: LD_ADDR_VAR 0 2
11942: PUSH
11943: LD_INT 5
11945: PUSH
11946: LD_INT 8
11948: PUSH
11949: LD_INT 9
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: LD_VAR 0 4
11961: ARRAY
11962: ST_TO_ADDR
// end ;
11963: LD_VAR 0 2
11967: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11968: LD_INT 0
11970: PPUSH
11971: PPUSH
11972: PPUSH
// if not mines then
11973: LD_VAR 0 2
11977: NOT
11978: IFFALSE 11982
// exit ;
11980: GO 12126
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11982: LD_ADDR_VAR 0 5
11986: PUSH
11987: LD_INT 81
11989: PUSH
11990: LD_VAR 0 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 3
12001: PUSH
12002: LD_INT 21
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: ST_TO_ADDR
// for i in mines do
12025: LD_ADDR_VAR 0 4
12029: PUSH
12030: LD_VAR 0 2
12034: PUSH
12035: FOR_IN
12036: IFFALSE 12124
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12038: LD_VAR 0 4
12042: PUSH
12043: LD_INT 1
12045: ARRAY
12046: PPUSH
12047: LD_VAR 0 4
12051: PUSH
12052: LD_INT 2
12054: ARRAY
12055: PPUSH
12056: CALL_OW 458
12060: NOT
12061: IFFALSE 12065
// continue ;
12063: GO 12035
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12065: LD_VAR 0 4
12069: PUSH
12070: LD_INT 1
12072: ARRAY
12073: PPUSH
12074: LD_VAR 0 4
12078: PUSH
12079: LD_INT 2
12081: ARRAY
12082: PPUSH
12083: CALL_OW 428
12087: PUSH
12088: LD_VAR 0 5
12092: IN
12093: IFFALSE 12122
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12095: LD_VAR 0 4
12099: PUSH
12100: LD_INT 1
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 4
12108: PUSH
12109: LD_INT 2
12111: ARRAY
12112: PPUSH
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 456
// end ;
12122: GO 12035
12124: POP
12125: POP
// end ;
12126: LD_VAR 0 3
12130: RET
// export function Count ( array ) ; begin
12131: LD_INT 0
12133: PPUSH
// result := array + 0 ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_VAR 0 1
12143: PUSH
12144: LD_INT 0
12146: PLUS
12147: ST_TO_ADDR
// end ;
12148: LD_VAR 0 2
12152: RET
// export function IsEmpty ( building ) ; begin
12153: LD_INT 0
12155: PPUSH
// if not building then
12156: LD_VAR 0 1
12160: NOT
12161: IFFALSE 12165
// exit ;
12163: GO 12208
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_VAR 0 1
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: CALL_OW 255
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 58
12194: PUSH
12195: EMPTY
12196: LIST
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 69
12206: IN
12207: ST_TO_ADDR
// end ;
12208: LD_VAR 0 2
12212: RET
// export function IsNotFull ( building ) ; var places ; begin
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
// if not building then
12217: LD_VAR 0 1
12221: NOT
12222: IFFALSE 12226
// exit ;
12224: GO 12254
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12226: LD_ADDR_VAR 0 2
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: LD_INT 3
12238: PUSH
12239: LD_INT 62
12241: PUSH
12242: EMPTY
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: ST_TO_ADDR
// end ;
12254: LD_VAR 0 2
12258: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12259: LD_INT 0
12261: PPUSH
12262: PPUSH
12263: PPUSH
12264: PPUSH
// tmp := [ ] ;
12265: LD_ADDR_VAR 0 3
12269: PUSH
12270: EMPTY
12271: ST_TO_ADDR
// list := [ ] ;
12272: LD_ADDR_VAR 0 5
12276: PUSH
12277: EMPTY
12278: ST_TO_ADDR
// for i = 16 to 25 do
12279: LD_ADDR_VAR 0 4
12283: PUSH
12284: DOUBLE
12285: LD_INT 16
12287: DEC
12288: ST_TO_ADDR
12289: LD_INT 25
12291: PUSH
12292: FOR_TO
12293: IFFALSE 12366
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 255
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 91
12324: PUSH
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 6
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_VAR 0 4
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ADD
12363: ST_TO_ADDR
12364: GO 12292
12366: POP
12367: POP
// for i = 1 to tmp do
12368: LD_ADDR_VAR 0 4
12372: PUSH
12373: DOUBLE
12374: LD_INT 1
12376: DEC
12377: ST_TO_ADDR
12378: LD_VAR 0 3
12382: PUSH
12383: FOR_TO
12384: IFFALSE 12472
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12386: LD_ADDR_VAR 0 5
12390: PUSH
12391: LD_VAR 0 5
12395: PUSH
12396: LD_VAR 0 3
12400: PUSH
12401: LD_VAR 0 4
12405: ARRAY
12406: PPUSH
12407: CALL_OW 266
12411: PUSH
12412: LD_VAR 0 3
12416: PUSH
12417: LD_VAR 0 4
12421: ARRAY
12422: PPUSH
12423: CALL_OW 250
12427: PUSH
12428: LD_VAR 0 3
12432: PUSH
12433: LD_VAR 0 4
12437: ARRAY
12438: PPUSH
12439: CALL_OW 251
12443: PUSH
12444: LD_VAR 0 3
12448: PUSH
12449: LD_VAR 0 4
12453: ARRAY
12454: PPUSH
12455: CALL_OW 254
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: ADD
12469: ST_TO_ADDR
12470: GO 12383
12472: POP
12473: POP
// result := list ;
12474: LD_ADDR_VAR 0 2
12478: PUSH
12479: LD_VAR 0 5
12483: ST_TO_ADDR
// end ;
12484: LD_VAR 0 2
12488: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12489: LD_INT 0
12491: PPUSH
12492: PPUSH
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
12497: PPUSH
// if not factory then
12498: LD_VAR 0 1
12502: NOT
12503: IFFALSE 12507
// exit ;
12505: GO 13100
// if control = control_apeman then
12507: LD_VAR 0 4
12511: PUSH
12512: LD_INT 5
12514: EQUAL
12515: IFFALSE 12624
// begin tmp := UnitsInside ( factory ) ;
12517: LD_ADDR_VAR 0 8
12521: PUSH
12522: LD_VAR 0 1
12526: PPUSH
12527: CALL_OW 313
12531: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12532: LD_VAR 0 8
12536: PPUSH
12537: LD_INT 25
12539: PUSH
12540: LD_INT 12
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 72
12551: NOT
12552: IFFALSE 12562
// control := control_manual ;
12554: LD_ADDR_VAR 0 4
12558: PUSH
12559: LD_INT 1
12561: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12562: LD_ADDR_VAR 0 8
12566: PUSH
12567: LD_VAR 0 1
12571: PPUSH
12572: CALL 12259 0 1
12576: ST_TO_ADDR
// if tmp then
12577: LD_VAR 0 8
12581: IFFALSE 12624
// begin for i in tmp do
12583: LD_ADDR_VAR 0 7
12587: PUSH
12588: LD_VAR 0 8
12592: PUSH
12593: FOR_IN
12594: IFFALSE 12622
// if i [ 1 ] = b_ext_radio then
12596: LD_VAR 0 7
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PUSH
12605: LD_INT 22
12607: EQUAL
12608: IFFALSE 12620
// begin control := control_remote ;
12610: LD_ADDR_VAR 0 4
12614: PUSH
12615: LD_INT 2
12617: ST_TO_ADDR
// break ;
12618: GO 12622
// end ;
12620: GO 12593
12622: POP
12623: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12624: LD_VAR 0 1
12628: PPUSH
12629: LD_VAR 0 2
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_VAR 0 4
12643: PPUSH
12644: LD_VAR 0 5
12648: PPUSH
12649: CALL_OW 448
12653: IFFALSE 12688
// begin result := [ chassis , engine , control , weapon ] ;
12655: LD_ADDR_VAR 0 6
12659: PUSH
12660: LD_VAR 0 2
12664: PUSH
12665: LD_VAR 0 3
12669: PUSH
12670: LD_VAR 0 4
12674: PUSH
12675: LD_VAR 0 5
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: ST_TO_ADDR
// exit ;
12686: GO 13100
// end ; _chassis := AvailableChassisList ( factory ) ;
12688: LD_ADDR_VAR 0 9
12692: PUSH
12693: LD_VAR 0 1
12697: PPUSH
12698: CALL_OW 475
12702: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12703: LD_ADDR_VAR 0 11
12707: PUSH
12708: LD_VAR 0 1
12712: PPUSH
12713: CALL_OW 476
12717: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12718: LD_ADDR_VAR 0 12
12722: PUSH
12723: LD_VAR 0 1
12727: PPUSH
12728: CALL_OW 477
12732: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12733: LD_ADDR_VAR 0 10
12737: PUSH
12738: LD_VAR 0 1
12742: PPUSH
12743: CALL_OW 478
12747: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12748: LD_VAR 0 9
12752: NOT
12753: PUSH
12754: LD_VAR 0 11
12758: NOT
12759: OR
12760: PUSH
12761: LD_VAR 0 12
12765: NOT
12766: OR
12767: PUSH
12768: LD_VAR 0 10
12772: NOT
12773: OR
12774: IFFALSE 12809
// begin result := [ chassis , engine , control , weapon ] ;
12776: LD_ADDR_VAR 0 6
12780: PUSH
12781: LD_VAR 0 2
12785: PUSH
12786: LD_VAR 0 3
12790: PUSH
12791: LD_VAR 0 4
12795: PUSH
12796: LD_VAR 0 5
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: ST_TO_ADDR
// exit ;
12807: GO 13100
// end ; if not chassis in _chassis then
12809: LD_VAR 0 2
12813: PUSH
12814: LD_VAR 0 9
12818: IN
12819: NOT
12820: IFFALSE 12846
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_VAR 0 9
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_VAR 0 9
12839: PPUSH
12840: CALL_OW 12
12844: ARRAY
12845: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12846: LD_VAR 0 2
12850: PPUSH
12851: LD_VAR 0 3
12855: PPUSH
12856: CALL 13105 0 2
12860: NOT
12861: IFFALSE 12920
// repeat engine := _engine [ 1 ] ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_VAR 0 11
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12877: LD_ADDR_VAR 0 11
12881: PUSH
12882: LD_VAR 0 11
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 3
12894: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12895: LD_VAR 0 2
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: CALL 13105 0 2
12909: PUSH
12910: LD_VAR 0 11
12914: PUSH
12915: EMPTY
12916: EQUAL
12917: OR
12918: IFFALSE 12863
// if not control in _control then
12920: LD_VAR 0 4
12924: PUSH
12925: LD_VAR 0 12
12929: IN
12930: NOT
12931: IFFALSE 12957
// control := _control [ rand ( 1 , _control ) ] ;
12933: LD_ADDR_VAR 0 4
12937: PUSH
12938: LD_VAR 0 12
12942: PUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 12
12950: PPUSH
12951: CALL_OW 12
12955: ARRAY
12956: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12957: LD_VAR 0 2
12961: PPUSH
12962: LD_VAR 0 5
12966: PPUSH
12967: CALL 13325 0 2
12971: NOT
12972: IFFALSE 13031
// repeat weapon := _weapon [ 1 ] ;
12974: LD_ADDR_VAR 0 5
12978: PUSH
12979: LD_VAR 0 10
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12988: LD_ADDR_VAR 0 10
12992: PUSH
12993: LD_VAR 0 10
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 3
13005: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13006: LD_VAR 0 2
13010: PPUSH
13011: LD_VAR 0 5
13015: PPUSH
13016: CALL 13325 0 2
13020: PUSH
13021: LD_VAR 0 10
13025: PUSH
13026: EMPTY
13027: EQUAL
13028: OR
13029: IFFALSE 12974
// result := [ ] ;
13031: LD_ADDR_VAR 0 6
13035: PUSH
13036: EMPTY
13037: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13038: LD_VAR 0 1
13042: PPUSH
13043: LD_VAR 0 2
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_VAR 0 4
13057: PPUSH
13058: LD_VAR 0 5
13062: PPUSH
13063: CALL_OW 448
13067: IFFALSE 13100
// result := [ chassis , engine , control , weapon ] ;
13069: LD_ADDR_VAR 0 6
13073: PUSH
13074: LD_VAR 0 2
13078: PUSH
13079: LD_VAR 0 3
13083: PUSH
13084: LD_VAR 0 4
13088: PUSH
13089: LD_VAR 0 5
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: ST_TO_ADDR
// end ;
13100: LD_VAR 0 6
13104: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13105: LD_INT 0
13107: PPUSH
// if not chassis or not engine then
13108: LD_VAR 0 1
13112: NOT
13113: PUSH
13114: LD_VAR 0 2
13118: NOT
13119: OR
13120: IFFALSE 13124
// exit ;
13122: GO 13320
// case engine of engine_solar :
13124: LD_VAR 0 2
13128: PUSH
13129: LD_INT 2
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13175
13137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13138: LD_ADDR_VAR 0 3
13142: PUSH
13143: LD_INT 11
13145: PUSH
13146: LD_INT 12
13148: PUSH
13149: LD_INT 13
13151: PUSH
13152: LD_INT 14
13154: PUSH
13155: LD_INT 1
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: ST_TO_ADDR
13173: GO 13304
13175: LD_INT 1
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13245
13183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13184: LD_ADDR_VAR 0 3
13188: PUSH
13189: LD_INT 11
13191: PUSH
13192: LD_INT 12
13194: PUSH
13195: LD_INT 13
13197: PUSH
13198: LD_INT 14
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 3
13209: PUSH
13210: LD_INT 4
13212: PUSH
13213: LD_INT 5
13215: PUSH
13216: LD_INT 21
13218: PUSH
13219: LD_INT 23
13221: PUSH
13222: LD_INT 22
13224: PUSH
13225: LD_INT 24
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 13304
13245: LD_INT 3
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13303
13253: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13254: LD_ADDR_VAR 0 3
13258: PUSH
13259: LD_INT 13
13261: PUSH
13262: LD_INT 14
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: LD_INT 4
13273: PUSH
13274: LD_INT 5
13276: PUSH
13277: LD_INT 21
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 23
13285: PUSH
13286: LD_INT 24
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: ST_TO_ADDR
13301: GO 13304
13303: POP
// result := ( chassis in result ) ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_VAR 0 1
13313: PUSH
13314: LD_VAR 0 3
13318: IN
13319: ST_TO_ADDR
// end ;
13320: LD_VAR 0 3
13324: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13325: LD_INT 0
13327: PPUSH
// if not chassis or not weapon then
13328: LD_VAR 0 1
13332: NOT
13333: PUSH
13334: LD_VAR 0 2
13338: NOT
13339: OR
13340: IFFALSE 13344
// exit ;
13342: GO 14404
// case weapon of us_machine_gun :
13344: LD_VAR 0 2
13348: PUSH
13349: LD_INT 2
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13387
13357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13358: LD_ADDR_VAR 0 3
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 3
13371: PUSH
13372: LD_INT 4
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: ST_TO_ADDR
13385: GO 14388
13387: LD_INT 3
13389: DOUBLE
13390: EQUAL
13391: IFTRUE 13395
13393: GO 13425
13395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13396: LD_ADDR_VAR 0 3
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 5
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: ST_TO_ADDR
13423: GO 14388
13425: LD_INT 11
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13463
13433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: LD_INT 5
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 14388
13463: LD_INT 4
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13497
13471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13472: LD_ADDR_VAR 0 3
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 3
13482: PUSH
13483: LD_INT 4
13485: PUSH
13486: LD_INT 5
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: ST_TO_ADDR
13495: GO 14388
13497: LD_INT 5
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13531
13505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: ST_TO_ADDR
13529: GO 14388
13531: LD_INT 9
13533: DOUBLE
13534: EQUAL
13535: IFTRUE 13539
13537: GO 13565
13539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 4
13553: PUSH
13554: LD_INT 5
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: ST_TO_ADDR
13563: GO 14388
13565: LD_INT 7
13567: DOUBLE
13568: EQUAL
13569: IFTRUE 13573
13571: GO 13599
13573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 3
13584: PUSH
13585: LD_INT 4
13587: PUSH
13588: LD_INT 5
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: ST_TO_ADDR
13597: GO 14388
13599: LD_INT 12
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13633
13607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13608: LD_ADDR_VAR 0 3
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: LD_INT 5
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 14388
13633: LD_INT 13
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13667
13641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13642: LD_ADDR_VAR 0 3
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 3
13652: PUSH
13653: LD_INT 4
13655: PUSH
13656: LD_INT 5
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: ST_TO_ADDR
13665: GO 14388
13667: LD_INT 14
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13693
13675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13676: LD_ADDR_VAR 0 3
13680: PUSH
13681: LD_INT 4
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14388
13693: LD_INT 6
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13719
13701: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13702: LD_ADDR_VAR 0 3
13706: PUSH
13707: LD_INT 4
13709: PUSH
13710: LD_INT 5
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: ST_TO_ADDR
13717: GO 14388
13719: LD_INT 10
13721: DOUBLE
13722: EQUAL
13723: IFTRUE 13727
13725: GO 13745
13727: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13728: LD_ADDR_VAR 0 3
13732: PUSH
13733: LD_INT 4
13735: PUSH
13736: LD_INT 5
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: ST_TO_ADDR
13743: GO 14388
13745: LD_INT 22
13747: DOUBLE
13748: EQUAL
13749: IFTRUE 13753
13751: GO 13779
13753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: LD_INT 11
13761: PUSH
13762: LD_INT 12
13764: PUSH
13765: LD_INT 13
13767: PUSH
13768: LD_INT 14
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 14388
13779: LD_INT 23
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13813
13787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_INT 11
13795: PUSH
13796: LD_INT 12
13798: PUSH
13799: LD_INT 13
13801: PUSH
13802: LD_INT 14
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: ST_TO_ADDR
13811: GO 14388
13813: LD_INT 24
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13847
13821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13822: LD_ADDR_VAR 0 3
13826: PUSH
13827: LD_INT 11
13829: PUSH
13830: LD_INT 12
13832: PUSH
13833: LD_INT 13
13835: PUSH
13836: LD_INT 14
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: ST_TO_ADDR
13845: GO 14388
13847: LD_INT 30
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13881
13855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 11
13863: PUSH
13864: LD_INT 12
13866: PUSH
13867: LD_INT 13
13869: PUSH
13870: LD_INT 14
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 14388
13881: LD_INT 25
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 13907
13889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 13
13897: PUSH
13898: LD_INT 14
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: ST_TO_ADDR
13905: GO 14388
13907: LD_INT 27
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 13933
13915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13916: LD_ADDR_VAR 0 3
13920: PUSH
13921: LD_INT 13
13923: PUSH
13924: LD_INT 14
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: ST_TO_ADDR
13931: GO 14388
13933: LD_INT 92
13935: DOUBLE
13936: EQUAL
13937: IFTRUE 13941
13939: GO 13967
13941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_INT 11
13949: PUSH
13950: LD_INT 12
13952: PUSH
13953: LD_INT 13
13955: PUSH
13956: LD_INT 14
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: ST_TO_ADDR
13965: GO 14388
13967: LD_INT 28
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 13993
13975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_INT 13
13983: PUSH
13984: LD_INT 14
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: ST_TO_ADDR
13991: GO 14388
13993: LD_INT 29
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14019
14001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14002: LD_ADDR_VAR 0 3
14006: PUSH
14007: LD_INT 13
14009: PUSH
14010: LD_INT 14
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: ST_TO_ADDR
14017: GO 14388
14019: LD_INT 31
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14045
14027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14028: LD_ADDR_VAR 0 3
14032: PUSH
14033: LD_INT 13
14035: PUSH
14036: LD_INT 14
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: ST_TO_ADDR
14043: GO 14388
14045: LD_INT 26
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14071
14053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14054: LD_ADDR_VAR 0 3
14058: PUSH
14059: LD_INT 13
14061: PUSH
14062: LD_INT 14
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: ST_TO_ADDR
14069: GO 14388
14071: LD_INT 42
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 14105
14079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14080: LD_ADDR_VAR 0 3
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_INT 23
14093: PUSH
14094: LD_INT 24
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: ST_TO_ADDR
14103: GO 14388
14105: LD_INT 43
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14139
14113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14114: LD_ADDR_VAR 0 3
14118: PUSH
14119: LD_INT 21
14121: PUSH
14122: LD_INT 22
14124: PUSH
14125: LD_INT 23
14127: PUSH
14128: LD_INT 24
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: ST_TO_ADDR
14137: GO 14388
14139: LD_INT 44
14141: DOUBLE
14142: EQUAL
14143: IFTRUE 14147
14145: GO 14173
14147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14148: LD_ADDR_VAR 0 3
14152: PUSH
14153: LD_INT 21
14155: PUSH
14156: LD_INT 22
14158: PUSH
14159: LD_INT 23
14161: PUSH
14162: LD_INT 24
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: ST_TO_ADDR
14171: GO 14388
14173: LD_INT 45
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14207
14181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14182: LD_ADDR_VAR 0 3
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 22
14192: PUSH
14193: LD_INT 23
14195: PUSH
14196: LD_INT 24
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: ST_TO_ADDR
14205: GO 14388
14207: LD_INT 49
14209: DOUBLE
14210: EQUAL
14211: IFTRUE 14215
14213: GO 14241
14215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14216: LD_ADDR_VAR 0 3
14220: PUSH
14221: LD_INT 21
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 23
14229: PUSH
14230: LD_INT 24
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: ST_TO_ADDR
14239: GO 14388
14241: LD_INT 51
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14275
14249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_INT 21
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 23
14263: PUSH
14264: LD_INT 24
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: ST_TO_ADDR
14273: GO 14388
14275: LD_INT 52
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14309
14283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14284: LD_ADDR_VAR 0 3
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 22
14294: PUSH
14295: LD_INT 23
14297: PUSH
14298: LD_INT 24
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: ST_TO_ADDR
14307: GO 14388
14309: LD_INT 53
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14335
14317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: LD_INT 23
14325: PUSH
14326: LD_INT 24
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: ST_TO_ADDR
14333: GO 14388
14335: LD_INT 46
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14361
14343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 23
14351: PUSH
14352: LD_INT 24
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: ST_TO_ADDR
14359: GO 14388
14361: LD_INT 47
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14387
14369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_INT 23
14377: PUSH
14378: LD_INT 24
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14388
14387: POP
// result := ( chassis in result ) ;
14388: LD_ADDR_VAR 0 3
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: LD_VAR 0 3
14402: IN
14403: ST_TO_ADDR
// end ;
14404: LD_VAR 0 3
14408: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14409: LD_INT 0
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
// result := array ;
14418: LD_ADDR_VAR 0 5
14422: PUSH
14423: LD_VAR 0 1
14427: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14428: LD_VAR 0 1
14432: NOT
14433: PUSH
14434: LD_VAR 0 2
14438: NOT
14439: OR
14440: PUSH
14441: LD_VAR 0 3
14445: NOT
14446: OR
14447: PUSH
14448: LD_VAR 0 2
14452: PUSH
14453: LD_VAR 0 1
14457: GREATER
14458: OR
14459: PUSH
14460: LD_VAR 0 3
14464: PUSH
14465: LD_VAR 0 1
14469: GREATER
14470: OR
14471: IFFALSE 14475
// exit ;
14473: GO 14771
// if direction then
14475: LD_VAR 0 4
14479: IFFALSE 14543
// begin d := 1 ;
14481: LD_ADDR_VAR 0 9
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// if i_from > i_to then
14489: LD_VAR 0 2
14493: PUSH
14494: LD_VAR 0 3
14498: GREATER
14499: IFFALSE 14525
// length := ( array - i_from ) + i_to else
14501: LD_ADDR_VAR 0 11
14505: PUSH
14506: LD_VAR 0 1
14510: PUSH
14511: LD_VAR 0 2
14515: MINUS
14516: PUSH
14517: LD_VAR 0 3
14521: PLUS
14522: ST_TO_ADDR
14523: GO 14541
// length := i_to - i_from ;
14525: LD_ADDR_VAR 0 11
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: LD_VAR 0 2
14539: MINUS
14540: ST_TO_ADDR
// end else
14541: GO 14604
// begin d := - 1 ;
14543: LD_ADDR_VAR 0 9
14547: PUSH
14548: LD_INT 1
14550: NEG
14551: ST_TO_ADDR
// if i_from > i_to then
14552: LD_VAR 0 2
14556: PUSH
14557: LD_VAR 0 3
14561: GREATER
14562: IFFALSE 14582
// length := i_from - i_to else
14564: LD_ADDR_VAR 0 11
14568: PUSH
14569: LD_VAR 0 2
14573: PUSH
14574: LD_VAR 0 3
14578: MINUS
14579: ST_TO_ADDR
14580: GO 14604
// length := ( array - i_to ) + i_from ;
14582: LD_ADDR_VAR 0 11
14586: PUSH
14587: LD_VAR 0 1
14591: PUSH
14592: LD_VAR 0 3
14596: MINUS
14597: PUSH
14598: LD_VAR 0 2
14602: PLUS
14603: ST_TO_ADDR
// end ; if not length then
14604: LD_VAR 0 11
14608: NOT
14609: IFFALSE 14613
// exit ;
14611: GO 14771
// tmp := array ;
14613: LD_ADDR_VAR 0 10
14617: PUSH
14618: LD_VAR 0 1
14622: ST_TO_ADDR
// for i = 1 to length do
14623: LD_ADDR_VAR 0 6
14627: PUSH
14628: DOUBLE
14629: LD_INT 1
14631: DEC
14632: ST_TO_ADDR
14633: LD_VAR 0 11
14637: PUSH
14638: FOR_TO
14639: IFFALSE 14759
// begin for j = 1 to array do
14641: LD_ADDR_VAR 0 7
14645: PUSH
14646: DOUBLE
14647: LD_INT 1
14649: DEC
14650: ST_TO_ADDR
14651: LD_VAR 0 1
14655: PUSH
14656: FOR_TO
14657: IFFALSE 14745
// begin k := j + d ;
14659: LD_ADDR_VAR 0 8
14663: PUSH
14664: LD_VAR 0 7
14668: PUSH
14669: LD_VAR 0 9
14673: PLUS
14674: ST_TO_ADDR
// if k > array then
14675: LD_VAR 0 8
14679: PUSH
14680: LD_VAR 0 1
14684: GREATER
14685: IFFALSE 14695
// k := 1 ;
14687: LD_ADDR_VAR 0 8
14691: PUSH
14692: LD_INT 1
14694: ST_TO_ADDR
// if not k then
14695: LD_VAR 0 8
14699: NOT
14700: IFFALSE 14712
// k := array ;
14702: LD_ADDR_VAR 0 8
14706: PUSH
14707: LD_VAR 0 1
14711: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14712: LD_ADDR_VAR 0 10
14716: PUSH
14717: LD_VAR 0 10
14721: PPUSH
14722: LD_VAR 0 8
14726: PPUSH
14727: LD_VAR 0 1
14731: PUSH
14732: LD_VAR 0 7
14736: ARRAY
14737: PPUSH
14738: CALL_OW 1
14742: ST_TO_ADDR
// end ;
14743: GO 14656
14745: POP
14746: POP
// array := tmp ;
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_VAR 0 10
14756: ST_TO_ADDR
// end ;
14757: GO 14638
14759: POP
14760: POP
// result := array ;
14761: LD_ADDR_VAR 0 5
14765: PUSH
14766: LD_VAR 0 1
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 5
14775: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
// result := 0 ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_INT 0
14787: ST_TO_ADDR
// if not array or not value in array then
14788: LD_VAR 0 1
14792: NOT
14793: PUSH
14794: LD_VAR 0 2
14798: PUSH
14799: LD_VAR 0 1
14803: IN
14804: NOT
14805: OR
14806: IFFALSE 14810
// exit ;
14808: GO 14864
// for i = 1 to array do
14810: LD_ADDR_VAR 0 4
14814: PUSH
14815: DOUBLE
14816: LD_INT 1
14818: DEC
14819: ST_TO_ADDR
14820: LD_VAR 0 1
14824: PUSH
14825: FOR_TO
14826: IFFALSE 14862
// if value = array [ i ] then
14828: LD_VAR 0 2
14832: PUSH
14833: LD_VAR 0 1
14837: PUSH
14838: LD_VAR 0 4
14842: ARRAY
14843: EQUAL
14844: IFFALSE 14860
// begin result := i ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_VAR 0 4
14855: ST_TO_ADDR
// exit ;
14856: POP
14857: POP
14858: GO 14864
// end ;
14860: GO 14825
14862: POP
14863: POP
// end ;
14864: LD_VAR 0 3
14868: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14869: LD_INT 0
14871: PPUSH
// vc_chassis := chassis ;
14872: LD_ADDR_OWVAR 37
14876: PUSH
14877: LD_VAR 0 1
14881: ST_TO_ADDR
// vc_engine := engine ;
14882: LD_ADDR_OWVAR 39
14886: PUSH
14887: LD_VAR 0 2
14891: ST_TO_ADDR
// vc_control := control ;
14892: LD_ADDR_OWVAR 38
14896: PUSH
14897: LD_VAR 0 3
14901: ST_TO_ADDR
// vc_weapon := weapon ;
14902: LD_ADDR_OWVAR 40
14906: PUSH
14907: LD_VAR 0 4
14911: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14912: LD_ADDR_OWVAR 41
14916: PUSH
14917: LD_VAR 0 5
14921: ST_TO_ADDR
// end ;
14922: LD_VAR 0 6
14926: RET
// export function WantPlant ( unit ) ; var task ; begin
14927: LD_INT 0
14929: PPUSH
14930: PPUSH
// result := false ;
14931: LD_ADDR_VAR 0 2
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 437
14953: ST_TO_ADDR
// if task then
14954: LD_VAR 0 3
14958: IFFALSE 14986
// if task [ 1 ] [ 1 ] = p then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: PUSH
14969: LD_INT 1
14971: ARRAY
14972: PUSH
14973: LD_STRING p
14975: EQUAL
14976: IFFALSE 14986
// result := true ;
14978: LD_ADDR_VAR 0 2
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// end ;
14986: LD_VAR 0 2
14990: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14991: LD_INT 0
14993: PPUSH
14994: PPUSH
14995: PPUSH
14996: PPUSH
// if pos < 1 then
14997: LD_VAR 0 2
15001: PUSH
15002: LD_INT 1
15004: LESS
15005: IFFALSE 15009
// exit ;
15007: GO 15312
// if pos = 1 then
15009: LD_VAR 0 2
15013: PUSH
15014: LD_INT 1
15016: EQUAL
15017: IFFALSE 15050
// result := Replace ( arr , pos [ 1 ] , value ) else
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_VAR 0 1
15028: PPUSH
15029: LD_VAR 0 2
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: LD_VAR 0 3
15042: PPUSH
15043: CALL_OW 1
15047: ST_TO_ADDR
15048: GO 15312
// begin tmp := arr ;
15050: LD_ADDR_VAR 0 6
15054: PUSH
15055: LD_VAR 0 1
15059: ST_TO_ADDR
// s_arr := [ tmp ] ;
15060: LD_ADDR_VAR 0 7
15064: PUSH
15065: LD_VAR 0 6
15069: PUSH
15070: EMPTY
15071: LIST
15072: ST_TO_ADDR
// for i = 1 to pos - 1 do
15073: LD_ADDR_VAR 0 5
15077: PUSH
15078: DOUBLE
15079: LD_INT 1
15081: DEC
15082: ST_TO_ADDR
15083: LD_VAR 0 2
15087: PUSH
15088: LD_INT 1
15090: MINUS
15091: PUSH
15092: FOR_TO
15093: IFFALSE 15138
// begin tmp := tmp [ pos [ i ] ] ;
15095: LD_ADDR_VAR 0 6
15099: PUSH
15100: LD_VAR 0 6
15104: PUSH
15105: LD_VAR 0 2
15109: PUSH
15110: LD_VAR 0 5
15114: ARRAY
15115: ARRAY
15116: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15117: LD_ADDR_VAR 0 7
15121: PUSH
15122: LD_VAR 0 7
15126: PUSH
15127: LD_VAR 0 6
15131: PUSH
15132: EMPTY
15133: LIST
15134: ADD
15135: ST_TO_ADDR
// end ;
15136: GO 15092
15138: POP
15139: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_VAR 0 6
15149: PPUSH
15150: LD_VAR 0 2
15154: PUSH
15155: LD_VAR 0 2
15159: ARRAY
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: CALL_OW 1
15170: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15171: LD_ADDR_VAR 0 7
15175: PUSH
15176: LD_VAR 0 7
15180: PPUSH
15181: LD_VAR 0 7
15185: PPUSH
15186: LD_VAR 0 6
15190: PPUSH
15191: CALL_OW 1
15195: ST_TO_ADDR
// for i = s_arr downto 2 do
15196: LD_ADDR_VAR 0 5
15200: PUSH
15201: DOUBLE
15202: LD_VAR 0 7
15206: INC
15207: ST_TO_ADDR
15208: LD_INT 2
15210: PUSH
15211: FOR_DOWNTO
15212: IFFALSE 15296
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15214: LD_ADDR_VAR 0 6
15218: PUSH
15219: LD_VAR 0 7
15223: PUSH
15224: LD_VAR 0 5
15228: PUSH
15229: LD_INT 1
15231: MINUS
15232: ARRAY
15233: PPUSH
15234: LD_VAR 0 2
15238: PUSH
15239: LD_VAR 0 5
15243: PUSH
15244: LD_INT 1
15246: MINUS
15247: ARRAY
15248: PPUSH
15249: LD_VAR 0 7
15253: PUSH
15254: LD_VAR 0 5
15258: ARRAY
15259: PPUSH
15260: CALL_OW 1
15264: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15265: LD_ADDR_VAR 0 7
15269: PUSH
15270: LD_VAR 0 7
15274: PPUSH
15275: LD_VAR 0 5
15279: PUSH
15280: LD_INT 1
15282: MINUS
15283: PPUSH
15284: LD_VAR 0 6
15288: PPUSH
15289: CALL_OW 1
15293: ST_TO_ADDR
// end ;
15294: GO 15211
15296: POP
15297: POP
// result := s_arr [ 1 ] ;
15298: LD_ADDR_VAR 0 4
15302: PUSH
15303: LD_VAR 0 7
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: ST_TO_ADDR
// end ; end ;
15312: LD_VAR 0 4
15316: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15317: LD_INT 0
15319: PPUSH
15320: PPUSH
// if not list then
15321: LD_VAR 0 1
15325: NOT
15326: IFFALSE 15330
// exit ;
15328: GO 15421
// i := list [ pos1 ] ;
15330: LD_ADDR_VAR 0 5
15334: PUSH
15335: LD_VAR 0 1
15339: PUSH
15340: LD_VAR 0 2
15344: ARRAY
15345: ST_TO_ADDR
// if not i then
15346: LD_VAR 0 5
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15421
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15355: LD_ADDR_VAR 0 1
15359: PUSH
15360: LD_VAR 0 1
15364: PPUSH
15365: LD_VAR 0 2
15369: PPUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_VAR 0 3
15379: ARRAY
15380: PPUSH
15381: CALL_OW 1
15385: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_VAR 0 5
15405: PPUSH
15406: CALL_OW 1
15410: ST_TO_ADDR
// result := list ;
15411: LD_ADDR_VAR 0 4
15415: PUSH
15416: LD_VAR 0 1
15420: ST_TO_ADDR
// end ;
15421: LD_VAR 0 4
15425: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15426: LD_INT 0
15428: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15429: LD_ADDR_VAR 0 5
15433: PUSH
15434: LD_VAR 0 1
15438: PPUSH
15439: CALL_OW 250
15443: PPUSH
15444: LD_VAR 0 1
15448: PPUSH
15449: CALL_OW 251
15453: PPUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_VAR 0 4
15468: PPUSH
15469: CALL 15847 0 5
15473: ST_TO_ADDR
// end ;
15474: LD_VAR 0 5
15478: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15479: LD_INT 0
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
// if not list or not unit then
15485: LD_VAR 0 2
15489: NOT
15490: PUSH
15491: LD_VAR 0 1
15495: NOT
15496: OR
15497: IFFALSE 15501
// exit ;
15499: GO 15842
// result := [ ] ;
15501: LD_ADDR_VAR 0 5
15505: PUSH
15506: EMPTY
15507: ST_TO_ADDR
// for i in list do
15508: LD_ADDR_VAR 0 6
15512: PUSH
15513: LD_VAR 0 2
15517: PUSH
15518: FOR_IN
15519: IFFALSE 15737
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15521: LD_ADDR_VAR 0 8
15525: PUSH
15526: LD_VAR 0 1
15530: PPUSH
15531: LD_VAR 0 6
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: LD_VAR 0 6
15544: PUSH
15545: LD_INT 2
15547: ARRAY
15548: PPUSH
15549: CALL_OW 297
15553: ST_TO_ADDR
// if not Count ( result ) then
15554: LD_VAR 0 5
15558: PPUSH
15559: CALL 12131 0 1
15563: NOT
15564: IFFALSE 15597
// begin result := Join ( result , [ i , tmp ] ) ;
15566: LD_ADDR_VAR 0 5
15570: PUSH
15571: LD_VAR 0 5
15575: PPUSH
15576: LD_VAR 0 6
15580: PUSH
15581: LD_VAR 0 8
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PPUSH
15590: CALL 47812 0 2
15594: ST_TO_ADDR
// continue ;
15595: GO 15518
// end ; if result [ result ] [ 2 ] <= tmp then
15597: LD_VAR 0 5
15601: PUSH
15602: LD_VAR 0 5
15606: ARRAY
15607: PUSH
15608: LD_INT 2
15610: ARRAY
15611: PUSH
15612: LD_VAR 0 8
15616: LESSEQUAL
15617: IFFALSE 15650
// result := Join ( result , [ i , tmp ] ) else
15619: LD_ADDR_VAR 0 5
15623: PUSH
15624: LD_VAR 0 5
15628: PPUSH
15629: LD_VAR 0 6
15633: PUSH
15634: LD_VAR 0 8
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL 47812 0 2
15647: ST_TO_ADDR
15648: GO 15735
// begin for j := 1 to Count ( result ) do
15650: LD_ADDR_VAR 0 7
15654: PUSH
15655: DOUBLE
15656: LD_INT 1
15658: DEC
15659: ST_TO_ADDR
15660: LD_VAR 0 5
15664: PPUSH
15665: CALL 12131 0 1
15669: PUSH
15670: FOR_TO
15671: IFFALSE 15733
// begin if tmp < result [ j ] [ 2 ] then
15673: LD_VAR 0 8
15677: PUSH
15678: LD_VAR 0 5
15682: PUSH
15683: LD_VAR 0 7
15687: ARRAY
15688: PUSH
15689: LD_INT 2
15691: ARRAY
15692: LESS
15693: IFFALSE 15731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: LD_VAR 0 5
15704: PPUSH
15705: LD_VAR 0 7
15709: PPUSH
15710: LD_VAR 0 6
15714: PUSH
15715: LD_VAR 0 8
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 2
15728: ST_TO_ADDR
// break ;
15729: GO 15733
// end ; end ;
15731: GO 15670
15733: POP
15734: POP
// end ; end ;
15735: GO 15518
15737: POP
15738: POP
// if result and not asc then
15739: LD_VAR 0 5
15743: PUSH
15744: LD_VAR 0 3
15748: NOT
15749: AND
15750: IFFALSE 15767
// result := ReverseArray ( result ) ;
15752: LD_ADDR_VAR 0 5
15756: PUSH
15757: LD_VAR 0 5
15761: PPUSH
15762: CALL 43007 0 1
15766: ST_TO_ADDR
// tmp := [ ] ;
15767: LD_ADDR_VAR 0 8
15771: PUSH
15772: EMPTY
15773: ST_TO_ADDR
// if mode then
15774: LD_VAR 0 4
15778: IFFALSE 15842
// begin for i := 1 to result do
15780: LD_ADDR_VAR 0 6
15784: PUSH
15785: DOUBLE
15786: LD_INT 1
15788: DEC
15789: ST_TO_ADDR
15790: LD_VAR 0 5
15794: PUSH
15795: FOR_TO
15796: IFFALSE 15830
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15798: LD_ADDR_VAR 0 8
15802: PUSH
15803: LD_VAR 0 8
15807: PPUSH
15808: LD_VAR 0 5
15812: PUSH
15813: LD_VAR 0 6
15817: ARRAY
15818: PUSH
15819: LD_INT 1
15821: ARRAY
15822: PPUSH
15823: CALL 47812 0 2
15827: ST_TO_ADDR
15828: GO 15795
15830: POP
15831: POP
// result := tmp ;
15832: LD_ADDR_VAR 0 5
15836: PUSH
15837: LD_VAR 0 8
15841: ST_TO_ADDR
// end ; end ;
15842: LD_VAR 0 5
15846: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15847: LD_INT 0
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
// if not list then
15853: LD_VAR 0 3
15857: NOT
15858: IFFALSE 15862
// exit ;
15860: GO 16250
// result := [ ] ;
15862: LD_ADDR_VAR 0 6
15866: PUSH
15867: EMPTY
15868: ST_TO_ADDR
// for i in list do
15869: LD_ADDR_VAR 0 7
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: FOR_IN
15880: IFFALSE 16082
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15882: LD_ADDR_VAR 0 9
15886: PUSH
15887: LD_VAR 0 7
15891: PPUSH
15892: LD_VAR 0 1
15896: PPUSH
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 297
15906: ST_TO_ADDR
// if not result then
15907: LD_VAR 0 6
15911: NOT
15912: IFFALSE 15938
// result := [ [ i , tmp ] ] else
15914: LD_ADDR_VAR 0 6
15918: PUSH
15919: LD_VAR 0 7
15923: PUSH
15924: LD_VAR 0 9
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: ST_TO_ADDR
15936: GO 16080
// begin if result [ result ] [ 2 ] <= tmp then
15938: LD_VAR 0 6
15942: PUSH
15943: LD_VAR 0 6
15947: ARRAY
15948: PUSH
15949: LD_INT 2
15951: ARRAY
15952: PUSH
15953: LD_VAR 0 9
15957: LESSEQUAL
15958: IFFALSE 16000
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15960: LD_ADDR_VAR 0 6
15964: PUSH
15965: LD_VAR 0 6
15969: PPUSH
15970: LD_VAR 0 6
15974: PUSH
15975: LD_INT 1
15977: PLUS
15978: PPUSH
15979: LD_VAR 0 7
15983: PUSH
15984: LD_VAR 0 9
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 2
15997: ST_TO_ADDR
15998: GO 16080
// for j := 1 to result do
16000: LD_ADDR_VAR 0 8
16004: PUSH
16005: DOUBLE
16006: LD_INT 1
16008: DEC
16009: ST_TO_ADDR
16010: LD_VAR 0 6
16014: PUSH
16015: FOR_TO
16016: IFFALSE 16078
// begin if tmp < result [ j ] [ 2 ] then
16018: LD_VAR 0 9
16022: PUSH
16023: LD_VAR 0 6
16027: PUSH
16028: LD_VAR 0 8
16032: ARRAY
16033: PUSH
16034: LD_INT 2
16036: ARRAY
16037: LESS
16038: IFFALSE 16076
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16040: LD_ADDR_VAR 0 6
16044: PUSH
16045: LD_VAR 0 6
16049: PPUSH
16050: LD_VAR 0 8
16054: PPUSH
16055: LD_VAR 0 7
16059: PUSH
16060: LD_VAR 0 9
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 2
16073: ST_TO_ADDR
// break ;
16074: GO 16078
// end ; end ;
16076: GO 16015
16078: POP
16079: POP
// end ; end ;
16080: GO 15879
16082: POP
16083: POP
// if result and not asc then
16084: LD_VAR 0 6
16088: PUSH
16089: LD_VAR 0 4
16093: NOT
16094: AND
16095: IFFALSE 16170
// begin tmp := result ;
16097: LD_ADDR_VAR 0 9
16101: PUSH
16102: LD_VAR 0 6
16106: ST_TO_ADDR
// for i = tmp downto 1 do
16107: LD_ADDR_VAR 0 7
16111: PUSH
16112: DOUBLE
16113: LD_VAR 0 9
16117: INC
16118: ST_TO_ADDR
16119: LD_INT 1
16121: PUSH
16122: FOR_DOWNTO
16123: IFFALSE 16168
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16125: LD_ADDR_VAR 0 6
16129: PUSH
16130: LD_VAR 0 6
16134: PPUSH
16135: LD_VAR 0 9
16139: PUSH
16140: LD_VAR 0 7
16144: MINUS
16145: PUSH
16146: LD_INT 1
16148: PLUS
16149: PPUSH
16150: LD_VAR 0 9
16154: PUSH
16155: LD_VAR 0 7
16159: ARRAY
16160: PPUSH
16161: CALL_OW 1
16165: ST_TO_ADDR
16166: GO 16122
16168: POP
16169: POP
// end ; tmp := [ ] ;
16170: LD_ADDR_VAR 0 9
16174: PUSH
16175: EMPTY
16176: ST_TO_ADDR
// if mode then
16177: LD_VAR 0 5
16181: IFFALSE 16250
// begin for i = 1 to result do
16183: LD_ADDR_VAR 0 7
16187: PUSH
16188: DOUBLE
16189: LD_INT 1
16191: DEC
16192: ST_TO_ADDR
16193: LD_VAR 0 6
16197: PUSH
16198: FOR_TO
16199: IFFALSE 16238
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16201: LD_ADDR_VAR 0 9
16205: PUSH
16206: LD_VAR 0 9
16210: PPUSH
16211: LD_VAR 0 7
16215: PPUSH
16216: LD_VAR 0 6
16220: PUSH
16221: LD_VAR 0 7
16225: ARRAY
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 1
16235: ST_TO_ADDR
16236: GO 16198
16238: POP
16239: POP
// result := tmp ;
16240: LD_ADDR_VAR 0 6
16244: PUSH
16245: LD_VAR 0 9
16249: ST_TO_ADDR
// end ; end ;
16250: LD_VAR 0 6
16254: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16255: LD_INT 0
16257: PPUSH
16258: PPUSH
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16263: LD_ADDR_VAR 0 5
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: LD_INT 0
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: EMPTY
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: ST_TO_ADDR
// if not x or not y then
16285: LD_VAR 0 2
16289: NOT
16290: PUSH
16291: LD_VAR 0 3
16295: NOT
16296: OR
16297: IFFALSE 16301
// exit ;
16299: GO 17951
// if not range then
16301: LD_VAR 0 4
16305: NOT
16306: IFFALSE 16316
// range := 10 ;
16308: LD_ADDR_VAR 0 4
16312: PUSH
16313: LD_INT 10
16315: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16316: LD_ADDR_VAR 0 8
16320: PUSH
16321: LD_INT 81
16323: PUSH
16324: LD_VAR 0 1
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 92
16335: PUSH
16336: LD_VAR 0 2
16340: PUSH
16341: LD_VAR 0 3
16345: PUSH
16346: LD_VAR 0 4
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 21
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: ST_TO_ADDR
// if not tmp then
16384: LD_VAR 0 8
16388: NOT
16389: IFFALSE 16393
// exit ;
16391: GO 17951
// for i in tmp do
16393: LD_ADDR_VAR 0 6
16397: PUSH
16398: LD_VAR 0 8
16402: PUSH
16403: FOR_IN
16404: IFFALSE 17926
// begin points := [ 0 , 0 , 0 ] ;
16406: LD_ADDR_VAR 0 9
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: ST_TO_ADDR
// bpoints := 1 ;
16425: LD_ADDR_VAR 0 10
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16433: LD_VAR 0 6
16437: PPUSH
16438: CALL_OW 247
16442: PUSH
16443: LD_INT 1
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 17029
16451: POP
// begin if GetClass ( i ) = 1 then
16452: LD_VAR 0 6
16456: PPUSH
16457: CALL_OW 257
16461: PUSH
16462: LD_INT 1
16464: EQUAL
16465: IFFALSE 16486
// points := [ 10 , 5 , 3 ] ;
16467: LD_ADDR_VAR 0 9
16471: PUSH
16472: LD_INT 10
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16486: LD_VAR 0 6
16490: PPUSH
16491: CALL_OW 257
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 3
16501: PUSH
16502: LD_INT 4
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: IN
16510: IFFALSE 16531
// points := [ 3 , 2 , 1 ] ;
16512: LD_ADDR_VAR 0 9
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16531: LD_VAR 0 6
16535: PPUSH
16536: CALL_OW 257
16540: PUSH
16541: LD_INT 5
16543: EQUAL
16544: IFFALSE 16565
// points := [ 130 , 5 , 2 ] ;
16546: LD_ADDR_VAR 0 9
16550: PUSH
16551: LD_INT 130
16553: PUSH
16554: LD_INT 5
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16565: LD_VAR 0 6
16569: PPUSH
16570: CALL_OW 257
16574: PUSH
16575: LD_INT 8
16577: EQUAL
16578: IFFALSE 16599
// points := [ 35 , 35 , 30 ] ;
16580: LD_ADDR_VAR 0 9
16584: PUSH
16585: LD_INT 35
16587: PUSH
16588: LD_INT 35
16590: PUSH
16591: LD_INT 30
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16599: LD_VAR 0 6
16603: PPUSH
16604: CALL_OW 257
16608: PUSH
16609: LD_INT 9
16611: EQUAL
16612: IFFALSE 16633
// points := [ 20 , 55 , 40 ] ;
16614: LD_ADDR_VAR 0 9
16618: PUSH
16619: LD_INT 20
16621: PUSH
16622: LD_INT 55
16624: PUSH
16625: LD_INT 40
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16633: LD_VAR 0 6
16637: PPUSH
16638: CALL_OW 257
16642: PUSH
16643: LD_INT 12
16645: PUSH
16646: LD_INT 16
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: IN
16653: IFFALSE 16674
// points := [ 5 , 3 , 2 ] ;
16655: LD_ADDR_VAR 0 9
16659: PUSH
16660: LD_INT 5
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: LD_INT 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16674: LD_VAR 0 6
16678: PPUSH
16679: CALL_OW 257
16683: PUSH
16684: LD_INT 17
16686: EQUAL
16687: IFFALSE 16708
// points := [ 100 , 50 , 75 ] ;
16689: LD_ADDR_VAR 0 9
16693: PUSH
16694: LD_INT 100
16696: PUSH
16697: LD_INT 50
16699: PUSH
16700: LD_INT 75
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16708: LD_VAR 0 6
16712: PPUSH
16713: CALL_OW 257
16717: PUSH
16718: LD_INT 15
16720: EQUAL
16721: IFFALSE 16742
// points := [ 10 , 5 , 3 ] ;
16723: LD_ADDR_VAR 0 9
16727: PUSH
16728: LD_INT 10
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16742: LD_VAR 0 6
16746: PPUSH
16747: CALL_OW 257
16751: PUSH
16752: LD_INT 14
16754: EQUAL
16755: IFFALSE 16776
// points := [ 10 , 0 , 0 ] ;
16757: LD_ADDR_VAR 0 9
16761: PUSH
16762: LD_INT 10
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: LD_INT 0
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16776: LD_VAR 0 6
16780: PPUSH
16781: CALL_OW 257
16785: PUSH
16786: LD_INT 11
16788: EQUAL
16789: IFFALSE 16810
// points := [ 30 , 10 , 5 ] ;
16791: LD_ADDR_VAR 0 9
16795: PUSH
16796: LD_INT 30
16798: PUSH
16799: LD_INT 10
16801: PUSH
16802: LD_INT 5
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16810: LD_VAR 0 1
16814: PPUSH
16815: LD_INT 5
16817: PPUSH
16818: CALL_OW 321
16822: PUSH
16823: LD_INT 2
16825: EQUAL
16826: IFFALSE 16843
// bpoints := bpoints * 1.8 ;
16828: LD_ADDR_VAR 0 10
16832: PUSH
16833: LD_VAR 0 10
16837: PUSH
16838: LD_REAL  1.80000000000000E+0000
16841: MUL
16842: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16843: LD_VAR 0 6
16847: PPUSH
16848: CALL_OW 257
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 2
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: LD_INT 4
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: IN
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_INT 51
16879: PPUSH
16880: CALL_OW 321
16884: PUSH
16885: LD_INT 2
16887: EQUAL
16888: AND
16889: IFFALSE 16906
// bpoints := bpoints * 1.2 ;
16891: LD_ADDR_VAR 0 10
16895: PUSH
16896: LD_VAR 0 10
16900: PUSH
16901: LD_REAL  1.20000000000000E+0000
16904: MUL
16905: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16906: LD_VAR 0 6
16910: PPUSH
16911: CALL_OW 257
16915: PUSH
16916: LD_INT 5
16918: PUSH
16919: LD_INT 7
16921: PUSH
16922: LD_INT 9
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: IN
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: LD_INT 52
16938: PPUSH
16939: CALL_OW 321
16943: PUSH
16944: LD_INT 2
16946: EQUAL
16947: AND
16948: IFFALSE 16965
// bpoints := bpoints * 1.5 ;
16950: LD_ADDR_VAR 0 10
16954: PUSH
16955: LD_VAR 0 10
16959: PUSH
16960: LD_REAL  1.50000000000000E+0000
16963: MUL
16964: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_INT 66
16972: PPUSH
16973: CALL_OW 321
16977: PUSH
16978: LD_INT 2
16980: EQUAL
16981: IFFALSE 16998
// bpoints := bpoints * 1.1 ;
16983: LD_ADDR_VAR 0 10
16987: PUSH
16988: LD_VAR 0 10
16992: PUSH
16993: LD_REAL  1.10000000000000E+0000
16996: MUL
16997: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16998: LD_ADDR_VAR 0 10
17002: PUSH
17003: LD_VAR 0 10
17007: PUSH
17008: LD_VAR 0 6
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 259
17020: PUSH
17021: LD_REAL  1.15000000000000E+0000
17024: MUL
17025: MUL
17026: ST_TO_ADDR
// end ; unit_vehicle :
17027: GO 17855
17029: LD_INT 2
17031: DOUBLE
17032: EQUAL
17033: IFTRUE 17037
17035: GO 17843
17037: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17038: LD_VAR 0 6
17042: PPUSH
17043: CALL_OW 264
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 42
17053: PUSH
17054: LD_INT 24
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: IN
17062: IFFALSE 17083
// points := [ 25 , 5 , 3 ] ;
17064: LD_ADDR_VAR 0 9
17068: PUSH
17069: LD_INT 25
17071: PUSH
17072: LD_INT 5
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17083: LD_VAR 0 6
17087: PPUSH
17088: CALL_OW 264
17092: PUSH
17093: LD_INT 4
17095: PUSH
17096: LD_INT 43
17098: PUSH
17099: LD_INT 25
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: IN
17107: IFFALSE 17128
// points := [ 40 , 15 , 5 ] ;
17109: LD_ADDR_VAR 0 9
17113: PUSH
17114: LD_INT 40
17116: PUSH
17117: LD_INT 15
17119: PUSH
17120: LD_INT 5
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17128: LD_VAR 0 6
17132: PPUSH
17133: CALL_OW 264
17137: PUSH
17138: LD_INT 3
17140: PUSH
17141: LD_INT 23
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: IN
17148: IFFALSE 17169
// points := [ 7 , 25 , 8 ] ;
17150: LD_ADDR_VAR 0 9
17154: PUSH
17155: LD_INT 7
17157: PUSH
17158: LD_INT 25
17160: PUSH
17161: LD_INT 8
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17169: LD_VAR 0 6
17173: PPUSH
17174: CALL_OW 264
17178: PUSH
17179: LD_INT 5
17181: PUSH
17182: LD_INT 27
17184: PUSH
17185: LD_INT 44
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: IN
17193: IFFALSE 17214
// points := [ 14 , 50 , 16 ] ;
17195: LD_ADDR_VAR 0 9
17199: PUSH
17200: LD_INT 14
17202: PUSH
17203: LD_INT 50
17205: PUSH
17206: LD_INT 16
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17214: LD_VAR 0 6
17218: PPUSH
17219: CALL_OW 264
17223: PUSH
17224: LD_INT 6
17226: PUSH
17227: LD_INT 46
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: IN
17234: IFFALSE 17255
// points := [ 32 , 120 , 70 ] ;
17236: LD_ADDR_VAR 0 9
17240: PUSH
17241: LD_INT 32
17243: PUSH
17244: LD_INT 120
17246: PUSH
17247: LD_INT 70
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17255: LD_VAR 0 6
17259: PPUSH
17260: CALL_OW 264
17264: PUSH
17265: LD_INT 7
17267: PUSH
17268: LD_INT 28
17270: PUSH
17271: LD_INT 45
17273: PUSH
17274: LD_INT 92
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: IN
17283: IFFALSE 17304
// points := [ 35 , 20 , 45 ] ;
17285: LD_ADDR_VAR 0 9
17289: PUSH
17290: LD_INT 35
17292: PUSH
17293: LD_INT 20
17295: PUSH
17296: LD_INT 45
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17304: LD_VAR 0 6
17308: PPUSH
17309: CALL_OW 264
17313: PUSH
17314: LD_INT 47
17316: PUSH
17317: EMPTY
17318: LIST
17319: IN
17320: IFFALSE 17341
// points := [ 67 , 45 , 75 ] ;
17322: LD_ADDR_VAR 0 9
17326: PUSH
17327: LD_INT 67
17329: PUSH
17330: LD_INT 45
17332: PUSH
17333: LD_INT 75
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17341: LD_VAR 0 6
17345: PPUSH
17346: CALL_OW 264
17350: PUSH
17351: LD_INT 26
17353: PUSH
17354: EMPTY
17355: LIST
17356: IN
17357: IFFALSE 17378
// points := [ 120 , 30 , 80 ] ;
17359: LD_ADDR_VAR 0 9
17363: PUSH
17364: LD_INT 120
17366: PUSH
17367: LD_INT 30
17369: PUSH
17370: LD_INT 80
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17378: LD_VAR 0 6
17382: PPUSH
17383: CALL_OW 264
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: EMPTY
17392: LIST
17393: IN
17394: IFFALSE 17415
// points := [ 40 , 1 , 1 ] ;
17396: LD_ADDR_VAR 0 9
17400: PUSH
17401: LD_INT 40
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17415: LD_VAR 0 6
17419: PPUSH
17420: CALL_OW 264
17424: PUSH
17425: LD_INT 29
17427: PUSH
17428: EMPTY
17429: LIST
17430: IN
17431: IFFALSE 17452
// points := [ 70 , 200 , 400 ] ;
17433: LD_ADDR_VAR 0 9
17437: PUSH
17438: LD_INT 70
17440: PUSH
17441: LD_INT 200
17443: PUSH
17444: LD_INT 400
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17452: LD_VAR 0 6
17456: PPUSH
17457: CALL_OW 264
17461: PUSH
17462: LD_INT 14
17464: PUSH
17465: LD_INT 53
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: IN
17472: IFFALSE 17493
// points := [ 40 , 10 , 20 ] ;
17474: LD_ADDR_VAR 0 9
17478: PUSH
17479: LD_INT 40
17481: PUSH
17482: LD_INT 10
17484: PUSH
17485: LD_INT 20
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17493: LD_VAR 0 6
17497: PPUSH
17498: CALL_OW 264
17502: PUSH
17503: LD_INT 9
17505: PUSH
17506: EMPTY
17507: LIST
17508: IN
17509: IFFALSE 17530
// points := [ 5 , 70 , 20 ] ;
17511: LD_ADDR_VAR 0 9
17515: PUSH
17516: LD_INT 5
17518: PUSH
17519: LD_INT 70
17521: PUSH
17522: LD_INT 20
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17530: LD_VAR 0 6
17534: PPUSH
17535: CALL_OW 264
17539: PUSH
17540: LD_INT 10
17542: PUSH
17543: EMPTY
17544: LIST
17545: IN
17546: IFFALSE 17567
// points := [ 35 , 110 , 70 ] ;
17548: LD_ADDR_VAR 0 9
17552: PUSH
17553: LD_INT 35
17555: PUSH
17556: LD_INT 110
17558: PUSH
17559: LD_INT 70
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17567: LD_VAR 0 6
17571: PPUSH
17572: CALL_OW 265
17576: PUSH
17577: LD_INT 25
17579: EQUAL
17580: IFFALSE 17601
// points := [ 80 , 65 , 100 ] ;
17582: LD_ADDR_VAR 0 9
17586: PUSH
17587: LD_INT 80
17589: PUSH
17590: LD_INT 65
17592: PUSH
17593: LD_INT 100
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17601: LD_VAR 0 6
17605: PPUSH
17606: CALL_OW 263
17610: PUSH
17611: LD_INT 1
17613: EQUAL
17614: IFFALSE 17649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17616: LD_ADDR_VAR 0 10
17620: PUSH
17621: LD_VAR 0 10
17625: PUSH
17626: LD_VAR 0 6
17630: PPUSH
17631: CALL_OW 311
17635: PPUSH
17636: LD_INT 3
17638: PPUSH
17639: CALL_OW 259
17643: PUSH
17644: LD_INT 4
17646: MUL
17647: MUL
17648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17649: LD_VAR 0 6
17653: PPUSH
17654: CALL_OW 263
17658: PUSH
17659: LD_INT 2
17661: EQUAL
17662: IFFALSE 17713
// begin j := IsControledBy ( i ) ;
17664: LD_ADDR_VAR 0 7
17668: PUSH
17669: LD_VAR 0 6
17673: PPUSH
17674: CALL_OW 312
17678: ST_TO_ADDR
// if j then
17679: LD_VAR 0 7
17683: IFFALSE 17713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17685: LD_ADDR_VAR 0 10
17689: PUSH
17690: LD_VAR 0 10
17694: PUSH
17695: LD_VAR 0 7
17699: PPUSH
17700: LD_INT 3
17702: PPUSH
17703: CALL_OW 259
17707: PUSH
17708: LD_INT 3
17710: MUL
17711: MUL
17712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17713: LD_VAR 0 6
17717: PPUSH
17718: CALL_OW 264
17722: PUSH
17723: LD_INT 5
17725: PUSH
17726: LD_INT 6
17728: PUSH
17729: LD_INT 46
17731: PUSH
17732: LD_INT 44
17734: PUSH
17735: LD_INT 47
17737: PUSH
17738: LD_INT 45
17740: PUSH
17741: LD_INT 28
17743: PUSH
17744: LD_INT 7
17746: PUSH
17747: LD_INT 27
17749: PUSH
17750: LD_INT 29
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: IN
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: LD_INT 52
17773: PPUSH
17774: CALL_OW 321
17778: PUSH
17779: LD_INT 2
17781: EQUAL
17782: AND
17783: IFFALSE 17800
// bpoints := bpoints * 1.2 ;
17785: LD_ADDR_VAR 0 10
17789: PUSH
17790: LD_VAR 0 10
17794: PUSH
17795: LD_REAL  1.20000000000000E+0000
17798: MUL
17799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17800: LD_VAR 0 6
17804: PPUSH
17805: CALL_OW 264
17809: PUSH
17810: LD_INT 6
17812: PUSH
17813: LD_INT 46
17815: PUSH
17816: LD_INT 47
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: IN
17824: IFFALSE 17841
// bpoints := bpoints * 1.2 ;
17826: LD_ADDR_VAR 0 10
17830: PUSH
17831: LD_VAR 0 10
17835: PUSH
17836: LD_REAL  1.20000000000000E+0000
17839: MUL
17840: ST_TO_ADDR
// end ; unit_building :
17841: GO 17855
17843: LD_INT 3
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 17854
17851: POP
// ; end ;
17852: GO 17855
17854: POP
// for j = 1 to 3 do
17855: LD_ADDR_VAR 0 7
17859: PUSH
17860: DOUBLE
17861: LD_INT 1
17863: DEC
17864: ST_TO_ADDR
17865: LD_INT 3
17867: PUSH
17868: FOR_TO
17869: IFFALSE 17922
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17871: LD_ADDR_VAR 0 5
17875: PUSH
17876: LD_VAR 0 5
17880: PPUSH
17881: LD_VAR 0 7
17885: PPUSH
17886: LD_VAR 0 5
17890: PUSH
17891: LD_VAR 0 7
17895: ARRAY
17896: PUSH
17897: LD_VAR 0 9
17901: PUSH
17902: LD_VAR 0 7
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 10
17912: MUL
17913: PLUS
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
17920: GO 17868
17922: POP
17923: POP
// end ;
17924: GO 16403
17926: POP
17927: POP
// result := Replace ( result , 4 , tmp ) ;
17928: LD_ADDR_VAR 0 5
17932: PUSH
17933: LD_VAR 0 5
17937: PPUSH
17938: LD_INT 4
17940: PPUSH
17941: LD_VAR 0 8
17945: PPUSH
17946: CALL_OW 1
17950: ST_TO_ADDR
// end ;
17951: LD_VAR 0 5
17955: RET
// export function DangerAtRange ( unit , range ) ; begin
17956: LD_INT 0
17958: PPUSH
// if not unit then
17959: LD_VAR 0 1
17963: NOT
17964: IFFALSE 17968
// exit ;
17966: GO 18013
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17968: LD_ADDR_VAR 0 3
17972: PUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 255
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 250
17992: PPUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 251
18002: PPUSH
18003: LD_VAR 0 2
18007: PPUSH
18008: CALL 16255 0 4
18012: ST_TO_ADDR
// end ;
18013: LD_VAR 0 3
18017: RET
// export function DangerInArea ( side , area ) ; begin
18018: LD_INT 0
18020: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 2
18030: PPUSH
18031: LD_INT 81
18033: PUSH
18034: LD_VAR 0 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PPUSH
18043: CALL_OW 70
18047: ST_TO_ADDR
// end ;
18048: LD_VAR 0 3
18052: RET
// export function IsExtension ( b ) ; begin
18053: LD_INT 0
18055: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18056: LD_ADDR_VAR 0 2
18060: PUSH
18061: LD_VAR 0 1
18065: PUSH
18066: LD_INT 23
18068: PUSH
18069: LD_INT 20
18071: PUSH
18072: LD_INT 22
18074: PUSH
18075: LD_INT 17
18077: PUSH
18078: LD_INT 24
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 19
18086: PUSH
18087: LD_INT 16
18089: PUSH
18090: LD_INT 25
18092: PUSH
18093: LD_INT 18
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: IN
18108: ST_TO_ADDR
// end ;
18109: LD_VAR 0 2
18113: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18114: LD_INT 0
18116: PPUSH
18117: PPUSH
18118: PPUSH
// result := [ ] ;
18119: LD_ADDR_VAR 0 4
18123: PUSH
18124: EMPTY
18125: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18126: LD_ADDR_VAR 0 5
18130: PUSH
18131: LD_VAR 0 2
18135: PPUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 70
18150: ST_TO_ADDR
// if not tmp then
18151: LD_VAR 0 5
18155: NOT
18156: IFFALSE 18160
// exit ;
18158: GO 18224
// if checkLink then
18160: LD_VAR 0 3
18164: IFFALSE 18214
// begin for i in tmp do
18166: LD_ADDR_VAR 0 6
18170: PUSH
18171: LD_VAR 0 5
18175: PUSH
18176: FOR_IN
18177: IFFALSE 18212
// if GetBase ( i ) <> base then
18179: LD_VAR 0 6
18183: PPUSH
18184: CALL_OW 274
18188: PUSH
18189: LD_VAR 0 1
18193: NONEQUAL
18194: IFFALSE 18210
// ComLinkToBase ( base , i ) ;
18196: LD_VAR 0 1
18200: PPUSH
18201: LD_VAR 0 6
18205: PPUSH
18206: CALL_OW 169
18210: GO 18176
18212: POP
18213: POP
// end ; result := tmp ;
18214: LD_ADDR_VAR 0 4
18218: PUSH
18219: LD_VAR 0 5
18223: ST_TO_ADDR
// end ;
18224: LD_VAR 0 4
18228: RET
// export function ComComplete ( units , b ) ; var i ; begin
18229: LD_INT 0
18231: PPUSH
18232: PPUSH
// if not units then
18233: LD_VAR 0 1
18237: NOT
18238: IFFALSE 18242
// exit ;
18240: GO 18332
// for i in units do
18242: LD_ADDR_VAR 0 4
18246: PUSH
18247: LD_VAR 0 1
18251: PUSH
18252: FOR_IN
18253: IFFALSE 18330
// if BuildingStatus ( b ) = bs_build then
18255: LD_VAR 0 2
18259: PPUSH
18260: CALL_OW 461
18264: PUSH
18265: LD_INT 1
18267: EQUAL
18268: IFFALSE 18328
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18270: LD_VAR 0 4
18274: PPUSH
18275: LD_STRING h
18277: PUSH
18278: LD_VAR 0 2
18282: PPUSH
18283: CALL_OW 250
18287: PUSH
18288: LD_VAR 0 2
18292: PPUSH
18293: CALL_OW 251
18297: PUSH
18298: LD_VAR 0 2
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: PPUSH
18324: CALL_OW 446
18328: GO 18252
18330: POP
18331: POP
// end ;
18332: LD_VAR 0 3
18336: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18345: LD_VAR 0 1
18349: NOT
18350: PUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 263
18360: PUSH
18361: LD_INT 2
18363: NONEQUAL
18364: OR
18365: IFFALSE 18369
// exit ;
18367: GO 18685
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18369: LD_ADDR_VAR 0 6
18373: PUSH
18374: LD_INT 22
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 255
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 36
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 34
18406: PUSH
18407: LD_INT 31
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PPUSH
18423: CALL_OW 69
18427: ST_TO_ADDR
// if not tmp then
18428: LD_VAR 0 6
18432: NOT
18433: IFFALSE 18437
// exit ;
18435: GO 18685
// result := [ ] ;
18437: LD_ADDR_VAR 0 2
18441: PUSH
18442: EMPTY
18443: ST_TO_ADDR
// for i in tmp do
18444: LD_ADDR_VAR 0 3
18448: PUSH
18449: LD_VAR 0 6
18453: PUSH
18454: FOR_IN
18455: IFFALSE 18526
// begin t := UnitsInside ( i ) ;
18457: LD_ADDR_VAR 0 4
18461: PUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: CALL_OW 313
18471: ST_TO_ADDR
// if t then
18472: LD_VAR 0 4
18476: IFFALSE 18524
// for j in t do
18478: LD_ADDR_VAR 0 7
18482: PUSH
18483: LD_VAR 0 4
18487: PUSH
18488: FOR_IN
18489: IFFALSE 18522
// result := Replace ( result , result + 1 , j ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_VAR 0 2
18500: PPUSH
18501: LD_VAR 0 2
18505: PUSH
18506: LD_INT 1
18508: PLUS
18509: PPUSH
18510: LD_VAR 0 7
18514: PPUSH
18515: CALL_OW 1
18519: ST_TO_ADDR
18520: GO 18488
18522: POP
18523: POP
// end ;
18524: GO 18454
18526: POP
18527: POP
// if not result then
18528: LD_VAR 0 2
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18685
// mech := result [ 1 ] ;
18537: LD_ADDR_VAR 0 5
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: ST_TO_ADDR
// if result > 1 then
18551: LD_VAR 0 2
18555: PUSH
18556: LD_INT 1
18558: GREATER
18559: IFFALSE 18671
// begin for i = 2 to result do
18561: LD_ADDR_VAR 0 3
18565: PUSH
18566: DOUBLE
18567: LD_INT 2
18569: DEC
18570: ST_TO_ADDR
18571: LD_VAR 0 2
18575: PUSH
18576: FOR_TO
18577: IFFALSE 18669
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18579: LD_ADDR_VAR 0 4
18583: PUSH
18584: LD_VAR 0 2
18588: PUSH
18589: LD_VAR 0 3
18593: ARRAY
18594: PPUSH
18595: LD_INT 3
18597: PPUSH
18598: CALL_OW 259
18602: PUSH
18603: LD_VAR 0 2
18607: PUSH
18608: LD_VAR 0 3
18612: ARRAY
18613: PPUSH
18614: CALL_OW 432
18618: MINUS
18619: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18620: LD_VAR 0 4
18624: PUSH
18625: LD_VAR 0 5
18629: PPUSH
18630: LD_INT 3
18632: PPUSH
18633: CALL_OW 259
18637: PUSH
18638: LD_VAR 0 5
18642: PPUSH
18643: CALL_OW 432
18647: MINUS
18648: GREATEREQUAL
18649: IFFALSE 18667
// mech := result [ i ] ;
18651: LD_ADDR_VAR 0 5
18655: PUSH
18656: LD_VAR 0 2
18660: PUSH
18661: LD_VAR 0 3
18665: ARRAY
18666: ST_TO_ADDR
// end ;
18667: GO 18576
18669: POP
18670: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_VAR 0 5
18680: PPUSH
18681: CALL_OW 135
// end ;
18685: LD_VAR 0 2
18689: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18690: LD_INT 0
18692: PPUSH
18693: PPUSH
18694: PPUSH
18695: PPUSH
18696: PPUSH
18697: PPUSH
18698: PPUSH
18699: PPUSH
18700: PPUSH
18701: PPUSH
18702: PPUSH
18703: PPUSH
18704: PPUSH
// result := [ ] ;
18705: LD_ADDR_VAR 0 7
18709: PUSH
18710: EMPTY
18711: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18712: LD_VAR 0 1
18716: PPUSH
18717: CALL_OW 266
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: IN
18732: NOT
18733: IFFALSE 18737
// exit ;
18735: GO 20371
// if name then
18737: LD_VAR 0 3
18741: IFFALSE 18757
// SetBName ( base_dep , name ) ;
18743: LD_VAR 0 1
18747: PPUSH
18748: LD_VAR 0 3
18752: PPUSH
18753: CALL_OW 500
// base := GetBase ( base_dep ) ;
18757: LD_ADDR_VAR 0 15
18761: PUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 274
18771: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18772: LD_ADDR_VAR 0 16
18776: PUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 255
18786: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18787: LD_ADDR_VAR 0 17
18791: PUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 248
18801: ST_TO_ADDR
// if sources then
18802: LD_VAR 0 5
18806: IFFALSE 18853
// for i = 1 to 3 do
18808: LD_ADDR_VAR 0 8
18812: PUSH
18813: DOUBLE
18814: LD_INT 1
18816: DEC
18817: ST_TO_ADDR
18818: LD_INT 3
18820: PUSH
18821: FOR_TO
18822: IFFALSE 18851
// AddResourceType ( base , i , sources [ i ] ) ;
18824: LD_VAR 0 15
18828: PPUSH
18829: LD_VAR 0 8
18833: PPUSH
18834: LD_VAR 0 5
18838: PUSH
18839: LD_VAR 0 8
18843: ARRAY
18844: PPUSH
18845: CALL_OW 276
18849: GO 18821
18851: POP
18852: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18853: LD_ADDR_VAR 0 18
18857: PUSH
18858: LD_VAR 0 15
18862: PPUSH
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL 18114 0 3
18875: ST_TO_ADDR
// InitHc ;
18876: CALL_OW 19
// InitUc ;
18880: CALL_OW 18
// uc_side := side ;
18884: LD_ADDR_OWVAR 20
18888: PUSH
18889: LD_VAR 0 16
18893: ST_TO_ADDR
// uc_nation := nation ;
18894: LD_ADDR_OWVAR 21
18898: PUSH
18899: LD_VAR 0 17
18903: ST_TO_ADDR
// if buildings then
18904: LD_VAR 0 18
18908: IFFALSE 20230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18910: LD_ADDR_VAR 0 19
18914: PUSH
18915: LD_VAR 0 18
18919: PPUSH
18920: LD_INT 2
18922: PUSH
18923: LD_INT 30
18925: PUSH
18926: LD_INT 29
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 30
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 72
18952: ST_TO_ADDR
// if tmp then
18953: LD_VAR 0 19
18957: IFFALSE 19005
// for i in tmp do
18959: LD_ADDR_VAR 0 8
18963: PUSH
18964: LD_VAR 0 19
18968: PUSH
18969: FOR_IN
18970: IFFALSE 19003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18972: LD_VAR 0 8
18976: PPUSH
18977: CALL_OW 250
18981: PPUSH
18982: LD_VAR 0 8
18986: PPUSH
18987: CALL_OW 251
18991: PPUSH
18992: LD_VAR 0 16
18996: PPUSH
18997: CALL_OW 441
19001: GO 18969
19003: POP
19004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19005: LD_VAR 0 18
19009: PPUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 30
19015: PUSH
19016: LD_INT 32
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 33
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 72
19042: IFFALSE 19130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19044: LD_ADDR_VAR 0 8
19048: PUSH
19049: LD_VAR 0 18
19053: PPUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: LD_INT 32
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 30
19069: PUSH
19070: LD_INT 33
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 72
19086: PUSH
19087: FOR_IN
19088: IFFALSE 19128
// begin if not GetBWeapon ( i ) then
19090: LD_VAR 0 8
19094: PPUSH
19095: CALL_OW 269
19099: NOT
19100: IFFALSE 19126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19102: LD_VAR 0 8
19106: PPUSH
19107: LD_VAR 0 8
19111: PPUSH
19112: LD_VAR 0 2
19116: PPUSH
19117: CALL 20376 0 2
19121: PPUSH
19122: CALL_OW 431
// end ;
19126: GO 19087
19128: POP
19129: POP
// end ; for i = 1 to personel do
19130: LD_ADDR_VAR 0 8
19134: PUSH
19135: DOUBLE
19136: LD_INT 1
19138: DEC
19139: ST_TO_ADDR
19140: LD_VAR 0 6
19144: PUSH
19145: FOR_TO
19146: IFFALSE 20210
// begin if i > 4 then
19148: LD_VAR 0 8
19152: PUSH
19153: LD_INT 4
19155: GREATER
19156: IFFALSE 19160
// break ;
19158: GO 20210
// case i of 1 :
19160: LD_VAR 0 8
19164: PUSH
19165: LD_INT 1
19167: DOUBLE
19168: EQUAL
19169: IFTRUE 19173
19171: GO 19253
19173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19174: LD_ADDR_VAR 0 12
19178: PUSH
19179: LD_VAR 0 18
19183: PPUSH
19184: LD_INT 22
19186: PUSH
19187: LD_VAR 0 16
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 58
19198: PUSH
19199: EMPTY
19200: LIST
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 30
19207: PUSH
19208: LD_INT 32
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 30
19217: PUSH
19218: LD_INT 4
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 5
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: PPUSH
19246: CALL_OW 72
19250: ST_TO_ADDR
19251: GO 19475
19253: LD_INT 2
19255: DOUBLE
19256: EQUAL
19257: IFTRUE 19261
19259: GO 19323
19261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19262: LD_ADDR_VAR 0 12
19266: PUSH
19267: LD_VAR 0 18
19271: PPUSH
19272: LD_INT 22
19274: PUSH
19275: LD_VAR 0 16
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 30
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 30
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PPUSH
19316: CALL_OW 72
19320: ST_TO_ADDR
19321: GO 19475
19323: LD_INT 3
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19393
19331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19332: LD_ADDR_VAR 0 12
19336: PUSH
19337: LD_VAR 0 18
19341: PPUSH
19342: LD_INT 22
19344: PUSH
19345: LD_VAR 0 16
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 30
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 72
19390: ST_TO_ADDR
19391: GO 19475
19393: LD_INT 4
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19474
19401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19402: LD_ADDR_VAR 0 12
19406: PUSH
19407: LD_VAR 0 18
19411: PPUSH
19412: LD_INT 22
19414: PUSH
19415: LD_VAR 0 16
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 30
19429: PUSH
19430: LD_INT 6
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 30
19439: PUSH
19440: LD_INT 7
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 30
19449: PUSH
19450: LD_INT 8
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PPUSH
19467: CALL_OW 72
19471: ST_TO_ADDR
19472: GO 19475
19474: POP
// if i = 1 then
19475: LD_VAR 0 8
19479: PUSH
19480: LD_INT 1
19482: EQUAL
19483: IFFALSE 19594
// begin tmp := [ ] ;
19485: LD_ADDR_VAR 0 19
19489: PUSH
19490: EMPTY
19491: ST_TO_ADDR
// for j in f do
19492: LD_ADDR_VAR 0 9
19496: PUSH
19497: LD_VAR 0 12
19501: PUSH
19502: FOR_IN
19503: IFFALSE 19576
// if GetBType ( j ) = b_bunker then
19505: LD_VAR 0 9
19509: PPUSH
19510: CALL_OW 266
19514: PUSH
19515: LD_INT 32
19517: EQUAL
19518: IFFALSE 19545
// tmp := Insert ( tmp , 1 , j ) else
19520: LD_ADDR_VAR 0 19
19524: PUSH
19525: LD_VAR 0 19
19529: PPUSH
19530: LD_INT 1
19532: PPUSH
19533: LD_VAR 0 9
19537: PPUSH
19538: CALL_OW 2
19542: ST_TO_ADDR
19543: GO 19574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19545: LD_ADDR_VAR 0 19
19549: PUSH
19550: LD_VAR 0 19
19554: PPUSH
19555: LD_VAR 0 19
19559: PUSH
19560: LD_INT 1
19562: PLUS
19563: PPUSH
19564: LD_VAR 0 9
19568: PPUSH
19569: CALL_OW 2
19573: ST_TO_ADDR
19574: GO 19502
19576: POP
19577: POP
// if tmp then
19578: LD_VAR 0 19
19582: IFFALSE 19594
// f := tmp ;
19584: LD_ADDR_VAR 0 12
19588: PUSH
19589: LD_VAR 0 19
19593: ST_TO_ADDR
// end ; x := personel [ i ] ;
19594: LD_ADDR_VAR 0 13
19598: PUSH
19599: LD_VAR 0 6
19603: PUSH
19604: LD_VAR 0 8
19608: ARRAY
19609: ST_TO_ADDR
// if x = - 1 then
19610: LD_VAR 0 13
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: EQUAL
19619: IFFALSE 19828
// begin for j in f do
19621: LD_ADDR_VAR 0 9
19625: PUSH
19626: LD_VAR 0 12
19630: PUSH
19631: FOR_IN
19632: IFFALSE 19824
// repeat InitHc ;
19634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19638: LD_VAR 0 9
19642: PPUSH
19643: CALL_OW 266
19647: PUSH
19648: LD_INT 5
19650: EQUAL
19651: IFFALSE 19721
// begin if UnitsInside ( j ) < 3 then
19653: LD_VAR 0 9
19657: PPUSH
19658: CALL_OW 313
19662: PUSH
19663: LD_INT 3
19665: LESS
19666: IFFALSE 19702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19668: LD_INT 0
19670: PPUSH
19671: LD_INT 5
19673: PUSH
19674: LD_INT 8
19676: PUSH
19677: LD_INT 9
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: LD_VAR 0 17
19689: ARRAY
19690: PPUSH
19691: LD_VAR 0 4
19695: PPUSH
19696: CALL_OW 380
19700: GO 19719
// PrepareHuman ( false , i , skill ) ;
19702: LD_INT 0
19704: PPUSH
19705: LD_VAR 0 8
19709: PPUSH
19710: LD_VAR 0 4
19714: PPUSH
19715: CALL_OW 380
// end else
19719: GO 19738
// PrepareHuman ( false , i , skill ) ;
19721: LD_INT 0
19723: PPUSH
19724: LD_VAR 0 8
19728: PPUSH
19729: LD_VAR 0 4
19733: PPUSH
19734: CALL_OW 380
// un := CreateHuman ;
19738: LD_ADDR_VAR 0 14
19742: PUSH
19743: CALL_OW 44
19747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19748: LD_ADDR_VAR 0 7
19752: PUSH
19753: LD_VAR 0 7
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_VAR 0 14
19765: PPUSH
19766: CALL_OW 2
19770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19771: LD_VAR 0 14
19775: PPUSH
19776: LD_VAR 0 9
19780: PPUSH
19781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19785: LD_VAR 0 9
19789: PPUSH
19790: CALL_OW 313
19794: PUSH
19795: LD_INT 6
19797: EQUAL
19798: PUSH
19799: LD_VAR 0 9
19803: PPUSH
19804: CALL_OW 266
19808: PUSH
19809: LD_INT 32
19811: PUSH
19812: LD_INT 31
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: IN
19819: OR
19820: IFFALSE 19634
19822: GO 19631
19824: POP
19825: POP
// end else
19826: GO 20208
// for j = 1 to x do
19828: LD_ADDR_VAR 0 9
19832: PUSH
19833: DOUBLE
19834: LD_INT 1
19836: DEC
19837: ST_TO_ADDR
19838: LD_VAR 0 13
19842: PUSH
19843: FOR_TO
19844: IFFALSE 20206
// begin InitHc ;
19846: CALL_OW 19
// if not f then
19850: LD_VAR 0 12
19854: NOT
19855: IFFALSE 19944
// begin PrepareHuman ( false , i , skill ) ;
19857: LD_INT 0
19859: PPUSH
19860: LD_VAR 0 8
19864: PPUSH
19865: LD_VAR 0 4
19869: PPUSH
19870: CALL_OW 380
// un := CreateHuman ;
19874: LD_ADDR_VAR 0 14
19878: PUSH
19879: CALL_OW 44
19883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19884: LD_ADDR_VAR 0 7
19888: PUSH
19889: LD_VAR 0 7
19893: PPUSH
19894: LD_INT 1
19896: PPUSH
19897: LD_VAR 0 14
19901: PPUSH
19902: CALL_OW 2
19906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19907: LD_VAR 0 14
19911: PPUSH
19912: LD_VAR 0 1
19916: PPUSH
19917: CALL_OW 250
19921: PPUSH
19922: LD_VAR 0 1
19926: PPUSH
19927: CALL_OW 251
19931: PPUSH
19932: LD_INT 10
19934: PPUSH
19935: LD_INT 0
19937: PPUSH
19938: CALL_OW 50
// continue ;
19942: GO 19843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19944: LD_VAR 0 12
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: PPUSH
19953: CALL_OW 313
19957: PUSH
19958: LD_VAR 0 12
19962: PUSH
19963: LD_INT 1
19965: ARRAY
19966: PPUSH
19967: CALL_OW 266
19971: PUSH
19972: LD_INT 32
19974: PUSH
19975: LD_INT 31
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: IN
19982: AND
19983: PUSH
19984: LD_VAR 0 12
19988: PUSH
19989: LD_INT 1
19991: ARRAY
19992: PPUSH
19993: CALL_OW 313
19997: PUSH
19998: LD_INT 6
20000: EQUAL
20001: OR
20002: IFFALSE 20022
// f := Delete ( f , 1 ) ;
20004: LD_ADDR_VAR 0 12
20008: PUSH
20009: LD_VAR 0 12
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: CALL_OW 3
20021: ST_TO_ADDR
// if not f then
20022: LD_VAR 0 12
20026: NOT
20027: IFFALSE 20045
// begin x := x + 2 ;
20029: LD_ADDR_VAR 0 13
20033: PUSH
20034: LD_VAR 0 13
20038: PUSH
20039: LD_INT 2
20041: PLUS
20042: ST_TO_ADDR
// continue ;
20043: GO 19843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20045: LD_VAR 0 12
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: PPUSH
20054: CALL_OW 266
20058: PUSH
20059: LD_INT 5
20061: EQUAL
20062: IFFALSE 20136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20064: LD_VAR 0 12
20068: PUSH
20069: LD_INT 1
20071: ARRAY
20072: PPUSH
20073: CALL_OW 313
20077: PUSH
20078: LD_INT 3
20080: LESS
20081: IFFALSE 20117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20083: LD_INT 0
20085: PPUSH
20086: LD_INT 5
20088: PUSH
20089: LD_INT 8
20091: PUSH
20092: LD_INT 9
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_VAR 0 17
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 4
20110: PPUSH
20111: CALL_OW 380
20115: GO 20134
// PrepareHuman ( false , i , skill ) ;
20117: LD_INT 0
20119: PPUSH
20120: LD_VAR 0 8
20124: PPUSH
20125: LD_VAR 0 4
20129: PPUSH
20130: CALL_OW 380
// end else
20134: GO 20153
// PrepareHuman ( false , i , skill ) ;
20136: LD_INT 0
20138: PPUSH
20139: LD_VAR 0 8
20143: PPUSH
20144: LD_VAR 0 4
20148: PPUSH
20149: CALL_OW 380
// un := CreateHuman ;
20153: LD_ADDR_VAR 0 14
20157: PUSH
20158: CALL_OW 44
20162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20163: LD_ADDR_VAR 0 7
20167: PUSH
20168: LD_VAR 0 7
20172: PPUSH
20173: LD_INT 1
20175: PPUSH
20176: LD_VAR 0 14
20180: PPUSH
20181: CALL_OW 2
20185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20186: LD_VAR 0 14
20190: PPUSH
20191: LD_VAR 0 12
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PPUSH
20200: CALL_OW 52
// end ;
20204: GO 19843
20206: POP
20207: POP
// end ;
20208: GO 19145
20210: POP
20211: POP
// result := result ^ buildings ;
20212: LD_ADDR_VAR 0 7
20216: PUSH
20217: LD_VAR 0 7
20221: PUSH
20222: LD_VAR 0 18
20226: ADD
20227: ST_TO_ADDR
// end else
20228: GO 20371
// begin for i = 1 to personel do
20230: LD_ADDR_VAR 0 8
20234: PUSH
20235: DOUBLE
20236: LD_INT 1
20238: DEC
20239: ST_TO_ADDR
20240: LD_VAR 0 6
20244: PUSH
20245: FOR_TO
20246: IFFALSE 20369
// begin if i > 4 then
20248: LD_VAR 0 8
20252: PUSH
20253: LD_INT 4
20255: GREATER
20256: IFFALSE 20260
// break ;
20258: GO 20369
// x := personel [ i ] ;
20260: LD_ADDR_VAR 0 13
20264: PUSH
20265: LD_VAR 0 6
20269: PUSH
20270: LD_VAR 0 8
20274: ARRAY
20275: ST_TO_ADDR
// if x = - 1 then
20276: LD_VAR 0 13
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: EQUAL
20285: IFFALSE 20289
// continue ;
20287: GO 20245
// PrepareHuman ( false , i , skill ) ;
20289: LD_INT 0
20291: PPUSH
20292: LD_VAR 0 8
20296: PPUSH
20297: LD_VAR 0 4
20301: PPUSH
20302: CALL_OW 380
// un := CreateHuman ;
20306: LD_ADDR_VAR 0 14
20310: PUSH
20311: CALL_OW 44
20315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20316: LD_VAR 0 14
20320: PPUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 250
20330: PPUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 251
20340: PPUSH
20341: LD_INT 10
20343: PPUSH
20344: LD_INT 0
20346: PPUSH
20347: CALL_OW 50
// result := result ^ un ;
20351: LD_ADDR_VAR 0 7
20355: PUSH
20356: LD_VAR 0 7
20360: PUSH
20361: LD_VAR 0 14
20365: ADD
20366: ST_TO_ADDR
// end ;
20367: GO 20245
20369: POP
20370: POP
// end ; end ;
20371: LD_VAR 0 7
20375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20376: LD_INT 0
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
// result := false ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20402: LD_VAR 0 1
20406: NOT
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 266
20417: PUSH
20418: LD_INT 32
20420: PUSH
20421: LD_INT 33
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: IN
20428: NOT
20429: OR
20430: IFFALSE 20434
// exit ;
20432: GO 21543
// nat := GetNation ( tower ) ;
20434: LD_ADDR_VAR 0 12
20438: PUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 248
20448: ST_TO_ADDR
// side := GetSide ( tower ) ;
20449: LD_ADDR_VAR 0 16
20453: PUSH
20454: LD_VAR 0 1
20458: PPUSH
20459: CALL_OW 255
20463: ST_TO_ADDR
// x := GetX ( tower ) ;
20464: LD_ADDR_VAR 0 10
20468: PUSH
20469: LD_VAR 0 1
20473: PPUSH
20474: CALL_OW 250
20478: ST_TO_ADDR
// y := GetY ( tower ) ;
20479: LD_ADDR_VAR 0 11
20483: PUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: CALL_OW 251
20493: ST_TO_ADDR
// if not x or not y then
20494: LD_VAR 0 10
20498: NOT
20499: PUSH
20500: LD_VAR 0 11
20504: NOT
20505: OR
20506: IFFALSE 20510
// exit ;
20508: GO 21543
// weapon := 0 ;
20510: LD_ADDR_VAR 0 18
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// fac_list := [ ] ;
20518: LD_ADDR_VAR 0 17
20522: PUSH
20523: EMPTY
20524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20525: LD_ADDR_VAR 0 6
20529: PUSH
20530: LD_VAR 0 1
20534: PPUSH
20535: CALL_OW 274
20539: PPUSH
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_INT 0
20547: PPUSH
20548: CALL 18114 0 3
20552: PPUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 3
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 72
20567: ST_TO_ADDR
// if not factories then
20568: LD_VAR 0 6
20572: NOT
20573: IFFALSE 20577
// exit ;
20575: GO 21543
// for i in factories do
20577: LD_ADDR_VAR 0 8
20581: PUSH
20582: LD_VAR 0 6
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20613
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20590: LD_ADDR_VAR 0 17
20594: PUSH
20595: LD_VAR 0 17
20599: PUSH
20600: LD_VAR 0 8
20604: PPUSH
20605: CALL_OW 478
20609: UNION
20610: ST_TO_ADDR
20611: GO 20587
20613: POP
20614: POP
// if not fac_list then
20615: LD_VAR 0 17
20619: NOT
20620: IFFALSE 20624
// exit ;
20622: GO 21543
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20624: LD_ADDR_VAR 0 5
20628: PUSH
20629: LD_INT 4
20631: PUSH
20632: LD_INT 5
20634: PUSH
20635: LD_INT 9
20637: PUSH
20638: LD_INT 10
20640: PUSH
20641: LD_INT 6
20643: PUSH
20644: LD_INT 7
20646: PUSH
20647: LD_INT 11
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 27
20661: PUSH
20662: LD_INT 28
20664: PUSH
20665: LD_INT 26
20667: PUSH
20668: LD_INT 30
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 43
20679: PUSH
20680: LD_INT 44
20682: PUSH
20683: LD_INT 46
20685: PUSH
20686: LD_INT 45
20688: PUSH
20689: LD_INT 47
20691: PUSH
20692: LD_INT 49
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: PUSH
20708: LD_VAR 0 12
20712: ARRAY
20713: ST_TO_ADDR
// list := list isect fac_list ;
20714: LD_ADDR_VAR 0 5
20718: PUSH
20719: LD_VAR 0 5
20723: PUSH
20724: LD_VAR 0 17
20728: ISECT
20729: ST_TO_ADDR
// if not list then
20730: LD_VAR 0 5
20734: NOT
20735: IFFALSE 20739
// exit ;
20737: GO 21543
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20739: LD_VAR 0 12
20743: PUSH
20744: LD_INT 3
20746: EQUAL
20747: PUSH
20748: LD_INT 49
20750: PUSH
20751: LD_VAR 0 5
20755: IN
20756: AND
20757: PUSH
20758: LD_INT 31
20760: PPUSH
20761: LD_VAR 0 16
20765: PPUSH
20766: CALL_OW 321
20770: PUSH
20771: LD_INT 2
20773: EQUAL
20774: AND
20775: IFFALSE 20835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20777: LD_INT 22
20779: PUSH
20780: LD_VAR 0 16
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 35
20791: PUSH
20792: LD_INT 49
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 91
20801: PUSH
20802: LD_VAR 0 1
20806: PUSH
20807: LD_INT 10
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: NOT
20825: IFFALSE 20835
// weapon := ru_time_lapser ;
20827: LD_ADDR_VAR 0 18
20831: PUSH
20832: LD_INT 49
20834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20835: LD_VAR 0 12
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: IN
20850: PUSH
20851: LD_INT 11
20853: PUSH
20854: LD_VAR 0 5
20858: IN
20859: PUSH
20860: LD_INT 30
20862: PUSH
20863: LD_VAR 0 5
20867: IN
20868: OR
20869: AND
20870: PUSH
20871: LD_INT 6
20873: PPUSH
20874: LD_VAR 0 16
20878: PPUSH
20879: CALL_OW 321
20883: PUSH
20884: LD_INT 2
20886: EQUAL
20887: AND
20888: IFFALSE 21053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20890: LD_INT 22
20892: PUSH
20893: LD_VAR 0 16
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 35
20907: PUSH
20908: LD_INT 11
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 35
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 91
20932: PUSH
20933: LD_VAR 0 1
20937: PUSH
20938: LD_INT 18
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: NOT
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_VAR 0 16
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 32
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 30
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 91
20999: PUSH
21000: LD_VAR 0 1
21004: PUSH
21005: LD_INT 12
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: PUSH
21018: EMPTY
21019: LIST
21020: PPUSH
21021: CALL_OW 69
21025: PUSH
21026: LD_INT 2
21028: GREATER
21029: AND
21030: IFFALSE 21053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21032: LD_ADDR_VAR 0 18
21036: PUSH
21037: LD_INT 11
21039: PUSH
21040: LD_INT 30
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_VAR 0 12
21051: ARRAY
21052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21053: LD_VAR 0 18
21057: NOT
21058: PUSH
21059: LD_INT 40
21061: PPUSH
21062: LD_VAR 0 16
21066: PPUSH
21067: CALL_OW 321
21071: PUSH
21072: LD_INT 2
21074: EQUAL
21075: AND
21076: PUSH
21077: LD_INT 7
21079: PUSH
21080: LD_VAR 0 5
21084: IN
21085: PUSH
21086: LD_INT 28
21088: PUSH
21089: LD_VAR 0 5
21093: IN
21094: OR
21095: PUSH
21096: LD_INT 45
21098: PUSH
21099: LD_VAR 0 5
21103: IN
21104: OR
21105: AND
21106: IFFALSE 21360
// begin hex := GetHexInfo ( x , y ) ;
21108: LD_ADDR_VAR 0 4
21112: PUSH
21113: LD_VAR 0 10
21117: PPUSH
21118: LD_VAR 0 11
21122: PPUSH
21123: CALL_OW 546
21127: ST_TO_ADDR
// if hex [ 1 ] then
21128: LD_VAR 0 4
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: IFFALSE 21140
// exit ;
21138: GO 21543
// height := hex [ 2 ] ;
21140: LD_ADDR_VAR 0 15
21144: PUSH
21145: LD_VAR 0 4
21149: PUSH
21150: LD_INT 2
21152: ARRAY
21153: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21154: LD_ADDR_VAR 0 14
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: LD_INT 3
21167: PUSH
21168: LD_INT 5
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: ST_TO_ADDR
// for i in tmp do
21177: LD_ADDR_VAR 0 8
21181: PUSH
21182: LD_VAR 0 14
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21358
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21190: LD_ADDR_VAR 0 9
21194: PUSH
21195: LD_VAR 0 10
21199: PPUSH
21200: LD_VAR 0 8
21204: PPUSH
21205: LD_INT 5
21207: PPUSH
21208: CALL_OW 272
21212: PUSH
21213: LD_VAR 0 11
21217: PPUSH
21218: LD_VAR 0 8
21222: PPUSH
21223: LD_INT 5
21225: PPUSH
21226: CALL_OW 273
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21235: LD_VAR 0 9
21239: PUSH
21240: LD_INT 1
21242: ARRAY
21243: PPUSH
21244: LD_VAR 0 9
21248: PUSH
21249: LD_INT 2
21251: ARRAY
21252: PPUSH
21253: CALL_OW 488
21257: IFFALSE 21356
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21259: LD_ADDR_VAR 0 4
21263: PUSH
21264: LD_VAR 0 9
21268: PUSH
21269: LD_INT 1
21271: ARRAY
21272: PPUSH
21273: LD_VAR 0 9
21277: PUSH
21278: LD_INT 2
21280: ARRAY
21281: PPUSH
21282: CALL_OW 546
21286: ST_TO_ADDR
// if hex [ 1 ] then
21287: LD_VAR 0 4
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: IFFALSE 21299
// continue ;
21297: GO 21187
// h := hex [ 2 ] ;
21299: LD_ADDR_VAR 0 13
21303: PUSH
21304: LD_VAR 0 4
21308: PUSH
21309: LD_INT 2
21311: ARRAY
21312: ST_TO_ADDR
// if h + 7 < height then
21313: LD_VAR 0 13
21317: PUSH
21318: LD_INT 7
21320: PLUS
21321: PUSH
21322: LD_VAR 0 15
21326: LESS
21327: IFFALSE 21356
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21329: LD_ADDR_VAR 0 18
21333: PUSH
21334: LD_INT 7
21336: PUSH
21337: LD_INT 28
21339: PUSH
21340: LD_INT 45
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: LD_VAR 0 12
21352: ARRAY
21353: ST_TO_ADDR
// break ;
21354: GO 21358
// end ; end ; end ;
21356: GO 21187
21358: POP
21359: POP
// end ; if not weapon then
21360: LD_VAR 0 18
21364: NOT
21365: IFFALSE 21425
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21367: LD_ADDR_VAR 0 5
21371: PUSH
21372: LD_VAR 0 5
21376: PUSH
21377: LD_INT 11
21379: PUSH
21380: LD_INT 30
21382: PUSH
21383: LD_INT 49
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: DIFF
21391: ST_TO_ADDR
// if not list then
21392: LD_VAR 0 5
21396: NOT
21397: IFFALSE 21401
// exit ;
21399: GO 21543
// weapon := list [ rand ( 1 , list ) ] ;
21401: LD_ADDR_VAR 0 18
21405: PUSH
21406: LD_VAR 0 5
21410: PUSH
21411: LD_INT 1
21413: PPUSH
21414: LD_VAR 0 5
21418: PPUSH
21419: CALL_OW 12
21423: ARRAY
21424: ST_TO_ADDR
// end ; if weapon then
21425: LD_VAR 0 18
21429: IFFALSE 21543
// begin tmp := CostOfWeapon ( weapon ) ;
21431: LD_ADDR_VAR 0 14
21435: PUSH
21436: LD_VAR 0 18
21440: PPUSH
21441: CALL_OW 451
21445: ST_TO_ADDR
// j := GetBase ( tower ) ;
21446: LD_ADDR_VAR 0 9
21450: PUSH
21451: LD_VAR 0 1
21455: PPUSH
21456: CALL_OW 274
21460: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21461: LD_VAR 0 9
21465: PPUSH
21466: LD_INT 1
21468: PPUSH
21469: CALL_OW 275
21473: PUSH
21474: LD_VAR 0 14
21478: PUSH
21479: LD_INT 1
21481: ARRAY
21482: GREATEREQUAL
21483: PUSH
21484: LD_VAR 0 9
21488: PPUSH
21489: LD_INT 2
21491: PPUSH
21492: CALL_OW 275
21496: PUSH
21497: LD_VAR 0 14
21501: PUSH
21502: LD_INT 2
21504: ARRAY
21505: GREATEREQUAL
21506: AND
21507: PUSH
21508: LD_VAR 0 9
21512: PPUSH
21513: LD_INT 3
21515: PPUSH
21516: CALL_OW 275
21520: PUSH
21521: LD_VAR 0 14
21525: PUSH
21526: LD_INT 3
21528: ARRAY
21529: GREATEREQUAL
21530: AND
21531: IFFALSE 21543
// result := weapon ;
21533: LD_ADDR_VAR 0 3
21537: PUSH
21538: LD_VAR 0 18
21542: ST_TO_ADDR
// end ; end ;
21543: LD_VAR 0 3
21547: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21548: LD_INT 0
21550: PPUSH
21551: PPUSH
// result := true ;
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_INT 1
21559: ST_TO_ADDR
// if array1 = array2 then
21560: LD_VAR 0 1
21564: PUSH
21565: LD_VAR 0 2
21569: EQUAL
21570: IFFALSE 21630
// begin for i = 1 to array1 do
21572: LD_ADDR_VAR 0 4
21576: PUSH
21577: DOUBLE
21578: LD_INT 1
21580: DEC
21581: ST_TO_ADDR
21582: LD_VAR 0 1
21586: PUSH
21587: FOR_TO
21588: IFFALSE 21626
// if array1 [ i ] <> array2 [ i ] then
21590: LD_VAR 0 1
21594: PUSH
21595: LD_VAR 0 4
21599: ARRAY
21600: PUSH
21601: LD_VAR 0 2
21605: PUSH
21606: LD_VAR 0 4
21610: ARRAY
21611: NONEQUAL
21612: IFFALSE 21624
// begin result := false ;
21614: LD_ADDR_VAR 0 3
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// break ;
21622: GO 21626
// end ;
21624: GO 21587
21626: POP
21627: POP
// end else
21628: GO 21638
// result := false ;
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// end ;
21638: LD_VAR 0 3
21642: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21643: LD_INT 0
21645: PPUSH
21646: PPUSH
// if not array1 or not array2 then
21647: LD_VAR 0 1
21651: NOT
21652: PUSH
21653: LD_VAR 0 2
21657: NOT
21658: OR
21659: IFFALSE 21663
// exit ;
21661: GO 21727
// result := true ;
21663: LD_ADDR_VAR 0 3
21667: PUSH
21668: LD_INT 1
21670: ST_TO_ADDR
// for i = 1 to array1 do
21671: LD_ADDR_VAR 0 4
21675: PUSH
21676: DOUBLE
21677: LD_INT 1
21679: DEC
21680: ST_TO_ADDR
21681: LD_VAR 0 1
21685: PUSH
21686: FOR_TO
21687: IFFALSE 21725
// if array1 [ i ] <> array2 [ i ] then
21689: LD_VAR 0 1
21693: PUSH
21694: LD_VAR 0 4
21698: ARRAY
21699: PUSH
21700: LD_VAR 0 2
21704: PUSH
21705: LD_VAR 0 4
21709: ARRAY
21710: NONEQUAL
21711: IFFALSE 21723
// begin result := false ;
21713: LD_ADDR_VAR 0 3
21717: PUSH
21718: LD_INT 0
21720: ST_TO_ADDR
// break ;
21721: GO 21725
// end ;
21723: GO 21686
21725: POP
21726: POP
// end ;
21727: LD_VAR 0 3
21731: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21732: LD_INT 0
21734: PPUSH
21735: PPUSH
21736: PPUSH
// pom := GetBase ( fac ) ;
21737: LD_ADDR_VAR 0 5
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 274
21751: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21752: LD_ADDR_VAR 0 4
21756: PUSH
21757: LD_VAR 0 2
21761: PUSH
21762: LD_INT 1
21764: ARRAY
21765: PPUSH
21766: LD_VAR 0 2
21770: PUSH
21771: LD_INT 2
21773: ARRAY
21774: PPUSH
21775: LD_VAR 0 2
21779: PUSH
21780: LD_INT 3
21782: ARRAY
21783: PPUSH
21784: LD_VAR 0 2
21788: PUSH
21789: LD_INT 4
21791: ARRAY
21792: PPUSH
21793: CALL_OW 449
21797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21798: LD_ADDR_VAR 0 3
21802: PUSH
21803: LD_VAR 0 5
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL_OW 275
21815: PUSH
21816: LD_VAR 0 4
21820: PUSH
21821: LD_INT 1
21823: ARRAY
21824: GREATEREQUAL
21825: PUSH
21826: LD_VAR 0 5
21830: PPUSH
21831: LD_INT 2
21833: PPUSH
21834: CALL_OW 275
21838: PUSH
21839: LD_VAR 0 4
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: GREATEREQUAL
21848: AND
21849: PUSH
21850: LD_VAR 0 5
21854: PPUSH
21855: LD_INT 3
21857: PPUSH
21858: CALL_OW 275
21862: PUSH
21863: LD_VAR 0 4
21867: PUSH
21868: LD_INT 3
21870: ARRAY
21871: GREATEREQUAL
21872: AND
21873: ST_TO_ADDR
// end ;
21874: LD_VAR 0 3
21878: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21879: LD_INT 0
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
// pom := GetBase ( building ) ;
21885: LD_ADDR_VAR 0 3
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 274
21899: ST_TO_ADDR
// if not pom then
21900: LD_VAR 0 3
21904: NOT
21905: IFFALSE 21909
// exit ;
21907: GO 22079
// btype := GetBType ( building ) ;
21909: LD_ADDR_VAR 0 5
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 266
21923: ST_TO_ADDR
// if btype = b_armoury then
21924: LD_VAR 0 5
21928: PUSH
21929: LD_INT 4
21931: EQUAL
21932: IFFALSE 21942
// btype := b_barracks ;
21934: LD_ADDR_VAR 0 5
21938: PUSH
21939: LD_INT 5
21941: ST_TO_ADDR
// if btype = b_depot then
21942: LD_VAR 0 5
21946: PUSH
21947: LD_INT 0
21949: EQUAL
21950: IFFALSE 21960
// btype := b_warehouse ;
21952: LD_ADDR_VAR 0 5
21956: PUSH
21957: LD_INT 1
21959: ST_TO_ADDR
// if btype = b_workshop then
21960: LD_VAR 0 5
21964: PUSH
21965: LD_INT 2
21967: EQUAL
21968: IFFALSE 21978
// btype := b_factory ;
21970: LD_ADDR_VAR 0 5
21974: PUSH
21975: LD_INT 3
21977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21978: LD_ADDR_VAR 0 4
21982: PUSH
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_VAR 0 1
21992: PPUSH
21993: CALL_OW 248
21997: PPUSH
21998: CALL_OW 450
22002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22003: LD_ADDR_VAR 0 2
22007: PUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: LD_INT 1
22015: PPUSH
22016: CALL_OW 275
22020: PUSH
22021: LD_VAR 0 4
22025: PUSH
22026: LD_INT 1
22028: ARRAY
22029: GREATEREQUAL
22030: PUSH
22031: LD_VAR 0 3
22035: PPUSH
22036: LD_INT 2
22038: PPUSH
22039: CALL_OW 275
22043: PUSH
22044: LD_VAR 0 4
22048: PUSH
22049: LD_INT 2
22051: ARRAY
22052: GREATEREQUAL
22053: AND
22054: PUSH
22055: LD_VAR 0 3
22059: PPUSH
22060: LD_INT 3
22062: PPUSH
22063: CALL_OW 275
22067: PUSH
22068: LD_VAR 0 4
22072: PUSH
22073: LD_INT 3
22075: ARRAY
22076: GREATEREQUAL
22077: AND
22078: ST_TO_ADDR
// end ;
22079: LD_VAR 0 2
22083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22084: LD_INT 0
22086: PPUSH
22087: PPUSH
22088: PPUSH
// pom := GetBase ( building ) ;
22089: LD_ADDR_VAR 0 4
22093: PUSH
22094: LD_VAR 0 1
22098: PPUSH
22099: CALL_OW 274
22103: ST_TO_ADDR
// if not pom then
22104: LD_VAR 0 4
22108: NOT
22109: IFFALSE 22113
// exit ;
22111: GO 22214
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22113: LD_ADDR_VAR 0 5
22117: PUSH
22118: LD_VAR 0 2
22122: PPUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: CALL_OW 248
22132: PPUSH
22133: CALL_OW 450
22137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: LD_VAR 0 4
22147: PPUSH
22148: LD_INT 1
22150: PPUSH
22151: CALL_OW 275
22155: PUSH
22156: LD_VAR 0 5
22160: PUSH
22161: LD_INT 1
22163: ARRAY
22164: GREATEREQUAL
22165: PUSH
22166: LD_VAR 0 4
22170: PPUSH
22171: LD_INT 2
22173: PPUSH
22174: CALL_OW 275
22178: PUSH
22179: LD_VAR 0 5
22183: PUSH
22184: LD_INT 2
22186: ARRAY
22187: GREATEREQUAL
22188: AND
22189: PUSH
22190: LD_VAR 0 4
22194: PPUSH
22195: LD_INT 3
22197: PPUSH
22198: CALL_OW 275
22202: PUSH
22203: LD_VAR 0 5
22207: PUSH
22208: LD_INT 3
22210: ARRAY
22211: GREATEREQUAL
22212: AND
22213: ST_TO_ADDR
// end ;
22214: LD_VAR 0 3
22218: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22219: LD_INT 0
22221: PPUSH
22222: PPUSH
22223: PPUSH
22224: PPUSH
22225: PPUSH
22226: PPUSH
22227: PPUSH
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
// result := false ;
22232: LD_ADDR_VAR 0 8
22236: PUSH
22237: LD_INT 0
22239: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22240: LD_VAR 0 5
22244: NOT
22245: PUSH
22246: LD_VAR 0 1
22250: NOT
22251: OR
22252: PUSH
22253: LD_VAR 0 2
22257: NOT
22258: OR
22259: PUSH
22260: LD_VAR 0 3
22264: NOT
22265: OR
22266: IFFALSE 22270
// exit ;
22268: GO 23084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22270: LD_ADDR_VAR 0 14
22274: PUSH
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_VAR 0 2
22284: PPUSH
22285: LD_VAR 0 3
22289: PPUSH
22290: LD_VAR 0 4
22294: PPUSH
22295: LD_VAR 0 5
22299: PUSH
22300: LD_INT 1
22302: ARRAY
22303: PPUSH
22304: CALL_OW 248
22308: PPUSH
22309: LD_INT 0
22311: PPUSH
22312: CALL 24337 0 6
22316: ST_TO_ADDR
// if not hexes then
22317: LD_VAR 0 14
22321: NOT
22322: IFFALSE 22326
// exit ;
22324: GO 23084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22326: LD_ADDR_VAR 0 17
22330: PUSH
22331: LD_VAR 0 5
22335: PPUSH
22336: LD_INT 22
22338: PUSH
22339: LD_VAR 0 13
22343: PPUSH
22344: CALL_OW 255
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 30
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 30
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PPUSH
22385: CALL_OW 72
22389: ST_TO_ADDR
// for i = 1 to hexes do
22390: LD_ADDR_VAR 0 9
22394: PUSH
22395: DOUBLE
22396: LD_INT 1
22398: DEC
22399: ST_TO_ADDR
22400: LD_VAR 0 14
22404: PUSH
22405: FOR_TO
22406: IFFALSE 23082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22408: LD_ADDR_VAR 0 13
22412: PUSH
22413: LD_VAR 0 14
22417: PUSH
22418: LD_VAR 0 9
22422: ARRAY
22423: PUSH
22424: LD_INT 1
22426: ARRAY
22427: PPUSH
22428: LD_VAR 0 14
22432: PUSH
22433: LD_VAR 0 9
22437: ARRAY
22438: PUSH
22439: LD_INT 2
22441: ARRAY
22442: PPUSH
22443: CALL_OW 428
22447: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22448: LD_VAR 0 14
22452: PUSH
22453: LD_VAR 0 9
22457: ARRAY
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PPUSH
22463: LD_VAR 0 14
22467: PUSH
22468: LD_VAR 0 9
22472: ARRAY
22473: PUSH
22474: LD_INT 2
22476: ARRAY
22477: PPUSH
22478: CALL_OW 351
22482: PUSH
22483: LD_VAR 0 14
22487: PUSH
22488: LD_VAR 0 9
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PPUSH
22498: LD_VAR 0 14
22502: PUSH
22503: LD_VAR 0 9
22507: ARRAY
22508: PUSH
22509: LD_INT 2
22511: ARRAY
22512: PPUSH
22513: CALL_OW 488
22517: NOT
22518: OR
22519: PUSH
22520: LD_VAR 0 13
22524: PPUSH
22525: CALL_OW 247
22529: PUSH
22530: LD_INT 3
22532: EQUAL
22533: OR
22534: IFFALSE 22540
// exit ;
22536: POP
22537: POP
22538: GO 23084
// if not tmp then
22540: LD_VAR 0 13
22544: NOT
22545: IFFALSE 22549
// continue ;
22547: GO 22405
// result := true ;
22549: LD_ADDR_VAR 0 8
22553: PUSH
22554: LD_INT 1
22556: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22557: LD_VAR 0 6
22561: PUSH
22562: LD_VAR 0 13
22566: PPUSH
22567: CALL_OW 247
22571: PUSH
22572: LD_INT 2
22574: EQUAL
22575: AND
22576: PUSH
22577: LD_VAR 0 13
22581: PPUSH
22582: CALL_OW 263
22586: PUSH
22587: LD_INT 1
22589: EQUAL
22590: AND
22591: IFFALSE 22755
// begin if IsDrivenBy ( tmp ) then
22593: LD_VAR 0 13
22597: PPUSH
22598: CALL_OW 311
22602: IFFALSE 22606
// continue ;
22604: GO 22405
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22606: LD_VAR 0 6
22610: PPUSH
22611: LD_INT 3
22613: PUSH
22614: LD_INT 60
22616: PUSH
22617: EMPTY
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: LD_INT 55
22629: PUSH
22630: EMPTY
22631: LIST
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 72
22645: IFFALSE 22753
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22647: LD_ADDR_VAR 0 18
22651: PUSH
22652: LD_VAR 0 6
22656: PPUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 60
22662: PUSH
22663: EMPTY
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: LD_INT 55
22675: PUSH
22676: EMPTY
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 72
22691: PUSH
22692: LD_INT 1
22694: ARRAY
22695: ST_TO_ADDR
// if IsInUnit ( driver ) then
22696: LD_VAR 0 18
22700: PPUSH
22701: CALL_OW 310
22705: IFFALSE 22716
// ComExit ( driver ) ;
22707: LD_VAR 0 18
22711: PPUSH
22712: CALL 48210 0 1
// AddComEnterUnit ( driver , tmp ) ;
22716: LD_VAR 0 18
22720: PPUSH
22721: LD_VAR 0 13
22725: PPUSH
22726: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22730: LD_VAR 0 18
22734: PPUSH
22735: LD_VAR 0 7
22739: PPUSH
22740: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22744: LD_VAR 0 18
22748: PPUSH
22749: CALL_OW 181
// end ; continue ;
22753: GO 22405
// end ; if not cleaners or not tmp in cleaners then
22755: LD_VAR 0 6
22759: NOT
22760: PUSH
22761: LD_VAR 0 13
22765: PUSH
22766: LD_VAR 0 6
22770: IN
22771: NOT
22772: OR
22773: IFFALSE 23080
// begin if dep then
22775: LD_VAR 0 17
22779: IFFALSE 22915
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22781: LD_ADDR_VAR 0 16
22785: PUSH
22786: LD_VAR 0 17
22790: PUSH
22791: LD_INT 1
22793: ARRAY
22794: PPUSH
22795: CALL_OW 250
22799: PPUSH
22800: LD_VAR 0 17
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: PPUSH
22809: CALL_OW 254
22813: PPUSH
22814: LD_INT 5
22816: PPUSH
22817: CALL_OW 272
22821: PUSH
22822: LD_VAR 0 17
22826: PUSH
22827: LD_INT 1
22829: ARRAY
22830: PPUSH
22831: CALL_OW 251
22835: PPUSH
22836: LD_VAR 0 17
22840: PUSH
22841: LD_INT 1
22843: ARRAY
22844: PPUSH
22845: CALL_OW 254
22849: PPUSH
22850: LD_INT 5
22852: PPUSH
22853: CALL_OW 273
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22862: LD_VAR 0 16
22866: PUSH
22867: LD_INT 1
22869: ARRAY
22870: PPUSH
22871: LD_VAR 0 16
22875: PUSH
22876: LD_INT 2
22878: ARRAY
22879: PPUSH
22880: CALL_OW 488
22884: IFFALSE 22915
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22886: LD_VAR 0 13
22890: PPUSH
22891: LD_VAR 0 16
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: PPUSH
22900: LD_VAR 0 16
22904: PUSH
22905: LD_INT 2
22907: ARRAY
22908: PPUSH
22909: CALL_OW 111
// continue ;
22913: GO 22405
// end ; end ; r := GetDir ( tmp ) ;
22915: LD_ADDR_VAR 0 15
22919: PUSH
22920: LD_VAR 0 13
22924: PPUSH
22925: CALL_OW 254
22929: ST_TO_ADDR
// if r = 5 then
22930: LD_VAR 0 15
22934: PUSH
22935: LD_INT 5
22937: EQUAL
22938: IFFALSE 22948
// r := 0 ;
22940: LD_ADDR_VAR 0 15
22944: PUSH
22945: LD_INT 0
22947: ST_TO_ADDR
// for j = r to 5 do
22948: LD_ADDR_VAR 0 10
22952: PUSH
22953: DOUBLE
22954: LD_VAR 0 15
22958: DEC
22959: ST_TO_ADDR
22960: LD_INT 5
22962: PUSH
22963: FOR_TO
22964: IFFALSE 23078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22966: LD_ADDR_VAR 0 11
22970: PUSH
22971: LD_VAR 0 13
22975: PPUSH
22976: CALL_OW 250
22980: PPUSH
22981: LD_VAR 0 10
22985: PPUSH
22986: LD_INT 2
22988: PPUSH
22989: CALL_OW 272
22993: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22994: LD_ADDR_VAR 0 12
22998: PUSH
22999: LD_VAR 0 13
23003: PPUSH
23004: CALL_OW 251
23008: PPUSH
23009: LD_VAR 0 10
23013: PPUSH
23014: LD_INT 2
23016: PPUSH
23017: CALL_OW 273
23021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23022: LD_VAR 0 11
23026: PPUSH
23027: LD_VAR 0 12
23031: PPUSH
23032: CALL_OW 488
23036: PUSH
23037: LD_VAR 0 11
23041: PPUSH
23042: LD_VAR 0 12
23046: PPUSH
23047: CALL_OW 428
23051: NOT
23052: AND
23053: IFFALSE 23076
// begin ComMoveXY ( tmp , _x , _y ) ;
23055: LD_VAR 0 13
23059: PPUSH
23060: LD_VAR 0 11
23064: PPUSH
23065: LD_VAR 0 12
23069: PPUSH
23070: CALL_OW 111
// break ;
23074: GO 23078
// end ; end ;
23076: GO 22963
23078: POP
23079: POP
// end ; end ;
23080: GO 22405
23082: POP
23083: POP
// end ;
23084: LD_VAR 0 8
23088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23089: LD_INT 0
23091: PPUSH
// result := true ;
23092: LD_ADDR_VAR 0 3
23096: PUSH
23097: LD_INT 1
23099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23100: LD_VAR 0 2
23104: PUSH
23105: LD_INT 24
23107: DOUBLE
23108: EQUAL
23109: IFTRUE 23119
23111: LD_INT 33
23113: DOUBLE
23114: EQUAL
23115: IFTRUE 23119
23117: GO 23144
23119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23120: LD_ADDR_VAR 0 3
23124: PUSH
23125: LD_INT 32
23127: PPUSH
23128: LD_VAR 0 1
23132: PPUSH
23133: CALL_OW 321
23137: PUSH
23138: LD_INT 2
23140: EQUAL
23141: ST_TO_ADDR
23142: GO 23460
23144: LD_INT 20
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23177
23152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 6
23160: PPUSH
23161: LD_VAR 0 1
23165: PPUSH
23166: CALL_OW 321
23170: PUSH
23171: LD_INT 2
23173: EQUAL
23174: ST_TO_ADDR
23175: GO 23460
23177: LD_INT 22
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23191
23183: LD_INT 36
23185: DOUBLE
23186: EQUAL
23187: IFTRUE 23191
23189: GO 23216
23191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_INT 15
23199: PPUSH
23200: LD_VAR 0 1
23204: PPUSH
23205: CALL_OW 321
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: ST_TO_ADDR
23214: GO 23460
23216: LD_INT 30
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23249
23224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23225: LD_ADDR_VAR 0 3
23229: PUSH
23230: LD_INT 20
23232: PPUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 321
23242: PUSH
23243: LD_INT 2
23245: EQUAL
23246: ST_TO_ADDR
23247: GO 23460
23249: LD_INT 28
23251: DOUBLE
23252: EQUAL
23253: IFTRUE 23263
23255: LD_INT 21
23257: DOUBLE
23258: EQUAL
23259: IFTRUE 23263
23261: GO 23288
23263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23264: LD_ADDR_VAR 0 3
23268: PUSH
23269: LD_INT 21
23271: PPUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: CALL_OW 321
23281: PUSH
23282: LD_INT 2
23284: EQUAL
23285: ST_TO_ADDR
23286: GO 23460
23288: LD_INT 16
23290: DOUBLE
23291: EQUAL
23292: IFTRUE 23296
23294: GO 23321
23296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23297: LD_ADDR_VAR 0 3
23301: PUSH
23302: LD_INT 84
23304: PPUSH
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 321
23314: PUSH
23315: LD_INT 2
23317: EQUAL
23318: ST_TO_ADDR
23319: GO 23460
23321: LD_INT 19
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23335
23327: LD_INT 23
23329: DOUBLE
23330: EQUAL
23331: IFTRUE 23335
23333: GO 23360
23335: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 83
23343: PPUSH
23344: LD_VAR 0 1
23348: PPUSH
23349: CALL_OW 321
23353: PUSH
23354: LD_INT 2
23356: EQUAL
23357: ST_TO_ADDR
23358: GO 23460
23360: LD_INT 17
23362: DOUBLE
23363: EQUAL
23364: IFTRUE 23368
23366: GO 23393
23368: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23369: LD_ADDR_VAR 0 3
23373: PUSH
23374: LD_INT 39
23376: PPUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 321
23386: PUSH
23387: LD_INT 2
23389: EQUAL
23390: ST_TO_ADDR
23391: GO 23460
23393: LD_INT 18
23395: DOUBLE
23396: EQUAL
23397: IFTRUE 23401
23399: GO 23426
23401: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23402: LD_ADDR_VAR 0 3
23406: PUSH
23407: LD_INT 40
23409: PPUSH
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 321
23419: PUSH
23420: LD_INT 2
23422: EQUAL
23423: ST_TO_ADDR
23424: GO 23460
23426: LD_INT 27
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23459
23434: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_INT 35
23442: PPUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 321
23452: PUSH
23453: LD_INT 2
23455: EQUAL
23456: ST_TO_ADDR
23457: GO 23460
23459: POP
// end ;
23460: LD_VAR 0 3
23464: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23465: LD_INT 0
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
// result := false ;
23478: LD_ADDR_VAR 0 6
23482: PUSH
23483: LD_INT 0
23485: ST_TO_ADDR
// if btype = b_depot then
23486: LD_VAR 0 2
23490: PUSH
23491: LD_INT 0
23493: EQUAL
23494: IFFALSE 23506
// begin result := true ;
23496: LD_ADDR_VAR 0 6
23500: PUSH
23501: LD_INT 1
23503: ST_TO_ADDR
// exit ;
23504: GO 24332
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23506: LD_VAR 0 1
23510: NOT
23511: PUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 266
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: IN
23532: NOT
23533: OR
23534: PUSH
23535: LD_VAR 0 2
23539: NOT
23540: OR
23541: PUSH
23542: LD_VAR 0 5
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: LD_INT 3
23558: PUSH
23559: LD_INT 4
23561: PUSH
23562: LD_INT 5
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: IN
23573: NOT
23574: OR
23575: PUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: CALL_OW 488
23590: NOT
23591: OR
23592: IFFALSE 23596
// exit ;
23594: GO 24332
// side := GetSide ( depot ) ;
23596: LD_ADDR_VAR 0 9
23600: PUSH
23601: LD_VAR 0 1
23605: PPUSH
23606: CALL_OW 255
23610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23611: LD_VAR 0 9
23615: PPUSH
23616: LD_VAR 0 2
23620: PPUSH
23621: CALL 23089 0 2
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 24332
// pom := GetBase ( depot ) ;
23630: LD_ADDR_VAR 0 10
23634: PUSH
23635: LD_VAR 0 1
23639: PPUSH
23640: CALL_OW 274
23644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23645: LD_ADDR_VAR 0 11
23649: PUSH
23650: LD_VAR 0 2
23654: PPUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 248
23664: PPUSH
23665: CALL_OW 450
23669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23670: LD_VAR 0 10
23674: PPUSH
23675: LD_INT 1
23677: PPUSH
23678: CALL_OW 275
23682: PUSH
23683: LD_VAR 0 11
23687: PUSH
23688: LD_INT 1
23690: ARRAY
23691: GREATEREQUAL
23692: PUSH
23693: LD_VAR 0 10
23697: PPUSH
23698: LD_INT 2
23700: PPUSH
23701: CALL_OW 275
23705: PUSH
23706: LD_VAR 0 11
23710: PUSH
23711: LD_INT 2
23713: ARRAY
23714: GREATEREQUAL
23715: AND
23716: PUSH
23717: LD_VAR 0 10
23721: PPUSH
23722: LD_INT 3
23724: PPUSH
23725: CALL_OW 275
23729: PUSH
23730: LD_VAR 0 11
23734: PUSH
23735: LD_INT 3
23737: ARRAY
23738: GREATEREQUAL
23739: AND
23740: NOT
23741: IFFALSE 23745
// exit ;
23743: GO 24332
// if GetBType ( depot ) = b_depot then
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 0
23757: EQUAL
23758: IFFALSE 23770
// dist := 28 else
23760: LD_ADDR_VAR 0 14
23764: PUSH
23765: LD_INT 28
23767: ST_TO_ADDR
23768: GO 23778
// dist := 36 ;
23770: LD_ADDR_VAR 0 14
23774: PUSH
23775: LD_INT 36
23777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_VAR 0 3
23787: PPUSH
23788: LD_VAR 0 4
23792: PPUSH
23793: CALL_OW 297
23797: PUSH
23798: LD_VAR 0 14
23802: GREATER
23803: IFFALSE 23807
// exit ;
23805: GO 24332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23807: LD_ADDR_VAR 0 12
23811: PUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: LD_VAR 0 3
23821: PPUSH
23822: LD_VAR 0 4
23826: PPUSH
23827: LD_VAR 0 5
23831: PPUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 248
23841: PPUSH
23842: LD_INT 0
23844: PPUSH
23845: CALL 24337 0 6
23849: ST_TO_ADDR
// if not hexes then
23850: LD_VAR 0 12
23854: NOT
23855: IFFALSE 23859
// exit ;
23857: GO 24332
// hex := GetHexInfo ( x , y ) ;
23859: LD_ADDR_VAR 0 15
23863: PUSH
23864: LD_VAR 0 3
23868: PPUSH
23869: LD_VAR 0 4
23873: PPUSH
23874: CALL_OW 546
23878: ST_TO_ADDR
// if hex [ 1 ] then
23879: LD_VAR 0 15
23883: PUSH
23884: LD_INT 1
23886: ARRAY
23887: IFFALSE 23891
// exit ;
23889: GO 24332
// height := hex [ 2 ] ;
23891: LD_ADDR_VAR 0 13
23895: PUSH
23896: LD_VAR 0 15
23900: PUSH
23901: LD_INT 2
23903: ARRAY
23904: ST_TO_ADDR
// for i = 1 to hexes do
23905: LD_ADDR_VAR 0 7
23909: PUSH
23910: DOUBLE
23911: LD_INT 1
23913: DEC
23914: ST_TO_ADDR
23915: LD_VAR 0 12
23919: PUSH
23920: FOR_TO
23921: IFFALSE 24251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23923: LD_VAR 0 12
23927: PUSH
23928: LD_VAR 0 7
23932: ARRAY
23933: PUSH
23934: LD_INT 1
23936: ARRAY
23937: PPUSH
23938: LD_VAR 0 12
23942: PUSH
23943: LD_VAR 0 7
23947: ARRAY
23948: PUSH
23949: LD_INT 2
23951: ARRAY
23952: PPUSH
23953: CALL_OW 488
23957: NOT
23958: PUSH
23959: LD_VAR 0 12
23963: PUSH
23964: LD_VAR 0 7
23968: ARRAY
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 12
23978: PUSH
23979: LD_VAR 0 7
23983: ARRAY
23984: PUSH
23985: LD_INT 2
23987: ARRAY
23988: PPUSH
23989: CALL_OW 428
23993: PUSH
23994: LD_INT 0
23996: GREATER
23997: OR
23998: PUSH
23999: LD_VAR 0 12
24003: PUSH
24004: LD_VAR 0 7
24008: ARRAY
24009: PUSH
24010: LD_INT 1
24012: ARRAY
24013: PPUSH
24014: LD_VAR 0 12
24018: PUSH
24019: LD_VAR 0 7
24023: ARRAY
24024: PUSH
24025: LD_INT 2
24027: ARRAY
24028: PPUSH
24029: CALL_OW 351
24033: OR
24034: IFFALSE 24040
// exit ;
24036: POP
24037: POP
24038: GO 24332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24040: LD_ADDR_VAR 0 8
24044: PUSH
24045: LD_VAR 0 12
24049: PUSH
24050: LD_VAR 0 7
24054: ARRAY
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: PPUSH
24060: LD_VAR 0 12
24064: PUSH
24065: LD_VAR 0 7
24069: ARRAY
24070: PUSH
24071: LD_INT 2
24073: ARRAY
24074: PPUSH
24075: CALL_OW 546
24079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24080: LD_VAR 0 8
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: PUSH
24089: LD_VAR 0 8
24093: PUSH
24094: LD_INT 2
24096: ARRAY
24097: PUSH
24098: LD_VAR 0 13
24102: PUSH
24103: LD_INT 2
24105: PLUS
24106: GREATER
24107: OR
24108: PUSH
24109: LD_VAR 0 8
24113: PUSH
24114: LD_INT 2
24116: ARRAY
24117: PUSH
24118: LD_VAR 0 13
24122: PUSH
24123: LD_INT 2
24125: MINUS
24126: LESS
24127: OR
24128: PUSH
24129: LD_VAR 0 8
24133: PUSH
24134: LD_INT 3
24136: ARRAY
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 8
24143: PUSH
24144: LD_INT 9
24146: PUSH
24147: LD_INT 10
24149: PUSH
24150: LD_INT 11
24152: PUSH
24153: LD_INT 12
24155: PUSH
24156: LD_INT 13
24158: PUSH
24159: LD_INT 16
24161: PUSH
24162: LD_INT 17
24164: PUSH
24165: LD_INT 18
24167: PUSH
24168: LD_INT 19
24170: PUSH
24171: LD_INT 20
24173: PUSH
24174: LD_INT 21
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: IN
24192: NOT
24193: OR
24194: PUSH
24195: LD_VAR 0 8
24199: PUSH
24200: LD_INT 5
24202: ARRAY
24203: NOT
24204: OR
24205: PUSH
24206: LD_VAR 0 8
24210: PUSH
24211: LD_INT 6
24213: ARRAY
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 7
24223: PUSH
24224: LD_INT 9
24226: PUSH
24227: LD_INT 10
24229: PUSH
24230: LD_INT 11
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: IN
24241: NOT
24242: OR
24243: IFFALSE 24249
// exit ;
24245: POP
24246: POP
24247: GO 24332
// end ;
24249: GO 23920
24251: POP
24252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24253: LD_VAR 0 9
24257: PPUSH
24258: LD_VAR 0 3
24262: PPUSH
24263: LD_VAR 0 4
24267: PPUSH
24268: LD_INT 20
24270: PPUSH
24271: CALL 16255 0 4
24275: PUSH
24276: LD_INT 4
24278: ARRAY
24279: IFFALSE 24283
// exit ;
24281: GO 24332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24283: LD_VAR 0 2
24287: PUSH
24288: LD_INT 29
24290: PUSH
24291: LD_INT 30
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: IN
24298: PUSH
24299: LD_VAR 0 3
24303: PPUSH
24304: LD_VAR 0 4
24308: PPUSH
24309: LD_VAR 0 9
24313: PPUSH
24314: CALL_OW 440
24318: NOT
24319: AND
24320: IFFALSE 24324
// exit ;
24322: GO 24332
// result := true ;
24324: LD_ADDR_VAR 0 6
24328: PUSH
24329: LD_INT 1
24331: ST_TO_ADDR
// end ;
24332: LD_VAR 0 6
24336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24337: LD_INT 0
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
24355: PPUSH
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
24360: PPUSH
24361: PPUSH
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
24370: PPUSH
24371: PPUSH
24372: PPUSH
24373: PPUSH
24374: PPUSH
24375: PPUSH
24376: PPUSH
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
// result = [ ] ;
24397: LD_ADDR_VAR 0 7
24401: PUSH
24402: EMPTY
24403: ST_TO_ADDR
// temp_list = [ ] ;
24404: LD_ADDR_VAR 0 9
24408: PUSH
24409: EMPTY
24410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24411: LD_VAR 0 4
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 3
24427: PUSH
24428: LD_INT 4
24430: PUSH
24431: LD_INT 5
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: IN
24442: NOT
24443: PUSH
24444: LD_VAR 0 1
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: IN
24459: PUSH
24460: LD_VAR 0 5
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: IN
24479: NOT
24480: AND
24481: OR
24482: IFFALSE 24486
// exit ;
24484: GO 42877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24486: LD_VAR 0 1
24490: PUSH
24491: LD_INT 6
24493: PUSH
24494: LD_INT 7
24496: PUSH
24497: LD_INT 8
24499: PUSH
24500: LD_INT 13
24502: PUSH
24503: LD_INT 12
24505: PUSH
24506: LD_INT 15
24508: PUSH
24509: LD_INT 11
24511: PUSH
24512: LD_INT 14
24514: PUSH
24515: LD_INT 10
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: IN
24529: IFFALSE 24539
// btype = b_lab ;
24531: LD_ADDR_VAR 0 1
24535: PUSH
24536: LD_INT 6
24538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24539: LD_VAR 0 6
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: IN
24558: NOT
24559: PUSH
24560: LD_VAR 0 1
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: LD_INT 6
24579: PUSH
24580: LD_INT 36
24582: PUSH
24583: LD_INT 4
24585: PUSH
24586: LD_INT 5
24588: PUSH
24589: LD_INT 31
24591: PUSH
24592: LD_INT 32
24594: PUSH
24595: LD_INT 33
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: IN
24611: NOT
24612: PUSH
24613: LD_VAR 0 6
24617: PUSH
24618: LD_INT 1
24620: EQUAL
24621: AND
24622: OR
24623: PUSH
24624: LD_VAR 0 1
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: IN
24639: NOT
24640: PUSH
24641: LD_VAR 0 6
24645: PUSH
24646: LD_INT 2
24648: EQUAL
24649: AND
24650: OR
24651: IFFALSE 24661
// mode = 0 ;
24653: LD_ADDR_VAR 0 6
24657: PUSH
24658: LD_INT 0
24660: ST_TO_ADDR
// case mode of 0 :
24661: LD_VAR 0 6
24665: PUSH
24666: LD_INT 0
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 36127
24674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24675: LD_ADDR_VAR 0 11
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 3
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24868: LD_ADDR_VAR 0 12
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: NEG
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 3
25025: NEG
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 3
25036: NEG
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25064: LD_ADDR_VAR 0 13
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: LD_INT 3
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 3
25223: NEG
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 3
25235: NEG
25236: PUSH
25237: LD_INT 3
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25263: LD_ADDR_VAR 0 14
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: LD_INT 3
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 3
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 2
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25459: LD_ADDR_VAR 0 15
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 2
25582: NEG
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 3
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25652: LD_ADDR_VAR 0 16
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: LD_INT 3
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25845: LD_ADDR_VAR 0 17
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: NEG
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26075: LD_ADDR_VAR 0 18
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26305: LD_ADDR_VAR 0 19
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26535: LD_ADDR_VAR 0 20
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 2
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: NEG
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26765: LD_ADDR_VAR 0 21
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: NEG
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26995: LD_ADDR_VAR 0 22
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27225: LD_ADDR_VAR 0 23
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: LD_INT 3
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: LD_INT 3
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27505: LD_ADDR_VAR 0 24
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 2
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 2
27692: NEG
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 2
27704: NEG
27705: PUSH
27706: LD_INT 2
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 3
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27781: LD_ADDR_VAR 0 25
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: LD_INT 3
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28055: LD_ADDR_VAR 0 26
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28331: LD_ADDR_VAR 0 27
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: LD_INT 2
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 3
28564: NEG
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 3
28576: NEG
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28611: LD_ADDR_VAR 0 28
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 2
28798: NEG
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 3
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: LD_INT 3
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 3
28846: NEG
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 3
28858: NEG
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28893: LD_ADDR_VAR 0 29
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 3
29137: NEG
29138: PUSH
29139: LD_INT 2
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29172: LD_ADDR_VAR 0 30
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: PUSH
29298: LD_INT 1
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 2
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 2
29349: NEG
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 3
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 3
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29450: LD_ADDR_VAR 0 31
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: LD_INT 3
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: LD_INT 3
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 3
29693: NEG
29694: PUSH
29695: LD_INT 2
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29728: LD_ADDR_VAR 0 32
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 3
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30006: LD_ADDR_VAR 0 33
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: LD_INT 2
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 3
30250: NEG
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30285: LD_ADDR_VAR 0 34
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: LD_INT 2
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 3
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30565: LD_ADDR_VAR 0 35
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30677: LD_ADDR_VAR 0 36
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30789: LD_ADDR_VAR 0 37
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30901: LD_ADDR_VAR 0 38
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31013: LD_ADDR_VAR 0 39
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31125: LD_ADDR_VAR 0 40
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31237: LD_ADDR_VAR 0 41
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 3
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 3
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31587: LD_ADDR_VAR 0 42
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: LD_INT 2
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 3
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 3
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 3
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 3
31884: NEG
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 3
31896: NEG
31897: PUSH
31898: LD_INT 3
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31937: LD_ADDR_VAR 0 43
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 3
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 3
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 3
32233: NEG
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 3
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32285: LD_ADDR_VAR 0 44
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 3
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: NEG
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32635: LD_ADDR_VAR 0 45
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 3
32932: NEG
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: LD_INT 3
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32985: LD_ADDR_VAR 0 46
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 3
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: LD_INT 3
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 3
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33333: LD_ADDR_VAR 0 47
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33484: LD_ADDR_VAR 0 48
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33631: LD_ADDR_VAR 0 49
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33775: LD_ADDR_VAR 0 50
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33919: LD_ADDR_VAR 0 51
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: NEG
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34066: LD_ADDR_VAR 0 52
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34217: LD_ADDR_VAR 0 53
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34447: LD_ADDR_VAR 0 54
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 2
34623: NEG
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34677: LD_ADDR_VAR 0 55
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: NEG
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34907: LD_ADDR_VAR 0 56
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35137: LD_ADDR_VAR 0 57
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35367: LD_ADDR_VAR 0 58
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35597: LD_ADDR_VAR 0 59
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35685: LD_ADDR_VAR 0 60
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35773: LD_ADDR_VAR 0 61
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35861: LD_ADDR_VAR 0 62
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35949: LD_ADDR_VAR 0 63
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36037: LD_ADDR_VAR 0 64
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: ST_TO_ADDR
// end ; 1 :
36125: GO 42022
36127: LD_INT 1
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 38758
36135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36136: LD_ADDR_VAR 0 11
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 3
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36180: LD_ADDR_VAR 0 12
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 3
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36221: LD_ADDR_VAR 0 13
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 3
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36261: LD_ADDR_VAR 0 14
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 3
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36302: LD_ADDR_VAR 0 15
36306: PUSH
36307: LD_INT 2
36309: NEG
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 3
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 3
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36346: LD_ADDR_VAR 0 16
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 3
36365: NEG
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: NEG
36378: PUSH
36379: LD_INT 3
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36392: LD_ADDR_VAR 0 17
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 3
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36436: LD_ADDR_VAR 0 18
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36477: LD_ADDR_VAR 0 19
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: LD_INT 3
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: LD_INT 3
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36517: LD_ADDR_VAR 0 20
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36558: LD_ADDR_VAR 0 21
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 3
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 3
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36602: LD_ADDR_VAR 0 22
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: NEG
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: LD_INT 3
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36648: LD_ADDR_VAR 0 23
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 3
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 3
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36692: LD_ADDR_VAR 0 24
36696: PUSH
36697: LD_INT 3
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 3
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 4
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36733: LD_ADDR_VAR 0 25
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 4
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: LD_INT 4
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36773: LD_ADDR_VAR 0 26
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 3
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 4
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36814: LD_ADDR_VAR 0 27
36818: PUSH
36819: LD_INT 3
36821: NEG
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 3
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 4
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36858: LD_ADDR_VAR 0 28
36862: PUSH
36863: LD_INT 3
36865: NEG
36866: PUSH
36867: LD_INT 3
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 3
36877: NEG
36878: PUSH
36879: LD_INT 4
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 4
36889: NEG
36890: PUSH
36891: LD_INT 3
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36904: LD_ADDR_VAR 0 29
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 3
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 4
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 4
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: LD_INT 3
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: LD_INT 5
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 5
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 4
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 6
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 6
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 5
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37059: LD_ADDR_VAR 0 30
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 3
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 4
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 4
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 4
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 5
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 5
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 6
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 6
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37202: LD_ADDR_VAR 0 31
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 3
37219: PUSH
37220: LD_INT 3
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 4
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 4
37249: PUSH
37250: LD_INT 4
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 4
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 5
37269: PUSH
37270: LD_INT 4
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 5
37279: PUSH
37280: LD_INT 5
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 4
37289: PUSH
37290: LD_INT 5
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 6
37299: PUSH
37300: LD_INT 5
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 6
37309: PUSH
37310: LD_INT 6
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 5
37319: PUSH
37320: LD_INT 6
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37341: LD_ADDR_VAR 0 32
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 3
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 4
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 5
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 5
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 4
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 6
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 6
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 5
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37484: LD_ADDR_VAR 0 33
37488: PUSH
37489: LD_INT 2
37491: NEG
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: NEG
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 3
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 3
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 4
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 4
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 4
37559: NEG
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 5
37570: NEG
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 5
37581: NEG
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 5
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 6
37604: NEG
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 6
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37639: LD_ADDR_VAR 0 34
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 3
37682: NEG
37683: PUSH
37684: LD_INT 4
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 4
37694: NEG
37695: PUSH
37696: LD_INT 3
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 4
37706: NEG
37707: PUSH
37708: LD_INT 4
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 4
37718: NEG
37719: PUSH
37720: LD_INT 5
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 5
37730: NEG
37731: PUSH
37732: LD_INT 4
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 5
37742: NEG
37743: PUSH
37744: LD_INT 5
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 5
37754: NEG
37755: PUSH
37756: LD_INT 6
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 6
37766: NEG
37767: PUSH
37768: LD_INT 5
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 6
37778: NEG
37779: PUSH
37780: LD_INT 6
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37802: LD_ADDR_VAR 0 41
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 3
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37846: LD_ADDR_VAR 0 42
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 3
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37887: LD_ADDR_VAR 0 43
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37927: LD_ADDR_VAR 0 44
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 2
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 3
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37968: LD_ADDR_VAR 0 45
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 3
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38012: LD_ADDR_VAR 0 46
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: NEG
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38058: LD_ADDR_VAR 0 47
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: LD_INT 3
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38091: LD_ADDR_VAR 0 48
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38122: LD_ADDR_VAR 0 49
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38151: LD_ADDR_VAR 0 50
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38180: LD_ADDR_VAR 0 51
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38211: LD_ADDR_VAR 0 52
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38244: LD_ADDR_VAR 0 53
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38288: LD_ADDR_VAR 0 54
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38329: LD_ADDR_VAR 0 55
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 3
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38369: LD_ADDR_VAR 0 56
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38410: LD_ADDR_VAR 0 57
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: NEG
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 3
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38454: LD_ADDR_VAR 0 58
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: LD_INT 3
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38500: LD_ADDR_VAR 0 59
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38544: LD_ADDR_VAR 0 60
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38585: LD_ADDR_VAR 0 61
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38625: LD_ADDR_VAR 0 62
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38666: LD_ADDR_VAR 0 63
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38710: LD_ADDR_VAR 0 64
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 2
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: ST_TO_ADDR
// end ; 2 :
38756: GO 42022
38758: LD_INT 2
38760: DOUBLE
38761: EQUAL
38762: IFTRUE 38766
38764: GO 42021
38766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38767: LD_ADDR_VAR 0 29
38771: PUSH
38772: LD_INT 4
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 4
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 5
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 4
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 5
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: LD_INT 4
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 4
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 4
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 4
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 5
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: NEG
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 3
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 4
39106: NEG
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 4
39117: NEG
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 4
39129: NEG
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 4
39152: NEG
39153: PUSH
39154: LD_INT 4
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 4
39164: NEG
39165: PUSH
39166: LD_INT 5
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: LD_INT 4
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 3
39188: NEG
39189: PUSH
39190: LD_INT 3
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 4
39200: NEG
39201: PUSH
39202: LD_INT 3
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 5
39212: NEG
39213: PUSH
39214: LD_INT 4
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 5
39224: NEG
39225: PUSH
39226: LD_INT 5
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 3
39236: NEG
39237: PUSH
39238: LD_INT 5
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 5
39248: NEG
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39305: LD_ADDR_VAR 0 30
39309: PUSH
39310: LD_INT 4
39312: PUSH
39313: LD_INT 4
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 4
39322: PUSH
39323: LD_INT 3
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 4
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 5
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: PUSH
39353: LD_INT 5
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 4
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: LD_INT 3
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: LD_INT 3
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: PUSH
39393: LD_INT 5
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 3
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 4
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 4
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 4
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 4
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 4
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 3
39529: NEG
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 4
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 5
39551: NEG
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 5
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 5
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: NEG
39598: PUSH
39599: LD_INT 3
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: NEG
39610: PUSH
39611: LD_INT 4
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 3
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: NEG
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 4
39657: NEG
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 4
39669: NEG
39670: PUSH
39671: LD_INT 4
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 4
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 4
39693: NEG
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 4
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 5
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 4
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 3
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 3
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 4
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 5
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 3
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 5
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39852: LD_ADDR_VAR 0 31
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 4
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 4
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 5
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 5
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 4
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 5
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: LD_INT 3
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 3
39952: NEG
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 3
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 4
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 4
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 4
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 4
40054: NEG
40055: PUSH
40056: LD_INT 4
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 4
40066: NEG
40067: PUSH
40068: LD_INT 5
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: LD_INT 4
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: LD_INT 3
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 4
40102: NEG
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 5
40114: NEG
40115: PUSH
40116: LD_INT 4
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 5
40126: NEG
40127: PUSH
40128: LD_INT 5
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: NEG
40139: PUSH
40140: LD_INT 5
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 5
40150: NEG
40151: PUSH
40152: LD_INT 3
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 3
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 4
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 3
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 4
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: LD_INT 4
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 4
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 5
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40402: LD_ADDR_VAR 0 32
40406: PUSH
40407: LD_INT 4
40409: NEG
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 4
40420: NEG
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 3
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 4
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 5
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 5
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 5
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 3
40523: NEG
40524: PUSH
40525: LD_INT 4
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 3
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 4
40571: NEG
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 4
40583: NEG
40584: PUSH
40585: LD_INT 4
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: LD_INT 4
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 4
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 4
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 5
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 4
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 4
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 5
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: LD_INT 5
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 4
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 4
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 4
40814: PUSH
40815: LD_INT 4
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 4
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 5
40834: PUSH
40835: LD_INT 4
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 5
40844: PUSH
40845: LD_INT 5
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 4
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 5
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 3
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40949: LD_ADDR_VAR 0 33
40953: PUSH
40954: LD_INT 4
40956: NEG
40957: PUSH
40958: LD_INT 4
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 4
40968: NEG
40969: PUSH
40970: LD_INT 5
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 3
40980: NEG
40981: PUSH
40982: LD_INT 4
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: NEG
40993: PUSH
40994: LD_INT 3
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 4
41004: NEG
41005: PUSH
41006: LD_INT 3
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 5
41016: NEG
41017: PUSH
41018: LD_INT 4
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 5
41028: NEG
41029: PUSH
41030: LD_INT 5
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: LD_INT 5
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 5
41052: NEG
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 3
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 4
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 3
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 3
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 4
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 4
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 4
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 4
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 5
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 5
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 4
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 5
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 4
41279: PUSH
41280: LD_INT 3
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 4
41289: PUSH
41290: LD_INT 4
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 4
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 4
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 4
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 4
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 5
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41487: LD_ADDR_VAR 0 34
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 4
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 5
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 4
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 3
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 3
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 4
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 5
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 3
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 5
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 4
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 4
41689: PUSH
41690: LD_INT 4
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 4
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 5
41709: PUSH
41710: LD_INT 4
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 5
41719: PUSH
41720: LD_INT 5
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 4
41729: PUSH
41730: LD_INT 5
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 3
41739: PUSH
41740: LD_INT 4
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 5
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: LD_INT 5
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 4
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 4
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 4
41872: NEG
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 4
41883: NEG
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 3
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 3
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 4
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 5
41928: NEG
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 5
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 5
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: ST_TO_ADDR
// end ; end ;
42019: GO 42022
42021: POP
// case btype of b_depot , b_warehouse :
42022: LD_VAR 0 1
42026: PUSH
42027: LD_INT 0
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42041
42033: LD_INT 1
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42041
42039: GO 42242
42041: POP
// case nation of nation_american :
42042: LD_VAR 0 5
42046: PUSH
42047: LD_INT 1
42049: DOUBLE
42050: EQUAL
42051: IFTRUE 42055
42053: GO 42111
42055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42056: LD_ADDR_VAR 0 9
42060: PUSH
42061: LD_VAR 0 11
42065: PUSH
42066: LD_VAR 0 12
42070: PUSH
42071: LD_VAR 0 13
42075: PUSH
42076: LD_VAR 0 14
42080: PUSH
42081: LD_VAR 0 15
42085: PUSH
42086: LD_VAR 0 16
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: PUSH
42099: LD_VAR 0 4
42103: PUSH
42104: LD_INT 1
42106: PLUS
42107: ARRAY
42108: ST_TO_ADDR
42109: GO 42240
42111: LD_INT 2
42113: DOUBLE
42114: EQUAL
42115: IFTRUE 42119
42117: GO 42175
42119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42120: LD_ADDR_VAR 0 9
42124: PUSH
42125: LD_VAR 0 17
42129: PUSH
42130: LD_VAR 0 18
42134: PUSH
42135: LD_VAR 0 19
42139: PUSH
42140: LD_VAR 0 20
42144: PUSH
42145: LD_VAR 0 21
42149: PUSH
42150: LD_VAR 0 22
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: PUSH
42163: LD_VAR 0 4
42167: PUSH
42168: LD_INT 1
42170: PLUS
42171: ARRAY
42172: ST_TO_ADDR
42173: GO 42240
42175: LD_INT 3
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42239
42183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42184: LD_ADDR_VAR 0 9
42188: PUSH
42189: LD_VAR 0 23
42193: PUSH
42194: LD_VAR 0 24
42198: PUSH
42199: LD_VAR 0 25
42203: PUSH
42204: LD_VAR 0 26
42208: PUSH
42209: LD_VAR 0 27
42213: PUSH
42214: LD_VAR 0 28
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: PUSH
42227: LD_VAR 0 4
42231: PUSH
42232: LD_INT 1
42234: PLUS
42235: ARRAY
42236: ST_TO_ADDR
42237: GO 42240
42239: POP
42240: GO 42795
42242: LD_INT 2
42244: DOUBLE
42245: EQUAL
42246: IFTRUE 42256
42248: LD_INT 3
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42312
42256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42257: LD_ADDR_VAR 0 9
42261: PUSH
42262: LD_VAR 0 29
42266: PUSH
42267: LD_VAR 0 30
42271: PUSH
42272: LD_VAR 0 31
42276: PUSH
42277: LD_VAR 0 32
42281: PUSH
42282: LD_VAR 0 33
42286: PUSH
42287: LD_VAR 0 34
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: PUSH
42300: LD_VAR 0 4
42304: PUSH
42305: LD_INT 1
42307: PLUS
42308: ARRAY
42309: ST_TO_ADDR
42310: GO 42795
42312: LD_INT 16
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42374
42318: LD_INT 17
42320: DOUBLE
42321: EQUAL
42322: IFTRUE 42374
42324: LD_INT 18
42326: DOUBLE
42327: EQUAL
42328: IFTRUE 42374
42330: LD_INT 19
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42374
42336: LD_INT 22
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42374
42342: LD_INT 20
42344: DOUBLE
42345: EQUAL
42346: IFTRUE 42374
42348: LD_INT 21
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42374
42354: LD_INT 23
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42374
42360: LD_INT 24
42362: DOUBLE
42363: EQUAL
42364: IFTRUE 42374
42366: LD_INT 25
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42374
42372: GO 42430
42374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42375: LD_ADDR_VAR 0 9
42379: PUSH
42380: LD_VAR 0 35
42384: PUSH
42385: LD_VAR 0 36
42389: PUSH
42390: LD_VAR 0 37
42394: PUSH
42395: LD_VAR 0 38
42399: PUSH
42400: LD_VAR 0 39
42404: PUSH
42405: LD_VAR 0 40
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: PUSH
42418: LD_VAR 0 4
42422: PUSH
42423: LD_INT 1
42425: PLUS
42426: ARRAY
42427: ST_TO_ADDR
42428: GO 42795
42430: LD_INT 6
42432: DOUBLE
42433: EQUAL
42434: IFTRUE 42486
42436: LD_INT 7
42438: DOUBLE
42439: EQUAL
42440: IFTRUE 42486
42442: LD_INT 8
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42486
42448: LD_INT 13
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42486
42454: LD_INT 12
42456: DOUBLE
42457: EQUAL
42458: IFTRUE 42486
42460: LD_INT 15
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42486
42466: LD_INT 11
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42486
42472: LD_INT 14
42474: DOUBLE
42475: EQUAL
42476: IFTRUE 42486
42478: LD_INT 10
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42542
42486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42487: LD_ADDR_VAR 0 9
42491: PUSH
42492: LD_VAR 0 41
42496: PUSH
42497: LD_VAR 0 42
42501: PUSH
42502: LD_VAR 0 43
42506: PUSH
42507: LD_VAR 0 44
42511: PUSH
42512: LD_VAR 0 45
42516: PUSH
42517: LD_VAR 0 46
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: PUSH
42530: LD_VAR 0 4
42534: PUSH
42535: LD_INT 1
42537: PLUS
42538: ARRAY
42539: ST_TO_ADDR
42540: GO 42795
42542: LD_INT 36
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42550
42548: GO 42606
42550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42551: LD_ADDR_VAR 0 9
42555: PUSH
42556: LD_VAR 0 47
42560: PUSH
42561: LD_VAR 0 48
42565: PUSH
42566: LD_VAR 0 49
42570: PUSH
42571: LD_VAR 0 50
42575: PUSH
42576: LD_VAR 0 51
42580: PUSH
42581: LD_VAR 0 52
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: PUSH
42594: LD_VAR 0 4
42598: PUSH
42599: LD_INT 1
42601: PLUS
42602: ARRAY
42603: ST_TO_ADDR
42604: GO 42795
42606: LD_INT 4
42608: DOUBLE
42609: EQUAL
42610: IFTRUE 42632
42612: LD_INT 5
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42632
42618: LD_INT 34
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42632
42624: LD_INT 37
42626: DOUBLE
42627: EQUAL
42628: IFTRUE 42632
42630: GO 42688
42632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42633: LD_ADDR_VAR 0 9
42637: PUSH
42638: LD_VAR 0 53
42642: PUSH
42643: LD_VAR 0 54
42647: PUSH
42648: LD_VAR 0 55
42652: PUSH
42653: LD_VAR 0 56
42657: PUSH
42658: LD_VAR 0 57
42662: PUSH
42663: LD_VAR 0 58
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: LD_VAR 0 4
42680: PUSH
42681: LD_INT 1
42683: PLUS
42684: ARRAY
42685: ST_TO_ADDR
42686: GO 42795
42688: LD_INT 31
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42738
42694: LD_INT 32
42696: DOUBLE
42697: EQUAL
42698: IFTRUE 42738
42700: LD_INT 33
42702: DOUBLE
42703: EQUAL
42704: IFTRUE 42738
42706: LD_INT 27
42708: DOUBLE
42709: EQUAL
42710: IFTRUE 42738
42712: LD_INT 26
42714: DOUBLE
42715: EQUAL
42716: IFTRUE 42738
42718: LD_INT 28
42720: DOUBLE
42721: EQUAL
42722: IFTRUE 42738
42724: LD_INT 29
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42738
42730: LD_INT 30
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42794
42738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42739: LD_ADDR_VAR 0 9
42743: PUSH
42744: LD_VAR 0 59
42748: PUSH
42749: LD_VAR 0 60
42753: PUSH
42754: LD_VAR 0 61
42758: PUSH
42759: LD_VAR 0 62
42763: PUSH
42764: LD_VAR 0 63
42768: PUSH
42769: LD_VAR 0 64
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: PUSH
42782: LD_VAR 0 4
42786: PUSH
42787: LD_INT 1
42789: PLUS
42790: ARRAY
42791: ST_TO_ADDR
42792: GO 42795
42794: POP
// temp_list2 = [ ] ;
42795: LD_ADDR_VAR 0 10
42799: PUSH
42800: EMPTY
42801: ST_TO_ADDR
// for i in temp_list do
42802: LD_ADDR_VAR 0 8
42806: PUSH
42807: LD_VAR 0 9
42811: PUSH
42812: FOR_IN
42813: IFFALSE 42865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42815: LD_ADDR_VAR 0 10
42819: PUSH
42820: LD_VAR 0 10
42824: PUSH
42825: LD_VAR 0 8
42829: PUSH
42830: LD_INT 1
42832: ARRAY
42833: PUSH
42834: LD_VAR 0 2
42838: PLUS
42839: PUSH
42840: LD_VAR 0 8
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PUSH
42849: LD_VAR 0 3
42853: PLUS
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: ADD
42862: ST_TO_ADDR
42863: GO 42812
42865: POP
42866: POP
// result = temp_list2 ;
42867: LD_ADDR_VAR 0 7
42871: PUSH
42872: LD_VAR 0 10
42876: ST_TO_ADDR
// end ;
42877: LD_VAR 0 7
42881: RET
// export function EnemyInRange ( unit , dist ) ; begin
42882: LD_INT 0
42884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 255
42899: PPUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 250
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 251
42919: PPUSH
42920: LD_VAR 0 2
42924: PPUSH
42925: CALL 16255 0 4
42929: PUSH
42930: LD_INT 4
42932: ARRAY
42933: ST_TO_ADDR
// end ;
42934: LD_VAR 0 3
42938: RET
// export function PlayerSeeMe ( unit ) ; begin
42939: LD_INT 0
42941: PPUSH
// result := See ( your_side , unit ) ;
42942: LD_ADDR_VAR 0 2
42946: PUSH
42947: LD_OWVAR 2
42951: PPUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 292
42961: ST_TO_ADDR
// end ;
42962: LD_VAR 0 2
42966: RET
// export function ReverseDir ( unit ) ; begin
42967: LD_INT 0
42969: PPUSH
// if not unit then
42970: LD_VAR 0 1
42974: NOT
42975: IFFALSE 42979
// exit ;
42977: GO 43002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42979: LD_ADDR_VAR 0 2
42983: PUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: CALL_OW 254
42993: PUSH
42994: LD_INT 3
42996: PLUS
42997: PUSH
42998: LD_INT 6
43000: MOD
43001: ST_TO_ADDR
// end ;
43002: LD_VAR 0 2
43006: RET
// export function ReverseArray ( array ) ; var i ; begin
43007: LD_INT 0
43009: PPUSH
43010: PPUSH
// if not array then
43011: LD_VAR 0 1
43015: NOT
43016: IFFALSE 43020
// exit ;
43018: GO 43075
// result := [ ] ;
43020: LD_ADDR_VAR 0 2
43024: PUSH
43025: EMPTY
43026: ST_TO_ADDR
// for i := array downto 1 do
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: DOUBLE
43033: LD_VAR 0 1
43037: INC
43038: ST_TO_ADDR
43039: LD_INT 1
43041: PUSH
43042: FOR_DOWNTO
43043: IFFALSE 43073
// result := Join ( result , array [ i ] ) ;
43045: LD_ADDR_VAR 0 2
43049: PUSH
43050: LD_VAR 0 2
43054: PPUSH
43055: LD_VAR 0 1
43059: PUSH
43060: LD_VAR 0 3
43064: ARRAY
43065: PPUSH
43066: CALL 47812 0 2
43070: ST_TO_ADDR
43071: GO 43042
43073: POP
43074: POP
// end ;
43075: LD_VAR 0 2
43079: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43080: LD_INT 0
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
// if not unit or not hexes then
43088: LD_VAR 0 1
43092: NOT
43093: PUSH
43094: LD_VAR 0 2
43098: NOT
43099: OR
43100: IFFALSE 43104
// exit ;
43102: GO 43227
// dist := 9999 ;
43104: LD_ADDR_VAR 0 5
43108: PUSH
43109: LD_INT 9999
43111: ST_TO_ADDR
// for i = 1 to hexes do
43112: LD_ADDR_VAR 0 4
43116: PUSH
43117: DOUBLE
43118: LD_INT 1
43120: DEC
43121: ST_TO_ADDR
43122: LD_VAR 0 2
43126: PUSH
43127: FOR_TO
43128: IFFALSE 43215
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43130: LD_ADDR_VAR 0 6
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: LD_VAR 0 2
43144: PUSH
43145: LD_VAR 0 4
43149: ARRAY
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: PPUSH
43155: LD_VAR 0 2
43159: PUSH
43160: LD_VAR 0 4
43164: ARRAY
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: PPUSH
43170: CALL_OW 297
43174: ST_TO_ADDR
// if tdist < dist then
43175: LD_VAR 0 6
43179: PUSH
43180: LD_VAR 0 5
43184: LESS
43185: IFFALSE 43213
// begin hex := hexes [ i ] ;
43187: LD_ADDR_VAR 0 8
43191: PUSH
43192: LD_VAR 0 2
43196: PUSH
43197: LD_VAR 0 4
43201: ARRAY
43202: ST_TO_ADDR
// dist := tdist ;
43203: LD_ADDR_VAR 0 5
43207: PUSH
43208: LD_VAR 0 6
43212: ST_TO_ADDR
// end ; end ;
43213: GO 43127
43215: POP
43216: POP
// result := hex ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_VAR 0 8
43226: ST_TO_ADDR
// end ;
43227: LD_VAR 0 3
43231: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43232: LD_INT 0
43234: PPUSH
43235: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43236: LD_VAR 0 1
43240: NOT
43241: PUSH
43242: LD_VAR 0 1
43246: PUSH
43247: LD_INT 21
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 23
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PPUSH
43271: CALL_OW 69
43275: IN
43276: NOT
43277: OR
43278: IFFALSE 43282
// exit ;
43280: GO 43329
// for i = 1 to 3 do
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: DOUBLE
43288: LD_INT 1
43290: DEC
43291: ST_TO_ADDR
43292: LD_INT 3
43294: PUSH
43295: FOR_TO
43296: IFFALSE 43327
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43298: LD_VAR 0 1
43302: PPUSH
43303: CALL_OW 250
43307: PPUSH
43308: LD_VAR 0 1
43312: PPUSH
43313: CALL_OW 251
43317: PPUSH
43318: LD_INT 1
43320: PPUSH
43321: CALL_OW 453
43325: GO 43295
43327: POP
43328: POP
// end ;
43329: LD_VAR 0 2
43333: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43334: LD_INT 0
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
// if not unit or not enemy_unit then
43342: LD_VAR 0 1
43346: NOT
43347: PUSH
43348: LD_VAR 0 2
43352: NOT
43353: OR
43354: IFFALSE 43358
// exit ;
43356: GO 43825
// if GetLives ( i ) < 250 then
43358: LD_VAR 0 4
43362: PPUSH
43363: CALL_OW 256
43367: PUSH
43368: LD_INT 250
43370: LESS
43371: IFFALSE 43384
// begin ComAutodestruct ( i ) ;
43373: LD_VAR 0 4
43377: PPUSH
43378: CALL 43232 0 1
// exit ;
43382: GO 43825
// end ; x := GetX ( enemy_unit ) ;
43384: LD_ADDR_VAR 0 7
43388: PUSH
43389: LD_VAR 0 2
43393: PPUSH
43394: CALL_OW 250
43398: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43399: LD_ADDR_VAR 0 8
43403: PUSH
43404: LD_VAR 0 2
43408: PPUSH
43409: CALL_OW 251
43413: ST_TO_ADDR
// if not x or not y then
43414: LD_VAR 0 7
43418: NOT
43419: PUSH
43420: LD_VAR 0 8
43424: NOT
43425: OR
43426: IFFALSE 43430
// exit ;
43428: GO 43825
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43430: LD_ADDR_VAR 0 6
43434: PUSH
43435: LD_VAR 0 7
43439: PPUSH
43440: LD_INT 0
43442: PPUSH
43443: LD_INT 4
43445: PPUSH
43446: CALL_OW 272
43450: PUSH
43451: LD_VAR 0 8
43455: PPUSH
43456: LD_INT 0
43458: PPUSH
43459: LD_INT 4
43461: PPUSH
43462: CALL_OW 273
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_VAR 0 7
43475: PPUSH
43476: LD_INT 1
43478: PPUSH
43479: LD_INT 4
43481: PPUSH
43482: CALL_OW 272
43486: PUSH
43487: LD_VAR 0 8
43491: PPUSH
43492: LD_INT 1
43494: PPUSH
43495: LD_INT 4
43497: PPUSH
43498: CALL_OW 273
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_VAR 0 7
43511: PPUSH
43512: LD_INT 2
43514: PPUSH
43515: LD_INT 4
43517: PPUSH
43518: CALL_OW 272
43522: PUSH
43523: LD_VAR 0 8
43527: PPUSH
43528: LD_INT 2
43530: PPUSH
43531: LD_INT 4
43533: PPUSH
43534: CALL_OW 273
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_VAR 0 7
43547: PPUSH
43548: LD_INT 3
43550: PPUSH
43551: LD_INT 4
43553: PPUSH
43554: CALL_OW 272
43558: PUSH
43559: LD_VAR 0 8
43563: PPUSH
43564: LD_INT 3
43566: PPUSH
43567: LD_INT 4
43569: PPUSH
43570: CALL_OW 273
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_VAR 0 7
43583: PPUSH
43584: LD_INT 4
43586: PPUSH
43587: LD_INT 4
43589: PPUSH
43590: CALL_OW 272
43594: PUSH
43595: LD_VAR 0 8
43599: PPUSH
43600: LD_INT 4
43602: PPUSH
43603: LD_INT 4
43605: PPUSH
43606: CALL_OW 273
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_VAR 0 7
43619: PPUSH
43620: LD_INT 5
43622: PPUSH
43623: LD_INT 4
43625: PPUSH
43626: CALL_OW 272
43630: PUSH
43631: LD_VAR 0 8
43635: PPUSH
43636: LD_INT 5
43638: PPUSH
43639: LD_INT 4
43641: PPUSH
43642: CALL_OW 273
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// for i = tmp downto 1 do
43659: LD_ADDR_VAR 0 4
43663: PUSH
43664: DOUBLE
43665: LD_VAR 0 6
43669: INC
43670: ST_TO_ADDR
43671: LD_INT 1
43673: PUSH
43674: FOR_DOWNTO
43675: IFFALSE 43776
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43677: LD_VAR 0 6
43681: PUSH
43682: LD_VAR 0 4
43686: ARRAY
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: PPUSH
43692: LD_VAR 0 6
43696: PUSH
43697: LD_VAR 0 4
43701: ARRAY
43702: PUSH
43703: LD_INT 2
43705: ARRAY
43706: PPUSH
43707: CALL_OW 488
43711: NOT
43712: PUSH
43713: LD_VAR 0 6
43717: PUSH
43718: LD_VAR 0 4
43722: ARRAY
43723: PUSH
43724: LD_INT 1
43726: ARRAY
43727: PPUSH
43728: LD_VAR 0 6
43732: PUSH
43733: LD_VAR 0 4
43737: ARRAY
43738: PUSH
43739: LD_INT 2
43741: ARRAY
43742: PPUSH
43743: CALL_OW 428
43747: PUSH
43748: LD_INT 0
43750: NONEQUAL
43751: OR
43752: IFFALSE 43774
// tmp := Delete ( tmp , i ) ;
43754: LD_ADDR_VAR 0 6
43758: PUSH
43759: LD_VAR 0 6
43763: PPUSH
43764: LD_VAR 0 4
43768: PPUSH
43769: CALL_OW 3
43773: ST_TO_ADDR
43774: GO 43674
43776: POP
43777: POP
// j := GetClosestHex ( unit , tmp ) ;
43778: LD_ADDR_VAR 0 5
43782: PUSH
43783: LD_VAR 0 1
43787: PPUSH
43788: LD_VAR 0 6
43792: PPUSH
43793: CALL 43080 0 2
43797: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43798: LD_VAR 0 1
43802: PPUSH
43803: LD_VAR 0 5
43807: PUSH
43808: LD_INT 1
43810: ARRAY
43811: PPUSH
43812: LD_VAR 0 5
43816: PUSH
43817: LD_INT 2
43819: ARRAY
43820: PPUSH
43821: CALL_OW 111
// end ;
43825: LD_VAR 0 3
43829: RET
// export function PrepareApemanSoldier ( ) ; begin
43830: LD_INT 0
43832: PPUSH
// uc_nation := 0 ;
43833: LD_ADDR_OWVAR 21
43837: PUSH
43838: LD_INT 0
43840: ST_TO_ADDR
// hc_sex := sex_male ;
43841: LD_ADDR_OWVAR 27
43845: PUSH
43846: LD_INT 1
43848: ST_TO_ADDR
// hc_name :=  ;
43849: LD_ADDR_OWVAR 26
43853: PUSH
43854: LD_STRING 
43856: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43857: LD_ADDR_OWVAR 28
43861: PUSH
43862: LD_INT 15
43864: ST_TO_ADDR
// hc_gallery :=  ;
43865: LD_ADDR_OWVAR 33
43869: PUSH
43870: LD_STRING 
43872: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43873: LD_ADDR_OWVAR 31
43877: PUSH
43878: LD_INT 0
43880: PPUSH
43881: LD_INT 3
43883: PPUSH
43884: CALL_OW 12
43888: PUSH
43889: LD_INT 0
43891: PPUSH
43892: LD_INT 3
43894: PPUSH
43895: CALL_OW 12
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// end ;
43912: LD_VAR 0 1
43916: RET
// export function PrepareApemanEngineer ( ) ; begin
43917: LD_INT 0
43919: PPUSH
// uc_nation := 0 ;
43920: LD_ADDR_OWVAR 21
43924: PUSH
43925: LD_INT 0
43927: ST_TO_ADDR
// hc_sex := sex_male ;
43928: LD_ADDR_OWVAR 27
43932: PUSH
43933: LD_INT 1
43935: ST_TO_ADDR
// hc_name :=  ;
43936: LD_ADDR_OWVAR 26
43940: PUSH
43941: LD_STRING 
43943: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43944: LD_ADDR_OWVAR 28
43948: PUSH
43949: LD_INT 16
43951: ST_TO_ADDR
// hc_gallery :=  ;
43952: LD_ADDR_OWVAR 33
43956: PUSH
43957: LD_STRING 
43959: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43960: LD_ADDR_OWVAR 31
43964: PUSH
43965: LD_INT 0
43967: PPUSH
43968: LD_INT 3
43970: PPUSH
43971: CALL_OW 12
43975: PUSH
43976: LD_INT 0
43978: PPUSH
43979: LD_INT 3
43981: PPUSH
43982: CALL_OW 12
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 1
44003: RET
// export function PrepareApeman ( agressivity ) ; begin
44004: LD_INT 0
44006: PPUSH
// uc_side := 0 ;
44007: LD_ADDR_OWVAR 20
44011: PUSH
44012: LD_INT 0
44014: ST_TO_ADDR
// uc_nation := 0 ;
44015: LD_ADDR_OWVAR 21
44019: PUSH
44020: LD_INT 0
44022: ST_TO_ADDR
// hc_sex := sex_male ;
44023: LD_ADDR_OWVAR 27
44027: PUSH
44028: LD_INT 1
44030: ST_TO_ADDR
// hc_class := class_apeman ;
44031: LD_ADDR_OWVAR 28
44035: PUSH
44036: LD_INT 12
44038: ST_TO_ADDR
// hc_gallery :=  ;
44039: LD_ADDR_OWVAR 33
44043: PUSH
44044: LD_STRING 
44046: ST_TO_ADDR
// hc_name :=  ;
44047: LD_ADDR_OWVAR 26
44051: PUSH
44052: LD_STRING 
44054: ST_TO_ADDR
// if agressivity = 0 then
44055: LD_VAR 0 1
44059: PUSH
44060: LD_INT 0
44062: EQUAL
44063: IFFALSE 44075
// hc_agressivity := 0 else
44065: LD_ADDR_OWVAR 35
44069: PUSH
44070: LD_INT 0
44072: ST_TO_ADDR
44073: GO 44096
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44075: LD_ADDR_OWVAR 35
44079: PUSH
44080: LD_VAR 0 1
44084: NEG
44085: PPUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 12
44095: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44096: LD_ADDR_OWVAR 31
44100: PUSH
44101: LD_INT 0
44103: PPUSH
44104: LD_INT 3
44106: PPUSH
44107: CALL_OW 12
44111: PUSH
44112: LD_INT 0
44114: PPUSH
44115: LD_INT 3
44117: PPUSH
44118: CALL_OW 12
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 2
44139: RET
// export function PrepareTiger ( agressivity ) ; begin
44140: LD_INT 0
44142: PPUSH
// uc_side := 0 ;
44143: LD_ADDR_OWVAR 20
44147: PUSH
44148: LD_INT 0
44150: ST_TO_ADDR
// uc_nation := 0 ;
44151: LD_ADDR_OWVAR 21
44155: PUSH
44156: LD_INT 0
44158: ST_TO_ADDR
// hc_class := class_tiger ;
44159: LD_ADDR_OWVAR 28
44163: PUSH
44164: LD_INT 14
44166: ST_TO_ADDR
// hc_gallery :=  ;
44167: LD_ADDR_OWVAR 33
44171: PUSH
44172: LD_STRING 
44174: ST_TO_ADDR
// hc_name :=  ;
44175: LD_ADDR_OWVAR 26
44179: PUSH
44180: LD_STRING 
44182: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44183: LD_ADDR_OWVAR 35
44187: PUSH
44188: LD_VAR 0 1
44192: NEG
44193: PPUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 12
44203: ST_TO_ADDR
// end ;
44204: LD_VAR 0 2
44208: RET
// export function PrepareEnchidna ( ) ; begin
44209: LD_INT 0
44211: PPUSH
// uc_side := 0 ;
44212: LD_ADDR_OWVAR 20
44216: PUSH
44217: LD_INT 0
44219: ST_TO_ADDR
// uc_nation := 0 ;
44220: LD_ADDR_OWVAR 21
44224: PUSH
44225: LD_INT 0
44227: ST_TO_ADDR
// hc_class := class_baggie ;
44228: LD_ADDR_OWVAR 28
44232: PUSH
44233: LD_INT 13
44235: ST_TO_ADDR
// hc_gallery :=  ;
44236: LD_ADDR_OWVAR 33
44240: PUSH
44241: LD_STRING 
44243: ST_TO_ADDR
// hc_name :=  ;
44244: LD_ADDR_OWVAR 26
44248: PUSH
44249: LD_STRING 
44251: ST_TO_ADDR
// end ;
44252: LD_VAR 0 1
44256: RET
// export function PrepareFrog ( ) ; begin
44257: LD_INT 0
44259: PPUSH
// uc_side := 0 ;
44260: LD_ADDR_OWVAR 20
44264: PUSH
44265: LD_INT 0
44267: ST_TO_ADDR
// uc_nation := 0 ;
44268: LD_ADDR_OWVAR 21
44272: PUSH
44273: LD_INT 0
44275: ST_TO_ADDR
// hc_class := class_frog ;
44276: LD_ADDR_OWVAR 28
44280: PUSH
44281: LD_INT 19
44283: ST_TO_ADDR
// hc_gallery :=  ;
44284: LD_ADDR_OWVAR 33
44288: PUSH
44289: LD_STRING 
44291: ST_TO_ADDR
// hc_name :=  ;
44292: LD_ADDR_OWVAR 26
44296: PUSH
44297: LD_STRING 
44299: ST_TO_ADDR
// end ;
44300: LD_VAR 0 1
44304: RET
// export function PrepareFish ( ) ; begin
44305: LD_INT 0
44307: PPUSH
// uc_side := 0 ;
44308: LD_ADDR_OWVAR 20
44312: PUSH
44313: LD_INT 0
44315: ST_TO_ADDR
// uc_nation := 0 ;
44316: LD_ADDR_OWVAR 21
44320: PUSH
44321: LD_INT 0
44323: ST_TO_ADDR
// hc_class := class_fish ;
44324: LD_ADDR_OWVAR 28
44328: PUSH
44329: LD_INT 20
44331: ST_TO_ADDR
// hc_gallery :=  ;
44332: LD_ADDR_OWVAR 33
44336: PUSH
44337: LD_STRING 
44339: ST_TO_ADDR
// hc_name :=  ;
44340: LD_ADDR_OWVAR 26
44344: PUSH
44345: LD_STRING 
44347: ST_TO_ADDR
// end ;
44348: LD_VAR 0 1
44352: RET
// export function PrepareBird ( ) ; begin
44353: LD_INT 0
44355: PPUSH
// uc_side := 0 ;
44356: LD_ADDR_OWVAR 20
44360: PUSH
44361: LD_INT 0
44363: ST_TO_ADDR
// uc_nation := 0 ;
44364: LD_ADDR_OWVAR 21
44368: PUSH
44369: LD_INT 0
44371: ST_TO_ADDR
// hc_class := class_phororhacos ;
44372: LD_ADDR_OWVAR 28
44376: PUSH
44377: LD_INT 18
44379: ST_TO_ADDR
// hc_gallery :=  ;
44380: LD_ADDR_OWVAR 33
44384: PUSH
44385: LD_STRING 
44387: ST_TO_ADDR
// hc_name :=  ;
44388: LD_ADDR_OWVAR 26
44392: PUSH
44393: LD_STRING 
44395: ST_TO_ADDR
// end ;
44396: LD_VAR 0 1
44400: RET
// export function PrepareHorse ( ) ; begin
44401: LD_INT 0
44403: PPUSH
// uc_side := 0 ;
44404: LD_ADDR_OWVAR 20
44408: PUSH
44409: LD_INT 0
44411: ST_TO_ADDR
// uc_nation := 0 ;
44412: LD_ADDR_OWVAR 21
44416: PUSH
44417: LD_INT 0
44419: ST_TO_ADDR
// hc_class := class_horse ;
44420: LD_ADDR_OWVAR 28
44424: PUSH
44425: LD_INT 21
44427: ST_TO_ADDR
// hc_gallery :=  ;
44428: LD_ADDR_OWVAR 33
44432: PUSH
44433: LD_STRING 
44435: ST_TO_ADDR
// hc_name :=  ;
44436: LD_ADDR_OWVAR 26
44440: PUSH
44441: LD_STRING 
44443: ST_TO_ADDR
// end ;
44444: LD_VAR 0 1
44448: RET
// export function PrepareMastodont ( ) ; begin
44449: LD_INT 0
44451: PPUSH
// uc_side := 0 ;
44452: LD_ADDR_OWVAR 20
44456: PUSH
44457: LD_INT 0
44459: ST_TO_ADDR
// uc_nation := 0 ;
44460: LD_ADDR_OWVAR 21
44464: PUSH
44465: LD_INT 0
44467: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44468: LD_ADDR_OWVAR 37
44472: PUSH
44473: LD_INT 31
44475: ST_TO_ADDR
// vc_control := control_rider ;
44476: LD_ADDR_OWVAR 38
44480: PUSH
44481: LD_INT 4
44483: ST_TO_ADDR
// end ;
44484: LD_VAR 0 1
44488: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44489: LD_INT 0
44491: PPUSH
44492: PPUSH
44493: PPUSH
// uc_side = 0 ;
44494: LD_ADDR_OWVAR 20
44498: PUSH
44499: LD_INT 0
44501: ST_TO_ADDR
// uc_nation = 0 ;
44502: LD_ADDR_OWVAR 21
44506: PUSH
44507: LD_INT 0
44509: ST_TO_ADDR
// InitHc_All ( ) ;
44510: CALL_OW 584
// InitVc ;
44514: CALL_OW 20
// if mastodonts then
44518: LD_VAR 0 6
44522: IFFALSE 44589
// for i = 1 to mastodonts do
44524: LD_ADDR_VAR 0 11
44528: PUSH
44529: DOUBLE
44530: LD_INT 1
44532: DEC
44533: ST_TO_ADDR
44534: LD_VAR 0 6
44538: PUSH
44539: FOR_TO
44540: IFFALSE 44587
// begin vc_chassis := 31 ;
44542: LD_ADDR_OWVAR 37
44546: PUSH
44547: LD_INT 31
44549: ST_TO_ADDR
// vc_control := control_rider ;
44550: LD_ADDR_OWVAR 38
44554: PUSH
44555: LD_INT 4
44557: ST_TO_ADDR
// animal := CreateVehicle ;
44558: LD_ADDR_VAR 0 12
44562: PUSH
44563: CALL_OW 45
44567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44568: LD_VAR 0 12
44572: PPUSH
44573: LD_VAR 0 8
44577: PPUSH
44578: LD_INT 0
44580: PPUSH
44581: CALL 46717 0 3
// end ;
44585: GO 44539
44587: POP
44588: POP
// if horses then
44589: LD_VAR 0 5
44593: IFFALSE 44660
// for i = 1 to horses do
44595: LD_ADDR_VAR 0 11
44599: PUSH
44600: DOUBLE
44601: LD_INT 1
44603: DEC
44604: ST_TO_ADDR
44605: LD_VAR 0 5
44609: PUSH
44610: FOR_TO
44611: IFFALSE 44658
// begin hc_class := 21 ;
44613: LD_ADDR_OWVAR 28
44617: PUSH
44618: LD_INT 21
44620: ST_TO_ADDR
// hc_gallery :=  ;
44621: LD_ADDR_OWVAR 33
44625: PUSH
44626: LD_STRING 
44628: ST_TO_ADDR
// animal := CreateHuman ;
44629: LD_ADDR_VAR 0 12
44633: PUSH
44634: CALL_OW 44
44638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44639: LD_VAR 0 12
44643: PPUSH
44644: LD_VAR 0 8
44648: PPUSH
44649: LD_INT 0
44651: PPUSH
44652: CALL 46717 0 3
// end ;
44656: GO 44610
44658: POP
44659: POP
// if birds then
44660: LD_VAR 0 1
44664: IFFALSE 44731
// for i = 1 to birds do
44666: LD_ADDR_VAR 0 11
44670: PUSH
44671: DOUBLE
44672: LD_INT 1
44674: DEC
44675: ST_TO_ADDR
44676: LD_VAR 0 1
44680: PUSH
44681: FOR_TO
44682: IFFALSE 44729
// begin hc_class := 18 ;
44684: LD_ADDR_OWVAR 28
44688: PUSH
44689: LD_INT 18
44691: ST_TO_ADDR
// hc_gallery =  ;
44692: LD_ADDR_OWVAR 33
44696: PUSH
44697: LD_STRING 
44699: ST_TO_ADDR
// animal := CreateHuman ;
44700: LD_ADDR_VAR 0 12
44704: PUSH
44705: CALL_OW 44
44709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44710: LD_VAR 0 12
44714: PPUSH
44715: LD_VAR 0 8
44719: PPUSH
44720: LD_INT 0
44722: PPUSH
44723: CALL 46717 0 3
// end ;
44727: GO 44681
44729: POP
44730: POP
// if tigers then
44731: LD_VAR 0 2
44735: IFFALSE 44819
// for i = 1 to tigers do
44737: LD_ADDR_VAR 0 11
44741: PUSH
44742: DOUBLE
44743: LD_INT 1
44745: DEC
44746: ST_TO_ADDR
44747: LD_VAR 0 2
44751: PUSH
44752: FOR_TO
44753: IFFALSE 44817
// begin hc_class = class_tiger ;
44755: LD_ADDR_OWVAR 28
44759: PUSH
44760: LD_INT 14
44762: ST_TO_ADDR
// hc_gallery =  ;
44763: LD_ADDR_OWVAR 33
44767: PUSH
44768: LD_STRING 
44770: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44771: LD_ADDR_OWVAR 35
44775: PUSH
44776: LD_INT 7
44778: NEG
44779: PPUSH
44780: LD_INT 7
44782: PPUSH
44783: CALL_OW 12
44787: ST_TO_ADDR
// animal := CreateHuman ;
44788: LD_ADDR_VAR 0 12
44792: PUSH
44793: CALL_OW 44
44797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44798: LD_VAR 0 12
44802: PPUSH
44803: LD_VAR 0 8
44807: PPUSH
44808: LD_INT 0
44810: PPUSH
44811: CALL 46717 0 3
// end ;
44815: GO 44752
44817: POP
44818: POP
// if apemans then
44819: LD_VAR 0 3
44823: IFFALSE 44946
// for i = 1 to apemans do
44825: LD_ADDR_VAR 0 11
44829: PUSH
44830: DOUBLE
44831: LD_INT 1
44833: DEC
44834: ST_TO_ADDR
44835: LD_VAR 0 3
44839: PUSH
44840: FOR_TO
44841: IFFALSE 44944
// begin hc_class = class_apeman ;
44843: LD_ADDR_OWVAR 28
44847: PUSH
44848: LD_INT 12
44850: ST_TO_ADDR
// hc_gallery =  ;
44851: LD_ADDR_OWVAR 33
44855: PUSH
44856: LD_STRING 
44858: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44859: LD_ADDR_OWVAR 35
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PPUSH
44868: LD_INT 2
44870: PPUSH
44871: CALL_OW 12
44875: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44876: LD_ADDR_OWVAR 31
44880: PUSH
44881: LD_INT 1
44883: PPUSH
44884: LD_INT 3
44886: PPUSH
44887: CALL_OW 12
44891: PUSH
44892: LD_INT 1
44894: PPUSH
44895: LD_INT 3
44897: PPUSH
44898: CALL_OW 12
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// animal := CreateHuman ;
44915: LD_ADDR_VAR 0 12
44919: PUSH
44920: CALL_OW 44
44924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44925: LD_VAR 0 12
44929: PPUSH
44930: LD_VAR 0 8
44934: PPUSH
44935: LD_INT 0
44937: PPUSH
44938: CALL 46717 0 3
// end ;
44942: GO 44840
44944: POP
44945: POP
// if enchidnas then
44946: LD_VAR 0 4
44950: IFFALSE 45017
// for i = 1 to enchidnas do
44952: LD_ADDR_VAR 0 11
44956: PUSH
44957: DOUBLE
44958: LD_INT 1
44960: DEC
44961: ST_TO_ADDR
44962: LD_VAR 0 4
44966: PUSH
44967: FOR_TO
44968: IFFALSE 45015
// begin hc_class = 13 ;
44970: LD_ADDR_OWVAR 28
44974: PUSH
44975: LD_INT 13
44977: ST_TO_ADDR
// hc_gallery =  ;
44978: LD_ADDR_OWVAR 33
44982: PUSH
44983: LD_STRING 
44985: ST_TO_ADDR
// animal := CreateHuman ;
44986: LD_ADDR_VAR 0 12
44990: PUSH
44991: CALL_OW 44
44995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44996: LD_VAR 0 12
45000: PPUSH
45001: LD_VAR 0 8
45005: PPUSH
45006: LD_INT 0
45008: PPUSH
45009: CALL 46717 0 3
// end ;
45013: GO 44967
45015: POP
45016: POP
// if fishes then
45017: LD_VAR 0 7
45021: IFFALSE 45088
// for i = 1 to fishes do
45023: LD_ADDR_VAR 0 11
45027: PUSH
45028: DOUBLE
45029: LD_INT 1
45031: DEC
45032: ST_TO_ADDR
45033: LD_VAR 0 7
45037: PUSH
45038: FOR_TO
45039: IFFALSE 45086
// begin hc_class = 20 ;
45041: LD_ADDR_OWVAR 28
45045: PUSH
45046: LD_INT 20
45048: ST_TO_ADDR
// hc_gallery =  ;
45049: LD_ADDR_OWVAR 33
45053: PUSH
45054: LD_STRING 
45056: ST_TO_ADDR
// animal := CreateHuman ;
45057: LD_ADDR_VAR 0 12
45061: PUSH
45062: CALL_OW 44
45066: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45067: LD_VAR 0 12
45071: PPUSH
45072: LD_VAR 0 9
45076: PPUSH
45077: LD_INT 0
45079: PPUSH
45080: CALL 46717 0 3
// end ;
45084: GO 45038
45086: POP
45087: POP
// end ;
45088: LD_VAR 0 10
45092: RET
// export function WantHeal ( sci , unit ) ; begin
45093: LD_INT 0
45095: PPUSH
// if GetTaskList ( sci ) > 0 then
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 437
45105: PUSH
45106: LD_INT 0
45108: GREATER
45109: IFFALSE 45179
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45111: LD_VAR 0 1
45115: PPUSH
45116: CALL_OW 437
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PUSH
45125: LD_INT 1
45127: ARRAY
45128: PUSH
45129: LD_STRING l
45131: EQUAL
45132: PUSH
45133: LD_VAR 0 1
45137: PPUSH
45138: CALL_OW 437
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: PUSH
45147: LD_INT 4
45149: ARRAY
45150: PUSH
45151: LD_VAR 0 2
45155: EQUAL
45156: AND
45157: IFFALSE 45169
// result := true else
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_INT 1
45166: ST_TO_ADDR
45167: GO 45177
// result := false ;
45169: LD_ADDR_VAR 0 3
45173: PUSH
45174: LD_INT 0
45176: ST_TO_ADDR
// end else
45177: GO 45187
// result := false ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_INT 0
45186: ST_TO_ADDR
// end ;
45187: LD_VAR 0 3
45191: RET
// export function HealTarget ( sci ) ; begin
45192: LD_INT 0
45194: PPUSH
// if not sci then
45195: LD_VAR 0 1
45199: NOT
45200: IFFALSE 45204
// exit ;
45202: GO 45269
// result := 0 ;
45204: LD_ADDR_VAR 0 2
45208: PUSH
45209: LD_INT 0
45211: ST_TO_ADDR
// if GetTaskList ( sci ) then
45212: LD_VAR 0 1
45216: PPUSH
45217: CALL_OW 437
45221: IFFALSE 45269
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45223: LD_VAR 0 1
45227: PPUSH
45228: CALL_OW 437
45232: PUSH
45233: LD_INT 1
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PUSH
45241: LD_STRING l
45243: EQUAL
45244: IFFALSE 45269
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45246: LD_ADDR_VAR 0 2
45250: PUSH
45251: LD_VAR 0 1
45255: PPUSH
45256: CALL_OW 437
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PUSH
45265: LD_INT 4
45267: ARRAY
45268: ST_TO_ADDR
// end ;
45269: LD_VAR 0 2
45273: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45274: LD_INT 0
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
// if not base_units then
45280: LD_VAR 0 1
45284: NOT
45285: IFFALSE 45289
// exit ;
45287: GO 45376
// result := false ;
45289: LD_ADDR_VAR 0 2
45293: PUSH
45294: LD_INT 0
45296: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45297: LD_ADDR_VAR 0 5
45301: PUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: LD_INT 21
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 72
45321: ST_TO_ADDR
// if not tmp then
45322: LD_VAR 0 5
45326: NOT
45327: IFFALSE 45331
// exit ;
45329: GO 45376
// for i in tmp do
45331: LD_ADDR_VAR 0 3
45335: PUSH
45336: LD_VAR 0 5
45340: PUSH
45341: FOR_IN
45342: IFFALSE 45374
// begin result := EnemyInRange ( i , 22 ) ;
45344: LD_ADDR_VAR 0 2
45348: PUSH
45349: LD_VAR 0 3
45353: PPUSH
45354: LD_INT 22
45356: PPUSH
45357: CALL 42882 0 2
45361: ST_TO_ADDR
// if result then
45362: LD_VAR 0 2
45366: IFFALSE 45372
// exit ;
45368: POP
45369: POP
45370: GO 45376
// end ;
45372: GO 45341
45374: POP
45375: POP
// end ;
45376: LD_VAR 0 2
45380: RET
// export function FilterByTag ( units , tag ) ; begin
45381: LD_INT 0
45383: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45384: LD_ADDR_VAR 0 3
45388: PUSH
45389: LD_VAR 0 1
45393: PPUSH
45394: LD_INT 120
45396: PUSH
45397: LD_VAR 0 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PPUSH
45406: CALL_OW 72
45410: ST_TO_ADDR
// end ;
45411: LD_VAR 0 3
45415: RET
// export function IsDriver ( un ) ; begin
45416: LD_INT 0
45418: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45419: LD_ADDR_VAR 0 2
45423: PUSH
45424: LD_VAR 0 1
45428: PUSH
45429: LD_INT 55
45431: PUSH
45432: EMPTY
45433: LIST
45434: PPUSH
45435: CALL_OW 69
45439: IN
45440: ST_TO_ADDR
// end ;
45441: LD_VAR 0 2
45445: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45446: LD_INT 0
45448: PPUSH
45449: PPUSH
// list := [ ] ;
45450: LD_ADDR_VAR 0 5
45454: PUSH
45455: EMPTY
45456: ST_TO_ADDR
// case d of 0 :
45457: LD_VAR 0 3
45461: PUSH
45462: LD_INT 0
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45603
45470: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45471: LD_ADDR_VAR 0 5
45475: PUSH
45476: LD_VAR 0 1
45480: PUSH
45481: LD_INT 4
45483: MINUS
45484: PUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_INT 4
45492: MINUS
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: PUSH
45502: LD_VAR 0 1
45506: PUSH
45507: LD_INT 3
45509: MINUS
45510: PUSH
45511: LD_VAR 0 2
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: PUSH
45524: LD_VAR 0 1
45528: PUSH
45529: LD_INT 4
45531: PLUS
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_INT 4
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: PUSH
45546: LD_VAR 0 1
45550: PUSH
45551: LD_INT 3
45553: PLUS
45554: PUSH
45555: LD_VAR 0 2
45559: PUSH
45560: LD_INT 3
45562: PLUS
45563: PUSH
45564: LD_INT 5
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: PUSH
45572: LD_VAR 0 1
45576: PUSH
45577: LD_VAR 0 2
45581: PUSH
45582: LD_INT 4
45584: PLUS
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// end ; 1 :
45601: GO 46301
45603: LD_INT 1
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 45744
45611: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45612: LD_ADDR_VAR 0 5
45616: PUSH
45617: LD_VAR 0 1
45621: PUSH
45622: LD_VAR 0 2
45626: PUSH
45627: LD_INT 4
45629: MINUS
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: PUSH
45639: LD_VAR 0 1
45643: PUSH
45644: LD_INT 3
45646: MINUS
45647: PUSH
45648: LD_VAR 0 2
45652: PUSH
45653: LD_INT 3
45655: MINUS
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: PUSH
45665: LD_VAR 0 1
45669: PUSH
45670: LD_INT 4
45672: MINUS
45673: PUSH
45674: LD_VAR 0 2
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: PUSH
45687: LD_VAR 0 1
45691: PUSH
45692: LD_VAR 0 2
45696: PUSH
45697: LD_INT 3
45699: PLUS
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: PUSH
45709: LD_VAR 0 1
45713: PUSH
45714: LD_INT 4
45716: PLUS
45717: PUSH
45718: LD_VAR 0 2
45722: PUSH
45723: LD_INT 4
45725: PLUS
45726: PUSH
45727: LD_INT 5
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
// end ; 2 :
45742: GO 46301
45744: LD_INT 2
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45752
45750: GO 45881
45752: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45753: LD_ADDR_VAR 0 5
45757: PUSH
45758: LD_VAR 0 1
45762: PUSH
45763: LD_VAR 0 2
45767: PUSH
45768: LD_INT 3
45770: MINUS
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PUSH
45780: LD_VAR 0 1
45784: PUSH
45785: LD_INT 4
45787: PLUS
45788: PUSH
45789: LD_VAR 0 2
45793: PUSH
45794: LD_INT 4
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: PUSH
45802: LD_VAR 0 1
45806: PUSH
45807: LD_VAR 0 2
45811: PUSH
45812: LD_INT 4
45814: PLUS
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: PUSH
45824: LD_VAR 0 1
45828: PUSH
45829: LD_INT 3
45831: MINUS
45832: PUSH
45833: LD_VAR 0 2
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: LD_INT 4
45853: MINUS
45854: PUSH
45855: LD_VAR 0 2
45859: PUSH
45860: LD_INT 4
45862: MINUS
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// end ; 3 :
45879: GO 46301
45881: LD_INT 3
45883: DOUBLE
45884: EQUAL
45885: IFTRUE 45889
45887: GO 46022
45889: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45890: LD_ADDR_VAR 0 5
45894: PUSH
45895: LD_VAR 0 1
45899: PUSH
45900: LD_INT 3
45902: PLUS
45903: PUSH
45904: LD_VAR 0 2
45908: PUSH
45909: LD_INT 4
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: PUSH
45917: LD_VAR 0 1
45921: PUSH
45922: LD_INT 4
45924: PLUS
45925: PUSH
45926: LD_VAR 0 2
45930: PUSH
45931: LD_INT 4
45933: PLUS
45934: PUSH
45935: LD_INT 5
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: PUSH
45943: LD_VAR 0 1
45947: PUSH
45948: LD_INT 4
45950: MINUS
45951: PUSH
45952: LD_VAR 0 2
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: PUSH
45965: LD_VAR 0 1
45969: PUSH
45970: LD_VAR 0 2
45974: PUSH
45975: LD_INT 4
45977: MINUS
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: PUSH
45987: LD_VAR 0 1
45991: PUSH
45992: LD_INT 3
45994: MINUS
45995: PUSH
45996: LD_VAR 0 2
46000: PUSH
46001: LD_INT 3
46003: MINUS
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// end ; 4 :
46020: GO 46301
46022: LD_INT 4
46024: DOUBLE
46025: EQUAL
46026: IFTRUE 46030
46028: GO 46163
46030: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46031: LD_ADDR_VAR 0 5
46035: PUSH
46036: LD_VAR 0 1
46040: PUSH
46041: LD_VAR 0 2
46045: PUSH
46046: LD_INT 4
46048: PLUS
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: PUSH
46058: LD_VAR 0 1
46062: PUSH
46063: LD_INT 3
46065: PLUS
46066: PUSH
46067: LD_VAR 0 2
46071: PUSH
46072: LD_INT 3
46074: PLUS
46075: PUSH
46076: LD_INT 5
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: PUSH
46084: LD_VAR 0 1
46088: PUSH
46089: LD_INT 4
46091: PLUS
46092: PUSH
46093: LD_VAR 0 2
46097: PUSH
46098: LD_INT 4
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: PUSH
46106: LD_VAR 0 1
46110: PUSH
46111: LD_VAR 0 2
46115: PUSH
46116: LD_INT 3
46118: MINUS
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: PUSH
46128: LD_VAR 0 1
46132: PUSH
46133: LD_INT 4
46135: MINUS
46136: PUSH
46137: LD_VAR 0 2
46141: PUSH
46142: LD_INT 4
46144: MINUS
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// end ; 5 :
46161: GO 46301
46163: LD_INT 5
46165: DOUBLE
46166: EQUAL
46167: IFTRUE 46171
46169: GO 46300
46171: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46172: LD_ADDR_VAR 0 5
46176: PUSH
46177: LD_VAR 0 1
46181: PUSH
46182: LD_INT 4
46184: MINUS
46185: PUSH
46186: LD_VAR 0 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: PUSH
46199: LD_VAR 0 1
46203: PUSH
46204: LD_VAR 0 2
46208: PUSH
46209: LD_INT 4
46211: MINUS
46212: PUSH
46213: LD_INT 3
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: PUSH
46221: LD_VAR 0 1
46225: PUSH
46226: LD_INT 4
46228: PLUS
46229: PUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_INT 4
46237: PLUS
46238: PUSH
46239: LD_INT 5
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: PUSH
46247: LD_VAR 0 1
46251: PUSH
46252: LD_INT 3
46254: PLUS
46255: PUSH
46256: LD_VAR 0 2
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: PUSH
46269: LD_VAR 0 1
46273: PUSH
46274: LD_VAR 0 2
46278: PUSH
46279: LD_INT 3
46281: PLUS
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// end ; end ;
46298: GO 46301
46300: POP
// result := list ;
46301: LD_ADDR_VAR 0 4
46305: PUSH
46306: LD_VAR 0 5
46310: ST_TO_ADDR
// end ;
46311: LD_VAR 0 4
46315: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46316: LD_INT 0
46318: PPUSH
46319: PPUSH
46320: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46321: LD_VAR 0 1
46325: NOT
46326: PUSH
46327: LD_VAR 0 2
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: IN
46350: NOT
46351: OR
46352: IFFALSE 46356
// exit ;
46354: GO 46439
// tmp := [ ] ;
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: EMPTY
46362: ST_TO_ADDR
// for i in units do
46363: LD_ADDR_VAR 0 4
46367: PUSH
46368: LD_VAR 0 1
46372: PUSH
46373: FOR_IN
46374: IFFALSE 46408
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46376: LD_ADDR_VAR 0 5
46380: PUSH
46381: LD_VAR 0 5
46385: PPUSH
46386: LD_VAR 0 4
46390: PPUSH
46391: LD_VAR 0 2
46395: PPUSH
46396: CALL_OW 259
46400: PPUSH
46401: CALL 47812 0 2
46405: ST_TO_ADDR
46406: GO 46373
46408: POP
46409: POP
// if not tmp then
46410: LD_VAR 0 5
46414: NOT
46415: IFFALSE 46419
// exit ;
46417: GO 46439
// result := SortListByListDesc ( units , tmp ) ;
46419: LD_ADDR_VAR 0 3
46423: PUSH
46424: LD_VAR 0 1
46428: PPUSH
46429: LD_VAR 0 5
46433: PPUSH
46434: CALL_OW 77
46438: ST_TO_ADDR
// end ;
46439: LD_VAR 0 3
46443: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46444: LD_INT 0
46446: PPUSH
46447: PPUSH
46448: PPUSH
// result := false ;
46449: LD_ADDR_VAR 0 3
46453: PUSH
46454: LD_INT 0
46456: ST_TO_ADDR
// if not building then
46457: LD_VAR 0 2
46461: NOT
46462: IFFALSE 46466
// exit ;
46464: GO 46604
// x := GetX ( building ) ;
46466: LD_ADDR_VAR 0 4
46470: PUSH
46471: LD_VAR 0 2
46475: PPUSH
46476: CALL_OW 250
46480: ST_TO_ADDR
// y := GetY ( building ) ;
46481: LD_ADDR_VAR 0 5
46485: PUSH
46486: LD_VAR 0 2
46490: PPUSH
46491: CALL_OW 251
46495: ST_TO_ADDR
// if not x or not y then
46496: LD_VAR 0 4
46500: NOT
46501: PUSH
46502: LD_VAR 0 5
46506: NOT
46507: OR
46508: IFFALSE 46512
// exit ;
46510: GO 46604
// if GetTaskList ( unit ) then
46512: LD_VAR 0 1
46516: PPUSH
46517: CALL_OW 437
46521: IFFALSE 46604
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46523: LD_STRING e
46525: PUSH
46526: LD_VAR 0 1
46530: PPUSH
46531: CALL_OW 437
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: PUSH
46540: LD_INT 1
46542: ARRAY
46543: EQUAL
46544: PUSH
46545: LD_VAR 0 4
46549: PUSH
46550: LD_VAR 0 1
46554: PPUSH
46555: CALL_OW 437
46559: PUSH
46560: LD_INT 1
46562: ARRAY
46563: PUSH
46564: LD_INT 2
46566: ARRAY
46567: EQUAL
46568: AND
46569: PUSH
46570: LD_VAR 0 5
46574: PUSH
46575: LD_VAR 0 1
46579: PPUSH
46580: CALL_OW 437
46584: PUSH
46585: LD_INT 1
46587: ARRAY
46588: PUSH
46589: LD_INT 3
46591: ARRAY
46592: EQUAL
46593: AND
46594: IFFALSE 46604
// result := true end ;
46596: LD_ADDR_VAR 0 3
46600: PUSH
46601: LD_INT 1
46603: ST_TO_ADDR
// end ;
46604: LD_VAR 0 3
46608: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46609: LD_INT 0
46611: PPUSH
// result := false ;
46612: LD_ADDR_VAR 0 4
46616: PUSH
46617: LD_INT 0
46619: ST_TO_ADDR
// if GetTaskList ( unit ) then
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 437
46629: IFFALSE 46712
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46631: LD_STRING M
46633: PUSH
46634: LD_VAR 0 1
46638: PPUSH
46639: CALL_OW 437
46643: PUSH
46644: LD_INT 1
46646: ARRAY
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: EQUAL
46652: PUSH
46653: LD_VAR 0 2
46657: PUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: CALL_OW 437
46667: PUSH
46668: LD_INT 1
46670: ARRAY
46671: PUSH
46672: LD_INT 2
46674: ARRAY
46675: EQUAL
46676: AND
46677: PUSH
46678: LD_VAR 0 3
46682: PUSH
46683: LD_VAR 0 1
46687: PPUSH
46688: CALL_OW 437
46692: PUSH
46693: LD_INT 1
46695: ARRAY
46696: PUSH
46697: LD_INT 3
46699: ARRAY
46700: EQUAL
46701: AND
46702: IFFALSE 46712
// result := true ;
46704: LD_ADDR_VAR 0 4
46708: PUSH
46709: LD_INT 1
46711: ST_TO_ADDR
// end ; end ;
46712: LD_VAR 0 4
46716: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46717: LD_INT 0
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
// if not unit or not area then
46723: LD_VAR 0 1
46727: NOT
46728: PUSH
46729: LD_VAR 0 2
46733: NOT
46734: OR
46735: IFFALSE 46739
// exit ;
46737: GO 46915
// tmp := AreaToList ( area , i ) ;
46739: LD_ADDR_VAR 0 6
46743: PUSH
46744: LD_VAR 0 2
46748: PPUSH
46749: LD_VAR 0 5
46753: PPUSH
46754: CALL_OW 517
46758: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46759: LD_ADDR_VAR 0 5
46763: PUSH
46764: DOUBLE
46765: LD_INT 1
46767: DEC
46768: ST_TO_ADDR
46769: LD_VAR 0 6
46773: PUSH
46774: LD_INT 1
46776: ARRAY
46777: PUSH
46778: FOR_TO
46779: IFFALSE 46913
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46781: LD_ADDR_VAR 0 7
46785: PUSH
46786: LD_VAR 0 6
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: PUSH
46795: LD_VAR 0 5
46799: ARRAY
46800: PUSH
46801: LD_VAR 0 6
46805: PUSH
46806: LD_INT 2
46808: ARRAY
46809: PUSH
46810: LD_VAR 0 5
46814: ARRAY
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46820: LD_INT 92
46822: PUSH
46823: LD_VAR 0 7
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: PUSH
46832: LD_VAR 0 7
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: PPUSH
46850: CALL_OW 69
46854: PUSH
46855: LD_INT 0
46857: EQUAL
46858: IFFALSE 46911
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46860: LD_VAR 0 1
46864: PPUSH
46865: LD_VAR 0 7
46869: PUSH
46870: LD_INT 1
46872: ARRAY
46873: PPUSH
46874: LD_VAR 0 7
46878: PUSH
46879: LD_INT 2
46881: ARRAY
46882: PPUSH
46883: LD_VAR 0 3
46887: PPUSH
46888: CALL_OW 48
// result := IsPlaced ( unit ) ;
46892: LD_ADDR_VAR 0 4
46896: PUSH
46897: LD_VAR 0 1
46901: PPUSH
46902: CALL_OW 305
46906: ST_TO_ADDR
// exit ;
46907: POP
46908: POP
46909: GO 46915
// end ; end ;
46911: GO 46778
46913: POP
46914: POP
// end ;
46915: LD_VAR 0 4
46919: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46920: LD_INT 0
46922: PPUSH
46923: PPUSH
46924: PPUSH
// if not side or side > 8 then
46925: LD_VAR 0 1
46929: NOT
46930: PUSH
46931: LD_VAR 0 1
46935: PUSH
46936: LD_INT 8
46938: GREATER
46939: OR
46940: IFFALSE 46944
// exit ;
46942: GO 47131
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46944: LD_ADDR_VAR 0 4
46948: PUSH
46949: LD_INT 22
46951: PUSH
46952: LD_VAR 0 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 21
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PPUSH
46975: CALL_OW 69
46979: ST_TO_ADDR
// if not tmp then
46980: LD_VAR 0 4
46984: NOT
46985: IFFALSE 46989
// exit ;
46987: GO 47131
// enable_addtolog := true ;
46989: LD_ADDR_OWVAR 81
46993: PUSH
46994: LD_INT 1
46996: ST_TO_ADDR
// AddToLog ( [ ) ;
46997: LD_STRING [
46999: PPUSH
47000: CALL_OW 561
// for i in tmp do
47004: LD_ADDR_VAR 0 3
47008: PUSH
47009: LD_VAR 0 4
47013: PUSH
47014: FOR_IN
47015: IFFALSE 47122
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47017: LD_STRING [
47019: PUSH
47020: LD_VAR 0 3
47024: PPUSH
47025: CALL_OW 266
47029: STR
47030: PUSH
47031: LD_STRING , 
47033: STR
47034: PUSH
47035: LD_VAR 0 3
47039: PPUSH
47040: CALL_OW 250
47044: STR
47045: PUSH
47046: LD_STRING , 
47048: STR
47049: PUSH
47050: LD_VAR 0 3
47054: PPUSH
47055: CALL_OW 251
47059: STR
47060: PUSH
47061: LD_STRING , 
47063: STR
47064: PUSH
47065: LD_VAR 0 3
47069: PPUSH
47070: CALL_OW 254
47074: STR
47075: PUSH
47076: LD_STRING , 
47078: STR
47079: PUSH
47080: LD_VAR 0 3
47084: PPUSH
47085: LD_INT 1
47087: PPUSH
47088: CALL_OW 268
47092: STR
47093: PUSH
47094: LD_STRING , 
47096: STR
47097: PUSH
47098: LD_VAR 0 3
47102: PPUSH
47103: LD_INT 2
47105: PPUSH
47106: CALL_OW 268
47110: STR
47111: PUSH
47112: LD_STRING ],
47114: STR
47115: PPUSH
47116: CALL_OW 561
// end ;
47120: GO 47014
47122: POP
47123: POP
// AddToLog ( ]; ) ;
47124: LD_STRING ];
47126: PPUSH
47127: CALL_OW 561
// end ;
47131: LD_VAR 0 2
47135: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47136: LD_INT 0
47138: PPUSH
47139: PPUSH
47140: PPUSH
47141: PPUSH
47142: PPUSH
// if not area or not rate or not max then
47143: LD_VAR 0 1
47147: NOT
47148: PUSH
47149: LD_VAR 0 2
47153: NOT
47154: OR
47155: PUSH
47156: LD_VAR 0 4
47160: NOT
47161: OR
47162: IFFALSE 47166
// exit ;
47164: GO 47355
// while 1 do
47166: LD_INT 1
47168: IFFALSE 47355
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47170: LD_ADDR_VAR 0 9
47174: PUSH
47175: LD_VAR 0 1
47179: PPUSH
47180: LD_INT 1
47182: PPUSH
47183: CALL_OW 287
47187: PUSH
47188: LD_INT 10
47190: MUL
47191: ST_TO_ADDR
// r := rate / 10 ;
47192: LD_ADDR_VAR 0 7
47196: PUSH
47197: LD_VAR 0 2
47201: PUSH
47202: LD_INT 10
47204: DIVREAL
47205: ST_TO_ADDR
// time := 1 1$00 ;
47206: LD_ADDR_VAR 0 8
47210: PUSH
47211: LD_INT 2100
47213: ST_TO_ADDR
// if amount < min then
47214: LD_VAR 0 9
47218: PUSH
47219: LD_VAR 0 3
47223: LESS
47224: IFFALSE 47242
// r := r * 2 else
47226: LD_ADDR_VAR 0 7
47230: PUSH
47231: LD_VAR 0 7
47235: PUSH
47236: LD_INT 2
47238: MUL
47239: ST_TO_ADDR
47240: GO 47268
// if amount > max then
47242: LD_VAR 0 9
47246: PUSH
47247: LD_VAR 0 4
47251: GREATER
47252: IFFALSE 47268
// r := r / 2 ;
47254: LD_ADDR_VAR 0 7
47258: PUSH
47259: LD_VAR 0 7
47263: PUSH
47264: LD_INT 2
47266: DIVREAL
47267: ST_TO_ADDR
// time := time / r ;
47268: LD_ADDR_VAR 0 8
47272: PUSH
47273: LD_VAR 0 8
47277: PUSH
47278: LD_VAR 0 7
47282: DIVREAL
47283: ST_TO_ADDR
// if time < 0 then
47284: LD_VAR 0 8
47288: PUSH
47289: LD_INT 0
47291: LESS
47292: IFFALSE 47309
// time := time * - 1 ;
47294: LD_ADDR_VAR 0 8
47298: PUSH
47299: LD_VAR 0 8
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: MUL
47308: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47309: LD_VAR 0 8
47313: PUSH
47314: LD_INT 35
47316: PPUSH
47317: LD_INT 875
47319: PPUSH
47320: CALL_OW 12
47324: PLUS
47325: PPUSH
47326: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47330: LD_INT 1
47332: PPUSH
47333: LD_INT 5
47335: PPUSH
47336: CALL_OW 12
47340: PPUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: LD_INT 1
47348: PPUSH
47349: CALL_OW 55
// end ;
47353: GO 47166
// end ;
47355: LD_VAR 0 5
47359: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
// if not turrets or not factories then
47370: LD_VAR 0 1
47374: NOT
47375: PUSH
47376: LD_VAR 0 2
47380: NOT
47381: OR
47382: IFFALSE 47386
// exit ;
47384: GO 47693
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47386: LD_ADDR_VAR 0 10
47390: PUSH
47391: LD_INT 5
47393: PUSH
47394: LD_INT 6
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 4
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: LD_INT 5
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 24
47428: PUSH
47429: LD_INT 25
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 23
47438: PUSH
47439: LD_INT 27
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 42
47452: PUSH
47453: LD_INT 43
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 44
47462: PUSH
47463: LD_INT 46
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 45
47472: PUSH
47473: LD_INT 47
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// result := [ ] ;
47490: LD_ADDR_VAR 0 3
47494: PUSH
47495: EMPTY
47496: ST_TO_ADDR
// for i in turrets do
47497: LD_ADDR_VAR 0 4
47501: PUSH
47502: LD_VAR 0 1
47506: PUSH
47507: FOR_IN
47508: IFFALSE 47691
// begin nat := GetNation ( i ) ;
47510: LD_ADDR_VAR 0 7
47514: PUSH
47515: LD_VAR 0 4
47519: PPUSH
47520: CALL_OW 248
47524: ST_TO_ADDR
// weapon := 0 ;
47525: LD_ADDR_VAR 0 8
47529: PUSH
47530: LD_INT 0
47532: ST_TO_ADDR
// if not nat then
47533: LD_VAR 0 7
47537: NOT
47538: IFFALSE 47542
// continue ;
47540: GO 47507
// for j in list [ nat ] do
47542: LD_ADDR_VAR 0 5
47546: PUSH
47547: LD_VAR 0 10
47551: PUSH
47552: LD_VAR 0 7
47556: ARRAY
47557: PUSH
47558: FOR_IN
47559: IFFALSE 47600
// if GetBWeapon ( i ) = j [ 1 ] then
47561: LD_VAR 0 4
47565: PPUSH
47566: CALL_OW 269
47570: PUSH
47571: LD_VAR 0 5
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: EQUAL
47580: IFFALSE 47598
// begin weapon := j [ 2 ] ;
47582: LD_ADDR_VAR 0 8
47586: PUSH
47587: LD_VAR 0 5
47591: PUSH
47592: LD_INT 2
47594: ARRAY
47595: ST_TO_ADDR
// break ;
47596: GO 47600
// end ;
47598: GO 47558
47600: POP
47601: POP
// if not weapon then
47602: LD_VAR 0 8
47606: NOT
47607: IFFALSE 47611
// continue ;
47609: GO 47507
// for k in factories do
47611: LD_ADDR_VAR 0 6
47615: PUSH
47616: LD_VAR 0 2
47620: PUSH
47621: FOR_IN
47622: IFFALSE 47687
// begin weapons := AvailableWeaponList ( k ) ;
47624: LD_ADDR_VAR 0 9
47628: PUSH
47629: LD_VAR 0 6
47633: PPUSH
47634: CALL_OW 478
47638: ST_TO_ADDR
// if not weapons then
47639: LD_VAR 0 9
47643: NOT
47644: IFFALSE 47648
// continue ;
47646: GO 47621
// if weapon in weapons then
47648: LD_VAR 0 8
47652: PUSH
47653: LD_VAR 0 9
47657: IN
47658: IFFALSE 47685
// begin result := [ i , weapon ] ;
47660: LD_ADDR_VAR 0 3
47664: PUSH
47665: LD_VAR 0 4
47669: PUSH
47670: LD_VAR 0 8
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// exit ;
47679: POP
47680: POP
47681: POP
47682: POP
47683: GO 47693
// end ; end ;
47685: GO 47621
47687: POP
47688: POP
// end ;
47689: GO 47507
47691: POP
47692: POP
// end ;
47693: LD_VAR 0 3
47697: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47698: LD_INT 0
47700: PPUSH
// if not side or side > 8 then
47701: LD_VAR 0 3
47705: NOT
47706: PUSH
47707: LD_VAR 0 3
47711: PUSH
47712: LD_INT 8
47714: GREATER
47715: OR
47716: IFFALSE 47720
// exit ;
47718: GO 47779
// if not range then
47720: LD_VAR 0 4
47724: NOT
47725: IFFALSE 47736
// range := - 12 ;
47727: LD_ADDR_VAR 0 4
47731: PUSH
47732: LD_INT 12
47734: NEG
47735: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47736: LD_VAR 0 1
47740: PPUSH
47741: LD_VAR 0 2
47745: PPUSH
47746: LD_VAR 0 3
47750: PPUSH
47751: LD_VAR 0 4
47755: PPUSH
47756: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47760: LD_VAR 0 1
47764: PPUSH
47765: LD_VAR 0 2
47769: PPUSH
47770: LD_VAR 0 3
47774: PPUSH
47775: CALL_OW 331
// end ;
47779: LD_VAR 0 5
47783: RET
// export function Video ( mode ) ; begin
47784: LD_INT 0
47786: PPUSH
// ingame_video = mode ;
47787: LD_ADDR_OWVAR 52
47791: PUSH
47792: LD_VAR 0 1
47796: ST_TO_ADDR
// interface_hidden = mode ;
47797: LD_ADDR_OWVAR 54
47801: PUSH
47802: LD_VAR 0 1
47806: ST_TO_ADDR
// end ;
47807: LD_VAR 0 2
47811: RET
// export function Join ( array , element ) ; begin
47812: LD_INT 0
47814: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47815: LD_ADDR_VAR 0 3
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: LD_VAR 0 1
47829: PUSH
47830: LD_INT 1
47832: PLUS
47833: PPUSH
47834: LD_VAR 0 2
47838: PPUSH
47839: CALL_OW 1
47843: ST_TO_ADDR
// end ;
47844: LD_VAR 0 3
47848: RET
// export function JoinUnion ( array , element ) ; begin
47849: LD_INT 0
47851: PPUSH
// result := array union element ;
47852: LD_ADDR_VAR 0 3
47856: PUSH
47857: LD_VAR 0 1
47861: PUSH
47862: LD_VAR 0 2
47866: UNION
47867: ST_TO_ADDR
// end ;
47868: LD_VAR 0 3
47872: RET
// export function GetBehemoths ( side ) ; begin
47873: LD_INT 0
47875: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47876: LD_ADDR_VAR 0 2
47880: PUSH
47881: LD_INT 22
47883: PUSH
47884: LD_VAR 0 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 31
47895: PUSH
47896: LD_INT 25
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PPUSH
47907: CALL_OW 69
47911: ST_TO_ADDR
// end ;
47912: LD_VAR 0 2
47916: RET
// export function Shuffle ( array ) ; var i , index ; begin
47917: LD_INT 0
47919: PPUSH
47920: PPUSH
47921: PPUSH
// result := [ ] ;
47922: LD_ADDR_VAR 0 2
47926: PUSH
47927: EMPTY
47928: ST_TO_ADDR
// if not array then
47929: LD_VAR 0 1
47933: NOT
47934: IFFALSE 47938
// exit ;
47936: GO 48037
// Randomize ;
47938: CALL_OW 10
// for i = array downto 1 do
47942: LD_ADDR_VAR 0 3
47946: PUSH
47947: DOUBLE
47948: LD_VAR 0 1
47952: INC
47953: ST_TO_ADDR
47954: LD_INT 1
47956: PUSH
47957: FOR_DOWNTO
47958: IFFALSE 48035
// begin index := rand ( 1 , array ) ;
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: LD_INT 1
47967: PPUSH
47968: LD_VAR 0 1
47972: PPUSH
47973: CALL_OW 12
47977: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47978: LD_ADDR_VAR 0 2
47982: PUSH
47983: LD_VAR 0 2
47987: PPUSH
47988: LD_VAR 0 2
47992: PUSH
47993: LD_INT 1
47995: PLUS
47996: PPUSH
47997: LD_VAR 0 1
48001: PUSH
48002: LD_VAR 0 4
48006: ARRAY
48007: PPUSH
48008: CALL_OW 2
48012: ST_TO_ADDR
// array := Delete ( array , index ) ;
48013: LD_ADDR_VAR 0 1
48017: PUSH
48018: LD_VAR 0 1
48022: PPUSH
48023: LD_VAR 0 4
48027: PPUSH
48028: CALL_OW 3
48032: ST_TO_ADDR
// end ;
48033: GO 47957
48035: POP
48036: POP
// end ;
48037: LD_VAR 0 2
48041: RET
// export function GetBaseMaterials ( base ) ; begin
48042: LD_INT 0
48044: PPUSH
// result := [ 0 , 0 , 0 ] ;
48045: LD_ADDR_VAR 0 2
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// if not base then
48064: LD_VAR 0 1
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48122
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48073: LD_ADDR_VAR 0 2
48077: PUSH
48078: LD_VAR 0 1
48082: PPUSH
48083: LD_INT 1
48085: PPUSH
48086: CALL_OW 275
48090: PUSH
48091: LD_VAR 0 1
48095: PPUSH
48096: LD_INT 2
48098: PPUSH
48099: CALL_OW 275
48103: PUSH
48104: LD_VAR 0 1
48108: PPUSH
48109: LD_INT 3
48111: PPUSH
48112: CALL_OW 275
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// end ;
48122: LD_VAR 0 2
48126: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48127: LD_INT 0
48129: PPUSH
48130: PPUSH
// result := array ;
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_VAR 0 1
48140: ST_TO_ADDR
// if size >= result then
48141: LD_VAR 0 2
48145: PUSH
48146: LD_VAR 0 3
48150: GREATEREQUAL
48151: IFFALSE 48155
// exit ;
48153: GO 48205
// if size then
48155: LD_VAR 0 2
48159: IFFALSE 48205
// for i := array downto size do
48161: LD_ADDR_VAR 0 4
48165: PUSH
48166: DOUBLE
48167: LD_VAR 0 1
48171: INC
48172: ST_TO_ADDR
48173: LD_VAR 0 2
48177: PUSH
48178: FOR_DOWNTO
48179: IFFALSE 48203
// result := Delete ( result , result ) ;
48181: LD_ADDR_VAR 0 3
48185: PUSH
48186: LD_VAR 0 3
48190: PPUSH
48191: LD_VAR 0 3
48195: PPUSH
48196: CALL_OW 3
48200: ST_TO_ADDR
48201: GO 48178
48203: POP
48204: POP
// end ;
48205: LD_VAR 0 3
48209: RET
// export function ComExit ( unit ) ; var tmp ; begin
48210: LD_INT 0
48212: PPUSH
48213: PPUSH
// if not IsInUnit ( unit ) then
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 310
48223: NOT
48224: IFFALSE 48228
// exit ;
48226: GO 48288
// tmp := IsInUnit ( unit ) ;
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_VAR 0 1
48237: PPUSH
48238: CALL_OW 310
48242: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48243: LD_VAR 0 3
48247: PPUSH
48248: CALL_OW 247
48252: PUSH
48253: LD_INT 2
48255: EQUAL
48256: IFFALSE 48269
// ComExitVehicle ( unit ) else
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 121
48267: GO 48278
// ComExitBuilding ( unit ) ;
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 122
// result := tmp ;
48278: LD_ADDR_VAR 0 2
48282: PUSH
48283: LD_VAR 0 3
48287: ST_TO_ADDR
// end ;
48288: LD_VAR 0 2
48292: RET
// export function ComExitAll ( units ) ; var i ; begin
48293: LD_INT 0
48295: PPUSH
48296: PPUSH
// if not units then
48297: LD_VAR 0 1
48301: NOT
48302: IFFALSE 48306
// exit ;
48304: GO 48332
// for i in units do
48306: LD_ADDR_VAR 0 3
48310: PUSH
48311: LD_VAR 0 1
48315: PUSH
48316: FOR_IN
48317: IFFALSE 48330
// ComExit ( i ) ;
48319: LD_VAR 0 3
48323: PPUSH
48324: CALL 48210 0 1
48328: GO 48316
48330: POP
48331: POP
// end ;
48332: LD_VAR 0 2
48336: RET
// export function ResetHc ; begin
48337: LD_INT 0
48339: PPUSH
// InitHc ;
48340: CALL_OW 19
// hc_importance := 0 ;
48344: LD_ADDR_OWVAR 32
48348: PUSH
48349: LD_INT 0
48351: ST_TO_ADDR
// end ;
48352: LD_VAR 0 1
48356: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48357: LD_INT 0
48359: PPUSH
48360: PPUSH
48361: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48362: LD_ADDR_VAR 0 6
48366: PUSH
48367: LD_VAR 0 1
48371: PUSH
48372: LD_VAR 0 3
48376: PLUS
48377: PUSH
48378: LD_INT 2
48380: DIV
48381: ST_TO_ADDR
// if _x < 0 then
48382: LD_VAR 0 6
48386: PUSH
48387: LD_INT 0
48389: LESS
48390: IFFALSE 48407
// _x := _x * - 1 ;
48392: LD_ADDR_VAR 0 6
48396: PUSH
48397: LD_VAR 0 6
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: MUL
48406: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48407: LD_ADDR_VAR 0 7
48411: PUSH
48412: LD_VAR 0 2
48416: PUSH
48417: LD_VAR 0 4
48421: PLUS
48422: PUSH
48423: LD_INT 2
48425: DIV
48426: ST_TO_ADDR
// if _y < 0 then
48427: LD_VAR 0 7
48431: PUSH
48432: LD_INT 0
48434: LESS
48435: IFFALSE 48452
// _y := _y * - 1 ;
48437: LD_ADDR_VAR 0 7
48441: PUSH
48442: LD_VAR 0 7
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: MUL
48451: ST_TO_ADDR
// result := [ _x , _y ] ;
48452: LD_ADDR_VAR 0 5
48456: PUSH
48457: LD_VAR 0 6
48461: PUSH
48462: LD_VAR 0 7
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// end ;
48471: LD_VAR 0 5
48475: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48476: LD_INT 0
48478: PPUSH
48479: PPUSH
48480: PPUSH
48481: PPUSH
// task := GetTaskList ( unit ) ;
48482: LD_ADDR_VAR 0 7
48486: PUSH
48487: LD_VAR 0 1
48491: PPUSH
48492: CALL_OW 437
48496: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48497: LD_VAR 0 7
48501: NOT
48502: PUSH
48503: LD_VAR 0 1
48507: PPUSH
48508: LD_VAR 0 2
48512: PPUSH
48513: CALL_OW 308
48517: NOT
48518: AND
48519: IFFALSE 48523
// exit ;
48521: GO 48641
// if IsInArea ( unit , area ) then
48523: LD_VAR 0 1
48527: PPUSH
48528: LD_VAR 0 2
48532: PPUSH
48533: CALL_OW 308
48537: IFFALSE 48555
// begin ComMoveToArea ( unit , goAway ) ;
48539: LD_VAR 0 1
48543: PPUSH
48544: LD_VAR 0 3
48548: PPUSH
48549: CALL_OW 113
// exit ;
48553: GO 48641
// end ; if task [ 1 ] [ 1 ] <> M then
48555: LD_VAR 0 7
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PUSH
48564: LD_INT 1
48566: ARRAY
48567: PUSH
48568: LD_STRING M
48570: NONEQUAL
48571: IFFALSE 48575
// exit ;
48573: GO 48641
// x := task [ 1 ] [ 2 ] ;
48575: LD_ADDR_VAR 0 5
48579: PUSH
48580: LD_VAR 0 7
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PUSH
48589: LD_INT 2
48591: ARRAY
48592: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48593: LD_ADDR_VAR 0 6
48597: PUSH
48598: LD_VAR 0 7
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PUSH
48607: LD_INT 3
48609: ARRAY
48610: ST_TO_ADDR
// if InArea ( x , y , area ) then
48611: LD_VAR 0 5
48615: PPUSH
48616: LD_VAR 0 6
48620: PPUSH
48621: LD_VAR 0 2
48625: PPUSH
48626: CALL_OW 309
48630: IFFALSE 48641
// ComStop ( unit ) ;
48632: LD_VAR 0 1
48636: PPUSH
48637: CALL_OW 141
// end ;
48641: LD_VAR 0 4
48645: RET
// export function Abs ( value ) ; begin
48646: LD_INT 0
48648: PPUSH
// result := value ;
48649: LD_ADDR_VAR 0 2
48653: PUSH
48654: LD_VAR 0 1
48658: ST_TO_ADDR
// if value < 0 then
48659: LD_VAR 0 1
48663: PUSH
48664: LD_INT 0
48666: LESS
48667: IFFALSE 48684
// result := value * - 1 ;
48669: LD_ADDR_VAR 0 2
48673: PUSH
48674: LD_VAR 0 1
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: MUL
48683: ST_TO_ADDR
// end ;
48684: LD_VAR 0 2
48688: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48689: LD_INT 0
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
// if not unit or not building then
48699: LD_VAR 0 1
48703: NOT
48704: PUSH
48705: LD_VAR 0 2
48709: NOT
48710: OR
48711: IFFALSE 48715
// exit ;
48713: GO 48941
// x := GetX ( building ) ;
48715: LD_ADDR_VAR 0 4
48719: PUSH
48720: LD_VAR 0 2
48724: PPUSH
48725: CALL_OW 250
48729: ST_TO_ADDR
// y := GetY ( building ) ;
48730: LD_ADDR_VAR 0 6
48734: PUSH
48735: LD_VAR 0 2
48739: PPUSH
48740: CALL_OW 251
48744: ST_TO_ADDR
// d := GetDir ( building ) ;
48745: LD_ADDR_VAR 0 8
48749: PUSH
48750: LD_VAR 0 2
48754: PPUSH
48755: CALL_OW 254
48759: ST_TO_ADDR
// r := 4 ;
48760: LD_ADDR_VAR 0 9
48764: PUSH
48765: LD_INT 4
48767: ST_TO_ADDR
// for i := 1 to 5 do
48768: LD_ADDR_VAR 0 10
48772: PUSH
48773: DOUBLE
48774: LD_INT 1
48776: DEC
48777: ST_TO_ADDR
48778: LD_INT 5
48780: PUSH
48781: FOR_TO
48782: IFFALSE 48939
// begin _x := ShiftX ( x , d , r + i ) ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 4
48793: PPUSH
48794: LD_VAR 0 8
48798: PPUSH
48799: LD_VAR 0 9
48803: PUSH
48804: LD_VAR 0 10
48808: PLUS
48809: PPUSH
48810: CALL_OW 272
48814: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48815: LD_ADDR_VAR 0 7
48819: PUSH
48820: LD_VAR 0 6
48824: PPUSH
48825: LD_VAR 0 8
48829: PPUSH
48830: LD_VAR 0 9
48834: PUSH
48835: LD_VAR 0 10
48839: PLUS
48840: PPUSH
48841: CALL_OW 273
48845: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48846: LD_VAR 0 5
48850: PPUSH
48851: LD_VAR 0 7
48855: PPUSH
48856: CALL_OW 488
48860: PUSH
48861: LD_VAR 0 5
48865: PPUSH
48866: LD_VAR 0 7
48870: PPUSH
48871: CALL_OW 428
48875: PPUSH
48876: CALL_OW 247
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: IN
48891: NOT
48892: AND
48893: IFFALSE 48937
// begin ComMoveXY ( unit , _x , _y ) ;
48895: LD_VAR 0 1
48899: PPUSH
48900: LD_VAR 0 5
48904: PPUSH
48905: LD_VAR 0 7
48909: PPUSH
48910: CALL_OW 111
// result := [ _x , _y ] ;
48914: LD_ADDR_VAR 0 3
48918: PUSH
48919: LD_VAR 0 5
48923: PUSH
48924: LD_VAR 0 7
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// exit ;
48933: POP
48934: POP
48935: GO 48941
// end ; end ;
48937: GO 48781
48939: POP
48940: POP
// end ;
48941: LD_VAR 0 3
48945: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48946: LD_INT 0
48948: PPUSH
48949: PPUSH
48950: PPUSH
// result := 0 ;
48951: LD_ADDR_VAR 0 3
48955: PUSH
48956: LD_INT 0
48958: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48959: LD_VAR 0 1
48963: PUSH
48964: LD_INT 0
48966: LESS
48967: PUSH
48968: LD_VAR 0 1
48972: PUSH
48973: LD_INT 8
48975: GREATER
48976: OR
48977: PUSH
48978: LD_VAR 0 2
48982: PUSH
48983: LD_INT 0
48985: LESS
48986: OR
48987: PUSH
48988: LD_VAR 0 2
48992: PUSH
48993: LD_INT 8
48995: GREATER
48996: OR
48997: IFFALSE 49001
// exit ;
48999: GO 49076
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49001: LD_ADDR_VAR 0 4
49005: PUSH
49006: LD_INT 22
49008: PUSH
49009: LD_VAR 0 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PPUSH
49018: CALL_OW 69
49022: PUSH
49023: FOR_IN
49024: IFFALSE 49074
// begin un := UnitShoot ( i ) ;
49026: LD_ADDR_VAR 0 5
49030: PUSH
49031: LD_VAR 0 4
49035: PPUSH
49036: CALL_OW 504
49040: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49041: LD_VAR 0 5
49045: PPUSH
49046: CALL_OW 255
49050: PUSH
49051: LD_VAR 0 1
49055: EQUAL
49056: IFFALSE 49072
// begin result := un ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_VAR 0 5
49067: ST_TO_ADDR
// exit ;
49068: POP
49069: POP
49070: GO 49076
// end ; end ;
49072: GO 49023
49074: POP
49075: POP
// end ;
49076: LD_VAR 0 3
49080: RET
// export function GetCargoBay ( units ) ; begin
49081: LD_INT 0
49083: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49084: LD_ADDR_VAR 0 2
49088: PUSH
49089: LD_VAR 0 1
49093: PPUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 34
49099: PUSH
49100: LD_INT 12
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 34
49109: PUSH
49110: LD_INT 51
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 34
49119: PUSH
49120: LD_INT 32
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 34
49129: PUSH
49130: LD_INT 89
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: PPUSH
49144: CALL_OW 72
49148: ST_TO_ADDR
// end ;
49149: LD_VAR 0 2
49153: RET
// export function Negate ( value ) ; begin
49154: LD_INT 0
49156: PPUSH
// result := not value ;
49157: LD_ADDR_VAR 0 2
49161: PUSH
49162: LD_VAR 0 1
49166: NOT
49167: ST_TO_ADDR
// end ;
49168: LD_VAR 0 2
49172: RET
// export function Inc ( value ) ; begin
49173: LD_INT 0
49175: PPUSH
// result := value + 1 ;
49176: LD_ADDR_VAR 0 2
49180: PUSH
49181: LD_VAR 0 1
49185: PUSH
49186: LD_INT 1
49188: PLUS
49189: ST_TO_ADDR
// end ;
49190: LD_VAR 0 2
49194: RET
// export function Dec ( value ) ; begin
49195: LD_INT 0
49197: PPUSH
// result := value - 1 ;
49198: LD_ADDR_VAR 0 2
49202: PUSH
49203: LD_VAR 0 1
49207: PUSH
49208: LD_INT 1
49210: MINUS
49211: ST_TO_ADDR
// end ;
49212: LD_VAR 0 2
49216: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49217: LD_INT 0
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49227: LD_VAR 0 1
49231: PPUSH
49232: LD_VAR 0 2
49236: PPUSH
49237: CALL_OW 488
49241: NOT
49242: PUSH
49243: LD_VAR 0 3
49247: PPUSH
49248: LD_VAR 0 4
49252: PPUSH
49253: CALL_OW 488
49257: NOT
49258: OR
49259: IFFALSE 49272
// begin result := - 1 ;
49261: LD_ADDR_VAR 0 5
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: ST_TO_ADDR
// exit ;
49270: GO 49507
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49272: LD_ADDR_VAR 0 12
49276: PUSH
49277: LD_VAR 0 1
49281: PPUSH
49282: LD_VAR 0 2
49286: PPUSH
49287: LD_VAR 0 3
49291: PPUSH
49292: LD_VAR 0 4
49296: PPUSH
49297: CALL 48357 0 4
49301: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49302: LD_ADDR_VAR 0 11
49306: PUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: LD_VAR 0 2
49316: PPUSH
49317: LD_VAR 0 12
49321: PUSH
49322: LD_INT 1
49324: ARRAY
49325: PPUSH
49326: LD_VAR 0 12
49330: PUSH
49331: LD_INT 2
49333: ARRAY
49334: PPUSH
49335: CALL_OW 298
49339: ST_TO_ADDR
// distance := 9999 ;
49340: LD_ADDR_VAR 0 10
49344: PUSH
49345: LD_INT 9999
49347: ST_TO_ADDR
// for i := 0 to 5 do
49348: LD_ADDR_VAR 0 6
49352: PUSH
49353: DOUBLE
49354: LD_INT 0
49356: DEC
49357: ST_TO_ADDR
49358: LD_INT 5
49360: PUSH
49361: FOR_TO
49362: IFFALSE 49505
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49364: LD_ADDR_VAR 0 7
49368: PUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: LD_VAR 0 6
49378: PPUSH
49379: LD_VAR 0 11
49383: PPUSH
49384: CALL_OW 272
49388: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49389: LD_ADDR_VAR 0 8
49393: PUSH
49394: LD_VAR 0 2
49398: PPUSH
49399: LD_VAR 0 6
49403: PPUSH
49404: LD_VAR 0 11
49408: PPUSH
49409: CALL_OW 273
49413: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49414: LD_VAR 0 7
49418: PPUSH
49419: LD_VAR 0 8
49423: PPUSH
49424: CALL_OW 488
49428: NOT
49429: IFFALSE 49433
// continue ;
49431: GO 49361
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49433: LD_ADDR_VAR 0 9
49437: PUSH
49438: LD_VAR 0 12
49442: PUSH
49443: LD_INT 1
49445: ARRAY
49446: PPUSH
49447: LD_VAR 0 12
49451: PUSH
49452: LD_INT 2
49454: ARRAY
49455: PPUSH
49456: LD_VAR 0 7
49460: PPUSH
49461: LD_VAR 0 8
49465: PPUSH
49466: CALL_OW 298
49470: ST_TO_ADDR
// if tmp < distance then
49471: LD_VAR 0 9
49475: PUSH
49476: LD_VAR 0 10
49480: LESS
49481: IFFALSE 49503
// begin result := i ;
49483: LD_ADDR_VAR 0 5
49487: PUSH
49488: LD_VAR 0 6
49492: ST_TO_ADDR
// distance := tmp ;
49493: LD_ADDR_VAR 0 10
49497: PUSH
49498: LD_VAR 0 9
49502: ST_TO_ADDR
// end ; end ;
49503: GO 49361
49505: POP
49506: POP
// end ;
49507: LD_VAR 0 5
49511: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49512: LD_INT 0
49514: PPUSH
49515: PPUSH
// if not driver or not IsInUnit ( driver ) then
49516: LD_VAR 0 1
49520: NOT
49521: PUSH
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 310
49531: NOT
49532: OR
49533: IFFALSE 49537
// exit ;
49535: GO 49627
// vehicle := IsInUnit ( driver ) ;
49537: LD_ADDR_VAR 0 3
49541: PUSH
49542: LD_VAR 0 1
49546: PPUSH
49547: CALL_OW 310
49551: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49552: LD_VAR 0 1
49556: PPUSH
49557: LD_STRING \
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: PUSH
49587: LD_STRING E
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_VAR 0 3
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PPUSH
49623: CALL_OW 446
// end ;
49627: LD_VAR 0 2
49631: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49632: LD_INT 0
49634: PPUSH
49635: PPUSH
// if not driver or not IsInUnit ( driver ) then
49636: LD_VAR 0 1
49640: NOT
49641: PUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: CALL_OW 310
49651: NOT
49652: OR
49653: IFFALSE 49657
// exit ;
49655: GO 49747
// vehicle := IsInUnit ( driver ) ;
49657: LD_ADDR_VAR 0 3
49661: PUSH
49662: LD_VAR 0 1
49666: PPUSH
49667: CALL_OW 310
49671: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49672: LD_VAR 0 1
49676: PPUSH
49677: LD_STRING \
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: PUSH
49707: LD_STRING E
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_VAR 0 3
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PPUSH
49743: CALL_OW 447
// end ;
49747: LD_VAR 0 2
49751: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49752: LD_INT 0
49754: PPUSH
49755: PPUSH
49756: PPUSH
// tmp := [ ] ;
49757: LD_ADDR_VAR 0 5
49761: PUSH
49762: EMPTY
49763: ST_TO_ADDR
// for i in units do
49764: LD_ADDR_VAR 0 4
49768: PUSH
49769: LD_VAR 0 1
49773: PUSH
49774: FOR_IN
49775: IFFALSE 49813
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49777: LD_ADDR_VAR 0 5
49781: PUSH
49782: LD_VAR 0 5
49786: PPUSH
49787: LD_VAR 0 5
49791: PUSH
49792: LD_INT 1
49794: PLUS
49795: PPUSH
49796: LD_VAR 0 4
49800: PPUSH
49801: CALL_OW 256
49805: PPUSH
49806: CALL_OW 2
49810: ST_TO_ADDR
49811: GO 49774
49813: POP
49814: POP
// if not tmp then
49815: LD_VAR 0 5
49819: NOT
49820: IFFALSE 49824
// exit ;
49822: GO 49872
// if asc then
49824: LD_VAR 0 2
49828: IFFALSE 49852
// result := SortListByListAsc ( units , tmp ) else
49830: LD_ADDR_VAR 0 3
49834: PUSH
49835: LD_VAR 0 1
49839: PPUSH
49840: LD_VAR 0 5
49844: PPUSH
49845: CALL_OW 76
49849: ST_TO_ADDR
49850: GO 49872
// result := SortListByListDesc ( units , tmp ) ;
49852: LD_ADDR_VAR 0 3
49856: PUSH
49857: LD_VAR 0 1
49861: PPUSH
49862: LD_VAR 0 5
49866: PPUSH
49867: CALL_OW 77
49871: ST_TO_ADDR
// end ;
49872: LD_VAR 0 3
49876: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49877: LD_INT 0
49879: PPUSH
49880: PPUSH
// task := GetTaskList ( mech ) ;
49881: LD_ADDR_VAR 0 4
49885: PUSH
49886: LD_VAR 0 1
49890: PPUSH
49891: CALL_OW 437
49895: ST_TO_ADDR
// if not task then
49896: LD_VAR 0 4
49900: NOT
49901: IFFALSE 49905
// exit ;
49903: GO 49947
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49905: LD_ADDR_VAR 0 3
49909: PUSH
49910: LD_VAR 0 4
49914: PUSH
49915: LD_INT 1
49917: ARRAY
49918: PUSH
49919: LD_INT 1
49921: ARRAY
49922: PUSH
49923: LD_STRING r
49925: EQUAL
49926: PUSH
49927: LD_VAR 0 4
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: PUSH
49936: LD_INT 4
49938: ARRAY
49939: PUSH
49940: LD_VAR 0 2
49944: EQUAL
49945: AND
49946: ST_TO_ADDR
// end ;
49947: LD_VAR 0 3
49951: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49952: LD_INT 0
49954: PPUSH
// SetDir ( unit , d ) ;
49955: LD_VAR 0 1
49959: PPUSH
49960: LD_VAR 0 4
49964: PPUSH
49965: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49969: LD_ADDR_VAR 0 6
49973: PUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_VAR 0 2
49983: PPUSH
49984: LD_VAR 0 3
49988: PPUSH
49989: LD_VAR 0 5
49993: PPUSH
49994: CALL_OW 48
49998: ST_TO_ADDR
// end ;
49999: LD_VAR 0 6
50003: RET
// export function ToNaturalNumber ( number ) ; begin
50004: LD_INT 0
50006: PPUSH
// result := number div 1 ;
50007: LD_ADDR_VAR 0 2
50011: PUSH
50012: LD_VAR 0 1
50016: PUSH
50017: LD_INT 1
50019: DIV
50020: ST_TO_ADDR
// if number < 0 then
50021: LD_VAR 0 1
50025: PUSH
50026: LD_INT 0
50028: LESS
50029: IFFALSE 50039
// result := 0 ;
50031: LD_ADDR_VAR 0 2
50035: PUSH
50036: LD_INT 0
50038: ST_TO_ADDR
// end ;
50039: LD_VAR 0 2
50043: RET
// export function SortByClass ( units , class ) ; var un ; begin
50044: LD_INT 0
50046: PPUSH
50047: PPUSH
// if not units or not class then
50048: LD_VAR 0 1
50052: NOT
50053: PUSH
50054: LD_VAR 0 2
50058: NOT
50059: OR
50060: IFFALSE 50064
// exit ;
50062: GO 50159
// result := [ ] ;
50064: LD_ADDR_VAR 0 3
50068: PUSH
50069: EMPTY
50070: ST_TO_ADDR
// for un in units do
50071: LD_ADDR_VAR 0 4
50075: PUSH
50076: LD_VAR 0 1
50080: PUSH
50081: FOR_IN
50082: IFFALSE 50157
// if GetClass ( un ) = class then
50084: LD_VAR 0 4
50088: PPUSH
50089: CALL_OW 257
50093: PUSH
50094: LD_VAR 0 2
50098: EQUAL
50099: IFFALSE 50126
// result := Insert ( result , 1 , un ) else
50101: LD_ADDR_VAR 0 3
50105: PUSH
50106: LD_VAR 0 3
50110: PPUSH
50111: LD_INT 1
50113: PPUSH
50114: LD_VAR 0 4
50118: PPUSH
50119: CALL_OW 2
50123: ST_TO_ADDR
50124: GO 50155
// result := Replace ( result , result + 1 , un ) ;
50126: LD_ADDR_VAR 0 3
50130: PUSH
50131: LD_VAR 0 3
50135: PPUSH
50136: LD_VAR 0 3
50140: PUSH
50141: LD_INT 1
50143: PLUS
50144: PPUSH
50145: LD_VAR 0 4
50149: PPUSH
50150: CALL_OW 1
50154: ST_TO_ADDR
50155: GO 50081
50157: POP
50158: POP
// end ;
50159: LD_VAR 0 3
50163: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50164: LD_INT 0
50166: PPUSH
50167: PPUSH
50168: PPUSH
50169: PPUSH
50170: PPUSH
50171: PPUSH
50172: PPUSH
// result := [ ] ;
50173: LD_ADDR_VAR 0 4
50177: PUSH
50178: EMPTY
50179: ST_TO_ADDR
// if x - r < 0 then
50180: LD_VAR 0 1
50184: PUSH
50185: LD_VAR 0 3
50189: MINUS
50190: PUSH
50191: LD_INT 0
50193: LESS
50194: IFFALSE 50206
// min_x := 0 else
50196: LD_ADDR_VAR 0 8
50200: PUSH
50201: LD_INT 0
50203: ST_TO_ADDR
50204: GO 50222
// min_x := x - r ;
50206: LD_ADDR_VAR 0 8
50210: PUSH
50211: LD_VAR 0 1
50215: PUSH
50216: LD_VAR 0 3
50220: MINUS
50221: ST_TO_ADDR
// if y - r < 0 then
50222: LD_VAR 0 2
50226: PUSH
50227: LD_VAR 0 3
50231: MINUS
50232: PUSH
50233: LD_INT 0
50235: LESS
50236: IFFALSE 50248
// min_y := 0 else
50238: LD_ADDR_VAR 0 7
50242: PUSH
50243: LD_INT 0
50245: ST_TO_ADDR
50246: GO 50264
// min_y := y - r ;
50248: LD_ADDR_VAR 0 7
50252: PUSH
50253: LD_VAR 0 2
50257: PUSH
50258: LD_VAR 0 3
50262: MINUS
50263: ST_TO_ADDR
// max_x := x + r ;
50264: LD_ADDR_VAR 0 9
50268: PUSH
50269: LD_VAR 0 1
50273: PUSH
50274: LD_VAR 0 3
50278: PLUS
50279: ST_TO_ADDR
// max_y := y + r ;
50280: LD_ADDR_VAR 0 10
50284: PUSH
50285: LD_VAR 0 2
50289: PUSH
50290: LD_VAR 0 3
50294: PLUS
50295: ST_TO_ADDR
// for _x = min_x to max_x do
50296: LD_ADDR_VAR 0 5
50300: PUSH
50301: DOUBLE
50302: LD_VAR 0 8
50306: DEC
50307: ST_TO_ADDR
50308: LD_VAR 0 9
50312: PUSH
50313: FOR_TO
50314: IFFALSE 50415
// for _y = min_y to max_y do
50316: LD_ADDR_VAR 0 6
50320: PUSH
50321: DOUBLE
50322: LD_VAR 0 7
50326: DEC
50327: ST_TO_ADDR
50328: LD_VAR 0 10
50332: PUSH
50333: FOR_TO
50334: IFFALSE 50411
// begin if not ValidHex ( _x , _y ) then
50336: LD_VAR 0 5
50340: PPUSH
50341: LD_VAR 0 6
50345: PPUSH
50346: CALL_OW 488
50350: NOT
50351: IFFALSE 50355
// continue ;
50353: GO 50333
// if GetResourceTypeXY ( _x , _y ) then
50355: LD_VAR 0 5
50359: PPUSH
50360: LD_VAR 0 6
50364: PPUSH
50365: CALL_OW 283
50369: IFFALSE 50409
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50371: LD_ADDR_VAR 0 4
50375: PUSH
50376: LD_VAR 0 4
50380: PPUSH
50381: LD_VAR 0 4
50385: PUSH
50386: LD_INT 1
50388: PLUS
50389: PPUSH
50390: LD_VAR 0 5
50394: PUSH
50395: LD_VAR 0 6
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PPUSH
50404: CALL_OW 1
50408: ST_TO_ADDR
// end ;
50409: GO 50333
50411: POP
50412: POP
50413: GO 50313
50415: POP
50416: POP
// end ;
50417: LD_VAR 0 4
50421: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50422: LD_INT 0
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
// if not units then
50432: LD_VAR 0 1
50436: NOT
50437: IFFALSE 50441
// exit ;
50439: GO 50969
// result := UnitFilter ( units , [ f_ok ] ) ;
50441: LD_ADDR_VAR 0 3
50445: PUSH
50446: LD_VAR 0 1
50450: PPUSH
50451: LD_INT 50
50453: PUSH
50454: EMPTY
50455: LIST
50456: PPUSH
50457: CALL_OW 72
50461: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50462: LD_ADDR_VAR 0 8
50466: PUSH
50467: LD_VAR 0 1
50471: PUSH
50472: LD_INT 1
50474: ARRAY
50475: PPUSH
50476: CALL_OW 255
50480: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50481: LD_ADDR_VAR 0 10
50485: PUSH
50486: LD_INT 29
50488: PUSH
50489: LD_INT 91
50491: PUSH
50492: LD_INT 49
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// if not result then
50500: LD_VAR 0 3
50504: NOT
50505: IFFALSE 50509
// exit ;
50507: GO 50969
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50509: LD_ADDR_VAR 0 5
50513: PUSH
50514: LD_INT 81
50516: PUSH
50517: LD_VAR 0 8
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PPUSH
50526: CALL_OW 69
50530: ST_TO_ADDR
// for i in result do
50531: LD_ADDR_VAR 0 4
50535: PUSH
50536: LD_VAR 0 3
50540: PUSH
50541: FOR_IN
50542: IFFALSE 50967
// begin tag := GetTag ( i ) + 1 ;
50544: LD_ADDR_VAR 0 9
50548: PUSH
50549: LD_VAR 0 4
50553: PPUSH
50554: CALL_OW 110
50558: PUSH
50559: LD_INT 1
50561: PLUS
50562: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50563: LD_ADDR_VAR 0 7
50567: PUSH
50568: LD_VAR 0 4
50572: PPUSH
50573: CALL_OW 250
50577: PPUSH
50578: LD_VAR 0 4
50582: PPUSH
50583: CALL_OW 251
50587: PPUSH
50588: LD_INT 4
50590: PPUSH
50591: CALL 50164 0 3
50595: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50596: LD_VAR 0 4
50600: PPUSH
50601: CALL_OW 247
50605: PUSH
50606: LD_INT 2
50608: EQUAL
50609: PUSH
50610: LD_VAR 0 7
50614: PUSH
50615: LD_INT 2
50617: GREATER
50618: AND
50619: PUSH
50620: LD_VAR 0 4
50624: PPUSH
50625: CALL_OW 264
50629: PUSH
50630: LD_VAR 0 10
50634: IN
50635: NOT
50636: AND
50637: IFFALSE 50676
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50639: LD_VAR 0 4
50643: PPUSH
50644: LD_VAR 0 7
50648: PUSH
50649: LD_INT 1
50651: ARRAY
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: PPUSH
50657: LD_VAR 0 7
50661: PUSH
50662: LD_INT 1
50664: ARRAY
50665: PUSH
50666: LD_INT 2
50668: ARRAY
50669: PPUSH
50670: CALL_OW 116
50674: GO 50965
// if path > tag then
50676: LD_VAR 0 2
50680: PUSH
50681: LD_VAR 0 9
50685: GREATER
50686: IFFALSE 50894
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50688: LD_ADDR_VAR 0 6
50692: PUSH
50693: LD_VAR 0 5
50697: PPUSH
50698: LD_INT 91
50700: PUSH
50701: LD_VAR 0 4
50705: PUSH
50706: LD_INT 8
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: PPUSH
50714: CALL_OW 72
50718: ST_TO_ADDR
// if nearEnemy then
50719: LD_VAR 0 6
50723: IFFALSE 50792
// begin if GetWeapon ( i ) = ru_time_lapser then
50725: LD_VAR 0 4
50729: PPUSH
50730: CALL_OW 264
50734: PUSH
50735: LD_INT 49
50737: EQUAL
50738: IFFALSE 50766
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50740: LD_VAR 0 4
50744: PPUSH
50745: LD_VAR 0 6
50749: PPUSH
50750: LD_VAR 0 4
50754: PPUSH
50755: CALL_OW 74
50759: PPUSH
50760: CALL_OW 112
50764: GO 50790
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50766: LD_VAR 0 4
50770: PPUSH
50771: LD_VAR 0 6
50775: PPUSH
50776: LD_VAR 0 4
50780: PPUSH
50781: CALL_OW 74
50785: PPUSH
50786: CALL 52040 0 2
// end else
50790: GO 50892
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50792: LD_VAR 0 4
50796: PPUSH
50797: LD_VAR 0 2
50801: PUSH
50802: LD_VAR 0 9
50806: ARRAY
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: PPUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_VAR 0 9
50821: ARRAY
50822: PUSH
50823: LD_INT 2
50825: ARRAY
50826: PPUSH
50827: CALL_OW 297
50831: PUSH
50832: LD_INT 6
50834: GREATER
50835: IFFALSE 50878
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50837: LD_VAR 0 4
50841: PPUSH
50842: LD_VAR 0 2
50846: PUSH
50847: LD_VAR 0 9
50851: ARRAY
50852: PUSH
50853: LD_INT 1
50855: ARRAY
50856: PPUSH
50857: LD_VAR 0 2
50861: PUSH
50862: LD_VAR 0 9
50866: ARRAY
50867: PUSH
50868: LD_INT 2
50870: ARRAY
50871: PPUSH
50872: CALL_OW 114
50876: GO 50892
// SetTag ( i , tag ) ;
50878: LD_VAR 0 4
50882: PPUSH
50883: LD_VAR 0 9
50887: PPUSH
50888: CALL_OW 109
// end else
50892: GO 50965
// if enemy then
50894: LD_VAR 0 5
50898: IFFALSE 50965
// begin if GetWeapon ( i ) = ru_time_lapser then
50900: LD_VAR 0 4
50904: PPUSH
50905: CALL_OW 264
50909: PUSH
50910: LD_INT 49
50912: EQUAL
50913: IFFALSE 50941
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50915: LD_VAR 0 4
50919: PPUSH
50920: LD_VAR 0 5
50924: PPUSH
50925: LD_VAR 0 4
50929: PPUSH
50930: CALL_OW 74
50934: PPUSH
50935: CALL_OW 112
50939: GO 50965
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50941: LD_VAR 0 4
50945: PPUSH
50946: LD_VAR 0 5
50950: PPUSH
50951: LD_VAR 0 4
50955: PPUSH
50956: CALL_OW 74
50960: PPUSH
50961: CALL 52040 0 2
// end ; end ;
50965: GO 50541
50967: POP
50968: POP
// end ;
50969: LD_VAR 0 3
50973: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50974: LD_INT 0
50976: PPUSH
50977: PPUSH
50978: PPUSH
// if not unit or IsInUnit ( unit ) then
50979: LD_VAR 0 1
50983: NOT
50984: PUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: CALL_OW 310
50994: OR
50995: IFFALSE 50999
// exit ;
50997: GO 51090
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50999: LD_ADDR_VAR 0 4
51003: PUSH
51004: LD_VAR 0 1
51008: PPUSH
51009: CALL_OW 250
51013: PPUSH
51014: LD_VAR 0 2
51018: PPUSH
51019: LD_INT 1
51021: PPUSH
51022: CALL_OW 272
51026: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51027: LD_ADDR_VAR 0 5
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: CALL_OW 251
51041: PPUSH
51042: LD_VAR 0 2
51046: PPUSH
51047: LD_INT 1
51049: PPUSH
51050: CALL_OW 273
51054: ST_TO_ADDR
// if ValidHex ( x , y ) then
51055: LD_VAR 0 4
51059: PPUSH
51060: LD_VAR 0 5
51064: PPUSH
51065: CALL_OW 488
51069: IFFALSE 51090
// ComTurnXY ( unit , x , y ) ;
51071: LD_VAR 0 1
51075: PPUSH
51076: LD_VAR 0 4
51080: PPUSH
51081: LD_VAR 0 5
51085: PPUSH
51086: CALL_OW 118
// end ;
51090: LD_VAR 0 3
51094: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51095: LD_INT 0
51097: PPUSH
51098: PPUSH
// result := false ;
51099: LD_ADDR_VAR 0 3
51103: PUSH
51104: LD_INT 0
51106: ST_TO_ADDR
// if not units then
51107: LD_VAR 0 2
51111: NOT
51112: IFFALSE 51116
// exit ;
51114: GO 51161
// for i in units do
51116: LD_ADDR_VAR 0 4
51120: PUSH
51121: LD_VAR 0 2
51125: PUSH
51126: FOR_IN
51127: IFFALSE 51159
// if See ( side , i ) then
51129: LD_VAR 0 1
51133: PPUSH
51134: LD_VAR 0 4
51138: PPUSH
51139: CALL_OW 292
51143: IFFALSE 51157
// begin result := true ;
51145: LD_ADDR_VAR 0 3
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// exit ;
51153: POP
51154: POP
51155: GO 51161
// end ;
51157: GO 51126
51159: POP
51160: POP
// end ;
51161: LD_VAR 0 3
51165: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51166: LD_INT 0
51168: PPUSH
51169: PPUSH
51170: PPUSH
51171: PPUSH
// if not unit or not points then
51172: LD_VAR 0 1
51176: NOT
51177: PUSH
51178: LD_VAR 0 2
51182: NOT
51183: OR
51184: IFFALSE 51188
// exit ;
51186: GO 51278
// dist := 99999 ;
51188: LD_ADDR_VAR 0 5
51192: PUSH
51193: LD_INT 99999
51195: ST_TO_ADDR
// for i in points do
51196: LD_ADDR_VAR 0 4
51200: PUSH
51201: LD_VAR 0 2
51205: PUSH
51206: FOR_IN
51207: IFFALSE 51276
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51209: LD_ADDR_VAR 0 6
51213: PUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: LD_VAR 0 4
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: PPUSH
51228: LD_VAR 0 4
51232: PUSH
51233: LD_INT 2
51235: ARRAY
51236: PPUSH
51237: CALL_OW 297
51241: ST_TO_ADDR
// if tmpDist < dist then
51242: LD_VAR 0 6
51246: PUSH
51247: LD_VAR 0 5
51251: LESS
51252: IFFALSE 51274
// begin result := i ;
51254: LD_ADDR_VAR 0 3
51258: PUSH
51259: LD_VAR 0 4
51263: ST_TO_ADDR
// dist := tmpDist ;
51264: LD_ADDR_VAR 0 5
51268: PUSH
51269: LD_VAR 0 6
51273: ST_TO_ADDR
// end ; end ;
51274: GO 51206
51276: POP
51277: POP
// end ;
51278: LD_VAR 0 3
51282: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51283: LD_INT 0
51285: PPUSH
// uc_side := side ;
51286: LD_ADDR_OWVAR 20
51290: PUSH
51291: LD_VAR 0 1
51295: ST_TO_ADDR
// uc_nation := 3 ;
51296: LD_ADDR_OWVAR 21
51300: PUSH
51301: LD_INT 3
51303: ST_TO_ADDR
// vc_chassis := 25 ;
51304: LD_ADDR_OWVAR 37
51308: PUSH
51309: LD_INT 25
51311: ST_TO_ADDR
// vc_engine := engine_siberite ;
51312: LD_ADDR_OWVAR 39
51316: PUSH
51317: LD_INT 3
51319: ST_TO_ADDR
// vc_control := control_computer ;
51320: LD_ADDR_OWVAR 38
51324: PUSH
51325: LD_INT 3
51327: ST_TO_ADDR
// vc_weapon := 59 ;
51328: LD_ADDR_OWVAR 40
51332: PUSH
51333: LD_INT 59
51335: ST_TO_ADDR
// result := CreateVehicle ;
51336: LD_ADDR_VAR 0 5
51340: PUSH
51341: CALL_OW 45
51345: ST_TO_ADDR
// SetDir ( result , d ) ;
51346: LD_VAR 0 5
51350: PPUSH
51351: LD_VAR 0 4
51355: PPUSH
51356: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51360: LD_VAR 0 5
51364: PPUSH
51365: LD_VAR 0 2
51369: PPUSH
51370: LD_VAR 0 3
51374: PPUSH
51375: LD_INT 0
51377: PPUSH
51378: CALL_OW 48
// end ;
51382: LD_VAR 0 5
51386: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51387: LD_INT 0
51389: PPUSH
51390: PPUSH
51391: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51392: LD_ADDR_VAR 0 2
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51415: LD_VAR 0 1
51419: NOT
51420: PUSH
51421: LD_VAR 0 1
51425: PPUSH
51426: CALL_OW 264
51430: PUSH
51431: LD_INT 12
51433: PUSH
51434: LD_INT 51
51436: PUSH
51437: LD_INT 32
51439: PUSH
51440: LD_INT 89
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: IN
51449: NOT
51450: OR
51451: IFFALSE 51455
// exit ;
51453: GO 51553
// for i := 1 to 3 do
51455: LD_ADDR_VAR 0 3
51459: PUSH
51460: DOUBLE
51461: LD_INT 1
51463: DEC
51464: ST_TO_ADDR
51465: LD_INT 3
51467: PUSH
51468: FOR_TO
51469: IFFALSE 51551
// begin tmp := GetCargo ( cargo , i ) ;
51471: LD_ADDR_VAR 0 4
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: LD_VAR 0 3
51485: PPUSH
51486: CALL_OW 289
51490: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51491: LD_ADDR_VAR 0 2
51495: PUSH
51496: LD_VAR 0 2
51500: PPUSH
51501: LD_VAR 0 3
51505: PPUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: CALL_OW 1
51515: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51516: LD_ADDR_VAR 0 2
51520: PUSH
51521: LD_VAR 0 2
51525: PPUSH
51526: LD_INT 4
51528: PPUSH
51529: LD_VAR 0 2
51533: PUSH
51534: LD_INT 4
51536: ARRAY
51537: PUSH
51538: LD_VAR 0 4
51542: PLUS
51543: PPUSH
51544: CALL_OW 1
51548: ST_TO_ADDR
// end ;
51549: GO 51468
51551: POP
51552: POP
// end ;
51553: LD_VAR 0 2
51557: RET
// export function Length ( array ) ; begin
51558: LD_INT 0
51560: PPUSH
// result := array + 0 ;
51561: LD_ADDR_VAR 0 2
51565: PUSH
51566: LD_VAR 0 1
51570: PUSH
51571: LD_INT 0
51573: PLUS
51574: ST_TO_ADDR
// end ;
51575: LD_VAR 0 2
51579: RET
// export function PrepareArray ( array ) ; begin
51580: LD_INT 0
51582: PPUSH
// result := array diff 0 ;
51583: LD_ADDR_VAR 0 2
51587: PUSH
51588: LD_VAR 0 1
51592: PUSH
51593: LD_INT 0
51595: DIFF
51596: ST_TO_ADDR
// if not result [ 1 ] then
51597: LD_VAR 0 2
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: NOT
51606: IFFALSE 51626
// result := Delete ( result , 1 ) ;
51608: LD_ADDR_VAR 0 2
51612: PUSH
51613: LD_VAR 0 2
51617: PPUSH
51618: LD_INT 1
51620: PPUSH
51621: CALL_OW 3
51625: ST_TO_ADDR
// end ;
51626: LD_VAR 0 2
51630: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51631: LD_INT 0
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
// sibRocketRange := 25 ;
51637: LD_ADDR_VAR 0 6
51641: PUSH
51642: LD_INT 25
51644: ST_TO_ADDR
// result := false ;
51645: LD_ADDR_VAR 0 4
51649: PUSH
51650: LD_INT 0
51652: ST_TO_ADDR
// for i := 0 to 5 do
51653: LD_ADDR_VAR 0 5
51657: PUSH
51658: DOUBLE
51659: LD_INT 0
51661: DEC
51662: ST_TO_ADDR
51663: LD_INT 5
51665: PUSH
51666: FOR_TO
51667: IFFALSE 51734
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51669: LD_VAR 0 1
51673: PPUSH
51674: LD_VAR 0 5
51678: PPUSH
51679: LD_VAR 0 6
51683: PPUSH
51684: CALL_OW 272
51688: PPUSH
51689: LD_VAR 0 2
51693: PPUSH
51694: LD_VAR 0 5
51698: PPUSH
51699: LD_VAR 0 6
51703: PPUSH
51704: CALL_OW 273
51708: PPUSH
51709: LD_VAR 0 3
51713: PPUSH
51714: CALL_OW 309
51718: IFFALSE 51732
// begin result := true ;
51720: LD_ADDR_VAR 0 4
51724: PUSH
51725: LD_INT 1
51727: ST_TO_ADDR
// exit ;
51728: POP
51729: POP
51730: GO 51736
// end ;
51732: GO 51666
51734: POP
51735: POP
// end ;
51736: LD_VAR 0 4
51740: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51741: LD_INT 0
51743: PPUSH
51744: PPUSH
51745: PPUSH
// if btype = b_depot then
51746: LD_VAR 0 2
51750: PUSH
51751: LD_INT 0
51753: EQUAL
51754: IFFALSE 51766
// begin result := true ;
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_INT 1
51763: ST_TO_ADDR
// exit ;
51764: GO 51882
// end ; pom := GetBase ( depot ) ;
51766: LD_ADDR_VAR 0 4
51770: PUSH
51771: LD_VAR 0 1
51775: PPUSH
51776: CALL_OW 274
51780: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51781: LD_ADDR_VAR 0 5
51785: PUSH
51786: LD_VAR 0 2
51790: PPUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 248
51800: PPUSH
51801: CALL_OW 450
51805: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51806: LD_ADDR_VAR 0 3
51810: PUSH
51811: LD_VAR 0 4
51815: PPUSH
51816: LD_INT 1
51818: PPUSH
51819: CALL_OW 275
51823: PUSH
51824: LD_VAR 0 5
51828: PUSH
51829: LD_INT 1
51831: ARRAY
51832: GREATEREQUAL
51833: PUSH
51834: LD_VAR 0 4
51838: PPUSH
51839: LD_INT 2
51841: PPUSH
51842: CALL_OW 275
51846: PUSH
51847: LD_VAR 0 5
51851: PUSH
51852: LD_INT 2
51854: ARRAY
51855: GREATEREQUAL
51856: AND
51857: PUSH
51858: LD_VAR 0 4
51862: PPUSH
51863: LD_INT 3
51865: PPUSH
51866: CALL_OW 275
51870: PUSH
51871: LD_VAR 0 5
51875: PUSH
51876: LD_INT 3
51878: ARRAY
51879: GREATEREQUAL
51880: AND
51881: ST_TO_ADDR
// end ;
51882: LD_VAR 0 3
51886: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51887: LD_INT 0
51889: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51890: LD_VAR 0 1
51894: PPUSH
51895: LD_VAR 0 2
51899: PPUSH
51900: LD_INT 0
51902: PPUSH
51903: LD_INT 0
51905: PPUSH
51906: LD_INT 1
51908: PPUSH
51909: LD_INT 0
51911: PPUSH
51912: CALL_OW 587
// end ;
51916: LD_VAR 0 3
51920: RET
// export function CenterOnNow ( unit ) ; begin
51921: LD_INT 0
51923: PPUSH
// result := IsInUnit ( unit ) ;
51924: LD_ADDR_VAR 0 2
51928: PUSH
51929: LD_VAR 0 1
51933: PPUSH
51934: CALL_OW 310
51938: ST_TO_ADDR
// if not result then
51939: LD_VAR 0 2
51943: NOT
51944: IFFALSE 51956
// result := unit ;
51946: LD_ADDR_VAR 0 2
51950: PUSH
51951: LD_VAR 0 1
51955: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51956: LD_VAR 0 1
51960: PPUSH
51961: CALL_OW 87
// end ;
51965: LD_VAR 0 2
51969: RET
// export function ComMoveHex ( unit , hex ) ; begin
51970: LD_INT 0
51972: PPUSH
// if not hex then
51973: LD_VAR 0 2
51977: NOT
51978: IFFALSE 51982
// exit ;
51980: GO 52035
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51982: LD_VAR 0 2
51986: PUSH
51987: LD_INT 1
51989: ARRAY
51990: PPUSH
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 2
51998: ARRAY
51999: PPUSH
52000: CALL_OW 428
52004: IFFALSE 52008
// exit ;
52006: GO 52035
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52008: LD_VAR 0 1
52012: PPUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PPUSH
52022: LD_VAR 0 2
52026: PUSH
52027: LD_INT 2
52029: ARRAY
52030: PPUSH
52031: CALL_OW 111
// end ;
52035: LD_VAR 0 3
52039: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52040: LD_INT 0
52042: PPUSH
52043: PPUSH
52044: PPUSH
// if not unit or not enemy then
52045: LD_VAR 0 1
52049: NOT
52050: PUSH
52051: LD_VAR 0 2
52055: NOT
52056: OR
52057: IFFALSE 52061
// exit ;
52059: GO 52185
// x := GetX ( enemy ) ;
52061: LD_ADDR_VAR 0 4
52065: PUSH
52066: LD_VAR 0 2
52070: PPUSH
52071: CALL_OW 250
52075: ST_TO_ADDR
// y := GetY ( enemy ) ;
52076: LD_ADDR_VAR 0 5
52080: PUSH
52081: LD_VAR 0 2
52085: PPUSH
52086: CALL_OW 251
52090: ST_TO_ADDR
// if ValidHex ( x , y ) then
52091: LD_VAR 0 4
52095: PPUSH
52096: LD_VAR 0 5
52100: PPUSH
52101: CALL_OW 488
52105: IFFALSE 52185
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52107: LD_VAR 0 2
52111: PPUSH
52112: CALL_OW 247
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: IN
52127: PUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 255
52137: PPUSH
52138: LD_VAR 0 2
52142: PPUSH
52143: CALL_OW 292
52147: OR
52148: IFFALSE 52166
// ComAttackUnit ( unit , enemy ) else
52150: LD_VAR 0 1
52154: PPUSH
52155: LD_VAR 0 2
52159: PPUSH
52160: CALL_OW 115
52164: GO 52185
// ComAgressiveMove ( unit , x , y ) ;
52166: LD_VAR 0 1
52170: PPUSH
52171: LD_VAR 0 4
52175: PPUSH
52176: LD_VAR 0 5
52180: PPUSH
52181: CALL_OW 114
// end ;
52185: LD_VAR 0 3
52189: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52190: LD_INT 0
52192: PPUSH
52193: PPUSH
52194: PPUSH
// list := AreaToList ( area , 0 ) ;
52195: LD_ADDR_VAR 0 5
52199: PUSH
52200: LD_VAR 0 1
52204: PPUSH
52205: LD_INT 0
52207: PPUSH
52208: CALL_OW 517
52212: ST_TO_ADDR
// if not list then
52213: LD_VAR 0 5
52217: NOT
52218: IFFALSE 52222
// exit ;
52220: GO 52352
// if all then
52222: LD_VAR 0 2
52226: IFFALSE 52314
// begin for i := 1 to list [ 1 ] do
52228: LD_ADDR_VAR 0 4
52232: PUSH
52233: DOUBLE
52234: LD_INT 1
52236: DEC
52237: ST_TO_ADDR
52238: LD_VAR 0 5
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: PUSH
52247: FOR_TO
52248: IFFALSE 52310
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52250: LD_ADDR_VAR 0 3
52254: PUSH
52255: LD_VAR 0 3
52259: PPUSH
52260: LD_VAR 0 3
52264: PUSH
52265: LD_INT 1
52267: PLUS
52268: PPUSH
52269: LD_VAR 0 5
52273: PUSH
52274: LD_INT 1
52276: ARRAY
52277: PUSH
52278: LD_VAR 0 4
52282: ARRAY
52283: PUSH
52284: LD_VAR 0 5
52288: PUSH
52289: LD_INT 2
52291: ARRAY
52292: PUSH
52293: LD_VAR 0 4
52297: ARRAY
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PPUSH
52303: CALL_OW 1
52307: ST_TO_ADDR
52308: GO 52247
52310: POP
52311: POP
// exit ;
52312: GO 52352
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52314: LD_ADDR_VAR 0 3
52318: PUSH
52319: LD_VAR 0 5
52323: PUSH
52324: LD_INT 1
52326: ARRAY
52327: PUSH
52328: LD_INT 1
52330: ARRAY
52331: PUSH
52332: LD_VAR 0 5
52336: PUSH
52337: LD_INT 2
52339: ARRAY
52340: PUSH
52341: LD_INT 1
52343: ARRAY
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: ST_TO_ADDR
// end ;
52352: LD_VAR 0 3
52356: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52357: LD_INT 0
52359: PPUSH
52360: PPUSH
// list := AreaToList ( area , 0 ) ;
52361: LD_ADDR_VAR 0 4
52365: PUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: LD_INT 0
52373: PPUSH
52374: CALL_OW 517
52378: ST_TO_ADDR
// if not list then
52379: LD_VAR 0 4
52383: NOT
52384: IFFALSE 52388
// exit ;
52386: GO 52429
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52388: LD_ADDR_VAR 0 3
52392: PUSH
52393: LD_VAR 0 4
52397: PUSH
52398: LD_INT 1
52400: ARRAY
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PUSH
52406: LD_VAR 0 4
52410: PUSH
52411: LD_INT 2
52413: ARRAY
52414: PUSH
52415: LD_INT 1
52417: ARRAY
52418: PUSH
52419: LD_VAR 0 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// end ;
52429: LD_VAR 0 3
52433: RET
// export function First ( array ) ; begin
52434: LD_INT 0
52436: PPUSH
// if not array then
52437: LD_VAR 0 1
52441: NOT
52442: IFFALSE 52446
// exit ;
52444: GO 52460
// result := array [ 1 ] ;
52446: LD_ADDR_VAR 0 2
52450: PUSH
52451: LD_VAR 0 1
52455: PUSH
52456: LD_INT 1
52458: ARRAY
52459: ST_TO_ADDR
// end ;
52460: LD_VAR 0 2
52464: RET
// export function Last ( array ) ; begin
52465: LD_INT 0
52467: PPUSH
// if not array then
52468: LD_VAR 0 1
52472: NOT
52473: IFFALSE 52477
// exit ;
52475: GO 52493
// result := array [ array ] ;
52477: LD_ADDR_VAR 0 2
52481: PUSH
52482: LD_VAR 0 1
52486: PUSH
52487: LD_VAR 0 1
52491: ARRAY
52492: ST_TO_ADDR
// end ;
52493: LD_VAR 0 2
52497: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52498: LD_INT 0
52500: PPUSH
52501: PPUSH
// result := [ ] ;
52502: LD_ADDR_VAR 0 5
52506: PUSH
52507: EMPTY
52508: ST_TO_ADDR
// if not array then
52509: LD_VAR 0 1
52513: NOT
52514: IFFALSE 52518
// exit ;
52516: GO 52630
// for i := 1 to array do
52518: LD_ADDR_VAR 0 6
52522: PUSH
52523: DOUBLE
52524: LD_INT 1
52526: DEC
52527: ST_TO_ADDR
52528: LD_VAR 0 1
52532: PUSH
52533: FOR_TO
52534: IFFALSE 52628
// if array [ i ] [ index ] = value then
52536: LD_VAR 0 1
52540: PUSH
52541: LD_VAR 0 6
52545: ARRAY
52546: PUSH
52547: LD_VAR 0 2
52551: ARRAY
52552: PUSH
52553: LD_VAR 0 3
52557: EQUAL
52558: IFFALSE 52626
// begin if indexColumn then
52560: LD_VAR 0 4
52564: IFFALSE 52600
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52566: LD_ADDR_VAR 0 5
52570: PUSH
52571: LD_VAR 0 5
52575: PPUSH
52576: LD_VAR 0 1
52580: PUSH
52581: LD_VAR 0 6
52585: ARRAY
52586: PUSH
52587: LD_VAR 0 4
52591: ARRAY
52592: PPUSH
52593: CALL 47812 0 2
52597: ST_TO_ADDR
52598: GO 52626
// result := Join ( result , array [ i ] ) ;
52600: LD_ADDR_VAR 0 5
52604: PUSH
52605: LD_VAR 0 5
52609: PPUSH
52610: LD_VAR 0 1
52614: PUSH
52615: LD_VAR 0 6
52619: ARRAY
52620: PPUSH
52621: CALL 47812 0 2
52625: ST_TO_ADDR
// end ;
52626: GO 52533
52628: POP
52629: POP
// end ;
52630: LD_VAR 0 5
52634: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52635: LD_INT 0
52637: PPUSH
// if not vehicles or not parkingPoint then
52638: LD_VAR 0 1
52642: NOT
52643: PUSH
52644: LD_VAR 0 2
52648: NOT
52649: OR
52650: IFFALSE 52654
// exit ;
52652: GO 52752
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52654: LD_ADDR_VAR 0 1
52658: PUSH
52659: LD_VAR 0 1
52663: PPUSH
52664: LD_INT 50
52666: PUSH
52667: EMPTY
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 92
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: LD_INT 1
52683: ARRAY
52684: PUSH
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 2
52692: ARRAY
52693: PUSH
52694: LD_INT 8
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PPUSH
52711: CALL_OW 72
52715: ST_TO_ADDR
// if not vehicles then
52716: LD_VAR 0 1
52720: NOT
52721: IFFALSE 52725
// exit ;
52723: GO 52752
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52725: LD_VAR 0 1
52729: PPUSH
52730: LD_VAR 0 2
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PPUSH
52739: LD_VAR 0 2
52743: PUSH
52744: LD_INT 2
52746: ARRAY
52747: PPUSH
52748: CALL_OW 111
// end ;
52752: LD_VAR 0 3
52756: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52757: LD_INT 0
52759: PPUSH
52760: PPUSH
52761: PPUSH
// if not side or not area then
52762: LD_VAR 0 1
52766: NOT
52767: PUSH
52768: LD_VAR 0 2
52772: NOT
52773: OR
52774: IFFALSE 52778
// exit ;
52776: GO 52897
// tmp := AreaToList ( area , 0 ) ;
52778: LD_ADDR_VAR 0 5
52782: PUSH
52783: LD_VAR 0 2
52787: PPUSH
52788: LD_INT 0
52790: PPUSH
52791: CALL_OW 517
52795: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52796: LD_ADDR_VAR 0 4
52800: PUSH
52801: DOUBLE
52802: LD_INT 1
52804: DEC
52805: ST_TO_ADDR
52806: LD_VAR 0 5
52810: PUSH
52811: LD_INT 1
52813: ARRAY
52814: PUSH
52815: FOR_TO
52816: IFFALSE 52895
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52818: LD_VAR 0 5
52822: PUSH
52823: LD_INT 1
52825: ARRAY
52826: PUSH
52827: LD_VAR 0 4
52831: ARRAY
52832: PPUSH
52833: LD_VAR 0 5
52837: PUSH
52838: LD_INT 2
52840: ARRAY
52841: PUSH
52842: LD_VAR 0 4
52846: ARRAY
52847: PPUSH
52848: CALL_OW 351
52852: IFFALSE 52893
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52854: LD_VAR 0 5
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: LD_VAR 0 4
52867: ARRAY
52868: PPUSH
52869: LD_VAR 0 5
52873: PUSH
52874: LD_INT 2
52876: ARRAY
52877: PUSH
52878: LD_VAR 0 4
52882: ARRAY
52883: PPUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: CALL_OW 244
// end ;
52893: GO 52815
52895: POP
52896: POP
// end ; end_of_file end_of_file
52897: LD_VAR 0 3
52901: RET
// export globalGameSaveCounter ; every 0 0$1 do
52902: GO 52904
52904: DISABLE
// begin enable ;
52905: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52906: LD_STRING updateTimer(
52908: PUSH
52909: LD_OWVAR 1
52913: STR
52914: PUSH
52915: LD_STRING );
52917: STR
52918: PPUSH
52919: CALL_OW 559
// end ;
52923: END
// every 0 0$1 do
52924: GO 52926
52926: DISABLE
// begin globalGameSaveCounter := 0 ;
52927: LD_ADDR_EXP 37
52931: PUSH
52932: LD_INT 0
52934: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52935: LD_STRING setGameSaveCounter(0)
52937: PPUSH
52938: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52942: LD_STRING initStreamRollete();
52944: PPUSH
52945: CALL_OW 559
// InitStreamMode ;
52949: CALL 54292 0 0
// DefineStreamItems ( false ) ;
52953: LD_INT 0
52955: PPUSH
52956: CALL 54756 0 1
// end ;
52960: END
// export function SOS_MapStart ( ) ; begin
52961: LD_INT 0
52963: PPUSH
// if streamModeActive then
52964: LD_EXP 38
52968: IFFALSE 52977
// DefineStreamItems ( true ) ;
52970: LD_INT 1
52972: PPUSH
52973: CALL 54756 0 1
// UpdateLuaVariables ( ) ;
52977: CALL 52994 0 0
// UpdateFactoryWaypoints ( ) ;
52981: CALL 67758 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52985: CALL 68010 0 0
// end ;
52989: LD_VAR 0 1
52993: RET
// function UpdateLuaVariables ( ) ; begin
52994: LD_INT 0
52996: PPUSH
// if globalGameSaveCounter then
52997: LD_EXP 37
53001: IFFALSE 53035
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53003: LD_ADDR_EXP 37
53007: PUSH
53008: LD_EXP 37
53012: PPUSH
53013: CALL 49173 0 1
53017: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53018: LD_STRING setGameSaveCounter(
53020: PUSH
53021: LD_EXP 37
53025: STR
53026: PUSH
53027: LD_STRING )
53029: STR
53030: PPUSH
53031: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53035: LD_STRING setGameDifficulty(
53037: PUSH
53038: LD_OWVAR 67
53042: STR
53043: PUSH
53044: LD_STRING )
53046: STR
53047: PPUSH
53048: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53052: LD_STRING displayDifficulty(
53054: PUSH
53055: LD_OWVAR 67
53059: STR
53060: PUSH
53061: LD_STRING )
53063: STR
53064: PPUSH
53065: CALL_OW 559
// end ;
53069: LD_VAR 0 1
53073: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53074: LD_INT 0
53076: PPUSH
// if p2 = stream_mode then
53077: LD_VAR 0 2
53081: PUSH
53082: LD_INT 100
53084: EQUAL
53085: IFFALSE 54088
// begin if not StreamModeActive then
53087: LD_EXP 38
53091: NOT
53092: IFFALSE 53102
// StreamModeActive := true ;
53094: LD_ADDR_EXP 38
53098: PUSH
53099: LD_INT 1
53101: ST_TO_ADDR
// if p3 = 0 then
53102: LD_VAR 0 3
53106: PUSH
53107: LD_INT 0
53109: EQUAL
53110: IFFALSE 53116
// InitStreamMode ;
53112: CALL 54292 0 0
// if p3 = 1 then
53116: LD_VAR 0 3
53120: PUSH
53121: LD_INT 1
53123: EQUAL
53124: IFFALSE 53134
// sRocket := true ;
53126: LD_ADDR_EXP 43
53130: PUSH
53131: LD_INT 1
53133: ST_TO_ADDR
// if p3 = 2 then
53134: LD_VAR 0 3
53138: PUSH
53139: LD_INT 2
53141: EQUAL
53142: IFFALSE 53152
// sSpeed := true ;
53144: LD_ADDR_EXP 42
53148: PUSH
53149: LD_INT 1
53151: ST_TO_ADDR
// if p3 = 3 then
53152: LD_VAR 0 3
53156: PUSH
53157: LD_INT 3
53159: EQUAL
53160: IFFALSE 53170
// sEngine := true ;
53162: LD_ADDR_EXP 44
53166: PUSH
53167: LD_INT 1
53169: ST_TO_ADDR
// if p3 = 4 then
53170: LD_VAR 0 3
53174: PUSH
53175: LD_INT 4
53177: EQUAL
53178: IFFALSE 53188
// sSpec := true ;
53180: LD_ADDR_EXP 41
53184: PUSH
53185: LD_INT 1
53187: ST_TO_ADDR
// if p3 = 5 then
53188: LD_VAR 0 3
53192: PUSH
53193: LD_INT 5
53195: EQUAL
53196: IFFALSE 53206
// sLevel := true ;
53198: LD_ADDR_EXP 45
53202: PUSH
53203: LD_INT 1
53205: ST_TO_ADDR
// if p3 = 6 then
53206: LD_VAR 0 3
53210: PUSH
53211: LD_INT 6
53213: EQUAL
53214: IFFALSE 53224
// sArmoury := true ;
53216: LD_ADDR_EXP 46
53220: PUSH
53221: LD_INT 1
53223: ST_TO_ADDR
// if p3 = 7 then
53224: LD_VAR 0 3
53228: PUSH
53229: LD_INT 7
53231: EQUAL
53232: IFFALSE 53242
// sRadar := true ;
53234: LD_ADDR_EXP 47
53238: PUSH
53239: LD_INT 1
53241: ST_TO_ADDR
// if p3 = 8 then
53242: LD_VAR 0 3
53246: PUSH
53247: LD_INT 8
53249: EQUAL
53250: IFFALSE 53260
// sBunker := true ;
53252: LD_ADDR_EXP 48
53256: PUSH
53257: LD_INT 1
53259: ST_TO_ADDR
// if p3 = 9 then
53260: LD_VAR 0 3
53264: PUSH
53265: LD_INT 9
53267: EQUAL
53268: IFFALSE 53278
// sHack := true ;
53270: LD_ADDR_EXP 49
53274: PUSH
53275: LD_INT 1
53277: ST_TO_ADDR
// if p3 = 10 then
53278: LD_VAR 0 3
53282: PUSH
53283: LD_INT 10
53285: EQUAL
53286: IFFALSE 53296
// sFire := true ;
53288: LD_ADDR_EXP 50
53292: PUSH
53293: LD_INT 1
53295: ST_TO_ADDR
// if p3 = 11 then
53296: LD_VAR 0 3
53300: PUSH
53301: LD_INT 11
53303: EQUAL
53304: IFFALSE 53314
// sRefresh := true ;
53306: LD_ADDR_EXP 51
53310: PUSH
53311: LD_INT 1
53313: ST_TO_ADDR
// if p3 = 12 then
53314: LD_VAR 0 3
53318: PUSH
53319: LD_INT 12
53321: EQUAL
53322: IFFALSE 53332
// sExp := true ;
53324: LD_ADDR_EXP 52
53328: PUSH
53329: LD_INT 1
53331: ST_TO_ADDR
// if p3 = 13 then
53332: LD_VAR 0 3
53336: PUSH
53337: LD_INT 13
53339: EQUAL
53340: IFFALSE 53350
// sDepot := true ;
53342: LD_ADDR_EXP 53
53346: PUSH
53347: LD_INT 1
53349: ST_TO_ADDR
// if p3 = 14 then
53350: LD_VAR 0 3
53354: PUSH
53355: LD_INT 14
53357: EQUAL
53358: IFFALSE 53368
// sFlag := true ;
53360: LD_ADDR_EXP 54
53364: PUSH
53365: LD_INT 1
53367: ST_TO_ADDR
// if p3 = 15 then
53368: LD_VAR 0 3
53372: PUSH
53373: LD_INT 15
53375: EQUAL
53376: IFFALSE 53386
// sKamikadze := true ;
53378: LD_ADDR_EXP 62
53382: PUSH
53383: LD_INT 1
53385: ST_TO_ADDR
// if p3 = 16 then
53386: LD_VAR 0 3
53390: PUSH
53391: LD_INT 16
53393: EQUAL
53394: IFFALSE 53404
// sTroll := true ;
53396: LD_ADDR_EXP 63
53400: PUSH
53401: LD_INT 1
53403: ST_TO_ADDR
// if p3 = 17 then
53404: LD_VAR 0 3
53408: PUSH
53409: LD_INT 17
53411: EQUAL
53412: IFFALSE 53422
// sSlow := true ;
53414: LD_ADDR_EXP 64
53418: PUSH
53419: LD_INT 1
53421: ST_TO_ADDR
// if p3 = 18 then
53422: LD_VAR 0 3
53426: PUSH
53427: LD_INT 18
53429: EQUAL
53430: IFFALSE 53440
// sLack := true ;
53432: LD_ADDR_EXP 65
53436: PUSH
53437: LD_INT 1
53439: ST_TO_ADDR
// if p3 = 19 then
53440: LD_VAR 0 3
53444: PUSH
53445: LD_INT 19
53447: EQUAL
53448: IFFALSE 53458
// sTank := true ;
53450: LD_ADDR_EXP 67
53454: PUSH
53455: LD_INT 1
53457: ST_TO_ADDR
// if p3 = 20 then
53458: LD_VAR 0 3
53462: PUSH
53463: LD_INT 20
53465: EQUAL
53466: IFFALSE 53476
// sRemote := true ;
53468: LD_ADDR_EXP 68
53472: PUSH
53473: LD_INT 1
53475: ST_TO_ADDR
// if p3 = 21 then
53476: LD_VAR 0 3
53480: PUSH
53481: LD_INT 21
53483: EQUAL
53484: IFFALSE 53494
// sPowell := true ;
53486: LD_ADDR_EXP 69
53490: PUSH
53491: LD_INT 1
53493: ST_TO_ADDR
// if p3 = 22 then
53494: LD_VAR 0 3
53498: PUSH
53499: LD_INT 22
53501: EQUAL
53502: IFFALSE 53512
// sTeleport := true ;
53504: LD_ADDR_EXP 72
53508: PUSH
53509: LD_INT 1
53511: ST_TO_ADDR
// if p3 = 23 then
53512: LD_VAR 0 3
53516: PUSH
53517: LD_INT 23
53519: EQUAL
53520: IFFALSE 53530
// sOilTower := true ;
53522: LD_ADDR_EXP 74
53526: PUSH
53527: LD_INT 1
53529: ST_TO_ADDR
// if p3 = 24 then
53530: LD_VAR 0 3
53534: PUSH
53535: LD_INT 24
53537: EQUAL
53538: IFFALSE 53548
// sShovel := true ;
53540: LD_ADDR_EXP 75
53544: PUSH
53545: LD_INT 1
53547: ST_TO_ADDR
// if p3 = 25 then
53548: LD_VAR 0 3
53552: PUSH
53553: LD_INT 25
53555: EQUAL
53556: IFFALSE 53566
// sSheik := true ;
53558: LD_ADDR_EXP 76
53562: PUSH
53563: LD_INT 1
53565: ST_TO_ADDR
// if p3 = 26 then
53566: LD_VAR 0 3
53570: PUSH
53571: LD_INT 26
53573: EQUAL
53574: IFFALSE 53584
// sEarthquake := true ;
53576: LD_ADDR_EXP 78
53580: PUSH
53581: LD_INT 1
53583: ST_TO_ADDR
// if p3 = 27 then
53584: LD_VAR 0 3
53588: PUSH
53589: LD_INT 27
53591: EQUAL
53592: IFFALSE 53602
// sAI := true ;
53594: LD_ADDR_EXP 79
53598: PUSH
53599: LD_INT 1
53601: ST_TO_ADDR
// if p3 = 28 then
53602: LD_VAR 0 3
53606: PUSH
53607: LD_INT 28
53609: EQUAL
53610: IFFALSE 53620
// sCargo := true ;
53612: LD_ADDR_EXP 82
53616: PUSH
53617: LD_INT 1
53619: ST_TO_ADDR
// if p3 = 29 then
53620: LD_VAR 0 3
53624: PUSH
53625: LD_INT 29
53627: EQUAL
53628: IFFALSE 53638
// sDLaser := true ;
53630: LD_ADDR_EXP 83
53634: PUSH
53635: LD_INT 1
53637: ST_TO_ADDR
// if p3 = 30 then
53638: LD_VAR 0 3
53642: PUSH
53643: LD_INT 30
53645: EQUAL
53646: IFFALSE 53656
// sExchange := true ;
53648: LD_ADDR_EXP 84
53652: PUSH
53653: LD_INT 1
53655: ST_TO_ADDR
// if p3 = 31 then
53656: LD_VAR 0 3
53660: PUSH
53661: LD_INT 31
53663: EQUAL
53664: IFFALSE 53674
// sFac := true ;
53666: LD_ADDR_EXP 85
53670: PUSH
53671: LD_INT 1
53673: ST_TO_ADDR
// if p3 = 32 then
53674: LD_VAR 0 3
53678: PUSH
53679: LD_INT 32
53681: EQUAL
53682: IFFALSE 53692
// sPower := true ;
53684: LD_ADDR_EXP 86
53688: PUSH
53689: LD_INT 1
53691: ST_TO_ADDR
// if p3 = 33 then
53692: LD_VAR 0 3
53696: PUSH
53697: LD_INT 33
53699: EQUAL
53700: IFFALSE 53710
// sRandom := true ;
53702: LD_ADDR_EXP 87
53706: PUSH
53707: LD_INT 1
53709: ST_TO_ADDR
// if p3 = 34 then
53710: LD_VAR 0 3
53714: PUSH
53715: LD_INT 34
53717: EQUAL
53718: IFFALSE 53728
// sShield := true ;
53720: LD_ADDR_EXP 88
53724: PUSH
53725: LD_INT 1
53727: ST_TO_ADDR
// if p3 = 35 then
53728: LD_VAR 0 3
53732: PUSH
53733: LD_INT 35
53735: EQUAL
53736: IFFALSE 53746
// sTime := true ;
53738: LD_ADDR_EXP 89
53742: PUSH
53743: LD_INT 1
53745: ST_TO_ADDR
// if p3 = 36 then
53746: LD_VAR 0 3
53750: PUSH
53751: LD_INT 36
53753: EQUAL
53754: IFFALSE 53764
// sTools := true ;
53756: LD_ADDR_EXP 90
53760: PUSH
53761: LD_INT 1
53763: ST_TO_ADDR
// if p3 = 101 then
53764: LD_VAR 0 3
53768: PUSH
53769: LD_INT 101
53771: EQUAL
53772: IFFALSE 53782
// sSold := true ;
53774: LD_ADDR_EXP 55
53778: PUSH
53779: LD_INT 1
53781: ST_TO_ADDR
// if p3 = 102 then
53782: LD_VAR 0 3
53786: PUSH
53787: LD_INT 102
53789: EQUAL
53790: IFFALSE 53800
// sDiff := true ;
53792: LD_ADDR_EXP 56
53796: PUSH
53797: LD_INT 1
53799: ST_TO_ADDR
// if p3 = 103 then
53800: LD_VAR 0 3
53804: PUSH
53805: LD_INT 103
53807: EQUAL
53808: IFFALSE 53818
// sFog := true ;
53810: LD_ADDR_EXP 59
53814: PUSH
53815: LD_INT 1
53817: ST_TO_ADDR
// if p3 = 104 then
53818: LD_VAR 0 3
53822: PUSH
53823: LD_INT 104
53825: EQUAL
53826: IFFALSE 53836
// sReset := true ;
53828: LD_ADDR_EXP 60
53832: PUSH
53833: LD_INT 1
53835: ST_TO_ADDR
// if p3 = 105 then
53836: LD_VAR 0 3
53840: PUSH
53841: LD_INT 105
53843: EQUAL
53844: IFFALSE 53854
// sSun := true ;
53846: LD_ADDR_EXP 61
53850: PUSH
53851: LD_INT 1
53853: ST_TO_ADDR
// if p3 = 106 then
53854: LD_VAR 0 3
53858: PUSH
53859: LD_INT 106
53861: EQUAL
53862: IFFALSE 53872
// sTiger := true ;
53864: LD_ADDR_EXP 57
53868: PUSH
53869: LD_INT 1
53871: ST_TO_ADDR
// if p3 = 107 then
53872: LD_VAR 0 3
53876: PUSH
53877: LD_INT 107
53879: EQUAL
53880: IFFALSE 53890
// sBomb := true ;
53882: LD_ADDR_EXP 58
53886: PUSH
53887: LD_INT 1
53889: ST_TO_ADDR
// if p3 = 108 then
53890: LD_VAR 0 3
53894: PUSH
53895: LD_INT 108
53897: EQUAL
53898: IFFALSE 53908
// sWound := true ;
53900: LD_ADDR_EXP 66
53904: PUSH
53905: LD_INT 1
53907: ST_TO_ADDR
// if p3 = 109 then
53908: LD_VAR 0 3
53912: PUSH
53913: LD_INT 109
53915: EQUAL
53916: IFFALSE 53926
// sBetray := true ;
53918: LD_ADDR_EXP 70
53922: PUSH
53923: LD_INT 1
53925: ST_TO_ADDR
// if p3 = 110 then
53926: LD_VAR 0 3
53930: PUSH
53931: LD_INT 110
53933: EQUAL
53934: IFFALSE 53944
// sContamin := true ;
53936: LD_ADDR_EXP 71
53940: PUSH
53941: LD_INT 1
53943: ST_TO_ADDR
// if p3 = 111 then
53944: LD_VAR 0 3
53948: PUSH
53949: LD_INT 111
53951: EQUAL
53952: IFFALSE 53962
// sOil := true ;
53954: LD_ADDR_EXP 73
53958: PUSH
53959: LD_INT 1
53961: ST_TO_ADDR
// if p3 = 112 then
53962: LD_VAR 0 3
53966: PUSH
53967: LD_INT 112
53969: EQUAL
53970: IFFALSE 53980
// sStu := true ;
53972: LD_ADDR_EXP 77
53976: PUSH
53977: LD_INT 1
53979: ST_TO_ADDR
// if p3 = 113 then
53980: LD_VAR 0 3
53984: PUSH
53985: LD_INT 113
53987: EQUAL
53988: IFFALSE 53998
// sBazooka := true ;
53990: LD_ADDR_EXP 80
53994: PUSH
53995: LD_INT 1
53997: ST_TO_ADDR
// if p3 = 114 then
53998: LD_VAR 0 3
54002: PUSH
54003: LD_INT 114
54005: EQUAL
54006: IFFALSE 54016
// sMortar := true ;
54008: LD_ADDR_EXP 81
54012: PUSH
54013: LD_INT 1
54015: ST_TO_ADDR
// if p3 = 115 then
54016: LD_VAR 0 3
54020: PUSH
54021: LD_INT 115
54023: EQUAL
54024: IFFALSE 54034
// sRanger := true ;
54026: LD_ADDR_EXP 91
54030: PUSH
54031: LD_INT 1
54033: ST_TO_ADDR
// if p3 = 116 then
54034: LD_VAR 0 3
54038: PUSH
54039: LD_INT 116
54041: EQUAL
54042: IFFALSE 54052
// sComputer := true ;
54044: LD_ADDR_EXP 92
54048: PUSH
54049: LD_INT 1
54051: ST_TO_ADDR
// if p3 = 117 then
54052: LD_VAR 0 3
54056: PUSH
54057: LD_INT 117
54059: EQUAL
54060: IFFALSE 54070
// s30 := true ;
54062: LD_ADDR_EXP 93
54066: PUSH
54067: LD_INT 1
54069: ST_TO_ADDR
// if p3 = 118 then
54070: LD_VAR 0 3
54074: PUSH
54075: LD_INT 118
54077: EQUAL
54078: IFFALSE 54088
// s60 := true ;
54080: LD_ADDR_EXP 94
54084: PUSH
54085: LD_INT 1
54087: ST_TO_ADDR
// end ; if p2 = hack_mode then
54088: LD_VAR 0 2
54092: PUSH
54093: LD_INT 101
54095: EQUAL
54096: IFFALSE 54224
// begin case p3 of 1 :
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 1
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 54118
54111: POP
// hHackUnlimitedResources ; 2 :
54112: CALL 66371 0 0
54116: GO 54224
54118: LD_INT 2
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54133
54126: POP
// hHackSetLevel10 ; 3 :
54127: CALL 66504 0 0
54131: GO 54224
54133: LD_INT 3
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54141
54139: GO 54148
54141: POP
// hHackSetLevel10YourUnits ; 4 :
54142: CALL 66589 0 0
54146: GO 54224
54148: LD_INT 4
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54163
54156: POP
// hHackInvincible ; 5 :
54157: CALL 67037 0 0
54161: GO 54224
54163: LD_INT 5
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54171
54169: GO 54178
54171: POP
// hHackInvisible ; 6 :
54172: CALL 67148 0 0
54176: GO 54224
54178: LD_INT 6
54180: DOUBLE
54181: EQUAL
54182: IFTRUE 54186
54184: GO 54193
54186: POP
// hHackChangeYourSide ; 7 :
54187: CALL 67205 0 0
54191: GO 54224
54193: LD_INT 7
54195: DOUBLE
54196: EQUAL
54197: IFTRUE 54201
54199: GO 54208
54201: POP
// hHackChangeUnitSide ; 8 :
54202: CALL 67247 0 0
54206: GO 54224
54208: LD_INT 8
54210: DOUBLE
54211: EQUAL
54212: IFTRUE 54216
54214: GO 54223
54216: POP
// hHackFog ; end ;
54217: CALL 67348 0 0
54221: GO 54224
54223: POP
// end ; if p2 = game_save_mode then
54224: LD_VAR 0 2
54228: PUSH
54229: LD_INT 102
54231: EQUAL
54232: IFFALSE 54287
// begin if p3 = 1 then
54234: LD_VAR 0 3
54238: PUSH
54239: LD_INT 1
54241: EQUAL
54242: IFFALSE 54254
// globalGameSaveCounter := p4 ;
54244: LD_ADDR_EXP 37
54248: PUSH
54249: LD_VAR 0 4
54253: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54254: LD_VAR 0 3
54258: PUSH
54259: LD_INT 2
54261: EQUAL
54262: PUSH
54263: LD_EXP 37
54267: AND
54268: IFFALSE 54287
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54270: LD_STRING setGameSaveCounter(
54272: PUSH
54273: LD_EXP 37
54277: STR
54278: PUSH
54279: LD_STRING )
54281: STR
54282: PPUSH
54283: CALL_OW 559
// end ; end ;
54287: LD_VAR 0 7
54291: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54292: LD_INT 0
54294: PPUSH
// streamModeActive := false ;
54295: LD_ADDR_EXP 38
54299: PUSH
54300: LD_INT 0
54302: ST_TO_ADDR
// normalCounter := 36 ;
54303: LD_ADDR_EXP 39
54307: PUSH
54308: LD_INT 36
54310: ST_TO_ADDR
// hardcoreCounter := 18 ;
54311: LD_ADDR_EXP 40
54315: PUSH
54316: LD_INT 18
54318: ST_TO_ADDR
// sRocket := false ;
54319: LD_ADDR_EXP 43
54323: PUSH
54324: LD_INT 0
54326: ST_TO_ADDR
// sSpeed := false ;
54327: LD_ADDR_EXP 42
54331: PUSH
54332: LD_INT 0
54334: ST_TO_ADDR
// sEngine := false ;
54335: LD_ADDR_EXP 44
54339: PUSH
54340: LD_INT 0
54342: ST_TO_ADDR
// sSpec := false ;
54343: LD_ADDR_EXP 41
54347: PUSH
54348: LD_INT 0
54350: ST_TO_ADDR
// sLevel := false ;
54351: LD_ADDR_EXP 45
54355: PUSH
54356: LD_INT 0
54358: ST_TO_ADDR
// sArmoury := false ;
54359: LD_ADDR_EXP 46
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// sRadar := false ;
54367: LD_ADDR_EXP 47
54371: PUSH
54372: LD_INT 0
54374: ST_TO_ADDR
// sBunker := false ;
54375: LD_ADDR_EXP 48
54379: PUSH
54380: LD_INT 0
54382: ST_TO_ADDR
// sHack := false ;
54383: LD_ADDR_EXP 49
54387: PUSH
54388: LD_INT 0
54390: ST_TO_ADDR
// sFire := false ;
54391: LD_ADDR_EXP 50
54395: PUSH
54396: LD_INT 0
54398: ST_TO_ADDR
// sRefresh := false ;
54399: LD_ADDR_EXP 51
54403: PUSH
54404: LD_INT 0
54406: ST_TO_ADDR
// sExp := false ;
54407: LD_ADDR_EXP 52
54411: PUSH
54412: LD_INT 0
54414: ST_TO_ADDR
// sDepot := false ;
54415: LD_ADDR_EXP 53
54419: PUSH
54420: LD_INT 0
54422: ST_TO_ADDR
// sFlag := false ;
54423: LD_ADDR_EXP 54
54427: PUSH
54428: LD_INT 0
54430: ST_TO_ADDR
// sKamikadze := false ;
54431: LD_ADDR_EXP 62
54435: PUSH
54436: LD_INT 0
54438: ST_TO_ADDR
// sTroll := false ;
54439: LD_ADDR_EXP 63
54443: PUSH
54444: LD_INT 0
54446: ST_TO_ADDR
// sSlow := false ;
54447: LD_ADDR_EXP 64
54451: PUSH
54452: LD_INT 0
54454: ST_TO_ADDR
// sLack := false ;
54455: LD_ADDR_EXP 65
54459: PUSH
54460: LD_INT 0
54462: ST_TO_ADDR
// sTank := false ;
54463: LD_ADDR_EXP 67
54467: PUSH
54468: LD_INT 0
54470: ST_TO_ADDR
// sRemote := false ;
54471: LD_ADDR_EXP 68
54475: PUSH
54476: LD_INT 0
54478: ST_TO_ADDR
// sPowell := false ;
54479: LD_ADDR_EXP 69
54483: PUSH
54484: LD_INT 0
54486: ST_TO_ADDR
// sTeleport := false ;
54487: LD_ADDR_EXP 72
54491: PUSH
54492: LD_INT 0
54494: ST_TO_ADDR
// sOilTower := false ;
54495: LD_ADDR_EXP 74
54499: PUSH
54500: LD_INT 0
54502: ST_TO_ADDR
// sShovel := false ;
54503: LD_ADDR_EXP 75
54507: PUSH
54508: LD_INT 0
54510: ST_TO_ADDR
// sSheik := false ;
54511: LD_ADDR_EXP 76
54515: PUSH
54516: LD_INT 0
54518: ST_TO_ADDR
// sEarthquake := false ;
54519: LD_ADDR_EXP 78
54523: PUSH
54524: LD_INT 0
54526: ST_TO_ADDR
// sAI := false ;
54527: LD_ADDR_EXP 79
54531: PUSH
54532: LD_INT 0
54534: ST_TO_ADDR
// sCargo := false ;
54535: LD_ADDR_EXP 82
54539: PUSH
54540: LD_INT 0
54542: ST_TO_ADDR
// sDLaser := false ;
54543: LD_ADDR_EXP 83
54547: PUSH
54548: LD_INT 0
54550: ST_TO_ADDR
// sExchange := false ;
54551: LD_ADDR_EXP 84
54555: PUSH
54556: LD_INT 0
54558: ST_TO_ADDR
// sFac := false ;
54559: LD_ADDR_EXP 85
54563: PUSH
54564: LD_INT 0
54566: ST_TO_ADDR
// sPower := false ;
54567: LD_ADDR_EXP 86
54571: PUSH
54572: LD_INT 0
54574: ST_TO_ADDR
// sRandom := false ;
54575: LD_ADDR_EXP 87
54579: PUSH
54580: LD_INT 0
54582: ST_TO_ADDR
// sShield := false ;
54583: LD_ADDR_EXP 88
54587: PUSH
54588: LD_INT 0
54590: ST_TO_ADDR
// sTime := false ;
54591: LD_ADDR_EXP 89
54595: PUSH
54596: LD_INT 0
54598: ST_TO_ADDR
// sTools := false ;
54599: LD_ADDR_EXP 90
54603: PUSH
54604: LD_INT 0
54606: ST_TO_ADDR
// sSold := false ;
54607: LD_ADDR_EXP 55
54611: PUSH
54612: LD_INT 0
54614: ST_TO_ADDR
// sDiff := false ;
54615: LD_ADDR_EXP 56
54619: PUSH
54620: LD_INT 0
54622: ST_TO_ADDR
// sFog := false ;
54623: LD_ADDR_EXP 59
54627: PUSH
54628: LD_INT 0
54630: ST_TO_ADDR
// sReset := false ;
54631: LD_ADDR_EXP 60
54635: PUSH
54636: LD_INT 0
54638: ST_TO_ADDR
// sSun := false ;
54639: LD_ADDR_EXP 61
54643: PUSH
54644: LD_INT 0
54646: ST_TO_ADDR
// sTiger := false ;
54647: LD_ADDR_EXP 57
54651: PUSH
54652: LD_INT 0
54654: ST_TO_ADDR
// sBomb := false ;
54655: LD_ADDR_EXP 58
54659: PUSH
54660: LD_INT 0
54662: ST_TO_ADDR
// sWound := false ;
54663: LD_ADDR_EXP 66
54667: PUSH
54668: LD_INT 0
54670: ST_TO_ADDR
// sBetray := false ;
54671: LD_ADDR_EXP 70
54675: PUSH
54676: LD_INT 0
54678: ST_TO_ADDR
// sContamin := false ;
54679: LD_ADDR_EXP 71
54683: PUSH
54684: LD_INT 0
54686: ST_TO_ADDR
// sOil := false ;
54687: LD_ADDR_EXP 73
54691: PUSH
54692: LD_INT 0
54694: ST_TO_ADDR
// sStu := false ;
54695: LD_ADDR_EXP 77
54699: PUSH
54700: LD_INT 0
54702: ST_TO_ADDR
// sBazooka := false ;
54703: LD_ADDR_EXP 80
54707: PUSH
54708: LD_INT 0
54710: ST_TO_ADDR
// sMortar := false ;
54711: LD_ADDR_EXP 81
54715: PUSH
54716: LD_INT 0
54718: ST_TO_ADDR
// sRanger := false ;
54719: LD_ADDR_EXP 91
54723: PUSH
54724: LD_INT 0
54726: ST_TO_ADDR
// sComputer := false ;
54727: LD_ADDR_EXP 92
54731: PUSH
54732: LD_INT 0
54734: ST_TO_ADDR
// s30 := false ;
54735: LD_ADDR_EXP 93
54739: PUSH
54740: LD_INT 0
54742: ST_TO_ADDR
// s60 := false ;
54743: LD_ADDR_EXP 94
54747: PUSH
54748: LD_INT 0
54750: ST_TO_ADDR
// end ;
54751: LD_VAR 0 1
54755: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54756: LD_INT 0
54758: PPUSH
54759: PPUSH
54760: PPUSH
54761: PPUSH
54762: PPUSH
54763: PPUSH
54764: PPUSH
// result := [ ] ;
54765: LD_ADDR_VAR 0 2
54769: PUSH
54770: EMPTY
54771: ST_TO_ADDR
// if campaign_id = 1 then
54772: LD_OWVAR 69
54776: PUSH
54777: LD_INT 1
54779: EQUAL
54780: IFFALSE 57946
// begin case mission_number of 1 :
54782: LD_OWVAR 70
54786: PUSH
54787: LD_INT 1
54789: DOUBLE
54790: EQUAL
54791: IFTRUE 54795
54793: GO 54871
54795: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54796: LD_ADDR_VAR 0 2
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: LD_INT 11
54809: PUSH
54810: LD_INT 12
54812: PUSH
54813: LD_INT 15
54815: PUSH
54816: LD_INT 16
54818: PUSH
54819: LD_INT 22
54821: PUSH
54822: LD_INT 23
54824: PUSH
54825: LD_INT 26
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 101
54841: PUSH
54842: LD_INT 102
54844: PUSH
54845: LD_INT 106
54847: PUSH
54848: LD_INT 116
54850: PUSH
54851: LD_INT 117
54853: PUSH
54854: LD_INT 118
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: ST_TO_ADDR
54869: GO 57944
54871: LD_INT 2
54873: DOUBLE
54874: EQUAL
54875: IFTRUE 54879
54877: GO 54963
54879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54880: LD_ADDR_VAR 0 2
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 4
54890: PUSH
54891: LD_INT 11
54893: PUSH
54894: LD_INT 12
54896: PUSH
54897: LD_INT 15
54899: PUSH
54900: LD_INT 16
54902: PUSH
54903: LD_INT 22
54905: PUSH
54906: LD_INT 23
54908: PUSH
54909: LD_INT 26
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 101
54925: PUSH
54926: LD_INT 102
54928: PUSH
54929: LD_INT 105
54931: PUSH
54932: LD_INT 106
54934: PUSH
54935: LD_INT 108
54937: PUSH
54938: LD_INT 116
54940: PUSH
54941: LD_INT 117
54943: PUSH
54944: LD_INT 118
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: ST_TO_ADDR
54961: GO 57944
54963: LD_INT 3
54965: DOUBLE
54966: EQUAL
54967: IFTRUE 54971
54969: GO 55059
54971: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54972: LD_ADDR_VAR 0 2
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: LD_INT 11
54988: PUSH
54989: LD_INT 12
54991: PUSH
54992: LD_INT 15
54994: PUSH
54995: LD_INT 16
54997: PUSH
54998: LD_INT 22
55000: PUSH
55001: LD_INT 26
55003: PUSH
55004: LD_INT 36
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 101
55021: PUSH
55022: LD_INT 102
55024: PUSH
55025: LD_INT 105
55027: PUSH
55028: LD_INT 106
55030: PUSH
55031: LD_INT 108
55033: PUSH
55034: LD_INT 116
55036: PUSH
55037: LD_INT 117
55039: PUSH
55040: LD_INT 118
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: ST_TO_ADDR
55057: GO 57944
55059: LD_INT 4
55061: DOUBLE
55062: EQUAL
55063: IFTRUE 55067
55065: GO 55163
55067: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55068: LD_ADDR_VAR 0 2
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: LD_INT 5
55081: PUSH
55082: LD_INT 8
55084: PUSH
55085: LD_INT 11
55087: PUSH
55088: LD_INT 12
55090: PUSH
55091: LD_INT 15
55093: PUSH
55094: LD_INT 16
55096: PUSH
55097: LD_INT 22
55099: PUSH
55100: LD_INT 23
55102: PUSH
55103: LD_INT 26
55105: PUSH
55106: LD_INT 36
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 101
55125: PUSH
55126: LD_INT 102
55128: PUSH
55129: LD_INT 105
55131: PUSH
55132: LD_INT 106
55134: PUSH
55135: LD_INT 108
55137: PUSH
55138: LD_INT 116
55140: PUSH
55141: LD_INT 117
55143: PUSH
55144: LD_INT 118
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: ST_TO_ADDR
55161: GO 57944
55163: LD_INT 5
55165: DOUBLE
55166: EQUAL
55167: IFTRUE 55171
55169: GO 55283
55171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55172: LD_ADDR_VAR 0 2
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 4
55182: PUSH
55183: LD_INT 5
55185: PUSH
55186: LD_INT 6
55188: PUSH
55189: LD_INT 8
55191: PUSH
55192: LD_INT 11
55194: PUSH
55195: LD_INT 12
55197: PUSH
55198: LD_INT 15
55200: PUSH
55201: LD_INT 16
55203: PUSH
55204: LD_INT 22
55206: PUSH
55207: LD_INT 23
55209: PUSH
55210: LD_INT 25
55212: PUSH
55213: LD_INT 26
55215: PUSH
55216: LD_INT 36
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 101
55237: PUSH
55238: LD_INT 102
55240: PUSH
55241: LD_INT 105
55243: PUSH
55244: LD_INT 106
55246: PUSH
55247: LD_INT 108
55249: PUSH
55250: LD_INT 109
55252: PUSH
55253: LD_INT 112
55255: PUSH
55256: LD_INT 116
55258: PUSH
55259: LD_INT 117
55261: PUSH
55262: LD_INT 118
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: ST_TO_ADDR
55281: GO 57944
55283: LD_INT 6
55285: DOUBLE
55286: EQUAL
55287: IFTRUE 55291
55289: GO 55423
55291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55292: LD_ADDR_VAR 0 2
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 5
55305: PUSH
55306: LD_INT 6
55308: PUSH
55309: LD_INT 8
55311: PUSH
55312: LD_INT 11
55314: PUSH
55315: LD_INT 12
55317: PUSH
55318: LD_INT 15
55320: PUSH
55321: LD_INT 16
55323: PUSH
55324: LD_INT 20
55326: PUSH
55327: LD_INT 21
55329: PUSH
55330: LD_INT 22
55332: PUSH
55333: LD_INT 23
55335: PUSH
55336: LD_INT 25
55338: PUSH
55339: LD_INT 26
55341: PUSH
55342: LD_INT 30
55344: PUSH
55345: LD_INT 31
55347: PUSH
55348: LD_INT 32
55350: PUSH
55351: LD_INT 36
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 101
55377: PUSH
55378: LD_INT 102
55380: PUSH
55381: LD_INT 105
55383: PUSH
55384: LD_INT 106
55386: PUSH
55387: LD_INT 108
55389: PUSH
55390: LD_INT 109
55392: PUSH
55393: LD_INT 112
55395: PUSH
55396: LD_INT 116
55398: PUSH
55399: LD_INT 117
55401: PUSH
55402: LD_INT 118
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: ST_TO_ADDR
55421: GO 57944
55423: LD_INT 7
55425: DOUBLE
55426: EQUAL
55427: IFTRUE 55431
55429: GO 55543
55431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55432: LD_ADDR_VAR 0 2
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 4
55442: PUSH
55443: LD_INT 5
55445: PUSH
55446: LD_INT 7
55448: PUSH
55449: LD_INT 11
55451: PUSH
55452: LD_INT 12
55454: PUSH
55455: LD_INT 15
55457: PUSH
55458: LD_INT 16
55460: PUSH
55461: LD_INT 20
55463: PUSH
55464: LD_INT 21
55466: PUSH
55467: LD_INT 22
55469: PUSH
55470: LD_INT 23
55472: PUSH
55473: LD_INT 25
55475: PUSH
55476: LD_INT 26
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 101
55497: PUSH
55498: LD_INT 102
55500: PUSH
55501: LD_INT 103
55503: PUSH
55504: LD_INT 105
55506: PUSH
55507: LD_INT 106
55509: PUSH
55510: LD_INT 108
55512: PUSH
55513: LD_INT 112
55515: PUSH
55516: LD_INT 116
55518: PUSH
55519: LD_INT 117
55521: PUSH
55522: LD_INT 118
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: ST_TO_ADDR
55541: GO 57944
55543: LD_INT 8
55545: DOUBLE
55546: EQUAL
55547: IFTRUE 55551
55549: GO 55691
55551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55552: LD_ADDR_VAR 0 2
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: LD_INT 5
55565: PUSH
55566: LD_INT 6
55568: PUSH
55569: LD_INT 7
55571: PUSH
55572: LD_INT 8
55574: PUSH
55575: LD_INT 11
55577: PUSH
55578: LD_INT 12
55580: PUSH
55581: LD_INT 15
55583: PUSH
55584: LD_INT 16
55586: PUSH
55587: LD_INT 20
55589: PUSH
55590: LD_INT 21
55592: PUSH
55593: LD_INT 22
55595: PUSH
55596: LD_INT 23
55598: PUSH
55599: LD_INT 25
55601: PUSH
55602: LD_INT 26
55604: PUSH
55605: LD_INT 30
55607: PUSH
55608: LD_INT 31
55610: PUSH
55611: LD_INT 32
55613: PUSH
55614: LD_INT 36
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 101
55641: PUSH
55642: LD_INT 102
55644: PUSH
55645: LD_INT 103
55647: PUSH
55648: LD_INT 105
55650: PUSH
55651: LD_INT 106
55653: PUSH
55654: LD_INT 108
55656: PUSH
55657: LD_INT 109
55659: PUSH
55660: LD_INT 112
55662: PUSH
55663: LD_INT 116
55665: PUSH
55666: LD_INT 117
55668: PUSH
55669: LD_INT 118
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: ST_TO_ADDR
55689: GO 57944
55691: LD_INT 9
55693: DOUBLE
55694: EQUAL
55695: IFTRUE 55699
55697: GO 55847
55699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
55700: LD_ADDR_VAR 0 2
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: LD_INT 5
55713: PUSH
55714: LD_INT 6
55716: PUSH
55717: LD_INT 7
55719: PUSH
55720: LD_INT 8
55722: PUSH
55723: LD_INT 11
55725: PUSH
55726: LD_INT 12
55728: PUSH
55729: LD_INT 15
55731: PUSH
55732: LD_INT 16
55734: PUSH
55735: LD_INT 20
55737: PUSH
55738: LD_INT 21
55740: PUSH
55741: LD_INT 22
55743: PUSH
55744: LD_INT 23
55746: PUSH
55747: LD_INT 25
55749: PUSH
55750: LD_INT 26
55752: PUSH
55753: LD_INT 28
55755: PUSH
55756: LD_INT 30
55758: PUSH
55759: LD_INT 31
55761: PUSH
55762: LD_INT 32
55764: PUSH
55765: LD_INT 36
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 101
55793: PUSH
55794: LD_INT 102
55796: PUSH
55797: LD_INT 103
55799: PUSH
55800: LD_INT 105
55802: PUSH
55803: LD_INT 106
55805: PUSH
55806: LD_INT 108
55808: PUSH
55809: LD_INT 109
55811: PUSH
55812: LD_INT 112
55814: PUSH
55815: LD_INT 114
55817: PUSH
55818: LD_INT 116
55820: PUSH
55821: LD_INT 117
55823: PUSH
55824: LD_INT 118
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: ST_TO_ADDR
55845: GO 57944
55847: LD_INT 10
55849: DOUBLE
55850: EQUAL
55851: IFTRUE 55855
55853: GO 56051
55855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55856: LD_ADDR_VAR 0 2
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: LD_INT 5
55869: PUSH
55870: LD_INT 6
55872: PUSH
55873: LD_INT 7
55875: PUSH
55876: LD_INT 8
55878: PUSH
55879: LD_INT 9
55881: PUSH
55882: LD_INT 10
55884: PUSH
55885: LD_INT 11
55887: PUSH
55888: LD_INT 12
55890: PUSH
55891: LD_INT 13
55893: PUSH
55894: LD_INT 14
55896: PUSH
55897: LD_INT 15
55899: PUSH
55900: LD_INT 16
55902: PUSH
55903: LD_INT 17
55905: PUSH
55906: LD_INT 18
55908: PUSH
55909: LD_INT 19
55911: PUSH
55912: LD_INT 20
55914: PUSH
55915: LD_INT 21
55917: PUSH
55918: LD_INT 22
55920: PUSH
55921: LD_INT 23
55923: PUSH
55924: LD_INT 24
55926: PUSH
55927: LD_INT 25
55929: PUSH
55930: LD_INT 26
55932: PUSH
55933: LD_INT 28
55935: PUSH
55936: LD_INT 30
55938: PUSH
55939: LD_INT 31
55941: PUSH
55942: LD_INT 32
55944: PUSH
55945: LD_INT 36
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 101
55981: PUSH
55982: LD_INT 102
55984: PUSH
55985: LD_INT 103
55987: PUSH
55988: LD_INT 104
55990: PUSH
55991: LD_INT 105
55993: PUSH
55994: LD_INT 106
55996: PUSH
55997: LD_INT 107
55999: PUSH
56000: LD_INT 108
56002: PUSH
56003: LD_INT 109
56005: PUSH
56006: LD_INT 110
56008: PUSH
56009: LD_INT 111
56011: PUSH
56012: LD_INT 112
56014: PUSH
56015: LD_INT 114
56017: PUSH
56018: LD_INT 116
56020: PUSH
56021: LD_INT 117
56023: PUSH
56024: LD_INT 118
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: ST_TO_ADDR
56049: GO 57944
56051: LD_INT 11
56053: DOUBLE
56054: EQUAL
56055: IFTRUE 56059
56057: GO 56263
56059: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56060: LD_ADDR_VAR 0 2
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 4
56073: PUSH
56074: LD_INT 5
56076: PUSH
56077: LD_INT 6
56079: PUSH
56080: LD_INT 7
56082: PUSH
56083: LD_INT 8
56085: PUSH
56086: LD_INT 9
56088: PUSH
56089: LD_INT 10
56091: PUSH
56092: LD_INT 11
56094: PUSH
56095: LD_INT 12
56097: PUSH
56098: LD_INT 13
56100: PUSH
56101: LD_INT 14
56103: PUSH
56104: LD_INT 15
56106: PUSH
56107: LD_INT 16
56109: PUSH
56110: LD_INT 17
56112: PUSH
56113: LD_INT 18
56115: PUSH
56116: LD_INT 19
56118: PUSH
56119: LD_INT 20
56121: PUSH
56122: LD_INT 21
56124: PUSH
56125: LD_INT 22
56127: PUSH
56128: LD_INT 23
56130: PUSH
56131: LD_INT 24
56133: PUSH
56134: LD_INT 25
56136: PUSH
56137: LD_INT 26
56139: PUSH
56140: LD_INT 28
56142: PUSH
56143: LD_INT 30
56145: PUSH
56146: LD_INT 31
56148: PUSH
56149: LD_INT 32
56151: PUSH
56152: LD_INT 34
56154: PUSH
56155: LD_INT 36
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 101
56193: PUSH
56194: LD_INT 102
56196: PUSH
56197: LD_INT 103
56199: PUSH
56200: LD_INT 104
56202: PUSH
56203: LD_INT 105
56205: PUSH
56206: LD_INT 106
56208: PUSH
56209: LD_INT 107
56211: PUSH
56212: LD_INT 108
56214: PUSH
56215: LD_INT 109
56217: PUSH
56218: LD_INT 110
56220: PUSH
56221: LD_INT 111
56223: PUSH
56224: LD_INT 112
56226: PUSH
56227: LD_INT 114
56229: PUSH
56230: LD_INT 116
56232: PUSH
56233: LD_INT 117
56235: PUSH
56236: LD_INT 118
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: ST_TO_ADDR
56261: GO 57944
56263: LD_INT 12
56265: DOUBLE
56266: EQUAL
56267: IFTRUE 56271
56269: GO 56491
56271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56272: LD_ADDR_VAR 0 2
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: LD_INT 5
56291: PUSH
56292: LD_INT 6
56294: PUSH
56295: LD_INT 7
56297: PUSH
56298: LD_INT 8
56300: PUSH
56301: LD_INT 9
56303: PUSH
56304: LD_INT 10
56306: PUSH
56307: LD_INT 11
56309: PUSH
56310: LD_INT 12
56312: PUSH
56313: LD_INT 13
56315: PUSH
56316: LD_INT 14
56318: PUSH
56319: LD_INT 15
56321: PUSH
56322: LD_INT 16
56324: PUSH
56325: LD_INT 17
56327: PUSH
56328: LD_INT 18
56330: PUSH
56331: LD_INT 19
56333: PUSH
56334: LD_INT 20
56336: PUSH
56337: LD_INT 21
56339: PUSH
56340: LD_INT 22
56342: PUSH
56343: LD_INT 23
56345: PUSH
56346: LD_INT 24
56348: PUSH
56349: LD_INT 25
56351: PUSH
56352: LD_INT 26
56354: PUSH
56355: LD_INT 27
56357: PUSH
56358: LD_INT 28
56360: PUSH
56361: LD_INT 30
56363: PUSH
56364: LD_INT 31
56366: PUSH
56367: LD_INT 32
56369: PUSH
56370: LD_INT 33
56372: PUSH
56373: LD_INT 34
56375: PUSH
56376: LD_INT 36
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 101
56417: PUSH
56418: LD_INT 102
56420: PUSH
56421: LD_INT 103
56423: PUSH
56424: LD_INT 104
56426: PUSH
56427: LD_INT 105
56429: PUSH
56430: LD_INT 106
56432: PUSH
56433: LD_INT 107
56435: PUSH
56436: LD_INT 108
56438: PUSH
56439: LD_INT 109
56441: PUSH
56442: LD_INT 110
56444: PUSH
56445: LD_INT 111
56447: PUSH
56448: LD_INT 112
56450: PUSH
56451: LD_INT 113
56453: PUSH
56454: LD_INT 114
56456: PUSH
56457: LD_INT 116
56459: PUSH
56460: LD_INT 117
56462: PUSH
56463: LD_INT 118
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: ST_TO_ADDR
56489: GO 57944
56491: LD_INT 13
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56499
56497: GO 56707
56499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56500: LD_ADDR_VAR 0 2
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: LD_INT 5
56519: PUSH
56520: LD_INT 8
56522: PUSH
56523: LD_INT 9
56525: PUSH
56526: LD_INT 10
56528: PUSH
56529: LD_INT 11
56531: PUSH
56532: LD_INT 12
56534: PUSH
56535: LD_INT 14
56537: PUSH
56538: LD_INT 15
56540: PUSH
56541: LD_INT 16
56543: PUSH
56544: LD_INT 17
56546: PUSH
56547: LD_INT 18
56549: PUSH
56550: LD_INT 19
56552: PUSH
56553: LD_INT 20
56555: PUSH
56556: LD_INT 21
56558: PUSH
56559: LD_INT 22
56561: PUSH
56562: LD_INT 23
56564: PUSH
56565: LD_INT 24
56567: PUSH
56568: LD_INT 25
56570: PUSH
56571: LD_INT 26
56573: PUSH
56574: LD_INT 27
56576: PUSH
56577: LD_INT 28
56579: PUSH
56580: LD_INT 30
56582: PUSH
56583: LD_INT 31
56585: PUSH
56586: LD_INT 32
56588: PUSH
56589: LD_INT 33
56591: PUSH
56592: LD_INT 34
56594: PUSH
56595: LD_INT 36
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 101
56633: PUSH
56634: LD_INT 102
56636: PUSH
56637: LD_INT 103
56639: PUSH
56640: LD_INT 104
56642: PUSH
56643: LD_INT 105
56645: PUSH
56646: LD_INT 106
56648: PUSH
56649: LD_INT 107
56651: PUSH
56652: LD_INT 108
56654: PUSH
56655: LD_INT 109
56657: PUSH
56658: LD_INT 110
56660: PUSH
56661: LD_INT 111
56663: PUSH
56664: LD_INT 112
56666: PUSH
56667: LD_INT 113
56669: PUSH
56670: LD_INT 114
56672: PUSH
56673: LD_INT 116
56675: PUSH
56676: LD_INT 117
56678: PUSH
56679: LD_INT 118
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: ST_TO_ADDR
56705: GO 57944
56707: LD_INT 14
56709: DOUBLE
56710: EQUAL
56711: IFTRUE 56715
56713: GO 56939
56715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56716: LD_ADDR_VAR 0 2
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: LD_INT 4
56732: PUSH
56733: LD_INT 5
56735: PUSH
56736: LD_INT 6
56738: PUSH
56739: LD_INT 7
56741: PUSH
56742: LD_INT 8
56744: PUSH
56745: LD_INT 9
56747: PUSH
56748: LD_INT 10
56750: PUSH
56751: LD_INT 11
56753: PUSH
56754: LD_INT 12
56756: PUSH
56757: LD_INT 13
56759: PUSH
56760: LD_INT 14
56762: PUSH
56763: LD_INT 15
56765: PUSH
56766: LD_INT 16
56768: PUSH
56769: LD_INT 17
56771: PUSH
56772: LD_INT 18
56774: PUSH
56775: LD_INT 19
56777: PUSH
56778: LD_INT 20
56780: PUSH
56781: LD_INT 21
56783: PUSH
56784: LD_INT 22
56786: PUSH
56787: LD_INT 23
56789: PUSH
56790: LD_INT 24
56792: PUSH
56793: LD_INT 25
56795: PUSH
56796: LD_INT 26
56798: PUSH
56799: LD_INT 27
56801: PUSH
56802: LD_INT 28
56804: PUSH
56805: LD_INT 29
56807: PUSH
56808: LD_INT 30
56810: PUSH
56811: LD_INT 31
56813: PUSH
56814: LD_INT 32
56816: PUSH
56817: LD_INT 33
56819: PUSH
56820: LD_INT 34
56822: PUSH
56823: LD_INT 36
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 101
56865: PUSH
56866: LD_INT 102
56868: PUSH
56869: LD_INT 103
56871: PUSH
56872: LD_INT 104
56874: PUSH
56875: LD_INT 105
56877: PUSH
56878: LD_INT 106
56880: PUSH
56881: LD_INT 107
56883: PUSH
56884: LD_INT 108
56886: PUSH
56887: LD_INT 109
56889: PUSH
56890: LD_INT 110
56892: PUSH
56893: LD_INT 111
56895: PUSH
56896: LD_INT 112
56898: PUSH
56899: LD_INT 113
56901: PUSH
56902: LD_INT 114
56904: PUSH
56905: LD_INT 116
56907: PUSH
56908: LD_INT 117
56910: PUSH
56911: LD_INT 118
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: ST_TO_ADDR
56937: GO 57944
56939: LD_INT 15
56941: DOUBLE
56942: EQUAL
56943: IFTRUE 56947
56945: GO 57171
56947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56948: LD_ADDR_VAR 0 2
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 4
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: LD_INT 6
56970: PUSH
56971: LD_INT 7
56973: PUSH
56974: LD_INT 8
56976: PUSH
56977: LD_INT 9
56979: PUSH
56980: LD_INT 10
56982: PUSH
56983: LD_INT 11
56985: PUSH
56986: LD_INT 12
56988: PUSH
56989: LD_INT 13
56991: PUSH
56992: LD_INT 14
56994: PUSH
56995: LD_INT 15
56997: PUSH
56998: LD_INT 16
57000: PUSH
57001: LD_INT 17
57003: PUSH
57004: LD_INT 18
57006: PUSH
57007: LD_INT 19
57009: PUSH
57010: LD_INT 20
57012: PUSH
57013: LD_INT 21
57015: PUSH
57016: LD_INT 22
57018: PUSH
57019: LD_INT 23
57021: PUSH
57022: LD_INT 24
57024: PUSH
57025: LD_INT 25
57027: PUSH
57028: LD_INT 26
57030: PUSH
57031: LD_INT 27
57033: PUSH
57034: LD_INT 28
57036: PUSH
57037: LD_INT 29
57039: PUSH
57040: LD_INT 30
57042: PUSH
57043: LD_INT 31
57045: PUSH
57046: LD_INT 32
57048: PUSH
57049: LD_INT 33
57051: PUSH
57052: LD_INT 34
57054: PUSH
57055: LD_INT 36
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 101
57097: PUSH
57098: LD_INT 102
57100: PUSH
57101: LD_INT 103
57103: PUSH
57104: LD_INT 104
57106: PUSH
57107: LD_INT 105
57109: PUSH
57110: LD_INT 106
57112: PUSH
57113: LD_INT 107
57115: PUSH
57116: LD_INT 108
57118: PUSH
57119: LD_INT 109
57121: PUSH
57122: LD_INT 110
57124: PUSH
57125: LD_INT 111
57127: PUSH
57128: LD_INT 112
57130: PUSH
57131: LD_INT 113
57133: PUSH
57134: LD_INT 114
57136: PUSH
57137: LD_INT 116
57139: PUSH
57140: LD_INT 117
57142: PUSH
57143: LD_INT 118
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: ST_TO_ADDR
57169: GO 57944
57171: LD_INT 16
57173: DOUBLE
57174: EQUAL
57175: IFTRUE 57179
57177: GO 57315
57179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57180: LD_ADDR_VAR 0 2
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 4
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: LD_INT 7
57196: PUSH
57197: LD_INT 11
57199: PUSH
57200: LD_INT 12
57202: PUSH
57203: LD_INT 15
57205: PUSH
57206: LD_INT 16
57208: PUSH
57209: LD_INT 20
57211: PUSH
57212: LD_INT 21
57214: PUSH
57215: LD_INT 22
57217: PUSH
57218: LD_INT 23
57220: PUSH
57221: LD_INT 25
57223: PUSH
57224: LD_INT 26
57226: PUSH
57227: LD_INT 30
57229: PUSH
57230: LD_INT 31
57232: PUSH
57233: LD_INT 32
57235: PUSH
57236: LD_INT 33
57238: PUSH
57239: LD_INT 34
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 101
57265: PUSH
57266: LD_INT 102
57268: PUSH
57269: LD_INT 103
57271: PUSH
57272: LD_INT 106
57274: PUSH
57275: LD_INT 108
57277: PUSH
57278: LD_INT 112
57280: PUSH
57281: LD_INT 113
57283: PUSH
57284: LD_INT 114
57286: PUSH
57287: LD_INT 116
57289: PUSH
57290: LD_INT 117
57292: PUSH
57293: LD_INT 118
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: ST_TO_ADDR
57313: GO 57944
57315: LD_INT 17
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57323
57321: GO 57547
57323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57324: LD_ADDR_VAR 0 2
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: LD_INT 5
57343: PUSH
57344: LD_INT 6
57346: PUSH
57347: LD_INT 7
57349: PUSH
57350: LD_INT 8
57352: PUSH
57353: LD_INT 9
57355: PUSH
57356: LD_INT 10
57358: PUSH
57359: LD_INT 11
57361: PUSH
57362: LD_INT 12
57364: PUSH
57365: LD_INT 13
57367: PUSH
57368: LD_INT 14
57370: PUSH
57371: LD_INT 15
57373: PUSH
57374: LD_INT 16
57376: PUSH
57377: LD_INT 17
57379: PUSH
57380: LD_INT 18
57382: PUSH
57383: LD_INT 19
57385: PUSH
57386: LD_INT 20
57388: PUSH
57389: LD_INT 21
57391: PUSH
57392: LD_INT 22
57394: PUSH
57395: LD_INT 23
57397: PUSH
57398: LD_INT 24
57400: PUSH
57401: LD_INT 25
57403: PUSH
57404: LD_INT 26
57406: PUSH
57407: LD_INT 27
57409: PUSH
57410: LD_INT 28
57412: PUSH
57413: LD_INT 29
57415: PUSH
57416: LD_INT 30
57418: PUSH
57419: LD_INT 31
57421: PUSH
57422: LD_INT 32
57424: PUSH
57425: LD_INT 33
57427: PUSH
57428: LD_INT 34
57430: PUSH
57431: LD_INT 36
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 101
57473: PUSH
57474: LD_INT 102
57476: PUSH
57477: LD_INT 103
57479: PUSH
57480: LD_INT 104
57482: PUSH
57483: LD_INT 105
57485: PUSH
57486: LD_INT 106
57488: PUSH
57489: LD_INT 107
57491: PUSH
57492: LD_INT 108
57494: PUSH
57495: LD_INT 109
57497: PUSH
57498: LD_INT 110
57500: PUSH
57501: LD_INT 111
57503: PUSH
57504: LD_INT 112
57506: PUSH
57507: LD_INT 113
57509: PUSH
57510: LD_INT 114
57512: PUSH
57513: LD_INT 116
57515: PUSH
57516: LD_INT 117
57518: PUSH
57519: LD_INT 118
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: ST_TO_ADDR
57545: GO 57944
57547: LD_INT 18
57549: DOUBLE
57550: EQUAL
57551: IFTRUE 57555
57553: GO 57703
57555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57556: LD_ADDR_VAR 0 2
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 4
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: LD_INT 7
57572: PUSH
57573: LD_INT 11
57575: PUSH
57576: LD_INT 12
57578: PUSH
57579: LD_INT 15
57581: PUSH
57582: LD_INT 16
57584: PUSH
57585: LD_INT 20
57587: PUSH
57588: LD_INT 21
57590: PUSH
57591: LD_INT 22
57593: PUSH
57594: LD_INT 23
57596: PUSH
57597: LD_INT 25
57599: PUSH
57600: LD_INT 26
57602: PUSH
57603: LD_INT 30
57605: PUSH
57606: LD_INT 31
57608: PUSH
57609: LD_INT 32
57611: PUSH
57612: LD_INT 33
57614: PUSH
57615: LD_INT 34
57617: PUSH
57618: LD_INT 35
57620: PUSH
57621: LD_INT 36
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 101
57649: PUSH
57650: LD_INT 102
57652: PUSH
57653: LD_INT 103
57655: PUSH
57656: LD_INT 106
57658: PUSH
57659: LD_INT 108
57661: PUSH
57662: LD_INT 112
57664: PUSH
57665: LD_INT 113
57667: PUSH
57668: LD_INT 114
57670: PUSH
57671: LD_INT 115
57673: PUSH
57674: LD_INT 116
57676: PUSH
57677: LD_INT 117
57679: PUSH
57680: LD_INT 118
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: ST_TO_ADDR
57701: GO 57944
57703: LD_INT 19
57705: DOUBLE
57706: EQUAL
57707: IFTRUE 57711
57709: GO 57943
57711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
57712: LD_ADDR_VAR 0 2
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: LD_INT 4
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 6
57734: PUSH
57735: LD_INT 7
57737: PUSH
57738: LD_INT 8
57740: PUSH
57741: LD_INT 9
57743: PUSH
57744: LD_INT 10
57746: PUSH
57747: LD_INT 11
57749: PUSH
57750: LD_INT 12
57752: PUSH
57753: LD_INT 13
57755: PUSH
57756: LD_INT 14
57758: PUSH
57759: LD_INT 15
57761: PUSH
57762: LD_INT 16
57764: PUSH
57765: LD_INT 17
57767: PUSH
57768: LD_INT 18
57770: PUSH
57771: LD_INT 19
57773: PUSH
57774: LD_INT 20
57776: PUSH
57777: LD_INT 21
57779: PUSH
57780: LD_INT 22
57782: PUSH
57783: LD_INT 23
57785: PUSH
57786: LD_INT 24
57788: PUSH
57789: LD_INT 25
57791: PUSH
57792: LD_INT 26
57794: PUSH
57795: LD_INT 27
57797: PUSH
57798: LD_INT 28
57800: PUSH
57801: LD_INT 29
57803: PUSH
57804: LD_INT 30
57806: PUSH
57807: LD_INT 31
57809: PUSH
57810: LD_INT 32
57812: PUSH
57813: LD_INT 33
57815: PUSH
57816: LD_INT 34
57818: PUSH
57819: LD_INT 35
57821: PUSH
57822: LD_INT 36
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 101
57865: PUSH
57866: LD_INT 102
57868: PUSH
57869: LD_INT 103
57871: PUSH
57872: LD_INT 104
57874: PUSH
57875: LD_INT 105
57877: PUSH
57878: LD_INT 106
57880: PUSH
57881: LD_INT 107
57883: PUSH
57884: LD_INT 108
57886: PUSH
57887: LD_INT 109
57889: PUSH
57890: LD_INT 110
57892: PUSH
57893: LD_INT 111
57895: PUSH
57896: LD_INT 112
57898: PUSH
57899: LD_INT 113
57901: PUSH
57902: LD_INT 114
57904: PUSH
57905: LD_INT 115
57907: PUSH
57908: LD_INT 116
57910: PUSH
57911: LD_INT 117
57913: PUSH
57914: LD_INT 118
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: ST_TO_ADDR
57941: GO 57944
57943: POP
// end else
57944: GO 58175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: LD_INT 5
57965: PUSH
57966: LD_INT 6
57968: PUSH
57969: LD_INT 7
57971: PUSH
57972: LD_INT 8
57974: PUSH
57975: LD_INT 9
57977: PUSH
57978: LD_INT 10
57980: PUSH
57981: LD_INT 11
57983: PUSH
57984: LD_INT 12
57986: PUSH
57987: LD_INT 13
57989: PUSH
57990: LD_INT 14
57992: PUSH
57993: LD_INT 15
57995: PUSH
57996: LD_INT 16
57998: PUSH
57999: LD_INT 17
58001: PUSH
58002: LD_INT 18
58004: PUSH
58005: LD_INT 19
58007: PUSH
58008: LD_INT 20
58010: PUSH
58011: LD_INT 21
58013: PUSH
58014: LD_INT 22
58016: PUSH
58017: LD_INT 23
58019: PUSH
58020: LD_INT 24
58022: PUSH
58023: LD_INT 25
58025: PUSH
58026: LD_INT 26
58028: PUSH
58029: LD_INT 27
58031: PUSH
58032: LD_INT 28
58034: PUSH
58035: LD_INT 29
58037: PUSH
58038: LD_INT 30
58040: PUSH
58041: LD_INT 31
58043: PUSH
58044: LD_INT 32
58046: PUSH
58047: LD_INT 33
58049: PUSH
58050: LD_INT 34
58052: PUSH
58053: LD_INT 35
58055: PUSH
58056: LD_INT 36
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 101
58099: PUSH
58100: LD_INT 102
58102: PUSH
58103: LD_INT 103
58105: PUSH
58106: LD_INT 104
58108: PUSH
58109: LD_INT 105
58111: PUSH
58112: LD_INT 106
58114: PUSH
58115: LD_INT 107
58117: PUSH
58118: LD_INT 108
58120: PUSH
58121: LD_INT 109
58123: PUSH
58124: LD_INT 110
58126: PUSH
58127: LD_INT 111
58129: PUSH
58130: LD_INT 112
58132: PUSH
58133: LD_INT 113
58135: PUSH
58136: LD_INT 114
58138: PUSH
58139: LD_INT 115
58141: PUSH
58142: LD_INT 116
58144: PUSH
58145: LD_INT 117
58147: PUSH
58148: LD_INT 118
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: ST_TO_ADDR
// if result then
58175: LD_VAR 0 2
58179: IFFALSE 58965
// begin normal :=  ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: LD_STRING 
58188: ST_TO_ADDR
// hardcore :=  ;
58189: LD_ADDR_VAR 0 6
58193: PUSH
58194: LD_STRING 
58196: ST_TO_ADDR
// active :=  ;
58197: LD_ADDR_VAR 0 7
58201: PUSH
58202: LD_STRING 
58204: ST_TO_ADDR
// for i = 1 to normalCounter do
58205: LD_ADDR_VAR 0 8
58209: PUSH
58210: DOUBLE
58211: LD_INT 1
58213: DEC
58214: ST_TO_ADDR
58215: LD_EXP 39
58219: PUSH
58220: FOR_TO
58221: IFFALSE 58322
// begin tmp := 0 ;
58223: LD_ADDR_VAR 0 3
58227: PUSH
58228: LD_STRING 0
58230: ST_TO_ADDR
// if result [ 1 ] then
58231: LD_VAR 0 2
58235: PUSH
58236: LD_INT 1
58238: ARRAY
58239: IFFALSE 58304
// if result [ 1 ] [ 1 ] = i then
58241: LD_VAR 0 2
58245: PUSH
58246: LD_INT 1
58248: ARRAY
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PUSH
58254: LD_VAR 0 8
58258: EQUAL
58259: IFFALSE 58304
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58261: LD_ADDR_VAR 0 2
58265: PUSH
58266: LD_VAR 0 2
58270: PPUSH
58271: LD_INT 1
58273: PPUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_INT 1
58281: ARRAY
58282: PPUSH
58283: LD_INT 1
58285: PPUSH
58286: CALL_OW 3
58290: PPUSH
58291: CALL_OW 1
58295: ST_TO_ADDR
// tmp := 1 ;
58296: LD_ADDR_VAR 0 3
58300: PUSH
58301: LD_STRING 1
58303: ST_TO_ADDR
// end ; normal := normal & tmp ;
58304: LD_ADDR_VAR 0 5
58308: PUSH
58309: LD_VAR 0 5
58313: PUSH
58314: LD_VAR 0 3
58318: STR
58319: ST_TO_ADDR
// end ;
58320: GO 58220
58322: POP
58323: POP
// for i = 1 to hardcoreCounter do
58324: LD_ADDR_VAR 0 8
58328: PUSH
58329: DOUBLE
58330: LD_INT 1
58332: DEC
58333: ST_TO_ADDR
58334: LD_EXP 40
58338: PUSH
58339: FOR_TO
58340: IFFALSE 58445
// begin tmp := 0 ;
58342: LD_ADDR_VAR 0 3
58346: PUSH
58347: LD_STRING 0
58349: ST_TO_ADDR
// if result [ 2 ] then
58350: LD_VAR 0 2
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: IFFALSE 58427
// if result [ 2 ] [ 1 ] = 100 + i then
58360: LD_VAR 0 2
58364: PUSH
58365: LD_INT 2
58367: ARRAY
58368: PUSH
58369: LD_INT 1
58371: ARRAY
58372: PUSH
58373: LD_INT 100
58375: PUSH
58376: LD_VAR 0 8
58380: PLUS
58381: EQUAL
58382: IFFALSE 58427
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_VAR 0 2
58393: PPUSH
58394: LD_INT 2
58396: PPUSH
58397: LD_VAR 0 2
58401: PUSH
58402: LD_INT 2
58404: ARRAY
58405: PPUSH
58406: LD_INT 1
58408: PPUSH
58409: CALL_OW 3
58413: PPUSH
58414: CALL_OW 1
58418: ST_TO_ADDR
// tmp := 1 ;
58419: LD_ADDR_VAR 0 3
58423: PUSH
58424: LD_STRING 1
58426: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58427: LD_ADDR_VAR 0 6
58431: PUSH
58432: LD_VAR 0 6
58436: PUSH
58437: LD_VAR 0 3
58441: STR
58442: ST_TO_ADDR
// end ;
58443: GO 58339
58445: POP
58446: POP
// if isGameLoad then
58447: LD_VAR 0 1
58451: IFFALSE 58926
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58453: LD_ADDR_VAR 0 4
58457: PUSH
58458: LD_EXP 43
58462: PUSH
58463: LD_EXP 42
58467: PUSH
58468: LD_EXP 44
58472: PUSH
58473: LD_EXP 41
58477: PUSH
58478: LD_EXP 45
58482: PUSH
58483: LD_EXP 46
58487: PUSH
58488: LD_EXP 47
58492: PUSH
58493: LD_EXP 48
58497: PUSH
58498: LD_EXP 49
58502: PUSH
58503: LD_EXP 50
58507: PUSH
58508: LD_EXP 51
58512: PUSH
58513: LD_EXP 52
58517: PUSH
58518: LD_EXP 53
58522: PUSH
58523: LD_EXP 54
58527: PUSH
58528: LD_EXP 62
58532: PUSH
58533: LD_EXP 63
58537: PUSH
58538: LD_EXP 64
58542: PUSH
58543: LD_EXP 65
58547: PUSH
58548: LD_EXP 67
58552: PUSH
58553: LD_EXP 68
58557: PUSH
58558: LD_EXP 69
58562: PUSH
58563: LD_EXP 72
58567: PUSH
58568: LD_EXP 74
58572: PUSH
58573: LD_EXP 75
58577: PUSH
58578: LD_EXP 76
58582: PUSH
58583: LD_EXP 78
58587: PUSH
58588: LD_EXP 79
58592: PUSH
58593: LD_EXP 82
58597: PUSH
58598: LD_EXP 83
58602: PUSH
58603: LD_EXP 84
58607: PUSH
58608: LD_EXP 85
58612: PUSH
58613: LD_EXP 86
58617: PUSH
58618: LD_EXP 87
58622: PUSH
58623: LD_EXP 88
58627: PUSH
58628: LD_EXP 89
58632: PUSH
58633: LD_EXP 90
58637: PUSH
58638: LD_EXP 55
58642: PUSH
58643: LD_EXP 56
58647: PUSH
58648: LD_EXP 59
58652: PUSH
58653: LD_EXP 60
58657: PUSH
58658: LD_EXP 61
58662: PUSH
58663: LD_EXP 57
58667: PUSH
58668: LD_EXP 58
58672: PUSH
58673: LD_EXP 66
58677: PUSH
58678: LD_EXP 70
58682: PUSH
58683: LD_EXP 71
58687: PUSH
58688: LD_EXP 73
58692: PUSH
58693: LD_EXP 77
58697: PUSH
58698: LD_EXP 80
58702: PUSH
58703: LD_EXP 81
58707: PUSH
58708: LD_EXP 91
58712: PUSH
58713: LD_EXP 92
58717: PUSH
58718: LD_EXP 93
58722: PUSH
58723: LD_EXP 94
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: ST_TO_ADDR
// tmp :=  ;
58784: LD_ADDR_VAR 0 3
58788: PUSH
58789: LD_STRING 
58791: ST_TO_ADDR
// for i = 1 to normalCounter do
58792: LD_ADDR_VAR 0 8
58796: PUSH
58797: DOUBLE
58798: LD_INT 1
58800: DEC
58801: ST_TO_ADDR
58802: LD_EXP 39
58806: PUSH
58807: FOR_TO
58808: IFFALSE 58844
// begin if flags [ i ] then
58810: LD_VAR 0 4
58814: PUSH
58815: LD_VAR 0 8
58819: ARRAY
58820: IFFALSE 58842
// tmp := tmp & i & ; ;
58822: LD_ADDR_VAR 0 3
58826: PUSH
58827: LD_VAR 0 3
58831: PUSH
58832: LD_VAR 0 8
58836: STR
58837: PUSH
58838: LD_STRING ;
58840: STR
58841: ST_TO_ADDR
// end ;
58842: GO 58807
58844: POP
58845: POP
// for i = 1 to hardcoreCounter do
58846: LD_ADDR_VAR 0 8
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_EXP 40
58860: PUSH
58861: FOR_TO
58862: IFFALSE 58908
// begin if flags [ normalCounter + i ] then
58864: LD_VAR 0 4
58868: PUSH
58869: LD_EXP 39
58873: PUSH
58874: LD_VAR 0 8
58878: PLUS
58879: ARRAY
58880: IFFALSE 58906
// tmp := tmp & ( 100 + i ) & ; ;
58882: LD_ADDR_VAR 0 3
58886: PUSH
58887: LD_VAR 0 3
58891: PUSH
58892: LD_INT 100
58894: PUSH
58895: LD_VAR 0 8
58899: PLUS
58900: STR
58901: PUSH
58902: LD_STRING ;
58904: STR
58905: ST_TO_ADDR
// end ;
58906: GO 58861
58908: POP
58909: POP
// if tmp then
58910: LD_VAR 0 3
58914: IFFALSE 58926
// active := tmp ;
58916: LD_ADDR_VAR 0 7
58920: PUSH
58921: LD_VAR 0 3
58925: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58926: LD_STRING getStreamItemsFromMission("
58928: PUSH
58929: LD_VAR 0 5
58933: STR
58934: PUSH
58935: LD_STRING ","
58937: STR
58938: PUSH
58939: LD_VAR 0 6
58943: STR
58944: PUSH
58945: LD_STRING ","
58947: STR
58948: PUSH
58949: LD_VAR 0 7
58953: STR
58954: PUSH
58955: LD_STRING ")
58957: STR
58958: PPUSH
58959: CALL_OW 559
// end else
58963: GO 58972
// ToLua ( getStreamItemsFromMission("","","") ) ;
58965: LD_STRING getStreamItemsFromMission("","","")
58967: PPUSH
58968: CALL_OW 559
// end ;
58972: LD_VAR 0 2
58976: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58977: LD_EXP 38
58981: PUSH
58982: LD_EXP 43
58986: AND
58987: IFFALSE 59111
58989: GO 58991
58991: DISABLE
58992: LD_INT 0
58994: PPUSH
58995: PPUSH
// begin enable ;
58996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58997: LD_ADDR_VAR 0 2
59001: PUSH
59002: LD_INT 22
59004: PUSH
59005: LD_OWVAR 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 34
59019: PUSH
59020: LD_INT 7
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 34
59029: PUSH
59030: LD_INT 45
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 34
59039: PUSH
59040: LD_INT 28
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 34
59049: PUSH
59050: LD_INT 47
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PPUSH
59068: CALL_OW 69
59072: ST_TO_ADDR
// if not tmp then
59073: LD_VAR 0 2
59077: NOT
59078: IFFALSE 59082
// exit ;
59080: GO 59111
// for i in tmp do
59082: LD_ADDR_VAR 0 1
59086: PUSH
59087: LD_VAR 0 2
59091: PUSH
59092: FOR_IN
59093: IFFALSE 59109
// begin SetLives ( i , 0 ) ;
59095: LD_VAR 0 1
59099: PPUSH
59100: LD_INT 0
59102: PPUSH
59103: CALL_OW 234
// end ;
59107: GO 59092
59109: POP
59110: POP
// end ;
59111: PPOPN 2
59113: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59114: LD_EXP 38
59118: PUSH
59119: LD_EXP 44
59123: AND
59124: IFFALSE 59208
59126: GO 59128
59128: DISABLE
59129: LD_INT 0
59131: PPUSH
59132: PPUSH
// begin enable ;
59133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59134: LD_ADDR_VAR 0 2
59138: PUSH
59139: LD_INT 22
59141: PUSH
59142: LD_OWVAR 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 32
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PPUSH
59165: CALL_OW 69
59169: ST_TO_ADDR
// if not tmp then
59170: LD_VAR 0 2
59174: NOT
59175: IFFALSE 59179
// exit ;
59177: GO 59208
// for i in tmp do
59179: LD_ADDR_VAR 0 1
59183: PUSH
59184: LD_VAR 0 2
59188: PUSH
59189: FOR_IN
59190: IFFALSE 59206
// begin SetLives ( i , 0 ) ;
59192: LD_VAR 0 1
59196: PPUSH
59197: LD_INT 0
59199: PPUSH
59200: CALL_OW 234
// end ;
59204: GO 59189
59206: POP
59207: POP
// end ;
59208: PPOPN 2
59210: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59211: LD_EXP 38
59215: PUSH
59216: LD_EXP 41
59220: AND
59221: IFFALSE 59314
59223: GO 59225
59225: DISABLE
59226: LD_INT 0
59228: PPUSH
// begin enable ;
59229: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59230: LD_ADDR_VAR 0 1
59234: PUSH
59235: LD_INT 22
59237: PUSH
59238: LD_OWVAR 2
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 25
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 25
59262: PUSH
59263: LD_INT 9
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 25
59272: PUSH
59273: LD_INT 8
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PPUSH
59290: CALL_OW 69
59294: PUSH
59295: FOR_IN
59296: IFFALSE 59312
// begin SetClass ( i , 1 ) ;
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_INT 1
59305: PPUSH
59306: CALL_OW 336
// end ;
59310: GO 59295
59312: POP
59313: POP
// end ;
59314: PPOPN 1
59316: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59317: LD_EXP 38
59321: PUSH
59322: LD_EXP 42
59326: AND
59327: PUSH
59328: LD_OWVAR 65
59332: PUSH
59333: LD_INT 7
59335: LESS
59336: AND
59337: IFFALSE 59351
59339: GO 59341
59341: DISABLE
// begin enable ;
59342: ENABLE
// game_speed := 7 ;
59343: LD_ADDR_OWVAR 65
59347: PUSH
59348: LD_INT 7
59350: ST_TO_ADDR
// end ;
59351: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59352: LD_EXP 38
59356: PUSH
59357: LD_EXP 45
59361: AND
59362: IFFALSE 59564
59364: GO 59366
59366: DISABLE
59367: LD_INT 0
59369: PPUSH
59370: PPUSH
59371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: LD_INT 81
59379: PUSH
59380: LD_OWVAR 2
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 21
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PPUSH
59403: CALL_OW 69
59407: ST_TO_ADDR
// if not tmp then
59408: LD_VAR 0 3
59412: NOT
59413: IFFALSE 59417
// exit ;
59415: GO 59564
// if tmp > 5 then
59417: LD_VAR 0 3
59421: PUSH
59422: LD_INT 5
59424: GREATER
59425: IFFALSE 59437
// k := 5 else
59427: LD_ADDR_VAR 0 2
59431: PUSH
59432: LD_INT 5
59434: ST_TO_ADDR
59435: GO 59447
// k := tmp ;
59437: LD_ADDR_VAR 0 2
59441: PUSH
59442: LD_VAR 0 3
59446: ST_TO_ADDR
// for i := 1 to k do
59447: LD_ADDR_VAR 0 1
59451: PUSH
59452: DOUBLE
59453: LD_INT 1
59455: DEC
59456: ST_TO_ADDR
59457: LD_VAR 0 2
59461: PUSH
59462: FOR_TO
59463: IFFALSE 59562
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59465: LD_VAR 0 3
59469: PUSH
59470: LD_VAR 0 1
59474: ARRAY
59475: PPUSH
59476: LD_VAR 0 1
59480: PUSH
59481: LD_INT 4
59483: MOD
59484: PUSH
59485: LD_INT 1
59487: PLUS
59488: PPUSH
59489: CALL_OW 259
59493: PUSH
59494: LD_INT 10
59496: LESS
59497: IFFALSE 59560
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59499: LD_VAR 0 3
59503: PUSH
59504: LD_VAR 0 1
59508: ARRAY
59509: PPUSH
59510: LD_VAR 0 1
59514: PUSH
59515: LD_INT 4
59517: MOD
59518: PUSH
59519: LD_INT 1
59521: PLUS
59522: PPUSH
59523: LD_VAR 0 3
59527: PUSH
59528: LD_VAR 0 1
59532: ARRAY
59533: PPUSH
59534: LD_VAR 0 1
59538: PUSH
59539: LD_INT 4
59541: MOD
59542: PUSH
59543: LD_INT 1
59545: PLUS
59546: PPUSH
59547: CALL_OW 259
59551: PUSH
59552: LD_INT 1
59554: PLUS
59555: PPUSH
59556: CALL_OW 237
59560: GO 59462
59562: POP
59563: POP
// end ;
59564: PPOPN 3
59566: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59567: LD_EXP 38
59571: PUSH
59572: LD_EXP 46
59576: AND
59577: IFFALSE 59597
59579: GO 59581
59581: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59582: LD_INT 4
59584: PPUSH
59585: LD_OWVAR 2
59589: PPUSH
59590: LD_INT 0
59592: PPUSH
59593: CALL_OW 324
59597: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59598: LD_EXP 38
59602: PUSH
59603: LD_EXP 75
59607: AND
59608: IFFALSE 59628
59610: GO 59612
59612: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59613: LD_INT 19
59615: PPUSH
59616: LD_OWVAR 2
59620: PPUSH
59621: LD_INT 0
59623: PPUSH
59624: CALL_OW 324
59628: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59629: LD_EXP 38
59633: PUSH
59634: LD_EXP 47
59638: AND
59639: IFFALSE 59741
59641: GO 59643
59643: DISABLE
59644: LD_INT 0
59646: PPUSH
59647: PPUSH
// begin enable ;
59648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59649: LD_ADDR_VAR 0 2
59653: PUSH
59654: LD_INT 22
59656: PUSH
59657: LD_OWVAR 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 34
59671: PUSH
59672: LD_INT 11
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 34
59681: PUSH
59682: LD_INT 30
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PPUSH
59698: CALL_OW 69
59702: ST_TO_ADDR
// if not tmp then
59703: LD_VAR 0 2
59707: NOT
59708: IFFALSE 59712
// exit ;
59710: GO 59741
// for i in tmp do
59712: LD_ADDR_VAR 0 1
59716: PUSH
59717: LD_VAR 0 2
59721: PUSH
59722: FOR_IN
59723: IFFALSE 59739
// begin SetLives ( i , 0 ) ;
59725: LD_VAR 0 1
59729: PPUSH
59730: LD_INT 0
59732: PPUSH
59733: CALL_OW 234
// end ;
59737: GO 59722
59739: POP
59740: POP
// end ;
59741: PPOPN 2
59743: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59744: LD_EXP 38
59748: PUSH
59749: LD_EXP 48
59753: AND
59754: IFFALSE 59774
59756: GO 59758
59758: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59759: LD_INT 32
59761: PPUSH
59762: LD_OWVAR 2
59766: PPUSH
59767: LD_INT 0
59769: PPUSH
59770: CALL_OW 324
59774: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59775: LD_EXP 38
59779: PUSH
59780: LD_EXP 49
59784: AND
59785: IFFALSE 59966
59787: GO 59789
59789: DISABLE
59790: LD_INT 0
59792: PPUSH
59793: PPUSH
59794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59795: LD_ADDR_VAR 0 2
59799: PUSH
59800: LD_INT 22
59802: PUSH
59803: LD_OWVAR 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 33
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PPUSH
59826: CALL_OW 69
59830: ST_TO_ADDR
// if not tmp then
59831: LD_VAR 0 2
59835: NOT
59836: IFFALSE 59840
// exit ;
59838: GO 59966
// side := 0 ;
59840: LD_ADDR_VAR 0 3
59844: PUSH
59845: LD_INT 0
59847: ST_TO_ADDR
// for i := 1 to 8 do
59848: LD_ADDR_VAR 0 1
59852: PUSH
59853: DOUBLE
59854: LD_INT 1
59856: DEC
59857: ST_TO_ADDR
59858: LD_INT 8
59860: PUSH
59861: FOR_TO
59862: IFFALSE 59910
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59864: LD_OWVAR 2
59868: PUSH
59869: LD_VAR 0 1
59873: NONEQUAL
59874: PUSH
59875: LD_OWVAR 2
59879: PPUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: CALL_OW 81
59889: PUSH
59890: LD_INT 2
59892: EQUAL
59893: AND
59894: IFFALSE 59908
// begin side := i ;
59896: LD_ADDR_VAR 0 3
59900: PUSH
59901: LD_VAR 0 1
59905: ST_TO_ADDR
// break ;
59906: GO 59910
// end ;
59908: GO 59861
59910: POP
59911: POP
// if not side then
59912: LD_VAR 0 3
59916: NOT
59917: IFFALSE 59921
// exit ;
59919: GO 59966
// for i := 1 to tmp do
59921: LD_ADDR_VAR 0 1
59925: PUSH
59926: DOUBLE
59927: LD_INT 1
59929: DEC
59930: ST_TO_ADDR
59931: LD_VAR 0 2
59935: PUSH
59936: FOR_TO
59937: IFFALSE 59964
// if Prob ( 60 ) then
59939: LD_INT 60
59941: PPUSH
59942: CALL_OW 13
59946: IFFALSE 59962
// SetSide ( i , side ) ;
59948: LD_VAR 0 1
59952: PPUSH
59953: LD_VAR 0 3
59957: PPUSH
59958: CALL_OW 235
59962: GO 59936
59964: POP
59965: POP
// end ;
59966: PPOPN 3
59968: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59969: LD_EXP 38
59973: PUSH
59974: LD_EXP 51
59978: AND
59979: IFFALSE 60098
59981: GO 59983
59983: DISABLE
59984: LD_INT 0
59986: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59987: LD_ADDR_VAR 0 1
59991: PUSH
59992: LD_INT 22
59994: PUSH
59995: LD_OWVAR 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 21
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: LD_INT 23
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: PPUSH
60036: CALL_OW 69
60040: PUSH
60041: FOR_IN
60042: IFFALSE 60096
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60044: LD_VAR 0 1
60048: PPUSH
60049: CALL_OW 257
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 4
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: IN
60072: IFFALSE 60094
// SetClass ( un , rand ( 1 , 4 ) ) ;
60074: LD_VAR 0 1
60078: PPUSH
60079: LD_INT 1
60081: PPUSH
60082: LD_INT 4
60084: PPUSH
60085: CALL_OW 12
60089: PPUSH
60090: CALL_OW 336
60094: GO 60041
60096: POP
60097: POP
// end ;
60098: PPOPN 1
60100: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60101: LD_EXP 38
60105: PUSH
60106: LD_EXP 50
60110: AND
60111: IFFALSE 60190
60113: GO 60115
60115: DISABLE
60116: LD_INT 0
60118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60119: LD_ADDR_VAR 0 1
60123: PUSH
60124: LD_INT 22
60126: PUSH
60127: LD_OWVAR 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 21
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PPUSH
60150: CALL_OW 69
60154: ST_TO_ADDR
// if not tmp then
60155: LD_VAR 0 1
60159: NOT
60160: IFFALSE 60164
// exit ;
60162: GO 60190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 1
60171: PPUSH
60172: LD_VAR 0 1
60176: PPUSH
60177: CALL_OW 12
60181: ARRAY
60182: PPUSH
60183: LD_INT 100
60185: PPUSH
60186: CALL_OW 234
// end ;
60190: PPOPN 1
60192: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60193: LD_EXP 38
60197: PUSH
60198: LD_EXP 52
60202: AND
60203: IFFALSE 60301
60205: GO 60207
60207: DISABLE
60208: LD_INT 0
60210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60211: LD_ADDR_VAR 0 1
60215: PUSH
60216: LD_INT 22
60218: PUSH
60219: LD_OWVAR 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 21
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PPUSH
60242: CALL_OW 69
60246: ST_TO_ADDR
// if not tmp then
60247: LD_VAR 0 1
60251: NOT
60252: IFFALSE 60256
// exit ;
60254: GO 60301
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60256: LD_VAR 0 1
60260: PUSH
60261: LD_INT 1
60263: PPUSH
60264: LD_VAR 0 1
60268: PPUSH
60269: CALL_OW 12
60273: ARRAY
60274: PPUSH
60275: LD_INT 1
60277: PPUSH
60278: LD_INT 4
60280: PPUSH
60281: CALL_OW 12
60285: PPUSH
60286: LD_INT 3000
60288: PPUSH
60289: LD_INT 9000
60291: PPUSH
60292: CALL_OW 12
60296: PPUSH
60297: CALL_OW 492
// end ;
60301: PPOPN 1
60303: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60304: LD_EXP 38
60308: PUSH
60309: LD_EXP 53
60313: AND
60314: IFFALSE 60334
60316: GO 60318
60318: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60319: LD_INT 1
60321: PPUSH
60322: LD_OWVAR 2
60326: PPUSH
60327: LD_INT 0
60329: PPUSH
60330: CALL_OW 324
60334: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60335: LD_EXP 38
60339: PUSH
60340: LD_EXP 54
60344: AND
60345: IFFALSE 60428
60347: GO 60349
60349: DISABLE
60350: LD_INT 0
60352: PPUSH
60353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60354: LD_ADDR_VAR 0 2
60358: PUSH
60359: LD_INT 22
60361: PUSH
60362: LD_OWVAR 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 21
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PPUSH
60385: CALL_OW 69
60389: ST_TO_ADDR
// if not tmp then
60390: LD_VAR 0 2
60394: NOT
60395: IFFALSE 60399
// exit ;
60397: GO 60428
// for i in tmp do
60399: LD_ADDR_VAR 0 1
60403: PUSH
60404: LD_VAR 0 2
60408: PUSH
60409: FOR_IN
60410: IFFALSE 60426
// SetBLevel ( i , 10 ) ;
60412: LD_VAR 0 1
60416: PPUSH
60417: LD_INT 10
60419: PPUSH
60420: CALL_OW 241
60424: GO 60409
60426: POP
60427: POP
// end ;
60428: PPOPN 2
60430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60431: LD_EXP 38
60435: PUSH
60436: LD_EXP 55
60440: AND
60441: IFFALSE 60552
60443: GO 60445
60445: DISABLE
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60451: LD_ADDR_VAR 0 3
60455: PUSH
60456: LD_INT 22
60458: PUSH
60459: LD_OWVAR 2
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 25
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PPUSH
60482: CALL_OW 69
60486: ST_TO_ADDR
// if not tmp then
60487: LD_VAR 0 3
60491: NOT
60492: IFFALSE 60496
// exit ;
60494: GO 60552
// un := tmp [ rand ( 1 , tmp ) ] ;
60496: LD_ADDR_VAR 0 2
60500: PUSH
60501: LD_VAR 0 3
60505: PUSH
60506: LD_INT 1
60508: PPUSH
60509: LD_VAR 0 3
60513: PPUSH
60514: CALL_OW 12
60518: ARRAY
60519: ST_TO_ADDR
// if Crawls ( un ) then
60520: LD_VAR 0 2
60524: PPUSH
60525: CALL_OW 318
60529: IFFALSE 60540
// ComWalk ( un ) ;
60531: LD_VAR 0 2
60535: PPUSH
60536: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60540: LD_VAR 0 2
60544: PPUSH
60545: LD_INT 5
60547: PPUSH
60548: CALL_OW 336
// end ;
60552: PPOPN 3
60554: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60555: LD_EXP 38
60559: PUSH
60560: LD_EXP 56
60564: AND
60565: PUSH
60566: LD_OWVAR 67
60570: PUSH
60571: LD_INT 4
60573: LESS
60574: AND
60575: IFFALSE 60594
60577: GO 60579
60579: DISABLE
// begin Difficulty := Difficulty + 1 ;
60580: LD_ADDR_OWVAR 67
60584: PUSH
60585: LD_OWVAR 67
60589: PUSH
60590: LD_INT 1
60592: PLUS
60593: ST_TO_ADDR
// end ;
60594: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60595: LD_EXP 38
60599: PUSH
60600: LD_EXP 57
60604: AND
60605: IFFALSE 60708
60607: GO 60609
60609: DISABLE
60610: LD_INT 0
60612: PPUSH
// begin for i := 1 to 5 do
60613: LD_ADDR_VAR 0 1
60617: PUSH
60618: DOUBLE
60619: LD_INT 1
60621: DEC
60622: ST_TO_ADDR
60623: LD_INT 5
60625: PUSH
60626: FOR_TO
60627: IFFALSE 60706
// begin uc_nation := nation_nature ;
60629: LD_ADDR_OWVAR 21
60633: PUSH
60634: LD_INT 0
60636: ST_TO_ADDR
// uc_side := 0 ;
60637: LD_ADDR_OWVAR 20
60641: PUSH
60642: LD_INT 0
60644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60645: LD_ADDR_OWVAR 29
60649: PUSH
60650: LD_INT 12
60652: PUSH
60653: LD_INT 12
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// hc_agressivity := 20 ;
60660: LD_ADDR_OWVAR 35
60664: PUSH
60665: LD_INT 20
60667: ST_TO_ADDR
// hc_class := class_tiger ;
60668: LD_ADDR_OWVAR 28
60672: PUSH
60673: LD_INT 14
60675: ST_TO_ADDR
// hc_gallery :=  ;
60676: LD_ADDR_OWVAR 33
60680: PUSH
60681: LD_STRING 
60683: ST_TO_ADDR
// hc_name :=  ;
60684: LD_ADDR_OWVAR 26
60688: PUSH
60689: LD_STRING 
60691: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
60692: CALL_OW 44
60696: PPUSH
60697: LD_INT 0
60699: PPUSH
60700: CALL_OW 51
// end ;
60704: GO 60626
60706: POP
60707: POP
// end ;
60708: PPOPN 1
60710: END
// every 0 0$1 trigger StreamModeActive and sBomb do
60711: LD_EXP 38
60715: PUSH
60716: LD_EXP 58
60720: AND
60721: IFFALSE 60730
60723: GO 60725
60725: DISABLE
// StreamSibBomb ;
60726: CALL 60731 0 0
60730: END
// export function StreamSibBomb ; var i , x , y ; begin
60731: LD_INT 0
60733: PPUSH
60734: PPUSH
60735: PPUSH
60736: PPUSH
// result := false ;
60737: LD_ADDR_VAR 0 1
60741: PUSH
60742: LD_INT 0
60744: ST_TO_ADDR
// for i := 1 to 16 do
60745: LD_ADDR_VAR 0 2
60749: PUSH
60750: DOUBLE
60751: LD_INT 1
60753: DEC
60754: ST_TO_ADDR
60755: LD_INT 16
60757: PUSH
60758: FOR_TO
60759: IFFALSE 60958
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60761: LD_ADDR_VAR 0 3
60765: PUSH
60766: LD_INT 10
60768: PUSH
60769: LD_INT 20
60771: PUSH
60772: LD_INT 30
60774: PUSH
60775: LD_INT 40
60777: PUSH
60778: LD_INT 50
60780: PUSH
60781: LD_INT 60
60783: PUSH
60784: LD_INT 70
60786: PUSH
60787: LD_INT 80
60789: PUSH
60790: LD_INT 90
60792: PUSH
60793: LD_INT 100
60795: PUSH
60796: LD_INT 110
60798: PUSH
60799: LD_INT 120
60801: PUSH
60802: LD_INT 130
60804: PUSH
60805: LD_INT 140
60807: PUSH
60808: LD_INT 150
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PPUSH
60831: LD_INT 15
60833: PPUSH
60834: CALL_OW 12
60838: ARRAY
60839: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60840: LD_ADDR_VAR 0 4
60844: PUSH
60845: LD_INT 10
60847: PUSH
60848: LD_INT 20
60850: PUSH
60851: LD_INT 30
60853: PUSH
60854: LD_INT 40
60856: PUSH
60857: LD_INT 50
60859: PUSH
60860: LD_INT 60
60862: PUSH
60863: LD_INT 70
60865: PUSH
60866: LD_INT 80
60868: PUSH
60869: LD_INT 90
60871: PUSH
60872: LD_INT 100
60874: PUSH
60875: LD_INT 110
60877: PUSH
60878: LD_INT 120
60880: PUSH
60881: LD_INT 130
60883: PUSH
60884: LD_INT 140
60886: PUSH
60887: LD_INT 150
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PPUSH
60910: LD_INT 15
60912: PPUSH
60913: CALL_OW 12
60917: ARRAY
60918: ST_TO_ADDR
// if ValidHex ( x , y ) then
60919: LD_VAR 0 3
60923: PPUSH
60924: LD_VAR 0 4
60928: PPUSH
60929: CALL_OW 488
60933: IFFALSE 60956
// begin result := [ x , y ] ;
60935: LD_ADDR_VAR 0 1
60939: PUSH
60940: LD_VAR 0 3
60944: PUSH
60945: LD_VAR 0 4
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: ST_TO_ADDR
// break ;
60954: GO 60958
// end ; end ;
60956: GO 60758
60958: POP
60959: POP
// if result then
60960: LD_VAR 0 1
60964: IFFALSE 61024
// begin ToLua ( playSibBomb() ) ;
60966: LD_STRING playSibBomb()
60968: PPUSH
60969: CALL_OW 559
// wait ( 0 0$14 ) ;
60973: LD_INT 490
60975: PPUSH
60976: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60980: LD_VAR 0 1
60984: PUSH
60985: LD_INT 1
60987: ARRAY
60988: PPUSH
60989: LD_VAR 0 1
60993: PUSH
60994: LD_INT 2
60996: ARRAY
60997: PPUSH
60998: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61002: LD_VAR 0 1
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PPUSH
61011: LD_VAR 0 1
61015: PUSH
61016: LD_INT 2
61018: ARRAY
61019: PPUSH
61020: CALL_OW 429
// end ; end ;
61024: LD_VAR 0 1
61028: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61029: LD_EXP 38
61033: PUSH
61034: LD_EXP 60
61038: AND
61039: IFFALSE 61051
61041: GO 61043
61043: DISABLE
// YouLost (  ) ;
61044: LD_STRING 
61046: PPUSH
61047: CALL_OW 104
61051: END
// every 0 0$1 trigger StreamModeActive and sFog do
61052: LD_EXP 38
61056: PUSH
61057: LD_EXP 59
61061: AND
61062: IFFALSE 61076
61064: GO 61066
61066: DISABLE
// FogOff ( your_side ) ;
61067: LD_OWVAR 2
61071: PPUSH
61072: CALL_OW 344
61076: END
// every 0 0$1 trigger StreamModeActive and sSun do
61077: LD_EXP 38
61081: PUSH
61082: LD_EXP 61
61086: AND
61087: IFFALSE 61115
61089: GO 61091
61091: DISABLE
// begin solar_recharge_percent := 0 ;
61092: LD_ADDR_OWVAR 79
61096: PUSH
61097: LD_INT 0
61099: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61100: LD_INT 10500
61102: PPUSH
61103: CALL_OW 67
// solar_recharge_percent := 100 ;
61107: LD_ADDR_OWVAR 79
61111: PUSH
61112: LD_INT 100
61114: ST_TO_ADDR
// end ;
61115: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61116: LD_EXP 38
61120: PUSH
61121: LD_EXP 62
61125: AND
61126: IFFALSE 61365
61128: GO 61130
61130: DISABLE
61131: LD_INT 0
61133: PPUSH
61134: PPUSH
61135: PPUSH
// begin tmp := [ ] ;
61136: LD_ADDR_VAR 0 3
61140: PUSH
61141: EMPTY
61142: ST_TO_ADDR
// for i := 1 to 6 do
61143: LD_ADDR_VAR 0 1
61147: PUSH
61148: DOUBLE
61149: LD_INT 1
61151: DEC
61152: ST_TO_ADDR
61153: LD_INT 6
61155: PUSH
61156: FOR_TO
61157: IFFALSE 61262
// begin uc_nation := nation_nature ;
61159: LD_ADDR_OWVAR 21
61163: PUSH
61164: LD_INT 0
61166: ST_TO_ADDR
// uc_side := 0 ;
61167: LD_ADDR_OWVAR 20
61171: PUSH
61172: LD_INT 0
61174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61175: LD_ADDR_OWVAR 29
61179: PUSH
61180: LD_INT 12
61182: PUSH
61183: LD_INT 12
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: ST_TO_ADDR
// hc_agressivity := 20 ;
61190: LD_ADDR_OWVAR 35
61194: PUSH
61195: LD_INT 20
61197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61198: LD_ADDR_OWVAR 28
61202: PUSH
61203: LD_INT 17
61205: ST_TO_ADDR
// hc_gallery :=  ;
61206: LD_ADDR_OWVAR 33
61210: PUSH
61211: LD_STRING 
61213: ST_TO_ADDR
// hc_name :=  ;
61214: LD_ADDR_OWVAR 26
61218: PUSH
61219: LD_STRING 
61221: ST_TO_ADDR
// un := CreateHuman ;
61222: LD_ADDR_VAR 0 2
61226: PUSH
61227: CALL_OW 44
61231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61232: LD_VAR 0 2
61236: PPUSH
61237: LD_INT 1
61239: PPUSH
61240: CALL_OW 51
// tmp := tmp ^ un ;
61244: LD_ADDR_VAR 0 3
61248: PUSH
61249: LD_VAR 0 3
61253: PUSH
61254: LD_VAR 0 2
61258: ADD
61259: ST_TO_ADDR
// end ;
61260: GO 61156
61262: POP
61263: POP
// repeat wait ( 0 0$1 ) ;
61264: LD_INT 35
61266: PPUSH
61267: CALL_OW 67
// for un in tmp do
61271: LD_ADDR_VAR 0 2
61275: PUSH
61276: LD_VAR 0 3
61280: PUSH
61281: FOR_IN
61282: IFFALSE 61356
// begin if IsDead ( un ) then
61284: LD_VAR 0 2
61288: PPUSH
61289: CALL_OW 301
61293: IFFALSE 61313
// begin tmp := tmp diff un ;
61295: LD_ADDR_VAR 0 3
61299: PUSH
61300: LD_VAR 0 3
61304: PUSH
61305: LD_VAR 0 2
61309: DIFF
61310: ST_TO_ADDR
// continue ;
61311: GO 61281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61313: LD_VAR 0 2
61317: PPUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 22
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PPUSH
61335: CALL_OW 69
61339: PPUSH
61340: LD_VAR 0 2
61344: PPUSH
61345: CALL_OW 74
61349: PPUSH
61350: CALL_OW 115
// end ;
61354: GO 61281
61356: POP
61357: POP
// until not tmp ;
61358: LD_VAR 0 3
61362: NOT
61363: IFFALSE 61264
// end ;
61365: PPOPN 3
61367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61368: LD_EXP 38
61372: PUSH
61373: LD_EXP 63
61377: AND
61378: IFFALSE 61432
61380: GO 61382
61382: DISABLE
// begin ToLua ( displayTroll(); ) ;
61383: LD_STRING displayTroll();
61385: PPUSH
61386: CALL_OW 559
// wait ( 3 3$00 ) ;
61390: LD_INT 6300
61392: PPUSH
61393: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61397: LD_STRING hideTroll();
61399: PPUSH
61400: CALL_OW 559
// wait ( 1 1$00 ) ;
61404: LD_INT 2100
61406: PPUSH
61407: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61411: LD_STRING displayTroll();
61413: PPUSH
61414: CALL_OW 559
// wait ( 1 1$00 ) ;
61418: LD_INT 2100
61420: PPUSH
61421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61425: LD_STRING hideTroll();
61427: PPUSH
61428: CALL_OW 559
// end ;
61432: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61433: LD_EXP 38
61437: PUSH
61438: LD_EXP 64
61442: AND
61443: IFFALSE 61506
61445: GO 61447
61447: DISABLE
61448: LD_INT 0
61450: PPUSH
// begin p := 0 ;
61451: LD_ADDR_VAR 0 1
61455: PUSH
61456: LD_INT 0
61458: ST_TO_ADDR
// repeat game_speed := 1 ;
61459: LD_ADDR_OWVAR 65
61463: PUSH
61464: LD_INT 1
61466: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61467: LD_INT 35
61469: PPUSH
61470: CALL_OW 67
// p := p + 1 ;
61474: LD_ADDR_VAR 0 1
61478: PUSH
61479: LD_VAR 0 1
61483: PUSH
61484: LD_INT 1
61486: PLUS
61487: ST_TO_ADDR
// until p >= 60 ;
61488: LD_VAR 0 1
61492: PUSH
61493: LD_INT 60
61495: GREATEREQUAL
61496: IFFALSE 61459
// game_speed := 4 ;
61498: LD_ADDR_OWVAR 65
61502: PUSH
61503: LD_INT 4
61505: ST_TO_ADDR
// end ;
61506: PPOPN 1
61508: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61509: LD_EXP 38
61513: PUSH
61514: LD_EXP 65
61518: AND
61519: IFFALSE 61665
61521: GO 61523
61523: DISABLE
61524: LD_INT 0
61526: PPUSH
61527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61528: LD_ADDR_VAR 0 1
61532: PUSH
61533: LD_INT 22
61535: PUSH
61536: LD_OWVAR 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 30
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 30
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PPUSH
61577: CALL_OW 69
61581: ST_TO_ADDR
// if not depot then
61582: LD_VAR 0 1
61586: NOT
61587: IFFALSE 61591
// exit ;
61589: GO 61665
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61591: LD_ADDR_VAR 0 2
61595: PUSH
61596: LD_VAR 0 1
61600: PUSH
61601: LD_INT 1
61603: PPUSH
61604: LD_VAR 0 1
61608: PPUSH
61609: CALL_OW 12
61613: ARRAY
61614: PPUSH
61615: CALL_OW 274
61619: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61620: LD_VAR 0 2
61624: PPUSH
61625: LD_INT 1
61627: PPUSH
61628: LD_INT 0
61630: PPUSH
61631: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61635: LD_VAR 0 2
61639: PPUSH
61640: LD_INT 2
61642: PPUSH
61643: LD_INT 0
61645: PPUSH
61646: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61650: LD_VAR 0 2
61654: PPUSH
61655: LD_INT 3
61657: PPUSH
61658: LD_INT 0
61660: PPUSH
61661: CALL_OW 277
// end ;
61665: PPOPN 2
61667: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61668: LD_EXP 38
61672: PUSH
61673: LD_EXP 66
61677: AND
61678: IFFALSE 61775
61680: GO 61682
61682: DISABLE
61683: LD_INT 0
61685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61686: LD_ADDR_VAR 0 1
61690: PUSH
61691: LD_INT 22
61693: PUSH
61694: LD_OWVAR 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 21
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 23
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: PPUSH
61735: CALL_OW 69
61739: ST_TO_ADDR
// if not tmp then
61740: LD_VAR 0 1
61744: NOT
61745: IFFALSE 61749
// exit ;
61747: GO 61775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61749: LD_VAR 0 1
61753: PUSH
61754: LD_INT 1
61756: PPUSH
61757: LD_VAR 0 1
61761: PPUSH
61762: CALL_OW 12
61766: ARRAY
61767: PPUSH
61768: LD_INT 200
61770: PPUSH
61771: CALL_OW 234
// end ;
61775: PPOPN 1
61777: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61778: LD_EXP 38
61782: PUSH
61783: LD_EXP 67
61787: AND
61788: IFFALSE 61867
61790: GO 61792
61792: DISABLE
61793: LD_INT 0
61795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61796: LD_ADDR_VAR 0 1
61800: PUSH
61801: LD_INT 22
61803: PUSH
61804: LD_OWVAR 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 21
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PPUSH
61827: CALL_OW 69
61831: ST_TO_ADDR
// if not tmp then
61832: LD_VAR 0 1
61836: NOT
61837: IFFALSE 61841
// exit ;
61839: GO 61867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61841: LD_VAR 0 1
61845: PUSH
61846: LD_INT 1
61848: PPUSH
61849: LD_VAR 0 1
61853: PPUSH
61854: CALL_OW 12
61858: ARRAY
61859: PPUSH
61860: LD_INT 60
61862: PPUSH
61863: CALL_OW 234
// end ;
61867: PPOPN 1
61869: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61870: LD_EXP 38
61874: PUSH
61875: LD_EXP 68
61879: AND
61880: IFFALSE 61979
61882: GO 61884
61884: DISABLE
61885: LD_INT 0
61887: PPUSH
61888: PPUSH
// begin enable ;
61889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61890: LD_ADDR_VAR 0 1
61894: PUSH
61895: LD_INT 22
61897: PUSH
61898: LD_OWVAR 2
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 61
61909: PUSH
61910: EMPTY
61911: LIST
61912: PUSH
61913: LD_INT 33
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: PPUSH
61928: CALL_OW 69
61932: ST_TO_ADDR
// if not tmp then
61933: LD_VAR 0 1
61937: NOT
61938: IFFALSE 61942
// exit ;
61940: GO 61979
// for i in tmp do
61942: LD_ADDR_VAR 0 2
61946: PUSH
61947: LD_VAR 0 1
61951: PUSH
61952: FOR_IN
61953: IFFALSE 61977
// if IsControledBy ( i ) then
61955: LD_VAR 0 2
61959: PPUSH
61960: CALL_OW 312
61964: IFFALSE 61975
// ComUnlink ( i ) ;
61966: LD_VAR 0 2
61970: PPUSH
61971: CALL_OW 136
61975: GO 61952
61977: POP
61978: POP
// end ;
61979: PPOPN 2
61981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61982: LD_EXP 38
61986: PUSH
61987: LD_EXP 69
61991: AND
61992: IFFALSE 62132
61994: GO 61996
61996: DISABLE
61997: LD_INT 0
61999: PPUSH
62000: PPUSH
// begin ToLua ( displayPowell(); ) ;
62001: LD_STRING displayPowell();
62003: PPUSH
62004: CALL_OW 559
// uc_side := 0 ;
62008: LD_ADDR_OWVAR 20
62012: PUSH
62013: LD_INT 0
62015: ST_TO_ADDR
// uc_nation := 2 ;
62016: LD_ADDR_OWVAR 21
62020: PUSH
62021: LD_INT 2
62023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62024: LD_ADDR_OWVAR 37
62028: PUSH
62029: LD_INT 14
62031: ST_TO_ADDR
// vc_engine := engine_siberite ;
62032: LD_ADDR_OWVAR 39
62036: PUSH
62037: LD_INT 3
62039: ST_TO_ADDR
// vc_control := control_apeman ;
62040: LD_ADDR_OWVAR 38
62044: PUSH
62045: LD_INT 5
62047: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62048: LD_ADDR_OWVAR 40
62052: PUSH
62053: LD_INT 29
62055: ST_TO_ADDR
// un := CreateVehicle ;
62056: LD_ADDR_VAR 0 2
62060: PUSH
62061: CALL_OW 45
62065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62066: LD_VAR 0 2
62070: PPUSH
62071: LD_INT 1
62073: PPUSH
62074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62078: LD_INT 35
62080: PPUSH
62081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62085: LD_VAR 0 2
62089: PPUSH
62090: LD_INT 22
62092: PUSH
62093: LD_OWVAR 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PPUSH
62102: CALL_OW 69
62106: PPUSH
62107: LD_VAR 0 2
62111: PPUSH
62112: CALL_OW 74
62116: PPUSH
62117: CALL_OW 115
// until IsDead ( un ) ;
62121: LD_VAR 0 2
62125: PPUSH
62126: CALL_OW 301
62130: IFFALSE 62078
// end ;
62132: PPOPN 2
62134: END
// every 0 0$1 trigger StreamModeActive and sStu do
62135: LD_EXP 38
62139: PUSH
62140: LD_EXP 77
62144: AND
62145: IFFALSE 62161
62147: GO 62149
62149: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62150: LD_STRING displayStucuk();
62152: PPUSH
62153: CALL_OW 559
// ResetFog ;
62157: CALL_OW 335
// end ;
62161: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62162: LD_EXP 38
62166: PUSH
62167: LD_EXP 70
62171: AND
62172: IFFALSE 62313
62174: GO 62176
62176: DISABLE
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62181: LD_ADDR_VAR 0 2
62185: PUSH
62186: LD_INT 22
62188: PUSH
62189: LD_OWVAR 2
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 21
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PPUSH
62212: CALL_OW 69
62216: ST_TO_ADDR
// if not tmp then
62217: LD_VAR 0 2
62221: NOT
62222: IFFALSE 62226
// exit ;
62224: GO 62313
// un := tmp [ rand ( 1 , tmp ) ] ;
62226: LD_ADDR_VAR 0 1
62230: PUSH
62231: LD_VAR 0 2
62235: PUSH
62236: LD_INT 1
62238: PPUSH
62239: LD_VAR 0 2
62243: PPUSH
62244: CALL_OW 12
62248: ARRAY
62249: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_INT 0
62257: PPUSH
62258: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_OWVAR 3
62271: PUSH
62272: LD_VAR 0 1
62276: DIFF
62277: PPUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: CALL_OW 74
62287: PPUSH
62288: CALL_OW 115
// wait ( 0 0$20 ) ;
62292: LD_INT 700
62294: PPUSH
62295: CALL_OW 67
// SetSide ( un , your_side ) ;
62299: LD_VAR 0 1
62303: PPUSH
62304: LD_OWVAR 2
62308: PPUSH
62309: CALL_OW 235
// end ;
62313: PPOPN 2
62315: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62316: LD_EXP 38
62320: PUSH
62321: LD_EXP 71
62325: AND
62326: IFFALSE 62432
62328: GO 62330
62330: DISABLE
62331: LD_INT 0
62333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62334: LD_ADDR_VAR 0 1
62338: PUSH
62339: LD_INT 22
62341: PUSH
62342: LD_OWVAR 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: LD_INT 30
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 30
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PPUSH
62383: CALL_OW 69
62387: ST_TO_ADDR
// if not depot then
62388: LD_VAR 0 1
62392: NOT
62393: IFFALSE 62397
// exit ;
62395: GO 62432
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62397: LD_VAR 0 1
62401: PUSH
62402: LD_INT 1
62404: ARRAY
62405: PPUSH
62406: CALL_OW 250
62410: PPUSH
62411: LD_VAR 0 1
62415: PUSH
62416: LD_INT 1
62418: ARRAY
62419: PPUSH
62420: CALL_OW 251
62424: PPUSH
62425: LD_INT 70
62427: PPUSH
62428: CALL_OW 495
// end ;
62432: PPOPN 1
62434: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62435: LD_EXP 38
62439: PUSH
62440: LD_EXP 72
62444: AND
62445: IFFALSE 62656
62447: GO 62449
62449: DISABLE
62450: LD_INT 0
62452: PPUSH
62453: PPUSH
62454: PPUSH
62455: PPUSH
62456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62457: LD_ADDR_VAR 0 5
62461: PUSH
62462: LD_INT 22
62464: PUSH
62465: LD_OWVAR 2
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 21
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PPUSH
62488: CALL_OW 69
62492: ST_TO_ADDR
// if not tmp then
62493: LD_VAR 0 5
62497: NOT
62498: IFFALSE 62502
// exit ;
62500: GO 62656
// for i in tmp do
62502: LD_ADDR_VAR 0 1
62506: PUSH
62507: LD_VAR 0 5
62511: PUSH
62512: FOR_IN
62513: IFFALSE 62654
// begin d := rand ( 0 , 5 ) ;
62515: LD_ADDR_VAR 0 4
62519: PUSH
62520: LD_INT 0
62522: PPUSH
62523: LD_INT 5
62525: PPUSH
62526: CALL_OW 12
62530: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62531: LD_ADDR_VAR 0 2
62535: PUSH
62536: LD_VAR 0 1
62540: PPUSH
62541: CALL_OW 250
62545: PPUSH
62546: LD_VAR 0 4
62550: PPUSH
62551: LD_INT 3
62553: PPUSH
62554: LD_INT 12
62556: PPUSH
62557: CALL_OW 12
62561: PPUSH
62562: CALL_OW 272
62566: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62567: LD_ADDR_VAR 0 3
62571: PUSH
62572: LD_VAR 0 1
62576: PPUSH
62577: CALL_OW 251
62581: PPUSH
62582: LD_VAR 0 4
62586: PPUSH
62587: LD_INT 3
62589: PPUSH
62590: LD_INT 12
62592: PPUSH
62593: CALL_OW 12
62597: PPUSH
62598: CALL_OW 273
62602: ST_TO_ADDR
// if ValidHex ( x , y ) then
62603: LD_VAR 0 2
62607: PPUSH
62608: LD_VAR 0 3
62612: PPUSH
62613: CALL_OW 488
62617: IFFALSE 62652
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62619: LD_VAR 0 1
62623: PPUSH
62624: LD_VAR 0 2
62628: PPUSH
62629: LD_VAR 0 3
62633: PPUSH
62634: LD_INT 3
62636: PPUSH
62637: LD_INT 6
62639: PPUSH
62640: CALL_OW 12
62644: PPUSH
62645: LD_INT 1
62647: PPUSH
62648: CALL_OW 483
// end ;
62652: GO 62512
62654: POP
62655: POP
// end ;
62656: PPOPN 5
62658: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62659: LD_EXP 38
62663: PUSH
62664: LD_EXP 73
62668: AND
62669: IFFALSE 62763
62671: GO 62673
62673: DISABLE
62674: LD_INT 0
62676: PPUSH
62677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62678: LD_ADDR_VAR 0 2
62682: PUSH
62683: LD_INT 22
62685: PUSH
62686: LD_OWVAR 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 32
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 21
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: PPUSH
62720: CALL_OW 69
62724: ST_TO_ADDR
// if not tmp then
62725: LD_VAR 0 2
62729: NOT
62730: IFFALSE 62734
// exit ;
62732: GO 62763
// for i in tmp do
62734: LD_ADDR_VAR 0 1
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: FOR_IN
62745: IFFALSE 62761
// SetFuel ( i , 0 ) ;
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_INT 0
62754: PPUSH
62755: CALL_OW 240
62759: GO 62744
62761: POP
62762: POP
// end ;
62763: PPOPN 2
62765: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62766: LD_EXP 38
62770: PUSH
62771: LD_EXP 74
62775: AND
62776: IFFALSE 62842
62778: GO 62780
62780: DISABLE
62781: LD_INT 0
62783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62784: LD_ADDR_VAR 0 1
62788: PUSH
62789: LD_INT 22
62791: PUSH
62792: LD_OWVAR 2
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 30
62803: PUSH
62804: LD_INT 29
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PPUSH
62815: CALL_OW 69
62819: ST_TO_ADDR
// if not tmp then
62820: LD_VAR 0 1
62824: NOT
62825: IFFALSE 62829
// exit ;
62827: GO 62842
// DestroyUnit ( tmp [ 1 ] ) ;
62829: LD_VAR 0 1
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: PPUSH
62838: CALL_OW 65
// end ;
62842: PPOPN 1
62844: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62845: LD_EXP 38
62849: PUSH
62850: LD_EXP 76
62854: AND
62855: IFFALSE 62984
62857: GO 62859
62859: DISABLE
62860: LD_INT 0
62862: PPUSH
// begin uc_side := 0 ;
62863: LD_ADDR_OWVAR 20
62867: PUSH
62868: LD_INT 0
62870: ST_TO_ADDR
// uc_nation := nation_arabian ;
62871: LD_ADDR_OWVAR 21
62875: PUSH
62876: LD_INT 2
62878: ST_TO_ADDR
// hc_gallery :=  ;
62879: LD_ADDR_OWVAR 33
62883: PUSH
62884: LD_STRING 
62886: ST_TO_ADDR
// hc_name :=  ;
62887: LD_ADDR_OWVAR 26
62891: PUSH
62892: LD_STRING 
62894: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62895: LD_INT 1
62897: PPUSH
62898: LD_INT 11
62900: PPUSH
62901: LD_INT 10
62903: PPUSH
62904: CALL_OW 380
// un := CreateHuman ;
62908: LD_ADDR_VAR 0 1
62912: PUSH
62913: CALL_OW 44
62917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62918: LD_VAR 0 1
62922: PPUSH
62923: LD_INT 1
62925: PPUSH
62926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62930: LD_INT 35
62932: PPUSH
62933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62937: LD_VAR 0 1
62941: PPUSH
62942: LD_INT 22
62944: PUSH
62945: LD_OWVAR 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PPUSH
62954: CALL_OW 69
62958: PPUSH
62959: LD_VAR 0 1
62963: PPUSH
62964: CALL_OW 74
62968: PPUSH
62969: CALL_OW 115
// until IsDead ( un ) ;
62973: LD_VAR 0 1
62977: PPUSH
62978: CALL_OW 301
62982: IFFALSE 62930
// end ;
62984: PPOPN 1
62986: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62987: LD_EXP 38
62991: PUSH
62992: LD_EXP 78
62996: AND
62997: IFFALSE 63009
62999: GO 63001
63001: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63002: LD_STRING earthquake(getX(game), 0, 32)
63004: PPUSH
63005: CALL_OW 559
63009: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63010: LD_EXP 38
63014: PUSH
63015: LD_EXP 79
63019: AND
63020: IFFALSE 63111
63022: GO 63024
63024: DISABLE
63025: LD_INT 0
63027: PPUSH
// begin enable ;
63028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63029: LD_ADDR_VAR 0 1
63033: PUSH
63034: LD_INT 22
63036: PUSH
63037: LD_OWVAR 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 21
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 33
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: LIST
63070: PPUSH
63071: CALL_OW 69
63075: ST_TO_ADDR
// if not tmp then
63076: LD_VAR 0 1
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63085: LD_VAR 0 1
63089: PUSH
63090: LD_INT 1
63092: PPUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: CALL_OW 12
63102: ARRAY
63103: PPUSH
63104: LD_INT 1
63106: PPUSH
63107: CALL_OW 234
// end ;
63111: PPOPN 1
63113: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63114: LD_EXP 38
63118: PUSH
63119: LD_EXP 80
63123: AND
63124: IFFALSE 63265
63126: GO 63128
63128: DISABLE
63129: LD_INT 0
63131: PPUSH
63132: PPUSH
63133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63134: LD_ADDR_VAR 0 3
63138: PUSH
63139: LD_INT 22
63141: PUSH
63142: LD_OWVAR 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 25
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PPUSH
63165: CALL_OW 69
63169: ST_TO_ADDR
// if not tmp then
63170: LD_VAR 0 3
63174: NOT
63175: IFFALSE 63179
// exit ;
63177: GO 63265
// un := tmp [ rand ( 1 , tmp ) ] ;
63179: LD_ADDR_VAR 0 2
63183: PUSH
63184: LD_VAR 0 3
63188: PUSH
63189: LD_INT 1
63191: PPUSH
63192: LD_VAR 0 3
63196: PPUSH
63197: CALL_OW 12
63201: ARRAY
63202: ST_TO_ADDR
// if Crawls ( un ) then
63203: LD_VAR 0 2
63207: PPUSH
63208: CALL_OW 318
63212: IFFALSE 63223
// ComWalk ( un ) ;
63214: LD_VAR 0 2
63218: PPUSH
63219: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63223: LD_VAR 0 2
63227: PPUSH
63228: LD_INT 9
63230: PPUSH
63231: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63235: LD_INT 28
63237: PPUSH
63238: LD_OWVAR 2
63242: PPUSH
63243: LD_INT 2
63245: PPUSH
63246: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63250: LD_INT 29
63252: PPUSH
63253: LD_OWVAR 2
63257: PPUSH
63258: LD_INT 2
63260: PPUSH
63261: CALL_OW 322
// end ;
63265: PPOPN 3
63267: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63268: LD_EXP 38
63272: PUSH
63273: LD_EXP 81
63277: AND
63278: IFFALSE 63389
63280: GO 63282
63282: DISABLE
63283: LD_INT 0
63285: PPUSH
63286: PPUSH
63287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63288: LD_ADDR_VAR 0 3
63292: PUSH
63293: LD_INT 22
63295: PUSH
63296: LD_OWVAR 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 25
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PPUSH
63319: CALL_OW 69
63323: ST_TO_ADDR
// if not tmp then
63324: LD_VAR 0 3
63328: NOT
63329: IFFALSE 63333
// exit ;
63331: GO 63389
// un := tmp [ rand ( 1 , tmp ) ] ;
63333: LD_ADDR_VAR 0 2
63337: PUSH
63338: LD_VAR 0 3
63342: PUSH
63343: LD_INT 1
63345: PPUSH
63346: LD_VAR 0 3
63350: PPUSH
63351: CALL_OW 12
63355: ARRAY
63356: ST_TO_ADDR
// if Crawls ( un ) then
63357: LD_VAR 0 2
63361: PPUSH
63362: CALL_OW 318
63366: IFFALSE 63377
// ComWalk ( un ) ;
63368: LD_VAR 0 2
63372: PPUSH
63373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63377: LD_VAR 0 2
63381: PPUSH
63382: LD_INT 8
63384: PPUSH
63385: CALL_OW 336
// end ;
63389: PPOPN 3
63391: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63392: LD_EXP 38
63396: PUSH
63397: LD_EXP 82
63401: AND
63402: IFFALSE 63546
63404: GO 63406
63406: DISABLE
63407: LD_INT 0
63409: PPUSH
63410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63411: LD_ADDR_VAR 0 2
63415: PUSH
63416: LD_INT 22
63418: PUSH
63419: LD_OWVAR 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 21
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 34
63443: PUSH
63444: LD_INT 12
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 34
63453: PUSH
63454: LD_INT 51
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 34
63463: PUSH
63464: LD_INT 32
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: PPUSH
63482: CALL_OW 69
63486: ST_TO_ADDR
// if not tmp then
63487: LD_VAR 0 2
63491: NOT
63492: IFFALSE 63496
// exit ;
63494: GO 63546
// for i in tmp do
63496: LD_ADDR_VAR 0 1
63500: PUSH
63501: LD_VAR 0 2
63505: PUSH
63506: FOR_IN
63507: IFFALSE 63544
// if GetCargo ( i , mat_artifact ) = 0 then
63509: LD_VAR 0 1
63513: PPUSH
63514: LD_INT 4
63516: PPUSH
63517: CALL_OW 289
63521: PUSH
63522: LD_INT 0
63524: EQUAL
63525: IFFALSE 63542
// SetCargo ( i , mat_siberit , 100 ) ;
63527: LD_VAR 0 1
63531: PPUSH
63532: LD_INT 3
63534: PPUSH
63535: LD_INT 100
63537: PPUSH
63538: CALL_OW 290
63542: GO 63506
63544: POP
63545: POP
// end ;
63546: PPOPN 2
63548: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63549: LD_EXP 38
63553: PUSH
63554: LD_EXP 83
63558: AND
63559: IFFALSE 63742
63561: GO 63563
63563: DISABLE
63564: LD_INT 0
63566: PPUSH
63567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63568: LD_ADDR_VAR 0 2
63572: PUSH
63573: LD_INT 22
63575: PUSH
63576: LD_OWVAR 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PPUSH
63585: CALL_OW 69
63589: ST_TO_ADDR
// if not tmp then
63590: LD_VAR 0 2
63594: NOT
63595: IFFALSE 63599
// exit ;
63597: GO 63742
// for i := 1 to 2 do
63599: LD_ADDR_VAR 0 1
63603: PUSH
63604: DOUBLE
63605: LD_INT 1
63607: DEC
63608: ST_TO_ADDR
63609: LD_INT 2
63611: PUSH
63612: FOR_TO
63613: IFFALSE 63740
// begin uc_side := your_side ;
63615: LD_ADDR_OWVAR 20
63619: PUSH
63620: LD_OWVAR 2
63624: ST_TO_ADDR
// uc_nation := nation_american ;
63625: LD_ADDR_OWVAR 21
63629: PUSH
63630: LD_INT 1
63632: ST_TO_ADDR
// vc_chassis := us_morphling ;
63633: LD_ADDR_OWVAR 37
63637: PUSH
63638: LD_INT 5
63640: ST_TO_ADDR
// vc_engine := engine_siberite ;
63641: LD_ADDR_OWVAR 39
63645: PUSH
63646: LD_INT 3
63648: ST_TO_ADDR
// vc_control := control_computer ;
63649: LD_ADDR_OWVAR 38
63653: PUSH
63654: LD_INT 3
63656: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63657: LD_ADDR_OWVAR 40
63661: PUSH
63662: LD_INT 10
63664: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63665: LD_VAR 0 2
63669: PUSH
63670: LD_INT 1
63672: ARRAY
63673: PPUSH
63674: CALL_OW 310
63678: NOT
63679: IFFALSE 63726
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
63681: CALL_OW 45
63685: PPUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PPUSH
63695: CALL_OW 250
63699: PPUSH
63700: LD_VAR 0 2
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PPUSH
63709: CALL_OW 251
63713: PPUSH
63714: LD_INT 12
63716: PPUSH
63717: LD_INT 1
63719: PPUSH
63720: CALL_OW 50
63724: GO 63738
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63726: CALL_OW 45
63730: PPUSH
63731: LD_INT 1
63733: PPUSH
63734: CALL_OW 51
// end ;
63738: GO 63612
63740: POP
63741: POP
// end ;
63742: PPOPN 2
63744: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63745: LD_EXP 38
63749: PUSH
63750: LD_EXP 84
63754: AND
63755: IFFALSE 63977
63757: GO 63759
63759: DISABLE
63760: LD_INT 0
63762: PPUSH
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63768: LD_ADDR_VAR 0 6
63772: PUSH
63773: LD_INT 22
63775: PUSH
63776: LD_OWVAR 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 21
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: LD_INT 23
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: PPUSH
63817: CALL_OW 69
63821: ST_TO_ADDR
// if not tmp then
63822: LD_VAR 0 6
63826: NOT
63827: IFFALSE 63831
// exit ;
63829: GO 63977
// s1 := rand ( 1 , 4 ) ;
63831: LD_ADDR_VAR 0 2
63835: PUSH
63836: LD_INT 1
63838: PPUSH
63839: LD_INT 4
63841: PPUSH
63842: CALL_OW 12
63846: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63847: LD_ADDR_VAR 0 4
63851: PUSH
63852: LD_VAR 0 6
63856: PUSH
63857: LD_INT 1
63859: ARRAY
63860: PPUSH
63861: LD_VAR 0 2
63865: PPUSH
63866: CALL_OW 259
63870: ST_TO_ADDR
// if s1 = 1 then
63871: LD_VAR 0 2
63875: PUSH
63876: LD_INT 1
63878: EQUAL
63879: IFFALSE 63899
// s2 := rand ( 2 , 4 ) else
63881: LD_ADDR_VAR 0 3
63885: PUSH
63886: LD_INT 2
63888: PPUSH
63889: LD_INT 4
63891: PPUSH
63892: CALL_OW 12
63896: ST_TO_ADDR
63897: GO 63907
// s2 := 1 ;
63899: LD_ADDR_VAR 0 3
63903: PUSH
63904: LD_INT 1
63906: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63907: LD_ADDR_VAR 0 5
63911: PUSH
63912: LD_VAR 0 6
63916: PUSH
63917: LD_INT 1
63919: ARRAY
63920: PPUSH
63921: LD_VAR 0 3
63925: PPUSH
63926: CALL_OW 259
63930: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63931: LD_VAR 0 6
63935: PUSH
63936: LD_INT 1
63938: ARRAY
63939: PPUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: LD_VAR 0 5
63949: PPUSH
63950: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63954: LD_VAR 0 6
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PPUSH
63963: LD_VAR 0 3
63967: PPUSH
63968: LD_VAR 0 4
63972: PPUSH
63973: CALL_OW 237
// end ;
63977: PPOPN 6
63979: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63980: LD_EXP 38
63984: PUSH
63985: LD_EXP 85
63989: AND
63990: IFFALSE 64069
63992: GO 63994
63994: DISABLE
63995: LD_INT 0
63997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
63998: LD_ADDR_VAR 0 1
64002: PUSH
64003: LD_INT 22
64005: PUSH
64006: LD_OWVAR 2
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 30
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PPUSH
64029: CALL_OW 69
64033: ST_TO_ADDR
// if not tmp then
64034: LD_VAR 0 1
64038: NOT
64039: IFFALSE 64043
// exit ;
64041: GO 64069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64043: LD_VAR 0 1
64047: PUSH
64048: LD_INT 1
64050: PPUSH
64051: LD_VAR 0 1
64055: PPUSH
64056: CALL_OW 12
64060: ARRAY
64061: PPUSH
64062: LD_INT 1
64064: PPUSH
64065: CALL_OW 234
// end ;
64069: PPOPN 1
64071: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64072: LD_EXP 38
64076: PUSH
64077: LD_EXP 86
64081: AND
64082: IFFALSE 64194
64084: GO 64086
64086: DISABLE
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64091: LD_ADDR_VAR 0 2
64095: PUSH
64096: LD_INT 22
64098: PUSH
64099: LD_OWVAR 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 30
64113: PUSH
64114: LD_INT 27
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 30
64123: PUSH
64124: LD_INT 26
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 30
64133: PUSH
64134: LD_INT 28
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PPUSH
64151: CALL_OW 69
64155: ST_TO_ADDR
// if not tmp then
64156: LD_VAR 0 2
64160: NOT
64161: IFFALSE 64165
// exit ;
64163: GO 64194
// for i in tmp do
64165: LD_ADDR_VAR 0 1
64169: PUSH
64170: LD_VAR 0 2
64174: PUSH
64175: FOR_IN
64176: IFFALSE 64192
// SetLives ( i , 1 ) ;
64178: LD_VAR 0 1
64182: PPUSH
64183: LD_INT 1
64185: PPUSH
64186: CALL_OW 234
64190: GO 64175
64192: POP
64193: POP
// end ;
64194: PPOPN 2
64196: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64197: LD_EXP 38
64201: PUSH
64202: LD_EXP 87
64206: AND
64207: IFFALSE 64494
64209: GO 64211
64211: DISABLE
64212: LD_INT 0
64214: PPUSH
64215: PPUSH
64216: PPUSH
// begin i := rand ( 1 , 7 ) ;
64217: LD_ADDR_VAR 0 1
64221: PUSH
64222: LD_INT 1
64224: PPUSH
64225: LD_INT 7
64227: PPUSH
64228: CALL_OW 12
64232: ST_TO_ADDR
// case i of 1 :
64233: LD_VAR 0 1
64237: PUSH
64238: LD_INT 1
64240: DOUBLE
64241: EQUAL
64242: IFTRUE 64246
64244: GO 64256
64246: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64247: LD_STRING earthquake(getX(game), 0, 32)
64249: PPUSH
64250: CALL_OW 559
64254: GO 64494
64256: LD_INT 2
64258: DOUBLE
64259: EQUAL
64260: IFTRUE 64264
64262: GO 64278
64264: POP
// begin ToLua ( displayStucuk(); ) ;
64265: LD_STRING displayStucuk();
64267: PPUSH
64268: CALL_OW 559
// ResetFog ;
64272: CALL_OW 335
// end ; 3 :
64276: GO 64494
64278: LD_INT 3
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64286
64284: GO 64390
64286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64287: LD_ADDR_VAR 0 2
64291: PUSH
64292: LD_INT 22
64294: PUSH
64295: LD_OWVAR 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 25
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PPUSH
64318: CALL_OW 69
64322: ST_TO_ADDR
// if not tmp then
64323: LD_VAR 0 2
64327: NOT
64328: IFFALSE 64332
// exit ;
64330: GO 64494
// un := tmp [ rand ( 1 , tmp ) ] ;
64332: LD_ADDR_VAR 0 3
64336: PUSH
64337: LD_VAR 0 2
64341: PUSH
64342: LD_INT 1
64344: PPUSH
64345: LD_VAR 0 2
64349: PPUSH
64350: CALL_OW 12
64354: ARRAY
64355: ST_TO_ADDR
// if Crawls ( un ) then
64356: LD_VAR 0 3
64360: PPUSH
64361: CALL_OW 318
64365: IFFALSE 64376
// ComWalk ( un ) ;
64367: LD_VAR 0 3
64371: PPUSH
64372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64376: LD_VAR 0 3
64380: PPUSH
64381: LD_INT 8
64383: PPUSH
64384: CALL_OW 336
// end ; 4 :
64388: GO 64494
64390: LD_INT 4
64392: DOUBLE
64393: EQUAL
64394: IFTRUE 64398
64396: GO 64472
64398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64399: LD_ADDR_VAR 0 2
64403: PUSH
64404: LD_INT 22
64406: PUSH
64407: LD_OWVAR 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 30
64418: PUSH
64419: LD_INT 29
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PPUSH
64430: CALL_OW 69
64434: ST_TO_ADDR
// if not tmp then
64435: LD_VAR 0 2
64439: NOT
64440: IFFALSE 64444
// exit ;
64442: GO 64494
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64444: LD_VAR 0 2
64448: PUSH
64449: LD_INT 1
64451: ARRAY
64452: PPUSH
64453: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64457: LD_VAR 0 2
64461: PUSH
64462: LD_INT 1
64464: ARRAY
64465: PPUSH
64466: CALL_OW 65
// end ; 5 .. 7 :
64470: GO 64494
64472: LD_INT 5
64474: DOUBLE
64475: GREATEREQUAL
64476: IFFALSE 64484
64478: LD_INT 7
64480: DOUBLE
64481: LESSEQUAL
64482: IFTRUE 64486
64484: GO 64493
64486: POP
// StreamSibBomb ; end ;
64487: CALL 60731 0 0
64491: GO 64494
64493: POP
// end ;
64494: PPOPN 3
64496: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64497: LD_EXP 38
64501: PUSH
64502: LD_EXP 88
64506: AND
64507: IFFALSE 64663
64509: GO 64511
64511: DISABLE
64512: LD_INT 0
64514: PPUSH
64515: PPUSH
64516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64517: LD_ADDR_VAR 0 2
64521: PUSH
64522: LD_INT 81
64524: PUSH
64525: LD_OWVAR 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 21
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 21
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PPUSH
64566: CALL_OW 69
64570: ST_TO_ADDR
// if not tmp then
64571: LD_VAR 0 2
64575: NOT
64576: IFFALSE 64580
// exit ;
64578: GO 64663
// p := 0 ;
64580: LD_ADDR_VAR 0 3
64584: PUSH
64585: LD_INT 0
64587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64588: LD_INT 35
64590: PPUSH
64591: CALL_OW 67
// p := p + 1 ;
64595: LD_ADDR_VAR 0 3
64599: PUSH
64600: LD_VAR 0 3
64604: PUSH
64605: LD_INT 1
64607: PLUS
64608: ST_TO_ADDR
// for i in tmp do
64609: LD_ADDR_VAR 0 1
64613: PUSH
64614: LD_VAR 0 2
64618: PUSH
64619: FOR_IN
64620: IFFALSE 64651
// if GetLives ( i ) < 1000 then
64622: LD_VAR 0 1
64626: PPUSH
64627: CALL_OW 256
64631: PUSH
64632: LD_INT 1000
64634: LESS
64635: IFFALSE 64649
// SetLives ( i , 1000 ) ;
64637: LD_VAR 0 1
64641: PPUSH
64642: LD_INT 1000
64644: PPUSH
64645: CALL_OW 234
64649: GO 64619
64651: POP
64652: POP
// until p > 20 ;
64653: LD_VAR 0 3
64657: PUSH
64658: LD_INT 20
64660: GREATER
64661: IFFALSE 64588
// end ;
64663: PPOPN 3
64665: END
// every 0 0$1 trigger StreamModeActive and sTime do
64666: LD_EXP 38
64670: PUSH
64671: LD_EXP 89
64675: AND
64676: IFFALSE 64711
64678: GO 64680
64680: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
64681: LD_INT 28
64683: PPUSH
64684: LD_OWVAR 2
64688: PPUSH
64689: LD_INT 2
64691: PPUSH
64692: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
64696: LD_INT 30
64698: PPUSH
64699: LD_OWVAR 2
64703: PPUSH
64704: LD_INT 2
64706: PPUSH
64707: CALL_OW 322
// end ;
64711: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
64712: LD_EXP 38
64716: PUSH
64717: LD_EXP 90
64721: AND
64722: IFFALSE 64843
64724: GO 64726
64726: DISABLE
64727: LD_INT 0
64729: PPUSH
64730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64731: LD_ADDR_VAR 0 2
64735: PUSH
64736: LD_INT 22
64738: PUSH
64739: LD_OWVAR 2
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 21
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: LD_INT 23
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: PPUSH
64780: CALL_OW 69
64784: ST_TO_ADDR
// if not tmp then
64785: LD_VAR 0 2
64789: NOT
64790: IFFALSE 64794
// exit ;
64792: GO 64843
// for i in tmp do
64794: LD_ADDR_VAR 0 1
64798: PUSH
64799: LD_VAR 0 2
64803: PUSH
64804: FOR_IN
64805: IFFALSE 64841
// begin if Crawls ( i ) then
64807: LD_VAR 0 1
64811: PPUSH
64812: CALL_OW 318
64816: IFFALSE 64827
// ComWalk ( i ) ;
64818: LD_VAR 0 1
64822: PPUSH
64823: CALL_OW 138
// SetClass ( i , 2 ) ;
64827: LD_VAR 0 1
64831: PPUSH
64832: LD_INT 2
64834: PPUSH
64835: CALL_OW 336
// end ;
64839: GO 64804
64841: POP
64842: POP
// end ;
64843: PPOPN 2
64845: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64846: LD_EXP 38
64850: PUSH
64851: LD_EXP 91
64855: AND
64856: IFFALSE 65144
64858: GO 64860
64860: DISABLE
64861: LD_INT 0
64863: PPUSH
64864: PPUSH
64865: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64866: LD_OWVAR 2
64870: PPUSH
64871: LD_INT 9
64873: PPUSH
64874: LD_INT 1
64876: PPUSH
64877: LD_INT 1
64879: PPUSH
64880: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64884: LD_INT 9
64886: PPUSH
64887: LD_OWVAR 2
64891: PPUSH
64892: CALL_OW 343
// uc_side := 9 ;
64896: LD_ADDR_OWVAR 20
64900: PUSH
64901: LD_INT 9
64903: ST_TO_ADDR
// uc_nation := 2 ;
64904: LD_ADDR_OWVAR 21
64908: PUSH
64909: LD_INT 2
64911: ST_TO_ADDR
// hc_name := Dark Warrior ;
64912: LD_ADDR_OWVAR 26
64916: PUSH
64917: LD_STRING Dark Warrior
64919: ST_TO_ADDR
// hc_gallery :=  ;
64920: LD_ADDR_OWVAR 33
64924: PUSH
64925: LD_STRING 
64927: ST_TO_ADDR
// hc_noskilllimit := true ;
64928: LD_ADDR_OWVAR 76
64932: PUSH
64933: LD_INT 1
64935: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64936: LD_ADDR_OWVAR 31
64940: PUSH
64941: LD_INT 30
64943: PUSH
64944: LD_INT 30
64946: PUSH
64947: LD_INT 30
64949: PUSH
64950: LD_INT 30
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// un := CreateHuman ;
64959: LD_ADDR_VAR 0 3
64963: PUSH
64964: CALL_OW 44
64968: ST_TO_ADDR
// hc_noskilllimit := false ;
64969: LD_ADDR_OWVAR 76
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64977: LD_VAR 0 3
64981: PPUSH
64982: LD_INT 1
64984: PPUSH
64985: CALL_OW 51
// ToLua ( playRanger() ) ;
64989: LD_STRING playRanger()
64991: PPUSH
64992: CALL_OW 559
// p := 0 ;
64996: LD_ADDR_VAR 0 2
65000: PUSH
65001: LD_INT 0
65003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65004: LD_INT 35
65006: PPUSH
65007: CALL_OW 67
// p := p + 1 ;
65011: LD_ADDR_VAR 0 2
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 1
65023: PLUS
65024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65025: LD_VAR 0 3
65029: PPUSH
65030: CALL_OW 256
65034: PUSH
65035: LD_INT 1000
65037: LESS
65038: IFFALSE 65052
// SetLives ( un , 1000 ) ;
65040: LD_VAR 0 3
65044: PPUSH
65045: LD_INT 1000
65047: PPUSH
65048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65052: LD_VAR 0 3
65056: PPUSH
65057: LD_INT 81
65059: PUSH
65060: LD_OWVAR 2
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 91
65071: PUSH
65072: LD_VAR 0 3
65076: PUSH
65077: LD_INT 30
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PPUSH
65089: CALL_OW 69
65093: PPUSH
65094: LD_VAR 0 3
65098: PPUSH
65099: CALL_OW 74
65103: PPUSH
65104: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65108: LD_VAR 0 2
65112: PUSH
65113: LD_INT 80
65115: GREATER
65116: PUSH
65117: LD_VAR 0 3
65121: PPUSH
65122: CALL_OW 301
65126: OR
65127: IFFALSE 65004
// if un then
65129: LD_VAR 0 3
65133: IFFALSE 65144
// RemoveUnit ( un ) ;
65135: LD_VAR 0 3
65139: PPUSH
65140: CALL_OW 64
// end ;
65144: PPOPN 3
65146: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65147: LD_EXP 92
65151: IFFALSE 65267
65153: GO 65155
65155: DISABLE
65156: LD_INT 0
65158: PPUSH
65159: PPUSH
65160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65161: LD_ADDR_VAR 0 2
65165: PUSH
65166: LD_INT 81
65168: PUSH
65169: LD_OWVAR 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 21
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PPUSH
65192: CALL_OW 69
65196: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65197: LD_STRING playComputer()
65199: PPUSH
65200: CALL_OW 559
// if not tmp then
65204: LD_VAR 0 2
65208: NOT
65209: IFFALSE 65213
// exit ;
65211: GO 65267
// for i in tmp do
65213: LD_ADDR_VAR 0 1
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: FOR_IN
65224: IFFALSE 65265
// for j := 1 to 4 do
65226: LD_ADDR_VAR 0 3
65230: PUSH
65231: DOUBLE
65232: LD_INT 1
65234: DEC
65235: ST_TO_ADDR
65236: LD_INT 4
65238: PUSH
65239: FOR_TO
65240: IFFALSE 65261
// SetSkill ( i , j , 10 ) ;
65242: LD_VAR 0 1
65246: PPUSH
65247: LD_VAR 0 3
65251: PPUSH
65252: LD_INT 10
65254: PPUSH
65255: CALL_OW 237
65259: GO 65239
65261: POP
65262: POP
65263: GO 65223
65265: POP
65266: POP
// end ;
65267: PPOPN 3
65269: END
// every 0 0$1 trigger s30 do var i , tmp ;
65270: LD_EXP 93
65274: IFFALSE 65343
65276: GO 65278
65278: DISABLE
65279: LD_INT 0
65281: PPUSH
65282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65283: LD_ADDR_VAR 0 2
65287: PUSH
65288: LD_INT 22
65290: PUSH
65291: LD_OWVAR 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PPUSH
65300: CALL_OW 69
65304: ST_TO_ADDR
// if not tmp then
65305: LD_VAR 0 2
65309: NOT
65310: IFFALSE 65314
// exit ;
65312: GO 65343
// for i in tmp do
65314: LD_ADDR_VAR 0 1
65318: PUSH
65319: LD_VAR 0 2
65323: PUSH
65324: FOR_IN
65325: IFFALSE 65341
// SetLives ( i , 300 ) ;
65327: LD_VAR 0 1
65331: PPUSH
65332: LD_INT 300
65334: PPUSH
65335: CALL_OW 234
65339: GO 65324
65341: POP
65342: POP
// end ;
65343: PPOPN 2
65345: END
// every 0 0$1 trigger s60 do var i , tmp ;
65346: LD_EXP 94
65350: IFFALSE 65419
65352: GO 65354
65354: DISABLE
65355: LD_INT 0
65357: PPUSH
65358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65359: LD_ADDR_VAR 0 2
65363: PUSH
65364: LD_INT 22
65366: PUSH
65367: LD_OWVAR 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PPUSH
65376: CALL_OW 69
65380: ST_TO_ADDR
// if not tmp then
65381: LD_VAR 0 2
65385: NOT
65386: IFFALSE 65390
// exit ;
65388: GO 65419
// for i in tmp do
65390: LD_ADDR_VAR 0 1
65394: PUSH
65395: LD_VAR 0 2
65399: PUSH
65400: FOR_IN
65401: IFFALSE 65417
// SetLives ( i , 600 ) ;
65403: LD_VAR 0 1
65407: PPUSH
65408: LD_INT 600
65410: PPUSH
65411: CALL_OW 234
65415: GO 65400
65417: POP
65418: POP
// end ;
65419: PPOPN 2
65421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65422: LD_INT 0
65424: PPUSH
// case cmd of 301 :
65425: LD_VAR 0 1
65429: PUSH
65430: LD_INT 301
65432: DOUBLE
65433: EQUAL
65434: IFTRUE 65438
65436: GO 65470
65438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65439: LD_VAR 0 6
65443: PPUSH
65444: LD_VAR 0 7
65448: PPUSH
65449: LD_VAR 0 8
65453: PPUSH
65454: LD_VAR 0 4
65458: PPUSH
65459: LD_VAR 0 5
65463: PPUSH
65464: CALL 66679 0 5
65468: GO 65591
65470: LD_INT 302
65472: DOUBLE
65473: EQUAL
65474: IFTRUE 65478
65476: GO 65515
65478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65479: LD_VAR 0 6
65483: PPUSH
65484: LD_VAR 0 7
65488: PPUSH
65489: LD_VAR 0 8
65493: PPUSH
65494: LD_VAR 0 9
65498: PPUSH
65499: LD_VAR 0 4
65503: PPUSH
65504: LD_VAR 0 5
65508: PPUSH
65509: CALL 66770 0 6
65513: GO 65591
65515: LD_INT 303
65517: DOUBLE
65518: EQUAL
65519: IFTRUE 65523
65521: GO 65560
65523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65524: LD_VAR 0 6
65528: PPUSH
65529: LD_VAR 0 7
65533: PPUSH
65534: LD_VAR 0 8
65538: PPUSH
65539: LD_VAR 0 9
65543: PPUSH
65544: LD_VAR 0 4
65548: PPUSH
65549: LD_VAR 0 5
65553: PPUSH
65554: CALL 65596 0 6
65558: GO 65591
65560: LD_INT 304
65562: DOUBLE
65563: EQUAL
65564: IFTRUE 65568
65566: GO 65590
65568: POP
// hHackTeleport ( unit , x , y ) ; end ;
65569: LD_VAR 0 2
65573: PPUSH
65574: LD_VAR 0 4
65578: PPUSH
65579: LD_VAR 0 5
65583: PPUSH
65584: CALL 67363 0 3
65588: GO 65591
65590: POP
// end ;
65591: LD_VAR 0 12
65595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65596: LD_INT 0
65598: PPUSH
65599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65600: LD_VAR 0 1
65604: PUSH
65605: LD_INT 1
65607: LESS
65608: PUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 3
65616: GREATER
65617: OR
65618: PUSH
65619: LD_VAR 0 5
65623: PPUSH
65624: LD_VAR 0 6
65628: PPUSH
65629: CALL_OW 428
65633: OR
65634: IFFALSE 65638
// exit ;
65636: GO 66366
// uc_side := your_side ;
65638: LD_ADDR_OWVAR 20
65642: PUSH
65643: LD_OWVAR 2
65647: ST_TO_ADDR
// uc_nation := nation ;
65648: LD_ADDR_OWVAR 21
65652: PUSH
65653: LD_VAR 0 1
65657: ST_TO_ADDR
// bc_level = 1 ;
65658: LD_ADDR_OWVAR 43
65662: PUSH
65663: LD_INT 1
65665: ST_TO_ADDR
// case btype of 1 :
65666: LD_VAR 0 2
65670: PUSH
65671: LD_INT 1
65673: DOUBLE
65674: EQUAL
65675: IFTRUE 65679
65677: GO 65690
65679: POP
// bc_type := b_depot ; 2 :
65680: LD_ADDR_OWVAR 42
65684: PUSH
65685: LD_INT 0
65687: ST_TO_ADDR
65688: GO 66310
65690: LD_INT 2
65692: DOUBLE
65693: EQUAL
65694: IFTRUE 65698
65696: GO 65709
65698: POP
// bc_type := b_warehouse ; 3 :
65699: LD_ADDR_OWVAR 42
65703: PUSH
65704: LD_INT 1
65706: ST_TO_ADDR
65707: GO 66310
65709: LD_INT 3
65711: DOUBLE
65712: EQUAL
65713: IFTRUE 65717
65715: GO 65728
65717: POP
// bc_type := b_lab ; 4 .. 9 :
65718: LD_ADDR_OWVAR 42
65722: PUSH
65723: LD_INT 6
65725: ST_TO_ADDR
65726: GO 66310
65728: LD_INT 4
65730: DOUBLE
65731: GREATEREQUAL
65732: IFFALSE 65740
65734: LD_INT 9
65736: DOUBLE
65737: LESSEQUAL
65738: IFTRUE 65742
65740: GO 65802
65742: POP
// begin bc_type := b_lab_half ;
65743: LD_ADDR_OWVAR 42
65747: PUSH
65748: LD_INT 7
65750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65751: LD_ADDR_OWVAR 44
65755: PUSH
65756: LD_INT 10
65758: PUSH
65759: LD_INT 11
65761: PUSH
65762: LD_INT 12
65764: PUSH
65765: LD_INT 15
65767: PUSH
65768: LD_INT 14
65770: PUSH
65771: LD_INT 13
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: PUSH
65782: LD_VAR 0 2
65786: PUSH
65787: LD_INT 3
65789: MINUS
65790: ARRAY
65791: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
65792: LD_ADDR_OWVAR 45
65796: PUSH
65797: LD_INT 9
65799: ST_TO_ADDR
// end ; 10 .. 13 :
65800: GO 66310
65802: LD_INT 10
65804: DOUBLE
65805: GREATEREQUAL
65806: IFFALSE 65814
65808: LD_INT 13
65810: DOUBLE
65811: LESSEQUAL
65812: IFTRUE 65816
65814: GO 65893
65816: POP
// begin bc_type := b_lab_full ;
65817: LD_ADDR_OWVAR 42
65821: PUSH
65822: LD_INT 8
65824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65825: LD_ADDR_OWVAR 44
65829: PUSH
65830: LD_INT 10
65832: PUSH
65833: LD_INT 12
65835: PUSH
65836: LD_INT 14
65838: PUSH
65839: LD_INT 13
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: PUSH
65848: LD_VAR 0 2
65852: PUSH
65853: LD_INT 9
65855: MINUS
65856: ARRAY
65857: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65858: LD_ADDR_OWVAR 45
65862: PUSH
65863: LD_INT 11
65865: PUSH
65866: LD_INT 15
65868: PUSH
65869: LD_INT 12
65871: PUSH
65872: LD_INT 15
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: PUSH
65881: LD_VAR 0 2
65885: PUSH
65886: LD_INT 9
65888: MINUS
65889: ARRAY
65890: ST_TO_ADDR
// end ; 14 :
65891: GO 66310
65893: LD_INT 14
65895: DOUBLE
65896: EQUAL
65897: IFTRUE 65901
65899: GO 65912
65901: POP
// bc_type := b_workshop ; 15 :
65902: LD_ADDR_OWVAR 42
65906: PUSH
65907: LD_INT 2
65909: ST_TO_ADDR
65910: GO 66310
65912: LD_INT 15
65914: DOUBLE
65915: EQUAL
65916: IFTRUE 65920
65918: GO 65931
65920: POP
// bc_type := b_factory ; 16 :
65921: LD_ADDR_OWVAR 42
65925: PUSH
65926: LD_INT 3
65928: ST_TO_ADDR
65929: GO 66310
65931: LD_INT 16
65933: DOUBLE
65934: EQUAL
65935: IFTRUE 65939
65937: GO 65950
65939: POP
// bc_type := b_ext_gun ; 17 :
65940: LD_ADDR_OWVAR 42
65944: PUSH
65945: LD_INT 17
65947: ST_TO_ADDR
65948: GO 66310
65950: LD_INT 17
65952: DOUBLE
65953: EQUAL
65954: IFTRUE 65958
65956: GO 65986
65958: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65959: LD_ADDR_OWVAR 42
65963: PUSH
65964: LD_INT 19
65966: PUSH
65967: LD_INT 23
65969: PUSH
65970: LD_INT 19
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_VAR 0 1
65982: ARRAY
65983: ST_TO_ADDR
65984: GO 66310
65986: LD_INT 18
65988: DOUBLE
65989: EQUAL
65990: IFTRUE 65994
65992: GO 66005
65994: POP
// bc_type := b_ext_radar ; 19 :
65995: LD_ADDR_OWVAR 42
65999: PUSH
66000: LD_INT 20
66002: ST_TO_ADDR
66003: GO 66310
66005: LD_INT 19
66007: DOUBLE
66008: EQUAL
66009: IFTRUE 66013
66011: GO 66024
66013: POP
// bc_type := b_ext_radio ; 20 :
66014: LD_ADDR_OWVAR 42
66018: PUSH
66019: LD_INT 22
66021: ST_TO_ADDR
66022: GO 66310
66024: LD_INT 20
66026: DOUBLE
66027: EQUAL
66028: IFTRUE 66032
66030: GO 66043
66032: POP
// bc_type := b_ext_siberium ; 21 :
66033: LD_ADDR_OWVAR 42
66037: PUSH
66038: LD_INT 21
66040: ST_TO_ADDR
66041: GO 66310
66043: LD_INT 21
66045: DOUBLE
66046: EQUAL
66047: IFTRUE 66051
66049: GO 66062
66051: POP
// bc_type := b_ext_computer ; 22 :
66052: LD_ADDR_OWVAR 42
66056: PUSH
66057: LD_INT 24
66059: ST_TO_ADDR
66060: GO 66310
66062: LD_INT 22
66064: DOUBLE
66065: EQUAL
66066: IFTRUE 66070
66068: GO 66081
66070: POP
// bc_type := b_ext_track ; 23 :
66071: LD_ADDR_OWVAR 42
66075: PUSH
66076: LD_INT 16
66078: ST_TO_ADDR
66079: GO 66310
66081: LD_INT 23
66083: DOUBLE
66084: EQUAL
66085: IFTRUE 66089
66087: GO 66100
66089: POP
// bc_type := b_ext_laser ; 24 :
66090: LD_ADDR_OWVAR 42
66094: PUSH
66095: LD_INT 25
66097: ST_TO_ADDR
66098: GO 66310
66100: LD_INT 24
66102: DOUBLE
66103: EQUAL
66104: IFTRUE 66108
66106: GO 66119
66108: POP
// bc_type := b_control_tower ; 25 :
66109: LD_ADDR_OWVAR 42
66113: PUSH
66114: LD_INT 36
66116: ST_TO_ADDR
66117: GO 66310
66119: LD_INT 25
66121: DOUBLE
66122: EQUAL
66123: IFTRUE 66127
66125: GO 66138
66127: POP
// bc_type := b_breastwork ; 26 :
66128: LD_ADDR_OWVAR 42
66132: PUSH
66133: LD_INT 31
66135: ST_TO_ADDR
66136: GO 66310
66138: LD_INT 26
66140: DOUBLE
66141: EQUAL
66142: IFTRUE 66146
66144: GO 66157
66146: POP
// bc_type := b_bunker ; 27 :
66147: LD_ADDR_OWVAR 42
66151: PUSH
66152: LD_INT 32
66154: ST_TO_ADDR
66155: GO 66310
66157: LD_INT 27
66159: DOUBLE
66160: EQUAL
66161: IFTRUE 66165
66163: GO 66176
66165: POP
// bc_type := b_turret ; 28 :
66166: LD_ADDR_OWVAR 42
66170: PUSH
66171: LD_INT 33
66173: ST_TO_ADDR
66174: GO 66310
66176: LD_INT 28
66178: DOUBLE
66179: EQUAL
66180: IFTRUE 66184
66182: GO 66195
66184: POP
// bc_type := b_armoury ; 29 :
66185: LD_ADDR_OWVAR 42
66189: PUSH
66190: LD_INT 4
66192: ST_TO_ADDR
66193: GO 66310
66195: LD_INT 29
66197: DOUBLE
66198: EQUAL
66199: IFTRUE 66203
66201: GO 66214
66203: POP
// bc_type := b_barracks ; 30 :
66204: LD_ADDR_OWVAR 42
66208: PUSH
66209: LD_INT 5
66211: ST_TO_ADDR
66212: GO 66310
66214: LD_INT 30
66216: DOUBLE
66217: EQUAL
66218: IFTRUE 66222
66220: GO 66233
66222: POP
// bc_type := b_solar_power ; 31 :
66223: LD_ADDR_OWVAR 42
66227: PUSH
66228: LD_INT 27
66230: ST_TO_ADDR
66231: GO 66310
66233: LD_INT 31
66235: DOUBLE
66236: EQUAL
66237: IFTRUE 66241
66239: GO 66252
66241: POP
// bc_type := b_oil_power ; 32 :
66242: LD_ADDR_OWVAR 42
66246: PUSH
66247: LD_INT 26
66249: ST_TO_ADDR
66250: GO 66310
66252: LD_INT 32
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66260
66258: GO 66271
66260: POP
// bc_type := b_siberite_power ; 33 :
66261: LD_ADDR_OWVAR 42
66265: PUSH
66266: LD_INT 28
66268: ST_TO_ADDR
66269: GO 66310
66271: LD_INT 33
66273: DOUBLE
66274: EQUAL
66275: IFTRUE 66279
66277: GO 66290
66279: POP
// bc_type := b_oil_mine ; 34 :
66280: LD_ADDR_OWVAR 42
66284: PUSH
66285: LD_INT 29
66287: ST_TO_ADDR
66288: GO 66310
66290: LD_INT 34
66292: DOUBLE
66293: EQUAL
66294: IFTRUE 66298
66296: GO 66309
66298: POP
// bc_type := b_siberite_mine ; end ;
66299: LD_ADDR_OWVAR 42
66303: PUSH
66304: LD_INT 30
66306: ST_TO_ADDR
66307: GO 66310
66309: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66310: LD_ADDR_VAR 0 8
66314: PUSH
66315: LD_VAR 0 5
66319: PPUSH
66320: LD_VAR 0 6
66324: PPUSH
66325: LD_VAR 0 3
66329: PPUSH
66330: CALL_OW 47
66334: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66335: LD_OWVAR 42
66339: PUSH
66340: LD_INT 32
66342: PUSH
66343: LD_INT 33
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: IN
66350: IFFALSE 66366
// PlaceWeaponTurret ( b , weapon ) ;
66352: LD_VAR 0 8
66356: PPUSH
66357: LD_VAR 0 4
66361: PPUSH
66362: CALL_OW 431
// end ;
66366: LD_VAR 0 7
66370: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66371: LD_INT 0
66373: PPUSH
66374: PPUSH
66375: PPUSH
66376: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66377: LD_ADDR_VAR 0 4
66381: PUSH
66382: LD_INT 22
66384: PUSH
66385: LD_OWVAR 2
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 2
66396: PUSH
66397: LD_INT 30
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 30
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PPUSH
66426: CALL_OW 69
66430: ST_TO_ADDR
// if not tmp then
66431: LD_VAR 0 4
66435: NOT
66436: IFFALSE 66440
// exit ;
66438: GO 66499
// for i in tmp do
66440: LD_ADDR_VAR 0 2
66444: PUSH
66445: LD_VAR 0 4
66449: PUSH
66450: FOR_IN
66451: IFFALSE 66497
// for j = 1 to 3 do
66453: LD_ADDR_VAR 0 3
66457: PUSH
66458: DOUBLE
66459: LD_INT 1
66461: DEC
66462: ST_TO_ADDR
66463: LD_INT 3
66465: PUSH
66466: FOR_TO
66467: IFFALSE 66493
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66469: LD_VAR 0 2
66473: PPUSH
66474: CALL_OW 274
66478: PPUSH
66479: LD_VAR 0 3
66483: PPUSH
66484: LD_INT 99999
66486: PPUSH
66487: CALL_OW 277
66491: GO 66466
66493: POP
66494: POP
66495: GO 66450
66497: POP
66498: POP
// end ;
66499: LD_VAR 0 1
66503: RET
// export function hHackSetLevel10 ; var i , j ; begin
66504: LD_INT 0
66506: PPUSH
66507: PPUSH
66508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66509: LD_ADDR_VAR 0 2
66513: PUSH
66514: LD_INT 21
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PPUSH
66524: CALL_OW 69
66528: PUSH
66529: FOR_IN
66530: IFFALSE 66582
// if IsSelected ( i ) then
66532: LD_VAR 0 2
66536: PPUSH
66537: CALL_OW 306
66541: IFFALSE 66580
// begin for j := 1 to 4 do
66543: LD_ADDR_VAR 0 3
66547: PUSH
66548: DOUBLE
66549: LD_INT 1
66551: DEC
66552: ST_TO_ADDR
66553: LD_INT 4
66555: PUSH
66556: FOR_TO
66557: IFFALSE 66578
// SetSkill ( i , j , 10 ) ;
66559: LD_VAR 0 2
66563: PPUSH
66564: LD_VAR 0 3
66568: PPUSH
66569: LD_INT 10
66571: PPUSH
66572: CALL_OW 237
66576: GO 66556
66578: POP
66579: POP
// end ;
66580: GO 66529
66582: POP
66583: POP
// end ;
66584: LD_VAR 0 1
66588: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66589: LD_INT 0
66591: PPUSH
66592: PPUSH
66593: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66594: LD_ADDR_VAR 0 2
66598: PUSH
66599: LD_INT 22
66601: PUSH
66602: LD_OWVAR 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 21
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PPUSH
66625: CALL_OW 69
66629: PUSH
66630: FOR_IN
66631: IFFALSE 66672
// begin for j := 1 to 4 do
66633: LD_ADDR_VAR 0 3
66637: PUSH
66638: DOUBLE
66639: LD_INT 1
66641: DEC
66642: ST_TO_ADDR
66643: LD_INT 4
66645: PUSH
66646: FOR_TO
66647: IFFALSE 66668
// SetSkill ( i , j , 10 ) ;
66649: LD_VAR 0 2
66653: PPUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: LD_INT 10
66661: PPUSH
66662: CALL_OW 237
66666: GO 66646
66668: POP
66669: POP
// end ;
66670: GO 66630
66672: POP
66673: POP
// end ;
66674: LD_VAR 0 1
66678: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66679: LD_INT 0
66681: PPUSH
// uc_side := your_side ;
66682: LD_ADDR_OWVAR 20
66686: PUSH
66687: LD_OWVAR 2
66691: ST_TO_ADDR
// uc_nation := nation ;
66692: LD_ADDR_OWVAR 21
66696: PUSH
66697: LD_VAR 0 1
66701: ST_TO_ADDR
// InitHc ;
66702: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
66706: LD_INT 0
66708: PPUSH
66709: LD_VAR 0 2
66713: PPUSH
66714: LD_VAR 0 3
66718: PPUSH
66719: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66723: LD_VAR 0 4
66727: PPUSH
66728: LD_VAR 0 5
66732: PPUSH
66733: CALL_OW 428
66737: PUSH
66738: LD_INT 0
66740: EQUAL
66741: IFFALSE 66765
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66743: CALL_OW 44
66747: PPUSH
66748: LD_VAR 0 4
66752: PPUSH
66753: LD_VAR 0 5
66757: PPUSH
66758: LD_INT 1
66760: PPUSH
66761: CALL_OW 48
// end ;
66765: LD_VAR 0 6
66769: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66770: LD_INT 0
66772: PPUSH
66773: PPUSH
// uc_side := your_side ;
66774: LD_ADDR_OWVAR 20
66778: PUSH
66779: LD_OWVAR 2
66783: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66784: LD_VAR 0 1
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: LD_INT 4
66800: PUSH
66801: LD_INT 5
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: IN
66811: IFFALSE 66823
// uc_nation := nation_american else
66813: LD_ADDR_OWVAR 21
66817: PUSH
66818: LD_INT 1
66820: ST_TO_ADDR
66821: GO 66866
// if chassis in [ 11 , 12 , 13 , 14 ] then
66823: LD_VAR 0 1
66827: PUSH
66828: LD_INT 11
66830: PUSH
66831: LD_INT 12
66833: PUSH
66834: LD_INT 13
66836: PUSH
66837: LD_INT 14
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: IN
66846: IFFALSE 66858
// uc_nation := nation_arabian else
66848: LD_ADDR_OWVAR 21
66852: PUSH
66853: LD_INT 2
66855: ST_TO_ADDR
66856: GO 66866
// uc_nation := nation_russian ;
66858: LD_ADDR_OWVAR 21
66862: PUSH
66863: LD_INT 3
66865: ST_TO_ADDR
// vc_chassis := chassis ;
66866: LD_ADDR_OWVAR 37
66870: PUSH
66871: LD_VAR 0 1
66875: ST_TO_ADDR
// vc_engine := engine ;
66876: LD_ADDR_OWVAR 39
66880: PUSH
66881: LD_VAR 0 2
66885: ST_TO_ADDR
// vc_control := control ;
66886: LD_ADDR_OWVAR 38
66890: PUSH
66891: LD_VAR 0 3
66895: ST_TO_ADDR
// vc_weapon := weapon ;
66896: LD_ADDR_OWVAR 40
66900: PUSH
66901: LD_VAR 0 4
66905: ST_TO_ADDR
// un := CreateVehicle ;
66906: LD_ADDR_VAR 0 8
66910: PUSH
66911: CALL_OW 45
66915: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66916: LD_VAR 0 8
66920: PPUSH
66921: LD_INT 0
66923: PPUSH
66924: LD_INT 5
66926: PPUSH
66927: CALL_OW 12
66931: PPUSH
66932: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66936: LD_VAR 0 8
66940: PPUSH
66941: LD_VAR 0 5
66945: PPUSH
66946: LD_VAR 0 6
66950: PPUSH
66951: LD_INT 1
66953: PPUSH
66954: CALL_OW 48
// end ;
66958: LD_VAR 0 7
66962: RET
// export hInvincible ; every 1 do
66963: GO 66965
66965: DISABLE
// hInvincible := [ ] ;
66966: LD_ADDR_EXP 95
66970: PUSH
66971: EMPTY
66972: ST_TO_ADDR
66973: END
// every 10 do var i ;
66974: GO 66976
66976: DISABLE
66977: LD_INT 0
66979: PPUSH
// begin enable ;
66980: ENABLE
// if not hInvincible then
66981: LD_EXP 95
66985: NOT
66986: IFFALSE 66990
// exit ;
66988: GO 67034
// for i in hInvincible do
66990: LD_ADDR_VAR 0 1
66994: PUSH
66995: LD_EXP 95
66999: PUSH
67000: FOR_IN
67001: IFFALSE 67032
// if GetLives ( i ) < 1000 then
67003: LD_VAR 0 1
67007: PPUSH
67008: CALL_OW 256
67012: PUSH
67013: LD_INT 1000
67015: LESS
67016: IFFALSE 67030
// SetLives ( i , 1000 ) ;
67018: LD_VAR 0 1
67022: PPUSH
67023: LD_INT 1000
67025: PPUSH
67026: CALL_OW 234
67030: GO 67000
67032: POP
67033: POP
// end ;
67034: PPOPN 1
67036: END
// export function hHackInvincible ; var i ; begin
67037: LD_INT 0
67039: PPUSH
67040: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67041: LD_ADDR_VAR 0 2
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: LD_INT 21
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 21
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: PPUSH
67074: CALL_OW 69
67078: PUSH
67079: FOR_IN
67080: IFFALSE 67141
// if IsSelected ( i ) then
67082: LD_VAR 0 2
67086: PPUSH
67087: CALL_OW 306
67091: IFFALSE 67139
// begin if i in hInvincible then
67093: LD_VAR 0 2
67097: PUSH
67098: LD_EXP 95
67102: IN
67103: IFFALSE 67123
// hInvincible := hInvincible diff i else
67105: LD_ADDR_EXP 95
67109: PUSH
67110: LD_EXP 95
67114: PUSH
67115: LD_VAR 0 2
67119: DIFF
67120: ST_TO_ADDR
67121: GO 67139
// hInvincible := hInvincible union i ;
67123: LD_ADDR_EXP 95
67127: PUSH
67128: LD_EXP 95
67132: PUSH
67133: LD_VAR 0 2
67137: UNION
67138: ST_TO_ADDR
// end ;
67139: GO 67079
67141: POP
67142: POP
// end ;
67143: LD_VAR 0 1
67147: RET
// export function hHackInvisible ; var i , j ; begin
67148: LD_INT 0
67150: PPUSH
67151: PPUSH
67152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67153: LD_ADDR_VAR 0 2
67157: PUSH
67158: LD_INT 21
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PPUSH
67168: CALL_OW 69
67172: PUSH
67173: FOR_IN
67174: IFFALSE 67198
// if IsSelected ( i ) then
67176: LD_VAR 0 2
67180: PPUSH
67181: CALL_OW 306
67185: IFFALSE 67196
// ComForceInvisible ( i ) ;
67187: LD_VAR 0 2
67191: PPUSH
67192: CALL_OW 496
67196: GO 67173
67198: POP
67199: POP
// end ;
67200: LD_VAR 0 1
67204: RET
// export function hHackChangeYourSide ; begin
67205: LD_INT 0
67207: PPUSH
// if your_side = 8 then
67208: LD_OWVAR 2
67212: PUSH
67213: LD_INT 8
67215: EQUAL
67216: IFFALSE 67228
// your_side := 0 else
67218: LD_ADDR_OWVAR 2
67222: PUSH
67223: LD_INT 0
67225: ST_TO_ADDR
67226: GO 67242
// your_side := your_side + 1 ;
67228: LD_ADDR_OWVAR 2
67232: PUSH
67233: LD_OWVAR 2
67237: PUSH
67238: LD_INT 1
67240: PLUS
67241: ST_TO_ADDR
// end ;
67242: LD_VAR 0 1
67246: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67247: LD_INT 0
67249: PPUSH
67250: PPUSH
67251: PPUSH
// for i in all_units do
67252: LD_ADDR_VAR 0 2
67256: PUSH
67257: LD_OWVAR 3
67261: PUSH
67262: FOR_IN
67263: IFFALSE 67341
// if IsSelected ( i ) then
67265: LD_VAR 0 2
67269: PPUSH
67270: CALL_OW 306
67274: IFFALSE 67339
// begin j := GetSide ( i ) ;
67276: LD_ADDR_VAR 0 3
67280: PUSH
67281: LD_VAR 0 2
67285: PPUSH
67286: CALL_OW 255
67290: ST_TO_ADDR
// if j = 8 then
67291: LD_VAR 0 3
67295: PUSH
67296: LD_INT 8
67298: EQUAL
67299: IFFALSE 67311
// j := 0 else
67301: LD_ADDR_VAR 0 3
67305: PUSH
67306: LD_INT 0
67308: ST_TO_ADDR
67309: GO 67325
// j := j + 1 ;
67311: LD_ADDR_VAR 0 3
67315: PUSH
67316: LD_VAR 0 3
67320: PUSH
67321: LD_INT 1
67323: PLUS
67324: ST_TO_ADDR
// SetSide ( i , j ) ;
67325: LD_VAR 0 2
67329: PPUSH
67330: LD_VAR 0 3
67334: PPUSH
67335: CALL_OW 235
// end ;
67339: GO 67262
67341: POP
67342: POP
// end ;
67343: LD_VAR 0 1
67347: RET
// export function hHackFog ; begin
67348: LD_INT 0
67350: PPUSH
// FogOff ( true ) ;
67351: LD_INT 1
67353: PPUSH
67354: CALL_OW 344
// end ;
67358: LD_VAR 0 1
67362: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67363: LD_INT 0
67365: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 2
67375: PPUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: LD_INT 1
67383: PPUSH
67384: LD_INT 1
67386: PPUSH
67387: CALL_OW 483
// CenterOnXY ( x , y ) ;
67391: LD_VAR 0 2
67395: PPUSH
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL_OW 84
// end ;
67405: LD_VAR 0 4
67409: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67414: LD_VAR 0 1
67418: NOT
67419: PUSH
67420: LD_VAR 0 2
67424: PPUSH
67425: LD_VAR 0 3
67429: PPUSH
67430: CALL_OW 488
67434: NOT
67435: OR
67436: PUSH
67437: LD_VAR 0 1
67441: PPUSH
67442: CALL_OW 266
67446: PUSH
67447: LD_INT 3
67449: NONEQUAL
67450: PUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 247
67460: PUSH
67461: LD_INT 1
67463: EQUAL
67464: NOT
67465: AND
67466: OR
67467: IFFALSE 67471
// exit ;
67469: GO 67753
// if GetType ( factory ) = unit_human then
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 247
67480: PUSH
67481: LD_INT 1
67483: EQUAL
67484: IFFALSE 67501
// factory := IsInUnit ( factory ) ;
67486: LD_ADDR_VAR 0 1
67490: PUSH
67491: LD_VAR 0 1
67495: PPUSH
67496: CALL_OW 310
67500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 266
67510: PUSH
67511: LD_INT 3
67513: NONEQUAL
67514: IFFALSE 67518
// exit ;
67516: GO 67753
// for i := 1 to Count ( factoryWaypoints ) do
67518: LD_ADDR_VAR 0 5
67522: PUSH
67523: DOUBLE
67524: LD_INT 1
67526: DEC
67527: ST_TO_ADDR
67528: LD_EXP 96
67532: PPUSH
67533: CALL 12131 0 1
67537: PUSH
67538: FOR_TO
67539: IFFALSE 67701
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67541: LD_VAR 0 2
67545: PPUSH
67546: LD_VAR 0 3
67550: PPUSH
67551: CALL_OW 428
67555: PUSH
67556: LD_EXP 96
67560: PUSH
67561: LD_VAR 0 5
67565: ARRAY
67566: PUSH
67567: LD_INT 2
67569: ARRAY
67570: EQUAL
67571: IFFALSE 67603
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67573: LD_ADDR_EXP 96
67577: PUSH
67578: LD_EXP 96
67582: PPUSH
67583: LD_VAR 0 5
67587: PPUSH
67588: CALL_OW 3
67592: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67593: CALL 67758 0 0
// exit ;
67597: POP
67598: POP
67599: GO 67753
// end else
67601: GO 67699
// if factory = factoryWaypoints [ i ] [ 2 ] then
67603: LD_VAR 0 1
67607: PUSH
67608: LD_EXP 96
67612: PUSH
67613: LD_VAR 0 5
67617: ARRAY
67618: PUSH
67619: LD_INT 2
67621: ARRAY
67622: EQUAL
67623: IFFALSE 67699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67625: LD_ADDR_EXP 96
67629: PUSH
67630: LD_EXP 96
67634: PPUSH
67635: LD_VAR 0 5
67639: PPUSH
67640: CALL_OW 3
67644: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67645: LD_ADDR_EXP 96
67649: PUSH
67650: LD_EXP 96
67654: PPUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 255
67664: PUSH
67665: LD_VAR 0 1
67669: PUSH
67670: LD_VAR 0 2
67674: PUSH
67675: LD_VAR 0 3
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: PPUSH
67686: CALL 47812 0 2
67690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67691: CALL 67758 0 0
// exit ;
67695: POP
67696: POP
67697: GO 67753
// end ; end ;
67699: GO 67538
67701: POP
67702: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67703: LD_ADDR_EXP 96
67707: PUSH
67708: LD_EXP 96
67712: PPUSH
67713: LD_VAR 0 1
67717: PPUSH
67718: CALL_OW 255
67722: PUSH
67723: LD_VAR 0 1
67727: PUSH
67728: LD_VAR 0 2
67732: PUSH
67733: LD_VAR 0 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: PPUSH
67744: CALL 47812 0 2
67748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67749: CALL 67758 0 0
// end ;
67753: LD_VAR 0 4
67757: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67758: LD_INT 0
67760: PPUSH
67761: PPUSH
67762: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67763: LD_STRING resetFactoryWaypoint();
67765: PPUSH
67766: CALL_OW 559
// if factoryWaypoints then
67770: LD_EXP 96
67774: IFFALSE 67895
// begin list := factoryWaypoints ;
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_EXP 96
67785: ST_TO_ADDR
// for i := 1 to list do
67786: LD_ADDR_VAR 0 2
67790: PUSH
67791: DOUBLE
67792: LD_INT 1
67794: DEC
67795: ST_TO_ADDR
67796: LD_VAR 0 3
67800: PUSH
67801: FOR_TO
67802: IFFALSE 67893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67804: LD_STRING setFactoryWaypointXY(
67806: PUSH
67807: LD_VAR 0 3
67811: PUSH
67812: LD_VAR 0 2
67816: ARRAY
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: STR
67822: PUSH
67823: LD_STRING ,
67825: STR
67826: PUSH
67827: LD_VAR 0 3
67831: PUSH
67832: LD_VAR 0 2
67836: ARRAY
67837: PUSH
67838: LD_INT 2
67840: ARRAY
67841: STR
67842: PUSH
67843: LD_STRING ,
67845: STR
67846: PUSH
67847: LD_VAR 0 3
67851: PUSH
67852: LD_VAR 0 2
67856: ARRAY
67857: PUSH
67858: LD_INT 3
67860: ARRAY
67861: STR
67862: PUSH
67863: LD_STRING ,
67865: STR
67866: PUSH
67867: LD_VAR 0 3
67871: PUSH
67872: LD_VAR 0 2
67876: ARRAY
67877: PUSH
67878: LD_INT 4
67880: ARRAY
67881: STR
67882: PUSH
67883: LD_STRING )
67885: STR
67886: PPUSH
67887: CALL_OW 559
67891: GO 67801
67893: POP
67894: POP
// end ; end ;
67895: LD_VAR 0 1
67899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67900: LD_INT 0
67902: PPUSH
// if HexInfo ( x , y ) = warehouse then
67903: LD_VAR 0 2
67907: PPUSH
67908: LD_VAR 0 3
67912: PPUSH
67913: CALL_OW 428
67917: PUSH
67918: LD_VAR 0 1
67922: EQUAL
67923: IFFALSE 67950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67925: LD_ADDR_EXP 98
67929: PUSH
67930: LD_EXP 98
67934: PPUSH
67935: LD_VAR 0 1
67939: PPUSH
67940: LD_INT 0
67942: PPUSH
67943: CALL_OW 1
67947: ST_TO_ADDR
67948: GO 68001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67950: LD_ADDR_EXP 98
67954: PUSH
67955: LD_EXP 98
67959: PPUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: LD_VAR 0 1
67969: PPUSH
67970: CALL_OW 255
67974: PUSH
67975: LD_VAR 0 1
67979: PUSH
67980: LD_VAR 0 2
67984: PUSH
67985: LD_VAR 0 3
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: PPUSH
67996: CALL_OW 1
68000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68001: CALL 68010 0 0
// end ;
68005: LD_VAR 0 4
68009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68010: LD_INT 0
68012: PPUSH
68013: PPUSH
68014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68015: LD_STRING resetWarehouseGatheringPoints();
68017: PPUSH
68018: CALL_OW 559
// if warehouseGatheringPoints then
68022: LD_EXP 98
68026: IFFALSE 68152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_EXP 98
68037: PPUSH
68038: CALL 51580 0 1
68042: ST_TO_ADDR
// for i := 1 to list do
68043: LD_ADDR_VAR 0 2
68047: PUSH
68048: DOUBLE
68049: LD_INT 1
68051: DEC
68052: ST_TO_ADDR
68053: LD_VAR 0 3
68057: PUSH
68058: FOR_TO
68059: IFFALSE 68150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68061: LD_STRING setWarehouseGatheringPointXY(
68063: PUSH
68064: LD_VAR 0 3
68068: PUSH
68069: LD_VAR 0 2
68073: ARRAY
68074: PUSH
68075: LD_INT 1
68077: ARRAY
68078: STR
68079: PUSH
68080: LD_STRING ,
68082: STR
68083: PUSH
68084: LD_VAR 0 3
68088: PUSH
68089: LD_VAR 0 2
68093: ARRAY
68094: PUSH
68095: LD_INT 2
68097: ARRAY
68098: STR
68099: PUSH
68100: LD_STRING ,
68102: STR
68103: PUSH
68104: LD_VAR 0 3
68108: PUSH
68109: LD_VAR 0 2
68113: ARRAY
68114: PUSH
68115: LD_INT 3
68117: ARRAY
68118: STR
68119: PUSH
68120: LD_STRING ,
68122: STR
68123: PUSH
68124: LD_VAR 0 3
68128: PUSH
68129: LD_VAR 0 2
68133: ARRAY
68134: PUSH
68135: LD_INT 4
68137: ARRAY
68138: STR
68139: PUSH
68140: LD_STRING )
68142: STR
68143: PPUSH
68144: CALL_OW 559
68148: GO 68058
68150: POP
68151: POP
// end ; end ;
68152: LD_VAR 0 1
68156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68157: LD_EXP 98
68161: IFFALSE 68846
68163: GO 68165
68165: DISABLE
68166: LD_INT 0
68168: PPUSH
68169: PPUSH
68170: PPUSH
68171: PPUSH
68172: PPUSH
68173: PPUSH
68174: PPUSH
68175: PPUSH
68176: PPUSH
// begin enable ;
68177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68178: LD_ADDR_VAR 0 3
68182: PUSH
68183: LD_EXP 98
68187: PPUSH
68188: CALL 51580 0 1
68192: ST_TO_ADDR
// if not list then
68193: LD_VAR 0 3
68197: NOT
68198: IFFALSE 68202
// exit ;
68200: GO 68846
// for i := 1 to list do
68202: LD_ADDR_VAR 0 1
68206: PUSH
68207: DOUBLE
68208: LD_INT 1
68210: DEC
68211: ST_TO_ADDR
68212: LD_VAR 0 3
68216: PUSH
68217: FOR_TO
68218: IFFALSE 68844
// begin depot := list [ i ] [ 2 ] ;
68220: LD_ADDR_VAR 0 8
68224: PUSH
68225: LD_VAR 0 3
68229: PUSH
68230: LD_VAR 0 1
68234: ARRAY
68235: PUSH
68236: LD_INT 2
68238: ARRAY
68239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68240: LD_ADDR_VAR 0 5
68244: PUSH
68245: LD_VAR 0 3
68249: PUSH
68250: LD_VAR 0 1
68254: ARRAY
68255: PUSH
68256: LD_INT 1
68258: ARRAY
68259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68260: LD_VAR 0 8
68264: PPUSH
68265: CALL_OW 301
68269: PUSH
68270: LD_VAR 0 5
68274: PUSH
68275: LD_VAR 0 8
68279: PPUSH
68280: CALL_OW 255
68284: NONEQUAL
68285: OR
68286: IFFALSE 68315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68288: LD_ADDR_EXP 98
68292: PUSH
68293: LD_EXP 98
68297: PPUSH
68298: LD_VAR 0 8
68302: PPUSH
68303: LD_INT 0
68305: PPUSH
68306: CALL_OW 1
68310: ST_TO_ADDR
// exit ;
68311: POP
68312: POP
68313: GO 68846
// end ; x := list [ i ] [ 3 ] ;
68315: LD_ADDR_VAR 0 6
68319: PUSH
68320: LD_VAR 0 3
68324: PUSH
68325: LD_VAR 0 1
68329: ARRAY
68330: PUSH
68331: LD_INT 3
68333: ARRAY
68334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68335: LD_ADDR_VAR 0 7
68339: PUSH
68340: LD_VAR 0 3
68344: PUSH
68345: LD_VAR 0 1
68349: ARRAY
68350: PUSH
68351: LD_INT 4
68353: ARRAY
68354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68355: LD_ADDR_VAR 0 9
68359: PUSH
68360: LD_VAR 0 6
68364: PPUSH
68365: LD_VAR 0 7
68369: PPUSH
68370: LD_INT 16
68372: PPUSH
68373: CALL 50164 0 3
68377: ST_TO_ADDR
// if not cratesNearbyPoint then
68378: LD_VAR 0 9
68382: NOT
68383: IFFALSE 68389
// exit ;
68385: POP
68386: POP
68387: GO 68846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68389: LD_ADDR_VAR 0 4
68393: PUSH
68394: LD_INT 22
68396: PUSH
68397: LD_VAR 0 5
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: LD_INT 60
68411: PUSH
68412: EMPTY
68413: LIST
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 91
68421: PUSH
68422: LD_VAR 0 8
68426: PUSH
68427: LD_INT 6
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: LD_INT 25
68440: PUSH
68441: LD_INT 2
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 25
68450: PUSH
68451: LD_INT 16
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: PPUSH
68469: CALL_OW 69
68473: PUSH
68474: LD_VAR 0 8
68478: PPUSH
68479: CALL_OW 313
68483: PPUSH
68484: LD_INT 3
68486: PUSH
68487: LD_INT 60
68489: PUSH
68490: EMPTY
68491: LIST
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: LD_INT 25
68502: PUSH
68503: LD_INT 2
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 25
68512: PUSH
68513: LD_INT 16
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PPUSH
68529: CALL_OW 72
68533: UNION
68534: ST_TO_ADDR
// if tmp then
68535: LD_VAR 0 4
68539: IFFALSE 68619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68541: LD_ADDR_VAR 0 4
68545: PUSH
68546: LD_VAR 0 4
68550: PPUSH
68551: LD_INT 3
68553: PPUSH
68554: CALL 48127 0 2
68558: ST_TO_ADDR
// for j in tmp do
68559: LD_ADDR_VAR 0 2
68563: PUSH
68564: LD_VAR 0 4
68568: PUSH
68569: FOR_IN
68570: IFFALSE 68613
// begin if IsInUnit ( j ) then
68572: LD_VAR 0 2
68576: PPUSH
68577: CALL_OW 310
68581: IFFALSE 68592
// ComExit ( j ) ;
68583: LD_VAR 0 2
68587: PPUSH
68588: CALL 48210 0 1
// AddComCollect ( j , x , y ) ;
68592: LD_VAR 0 2
68596: PPUSH
68597: LD_VAR 0 6
68601: PPUSH
68602: LD_VAR 0 7
68606: PPUSH
68607: CALL_OW 177
// end ;
68611: GO 68569
68613: POP
68614: POP
// exit ;
68615: POP
68616: POP
68617: GO 68846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68619: LD_ADDR_VAR 0 4
68623: PUSH
68624: LD_INT 22
68626: PUSH
68627: LD_VAR 0 5
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 91
68638: PUSH
68639: LD_VAR 0 8
68643: PUSH
68644: LD_INT 8
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: PUSH
68655: LD_INT 34
68657: PUSH
68658: LD_INT 12
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 34
68667: PUSH
68668: LD_INT 51
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 34
68677: PUSH
68678: LD_INT 32
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 34
68687: PUSH
68688: LD_INT 89
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: PPUSH
68707: CALL_OW 69
68711: ST_TO_ADDR
// if tmp then
68712: LD_VAR 0 4
68716: IFFALSE 68842
// begin for j in tmp do
68718: LD_ADDR_VAR 0 2
68722: PUSH
68723: LD_VAR 0 4
68727: PUSH
68728: FOR_IN
68729: IFFALSE 68840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68731: LD_VAR 0 2
68735: PPUSH
68736: CALL_OW 262
68740: PUSH
68741: LD_INT 3
68743: EQUAL
68744: PUSH
68745: LD_VAR 0 2
68749: PPUSH
68750: CALL_OW 261
68754: PUSH
68755: LD_INT 20
68757: GREATER
68758: OR
68759: PUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: CALL_OW 314
68769: NOT
68770: AND
68771: PUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: CALL_OW 263
68781: PUSH
68782: LD_INT 1
68784: NONEQUAL
68785: PUSH
68786: LD_VAR 0 2
68790: PPUSH
68791: CALL_OW 311
68795: OR
68796: AND
68797: IFFALSE 68838
// begin ComCollect ( j , x , y ) ;
68799: LD_VAR 0 2
68803: PPUSH
68804: LD_VAR 0 6
68808: PPUSH
68809: LD_VAR 0 7
68813: PPUSH
68814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
68818: LD_VAR 0 2
68822: PPUSH
68823: LD_VAR 0 8
68827: PPUSH
68828: CALL_OW 172
// exit ;
68832: POP
68833: POP
68834: POP
68835: POP
68836: GO 68846
// end ;
68838: GO 68728
68840: POP
68841: POP
// end ; end ;
68842: GO 68217
68844: POP
68845: POP
// end ; end_of_file
68846: PPOPN 9
68848: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68849: LD_VAR 0 1
68853: PPUSH
68854: LD_VAR 0 2
68858: PPUSH
68859: LD_VAR 0 3
68863: PPUSH
68864: LD_VAR 0 4
68868: PPUSH
68869: LD_VAR 0 5
68873: PPUSH
68874: LD_VAR 0 6
68878: PPUSH
68879: CALL 53074 0 6
// end ;
68883: PPOPN 6
68885: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68886: LD_INT 0
68888: PPUSH
// begin if not units then
68889: LD_VAR 0 1
68893: NOT
68894: IFFALSE 68898
// exit ;
68896: GO 68898
// end ;
68898: PPOPN 7
68900: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68901: CALL 52961 0 0
// end ; end_of_file
68905: PPOPN 1
68907: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68908: LD_VAR 0 1
68912: PUSH
68913: LD_INT 200
68915: DOUBLE
68916: GREATEREQUAL
68917: IFFALSE 68925
68919: LD_INT 299
68921: DOUBLE
68922: LESSEQUAL
68923: IFTRUE 68927
68925: GO 68959
68927: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68928: LD_VAR 0 1
68932: PPUSH
68933: LD_VAR 0 2
68937: PPUSH
68938: LD_VAR 0 3
68942: PPUSH
68943: LD_VAR 0 4
68947: PPUSH
68948: LD_VAR 0 5
68952: PPUSH
68953: CALL 69736 0 5
68957: GO 69036
68959: LD_INT 300
68961: DOUBLE
68962: GREATEREQUAL
68963: IFFALSE 68971
68965: LD_INT 399
68967: DOUBLE
68968: LESSEQUAL
68969: IFTRUE 68973
68971: GO 69035
68973: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68974: LD_VAR 0 1
68978: PPUSH
68979: LD_VAR 0 2
68983: PPUSH
68984: LD_VAR 0 3
68988: PPUSH
68989: LD_VAR 0 4
68993: PPUSH
68994: LD_VAR 0 5
68998: PPUSH
68999: LD_VAR 0 6
69003: PPUSH
69004: LD_VAR 0 7
69008: PPUSH
69009: LD_VAR 0 8
69013: PPUSH
69014: LD_VAR 0 9
69018: PPUSH
69019: LD_VAR 0 10
69023: PPUSH
69024: LD_VAR 0 11
69028: PPUSH
69029: CALL 65422 0 11
69033: GO 69036
69035: POP
// end ;
69036: PPOPN 11
69038: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_VAR 0 2
69048: PPUSH
69049: LD_VAR 0 3
69053: PPUSH
69054: LD_VAR 0 4
69058: PPUSH
69059: LD_VAR 0 5
69063: PPUSH
69064: CALL 69121 0 5
// end ; end_of_file
69068: PPOPN 5
69070: END
// export function SOS_UnitDestroyed ( un ) ; begin
69071: LD_INT 0
69073: PPUSH
// ComRadiation ( un ) ;
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL 70140 0 1
// end ;
69083: LD_VAR 0 2
69087: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69088: LD_INT 0
69090: PPUSH
// ComRadiation ( un ) ;
69091: LD_VAR 0 1
69095: PPUSH
69096: CALL 70140 0 1
// end ;
69100: LD_VAR 0 2
69104: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69105: LD_INT 0
69107: PPUSH
// end ;
69108: LD_VAR 0 4
69112: RET
// export function SOS_Command ( cmd ) ; begin
69113: LD_INT 0
69115: PPUSH
// end ;
69116: LD_VAR 0 2
69120: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69121: LD_INT 0
69123: PPUSH
// end ;
69124: LD_VAR 0 6
69128: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
69129: LD_INT 0
69131: PPUSH
69132: PPUSH
69133: PPUSH
69134: PPUSH
// if not vehicle or not factory then
69135: LD_VAR 0 1
69139: NOT
69140: PUSH
69141: LD_VAR 0 2
69145: NOT
69146: OR
69147: IFFALSE 69151
// exit ;
69149: GO 69731
// if not factoryWaypoints then
69151: LD_EXP 96
69155: NOT
69156: IFFALSE 69160
// exit ;
69158: GO 69731
// for i := 1 to Count ( factoryWaypoints ) do
69160: LD_ADDR_VAR 0 4
69164: PUSH
69165: DOUBLE
69166: LD_INT 1
69168: DEC
69169: ST_TO_ADDR
69170: LD_EXP 96
69174: PPUSH
69175: CALL 12131 0 1
69179: PUSH
69180: FOR_TO
69181: IFFALSE 69729
// if factoryWaypoints [ i ] [ 2 ] = factory then
69183: LD_EXP 96
69187: PUSH
69188: LD_VAR 0 4
69192: ARRAY
69193: PUSH
69194: LD_INT 2
69196: ARRAY
69197: PUSH
69198: LD_VAR 0 2
69202: EQUAL
69203: IFFALSE 69727
// begin if GetControl ( vehicle ) = control_manual then
69205: LD_VAR 0 1
69209: PPUSH
69210: CALL_OW 263
69214: PUSH
69215: LD_INT 1
69217: EQUAL
69218: IFFALSE 69580
// begin driver := IsDrivenBy ( vehicle ) ;
69220: LD_ADDR_VAR 0 5
69224: PUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 311
69234: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
69235: LD_VAR 0 5
69239: PUSH
69240: LD_EXP 97
69244: IN
69245: PUSH
69246: LD_VAR 0 1
69250: PUSH
69251: LD_EXP 97
69255: IN
69256: OR
69257: IFFALSE 69263
// exit ;
69259: POP
69260: POP
69261: GO 69731
// if not HasTask ( driver ) then
69263: LD_VAR 0 5
69267: PPUSH
69268: CALL_OW 314
69272: NOT
69273: IFFALSE 69578
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
69275: LD_ADDR_EXP 97
69279: PUSH
69280: LD_EXP 97
69284: PPUSH
69285: LD_VAR 0 5
69289: PPUSH
69290: CALL 47812 0 2
69294: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
69295: LD_ADDR_EXP 97
69299: PUSH
69300: LD_EXP 97
69304: PPUSH
69305: LD_VAR 0 1
69309: PPUSH
69310: CALL 47812 0 2
69314: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69315: LD_ADDR_VAR 0 6
69319: PUSH
69320: LD_EXP 96
69324: PUSH
69325: LD_VAR 0 4
69329: ARRAY
69330: PUSH
69331: LD_INT 3
69333: ARRAY
69334: PPUSH
69335: LD_EXP 96
69339: PUSH
69340: LD_VAR 0 4
69344: ARRAY
69345: PUSH
69346: LD_INT 4
69348: ARRAY
69349: PPUSH
69350: CALL_OW 428
69354: ST_TO_ADDR
// if hex then
69355: LD_VAR 0 6
69359: IFFALSE 69377
// ComMoveUnit ( driver , hex ) else
69361: LD_VAR 0 5
69365: PPUSH
69366: LD_VAR 0 6
69370: PPUSH
69371: CALL_OW 112
69375: GO 69461
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
69377: LD_VAR 0 1
69381: PPUSH
69382: LD_EXP 96
69386: PUSH
69387: LD_VAR 0 4
69391: ARRAY
69392: PUSH
69393: LD_INT 3
69395: ARRAY
69396: PPUSH
69397: LD_EXP 96
69401: PUSH
69402: LD_VAR 0 4
69406: ARRAY
69407: PUSH
69408: LD_INT 4
69410: ARRAY
69411: PPUSH
69412: CALL_OW 297
69416: PUSH
69417: LD_INT 0
69419: GREATER
69420: IFFALSE 69461
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69422: LD_VAR 0 5
69426: PPUSH
69427: LD_EXP 96
69431: PUSH
69432: LD_VAR 0 4
69436: ARRAY
69437: PUSH
69438: LD_INT 3
69440: ARRAY
69441: PPUSH
69442: LD_EXP 96
69446: PUSH
69447: LD_VAR 0 4
69451: ARRAY
69452: PUSH
69453: LD_INT 4
69455: ARRAY
69456: PPUSH
69457: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69461: LD_VAR 0 5
69465: PPUSH
69466: CALL_OW 181
// if Multiplayer then
69470: LD_OWVAR 4
69474: IFFALSE 69523
// begin repeat wait ( 10 ) ;
69476: LD_INT 10
69478: PPUSH
69479: CALL_OW 67
// until not IsInUnit ( driver ) ;
69483: LD_VAR 0 5
69487: PPUSH
69488: CALL_OW 310
69492: NOT
69493: IFFALSE 69476
// if not HasTask ( driver ) then
69495: LD_VAR 0 5
69499: PPUSH
69500: CALL_OW 314
69504: NOT
69505: IFFALSE 69521
// ComEnterUnit ( driver , factory ) ;
69507: LD_VAR 0 5
69511: PPUSH
69512: LD_VAR 0 2
69516: PPUSH
69517: CALL_OW 120
// end else
69521: GO 69537
// AddComEnterUnit ( driver , factory ) ;
69523: LD_VAR 0 5
69527: PPUSH
69528: LD_VAR 0 2
69532: PPUSH
69533: CALL_OW 180
// wait ( 0 0$1 ) ;
69537: LD_INT 35
69539: PPUSH
69540: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
69544: LD_ADDR_EXP 97
69548: PUSH
69549: LD_EXP 97
69553: PUSH
69554: LD_VAR 0 5
69558: DIFF
69559: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
69560: LD_ADDR_EXP 97
69564: PUSH
69565: LD_EXP 97
69569: PUSH
69570: LD_VAR 0 1
69574: DIFF
69575: ST_TO_ADDR
// break ;
69576: GO 69729
// end ; end else
69578: GO 69727
// if GetControl ( vehicle ) = control_remote then
69580: LD_VAR 0 1
69584: PPUSH
69585: CALL_OW 263
69589: PUSH
69590: LD_INT 2
69592: EQUAL
69593: IFFALSE 69679
// begin wait ( 0 0$2 ) ;
69595: LD_INT 70
69597: PPUSH
69598: CALL_OW 67
// repeat wait ( 10 ) ;
69602: LD_INT 10
69604: PPUSH
69605: CALL_OW 67
// Connect ( vehicle ) ;
69609: LD_VAR 0 1
69613: PPUSH
69614: CALL 18337 0 1
// until IsControledBy ( vehicle ) ;
69618: LD_VAR 0 1
69622: PPUSH
69623: CALL_OW 312
69627: IFFALSE 69602
// wait ( 10 ) ;
69629: LD_INT 10
69631: PPUSH
69632: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69636: LD_VAR 0 1
69640: PPUSH
69641: LD_EXP 96
69645: PUSH
69646: LD_VAR 0 4
69650: ARRAY
69651: PUSH
69652: LD_INT 3
69654: ARRAY
69655: PPUSH
69656: LD_EXP 96
69660: PUSH
69661: LD_VAR 0 4
69665: ARRAY
69666: PUSH
69667: LD_INT 4
69669: ARRAY
69670: PPUSH
69671: CALL_OW 111
// break ;
69675: GO 69729
// end else
69677: GO 69727
// begin wait ( 0 0$3 ) ;
69679: LD_INT 105
69681: PPUSH
69682: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69686: LD_VAR 0 1
69690: PPUSH
69691: LD_EXP 96
69695: PUSH
69696: LD_VAR 0 4
69700: ARRAY
69701: PUSH
69702: LD_INT 3
69704: ARRAY
69705: PPUSH
69706: LD_EXP 96
69710: PUSH
69711: LD_VAR 0 4
69715: ARRAY
69716: PUSH
69717: LD_INT 4
69719: ARRAY
69720: PPUSH
69721: CALL_OW 111
// break ;
69725: GO 69729
// end ; end ;
69727: GO 69180
69729: POP
69730: POP
// end ;
69731: LD_VAR 0 3
69735: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69736: LD_INT 0
69738: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69739: LD_VAR 0 1
69743: PUSH
69744: LD_INT 250
69746: EQUAL
69747: PUSH
69748: LD_VAR 0 2
69752: PPUSH
69753: CALL_OW 264
69757: PUSH
69758: LD_INT 81
69760: EQUAL
69761: AND
69762: IFFALSE 69783
// MinerPlaceMine ( unit , x , y ) ;
69764: LD_VAR 0 2
69768: PPUSH
69769: LD_VAR 0 4
69773: PPUSH
69774: LD_VAR 0 5
69778: PPUSH
69779: CALL 72875 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69783: LD_VAR 0 1
69787: PUSH
69788: LD_INT 251
69790: EQUAL
69791: PUSH
69792: LD_VAR 0 2
69796: PPUSH
69797: CALL_OW 264
69801: PUSH
69802: LD_INT 81
69804: EQUAL
69805: AND
69806: IFFALSE 69827
// MinerDetonateMine ( unit , x , y ) ;
69808: LD_VAR 0 2
69812: PPUSH
69813: LD_VAR 0 4
69817: PPUSH
69818: LD_VAR 0 5
69822: PPUSH
69823: CALL 73150 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69827: LD_VAR 0 1
69831: PUSH
69832: LD_INT 252
69834: EQUAL
69835: PUSH
69836: LD_VAR 0 2
69840: PPUSH
69841: CALL_OW 264
69845: PUSH
69846: LD_INT 81
69848: EQUAL
69849: AND
69850: IFFALSE 69871
// MinerCreateMinefield ( unit , x , y ) ;
69852: LD_VAR 0 2
69856: PPUSH
69857: LD_VAR 0 4
69861: PPUSH
69862: LD_VAR 0 5
69866: PPUSH
69867: CALL 73567 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69871: LD_VAR 0 1
69875: PUSH
69876: LD_INT 253
69878: EQUAL
69879: PUSH
69880: LD_VAR 0 2
69884: PPUSH
69885: CALL_OW 257
69889: PUSH
69890: LD_INT 5
69892: EQUAL
69893: AND
69894: IFFALSE 69915
// ComBinocular ( unit , x , y ) ;
69896: LD_VAR 0 2
69900: PPUSH
69901: LD_VAR 0 4
69905: PPUSH
69906: LD_VAR 0 5
69910: PPUSH
69911: CALL 73936 0 3
// if selectedUnit then
69915: LD_VAR 0 3
69919: IFFALSE 69975
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
69921: LD_VAR 0 1
69925: PUSH
69926: LD_INT 254
69928: EQUAL
69929: PUSH
69930: LD_VAR 0 2
69934: PPUSH
69935: CALL_OW 264
69939: PUSH
69940: LD_INT 99
69942: EQUAL
69943: AND
69944: PUSH
69945: LD_VAR 0 3
69949: PPUSH
69950: CALL_OW 263
69954: PUSH
69955: LD_INT 3
69957: EQUAL
69958: AND
69959: IFFALSE 69975
// HackDestroyVehicle ( unit , selectedUnit ) ;
69961: LD_VAR 0 2
69965: PPUSH
69966: LD_VAR 0 3
69970: PPUSH
69971: CALL 72239 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
69975: LD_VAR 0 1
69979: PUSH
69980: LD_INT 255
69982: EQUAL
69983: PUSH
69984: LD_VAR 0 2
69988: PPUSH
69989: CALL_OW 264
69993: PUSH
69994: LD_INT 14
69996: PUSH
69997: LD_INT 53
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: IN
70004: AND
70005: PUSH
70006: LD_VAR 0 4
70010: PPUSH
70011: LD_VAR 0 5
70015: PPUSH
70016: CALL_OW 488
70020: AND
70021: IFFALSE 70045
// CutTreeXYR ( unit , x , y , 12 ) ;
70023: LD_VAR 0 2
70027: PPUSH
70028: LD_VAR 0 4
70032: PPUSH
70033: LD_VAR 0 5
70037: PPUSH
70038: LD_INT 12
70040: PPUSH
70041: CALL 70236 0 4
// if cmd = 256 then
70045: LD_VAR 0 1
70049: PUSH
70050: LD_INT 256
70052: EQUAL
70053: IFFALSE 70074
// SetFactoryWaypoint ( unit , x , y ) ;
70055: LD_VAR 0 2
70059: PPUSH
70060: LD_VAR 0 4
70064: PPUSH
70065: LD_VAR 0 5
70069: PPUSH
70070: CALL 67410 0 3
// if cmd = 257 then
70074: LD_VAR 0 1
70078: PUSH
70079: LD_INT 257
70081: EQUAL
70082: IFFALSE 70103
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70084: LD_VAR 0 2
70088: PPUSH
70089: LD_VAR 0 4
70093: PPUSH
70094: LD_VAR 0 5
70098: PPUSH
70099: CALL 67900 0 3
// if cmd = 258 then
70103: LD_VAR 0 1
70107: PUSH
70108: LD_INT 258
70110: EQUAL
70111: IFFALSE 70135
// BurnTreeXYR ( unit , x , y , 8 ) ;
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 5
70127: PPUSH
70128: LD_INT 8
70130: PPUSH
70131: CALL 70630 0 4
// end ;
70135: LD_VAR 0 6
70139: RET
// export function ComRadiation ( un ) ; var eff ; begin
70140: LD_INT 0
70142: PPUSH
70143: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70144: LD_VAR 0 1
70148: PPUSH
70149: CALL_OW 264
70153: PUSH
70154: LD_INT 91
70156: NONEQUAL
70157: IFFALSE 70161
// exit ;
70159: GO 70231
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70161: LD_INT 68
70163: PPUSH
70164: LD_VAR 0 1
70168: PPUSH
70169: CALL_OW 255
70173: PPUSH
70174: CALL_OW 321
70178: PUSH
70179: LD_INT 2
70181: EQUAL
70182: IFFALSE 70194
// eff := 50 else
70184: LD_ADDR_VAR 0 3
70188: PUSH
70189: LD_INT 50
70191: ST_TO_ADDR
70192: GO 70202
// eff := 25 ;
70194: LD_ADDR_VAR 0 3
70198: PUSH
70199: LD_INT 25
70201: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL_OW 250
70211: PPUSH
70212: LD_VAR 0 1
70216: PPUSH
70217: CALL_OW 251
70221: PPUSH
70222: LD_VAR 0 3
70226: PPUSH
70227: CALL_OW 495
// end ;
70231: LD_VAR 0 2
70235: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70236: LD_INT 0
70238: PPUSH
70239: PPUSH
70240: PPUSH
70241: PPUSH
70242: PPUSH
70243: PPUSH
70244: PPUSH
70245: PPUSH
70246: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70247: LD_VAR 0 1
70251: PPUSH
70252: CALL_OW 302
70256: NOT
70257: PUSH
70258: LD_VAR 0 2
70262: PPUSH
70263: LD_VAR 0 3
70267: PPUSH
70268: CALL_OW 488
70272: NOT
70273: OR
70274: PUSH
70275: LD_VAR 0 4
70279: NOT
70280: OR
70281: IFFALSE 70285
// exit ;
70283: GO 70625
// list := [ ] ;
70285: LD_ADDR_VAR 0 13
70289: PUSH
70290: EMPTY
70291: ST_TO_ADDR
// if x - r < 0 then
70292: LD_VAR 0 2
70296: PUSH
70297: LD_VAR 0 4
70301: MINUS
70302: PUSH
70303: LD_INT 0
70305: LESS
70306: IFFALSE 70318
// min_x := 0 else
70308: LD_ADDR_VAR 0 7
70312: PUSH
70313: LD_INT 0
70315: ST_TO_ADDR
70316: GO 70334
// min_x := x - r ;
70318: LD_ADDR_VAR 0 7
70322: PUSH
70323: LD_VAR 0 2
70327: PUSH
70328: LD_VAR 0 4
70332: MINUS
70333: ST_TO_ADDR
// if y - r < 0 then
70334: LD_VAR 0 3
70338: PUSH
70339: LD_VAR 0 4
70343: MINUS
70344: PUSH
70345: LD_INT 0
70347: LESS
70348: IFFALSE 70360
// min_y := 0 else
70350: LD_ADDR_VAR 0 8
70354: PUSH
70355: LD_INT 0
70357: ST_TO_ADDR
70358: GO 70376
// min_y := y - r ;
70360: LD_ADDR_VAR 0 8
70364: PUSH
70365: LD_VAR 0 3
70369: PUSH
70370: LD_VAR 0 4
70374: MINUS
70375: ST_TO_ADDR
// max_x := x + r ;
70376: LD_ADDR_VAR 0 9
70380: PUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_VAR 0 4
70390: PLUS
70391: ST_TO_ADDR
// max_y := y + r ;
70392: LD_ADDR_VAR 0 10
70396: PUSH
70397: LD_VAR 0 3
70401: PUSH
70402: LD_VAR 0 4
70406: PLUS
70407: ST_TO_ADDR
// for _x = min_x to max_x do
70408: LD_ADDR_VAR 0 11
70412: PUSH
70413: DOUBLE
70414: LD_VAR 0 7
70418: DEC
70419: ST_TO_ADDR
70420: LD_VAR 0 9
70424: PUSH
70425: FOR_TO
70426: IFFALSE 70543
// for _y = min_y to max_y do
70428: LD_ADDR_VAR 0 12
70432: PUSH
70433: DOUBLE
70434: LD_VAR 0 8
70438: DEC
70439: ST_TO_ADDR
70440: LD_VAR 0 10
70444: PUSH
70445: FOR_TO
70446: IFFALSE 70539
// begin if not ValidHex ( _x , _y ) then
70448: LD_VAR 0 11
70452: PPUSH
70453: LD_VAR 0 12
70457: PPUSH
70458: CALL_OW 488
70462: NOT
70463: IFFALSE 70467
// continue ;
70465: GO 70445
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70467: LD_VAR 0 11
70471: PPUSH
70472: LD_VAR 0 12
70476: PPUSH
70477: CALL_OW 351
70481: PUSH
70482: LD_VAR 0 11
70486: PPUSH
70487: LD_VAR 0 12
70491: PPUSH
70492: CALL_OW 554
70496: AND
70497: IFFALSE 70537
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70499: LD_ADDR_VAR 0 13
70503: PUSH
70504: LD_VAR 0 13
70508: PPUSH
70509: LD_VAR 0 13
70513: PUSH
70514: LD_INT 1
70516: PLUS
70517: PPUSH
70518: LD_VAR 0 11
70522: PUSH
70523: LD_VAR 0 12
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PPUSH
70532: CALL_OW 2
70536: ST_TO_ADDR
// end ;
70537: GO 70445
70539: POP
70540: POP
70541: GO 70425
70543: POP
70544: POP
// if not list then
70545: LD_VAR 0 13
70549: NOT
70550: IFFALSE 70554
// exit ;
70552: GO 70625
// for i in list do
70554: LD_ADDR_VAR 0 6
70558: PUSH
70559: LD_VAR 0 13
70563: PUSH
70564: FOR_IN
70565: IFFALSE 70623
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70567: LD_VAR 0 1
70571: PPUSH
70572: LD_STRING M
70574: PUSH
70575: LD_VAR 0 6
70579: PUSH
70580: LD_INT 1
70582: ARRAY
70583: PUSH
70584: LD_VAR 0 6
70588: PUSH
70589: LD_INT 2
70591: ARRAY
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: PUSH
70614: EMPTY
70615: LIST
70616: PPUSH
70617: CALL_OW 447
70621: GO 70564
70623: POP
70624: POP
// end ;
70625: LD_VAR 0 5
70629: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70630: LD_INT 0
70632: PPUSH
70633: PPUSH
70634: PPUSH
70635: PPUSH
70636: PPUSH
70637: PPUSH
70638: PPUSH
70639: PPUSH
70640: PPUSH
70641: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70642: LD_VAR 0 1
70646: PPUSH
70647: CALL_OW 302
70651: NOT
70652: PUSH
70653: LD_VAR 0 2
70657: PPUSH
70658: LD_VAR 0 3
70662: PPUSH
70663: CALL_OW 488
70667: NOT
70668: OR
70669: PUSH
70670: LD_VAR 0 4
70674: NOT
70675: OR
70676: IFFALSE 70680
// exit ;
70678: GO 71193
// list := [ ] ;
70680: LD_ADDR_VAR 0 13
70684: PUSH
70685: EMPTY
70686: ST_TO_ADDR
// if x - r < 0 then
70687: LD_VAR 0 2
70691: PUSH
70692: LD_VAR 0 4
70696: MINUS
70697: PUSH
70698: LD_INT 0
70700: LESS
70701: IFFALSE 70713
// min_x := 0 else
70703: LD_ADDR_VAR 0 7
70707: PUSH
70708: LD_INT 0
70710: ST_TO_ADDR
70711: GO 70729
// min_x := x - r ;
70713: LD_ADDR_VAR 0 7
70717: PUSH
70718: LD_VAR 0 2
70722: PUSH
70723: LD_VAR 0 4
70727: MINUS
70728: ST_TO_ADDR
// if y - r < 0 then
70729: LD_VAR 0 3
70733: PUSH
70734: LD_VAR 0 4
70738: MINUS
70739: PUSH
70740: LD_INT 0
70742: LESS
70743: IFFALSE 70755
// min_y := 0 else
70745: LD_ADDR_VAR 0 8
70749: PUSH
70750: LD_INT 0
70752: ST_TO_ADDR
70753: GO 70771
// min_y := y - r ;
70755: LD_ADDR_VAR 0 8
70759: PUSH
70760: LD_VAR 0 3
70764: PUSH
70765: LD_VAR 0 4
70769: MINUS
70770: ST_TO_ADDR
// max_x := x + r ;
70771: LD_ADDR_VAR 0 9
70775: PUSH
70776: LD_VAR 0 2
70780: PUSH
70781: LD_VAR 0 4
70785: PLUS
70786: ST_TO_ADDR
// max_y := y + r ;
70787: LD_ADDR_VAR 0 10
70791: PUSH
70792: LD_VAR 0 3
70796: PUSH
70797: LD_VAR 0 4
70801: PLUS
70802: ST_TO_ADDR
// for _x = min_x to max_x do
70803: LD_ADDR_VAR 0 11
70807: PUSH
70808: DOUBLE
70809: LD_VAR 0 7
70813: DEC
70814: ST_TO_ADDR
70815: LD_VAR 0 9
70819: PUSH
70820: FOR_TO
70821: IFFALSE 70938
// for _y = min_y to max_y do
70823: LD_ADDR_VAR 0 12
70827: PUSH
70828: DOUBLE
70829: LD_VAR 0 8
70833: DEC
70834: ST_TO_ADDR
70835: LD_VAR 0 10
70839: PUSH
70840: FOR_TO
70841: IFFALSE 70934
// begin if not ValidHex ( _x , _y ) then
70843: LD_VAR 0 11
70847: PPUSH
70848: LD_VAR 0 12
70852: PPUSH
70853: CALL_OW 488
70857: NOT
70858: IFFALSE 70862
// continue ;
70860: GO 70840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70862: LD_VAR 0 11
70866: PPUSH
70867: LD_VAR 0 12
70871: PPUSH
70872: CALL_OW 351
70876: PUSH
70877: LD_VAR 0 11
70881: PPUSH
70882: LD_VAR 0 12
70886: PPUSH
70887: CALL_OW 554
70891: AND
70892: IFFALSE 70932
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70894: LD_ADDR_VAR 0 13
70898: PUSH
70899: LD_VAR 0 13
70903: PPUSH
70904: LD_VAR 0 13
70908: PUSH
70909: LD_INT 1
70911: PLUS
70912: PPUSH
70913: LD_VAR 0 11
70917: PUSH
70918: LD_VAR 0 12
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PPUSH
70927: CALL_OW 2
70931: ST_TO_ADDR
// end ;
70932: GO 70840
70934: POP
70935: POP
70936: GO 70820
70938: POP
70939: POP
// if not list then
70940: LD_VAR 0 13
70944: NOT
70945: IFFALSE 70949
// exit ;
70947: GO 71193
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
70949: LD_ADDR_VAR 0 13
70953: PUSH
70954: LD_VAR 0 1
70958: PPUSH
70959: LD_VAR 0 13
70963: PPUSH
70964: LD_INT 1
70966: PPUSH
70967: LD_INT 1
70969: PPUSH
70970: CALL 15479 0 4
70974: ST_TO_ADDR
// ComStop ( flame ) ;
70975: LD_VAR 0 1
70979: PPUSH
70980: CALL_OW 141
// for i in list do
70984: LD_ADDR_VAR 0 6
70988: PUSH
70989: LD_VAR 0 13
70993: PUSH
70994: FOR_IN
70995: IFFALSE 71026
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
70997: LD_VAR 0 1
71001: PPUSH
71002: LD_VAR 0 6
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PPUSH
71011: LD_VAR 0 6
71015: PUSH
71016: LD_INT 2
71018: ARRAY
71019: PPUSH
71020: CALL_OW 176
71024: GO 70994
71026: POP
71027: POP
// repeat wait ( 0 0$1 ) ;
71028: LD_INT 35
71030: PPUSH
71031: CALL_OW 67
// task := GetTaskList ( flame ) ;
71035: LD_ADDR_VAR 0 14
71039: PUSH
71040: LD_VAR 0 1
71044: PPUSH
71045: CALL_OW 437
71049: ST_TO_ADDR
// if not task then
71050: LD_VAR 0 14
71054: NOT
71055: IFFALSE 71059
// exit ;
71057: GO 71193
// if task [ 1 ] [ 1 ] <> | then
71059: LD_VAR 0 14
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PUSH
71068: LD_INT 1
71070: ARRAY
71071: PUSH
71072: LD_STRING |
71074: NONEQUAL
71075: IFFALSE 71079
// exit ;
71077: GO 71193
// _x := task [ 1 ] [ 2 ] ;
71079: LD_ADDR_VAR 0 11
71083: PUSH
71084: LD_VAR 0 14
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PUSH
71093: LD_INT 2
71095: ARRAY
71096: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71097: LD_ADDR_VAR 0 12
71101: PUSH
71102: LD_VAR 0 14
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 3
71113: ARRAY
71114: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71115: LD_VAR 0 11
71119: PPUSH
71120: LD_VAR 0 12
71124: PPUSH
71125: CALL_OW 351
71129: NOT
71130: PUSH
71131: LD_VAR 0 11
71135: PPUSH
71136: LD_VAR 0 12
71140: PPUSH
71141: CALL_OW 554
71145: NOT
71146: OR
71147: IFFALSE 71181
// begin task := Delete ( task , 1 ) ;
71149: LD_ADDR_VAR 0 14
71153: PUSH
71154: LD_VAR 0 14
71158: PPUSH
71159: LD_INT 1
71161: PPUSH
71162: CALL_OW 3
71166: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71167: LD_VAR 0 1
71171: PPUSH
71172: LD_VAR 0 14
71176: PPUSH
71177: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71181: LD_VAR 0 1
71185: PPUSH
71186: CALL_OW 314
71190: NOT
71191: IFFALSE 71028
// end ;
71193: LD_VAR 0 5
71197: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71198: LD_EXP 100
71202: NOT
71203: IFFALSE 71253
71205: GO 71207
71207: DISABLE
// begin initHack := true ;
71208: LD_ADDR_EXP 100
71212: PUSH
71213: LD_INT 1
71215: ST_TO_ADDR
// hackTanks := [ ] ;
71216: LD_ADDR_EXP 101
71220: PUSH
71221: EMPTY
71222: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71223: LD_ADDR_EXP 102
71227: PUSH
71228: EMPTY
71229: ST_TO_ADDR
// hackLimit := 3 ;
71230: LD_ADDR_EXP 103
71234: PUSH
71235: LD_INT 3
71237: ST_TO_ADDR
// hackDist := 12 ;
71238: LD_ADDR_EXP 104
71242: PUSH
71243: LD_INT 12
71245: ST_TO_ADDR
// hackCounter := [ ] ;
71246: LD_ADDR_EXP 105
71250: PUSH
71251: EMPTY
71252: ST_TO_ADDR
// end ;
71253: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71254: LD_EXP 100
71258: PUSH
71259: LD_INT 34
71261: PUSH
71262: LD_INT 99
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PPUSH
71269: CALL_OW 69
71273: AND
71274: IFFALSE 71527
71276: GO 71278
71278: DISABLE
71279: LD_INT 0
71281: PPUSH
71282: PPUSH
// begin enable ;
71283: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71284: LD_ADDR_VAR 0 1
71288: PUSH
71289: LD_INT 34
71291: PUSH
71292: LD_INT 99
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PPUSH
71299: CALL_OW 69
71303: PUSH
71304: FOR_IN
71305: IFFALSE 71525
// begin if not i in hackTanks then
71307: LD_VAR 0 1
71311: PUSH
71312: LD_EXP 101
71316: IN
71317: NOT
71318: IFFALSE 71401
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71320: LD_ADDR_EXP 101
71324: PUSH
71325: LD_EXP 101
71329: PPUSH
71330: LD_EXP 101
71334: PUSH
71335: LD_INT 1
71337: PLUS
71338: PPUSH
71339: LD_VAR 0 1
71343: PPUSH
71344: CALL_OW 1
71348: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71349: LD_ADDR_EXP 102
71353: PUSH
71354: LD_EXP 102
71358: PPUSH
71359: LD_EXP 102
71363: PUSH
71364: LD_INT 1
71366: PLUS
71367: PPUSH
71368: EMPTY
71369: PPUSH
71370: CALL_OW 1
71374: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71375: LD_ADDR_EXP 105
71379: PUSH
71380: LD_EXP 105
71384: PPUSH
71385: LD_EXP 105
71389: PUSH
71390: LD_INT 1
71392: PLUS
71393: PPUSH
71394: EMPTY
71395: PPUSH
71396: CALL_OW 1
71400: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71401: LD_VAR 0 1
71405: PPUSH
71406: CALL_OW 302
71410: NOT
71411: IFFALSE 71424
// begin HackUnlinkAll ( i ) ;
71413: LD_VAR 0 1
71417: PPUSH
71418: CALL 71530 0 1
// continue ;
71422: GO 71304
// end ; HackCheckCapturedStatus ( i ) ;
71424: LD_VAR 0 1
71428: PPUSH
71429: CALL 71973 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71433: LD_ADDR_VAR 0 2
71437: PUSH
71438: LD_INT 81
71440: PUSH
71441: LD_VAR 0 1
71445: PPUSH
71446: CALL_OW 255
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 33
71457: PUSH
71458: LD_INT 3
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 91
71467: PUSH
71468: LD_VAR 0 1
71472: PUSH
71473: LD_EXP 104
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 50
71485: PUSH
71486: EMPTY
71487: LIST
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: PPUSH
71495: CALL_OW 69
71499: ST_TO_ADDR
// if not tmp then
71500: LD_VAR 0 2
71504: NOT
71505: IFFALSE 71509
// continue ;
71507: GO 71304
// HackLink ( i , tmp ) ;
71509: LD_VAR 0 1
71513: PPUSH
71514: LD_VAR 0 2
71518: PPUSH
71519: CALL 71666 0 2
// end ;
71523: GO 71304
71525: POP
71526: POP
// end ;
71527: PPOPN 2
71529: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71530: LD_INT 0
71532: PPUSH
71533: PPUSH
71534: PPUSH
// if not hack in hackTanks then
71535: LD_VAR 0 1
71539: PUSH
71540: LD_EXP 101
71544: IN
71545: NOT
71546: IFFALSE 71550
// exit ;
71548: GO 71661
// index := GetElementIndex ( hackTanks , hack ) ;
71550: LD_ADDR_VAR 0 4
71554: PUSH
71555: LD_EXP 101
71559: PPUSH
71560: LD_VAR 0 1
71564: PPUSH
71565: CALL 14776 0 2
71569: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71570: LD_EXP 102
71574: PUSH
71575: LD_VAR 0 4
71579: ARRAY
71580: IFFALSE 71661
// begin for i in hackTanksCaptured [ index ] do
71582: LD_ADDR_VAR 0 3
71586: PUSH
71587: LD_EXP 102
71591: PUSH
71592: LD_VAR 0 4
71596: ARRAY
71597: PUSH
71598: FOR_IN
71599: IFFALSE 71625
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71601: LD_VAR 0 3
71605: PUSH
71606: LD_INT 1
71608: ARRAY
71609: PPUSH
71610: LD_VAR 0 3
71614: PUSH
71615: LD_INT 2
71617: ARRAY
71618: PPUSH
71619: CALL_OW 235
71623: GO 71598
71625: POP
71626: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71627: LD_ADDR_EXP 102
71631: PUSH
71632: LD_EXP 102
71636: PPUSH
71637: LD_VAR 0 4
71641: PPUSH
71642: EMPTY
71643: PPUSH
71644: CALL_OW 1
71648: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_INT 0
71656: PPUSH
71657: CALL_OW 505
// end ; end ;
71661: LD_VAR 0 2
71665: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71666: LD_INT 0
71668: PPUSH
71669: PPUSH
71670: PPUSH
// if not hack in hackTanks or not vehicles then
71671: LD_VAR 0 1
71675: PUSH
71676: LD_EXP 101
71680: IN
71681: NOT
71682: PUSH
71683: LD_VAR 0 2
71687: NOT
71688: OR
71689: IFFALSE 71693
// exit ;
71691: GO 71968
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71693: LD_ADDR_VAR 0 2
71697: PUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: LD_VAR 0 2
71707: PPUSH
71708: LD_INT 1
71710: PPUSH
71711: LD_INT 1
71713: PPUSH
71714: CALL 15426 0 4
71718: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71719: LD_ADDR_VAR 0 5
71723: PUSH
71724: LD_EXP 101
71728: PPUSH
71729: LD_VAR 0 1
71733: PPUSH
71734: CALL 14776 0 2
71738: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71739: LD_EXP 102
71743: PUSH
71744: LD_VAR 0 5
71748: ARRAY
71749: PUSH
71750: LD_EXP 103
71754: LESS
71755: IFFALSE 71944
// begin for i := 1 to vehicles do
71757: LD_ADDR_VAR 0 4
71761: PUSH
71762: DOUBLE
71763: LD_INT 1
71765: DEC
71766: ST_TO_ADDR
71767: LD_VAR 0 2
71771: PUSH
71772: FOR_TO
71773: IFFALSE 71942
// begin if hackTanksCaptured [ index ] = hackLimit then
71775: LD_EXP 102
71779: PUSH
71780: LD_VAR 0 5
71784: ARRAY
71785: PUSH
71786: LD_EXP 103
71790: EQUAL
71791: IFFALSE 71795
// break ;
71793: GO 71942
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71795: LD_ADDR_EXP 105
71799: PUSH
71800: LD_EXP 105
71804: PPUSH
71805: LD_VAR 0 5
71809: PPUSH
71810: LD_EXP 105
71814: PUSH
71815: LD_VAR 0 5
71819: ARRAY
71820: PUSH
71821: LD_INT 1
71823: PLUS
71824: PPUSH
71825: CALL_OW 1
71829: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71830: LD_ADDR_EXP 102
71834: PUSH
71835: LD_EXP 102
71839: PPUSH
71840: LD_VAR 0 5
71844: PUSH
71845: LD_EXP 102
71849: PUSH
71850: LD_VAR 0 5
71854: ARRAY
71855: PUSH
71856: LD_INT 1
71858: PLUS
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PPUSH
71864: LD_VAR 0 2
71868: PUSH
71869: LD_VAR 0 4
71873: ARRAY
71874: PUSH
71875: LD_VAR 0 2
71879: PUSH
71880: LD_VAR 0 4
71884: ARRAY
71885: PPUSH
71886: CALL_OW 255
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PPUSH
71895: CALL 14991 0 3
71899: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
71900: LD_VAR 0 2
71904: PUSH
71905: LD_VAR 0 4
71909: ARRAY
71910: PPUSH
71911: LD_VAR 0 1
71915: PPUSH
71916: CALL_OW 255
71920: PPUSH
71921: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
71925: LD_VAR 0 2
71929: PUSH
71930: LD_VAR 0 4
71934: ARRAY
71935: PPUSH
71936: CALL_OW 141
// end ;
71940: GO 71772
71942: POP
71943: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
71944: LD_VAR 0 1
71948: PPUSH
71949: LD_EXP 102
71953: PUSH
71954: LD_VAR 0 5
71958: ARRAY
71959: PUSH
71960: LD_INT 0
71962: PLUS
71963: PPUSH
71964: CALL_OW 505
// end ;
71968: LD_VAR 0 3
71972: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
71973: LD_INT 0
71975: PPUSH
71976: PPUSH
71977: PPUSH
71978: PPUSH
// if not hack in hackTanks then
71979: LD_VAR 0 1
71983: PUSH
71984: LD_EXP 101
71988: IN
71989: NOT
71990: IFFALSE 71994
// exit ;
71992: GO 72234
// index := GetElementIndex ( hackTanks , hack ) ;
71994: LD_ADDR_VAR 0 4
71998: PUSH
71999: LD_EXP 101
72003: PPUSH
72004: LD_VAR 0 1
72008: PPUSH
72009: CALL 14776 0 2
72013: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72014: LD_ADDR_VAR 0 3
72018: PUSH
72019: DOUBLE
72020: LD_EXP 102
72024: PUSH
72025: LD_VAR 0 4
72029: ARRAY
72030: INC
72031: ST_TO_ADDR
72032: LD_INT 1
72034: PUSH
72035: FOR_DOWNTO
72036: IFFALSE 72208
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72038: LD_ADDR_VAR 0 5
72042: PUSH
72043: LD_EXP 102
72047: PUSH
72048: LD_VAR 0 4
72052: ARRAY
72053: PUSH
72054: LD_VAR 0 3
72058: ARRAY
72059: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72060: LD_VAR 0 5
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PPUSH
72069: CALL_OW 302
72073: NOT
72074: PUSH
72075: LD_VAR 0 5
72079: PUSH
72080: LD_INT 1
72082: ARRAY
72083: PPUSH
72084: CALL_OW 255
72088: PUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 255
72098: NONEQUAL
72099: OR
72100: IFFALSE 72206
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72102: LD_VAR 0 5
72106: PUSH
72107: LD_INT 1
72109: ARRAY
72110: PPUSH
72111: CALL_OW 305
72115: PUSH
72116: LD_VAR 0 5
72120: PUSH
72121: LD_INT 1
72123: ARRAY
72124: PPUSH
72125: CALL_OW 255
72129: PUSH
72130: LD_VAR 0 1
72134: PPUSH
72135: CALL_OW 255
72139: EQUAL
72140: AND
72141: IFFALSE 72165
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72143: LD_VAR 0 5
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PPUSH
72152: LD_VAR 0 5
72156: PUSH
72157: LD_INT 2
72159: ARRAY
72160: PPUSH
72161: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72165: LD_ADDR_EXP 102
72169: PUSH
72170: LD_EXP 102
72174: PPUSH
72175: LD_VAR 0 4
72179: PPUSH
72180: LD_EXP 102
72184: PUSH
72185: LD_VAR 0 4
72189: ARRAY
72190: PPUSH
72191: LD_VAR 0 3
72195: PPUSH
72196: CALL_OW 3
72200: PPUSH
72201: CALL_OW 1
72205: ST_TO_ADDR
// end ; end ;
72206: GO 72035
72208: POP
72209: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72210: LD_VAR 0 1
72214: PPUSH
72215: LD_EXP 102
72219: PUSH
72220: LD_VAR 0 4
72224: ARRAY
72225: PUSH
72226: LD_INT 0
72228: PLUS
72229: PPUSH
72230: CALL_OW 505
// end ;
72234: LD_VAR 0 2
72238: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72239: LD_INT 0
72241: PPUSH
72242: PPUSH
72243: PPUSH
72244: PPUSH
// if not hack in hackTanks then
72245: LD_VAR 0 1
72249: PUSH
72250: LD_EXP 101
72254: IN
72255: NOT
72256: IFFALSE 72260
// exit ;
72258: GO 72345
// index := GetElementIndex ( hackTanks , hack ) ;
72260: LD_ADDR_VAR 0 5
72264: PUSH
72265: LD_EXP 101
72269: PPUSH
72270: LD_VAR 0 1
72274: PPUSH
72275: CALL 14776 0 2
72279: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72280: LD_ADDR_VAR 0 4
72284: PUSH
72285: DOUBLE
72286: LD_INT 1
72288: DEC
72289: ST_TO_ADDR
72290: LD_EXP 102
72294: PUSH
72295: LD_VAR 0 5
72299: ARRAY
72300: PUSH
72301: FOR_TO
72302: IFFALSE 72343
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72304: LD_EXP 102
72308: PUSH
72309: LD_VAR 0 5
72313: ARRAY
72314: PUSH
72315: LD_VAR 0 4
72319: ARRAY
72320: PUSH
72321: LD_INT 1
72323: ARRAY
72324: PUSH
72325: LD_VAR 0 2
72329: EQUAL
72330: IFFALSE 72341
// KillUnit ( vehicle ) ;
72332: LD_VAR 0 2
72336: PPUSH
72337: CALL_OW 66
72341: GO 72301
72343: POP
72344: POP
// end ;
72345: LD_VAR 0 3
72349: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72350: LD_EXP 106
72354: NOT
72355: IFFALSE 72390
72357: GO 72359
72359: DISABLE
// begin initMiner := true ;
72360: LD_ADDR_EXP 106
72364: PUSH
72365: LD_INT 1
72367: ST_TO_ADDR
// minersList := [ ] ;
72368: LD_ADDR_EXP 107
72372: PUSH
72373: EMPTY
72374: ST_TO_ADDR
// minerMinesList := [ ] ;
72375: LD_ADDR_EXP 108
72379: PUSH
72380: EMPTY
72381: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72382: LD_ADDR_EXP 109
72386: PUSH
72387: LD_INT 5
72389: ST_TO_ADDR
// end ;
72390: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72391: LD_EXP 106
72395: PUSH
72396: LD_INT 34
72398: PUSH
72399: LD_INT 81
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PPUSH
72406: CALL_OW 69
72410: AND
72411: IFFALSE 72872
72413: GO 72415
72415: DISABLE
72416: LD_INT 0
72418: PPUSH
72419: PPUSH
72420: PPUSH
72421: PPUSH
// begin enable ;
72422: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72423: LD_ADDR_VAR 0 1
72427: PUSH
72428: LD_INT 34
72430: PUSH
72431: LD_INT 81
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PPUSH
72438: CALL_OW 69
72442: PUSH
72443: FOR_IN
72444: IFFALSE 72516
// begin if not i in minersList then
72446: LD_VAR 0 1
72450: PUSH
72451: LD_EXP 107
72455: IN
72456: NOT
72457: IFFALSE 72514
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72459: LD_ADDR_EXP 107
72463: PUSH
72464: LD_EXP 107
72468: PPUSH
72469: LD_EXP 107
72473: PUSH
72474: LD_INT 1
72476: PLUS
72477: PPUSH
72478: LD_VAR 0 1
72482: PPUSH
72483: CALL_OW 1
72487: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72488: LD_ADDR_EXP 108
72492: PUSH
72493: LD_EXP 108
72497: PPUSH
72498: LD_EXP 108
72502: PUSH
72503: LD_INT 1
72505: PLUS
72506: PPUSH
72507: EMPTY
72508: PPUSH
72509: CALL_OW 1
72513: ST_TO_ADDR
// end end ;
72514: GO 72443
72516: POP
72517: POP
// for i := minerMinesList downto 1 do
72518: LD_ADDR_VAR 0 1
72522: PUSH
72523: DOUBLE
72524: LD_EXP 108
72528: INC
72529: ST_TO_ADDR
72530: LD_INT 1
72532: PUSH
72533: FOR_DOWNTO
72534: IFFALSE 72870
// begin if IsLive ( minersList [ i ] ) then
72536: LD_EXP 107
72540: PUSH
72541: LD_VAR 0 1
72545: ARRAY
72546: PPUSH
72547: CALL_OW 300
72551: IFFALSE 72579
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72553: LD_EXP 107
72557: PUSH
72558: LD_VAR 0 1
72562: ARRAY
72563: PPUSH
72564: LD_EXP 108
72568: PUSH
72569: LD_VAR 0 1
72573: ARRAY
72574: PPUSH
72575: CALL_OW 505
// if not minerMinesList [ i ] then
72579: LD_EXP 108
72583: PUSH
72584: LD_VAR 0 1
72588: ARRAY
72589: NOT
72590: IFFALSE 72594
// continue ;
72592: GO 72533
// for j := minerMinesList [ i ] downto 1 do
72594: LD_ADDR_VAR 0 2
72598: PUSH
72599: DOUBLE
72600: LD_EXP 108
72604: PUSH
72605: LD_VAR 0 1
72609: ARRAY
72610: INC
72611: ST_TO_ADDR
72612: LD_INT 1
72614: PUSH
72615: FOR_DOWNTO
72616: IFFALSE 72866
// begin side := GetSide ( minersList [ i ] ) ;
72618: LD_ADDR_VAR 0 3
72622: PUSH
72623: LD_EXP 107
72627: PUSH
72628: LD_VAR 0 1
72632: ARRAY
72633: PPUSH
72634: CALL_OW 255
72638: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72639: LD_ADDR_VAR 0 4
72643: PUSH
72644: LD_EXP 108
72648: PUSH
72649: LD_VAR 0 1
72653: ARRAY
72654: PUSH
72655: LD_VAR 0 2
72659: ARRAY
72660: PUSH
72661: LD_INT 1
72663: ARRAY
72664: PPUSH
72665: LD_EXP 108
72669: PUSH
72670: LD_VAR 0 1
72674: ARRAY
72675: PUSH
72676: LD_VAR 0 2
72680: ARRAY
72681: PUSH
72682: LD_INT 2
72684: ARRAY
72685: PPUSH
72686: CALL_OW 428
72690: ST_TO_ADDR
// if not tmp then
72691: LD_VAR 0 4
72695: NOT
72696: IFFALSE 72700
// continue ;
72698: GO 72615
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72700: LD_VAR 0 4
72704: PUSH
72705: LD_INT 81
72707: PUSH
72708: LD_VAR 0 3
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PPUSH
72717: CALL_OW 69
72721: IN
72722: PUSH
72723: LD_EXP 108
72727: PUSH
72728: LD_VAR 0 1
72732: ARRAY
72733: PUSH
72734: LD_VAR 0 2
72738: ARRAY
72739: PUSH
72740: LD_INT 1
72742: ARRAY
72743: PPUSH
72744: LD_EXP 108
72748: PUSH
72749: LD_VAR 0 1
72753: ARRAY
72754: PUSH
72755: LD_VAR 0 2
72759: ARRAY
72760: PUSH
72761: LD_INT 2
72763: ARRAY
72764: PPUSH
72765: CALL_OW 458
72769: AND
72770: IFFALSE 72864
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72772: LD_EXP 108
72776: PUSH
72777: LD_VAR 0 1
72781: ARRAY
72782: PUSH
72783: LD_VAR 0 2
72787: ARRAY
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PPUSH
72793: LD_EXP 108
72797: PUSH
72798: LD_VAR 0 1
72802: ARRAY
72803: PUSH
72804: LD_VAR 0 2
72808: ARRAY
72809: PUSH
72810: LD_INT 2
72812: ARRAY
72813: PPUSH
72814: LD_VAR 0 3
72818: PPUSH
72819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72823: LD_ADDR_EXP 108
72827: PUSH
72828: LD_EXP 108
72832: PPUSH
72833: LD_VAR 0 1
72837: PPUSH
72838: LD_EXP 108
72842: PUSH
72843: LD_VAR 0 1
72847: ARRAY
72848: PPUSH
72849: LD_VAR 0 2
72853: PPUSH
72854: CALL_OW 3
72858: PPUSH
72859: CALL_OW 1
72863: ST_TO_ADDR
// end ; end ;
72864: GO 72615
72866: POP
72867: POP
// end ;
72868: GO 72533
72870: POP
72871: POP
// end ;
72872: PPOPN 4
72874: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
72875: LD_INT 0
72877: PPUSH
72878: PPUSH
// result := false ;
72879: LD_ADDR_VAR 0 4
72883: PUSH
72884: LD_INT 0
72886: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
72887: LD_VAR 0 1
72891: PPUSH
72892: CALL_OW 264
72896: PUSH
72897: LD_INT 81
72899: EQUAL
72900: NOT
72901: IFFALSE 72905
// exit ;
72903: GO 73145
// index := GetElementIndex ( minersList , unit ) ;
72905: LD_ADDR_VAR 0 5
72909: PUSH
72910: LD_EXP 107
72914: PPUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL 14776 0 2
72924: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
72925: LD_EXP 108
72929: PUSH
72930: LD_VAR 0 5
72934: ARRAY
72935: PUSH
72936: LD_EXP 109
72940: GREATEREQUAL
72941: IFFALSE 72945
// exit ;
72943: GO 73145
// ComMoveXY ( unit , x , y ) ;
72945: LD_VAR 0 1
72949: PPUSH
72950: LD_VAR 0 2
72954: PPUSH
72955: LD_VAR 0 3
72959: PPUSH
72960: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72964: LD_INT 35
72966: PPUSH
72967: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_VAR 0 2
72980: PPUSH
72981: LD_VAR 0 3
72985: PPUSH
72986: CALL 46609 0 3
72990: NOT
72991: PUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: CALL_OW 314
73001: AND
73002: IFFALSE 73006
// exit ;
73004: GO 73145
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73006: LD_VAR 0 2
73010: PPUSH
73011: LD_VAR 0 3
73015: PPUSH
73016: CALL_OW 428
73020: PUSH
73021: LD_VAR 0 1
73025: EQUAL
73026: PUSH
73027: LD_VAR 0 1
73031: PPUSH
73032: CALL_OW 314
73036: NOT
73037: AND
73038: IFFALSE 72964
// PlaySoundXY ( x , y , PlantMine ) ;
73040: LD_VAR 0 2
73044: PPUSH
73045: LD_VAR 0 3
73049: PPUSH
73050: LD_STRING PlantMine
73052: PPUSH
73053: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73057: LD_VAR 0 2
73061: PPUSH
73062: LD_VAR 0 3
73066: PPUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: CALL_OW 255
73076: PPUSH
73077: LD_INT 0
73079: PPUSH
73080: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73084: LD_ADDR_EXP 108
73088: PUSH
73089: LD_EXP 108
73093: PPUSH
73094: LD_VAR 0 5
73098: PUSH
73099: LD_EXP 108
73103: PUSH
73104: LD_VAR 0 5
73108: ARRAY
73109: PUSH
73110: LD_INT 1
73112: PLUS
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PPUSH
73118: LD_VAR 0 2
73122: PUSH
73123: LD_VAR 0 3
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PPUSH
73132: CALL 14991 0 3
73136: ST_TO_ADDR
// result := true ;
73137: LD_ADDR_VAR 0 4
73141: PUSH
73142: LD_INT 1
73144: ST_TO_ADDR
// end ;
73145: LD_VAR 0 4
73149: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73150: LD_INT 0
73152: PPUSH
73153: PPUSH
73154: PPUSH
// if not unit in minersList then
73155: LD_VAR 0 1
73159: PUSH
73160: LD_EXP 107
73164: IN
73165: NOT
73166: IFFALSE 73170
// exit ;
73168: GO 73562
// index := GetElementIndex ( minersList , unit ) ;
73170: LD_ADDR_VAR 0 6
73174: PUSH
73175: LD_EXP 107
73179: PPUSH
73180: LD_VAR 0 1
73184: PPUSH
73185: CALL 14776 0 2
73189: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73190: LD_ADDR_VAR 0 5
73194: PUSH
73195: DOUBLE
73196: LD_EXP 108
73200: PUSH
73201: LD_VAR 0 6
73205: ARRAY
73206: INC
73207: ST_TO_ADDR
73208: LD_INT 1
73210: PUSH
73211: FOR_DOWNTO
73212: IFFALSE 73373
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73214: LD_EXP 108
73218: PUSH
73219: LD_VAR 0 6
73223: ARRAY
73224: PUSH
73225: LD_VAR 0 5
73229: ARRAY
73230: PUSH
73231: LD_INT 1
73233: ARRAY
73234: PUSH
73235: LD_VAR 0 2
73239: EQUAL
73240: PUSH
73241: LD_EXP 108
73245: PUSH
73246: LD_VAR 0 6
73250: ARRAY
73251: PUSH
73252: LD_VAR 0 5
73256: ARRAY
73257: PUSH
73258: LD_INT 2
73260: ARRAY
73261: PUSH
73262: LD_VAR 0 3
73266: EQUAL
73267: AND
73268: IFFALSE 73371
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73270: LD_EXP 108
73274: PUSH
73275: LD_VAR 0 6
73279: ARRAY
73280: PUSH
73281: LD_VAR 0 5
73285: ARRAY
73286: PUSH
73287: LD_INT 1
73289: ARRAY
73290: PPUSH
73291: LD_EXP 108
73295: PUSH
73296: LD_VAR 0 6
73300: ARRAY
73301: PUSH
73302: LD_VAR 0 5
73306: ARRAY
73307: PUSH
73308: LD_INT 2
73310: ARRAY
73311: PPUSH
73312: LD_VAR 0 1
73316: PPUSH
73317: CALL_OW 255
73321: PPUSH
73322: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73326: LD_ADDR_EXP 108
73330: PUSH
73331: LD_EXP 108
73335: PPUSH
73336: LD_VAR 0 6
73340: PPUSH
73341: LD_EXP 108
73345: PUSH
73346: LD_VAR 0 6
73350: ARRAY
73351: PPUSH
73352: LD_VAR 0 5
73356: PPUSH
73357: CALL_OW 3
73361: PPUSH
73362: CALL_OW 1
73366: ST_TO_ADDR
// exit ;
73367: POP
73368: POP
73369: GO 73562
// end ; end ;
73371: GO 73211
73373: POP
73374: POP
// for i := minerMinesList [ index ] downto 1 do
73375: LD_ADDR_VAR 0 5
73379: PUSH
73380: DOUBLE
73381: LD_EXP 108
73385: PUSH
73386: LD_VAR 0 6
73390: ARRAY
73391: INC
73392: ST_TO_ADDR
73393: LD_INT 1
73395: PUSH
73396: FOR_DOWNTO
73397: IFFALSE 73560
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73399: LD_EXP 108
73403: PUSH
73404: LD_VAR 0 6
73408: ARRAY
73409: PUSH
73410: LD_VAR 0 5
73414: ARRAY
73415: PUSH
73416: LD_INT 1
73418: ARRAY
73419: PPUSH
73420: LD_EXP 108
73424: PUSH
73425: LD_VAR 0 6
73429: ARRAY
73430: PUSH
73431: LD_VAR 0 5
73435: ARRAY
73436: PUSH
73437: LD_INT 2
73439: ARRAY
73440: PPUSH
73441: LD_VAR 0 2
73445: PPUSH
73446: LD_VAR 0 3
73450: PPUSH
73451: CALL_OW 298
73455: PUSH
73456: LD_INT 6
73458: LESS
73459: IFFALSE 73558
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73461: LD_EXP 108
73465: PUSH
73466: LD_VAR 0 6
73470: ARRAY
73471: PUSH
73472: LD_VAR 0 5
73476: ARRAY
73477: PUSH
73478: LD_INT 1
73480: ARRAY
73481: PPUSH
73482: LD_EXP 108
73486: PUSH
73487: LD_VAR 0 6
73491: ARRAY
73492: PUSH
73493: LD_VAR 0 5
73497: ARRAY
73498: PUSH
73499: LD_INT 2
73501: ARRAY
73502: PPUSH
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 255
73512: PPUSH
73513: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73517: LD_ADDR_EXP 108
73521: PUSH
73522: LD_EXP 108
73526: PPUSH
73527: LD_VAR 0 6
73531: PPUSH
73532: LD_EXP 108
73536: PUSH
73537: LD_VAR 0 6
73541: ARRAY
73542: PPUSH
73543: LD_VAR 0 5
73547: PPUSH
73548: CALL_OW 3
73552: PPUSH
73553: CALL_OW 1
73557: ST_TO_ADDR
// end ; end ;
73558: GO 73396
73560: POP
73561: POP
// end ;
73562: LD_VAR 0 4
73566: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73567: LD_INT 0
73569: PPUSH
73570: PPUSH
73571: PPUSH
73572: PPUSH
73573: PPUSH
73574: PPUSH
73575: PPUSH
73576: PPUSH
73577: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73578: LD_VAR 0 1
73582: PPUSH
73583: CALL_OW 264
73587: PUSH
73588: LD_INT 81
73590: EQUAL
73591: NOT
73592: PUSH
73593: LD_VAR 0 1
73597: PUSH
73598: LD_EXP 107
73602: IN
73603: NOT
73604: OR
73605: IFFALSE 73609
// exit ;
73607: GO 73931
// index := GetElementIndex ( minersList , unit ) ;
73609: LD_ADDR_VAR 0 6
73613: PUSH
73614: LD_EXP 107
73618: PPUSH
73619: LD_VAR 0 1
73623: PPUSH
73624: CALL 14776 0 2
73628: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73629: LD_ADDR_VAR 0 8
73633: PUSH
73634: LD_EXP 109
73638: PUSH
73639: LD_EXP 108
73643: PUSH
73644: LD_VAR 0 6
73648: ARRAY
73649: MINUS
73650: ST_TO_ADDR
// if not minesFreeAmount then
73651: LD_VAR 0 8
73655: NOT
73656: IFFALSE 73660
// exit ;
73658: GO 73931
// tmp := [ ] ;
73660: LD_ADDR_VAR 0 7
73664: PUSH
73665: EMPTY
73666: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73667: LD_ADDR_VAR 0 5
73671: PUSH
73672: DOUBLE
73673: LD_INT 1
73675: DEC
73676: ST_TO_ADDR
73677: LD_VAR 0 8
73681: PUSH
73682: FOR_TO
73683: IFFALSE 73878
// begin _d := rand ( 0 , 5 ) ;
73685: LD_ADDR_VAR 0 11
73689: PUSH
73690: LD_INT 0
73692: PPUSH
73693: LD_INT 5
73695: PPUSH
73696: CALL_OW 12
73700: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73701: LD_ADDR_VAR 0 12
73705: PUSH
73706: LD_INT 2
73708: PPUSH
73709: LD_INT 6
73711: PPUSH
73712: CALL_OW 12
73716: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 2
73726: PPUSH
73727: LD_VAR 0 11
73731: PPUSH
73732: LD_VAR 0 12
73736: PPUSH
73737: CALL_OW 272
73741: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73742: LD_ADDR_VAR 0 10
73746: PUSH
73747: LD_VAR 0 3
73751: PPUSH
73752: LD_VAR 0 11
73756: PPUSH
73757: LD_VAR 0 12
73761: PPUSH
73762: CALL_OW 273
73766: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73767: LD_VAR 0 9
73771: PPUSH
73772: LD_VAR 0 10
73776: PPUSH
73777: CALL_OW 488
73781: PUSH
73782: LD_VAR 0 9
73786: PUSH
73787: LD_VAR 0 10
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_VAR 0 7
73800: IN
73801: NOT
73802: AND
73803: PUSH
73804: LD_VAR 0 9
73808: PPUSH
73809: LD_VAR 0 10
73813: PPUSH
73814: CALL_OW 458
73818: NOT
73819: AND
73820: IFFALSE 73862
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73822: LD_ADDR_VAR 0 7
73826: PUSH
73827: LD_VAR 0 7
73831: PPUSH
73832: LD_VAR 0 7
73836: PUSH
73837: LD_INT 1
73839: PLUS
73840: PPUSH
73841: LD_VAR 0 9
73845: PUSH
73846: LD_VAR 0 10
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PPUSH
73855: CALL_OW 1
73859: ST_TO_ADDR
73860: GO 73876
// i := i - 1 ;
73862: LD_ADDR_VAR 0 5
73866: PUSH
73867: LD_VAR 0 5
73871: PUSH
73872: LD_INT 1
73874: MINUS
73875: ST_TO_ADDR
// end ;
73876: GO 73682
73878: POP
73879: POP
// for i in tmp do
73880: LD_ADDR_VAR 0 5
73884: PUSH
73885: LD_VAR 0 7
73889: PUSH
73890: FOR_IN
73891: IFFALSE 73929
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
73893: LD_VAR 0 1
73897: PPUSH
73898: LD_VAR 0 5
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PPUSH
73907: LD_VAR 0 5
73911: PUSH
73912: LD_INT 2
73914: ARRAY
73915: PPUSH
73916: CALL 72875 0 3
73920: NOT
73921: IFFALSE 73927
// exit ;
73923: POP
73924: POP
73925: GO 73931
73927: GO 73890
73929: POP
73930: POP
// end ;
73931: LD_VAR 0 4
73935: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
73936: LD_INT 0
73938: PPUSH
73939: PPUSH
73940: PPUSH
73941: PPUSH
73942: PPUSH
73943: PPUSH
73944: PPUSH
73945: PPUSH
73946: PPUSH
// if GetClass ( unit ) <> class_sniper then
73947: LD_VAR 0 1
73951: PPUSH
73952: CALL_OW 257
73956: PUSH
73957: LD_INT 5
73959: NONEQUAL
73960: IFFALSE 73964
// exit ;
73962: GO 74430
// dist := 8 ;
73964: LD_ADDR_VAR 0 5
73968: PUSH
73969: LD_INT 8
73971: ST_TO_ADDR
// viewRange := 12 ;
73972: LD_ADDR_VAR 0 8
73976: PUSH
73977: LD_INT 12
73979: ST_TO_ADDR
// side := GetSide ( unit ) ;
73980: LD_ADDR_VAR 0 6
73984: PUSH
73985: LD_VAR 0 1
73989: PPUSH
73990: CALL_OW 255
73994: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
73995: LD_INT 61
73997: PPUSH
73998: LD_VAR 0 6
74002: PPUSH
74003: CALL_OW 321
74007: PUSH
74008: LD_INT 2
74010: EQUAL
74011: IFFALSE 74021
// viewRange := 16 ;
74013: LD_ADDR_VAR 0 8
74017: PUSH
74018: LD_INT 16
74020: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74021: LD_VAR 0 1
74025: PPUSH
74026: LD_VAR 0 2
74030: PPUSH
74031: LD_VAR 0 3
74035: PPUSH
74036: CALL_OW 297
74040: PUSH
74041: LD_VAR 0 5
74045: GREATER
74046: IFFALSE 74125
// begin ComMoveXY ( unit , x , y ) ;
74048: LD_VAR 0 1
74052: PPUSH
74053: LD_VAR 0 2
74057: PPUSH
74058: LD_VAR 0 3
74062: PPUSH
74063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74067: LD_INT 35
74069: PPUSH
74070: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74074: LD_VAR 0 1
74078: PPUSH
74079: LD_VAR 0 2
74083: PPUSH
74084: LD_VAR 0 3
74088: PPUSH
74089: CALL 46609 0 3
74093: NOT
74094: IFFALSE 74098
// exit ;
74096: GO 74430
// until GetDistUnitXY ( unit , x , y ) < dist ;
74098: LD_VAR 0 1
74102: PPUSH
74103: LD_VAR 0 2
74107: PPUSH
74108: LD_VAR 0 3
74112: PPUSH
74113: CALL_OW 297
74117: PUSH
74118: LD_VAR 0 5
74122: LESS
74123: IFFALSE 74067
// end ; ComTurnXY ( unit , x , y ) ;
74125: LD_VAR 0 1
74129: PPUSH
74130: LD_VAR 0 2
74134: PPUSH
74135: LD_VAR 0 3
74139: PPUSH
74140: CALL_OW 118
// repeat if Multiplayer then
74144: LD_OWVAR 4
74148: IFFALSE 74159
// wait ( 35 ) else
74150: LD_INT 35
74152: PPUSH
74153: CALL_OW 67
74157: GO 74166
// wait ( 5 ) ;
74159: LD_INT 5
74161: PPUSH
74162: CALL_OW 67
// _d := GetDir ( unit ) ;
74166: LD_ADDR_VAR 0 11
74170: PUSH
74171: LD_VAR 0 1
74175: PPUSH
74176: CALL_OW 254
74180: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74181: LD_ADDR_VAR 0 7
74185: PUSH
74186: LD_VAR 0 1
74190: PPUSH
74191: CALL_OW 250
74195: PPUSH
74196: LD_VAR 0 1
74200: PPUSH
74201: CALL_OW 251
74205: PPUSH
74206: LD_VAR 0 2
74210: PPUSH
74211: LD_VAR 0 3
74215: PPUSH
74216: CALL 49217 0 4
74220: ST_TO_ADDR
// until dir = _d ;
74221: LD_VAR 0 7
74225: PUSH
74226: LD_VAR 0 11
74230: EQUAL
74231: IFFALSE 74144
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74233: LD_ADDR_VAR 0 9
74237: PUSH
74238: LD_VAR 0 1
74242: PPUSH
74243: CALL_OW 250
74247: PPUSH
74248: LD_VAR 0 7
74252: PPUSH
74253: LD_VAR 0 5
74257: PPUSH
74258: CALL_OW 272
74262: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74263: LD_ADDR_VAR 0 10
74267: PUSH
74268: LD_VAR 0 1
74272: PPUSH
74273: CALL_OW 251
74277: PPUSH
74278: LD_VAR 0 7
74282: PPUSH
74283: LD_VAR 0 5
74287: PPUSH
74288: CALL_OW 273
74292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74293: LD_VAR 0 9
74297: PPUSH
74298: LD_VAR 0 10
74302: PPUSH
74303: CALL_OW 488
74307: NOT
74308: IFFALSE 74312
// exit ;
74310: GO 74430
// ComAnimCustom ( unit , 1 ) ;
74312: LD_VAR 0 1
74316: PPUSH
74317: LD_INT 1
74319: PPUSH
74320: CALL_OW 592
// p := 0 ;
74324: LD_ADDR_VAR 0 12
74328: PUSH
74329: LD_INT 0
74331: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74332: LD_VAR 0 9
74336: PPUSH
74337: LD_VAR 0 10
74341: PPUSH
74342: LD_VAR 0 6
74346: PPUSH
74347: LD_VAR 0 8
74351: PPUSH
74352: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74356: LD_INT 35
74358: PPUSH
74359: CALL_OW 67
// p := Inc ( p ) ;
74363: LD_ADDR_VAR 0 12
74367: PUSH
74368: LD_VAR 0 12
74372: PPUSH
74373: CALL 49173 0 1
74377: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74378: LD_VAR 0 12
74382: PUSH
74383: LD_INT 3
74385: EQUAL
74386: PUSH
74387: LD_VAR 0 1
74391: PPUSH
74392: CALL_OW 302
74396: NOT
74397: OR
74398: PUSH
74399: LD_VAR 0 1
74403: PPUSH
74404: CALL_OW 301
74408: OR
74409: IFFALSE 74356
// RemoveSeeing ( _x , _y , side ) ;
74411: LD_VAR 0 9
74415: PPUSH
74416: LD_VAR 0 10
74420: PPUSH
74421: LD_VAR 0 6
74425: PPUSH
74426: CALL_OW 331
// end ;
74430: LD_VAR 0 4
74434: RET
