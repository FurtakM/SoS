// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareNature ;
  24: CALL 12092 0 0
// PrepareRussian ;
  28: CALL 11390 0 0
// PrepareAmericans ;
  32: CALL 10963 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 24
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 26
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 27
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 30
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 31
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 32
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 33
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 34
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 35
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 36
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 37
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 38
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 29
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 34
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 34
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 43
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 43
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 43
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 43
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 43
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 43
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 43
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 43
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 43
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 43
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 43
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 43
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1911
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 43
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 43
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1911
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PPUSH
1612: LD_EXP 10
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_EXP 10
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL_OW 73
1634: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_EXP 10
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: LD_EXP 10
1653: PUSH
1654: LD_INT 2
1656: ARRAY
1657: PPUSH
1658: CALL_OW 111
// case nearUnit of Burlak :
1662: LD_VAR 0 1
1666: PUSH
1667: LD_EXP 43
1671: DOUBLE
1672: EQUAL
1673: IFTRUE 1677
1675: GO 1692
1677: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1678: LD_EXP 43
1682: PPUSH
1683: LD_STRING D3-Bur-2a
1685: PPUSH
1686: CALL_OW 88
1690: GO 1784
1692: LD_EXP 48
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1702
1700: GO 1717
1702: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1703: LD_EXP 48
1707: PPUSH
1708: LD_STRING D2a-Bel-1
1710: PPUSH
1711: CALL_OW 88
1715: GO 1784
1717: LD_EXP 50
1721: DOUBLE
1722: EQUAL
1723: IFTRUE 1727
1725: GO 1742
1727: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1728: LD_EXP 50
1732: PPUSH
1733: LD_STRING D2a-Kir-1
1735: PPUSH
1736: CALL_OW 88
1740: GO 1784
1742: POP
// if GetSex ( nearUnit ) = sex_male then
1743: LD_VAR 0 1
1747: PPUSH
1748: CALL_OW 258
1752: PUSH
1753: LD_INT 1
1755: EQUAL
1756: IFFALSE 1772
// Say ( nearUnit , D2a-RSol1-1 ) else
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_STRING D2a-RSol1-1
1765: PPUSH
1766: CALL_OW 88
1770: GO 1784
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1772: LD_VAR 0 1
1776: PPUSH
1777: LD_STRING D2a-RFSol1-1
1779: PPUSH
1780: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1784: LD_EXP 51
1788: PPUSH
1789: CALL_OW 255
1793: PUSH
1794: LD_INT 3
1796: EQUAL
1797: PUSH
1798: LD_EXP 51
1802: PPUSH
1803: CALL_OW 302
1807: AND
1808: IFFALSE 1822
// Say ( Gnyevko , D2a-Gny-1 ) ;
1810: LD_EXP 51
1814: PPUSH
1815: LD_STRING D2a-Gny-1
1817: PPUSH
1818: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1822: LD_EXP 9
1826: PUSH
1827: LD_EXP 8
1831: EQUAL
1832: IFFALSE 1846
// Say ( Burlak , D3-Bur-2 ) ;
1834: LD_EXP 43
1838: PPUSH
1839: LD_STRING D3-Bur-2
1841: PPUSH
1842: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1846: LD_EXP 51
1850: PPUSH
1851: CALL_OW 255
1855: PUSH
1856: LD_INT 8
1858: EQUAL
1859: IFFALSE 1911
// begin Say ( Burlak , D12-Bur-1 ) ;
1861: LD_EXP 43
1865: PPUSH
1866: LD_STRING D12-Bur-1
1868: PPUSH
1869: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1873: LD_EXP 48
1877: PPUSH
1878: CALL_OW 255
1882: PUSH
1883: LD_INT 3
1885: EQUAL
1886: PUSH
1887: LD_EXP 48
1891: PPUSH
1892: CALL_OW 302
1896: AND
1897: IFFALSE 1911
// Say ( Belkov , D12-Bel-2 ) ;
1899: LD_EXP 48
1903: PPUSH
1904: LD_STRING D12-Bel-2
1906: PPUSH
1907: CALL_OW 88
// end ; end ; end ;
1911: PPOPN 1
1913: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1914: LD_INT 3
1916: PPUSH
1917: LD_EXP 51
1921: PPUSH
1922: CALL_OW 292
1926: IFFALSE 2464
1928: GO 1930
1930: DISABLE
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1935: LD_EXP 51
1939: PPUSH
1940: LD_EXP 36
1944: PPUSH
1945: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1949: LD_EXP 51
1953: PPUSH
1954: CALL_OW 87
// DialogueOn ;
1958: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 3
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 51
2000: PPUSH
2001: CALL_OW 74
2005: ST_TO_ADDR
// if nearUnit = Burlak then
2006: LD_VAR 0 1
2010: PUSH
2011: LD_EXP 43
2015: EQUAL
2016: IFFALSE 2334
// begin Say ( Burlak , D3-Bur-1 ) ;
2018: LD_EXP 43
2022: PPUSH
2023: LD_STRING D3-Bur-1
2025: PPUSH
2026: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2030: LD_EXP 51
2034: PPUSH
2035: LD_STRING D3-Gny-1
2037: PPUSH
2038: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2042: LD_EXP 43
2046: PPUSH
2047: LD_STRING D3-Bur-2b
2049: PPUSH
2050: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 21
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PPUSH
2078: CALL_OW 69
2082: PUSH
2083: LD_INT 1
2085: EQUAL
2086: PUSH
2087: LD_EXP 13
2091: NOT
2092: AND
2093: IFFALSE 2145
// begin Say ( Burlak , D3-Bur-2c ) ;
2095: LD_EXP 43
2099: PPUSH
2100: LD_STRING D3-Bur-2c
2102: PPUSH
2103: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2107: LD_EXP 51
2111: PPUSH
2112: LD_STRING D3-Gny-2
2114: PPUSH
2115: CALL_OW 88
// DialogueOff ;
2119: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2123: LD_EXP 51
2127: PPUSH
2128: LD_INT 3
2130: PPUSH
2131: CALL_OW 235
// gnyevkoSaved = true ;
2135: LD_ADDR_EXP 11
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// exit ;
2143: GO 2464
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2145: LD_INT 22
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 69
2173: PUSH
2174: LD_INT 1
2176: GREATER
2177: PUSH
2178: LD_EXP 13
2182: OR
2183: PUSH
2184: LD_EXP 21
2188: NOT
2189: AND
2190: IFFALSE 2242
// begin Say ( Burlak , D3-Bur-2d ) ;
2192: LD_EXP 43
2196: PPUSH
2197: LD_STRING D3-Bur-2d
2199: PPUSH
2200: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2204: LD_EXP 51
2208: PPUSH
2209: LD_STRING D3-Gny-2
2211: PPUSH
2212: CALL_OW 88
// DialogueOff ;
2216: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2220: LD_EXP 51
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: CALL_OW 235
// gnyevkoSaved = true ;
2232: LD_ADDR_EXP 11
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// exit ;
2240: GO 2464
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: LD_INT 1
2273: GREATER
2274: PUSH
2275: LD_EXP 21
2279: AND
2280: IFFALSE 2332
// begin Say ( Burlak , D3-Bur-2e ) ;
2282: LD_EXP 43
2286: PPUSH
2287: LD_STRING D3-Bur-2e
2289: PPUSH
2290: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2294: LD_EXP 51
2298: PPUSH
2299: LD_STRING D3-Gny-2
2301: PPUSH
2302: CALL_OW 88
// DialogueOff ;
2306: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2310: LD_EXP 51
2314: PPUSH
2315: LD_INT 3
2317: PPUSH
2318: CALL_OW 235
// gnyevkoSaved = true ;
2322: LD_ADDR_EXP 11
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// exit ;
2330: GO 2464
// end ; end else
2332: GO 2464
// begin if GetSex ( nearUnit ) = sex_male then
2334: LD_VAR 0 1
2338: PPUSH
2339: CALL_OW 258
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2363
// Say ( nearUnit , D3-RSol1-1 ) else
2349: LD_VAR 0 1
2353: PPUSH
2354: LD_STRING D3-RSol1-1
2356: PPUSH
2357: CALL_OW 88
2361: GO 2375
// Say ( nearUnit , D3-RFSol1-1 ) ;
2363: LD_VAR 0 1
2367: PPUSH
2368: LD_STRING D3-RFSol1-1
2370: PPUSH
2371: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2375: LD_EXP 51
2379: PPUSH
2380: LD_STRING D3-Gny-1
2382: PPUSH
2383: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2387: LD_VAR 0 1
2391: PPUSH
2392: CALL_OW 258
2396: PUSH
2397: LD_INT 1
2399: EQUAL
2400: IFFALSE 2416
// Say ( nearUnit , D3-RSol1-2 ) else
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_STRING D3-RSol1-2
2409: PPUSH
2410: CALL_OW 88
2414: GO 2428
// Say ( nearUnit , D3-RFSol1-2 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_STRING D3-RFSol1-2
2423: PPUSH
2424: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2428: LD_EXP 51
2432: PPUSH
2433: LD_STRING D3-Gny-2a
2435: PPUSH
2436: CALL_OW 88
// DialogueOff ;
2440: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2444: LD_EXP 51
2448: PPUSH
2449: LD_INT 3
2451: PPUSH
2452: CALL_OW 235
// gnyevkoSaved = true ;
2456: LD_ADDR_EXP 11
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// end ; end ;
2464: PPOPN 2
2466: END
// every 1 trigger not gnyevkoSaved and not jelenaSaved do var ape ;
2467: LD_EXP 11
2471: NOT
2472: PUSH
2473: LD_EXP 20
2477: NOT
2478: AND
2479: IFFALSE 2674
2481: GO 2483
2483: DISABLE
2484: LD_INT 0
2486: PPUSH
// begin enable ;
2487: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2488: LD_EXP 11
2492: NOT
2493: PUSH
2494: LD_EXP 37
2498: PUSH
2499: LD_INT 70
2501: GREATER
2502: AND
2503: IFFALSE 2581
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 25
2522: PUSH
2523: LD_INT 12
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PPUSH
2534: CALL_OW 69
2538: PUSH
2539: FOR_IN
2540: IFFALSE 2579
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2542: LD_VAR 0 1
2546: PPUSH
2547: LD_EXP 51
2551: PPUSH
2552: CALL_OW 250
2556: PPUSH
2557: LD_EXP 51
2561: PPUSH
2562: CALL_OW 251
2566: PPUSH
2567: LD_INT 10
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 8145 0 5
2577: GO 2539
2579: POP
2580: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2581: LD_EXP 20
2585: NOT
2586: PUSH
2587: LD_EXP 38
2591: PUSH
2592: LD_INT 70
2594: GREATER
2595: AND
2596: IFFALSE 2674
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 25
2615: PUSH
2616: LD_INT 12
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2672
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2635: LD_VAR 0 1
2639: PPUSH
2640: LD_EXP 50
2644: PPUSH
2645: CALL_OW 250
2649: PPUSH
2650: LD_EXP 50
2654: PPUSH
2655: CALL_OW 251
2659: PPUSH
2660: LD_INT 10
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL 8145 0 5
2670: GO 2632
2672: POP
2673: POP
// end ;
2674: PPOPN 1
2676: END
// every 0 0$1 trigger not gnyevkoSaved and not jelenaSaved do
2677: LD_EXP 11
2681: NOT
2682: PUSH
2683: LD_EXP 20
2687: NOT
2688: AND
2689: IFFALSE 2768
2691: GO 2693
2693: DISABLE
// begin enable ;
2694: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2695: LD_EXP 11
2699: NOT
2700: PUSH
2701: LD_EXP 37
2705: PUSH
2706: LD_INT 0
2708: GREATER
2709: AND
2710: IFFALSE 2726
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2712: LD_ADDR_EXP 37
2716: PUSH
2717: LD_EXP 37
2721: PUSH
2722: LD_INT 35
2724: MINUS
2725: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2726: LD_EXP 50
2730: PPUSH
2731: CALL_OW 305
2735: PUSH
2736: LD_EXP 20
2740: NOT
2741: AND
2742: PUSH
2743: LD_EXP 38
2747: PUSH
2748: LD_INT 0
2750: GREATER
2751: AND
2752: IFFALSE 2768
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2754: LD_ADDR_EXP 38
2758: PUSH
2759: LD_EXP 38
2763: PUSH
2764: LD_INT 35
2766: MINUS
2767: ST_TO_ADDR
// end ;
2768: END
// every 0 0$1 trigger not meetPokryshkin and FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var unitInArea ;
2769: LD_EXP 13
2773: NOT
2774: PUSH
2775: LD_INT 23
2777: PPUSH
2778: LD_INT 22
2780: PUSH
2781: LD_INT 3
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 21
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PPUSH
2802: CALL_OW 70
2806: PUSH
2807: LD_INT 0
2809: GREATER
2810: AND
2811: IFFALSE 2894
2813: GO 2815
2815: DISABLE
2816: LD_INT 0
2818: PPUSH
// begin enable ;
2819: ENABLE
// unitInArea = FilterUnitsInArea ( PokryshkinSpotArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
2820: LD_ADDR_VAR 0 1
2824: PUSH
2825: LD_INT 23
2827: PPUSH
2828: LD_INT 22
2830: PUSH
2831: LD_INT 3
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 21
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 70
2856: ST_TO_ADDR
// ComMoveXY ( Pokryshkin , GetX ( unitInArea [ 1 ] ) , GetY ( unitInArea [ 1 ] ) ) ;
2857: LD_EXP 44
2861: PPUSH
2862: LD_VAR 0 1
2866: PUSH
2867: LD_INT 1
2869: ARRAY
2870: PPUSH
2871: CALL_OW 250
2875: PPUSH
2876: LD_VAR 0 1
2880: PUSH
2881: LD_INT 1
2883: ARRAY
2884: PPUSH
2885: CALL_OW 251
2889: PPUSH
2890: CALL_OW 111
// end ;
2894: PPOPN 1
2896: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2897: LD_INT 3
2899: PPUSH
2900: LD_EXP 44
2904: PPUSH
2905: CALL_OW 292
2909: PUSH
2910: LD_EXP 13
2914: NOT
2915: AND
2916: IFFALSE 3769
2918: GO 2920
2920: DISABLE
// begin enable ;
2921: ENABLE
// InGameOn ;
2922: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2926: LD_EXP 44
2930: PPUSH
2931: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2935: LD_EXP 51
2939: PPUSH
2940: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2944: LD_EXP 43
2948: PUSH
2949: LD_EXP 51
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: CALL_OW 200
// DialogueOn ;
2962: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2966: LD_EXP 12
2970: IFFALSE 3222
// begin meetPokryshkin = true ;
2972: LD_ADDR_EXP 13
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2980: LD_INT 6
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 343
// DialogueOff ;
2990: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2994: LD_EXP 43
2998: PPUSH
2999: LD_EXP 44
3003: PPUSH
3004: CALL_OW 250
3008: PPUSH
3009: LD_EXP 44
3013: PPUSH
3014: CALL_OW 251
3018: PPUSH
3019: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3023: LD_EXP 43
3027: PPUSH
3028: LD_EXP 44
3032: PPUSH
3033: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3037: LD_EXP 44
3041: PPUSH
3042: LD_EXP 43
3046: PPUSH
3047: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3051: LD_EXP 51
3055: PPUSH
3056: LD_STRING D4-Gny-3
3058: PPUSH
3059: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3063: LD_EXP 43
3067: PPUSH
3068: LD_STRING D4-Bur-3
3070: PPUSH
3071: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3075: LD_EXP 44
3079: PPUSH
3080: LD_STRING D4-Pok-4
3082: PPUSH
3083: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3087: LD_EXP 39
3091: PPUSH
3092: LD_INT 18
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 49
// wait ( 0 0$2 ) ;
3102: LD_INT 70
3104: PPUSH
3105: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3109: LD_EXP 43
3113: PPUSH
3114: LD_STRING D4-Bur-4
3116: PPUSH
3117: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3121: LD_EXP 44
3125: PPUSH
3126: LD_STRING D4-Pok-5
3128: PPUSH
3129: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3133: LD_EXP 39
3137: PPUSH
3138: LD_STRING D4-Sol1-5
3140: PPUSH
3141: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3145: LD_EXP 44
3149: PPUSH
3150: LD_STRING D4-Pok-6
3152: PPUSH
3153: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3157: LD_EXP 44
3161: PPUSH
3162: LD_STRING D4-Pok-6a
3164: PPUSH
3165: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3169: LD_EXP 43
3173: PPUSH
3174: LD_STRING D4-Bur-6
3176: PPUSH
3177: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3181: LD_EXP 44
3185: PPUSH
3186: LD_STRING D4-Pok-7
3188: PPUSH
3189: CALL_OW 88
// DialogueOff ;
3193: CALL_OW 7
// InGameOff ;
3197: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3201: LD_STRING M2
3203: PPUSH
3204: CALL_OW 337
// goToHill = true ;
3208: LD_ADDR_EXP 14
3212: PUSH
3213: LD_INT 1
3215: ST_TO_ADDR
// MoveToHill ;
3216: CALL 10025 0 0
// exit ;
3220: GO 3769
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3222: LD_EXP 43
3226: PUSH
3227: LD_EXP 51
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3240: LD_EXP 44
3244: PPUSH
3245: LD_STRING D4-Pok-1
3247: PPUSH
3248: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3252: LD_EXP 51
3256: PPUSH
3257: CALL_OW 255
3261: PUSH
3262: LD_INT 3
3264: EQUAL
3265: PUSH
3266: LD_EXP 51
3270: PPUSH
3271: CALL_OW 302
3275: AND
3276: IFFALSE 3290
// Say ( Gnyevko , D4-Gny-1 ) ;
3278: LD_EXP 51
3282: PPUSH
3283: LD_STRING D4-Gny-1
3285: PPUSH
3286: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3290: LD_EXP 43
3294: PPUSH
3295: LD_EXP 51
3299: PPUSH
3300: CALL_OW 296
3304: PUSH
3305: LD_INT 8
3307: GREATER
3308: PUSH
3309: LD_EXP 51
3313: PPUSH
3314: CALL_OW 255
3318: PUSH
3319: LD_INT 3
3321: EQUAL
3322: AND
3323: PUSH
3324: LD_EXP 51
3328: PPUSH
3329: CALL_OW 302
3333: AND
3334: IFFALSE 3432
// begin ComWalk ( Gnyevko ) ;
3336: LD_EXP 51
3340: PPUSH
3341: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3345: LD_EXP 44
3349: PPUSH
3350: LD_STRING D4-Pok-2
3352: PPUSH
3353: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3357: LD_EXP 51
3361: PPUSH
3362: LD_STRING D4-Gny-2
3364: PPUSH
3365: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3369: LD_EXP 44
3373: PPUSH
3374: LD_STRING D4-Pok-3
3376: PPUSH
3377: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3381: LD_ADDR_EXP 12
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3389: LD_EXP 51
3393: PPUSH
3394: LD_INT 6
3396: PPUSH
3397: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3401: LD_EXP 51
3405: PPUSH
3406: LD_EXP 44
3410: PPUSH
3411: CALL_OW 250
3415: PPUSH
3416: LD_EXP 44
3420: PPUSH
3421: CALL_OW 251
3425: PPUSH
3426: CALL_OW 171
// end else
3430: GO 3761
// begin meetPokryshkin = true ;
3432: LD_ADDR_EXP 13
3436: PUSH
3437: LD_INT 1
3439: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3440: LD_INT 6
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: CALL_OW 343
// DialogueOff ;
3450: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3454: LD_EXP 51
3458: PPUSH
3459: CALL_OW 255
3463: PUSH
3464: LD_INT 3
3466: EQUAL
3467: PUSH
3468: LD_EXP 51
3472: PPUSH
3473: CALL_OW 302
3477: AND
3478: IFFALSE 3555
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3480: LD_EXP 43
3484: PUSH
3485: LD_EXP 51
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: LD_EXP 44
3498: PPUSH
3499: CALL_OW 250
3503: PPUSH
3504: LD_EXP 44
3508: PPUSH
3509: CALL_OW 251
3513: PPUSH
3514: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3518: LD_EXP 43
3522: PUSH
3523: LD_EXP 51
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: LD_EXP 44
3536: PPUSH
3537: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3541: LD_EXP 51
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL_OW 235
// end else
3553: GO 3598
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3555: LD_EXP 43
3559: PPUSH
3560: LD_EXP 44
3564: PPUSH
3565: CALL_OW 250
3569: PPUSH
3570: LD_EXP 44
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3584: LD_EXP 43
3588: PPUSH
3589: LD_EXP 44
3593: PPUSH
3594: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3598: LD_EXP 44
3602: PPUSH
3603: LD_EXP 43
3607: PPUSH
3608: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3612: LD_EXP 43
3616: PPUSH
3617: LD_STRING D4-Bur-3
3619: PPUSH
3620: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3624: LD_EXP 44
3628: PPUSH
3629: LD_STRING D4-Pok-4
3631: PPUSH
3632: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3636: LD_EXP 39
3640: PPUSH
3641: LD_INT 18
3643: PPUSH
3644: LD_INT 1
3646: PPUSH
3647: CALL_OW 49
// wait ( 0 0$2 ) ;
3651: LD_INT 70
3653: PPUSH
3654: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3658: LD_EXP 43
3662: PPUSH
3663: LD_STRING D4-Bur-4
3665: PPUSH
3666: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3670: LD_EXP 44
3674: PPUSH
3675: LD_STRING D4-Pok-5
3677: PPUSH
3678: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3682: LD_EXP 39
3686: PPUSH
3687: LD_STRING D4-Sol1-5
3689: PPUSH
3690: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3694: LD_EXP 44
3698: PPUSH
3699: LD_STRING D4-Pok-6
3701: PPUSH
3702: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3706: LD_EXP 44
3710: PPUSH
3711: LD_STRING D4-Pok-6a
3713: PPUSH
3714: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3718: LD_EXP 43
3722: PPUSH
3723: LD_STRING D4-Bur-6
3725: PPUSH
3726: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3730: LD_EXP 44
3734: PPUSH
3735: LD_STRING D4-Pok-7
3737: PPUSH
3738: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3742: LD_STRING M2
3744: PPUSH
3745: CALL_OW 337
// goToHill = true ;
3749: LD_ADDR_EXP 14
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// MoveToHill ;
3757: CALL 10025 0 0
// end ; DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// end ;
3769: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3770: LD_EXP 43
3774: PPUSH
3775: LD_EXP 44
3779: PPUSH
3780: CALL_OW 296
3784: PUSH
3785: LD_INT 10
3787: GREATER
3788: PUSH
3789: LD_EXP 14
3793: AND
3794: PUSH
3795: LD_EXP 17
3799: NOT
3800: AND
3801: IFFALSE 4002
3803: GO 3805
3805: DISABLE
3806: LD_INT 0
3808: PPUSH
// begin enable ;
3809: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3810: LD_ADDR_VAR 0 1
3814: PUSH
3815: LD_EXP 44
3819: PUSH
3820: LD_EXP 45
3824: PUSH
3825: LD_EXP 46
3829: PUSH
3830: LD_EXP 47
3834: PUSH
3835: LD_EXP 48
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3847: LD_EXP 51
3851: PPUSH
3852: CALL_OW 255
3856: PUSH
3857: LD_INT 6
3859: EQUAL
3860: PUSH
3861: LD_EXP 11
3865: AND
3866: IFFALSE 3884
// ruSolds = ruSolds ^ Gnyevko ;
3868: LD_ADDR_VAR 0 1
3872: PUSH
3873: LD_VAR 0 1
3877: PUSH
3878: LD_EXP 51
3882: ADD
3883: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3893: LD_EXP 43
3897: PPUSH
3898: CALL_OW 87
// DialogueOn ;
3902: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3906: LD_EXP 44
3910: PPUSH
3911: LD_STRING DSplit-Pok-1
3913: PPUSH
3914: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3918: LD_EXP 43
3922: PPUSH
3923: LD_STRING DSplit-Bur-1
3925: PPUSH
3926: CALL_OW 88
// DialogueOff ;
3930: CALL_OW 7
// InGameOn ;
3934: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3938: LD_EXP 43
3942: PPUSH
3943: LD_EXP 44
3947: PPUSH
3948: CALL_OW 250
3952: PPUSH
3953: LD_EXP 44
3957: PPUSH
3958: CALL_OW 251
3962: PPUSH
3963: CALL_OW 111
// wait ( 0 0$1 ) ;
3967: LD_INT 35
3969: PPUSH
3970: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3974: LD_EXP 43
3978: PPUSH
3979: LD_EXP 44
3983: PPUSH
3984: CALL_OW 296
3988: PUSH
3989: LD_INT 6
3991: LESS
3992: IFFALSE 3938
// InGameOff ;
3994: CALL_OW 9
// MoveToHill ;
3998: CALL 10025 0 0
// end ;
4002: PPOPN 1
4004: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
// traitor = true ;
4009: LD_ADDR_EXP 17
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// DialogueOn ;
4017: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4021: LD_EXP 44
4025: PPUSH
4026: LD_STRING DAttack-Pok-1
4028: PPUSH
4029: CALL_OW 88
// DialogueOff ;
4033: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4037: LD_INT 3
4039: PPUSH
4040: LD_INT 6
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4053: LD_INT 22
4055: PUSH
4056: LD_INT 6
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 69
4081: PPUSH
4082: LD_EXP 43
4086: PPUSH
4087: CALL_OW 115
// end ;
4091: LD_VAR 0 1
4095: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4096: LD_EXP 44
4100: PPUSH
4101: LD_INT 65
4103: PPUSH
4104: LD_INT 59
4106: PPUSH
4107: CALL_OW 297
4111: PUSH
4112: LD_INT 4
4114: LESS
4115: PUSH
4116: LD_EXP 17
4120: NOT
4121: AND
4122: IFFALSE 4319
4124: GO 4126
4126: DISABLE
// begin InGameOn ;
4127: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4131: LD_INT 55
4133: PPUSH
4134: LD_INT 50
4136: PPUSH
4137: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4141: LD_EXP 43
4145: PPUSH
4146: LD_INT 66
4148: PPUSH
4149: LD_INT 57
4151: PPUSH
4152: CALL_OW 111
// AddComHold ( Burlak ) ;
4156: LD_EXP 43
4160: PPUSH
4161: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4165: LD_EXP 39
4169: PPUSH
4170: LD_INT 59
4172: PPUSH
4173: LD_INT 55
4175: PPUSH
4176: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4180: LD_INT 35
4182: PPUSH
4183: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4187: LD_INT 1
4189: PPUSH
4190: LD_EXP 44
4194: PPUSH
4195: CALL_OW 292
4199: IFFALSE 4180
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4201: LD_EXP 39
4205: PUSH
4206: LD_EXP 44
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PPUSH
4215: CALL_OW 87
// ComStop ( Charles ) ;
4219: LD_EXP 39
4223: PPUSH
4224: CALL_OW 141
// AddComHold ( Charles ) ;
4228: LD_EXP 39
4232: PPUSH
4233: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4237: LD_EXP 39
4241: PPUSH
4242: LD_EXP 44
4246: PPUSH
4247: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4251: LD_EXP 39
4255: PPUSH
4256: LD_STRING D5-Sol1-1
4258: PPUSH
4259: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4263: LD_EXP 44
4267: PPUSH
4268: LD_STRING D5-Pok-1
4270: PPUSH
4271: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4275: LD_INT 1
4277: PPUSH
4278: LD_INT 6
4280: PPUSH
4281: LD_INT 2
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_INT 2
4299: PPUSH
4300: LD_INT 1
4302: PPUSH
4303: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4307: LD_EXP 39
4311: PPUSH
4312: LD_STRING D5-Sol1-2
4314: PPUSH
4315: CALL_OW 88
// end ;
4319: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4320: LD_EXP 39
4324: PPUSH
4325: CALL_OW 301
4329: PUSH
4330: LD_EXP 14
4334: AND
4335: IFFALSE 4863
4337: GO 4339
4339: DISABLE
4340: LD_INT 0
4342: PPUSH
// begin goToHill = false ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_INT 0
4350: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 6
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 21
4363: PUSH
4364: LD_INT 1
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 69
4379: PPUSH
4380: CALL_OW 138
// wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4391: LD_INT 55
4393: PPUSH
4394: LD_INT 50
4396: PPUSH
4397: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4401: LD_EXP 43
4405: PPUSH
4406: LD_INT 56
4408: PPUSH
4409: LD_INT 56
4411: PPUSH
4412: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4416: LD_INT 22
4418: PUSH
4419: LD_INT 6
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 21
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: PPUSH
4445: LD_INT 56
4447: PPUSH
4448: LD_INT 56
4450: PPUSH
4451: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4455: LD_EXP 43
4459: PPUSH
4460: LD_STRING D5-Bur-2
4462: PPUSH
4463: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4467: LD_EXP 44
4471: PPUSH
4472: LD_STRING D5-Pok-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4479: LD_EXP 48
4483: PPUSH
4484: LD_STRING D5-Bel-2
4486: PPUSH
4487: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4491: LD_EXP 44
4495: PPUSH
4496: LD_STRING D5-Pok-3
4498: PPUSH
4499: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4503: LD_EXP 51
4507: PPUSH
4508: CALL_OW 255
4512: PUSH
4513: LD_INT 6
4515: EQUAL
4516: IFFALSE 4530
// Say ( Gnyevko , D5-Gny-3 ) ;
4518: LD_EXP 51
4522: PPUSH
4523: LD_STRING D5-Gny-3
4525: PPUSH
4526: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4530: LD_EXP 43
4534: PPUSH
4535: LD_STRING D5-Bur-3
4537: PPUSH
4538: CALL_OW 88
// wait ( 0 0$2 ) ;
4542: LD_INT 70
4544: PPUSH
4545: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4549: LD_EXP 43
4553: PPUSH
4554: LD_INT 85
4556: PPUSH
4557: LD_INT 64
4559: PPUSH
4560: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4564: LD_INT 22
4566: PUSH
4567: LD_INT 6
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 21
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 69
4592: PPUSH
4593: LD_INT 85
4595: PPUSH
4596: LD_INT 64
4598: PPUSH
4599: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
4603: LD_EXP 43
4607: PPUSH
4608: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4612: LD_EXP 44
4616: PPUSH
4617: LD_STRING D6-Pok-1
4619: PPUSH
4620: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4624: LD_EXP 43
4628: PPUSH
4629: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4633: LD_EXP 43
4637: PPUSH
4638: LD_STRING D6-Bur-1
4640: PPUSH
4641: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4645: LD_EXP 43
4649: PPUSH
4650: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4654: LD_EXP 44
4658: PPUSH
4659: LD_STRING D6-Pok-2
4661: PPUSH
4662: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4666: LD_EXP 43
4670: PPUSH
4671: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4675: LD_EXP 48
4679: PPUSH
4680: LD_STRING D6-Bel-2
4682: PPUSH
4683: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4687: LD_EXP 43
4691: PPUSH
4692: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4696: LD_EXP 43
4700: PPUSH
4701: LD_STRING D6-Bur-2
4703: PPUSH
4704: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4708: LD_EXP 43
4712: PPUSH
4713: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4717: LD_EXP 44
4721: PPUSH
4722: LD_STRING D6-Pok-3
4724: PPUSH
4725: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4729: LD_EXP 43
4733: PPUSH
4734: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4738: LD_EXP 52
4742: PPUSH
4743: LD_STRING D6-Kur-3
4745: PPUSH
4746: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4750: LD_EXP 43
4754: PPUSH
4755: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4759: LD_EXP 44
4763: PPUSH
4764: LD_STRING D6-Pok-4
4766: PPUSH
4767: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4771: LD_EXP 43
4775: PPUSH
4776: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4780: LD_EXP 48
4784: PPUSH
4785: LD_STRING D6-Bel-4
4787: PPUSH
4788: CALL_OW 88
// InGameOff ;
4792: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4796: LD_EXP 44
4800: PPUSH
4801: LD_INT 23
4803: PPUSH
4804: CALL_OW 115
// wait ( 0 0$5 ) ;
4808: LD_INT 175
4810: PPUSH
4811: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 21
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 69
4843: PPUSH
4844: LD_INT 23
4846: PPUSH
4847: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4851: LD_INT 1
4853: PPUSH
4854: LD_EXP 51
4858: PPUSH
4859: CALL_OW 471
// end ;
4863: PPOPN 1
4865: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4866: LD_INT 1
4868: PPUSH
4869: LD_EXP 44
4873: PPUSH
4874: CALL_OW 292
4878: PUSH
4879: LD_EXP 39
4883: PPUSH
4884: CALL_OW 301
4888: AND
4889: IFFALSE 4908
4891: GO 4893
4893: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4894: LD_EXP 40
4898: PPUSH
4899: LD_EXP 44
4903: PPUSH
4904: CALL_OW 115
4908: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4909: LD_INT 3
4911: PPUSH
4912: LD_INT 23
4914: PPUSH
4915: CALL_OW 292
4919: IFFALSE 4948
4921: GO 4923
4923: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4924: LD_EXP 44
4928: PPUSH
4929: LD_STRING D7-Pok-1
4931: PPUSH
4932: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4936: LD_EXP 40
4940: PPUSH
4941: LD_STRING D7-FSol1-1
4943: PPUSH
4944: CALL_OW 88
// end ;
4948: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4949: LD_EXP 44
4953: PPUSH
4954: CALL_OW 303
4958: IFFALSE 5490
4960: GO 4962
4962: DISABLE
4963: LD_INT 0
4965: PPUSH
4966: PPUSH
4967: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: LD_INT 22
4975: PUSH
4976: LD_INT 6
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 21
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 50
4995: PUSH
4996: EMPTY
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: PPUSH
5004: CALL_OW 69
5008: PUSH
5009: LD_EXP 48
5013: DIFF
5014: ST_TO_ADDR
// DialogueOn ;
5015: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5019: LD_EXP 48
5023: PPUSH
5024: LD_STRING D7a-Bel-1
5026: PPUSH
5027: CALL_OW 88
// DialogueOff ;
5031: CALL_OW 7
// for i := 1 to ruSolds do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: DOUBLE
5041: LD_INT 1
5043: DEC
5044: ST_TO_ADDR
5045: LD_VAR 0 3
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5109
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5053: LD_VAR 0 3
5057: PUSH
5058: LD_VAR 0 1
5062: ARRAY
5063: PPUSH
5064: LD_INT 87
5066: PUSH
5067: LD_VAR 0 1
5071: PLUS
5072: PPUSH
5073: LD_INT 63
5075: PUSH
5076: LD_VAR 0 1
5080: PLUS
5081: PPUSH
5082: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5086: LD_VAR 0 3
5090: PUSH
5091: LD_VAR 0 1
5095: ARRAY
5096: PPUSH
5097: LD_INT 89
5099: PPUSH
5100: LD_INT 67
5102: PPUSH
5103: CALL_OW 178
// end ;
5107: GO 5050
5109: POP
5110: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5111: LD_EXP 48
5115: PPUSH
5116: LD_INT 89
5118: PPUSH
5119: LD_INT 67
5121: PPUSH
5122: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5126: LD_EXP 48
5130: PPUSH
5131: LD_INT 88
5133: PPUSH
5134: LD_INT 66
5136: PPUSH
5137: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5141: LD_EXP 45
5145: PPUSH
5146: LD_STRING D7a-RSol1-1
5148: PPUSH
5149: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5153: LD_EXP 40
5157: PPUSH
5158: LD_STRING D7a-FSol1-1
5160: PPUSH
5161: CALL_OW 88
// wait ( 0 0$12 ) ;
5165: LD_INT 420
5167: PPUSH
5168: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5172: LD_EXP 48
5176: PPUSH
5177: LD_STRING D7b-Bel-1
5179: PPUSH
5180: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5184: LD_EXP 46
5188: PPUSH
5189: LD_STRING D7b-FSol1-1
5191: PPUSH
5192: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5196: LD_EXP 48
5200: PPUSH
5201: LD_STRING D7b-Bel-2
5203: PPUSH
5204: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5208: LD_EXP 45
5212: PPUSH
5213: LD_STRING D7b-RSol1-2
5215: PPUSH
5216: CALL_OW 88
// for unit in ruSolds do
5220: LD_ADDR_VAR 0 2
5224: PUSH
5225: LD_VAR 0 3
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5464
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5233: LD_EXP 43
5237: PPUSH
5238: LD_VAR 0 2
5242: PPUSH
5243: CALL_OW 296
5247: PUSH
5248: LD_INT 7
5250: LESS
5251: IFFALSE 5462
// begin InGameOn ;
5253: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5257: LD_EXP 48
5261: PUSH
5262: LD_EXP 45
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5275: LD_EXP 43
5279: PPUSH
5280: LD_INT 88
5282: PPUSH
5283: LD_INT 66
5285: PPUSH
5286: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5290: LD_EXP 48
5294: PPUSH
5295: LD_EXP 43
5299: PPUSH
5300: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5304: LD_EXP 43
5308: PPUSH
5309: LD_INT 90
5311: PPUSH
5312: LD_INT 66
5314: PPUSH
5315: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5319: LD_EXP 43
5323: PPUSH
5324: LD_STRING D7b-Bur-3
5326: PPUSH
5327: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5331: LD_EXP 48
5335: PPUSH
5336: LD_STRING D7b-Bel-4
5338: PPUSH
5339: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5343: LD_EXP 43
5347: PPUSH
5348: LD_STRING D7b-Bur-4
5350: PPUSH
5351: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5355: LD_EXP 48
5359: PPUSH
5360: LD_STRING D7b-Bel-5
5362: PPUSH
5363: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5367: LD_EXP 46
5371: PPUSH
5372: LD_STRING D7b-FSol1-5
5374: PPUSH
5375: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5379: LD_EXP 48
5383: PPUSH
5384: LD_STRING D7b-Bel-6
5386: PPUSH
5387: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5391: LD_EXP 43
5395: PPUSH
5396: LD_STRING D7b-Bur-6
5398: PPUSH
5399: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5403: LD_EXP 45
5407: PPUSH
5408: LD_STRING D7b-RSol1-6
5410: PPUSH
5411: CALL_OW 88
// InGameOff ;
5415: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 3
5426: PPUSH
5427: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5431: LD_EXP 48
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5443: LD_STRING M3
5445: PPUSH
5446: CALL_OW 337
// secondAttack = true ;
5450: LD_ADDR_EXP 16
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// exit ;
5458: POP
5459: POP
5460: GO 5490
// end ;
5462: GO 5230
5464: POP
5465: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5466: LD_EXP 48
5470: PPUSH
5471: LD_STRING D7b-Bel-3
5473: PPUSH
5474: CALL_OW 88
// InGameOff ;
5478: CALL_OW 9
// belkovWaitForGorky = true ;
5482: LD_ADDR_EXP 15
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// end ;
5490: PPOPN 3
5492: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5493: LD_EXP 15
5497: IFFALSE 5807
5499: GO 5501
5501: DISABLE
5502: LD_INT 0
5504: PPUSH
5505: PPUSH
// begin enable ;
5506: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 22
5514: PUSH
5515: LD_INT 6
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 21
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 69
5540: ST_TO_ADDR
// for unit in ruSolds do
5541: LD_ADDR_VAR 0 1
5545: PUSH
5546: LD_VAR 0 2
5550: PUSH
5551: FOR_IN
5552: IFFALSE 5805
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5554: LD_EXP 43
5558: PPUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: CALL_OW 296
5568: PUSH
5569: LD_INT 7
5571: LESS
5572: IFFALSE 5803
// begin belkovWaitForGorky = false ;
5574: LD_ADDR_EXP 15
5578: PUSH
5579: LD_INT 0
5581: ST_TO_ADDR
// InGameOn ;
5582: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5586: LD_EXP 48
5590: PUSH
5591: LD_EXP 45
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5604: LD_EXP 43
5608: PPUSH
5609: LD_INT 88
5611: PPUSH
5612: LD_INT 66
5614: PPUSH
5615: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5619: LD_EXP 48
5623: PPUSH
5624: LD_EXP 43
5628: PPUSH
5629: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5633: LD_EXP 43
5637: PPUSH
5638: LD_INT 90
5640: PPUSH
5641: LD_INT 66
5643: PPUSH
5644: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5648: LD_EXP 48
5652: PPUSH
5653: LD_STRING D7b-Bel-3a
5655: PPUSH
5656: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5660: LD_EXP 43
5664: PPUSH
5665: LD_STRING D7b-Bur-3
5667: PPUSH
5668: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5672: LD_EXP 48
5676: PPUSH
5677: LD_STRING D7b-Bel-4
5679: PPUSH
5680: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5684: LD_EXP 43
5688: PPUSH
5689: LD_STRING D7b-Bur-4
5691: PPUSH
5692: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5696: LD_EXP 48
5700: PPUSH
5701: LD_STRING D7b-Bel-5
5703: PPUSH
5704: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5708: LD_EXP 46
5712: PPUSH
5713: LD_STRING D7b-FSol1-5
5715: PPUSH
5716: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5720: LD_EXP 48
5724: PPUSH
5725: LD_STRING D7b-Bel-6
5727: PPUSH
5728: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5732: LD_EXP 43
5736: PPUSH
5737: LD_STRING D7b-Bur-6
5739: PPUSH
5740: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5744: LD_EXP 45
5748: PPUSH
5749: LD_STRING D7a-RSol1-6
5751: PPUSH
5752: CALL_OW 88
// InGameOff ;
5756: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5772: LD_EXP 48
5776: PPUSH
5777: LD_INT 3
5779: PPUSH
5780: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5784: LD_STRING M3
5786: PPUSH
5787: CALL_OW 337
// secondAttack = true ;
5791: LD_ADDR_EXP 16
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// exit ;
5799: POP
5800: POP
5801: GO 5807
// end ;
5803: GO 5551
5805: POP
5806: POP
// end ;
5807: PPOPN 2
5809: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5814: LD_EXP 40
5818: PPUSH
5819: LD_STRING D8-FSol1-1
5821: PPUSH
5822: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5826: LD_EXP 41
5830: PPUSH
5831: LD_STRING D8-Glad-1
5833: PPUSH
5834: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5838: LD_EXP 43
5842: PPUSH
5843: LD_STRING D8-Bur-1
5845: PPUSH
5846: CALL_OW 88
// secondAttack = false ;
5850: LD_ADDR_EXP 16
5854: PUSH
5855: LD_INT 0
5857: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5858: LD_ADDR_VAR 0 2
5862: PUSH
5863: LD_INT 22
5865: PUSH
5866: LD_INT 3
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 21
5875: PUSH
5876: LD_INT 1
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: PPUSH
5887: CALL_OW 69
5891: PPUSH
5892: LD_INT 23
5894: PPUSH
5895: CALL_OW 74
5899: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5900: LD_EXP 42
5904: PPUSH
5905: CALL_OW 122
// wait ( 0 0$1 ) ;
5909: LD_INT 35
5911: PPUSH
5912: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5916: LD_EXP 42
5920: PPUSH
5921: LD_VAR 0 2
5925: PPUSH
5926: CALL_OW 175
// end ;
5930: LD_VAR 0 1
5934: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5935: LD_INT 23
5937: PPUSH
5938: CALL_OW 256
5942: PUSH
5943: LD_INT 350
5945: LESS
5946: PUSH
5947: LD_INT 23
5949: PPUSH
5950: CALL_OW 256
5954: PUSH
5955: LD_INT 250
5957: GREATER
5958: AND
5959: PUSH
5960: LD_INT 20
5962: PPUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 3
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 21
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 70
5991: PUSH
5992: LD_INT 0
5994: GREATER
5995: AND
5996: PUSH
5997: LD_EXP 23
6001: NOT
6002: AND
6003: IFFALSE 6020
6005: GO 6007
6007: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6008: LD_EXP 40
6012: PPUSH
6013: LD_STRING D8-FSol1-2
6015: PPUSH
6016: CALL_OW 88
6020: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6021: LD_INT 23
6023: PPUSH
6024: CALL_OW 303
6028: PUSH
6029: LD_INT 22
6031: PPUSH
6032: CALL_OW 302
6036: AND
6037: PUSH
6038: LD_EXP 23
6042: NOT
6043: AND
6044: IFFALSE 6114
6046: GO 6048
6048: DISABLE
// begin amRetreat = true ;
6049: LD_ADDR_EXP 23
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6057: LD_EXP 40
6061: PPUSH
6062: LD_STRING D8-FSol1-2a
6064: PPUSH
6065: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6069: LD_EXP 41
6073: PUSH
6074: LD_EXP 40
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PPUSH
6083: LD_INT 21
6085: PPUSH
6086: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6090: LD_EXP 41
6094: PPUSH
6095: LD_STRING D8-Glad-2
6097: PPUSH
6098: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6102: LD_EXP 43
6106: PPUSH
6107: LD_STRING D8-Bur-2
6109: PPUSH
6110: CALL_OW 88
// end ;
6114: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6115: LD_INT 22
6117: PPUSH
6118: CALL_OW 303
6122: PUSH
6123: LD_INT 23
6125: PPUSH
6126: CALL_OW 302
6130: AND
6131: PUSH
6132: LD_EXP 23
6136: NOT
6137: AND
6138: IFFALSE 6208
6140: GO 6142
6142: DISABLE
// begin amRetreat = true ;
6143: LD_ADDR_EXP 23
6147: PUSH
6148: LD_INT 1
6150: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6151: LD_EXP 40
6155: PPUSH
6156: LD_STRING D8-FSol1-2a
6158: PPUSH
6159: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6163: LD_EXP 41
6167: PUSH
6168: LD_EXP 40
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PPUSH
6177: LD_INT 21
6179: PPUSH
6180: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6184: LD_EXP 41
6188: PPUSH
6189: LD_STRING D8-Glad-2
6191: PPUSH
6192: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6196: LD_EXP 43
6200: PPUSH
6201: LD_STRING D8-Bur-2
6203: PPUSH
6204: CALL_OW 88
// end ;
6208: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and not amRetreat do
6209: LD_INT 23
6211: PPUSH
6212: CALL_OW 256
6216: PUSH
6217: LD_INT 500
6219: LESS
6220: PUSH
6221: LD_EXP 23
6225: NOT
6226: AND
6227: IFFALSE 6297
6229: GO 6231
6231: DISABLE
// begin amRetreat = true ;
6232: LD_ADDR_EXP 23
6236: PUSH
6237: LD_INT 1
6239: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6240: LD_EXP 40
6244: PPUSH
6245: LD_STRING D8-FSol1-2a
6247: PPUSH
6248: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6252: LD_EXP 41
6256: PUSH
6257: LD_EXP 40
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PPUSH
6266: LD_INT 21
6268: PPUSH
6269: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6273: LD_EXP 41
6277: PPUSH
6278: LD_STRING D8-Glad-2
6280: PPUSH
6281: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6285: LD_EXP 43
6289: PPUSH
6290: LD_STRING D8-Bur-2
6292: PPUSH
6293: CALL_OW 88
// end ;
6297: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6298: LD_INT 22
6300: PUSH
6301: LD_INT 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 21
6310: PUSH
6311: LD_INT 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 50
6320: PUSH
6321: EMPTY
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: PUSH
6334: LD_INT 0
6336: GREATER
6337: IFFALSE 6465
6339: GO 6341
6341: DISABLE
6342: LD_INT 0
6344: PPUSH
// begin enable ;
6345: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6346: LD_ADDR_VAR 0 1
6350: PUSH
6351: LD_INT 21
6353: PPUSH
6354: LD_INT 22
6356: PUSH
6357: LD_INT 1
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 21
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 70
6382: PUSH
6383: FOR_IN
6384: IFFALSE 6463
// begin if unit = Gladstone then
6386: LD_VAR 0 1
6390: PUSH
6391: LD_EXP 41
6395: EQUAL
6396: IFFALSE 6426
// begin gladstoneEscape = true ;
6398: LD_ADDR_EXP 18
6402: PUSH
6403: LD_INT 1
6405: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6406: LD_EXP 41
6410: PPUSH
6411: LD_EXP 27
6415: PUSH
6416: LD_STRING Gladstone
6418: STR
6419: PPUSH
6420: CALL_OW 38
// end else
6424: GO 6452
// begin JohannaEscape = true ;
6426: LD_ADDR_EXP 19
6430: PUSH
6431: LD_INT 1
6433: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6434: LD_EXP 40
6438: PPUSH
6439: LD_EXP 27
6443: PUSH
6444: LD_STRING Johanna
6446: STR
6447: PPUSH
6448: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: CALL_OW 64
// end ;
6461: GO 6383
6463: POP
6464: POP
// end ;
6465: PPOPN 1
6467: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6468: LD_EXP 41
6472: PPUSH
6473: CALL_OW 301
6477: PUSH
6478: LD_EXP 40
6482: PPUSH
6483: CALL_OW 301
6487: AND
6488: IFFALSE 6505
6490: GO 6492
6492: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6493: LD_EXP 43
6497: PPUSH
6498: LD_STRING D9-Bur-1
6500: PPUSH
6501: CALL_OW 88
6505: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6506: LD_EXP 40
6510: PPUSH
6511: CALL_OW 301
6515: PUSH
6516: LD_EXP 18
6520: AND
6521: PUSH
6522: LD_EXP 19
6526: NOT
6527: AND
6528: IFFALSE 6545
6530: GO 6532
6532: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6533: LD_EXP 43
6537: PPUSH
6538: LD_STRING D9-Bur-1a
6540: PPUSH
6541: CALL_OW 88
6545: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6546: LD_EXP 41
6550: PPUSH
6551: CALL_OW 301
6555: PUSH
6556: LD_EXP 18
6560: NOT
6561: AND
6562: PUSH
6563: LD_EXP 19
6567: AND
6568: IFFALSE 6585
6570: GO 6572
6572: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6573: LD_EXP 43
6577: PPUSH
6578: LD_STRING D9-Bur-1b
6580: PPUSH
6581: CALL_OW 88
6585: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6586: LD_EXP 18
6590: PUSH
6591: LD_EXP 19
6595: AND
6596: IFFALSE 6613
6598: GO 6600
6600: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6601: LD_EXP 43
6605: PPUSH
6606: LD_STRING D9-Bur-1c
6608: PPUSH
6609: CALL_OW 88
6613: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6614: LD_INT 22
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 50
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 69
6649: PUSH
6650: LD_INT 0
6652: EQUAL
6653: IFFALSE 6901
6655: GO 6657
6657: DISABLE
6658: LD_INT 0
6660: PPUSH
6661: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6662: LD_ADDR_VAR 0 1
6666: PUSH
6667: LD_INT 22
6669: PUSH
6670: LD_INT 3
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 21
6679: PUSH
6680: LD_INT 1
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 50
6689: PUSH
6690: EMPTY
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: PPUSH
6698: CALL_OW 69
6702: PUSH
6703: LD_EXP 43
6707: PUSH
6708: LD_EXP 51
6712: PUSH
6713: LD_EXP 48
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: DIFF
6723: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_INT 26
6736: PUSH
6737: LD_INT 1
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PPUSH
6744: CALL_OW 72
6748: ST_TO_ADDR
// DialogueOn ;
6749: CALL_OW 6
// if IsOK ( Belkov ) then
6753: LD_EXP 48
6757: PPUSH
6758: CALL_OW 302
6762: IFFALSE 6776
// Say ( Belkov , D10-Bel-1 ) ;
6764: LD_EXP 48
6768: PPUSH
6769: LD_STRING D10-Bel-1
6771: PPUSH
6772: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6776: LD_VAR 0 1
6780: PUSH
6781: LD_INT 0
6783: GREATER
6784: PUSH
6785: LD_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: GREATER
6793: PUSH
6794: LD_EXP 48
6798: PPUSH
6799: CALL_OW 302
6803: OR
6804: AND
6805: IFFALSE 6872
// begin Say ( Burlak , D10-Bur-1 ) ;
6807: LD_EXP 43
6811: PPUSH
6812: LD_STRING D10-Bur-1
6814: PPUSH
6815: CALL_OW 88
// if IsOK ( Belkov ) then
6819: LD_EXP 48
6823: PPUSH
6824: CALL_OW 302
6828: IFFALSE 6844
// Say ( Belkov , D10-Bel-1a ) else
6830: LD_EXP 48
6834: PPUSH
6835: LD_STRING D10-Bel-1a
6837: PPUSH
6838: CALL_OW 88
6842: GO 6860
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6844: LD_VAR 0 2
6848: PUSH
6849: LD_INT 1
6851: ARRAY
6852: PPUSH
6853: LD_STRING D10-RSol1-1
6855: PPUSH
6856: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6860: LD_EXP 43
6864: PPUSH
6865: LD_STRING D10-Bur-2
6867: PPUSH
6868: CALL_OW 88
// end ; DialogueOff ;
6872: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6876: LD_STRING M4a
6878: PPUSH
6879: CALL_OW 337
// evacuationAvailable = true ;
6883: LD_ADDR_EXP 21
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6891: LD_INT 1
6893: PPUSH
6894: LD_INT 1
6896: PPUSH
6897: CALL_OW 424
// end ;
6901: PPOPN 2
6903: END
// every 0 0$15 trigger evacuationAvailable do var randomSold ;
6904: LD_EXP 21
6908: IFFALSE 7447
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6916: LD_EXP 50
6920: PPUSH
6921: LD_INT 22
6923: PPUSH
6924: LD_INT 1
6926: PPUSH
6927: CALL_OW 49
// wait ( 0 0$3 ) ;
6931: LD_INT 105
6933: PPUSH
6934: CALL_OW 67
// DialogueOn ;
6938: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6942: LD_EXP 50
6946: PPUSH
6947: LD_STRING D11b-Kir-1
6949: PPUSH
6950: CALL_OW 94
// if IsOK ( Belkov ) then
6954: LD_EXP 48
6958: PPUSH
6959: CALL_OW 302
6963: IFFALSE 6991
// begin Say ( Belkov , D11b-Bel-1 ) ;
6965: LD_EXP 48
6969: PPUSH
6970: LD_STRING D11b-Bel-1
6972: PPUSH
6973: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6977: LD_EXP 48
6981: PPUSH
6982: LD_STRING D11b-Bel-1a
6984: PPUSH
6985: CALL_OW 94
// end else
6989: GO 7046
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
6991: LD_ADDR_VAR 0 1
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 21
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 50
7018: PUSH
7019: EMPTY
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: PPUSH
7032: LD_STRING D11b-RSol1-1
7034: PPUSH
7035: LD_STRING D11b-RFSol1-1
7037: PPUSH
7038: LD_INT 0
7040: PPUSH
7041: CALL 7812 0 4
7045: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7046: LD_INT 24
7048: PPUSH
7049: LD_INT 22
7051: PUSH
7052: LD_INT 0
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 12
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 70
7077: PUSH
7078: LD_INT 0
7080: GREATER
7081: IFFALSE 7097
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7083: LD_EXP 50
7087: PPUSH
7088: LD_STRING D11b1-Kir-1
7090: PPUSH
7091: CALL_OW 94
7095: GO 7109
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7097: LD_EXP 50
7101: PPUSH
7102: LD_STRING D11b2-Kir-1
7104: PPUSH
7105: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7109: LD_EXP 6
7113: PUSH
7114: LD_INT 24
7116: PPUSH
7117: LD_INT 22
7119: PUSH
7120: LD_INT 0
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 25
7129: PUSH
7130: LD_INT 12
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PPUSH
7141: CALL_OW 70
7145: PUSH
7146: LD_INT 0
7148: GREATER
7149: AND
7150: IFFALSE 7285
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7152: LD_EXP 43
7156: PPUSH
7157: LD_STRING D11b1-Bur-1
7159: PPUSH
7160: CALL_OW 88
// if IsOk ( Belkov ) then
7164: LD_EXP 48
7168: PPUSH
7169: CALL_OW 302
7173: IFFALSE 7189
// Say ( Belkov , D11b2-Bel-1 ) else
7175: LD_EXP 48
7179: PPUSH
7180: LD_STRING D11b2-Bel-1
7182: PPUSH
7183: CALL_OW 88
7187: GO 7230
// begin if GetSex ( randomSold ) = sex_male then
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 258
7198: PUSH
7199: LD_INT 1
7201: EQUAL
7202: IFFALSE 7218
// Say ( randomSold , D11b1-RSol1-1 ) else
7204: LD_VAR 0 1
7208: PPUSH
7209: LD_STRING D11b1-RSol1-1
7211: PPUSH
7212: CALL_OW 88
7216: GO 7230
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7218: LD_VAR 0 1
7222: PPUSH
7223: LD_STRING D11b1-RFSol1-1
7225: PPUSH
7226: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7230: LD_INT 22
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 50
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PPUSH
7266: LD_STRING D11b1-RSol1-1
7268: PPUSH
7269: LD_STRING D11b1-RFSol1-1
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: CALL 7812 0 4
// DialogueOff ;
7279: CALL_OW 7
// exit ;
7283: GO 7447
// end ; if spotWaterfall then
7285: LD_EXP 7
7289: IFFALSE 7375
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7291: LD_EXP 43
7295: PPUSH
7296: LD_STRING D11b1-Bur-1a
7298: PPUSH
7299: CALL_OW 88
// if IsOk ( Belkov ) then
7303: LD_EXP 48
7307: PPUSH
7308: CALL_OW 302
7312: IFFALSE 7328
// Say ( Belkov , D11b2-Bel-1 ) else
7314: LD_EXP 48
7318: PPUSH
7319: LD_STRING D11b2-Bel-1
7321: PPUSH
7322: CALL_OW 88
7326: GO 7369
// begin if GetSex ( randomSold ) = sex_male then
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 258
7337: PUSH
7338: LD_INT 1
7340: EQUAL
7341: IFFALSE 7357
// Say ( randomSold , D11b1-RSol1-1 ) else
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_STRING D11b1-RSol1-1
7350: PPUSH
7351: CALL_OW 88
7355: GO 7369
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7357: LD_VAR 0 1
7361: PPUSH
7362: LD_STRING D11b1-RFSol1-1
7364: PPUSH
7365: CALL_OW 88
// end ; DialogueOff ;
7369: CALL_OW 7
// exit ;
7373: GO 7447
// end ; if IsOk ( Belkov ) then
7375: LD_EXP 48
7379: PPUSH
7380: CALL_OW 302
7384: IFFALSE 7400
// Say ( Belkov , D11b1-Bel-1 ) else
7386: LD_EXP 48
7390: PPUSH
7391: LD_STRING D11b1-Bel-1
7393: PPUSH
7394: CALL_OW 88
7398: GO 7441
// begin if GetSex ( randomSold ) = sex_male then
7400: LD_VAR 0 1
7404: PPUSH
7405: CALL_OW 258
7409: PUSH
7410: LD_INT 1
7412: EQUAL
7413: IFFALSE 7429
// Say ( randomSold , D11b1-RSol1-1 ) else
7415: LD_VAR 0 1
7419: PPUSH
7420: LD_STRING D11b1-RSol1-1
7422: PPUSH
7423: CALL_OW 88
7427: GO 7441
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7429: LD_VAR 0 1
7433: PPUSH
7434: LD_STRING D11b1-RFSol1-1
7436: PPUSH
7437: CALL_OW 88
// end ; DialogueOff ;
7441: CALL_OW 7
// exit ;
7445: GO 7447
// end ;
7447: PPOPN 1
7449: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7450: LD_INT 3
7452: PPUSH
7453: LD_EXP 50
7457: PPUSH
7458: CALL_OW 292
7462: IFFALSE 7692
7464: GO 7466
7466: DISABLE
7467: LD_INT 0
7469: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
7470: LD_EXP 50
7474: PPUSH
7475: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7479: LD_ADDR_VAR 0 1
7483: PUSH
7484: LD_INT 22
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 50
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 69
7519: PPUSH
7520: LD_EXP 50
7524: PPUSH
7525: CALL_OW 74
7529: ST_TO_ADDR
// DialogueOn ;
7530: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7534: LD_EXP 50
7538: PPUSH
7539: LD_STRING D11a-Kir-1
7541: PPUSH
7542: CALL_OW 88
// if nearUnit = Belkov then
7546: LD_VAR 0 1
7550: PUSH
7551: LD_EXP 48
7555: EQUAL
7556: IFFALSE 7596
// begin Say ( Belkov , D11a-Bel-1 ) ;
7558: LD_EXP 48
7562: PPUSH
7563: LD_STRING D11a-Bel-1
7565: PPUSH
7566: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7570: LD_EXP 50
7574: PPUSH
7575: LD_STRING D11a-Kir-2
7577: PPUSH
7578: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7582: LD_EXP 48
7586: PPUSH
7587: LD_STRING D11a-Bel-2
7589: PPUSH
7590: CALL_OW 88
// end else
7594: GO 7637
// begin if GetSex ( nearUnit ) = sex_male then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 258
7605: PUSH
7606: LD_INT 1
7608: EQUAL
7609: IFFALSE 7625
// Say ( nearUnit , D11a-RSol1-2 ) else
7611: LD_VAR 0 1
7615: PPUSH
7616: LD_STRING D11a-RSol1-2
7618: PPUSH
7619: CALL_OW 88
7623: GO 7637
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_STRING D11a-RFSol1-2
7632: PPUSH
7633: CALL_OW 88
// end ; DialogueOff ;
7637: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
7641: LD_EXP 50
7645: PPUSH
7646: LD_INT 3
7648: PPUSH
7649: CALL_OW 235
// jelenaSaved = true ;
7653: LD_ADDR_EXP 20
7657: PUSH
7658: LD_INT 1
7660: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7661: LD_INT 175
7663: PPUSH
7664: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7668: LD_EXP 50
7672: PPUSH
7673: LD_STRING D11c-Kir-1
7675: PPUSH
7676: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7680: LD_EXP 43
7684: PPUSH
7685: LD_STRING D11c-Bur-1
7687: PPUSH
7688: CALL_OW 88
// end ;
7692: PPOPN 1
7694: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7695: LD_EXP 21
7699: PUSH
7700: LD_INT 1
7702: PPUSH
7703: LD_INT 22
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 21
7715: PUSH
7716: LD_INT 1
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 70
7731: PUSH
7732: LD_INT 0
7734: GREATER
7735: AND
7736: IFFALSE 7748
7738: GO 7740
7740: DISABLE
// begin Query ( QExit1 ) ;
7741: LD_STRING QExit1
7743: PPUSH
7744: CALL_OW 97
// end ; end_of_file
7748: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7749: LD_INT 0
7751: PPUSH
7752: PPUSH
// if exist_mode then
7753: LD_VAR 0 2
7757: IFFALSE 7782
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7759: LD_ADDR_VAR 0 4
7763: PUSH
7764: LD_EXP 28
7768: PUSH
7769: LD_VAR 0 1
7773: STR
7774: PPUSH
7775: CALL_OW 34
7779: ST_TO_ADDR
7780: GO 7797
// unit := NewCharacter ( ident ) ;
7782: LD_ADDR_VAR 0 4
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 25
7796: ST_TO_ADDR
// result := unit ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_VAR 0 4
7806: ST_TO_ADDR
// end ;
7807: LD_VAR 0 3
7811: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 1
7826: PUSH
7827: LD_EXP 43
7831: PUSH
7832: LD_EXP 51
7836: PUSH
7837: LD_EXP 48
7841: PUSH
7842: LD_EXP 50
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: DIFF
7853: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7854: LD_ADDR_VAR 0 7
7858: PUSH
7859: LD_VAR 0 1
7863: PUSH
7864: LD_INT 1
7866: PPUSH
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 12
7876: ARRAY
7877: ST_TO_ADDR
// if radio then
7878: LD_VAR 0 4
7882: IFFALSE 7931
// begin if GetSex ( speaker ) = sex_male then
7884: LD_VAR 0 7
7888: PPUSH
7889: CALL_OW 258
7893: PUSH
7894: LD_INT 1
7896: EQUAL
7897: IFFALSE 7915
// SayRadio ( speaker , dialogMID ) else
7899: LD_VAR 0 7
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL_OW 94
7913: GO 7929
// SayRadio ( speaker , dialogFID ) ;
7915: LD_VAR 0 7
7919: PPUSH
7920: LD_VAR 0 3
7924: PPUSH
7925: CALL_OW 94
// end else
7929: GO 7976
// begin if GetSex ( speaker ) = sex_male then
7931: LD_VAR 0 7
7935: PPUSH
7936: CALL_OW 258
7940: PUSH
7941: LD_INT 1
7943: EQUAL
7944: IFFALSE 7962
// Say ( speaker , dialogMID ) else
7946: LD_VAR 0 7
7950: PPUSH
7951: LD_VAR 0 2
7955: PPUSH
7956: CALL_OW 88
7960: GO 7976
// Say ( speaker , dialogFID ) ;
7962: LD_VAR 0 7
7966: PPUSH
7967: LD_VAR 0 3
7971: PPUSH
7972: CALL_OW 88
// end ; result := speaker ;
7976: LD_ADDR_VAR 0 5
7980: PUSH
7981: LD_VAR 0 7
7985: ST_TO_ADDR
// end ;
7986: LD_VAR 0 5
7990: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7991: LD_INT 0
7993: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 255
8003: PUSH
8004: LD_OWVAR 2
8008: EQUAL
8009: PUSH
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL_OW 302
8019: AND
8020: IFFALSE 8042
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_EXP 27
8031: PUSH
8032: LD_VAR 0 2
8036: STR
8037: PPUSH
8038: CALL_OW 38
// end ;
8042: LD_VAR 0 3
8046: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8047: LD_INT 0
8049: PPUSH
8050: PPUSH
8051: PPUSH
// resultCharactersToSave = [ ] ;
8052: LD_ADDR_VAR 0 5
8056: PUSH
8057: EMPTY
8058: ST_TO_ADDR
// for unit in characters do
8059: LD_ADDR_VAR 0 4
8063: PUSH
8064: LD_VAR 0 1
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8118
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8072: LD_VAR 0 4
8076: PPUSH
8077: CALL_OW 255
8081: PUSH
8082: LD_OWVAR 2
8086: EQUAL
8087: PUSH
8088: LD_VAR 0 4
8092: PPUSH
8093: CALL_OW 302
8097: AND
8098: IFFALSE 8116
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8100: LD_ADDR_VAR 0 5
8104: PUSH
8105: LD_VAR 0 5
8109: PUSH
8110: LD_VAR 0 4
8114: ADD
8115: ST_TO_ADDR
8116: GO 8069
8118: POP
8119: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8120: LD_VAR 0 5
8124: PPUSH
8125: LD_EXP 27
8129: PUSH
8130: LD_VAR 0 2
8134: STR
8135: PPUSH
8136: CALL_OW 38
// end ;
8140: LD_VAR 0 3
8144: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
8149: PPUSH
8150: PPUSH
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
8157: PPUSH
8158: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8159: LD_VAR 0 1
8163: PPUSH
8164: CALL_OW 302
8168: NOT
8169: PUSH
8170: LD_VAR 0 4
8174: PUSH
8175: LD_INT 1
8177: EQUAL
8178: OR
8179: PUSH
8180: LD_VAR 0 2
8184: PPUSH
8185: LD_VAR 0 3
8189: PPUSH
8190: CALL_OW 488
8194: NOT
8195: OR
8196: PUSH
8197: LD_VAR 0 1
8201: PPUSH
8202: LD_VAR 0 2
8206: PPUSH
8207: LD_VAR 0 3
8211: PPUSH
8212: CALL_OW 297
8216: PUSH
8217: LD_VAR 0 4
8221: GREATEREQUAL
8222: OR
8223: PUSH
8224: LD_VAR 0 5
8228: PUSH
8229: LD_INT 1
8231: PUSH
8232: LD_INT 0
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: IN
8239: NOT
8240: OR
8241: IFFALSE 8245
// exit ;
8243: GO 9802
// attempts = 0 ;
8245: LD_ADDR_VAR 0 17
8249: PUSH
8250: LD_INT 0
8252: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8253: LD_ADDR_VAR 0 7
8257: PUSH
8258: EMPTY
8259: ST_TO_ADDR
// list_coords = [ ] ;
8260: LD_ADDR_VAR 0 8
8264: PUSH
8265: EMPTY
8266: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8267: LD_ADDR_VAR 0 9
8271: PUSH
8272: LD_VAR 0 2
8276: PPUSH
8277: LD_VAR 0 3
8281: PPUSH
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 250
8291: PPUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 251
8301: PPUSH
8302: CALL 9807 0 4
8306: ST_TO_ADDR
// if attempts = 0 then
8307: LD_VAR 0 17
8311: PUSH
8312: LD_INT 0
8314: EQUAL
8315: IFFALSE 8423
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8317: LD_ADDR_VAR 0 10
8321: PUSH
8322: LD_VAR 0 9
8326: PUSH
8327: LD_VAR 0 9
8331: PUSH
8332: LD_INT 1
8334: PLUS
8335: PUSH
8336: LD_VAR 0 9
8340: PUSH
8341: LD_INT 1
8343: MINUS
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8350: LD_VAR 0 10
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PUSH
8359: LD_INT 6
8361: EQUAL
8362: IFFALSE 8385
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8364: LD_ADDR_VAR 0 10
8368: PUSH
8369: LD_VAR 0 10
8373: PPUSH
8374: LD_INT 2
8376: PPUSH
8377: LD_INT 0
8379: PPUSH
8380: CALL_OW 1
8384: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8385: LD_VAR 0 10
8389: PUSH
8390: LD_INT 3
8392: ARRAY
8393: PUSH
8394: LD_INT 1
8396: NEG
8397: EQUAL
8398: IFFALSE 8421
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8400: LD_ADDR_VAR 0 10
8404: PUSH
8405: LD_VAR 0 10
8409: PPUSH
8410: LD_INT 3
8412: PPUSH
8413: LD_INT 5
8415: PPUSH
8416: CALL_OW 1
8420: ST_TO_ADDR
// end else
8421: GO 8460
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8423: LD_ADDR_VAR 0 10
8427: PUSH
8428: LD_INT 0
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 3
8439: PUSH
8440: LD_INT 4
8442: PUSH
8443: LD_INT 5
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_VAR 0 9
8458: DIFF
8459: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8460: LD_ADDR_VAR 0 14
8464: PUSH
8465: DOUBLE
8466: LD_INT 1
8468: DEC
8469: ST_TO_ADDR
8470: LD_VAR 0 10
8474: PUSH
8475: LD_INT 0
8477: PLUS
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8802
// case dir_list [ c ] of 0 :
8482: LD_VAR 0 10
8486: PUSH
8487: LD_VAR 0 14
8491: ARRAY
8492: PUSH
8493: LD_INT 0
8495: DOUBLE
8496: EQUAL
8497: IFTRUE 8501
8499: GO 8542
8501: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8502: LD_ADDR_VAR 0 8
8506: PUSH
8507: LD_VAR 0 8
8511: PPUSH
8512: LD_INT 1
8514: PPUSH
8515: LD_VAR 0 2
8519: PUSH
8520: LD_VAR 0 3
8524: PUSH
8525: LD_VAR 0 4
8529: MINUS
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PPUSH
8535: CALL_OW 2
8539: ST_TO_ADDR
8540: GO 8800
8542: LD_INT 1
8544: DOUBLE
8545: EQUAL
8546: IFTRUE 8550
8548: GO 8591
8550: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8551: LD_ADDR_VAR 0 8
8555: PUSH
8556: LD_VAR 0 8
8560: PPUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 2
8568: PUSH
8569: LD_VAR 0 4
8573: PLUS
8574: PUSH
8575: LD_VAR 0 3
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 2
8588: ST_TO_ADDR
8589: GO 8800
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8646
8599: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8600: LD_ADDR_VAR 0 8
8604: PUSH
8605: LD_VAR 0 8
8609: PPUSH
8610: LD_INT 1
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 4
8622: PLUS
8623: PUSH
8624: LD_VAR 0 3
8628: PUSH
8629: LD_VAR 0 4
8633: PLUS
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 2
8643: ST_TO_ADDR
8644: GO 8800
8646: LD_INT 3
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8695
8654: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8655: LD_ADDR_VAR 0 8
8659: PUSH
8660: LD_VAR 0 8
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: LD_VAR 0 2
8672: PUSH
8673: LD_VAR 0 3
8677: PUSH
8678: LD_VAR 0 4
8682: PLUS
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 2
8692: ST_TO_ADDR
8693: GO 8800
8695: LD_INT 4
8697: DOUBLE
8698: EQUAL
8699: IFTRUE 8703
8701: GO 8744
8703: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 8
8713: PPUSH
8714: LD_INT 1
8716: PPUSH
8717: LD_VAR 0 2
8721: PUSH
8722: LD_VAR 0 4
8726: MINUS
8727: PUSH
8728: LD_VAR 0 3
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 2
8741: ST_TO_ADDR
8742: GO 8800
8744: LD_INT 5
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8799
8752: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8753: LD_ADDR_VAR 0 8
8757: PUSH
8758: LD_VAR 0 8
8762: PPUSH
8763: LD_INT 1
8765: PPUSH
8766: LD_VAR 0 2
8770: PUSH
8771: LD_VAR 0 4
8775: MINUS
8776: PUSH
8777: LD_VAR 0 3
8781: PUSH
8782: LD_VAR 0 4
8786: MINUS
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PPUSH
8792: CALL_OW 2
8796: ST_TO_ADDR
8797: GO 8800
8799: POP
8800: GO 8479
8802: POP
8803: POP
// if dist < 30 then
8804: LD_VAR 0 4
8808: PUSH
8809: LD_INT 30
8811: LESS
8812: IFFALSE 8824
// c = 1 else
8814: LD_ADDR_VAR 0 14
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
8822: GO 8832
// c = 2 ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_INT 2
8831: ST_TO_ADDR
// b = 1 ;
8832: LD_ADDR_VAR 0 11
8836: PUSH
8837: LD_INT 1
8839: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: LD_INT 1
8852: MINUS
8853: LESSEQUAL
8854: IFFALSE 9282
// begin if 0 in dir_list and 1 in dir_list then
8856: LD_INT 0
8858: PUSH
8859: LD_VAR 0 10
8863: IN
8864: PUSH
8865: LD_INT 1
8867: PUSH
8868: LD_VAR 0 10
8872: IN
8873: AND
8874: IFFALSE 8926
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8876: LD_ADDR_VAR 0 8
8880: PUSH
8881: LD_VAR 0 8
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: LD_VAR 0 2
8893: PUSH
8894: LD_VAR 0 11
8898: PLUS
8899: PUSH
8900: LD_VAR 0 3
8904: PUSH
8905: LD_VAR 0 4
8909: MINUS
8910: PUSH
8911: LD_VAR 0 11
8915: PLUS
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PPUSH
8921: CALL_OW 2
8925: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8926: LD_INT 1
8928: PUSH
8929: LD_VAR 0 10
8933: IN
8934: PUSH
8935: LD_INT 2
8937: PUSH
8938: LD_VAR 0 10
8942: IN
8943: AND
8944: IFFALSE 8990
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8946: LD_ADDR_VAR 0 8
8950: PUSH
8951: LD_VAR 0 8
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: LD_VAR 0 2
8963: PUSH
8964: LD_VAR 0 4
8968: PLUS
8969: PUSH
8970: LD_VAR 0 3
8974: PUSH
8975: LD_VAR 0 11
8979: PLUS
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 2
8989: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
8990: LD_INT 2
8992: PUSH
8993: LD_VAR 0 10
8997: IN
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: LD_VAR 0 10
9006: IN
9007: AND
9008: IFFALSE 9060
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9010: LD_ADDR_VAR 0 8
9014: PUSH
9015: LD_VAR 0 8
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: LD_VAR 0 2
9027: PUSH
9028: LD_VAR 0 4
9032: PLUS
9033: PUSH
9034: LD_VAR 0 11
9038: MINUS
9039: PUSH
9040: LD_VAR 0 3
9044: PUSH
9045: LD_VAR 0 4
9049: PLUS
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 2
9059: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9060: LD_INT 3
9062: PUSH
9063: LD_VAR 0 10
9067: IN
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_VAR 0 10
9076: IN
9077: AND
9078: IFFALSE 9130
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9080: LD_ADDR_VAR 0 8
9084: PUSH
9085: LD_VAR 0 8
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 2
9097: PUSH
9098: LD_VAR 0 11
9102: MINUS
9103: PUSH
9104: LD_VAR 0 3
9108: PUSH
9109: LD_VAR 0 4
9113: PLUS
9114: PUSH
9115: LD_VAR 0 11
9119: MINUS
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PPUSH
9125: CALL_OW 2
9129: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9130: LD_INT 4
9132: PUSH
9133: LD_VAR 0 10
9137: IN
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: LD_VAR 0 10
9146: IN
9147: AND
9148: IFFALSE 9194
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9150: LD_ADDR_VAR 0 8
9154: PUSH
9155: LD_VAR 0 8
9159: PPUSH
9160: LD_INT 1
9162: PPUSH
9163: LD_VAR 0 2
9167: PUSH
9168: LD_VAR 0 4
9172: MINUS
9173: PUSH
9174: LD_VAR 0 3
9178: PUSH
9179: LD_VAR 0 11
9183: MINUS
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PPUSH
9189: CALL_OW 2
9193: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9194: LD_INT 5
9196: PUSH
9197: LD_VAR 0 10
9201: IN
9202: PUSH
9203: LD_INT 0
9205: PUSH
9206: LD_VAR 0 10
9210: IN
9211: AND
9212: IFFALSE 9264
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9214: LD_ADDR_VAR 0 8
9218: PUSH
9219: LD_VAR 0 8
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: LD_VAR 0 2
9231: PUSH
9232: LD_VAR 0 4
9236: MINUS
9237: PUSH
9238: LD_VAR 0 11
9242: PLUS
9243: PUSH
9244: LD_VAR 0 3
9248: PUSH
9249: LD_VAR 0 4
9253: MINUS
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PPUSH
9259: CALL_OW 2
9263: ST_TO_ADDR
// b = b + c end ;
9264: LD_ADDR_VAR 0 11
9268: PUSH
9269: LD_VAR 0 11
9273: PUSH
9274: LD_VAR 0 14
9278: PLUS
9279: ST_TO_ADDR
9280: GO 8840
// if list_coords = 0 then
9282: LD_VAR 0 8
9286: PUSH
9287: LD_INT 0
9289: EQUAL
9290: IFFALSE 9294
// exit ;
9292: GO 9802
// repeat min_dist = 5000 ;
9294: LD_ADDR_VAR 0 12
9298: PUSH
9299: LD_INT 5000
9301: ST_TO_ADDR
// for b in list_coords do
9302: LD_ADDR_VAR 0 11
9306: PUSH
9307: LD_VAR 0 8
9311: PUSH
9312: FOR_IN
9313: IFFALSE 9372
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9315: LD_ADDR_VAR 0 13
9319: PUSH
9320: LD_VAR 0 1
9324: PPUSH
9325: LD_VAR 0 11
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_VAR 0 11
9338: PUSH
9339: LD_INT 2
9341: ARRAY
9342: PPUSH
9343: CALL_OW 297
9347: ST_TO_ADDR
// if temp_dist < min_dist then
9348: LD_VAR 0 13
9352: PUSH
9353: LD_VAR 0 12
9357: LESS
9358: IFFALSE 9370
// min_dist = temp_dist ;
9360: LD_ADDR_VAR 0 12
9364: PUSH
9365: LD_VAR 0 13
9369: ST_TO_ADDR
// end ;
9370: GO 9312
9372: POP
9373: POP
// c = 0 ;
9374: LD_ADDR_VAR 0 14
9378: PUSH
9379: LD_INT 0
9381: ST_TO_ADDR
// repeat c = c + 1 ;
9382: LD_ADDR_VAR 0 14
9386: PUSH
9387: LD_VAR 0 14
9391: PUSH
9392: LD_INT 1
9394: PLUS
9395: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_VAR 0 8
9405: PUSH
9406: LD_VAR 0 14
9410: ARRAY
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: LD_VAR 0 8
9420: PUSH
9421: LD_VAR 0 14
9425: ARRAY
9426: PUSH
9427: LD_INT 2
9429: ARRAY
9430: PPUSH
9431: CALL_OW 297
9435: PUSH
9436: LD_VAR 0 12
9440: EQUAL
9441: IFFALSE 9506
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9443: LD_ADDR_VAR 0 7
9447: PUSH
9448: LD_VAR 0 7
9452: PPUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_VAR 0 8
9460: PUSH
9461: LD_VAR 0 14
9465: ARRAY
9466: PPUSH
9467: CALL_OW 2
9471: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9472: LD_ADDR_VAR 0 8
9476: PUSH
9477: LD_VAR 0 8
9481: PPUSH
9482: LD_VAR 0 14
9486: PPUSH
9487: CALL_OW 3
9491: ST_TO_ADDR
// c = c - 1 ;
9492: LD_ADDR_VAR 0 14
9496: PUSH
9497: LD_VAR 0 14
9501: PUSH
9502: LD_INT 1
9504: MINUS
9505: ST_TO_ADDR
// end ; until c = list_coords ;
9506: LD_VAR 0 14
9510: PUSH
9511: LD_VAR 0 8
9515: EQUAL
9516: IFFALSE 9382
// c = 0 ;
9518: LD_ADDR_VAR 0 14
9522: PUSH
9523: LD_INT 0
9525: ST_TO_ADDR
// if list_nearest > 0 then
9526: LD_VAR 0 7
9530: PUSH
9531: LD_INT 0
9533: GREATER
9534: IFFALSE 9676
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9536: LD_ADDR_VAR 0 15
9540: PUSH
9541: LD_INT 1
9543: PPUSH
9544: LD_VAR 0 7
9548: PPUSH
9549: CALL_OW 12
9553: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9554: LD_ADDR_VAR 0 16
9558: PUSH
9559: LD_VAR 0 7
9563: PUSH
9564: LD_VAR 0 15
9568: ARRAY
9569: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9570: LD_VAR 0 16
9574: PUSH
9575: LD_INT 1
9577: ARRAY
9578: PPUSH
9579: LD_VAR 0 16
9583: PUSH
9584: LD_INT 2
9586: ARRAY
9587: PPUSH
9588: CALL_OW 488
9592: PUSH
9593: LD_INT 0
9595: GREATER
9596: PUSH
9597: LD_VAR 0 16
9601: PUSH
9602: LD_INT 1
9604: ARRAY
9605: PPUSH
9606: LD_VAR 0 16
9610: PUSH
9611: LD_INT 2
9613: ARRAY
9614: PPUSH
9615: CALL_OW 428
9619: PUSH
9620: LD_INT 0
9622: EQUAL
9623: AND
9624: IFFALSE 9636
// c = 1 else
9626: LD_ADDR_VAR 0 14
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
9634: GO 9656
// list_nearest = Delete ( list_nearest , rand_num ) ;
9636: LD_ADDR_VAR 0 7
9640: PUSH
9641: LD_VAR 0 7
9645: PPUSH
9646: LD_VAR 0 15
9650: PPUSH
9651: CALL_OW 3
9655: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9656: LD_VAR 0 14
9660: PUSH
9661: LD_INT 1
9663: EQUAL
9664: PUSH
9665: LD_VAR 0 7
9669: PUSH
9670: LD_INT 0
9672: EQUAL
9673: OR
9674: IFFALSE 9536
// end ; until c = 1 or list_coords = 0 ;
9676: LD_VAR 0 14
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: PUSH
9685: LD_VAR 0 8
9689: PUSH
9690: LD_INT 0
9692: EQUAL
9693: OR
9694: IFFALSE 9294
// attempts = attempts + 1 ;
9696: LD_ADDR_VAR 0 17
9700: PUSH
9701: LD_VAR 0 17
9705: PUSH
9706: LD_INT 1
9708: PLUS
9709: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9710: LD_VAR 0 14
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: PUSH
9719: LD_VAR 0 17
9723: PUSH
9724: LD_INT 1
9726: GREATER
9727: OR
9728: IFFALSE 8253
// if c = 1 then
9730: LD_VAR 0 14
9734: PUSH
9735: LD_INT 1
9737: EQUAL
9738: IFFALSE 9802
// if add then
9740: LD_VAR 0 5
9744: IFFALSE 9775
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9746: LD_VAR 0 1
9750: PPUSH
9751: LD_VAR 0 16
9755: PUSH
9756: LD_INT 1
9758: ARRAY
9759: PPUSH
9760: LD_VAR 0 16
9764: PUSH
9765: LD_INT 2
9767: ARRAY
9768: PPUSH
9769: CALL_OW 171
9773: GO 9802
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_VAR 0 16
9784: PUSH
9785: LD_INT 1
9787: ARRAY
9788: PPUSH
9789: LD_VAR 0 16
9793: PUSH
9794: LD_INT 2
9796: ARRAY
9797: PPUSH
9798: CALL_OW 111
// end ;
9802: LD_VAR 0 6
9806: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9807: LD_INT 0
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9815: LD_VAR 0 1
9819: PPUSH
9820: LD_VAR 0 2
9824: PPUSH
9825: CALL_OW 488
9829: NOT
9830: PUSH
9831: LD_VAR 0 3
9835: PPUSH
9836: LD_VAR 0 4
9840: PPUSH
9841: CALL_OW 488
9845: NOT
9846: OR
9847: IFFALSE 9860
// begin result = - 1 ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: LD_INT 1
9856: NEG
9857: ST_TO_ADDR
// exit ;
9858: GO 10020
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9860: LD_ADDR_VAR 0 6
9864: PUSH
9865: LD_VAR 0 1
9869: PPUSH
9870: LD_VAR 0 2
9874: PPUSH
9875: LD_VAR 0 3
9879: PPUSH
9880: LD_VAR 0 4
9884: PPUSH
9885: CALL_OW 298
9889: ST_TO_ADDR
// dist_2 = 99999 ;
9890: LD_ADDR_VAR 0 7
9894: PUSH
9895: LD_INT 99999
9897: ST_TO_ADDR
// for b = 0 to 5 do
9898: LD_ADDR_VAR 0 8
9902: PUSH
9903: DOUBLE
9904: LD_INT 0
9906: DEC
9907: ST_TO_ADDR
9908: LD_INT 5
9910: PUSH
9911: FOR_TO
9912: IFFALSE 10008
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9914: LD_ADDR_VAR 0 9
9918: PUSH
9919: LD_VAR 0 1
9923: PPUSH
9924: LD_VAR 0 8
9928: PPUSH
9929: LD_VAR 0 6
9933: PPUSH
9934: CALL_OW 272
9938: PPUSH
9939: LD_VAR 0 2
9943: PPUSH
9944: LD_VAR 0 8
9948: PPUSH
9949: LD_VAR 0 6
9953: PPUSH
9954: CALL_OW 273
9958: PPUSH
9959: LD_VAR 0 3
9963: PPUSH
9964: LD_VAR 0 4
9968: PPUSH
9969: CALL_OW 298
9973: ST_TO_ADDR
// if temp_dist < dist_2 then
9974: LD_VAR 0 9
9978: PUSH
9979: LD_VAR 0 7
9983: LESS
9984: IFFALSE 10006
// begin dist_2 = temp_dist ;
9986: LD_ADDR_VAR 0 7
9990: PUSH
9991: LD_VAR 0 9
9995: ST_TO_ADDR
// dir = b ;
9996: LD_ADDR_VAR 0 10
10000: PUSH
10001: LD_VAR 0 8
10005: ST_TO_ADDR
// end ; end ;
10006: GO 9911
10008: POP
10009: POP
// result = dir ;
10010: LD_ADDR_VAR 0 5
10014: PUSH
10015: LD_VAR 0 10
10019: ST_TO_ADDR
// end ;
10020: LD_VAR 0 5
10024: RET
// export function MoveToHill ; begin
10025: LD_INT 0
10027: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10028: LD_EXP 44
10032: PPUSH
10033: LD_INT 65
10035: PPUSH
10036: LD_INT 59
10038: PPUSH
10039: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10043: LD_EXP 44
10047: PPUSH
10048: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10052: LD_EXP 45
10056: PPUSH
10057: LD_INT 65
10059: PPUSH
10060: LD_INT 58
10062: PPUSH
10063: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10067: LD_EXP 45
10071: PPUSH
10072: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10076: LD_EXP 46
10080: PPUSH
10081: LD_INT 64
10083: PPUSH
10084: LD_INT 57
10086: PPUSH
10087: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10091: LD_EXP 46
10095: PPUSH
10096: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10100: LD_EXP 47
10104: PPUSH
10105: LD_INT 64
10107: PPUSH
10108: LD_INT 56
10110: PPUSH
10111: CALL_OW 111
// AddComCrawl ( Balei ) ;
10115: LD_EXP 47
10119: PPUSH
10120: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10124: LD_EXP 48
10128: PPUSH
10129: LD_INT 63
10131: PPUSH
10132: LD_INT 55
10134: PPUSH
10135: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10139: LD_EXP 48
10143: PPUSH
10144: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10148: LD_EXP 49
10152: PPUSH
10153: LD_INT 66
10155: PPUSH
10156: LD_INT 58
10158: PPUSH
10159: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10163: LD_EXP 49
10167: PPUSH
10168: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10172: LD_EXP 51
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 6
10184: EQUAL
10185: PUSH
10186: LD_EXP 11
10190: AND
10191: IFFALSE 10217
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10193: LD_EXP 51
10197: PPUSH
10198: LD_INT 63
10200: PPUSH
10201: LD_INT 54
10203: PPUSH
10204: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10208: LD_EXP 51
10212: PPUSH
10213: CALL_OW 197
// end ; end ; end_of_file
10217: LD_VAR 0 1
10221: RET
// export function BurlakDying ; begin
10222: LD_INT 0
10224: PPUSH
// YouLost ( Burlak ) ;
10225: LD_STRING Burlak
10227: PPUSH
10228: CALL_OW 104
// end ;
10232: LD_VAR 0 1
10236: RET
// every 0 0$1 trigger kirovSolds = 0 do
10237: LD_EXP 53
10241: PUSH
10242: LD_INT 0
10244: EQUAL
10245: IFFALSE 10257
10247: GO 10249
10249: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10250: LD_STRING KirovSoldsDie
10252: PPUSH
10253: CALL_OW 104
10257: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10258: LD_EXP 21
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 71
10294: PUSH
10295: LD_INT 0
10297: EQUAL
10298: AND
10299: IFFALSE 10447
10301: GO 10303
10303: DISABLE
10304: LD_INT 0
10306: PPUSH
// begin case Query ( QExit2 ) of 1 :
10307: LD_STRING QExit2
10309: PPUSH
10310: CALL_OW 97
10314: PUSH
10315: LD_INT 1
10317: DOUBLE
10318: EQUAL
10319: IFTRUE 10323
10321: GO 10427
10323: POP
// begin if IsOk ( Belkov ) then
10324: LD_EXP 48
10328: PPUSH
10329: CALL_OW 302
10333: IFFALSE 10349
// Say ( Belkov , D12-Bel-1 ) else
10335: LD_EXP 48
10339: PPUSH
10340: LD_STRING D12-Bel-1
10342: PPUSH
10343: CALL_OW 88
10347: GO 10409
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10349: LD_INT 22
10351: PUSH
10352: LD_INT 3
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 21
10361: PUSH
10362: LD_INT 1
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 50
10371: PUSH
10372: EMPTY
10373: LIST
10374: PUSH
10375: LD_INT 26
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: PPUSH
10396: LD_STRING D12-RSol1-1
10398: PPUSH
10399: LD_STRING 
10401: PPUSH
10402: LD_INT 0
10404: PPUSH
10405: CALL 7812 0 4
// SetRewards ;
10409: CALL 10450 0 0
// SavePlayerCharacters ;
10413: CALL 10801 0 0
// SaveGlobalVariables ;
10417: CALL 10931 0 0
// YouWin ;
10421: CALL_OW 103
// end ; 2 :
10425: GO 10447
10427: LD_INT 2
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// begin wait ( 0 0$5 ) ;
10436: LD_INT 175
10438: PPUSH
10439: CALL_OW 67
// enable ;
10443: ENABLE
// end ; end ;
10444: GO 10447
10446: POP
// end ;
10447: PPOPN 1
10449: END
// function SetRewards ; begin
10450: LD_INT 0
10452: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10453: LD_EXP 18
10457: NOT
10458: PUSH
10459: LD_EXP 19
10463: NOT
10464: AND
10465: IFFALSE 10477
// AddMedal ( NoEscape , 1 ) ;
10467: LD_STRING NoEscape
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10477: LD_EXP 18
10481: PUSH
10482: LD_EXP 19
10486: NOT
10487: AND
10488: IFFALSE 10501
// AddMedal ( NoEscape , - 1 ) ;
10490: LD_STRING NoEscape
10492: PPUSH
10493: LD_INT 1
10495: NEG
10496: PPUSH
10497: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10501: LD_EXP 18
10505: NOT
10506: PUSH
10507: LD_EXP 19
10511: AND
10512: IFFALSE 10525
// AddMedal ( NoEscape , - 2 ) ;
10514: LD_STRING NoEscape
10516: PPUSH
10517: LD_INT 2
10519: NEG
10520: PPUSH
10521: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10525: LD_EXP 18
10529: PUSH
10530: LD_EXP 19
10534: AND
10535: IFFALSE 10548
// AddMedal ( NoEscape , - 3 ) ;
10537: LD_STRING NoEscape
10539: PPUSH
10540: LD_INT 3
10542: NEG
10543: PPUSH
10544: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10548: LD_EXP 11
10552: PUSH
10553: LD_EXP 51
10557: PPUSH
10558: CALL_OW 302
10562: AND
10563: PUSH
10564: LD_EXP 20
10568: AND
10569: PUSH
10570: LD_EXP 50
10574: PPUSH
10575: CALL_OW 302
10579: AND
10580: IFFALSE 10592
// AddMedal ( Gnyevko , 1 ) ;
10582: LD_STRING Gnyevko
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10592: LD_EXP 11
10596: NOT
10597: PUSH
10598: LD_EXP 20
10602: AND
10603: PUSH
10604: LD_EXP 50
10608: PPUSH
10609: CALL_OW 302
10613: AND
10614: IFFALSE 10627
// AddMedal ( Gnyevko , - 1 ) ;
10616: LD_STRING Gnyevko
10618: PPUSH
10619: LD_INT 1
10621: NEG
10622: PPUSH
10623: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10627: LD_EXP 11
10631: PUSH
10632: LD_EXP 20
10636: NOT
10637: PUSH
10638: LD_EXP 51
10642: PPUSH
10643: CALL_OW 302
10647: NOT
10648: OR
10649: PUSH
10650: LD_EXP 50
10654: PPUSH
10655: CALL_OW 302
10659: NOT
10660: OR
10661: AND
10662: IFFALSE 10675
// AddMedal ( Gnyevko , - 2 ) ;
10664: LD_STRING Gnyevko
10666: PPUSH
10667: LD_INT 2
10669: NEG
10670: PPUSH
10671: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10675: LD_EXP 11
10679: NOT
10680: PUSH
10681: LD_EXP 20
10685: NOT
10686: AND
10687: PUSH
10688: LD_EXP 51
10692: PPUSH
10693: CALL_OW 302
10697: NOT
10698: PUSH
10699: LD_EXP 50
10703: PPUSH
10704: CALL_OW 302
10708: NOT
10709: AND
10710: OR
10711: IFFALSE 10724
// AddMedal ( Gnyevko , - 3 ) ;
10713: LD_STRING Gnyevko
10715: PPUSH
10716: LD_INT 3
10718: NEG
10719: PPUSH
10720: CALL_OW 101
// if lostComradesCounter = 0 then
10724: LD_EXP 22
10728: PUSH
10729: LD_INT 0
10731: EQUAL
10732: IFFALSE 10746
// AddMedal ( NoLosses , 1 ) else
10734: LD_STRING NoLosses
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 101
10744: GO 10756
// AddMedal ( NoLosses , 0 ) ;
10746: LD_STRING NoLosses
10748: PPUSH
10749: LD_INT 0
10751: PPUSH
10752: CALL_OW 101
// GiveMedals ( Main ) ;
10756: LD_STRING Main
10758: PPUSH
10759: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10763: LD_INT 22
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PPUSH
10787: CALL_OW 69
10791: PPUSH
10792: CALL_OW 43
// end ;
10796: LD_VAR 0 1
10800: RET
// function SavePlayerCharacters ; var others ; begin
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10805: LD_EXP 43
10809: PPUSH
10810: LD_STRING Burlak
10812: PPUSH
10813: CALL 7991 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10817: LD_EXP 51
10821: PPUSH
10822: LD_STRING Gnyevko
10824: PPUSH
10825: CALL 7991 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10829: LD_EXP 48
10833: PPUSH
10834: LD_STRING Belkov
10836: PPUSH
10837: CALL 7991 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10841: LD_EXP 50
10845: PPUSH
10846: LD_STRING Kirilenkova
10848: PPUSH
10849: CALL 7991 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: LD_INT 22
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 21
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PPUSH
10882: CALL_OW 69
10886: PUSH
10887: LD_EXP 43
10891: PUSH
10892: LD_EXP 51
10896: PUSH
10897: LD_EXP 48
10901: PUSH
10902: LD_EXP 50
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: DIFF
10913: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_STRING other_survivors
10921: PPUSH
10922: CALL 8047 0 2
// end ;
10926: LD_VAR 0 1
10930: RET
// function SaveGlobalVariables ; begin
10931: LD_INT 0
10933: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
10934: LD_EXP 1
10938: PPUSH
10939: LD_STRING 01_GladstoneStatus
10941: PPUSH
10942: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
10946: LD_EXP 2
10950: PPUSH
10951: LD_STRING 01_JohannaStatus
10953: PPUSH
10954: CALL_OW 39
// end ; end_of_file
10958: LD_VAR 0 1
10962: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
// uc_side = 1 ;
10968: LD_ADDR_OWVAR 20
10972: PUSH
10973: LD_INT 1
10975: ST_TO_ADDR
// hc_class := 1 ;
10976: LD_ADDR_OWVAR 28
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// hc_sex := sex_male ;
10984: LD_ADDR_OWVAR 27
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
10992: LD_ADDR_OWVAR 33
10996: PUSH
10997: LD_STRING AmGalRemake
10999: ST_TO_ADDR
// hc_face_number := 1 ;
11000: LD_ADDR_OWVAR 34
11004: PUSH
11005: LD_INT 1
11007: ST_TO_ADDR
// hc_name := Charles Brown ;
11008: LD_ADDR_OWVAR 26
11012: PUSH
11013: LD_STRING Charles Brown
11015: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11016: LD_ADDR_OWVAR 29
11020: PUSH
11021: LD_INT 12
11023: PUSH
11024: LD_INT 11
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11031: LD_ADDR_OWVAR 31
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: ST_TO_ADDR
// Charles = CreateHuman ;
11054: LD_ADDR_EXP 39
11058: PUSH
11059: CALL_OW 44
11063: ST_TO_ADDR
// hc_class := 1 ;
11064: LD_ADDR_OWVAR 28
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// hc_sex := sex_female ;
11072: LD_ADDR_OWVAR 27
11076: PUSH
11077: LD_INT 2
11079: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11080: LD_ADDR_OWVAR 33
11084: PUSH
11085: LD_STRING AmGalRemake
11087: ST_TO_ADDR
// hc_face_number := 2 ;
11088: LD_ADDR_OWVAR 34
11092: PUSH
11093: LD_INT 2
11095: ST_TO_ADDR
// hc_name := Johanna Holland ;
11096: LD_ADDR_OWVAR 26
11100: PUSH
11101: LD_STRING Johanna Holland
11103: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11104: LD_ADDR_OWVAR 29
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 11
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11119: LD_ADDR_OWVAR 31
11123: PUSH
11124: LD_EXP 33
11128: PUSH
11129: LD_INT 0
11131: PPUSH
11132: LD_INT 2
11134: PPUSH
11135: CALL_OW 12
11139: PUSH
11140: LD_INT 0
11142: PPUSH
11143: LD_INT 2
11145: PPUSH
11146: CALL_OW 12
11150: PUSH
11151: LD_INT 0
11153: PPUSH
11154: LD_INT 2
11156: PPUSH
11157: CALL_OW 12
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: ST_TO_ADDR
// Johanna = CreateHuman ;
11168: LD_ADDR_EXP 40
11172: PUSH
11173: CALL_OW 44
11177: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11178: LD_EXP 40
11182: PPUSH
11183: LD_INT 19
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11193: LD_EXP 40
11197: PPUSH
11198: LD_INT 23
11200: PPUSH
11201: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11205: LD_ADDR_EXP 41
11209: PUSH
11210: LD_STRING Gladstone
11212: PPUSH
11213: LD_INT 0
11215: PPUSH
11216: CALL 7749 0 2
11220: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11221: LD_EXP 41
11225: PPUSH
11226: LD_INT 22
11228: PPUSH
11229: CALL_OW 52
// amApemans = [ ] ;
11233: LD_ADDR_EXP 42
11237: PUSH
11238: EMPTY
11239: ST_TO_ADDR
// for i := 1 to amApeAmount do
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: DOUBLE
11246: LD_INT 1
11248: DEC
11249: ST_TO_ADDR
11250: LD_EXP 32
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11371
// begin hc_class := class_apeman ;
11258: LD_ADDR_OWVAR 28
11262: PUSH
11263: LD_INT 12
11265: ST_TO_ADDR
// hc_gallery :=  ;
11266: LD_ADDR_OWVAR 33
11270: PUSH
11271: LD_STRING 
11273: ST_TO_ADDR
// hc_name :=  ;
11274: LD_ADDR_OWVAR 26
11278: PUSH
11279: LD_STRING 
11281: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11282: LD_ADDR_OWVAR 31
11286: PUSH
11287: LD_EXP 33
11291: PUSH
11292: LD_INT 0
11294: PPUSH
11295: LD_INT 2
11297: PPUSH
11298: CALL_OW 12
11302: PUSH
11303: LD_INT 0
11305: PPUSH
11306: LD_INT 2
11308: PPUSH
11309: CALL_OW 12
11313: PUSH
11314: LD_INT 0
11316: PPUSH
11317: LD_INT 2
11319: PPUSH
11320: CALL_OW 12
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: ST_TO_ADDR
// ape = CreateHuman ;
11331: LD_ADDR_VAR 0 3
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 22
11348: PPUSH
11349: CALL_OW 52
// amApemans = amApemans ^ ape ;
11353: LD_ADDR_EXP 42
11357: PUSH
11358: LD_EXP 42
11362: PUSH
11363: LD_VAR 0 3
11367: ADD
11368: ST_TO_ADDR
// end ;
11369: GO 11255
11371: POP
11372: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11373: LD_INT 23
11375: PPUSH
11376: LD_EXP 30
11380: PPUSH
11381: CALL_OW 234
// end ; end_of_file
11385: LD_VAR 0 1
11389: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11390: LD_INT 0
11392: PPUSH
// PrepareHero ;
11393: CALL 11418 0 0
// PreparePokryshkinTeams ;
11397: CALL 11512 0 0
// PrepareJelena ;
11401: CALL 11777 0 0
// PrepareGnyevko ;
11405: CALL 11809 0 0
// PrepareKurin ;
11409: CALL 11480 0 0
// end ;
11413: LD_VAR 0 1
11417: RET
// function PrepareHero ; begin
11418: LD_INT 0
11420: PPUSH
// uc_side = 3 ;
11421: LD_ADDR_OWVAR 20
11425: PUSH
11426: LD_INT 3
11428: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11429: LD_ADDR_EXP 43
11433: PUSH
11434: LD_STRING Burlak
11436: PPUSH
11437: LD_INT 0
11439: PPUSH
11440: CALL 7749 0 2
11444: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11445: LD_EXP 43
11449: PPUSH
11450: LD_EXP 34
11454: PUSH
11455: LD_INT 1
11457: ARRAY
11458: PPUSH
11459: LD_EXP 34
11463: PUSH
11464: LD_INT 2
11466: ARRAY
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 48
// end ;
11475: LD_VAR 0 1
11479: RET
// function PrepareKurin ; begin
11480: LD_INT 0
11482: PPUSH
// uc_side = 6 ;
11483: LD_ADDR_OWVAR 20
11487: PUSH
11488: LD_INT 6
11490: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11491: LD_ADDR_EXP 52
11495: PUSH
11496: LD_STRING Kurin
11498: PPUSH
11499: LD_INT 0
11501: PPUSH
11502: CALL 7749 0 2
11506: ST_TO_ADDR
// end ;
11507: LD_VAR 0 1
11511: RET
// function PreparePokryshkinTeams ; begin
11512: LD_INT 0
11514: PPUSH
// uc_side = 6 ;
11515: LD_ADDR_OWVAR 20
11519: PUSH
11520: LD_INT 6
11522: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11523: LD_ADDR_EXP 44
11527: PUSH
11528: LD_STRING Pokryshkin
11530: PPUSH
11531: LD_INT 0
11533: PPUSH
11534: CALL 7749 0 2
11538: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11539: LD_ADDR_EXP 45
11543: PUSH
11544: LD_STRING Saseda
11546: PPUSH
11547: LD_INT 0
11549: PPUSH
11550: CALL 7749 0 2
11554: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11555: LD_ADDR_EXP 46
11559: PUSH
11560: LD_STRING Jaworska
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL 7749 0 2
11570: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11571: LD_ADDR_EXP 47
11575: PUSH
11576: LD_STRING Balei
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL 7749 0 2
11586: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11587: LD_ADDR_EXP 48
11591: PUSH
11592: LD_STRING Belkov
11594: PPUSH
11595: LD_INT 0
11597: PPUSH
11598: CALL 7749 0 2
11602: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
11603: LD_EXP 44
11607: PPUSH
11608: LD_INT 17
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11618: LD_EXP 45
11622: PPUSH
11623: LD_INT 17
11625: PPUSH
11626: LD_INT 0
11628: PPUSH
11629: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11633: LD_EXP 46
11637: PPUSH
11638: LD_INT 17
11640: PPUSH
11641: LD_INT 0
11643: PPUSH
11644: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11648: LD_EXP 47
11652: PPUSH
11653: LD_INT 17
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11663: LD_EXP 48
11667: PPUSH
11668: LD_INT 17
11670: PPUSH
11671: LD_INT 0
11673: PPUSH
11674: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11678: LD_ADDR_EXP 53
11682: PUSH
11683: LD_EXP 44
11687: PUSH
11688: LD_EXP 45
11692: PUSH
11693: LD_EXP 47
11697: PUSH
11698: LD_EXP 48
11702: PUSH
11703: LD_EXP 46
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: ST_TO_ADDR
// if Difficulty < 3 then
11715: LD_OWVAR 67
11719: PUSH
11720: LD_INT 3
11722: LESS
11723: IFFALSE 11772
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11725: LD_ADDR_EXP 49
11729: PUSH
11730: LD_STRING Jaunzeme
11732: PPUSH
11733: LD_INT 0
11735: PPUSH
11736: CALL 7749 0 2
11740: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
11741: LD_EXP 49
11745: PPUSH
11746: LD_INT 17
11748: PPUSH
11749: LD_INT 0
11751: PPUSH
11752: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11756: LD_ADDR_EXP 53
11760: PUSH
11761: LD_EXP 53
11765: PUSH
11766: LD_EXP 49
11770: ADD
11771: ST_TO_ADDR
// end ; end ;
11772: LD_VAR 0 1
11776: RET
// function PrepareJelena ; begin
11777: LD_INT 0
11779: PPUSH
// uc_side = 8 ;
11780: LD_ADDR_OWVAR 20
11784: PUSH
11785: LD_INT 8
11787: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11788: LD_ADDR_EXP 50
11792: PUSH
11793: LD_STRING Kirilenkova
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL 7749 0 2
11803: ST_TO_ADDR
// end ;
11804: LD_VAR 0 1
11808: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11809: LD_INT 0
11811: PPUSH
11812: PPUSH
11813: PPUSH
11814: PPUSH
// uc_side = 8 ;
11815: LD_ADDR_OWVAR 20
11819: PUSH
11820: LD_INT 8
11822: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11823: LD_ADDR_EXP 51
11827: PUSH
11828: LD_STRING Gnyevko
11830: PPUSH
11831: LD_INT 0
11833: PPUSH
11834: CALL 7749 0 2
11838: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11839: LD_ADDR_VAR 0 4
11843: PUSH
11844: LD_EXP 35
11848: PUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_EXP 35
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11863: LD_EXP 51
11867: PPUSH
11868: LD_VAR 0 4
11872: PUSH
11873: LD_INT 1
11875: ARRAY
11876: PPUSH
11877: LD_VAR 0 4
11881: PUSH
11882: LD_INT 2
11884: ARRAY
11885: PPUSH
11886: LD_INT 0
11888: PPUSH
11889: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11893: LD_EXP 51
11897: PPUSH
11898: LD_INT 500
11900: PPUSH
11901: CALL_OW 234
// ComHold ( Gnyevko ) ;
11905: LD_EXP 51
11909: PPUSH
11910: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
11914: LD_ADDR_VAR 0 3
11918: PUSH
11919: DOUBLE
11920: LD_INT 1
11922: DEC
11923: ST_TO_ADDR
11924: LD_EXP 24
11928: PUSH
11929: LD_INT 1
11931: ARRAY
11932: PUSH
11933: LD_INT 3
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: LD_OWVAR 67
11951: ARRAY
11952: MINUS
11953: PUSH
11954: FOR_TO
11955: IFFALSE 12085
// begin uc_side = 0 ;
11957: LD_ADDR_OWVAR 20
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// uc_nation = nation_nature ;
11965: LD_ADDR_OWVAR 21
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// hc_class = class_apeman ;
11973: LD_ADDR_OWVAR 28
11977: PUSH
11978: LD_INT 12
11980: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
11981: LD_ADDR_OWVAR 31
11985: PUSH
11986: LD_EXP 25
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PUSH
11995: LD_EXP 25
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PUSH
12004: LD_EXP 25
12008: PUSH
12009: LD_INT 3
12011: ARRAY
12012: PUSH
12013: LD_EXP 25
12017: PUSH
12018: LD_INT 4
12020: ARRAY
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12028: LD_ADDR_OWVAR 35
12032: PUSH
12033: LD_EXP 31
12037: ST_TO_ADDR
// un = CreateHuman ;
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: CALL_OW 44
12047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_EXP 51
12057: PPUSH
12058: CALL_OW 250
12062: PPUSH
12063: LD_EXP 51
12067: PPUSH
12068: CALL_OW 251
12072: PPUSH
12073: LD_INT 8
12075: PPUSH
12076: LD_INT 0
12078: PPUSH
12079: CALL_OW 50
// end ;
12083: GO 11954
12085: POP
12086: POP
// end ; end_of_file
12087: LD_VAR 0 1
12091: RET
// export function PrepareNature ; var i , un ; begin
12092: LD_INT 0
12094: PPUSH
12095: PPUSH
12096: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12097: LD_ADDR_VAR 0 2
12101: PUSH
12102: DOUBLE
12103: LD_INT 1
12105: DEC
12106: ST_TO_ADDR
12107: LD_EXP 24
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PUSH
12116: FOR_TO
12117: IFFALSE 12227
// begin uc_side = 0 ;
12119: LD_ADDR_OWVAR 20
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// uc_nation = nation_nature ;
12127: LD_ADDR_OWVAR 21
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// hc_class = class_apeman ;
12135: LD_ADDR_OWVAR 28
12139: PUSH
12140: LD_INT 12
12142: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12143: LD_ADDR_OWVAR 31
12147: PUSH
12148: LD_EXP 25
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PUSH
12157: LD_EXP 25
12161: PUSH
12162: LD_INT 2
12164: ARRAY
12165: PUSH
12166: LD_EXP 25
12170: PUSH
12171: LD_INT 3
12173: ARRAY
12174: PUSH
12175: LD_EXP 25
12179: PUSH
12180: LD_INT 4
12182: ARRAY
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12190: LD_ADDR_OWVAR 35
12194: PUSH
12195: LD_EXP 31
12199: ST_TO_ADDR
// un = CreateHuman ;
12200: LD_ADDR_VAR 0 3
12204: PUSH
12205: CALL_OW 44
12209: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 16
12217: PPUSH
12218: LD_INT 0
12220: PPUSH
12221: CALL_OW 49
// end ;
12225: GO 12116
12227: POP
12228: POP
// for i := 1 to animalsAmount [ 2 ] do
12229: LD_ADDR_VAR 0 2
12233: PUSH
12234: DOUBLE
12235: LD_INT 1
12237: DEC
12238: ST_TO_ADDR
12239: LD_EXP 24
12243: PUSH
12244: LD_INT 2
12246: ARRAY
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12359
// begin uc_side = 0 ;
12251: LD_ADDR_OWVAR 20
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// uc_nation = nation_nature ;
12259: LD_ADDR_OWVAR 21
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// hc_class = class_phororhacos ;
12267: LD_ADDR_OWVAR 28
12271: PUSH
12272: LD_INT 18
12274: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12275: LD_ADDR_OWVAR 31
12279: PUSH
12280: LD_EXP 25
12284: PUSH
12285: LD_INT 1
12287: ARRAY
12288: PUSH
12289: LD_EXP 25
12293: PUSH
12294: LD_INT 2
12296: ARRAY
12297: PUSH
12298: LD_EXP 25
12302: PUSH
12303: LD_INT 3
12305: ARRAY
12306: PUSH
12307: LD_EXP 25
12311: PUSH
12312: LD_INT 4
12314: ARRAY
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12322: LD_ADDR_OWVAR 35
12326: PUSH
12327: LD_EXP 26
12331: ST_TO_ADDR
// un = CreateHuman ;
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: CALL_OW 44
12341: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 15
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 49
// end ;
12357: GO 12248
12359: POP
12360: POP
// for i := 1 to animalsAmount [ 3 ] do
12361: LD_ADDR_VAR 0 2
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_EXP 24
12375: PUSH
12376: LD_INT 3
12378: ARRAY
12379: PUSH
12380: FOR_TO
12381: IFFALSE 12491
// begin uc_side = 0 ;
12383: LD_ADDR_OWVAR 20
12387: PUSH
12388: LD_INT 0
12390: ST_TO_ADDR
// uc_nation = nation_nature ;
12391: LD_ADDR_OWVAR 21
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// hc_class = class_tiger ;
12399: LD_ADDR_OWVAR 28
12403: PUSH
12404: LD_INT 14
12406: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12407: LD_ADDR_OWVAR 31
12411: PUSH
12412: LD_EXP 25
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PUSH
12421: LD_EXP 25
12425: PUSH
12426: LD_INT 2
12428: ARRAY
12429: PUSH
12430: LD_EXP 25
12434: PUSH
12435: LD_INT 3
12437: ARRAY
12438: PUSH
12439: LD_EXP 25
12443: PUSH
12444: LD_INT 4
12446: ARRAY
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12454: LD_ADDR_OWVAR 35
12458: PUSH
12459: LD_EXP 26
12463: ST_TO_ADDR
// un = CreateHuman ;
12464: LD_ADDR_VAR 0 3
12468: PUSH
12469: CALL_OW 44
12473: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 15
12481: PPUSH
12482: LD_INT 0
12484: PPUSH
12485: CALL_OW 49
// end ;
12489: GO 12380
12491: POP
12492: POP
// for i := 1 to animalsAmount [ 4 ] do
12493: LD_ADDR_VAR 0 2
12497: PUSH
12498: DOUBLE
12499: LD_INT 1
12501: DEC
12502: ST_TO_ADDR
12503: LD_EXP 24
12507: PUSH
12508: LD_INT 4
12510: ARRAY
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12623
// begin uc_side = 0 ;
12515: LD_ADDR_OWVAR 20
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// uc_nation = nation_nature ;
12523: LD_ADDR_OWVAR 21
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// hc_class = 21 ;
12531: LD_ADDR_OWVAR 28
12535: PUSH
12536: LD_INT 21
12538: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12539: LD_ADDR_OWVAR 31
12543: PUSH
12544: LD_EXP 25
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PUSH
12553: LD_EXP 25
12557: PUSH
12558: LD_INT 2
12560: ARRAY
12561: PUSH
12562: LD_EXP 25
12566: PUSH
12567: LD_INT 3
12569: ARRAY
12570: PUSH
12571: LD_EXP 25
12575: PUSH
12576: LD_INT 4
12578: ARRAY
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12586: LD_ADDR_OWVAR 35
12590: PUSH
12591: LD_EXP 26
12595: ST_TO_ADDR
// un = CreateHuman ;
12596: LD_ADDR_VAR 0 3
12600: PUSH
12601: CALL_OW 44
12605: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 15
12613: PPUSH
12614: LD_INT 0
12616: PPUSH
12617: CALL_OW 49
// end ;
12621: GO 12512
12623: POP
12624: POP
// end ; end_of_file
12625: LD_VAR 0 1
12629: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12630: LD_VAR 0 1
12634: PUSH
12635: LD_EXP 43
12639: EQUAL
12640: PUSH
12641: LD_EXP 50
12645: PPUSH
12646: CALL_OW 255
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: NOT
12655: AND
12656: PUSH
12657: LD_EXP 50
12661: PPUSH
12662: CALL_OW 302
12666: NOT
12667: AND
12668: IFFALSE 12674
// BurlakDying ;
12670: CALL 10222 0 0
// if unit = Gladstone then
12674: LD_VAR 0 1
12678: PUSH
12679: LD_EXP 41
12683: EQUAL
12684: IFFALSE 12694
// gladstoneStatus = 0 ;
12686: LD_ADDR_EXP 1
12690: PUSH
12691: LD_INT 0
12693: ST_TO_ADDR
// if unit = Johanna then
12694: LD_VAR 0 1
12698: PUSH
12699: LD_EXP 40
12703: EQUAL
12704: IFFALSE 12714
// johannaStatus = 0 ;
12706: LD_ADDR_EXP 2
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// end ;
12714: PPOPN 1
12716: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12717: LD_VAR 0 1
12721: PUSH
12722: LD_EXP 43
12726: EQUAL
12727: IFFALSE 12733
// BurlakDying ;
12729: CALL 10222 0 0
// if GetSide ( unit ) = 3 then
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 255
12742: PUSH
12743: LD_INT 3
12745: EQUAL
12746: IFFALSE 12762
// lostComradesCounter = lostComradesCounter + 1 ;
12748: LD_ADDR_EXP 22
12752: PUSH
12753: LD_EXP 22
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: ST_TO_ADDR
// if unit in kirovSolds then
12762: LD_VAR 0 1
12766: PUSH
12767: LD_EXP 53
12771: IN
12772: IFFALSE 12790
// kirovSolds = kirovSolds diff unit ;
12774: LD_ADDR_EXP 53
12778: PUSH
12779: LD_EXP 53
12783: PUSH
12784: LD_VAR 0 1
12788: DIFF
12789: ST_TO_ADDR
// end ;
12790: PPOPN 1
12792: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12793: LD_VAR 0 1
12797: PUSH
12798: LD_INT 3
12800: EQUAL
12801: PUSH
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: EQUAL
12810: AND
12811: PUSH
12812: LD_VAR 0 1
12816: PUSH
12817: LD_INT 1
12819: EQUAL
12820: PUSH
12821: LD_VAR 0 2
12825: PUSH
12826: LD_INT 3
12828: EQUAL
12829: AND
12830: PUSH
12831: LD_EXP 16
12835: PUSH
12836: LD_INT 1
12838: EQUAL
12839: AND
12840: OR
12841: IFFALSE 12847
// Dial_SecondAttack ;
12843: CALL 5810 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12847: LD_VAR 0 1
12851: PUSH
12852: LD_INT 3
12854: EQUAL
12855: PUSH
12856: LD_VAR 0 2
12860: PUSH
12861: LD_INT 6
12863: EQUAL
12864: AND
12865: PUSH
12866: LD_EXP 17
12870: NOT
12871: AND
12872: IFFALSE 12878
// Dialogue_AttackComrade ;
12874: CALL 4005 0 0
// end ; end_of_file
12878: PPOPN 2
12880: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12881: LD_INT 0
12883: PPUSH
12884: PPUSH
// if not missionNumber then
12885: LD_VAR 0 2
12889: NOT
12890: IFFALSE 12894
// exit ;
12892: GO 13024
// achiv := false ;
12894: LD_ADDR_VAR 0 7
12898: PUSH
12899: LD_INT 0
12901: ST_TO_ADDR
// case campaignNumber of 1 :
12902: LD_VAR 0 1
12906: PUSH
12907: LD_INT 1
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// achiv := ACH_GOTA ; 2 :
12916: LD_ADDR_VAR 0 7
12920: PUSH
12921: LD_STRING ACH_GOTA
12923: ST_TO_ADDR
12924: GO 12976
12926: LD_INT 2
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12937
12934: POP
// ; 3 :
12935: GO 12976
12937: LD_INT 3
12939: DOUBLE
12940: EQUAL
12941: IFTRUE 12945
12943: GO 12956
12945: POP
// achiv := ACH_MOTSU ; 4 :
12946: LD_ADDR_VAR 0 7
12950: PUSH
12951: LD_STRING ACH_MOTSU
12953: ST_TO_ADDR
12954: GO 12976
12956: LD_INT 4
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12964
12962: GO 12975
12964: POP
// achiv := ACH_LOP ; end ;
12965: LD_ADDR_VAR 0 7
12969: PUSH
12970: LD_STRING ACH_LOP
12972: ST_TO_ADDR
12973: GO 12976
12975: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
12976: LD_OWVAR 67
12980: PUSH
12981: LD_INT 3
12983: EQUAL
12984: PUSH
12985: LD_VAR 0 7
12989: AND
12990: PUSH
12991: LD_VAR 0 3
12995: AND
12996: PUSH
12997: LD_VAR 0 4
13001: AND
13002: PUSH
13003: LD_VAR 0 5
13007: AND
13008: IFFALSE 13024
// SetAchievementEX ( achiv , missionNumber ) ;
13010: LD_VAR 0 7
13014: PPUSH
13015: LD_VAR 0 2
13019: PPUSH
13020: CALL_OW 564
// end ;
13024: LD_VAR 0 6
13028: RET
// export function SA_BehemothConstructed ; begin
13029: LD_INT 0
13031: PPUSH
// SetAchievement ( ACH_SMC ) ;
13032: LD_STRING ACH_SMC
13034: PPUSH
13035: CALL_OW 543
// end ;
13039: LD_VAR 0 1
13043: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13044: LD_VAR 0 2
13048: PUSH
13049: LD_INT 1
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13064
13057: POP
// HackUnlimitedResources ; 2 :
13058: CALL 13248 0 0
13062: GO 13245
13064: LD_INT 2
13066: DOUBLE
13067: EQUAL
13068: IFTRUE 13072
13070: GO 13079
13072: POP
// HackSetLevel10 ; 3 :
13073: CALL 13381 0 0
13077: GO 13245
13079: LD_INT 3
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13094
13087: POP
// HackSetLevel10YourUnits ; 4 :
13088: CALL 13466 0 0
13092: GO 13245
13094: LD_INT 4
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13124
13102: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13103: LD_VAR 0 3
13107: PPUSH
13108: LD_VAR 0 4
13112: PPUSH
13113: LD_VAR 0 5
13117: PPUSH
13118: CALL 13556 0 3
13122: GO 13245
13124: LD_INT 5
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13139
13132: POP
// HackSpawnVehicle ; 6 :
13133: CALL 13617 0 0
13137: GO 13245
13139: LD_INT 6
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13154
13147: POP
// HackInvincible ; 7 :
13148: CALL 14163 0 0
13152: GO 13245
13154: LD_INT 7
13156: DOUBLE
13157: EQUAL
13158: IFTRUE 13162
13160: GO 13169
13162: POP
// HackInvisible ; 8 :
13163: CALL 14274 0 0
13167: GO 13245
13169: LD_INT 8
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13184
13177: POP
// HackChangeYourSide ; 9 :
13178: CALL 14331 0 0
13182: GO 13245
13184: LD_INT 9
13186: DOUBLE
13187: EQUAL
13188: IFTRUE 13192
13190: GO 13199
13192: POP
// HackChangeUnitSide ; 10 :
13193: CALL 14373 0 0
13197: GO 13245
13199: LD_INT 10
13201: DOUBLE
13202: EQUAL
13203: IFTRUE 13207
13205: GO 13214
13207: POP
// HackFog ; 11 :
13208: CALL 14474 0 0
13212: GO 13245
13214: LD_INT 11
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13229
13222: POP
// HackApeman ; 12 :
13223: CALL 14489 0 0
13227: GO 13245
13229: LD_INT 12
13231: DOUBLE
13232: EQUAL
13233: IFTRUE 13237
13235: GO 13244
13237: POP
// HackBoom ; end ;
13238: CALL 14574 0 0
13242: GO 13245
13244: POP
// end ;
13245: PPOPN 6
13247: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13254: LD_ADDR_VAR 0 4
13258: PUSH
13259: LD_INT 22
13261: PUSH
13262: LD_OWVAR 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: LD_INT 30
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 30
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: ST_TO_ADDR
// if not tmp then
13308: LD_VAR 0 4
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13376
// for i in tmp do
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: LD_VAR 0 4
13326: PUSH
13327: FOR_IN
13328: IFFALSE 13374
// for j = 1 to 3 do
13330: LD_ADDR_VAR 0 3
13334: PUSH
13335: DOUBLE
13336: LD_INT 1
13338: DEC
13339: ST_TO_ADDR
13340: LD_INT 3
13342: PUSH
13343: FOR_TO
13344: IFFALSE 13370
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13346: LD_VAR 0 2
13350: PPUSH
13351: CALL_OW 274
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 99999
13363: PPUSH
13364: CALL_OW 277
13368: GO 13343
13370: POP
13371: POP
13372: GO 13327
13374: POP
13375: POP
// end ;
13376: LD_VAR 0 1
13380: RET
// export function HackSetLevel10 ; var i , j ; begin
13381: LD_INT 0
13383: PPUSH
13384: PPUSH
13385: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13386: LD_ADDR_VAR 0 2
13390: PUSH
13391: LD_INT 21
13393: PUSH
13394: LD_INT 1
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: PUSH
13406: FOR_IN
13407: IFFALSE 13459
// if IsSelected ( i ) then
13409: LD_VAR 0 2
13413: PPUSH
13414: CALL_OW 306
13418: IFFALSE 13457
// begin for j := 1 to 4 do
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: DOUBLE
13426: LD_INT 1
13428: DEC
13429: ST_TO_ADDR
13430: LD_INT 4
13432: PUSH
13433: FOR_TO
13434: IFFALSE 13455
// SetSkill ( i , j , 10 ) ;
13436: LD_VAR 0 2
13440: PPUSH
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_INT 10
13448: PPUSH
13449: CALL_OW 237
13453: GO 13433
13455: POP
13456: POP
// end ;
13457: GO 13406
13459: POP
13460: POP
// end ;
13461: LD_VAR 0 1
13465: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13466: LD_INT 0
13468: PPUSH
13469: PPUSH
13470: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_OWVAR 2
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: PUSH
13507: FOR_IN
13508: IFFALSE 13549
// begin for j := 1 to 4 do
13510: LD_ADDR_VAR 0 3
13514: PUSH
13515: DOUBLE
13516: LD_INT 1
13518: DEC
13519: ST_TO_ADDR
13520: LD_INT 4
13522: PUSH
13523: FOR_TO
13524: IFFALSE 13545
// SetSkill ( i , j , 10 ) ;
13526: LD_VAR 0 2
13530: PPUSH
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 10
13538: PPUSH
13539: CALL_OW 237
13543: GO 13523
13545: POP
13546: POP
// end ;
13547: GO 13507
13549: POP
13550: POP
// end ;
13551: LD_VAR 0 1
13555: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13556: LD_INT 0
13558: PPUSH
// uc_side := your_side ;
13559: LD_ADDR_OWVAR 20
13563: PUSH
13564: LD_OWVAR 2
13568: ST_TO_ADDR
// uc_nation := nation ;
13569: LD_ADDR_OWVAR 21
13573: PUSH
13574: LD_VAR 0 1
13578: ST_TO_ADDR
// InitHc ;
13579: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13583: LD_INT 0
13585: PPUSH
13586: LD_VAR 0 2
13590: PPUSH
13591: LD_VAR 0 3
13595: PPUSH
13596: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13600: CALL_OW 44
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 51
// end ;
13612: LD_VAR 0 4
13616: RET
// export function HackSpawnVehicle ; begin
13617: LD_INT 0
13619: PPUSH
// uc_side := your_side ;
13620: LD_ADDR_OWVAR 20
13624: PUSH
13625: LD_OWVAR 2
13629: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13630: LD_ADDR_OWVAR 21
13634: PUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_INT 3
13640: PPUSH
13641: CALL_OW 12
13645: ST_TO_ADDR
// InitVc ;
13646: CALL_OW 20
// case uc_nation of 1 :
13650: LD_OWVAR 21
13654: PUSH
13655: LD_INT 1
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13807
13663: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
13664: LD_ADDR_OWVAR 37
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: LD_INT 3
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 5
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 1
13693: PPUSH
13694: LD_INT 5
13696: PPUSH
13697: CALL_OW 12
13701: ARRAY
13702: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13703: LD_ADDR_OWVAR 39
13707: PUSH
13708: LD_INT 1
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: CALL_OW 12
13718: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
13719: LD_ADDR_OWVAR 38
13723: PUSH
13724: LD_INT 1
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: LD_INT 3
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 1
13740: PPUSH
13741: LD_INT 3
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
13750: LD_ADDR_OWVAR 40
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 5
13763: PUSH
13764: LD_INT 3
13766: PUSH
13767: LD_INT 7
13769: PUSH
13770: LD_INT 8
13772: PUSH
13773: LD_INT 9
13775: PUSH
13776: LD_INT 10
13778: PUSH
13779: LD_INT 6
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 1
13795: PPUSH
13796: LD_INT 9
13798: PPUSH
13799: CALL_OW 12
13803: ARRAY
13804: ST_TO_ADDR
// end ; 2 :
13805: GO 14072
13807: LD_INT 2
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13939
13815: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
13816: LD_ADDR_OWVAR 37
13820: PUSH
13821: LD_INT 11
13823: PUSH
13824: LD_INT 12
13826: PUSH
13827: LD_INT 13
13829: PUSH
13830: LD_INT 14
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_INT 4
13844: PPUSH
13845: CALL_OW 12
13849: ARRAY
13850: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13851: LD_ADDR_OWVAR 39
13855: PUSH
13856: LD_INT 1
13858: PPUSH
13859: LD_INT 3
13861: PPUSH
13862: CALL_OW 12
13866: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
13867: LD_ADDR_OWVAR 38
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: LD_INT 2
13877: PUSH
13878: LD_INT 5
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 1
13888: PPUSH
13889: LD_INT 3
13891: PPUSH
13892: CALL_OW 12
13896: ARRAY
13897: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
13898: LD_ADDR_OWVAR 40
13902: PUSH
13903: LD_INT 24
13905: PUSH
13906: LD_INT 26
13908: PUSH
13909: LD_INT 27
13911: PUSH
13912: LD_INT 28
13914: PUSH
13915: LD_INT 29
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_INT 5
13930: PPUSH
13931: CALL_OW 12
13935: ARRAY
13936: ST_TO_ADDR
// end ; 3 :
13937: GO 14072
13939: LD_INT 3
13941: DOUBLE
13942: EQUAL
13943: IFTRUE 13947
13945: GO 14071
13947: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13948: LD_ADDR_OWVAR 37
13952: PUSH
13953: LD_INT 21
13955: PUSH
13956: LD_INT 23
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 24
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_INT 4
13976: PPUSH
13977: CALL_OW 12
13981: ARRAY
13982: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13983: LD_ADDR_OWVAR 39
13987: PUSH
13988: LD_INT 1
13990: PPUSH
13991: LD_INT 3
13993: PPUSH
13994: CALL_OW 12
13998: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
13999: LD_ADDR_OWVAR 38
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 1
14016: PPUSH
14017: LD_INT 2
14019: PPUSH
14020: CALL_OW 12
14024: ARRAY
14025: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
14026: LD_ADDR_OWVAR 40
14030: PUSH
14031: LD_INT 42
14033: PUSH
14034: LD_INT 43
14036: PUSH
14037: LD_INT 44
14039: PUSH
14040: LD_INT 46
14042: PUSH
14043: LD_INT 48
14045: PUSH
14046: LD_INT 47
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 1
14059: PPUSH
14060: LD_INT 6
14062: PPUSH
14063: CALL_OW 12
14067: ARRAY
14068: ST_TO_ADDR
// end ; end ;
14069: GO 14072
14071: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14072: CALL_OW 45
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 51
// end ;
14084: LD_VAR 0 1
14088: RET
// export invincible ; every 1 do
14089: GO 14091
14091: DISABLE
// invincible := [ ] ;
14092: LD_ADDR_EXP 54
14096: PUSH
14097: EMPTY
14098: ST_TO_ADDR
14099: END
// every 10 do var i ;
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
// begin enable ;
14106: ENABLE
// if not invincible then
14107: LD_EXP 54
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14160
// for i in invincible do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 54
14125: PUSH
14126: FOR_IN
14127: IFFALSE 14158
// if GetLives ( i ) < 1000 then
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 256
14138: PUSH
14139: LD_INT 1000
14141: LESS
14142: IFFALSE 14156
// SetLives ( i , 1000 ) ;
14144: LD_VAR 0 1
14148: PPUSH
14149: LD_INT 1000
14151: PPUSH
14152: CALL_OW 234
14156: GO 14126
14158: POP
14159: POP
// end ;
14160: PPOPN 1
14162: END
// export function HackInvincible ; var i ; begin
14163: LD_INT 0
14165: PPUSH
14166: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 21
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: PUSH
14205: FOR_IN
14206: IFFALSE 14267
// if IsSelected ( i ) then
14208: LD_VAR 0 2
14212: PPUSH
14213: CALL_OW 306
14217: IFFALSE 14265
// begin if i in invincible then
14219: LD_VAR 0 2
14223: PUSH
14224: LD_EXP 54
14228: IN
14229: IFFALSE 14249
// invincible := invincible diff i else
14231: LD_ADDR_EXP 54
14235: PUSH
14236: LD_EXP 54
14240: PUSH
14241: LD_VAR 0 2
14245: DIFF
14246: ST_TO_ADDR
14247: GO 14265
// invincible := invincible union i ;
14249: LD_ADDR_EXP 54
14253: PUSH
14254: LD_EXP 54
14258: PUSH
14259: LD_VAR 0 2
14263: UNION
14264: ST_TO_ADDR
// end ;
14265: GO 14205
14267: POP
14268: POP
// end ;
14269: LD_VAR 0 1
14273: RET
// export function HackInvisible ; var i , j ; begin
14274: LD_INT 0
14276: PPUSH
14277: PPUSH
14278: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: PUSH
14299: FOR_IN
14300: IFFALSE 14324
// if IsSelected ( i ) then
14302: LD_VAR 0 2
14306: PPUSH
14307: CALL_OW 306
14311: IFFALSE 14322
// begin ComForceInvisible ( i ) ;
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL_OW 496
// end ;
14322: GO 14299
14324: POP
14325: POP
// end ;
14326: LD_VAR 0 1
14330: RET
// export function HackChangeYourSide ; begin
14331: LD_INT 0
14333: PPUSH
// if your_side = 8 then
14334: LD_OWVAR 2
14338: PUSH
14339: LD_INT 8
14341: EQUAL
14342: IFFALSE 14354
// your_side := 0 else
14344: LD_ADDR_OWVAR 2
14348: PUSH
14349: LD_INT 0
14351: ST_TO_ADDR
14352: GO 14368
// your_side := your_side + 1 ;
14354: LD_ADDR_OWVAR 2
14358: PUSH
14359: LD_OWVAR 2
14363: PUSH
14364: LD_INT 1
14366: PLUS
14367: ST_TO_ADDR
// end ;
14368: LD_VAR 0 1
14372: RET
// export function HackChangeUnitSide ; var i , j ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
14377: PPUSH
// for i in all_units do
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_OWVAR 3
14387: PUSH
14388: FOR_IN
14389: IFFALSE 14467
// if IsSelected ( i ) then
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 306
14400: IFFALSE 14465
// begin j := GetSide ( i ) ;
14402: LD_ADDR_VAR 0 3
14406: PUSH
14407: LD_VAR 0 2
14411: PPUSH
14412: CALL_OW 255
14416: ST_TO_ADDR
// if j = 8 then
14417: LD_VAR 0 3
14421: PUSH
14422: LD_INT 8
14424: EQUAL
14425: IFFALSE 14437
// j := 0 else
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
14435: GO 14451
// j := j + 1 ;
14437: LD_ADDR_VAR 0 3
14441: PUSH
14442: LD_VAR 0 3
14446: PUSH
14447: LD_INT 1
14449: PLUS
14450: ST_TO_ADDR
// SetSide ( i , j ) ;
14451: LD_VAR 0 2
14455: PPUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: CALL_OW 235
// end ;
14465: GO 14388
14467: POP
14468: POP
// end ;
14469: LD_VAR 0 1
14473: RET
// export function HackFog ; begin
14474: LD_INT 0
14476: PPUSH
// FogOff ( true ) ;
14477: LD_INT 1
14479: PPUSH
14480: CALL_OW 344
// end ;
14484: LD_VAR 0 1
14488: RET
// export function HackApeman ; begin
14489: LD_INT 0
14491: PPUSH
// uc_side := your_side ;
14492: LD_ADDR_OWVAR 20
14496: PUSH
14497: LD_OWVAR 2
14501: ST_TO_ADDR
// uc_nation := 0 ;
14502: LD_ADDR_OWVAR 21
14506: PUSH
14507: LD_INT 0
14509: ST_TO_ADDR
// hc_name :=  ;
14510: LD_ADDR_OWVAR 26
14514: PUSH
14515: LD_STRING 
14517: ST_TO_ADDR
// hc_gallery :=  ;
14518: LD_ADDR_OWVAR 33
14522: PUSH
14523: LD_STRING 
14525: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
14526: LD_ADDR_OWVAR 31
14530: PUSH
14531: LD_INT 0
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: LD_INT 0
14539: PUSH
14540: LD_INT 0
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: ST_TO_ADDR
// hc_class := class_apeman ;
14549: LD_ADDR_OWVAR 28
14553: PUSH
14554: LD_INT 12
14556: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14557: CALL_OW 44
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 51
// end ;
14569: LD_VAR 0 1
14573: RET
// export function HackBoom ; begin
14574: LD_INT 0
14576: PPUSH
// uc_side := your_side ;
14577: LD_ADDR_OWVAR 20
14581: PUSH
14582: LD_OWVAR 2
14586: ST_TO_ADDR
// uc_nation := 1 ;
14587: LD_ADDR_OWVAR 21
14591: PUSH
14592: LD_INT 1
14594: ST_TO_ADDR
// vc_chassis := us_morphling ;
14595: LD_ADDR_OWVAR 37
14599: PUSH
14600: LD_INT 5
14602: ST_TO_ADDR
// vc_engine := engine_siberite ;
14603: LD_ADDR_OWVAR 39
14607: PUSH
14608: LD_INT 3
14610: ST_TO_ADDR
// vc_control := control_computer ;
14611: LD_ADDR_OWVAR 38
14615: PUSH
14616: LD_INT 3
14618: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
14619: LD_ADDR_OWVAR 40
14623: PUSH
14624: LD_INT 8
14626: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14627: CALL_OW 45
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 51
// end ;
14639: LD_VAR 0 1
14643: RET
