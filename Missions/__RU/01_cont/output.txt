// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12632 0 0
// PrepareAmericans ;
  28: CALL 12205 0 0
// CreateNature ;
  32: CALL 13340 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 1000 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 1000
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 34
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 35
 458: PUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 6
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 36
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 38
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 39
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 40
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 2 2$00 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 41
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 4200
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 32
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 37
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 37
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 46
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 46
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 46
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 46
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 46
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 46
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// end ;
1040: LD_VAR 0 1
1044: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1045: LD_EXP 46
1049: PPUSH
1050: LD_INT 74
1052: PPUSH
1053: LD_INT 88
1055: PPUSH
1056: CALL_OW 297
1060: PUSH
1061: LD_INT 5
1063: LESS
1064: PUSH
1065: LD_EXP 3
1069: AND
1070: IFFALSE 1095
1072: GO 1074
1074: DISABLE
// begin spotWaterfall = true ;
1075: LD_ADDR_EXP 7
1079: PUSH
1080: LD_INT 1
1082: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1083: LD_EXP 46
1087: PPUSH
1088: LD_STRING DWaterfall-Bur-1
1090: PPUSH
1091: CALL_OW 88
// end ;
1095: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1096: LD_EXP 46
1100: PPUSH
1101: LD_INT 130
1103: PPUSH
1104: LD_INT 96
1106: PPUSH
1107: CALL_OW 297
1111: PUSH
1112: LD_INT 5
1114: LESS
1115: PUSH
1116: LD_EXP 3
1120: AND
1121: IFFALSE 1138
1123: GO 1125
1125: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1126: LD_EXP 46
1130: PPUSH
1131: LD_STRING DCorpse-Bur-1
1133: PPUSH
1134: CALL_OW 88
1138: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1139: LD_EXP 4
1143: NOT
1144: IFFALSE 1238
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
// begin enable ;
1152: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1153: LD_ADDR_VAR 0 1
1157: PUSH
1158: LD_INT 22
1160: PUSH
1161: LD_INT 0
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 25
1170: PUSH
1171: LD_INT 12
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1236
// if GetDistUnits ( apeman , Burlak ) < 7 then
1190: LD_VAR 0 1
1194: PPUSH
1195: LD_EXP 46
1199: PPUSH
1200: CALL_OW 296
1204: PUSH
1205: LD_INT 7
1207: LESS
1208: IFFALSE 1234
// begin apemansContact = true ;
1210: LD_ADDR_EXP 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1218: LD_EXP 46
1222: PPUSH
1223: LD_STRING D2-Bur-1
1225: PPUSH
1226: CALL_OW 88
// exit ;
1230: POP
1231: POP
1232: GO 1238
// end ;
1234: GO 1187
1236: POP
1237: POP
// end ;
1238: PPOPN 1
1240: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1241: LD_EXP 5
1245: NOT
1246: IFFALSE 1362
1248: GO 1250
1250: DISABLE
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
// begin enable ;
1255: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1256: LD_ADDR_VAR 0 2
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 0
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 25
1273: PUSH
1274: LD_INT 12
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: PUSH
1290: FOR_IN
1291: IFFALSE 1360
// if Attacks ( apeman ) then
1293: LD_VAR 0 2
1297: PPUSH
1298: CALL_OW 320
1302: IFFALSE 1358
// if GetSide ( Attacks ( apeman ) ) = 3 then
1304: LD_VAR 0 2
1308: PPUSH
1309: CALL_OW 320
1313: PPUSH
1314: CALL_OW 255
1318: PUSH
1319: LD_INT 3
1321: EQUAL
1322: IFFALSE 1358
// begin attackedByApeman = true ;
1324: LD_ADDR_EXP 5
1328: PUSH
1329: LD_INT 1
1331: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1332: LD_ADDR_EXP 8
1336: PUSH
1337: LD_VAR 0 2
1341: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1342: LD_EXP 46
1346: PPUSH
1347: LD_STRING D2-Bur-1a
1349: PPUSH
1350: CALL_OW 88
// exit ;
1354: POP
1355: POP
1356: GO 1362
// end ;
1358: GO 1290
1360: POP
1361: POP
// end ;
1362: PPOPN 2
1364: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1365: LD_EXP 6
1369: NOT
1370: IFFALSE 1467
1372: GO 1374
1374: DISABLE
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
// begin enable ;
1379: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1380: LD_ADDR_VAR 0 2
1384: PUSH
1385: LD_INT 24
1387: PPUSH
1388: LD_INT 22
1390: PUSH
1391: LD_INT 0
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 25
1400: PUSH
1401: LD_INT 12
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PPUSH
1412: CALL_OW 70
1416: PUSH
1417: FOR_IN
1418: IFFALSE 1465
// if Attacks ( apeman ) then
1420: LD_VAR 0 2
1424: PPUSH
1425: CALL_OW 320
1429: IFFALSE 1463
// if GetSide ( Attacks ( apeman ) ) = 3 then
1431: LD_VAR 0 2
1435: PPUSH
1436: CALL_OW 320
1440: PPUSH
1441: CALL_OW 255
1445: PUSH
1446: LD_INT 3
1448: EQUAL
1449: IFFALSE 1463
// begin attackedByApemanNearLake = true ;
1451: LD_ADDR_EXP 6
1455: PUSH
1456: LD_INT 1
1458: ST_TO_ADDR
// exit ;
1459: POP
1460: POP
1461: GO 1467
// end ;
1463: GO 1417
1465: POP
1466: POP
// end ;
1467: PPOPN 2
1469: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1470: LD_EXP 9
1474: PPUSH
1475: CALL_OW 303
1479: IFFALSE 1513
1481: GO 1483
1483: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1484: LD_ADDR_EXP 10
1488: PUSH
1489: LD_EXP 9
1493: PPUSH
1494: CALL_OW 250
1498: PUSH
1499: LD_EXP 9
1503: PPUSH
1504: CALL_OW 251
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: ST_TO_ADDR
1513: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1514: LD_EXP 9
1518: PPUSH
1519: CALL_OW 303
1523: PUSH
1524: LD_INT 3
1526: PPUSH
1527: LD_EXP 10
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_EXP 10
1540: PUSH
1541: LD_INT 2
1543: ARRAY
1544: PPUSH
1545: CALL_OW 293
1549: AND
1550: IFFALSE 1934
1552: GO 1554
1554: DISABLE
1555: LD_INT 0
1557: PPUSH
// begin wait ( 0 0$2 ) ;
1558: LD_INT 70
1560: PPUSH
1561: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1565: LD_EXP 46
1569: PPUSH
1570: LD_STRING D2a-Bur-1
1572: PPUSH
1573: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1577: LD_INT 22
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 21
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PPUSH
1601: CALL_OW 69
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1625
// Say ( Burlak , D2a-Bur-2 ) else
1611: LD_EXP 46
1615: PPUSH
1616: LD_STRING D2a-Bur-2
1618: PPUSH
1619: CALL_OW 88
1623: GO 1934
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1625: LD_ADDR_VAR 0 1
1629: PUSH
1630: LD_INT 22
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 21
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PPUSH
1654: CALL_OW 69
1658: PUSH
1659: LD_EXP 46
1663: PUSH
1664: LD_EXP 54
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: DIFF
1673: PPUSH
1674: LD_EXP 10
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: LD_EXP 10
1687: PUSH
1688: LD_INT 2
1690: ARRAY
1691: PPUSH
1692: CALL_OW 73
1696: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1697: LD_ADDR_EXP 11
1701: PUSH
1702: LD_VAR 0 1
1706: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1707: LD_VAR 0 1
1711: PPUSH
1712: LD_EXP 10
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_EXP 10
1725: PUSH
1726: LD_INT 2
1728: ARRAY
1729: PPUSH
1730: CALL_OW 111
// case nearUnit of Belkov :
1734: LD_VAR 0 1
1738: PUSH
1739: LD_EXP 51
1743: DOUBLE
1744: EQUAL
1745: IFTRUE 1749
1747: GO 1764
1749: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1750: LD_EXP 51
1754: PPUSH
1755: LD_STRING D2a-Bel-1
1757: PPUSH
1758: CALL_OW 88
1762: GO 1831
1764: LD_EXP 53
1768: DOUBLE
1769: EQUAL
1770: IFTRUE 1774
1772: GO 1789
1774: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1775: LD_EXP 53
1779: PPUSH
1780: LD_STRING D2a-Kir-1
1782: PPUSH
1783: CALL_OW 88
1787: GO 1831
1789: POP
// if GetSex ( nearUnit ) = sex_male then
1790: LD_VAR 0 1
1794: PPUSH
1795: CALL_OW 258
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1819
// Say ( nearUnit , D2a-RSol1-1 ) else
1805: LD_VAR 0 1
1809: PPUSH
1810: LD_STRING D2a-RSol1-1
1812: PPUSH
1813: CALL_OW 88
1817: GO 1831
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1819: LD_VAR 0 1
1823: PPUSH
1824: LD_STRING D2a-RFSol1-1
1826: PPUSH
1827: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1831: LD_EXP 54
1835: PPUSH
1836: CALL_OW 255
1840: PUSH
1841: LD_INT 3
1843: EQUAL
1844: PUSH
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 302
1854: AND
1855: IFFALSE 1869
// Say ( Gnyevko , D2a-Gny-1 ) ;
1857: LD_EXP 54
1861: PPUSH
1862: LD_STRING D2a-Gny-1
1864: PPUSH
1865: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1869: LD_EXP 54
1873: PPUSH
1874: CALL_OW 255
1878: PUSH
1879: LD_INT 8
1881: EQUAL
1882: IFFALSE 1934
// begin Say ( Burlak , D12-Bur-1 ) ;
1884: LD_EXP 46
1888: PPUSH
1889: LD_STRING D12-Bur-1
1891: PPUSH
1892: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1896: LD_EXP 51
1900: PPUSH
1901: CALL_OW 255
1905: PUSH
1906: LD_INT 3
1908: EQUAL
1909: PUSH
1910: LD_EXP 51
1914: PPUSH
1915: CALL_OW 302
1919: AND
1920: IFFALSE 1934
// Say ( Belkov , D12-Bel-2 ) ;
1922: LD_EXP 51
1926: PPUSH
1927: LD_STRING D12-Bel-2
1929: PPUSH
1930: CALL_OW 88
// end ; end ; end ;
1934: PPOPN 1
1936: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1937: LD_EXP 12
1941: NOT
1942: PUSH
1943: LD_EXP 40
1947: PUSH
1948: LD_INT 70
1950: GREATER
1951: AND
1952: IFFALSE 1972
1954: GO 1956
1956: DISABLE
// begin enable ;
1957: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1958: LD_EXP 54
1962: PPUSH
1963: LD_EXP 39
1967: PPUSH
1968: CALL_OW 234
// end ;
1972: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1973: LD_INT 3
1975: PPUSH
1976: LD_EXP 54
1980: PPUSH
1981: CALL_OW 292
1985: IFFALSE 2597
1987: GO 1989
1989: DISABLE
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1994: LD_EXP 54
1998: PPUSH
1999: CALL_OW 87
// DialogueOn ;
2003: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
2007: LD_ADDR_VAR 0 1
2011: PUSH
2012: LD_INT 22
2014: PUSH
2015: LD_INT 3
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 21
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PPUSH
2041: LD_EXP 54
2045: PPUSH
2046: CALL_OW 74
2050: ST_TO_ADDR
// if nearUnit = Burlak then
2051: LD_VAR 0 1
2055: PUSH
2056: LD_EXP 46
2060: EQUAL
2061: IFFALSE 2423
// begin Say ( Burlak , D3-Bur-1 ) ;
2063: LD_EXP 46
2067: PPUSH
2068: LD_STRING D3-Bur-1
2070: PPUSH
2071: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2075: LD_EXP 54
2079: PPUSH
2080: LD_STRING D3-Gny-1
2082: PPUSH
2083: CALL_OW 88
// if apeWithRadioKiller then
2087: LD_EXP 11
2091: IFFALSE 2131
// begin if apeWithRadioKiller = Burlak then
2093: LD_EXP 11
2097: PUSH
2098: LD_EXP 46
2102: EQUAL
2103: IFFALSE 2119
// Say ( Burlak , D3-Bur-2 ) else
2105: LD_EXP 46
2109: PPUSH
2110: LD_STRING D3-Bur-2
2112: PPUSH
2113: CALL_OW 88
2117: GO 2131
// Say ( Burlak , D3-Bur-2a ) ;
2119: LD_EXP 46
2123: PPUSH
2124: LD_STRING D3-Bur-2a
2126: PPUSH
2127: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2131: LD_EXP 46
2135: PPUSH
2136: LD_STRING D3-Bur-2b
2138: PPUSH
2139: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2143: LD_INT 22
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 21
2155: PUSH
2156: LD_INT 1
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 69
2171: PUSH
2172: LD_INT 1
2174: EQUAL
2175: PUSH
2176: LD_EXP 14
2180: NOT
2181: AND
2182: IFFALSE 2234
// begin Say ( Burlak , D3-Bur-2c ) ;
2184: LD_EXP 46
2188: PPUSH
2189: LD_STRING D3-Bur-2c
2191: PPUSH
2192: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2196: LD_EXP 54
2200: PPUSH
2201: LD_STRING D3-Gny-2
2203: PPUSH
2204: CALL_OW 88
// DialogueOff ;
2208: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2212: LD_EXP 54
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: CALL_OW 235
// gnyevkoSaved = true ;
2224: LD_ADDR_EXP 12
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// exit ;
2232: GO 2597
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 21
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: LD_INT 1
2265: GREATER
2266: PUSH
2267: LD_EXP 14
2271: OR
2272: PUSH
2273: LD_EXP 22
2277: NOT
2278: AND
2279: IFFALSE 2331
// begin Say ( Burlak , D3-Bur-2d ) ;
2281: LD_EXP 46
2285: PPUSH
2286: LD_STRING D3-Bur-2d
2288: PPUSH
2289: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2293: LD_EXP 54
2297: PPUSH
2298: LD_STRING D3-Gny-2
2300: PPUSH
2301: CALL_OW 88
// DialogueOff ;
2305: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2309: LD_EXP 54
2313: PPUSH
2314: LD_INT 3
2316: PPUSH
2317: CALL_OW 235
// gnyevkoSaved = true ;
2321: LD_ADDR_EXP 12
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// exit ;
2329: GO 2597
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2331: LD_INT 22
2333: PUSH
2334: LD_INT 3
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 21
2343: PUSH
2344: LD_INT 1
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PPUSH
2355: CALL_OW 69
2359: PUSH
2360: LD_INT 1
2362: GREATER
2363: PUSH
2364: LD_EXP 22
2368: AND
2369: IFFALSE 2421
// begin Say ( Burlak , D3-Bur-2e ) ;
2371: LD_EXP 46
2375: PPUSH
2376: LD_STRING D3-Bur-2e
2378: PPUSH
2379: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2383: LD_EXP 54
2387: PPUSH
2388: LD_STRING D3-Gny-2
2390: PPUSH
2391: CALL_OW 88
// DialogueOff ;
2395: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2399: LD_EXP 54
2403: PPUSH
2404: LD_INT 3
2406: PPUSH
2407: CALL_OW 235
// gnyevkoSaved = true ;
2411: LD_ADDR_EXP 12
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// exit ;
2419: GO 2597
// end ; end else
2421: GO 2597
// begin if GetSex ( nearUnit ) = sex_male then
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 258
2432: PUSH
2433: LD_INT 1
2435: EQUAL
2436: IFFALSE 2452
// Say ( nearUnit , D3-RSol1-1 ) else
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_STRING D3-RSol1-1
2445: PPUSH
2446: CALL_OW 88
2450: GO 2464
// Say ( nearUnit , D3-RFSol1-1 ) ;
2452: LD_VAR 0 1
2456: PPUSH
2457: LD_STRING D3-RFSol1-1
2459: PPUSH
2460: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2464: LD_EXP 54
2468: PPUSH
2469: LD_STRING D3-Gny-1
2471: PPUSH
2472: CALL_OW 88
// if apeWithRadioKiller then
2476: LD_EXP 11
2480: IFFALSE 2520
// begin if apeWithRadioKiller = Burlak then
2482: LD_EXP 11
2486: PUSH
2487: LD_EXP 46
2491: EQUAL
2492: IFFALSE 2508
// Say ( Burlak , D3-Bur-2 ) else
2494: LD_EXP 46
2498: PPUSH
2499: LD_STRING D3-Bur-2
2501: PPUSH
2502: CALL_OW 88
2506: GO 2520
// Say ( Burlak , D3-Bur-2a ) ;
2508: LD_EXP 46
2512: PPUSH
2513: LD_STRING D3-Bur-2a
2515: PPUSH
2516: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2520: LD_VAR 0 1
2524: PPUSH
2525: CALL_OW 258
2529: PUSH
2530: LD_INT 1
2532: EQUAL
2533: IFFALSE 2549
// Say ( nearUnit , D3-RSol1-2 ) else
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_STRING D3-RSol1-2
2542: PPUSH
2543: CALL_OW 88
2547: GO 2561
// Say ( nearUnit , D3-RFSol1-2 ) ;
2549: LD_VAR 0 1
2553: PPUSH
2554: LD_STRING D3-RFSol1-2
2556: PPUSH
2557: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2561: LD_EXP 54
2565: PPUSH
2566: LD_STRING D3-Gny-2a
2568: PPUSH
2569: CALL_OW 88
// DialogueOff ;
2573: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2577: LD_EXP 54
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL_OW 235
// gnyevkoSaved = true ;
2589: LD_ADDR_EXP 12
2593: PUSH
2594: LD_INT 1
2596: ST_TO_ADDR
// end ; end ;
2597: PPOPN 2
2599: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2600: LD_EXP 12
2604: NOT
2605: PUSH
2606: LD_EXP 21
2610: NOT
2611: OR
2612: IFFALSE 2807
2614: GO 2616
2616: DISABLE
2617: LD_INT 0
2619: PPUSH
// begin enable ;
2620: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2621: LD_EXP 12
2625: NOT
2626: PUSH
2627: LD_EXP 40
2631: PUSH
2632: LD_INT 70
2634: GREATER
2635: AND
2636: IFFALSE 2714
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2638: LD_ADDR_VAR 0 1
2642: PUSH
2643: LD_INT 22
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 25
2655: PUSH
2656: LD_INT 12
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: FOR_IN
2673: IFFALSE 2712
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: LD_EXP 54
2684: PPUSH
2685: CALL_OW 250
2689: PPUSH
2690: LD_EXP 54
2694: PPUSH
2695: CALL_OW 251
2699: PPUSH
2700: LD_INT 10
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL 8496 0 5
2710: GO 2672
2712: POP
2713: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2714: LD_EXP 21
2718: NOT
2719: PUSH
2720: LD_EXP 41
2724: PUSH
2725: LD_INT 70
2727: GREATER
2728: AND
2729: IFFALSE 2807
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2731: LD_ADDR_VAR 0 1
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 12
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 69
2764: PUSH
2765: FOR_IN
2766: IFFALSE 2805
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2768: LD_VAR 0 1
2772: PPUSH
2773: LD_EXP 53
2777: PPUSH
2778: CALL_OW 250
2782: PPUSH
2783: LD_EXP 53
2787: PPUSH
2788: CALL_OW 251
2792: PPUSH
2793: LD_INT 10
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL 8496 0 5
2803: GO 2765
2805: POP
2806: POP
// end ;
2807: PPOPN 1
2809: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2810: LD_EXP 12
2814: NOT
2815: PUSH
2816: LD_EXP 21
2820: NOT
2821: OR
2822: IFFALSE 2933
2824: GO 2826
2826: DISABLE
// begin enable ;
2827: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2828: LD_EXP 12
2832: NOT
2833: PUSH
2834: LD_EXP 40
2838: PUSH
2839: LD_INT 0
2841: GREATER
2842: AND
2843: IFFALSE 2859
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2845: LD_ADDR_EXP 40
2849: PUSH
2850: LD_EXP 40
2854: PUSH
2855: LD_INT 35
2857: MINUS
2858: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2859: LD_EXP 53
2863: PPUSH
2864: CALL_OW 305
2868: PUSH
2869: LD_EXP 21
2873: NOT
2874: AND
2875: PUSH
2876: LD_EXP 41
2880: PUSH
2881: LD_INT 0
2883: GREATER
2884: AND
2885: IFFALSE 2901
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2887: LD_ADDR_EXP 41
2891: PUSH
2892: LD_EXP 41
2896: PUSH
2897: LD_INT 35
2899: MINUS
2900: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2901: LD_EXP 53
2905: PPUSH
2906: CALL_OW 305
2910: PUSH
2911: LD_EXP 21
2915: NOT
2916: AND
2917: IFFALSE 2933
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2919: LD_ADDR_EXP 26
2923: PUSH
2924: LD_EXP 26
2928: PUSH
2929: LD_INT 35
2931: PLUS
2932: ST_TO_ADDR
// end ;
2933: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2934: LD_INT 3
2936: PPUSH
2937: LD_EXP 47
2941: PPUSH
2942: CALL_OW 292
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 46
2954: PPUSH
2955: CALL_OW 292
2959: OR
2960: PUSH
2961: LD_EXP 54
2965: PPUSH
2966: CALL_OW 255
2970: PUSH
2971: LD_INT 3
2973: EQUAL
2974: PUSH
2975: LD_INT 6
2977: PPUSH
2978: LD_EXP 54
2982: PPUSH
2983: CALL_OW 292
2987: AND
2988: OR
2989: PUSH
2990: LD_EXP 14
2994: NOT
2995: AND
2996: IFFALSE 3911
2998: GO 3000
3000: DISABLE
// begin enable ;
3001: ENABLE
// InGameOn ;
3002: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
3006: LD_EXP 47
3010: PPUSH
3011: CALL_OW 87
// ComWalk ( Gnyevko ) ;
3015: LD_EXP 54
3019: PPUSH
3020: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3024: LD_EXP 46
3028: PUSH
3029: LD_EXP 54
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 200
// DialogueOn ;
3042: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3046: LD_EXP 13
3050: IFFALSE 3302
// begin meetPokryshkin = true ;
3052: LD_ADDR_EXP 14
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3060: LD_INT 6
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: CALL_OW 343
// DialogueOff ;
3070: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3074: LD_EXP 46
3078: PPUSH
3079: LD_EXP 47
3083: PPUSH
3084: CALL_OW 250
3088: PPUSH
3089: LD_EXP 47
3093: PPUSH
3094: CALL_OW 251
3098: PPUSH
3099: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3103: LD_EXP 46
3107: PPUSH
3108: LD_EXP 47
3112: PPUSH
3113: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3117: LD_EXP 47
3121: PPUSH
3122: LD_EXP 46
3126: PPUSH
3127: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3131: LD_EXP 54
3135: PPUSH
3136: LD_STRING D4-Gny-3
3138: PPUSH
3139: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3143: LD_EXP 46
3147: PPUSH
3148: LD_STRING D4-Bur-3
3150: PPUSH
3151: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3155: LD_EXP 47
3159: PPUSH
3160: LD_STRING D4-Pok-4
3162: PPUSH
3163: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3167: LD_EXP 42
3171: PPUSH
3172: LD_INT 18
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 49
// wait ( 0 0$2 ) ;
3182: LD_INT 70
3184: PPUSH
3185: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3189: LD_EXP 46
3193: PPUSH
3194: LD_STRING D4-Bur-4
3196: PPUSH
3197: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-5
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3213: LD_EXP 42
3217: PPUSH
3218: LD_STRING D4-Sol1-5
3220: PPUSH
3221: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3225: LD_EXP 47
3229: PPUSH
3230: LD_STRING D4-Pok-6
3232: PPUSH
3233: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-6a
3244: PPUSH
3245: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3249: LD_EXP 46
3253: PPUSH
3254: LD_STRING D4-Bur-6
3256: PPUSH
3257: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3261: LD_EXP 47
3265: PPUSH
3266: LD_STRING D4-Pok-7
3268: PPUSH
3269: CALL_OW 88
// DialogueOff ;
3273: CALL_OW 7
// InGameOff ;
3277: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3281: LD_STRING M2
3283: PPUSH
3284: CALL_OW 337
// goToHill = true ;
3288: LD_ADDR_EXP 15
3292: PUSH
3293: LD_INT 1
3295: ST_TO_ADDR
// MoveToHill ;
3296: CALL 10376 0 0
// exit ;
3300: GO 3911
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3302: LD_EXP 46
3306: PUSH
3307: LD_EXP 54
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3320: LD_EXP 47
3324: PPUSH
3325: LD_STRING D4-Pok-1
3327: PPUSH
3328: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3332: LD_EXP 54
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 3
3344: EQUAL
3345: PUSH
3346: LD_EXP 54
3350: PPUSH
3351: CALL_OW 302
3355: AND
3356: IFFALSE 3370
// Say ( Gnyevko , D4-Gny-1 ) ;
3358: LD_EXP 54
3362: PPUSH
3363: LD_STRING D4-Gny-1
3365: PPUSH
3366: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3370: LD_EXP 46
3374: PPUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 6
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 21
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PPUSH
3404: LD_EXP 46
3408: PPUSH
3409: CALL_OW 74
3413: PPUSH
3414: CALL_OW 296
3418: PUSH
3419: LD_INT 8
3421: GREATER
3422: PUSH
3423: LD_EXP 46
3427: PPUSH
3428: LD_EXP 54
3432: PPUSH
3433: CALL_OW 296
3437: PUSH
3438: LD_INT 8
3440: GREATER
3441: AND
3442: PUSH
3443: LD_EXP 54
3447: PPUSH
3448: CALL_OW 255
3452: PUSH
3453: LD_INT 3
3455: EQUAL
3456: AND
3457: PUSH
3458: LD_EXP 54
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: IFFALSE 3566
// begin ComWalk ( Gnyevko ) ;
3470: LD_EXP 54
3474: PPUSH
3475: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-2
3486: PPUSH
3487: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3491: LD_EXP 54
3495: PPUSH
3496: LD_STRING D4-Gny-2
3498: PPUSH
3499: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3503: LD_EXP 47
3507: PPUSH
3508: LD_STRING D4-Pok-3
3510: PPUSH
3511: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3515: LD_ADDR_EXP 13
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3523: LD_EXP 54
3527: PPUSH
3528: LD_INT 6
3530: PPUSH
3531: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3535: LD_EXP 54
3539: PPUSH
3540: LD_EXP 47
3544: PPUSH
3545: CALL_OW 250
3549: PPUSH
3550: LD_EXP 47
3554: PPUSH
3555: CALL_OW 251
3559: PPUSH
3560: CALL_OW 171
// end else
3564: GO 3903
// begin meetPokryshkin = true ;
3566: LD_ADDR_EXP 14
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3574: LD_INT 6
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: CALL_OW 343
// DialogueOff ;
3584: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3588: LD_EXP 54
3592: PPUSH
3593: CALL_OW 255
3597: PUSH
3598: LD_INT 3
3600: EQUAL
3601: PUSH
3602: LD_EXP 54
3606: PPUSH
3607: CALL_OW 302
3611: AND
3612: IFFALSE 3689
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3614: LD_EXP 46
3618: PUSH
3619: LD_EXP 54
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: LD_EXP 47
3632: PPUSH
3633: CALL_OW 250
3637: PPUSH
3638: LD_EXP 47
3642: PPUSH
3643: CALL_OW 251
3647: PPUSH
3648: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3652: LD_EXP 46
3656: PUSH
3657: LD_EXP 54
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: LD_EXP 47
3670: PPUSH
3671: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3675: LD_EXP 54
3679: PPUSH
3680: LD_INT 6
3682: PPUSH
3683: CALL_OW 235
// end else
3687: GO 3732
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3689: LD_EXP 46
3693: PPUSH
3694: LD_EXP 47
3698: PPUSH
3699: CALL_OW 250
3703: PPUSH
3704: LD_EXP 47
3708: PPUSH
3709: CALL_OW 251
3713: PPUSH
3714: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3718: LD_EXP 46
3722: PPUSH
3723: LD_EXP 47
3727: PPUSH
3728: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3732: LD_EXP 47
3736: PPUSH
3737: LD_EXP 46
3741: PPUSH
3742: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3746: LD_EXP 46
3750: PPUSH
3751: LD_STRING D4-Bur-3
3753: PPUSH
3754: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3758: LD_EXP 47
3762: PPUSH
3763: LD_STRING D4-Pok-4
3765: PPUSH
3766: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3770: LD_EXP 42
3774: PPUSH
3775: LD_INT 18
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: CALL_OW 49
// wait ( 0 0$2 ) ;
3785: LD_INT 70
3787: PPUSH
3788: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3792: LD_EXP 46
3796: PPUSH
3797: LD_STRING D4-Bur-4
3799: PPUSH
3800: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-5
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3816: LD_EXP 42
3820: PPUSH
3821: LD_STRING D4-Sol1-5
3823: PPUSH
3824: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3828: LD_EXP 47
3832: PPUSH
3833: LD_STRING D4-Pok-6
3835: PPUSH
3836: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-6a
3847: PPUSH
3848: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3852: LD_EXP 46
3856: PPUSH
3857: LD_STRING D4-Bur-6
3859: PPUSH
3860: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3864: LD_EXP 47
3868: PPUSH
3869: LD_STRING D4-Pok-7
3871: PPUSH
3872: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3876: LD_STRING M2
3878: PPUSH
3879: CALL_OW 337
// goToHill = true ;
3883: LD_ADDR_EXP 15
3887: PUSH
3888: LD_INT 1
3890: ST_TO_ADDR
// DialogueOff ;
3891: CALL_OW 7
// InGameOff ;
3895: CALL_OW 9
// MoveToHill ;
3899: CALL 10376 0 0
// end ; DialogueOff ;
3903: CALL_OW 7
// InGameOff ;
3907: CALL_OW 9
// end ;
3911: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3912: LD_EXP 46
3916: PPUSH
3917: LD_EXP 47
3921: PPUSH
3922: CALL_OW 296
3926: PUSH
3927: LD_INT 10
3929: GREATER
3930: PUSH
3931: LD_EXP 15
3935: AND
3936: PUSH
3937: LD_EXP 18
3941: NOT
3942: AND
3943: IFFALSE 4144
3945: GO 3947
3947: DISABLE
3948: LD_INT 0
3950: PPUSH
// begin enable ;
3951: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_EXP 47
3961: PUSH
3962: LD_EXP 48
3966: PUSH
3967: LD_EXP 49
3971: PUSH
3972: LD_EXP 50
3976: PUSH
3977: LD_EXP 51
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3989: LD_EXP 54
3993: PPUSH
3994: CALL_OW 255
3998: PUSH
3999: LD_INT 6
4001: EQUAL
4002: PUSH
4003: LD_EXP 12
4007: AND
4008: IFFALSE 4026
// ruSolds = ruSolds ^ Gnyevko ;
4010: LD_ADDR_VAR 0 1
4014: PUSH
4015: LD_VAR 0 1
4019: PUSH
4020: LD_EXP 54
4024: ADD
4025: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4026: LD_VAR 0 1
4030: PPUSH
4031: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4035: LD_EXP 46
4039: PPUSH
4040: CALL_OW 87
// DialogueOn ;
4044: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4048: LD_EXP 47
4052: PPUSH
4053: LD_STRING DSplit-Pok-1
4055: PPUSH
4056: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4060: LD_EXP 46
4064: PPUSH
4065: LD_STRING DSplit-Bur-1
4067: PPUSH
4068: CALL_OW 88
// DialogueOff ;
4072: CALL_OW 7
// InGameOn ;
4076: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4080: LD_EXP 46
4084: PPUSH
4085: LD_EXP 47
4089: PPUSH
4090: CALL_OW 250
4094: PPUSH
4095: LD_EXP 47
4099: PPUSH
4100: CALL_OW 251
4104: PPUSH
4105: CALL_OW 111
// wait ( 0 0$1 ) ;
4109: LD_INT 35
4111: PPUSH
4112: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4116: LD_EXP 46
4120: PPUSH
4121: LD_EXP 47
4125: PPUSH
4126: CALL_OW 296
4130: PUSH
4131: LD_INT 6
4133: LESS
4134: IFFALSE 4080
// InGameOff ;
4136: CALL_OW 9
// MoveToHill ;
4140: CALL 10376 0 0
// end ;
4144: PPOPN 1
4146: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// traitor = true ;
4151: LD_ADDR_EXP 18
4155: PUSH
4156: LD_INT 1
4158: ST_TO_ADDR
// DialogueOn ;
4159: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4163: LD_EXP 47
4167: PPUSH
4168: LD_STRING DAttack-Pok-1
4170: PPUSH
4171: CALL_OW 88
// DialogueOff ;
4175: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4179: LD_INT 3
4181: PPUSH
4182: LD_INT 6
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4195: LD_INT 22
4197: PUSH
4198: LD_INT 6
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 21
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: PPUSH
4224: LD_EXP 46
4228: PPUSH
4229: CALL_OW 115
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4238: LD_EXP 47
4242: PPUSH
4243: LD_INT 65
4245: PPUSH
4246: LD_INT 59
4248: PPUSH
4249: CALL_OW 297
4253: PUSH
4254: LD_INT 4
4256: LESS
4257: PUSH
4258: LD_EXP 18
4262: NOT
4263: AND
4264: IFFALSE 4461
4266: GO 4268
4268: DISABLE
// begin InGameOn ;
4269: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4273: LD_INT 55
4275: PPUSH
4276: LD_INT 50
4278: PPUSH
4279: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4283: LD_EXP 46
4287: PPUSH
4288: LD_INT 66
4290: PPUSH
4291: LD_INT 57
4293: PPUSH
4294: CALL_OW 111
// AddComHold ( Burlak ) ;
4298: LD_EXP 46
4302: PPUSH
4303: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4307: LD_EXP 42
4311: PPUSH
4312: LD_INT 59
4314: PPUSH
4315: LD_INT 55
4317: PPUSH
4318: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4322: LD_INT 35
4324: PPUSH
4325: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4329: LD_INT 1
4331: PPUSH
4332: LD_EXP 47
4336: PPUSH
4337: CALL_OW 292
4341: IFFALSE 4322
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4343: LD_EXP 42
4347: PUSH
4348: LD_EXP 47
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 87
// ComStop ( Charles ) ;
4361: LD_EXP 42
4365: PPUSH
4366: CALL_OW 141
// AddComHold ( Charles ) ;
4370: LD_EXP 42
4374: PPUSH
4375: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4379: LD_EXP 42
4383: PPUSH
4384: LD_EXP 47
4388: PPUSH
4389: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4393: LD_EXP 42
4397: PPUSH
4398: LD_STRING D5-Sol1-1
4400: PPUSH
4401: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4405: LD_EXP 47
4409: PPUSH
4410: LD_STRING D5-Pok-1
4412: PPUSH
4413: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 6
4422: PPUSH
4423: LD_INT 2
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4433: LD_INT 1
4435: PPUSH
4436: LD_INT 3
4438: PPUSH
4439: LD_INT 2
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4449: LD_EXP 42
4453: PPUSH
4454: LD_STRING D5-Sol1-2
4456: PPUSH
4457: CALL_OW 88
// end ;
4461: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4462: LD_EXP 42
4466: PPUSH
4467: CALL_OW 301
4471: PUSH
4472: LD_EXP 15
4476: AND
4477: IFFALSE 5081
4479: GO 4481
4481: DISABLE
4482: LD_INT 0
4484: PPUSH
// begin InGameOn ;
4485: CALL_OW 8
// goToHill = false ;
4489: LD_ADDR_EXP 15
4493: PUSH
4494: LD_INT 0
4496: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4497: LD_INT 22
4499: PUSH
4500: LD_INT 6
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PPUSH
4521: CALL_OW 69
4525: PPUSH
4526: CALL_OW 141
// wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4537: LD_INT 22
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: PPUSH
4566: CALL_OW 138
// wait ( 0 0$1 ) ;
4570: LD_INT 35
4572: PPUSH
4573: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4577: LD_INT 55
4579: PPUSH
4580: LD_INT 50
4582: PPUSH
4583: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4587: LD_EXP 46
4591: PPUSH
4592: LD_INT 56
4594: PPUSH
4595: LD_INT 56
4597: PPUSH
4598: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4602: LD_INT 22
4604: PUSH
4605: LD_INT 6
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PPUSH
4631: LD_INT 56
4633: PPUSH
4634: LD_INT 56
4636: PPUSH
4637: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4641: LD_EXP 46
4645: PPUSH
4646: LD_STRING D5-Bur-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-2
4660: PPUSH
4661: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4665: LD_EXP 51
4669: PPUSH
4670: LD_STRING D5-Bel-2
4672: PPUSH
4673: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4677: LD_EXP 47
4681: PPUSH
4682: LD_STRING D5-Pok-3
4684: PPUSH
4685: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4689: LD_EXP 54
4693: PPUSH
4694: CALL_OW 255
4698: PUSH
4699: LD_INT 6
4701: EQUAL
4702: IFFALSE 4716
// Say ( Gnyevko , D5-Gny-3 ) ;
4704: LD_EXP 54
4708: PPUSH
4709: LD_STRING D5-Gny-3
4711: PPUSH
4712: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4716: LD_EXP 46
4720: PPUSH
4721: LD_STRING D5-Bur-3
4723: PPUSH
4724: CALL_OW 88
// interface_hidden = true ;
4728: LD_ADDR_OWVAR 54
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// IngameOff ;
4736: CALL_OW 9
// wait ( 0 0$2 ) ;
4740: LD_INT 70
4742: PPUSH
4743: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4747: LD_EXP 46
4751: PPUSH
4752: LD_INT 85
4754: PPUSH
4755: LD_INT 64
4757: PPUSH
4758: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4762: LD_INT 22
4764: PUSH
4765: LD_INT 6
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 21
4774: PUSH
4775: LD_INT 1
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PPUSH
4786: CALL_OW 69
4790: PPUSH
4791: LD_INT 85
4793: PPUSH
4794: LD_INT 64
4796: PPUSH
4797: CALL_OW 111
// interface_hidden = false ;
4801: LD_ADDR_OWVAR 54
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// InGameOn ;
4809: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4813: LD_EXP 46
4817: PPUSH
4818: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4822: LD_EXP 47
4826: PPUSH
4827: LD_STRING D6-Pok-1
4829: PPUSH
4830: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4834: LD_EXP 46
4838: PPUSH
4839: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4843: LD_EXP 46
4847: PPUSH
4848: LD_STRING D6-Bur-1
4850: PPUSH
4851: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4855: LD_EXP 46
4859: PPUSH
4860: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4864: LD_EXP 47
4868: PPUSH
4869: LD_STRING D6-Pok-2
4871: PPUSH
4872: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4876: LD_EXP 46
4880: PPUSH
4881: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4885: LD_EXP 51
4889: PPUSH
4890: LD_STRING D6-Bel-2
4892: PPUSH
4893: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4897: LD_EXP 46
4901: PPUSH
4902: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4906: LD_EXP 46
4910: PPUSH
4911: LD_STRING D6-Bur-2
4913: PPUSH
4914: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4918: LD_EXP 46
4922: PPUSH
4923: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4927: LD_EXP 47
4931: PPUSH
4932: LD_STRING D6-Pok-3
4934: PPUSH
4935: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4939: LD_EXP 46
4943: PPUSH
4944: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4948: LD_EXP 55
4952: PPUSH
4953: LD_STRING D6-Kur-3
4955: PPUSH
4956: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4960: LD_EXP 46
4964: PPUSH
4965: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4969: LD_EXP 47
4973: PPUSH
4974: LD_STRING D6-Pok-4
4976: PPUSH
4977: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4981: LD_EXP 46
4985: PPUSH
4986: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4990: LD_EXP 51
4994: PPUSH
4995: LD_STRING D6-Bel-4
4997: PPUSH
4998: CALL_OW 88
// InGameOff ;
5002: CALL_OW 9
// interface_hidden = false ;
5006: LD_ADDR_OWVAR 54
5010: PUSH
5011: LD_INT 0
5013: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
5014: LD_EXP 47
5018: PPUSH
5019: LD_INT 23
5021: PPUSH
5022: CALL_OW 115
// wait ( 0 0$5 ) ;
5026: LD_INT 175
5028: PPUSH
5029: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5033: LD_INT 22
5035: PUSH
5036: LD_INT 6
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 1
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: PPUSH
5062: LD_INT 23
5064: PPUSH
5065: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 54
5076: PPUSH
5077: CALL_OW 471
// end ;
5081: PPOPN 1
5083: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 47
5091: PPUSH
5092: CALL_OW 292
5096: PUSH
5097: LD_EXP 42
5101: PPUSH
5102: CALL_OW 301
5106: AND
5107: IFFALSE 5126
5109: GO 5111
5111: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5112: LD_EXP 43
5116: PPUSH
5117: LD_EXP 47
5121: PPUSH
5122: CALL_OW 115
5126: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5127: LD_INT 3
5129: PPUSH
5130: LD_INT 23
5132: PPUSH
5133: CALL_OW 292
5137: IFFALSE 5166
5139: GO 5141
5141: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5142: LD_EXP 47
5146: PPUSH
5147: LD_STRING D7-Pok-1
5149: PPUSH
5150: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5154: LD_EXP 43
5158: PPUSH
5159: LD_STRING D7-FSol1-1
5161: PPUSH
5162: CALL_OW 88
// end ;
5166: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5167: LD_EXP 47
5171: PPUSH
5172: CALL_OW 303
5176: IFFALSE 5710
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
5184: PPUSH
5185: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_INT 6
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 21
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 50
5213: PUSH
5214: EMPTY
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: CALL_OW 69
5226: PUSH
5227: LD_EXP 51
5231: DIFF
5232: ST_TO_ADDR
// DialogueOn ;
5233: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5237: LD_EXP 51
5241: PPUSH
5242: LD_STRING D7a-Bel-1
5244: PPUSH
5245: CALL_OW 88
// DialogueOff ;
5249: CALL_OW 7
// for i := 1 to ruSolds do
5253: LD_ADDR_VAR 0 1
5257: PUSH
5258: DOUBLE
5259: LD_INT 1
5261: DEC
5262: ST_TO_ADDR
5263: LD_VAR 0 3
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5327
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5271: LD_VAR 0 3
5275: PUSH
5276: LD_VAR 0 1
5280: ARRAY
5281: PPUSH
5282: LD_INT 87
5284: PUSH
5285: LD_VAR 0 1
5289: PLUS
5290: PPUSH
5291: LD_INT 63
5293: PUSH
5294: LD_VAR 0 1
5298: PLUS
5299: PPUSH
5300: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 1
5313: ARRAY
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 178
// end ;
5325: GO 5268
5327: POP
5328: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5329: LD_EXP 51
5333: PPUSH
5334: LD_INT 89
5336: PPUSH
5337: LD_INT 67
5339: PPUSH
5340: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5344: LD_EXP 51
5348: PPUSH
5349: LD_INT 88
5351: PPUSH
5352: LD_INT 66
5354: PPUSH
5355: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5359: LD_EXP 48
5363: PPUSH
5364: LD_STRING D7a-RSol1-1
5366: PPUSH
5367: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5371: LD_EXP 43
5375: PPUSH
5376: LD_STRING D7a-FSol1-1
5378: PPUSH
5379: CALL_OW 88
// wait ( 0 0$12 ) ;
5383: LD_INT 420
5385: PPUSH
5386: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-1
5397: PPUSH
5398: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5402: LD_EXP 49
5406: PPUSH
5407: LD_STRING D7b-FSol1-1
5409: PPUSH
5410: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5414: LD_EXP 51
5418: PPUSH
5419: LD_STRING D7b-Bel-2
5421: PPUSH
5422: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5426: LD_EXP 48
5430: PPUSH
5431: LD_STRING D7b-RSol1-2
5433: PPUSH
5434: CALL_OW 88
// for unit in ruSolds do
5438: LD_ADDR_VAR 0 2
5442: PUSH
5443: LD_VAR 0 3
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5692
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5451: LD_EXP 46
5455: PPUSH
5456: LD_VAR 0 2
5460: PPUSH
5461: CALL_OW 296
5465: PUSH
5466: LD_INT 7
5468: LESS
5469: IFFALSE 5682
// begin InGameOn ;
5471: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5475: LD_EXP 51
5479: PUSH
5480: LD_EXP 48
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5493: LD_EXP 46
5497: PPUSH
5498: LD_INT 88
5500: PPUSH
5501: LD_INT 66
5503: PPUSH
5504: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5508: LD_EXP 51
5512: PPUSH
5513: LD_EXP 46
5517: PPUSH
5518: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5522: LD_EXP 46
5526: PPUSH
5527: LD_INT 90
5529: PPUSH
5530: LD_INT 66
5532: PPUSH
5533: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-3
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-4
5556: PPUSH
5557: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5561: LD_EXP 46
5565: PPUSH
5566: LD_STRING D7b-Bur-4
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-5
5580: PPUSH
5581: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5585: LD_EXP 49
5589: PPUSH
5590: LD_STRING D7b-FSol1-5
5592: PPUSH
5593: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5597: LD_EXP 51
5601: PPUSH
5602: LD_STRING D7b-Bel-6
5604: PPUSH
5605: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_STRING D7b-Bur-6
5616: PPUSH
5617: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5621: LD_EXP 48
5625: PPUSH
5626: LD_STRING D7b-RSol1-6
5628: PPUSH
5629: CALL_OW 88
// InGameOff ;
5633: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5637: LD_VAR 0 3
5641: PPUSH
5642: LD_INT 3
5644: PPUSH
5645: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5649: LD_EXP 51
5653: PPUSH
5654: LD_INT 3
5656: PPUSH
5657: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5661: LD_STRING M3
5663: PPUSH
5664: CALL_OW 337
// secondAttack = true ;
5668: LD_ADDR_EXP 17
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// exit ;
5676: POP
5677: POP
5678: GO 5710
// end else
5680: GO 5690
// belkovWaitForGorky = true ;
5682: LD_ADDR_EXP 16
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
5690: GO 5448
5692: POP
5693: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5694: LD_EXP 51
5698: PPUSH
5699: LD_STRING D7b-Bel-3
5701: PPUSH
5702: CALL_OW 88
// InGameOff ;
5706: CALL_OW 9
// end ;
5710: PPOPN 3
5712: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5713: LD_EXP 16
5717: PUSH
5718: LD_EXP 18
5722: NOT
5723: AND
5724: IFFALSE 6058
5726: GO 5728
5728: DISABLE
5729: LD_INT 0
5731: PPUSH
5732: PPUSH
// begin enable ;
5733: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: LD_INT 22
5741: PUSH
5742: LD_INT 6
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 21
5751: PUSH
5752: LD_INT 1
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 69
5767: ST_TO_ADDR
// for unit in ruSolds do
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_VAR 0 2
5777: PUSH
5778: FOR_IN
5779: IFFALSE 6056
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5781: LD_EXP 46
5785: PPUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 296
5795: PUSH
5796: LD_INT 7
5798: LESS
5799: IFFALSE 6054
// begin if not IsInUnit ( Johanna ) then
5801: LD_EXP 43
5805: PPUSH
5806: CALL_OW 310
5810: NOT
5811: IFFALSE 5825
// ComEnterUnit ( Johanna , am_bun ) ;
5813: LD_EXP 43
5817: PPUSH
5818: LD_INT 23
5820: PPUSH
5821: CALL_OW 120
// belkovWaitForGorky = false ;
5825: LD_ADDR_EXP 16
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// InGameOn ;
5833: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5837: LD_EXP 51
5841: PUSH
5842: LD_EXP 48
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5855: LD_EXP 46
5859: PPUSH
5860: LD_INT 88
5862: PPUSH
5863: LD_INT 66
5865: PPUSH
5866: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5870: LD_EXP 51
5874: PPUSH
5875: LD_EXP 46
5879: PPUSH
5880: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5884: LD_EXP 46
5888: PPUSH
5889: LD_INT 90
5891: PPUSH
5892: LD_INT 66
5894: PPUSH
5895: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5899: LD_EXP 51
5903: PPUSH
5904: LD_STRING D7b-Bel-3a
5906: PPUSH
5907: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5911: LD_EXP 46
5915: PPUSH
5916: LD_STRING D7b-Bur-3
5918: PPUSH
5919: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5923: LD_EXP 51
5927: PPUSH
5928: LD_STRING D7b-Bel-4
5930: PPUSH
5931: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5935: LD_EXP 46
5939: PPUSH
5940: LD_STRING D7b-Bur-4
5942: PPUSH
5943: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5947: LD_EXP 51
5951: PPUSH
5952: LD_STRING D7b-Bel-5
5954: PPUSH
5955: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5959: LD_EXP 49
5963: PPUSH
5964: LD_STRING D7b-FSol1-5
5966: PPUSH
5967: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5971: LD_EXP 51
5975: PPUSH
5976: LD_STRING D7b-Bel-6
5978: PPUSH
5979: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5983: LD_EXP 46
5987: PPUSH
5988: LD_STRING D7b-Bur-6
5990: PPUSH
5991: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5995: LD_EXP 48
5999: PPUSH
6000: LD_STRING D7a-RSol1-6
6002: PPUSH
6003: CALL_OW 88
// InGameOff ;
6007: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_INT 3
6018: PPUSH
6019: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
6023: LD_EXP 51
6027: PPUSH
6028: LD_INT 3
6030: PPUSH
6031: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
6035: LD_STRING M3
6037: PPUSH
6038: CALL_OW 337
// secondAttack = true ;
6042: LD_ADDR_EXP 17
6046: PUSH
6047: LD_INT 1
6049: ST_TO_ADDR
// exit ;
6050: POP
6051: POP
6052: GO 6058
// end ;
6054: GO 5778
6056: POP
6057: POP
// end ;
6058: PPOPN 2
6060: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6065: LD_EXP 43
6069: PPUSH
6070: LD_STRING D8-FSol1-1
6072: PPUSH
6073: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6077: LD_EXP 44
6081: PPUSH
6082: LD_STRING D8-Glad-1
6084: PPUSH
6085: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6089: LD_EXP 46
6093: PPUSH
6094: LD_STRING D8-Bur-1
6096: PPUSH
6097: CALL_OW 88
// secondAttack = false ;
6101: LD_ADDR_EXP 17
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 21
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: PPUSH
6143: LD_INT 23
6145: PPUSH
6146: CALL_OW 74
6150: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6151: LD_EXP 45
6155: PPUSH
6156: CALL_OW 122
// wait ( 0 0$1 ) ;
6160: LD_INT 35
6162: PPUSH
6163: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6167: LD_EXP 45
6171: PPUSH
6172: LD_VAR 0 2
6176: PPUSH
6177: CALL_OW 175
// end ;
6181: LD_VAR 0 1
6185: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6186: LD_INT 23
6188: PPUSH
6189: CALL_OW 256
6193: PUSH
6194: LD_INT 350
6196: LESS
6197: PUSH
6198: LD_INT 23
6200: PPUSH
6201: CALL_OW 256
6205: PUSH
6206: LD_INT 250
6208: GREATER
6209: AND
6210: PUSH
6211: LD_INT 20
6213: PPUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 21
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 70
6242: PUSH
6243: LD_INT 0
6245: GREATER
6246: AND
6247: PUSH
6248: LD_EXP 24
6252: NOT
6253: AND
6254: IFFALSE 6271
6256: GO 6258
6258: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6259: LD_EXP 43
6263: PPUSH
6264: LD_STRING D8-FSol1-2
6266: PPUSH
6267: CALL_OW 88
6271: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6272: LD_INT 23
6274: PPUSH
6275: CALL_OW 303
6279: PUSH
6280: LD_INT 22
6282: PPUSH
6283: CALL_OW 302
6287: AND
6288: PUSH
6289: LD_EXP 24
6293: NOT
6294: AND
6295: IFFALSE 6365
6297: GO 6299
6299: DISABLE
// begin amRetreat = true ;
6300: LD_ADDR_EXP 24
6304: PUSH
6305: LD_INT 1
6307: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6308: LD_EXP 43
6312: PPUSH
6313: LD_STRING D8-FSol1-2a
6315: PPUSH
6316: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6320: LD_EXP 44
6324: PUSH
6325: LD_EXP 43
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PPUSH
6334: LD_INT 21
6336: PPUSH
6337: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6341: LD_EXP 44
6345: PPUSH
6346: LD_STRING D8-Glad-2
6348: PPUSH
6349: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6353: LD_EXP 46
6357: PPUSH
6358: LD_STRING D8-Bur-2
6360: PPUSH
6361: CALL_OW 88
// end ;
6365: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6366: LD_INT 22
6368: PPUSH
6369: CALL_OW 303
6373: PUSH
6374: LD_INT 23
6376: PPUSH
6377: CALL_OW 302
6381: AND
6382: PUSH
6383: LD_EXP 24
6387: NOT
6388: AND
6389: IFFALSE 6459
6391: GO 6393
6393: DISABLE
// begin amRetreat = true ;
6394: LD_ADDR_EXP 24
6398: PUSH
6399: LD_INT 1
6401: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6402: LD_EXP 43
6406: PPUSH
6407: LD_STRING D8-FSol1-2a
6409: PPUSH
6410: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6414: LD_EXP 44
6418: PUSH
6419: LD_EXP 43
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PPUSH
6428: LD_INT 21
6430: PPUSH
6431: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6435: LD_EXP 44
6439: PPUSH
6440: LD_STRING D8-Glad-2
6442: PPUSH
6443: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6447: LD_EXP 46
6451: PPUSH
6452: LD_STRING D8-Bur-2
6454: PPUSH
6455: CALL_OW 88
// end ;
6459: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6460: LD_INT 23
6462: PPUSH
6463: CALL_OW 256
6467: PUSH
6468: LD_INT 500
6470: LESS
6471: PUSH
6472: LD_OWVAR 67
6476: PUSH
6477: LD_INT 3
6479: GREATEREQUAL
6480: AND
6481: PUSH
6482: LD_EXP 24
6486: NOT
6487: AND
6488: IFFALSE 6558
6490: GO 6492
6492: DISABLE
// begin amRetreat = true ;
6493: LD_ADDR_EXP 24
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6501: LD_EXP 43
6505: PPUSH
6506: LD_STRING D8-FSol1-2a
6508: PPUSH
6509: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6513: LD_EXP 44
6517: PUSH
6518: LD_EXP 43
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PPUSH
6527: LD_INT 21
6529: PPUSH
6530: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6534: LD_EXP 44
6538: PPUSH
6539: LD_STRING D8-Glad-2
6541: PPUSH
6542: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6546: LD_EXP 46
6550: PPUSH
6551: LD_STRING D8-Bur-2
6553: PPUSH
6554: CALL_OW 88
// end ;
6558: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6559: LD_INT 22
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 21
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 50
6581: PUSH
6582: EMPTY
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PPUSH
6590: CALL_OW 69
6594: PUSH
6595: LD_INT 0
6597: GREATER
6598: IFFALSE 6726
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
// begin enable ;
6606: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_INT 21
6614: PPUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 70
6643: PUSH
6644: FOR_IN
6645: IFFALSE 6724
// begin if unit = Gladstone then
6647: LD_VAR 0 1
6651: PUSH
6652: LD_EXP 44
6656: EQUAL
6657: IFFALSE 6687
// begin gladstoneEscape = true ;
6659: LD_ADDR_EXP 19
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6667: LD_EXP 44
6671: PPUSH
6672: LD_EXP 30
6676: PUSH
6677: LD_STRING Gladstone
6679: STR
6680: PPUSH
6681: CALL_OW 38
// end else
6685: GO 6713
// begin JohannaEscape = true ;
6687: LD_ADDR_EXP 20
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6695: LD_EXP 43
6699: PPUSH
6700: LD_EXP 30
6704: PUSH
6705: LD_STRING Johanna
6707: STR
6708: PPUSH
6709: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 64
// end ;
6722: GO 6644
6724: POP
6725: POP
// end ;
6726: PPOPN 1
6728: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6729: LD_EXP 44
6733: PPUSH
6734: CALL_OW 301
6738: PUSH
6739: LD_EXP 43
6743: PPUSH
6744: CALL_OW 301
6748: AND
6749: IFFALSE 6766
6751: GO 6753
6753: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6754: LD_EXP 46
6758: PPUSH
6759: LD_STRING D9-Bur-1
6761: PPUSH
6762: CALL_OW 88
6766: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6767: LD_EXP 43
6771: PPUSH
6772: CALL_OW 301
6776: PUSH
6777: LD_EXP 19
6781: AND
6782: PUSH
6783: LD_EXP 20
6787: NOT
6788: AND
6789: IFFALSE 6806
6791: GO 6793
6793: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6794: LD_EXP 46
6798: PPUSH
6799: LD_STRING D9-Bur-1a
6801: PPUSH
6802: CALL_OW 88
6806: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6807: LD_EXP 44
6811: PPUSH
6812: CALL_OW 301
6816: PUSH
6817: LD_EXP 19
6821: NOT
6822: AND
6823: PUSH
6824: LD_EXP 20
6828: AND
6829: IFFALSE 6846
6831: GO 6833
6833: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6834: LD_EXP 46
6838: PPUSH
6839: LD_STRING D9-Bur-1b
6841: PPUSH
6842: CALL_OW 88
6846: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6847: LD_EXP 19
6851: PUSH
6852: LD_EXP 20
6856: AND
6857: IFFALSE 6874
6859: GO 6861
6861: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6862: LD_EXP 46
6866: PPUSH
6867: LD_STRING D9-Bur-1c
6869: PPUSH
6870: CALL_OW 88
6874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6875: LD_INT 22
6877: PUSH
6878: LD_INT 1
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 3
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 50
6897: PUSH
6898: EMPTY
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 69
6910: PUSH
6911: LD_INT 0
6913: EQUAL
6914: IFFALSE 7162
6916: GO 6918
6918: DISABLE
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6923: LD_ADDR_VAR 0 1
6927: PUSH
6928: LD_INT 22
6930: PUSH
6931: LD_INT 3
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 50
6950: PUSH
6951: EMPTY
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PPUSH
6959: CALL_OW 69
6963: PUSH
6964: LD_EXP 46
6968: PUSH
6969: LD_EXP 54
6973: PUSH
6974: LD_EXP 51
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: DIFF
6984: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_VAR 0 1
6994: PPUSH
6995: LD_INT 26
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: ST_TO_ADDR
// DialogueOn ;
7010: CALL_OW 6
// if IsOK ( Belkov ) then
7014: LD_EXP 51
7018: PPUSH
7019: CALL_OW 302
7023: IFFALSE 7037
// Say ( Belkov , D10-Bel-1 ) ;
7025: LD_EXP 51
7029: PPUSH
7030: LD_STRING D10-Bel-1
7032: PPUSH
7033: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7037: LD_VAR 0 1
7041: PUSH
7042: LD_INT 0
7044: GREATER
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: LD_INT 0
7053: GREATER
7054: PUSH
7055: LD_EXP 51
7059: PPUSH
7060: CALL_OW 302
7064: OR
7065: AND
7066: IFFALSE 7133
// begin Say ( Burlak , D10-Bur-1 ) ;
7068: LD_EXP 46
7072: PPUSH
7073: LD_STRING D10-Bur-1
7075: PPUSH
7076: CALL_OW 88
// if IsOK ( Belkov ) then
7080: LD_EXP 51
7084: PPUSH
7085: CALL_OW 302
7089: IFFALSE 7105
// Say ( Belkov , D10-Bel-1a ) else
7091: LD_EXP 51
7095: PPUSH
7096: LD_STRING D10-Bel-1a
7098: PPUSH
7099: CALL_OW 88
7103: GO 7121
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7105: LD_VAR 0 2
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_STRING D10-RSol1-1
7116: PPUSH
7117: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7121: LD_EXP 46
7125: PPUSH
7126: LD_STRING D10-Bur-2
7128: PPUSH
7129: CALL_OW 88
// end ; DialogueOff ;
7133: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7137: LD_STRING M4a
7139: PPUSH
7140: CALL_OW 337
// evacuationAvailable = true ;
7144: LD_ADDR_EXP 22
7148: PUSH
7149: LD_INT 1
7151: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7152: LD_INT 1
7154: PPUSH
7155: LD_INT 1
7157: PPUSH
7158: CALL_OW 424
// end ;
7162: PPOPN 2
7164: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7165: LD_EXP 22
7169: PUSH
7170: LD_EXP 25
7174: NOT
7175: AND
7176: IFFALSE 7786
7178: GO 7180
7180: DISABLE
7181: LD_INT 0
7183: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7184: LD_EXP 53
7188: PPUSH
7189: LD_INT 22
7191: PPUSH
7192: LD_INT 1
7194: PPUSH
7195: CALL_OW 49
// wait ( 0 0$3 ) ;
7199: LD_INT 105
7201: PPUSH
7202: CALL_OW 67
// jelenaSpawned = true ;
7206: LD_ADDR_EXP 25
7210: PUSH
7211: LD_INT 1
7213: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7214: LD_INT 22
7216: PUSH
7217: LD_INT 3
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 21
7226: PUSH
7227: LD_INT 1
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 50
7236: PUSH
7237: EMPTY
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 69
7249: PPUSH
7250: LD_EXP 53
7254: PPUSH
7255: CALL_OW 74
7259: PPUSH
7260: LD_EXP 53
7264: PPUSH
7265: CALL_OW 296
7269: PUSH
7270: LD_INT 9
7272: LESS
7273: IFFALSE 7277
// exit ;
7275: GO 7786
// DialogueOn ;
7277: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7281: LD_EXP 53
7285: PPUSH
7286: LD_STRING D11b-Kir-1
7288: PPUSH
7289: CALL_OW 94
// if IsOK ( Belkov ) then
7293: LD_EXP 51
7297: PPUSH
7298: CALL_OW 302
7302: IFFALSE 7330
// begin Say ( Belkov , D11b-Bel-1 ) ;
7304: LD_EXP 51
7308: PPUSH
7309: LD_STRING D11b-Bel-1
7311: PPUSH
7312: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7316: LD_EXP 51
7320: PPUSH
7321: LD_STRING D11b-Bel-1a
7323: PPUSH
7324: CALL_OW 94
// end else
7328: GO 7385
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7330: LD_ADDR_VAR 0 1
7334: PUSH
7335: LD_INT 22
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 21
7347: PUSH
7348: LD_INT 1
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 50
7357: PUSH
7358: EMPTY
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: PPUSH
7366: CALL_OW 69
7370: PPUSH
7371: LD_STRING D11b-RSol1-1
7373: PPUSH
7374: LD_STRING D11b-RFSol1-1
7376: PPUSH
7377: LD_INT 0
7379: PPUSH
7380: CALL 8163 0 4
7384: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7385: LD_INT 24
7387: PPUSH
7388: LD_INT 22
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 25
7400: PUSH
7401: LD_INT 12
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 70
7416: PUSH
7417: LD_INT 0
7419: GREATER
7420: IFFALSE 7436
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7422: LD_EXP 53
7426: PPUSH
7427: LD_STRING D11b1-Kir-1
7429: PPUSH
7430: CALL_OW 94
7434: GO 7448
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7436: LD_EXP 53
7440: PPUSH
7441: LD_STRING D11b2-Kir-1
7443: PPUSH
7444: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7448: LD_EXP 6
7452: PUSH
7453: LD_INT 24
7455: PPUSH
7456: LD_INT 22
7458: PUSH
7459: LD_INT 0
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 25
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 70
7484: PUSH
7485: LD_INT 0
7487: GREATER
7488: AND
7489: IFFALSE 7624
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7491: LD_EXP 46
7495: PPUSH
7496: LD_STRING D11b1-Bur-1
7498: PPUSH
7499: CALL_OW 88
// if IsOk ( Belkov ) then
7503: LD_EXP 51
7507: PPUSH
7508: CALL_OW 302
7512: IFFALSE 7528
// Say ( Belkov , D11b2-Bel-1 ) else
7514: LD_EXP 51
7518: PPUSH
7519: LD_STRING D11b2-Bel-1
7521: PPUSH
7522: CALL_OW 88
7526: GO 7569
// begin if GetSex ( randomSold ) = sex_male then
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 258
7537: PUSH
7538: LD_INT 1
7540: EQUAL
7541: IFFALSE 7557
// Say ( randomSold , D11b1-RSol1-1 ) else
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_STRING D11b1-RSol1-1
7550: PPUSH
7551: CALL_OW 88
7555: GO 7569
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_STRING D11b1-RFSol1-1
7564: PPUSH
7565: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7569: LD_INT 22
7571: PUSH
7572: LD_INT 1
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 21
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 50
7591: PUSH
7592: EMPTY
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_STRING D11b1-RSol1-1
7607: PPUSH
7608: LD_STRING D11b1-RFSol1-1
7610: PPUSH
7611: LD_INT 0
7613: PPUSH
7614: CALL 8163 0 4
// DialogueOff ;
7618: CALL_OW 7
// exit ;
7622: GO 7786
// end ; if spotWaterfall then
7624: LD_EXP 7
7628: IFFALSE 7714
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7630: LD_EXP 46
7634: PPUSH
7635: LD_STRING D11b1-Bur-1a
7637: PPUSH
7638: CALL_OW 88
// if IsOk ( Belkov ) then
7642: LD_EXP 51
7646: PPUSH
7647: CALL_OW 302
7651: IFFALSE 7667
// Say ( Belkov , D11b2-Bel-1 ) else
7653: LD_EXP 51
7657: PPUSH
7658: LD_STRING D11b2-Bel-1
7660: PPUSH
7661: CALL_OW 88
7665: GO 7708
// begin if GetSex ( randomSold ) = sex_male then
7667: LD_VAR 0 1
7671: PPUSH
7672: CALL_OW 258
7676: PUSH
7677: LD_INT 1
7679: EQUAL
7680: IFFALSE 7696
// Say ( randomSold , D11b1-RSol1-1 ) else
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_STRING D11b1-RSol1-1
7689: PPUSH
7690: CALL_OW 88
7694: GO 7708
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_STRING D11b1-RFSol1-1
7703: PPUSH
7704: CALL_OW 88
// end ; DialogueOff ;
7708: CALL_OW 7
// exit ;
7712: GO 7786
// end ; if IsOk ( Belkov ) then
7714: LD_EXP 51
7718: PPUSH
7719: CALL_OW 302
7723: IFFALSE 7739
// Say ( Belkov , D11b1-Bel-1 ) else
7725: LD_EXP 51
7729: PPUSH
7730: LD_STRING D11b1-Bel-1
7732: PPUSH
7733: CALL_OW 88
7737: GO 7780
// begin if GetSex ( randomSold ) = sex_male then
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 258
7748: PUSH
7749: LD_INT 1
7751: EQUAL
7752: IFFALSE 7768
// Say ( randomSold , D11b1-RSol1-1 ) else
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_STRING D11b1-RSol1-1
7761: PPUSH
7762: CALL_OW 88
7766: GO 7780
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_STRING D11b1-RFSol1-1
7775: PPUSH
7776: CALL_OW 88
// end ; DialogueOff ;
7780: CALL_OW 7
// exit ;
7784: GO 7786
// end ;
7786: PPOPN 1
7788: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7789: LD_INT 3
7791: PPUSH
7792: LD_EXP 53
7796: PPUSH
7797: CALL_OW 292
7801: PUSH
7802: LD_EXP 25
7806: AND
7807: IFFALSE 8043
7809: GO 7811
7811: DISABLE
7812: LD_INT 0
7814: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7815: LD_EXP 53
7819: PPUSH
7820: LD_INT 3
7822: PPUSH
7823: CALL_OW 235
// jelenaSaved = true ;
7827: LD_ADDR_EXP 21
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7835: LD_EXP 53
7839: PPUSH
7840: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7844: LD_ADDR_VAR 0 1
7848: PUSH
7849: LD_INT 22
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 1
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 50
7871: PUSH
7872: EMPTY
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: PUSH
7885: LD_EXP 53
7889: DIFF
7890: PPUSH
7891: LD_EXP 53
7895: PPUSH
7896: CALL_OW 74
7900: ST_TO_ADDR
// DialogueOn ;
7901: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7905: LD_EXP 53
7909: PPUSH
7910: LD_STRING D11a-Kir-1
7912: PPUSH
7913: CALL_OW 88
// if nearUnit = Belkov then
7917: LD_VAR 0 1
7921: PUSH
7922: LD_EXP 51
7926: EQUAL
7927: IFFALSE 7967
// begin Say ( Belkov , D11a-Bel-1 ) ;
7929: LD_EXP 51
7933: PPUSH
7934: LD_STRING D11a-Bel-1
7936: PPUSH
7937: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7941: LD_EXP 53
7945: PPUSH
7946: LD_STRING D11a-Kir-2
7948: PPUSH
7949: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7953: LD_EXP 51
7957: PPUSH
7958: LD_STRING D11a-Bel-2
7960: PPUSH
7961: CALL_OW 88
// end else
7965: GO 8008
// begin if GetSex ( nearUnit ) = sex_male then
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 258
7976: PUSH
7977: LD_INT 1
7979: EQUAL
7980: IFFALSE 7996
// Say ( nearUnit , D11a-RSol1-2 ) else
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_STRING D11a-RSol1-2
7989: PPUSH
7990: CALL_OW 88
7994: GO 8008
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7996: LD_VAR 0 1
8000: PPUSH
8001: LD_STRING D11a-RFSol1-2
8003: PPUSH
8004: CALL_OW 88
// end ; DialogueOff ;
8008: CALL_OW 7
// wait ( 0 0$5 ) ;
8012: LD_INT 175
8014: PPUSH
8015: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8019: LD_EXP 53
8023: PPUSH
8024: LD_STRING D11c-Kir-1
8026: PPUSH
8027: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8031: LD_EXP 46
8035: PPUSH
8036: LD_STRING D11c-Bur-1
8038: PPUSH
8039: CALL_OW 88
// end ;
8043: PPOPN 1
8045: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8046: LD_EXP 22
8050: PUSH
8051: LD_INT 1
8053: PPUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 1
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PPUSH
8078: CALL_OW 70
8082: PUSH
8083: LD_INT 0
8085: GREATER
8086: AND
8087: IFFALSE 8099
8089: GO 8091
8091: DISABLE
// begin Query ( QExit1 ) ;
8092: LD_STRING QExit1
8094: PPUSH
8095: CALL_OW 97
// end ; end_of_file
8099: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8100: LD_INT 0
8102: PPUSH
8103: PPUSH
// if exist_mode then
8104: LD_VAR 0 2
8108: IFFALSE 8133
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8110: LD_ADDR_VAR 0 4
8114: PUSH
8115: LD_EXP 31
8119: PUSH
8120: LD_VAR 0 1
8124: STR
8125: PPUSH
8126: CALL_OW 34
8130: ST_TO_ADDR
8131: GO 8148
// unit := NewCharacter ( ident ) ;
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 25
8147: ST_TO_ADDR
// result := unit ;
8148: LD_ADDR_VAR 0 3
8152: PUSH
8153: LD_VAR 0 4
8157: ST_TO_ADDR
// end ;
8158: LD_VAR 0 3
8162: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8163: LD_INT 0
8165: PPUSH
8166: PPUSH
8167: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8168: LD_ADDR_VAR 0 1
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_EXP 46
8182: PUSH
8183: LD_EXP 54
8187: PUSH
8188: LD_EXP 51
8192: PUSH
8193: LD_EXP 53
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: DIFF
8204: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8205: LD_ADDR_VAR 0 7
8209: PUSH
8210: LD_VAR 0 1
8214: PUSH
8215: LD_INT 1
8217: PPUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 12
8227: ARRAY
8228: ST_TO_ADDR
// if radio then
8229: LD_VAR 0 4
8233: IFFALSE 8282
// begin if GetSex ( speaker ) = sex_male then
8235: LD_VAR 0 7
8239: PPUSH
8240: CALL_OW 258
8244: PUSH
8245: LD_INT 1
8247: EQUAL
8248: IFFALSE 8266
// SayRadio ( speaker , dialogMID ) else
8250: LD_VAR 0 7
8254: PPUSH
8255: LD_VAR 0 2
8259: PPUSH
8260: CALL_OW 94
8264: GO 8280
// SayRadio ( speaker , dialogFID ) ;
8266: LD_VAR 0 7
8270: PPUSH
8271: LD_VAR 0 3
8275: PPUSH
8276: CALL_OW 94
// end else
8280: GO 8327
// begin if GetSex ( speaker ) = sex_male then
8282: LD_VAR 0 7
8286: PPUSH
8287: CALL_OW 258
8291: PUSH
8292: LD_INT 1
8294: EQUAL
8295: IFFALSE 8313
// Say ( speaker , dialogMID ) else
8297: LD_VAR 0 7
8301: PPUSH
8302: LD_VAR 0 2
8306: PPUSH
8307: CALL_OW 88
8311: GO 8327
// Say ( speaker , dialogFID ) ;
8313: LD_VAR 0 7
8317: PPUSH
8318: LD_VAR 0 3
8322: PPUSH
8323: CALL_OW 88
// end ; result := speaker ;
8327: LD_ADDR_VAR 0 5
8331: PUSH
8332: LD_VAR 0 7
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 5
8341: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8342: LD_INT 0
8344: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 255
8354: PUSH
8355: LD_OWVAR 2
8359: EQUAL
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 302
8370: AND
8371: IFFALSE 8393
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 2
8387: STR
8388: PPUSH
8389: CALL_OW 38
// end ;
8393: LD_VAR 0 3
8397: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8398: LD_INT 0
8400: PPUSH
8401: PPUSH
8402: PPUSH
// resultCharactersToSave = [ ] ;
8403: LD_ADDR_VAR 0 5
8407: PUSH
8408: EMPTY
8409: ST_TO_ADDR
// for unit in characters do
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_VAR 0 1
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8469
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8423: LD_VAR 0 4
8427: PPUSH
8428: CALL_OW 255
8432: PUSH
8433: LD_OWVAR 2
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 4
8443: PPUSH
8444: CALL_OW 302
8448: AND
8449: IFFALSE 8467
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: LD_VAR 0 5
8460: PUSH
8461: LD_VAR 0 4
8465: ADD
8466: ST_TO_ADDR
8467: GO 8420
8469: POP
8470: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_EXP 30
8480: PUSH
8481: LD_VAR 0 2
8485: STR
8486: PPUSH
8487: CALL_OW 38
// end ;
8491: LD_VAR 0 3
8495: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
8506: PPUSH
8507: PPUSH
8508: PPUSH
8509: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 302
8519: NOT
8520: PUSH
8521: LD_VAR 0 4
8525: PUSH
8526: LD_INT 1
8528: EQUAL
8529: OR
8530: PUSH
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_VAR 0 3
8540: PPUSH
8541: CALL_OW 488
8545: NOT
8546: OR
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: CALL_OW 297
8567: PUSH
8568: LD_VAR 0 4
8572: GREATEREQUAL
8573: OR
8574: PUSH
8575: LD_VAR 0 5
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: LD_INT 0
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: IN
8590: NOT
8591: OR
8592: IFFALSE 8596
// exit ;
8594: GO 10153
// attempts = 0 ;
8596: LD_ADDR_VAR 0 17
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8604: LD_ADDR_VAR 0 7
8608: PUSH
8609: EMPTY
8610: ST_TO_ADDR
// list_coords = [ ] ;
8611: LD_ADDR_VAR 0 8
8615: PUSH
8616: EMPTY
8617: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8618: LD_ADDR_VAR 0 9
8622: PUSH
8623: LD_VAR 0 2
8627: PPUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 250
8642: PPUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 251
8652: PPUSH
8653: CALL 10158 0 4
8657: ST_TO_ADDR
// if attempts = 0 then
8658: LD_VAR 0 17
8662: PUSH
8663: LD_INT 0
8665: EQUAL
8666: IFFALSE 8774
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8668: LD_ADDR_VAR 0 10
8672: PUSH
8673: LD_VAR 0 9
8677: PUSH
8678: LD_VAR 0 9
8682: PUSH
8683: LD_INT 1
8685: PLUS
8686: PUSH
8687: LD_VAR 0 9
8691: PUSH
8692: LD_INT 1
8694: MINUS
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8701: LD_VAR 0 10
8705: PUSH
8706: LD_INT 2
8708: ARRAY
8709: PUSH
8710: LD_INT 6
8712: EQUAL
8713: IFFALSE 8736
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8715: LD_ADDR_VAR 0 10
8719: PUSH
8720: LD_VAR 0 10
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: LD_INT 0
8730: PPUSH
8731: CALL_OW 1
8735: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8736: LD_VAR 0 10
8740: PUSH
8741: LD_INT 3
8743: ARRAY
8744: PUSH
8745: LD_INT 1
8747: NEG
8748: EQUAL
8749: IFFALSE 8772
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8751: LD_ADDR_VAR 0 10
8755: PUSH
8756: LD_VAR 0 10
8760: PPUSH
8761: LD_INT 3
8763: PPUSH
8764: LD_INT 5
8766: PPUSH
8767: CALL_OW 1
8771: ST_TO_ADDR
// end else
8772: GO 8811
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8774: LD_ADDR_VAR 0 10
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: LD_INT 5
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: PUSH
8805: LD_VAR 0 9
8809: DIFF
8810: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8811: LD_ADDR_VAR 0 14
8815: PUSH
8816: DOUBLE
8817: LD_INT 1
8819: DEC
8820: ST_TO_ADDR
8821: LD_VAR 0 10
8825: PUSH
8826: LD_INT 0
8828: PLUS
8829: PUSH
8830: FOR_TO
8831: IFFALSE 9153
// case dir_list [ c ] of 0 :
8833: LD_VAR 0 10
8837: PUSH
8838: LD_VAR 0 14
8842: ARRAY
8843: PUSH
8844: LD_INT 0
8846: DOUBLE
8847: EQUAL
8848: IFTRUE 8852
8850: GO 8893
8852: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8853: LD_ADDR_VAR 0 8
8857: PUSH
8858: LD_VAR 0 8
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: LD_VAR 0 2
8870: PUSH
8871: LD_VAR 0 3
8875: PUSH
8876: LD_VAR 0 4
8880: MINUS
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 2
8890: ST_TO_ADDR
8891: GO 9151
8893: LD_INT 1
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8942
8901: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8902: LD_ADDR_VAR 0 8
8906: PUSH
8907: LD_VAR 0 8
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: LD_VAR 0 2
8919: PUSH
8920: LD_VAR 0 4
8924: PLUS
8925: PUSH
8926: LD_VAR 0 3
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 2
8939: ST_TO_ADDR
8940: GO 9151
8942: LD_INT 2
8944: DOUBLE
8945: EQUAL
8946: IFTRUE 8950
8948: GO 8997
8950: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8951: LD_ADDR_VAR 0 8
8955: PUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 2
8968: PUSH
8969: LD_VAR 0 4
8973: PLUS
8974: PUSH
8975: LD_VAR 0 3
8979: PUSH
8980: LD_VAR 0 4
8984: PLUS
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 2
8994: ST_TO_ADDR
8995: GO 9151
8997: LD_INT 3
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9046
9005: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9006: LD_ADDR_VAR 0 8
9010: PUSH
9011: LD_VAR 0 8
9015: PPUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_VAR 0 2
9023: PUSH
9024: LD_VAR 0 3
9028: PUSH
9029: LD_VAR 0 4
9033: PLUS
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PPUSH
9039: CALL_OW 2
9043: ST_TO_ADDR
9044: GO 9151
9046: LD_INT 4
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9095
9054: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9055: LD_ADDR_VAR 0 8
9059: PUSH
9060: LD_VAR 0 8
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: LD_VAR 0 2
9072: PUSH
9073: LD_VAR 0 4
9077: MINUS
9078: PUSH
9079: LD_VAR 0 3
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 2
9092: ST_TO_ADDR
9093: GO 9151
9095: LD_INT 5
9097: DOUBLE
9098: EQUAL
9099: IFTRUE 9103
9101: GO 9150
9103: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9104: LD_ADDR_VAR 0 8
9108: PUSH
9109: LD_VAR 0 8
9113: PPUSH
9114: LD_INT 1
9116: PPUSH
9117: LD_VAR 0 2
9121: PUSH
9122: LD_VAR 0 4
9126: MINUS
9127: PUSH
9128: LD_VAR 0 3
9132: PUSH
9133: LD_VAR 0 4
9137: MINUS
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 2
9147: ST_TO_ADDR
9148: GO 9151
9150: POP
9151: GO 8830
9153: POP
9154: POP
// if dist < 30 then
9155: LD_VAR 0 4
9159: PUSH
9160: LD_INT 30
9162: LESS
9163: IFFALSE 9175
// c = 1 else
9165: LD_ADDR_VAR 0 14
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
9173: GO 9183
// c = 2 ;
9175: LD_ADDR_VAR 0 14
9179: PUSH
9180: LD_INT 2
9182: ST_TO_ADDR
// b = 1 ;
9183: LD_ADDR_VAR 0 11
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9191: LD_VAR 0 11
9195: PUSH
9196: LD_VAR 0 4
9200: PUSH
9201: LD_INT 1
9203: MINUS
9204: LESSEQUAL
9205: IFFALSE 9633
// begin if 0 in dir_list and 1 in dir_list then
9207: LD_INT 0
9209: PUSH
9210: LD_VAR 0 10
9214: IN
9215: PUSH
9216: LD_INT 1
9218: PUSH
9219: LD_VAR 0 10
9223: IN
9224: AND
9225: IFFALSE 9277
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9227: LD_ADDR_VAR 0 8
9231: PUSH
9232: LD_VAR 0 8
9236: PPUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_VAR 0 2
9244: PUSH
9245: LD_VAR 0 11
9249: PLUS
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 4
9260: MINUS
9261: PUSH
9262: LD_VAR 0 11
9266: PLUS
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 2
9276: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9277: LD_INT 1
9279: PUSH
9280: LD_VAR 0 10
9284: IN
9285: PUSH
9286: LD_INT 2
9288: PUSH
9289: LD_VAR 0 10
9293: IN
9294: AND
9295: IFFALSE 9341
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9297: LD_ADDR_VAR 0 8
9301: PUSH
9302: LD_VAR 0 8
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 2
9314: PUSH
9315: LD_VAR 0 4
9319: PLUS
9320: PUSH
9321: LD_VAR 0 3
9325: PUSH
9326: LD_VAR 0 11
9330: PLUS
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 2
9340: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9341: LD_INT 2
9343: PUSH
9344: LD_VAR 0 10
9348: IN
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_VAR 0 10
9357: IN
9358: AND
9359: IFFALSE 9411
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9361: LD_ADDR_VAR 0 8
9365: PUSH
9366: LD_VAR 0 8
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_VAR 0 4
9383: PLUS
9384: PUSH
9385: LD_VAR 0 11
9389: MINUS
9390: PUSH
9391: LD_VAR 0 3
9395: PUSH
9396: LD_VAR 0 4
9400: PLUS
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 2
9410: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9411: LD_INT 3
9413: PUSH
9414: LD_VAR 0 10
9418: IN
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_VAR 0 10
9427: IN
9428: AND
9429: IFFALSE 9481
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9431: LD_ADDR_VAR 0 8
9435: PUSH
9436: LD_VAR 0 8
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: LD_VAR 0 2
9448: PUSH
9449: LD_VAR 0 11
9453: MINUS
9454: PUSH
9455: LD_VAR 0 3
9459: PUSH
9460: LD_VAR 0 4
9464: PLUS
9465: PUSH
9466: LD_VAR 0 11
9470: MINUS
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PPUSH
9476: CALL_OW 2
9480: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9481: LD_INT 4
9483: PUSH
9484: LD_VAR 0 10
9488: IN
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_VAR 0 10
9497: IN
9498: AND
9499: IFFALSE 9545
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9501: LD_ADDR_VAR 0 8
9505: PUSH
9506: LD_VAR 0 8
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_VAR 0 4
9523: MINUS
9524: PUSH
9525: LD_VAR 0 3
9529: PUSH
9530: LD_VAR 0 11
9534: MINUS
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 2
9544: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9545: LD_INT 5
9547: PUSH
9548: LD_VAR 0 10
9552: IN
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_VAR 0 10
9561: IN
9562: AND
9563: IFFALSE 9615
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9565: LD_ADDR_VAR 0 8
9569: PUSH
9570: LD_VAR 0 8
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_VAR 0 4
9587: MINUS
9588: PUSH
9589: LD_VAR 0 11
9593: PLUS
9594: PUSH
9595: LD_VAR 0 3
9599: PUSH
9600: LD_VAR 0 4
9604: MINUS
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PPUSH
9610: CALL_OW 2
9614: ST_TO_ADDR
// b = b + c end ;
9615: LD_ADDR_VAR 0 11
9619: PUSH
9620: LD_VAR 0 11
9624: PUSH
9625: LD_VAR 0 14
9629: PLUS
9630: ST_TO_ADDR
9631: GO 9191
// if list_coords = 0 then
9633: LD_VAR 0 8
9637: PUSH
9638: LD_INT 0
9640: EQUAL
9641: IFFALSE 9645
// exit ;
9643: GO 10153
// repeat min_dist = 5000 ;
9645: LD_ADDR_VAR 0 12
9649: PUSH
9650: LD_INT 5000
9652: ST_TO_ADDR
// for b in list_coords do
9653: LD_ADDR_VAR 0 11
9657: PUSH
9658: LD_VAR 0 8
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9723
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9666: LD_ADDR_VAR 0 13
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_VAR 0 11
9680: PUSH
9681: LD_INT 1
9683: ARRAY
9684: PPUSH
9685: LD_VAR 0 11
9689: PUSH
9690: LD_INT 2
9692: ARRAY
9693: PPUSH
9694: CALL_OW 297
9698: ST_TO_ADDR
// if temp_dist < min_dist then
9699: LD_VAR 0 13
9703: PUSH
9704: LD_VAR 0 12
9708: LESS
9709: IFFALSE 9721
// min_dist = temp_dist ;
9711: LD_ADDR_VAR 0 12
9715: PUSH
9716: LD_VAR 0 13
9720: ST_TO_ADDR
// end ;
9721: GO 9663
9723: POP
9724: POP
// c = 0 ;
9725: LD_ADDR_VAR 0 14
9729: PUSH
9730: LD_INT 0
9732: ST_TO_ADDR
// repeat c = c + 1 ;
9733: LD_ADDR_VAR 0 14
9737: PUSH
9738: LD_VAR 0 14
9742: PUSH
9743: LD_INT 1
9745: PLUS
9746: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_VAR 0 8
9756: PUSH
9757: LD_VAR 0 14
9761: ARRAY
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PPUSH
9767: LD_VAR 0 8
9771: PUSH
9772: LD_VAR 0 14
9776: ARRAY
9777: PUSH
9778: LD_INT 2
9780: ARRAY
9781: PPUSH
9782: CALL_OW 297
9786: PUSH
9787: LD_VAR 0 12
9791: EQUAL
9792: IFFALSE 9857
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_VAR 0 7
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: LD_VAR 0 8
9811: PUSH
9812: LD_VAR 0 14
9816: ARRAY
9817: PPUSH
9818: CALL_OW 2
9822: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9823: LD_ADDR_VAR 0 8
9827: PUSH
9828: LD_VAR 0 8
9832: PPUSH
9833: LD_VAR 0 14
9837: PPUSH
9838: CALL_OW 3
9842: ST_TO_ADDR
// c = c - 1 ;
9843: LD_ADDR_VAR 0 14
9847: PUSH
9848: LD_VAR 0 14
9852: PUSH
9853: LD_INT 1
9855: MINUS
9856: ST_TO_ADDR
// end ; until c = list_coords ;
9857: LD_VAR 0 14
9861: PUSH
9862: LD_VAR 0 8
9866: EQUAL
9867: IFFALSE 9733
// c = 0 ;
9869: LD_ADDR_VAR 0 14
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// if list_nearest > 0 then
9877: LD_VAR 0 7
9881: PUSH
9882: LD_INT 0
9884: GREATER
9885: IFFALSE 10027
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9887: LD_ADDR_VAR 0 15
9891: PUSH
9892: LD_INT 1
9894: PPUSH
9895: LD_VAR 0 7
9899: PPUSH
9900: CALL_OW 12
9904: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9905: LD_ADDR_VAR 0 16
9909: PUSH
9910: LD_VAR 0 7
9914: PUSH
9915: LD_VAR 0 15
9919: ARRAY
9920: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9921: LD_VAR 0 16
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: LD_VAR 0 16
9934: PUSH
9935: LD_INT 2
9937: ARRAY
9938: PPUSH
9939: CALL_OW 488
9943: PUSH
9944: LD_INT 0
9946: GREATER
9947: PUSH
9948: LD_VAR 0 16
9952: PUSH
9953: LD_INT 1
9955: ARRAY
9956: PPUSH
9957: LD_VAR 0 16
9961: PUSH
9962: LD_INT 2
9964: ARRAY
9965: PPUSH
9966: CALL_OW 428
9970: PUSH
9971: LD_INT 0
9973: EQUAL
9974: AND
9975: IFFALSE 9987
// c = 1 else
9977: LD_ADDR_VAR 0 14
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
9985: GO 10007
// list_nearest = Delete ( list_nearest , rand_num ) ;
9987: LD_ADDR_VAR 0 7
9991: PUSH
9992: LD_VAR 0 7
9996: PPUSH
9997: LD_VAR 0 15
10001: PPUSH
10002: CALL_OW 3
10006: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10007: LD_VAR 0 14
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_VAR 0 7
10020: PUSH
10021: LD_INT 0
10023: EQUAL
10024: OR
10025: IFFALSE 9887
// end ; until c = 1 or list_coords = 0 ;
10027: LD_VAR 0 14
10031: PUSH
10032: LD_INT 1
10034: EQUAL
10035: PUSH
10036: LD_VAR 0 8
10040: PUSH
10041: LD_INT 0
10043: EQUAL
10044: OR
10045: IFFALSE 9645
// attempts = attempts + 1 ;
10047: LD_ADDR_VAR 0 17
10051: PUSH
10052: LD_VAR 0 17
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10061: LD_VAR 0 14
10065: PUSH
10066: LD_INT 1
10068: EQUAL
10069: PUSH
10070: LD_VAR 0 17
10074: PUSH
10075: LD_INT 1
10077: GREATER
10078: OR
10079: IFFALSE 8604
// if c = 1 then
10081: LD_VAR 0 14
10085: PUSH
10086: LD_INT 1
10088: EQUAL
10089: IFFALSE 10153
// if add then
10091: LD_VAR 0 5
10095: IFFALSE 10126
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10097: LD_VAR 0 1
10101: PPUSH
10102: LD_VAR 0 16
10106: PUSH
10107: LD_INT 1
10109: ARRAY
10110: PPUSH
10111: LD_VAR 0 16
10115: PUSH
10116: LD_INT 2
10118: ARRAY
10119: PPUSH
10120: CALL_OW 171
10124: GO 10153
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10126: LD_VAR 0 1
10130: PPUSH
10131: LD_VAR 0 16
10135: PUSH
10136: LD_INT 1
10138: ARRAY
10139: PPUSH
10140: LD_VAR 0 16
10144: PUSH
10145: LD_INT 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 111
// end ;
10153: LD_VAR 0 6
10157: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
10165: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 2
10175: PPUSH
10176: CALL_OW 488
10180: NOT
10181: PUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_VAR 0 4
10191: PPUSH
10192: CALL_OW 488
10196: NOT
10197: OR
10198: IFFALSE 10211
// begin result = - 1 ;
10200: LD_ADDR_VAR 0 5
10204: PUSH
10205: LD_INT 1
10207: NEG
10208: ST_TO_ADDR
// exit ;
10209: GO 10371
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10211: LD_ADDR_VAR 0 6
10215: PUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: LD_VAR 0 2
10225: PPUSH
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_VAR 0 4
10235: PPUSH
10236: CALL_OW 298
10240: ST_TO_ADDR
// dist_2 = 99999 ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_INT 99999
10248: ST_TO_ADDR
// for b = 0 to 5 do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 0
10257: DEC
10258: ST_TO_ADDR
10259: LD_INT 5
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10359
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10265: LD_ADDR_VAR 0 9
10269: PUSH
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_VAR 0 8
10279: PPUSH
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 272
10289: PPUSH
10290: LD_VAR 0 2
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: LD_VAR 0 6
10304: PPUSH
10305: CALL_OW 273
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_VAR 0 4
10319: PPUSH
10320: CALL_OW 298
10324: ST_TO_ADDR
// if temp_dist < dist_2 then
10325: LD_VAR 0 9
10329: PUSH
10330: LD_VAR 0 7
10334: LESS
10335: IFFALSE 10357
// begin dist_2 = temp_dist ;
10337: LD_ADDR_VAR 0 7
10341: PUSH
10342: LD_VAR 0 9
10346: ST_TO_ADDR
// dir = b ;
10347: LD_ADDR_VAR 0 10
10351: PUSH
10352: LD_VAR 0 8
10356: ST_TO_ADDR
// end ; end ;
10357: GO 10262
10359: POP
10360: POP
// result = dir ;
10361: LD_ADDR_VAR 0 5
10365: PUSH
10366: LD_VAR 0 10
10370: ST_TO_ADDR
// end ;
10371: LD_VAR 0 5
10375: RET
// export function MoveToHill ; begin
10376: LD_INT 0
10378: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_INT 65
10386: PPUSH
10387: LD_INT 59
10389: PPUSH
10390: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10394: LD_EXP 47
10398: PPUSH
10399: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10403: LD_EXP 48
10407: PPUSH
10408: LD_INT 65
10410: PPUSH
10411: LD_INT 58
10413: PPUSH
10414: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10418: LD_EXP 48
10422: PPUSH
10423: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10427: LD_EXP 49
10431: PPUSH
10432: LD_INT 64
10434: PPUSH
10435: LD_INT 57
10437: PPUSH
10438: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10442: LD_EXP 49
10446: PPUSH
10447: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10451: LD_EXP 50
10455: PPUSH
10456: LD_INT 64
10458: PPUSH
10459: LD_INT 56
10461: PPUSH
10462: CALL_OW 111
// AddComCrawl ( Balei ) ;
10466: LD_EXP 50
10470: PPUSH
10471: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10475: LD_EXP 51
10479: PPUSH
10480: LD_INT 63
10482: PPUSH
10483: LD_INT 55
10485: PPUSH
10486: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10490: LD_EXP 51
10494: PPUSH
10495: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10499: LD_EXP 52
10503: PPUSH
10504: LD_INT 66
10506: PPUSH
10507: LD_INT 58
10509: PPUSH
10510: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10514: LD_EXP 52
10518: PPUSH
10519: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10523: LD_EXP 54
10527: PPUSH
10528: CALL_OW 255
10532: PUSH
10533: LD_INT 6
10535: EQUAL
10536: PUSH
10537: LD_EXP 12
10541: AND
10542: IFFALSE 10568
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10544: LD_EXP 54
10548: PPUSH
10549: LD_INT 63
10551: PPUSH
10552: LD_INT 54
10554: PPUSH
10555: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10559: LD_EXP 54
10563: PPUSH
10564: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10568: LD_EXP 47
10572: PPUSH
10573: LD_INT 65
10575: PPUSH
10576: LD_INT 59
10578: PPUSH
10579: CALL_OW 297
10583: PUSH
10584: LD_INT 7
10586: LESS
10587: IFFALSE 10613
// begin ComCrawl ( Pokryshkin ) ;
10589: LD_EXP 47
10593: PPUSH
10594: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10598: LD_EXP 47
10602: PPUSH
10603: LD_INT 65
10605: PPUSH
10606: LD_INT 59
10608: PPUSH
10609: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10613: LD_EXP 48
10617: PPUSH
10618: LD_INT 65
10620: PPUSH
10621: LD_INT 58
10623: PPUSH
10624: CALL_OW 297
10628: PUSH
10629: LD_INT 7
10631: LESS
10632: IFFALSE 10658
// begin ComCrawl ( Saseda ) ;
10634: LD_EXP 48
10638: PPUSH
10639: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10643: LD_EXP 48
10647: PPUSH
10648: LD_INT 65
10650: PPUSH
10651: LD_INT 58
10653: PPUSH
10654: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10658: LD_EXP 49
10662: PPUSH
10663: LD_INT 64
10665: PPUSH
10666: LD_INT 57
10668: PPUSH
10669: CALL_OW 297
10673: PUSH
10674: LD_INT 7
10676: LESS
10677: IFFALSE 10703
// begin ComCrawl ( Jaworska ) ;
10679: LD_EXP 49
10683: PPUSH
10684: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10688: LD_EXP 49
10692: PPUSH
10693: LD_INT 64
10695: PPUSH
10696: LD_INT 57
10698: PPUSH
10699: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10703: LD_EXP 50
10707: PPUSH
10708: LD_INT 64
10710: PPUSH
10711: LD_INT 56
10713: PPUSH
10714: CALL_OW 297
10718: PUSH
10719: LD_INT 7
10721: LESS
10722: IFFALSE 10748
// begin ComCrawl ( Balei ) ;
10724: LD_EXP 50
10728: PPUSH
10729: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10733: LD_EXP 50
10737: PPUSH
10738: LD_INT 64
10740: PPUSH
10741: LD_INT 56
10743: PPUSH
10744: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10748: LD_EXP 51
10752: PPUSH
10753: LD_INT 63
10755: PPUSH
10756: LD_INT 55
10758: PPUSH
10759: CALL_OW 297
10763: PUSH
10764: LD_INT 7
10766: LESS
10767: IFFALSE 10793
// begin ComCrawl ( Belkov ) ;
10769: LD_EXP 51
10773: PPUSH
10774: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10778: LD_EXP 51
10782: PPUSH
10783: LD_INT 63
10785: PPUSH
10786: LD_INT 55
10788: PPUSH
10789: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10793: LD_EXP 52
10797: PPUSH
10798: LD_INT 66
10800: PPUSH
10801: LD_INT 58
10803: PPUSH
10804: CALL_OW 297
10808: PUSH
10809: LD_INT 7
10811: LESS
10812: IFFALSE 10838
// begin ComCrawl ( Jaunzeme ) ;
10814: LD_EXP 52
10818: PPUSH
10819: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10823: LD_EXP 52
10827: PPUSH
10828: LD_INT 66
10830: PPUSH
10831: LD_INT 58
10833: PPUSH
10834: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10838: LD_EXP 54
10842: PPUSH
10843: LD_INT 63
10845: PPUSH
10846: LD_INT 54
10848: PPUSH
10849: CALL_OW 297
10853: PUSH
10854: LD_INT 7
10856: LESS
10857: PUSH
10858: LD_EXP 54
10862: PPUSH
10863: CALL_OW 255
10867: PUSH
10868: LD_INT 6
10870: EQUAL
10871: AND
10872: PUSH
10873: LD_EXP 12
10877: AND
10878: IFFALSE 10904
// begin ComCrawl ( Gnyevko ) ;
10880: LD_EXP 54
10884: PPUSH
10885: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10889: LD_EXP 54
10893: PPUSH
10894: LD_INT 63
10896: PPUSH
10897: LD_INT 54
10899: PPUSH
10900: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10904: LD_INT 35
10906: PPUSH
10907: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10911: LD_EXP 42
10915: PPUSH
10916: CALL_OW 303
10920: PUSH
10921: LD_EXP 42
10925: PPUSH
10926: CALL_OW 301
10930: OR
10931: IFFALSE 10568
// end ;
10933: LD_VAR 0 1
10937: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10938: LD_EXP 42
10942: PPUSH
10943: CALL_OW 303
10947: NOT
10948: PUSH
10949: LD_EXP 42
10953: PPUSH
10954: CALL_OW 301
10958: NOT
10959: OR
10960: PUSH
10961: LD_EXP 15
10965: AND
10966: IFFALSE 11308
10968: GO 10970
10970: DISABLE
// begin enable ;
10971: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10972: LD_EXP 47
10976: PPUSH
10977: LD_INT 65
10979: PPUSH
10980: LD_INT 59
10982: PPUSH
10983: CALL_OW 297
10987: PUSH
10988: LD_INT 7
10990: LESS
10991: IFFALSE 11017
// begin ComCrawl ( Pokryshkin ) ;
10993: LD_EXP 47
10997: PPUSH
10998: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11002: LD_EXP 47
11006: PPUSH
11007: LD_INT 65
11009: PPUSH
11010: LD_INT 59
11012: PPUSH
11013: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11017: LD_EXP 48
11021: PPUSH
11022: LD_INT 65
11024: PPUSH
11025: LD_INT 58
11027: PPUSH
11028: CALL_OW 297
11032: PUSH
11033: LD_INT 7
11035: LESS
11036: IFFALSE 11062
// begin ComCrawl ( Saseda ) ;
11038: LD_EXP 48
11042: PPUSH
11043: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11047: LD_EXP 48
11051: PPUSH
11052: LD_INT 65
11054: PPUSH
11055: LD_INT 58
11057: PPUSH
11058: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11062: LD_EXP 49
11066: PPUSH
11067: LD_INT 64
11069: PPUSH
11070: LD_INT 57
11072: PPUSH
11073: CALL_OW 297
11077: PUSH
11078: LD_INT 7
11080: LESS
11081: IFFALSE 11107
// begin ComCrawl ( Jaworska ) ;
11083: LD_EXP 49
11087: PPUSH
11088: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11092: LD_EXP 49
11096: PPUSH
11097: LD_INT 64
11099: PPUSH
11100: LD_INT 57
11102: PPUSH
11103: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11107: LD_EXP 50
11111: PPUSH
11112: LD_INT 64
11114: PPUSH
11115: LD_INT 56
11117: PPUSH
11118: CALL_OW 297
11122: PUSH
11123: LD_INT 7
11125: LESS
11126: IFFALSE 11152
// begin ComCrawl ( Balei ) ;
11128: LD_EXP 50
11132: PPUSH
11133: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11137: LD_EXP 50
11141: PPUSH
11142: LD_INT 64
11144: PPUSH
11145: LD_INT 56
11147: PPUSH
11148: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11152: LD_EXP 51
11156: PPUSH
11157: LD_INT 63
11159: PPUSH
11160: LD_INT 55
11162: PPUSH
11163: CALL_OW 297
11167: PUSH
11168: LD_INT 7
11170: LESS
11171: IFFALSE 11197
// begin ComCrawl ( Belkov ) ;
11173: LD_EXP 51
11177: PPUSH
11178: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11182: LD_EXP 51
11186: PPUSH
11187: LD_INT 63
11189: PPUSH
11190: LD_INT 55
11192: PPUSH
11193: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11197: LD_EXP 52
11201: PPUSH
11202: LD_INT 66
11204: PPUSH
11205: LD_INT 58
11207: PPUSH
11208: CALL_OW 297
11212: PUSH
11213: LD_INT 7
11215: LESS
11216: IFFALSE 11242
// begin ComCrawl ( Jaunzeme ) ;
11218: LD_EXP 52
11222: PPUSH
11223: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11227: LD_EXP 52
11231: PPUSH
11232: LD_INT 66
11234: PPUSH
11235: LD_INT 58
11237: PPUSH
11238: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11242: LD_EXP 54
11246: PPUSH
11247: LD_INT 63
11249: PPUSH
11250: LD_INT 54
11252: PPUSH
11253: CALL_OW 297
11257: PUSH
11258: LD_INT 7
11260: LESS
11261: PUSH
11262: LD_EXP 54
11266: PPUSH
11267: CALL_OW 255
11271: PUSH
11272: LD_INT 6
11274: EQUAL
11275: AND
11276: PUSH
11277: LD_EXP 12
11281: AND
11282: IFFALSE 11308
// begin ComCrawl ( Gnyevko ) ;
11284: LD_EXP 54
11288: PPUSH
11289: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11293: LD_EXP 54
11297: PPUSH
11298: LD_INT 63
11300: PPUSH
11301: LD_INT 54
11303: PPUSH
11304: CALL_OW 171
// end ; end ; end_of_file
11308: END
// export function BurlakDying ; begin
11309: LD_INT 0
11311: PPUSH
// YouLost ( Burlak ) ;
11312: LD_STRING Burlak
11314: PPUSH
11315: CALL_OW 104
// end ;
11319: LD_VAR 0 1
11323: RET
// every 0 0$1 trigger kirovSolds = 0 do
11324: LD_EXP 56
11328: PUSH
11329: LD_INT 0
11331: EQUAL
11332: IFFALSE 11344
11334: GO 11336
11336: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11337: LD_STRING KirovSoldsDie
11339: PPUSH
11340: CALL_OW 104
11344: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11345: LD_EXP 22
11349: PUSH
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 21
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 71
11381: PUSH
11382: LD_INT 0
11384: EQUAL
11385: AND
11386: IFFALSE 11665
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11394: LD_EXP 53
11398: PPUSH
11399: CALL_OW 302
11403: PUSH
11404: LD_EXP 53
11408: PPUSH
11409: CALL_OW 255
11413: PUSH
11414: LD_INT 8
11416: EQUAL
11417: AND
11418: PUSH
11419: LD_EXP 54
11423: PPUSH
11424: CALL_OW 302
11428: PUSH
11429: LD_EXP 54
11433: PPUSH
11434: CALL_OW 255
11438: PUSH
11439: LD_INT 8
11441: EQUAL
11442: AND
11443: OR
11444: IFFALSE 11576
// begin case Query ( QExit2 ) of 1 :
11446: LD_STRING QExit2
11448: PPUSH
11449: CALL_OW 97
11453: PUSH
11454: LD_INT 1
11456: DOUBLE
11457: EQUAL
11458: IFTRUE 11462
11460: GO 11554
11462: POP
// begin if IsOk ( Belkov ) then
11463: LD_EXP 51
11467: PPUSH
11468: CALL_OW 302
11472: IFFALSE 11488
// Say ( Belkov , D12-Bel-1 ) else
11474: LD_EXP 51
11478: PPUSH
11479: LD_STRING D12-Bel-1
11481: PPUSH
11482: CALL_OW 88
11486: GO 11548
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11488: LD_INT 22
11490: PUSH
11491: LD_INT 3
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 21
11500: PUSH
11501: LD_INT 1
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 50
11510: PUSH
11511: EMPTY
11512: LIST
11513: PUSH
11514: LD_INT 26
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: PPUSH
11535: LD_STRING D12-RSol1-1
11537: PPUSH
11538: LD_STRING 
11540: PPUSH
11541: LD_INT 0
11543: PPUSH
11544: CALL 8163 0 4
// FinishMission ;
11548: CALL 11668 0 0
// end ; 2 :
11552: GO 11574
11554: LD_INT 2
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11573
11562: POP
// begin wait ( 0 0$5 ) ;
11563: LD_INT 175
11565: PPUSH
11566: CALL_OW 67
// enable ;
11570: ENABLE
// end ; end ;
11571: GO 11574
11573: POP
// end else
11574: GO 11665
// begin if IsOk ( Belkov ) then
11576: LD_EXP 51
11580: PPUSH
11581: CALL_OW 302
11585: IFFALSE 11601
// Say ( Belkov , D12-Bel-1 ) else
11587: LD_EXP 51
11591: PPUSH
11592: LD_STRING D12-Bel-1
11594: PPUSH
11595: CALL_OW 88
11599: GO 11661
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11601: LD_INT 22
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 50
11623: PUSH
11624: EMPTY
11625: LIST
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_STRING D12-RSol1-1
11650: PPUSH
11651: LD_STRING 
11653: PPUSH
11654: LD_INT 0
11656: PPUSH
11657: CALL 8163 0 4
// FinishMission ;
11661: CALL 11668 0 0
// end ; end ;
11665: PPOPN 1
11667: END
// function FinishMission ; begin
11668: LD_INT 0
11670: PPUSH
// SetRewards ;
11671: CALL 11692 0 0
// SavePlayerCharacters ;
11675: CALL 12043 0 0
// SaveGlobalVariables ;
11679: CALL 12173 0 0
// YouWin ;
11683: CALL_OW 103
// end ;
11687: LD_VAR 0 1
11691: RET
// function SetRewards ; begin
11692: LD_INT 0
11694: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11695: LD_EXP 19
11699: NOT
11700: PUSH
11701: LD_EXP 20
11705: NOT
11706: AND
11707: IFFALSE 11719
// AddMedal ( NoEscape , 1 ) ;
11709: LD_STRING NoEscape
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11719: LD_EXP 19
11723: PUSH
11724: LD_EXP 20
11728: NOT
11729: AND
11730: IFFALSE 11743
// AddMedal ( NoEscape , - 1 ) ;
11732: LD_STRING NoEscape
11734: PPUSH
11735: LD_INT 1
11737: NEG
11738: PPUSH
11739: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11743: LD_EXP 19
11747: NOT
11748: PUSH
11749: LD_EXP 20
11753: AND
11754: IFFALSE 11767
// AddMedal ( NoEscape , - 2 ) ;
11756: LD_STRING NoEscape
11758: PPUSH
11759: LD_INT 2
11761: NEG
11762: PPUSH
11763: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11767: LD_EXP 19
11771: PUSH
11772: LD_EXP 20
11776: AND
11777: IFFALSE 11790
// AddMedal ( NoEscape , - 3 ) ;
11779: LD_STRING NoEscape
11781: PPUSH
11782: LD_INT 3
11784: NEG
11785: PPUSH
11786: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11790: LD_EXP 12
11794: PUSH
11795: LD_EXP 54
11799: PPUSH
11800: CALL_OW 302
11804: AND
11805: PUSH
11806: LD_EXP 21
11810: AND
11811: PUSH
11812: LD_EXP 53
11816: PPUSH
11817: CALL_OW 302
11821: AND
11822: IFFALSE 11834
// AddMedal ( Gnyevko , 1 ) ;
11824: LD_STRING Gnyevko
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11834: LD_EXP 12
11838: NOT
11839: PUSH
11840: LD_EXP 21
11844: AND
11845: PUSH
11846: LD_EXP 53
11850: PPUSH
11851: CALL_OW 302
11855: AND
11856: IFFALSE 11869
// AddMedal ( Gnyevko , - 1 ) ;
11858: LD_STRING Gnyevko
11860: PPUSH
11861: LD_INT 1
11863: NEG
11864: PPUSH
11865: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11869: LD_EXP 12
11873: PUSH
11874: LD_EXP 21
11878: NOT
11879: PUSH
11880: LD_EXP 54
11884: PPUSH
11885: CALL_OW 302
11889: NOT
11890: OR
11891: PUSH
11892: LD_EXP 53
11896: PPUSH
11897: CALL_OW 302
11901: NOT
11902: OR
11903: AND
11904: IFFALSE 11917
// AddMedal ( Gnyevko , - 2 ) ;
11906: LD_STRING Gnyevko
11908: PPUSH
11909: LD_INT 2
11911: NEG
11912: PPUSH
11913: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11917: LD_EXP 12
11921: NOT
11922: PUSH
11923: LD_EXP 21
11927: NOT
11928: AND
11929: PUSH
11930: LD_EXP 54
11934: PPUSH
11935: CALL_OW 302
11939: NOT
11940: PUSH
11941: LD_EXP 53
11945: PPUSH
11946: CALL_OW 302
11950: NOT
11951: AND
11952: OR
11953: IFFALSE 11966
// AddMedal ( Gnyevko , - 3 ) ;
11955: LD_STRING Gnyevko
11957: PPUSH
11958: LD_INT 3
11960: NEG
11961: PPUSH
11962: CALL_OW 101
// if lostComradesCounter = 0 then
11966: LD_EXP 23
11970: PUSH
11971: LD_INT 0
11973: EQUAL
11974: IFFALSE 11988
// AddMedal ( NoLosses , 1 ) else
11976: LD_STRING NoLosses
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 101
11986: GO 11998
// AddMedal ( NoLosses , 0 ) ;
11988: LD_STRING NoLosses
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 101
// GiveMedals ( Main ) ;
11998: LD_STRING Main
12000: PPUSH
12001: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12005: LD_INT 22
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: PPUSH
12034: CALL_OW 43
// end ;
12038: LD_VAR 0 1
12042: RET
// function SavePlayerCharacters ; var others ; begin
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12047: LD_EXP 46
12051: PPUSH
12052: LD_STRING Burlak
12054: PPUSH
12055: CALL 8342 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12059: LD_EXP 54
12063: PPUSH
12064: LD_STRING Gnyevko
12066: PPUSH
12067: CALL 8342 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12071: LD_EXP 51
12075: PPUSH
12076: LD_STRING Belkov
12078: PPUSH
12079: CALL 8342 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12083: LD_EXP 53
12087: PPUSH
12088: LD_STRING Kirilenkova
12090: PPUSH
12091: CALL 8342 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12095: LD_ADDR_VAR 0 2
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 21
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: PUSH
12129: LD_EXP 46
12133: PUSH
12134: LD_EXP 54
12138: PUSH
12139: LD_EXP 51
12143: PUSH
12144: LD_EXP 53
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: DIFF
12155: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12156: LD_VAR 0 2
12160: PPUSH
12161: LD_STRING other_survivors
12163: PPUSH
12164: CALL 8398 0 2
// end ;
12168: LD_VAR 0 1
12172: RET
// function SaveGlobalVariables ; begin
12173: LD_INT 0
12175: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12176: LD_EXP 1
12180: PPUSH
12181: LD_STRING 01_GladstoneStatus
12183: PPUSH
12184: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12188: LD_EXP 2
12192: PPUSH
12193: LD_STRING 01_JohannaStatus
12195: PPUSH
12196: CALL_OW 39
// end ; end_of_file
12200: LD_VAR 0 1
12204: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12205: LD_INT 0
12207: PPUSH
12208: PPUSH
12209: PPUSH
// uc_side = 1 ;
12210: LD_ADDR_OWVAR 20
12214: PUSH
12215: LD_INT 1
12217: ST_TO_ADDR
// hc_class := 1 ;
12218: LD_ADDR_OWVAR 28
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// hc_sex := sex_male ;
12226: LD_ADDR_OWVAR 27
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12234: LD_ADDR_OWVAR 33
12238: PUSH
12239: LD_STRING AmGalRemake
12241: ST_TO_ADDR
// hc_face_number := 1 ;
12242: LD_ADDR_OWVAR 34
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// hc_name := Charles Brown ;
12250: LD_ADDR_OWVAR 26
12254: PUSH
12255: LD_STRING Charles Brown
12257: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12258: LD_ADDR_OWVAR 29
12262: PUSH
12263: LD_INT 12
12265: PUSH
12266: LD_INT 11
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12273: LD_ADDR_OWVAR 31
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: LD_INT 0
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: LD_INT 1
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: ST_TO_ADDR
// Charles = CreateHuman ;
12296: LD_ADDR_EXP 42
12300: PUSH
12301: CALL_OW 44
12305: ST_TO_ADDR
// hc_class := 1 ;
12306: LD_ADDR_OWVAR 28
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// hc_sex := sex_female ;
12314: LD_ADDR_OWVAR 27
12318: PUSH
12319: LD_INT 2
12321: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12322: LD_ADDR_OWVAR 33
12326: PUSH
12327: LD_STRING AmGalRemake
12329: ST_TO_ADDR
// hc_face_number := 2 ;
12330: LD_ADDR_OWVAR 34
12334: PUSH
12335: LD_INT 2
12337: ST_TO_ADDR
// hc_name := Johanna Holland ;
12338: LD_ADDR_OWVAR 26
12342: PUSH
12343: LD_STRING Johanna Holland
12345: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12346: LD_ADDR_OWVAR 29
12350: PUSH
12351: LD_INT 12
12353: PUSH
12354: LD_INT 11
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12361: LD_ADDR_OWVAR 31
12365: PUSH
12366: LD_EXP 36
12370: PUSH
12371: LD_INT 0
12373: PPUSH
12374: LD_INT 2
12376: PPUSH
12377: CALL_OW 12
12381: PUSH
12382: LD_INT 0
12384: PPUSH
12385: LD_INT 2
12387: PPUSH
12388: CALL_OW 12
12392: PUSH
12393: LD_INT 0
12395: PPUSH
12396: LD_INT 2
12398: PPUSH
12399: CALL_OW 12
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: ST_TO_ADDR
// Johanna = CreateHuman ;
12410: LD_ADDR_EXP 43
12414: PUSH
12415: CALL_OW 44
12419: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12420: LD_EXP 43
12424: PPUSH
12425: LD_INT 19
12427: PPUSH
12428: LD_INT 0
12430: PPUSH
12431: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12435: LD_EXP 43
12439: PPUSH
12440: LD_INT 23
12442: PPUSH
12443: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12447: LD_ADDR_EXP 44
12451: PUSH
12452: LD_STRING Gladstone
12454: PPUSH
12455: LD_INT 0
12457: PPUSH
12458: CALL 8100 0 2
12462: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12463: LD_EXP 44
12467: PPUSH
12468: LD_INT 22
12470: PPUSH
12471: CALL_OW 52
// amApemans = [ ] ;
12475: LD_ADDR_EXP 45
12479: PUSH
12480: EMPTY
12481: ST_TO_ADDR
// for i := 1 to amApeAmount do
12482: LD_ADDR_VAR 0 2
12486: PUSH
12487: DOUBLE
12488: LD_INT 1
12490: DEC
12491: ST_TO_ADDR
12492: LD_EXP 35
12496: PUSH
12497: FOR_TO
12498: IFFALSE 12613
// begin hc_class := class_apeman ;
12500: LD_ADDR_OWVAR 28
12504: PUSH
12505: LD_INT 12
12507: ST_TO_ADDR
// hc_gallery :=  ;
12508: LD_ADDR_OWVAR 33
12512: PUSH
12513: LD_STRING 
12515: ST_TO_ADDR
// hc_name :=  ;
12516: LD_ADDR_OWVAR 26
12520: PUSH
12521: LD_STRING 
12523: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12524: LD_ADDR_OWVAR 31
12528: PUSH
12529: LD_EXP 36
12533: PUSH
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 2
12539: PPUSH
12540: CALL_OW 12
12544: PUSH
12545: LD_INT 0
12547: PPUSH
12548: LD_INT 2
12550: PPUSH
12551: CALL_OW 12
12555: PUSH
12556: LD_INT 0
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: CALL_OW 12
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: ST_TO_ADDR
// ape = CreateHuman ;
12573: LD_ADDR_VAR 0 3
12577: PUSH
12578: CALL_OW 44
12582: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 22
12590: PPUSH
12591: CALL_OW 52
// amApemans = amApemans ^ ape ;
12595: LD_ADDR_EXP 45
12599: PUSH
12600: LD_EXP 45
12604: PUSH
12605: LD_VAR 0 3
12609: ADD
12610: ST_TO_ADDR
// end ;
12611: GO 12497
12613: POP
12614: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12615: LD_INT 23
12617: PPUSH
12618: LD_EXP 33
12622: PPUSH
12623: CALL_OW 234
// end ; end_of_file
12627: LD_VAR 0 1
12631: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12632: LD_INT 0
12634: PPUSH
// PrepareHero ;
12635: CALL 12660 0 0
// PreparePokryshkinTeams ;
12639: CALL 12754 0 0
// PrepareJelena ;
12643: CALL 13019 0 0
// PrepareGnyevko ;
12647: CALL 13051 0 0
// PrepareKurin ;
12651: CALL 12722 0 0
// end ;
12655: LD_VAR 0 1
12659: RET
// function PrepareHero ; begin
12660: LD_INT 0
12662: PPUSH
// uc_side = 3 ;
12663: LD_ADDR_OWVAR 20
12667: PUSH
12668: LD_INT 3
12670: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
12671: LD_ADDR_EXP 46
12675: PUSH
12676: LD_STRING Burlak
12678: PPUSH
12679: LD_INT 0
12681: PPUSH
12682: CALL 8100 0 2
12686: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12687: LD_EXP 46
12691: PPUSH
12692: LD_EXP 37
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: LD_EXP 37
12705: PUSH
12706: LD_INT 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 48
// end ;
12717: LD_VAR 0 1
12721: RET
// function PrepareKurin ; begin
12722: LD_INT 0
12724: PPUSH
// uc_side = 6 ;
12725: LD_ADDR_OWVAR 20
12729: PUSH
12730: LD_INT 6
12732: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
12733: LD_ADDR_EXP 55
12737: PUSH
12738: LD_STRING Kurin
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL 8100 0 2
12748: ST_TO_ADDR
// end ;
12749: LD_VAR 0 1
12753: RET
// function PreparePokryshkinTeams ; begin
12754: LD_INT 0
12756: PPUSH
// uc_side = 6 ;
12757: LD_ADDR_OWVAR 20
12761: PUSH
12762: LD_INT 6
12764: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
12765: LD_ADDR_EXP 47
12769: PUSH
12770: LD_STRING Pokryshkin
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL 8100 0 2
12780: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
12781: LD_ADDR_EXP 48
12785: PUSH
12786: LD_STRING Saseda
12788: PPUSH
12789: LD_INT 0
12791: PPUSH
12792: CALL 8100 0 2
12796: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
12797: LD_ADDR_EXP 49
12801: PUSH
12802: LD_STRING Jaworska
12804: PPUSH
12805: LD_INT 0
12807: PPUSH
12808: CALL 8100 0 2
12812: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
12813: LD_ADDR_EXP 50
12817: PUSH
12818: LD_STRING Balei
12820: PPUSH
12821: LD_INT 0
12823: PPUSH
12824: CALL 8100 0 2
12828: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
12829: LD_ADDR_EXP 51
12833: PUSH
12834: LD_STRING Belkov
12836: PPUSH
12837: LD_INT 0
12839: PPUSH
12840: CALL 8100 0 2
12844: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12845: LD_EXP 47
12849: PPUSH
12850: LD_INT 25
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12860: LD_EXP 48
12864: PPUSH
12865: LD_INT 17
12867: PPUSH
12868: LD_INT 0
12870: PPUSH
12871: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12875: LD_EXP 49
12879: PPUSH
12880: LD_INT 17
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12890: LD_EXP 50
12894: PPUSH
12895: LD_INT 17
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12905: LD_EXP 51
12909: PPUSH
12910: LD_INT 17
12912: PPUSH
12913: LD_INT 0
12915: PPUSH
12916: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12920: LD_ADDR_EXP 56
12924: PUSH
12925: LD_EXP 47
12929: PUSH
12930: LD_EXP 48
12934: PUSH
12935: LD_EXP 50
12939: PUSH
12940: LD_EXP 51
12944: PUSH
12945: LD_EXP 49
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: ST_TO_ADDR
// if Difficulty < 3 then
12957: LD_OWVAR 67
12961: PUSH
12962: LD_INT 3
12964: LESS
12965: IFFALSE 13014
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
12967: LD_ADDR_EXP 52
12971: PUSH
12972: LD_STRING Jaunzeme
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL 8100 0 2
12982: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12983: LD_EXP 52
12987: PPUSH
12988: LD_INT 26
12990: PPUSH
12991: LD_INT 0
12993: PPUSH
12994: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12998: LD_ADDR_EXP 56
13002: PUSH
13003: LD_EXP 56
13007: PUSH
13008: LD_EXP 52
13012: ADD
13013: ST_TO_ADDR
// end ; end ;
13014: LD_VAR 0 1
13018: RET
// function PrepareJelena ; begin
13019: LD_INT 0
13021: PPUSH
// uc_side = 8 ;
13022: LD_ADDR_OWVAR 20
13026: PUSH
13027: LD_INT 8
13029: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13030: LD_ADDR_EXP 53
13034: PUSH
13035: LD_STRING Kirilenkova
13037: PPUSH
13038: LD_INT 0
13040: PPUSH
13041: CALL 8100 0 2
13045: ST_TO_ADDR
// end ;
13046: LD_VAR 0 1
13050: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13051: LD_INT 0
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
// uc_side = 8 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 8
13064: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13065: LD_ADDR_EXP 54
13069: PUSH
13070: LD_STRING Gnyevko
13072: PPUSH
13073: LD_INT 0
13075: PPUSH
13076: CALL 8100 0 2
13080: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13081: LD_ADDR_VAR 0 4
13085: PUSH
13086: LD_EXP 38
13090: PUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_EXP 38
13098: PPUSH
13099: CALL_OW 12
13103: ARRAY
13104: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13105: LD_EXP 54
13109: PPUSH
13110: LD_VAR 0 4
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: LD_VAR 0 4
13123: PUSH
13124: LD_INT 2
13126: ARRAY
13127: PPUSH
13128: LD_INT 0
13130: PPUSH
13131: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13135: LD_EXP 54
13139: PPUSH
13140: LD_EXP 39
13144: PPUSH
13145: CALL_OW 234
// ComHold ( Gnyevko ) ;
13149: LD_EXP 54
13153: PPUSH
13154: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: DOUBLE
13164: LD_INT 1
13166: DEC
13167: ST_TO_ADDR
13168: LD_EXP 27
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: LD_OWVAR 67
13199: ARRAY
13200: MINUS
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13333
// begin uc_side = 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation = nation_nature ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// hc_class = class_apeman ;
13221: LD_ADDR_OWVAR 28
13225: PUSH
13226: LD_INT 12
13228: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13229: LD_ADDR_OWVAR 31
13233: PUSH
13234: LD_EXP 28
13238: PUSH
13239: LD_INT 1
13241: ARRAY
13242: PUSH
13243: LD_EXP 28
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PUSH
13252: LD_EXP 28
13256: PUSH
13257: LD_INT 3
13259: ARRAY
13260: PUSH
13261: LD_EXP 28
13265: PUSH
13266: LD_INT 4
13268: ARRAY
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13276: LD_ADDR_OWVAR 35
13280: PUSH
13281: LD_EXP 34
13285: ST_TO_ADDR
// un = CreateHuman ;
13286: LD_ADDR_VAR 0 2
13290: PUSH
13291: CALL_OW 44
13295: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13296: LD_VAR 0 2
13300: PPUSH
13301: LD_EXP 54
13305: PPUSH
13306: CALL_OW 250
13310: PPUSH
13311: LD_EXP 54
13315: PPUSH
13316: CALL_OW 251
13320: PPUSH
13321: LD_INT 8
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL_OW 50
// end ;
13331: GO 13202
13333: POP
13334: POP
// end ; end_of_file
13335: LD_VAR 0 1
13339: RET
// export function CreateNature ; var i , un ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
13344: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13345: LD_ADDR_VAR 0 2
13349: PUSH
13350: DOUBLE
13351: LD_INT 1
13353: DEC
13354: ST_TO_ADDR
13355: LD_EXP 27
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13475
// begin uc_side = 0 ;
13367: LD_ADDR_OWVAR 20
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// uc_nation = nation_nature ;
13375: LD_ADDR_OWVAR 21
13379: PUSH
13380: LD_INT 0
13382: ST_TO_ADDR
// hc_class = class_apeman ;
13383: LD_ADDR_OWVAR 28
13387: PUSH
13388: LD_INT 12
13390: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13391: LD_ADDR_OWVAR 31
13395: PUSH
13396: LD_EXP 28
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PUSH
13405: LD_EXP 28
13409: PUSH
13410: LD_INT 2
13412: ARRAY
13413: PUSH
13414: LD_EXP 28
13418: PUSH
13419: LD_INT 3
13421: ARRAY
13422: PUSH
13423: LD_EXP 28
13427: PUSH
13428: LD_INT 4
13430: ARRAY
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13438: LD_ADDR_OWVAR 35
13442: PUSH
13443: LD_EXP 34
13447: ST_TO_ADDR
// un = CreateHuman ;
13448: LD_ADDR_VAR 0 3
13452: PUSH
13453: CALL_OW 44
13457: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13458: LD_VAR 0 3
13462: PPUSH
13463: LD_INT 16
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 49
// end ;
13473: GO 13364
13475: POP
13476: POP
// for i := 1 to animalsAmount [ 2 ] do
13477: LD_ADDR_VAR 0 2
13481: PUSH
13482: DOUBLE
13483: LD_INT 1
13485: DEC
13486: ST_TO_ADDR
13487: LD_EXP 27
13491: PUSH
13492: LD_INT 2
13494: ARRAY
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13607
// begin uc_side = 0 ;
13499: LD_ADDR_OWVAR 20
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// uc_nation = nation_nature ;
13507: LD_ADDR_OWVAR 21
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// hc_class = class_phororhacos ;
13515: LD_ADDR_OWVAR 28
13519: PUSH
13520: LD_INT 18
13522: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13523: LD_ADDR_OWVAR 31
13527: PUSH
13528: LD_EXP 28
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PUSH
13537: LD_EXP 28
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PUSH
13546: LD_EXP 28
13550: PUSH
13551: LD_INT 3
13553: ARRAY
13554: PUSH
13555: LD_EXP 28
13559: PUSH
13560: LD_INT 4
13562: ARRAY
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13570: LD_ADDR_OWVAR 35
13574: PUSH
13575: LD_EXP 29
13579: ST_TO_ADDR
// un = CreateHuman ;
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: CALL_OW 44
13589: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 15
13597: PPUSH
13598: LD_INT 0
13600: PPUSH
13601: CALL_OW 49
// end ;
13605: GO 13496
13607: POP
13608: POP
// for i := 1 to animalsAmount [ 3 ] do
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: DOUBLE
13615: LD_INT 1
13617: DEC
13618: ST_TO_ADDR
13619: LD_EXP 27
13623: PUSH
13624: LD_INT 3
13626: ARRAY
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13739
// begin uc_side = 0 ;
13631: LD_ADDR_OWVAR 20
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// uc_nation = nation_nature ;
13639: LD_ADDR_OWVAR 21
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// hc_class = class_tiger ;
13647: LD_ADDR_OWVAR 28
13651: PUSH
13652: LD_INT 14
13654: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13655: LD_ADDR_OWVAR 31
13659: PUSH
13660: LD_EXP 28
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PUSH
13669: LD_EXP 28
13673: PUSH
13674: LD_INT 2
13676: ARRAY
13677: PUSH
13678: LD_EXP 28
13682: PUSH
13683: LD_INT 3
13685: ARRAY
13686: PUSH
13687: LD_EXP 28
13691: PUSH
13692: LD_INT 4
13694: ARRAY
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13702: LD_ADDR_OWVAR 35
13706: PUSH
13707: LD_EXP 29
13711: ST_TO_ADDR
// un = CreateHuman ;
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: CALL_OW 44
13721: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 15
13729: PPUSH
13730: LD_INT 0
13732: PPUSH
13733: CALL_OW 49
// end ;
13737: GO 13628
13739: POP
13740: POP
// for i := 1 to animalsAmount [ 4 ] do
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_EXP 27
13755: PUSH
13756: LD_INT 4
13758: ARRAY
13759: PUSH
13760: FOR_TO
13761: IFFALSE 13871
// begin uc_side = 0 ;
13763: LD_ADDR_OWVAR 20
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// uc_nation = nation_nature ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// hc_class = 21 ;
13779: LD_ADDR_OWVAR 28
13783: PUSH
13784: LD_INT 21
13786: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13787: LD_ADDR_OWVAR 31
13791: PUSH
13792: LD_EXP 28
13796: PUSH
13797: LD_INT 1
13799: ARRAY
13800: PUSH
13801: LD_EXP 28
13805: PUSH
13806: LD_INT 2
13808: ARRAY
13809: PUSH
13810: LD_EXP 28
13814: PUSH
13815: LD_INT 3
13817: ARRAY
13818: PUSH
13819: LD_EXP 28
13823: PUSH
13824: LD_INT 4
13826: ARRAY
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13834: LD_ADDR_OWVAR 35
13838: PUSH
13839: LD_EXP 29
13843: ST_TO_ADDR
// un = CreateHuman ;
13844: LD_ADDR_VAR 0 3
13848: PUSH
13849: CALL_OW 44
13853: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 15
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13760
13871: POP
13872: POP
// end ; end_of_file
13873: LD_VAR 0 1
13877: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13878: LD_VAR 0 1
13882: PUSH
13883: LD_EXP 46
13887: EQUAL
13888: PUSH
13889: LD_EXP 53
13893: PPUSH
13894: CALL_OW 255
13898: PUSH
13899: LD_INT 3
13901: EQUAL
13902: NOT
13903: AND
13904: PUSH
13905: LD_EXP 53
13909: PPUSH
13910: CALL_OW 302
13914: NOT
13915: AND
13916: IFFALSE 13922
// BurlakDying ;
13918: CALL 11309 0 0
// if unit = Gladstone then
13922: LD_VAR 0 1
13926: PUSH
13927: LD_EXP 44
13931: EQUAL
13932: IFFALSE 13942
// gladstoneStatus = 0 ;
13934: LD_ADDR_EXP 1
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// if unit = Johanna then
13942: LD_VAR 0 1
13946: PUSH
13947: LD_EXP 43
13951: EQUAL
13952: IFFALSE 13962
// johannaStatus = 0 ;
13954: LD_ADDR_EXP 2
13958: PUSH
13959: LD_INT 0
13961: ST_TO_ADDR
// end ;
13962: PPOPN 1
13964: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13965: LD_VAR 0 1
13969: PUSH
13970: LD_EXP 46
13974: EQUAL
13975: IFFALSE 13981
// BurlakDying ;
13977: CALL 11309 0 0
// if GetSide ( unit ) = 3 then
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 255
13990: PUSH
13991: LD_INT 3
13993: EQUAL
13994: IFFALSE 14010
// lostComradesCounter = lostComradesCounter + 1 ;
13996: LD_ADDR_EXP 23
14000: PUSH
14001: LD_EXP 23
14005: PUSH
14006: LD_INT 1
14008: PLUS
14009: ST_TO_ADDR
// if unit in kirovSolds then
14010: LD_VAR 0 1
14014: PUSH
14015: LD_EXP 56
14019: IN
14020: IFFALSE 14038
// kirovSolds = kirovSolds diff unit ;
14022: LD_ADDR_EXP 56
14026: PUSH
14027: LD_EXP 56
14031: PUSH
14032: LD_VAR 0 1
14036: DIFF
14037: ST_TO_ADDR
// end ;
14038: PPOPN 1
14040: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14041: LD_VAR 0 1
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 1
14057: EQUAL
14058: AND
14059: PUSH
14060: LD_VAR 0 1
14064: PUSH
14065: LD_INT 1
14067: EQUAL
14068: PUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 3
14076: EQUAL
14077: AND
14078: PUSH
14079: LD_EXP 17
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: AND
14088: OR
14089: IFFALSE 14095
// Dial_SecondAttack ;
14091: CALL 6061 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14095: LD_VAR 0 1
14099: PUSH
14100: LD_INT 3
14102: EQUAL
14103: PUSH
14104: LD_VAR 0 2
14108: PUSH
14109: LD_INT 6
14111: EQUAL
14112: AND
14113: PUSH
14114: LD_EXP 18
14118: NOT
14119: AND
14120: IFFALSE 14126
// Dialogue_AttackComrade ;
14122: CALL 4147 0 0
// end ; end_of_file
14126: PPOPN 2
14128: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14129: LD_EXP 53
14133: PPUSH
14134: CALL_OW 255
14138: PUSH
14139: LD_INT 3
14141: EQUAL
14142: PUSH
14143: LD_EXP 26
14147: PUSH
14148: LD_INT 525
14150: LESS
14151: AND
14152: IFFALSE 14164
14154: GO 14156
14156: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14157: LD_STRING ACH_YELENA
14159: PPUSH
14160: CALL_OW 543
14164: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14165: LD_INT 23
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 25
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 25
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 25
14200: PUSH
14201: LD_INT 12
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: NOT
14223: IFFALSE 14235
14225: GO 14227
14227: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14228: LD_STRING ACH_NATURE
14230: PPUSH
14231: CALL_OW 543
14235: END
// every 0 0$1 trigger Attacks ( Burlak ) = am_bun and belkovWaitForGorky do
14236: LD_EXP 46
14240: PPUSH
14241: CALL_OW 320
14245: PUSH
14246: LD_INT 23
14248: EQUAL
14249: PUSH
14250: LD_EXP 16
14254: AND
14255: IFFALSE 14348
14257: GO 14259
14259: DISABLE
// begin ComExitBuilding ( Johanna ) ;
14260: LD_EXP 43
14264: PPUSH
14265: CALL_OW 122
// wait ( 0 0$1 ) ;
14269: LD_INT 35
14271: PPUSH
14272: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14276: LD_INT 35
14278: PPUSH
14279: CALL_OW 67
// ComAttackUnit ( Johanna , Burlak ) ;
14283: LD_EXP 43
14287: PPUSH
14288: LD_EXP 46
14292: PPUSH
14293: CALL_OW 115
// until IsDead ( Burlak ) or GetDistUnits ( Burlak , Johanna ) > 10 or not belkovWaitForGorky ;
14297: LD_EXP 46
14301: PPUSH
14302: CALL_OW 301
14306: PUSH
14307: LD_EXP 46
14311: PPUSH
14312: LD_EXP 43
14316: PPUSH
14317: CALL_OW 296
14321: PUSH
14322: LD_INT 10
14324: GREATER
14325: OR
14326: PUSH
14327: LD_EXP 16
14331: NOT
14332: OR
14333: IFFALSE 14276
// ComEnterUnit ( Johanna , am_bun ) ;
14335: LD_EXP 43
14339: PPUSH
14340: LD_INT 23
14342: PPUSH
14343: CALL_OW 120
// enable ;
14347: ENABLE
// end ; end_of_file
14348: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14349: LD_INT 0
14351: PPUSH
14352: PPUSH
// if not missionNumber then
14353: LD_VAR 0 2
14357: NOT
14358: IFFALSE 14362
// exit ;
14360: GO 14492
// achiv := false ;
14362: LD_ADDR_VAR 0 7
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// case campaignNumber of 1 :
14370: LD_VAR 0 1
14374: PUSH
14375: LD_INT 1
14377: DOUBLE
14378: EQUAL
14379: IFTRUE 14383
14381: GO 14394
14383: POP
// achiv := ACH_GOTA ; 2 :
14384: LD_ADDR_VAR 0 7
14388: PUSH
14389: LD_STRING ACH_GOTA
14391: ST_TO_ADDR
14392: GO 14444
14394: LD_INT 2
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14405
14402: POP
// ; 3 :
14403: GO 14444
14405: LD_INT 3
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14424
14413: POP
// achiv := ACH_MOTSU ; 4 :
14414: LD_ADDR_VAR 0 7
14418: PUSH
14419: LD_STRING ACH_MOTSU
14421: ST_TO_ADDR
14422: GO 14444
14424: LD_INT 4
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14443
14432: POP
// achiv := ACH_LOP ; end ;
14433: LD_ADDR_VAR 0 7
14437: PUSH
14438: LD_STRING ACH_LOP
14440: ST_TO_ADDR
14441: GO 14444
14443: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14444: LD_OWVAR 67
14448: PUSH
14449: LD_INT 3
14451: EQUAL
14452: PUSH
14453: LD_VAR 0 7
14457: AND
14458: PUSH
14459: LD_VAR 0 3
14463: AND
14464: PUSH
14465: LD_VAR 0 4
14469: AND
14470: PUSH
14471: LD_VAR 0 5
14475: AND
14476: IFFALSE 14492
// SetAchievementEX ( achiv , missionNumber ) ;
14478: LD_VAR 0 7
14482: PPUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: CALL_OW 564
// end ;
14492: LD_VAR 0 6
14496: RET
// export function SA_BehemothConstructed ; begin
14497: LD_INT 0
14499: PPUSH
// SetAchievement ( ACH_SMC ) ;
14500: LD_STRING ACH_SMC
14502: PPUSH
14503: CALL_OW 543
// end ; end_of_file
14507: LD_VAR 0 1
14511: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14512: LD_INT 0
14514: PPUSH
// if p2 = 100 then
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 100
14522: EQUAL
14523: IFFALSE 15472
// begin if not StreamModeActive then
14525: LD_EXP 57
14529: NOT
14530: IFFALSE 14540
// StreamModeActive := true ;
14532: LD_ADDR_EXP 57
14536: PUSH
14537: LD_INT 1
14539: ST_TO_ADDR
// if p3 = 0 then
14540: LD_VAR 0 3
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14554
// InitStreamMode ;
14550: CALL 15632 0 0
// if p3 = 1 then
14554: LD_VAR 0 3
14558: PUSH
14559: LD_INT 1
14561: EQUAL
14562: IFFALSE 14572
// sRocket := true ;
14564: LD_ADDR_EXP 62
14568: PUSH
14569: LD_INT 1
14571: ST_TO_ADDR
// if p3 = 2 then
14572: LD_VAR 0 3
14576: PUSH
14577: LD_INT 2
14579: EQUAL
14580: IFFALSE 14590
// sSpeed := true ;
14582: LD_ADDR_EXP 61
14586: PUSH
14587: LD_INT 1
14589: ST_TO_ADDR
// if p3 = 3 then
14590: LD_VAR 0 3
14594: PUSH
14595: LD_INT 3
14597: EQUAL
14598: IFFALSE 14608
// sEngine := true ;
14600: LD_ADDR_EXP 63
14604: PUSH
14605: LD_INT 1
14607: ST_TO_ADDR
// if p3 = 4 then
14608: LD_VAR 0 3
14612: PUSH
14613: LD_INT 4
14615: EQUAL
14616: IFFALSE 14626
// sSpec := true ;
14618: LD_ADDR_EXP 60
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// if p3 = 5 then
14626: LD_VAR 0 3
14630: PUSH
14631: LD_INT 5
14633: EQUAL
14634: IFFALSE 14644
// sLevel := true ;
14636: LD_ADDR_EXP 64
14640: PUSH
14641: LD_INT 1
14643: ST_TO_ADDR
// if p3 = 6 then
14644: LD_VAR 0 3
14648: PUSH
14649: LD_INT 6
14651: EQUAL
14652: IFFALSE 14662
// sArmoury := true ;
14654: LD_ADDR_EXP 65
14658: PUSH
14659: LD_INT 1
14661: ST_TO_ADDR
// if p3 = 7 then
14662: LD_VAR 0 3
14666: PUSH
14667: LD_INT 7
14669: EQUAL
14670: IFFALSE 14680
// sRadar := true ;
14672: LD_ADDR_EXP 66
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// if p3 = 8 then
14680: LD_VAR 0 3
14684: PUSH
14685: LD_INT 8
14687: EQUAL
14688: IFFALSE 14698
// sBunker := true ;
14690: LD_ADDR_EXP 67
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if p3 = 9 then
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 9
14705: EQUAL
14706: IFFALSE 14716
// sHack := true ;
14708: LD_ADDR_EXP 68
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// if p3 = 10 then
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 10
14723: EQUAL
14724: IFFALSE 14734
// sFire := true ;
14726: LD_ADDR_EXP 69
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// if p3 = 11 then
14734: LD_VAR 0 3
14738: PUSH
14739: LD_INT 11
14741: EQUAL
14742: IFFALSE 14752
// sRefresh := true ;
14744: LD_ADDR_EXP 70
14748: PUSH
14749: LD_INT 1
14751: ST_TO_ADDR
// if p3 = 12 then
14752: LD_VAR 0 3
14756: PUSH
14757: LD_INT 12
14759: EQUAL
14760: IFFALSE 14770
// sExp := true ;
14762: LD_ADDR_EXP 71
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// if p3 = 13 then
14770: LD_VAR 0 3
14774: PUSH
14775: LD_INT 13
14777: EQUAL
14778: IFFALSE 14788
// sDepot := true ;
14780: LD_ADDR_EXP 72
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// if p3 = 14 then
14788: LD_VAR 0 3
14792: PUSH
14793: LD_INT 14
14795: EQUAL
14796: IFFALSE 14806
// sFlag := true ;
14798: LD_ADDR_EXP 73
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if p3 = 15 then
14806: LD_VAR 0 3
14810: PUSH
14811: LD_INT 15
14813: EQUAL
14814: IFFALSE 14824
// sKamikadze := true ;
14816: LD_ADDR_EXP 81
14820: PUSH
14821: LD_INT 1
14823: ST_TO_ADDR
// if p3 = 16 then
14824: LD_VAR 0 3
14828: PUSH
14829: LD_INT 16
14831: EQUAL
14832: IFFALSE 14842
// sTroll := true ;
14834: LD_ADDR_EXP 82
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
// if p3 = 17 then
14842: LD_VAR 0 3
14846: PUSH
14847: LD_INT 17
14849: EQUAL
14850: IFFALSE 14860
// sSlow := true ;
14852: LD_ADDR_EXP 83
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// if p3 = 18 then
14860: LD_VAR 0 3
14864: PUSH
14865: LD_INT 18
14867: EQUAL
14868: IFFALSE 14878
// sLack := true ;
14870: LD_ADDR_EXP 84
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if p3 = 19 then
14878: LD_VAR 0 3
14882: PUSH
14883: LD_INT 19
14885: EQUAL
14886: IFFALSE 14896
// sTank := true ;
14888: LD_ADDR_EXP 86
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// if p3 = 20 then
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 20
14903: EQUAL
14904: IFFALSE 14914
// sRemote := true ;
14906: LD_ADDR_EXP 87
14910: PUSH
14911: LD_INT 1
14913: ST_TO_ADDR
// if p3 = 21 then
14914: LD_VAR 0 3
14918: PUSH
14919: LD_INT 21
14921: EQUAL
14922: IFFALSE 14932
// sPowell := true ;
14924: LD_ADDR_EXP 88
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// if p3 = 22 then
14932: LD_VAR 0 3
14936: PUSH
14937: LD_INT 22
14939: EQUAL
14940: IFFALSE 14950
// sTeleport := true ;
14942: LD_ADDR_EXP 91
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// if p3 = 23 then
14950: LD_VAR 0 3
14954: PUSH
14955: LD_INT 23
14957: EQUAL
14958: IFFALSE 14968
// sOilTower := true ;
14960: LD_ADDR_EXP 93
14964: PUSH
14965: LD_INT 1
14967: ST_TO_ADDR
// if p3 = 24 then
14968: LD_VAR 0 3
14972: PUSH
14973: LD_INT 24
14975: EQUAL
14976: IFFALSE 14986
// sShovel := true ;
14978: LD_ADDR_EXP 94
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// if p3 = 25 then
14986: LD_VAR 0 3
14990: PUSH
14991: LD_INT 25
14993: EQUAL
14994: IFFALSE 15004
// sSheik := true ;
14996: LD_ADDR_EXP 95
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// if p3 = 26 then
15004: LD_VAR 0 3
15008: PUSH
15009: LD_INT 26
15011: EQUAL
15012: IFFALSE 15022
// sEarthquake := true ;
15014: LD_ADDR_EXP 97
15018: PUSH
15019: LD_INT 1
15021: ST_TO_ADDR
// if p3 = 27 then
15022: LD_VAR 0 3
15026: PUSH
15027: LD_INT 27
15029: EQUAL
15030: IFFALSE 15040
// sAI := true ;
15032: LD_ADDR_EXP 98
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// if p3 = 28 then
15040: LD_VAR 0 3
15044: PUSH
15045: LD_INT 28
15047: EQUAL
15048: IFFALSE 15058
// sCargo := true ;
15050: LD_ADDR_EXP 101
15054: PUSH
15055: LD_INT 1
15057: ST_TO_ADDR
// if p3 = 29 then
15058: LD_VAR 0 3
15062: PUSH
15063: LD_INT 29
15065: EQUAL
15066: IFFALSE 15076
// sDLaser := true ;
15068: LD_ADDR_EXP 102
15072: PUSH
15073: LD_INT 1
15075: ST_TO_ADDR
// if p3 = 30 then
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 30
15083: EQUAL
15084: IFFALSE 15094
// sExchange := true ;
15086: LD_ADDR_EXP 103
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// if p3 = 31 then
15094: LD_VAR 0 3
15098: PUSH
15099: LD_INT 31
15101: EQUAL
15102: IFFALSE 15112
// sFac := true ;
15104: LD_ADDR_EXP 104
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// if p3 = 32 then
15112: LD_VAR 0 3
15116: PUSH
15117: LD_INT 32
15119: EQUAL
15120: IFFALSE 15130
// sPower := true ;
15122: LD_ADDR_EXP 105
15126: PUSH
15127: LD_INT 1
15129: ST_TO_ADDR
// if p3 = 33 then
15130: LD_VAR 0 3
15134: PUSH
15135: LD_INT 33
15137: EQUAL
15138: IFFALSE 15148
// sRandom := true ;
15140: LD_ADDR_EXP 106
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// if p3 = 34 then
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 34
15155: EQUAL
15156: IFFALSE 15166
// sShield := true ;
15158: LD_ADDR_EXP 107
15162: PUSH
15163: LD_INT 1
15165: ST_TO_ADDR
// if p3 = 35 then
15166: LD_VAR 0 3
15170: PUSH
15171: LD_INT 35
15173: EQUAL
15174: IFFALSE 15184
// sTime := true ;
15176: LD_ADDR_EXP 108
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// if p3 = 36 then
15184: LD_VAR 0 3
15188: PUSH
15189: LD_INT 36
15191: EQUAL
15192: IFFALSE 15202
// sTools := true ;
15194: LD_ADDR_EXP 109
15198: PUSH
15199: LD_INT 1
15201: ST_TO_ADDR
// if p3 = 101 then
15202: LD_VAR 0 3
15206: PUSH
15207: LD_INT 101
15209: EQUAL
15210: IFFALSE 15220
// sSold := true ;
15212: LD_ADDR_EXP 74
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// if p3 = 102 then
15220: LD_VAR 0 3
15224: PUSH
15225: LD_INT 102
15227: EQUAL
15228: IFFALSE 15238
// sDiff := true ;
15230: LD_ADDR_EXP 75
15234: PUSH
15235: LD_INT 1
15237: ST_TO_ADDR
// if p3 = 103 then
15238: LD_VAR 0 3
15242: PUSH
15243: LD_INT 103
15245: EQUAL
15246: IFFALSE 15256
// sFog := true ;
15248: LD_ADDR_EXP 78
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// if p3 = 104 then
15256: LD_VAR 0 3
15260: PUSH
15261: LD_INT 104
15263: EQUAL
15264: IFFALSE 15274
// sReset := true ;
15266: LD_ADDR_EXP 79
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if p3 = 105 then
15274: LD_VAR 0 3
15278: PUSH
15279: LD_INT 105
15281: EQUAL
15282: IFFALSE 15292
// sSun := true ;
15284: LD_ADDR_EXP 80
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// if p3 = 106 then
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 106
15299: EQUAL
15300: IFFALSE 15310
// sTiger := true ;
15302: LD_ADDR_EXP 76
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// if p3 = 107 then
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 107
15317: EQUAL
15318: IFFALSE 15328
// sBomb := true ;
15320: LD_ADDR_EXP 77
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// if p3 = 108 then
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 108
15335: EQUAL
15336: IFFALSE 15346
// sWound := true ;
15338: LD_ADDR_EXP 85
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// if p3 = 109 then
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 109
15353: EQUAL
15354: IFFALSE 15364
// sBetray := true ;
15356: LD_ADDR_EXP 89
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// if p3 = 110 then
15364: LD_VAR 0 3
15368: PUSH
15369: LD_INT 110
15371: EQUAL
15372: IFFALSE 15382
// sContamin := true ;
15374: LD_ADDR_EXP 90
15378: PUSH
15379: LD_INT 1
15381: ST_TO_ADDR
// if p3 = 111 then
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 111
15389: EQUAL
15390: IFFALSE 15400
// sOil := true ;
15392: LD_ADDR_EXP 92
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// if p3 = 112 then
15400: LD_VAR 0 3
15404: PUSH
15405: LD_INT 112
15407: EQUAL
15408: IFFALSE 15418
// sStu := true ;
15410: LD_ADDR_EXP 96
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 113 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 113
15425: EQUAL
15426: IFFALSE 15436
// sBazooka := true ;
15428: LD_ADDR_EXP 99
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// if p3 = 114 then
15436: LD_VAR 0 3
15440: PUSH
15441: LD_INT 114
15443: EQUAL
15444: IFFALSE 15454
// sMortar := true ;
15446: LD_ADDR_EXP 100
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if p3 = 115 then
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 115
15461: EQUAL
15462: IFFALSE 15472
// sRanger := true ;
15464: LD_ADDR_EXP 110
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// end ; if p2 = 101 then
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 101
15479: EQUAL
15480: IFFALSE 15608
// begin case p3 of 1 :
15482: LD_VAR 0 3
15486: PUSH
15487: LD_INT 1
15489: DOUBLE
15490: EQUAL
15491: IFTRUE 15495
15493: GO 15502
15495: POP
// hHackUnlimitedResources ; 2 :
15496: CALL 26645 0 0
15500: GO 15608
15502: LD_INT 2
15504: DOUBLE
15505: EQUAL
15506: IFTRUE 15510
15508: GO 15517
15510: POP
// hHackSetLevel10 ; 3 :
15511: CALL 26778 0 0
15515: GO 15608
15517: LD_INT 3
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15532
15525: POP
// hHackSetLevel10YourUnits ; 4 :
15526: CALL 26863 0 0
15530: GO 15608
15532: LD_INT 4
15534: DOUBLE
15535: EQUAL
15536: IFTRUE 15540
15538: GO 15547
15540: POP
// hHackInvincible ; 5 :
15541: CALL 27311 0 0
15545: GO 15608
15547: LD_INT 5
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15562
15555: POP
// hHackInvisible ; 6 :
15556: CALL 27422 0 0
15560: GO 15608
15562: LD_INT 6
15564: DOUBLE
15565: EQUAL
15566: IFTRUE 15570
15568: GO 15577
15570: POP
// hHackChangeYourSide ; 7 :
15571: CALL 27479 0 0
15575: GO 15608
15577: LD_INT 7
15579: DOUBLE
15580: EQUAL
15581: IFTRUE 15585
15583: GO 15592
15585: POP
// hHackChangeUnitSide ; 8 :
15586: CALL 27521 0 0
15590: GO 15608
15592: LD_INT 8
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15607
15600: POP
// hHackFog ; end ;
15601: CALL 27622 0 0
15605: GO 15608
15607: POP
// end ; end ;
15608: LD_VAR 0 7
15612: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15613: GO 15615
15615: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15616: LD_STRING initStreamRollete();
15618: PPUSH
15619: CALL_OW 559
// InitStreamMode ;
15623: CALL 15632 0 0
// DefineStreamItems ( ) ;
15627: CALL 16072 0 0
// end ;
15631: END
// function InitStreamMode ; begin
15632: LD_INT 0
15634: PPUSH
// streamModeActive := false ;
15635: LD_ADDR_EXP 57
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// normalCounter := 36 ;
15643: LD_ADDR_EXP 58
15647: PUSH
15648: LD_INT 36
15650: ST_TO_ADDR
// hardcoreCounter := 16 ;
15651: LD_ADDR_EXP 59
15655: PUSH
15656: LD_INT 16
15658: ST_TO_ADDR
// sRocket := false ;
15659: LD_ADDR_EXP 62
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// sSpeed := false ;
15667: LD_ADDR_EXP 61
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// sEngine := false ;
15675: LD_ADDR_EXP 63
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// sSpec := false ;
15683: LD_ADDR_EXP 60
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// sLevel := false ;
15691: LD_ADDR_EXP 64
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// sArmoury := false ;
15699: LD_ADDR_EXP 65
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// sRadar := false ;
15707: LD_ADDR_EXP 66
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// sBunker := false ;
15715: LD_ADDR_EXP 67
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// sHack := false ;
15723: LD_ADDR_EXP 68
15727: PUSH
15728: LD_INT 0
15730: ST_TO_ADDR
// sFire := false ;
15731: LD_ADDR_EXP 69
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// sRefresh := false ;
15739: LD_ADDR_EXP 70
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// sExp := false ;
15747: LD_ADDR_EXP 71
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// sDepot := false ;
15755: LD_ADDR_EXP 72
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// sFlag := false ;
15763: LD_ADDR_EXP 73
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// sKamikadze := false ;
15771: LD_ADDR_EXP 81
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// sTroll := false ;
15779: LD_ADDR_EXP 82
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// sSlow := false ;
15787: LD_ADDR_EXP 83
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// sLack := false ;
15795: LD_ADDR_EXP 84
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// sTank := false ;
15803: LD_ADDR_EXP 86
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// sRemote := false ;
15811: LD_ADDR_EXP 87
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// sPowell := false ;
15819: LD_ADDR_EXP 88
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// sTeleport := false ;
15827: LD_ADDR_EXP 91
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// sOilTower := false ;
15835: LD_ADDR_EXP 93
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// sShovel := false ;
15843: LD_ADDR_EXP 94
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// sSheik := false ;
15851: LD_ADDR_EXP 95
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// sEarthquake := false ;
15859: LD_ADDR_EXP 97
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
// sAI := false ;
15867: LD_ADDR_EXP 98
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// sCargo := false ;
15875: LD_ADDR_EXP 101
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// sDLaser := false ;
15883: LD_ADDR_EXP 102
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// sExchange := false ;
15891: LD_ADDR_EXP 103
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// sFac := false ;
15899: LD_ADDR_EXP 104
15903: PUSH
15904: LD_INT 0
15906: ST_TO_ADDR
// sPower := false ;
15907: LD_ADDR_EXP 105
15911: PUSH
15912: LD_INT 0
15914: ST_TO_ADDR
// sRandom := false ;
15915: LD_ADDR_EXP 106
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sShield := false ;
15923: LD_ADDR_EXP 107
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sTime := false ;
15931: LD_ADDR_EXP 108
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sTools := false ;
15939: LD_ADDR_EXP 109
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sSold := false ;
15947: LD_ADDR_EXP 74
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sDiff := false ;
15955: LD_ADDR_EXP 75
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// sFog := false ;
15963: LD_ADDR_EXP 78
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// sReset := false ;
15971: LD_ADDR_EXP 79
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// sSun := false ;
15979: LD_ADDR_EXP 80
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// sTiger := false ;
15987: LD_ADDR_EXP 76
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// sBomb := false ;
15995: LD_ADDR_EXP 77
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// sWound := false ;
16003: LD_ADDR_EXP 85
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// sBetray := false ;
16011: LD_ADDR_EXP 89
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sContamin := false ;
16019: LD_ADDR_EXP 90
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sOil := false ;
16027: LD_ADDR_EXP 92
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sStu := false ;
16035: LD_ADDR_EXP 96
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// sBazooka := false ;
16043: LD_ADDR_EXP 99
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// sMortar := false ;
16051: LD_ADDR_EXP 100
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// sRanger := false ;
16059: LD_ADDR_EXP 110
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// end ;
16067: LD_VAR 0 1
16071: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16072: LD_INT 0
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
// result := [ ] ;
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: EMPTY
16085: ST_TO_ADDR
// if campaign_id = 1 then
16086: LD_OWVAR 69
16090: PUSH
16091: LD_INT 1
16093: EQUAL
16094: IFFALSE 19032
// begin case mission_number of 1 :
16096: LD_OWVAR 70
16100: PUSH
16101: LD_INT 1
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16173
16109: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16110: LD_ADDR_VAR 0 1
16114: PUSH
16115: LD_INT 2
16117: PUSH
16118: LD_INT 4
16120: PUSH
16121: LD_INT 11
16123: PUSH
16124: LD_INT 12
16126: PUSH
16127: LD_INT 15
16129: PUSH
16130: LD_INT 16
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 26
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 101
16155: PUSH
16156: LD_INT 102
16158: PUSH
16159: LD_INT 106
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: ST_TO_ADDR
16171: GO 19030
16173: LD_INT 2
16175: DOUBLE
16176: EQUAL
16177: IFTRUE 16181
16179: GO 16253
16181: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16182: LD_ADDR_VAR 0 1
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 4
16192: PUSH
16193: LD_INT 11
16195: PUSH
16196: LD_INT 12
16198: PUSH
16199: LD_INT 15
16201: PUSH
16202: LD_INT 16
16204: PUSH
16205: LD_INT 22
16207: PUSH
16208: LD_INT 23
16210: PUSH
16211: LD_INT 26
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 101
16227: PUSH
16228: LD_INT 102
16230: PUSH
16231: LD_INT 105
16233: PUSH
16234: LD_INT 106
16236: PUSH
16237: LD_INT 108
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: ST_TO_ADDR
16251: GO 19030
16253: LD_INT 3
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16337
16261: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 4
16272: PUSH
16273: LD_INT 5
16275: PUSH
16276: LD_INT 11
16278: PUSH
16279: LD_INT 12
16281: PUSH
16282: LD_INT 15
16284: PUSH
16285: LD_INT 16
16287: PUSH
16288: LD_INT 22
16290: PUSH
16291: LD_INT 26
16293: PUSH
16294: LD_INT 36
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 101
16311: PUSH
16312: LD_INT 102
16314: PUSH
16315: LD_INT 105
16317: PUSH
16318: LD_INT 106
16320: PUSH
16321: LD_INT 108
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: ST_TO_ADDR
16335: GO 19030
16337: LD_INT 4
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16429
16345: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16346: LD_ADDR_VAR 0 1
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: LD_INT 4
16356: PUSH
16357: LD_INT 5
16359: PUSH
16360: LD_INT 8
16362: PUSH
16363: LD_INT 11
16365: PUSH
16366: LD_INT 12
16368: PUSH
16369: LD_INT 15
16371: PUSH
16372: LD_INT 16
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_INT 23
16380: PUSH
16381: LD_INT 26
16383: PUSH
16384: LD_INT 36
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 101
16403: PUSH
16404: LD_INT 102
16406: PUSH
16407: LD_INT 105
16409: PUSH
16410: LD_INT 106
16412: PUSH
16413: LD_INT 108
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: ST_TO_ADDR
16427: GO 19030
16429: LD_INT 5
16431: DOUBLE
16432: EQUAL
16433: IFTRUE 16437
16435: GO 16537
16437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16438: LD_ADDR_VAR 0 1
16442: PUSH
16443: LD_INT 2
16445: PUSH
16446: LD_INT 4
16448: PUSH
16449: LD_INT 5
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: LD_INT 8
16457: PUSH
16458: LD_INT 11
16460: PUSH
16461: LD_INT 12
16463: PUSH
16464: LD_INT 15
16466: PUSH
16467: LD_INT 16
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_INT 23
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 26
16481: PUSH
16482: LD_INT 36
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 102
16506: PUSH
16507: LD_INT 105
16509: PUSH
16510: LD_INT 106
16512: PUSH
16513: LD_INT 108
16515: PUSH
16516: LD_INT 109
16518: PUSH
16519: LD_INT 112
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: ST_TO_ADDR
16535: GO 19030
16537: LD_INT 6
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16665
16545: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16546: LD_ADDR_VAR 0 1
16550: PUSH
16551: LD_INT 2
16553: PUSH
16554: LD_INT 4
16556: PUSH
16557: LD_INT 5
16559: PUSH
16560: LD_INT 6
16562: PUSH
16563: LD_INT 8
16565: PUSH
16566: LD_INT 11
16568: PUSH
16569: LD_INT 12
16571: PUSH
16572: LD_INT 15
16574: PUSH
16575: LD_INT 16
16577: PUSH
16578: LD_INT 20
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_INT 23
16589: PUSH
16590: LD_INT 25
16592: PUSH
16593: LD_INT 26
16595: PUSH
16596: LD_INT 30
16598: PUSH
16599: LD_INT 31
16601: PUSH
16602: LD_INT 32
16604: PUSH
16605: LD_INT 36
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 101
16631: PUSH
16632: LD_INT 102
16634: PUSH
16635: LD_INT 105
16637: PUSH
16638: LD_INT 106
16640: PUSH
16641: LD_INT 108
16643: PUSH
16644: LD_INT 109
16646: PUSH
16647: LD_INT 112
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: ST_TO_ADDR
16663: GO 19030
16665: LD_INT 7
16667: DOUBLE
16668: EQUAL
16669: IFTRUE 16673
16671: GO 16773
16673: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16674: LD_ADDR_VAR 0 1
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: LD_INT 5
16687: PUSH
16688: LD_INT 7
16690: PUSH
16691: LD_INT 11
16693: PUSH
16694: LD_INT 12
16696: PUSH
16697: LD_INT 15
16699: PUSH
16700: LD_INT 16
16702: PUSH
16703: LD_INT 20
16705: PUSH
16706: LD_INT 21
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_INT 23
16714: PUSH
16715: LD_INT 25
16717: PUSH
16718: LD_INT 26
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 101
16739: PUSH
16740: LD_INT 102
16742: PUSH
16743: LD_INT 103
16745: PUSH
16746: LD_INT 105
16748: PUSH
16749: LD_INT 106
16751: PUSH
16752: LD_INT 108
16754: PUSH
16755: LD_INT 112
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: ST_TO_ADDR
16771: GO 19030
16773: LD_INT 8
16775: DOUBLE
16776: EQUAL
16777: IFTRUE 16781
16779: GO 16909
16781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16782: LD_ADDR_VAR 0 1
16786: PUSH
16787: LD_INT 2
16789: PUSH
16790: LD_INT 4
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: LD_INT 6
16798: PUSH
16799: LD_INT 7
16801: PUSH
16802: LD_INT 8
16804: PUSH
16805: LD_INT 11
16807: PUSH
16808: LD_INT 12
16810: PUSH
16811: LD_INT 15
16813: PUSH
16814: LD_INT 16
16816: PUSH
16817: LD_INT 20
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_INT 23
16828: PUSH
16829: LD_INT 25
16831: PUSH
16832: LD_INT 26
16834: PUSH
16835: LD_INT 30
16837: PUSH
16838: LD_INT 31
16840: PUSH
16841: LD_INT 32
16843: PUSH
16844: LD_INT 36
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 101
16871: PUSH
16872: LD_INT 102
16874: PUSH
16875: LD_INT 103
16877: PUSH
16878: LD_INT 105
16880: PUSH
16881: LD_INT 106
16883: PUSH
16884: LD_INT 108
16886: PUSH
16887: LD_INT 109
16889: PUSH
16890: LD_INT 112
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: ST_TO_ADDR
16907: GO 19030
16909: LD_INT 9
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 17053
16917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16918: LD_ADDR_VAR 0 1
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: LD_INT 6
16934: PUSH
16935: LD_INT 7
16937: PUSH
16938: LD_INT 8
16940: PUSH
16941: LD_INT 11
16943: PUSH
16944: LD_INT 12
16946: PUSH
16947: LD_INT 15
16949: PUSH
16950: LD_INT 16
16952: PUSH
16953: LD_INT 20
16955: PUSH
16956: LD_INT 21
16958: PUSH
16959: LD_INT 22
16961: PUSH
16962: LD_INT 23
16964: PUSH
16965: LD_INT 25
16967: PUSH
16968: LD_INT 26
16970: PUSH
16971: LD_INT 28
16973: PUSH
16974: LD_INT 30
16976: PUSH
16977: LD_INT 31
16979: PUSH
16980: LD_INT 32
16982: PUSH
16983: LD_INT 36
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 101
17011: PUSH
17012: LD_INT 102
17014: PUSH
17015: LD_INT 103
17017: PUSH
17018: LD_INT 105
17020: PUSH
17021: LD_INT 106
17023: PUSH
17024: LD_INT 108
17026: PUSH
17027: LD_INT 109
17029: PUSH
17030: LD_INT 112
17032: PUSH
17033: LD_INT 114
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: ST_TO_ADDR
17051: GO 19030
17053: LD_INT 10
17055: DOUBLE
17056: EQUAL
17057: IFTRUE 17061
17059: GO 17245
17061: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17062: LD_ADDR_VAR 0 1
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 4
17072: PUSH
17073: LD_INT 5
17075: PUSH
17076: LD_INT 6
17078: PUSH
17079: LD_INT 7
17081: PUSH
17082: LD_INT 8
17084: PUSH
17085: LD_INT 9
17087: PUSH
17088: LD_INT 10
17090: PUSH
17091: LD_INT 11
17093: PUSH
17094: LD_INT 12
17096: PUSH
17097: LD_INT 13
17099: PUSH
17100: LD_INT 14
17102: PUSH
17103: LD_INT 15
17105: PUSH
17106: LD_INT 16
17108: PUSH
17109: LD_INT 17
17111: PUSH
17112: LD_INT 18
17114: PUSH
17115: LD_INT 19
17117: PUSH
17118: LD_INT 20
17120: PUSH
17121: LD_INT 21
17123: PUSH
17124: LD_INT 22
17126: PUSH
17127: LD_INT 23
17129: PUSH
17130: LD_INT 24
17132: PUSH
17133: LD_INT 25
17135: PUSH
17136: LD_INT 26
17138: PUSH
17139: LD_INT 28
17141: PUSH
17142: LD_INT 30
17144: PUSH
17145: LD_INT 31
17147: PUSH
17148: LD_INT 32
17150: PUSH
17151: LD_INT 36
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 101
17187: PUSH
17188: LD_INT 102
17190: PUSH
17191: LD_INT 103
17193: PUSH
17194: LD_INT 104
17196: PUSH
17197: LD_INT 105
17199: PUSH
17200: LD_INT 106
17202: PUSH
17203: LD_INT 107
17205: PUSH
17206: LD_INT 108
17208: PUSH
17209: LD_INT 109
17211: PUSH
17212: LD_INT 110
17214: PUSH
17215: LD_INT 111
17217: PUSH
17218: LD_INT 112
17220: PUSH
17221: LD_INT 114
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: ST_TO_ADDR
17243: GO 19030
17245: LD_INT 11
17247: DOUBLE
17248: EQUAL
17249: IFTRUE 17253
17251: GO 17445
17253: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: LD_INT 4
17267: PUSH
17268: LD_INT 5
17270: PUSH
17271: LD_INT 6
17273: PUSH
17274: LD_INT 7
17276: PUSH
17277: LD_INT 8
17279: PUSH
17280: LD_INT 9
17282: PUSH
17283: LD_INT 10
17285: PUSH
17286: LD_INT 11
17288: PUSH
17289: LD_INT 12
17291: PUSH
17292: LD_INT 13
17294: PUSH
17295: LD_INT 14
17297: PUSH
17298: LD_INT 15
17300: PUSH
17301: LD_INT 16
17303: PUSH
17304: LD_INT 17
17306: PUSH
17307: LD_INT 18
17309: PUSH
17310: LD_INT 19
17312: PUSH
17313: LD_INT 20
17315: PUSH
17316: LD_INT 21
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 23
17324: PUSH
17325: LD_INT 24
17327: PUSH
17328: LD_INT 25
17330: PUSH
17331: LD_INT 26
17333: PUSH
17334: LD_INT 28
17336: PUSH
17337: LD_INT 30
17339: PUSH
17340: LD_INT 31
17342: PUSH
17343: LD_INT 32
17345: PUSH
17346: LD_INT 34
17348: PUSH
17349: LD_INT 36
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 101
17387: PUSH
17388: LD_INT 102
17390: PUSH
17391: LD_INT 103
17393: PUSH
17394: LD_INT 104
17396: PUSH
17397: LD_INT 105
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: LD_INT 107
17405: PUSH
17406: LD_INT 108
17408: PUSH
17409: LD_INT 109
17411: PUSH
17412: LD_INT 110
17414: PUSH
17415: LD_INT 111
17417: PUSH
17418: LD_INT 112
17420: PUSH
17421: LD_INT 114
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: ST_TO_ADDR
17443: GO 19030
17445: LD_INT 12
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17661
17453: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: LD_INT 4
17470: PUSH
17471: LD_INT 5
17473: PUSH
17474: LD_INT 6
17476: PUSH
17477: LD_INT 7
17479: PUSH
17480: LD_INT 8
17482: PUSH
17483: LD_INT 9
17485: PUSH
17486: LD_INT 10
17488: PUSH
17489: LD_INT 11
17491: PUSH
17492: LD_INT 12
17494: PUSH
17495: LD_INT 13
17497: PUSH
17498: LD_INT 14
17500: PUSH
17501: LD_INT 15
17503: PUSH
17504: LD_INT 16
17506: PUSH
17507: LD_INT 17
17509: PUSH
17510: LD_INT 18
17512: PUSH
17513: LD_INT 19
17515: PUSH
17516: LD_INT 20
17518: PUSH
17519: LD_INT 21
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_INT 23
17527: PUSH
17528: LD_INT 24
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 26
17536: PUSH
17537: LD_INT 27
17539: PUSH
17540: LD_INT 28
17542: PUSH
17543: LD_INT 30
17545: PUSH
17546: LD_INT 31
17548: PUSH
17549: LD_INT 32
17551: PUSH
17552: LD_INT 33
17554: PUSH
17555: LD_INT 34
17557: PUSH
17558: LD_INT 36
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 101
17599: PUSH
17600: LD_INT 102
17602: PUSH
17603: LD_INT 103
17605: PUSH
17606: LD_INT 104
17608: PUSH
17609: LD_INT 105
17611: PUSH
17612: LD_INT 106
17614: PUSH
17615: LD_INT 107
17617: PUSH
17618: LD_INT 108
17620: PUSH
17621: LD_INT 109
17623: PUSH
17624: LD_INT 110
17626: PUSH
17627: LD_INT 111
17629: PUSH
17630: LD_INT 112
17632: PUSH
17633: LD_INT 113
17635: PUSH
17636: LD_INT 114
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: ST_TO_ADDR
17659: GO 19030
17661: LD_INT 13
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17865
17669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: LD_INT 4
17686: PUSH
17687: LD_INT 5
17689: PUSH
17690: LD_INT 8
17692: PUSH
17693: LD_INT 9
17695: PUSH
17696: LD_INT 10
17698: PUSH
17699: LD_INT 11
17701: PUSH
17702: LD_INT 12
17704: PUSH
17705: LD_INT 14
17707: PUSH
17708: LD_INT 15
17710: PUSH
17711: LD_INT 16
17713: PUSH
17714: LD_INT 17
17716: PUSH
17717: LD_INT 18
17719: PUSH
17720: LD_INT 19
17722: PUSH
17723: LD_INT 20
17725: PUSH
17726: LD_INT 21
17728: PUSH
17729: LD_INT 22
17731: PUSH
17732: LD_INT 23
17734: PUSH
17735: LD_INT 24
17737: PUSH
17738: LD_INT 25
17740: PUSH
17741: LD_INT 26
17743: PUSH
17744: LD_INT 27
17746: PUSH
17747: LD_INT 28
17749: PUSH
17750: LD_INT 30
17752: PUSH
17753: LD_INT 31
17755: PUSH
17756: LD_INT 32
17758: PUSH
17759: LD_INT 33
17761: PUSH
17762: LD_INT 34
17764: PUSH
17765: LD_INT 36
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 101
17803: PUSH
17804: LD_INT 102
17806: PUSH
17807: LD_INT 103
17809: PUSH
17810: LD_INT 104
17812: PUSH
17813: LD_INT 105
17815: PUSH
17816: LD_INT 106
17818: PUSH
17819: LD_INT 107
17821: PUSH
17822: LD_INT 108
17824: PUSH
17825: LD_INT 109
17827: PUSH
17828: LD_INT 110
17830: PUSH
17831: LD_INT 111
17833: PUSH
17834: LD_INT 112
17836: PUSH
17837: LD_INT 113
17839: PUSH
17840: LD_INT 114
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: ST_TO_ADDR
17863: GO 19030
17865: LD_INT 14
17867: DOUBLE
17868: EQUAL
17869: IFTRUE 17873
17871: GO 18085
17873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17874: LD_ADDR_VAR 0 1
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: LD_INT 4
17890: PUSH
17891: LD_INT 5
17893: PUSH
17894: LD_INT 6
17896: PUSH
17897: LD_INT 7
17899: PUSH
17900: LD_INT 8
17902: PUSH
17903: LD_INT 9
17905: PUSH
17906: LD_INT 10
17908: PUSH
17909: LD_INT 11
17911: PUSH
17912: LD_INT 12
17914: PUSH
17915: LD_INT 13
17917: PUSH
17918: LD_INT 14
17920: PUSH
17921: LD_INT 15
17923: PUSH
17924: LD_INT 16
17926: PUSH
17927: LD_INT 17
17929: PUSH
17930: LD_INT 18
17932: PUSH
17933: LD_INT 19
17935: PUSH
17936: LD_INT 20
17938: PUSH
17939: LD_INT 21
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_INT 23
17947: PUSH
17948: LD_INT 24
17950: PUSH
17951: LD_INT 25
17953: PUSH
17954: LD_INT 26
17956: PUSH
17957: LD_INT 27
17959: PUSH
17960: LD_INT 28
17962: PUSH
17963: LD_INT 29
17965: PUSH
17966: LD_INT 30
17968: PUSH
17969: LD_INT 31
17971: PUSH
17972: LD_INT 32
17974: PUSH
17975: LD_INT 33
17977: PUSH
17978: LD_INT 34
17980: PUSH
17981: LD_INT 36
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 101
18023: PUSH
18024: LD_INT 102
18026: PUSH
18027: LD_INT 103
18029: PUSH
18030: LD_INT 104
18032: PUSH
18033: LD_INT 105
18035: PUSH
18036: LD_INT 106
18038: PUSH
18039: LD_INT 107
18041: PUSH
18042: LD_INT 108
18044: PUSH
18045: LD_INT 109
18047: PUSH
18048: LD_INT 110
18050: PUSH
18051: LD_INT 111
18053: PUSH
18054: LD_INT 112
18056: PUSH
18057: LD_INT 113
18059: PUSH
18060: LD_INT 114
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: ST_TO_ADDR
18083: GO 19030
18085: LD_INT 15
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18305
18093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: LD_INT 3
18107: PUSH
18108: LD_INT 4
18110: PUSH
18111: LD_INT 5
18113: PUSH
18114: LD_INT 6
18116: PUSH
18117: LD_INT 7
18119: PUSH
18120: LD_INT 8
18122: PUSH
18123: LD_INT 9
18125: PUSH
18126: LD_INT 10
18128: PUSH
18129: LD_INT 11
18131: PUSH
18132: LD_INT 12
18134: PUSH
18135: LD_INT 13
18137: PUSH
18138: LD_INT 14
18140: PUSH
18141: LD_INT 15
18143: PUSH
18144: LD_INT 16
18146: PUSH
18147: LD_INT 17
18149: PUSH
18150: LD_INT 18
18152: PUSH
18153: LD_INT 19
18155: PUSH
18156: LD_INT 20
18158: PUSH
18159: LD_INT 21
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_INT 23
18167: PUSH
18168: LD_INT 24
18170: PUSH
18171: LD_INT 25
18173: PUSH
18174: LD_INT 26
18176: PUSH
18177: LD_INT 27
18179: PUSH
18180: LD_INT 28
18182: PUSH
18183: LD_INT 29
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 31
18191: PUSH
18192: LD_INT 32
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: LD_INT 36
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 101
18243: PUSH
18244: LD_INT 102
18246: PUSH
18247: LD_INT 103
18249: PUSH
18250: LD_INT 104
18252: PUSH
18253: LD_INT 105
18255: PUSH
18256: LD_INT 106
18258: PUSH
18259: LD_INT 107
18261: PUSH
18262: LD_INT 108
18264: PUSH
18265: LD_INT 109
18267: PUSH
18268: LD_INT 110
18270: PUSH
18271: LD_INT 111
18273: PUSH
18274: LD_INT 112
18276: PUSH
18277: LD_INT 113
18279: PUSH
18280: LD_INT 114
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: ST_TO_ADDR
18303: GO 19030
18305: LD_INT 16
18307: DOUBLE
18308: EQUAL
18309: IFTRUE 18313
18311: GO 18437
18313: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 4
18324: PUSH
18325: LD_INT 5
18327: PUSH
18328: LD_INT 7
18330: PUSH
18331: LD_INT 11
18333: PUSH
18334: LD_INT 12
18336: PUSH
18337: LD_INT 15
18339: PUSH
18340: LD_INT 16
18342: PUSH
18343: LD_INT 20
18345: PUSH
18346: LD_INT 21
18348: PUSH
18349: LD_INT 22
18351: PUSH
18352: LD_INT 23
18354: PUSH
18355: LD_INT 25
18357: PUSH
18358: LD_INT 26
18360: PUSH
18361: LD_INT 30
18363: PUSH
18364: LD_INT 31
18366: PUSH
18367: LD_INT 32
18369: PUSH
18370: LD_INT 33
18372: PUSH
18373: LD_INT 34
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 101
18399: PUSH
18400: LD_INT 102
18402: PUSH
18403: LD_INT 103
18405: PUSH
18406: LD_INT 106
18408: PUSH
18409: LD_INT 108
18411: PUSH
18412: LD_INT 112
18414: PUSH
18415: LD_INT 113
18417: PUSH
18418: LD_INT 114
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: ST_TO_ADDR
18435: GO 19030
18437: LD_INT 17
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18657
18445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18446: LD_ADDR_VAR 0 1
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: LD_INT 4
18462: PUSH
18463: LD_INT 5
18465: PUSH
18466: LD_INT 6
18468: PUSH
18469: LD_INT 7
18471: PUSH
18472: LD_INT 8
18474: PUSH
18475: LD_INT 9
18477: PUSH
18478: LD_INT 10
18480: PUSH
18481: LD_INT 11
18483: PUSH
18484: LD_INT 12
18486: PUSH
18487: LD_INT 13
18489: PUSH
18490: LD_INT 14
18492: PUSH
18493: LD_INT 15
18495: PUSH
18496: LD_INT 16
18498: PUSH
18499: LD_INT 17
18501: PUSH
18502: LD_INT 18
18504: PUSH
18505: LD_INT 19
18507: PUSH
18508: LD_INT 20
18510: PUSH
18511: LD_INT 21
18513: PUSH
18514: LD_INT 22
18516: PUSH
18517: LD_INT 23
18519: PUSH
18520: LD_INT 24
18522: PUSH
18523: LD_INT 25
18525: PUSH
18526: LD_INT 26
18528: PUSH
18529: LD_INT 27
18531: PUSH
18532: LD_INT 28
18534: PUSH
18535: LD_INT 29
18537: PUSH
18538: LD_INT 30
18540: PUSH
18541: LD_INT 31
18543: PUSH
18544: LD_INT 32
18546: PUSH
18547: LD_INT 33
18549: PUSH
18550: LD_INT 34
18552: PUSH
18553: LD_INT 36
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 101
18595: PUSH
18596: LD_INT 102
18598: PUSH
18599: LD_INT 103
18601: PUSH
18602: LD_INT 104
18604: PUSH
18605: LD_INT 105
18607: PUSH
18608: LD_INT 106
18610: PUSH
18611: LD_INT 107
18613: PUSH
18614: LD_INT 108
18616: PUSH
18617: LD_INT 109
18619: PUSH
18620: LD_INT 110
18622: PUSH
18623: LD_INT 111
18625: PUSH
18626: LD_INT 112
18628: PUSH
18629: LD_INT 113
18631: PUSH
18632: LD_INT 114
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: ST_TO_ADDR
18655: GO 19030
18657: LD_INT 18
18659: DOUBLE
18660: EQUAL
18661: IFTRUE 18665
18663: GO 18801
18665: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 4
18676: PUSH
18677: LD_INT 5
18679: PUSH
18680: LD_INT 7
18682: PUSH
18683: LD_INT 11
18685: PUSH
18686: LD_INT 12
18688: PUSH
18689: LD_INT 15
18691: PUSH
18692: LD_INT 16
18694: PUSH
18695: LD_INT 20
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 22
18703: PUSH
18704: LD_INT 23
18706: PUSH
18707: LD_INT 25
18709: PUSH
18710: LD_INT 26
18712: PUSH
18713: LD_INT 30
18715: PUSH
18716: LD_INT 31
18718: PUSH
18719: LD_INT 32
18721: PUSH
18722: LD_INT 33
18724: PUSH
18725: LD_INT 34
18727: PUSH
18728: LD_INT 35
18730: PUSH
18731: LD_INT 36
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 101
18759: PUSH
18760: LD_INT 102
18762: PUSH
18763: LD_INT 103
18765: PUSH
18766: LD_INT 106
18768: PUSH
18769: LD_INT 108
18771: PUSH
18772: LD_INT 112
18774: PUSH
18775: LD_INT 113
18777: PUSH
18778: LD_INT 114
18780: PUSH
18781: LD_INT 115
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: ST_TO_ADDR
18799: GO 19030
18801: LD_INT 19
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 19029
18809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18810: LD_ADDR_VAR 0 1
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 3
18823: PUSH
18824: LD_INT 4
18826: PUSH
18827: LD_INT 5
18829: PUSH
18830: LD_INT 6
18832: PUSH
18833: LD_INT 7
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: LD_INT 9
18841: PUSH
18842: LD_INT 10
18844: PUSH
18845: LD_INT 11
18847: PUSH
18848: LD_INT 12
18850: PUSH
18851: LD_INT 13
18853: PUSH
18854: LD_INT 14
18856: PUSH
18857: LD_INT 15
18859: PUSH
18860: LD_INT 16
18862: PUSH
18863: LD_INT 17
18865: PUSH
18866: LD_INT 18
18868: PUSH
18869: LD_INT 19
18871: PUSH
18872: LD_INT 20
18874: PUSH
18875: LD_INT 21
18877: PUSH
18878: LD_INT 22
18880: PUSH
18881: LD_INT 23
18883: PUSH
18884: LD_INT 24
18886: PUSH
18887: LD_INT 25
18889: PUSH
18890: LD_INT 26
18892: PUSH
18893: LD_INT 27
18895: PUSH
18896: LD_INT 28
18898: PUSH
18899: LD_INT 29
18901: PUSH
18902: LD_INT 30
18904: PUSH
18905: LD_INT 31
18907: PUSH
18908: LD_INT 32
18910: PUSH
18911: LD_INT 33
18913: PUSH
18914: LD_INT 34
18916: PUSH
18917: LD_INT 35
18919: PUSH
18920: LD_INT 36
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 101
18963: PUSH
18964: LD_INT 102
18966: PUSH
18967: LD_INT 103
18969: PUSH
18970: LD_INT 104
18972: PUSH
18973: LD_INT 105
18975: PUSH
18976: LD_INT 106
18978: PUSH
18979: LD_INT 107
18981: PUSH
18982: LD_INT 108
18984: PUSH
18985: LD_INT 109
18987: PUSH
18988: LD_INT 110
18990: PUSH
18991: LD_INT 111
18993: PUSH
18994: LD_INT 112
18996: PUSH
18997: LD_INT 113
18999: PUSH
19000: LD_INT 114
19002: PUSH
19003: LD_INT 115
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: ST_TO_ADDR
19027: GO 19030
19029: POP
// end else
19030: GO 19249
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: LD_INT 4
19048: PUSH
19049: LD_INT 5
19051: PUSH
19052: LD_INT 6
19054: PUSH
19055: LD_INT 7
19057: PUSH
19058: LD_INT 8
19060: PUSH
19061: LD_INT 9
19063: PUSH
19064: LD_INT 10
19066: PUSH
19067: LD_INT 11
19069: PUSH
19070: LD_INT 12
19072: PUSH
19073: LD_INT 13
19075: PUSH
19076: LD_INT 14
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: LD_INT 16
19084: PUSH
19085: LD_INT 17
19087: PUSH
19088: LD_INT 18
19090: PUSH
19091: LD_INT 19
19093: PUSH
19094: LD_INT 20
19096: PUSH
19097: LD_INT 21
19099: PUSH
19100: LD_INT 22
19102: PUSH
19103: LD_INT 23
19105: PUSH
19106: LD_INT 24
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: LD_INT 26
19114: PUSH
19115: LD_INT 27
19117: PUSH
19118: LD_INT 28
19120: PUSH
19121: LD_INT 29
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: LD_INT 31
19129: PUSH
19130: LD_INT 32
19132: PUSH
19133: LD_INT 33
19135: PUSH
19136: LD_INT 34
19138: PUSH
19139: LD_INT 35
19141: PUSH
19142: LD_INT 36
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 101
19185: PUSH
19186: LD_INT 102
19188: PUSH
19189: LD_INT 103
19191: PUSH
19192: LD_INT 104
19194: PUSH
19195: LD_INT 105
19197: PUSH
19198: LD_INT 106
19200: PUSH
19201: LD_INT 107
19203: PUSH
19204: LD_INT 108
19206: PUSH
19207: LD_INT 109
19209: PUSH
19210: LD_INT 110
19212: PUSH
19213: LD_INT 111
19215: PUSH
19216: LD_INT 112
19218: PUSH
19219: LD_INT 113
19221: PUSH
19222: LD_INT 114
19224: PUSH
19225: LD_INT 115
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: ST_TO_ADDR
// if result then
19249: LD_VAR 0 1
19253: IFFALSE 19542
// begin normal :=  ;
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_STRING 
19262: ST_TO_ADDR
// hardcore :=  ;
19263: LD_ADDR_VAR 0 4
19267: PUSH
19268: LD_STRING 
19270: ST_TO_ADDR
// for i = 1 to normalCounter do
19271: LD_ADDR_VAR 0 5
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_EXP 58
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19388
// begin tmp := 0 ;
19289: LD_ADDR_VAR 0 2
19293: PUSH
19294: LD_STRING 0
19296: ST_TO_ADDR
// if result [ 1 ] then
19297: LD_VAR 0 1
19301: PUSH
19302: LD_INT 1
19304: ARRAY
19305: IFFALSE 19370
// if result [ 1 ] [ 1 ] = i then
19307: LD_VAR 0 1
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PUSH
19316: LD_INT 1
19318: ARRAY
19319: PUSH
19320: LD_VAR 0 5
19324: EQUAL
19325: IFFALSE 19370
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: LD_VAR 0 1
19336: PPUSH
19337: LD_INT 1
19339: PPUSH
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 1
19347: ARRAY
19348: PPUSH
19349: LD_INT 1
19351: PPUSH
19352: CALL_OW 3
19356: PPUSH
19357: CALL_OW 1
19361: ST_TO_ADDR
// tmp := 1 ;
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: LD_STRING 1
19369: ST_TO_ADDR
// end ; normal := normal & tmp ;
19370: LD_ADDR_VAR 0 3
19374: PUSH
19375: LD_VAR 0 3
19379: PUSH
19380: LD_VAR 0 2
19384: STR
19385: ST_TO_ADDR
// end ;
19386: GO 19286
19388: POP
19389: POP
// for i = 1 to hardcoreCounter do
19390: LD_ADDR_VAR 0 5
19394: PUSH
19395: DOUBLE
19396: LD_INT 1
19398: DEC
19399: ST_TO_ADDR
19400: LD_EXP 59
19404: PUSH
19405: FOR_TO
19406: IFFALSE 19511
// begin tmp := 0 ;
19408: LD_ADDR_VAR 0 2
19412: PUSH
19413: LD_STRING 0
19415: ST_TO_ADDR
// if result [ 2 ] then
19416: LD_VAR 0 1
19420: PUSH
19421: LD_INT 2
19423: ARRAY
19424: IFFALSE 19493
// if result [ 2 ] [ 1 ] = 100 + i then
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 2
19433: ARRAY
19434: PUSH
19435: LD_INT 1
19437: ARRAY
19438: PUSH
19439: LD_INT 100
19441: PUSH
19442: LD_VAR 0 5
19446: PLUS
19447: EQUAL
19448: IFFALSE 19493
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 1
19459: PPUSH
19460: LD_INT 2
19462: PPUSH
19463: LD_VAR 0 1
19467: PUSH
19468: LD_INT 2
19470: ARRAY
19471: PPUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 3
19479: PPUSH
19480: CALL_OW 1
19484: ST_TO_ADDR
// tmp := 1 ;
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_STRING 1
19492: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_VAR 0 4
19502: PUSH
19503: LD_VAR 0 2
19507: STR
19508: ST_TO_ADDR
// end ;
19509: GO 19405
19511: POP
19512: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19513: LD_STRING getStreamItemsFromMission("
19515: PUSH
19516: LD_VAR 0 3
19520: STR
19521: PUSH
19522: LD_STRING ","
19524: STR
19525: PUSH
19526: LD_VAR 0 4
19530: STR
19531: PUSH
19532: LD_STRING ")
19534: STR
19535: PPUSH
19536: CALL_OW 559
// end else
19540: GO 19549
// ToLua ( getStreamItemsFromMission("","") ) ;
19542: LD_STRING getStreamItemsFromMission("","")
19544: PPUSH
19545: CALL_OW 559
// end ;
19549: LD_VAR 0 1
19553: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19554: LD_EXP 57
19558: PUSH
19559: LD_EXP 62
19563: AND
19564: IFFALSE 19688
19566: GO 19568
19568: DISABLE
19569: LD_INT 0
19571: PPUSH
19572: PPUSH
// begin enable ;
19573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: LD_INT 22
19581: PUSH
19582: LD_OWVAR 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 34
19596: PUSH
19597: LD_INT 7
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 34
19606: PUSH
19607: LD_INT 45
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 34
19616: PUSH
19617: LD_INT 28
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 34
19626: PUSH
19627: LD_INT 47
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 69
19649: ST_TO_ADDR
// if not tmp then
19650: LD_VAR 0 2
19654: NOT
19655: IFFALSE 19659
// exit ;
19657: GO 19688
// for i in tmp do
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_VAR 0 2
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19686
// begin SetLives ( i , 0 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 234
// end ;
19684: GO 19669
19686: POP
19687: POP
// end ;
19688: PPOPN 2
19690: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19691: LD_EXP 57
19695: PUSH
19696: LD_EXP 63
19700: AND
19701: IFFALSE 19785
19703: GO 19705
19705: DISABLE
19706: LD_INT 0
19708: PPUSH
19709: PPUSH
// begin enable ;
19710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19711: LD_ADDR_VAR 0 2
19715: PUSH
19716: LD_INT 22
19718: PUSH
19719: LD_OWVAR 2
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 32
19730: PUSH
19731: LD_INT 3
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PPUSH
19742: CALL_OW 69
19746: ST_TO_ADDR
// if not tmp then
19747: LD_VAR 0 2
19751: NOT
19752: IFFALSE 19756
// exit ;
19754: GO 19785
// for i in tmp do
19756: LD_ADDR_VAR 0 1
19760: PUSH
19761: LD_VAR 0 2
19765: PUSH
19766: FOR_IN
19767: IFFALSE 19783
// begin SetLives ( i , 0 ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: LD_INT 0
19776: PPUSH
19777: CALL_OW 234
// end ;
19781: GO 19766
19783: POP
19784: POP
// end ;
19785: PPOPN 2
19787: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19788: LD_EXP 57
19792: PUSH
19793: LD_EXP 60
19797: AND
19798: IFFALSE 19891
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
// begin enable ;
19806: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19807: LD_ADDR_VAR 0 1
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_OWVAR 2
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 25
19829: PUSH
19830: LD_INT 5
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 25
19839: PUSH
19840: LD_INT 9
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 25
19849: PUSH
19850: LD_INT 8
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PPUSH
19867: CALL_OW 69
19871: PUSH
19872: FOR_IN
19873: IFFALSE 19889
// begin SetClass ( i , 1 ) ;
19875: LD_VAR 0 1
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 336
// end ;
19887: GO 19872
19889: POP
19890: POP
// end ;
19891: PPOPN 1
19893: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19894: LD_EXP 57
19898: PUSH
19899: LD_EXP 61
19903: AND
19904: PUSH
19905: LD_OWVAR 65
19909: PUSH
19910: LD_INT 7
19912: LESS
19913: AND
19914: IFFALSE 19928
19916: GO 19918
19918: DISABLE
// begin enable ;
19919: ENABLE
// game_speed := 7 ;
19920: LD_ADDR_OWVAR 65
19924: PUSH
19925: LD_INT 7
19927: ST_TO_ADDR
// end ;
19928: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19929: LD_EXP 57
19933: PUSH
19934: LD_EXP 64
19938: AND
19939: IFFALSE 20141
19941: GO 19943
19943: DISABLE
19944: LD_INT 0
19946: PPUSH
19947: PPUSH
19948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 81
19956: PUSH
19957: LD_OWVAR 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 21
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL_OW 69
19984: ST_TO_ADDR
// if not tmp then
19985: LD_VAR 0 3
19989: NOT
19990: IFFALSE 19994
// exit ;
19992: GO 20141
// if tmp > 5 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 5
20001: GREATER
20002: IFFALSE 20014
// k := 5 else
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_INT 5
20011: ST_TO_ADDR
20012: GO 20024
// k := tmp ;
20014: LD_ADDR_VAR 0 2
20018: PUSH
20019: LD_VAR 0 3
20023: ST_TO_ADDR
// for i := 1 to k do
20024: LD_ADDR_VAR 0 1
20028: PUSH
20029: DOUBLE
20030: LD_INT 1
20032: DEC
20033: ST_TO_ADDR
20034: LD_VAR 0 2
20038: PUSH
20039: FOR_TO
20040: IFFALSE 20139
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_VAR 0 1
20051: ARRAY
20052: PPUSH
20053: LD_VAR 0 1
20057: PUSH
20058: LD_INT 4
20060: MOD
20061: PUSH
20062: LD_INT 1
20064: PLUS
20065: PPUSH
20066: CALL_OW 259
20070: PUSH
20071: LD_INT 10
20073: LESS
20074: IFFALSE 20137
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20076: LD_VAR 0 3
20080: PUSH
20081: LD_VAR 0 1
20085: ARRAY
20086: PPUSH
20087: LD_VAR 0 1
20091: PUSH
20092: LD_INT 4
20094: MOD
20095: PUSH
20096: LD_INT 1
20098: PLUS
20099: PPUSH
20100: LD_VAR 0 3
20104: PUSH
20105: LD_VAR 0 1
20109: ARRAY
20110: PPUSH
20111: LD_VAR 0 1
20115: PUSH
20116: LD_INT 4
20118: MOD
20119: PUSH
20120: LD_INT 1
20122: PLUS
20123: PPUSH
20124: CALL_OW 259
20128: PUSH
20129: LD_INT 1
20131: PLUS
20132: PPUSH
20133: CALL_OW 237
20137: GO 20039
20139: POP
20140: POP
// end ;
20141: PPOPN 3
20143: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20144: LD_EXP 57
20148: PUSH
20149: LD_EXP 65
20153: AND
20154: IFFALSE 20174
20156: GO 20158
20158: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20159: LD_INT 4
20161: PPUSH
20162: LD_OWVAR 2
20166: PPUSH
20167: LD_INT 0
20169: PPUSH
20170: CALL_OW 324
20174: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20175: LD_EXP 57
20179: PUSH
20180: LD_EXP 94
20184: AND
20185: IFFALSE 20205
20187: GO 20189
20189: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20190: LD_INT 19
20192: PPUSH
20193: LD_OWVAR 2
20197: PPUSH
20198: LD_INT 0
20200: PPUSH
20201: CALL_OW 324
20205: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20206: LD_EXP 57
20210: PUSH
20211: LD_EXP 66
20215: AND
20216: IFFALSE 20318
20218: GO 20220
20220: DISABLE
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
// begin enable ;
20225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 22
20233: PUSH
20234: LD_OWVAR 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_INT 34
20248: PUSH
20249: LD_INT 11
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 34
20258: PUSH
20259: LD_INT 30
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PPUSH
20275: CALL_OW 69
20279: ST_TO_ADDR
// if not tmp then
20280: LD_VAR 0 2
20284: NOT
20285: IFFALSE 20289
// exit ;
20287: GO 20318
// for i in tmp do
20289: LD_ADDR_VAR 0 1
20293: PUSH
20294: LD_VAR 0 2
20298: PUSH
20299: FOR_IN
20300: IFFALSE 20316
// begin SetLives ( i , 0 ) ;
20302: LD_VAR 0 1
20306: PPUSH
20307: LD_INT 0
20309: PPUSH
20310: CALL_OW 234
// end ;
20314: GO 20299
20316: POP
20317: POP
// end ;
20318: PPOPN 2
20320: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20321: LD_EXP 57
20325: PUSH
20326: LD_EXP 67
20330: AND
20331: IFFALSE 20351
20333: GO 20335
20335: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20336: LD_INT 32
20338: PPUSH
20339: LD_OWVAR 2
20343: PPUSH
20344: LD_INT 0
20346: PPUSH
20347: CALL_OW 324
20351: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20352: LD_EXP 57
20356: PUSH
20357: LD_EXP 68
20361: AND
20362: IFFALSE 20543
20364: GO 20366
20366: DISABLE
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
20371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 33
20391: PUSH
20392: LD_INT 3
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PPUSH
20403: CALL_OW 69
20407: ST_TO_ADDR
// if not tmp then
20408: LD_VAR 0 2
20412: NOT
20413: IFFALSE 20417
// exit ;
20415: GO 20543
// side := 0 ;
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// for i := 1 to 8 do
20425: LD_ADDR_VAR 0 1
20429: PUSH
20430: DOUBLE
20431: LD_INT 1
20433: DEC
20434: ST_TO_ADDR
20435: LD_INT 8
20437: PUSH
20438: FOR_TO
20439: IFFALSE 20487
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20441: LD_OWVAR 2
20445: PUSH
20446: LD_VAR 0 1
20450: NONEQUAL
20451: PUSH
20452: LD_OWVAR 2
20456: PPUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 81
20466: PUSH
20467: LD_INT 2
20469: EQUAL
20470: AND
20471: IFFALSE 20485
// begin side := i ;
20473: LD_ADDR_VAR 0 3
20477: PUSH
20478: LD_VAR 0 1
20482: ST_TO_ADDR
// break ;
20483: GO 20487
// end ;
20485: GO 20438
20487: POP
20488: POP
// if not side then
20489: LD_VAR 0 3
20493: NOT
20494: IFFALSE 20498
// exit ;
20496: GO 20543
// for i := 1 to tmp do
20498: LD_ADDR_VAR 0 1
20502: PUSH
20503: DOUBLE
20504: LD_INT 1
20506: DEC
20507: ST_TO_ADDR
20508: LD_VAR 0 2
20512: PUSH
20513: FOR_TO
20514: IFFALSE 20541
// if Prob ( 60 ) then
20516: LD_INT 60
20518: PPUSH
20519: CALL_OW 13
20523: IFFALSE 20539
// SetSide ( i , side ) ;
20525: LD_VAR 0 1
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: CALL_OW 235
20539: GO 20513
20541: POP
20542: POP
// end ;
20543: PPOPN 3
20545: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20546: LD_EXP 57
20550: PUSH
20551: LD_EXP 70
20555: AND
20556: IFFALSE 20675
20558: GO 20560
20560: DISABLE
20561: LD_INT 0
20563: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20564: LD_ADDR_VAR 0 1
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_OWVAR 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 21
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 3
20593: PUSH
20594: LD_INT 23
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: PPUSH
20613: CALL_OW 69
20617: PUSH
20618: FOR_IN
20619: IFFALSE 20673
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL_OW 257
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 3
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: IN
20649: IFFALSE 20671
// SetClass ( un , rand ( 1 , 4 ) ) ;
20651: LD_VAR 0 1
20655: PPUSH
20656: LD_INT 1
20658: PPUSH
20659: LD_INT 4
20661: PPUSH
20662: CALL_OW 12
20666: PPUSH
20667: CALL_OW 336
20671: GO 20618
20673: POP
20674: POP
// end ;
20675: PPOPN 1
20677: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20678: LD_EXP 57
20682: PUSH
20683: LD_EXP 69
20687: AND
20688: IFFALSE 20767
20690: GO 20692
20692: DISABLE
20693: LD_INT 0
20695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20696: LD_ADDR_VAR 0 1
20700: PUSH
20701: LD_INT 22
20703: PUSH
20704: LD_OWVAR 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 21
20715: PUSH
20716: LD_INT 3
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PPUSH
20727: CALL_OW 69
20731: ST_TO_ADDR
// if not tmp then
20732: LD_VAR 0 1
20736: NOT
20737: IFFALSE 20741
// exit ;
20739: GO 20767
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20741: LD_VAR 0 1
20745: PUSH
20746: LD_INT 1
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 12
20758: ARRAY
20759: PPUSH
20760: LD_INT 100
20762: PPUSH
20763: CALL_OW 234
// end ;
20767: PPOPN 1
20769: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20770: LD_EXP 57
20774: PUSH
20775: LD_EXP 71
20779: AND
20780: IFFALSE 20878
20782: GO 20784
20784: DISABLE
20785: LD_INT 0
20787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20788: LD_ADDR_VAR 0 1
20792: PUSH
20793: LD_INT 22
20795: PUSH
20796: LD_OWVAR 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: ST_TO_ADDR
// if not tmp then
20824: LD_VAR 0 1
20828: NOT
20829: IFFALSE 20833
// exit ;
20831: GO 20878
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20833: LD_VAR 0 1
20837: PUSH
20838: LD_INT 1
20840: PPUSH
20841: LD_VAR 0 1
20845: PPUSH
20846: CALL_OW 12
20850: ARRAY
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: LD_INT 4
20857: PPUSH
20858: CALL_OW 12
20862: PPUSH
20863: LD_INT 3000
20865: PPUSH
20866: LD_INT 9000
20868: PPUSH
20869: CALL_OW 12
20873: PPUSH
20874: CALL_OW 492
// end ;
20878: PPOPN 1
20880: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20881: LD_EXP 57
20885: PUSH
20886: LD_EXP 72
20890: AND
20891: IFFALSE 20911
20893: GO 20895
20895: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20896: LD_INT 1
20898: PPUSH
20899: LD_OWVAR 2
20903: PPUSH
20904: LD_INT 0
20906: PPUSH
20907: CALL_OW 324
20911: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20912: LD_EXP 57
20916: PUSH
20917: LD_EXP 73
20921: AND
20922: IFFALSE 21005
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_OWVAR 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 21
20950: PUSH
20951: LD_INT 3
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: CALL_OW 69
20966: ST_TO_ADDR
// if not tmp then
20967: LD_VAR 0 2
20971: NOT
20972: IFFALSE 20976
// exit ;
20974: GO 21005
// for i in tmp do
20976: LD_ADDR_VAR 0 1
20980: PUSH
20981: LD_VAR 0 2
20985: PUSH
20986: FOR_IN
20987: IFFALSE 21003
// SetBLevel ( i , 10 ) ;
20989: LD_VAR 0 1
20993: PPUSH
20994: LD_INT 10
20996: PPUSH
20997: CALL_OW 241
21001: GO 20986
21003: POP
21004: POP
// end ;
21005: PPOPN 2
21007: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21008: LD_EXP 57
21012: PUSH
21013: LD_EXP 74
21017: AND
21018: IFFALSE 21129
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
21026: PPUSH
21027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_INT 22
21035: PUSH
21036: LD_OWVAR 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 25
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: ST_TO_ADDR
// if not tmp then
21064: LD_VAR 0 3
21068: NOT
21069: IFFALSE 21073
// exit ;
21071: GO 21129
// un := tmp [ rand ( 1 , tmp ) ] ;
21073: LD_ADDR_VAR 0 2
21077: PUSH
21078: LD_VAR 0 3
21082: PUSH
21083: LD_INT 1
21085: PPUSH
21086: LD_VAR 0 3
21090: PPUSH
21091: CALL_OW 12
21095: ARRAY
21096: ST_TO_ADDR
// if Crawls ( un ) then
21097: LD_VAR 0 2
21101: PPUSH
21102: CALL_OW 318
21106: IFFALSE 21117
// ComWalk ( un ) ;
21108: LD_VAR 0 2
21112: PPUSH
21113: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21117: LD_VAR 0 2
21121: PPUSH
21122: LD_INT 5
21124: PPUSH
21125: CALL_OW 336
// end ;
21129: PPOPN 3
21131: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21132: LD_EXP 57
21136: PUSH
21137: LD_EXP 75
21141: AND
21142: PUSH
21143: LD_OWVAR 67
21147: PUSH
21148: LD_INT 3
21150: LESS
21151: AND
21152: IFFALSE 21171
21154: GO 21156
21156: DISABLE
// Difficulty := Difficulty + 1 ;
21157: LD_ADDR_OWVAR 67
21161: PUSH
21162: LD_OWVAR 67
21166: PUSH
21167: LD_INT 1
21169: PLUS
21170: ST_TO_ADDR
21171: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21172: LD_EXP 57
21176: PUSH
21177: LD_EXP 76
21181: AND
21182: IFFALSE 21285
21184: GO 21186
21186: DISABLE
21187: LD_INT 0
21189: PPUSH
// begin for i := 1 to 5 do
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: DOUBLE
21196: LD_INT 1
21198: DEC
21199: ST_TO_ADDR
21200: LD_INT 5
21202: PUSH
21203: FOR_TO
21204: IFFALSE 21283
// begin uc_nation := nation_nature ;
21206: LD_ADDR_OWVAR 21
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// uc_side := 0 ;
21214: LD_ADDR_OWVAR 20
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21222: LD_ADDR_OWVAR 29
21226: PUSH
21227: LD_INT 12
21229: PUSH
21230: LD_INT 12
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: ST_TO_ADDR
// hc_agressivity := 20 ;
21237: LD_ADDR_OWVAR 35
21241: PUSH
21242: LD_INT 20
21244: ST_TO_ADDR
// hc_class := class_tiger ;
21245: LD_ADDR_OWVAR 28
21249: PUSH
21250: LD_INT 14
21252: ST_TO_ADDR
// hc_gallery :=  ;
21253: LD_ADDR_OWVAR 33
21257: PUSH
21258: LD_STRING 
21260: ST_TO_ADDR
// hc_name :=  ;
21261: LD_ADDR_OWVAR 26
21265: PUSH
21266: LD_STRING 
21268: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21269: CALL_OW 44
21273: PPUSH
21274: LD_INT 0
21276: PPUSH
21277: CALL_OW 51
// end ;
21281: GO 21203
21283: POP
21284: POP
// end ;
21285: PPOPN 1
21287: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21288: LD_EXP 57
21292: PUSH
21293: LD_EXP 77
21297: AND
21298: IFFALSE 21307
21300: GO 21302
21302: DISABLE
// StreamSibBomb ;
21303: CALL 21308 0 0
21307: END
// export function StreamSibBomb ; var i , x , y ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
// result := false ;
21314: LD_ADDR_VAR 0 1
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// for i := 1 to 16 do
21322: LD_ADDR_VAR 0 2
21326: PUSH
21327: DOUBLE
21328: LD_INT 1
21330: DEC
21331: ST_TO_ADDR
21332: LD_INT 16
21334: PUSH
21335: FOR_TO
21336: IFFALSE 21535
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21338: LD_ADDR_VAR 0 3
21342: PUSH
21343: LD_INT 10
21345: PUSH
21346: LD_INT 20
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 40
21354: PUSH
21355: LD_INT 50
21357: PUSH
21358: LD_INT 60
21360: PUSH
21361: LD_INT 70
21363: PUSH
21364: LD_INT 80
21366: PUSH
21367: LD_INT 90
21369: PUSH
21370: LD_INT 100
21372: PUSH
21373: LD_INT 110
21375: PUSH
21376: LD_INT 120
21378: PUSH
21379: LD_INT 130
21381: PUSH
21382: LD_INT 140
21384: PUSH
21385: LD_INT 150
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: PPUSH
21408: LD_INT 15
21410: PPUSH
21411: CALL_OW 12
21415: ARRAY
21416: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21417: LD_ADDR_VAR 0 4
21421: PUSH
21422: LD_INT 10
21424: PUSH
21425: LD_INT 20
21427: PUSH
21428: LD_INT 30
21430: PUSH
21431: LD_INT 40
21433: PUSH
21434: LD_INT 50
21436: PUSH
21437: LD_INT 60
21439: PUSH
21440: LD_INT 70
21442: PUSH
21443: LD_INT 80
21445: PUSH
21446: LD_INT 90
21448: PUSH
21449: LD_INT 100
21451: PUSH
21452: LD_INT 110
21454: PUSH
21455: LD_INT 120
21457: PUSH
21458: LD_INT 130
21460: PUSH
21461: LD_INT 140
21463: PUSH
21464: LD_INT 150
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 15
21489: PPUSH
21490: CALL_OW 12
21494: ARRAY
21495: ST_TO_ADDR
// if ValidHex ( x , y ) then
21496: LD_VAR 0 3
21500: PPUSH
21501: LD_VAR 0 4
21505: PPUSH
21506: CALL_OW 488
21510: IFFALSE 21533
// begin result := [ x , y ] ;
21512: LD_ADDR_VAR 0 1
21516: PUSH
21517: LD_VAR 0 3
21521: PUSH
21522: LD_VAR 0 4
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: ST_TO_ADDR
// break ;
21531: GO 21535
// end ; end ;
21533: GO 21335
21535: POP
21536: POP
// if result then
21537: LD_VAR 0 1
21541: IFFALSE 21601
// begin ToLua ( playSibBomb() ) ;
21543: LD_STRING playSibBomb()
21545: PPUSH
21546: CALL_OW 559
// wait ( 0 0$14 ) ;
21550: LD_INT 490
21552: PPUSH
21553: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21557: LD_VAR 0 1
21561: PUSH
21562: LD_INT 1
21564: ARRAY
21565: PPUSH
21566: LD_VAR 0 1
21570: PUSH
21571: LD_INT 2
21573: ARRAY
21574: PPUSH
21575: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21579: LD_VAR 0 1
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PPUSH
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 2
21595: ARRAY
21596: PPUSH
21597: CALL_OW 429
// end ; end ;
21601: LD_VAR 0 1
21605: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21606: LD_EXP 57
21610: PUSH
21611: LD_EXP 79
21615: AND
21616: IFFALSE 21628
21618: GO 21620
21620: DISABLE
// YouLost (  ) ;
21621: LD_STRING 
21623: PPUSH
21624: CALL_OW 104
21628: END
// every 0 0$1 trigger StreamModeActive and sFog do
21629: LD_EXP 57
21633: PUSH
21634: LD_EXP 78
21638: AND
21639: IFFALSE 21653
21641: GO 21643
21643: DISABLE
// FogOff ( your_side ) ;
21644: LD_OWVAR 2
21648: PPUSH
21649: CALL_OW 344
21653: END
// every 0 0$1 trigger StreamModeActive and sSun do
21654: LD_EXP 57
21658: PUSH
21659: LD_EXP 80
21663: AND
21664: IFFALSE 21692
21666: GO 21668
21668: DISABLE
// begin solar_recharge_percent := 0 ;
21669: LD_ADDR_OWVAR 79
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21677: LD_INT 10500
21679: PPUSH
21680: CALL_OW 67
// solar_recharge_percent := 100 ;
21684: LD_ADDR_OWVAR 79
21688: PUSH
21689: LD_INT 100
21691: ST_TO_ADDR
// end ;
21692: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21693: LD_EXP 57
21697: PUSH
21698: LD_EXP 81
21702: AND
21703: IFFALSE 21942
21705: GO 21707
21707: DISABLE
21708: LD_INT 0
21710: PPUSH
21711: PPUSH
21712: PPUSH
// begin tmp := [ ] ;
21713: LD_ADDR_VAR 0 3
21717: PUSH
21718: EMPTY
21719: ST_TO_ADDR
// for i := 1 to 6 do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: DOUBLE
21726: LD_INT 1
21728: DEC
21729: ST_TO_ADDR
21730: LD_INT 6
21732: PUSH
21733: FOR_TO
21734: IFFALSE 21839
// begin uc_nation := nation_nature ;
21736: LD_ADDR_OWVAR 21
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// uc_side := 0 ;
21744: LD_ADDR_OWVAR 20
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21752: LD_ADDR_OWVAR 29
21756: PUSH
21757: LD_INT 12
21759: PUSH
21760: LD_INT 12
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: ST_TO_ADDR
// hc_agressivity := 20 ;
21767: LD_ADDR_OWVAR 35
21771: PUSH
21772: LD_INT 20
21774: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21775: LD_ADDR_OWVAR 28
21779: PUSH
21780: LD_INT 17
21782: ST_TO_ADDR
// hc_gallery :=  ;
21783: LD_ADDR_OWVAR 33
21787: PUSH
21788: LD_STRING 
21790: ST_TO_ADDR
// hc_name :=  ;
21791: LD_ADDR_OWVAR 26
21795: PUSH
21796: LD_STRING 
21798: ST_TO_ADDR
// un := CreateHuman ;
21799: LD_ADDR_VAR 0 2
21803: PUSH
21804: CALL_OW 44
21808: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21809: LD_VAR 0 2
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: CALL_OW 51
// tmp := tmp ^ un ;
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: LD_VAR 0 3
21830: PUSH
21831: LD_VAR 0 2
21835: ADD
21836: ST_TO_ADDR
// end ;
21837: GO 21733
21839: POP
21840: POP
// repeat wait ( 0 0$1 ) ;
21841: LD_INT 35
21843: PPUSH
21844: CALL_OW 67
// for un in tmp do
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_VAR 0 3
21857: PUSH
21858: FOR_IN
21859: IFFALSE 21933
// begin if IsDead ( un ) then
21861: LD_VAR 0 2
21865: PPUSH
21866: CALL_OW 301
21870: IFFALSE 21890
// begin tmp := tmp diff un ;
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_VAR 0 3
21881: PUSH
21882: LD_VAR 0 2
21886: DIFF
21887: ST_TO_ADDR
// continue ;
21888: GO 21858
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21890: LD_VAR 0 2
21894: PPUSH
21895: LD_INT 3
21897: PUSH
21898: LD_INT 22
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PPUSH
21912: CALL_OW 69
21916: PPUSH
21917: LD_VAR 0 2
21921: PPUSH
21922: CALL_OW 74
21926: PPUSH
21927: CALL_OW 115
// end ;
21931: GO 21858
21933: POP
21934: POP
// until not tmp ;
21935: LD_VAR 0 3
21939: NOT
21940: IFFALSE 21841
// end ;
21942: PPOPN 3
21944: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21945: LD_EXP 57
21949: PUSH
21950: LD_EXP 82
21954: AND
21955: IFFALSE 22009
21957: GO 21959
21959: DISABLE
// begin ToLua ( displayTroll(); ) ;
21960: LD_STRING displayTroll();
21962: PPUSH
21963: CALL_OW 559
// wait ( 3 3$00 ) ;
21967: LD_INT 6300
21969: PPUSH
21970: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21974: LD_STRING hideTroll();
21976: PPUSH
21977: CALL_OW 559
// wait ( 1 1$00 ) ;
21981: LD_INT 2100
21983: PPUSH
21984: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21988: LD_STRING displayTroll();
21990: PPUSH
21991: CALL_OW 559
// wait ( 1 1$00 ) ;
21995: LD_INT 2100
21997: PPUSH
21998: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22002: LD_STRING hideTroll();
22004: PPUSH
22005: CALL_OW 559
// end ;
22009: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22010: LD_EXP 57
22014: PUSH
22015: LD_EXP 83
22019: AND
22020: IFFALSE 22083
22022: GO 22024
22024: DISABLE
22025: LD_INT 0
22027: PPUSH
// begin p := 0 ;
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// repeat game_speed := 1 ;
22036: LD_ADDR_OWVAR 65
22040: PUSH
22041: LD_INT 1
22043: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22044: LD_INT 35
22046: PPUSH
22047: CALL_OW 67
// p := p + 1 ;
22051: LD_ADDR_VAR 0 1
22055: PUSH
22056: LD_VAR 0 1
22060: PUSH
22061: LD_INT 1
22063: PLUS
22064: ST_TO_ADDR
// until p >= 60 ;
22065: LD_VAR 0 1
22069: PUSH
22070: LD_INT 60
22072: GREATEREQUAL
22073: IFFALSE 22036
// game_speed := 4 ;
22075: LD_ADDR_OWVAR 65
22079: PUSH
22080: LD_INT 4
22082: ST_TO_ADDR
// end ;
22083: PPOPN 1
22085: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22086: LD_EXP 57
22090: PUSH
22091: LD_EXP 84
22095: AND
22096: IFFALSE 22242
22098: GO 22100
22100: DISABLE
22101: LD_INT 0
22103: PPUSH
22104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22105: LD_ADDR_VAR 0 1
22109: PUSH
22110: LD_INT 22
22112: PUSH
22113: LD_OWVAR 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: ST_TO_ADDR
// if not depot then
22159: LD_VAR 0 1
22163: NOT
22164: IFFALSE 22168
// exit ;
22166: GO 22242
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22168: LD_ADDR_VAR 0 2
22172: PUSH
22173: LD_VAR 0 1
22177: PUSH
22178: LD_INT 1
22180: PPUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL_OW 12
22190: ARRAY
22191: PPUSH
22192: CALL_OW 274
22196: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22197: LD_VAR 0 2
22201: PPUSH
22202: LD_INT 1
22204: PPUSH
22205: LD_INT 0
22207: PPUSH
22208: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22212: LD_VAR 0 2
22216: PPUSH
22217: LD_INT 2
22219: PPUSH
22220: LD_INT 0
22222: PPUSH
22223: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22227: LD_VAR 0 2
22231: PPUSH
22232: LD_INT 3
22234: PPUSH
22235: LD_INT 0
22237: PPUSH
22238: CALL_OW 277
// end ;
22242: PPOPN 2
22244: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22245: LD_EXP 57
22249: PUSH
22250: LD_EXP 85
22254: AND
22255: IFFALSE 22352
22257: GO 22259
22259: DISABLE
22260: LD_INT 0
22262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22263: LD_ADDR_VAR 0 1
22267: PUSH
22268: LD_INT 22
22270: PUSH
22271: LD_OWVAR 2
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: LD_INT 23
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: PPUSH
22312: CALL_OW 69
22316: ST_TO_ADDR
// if not tmp then
22317: LD_VAR 0 1
22321: NOT
22322: IFFALSE 22326
// exit ;
22324: GO 22352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22326: LD_VAR 0 1
22330: PUSH
22331: LD_INT 1
22333: PPUSH
22334: LD_VAR 0 1
22338: PPUSH
22339: CALL_OW 12
22343: ARRAY
22344: PPUSH
22345: LD_INT 200
22347: PPUSH
22348: CALL_OW 234
// end ;
22352: PPOPN 1
22354: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22355: LD_EXP 57
22359: PUSH
22360: LD_EXP 86
22364: AND
22365: IFFALSE 22444
22367: GO 22369
22369: DISABLE
22370: LD_INT 0
22372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22373: LD_ADDR_VAR 0 1
22377: PUSH
22378: LD_INT 22
22380: PUSH
22381: LD_OWVAR 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 21
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PPUSH
22404: CALL_OW 69
22408: ST_TO_ADDR
// if not tmp then
22409: LD_VAR 0 1
22413: NOT
22414: IFFALSE 22418
// exit ;
22416: GO 22444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22418: LD_VAR 0 1
22422: PUSH
22423: LD_INT 1
22425: PPUSH
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 12
22435: ARRAY
22436: PPUSH
22437: LD_INT 60
22439: PPUSH
22440: CALL_OW 234
// end ;
22444: PPOPN 1
22446: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22447: LD_EXP 57
22451: PUSH
22452: LD_EXP 87
22456: AND
22457: IFFALSE 22556
22459: GO 22461
22461: DISABLE
22462: LD_INT 0
22464: PPUSH
22465: PPUSH
// begin enable ;
22466: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22467: LD_ADDR_VAR 0 1
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_OWVAR 2
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 61
22486: PUSH
22487: EMPTY
22488: LIST
22489: PUSH
22490: LD_INT 33
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 69
22509: ST_TO_ADDR
// if not tmp then
22510: LD_VAR 0 1
22514: NOT
22515: IFFALSE 22519
// exit ;
22517: GO 22556
// for i in tmp do
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_VAR 0 1
22528: PUSH
22529: FOR_IN
22530: IFFALSE 22554
// if IsControledBy ( i ) then
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 312
22541: IFFALSE 22552
// ComUnlink ( i ) ;
22543: LD_VAR 0 2
22547: PPUSH
22548: CALL_OW 136
22552: GO 22529
22554: POP
22555: POP
// end ;
22556: PPOPN 2
22558: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22559: LD_EXP 57
22563: PUSH
22564: LD_EXP 88
22568: AND
22569: IFFALSE 22709
22571: GO 22573
22573: DISABLE
22574: LD_INT 0
22576: PPUSH
22577: PPUSH
// begin ToLua ( displayPowell(); ) ;
22578: LD_STRING displayPowell();
22580: PPUSH
22581: CALL_OW 559
// uc_side := 0 ;
22585: LD_ADDR_OWVAR 20
22589: PUSH
22590: LD_INT 0
22592: ST_TO_ADDR
// uc_nation := 2 ;
22593: LD_ADDR_OWVAR 21
22597: PUSH
22598: LD_INT 2
22600: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22601: LD_ADDR_OWVAR 37
22605: PUSH
22606: LD_INT 14
22608: ST_TO_ADDR
// vc_engine := engine_siberite ;
22609: LD_ADDR_OWVAR 39
22613: PUSH
22614: LD_INT 3
22616: ST_TO_ADDR
// vc_control := control_apeman ;
22617: LD_ADDR_OWVAR 38
22621: PUSH
22622: LD_INT 5
22624: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22625: LD_ADDR_OWVAR 40
22629: PUSH
22630: LD_INT 29
22632: ST_TO_ADDR
// un := CreateVehicle ;
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: CALL_OW 45
22642: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22643: LD_VAR 0 2
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22655: LD_INT 35
22657: PPUSH
22658: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22662: LD_VAR 0 2
22666: PPUSH
22667: LD_INT 22
22669: PUSH
22670: LD_OWVAR 2
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: PPUSH
22684: LD_VAR 0 2
22688: PPUSH
22689: CALL_OW 74
22693: PPUSH
22694: CALL_OW 115
// until IsDead ( un ) ;
22698: LD_VAR 0 2
22702: PPUSH
22703: CALL_OW 301
22707: IFFALSE 22655
// end ;
22709: PPOPN 2
22711: END
// every 0 0$1 trigger StreamModeActive and sStu do
22712: LD_EXP 57
22716: PUSH
22717: LD_EXP 96
22721: AND
22722: IFFALSE 22738
22724: GO 22726
22726: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22727: LD_STRING displayStucuk();
22729: PPUSH
22730: CALL_OW 559
// ResetFog ;
22734: CALL_OW 335
// end ;
22738: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22739: LD_EXP 57
22743: PUSH
22744: LD_EXP 89
22748: AND
22749: IFFALSE 22890
22751: GO 22753
22753: DISABLE
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22758: LD_ADDR_VAR 0 2
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_OWVAR 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 21
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PPUSH
22789: CALL_OW 69
22793: ST_TO_ADDR
// if not tmp then
22794: LD_VAR 0 2
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 22890
// un := tmp [ rand ( 1 , tmp ) ] ;
22803: LD_ADDR_VAR 0 1
22807: PUSH
22808: LD_VAR 0 2
22812: PUSH
22813: LD_INT 1
22815: PPUSH
22816: LD_VAR 0 2
22820: PPUSH
22821: CALL_OW 12
22825: ARRAY
22826: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22827: LD_VAR 0 1
22831: PPUSH
22832: LD_INT 0
22834: PPUSH
22835: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_OWVAR 3
22848: PUSH
22849: LD_VAR 0 1
22853: DIFF
22854: PPUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 74
22864: PPUSH
22865: CALL_OW 115
// wait ( 0 0$20 ) ;
22869: LD_INT 700
22871: PPUSH
22872: CALL_OW 67
// SetSide ( un , your_side ) ;
22876: LD_VAR 0 1
22880: PPUSH
22881: LD_OWVAR 2
22885: PPUSH
22886: CALL_OW 235
// end ;
22890: PPOPN 2
22892: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22893: LD_EXP 57
22897: PUSH
22898: LD_EXP 90
22902: AND
22903: IFFALSE 23009
22905: GO 22907
22907: DISABLE
22908: LD_INT 0
22910: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22911: LD_ADDR_VAR 0 1
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_OWVAR 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: LD_INT 30
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 30
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: ST_TO_ADDR
// if not depot then
22965: LD_VAR 0 1
22969: NOT
22970: IFFALSE 22974
// exit ;
22972: GO 23009
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22974: LD_VAR 0 1
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: PPUSH
22983: CALL_OW 250
22987: PPUSH
22988: LD_VAR 0 1
22992: PUSH
22993: LD_INT 1
22995: ARRAY
22996: PPUSH
22997: CALL_OW 251
23001: PPUSH
23002: LD_INT 70
23004: PPUSH
23005: CALL_OW 495
// end ;
23009: PPOPN 1
23011: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23012: LD_EXP 57
23016: PUSH
23017: LD_EXP 91
23021: AND
23022: IFFALSE 23233
23024: GO 23026
23026: DISABLE
23027: LD_INT 0
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23034: LD_ADDR_VAR 0 5
23038: PUSH
23039: LD_INT 22
23041: PUSH
23042: LD_OWVAR 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 21
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PPUSH
23065: CALL_OW 69
23069: ST_TO_ADDR
// if not tmp then
23070: LD_VAR 0 5
23074: NOT
23075: IFFALSE 23079
// exit ;
23077: GO 23233
// for i in tmp do
23079: LD_ADDR_VAR 0 1
23083: PUSH
23084: LD_VAR 0 5
23088: PUSH
23089: FOR_IN
23090: IFFALSE 23231
// begin d := rand ( 0 , 5 ) ;
23092: LD_ADDR_VAR 0 4
23096: PUSH
23097: LD_INT 0
23099: PPUSH
23100: LD_INT 5
23102: PPUSH
23103: CALL_OW 12
23107: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23108: LD_ADDR_VAR 0 2
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 250
23122: PPUSH
23123: LD_VAR 0 4
23127: PPUSH
23128: LD_INT 3
23130: PPUSH
23131: LD_INT 12
23133: PPUSH
23134: CALL_OW 12
23138: PPUSH
23139: CALL_OW 272
23143: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_VAR 0 1
23153: PPUSH
23154: CALL_OW 251
23158: PPUSH
23159: LD_VAR 0 4
23163: PPUSH
23164: LD_INT 3
23166: PPUSH
23167: LD_INT 12
23169: PPUSH
23170: CALL_OW 12
23174: PPUSH
23175: CALL_OW 273
23179: ST_TO_ADDR
// if ValidHex ( x , y ) then
23180: LD_VAR 0 2
23184: PPUSH
23185: LD_VAR 0 3
23189: PPUSH
23190: CALL_OW 488
23194: IFFALSE 23229
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23196: LD_VAR 0 1
23200: PPUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: LD_VAR 0 3
23210: PPUSH
23211: LD_INT 3
23213: PPUSH
23214: LD_INT 6
23216: PPUSH
23217: CALL_OW 12
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: CALL_OW 483
// end ;
23229: GO 23089
23231: POP
23232: POP
// end ;
23233: PPOPN 5
23235: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23236: LD_EXP 57
23240: PUSH
23241: LD_EXP 92
23245: AND
23246: IFFALSE 23340
23248: GO 23250
23250: DISABLE
23251: LD_INT 0
23253: PPUSH
23254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_INT 22
23262: PUSH
23263: LD_OWVAR 2
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 32
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 21
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 2
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23340
// for i in tmp do
23311: LD_ADDR_VAR 0 1
23315: PUSH
23316: LD_VAR 0 2
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23338
// SetFuel ( i , 0 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_INT 0
23331: PPUSH
23332: CALL_OW 240
23336: GO 23321
23338: POP
23339: POP
// end ;
23340: PPOPN 2
23342: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23343: LD_EXP 57
23347: PUSH
23348: LD_EXP 93
23352: AND
23353: IFFALSE 23419
23355: GO 23357
23357: DISABLE
23358: LD_INT 0
23360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23361: LD_ADDR_VAR 0 1
23365: PUSH
23366: LD_INT 22
23368: PUSH
23369: LD_OWVAR 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 30
23380: PUSH
23381: LD_INT 29
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PPUSH
23392: CALL_OW 69
23396: ST_TO_ADDR
// if not tmp then
23397: LD_VAR 0 1
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23419
// DestroyUnit ( tmp [ 1 ] ) ;
23406: LD_VAR 0 1
23410: PUSH
23411: LD_INT 1
23413: ARRAY
23414: PPUSH
23415: CALL_OW 65
// end ;
23419: PPOPN 1
23421: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23422: LD_EXP 57
23426: PUSH
23427: LD_EXP 95
23431: AND
23432: IFFALSE 23561
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
// begin uc_side := 0 ;
23440: LD_ADDR_OWVAR 20
23444: PUSH
23445: LD_INT 0
23447: ST_TO_ADDR
// uc_nation := nation_arabian ;
23448: LD_ADDR_OWVAR 21
23452: PUSH
23453: LD_INT 2
23455: ST_TO_ADDR
// hc_gallery :=  ;
23456: LD_ADDR_OWVAR 33
23460: PUSH
23461: LD_STRING 
23463: ST_TO_ADDR
// hc_name :=  ;
23464: LD_ADDR_OWVAR 26
23468: PUSH
23469: LD_STRING 
23471: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23472: LD_INT 1
23474: PPUSH
23475: LD_INT 11
23477: PPUSH
23478: LD_INT 10
23480: PPUSH
23481: CALL_OW 380
// un := CreateHuman ;
23485: LD_ADDR_VAR 0 1
23489: PUSH
23490: CALL_OW 44
23494: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23495: LD_VAR 0 1
23499: PPUSH
23500: LD_INT 1
23502: PPUSH
23503: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23507: LD_INT 35
23509: PPUSH
23510: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 22
23521: PUSH
23522: LD_OWVAR 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PPUSH
23531: CALL_OW 69
23535: PPUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 74
23545: PPUSH
23546: CALL_OW 115
// until IsDead ( un ) ;
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 301
23559: IFFALSE 23507
// end ;
23561: PPOPN 1
23563: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23564: LD_EXP 57
23568: PUSH
23569: LD_EXP 97
23573: AND
23574: IFFALSE 23586
23576: GO 23578
23578: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23579: LD_STRING earthquake(getX(game), 0, 32)
23581: PPUSH
23582: CALL_OW 559
23586: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23587: LD_EXP 57
23591: PUSH
23592: LD_EXP 98
23596: AND
23597: IFFALSE 23688
23599: GO 23601
23601: DISABLE
23602: LD_INT 0
23604: PPUSH
// begin enable ;
23605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_OWVAR 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 21
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 33
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 69
23652: ST_TO_ADDR
// if not tmp then
23653: LD_VAR 0 1
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 23688
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23662: LD_VAR 0 1
23666: PUSH
23667: LD_INT 1
23669: PPUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 12
23679: ARRAY
23680: PPUSH
23681: LD_INT 1
23683: PPUSH
23684: CALL_OW 234
// end ;
23688: PPOPN 1
23690: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23691: LD_EXP 57
23695: PUSH
23696: LD_EXP 99
23700: AND
23701: IFFALSE 23842
23703: GO 23705
23705: DISABLE
23706: LD_INT 0
23708: PPUSH
23709: PPUSH
23710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23711: LD_ADDR_VAR 0 3
23715: PUSH
23716: LD_INT 22
23718: PUSH
23719: LD_OWVAR 2
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 25
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PPUSH
23742: CALL_OW 69
23746: ST_TO_ADDR
// if not tmp then
23747: LD_VAR 0 3
23751: NOT
23752: IFFALSE 23756
// exit ;
23754: GO 23842
// un := tmp [ rand ( 1 , tmp ) ] ;
23756: LD_ADDR_VAR 0 2
23760: PUSH
23761: LD_VAR 0 3
23765: PUSH
23766: LD_INT 1
23768: PPUSH
23769: LD_VAR 0 3
23773: PPUSH
23774: CALL_OW 12
23778: ARRAY
23779: ST_TO_ADDR
// if Crawls ( un ) then
23780: LD_VAR 0 2
23784: PPUSH
23785: CALL_OW 318
23789: IFFALSE 23800
// ComWalk ( un ) ;
23791: LD_VAR 0 2
23795: PPUSH
23796: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23800: LD_VAR 0 2
23804: PPUSH
23805: LD_INT 9
23807: PPUSH
23808: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23812: LD_INT 28
23814: PPUSH
23815: LD_OWVAR 2
23819: PPUSH
23820: LD_INT 2
23822: PPUSH
23823: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23827: LD_INT 29
23829: PPUSH
23830: LD_OWVAR 2
23834: PPUSH
23835: LD_INT 2
23837: PPUSH
23838: CALL_OW 322
// end ;
23842: PPOPN 3
23844: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23845: LD_EXP 57
23849: PUSH
23850: LD_EXP 100
23854: AND
23855: IFFALSE 23966
23857: GO 23859
23859: DISABLE
23860: LD_INT 0
23862: PPUSH
23863: PPUSH
23864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23865: LD_ADDR_VAR 0 3
23869: PUSH
23870: LD_INT 22
23872: PUSH
23873: LD_OWVAR 2
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 25
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PPUSH
23896: CALL_OW 69
23900: ST_TO_ADDR
// if not tmp then
23901: LD_VAR 0 3
23905: NOT
23906: IFFALSE 23910
// exit ;
23908: GO 23966
// un := tmp [ rand ( 1 , tmp ) ] ;
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_VAR 0 3
23919: PUSH
23920: LD_INT 1
23922: PPUSH
23923: LD_VAR 0 3
23927: PPUSH
23928: CALL_OW 12
23932: ARRAY
23933: ST_TO_ADDR
// if Crawls ( un ) then
23934: LD_VAR 0 2
23938: PPUSH
23939: CALL_OW 318
23943: IFFALSE 23954
// ComWalk ( un ) ;
23945: LD_VAR 0 2
23949: PPUSH
23950: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23954: LD_VAR 0 2
23958: PPUSH
23959: LD_INT 8
23961: PPUSH
23962: CALL_OW 336
// end ;
23966: PPOPN 3
23968: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23969: LD_EXP 57
23973: PUSH
23974: LD_EXP 101
23978: AND
23979: IFFALSE 24123
23981: GO 23983
23983: DISABLE
23984: LD_INT 0
23986: PPUSH
23987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23988: LD_ADDR_VAR 0 2
23992: PUSH
23993: LD_INT 22
23995: PUSH
23996: LD_OWVAR 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 21
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 34
24020: PUSH
24021: LD_INT 12
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 34
24030: PUSH
24031: LD_INT 51
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 34
24040: PUSH
24041: LD_INT 32
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: ST_TO_ADDR
// if not tmp then
24064: LD_VAR 0 2
24068: NOT
24069: IFFALSE 24073
// exit ;
24071: GO 24123
// for i in tmp do
24073: LD_ADDR_VAR 0 1
24077: PUSH
24078: LD_VAR 0 2
24082: PUSH
24083: FOR_IN
24084: IFFALSE 24121
// if GetCargo ( i , mat_artifact ) = 0 then
24086: LD_VAR 0 1
24090: PPUSH
24091: LD_INT 4
24093: PPUSH
24094: CALL_OW 289
24098: PUSH
24099: LD_INT 0
24101: EQUAL
24102: IFFALSE 24119
// SetCargo ( i , mat_siberit , 100 ) ;
24104: LD_VAR 0 1
24108: PPUSH
24109: LD_INT 3
24111: PPUSH
24112: LD_INT 100
24114: PPUSH
24115: CALL_OW 290
24119: GO 24083
24121: POP
24122: POP
// end ;
24123: PPOPN 2
24125: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24126: LD_EXP 57
24130: PUSH
24131: LD_EXP 102
24135: AND
24136: IFFALSE 24319
24138: GO 24140
24140: DISABLE
24141: LD_INT 0
24143: PPUSH
24144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24145: LD_ADDR_VAR 0 2
24149: PUSH
24150: LD_INT 22
24152: PUSH
24153: LD_OWVAR 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PPUSH
24162: CALL_OW 69
24166: ST_TO_ADDR
// if not tmp then
24167: LD_VAR 0 2
24171: NOT
24172: IFFALSE 24176
// exit ;
24174: GO 24319
// for i := 1 to 2 do
24176: LD_ADDR_VAR 0 1
24180: PUSH
24181: DOUBLE
24182: LD_INT 1
24184: DEC
24185: ST_TO_ADDR
24186: LD_INT 2
24188: PUSH
24189: FOR_TO
24190: IFFALSE 24317
// begin uc_side := your_side ;
24192: LD_ADDR_OWVAR 20
24196: PUSH
24197: LD_OWVAR 2
24201: ST_TO_ADDR
// uc_nation := nation_american ;
24202: LD_ADDR_OWVAR 21
24206: PUSH
24207: LD_INT 1
24209: ST_TO_ADDR
// vc_chassis := us_morphling ;
24210: LD_ADDR_OWVAR 37
24214: PUSH
24215: LD_INT 5
24217: ST_TO_ADDR
// vc_engine := engine_siberite ;
24218: LD_ADDR_OWVAR 39
24222: PUSH
24223: LD_INT 3
24225: ST_TO_ADDR
// vc_control := control_computer ;
24226: LD_ADDR_OWVAR 38
24230: PUSH
24231: LD_INT 3
24233: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24234: LD_ADDR_OWVAR 40
24238: PUSH
24239: LD_INT 10
24241: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24242: LD_VAR 0 2
24246: PUSH
24247: LD_INT 1
24249: ARRAY
24250: PPUSH
24251: CALL_OW 310
24255: NOT
24256: IFFALSE 24303
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24258: CALL_OW 45
24262: PPUSH
24263: LD_VAR 0 2
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PPUSH
24272: CALL_OW 250
24276: PPUSH
24277: LD_VAR 0 2
24281: PUSH
24282: LD_INT 1
24284: ARRAY
24285: PPUSH
24286: CALL_OW 251
24290: PPUSH
24291: LD_INT 12
24293: PPUSH
24294: LD_INT 1
24296: PPUSH
24297: CALL_OW 50
24301: GO 24315
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24303: CALL_OW 45
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: CALL_OW 51
// end ;
24315: GO 24189
24317: POP
24318: POP
// end ;
24319: PPOPN 2
24321: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24322: LD_EXP 57
24326: PUSH
24327: LD_EXP 103
24331: AND
24332: IFFALSE 24554
24334: GO 24336
24336: DISABLE
24337: LD_INT 0
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24345: LD_ADDR_VAR 0 6
24349: PUSH
24350: LD_INT 22
24352: PUSH
24353: LD_OWVAR 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 21
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 23
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: PPUSH
24394: CALL_OW 69
24398: ST_TO_ADDR
// if not tmp then
24399: LD_VAR 0 6
24403: NOT
24404: IFFALSE 24408
// exit ;
24406: GO 24554
// s1 := rand ( 1 , 4 ) ;
24408: LD_ADDR_VAR 0 2
24412: PUSH
24413: LD_INT 1
24415: PPUSH
24416: LD_INT 4
24418: PPUSH
24419: CALL_OW 12
24423: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24424: LD_ADDR_VAR 0 4
24428: PUSH
24429: LD_VAR 0 6
24433: PUSH
24434: LD_INT 1
24436: ARRAY
24437: PPUSH
24438: LD_VAR 0 2
24442: PPUSH
24443: CALL_OW 259
24447: ST_TO_ADDR
// if s1 = 1 then
24448: LD_VAR 0 2
24452: PUSH
24453: LD_INT 1
24455: EQUAL
24456: IFFALSE 24476
// s2 := rand ( 2 , 4 ) else
24458: LD_ADDR_VAR 0 3
24462: PUSH
24463: LD_INT 2
24465: PPUSH
24466: LD_INT 4
24468: PPUSH
24469: CALL_OW 12
24473: ST_TO_ADDR
24474: GO 24484
// s2 := 1 ;
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_INT 1
24483: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24484: LD_ADDR_VAR 0 5
24488: PUSH
24489: LD_VAR 0 6
24493: PUSH
24494: LD_INT 1
24496: ARRAY
24497: PPUSH
24498: LD_VAR 0 3
24502: PPUSH
24503: CALL_OW 259
24507: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24508: LD_VAR 0 6
24512: PUSH
24513: LD_INT 1
24515: ARRAY
24516: PPUSH
24517: LD_VAR 0 2
24521: PPUSH
24522: LD_VAR 0 5
24526: PPUSH
24527: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24531: LD_VAR 0 6
24535: PUSH
24536: LD_INT 1
24538: ARRAY
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_VAR 0 4
24549: PPUSH
24550: CALL_OW 237
// end ;
24554: PPOPN 6
24556: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24557: LD_EXP 57
24561: PUSH
24562: LD_EXP 104
24566: AND
24567: IFFALSE 24646
24569: GO 24571
24571: DISABLE
24572: LD_INT 0
24574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24575: LD_ADDR_VAR 0 1
24579: PUSH
24580: LD_INT 22
24582: PUSH
24583: LD_OWVAR 2
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 30
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: ST_TO_ADDR
// if not tmp then
24611: LD_VAR 0 1
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 24646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24620: LD_VAR 0 1
24624: PUSH
24625: LD_INT 1
24627: PPUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 12
24637: ARRAY
24638: PPUSH
24639: LD_INT 1
24641: PPUSH
24642: CALL_OW 234
// end ;
24646: PPOPN 1
24648: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24649: LD_EXP 57
24653: PUSH
24654: LD_EXP 105
24658: AND
24659: IFFALSE 24771
24661: GO 24663
24663: DISABLE
24664: LD_INT 0
24666: PPUSH
24667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_OWVAR 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 30
24690: PUSH
24691: LD_INT 27
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 30
24700: PUSH
24701: LD_INT 26
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 28
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PPUSH
24728: CALL_OW 69
24732: ST_TO_ADDR
// if not tmp then
24733: LD_VAR 0 2
24737: NOT
24738: IFFALSE 24742
// exit ;
24740: GO 24771
// for i in tmp do
24742: LD_ADDR_VAR 0 1
24746: PUSH
24747: LD_VAR 0 2
24751: PUSH
24752: FOR_IN
24753: IFFALSE 24769
// SetLives ( i , 1 ) ;
24755: LD_VAR 0 1
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 234
24767: GO 24752
24769: POP
24770: POP
// end ;
24771: PPOPN 2
24773: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24774: LD_EXP 57
24778: PUSH
24779: LD_EXP 106
24783: AND
24784: IFFALSE 25058
24786: GO 24788
24788: DISABLE
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
// begin i := rand ( 1 , 7 ) ;
24794: LD_ADDR_VAR 0 1
24798: PUSH
24799: LD_INT 1
24801: PPUSH
24802: LD_INT 7
24804: PPUSH
24805: CALL_OW 12
24809: ST_TO_ADDR
// case i of 1 :
24810: LD_VAR 0 1
24814: PUSH
24815: LD_INT 1
24817: DOUBLE
24818: EQUAL
24819: IFTRUE 24823
24821: GO 24833
24823: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24824: LD_STRING earthquake(getX(game), 0, 32)
24826: PPUSH
24827: CALL_OW 559
24831: GO 25058
24833: LD_INT 2
24835: DOUBLE
24836: EQUAL
24837: IFTRUE 24841
24839: GO 24855
24841: POP
// begin ToLua ( displayStucuk(); ) ;
24842: LD_STRING displayStucuk();
24844: PPUSH
24845: CALL_OW 559
// ResetFog ;
24849: CALL_OW 335
// end ; 3 :
24853: GO 25058
24855: LD_INT 3
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24967
24863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_INT 22
24871: PUSH
24872: LD_OWVAR 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 25
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PPUSH
24895: CALL_OW 69
24899: ST_TO_ADDR
// if not tmp then
24900: LD_VAR 0 2
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 25058
// un := tmp [ rand ( 1 , tmp ) ] ;
24909: LD_ADDR_VAR 0 3
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: LD_INT 1
24921: PPUSH
24922: LD_VAR 0 2
24926: PPUSH
24927: CALL_OW 12
24931: ARRAY
24932: ST_TO_ADDR
// if Crawls ( un ) then
24933: LD_VAR 0 3
24937: PPUSH
24938: CALL_OW 318
24942: IFFALSE 24953
// ComWalk ( un ) ;
24944: LD_VAR 0 3
24948: PPUSH
24949: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24953: LD_VAR 0 3
24957: PPUSH
24958: LD_INT 8
24960: PPUSH
24961: CALL_OW 336
// end ; 4 :
24965: GO 25058
24967: LD_INT 4
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25036
24975: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 22
24983: PUSH
24984: LD_OWVAR 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 30
24995: PUSH
24996: LD_INT 29
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PPUSH
25007: CALL_OW 69
25011: ST_TO_ADDR
// if not tmp then
25012: LD_VAR 0 2
25016: NOT
25017: IFFALSE 25021
// exit ;
25019: GO 25058
// DestroyUnit ( tmp [ 1 ] ) ;
25021: LD_VAR 0 2
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: PPUSH
25030: CALL_OW 65
// end ; 5 .. 7 :
25034: GO 25058
25036: LD_INT 5
25038: DOUBLE
25039: GREATEREQUAL
25040: IFFALSE 25048
25042: LD_INT 7
25044: DOUBLE
25045: LESSEQUAL
25046: IFTRUE 25050
25048: GO 25057
25050: POP
// StreamSibBomb ; end ;
25051: CALL 21308 0 0
25055: GO 25058
25057: POP
// end ;
25058: PPOPN 3
25060: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25061: LD_EXP 57
25065: PUSH
25066: LD_EXP 107
25070: AND
25071: IFFALSE 25227
25073: GO 25075
25075: DISABLE
25076: LD_INT 0
25078: PPUSH
25079: PPUSH
25080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25081: LD_ADDR_VAR 0 2
25085: PUSH
25086: LD_INT 81
25088: PUSH
25089: LD_OWVAR 2
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 21
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 2
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25227
// p := 0 ;
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_INT 0
25151: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25152: LD_INT 35
25154: PPUSH
25155: CALL_OW 67
// p := p + 1 ;
25159: LD_ADDR_VAR 0 3
25163: PUSH
25164: LD_VAR 0 3
25168: PUSH
25169: LD_INT 1
25171: PLUS
25172: ST_TO_ADDR
// for i in tmp do
25173: LD_ADDR_VAR 0 1
25177: PUSH
25178: LD_VAR 0 2
25182: PUSH
25183: FOR_IN
25184: IFFALSE 25215
// if GetLives ( i ) < 1000 then
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL_OW 256
25195: PUSH
25196: LD_INT 1000
25198: LESS
25199: IFFALSE 25213
// SetLives ( i , 1000 ) ;
25201: LD_VAR 0 1
25205: PPUSH
25206: LD_INT 1000
25208: PPUSH
25209: CALL_OW 234
25213: GO 25183
25215: POP
25216: POP
// until p > 20 ;
25217: LD_VAR 0 3
25221: PUSH
25222: LD_INT 20
25224: GREATER
25225: IFFALSE 25152
// end ;
25227: PPOPN 3
25229: END
// every 0 0$1 trigger StreamModeActive and sTime do
25230: LD_EXP 57
25234: PUSH
25235: LD_EXP 108
25239: AND
25240: IFFALSE 25275
25242: GO 25244
25244: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25245: LD_INT 28
25247: PPUSH
25248: LD_OWVAR 2
25252: PPUSH
25253: LD_INT 2
25255: PPUSH
25256: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25260: LD_INT 30
25262: PPUSH
25263: LD_OWVAR 2
25267: PPUSH
25268: LD_INT 2
25270: PPUSH
25271: CALL_OW 322
// end ;
25275: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25276: LD_EXP 57
25280: PUSH
25281: LD_EXP 109
25285: AND
25286: IFFALSE 25407
25288: GO 25290
25290: DISABLE
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25295: LD_ADDR_VAR 0 2
25299: PUSH
25300: LD_INT 22
25302: PUSH
25303: LD_OWVAR 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 21
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 3
25324: PUSH
25325: LD_INT 23
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: PPUSH
25344: CALL_OW 69
25348: ST_TO_ADDR
// if not tmp then
25349: LD_VAR 0 2
25353: NOT
25354: IFFALSE 25358
// exit ;
25356: GO 25407
// for i in tmp do
25358: LD_ADDR_VAR 0 1
25362: PUSH
25363: LD_VAR 0 2
25367: PUSH
25368: FOR_IN
25369: IFFALSE 25405
// begin if Crawls ( i ) then
25371: LD_VAR 0 1
25375: PPUSH
25376: CALL_OW 318
25380: IFFALSE 25391
// ComWalk ( i ) ;
25382: LD_VAR 0 1
25386: PPUSH
25387: CALL_OW 138
// SetClass ( i , 2 ) ;
25391: LD_VAR 0 1
25395: PPUSH
25396: LD_INT 2
25398: PPUSH
25399: CALL_OW 336
// end ;
25403: GO 25368
25405: POP
25406: POP
// end ;
25407: PPOPN 2
25409: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25410: LD_EXP 57
25414: PUSH
25415: LD_EXP 110
25419: AND
25420: IFFALSE 25701
25422: GO 25424
25424: DISABLE
25425: LD_INT 0
25427: PPUSH
25428: PPUSH
25429: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25430: LD_OWVAR 2
25434: PPUSH
25435: LD_INT 9
25437: PPUSH
25438: LD_INT 1
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25448: LD_INT 9
25450: PPUSH
25451: LD_OWVAR 2
25455: PPUSH
25456: CALL_OW 343
// uc_side := 9 ;
25460: LD_ADDR_OWVAR 20
25464: PUSH
25465: LD_INT 9
25467: ST_TO_ADDR
// uc_nation := 2 ;
25468: LD_ADDR_OWVAR 21
25472: PUSH
25473: LD_INT 2
25475: ST_TO_ADDR
// hc_name := Dark Warrior ;
25476: LD_ADDR_OWVAR 26
25480: PUSH
25481: LD_STRING Dark Warrior
25483: ST_TO_ADDR
// hc_gallery :=  ;
25484: LD_ADDR_OWVAR 33
25488: PUSH
25489: LD_STRING 
25491: ST_TO_ADDR
// hc_noskilllimit := true ;
25492: LD_ADDR_OWVAR 76
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25500: LD_ADDR_OWVAR 31
25504: PUSH
25505: LD_INT 30
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: LD_INT 30
25513: PUSH
25514: LD_INT 30
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: ST_TO_ADDR
// un := CreateHuman ;
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: CALL_OW 44
25532: ST_TO_ADDR
// hc_noskilllimit := false ;
25533: LD_ADDR_OWVAR 76
25537: PUSH
25538: LD_INT 0
25540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25541: LD_VAR 0 3
25545: PPUSH
25546: LD_INT 1
25548: PPUSH
25549: CALL_OW 51
// p := 0 ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_INT 0
25560: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25561: LD_INT 35
25563: PPUSH
25564: CALL_OW 67
// p := p + 1 ;
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_VAR 0 2
25577: PUSH
25578: LD_INT 1
25580: PLUS
25581: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25582: LD_VAR 0 3
25586: PPUSH
25587: CALL_OW 256
25591: PUSH
25592: LD_INT 1000
25594: LESS
25595: IFFALSE 25609
// SetLives ( un , 1000 ) ;
25597: LD_VAR 0 3
25601: PPUSH
25602: LD_INT 1000
25604: PPUSH
25605: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25609: LD_VAR 0 3
25613: PPUSH
25614: LD_INT 81
25616: PUSH
25617: LD_OWVAR 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 91
25628: PUSH
25629: LD_VAR 0 3
25633: PUSH
25634: LD_INT 30
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PPUSH
25646: CALL_OW 69
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: CALL_OW 74
25660: PPUSH
25661: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25665: LD_VAR 0 2
25669: PUSH
25670: LD_INT 60
25672: GREATER
25673: PUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: CALL_OW 301
25683: OR
25684: IFFALSE 25561
// if un then
25686: LD_VAR 0 3
25690: IFFALSE 25701
// RemoveUnit ( un ) ;
25692: LD_VAR 0 3
25696: PPUSH
25697: CALL_OW 64
// end ;
25701: PPOPN 3
25703: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25704: LD_INT 0
25706: PPUSH
// case cmd of 301 :
25707: LD_VAR 0 1
25711: PUSH
25712: LD_INT 301
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25752
25720: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25721: LD_VAR 0 6
25725: PPUSH
25726: LD_VAR 0 7
25730: PPUSH
25731: LD_VAR 0 8
25735: PPUSH
25736: LD_VAR 0 4
25740: PPUSH
25741: LD_VAR 0 5
25745: PPUSH
25746: CALL 26953 0 5
25750: GO 25873
25752: LD_INT 302
25754: DOUBLE
25755: EQUAL
25756: IFTRUE 25760
25758: GO 25797
25760: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25761: LD_VAR 0 6
25765: PPUSH
25766: LD_VAR 0 7
25770: PPUSH
25771: LD_VAR 0 8
25775: PPUSH
25776: LD_VAR 0 9
25780: PPUSH
25781: LD_VAR 0 4
25785: PPUSH
25786: LD_VAR 0 5
25790: PPUSH
25791: CALL 27044 0 6
25795: GO 25873
25797: LD_INT 303
25799: DOUBLE
25800: EQUAL
25801: IFTRUE 25805
25803: GO 25842
25805: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25806: LD_VAR 0 6
25810: PPUSH
25811: LD_VAR 0 7
25815: PPUSH
25816: LD_VAR 0 8
25820: PPUSH
25821: LD_VAR 0 9
25825: PPUSH
25826: LD_VAR 0 4
25830: PPUSH
25831: LD_VAR 0 5
25835: PPUSH
25836: CALL 25878 0 6
25840: GO 25873
25842: LD_INT 304
25844: DOUBLE
25845: EQUAL
25846: IFTRUE 25850
25848: GO 25872
25850: POP
// hHackTeleport ( unit , x , y ) ; end ;
25851: LD_VAR 0 2
25855: PPUSH
25856: LD_VAR 0 4
25860: PPUSH
25861: LD_VAR 0 5
25865: PPUSH
25866: CALL 27637 0 3
25870: GO 25873
25872: POP
// end ;
25873: LD_VAR 0 12
25877: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25882: LD_VAR 0 1
25886: PUSH
25887: LD_INT 1
25889: LESS
25890: PUSH
25891: LD_VAR 0 1
25895: PUSH
25896: LD_INT 3
25898: GREATER
25899: OR
25900: PUSH
25901: LD_VAR 0 5
25905: PPUSH
25906: LD_VAR 0 6
25910: PPUSH
25911: CALL_OW 428
25915: OR
25916: IFFALSE 25920
// exit ;
25918: GO 26640
// uc_side := your_side ;
25920: LD_ADDR_OWVAR 20
25924: PUSH
25925: LD_OWVAR 2
25929: ST_TO_ADDR
// uc_nation := nation ;
25930: LD_ADDR_OWVAR 21
25934: PUSH
25935: LD_VAR 0 1
25939: ST_TO_ADDR
// bc_level = 1 ;
25940: LD_ADDR_OWVAR 43
25944: PUSH
25945: LD_INT 1
25947: ST_TO_ADDR
// case btype of 1 :
25948: LD_VAR 0 2
25952: PUSH
25953: LD_INT 1
25955: DOUBLE
25956: EQUAL
25957: IFTRUE 25961
25959: GO 25972
25961: POP
// bc_type := b_depot ; 2 :
25962: LD_ADDR_OWVAR 42
25966: PUSH
25967: LD_INT 0
25969: ST_TO_ADDR
25970: GO 26584
25972: LD_INT 2
25974: DOUBLE
25975: EQUAL
25976: IFTRUE 25980
25978: GO 25991
25980: POP
// bc_type := b_warehouse ; 3 :
25981: LD_ADDR_OWVAR 42
25985: PUSH
25986: LD_INT 1
25988: ST_TO_ADDR
25989: GO 26584
25991: LD_INT 3
25993: DOUBLE
25994: EQUAL
25995: IFTRUE 25999
25997: GO 26010
25999: POP
// bc_type := b_lab ; 4 .. 9 :
26000: LD_ADDR_OWVAR 42
26004: PUSH
26005: LD_INT 6
26007: ST_TO_ADDR
26008: GO 26584
26010: LD_INT 4
26012: DOUBLE
26013: GREATEREQUAL
26014: IFFALSE 26022
26016: LD_INT 9
26018: DOUBLE
26019: LESSEQUAL
26020: IFTRUE 26024
26022: GO 26076
26024: POP
// begin bc_type := b_lab_half ;
26025: LD_ADDR_OWVAR 42
26029: PUSH
26030: LD_INT 7
26032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26033: LD_ADDR_OWVAR 44
26037: PUSH
26038: LD_INT 10
26040: PUSH
26041: LD_INT 11
26043: PUSH
26044: LD_INT 12
26046: PUSH
26047: LD_INT 15
26049: PUSH
26050: LD_INT 14
26052: PUSH
26053: LD_INT 13
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: PUSH
26064: LD_VAR 0 2
26068: PUSH
26069: LD_INT 3
26071: MINUS
26072: ARRAY
26073: ST_TO_ADDR
// end ; 10 .. 13 :
26074: GO 26584
26076: LD_INT 10
26078: DOUBLE
26079: GREATEREQUAL
26080: IFFALSE 26088
26082: LD_INT 13
26084: DOUBLE
26085: LESSEQUAL
26086: IFTRUE 26090
26088: GO 26167
26090: POP
// begin bc_type := b_lab_full ;
26091: LD_ADDR_OWVAR 42
26095: PUSH
26096: LD_INT 8
26098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26099: LD_ADDR_OWVAR 44
26103: PUSH
26104: LD_INT 10
26106: PUSH
26107: LD_INT 12
26109: PUSH
26110: LD_INT 14
26112: PUSH
26113: LD_INT 13
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 9
26129: MINUS
26130: ARRAY
26131: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26132: LD_ADDR_OWVAR 45
26136: PUSH
26137: LD_INT 11
26139: PUSH
26140: LD_INT 15
26142: PUSH
26143: LD_INT 12
26145: PUSH
26146: LD_INT 15
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: LD_VAR 0 2
26159: PUSH
26160: LD_INT 9
26162: MINUS
26163: ARRAY
26164: ST_TO_ADDR
// end ; 14 :
26165: GO 26584
26167: LD_INT 14
26169: DOUBLE
26170: EQUAL
26171: IFTRUE 26175
26173: GO 26186
26175: POP
// bc_type := b_workshop ; 15 :
26176: LD_ADDR_OWVAR 42
26180: PUSH
26181: LD_INT 2
26183: ST_TO_ADDR
26184: GO 26584
26186: LD_INT 15
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26205
26194: POP
// bc_type := b_factory ; 16 :
26195: LD_ADDR_OWVAR 42
26199: PUSH
26200: LD_INT 3
26202: ST_TO_ADDR
26203: GO 26584
26205: LD_INT 16
26207: DOUBLE
26208: EQUAL
26209: IFTRUE 26213
26211: GO 26224
26213: POP
// bc_type := b_ext_gun ; 17 :
26214: LD_ADDR_OWVAR 42
26218: PUSH
26219: LD_INT 17
26221: ST_TO_ADDR
26222: GO 26584
26224: LD_INT 17
26226: DOUBLE
26227: EQUAL
26228: IFTRUE 26232
26230: GO 26260
26232: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26233: LD_ADDR_OWVAR 42
26237: PUSH
26238: LD_INT 19
26240: PUSH
26241: LD_INT 23
26243: PUSH
26244: LD_INT 19
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: LD_VAR 0 1
26256: ARRAY
26257: ST_TO_ADDR
26258: GO 26584
26260: LD_INT 18
26262: DOUBLE
26263: EQUAL
26264: IFTRUE 26268
26266: GO 26279
26268: POP
// bc_type := b_ext_radar ; 19 :
26269: LD_ADDR_OWVAR 42
26273: PUSH
26274: LD_INT 20
26276: ST_TO_ADDR
26277: GO 26584
26279: LD_INT 19
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 26298
26287: POP
// bc_type := b_ext_radio ; 20 :
26288: LD_ADDR_OWVAR 42
26292: PUSH
26293: LD_INT 22
26295: ST_TO_ADDR
26296: GO 26584
26298: LD_INT 20
26300: DOUBLE
26301: EQUAL
26302: IFTRUE 26306
26304: GO 26317
26306: POP
// bc_type := b_ext_siberium ; 21 :
26307: LD_ADDR_OWVAR 42
26311: PUSH
26312: LD_INT 21
26314: ST_TO_ADDR
26315: GO 26584
26317: LD_INT 21
26319: DOUBLE
26320: EQUAL
26321: IFTRUE 26325
26323: GO 26336
26325: POP
// bc_type := b_ext_computer ; 22 :
26326: LD_ADDR_OWVAR 42
26330: PUSH
26331: LD_INT 24
26333: ST_TO_ADDR
26334: GO 26584
26336: LD_INT 22
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26355
26344: POP
// bc_type := b_ext_track ; 23 :
26345: LD_ADDR_OWVAR 42
26349: PUSH
26350: LD_INT 16
26352: ST_TO_ADDR
26353: GO 26584
26355: LD_INT 23
26357: DOUBLE
26358: EQUAL
26359: IFTRUE 26363
26361: GO 26374
26363: POP
// bc_type := b_ext_laser ; 24 :
26364: LD_ADDR_OWVAR 42
26368: PUSH
26369: LD_INT 25
26371: ST_TO_ADDR
26372: GO 26584
26374: LD_INT 24
26376: DOUBLE
26377: EQUAL
26378: IFTRUE 26382
26380: GO 26393
26382: POP
// bc_type := b_control_tower ; 25 :
26383: LD_ADDR_OWVAR 42
26387: PUSH
26388: LD_INT 36
26390: ST_TO_ADDR
26391: GO 26584
26393: LD_INT 25
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26412
26401: POP
// bc_type := b_breastwork ; 26 :
26402: LD_ADDR_OWVAR 42
26406: PUSH
26407: LD_INT 31
26409: ST_TO_ADDR
26410: GO 26584
26412: LD_INT 26
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26431
26420: POP
// bc_type := b_bunker ; 27 :
26421: LD_ADDR_OWVAR 42
26425: PUSH
26426: LD_INT 32
26428: ST_TO_ADDR
26429: GO 26584
26431: LD_INT 27
26433: DOUBLE
26434: EQUAL
26435: IFTRUE 26439
26437: GO 26450
26439: POP
// bc_type := b_turret ; 28 :
26440: LD_ADDR_OWVAR 42
26444: PUSH
26445: LD_INT 33
26447: ST_TO_ADDR
26448: GO 26584
26450: LD_INT 28
26452: DOUBLE
26453: EQUAL
26454: IFTRUE 26458
26456: GO 26469
26458: POP
// bc_type := b_armoury ; 29 :
26459: LD_ADDR_OWVAR 42
26463: PUSH
26464: LD_INT 4
26466: ST_TO_ADDR
26467: GO 26584
26469: LD_INT 29
26471: DOUBLE
26472: EQUAL
26473: IFTRUE 26477
26475: GO 26488
26477: POP
// bc_type := b_barracks ; 30 :
26478: LD_ADDR_OWVAR 42
26482: PUSH
26483: LD_INT 5
26485: ST_TO_ADDR
26486: GO 26584
26488: LD_INT 30
26490: DOUBLE
26491: EQUAL
26492: IFTRUE 26496
26494: GO 26507
26496: POP
// bc_type := b_solar_power ; 31 :
26497: LD_ADDR_OWVAR 42
26501: PUSH
26502: LD_INT 27
26504: ST_TO_ADDR
26505: GO 26584
26507: LD_INT 31
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26515
26513: GO 26526
26515: POP
// bc_type := b_oil_power ; 32 :
26516: LD_ADDR_OWVAR 42
26520: PUSH
26521: LD_INT 26
26523: ST_TO_ADDR
26524: GO 26584
26526: LD_INT 32
26528: DOUBLE
26529: EQUAL
26530: IFTRUE 26534
26532: GO 26545
26534: POP
// bc_type := b_siberite_power ; 33 :
26535: LD_ADDR_OWVAR 42
26539: PUSH
26540: LD_INT 28
26542: ST_TO_ADDR
26543: GO 26584
26545: LD_INT 33
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26553
26551: GO 26564
26553: POP
// bc_type := b_oil_mine ; 34 :
26554: LD_ADDR_OWVAR 42
26558: PUSH
26559: LD_INT 29
26561: ST_TO_ADDR
26562: GO 26584
26564: LD_INT 34
26566: DOUBLE
26567: EQUAL
26568: IFTRUE 26572
26570: GO 26583
26572: POP
// bc_type := b_siberite_mine ; end ;
26573: LD_ADDR_OWVAR 42
26577: PUSH
26578: LD_INT 30
26580: ST_TO_ADDR
26581: GO 26584
26583: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26584: LD_ADDR_VAR 0 8
26588: PUSH
26589: LD_VAR 0 5
26593: PPUSH
26594: LD_VAR 0 6
26598: PPUSH
26599: LD_VAR 0 3
26603: PPUSH
26604: CALL_OW 47
26608: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26609: LD_OWVAR 42
26613: PUSH
26614: LD_INT 32
26616: PUSH
26617: LD_INT 33
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: IN
26624: IFFALSE 26640
// PlaceWeaponTurret ( b , weapon ) ;
26626: LD_VAR 0 8
26630: PPUSH
26631: LD_VAR 0 4
26635: PPUSH
26636: CALL_OW 431
// end ;
26640: LD_VAR 0 7
26644: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26645: LD_INT 0
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26651: LD_ADDR_VAR 0 4
26655: PUSH
26656: LD_INT 22
26658: PUSH
26659: LD_OWVAR 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 30
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 30
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PPUSH
26700: CALL_OW 69
26704: ST_TO_ADDR
// if not tmp then
26705: LD_VAR 0 4
26709: NOT
26710: IFFALSE 26714
// exit ;
26712: GO 26773
// for i in tmp do
26714: LD_ADDR_VAR 0 2
26718: PUSH
26719: LD_VAR 0 4
26723: PUSH
26724: FOR_IN
26725: IFFALSE 26771
// for j = 1 to 3 do
26727: LD_ADDR_VAR 0 3
26731: PUSH
26732: DOUBLE
26733: LD_INT 1
26735: DEC
26736: ST_TO_ADDR
26737: LD_INT 3
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26767
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26743: LD_VAR 0 2
26747: PPUSH
26748: CALL_OW 274
26752: PPUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: LD_INT 99999
26760: PPUSH
26761: CALL_OW 277
26765: GO 26740
26767: POP
26768: POP
26769: GO 26724
26771: POP
26772: POP
// end ;
26773: LD_VAR 0 1
26777: RET
// export function hHackSetLevel10 ; var i , j ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26783: LD_ADDR_VAR 0 2
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 69
26802: PUSH
26803: FOR_IN
26804: IFFALSE 26856
// if IsSelected ( i ) then
26806: LD_VAR 0 2
26810: PPUSH
26811: CALL_OW 306
26815: IFFALSE 26854
// begin for j := 1 to 4 do
26817: LD_ADDR_VAR 0 3
26821: PUSH
26822: DOUBLE
26823: LD_INT 1
26825: DEC
26826: ST_TO_ADDR
26827: LD_INT 4
26829: PUSH
26830: FOR_TO
26831: IFFALSE 26852
// SetSkill ( i , j , 10 ) ;
26833: LD_VAR 0 2
26837: PPUSH
26838: LD_VAR 0 3
26842: PPUSH
26843: LD_INT 10
26845: PPUSH
26846: CALL_OW 237
26850: GO 26830
26852: POP
26853: POP
// end ;
26854: GO 26803
26856: POP
26857: POP
// end ;
26858: LD_VAR 0 1
26862: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26863: LD_INT 0
26865: PPUSH
26866: PPUSH
26867: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: LD_INT 22
26875: PUSH
26876: LD_OWVAR 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 21
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: PUSH
26904: FOR_IN
26905: IFFALSE 26946
// begin for j := 1 to 4 do
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: DOUBLE
26913: LD_INT 1
26915: DEC
26916: ST_TO_ADDR
26917: LD_INT 4
26919: PUSH
26920: FOR_TO
26921: IFFALSE 26942
// SetSkill ( i , j , 10 ) ;
26923: LD_VAR 0 2
26927: PPUSH
26928: LD_VAR 0 3
26932: PPUSH
26933: LD_INT 10
26935: PPUSH
26936: CALL_OW 237
26940: GO 26920
26942: POP
26943: POP
// end ;
26944: GO 26904
26946: POP
26947: POP
// end ;
26948: LD_VAR 0 1
26952: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26953: LD_INT 0
26955: PPUSH
// uc_side := your_side ;
26956: LD_ADDR_OWVAR 20
26960: PUSH
26961: LD_OWVAR 2
26965: ST_TO_ADDR
// uc_nation := nation ;
26966: LD_ADDR_OWVAR 21
26970: PUSH
26971: LD_VAR 0 1
26975: ST_TO_ADDR
// InitHc ;
26976: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26980: LD_INT 0
26982: PPUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: LD_VAR 0 3
26992: PPUSH
26993: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26997: LD_VAR 0 4
27001: PPUSH
27002: LD_VAR 0 5
27006: PPUSH
27007: CALL_OW 428
27011: PUSH
27012: LD_INT 0
27014: EQUAL
27015: IFFALSE 27039
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27017: CALL_OW 44
27021: PPUSH
27022: LD_VAR 0 4
27026: PPUSH
27027: LD_VAR 0 5
27031: PPUSH
27032: LD_INT 1
27034: PPUSH
27035: CALL_OW 48
// end ;
27039: LD_VAR 0 6
27043: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27044: LD_INT 0
27046: PPUSH
27047: PPUSH
// uc_side := your_side ;
27048: LD_ADDR_OWVAR 20
27052: PUSH
27053: LD_OWVAR 2
27057: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27058: LD_VAR 0 1
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 3
27071: PUSH
27072: LD_INT 4
27074: PUSH
27075: LD_INT 5
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: IN
27085: IFFALSE 27097
// uc_nation := nation_american else
27087: LD_ADDR_OWVAR 21
27091: PUSH
27092: LD_INT 1
27094: ST_TO_ADDR
27095: GO 27140
// if chassis in [ 11 , 12 , 13 , 14 ] then
27097: LD_VAR 0 1
27101: PUSH
27102: LD_INT 11
27104: PUSH
27105: LD_INT 12
27107: PUSH
27108: LD_INT 13
27110: PUSH
27111: LD_INT 14
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: IN
27120: IFFALSE 27132
// uc_nation := nation_arabian else
27122: LD_ADDR_OWVAR 21
27126: PUSH
27127: LD_INT 2
27129: ST_TO_ADDR
27130: GO 27140
// uc_nation := nation_russian ;
27132: LD_ADDR_OWVAR 21
27136: PUSH
27137: LD_INT 3
27139: ST_TO_ADDR
// vc_chassis := chassis ;
27140: LD_ADDR_OWVAR 37
27144: PUSH
27145: LD_VAR 0 1
27149: ST_TO_ADDR
// vc_engine := engine ;
27150: LD_ADDR_OWVAR 39
27154: PUSH
27155: LD_VAR 0 2
27159: ST_TO_ADDR
// vc_control := control ;
27160: LD_ADDR_OWVAR 38
27164: PUSH
27165: LD_VAR 0 3
27169: ST_TO_ADDR
// vc_weapon := weapon ;
27170: LD_ADDR_OWVAR 40
27174: PUSH
27175: LD_VAR 0 4
27179: ST_TO_ADDR
// un := CreateVehicle ;
27180: LD_ADDR_VAR 0 8
27184: PUSH
27185: CALL_OW 45
27189: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27190: LD_VAR 0 8
27194: PPUSH
27195: LD_INT 0
27197: PPUSH
27198: LD_INT 5
27200: PPUSH
27201: CALL_OW 12
27205: PPUSH
27206: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27210: LD_VAR 0 8
27214: PPUSH
27215: LD_VAR 0 5
27219: PPUSH
27220: LD_VAR 0 6
27224: PPUSH
27225: LD_INT 1
27227: PPUSH
27228: CALL_OW 48
// end ;
27232: LD_VAR 0 7
27236: RET
// export hInvincible ; every 1 do
27237: GO 27239
27239: DISABLE
// hInvincible := [ ] ;
27240: LD_ADDR_EXP 111
27244: PUSH
27245: EMPTY
27246: ST_TO_ADDR
27247: END
// every 10 do var i ;
27248: GO 27250
27250: DISABLE
27251: LD_INT 0
27253: PPUSH
// begin enable ;
27254: ENABLE
// if not hInvincible then
27255: LD_EXP 111
27259: NOT
27260: IFFALSE 27264
// exit ;
27262: GO 27308
// for i in hInvincible do
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: LD_EXP 111
27273: PUSH
27274: FOR_IN
27275: IFFALSE 27306
// if GetLives ( i ) < 1000 then
27277: LD_VAR 0 1
27281: PPUSH
27282: CALL_OW 256
27286: PUSH
27287: LD_INT 1000
27289: LESS
27290: IFFALSE 27304
// SetLives ( i , 1000 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 1000
27299: PPUSH
27300: CALL_OW 234
27304: GO 27274
27306: POP
27307: POP
// end ;
27308: PPOPN 1
27310: END
// export function hHackInvincible ; var i ; begin
27311: LD_INT 0
27313: PPUSH
27314: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27315: LD_ADDR_VAR 0 2
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: LD_INT 21
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 21
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: PUSH
27353: FOR_IN
27354: IFFALSE 27415
// if IsSelected ( i ) then
27356: LD_VAR 0 2
27360: PPUSH
27361: CALL_OW 306
27365: IFFALSE 27413
// begin if i in hInvincible then
27367: LD_VAR 0 2
27371: PUSH
27372: LD_EXP 111
27376: IN
27377: IFFALSE 27397
// hInvincible := hInvincible diff i else
27379: LD_ADDR_EXP 111
27383: PUSH
27384: LD_EXP 111
27388: PUSH
27389: LD_VAR 0 2
27393: DIFF
27394: ST_TO_ADDR
27395: GO 27413
// hInvincible := hInvincible union i ;
27397: LD_ADDR_EXP 111
27401: PUSH
27402: LD_EXP 111
27406: PUSH
27407: LD_VAR 0 2
27411: UNION
27412: ST_TO_ADDR
// end ;
27413: GO 27353
27415: POP
27416: POP
// end ;
27417: LD_VAR 0 1
27421: RET
// export function hHackInvisible ; var i , j ; begin
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
27426: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 69
27446: PUSH
27447: FOR_IN
27448: IFFALSE 27472
// if IsSelected ( i ) then
27450: LD_VAR 0 2
27454: PPUSH
27455: CALL_OW 306
27459: IFFALSE 27470
// ComForceInvisible ( i ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: CALL_OW 496
27470: GO 27447
27472: POP
27473: POP
// end ;
27474: LD_VAR 0 1
27478: RET
// export function hHackChangeYourSide ; begin
27479: LD_INT 0
27481: PPUSH
// if your_side = 8 then
27482: LD_OWVAR 2
27486: PUSH
27487: LD_INT 8
27489: EQUAL
27490: IFFALSE 27502
// your_side := 0 else
27492: LD_ADDR_OWVAR 2
27496: PUSH
27497: LD_INT 0
27499: ST_TO_ADDR
27500: GO 27516
// your_side := your_side + 1 ;
27502: LD_ADDR_OWVAR 2
27506: PUSH
27507: LD_OWVAR 2
27511: PUSH
27512: LD_INT 1
27514: PLUS
27515: ST_TO_ADDR
// end ;
27516: LD_VAR 0 1
27520: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27521: LD_INT 0
27523: PPUSH
27524: PPUSH
27525: PPUSH
// for i in all_units do
27526: LD_ADDR_VAR 0 2
27530: PUSH
27531: LD_OWVAR 3
27535: PUSH
27536: FOR_IN
27537: IFFALSE 27615
// if IsSelected ( i ) then
27539: LD_VAR 0 2
27543: PPUSH
27544: CALL_OW 306
27548: IFFALSE 27613
// begin j := GetSide ( i ) ;
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: CALL_OW 255
27564: ST_TO_ADDR
// if j = 8 then
27565: LD_VAR 0 3
27569: PUSH
27570: LD_INT 8
27572: EQUAL
27573: IFFALSE 27585
// j := 0 else
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_INT 0
27582: ST_TO_ADDR
27583: GO 27599
// j := j + 1 ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_VAR 0 3
27594: PUSH
27595: LD_INT 1
27597: PLUS
27598: ST_TO_ADDR
// SetSide ( i , j ) ;
27599: LD_VAR 0 2
27603: PPUSH
27604: LD_VAR 0 3
27608: PPUSH
27609: CALL_OW 235
// end ;
27613: GO 27536
27615: POP
27616: POP
// end ;
27617: LD_VAR 0 1
27621: RET
// export function hHackFog ; begin
27622: LD_INT 0
27624: PPUSH
// FogOff ( true ) ;
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 344
// end ;
27632: LD_VAR 0 1
27636: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27637: LD_INT 0
27639: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27640: LD_VAR 0 1
27644: PPUSH
27645: LD_VAR 0 2
27649: PPUSH
27650: LD_VAR 0 3
27654: PPUSH
27655: LD_INT 1
27657: PPUSH
27658: LD_INT 1
27660: PPUSH
27661: CALL_OW 483
// CenterOnXY ( x , y ) ;
27665: LD_VAR 0 2
27669: PPUSH
27670: LD_VAR 0 3
27674: PPUSH
27675: CALL_OW 84
// end ; end_of_file
27679: LD_VAR 0 4
27683: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 264
27699: PUSH
27700: LD_EXP 128
27704: EQUAL
27705: IFFALSE 27777
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27707: LD_INT 68
27709: PPUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: CALL_OW 255
27719: PPUSH
27720: CALL_OW 321
27724: PUSH
27725: LD_INT 2
27727: EQUAL
27728: IFFALSE 27740
// eff := 70 else
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_INT 70
27737: ST_TO_ADDR
27738: GO 27748
// eff := 30 ;
27740: LD_ADDR_VAR 0 4
27744: PUSH
27745: LD_INT 30
27747: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27748: LD_VAR 0 1
27752: PPUSH
27753: CALL_OW 250
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 251
27767: PPUSH
27768: LD_VAR 0 4
27772: PPUSH
27773: CALL_OW 495
// end ; end ;
27777: LD_VAR 0 2
27781: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27782: LD_INT 0
27784: PPUSH
// end ;
27785: LD_VAR 0 4
27789: RET
// export function SOS_Command ( cmd ) ; begin
27790: LD_INT 0
27792: PPUSH
// end ;
27793: LD_VAR 0 2
27797: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27798: LD_INT 0
27800: PPUSH
// if cmd = 121 then
27801: LD_VAR 0 1
27805: PUSH
27806: LD_INT 121
27808: EQUAL
27809: IFFALSE 27811
// end ;
27811: LD_VAR 0 6
27815: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27816: LD_INT 0
27818: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27819: LD_VAR 0 1
27823: PUSH
27824: LD_INT 250
27826: EQUAL
27827: PUSH
27828: LD_VAR 0 2
27832: PPUSH
27833: CALL_OW 264
27837: PUSH
27838: LD_EXP 131
27842: EQUAL
27843: AND
27844: IFFALSE 27865
// MinerPlaceMine ( unit , x , y ) ;
27846: LD_VAR 0 2
27850: PPUSH
27851: LD_VAR 0 4
27855: PPUSH
27856: LD_VAR 0 5
27860: PPUSH
27861: CALL 30214 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27865: LD_VAR 0 1
27869: PUSH
27870: LD_INT 251
27872: EQUAL
27873: PUSH
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 264
27883: PUSH
27884: LD_EXP 131
27888: EQUAL
27889: AND
27890: IFFALSE 27911
// MinerDetonateMine ( unit , x , y ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_VAR 0 4
27901: PPUSH
27902: LD_VAR 0 5
27906: PPUSH
27907: CALL 30491 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27911: LD_VAR 0 1
27915: PUSH
27916: LD_INT 252
27918: EQUAL
27919: PUSH
27920: LD_VAR 0 2
27924: PPUSH
27925: CALL_OW 264
27929: PUSH
27930: LD_EXP 131
27934: EQUAL
27935: AND
27936: IFFALSE 27957
// MinerCreateMinefield ( unit , x , y ) ;
27938: LD_VAR 0 2
27942: PPUSH
27943: LD_VAR 0 4
27947: PPUSH
27948: LD_VAR 0 5
27952: PPUSH
27953: CALL 30908 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27957: LD_VAR 0 1
27961: PUSH
27962: LD_INT 253
27964: EQUAL
27965: PUSH
27966: LD_VAR 0 2
27970: PPUSH
27971: CALL_OW 257
27975: PUSH
27976: LD_INT 5
27978: EQUAL
27979: AND
27980: IFFALSE 28001
// ComBinocular ( unit , x , y ) ;
27982: LD_VAR 0 2
27986: PPUSH
27987: LD_VAR 0 4
27991: PPUSH
27992: LD_VAR 0 5
27996: PPUSH
27997: CALL 31279 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28001: LD_VAR 0 1
28005: PUSH
28006: LD_INT 254
28008: EQUAL
28009: PUSH
28010: LD_VAR 0 2
28014: PPUSH
28015: CALL_OW 264
28019: PUSH
28020: LD_EXP 126
28024: EQUAL
28025: AND
28026: PUSH
28027: LD_VAR 0 3
28031: PPUSH
28032: CALL_OW 263
28036: PUSH
28037: LD_INT 3
28039: EQUAL
28040: AND
28041: IFFALSE 28057
// HackDestroyVehicle ( unit , selectedUnit ) ;
28043: LD_VAR 0 2
28047: PPUSH
28048: LD_VAR 0 3
28052: PPUSH
28053: CALL 29574 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28057: LD_VAR 0 1
28061: PUSH
28062: LD_INT 255
28064: EQUAL
28065: PUSH
28066: LD_VAR 0 2
28070: PPUSH
28071: CALL_OW 264
28075: PUSH
28076: LD_INT 14
28078: PUSH
28079: LD_INT 53
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: IN
28086: AND
28087: PUSH
28088: LD_VAR 0 4
28092: PPUSH
28093: LD_VAR 0 5
28097: PPUSH
28098: CALL_OW 488
28102: AND
28103: IFFALSE 28127
// CutTreeXYR ( unit , x , y , 12 ) ;
28105: LD_VAR 0 2
28109: PPUSH
28110: LD_VAR 0 4
28114: PPUSH
28115: LD_VAR 0 5
28119: PPUSH
28120: LD_INT 12
28122: PPUSH
28123: CALL 28140 0 4
// end ;
28127: LD_VAR 0 6
28131: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28132: LD_INT 0
28134: PPUSH
// end ;
28135: LD_VAR 0 4
28139: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28140: LD_INT 0
28142: PPUSH
28143: PPUSH
28144: PPUSH
28145: PPUSH
28146: PPUSH
28147: PPUSH
28148: PPUSH
28149: PPUSH
28150: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28151: LD_VAR 0 1
28155: NOT
28156: PUSH
28157: LD_VAR 0 2
28161: PPUSH
28162: LD_VAR 0 3
28166: PPUSH
28167: CALL_OW 488
28171: NOT
28172: OR
28173: PUSH
28174: LD_VAR 0 4
28178: NOT
28179: OR
28180: IFFALSE 28184
// exit ;
28182: GO 28524
// list := [ ] ;
28184: LD_ADDR_VAR 0 13
28188: PUSH
28189: EMPTY
28190: ST_TO_ADDR
// if x - r < 0 then
28191: LD_VAR 0 2
28195: PUSH
28196: LD_VAR 0 4
28200: MINUS
28201: PUSH
28202: LD_INT 0
28204: LESS
28205: IFFALSE 28217
// min_x := 0 else
28207: LD_ADDR_VAR 0 7
28211: PUSH
28212: LD_INT 0
28214: ST_TO_ADDR
28215: GO 28233
// min_x := x - r ;
28217: LD_ADDR_VAR 0 7
28221: PUSH
28222: LD_VAR 0 2
28226: PUSH
28227: LD_VAR 0 4
28231: MINUS
28232: ST_TO_ADDR
// if y - r < 0 then
28233: LD_VAR 0 3
28237: PUSH
28238: LD_VAR 0 4
28242: MINUS
28243: PUSH
28244: LD_INT 0
28246: LESS
28247: IFFALSE 28259
// min_y := 0 else
28249: LD_ADDR_VAR 0 8
28253: PUSH
28254: LD_INT 0
28256: ST_TO_ADDR
28257: GO 28275
// min_y := y - r ;
28259: LD_ADDR_VAR 0 8
28263: PUSH
28264: LD_VAR 0 3
28268: PUSH
28269: LD_VAR 0 4
28273: MINUS
28274: ST_TO_ADDR
// max_x := x + r ;
28275: LD_ADDR_VAR 0 9
28279: PUSH
28280: LD_VAR 0 2
28284: PUSH
28285: LD_VAR 0 4
28289: PLUS
28290: ST_TO_ADDR
// max_y := y + r ;
28291: LD_ADDR_VAR 0 10
28295: PUSH
28296: LD_VAR 0 3
28300: PUSH
28301: LD_VAR 0 4
28305: PLUS
28306: ST_TO_ADDR
// for _x = min_x to max_x do
28307: LD_ADDR_VAR 0 11
28311: PUSH
28312: DOUBLE
28313: LD_VAR 0 7
28317: DEC
28318: ST_TO_ADDR
28319: LD_VAR 0 9
28323: PUSH
28324: FOR_TO
28325: IFFALSE 28442
// for _y = min_y to max_y do
28327: LD_ADDR_VAR 0 12
28331: PUSH
28332: DOUBLE
28333: LD_VAR 0 8
28337: DEC
28338: ST_TO_ADDR
28339: LD_VAR 0 10
28343: PUSH
28344: FOR_TO
28345: IFFALSE 28438
// begin if not ValidHex ( _x , _y ) then
28347: LD_VAR 0 11
28351: PPUSH
28352: LD_VAR 0 12
28356: PPUSH
28357: CALL_OW 488
28361: NOT
28362: IFFALSE 28366
// continue ;
28364: GO 28344
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28366: LD_VAR 0 11
28370: PPUSH
28371: LD_VAR 0 12
28375: PPUSH
28376: CALL_OW 351
28380: PUSH
28381: LD_VAR 0 11
28385: PPUSH
28386: LD_VAR 0 12
28390: PPUSH
28391: CALL_OW 554
28395: AND
28396: IFFALSE 28436
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28398: LD_ADDR_VAR 0 13
28402: PUSH
28403: LD_VAR 0 13
28407: PPUSH
28408: LD_VAR 0 13
28412: PUSH
28413: LD_INT 1
28415: PLUS
28416: PPUSH
28417: LD_VAR 0 11
28421: PUSH
28422: LD_VAR 0 12
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 2
28435: ST_TO_ADDR
// end ;
28436: GO 28344
28438: POP
28439: POP
28440: GO 28324
28442: POP
28443: POP
// if not list then
28444: LD_VAR 0 13
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 28524
// for i in list do
28453: LD_ADDR_VAR 0 6
28457: PUSH
28458: LD_VAR 0 13
28462: PUSH
28463: FOR_IN
28464: IFFALSE 28522
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28466: LD_VAR 0 1
28470: PPUSH
28471: LD_STRING M
28473: PUSH
28474: LD_VAR 0 6
28478: PUSH
28479: LD_INT 1
28481: ARRAY
28482: PUSH
28483: LD_VAR 0 6
28487: PUSH
28488: LD_INT 2
28490: ARRAY
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: PPUSH
28516: CALL_OW 447
28520: GO 28463
28522: POP
28523: POP
// end ;
28524: LD_VAR 0 5
28528: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28529: LD_EXP 114
28533: NOT
28534: IFFALSE 28584
28536: GO 28538
28538: DISABLE
// begin initHack := true ;
28539: LD_ADDR_EXP 114
28543: PUSH
28544: LD_INT 1
28546: ST_TO_ADDR
// hackTanks := [ ] ;
28547: LD_ADDR_EXP 115
28551: PUSH
28552: EMPTY
28553: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28554: LD_ADDR_EXP 116
28558: PUSH
28559: EMPTY
28560: ST_TO_ADDR
// hackLimit := 3 ;
28561: LD_ADDR_EXP 117
28565: PUSH
28566: LD_INT 3
28568: ST_TO_ADDR
// hackDist := 12 ;
28569: LD_ADDR_EXP 118
28573: PUSH
28574: LD_INT 12
28576: ST_TO_ADDR
// hackCounter := [ ] ;
28577: LD_ADDR_EXP 119
28581: PUSH
28582: EMPTY
28583: ST_TO_ADDR
// end ;
28584: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28585: LD_EXP 114
28589: PUSH
28590: LD_INT 34
28592: PUSH
28593: LD_EXP 126
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 69
28606: AND
28607: IFFALSE 28862
28609: GO 28611
28611: DISABLE
28612: LD_INT 0
28614: PPUSH
28615: PPUSH
// begin enable ;
28616: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28617: LD_ADDR_VAR 0 1
28621: PUSH
28622: LD_INT 34
28624: PUSH
28625: LD_EXP 126
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PPUSH
28634: CALL_OW 69
28638: PUSH
28639: FOR_IN
28640: IFFALSE 28860
// begin if not i in hackTanks then
28642: LD_VAR 0 1
28646: PUSH
28647: LD_EXP 115
28651: IN
28652: NOT
28653: IFFALSE 28736
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28655: LD_ADDR_EXP 115
28659: PUSH
28660: LD_EXP 115
28664: PPUSH
28665: LD_EXP 115
28669: PUSH
28670: LD_INT 1
28672: PLUS
28673: PPUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL_OW 1
28683: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28684: LD_ADDR_EXP 116
28688: PUSH
28689: LD_EXP 116
28693: PPUSH
28694: LD_EXP 116
28698: PUSH
28699: LD_INT 1
28701: PLUS
28702: PPUSH
28703: EMPTY
28704: PPUSH
28705: CALL_OW 1
28709: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28710: LD_ADDR_EXP 119
28714: PUSH
28715: LD_EXP 119
28719: PPUSH
28720: LD_EXP 119
28724: PUSH
28725: LD_INT 1
28727: PLUS
28728: PPUSH
28729: EMPTY
28730: PPUSH
28731: CALL_OW 1
28735: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 302
28745: NOT
28746: IFFALSE 28759
// begin HackUnlinkAll ( i ) ;
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL 28865 0 1
// continue ;
28757: GO 28639
// end ; HackCheckCapturedStatus ( i ) ;
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL 29308 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: LD_INT 81
28775: PUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 255
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 33
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 91
28802: PUSH
28803: LD_VAR 0 1
28807: PUSH
28808: LD_EXP 118
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 50
28820: PUSH
28821: EMPTY
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: PPUSH
28830: CALL_OW 69
28834: ST_TO_ADDR
// if not tmp then
28835: LD_VAR 0 2
28839: NOT
28840: IFFALSE 28844
// continue ;
28842: GO 28639
// HackLink ( i , tmp ) ;
28844: LD_VAR 0 1
28848: PPUSH
28849: LD_VAR 0 2
28853: PPUSH
28854: CALL 29001 0 2
// end ;
28858: GO 28639
28860: POP
28861: POP
// end ;
28862: PPOPN 2
28864: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
28869: PPUSH
// if not hack in hackTanks then
28870: LD_VAR 0 1
28874: PUSH
28875: LD_EXP 115
28879: IN
28880: NOT
28881: IFFALSE 28885
// exit ;
28883: GO 28996
// index := GetElementIndex ( hackTanks , hack ) ;
28885: LD_ADDR_VAR 0 4
28889: PUSH
28890: LD_EXP 115
28894: PPUSH
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL 36801 0 2
28904: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28905: LD_EXP 116
28909: PUSH
28910: LD_VAR 0 4
28914: ARRAY
28915: IFFALSE 28996
// begin for i in hackTanksCaptured [ index ] do
28917: LD_ADDR_VAR 0 3
28921: PUSH
28922: LD_EXP 116
28926: PUSH
28927: LD_VAR 0 4
28931: ARRAY
28932: PUSH
28933: FOR_IN
28934: IFFALSE 28960
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28936: LD_VAR 0 3
28940: PUSH
28941: LD_INT 1
28943: ARRAY
28944: PPUSH
28945: LD_VAR 0 3
28949: PUSH
28950: LD_INT 2
28952: ARRAY
28953: PPUSH
28954: CALL_OW 235
28958: GO 28933
28960: POP
28961: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28962: LD_ADDR_EXP 116
28966: PUSH
28967: LD_EXP 116
28971: PPUSH
28972: LD_VAR 0 4
28976: PPUSH
28977: EMPTY
28978: PPUSH
28979: CALL_OW 1
28983: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_INT 0
28991: PPUSH
28992: CALL_OW 505
// end ; end ;
28996: LD_VAR 0 2
29000: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29001: LD_INT 0
29003: PPUSH
29004: PPUSH
29005: PPUSH
// if not hack in hackTanks or not vehicles then
29006: LD_VAR 0 1
29010: PUSH
29011: LD_EXP 115
29015: IN
29016: NOT
29017: PUSH
29018: LD_VAR 0 2
29022: NOT
29023: OR
29024: IFFALSE 29028
// exit ;
29026: GO 29303
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_VAR 0 1
29037: PPUSH
29038: LD_VAR 0 2
29042: PPUSH
29043: LD_INT 1
29045: PPUSH
29046: LD_INT 1
29048: PPUSH
29049: CALL 37451 0 4
29053: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29054: LD_ADDR_VAR 0 5
29058: PUSH
29059: LD_EXP 115
29063: PPUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL 36801 0 2
29073: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29074: LD_EXP 116
29078: PUSH
29079: LD_VAR 0 5
29083: ARRAY
29084: PUSH
29085: LD_EXP 117
29089: LESS
29090: IFFALSE 29279
// begin for i := 1 to vehicles do
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: DOUBLE
29098: LD_INT 1
29100: DEC
29101: ST_TO_ADDR
29102: LD_VAR 0 2
29106: PUSH
29107: FOR_TO
29108: IFFALSE 29277
// begin if hackTanksCaptured [ index ] = hackLimit then
29110: LD_EXP 116
29114: PUSH
29115: LD_VAR 0 5
29119: ARRAY
29120: PUSH
29121: LD_EXP 117
29125: EQUAL
29126: IFFALSE 29130
// break ;
29128: GO 29277
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29130: LD_ADDR_EXP 119
29134: PUSH
29135: LD_EXP 119
29139: PPUSH
29140: LD_VAR 0 5
29144: PPUSH
29145: LD_EXP 119
29149: PUSH
29150: LD_VAR 0 5
29154: ARRAY
29155: PUSH
29156: LD_INT 1
29158: PLUS
29159: PPUSH
29160: CALL_OW 1
29164: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29165: LD_ADDR_EXP 116
29169: PUSH
29170: LD_EXP 116
29174: PPUSH
29175: LD_VAR 0 5
29179: PUSH
29180: LD_EXP 116
29184: PUSH
29185: LD_VAR 0 5
29189: ARRAY
29190: PUSH
29191: LD_INT 1
29193: PLUS
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PPUSH
29199: LD_VAR 0 2
29203: PUSH
29204: LD_VAR 0 4
29208: ARRAY
29209: PUSH
29210: LD_VAR 0 2
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: PPUSH
29221: CALL_OW 255
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL 37016 0 3
29234: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29235: LD_VAR 0 2
29239: PUSH
29240: LD_VAR 0 4
29244: ARRAY
29245: PPUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL_OW 255
29255: PPUSH
29256: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29260: LD_VAR 0 2
29264: PUSH
29265: LD_VAR 0 4
29269: ARRAY
29270: PPUSH
29271: CALL_OW 141
// end ;
29275: GO 29107
29277: POP
29278: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29279: LD_VAR 0 1
29283: PPUSH
29284: LD_EXP 116
29288: PUSH
29289: LD_VAR 0 5
29293: ARRAY
29294: PUSH
29295: LD_INT 0
29297: PLUS
29298: PPUSH
29299: CALL_OW 505
// end ;
29303: LD_VAR 0 3
29307: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// if not hack in hackTanks then
29314: LD_VAR 0 1
29318: PUSH
29319: LD_EXP 115
29323: IN
29324: NOT
29325: IFFALSE 29329
// exit ;
29327: GO 29569
// index := GetElementIndex ( hackTanks , hack ) ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_EXP 115
29338: PPUSH
29339: LD_VAR 0 1
29343: PPUSH
29344: CALL 36801 0 2
29348: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: DOUBLE
29355: LD_EXP 116
29359: PUSH
29360: LD_VAR 0 4
29364: ARRAY
29365: INC
29366: ST_TO_ADDR
29367: LD_INT 1
29369: PUSH
29370: FOR_DOWNTO
29371: IFFALSE 29543
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29373: LD_ADDR_VAR 0 5
29377: PUSH
29378: LD_EXP 116
29382: PUSH
29383: LD_VAR 0 4
29387: ARRAY
29388: PUSH
29389: LD_VAR 0 3
29393: ARRAY
29394: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29395: LD_VAR 0 5
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: CALL_OW 302
29408: NOT
29409: PUSH
29410: LD_VAR 0 5
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: PPUSH
29419: CALL_OW 255
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 255
29433: NONEQUAL
29434: OR
29435: IFFALSE 29541
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29437: LD_VAR 0 5
29441: PUSH
29442: LD_INT 1
29444: ARRAY
29445: PPUSH
29446: CALL_OW 305
29450: PUSH
29451: LD_VAR 0 5
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: PPUSH
29460: CALL_OW 255
29464: PUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 255
29474: EQUAL
29475: AND
29476: IFFALSE 29500
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29478: LD_VAR 0 5
29482: PUSH
29483: LD_INT 1
29485: ARRAY
29486: PPUSH
29487: LD_VAR 0 5
29491: PUSH
29492: LD_INT 2
29494: ARRAY
29495: PPUSH
29496: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29500: LD_ADDR_EXP 116
29504: PUSH
29505: LD_EXP 116
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: LD_EXP 116
29519: PUSH
29520: LD_VAR 0 4
29524: ARRAY
29525: PPUSH
29526: LD_VAR 0 3
29530: PPUSH
29531: CALL_OW 3
29535: PPUSH
29536: CALL_OW 1
29540: ST_TO_ADDR
// end ; end ;
29541: GO 29370
29543: POP
29544: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_EXP 116
29554: PUSH
29555: LD_VAR 0 4
29559: ARRAY
29560: PUSH
29561: LD_INT 0
29563: PLUS
29564: PPUSH
29565: CALL_OW 505
// end ;
29569: LD_VAR 0 2
29573: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29574: LD_INT 0
29576: PPUSH
29577: PPUSH
29578: PPUSH
29579: PPUSH
// if not hack in hackTanks then
29580: LD_VAR 0 1
29584: PUSH
29585: LD_EXP 115
29589: IN
29590: NOT
29591: IFFALSE 29595
// exit ;
29593: GO 29680
// index := GetElementIndex ( hackTanks , hack ) ;
29595: LD_ADDR_VAR 0 5
29599: PUSH
29600: LD_EXP 115
29604: PPUSH
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL 36801 0 2
29614: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29615: LD_ADDR_VAR 0 4
29619: PUSH
29620: DOUBLE
29621: LD_INT 1
29623: DEC
29624: ST_TO_ADDR
29625: LD_EXP 116
29629: PUSH
29630: LD_VAR 0 5
29634: ARRAY
29635: PUSH
29636: FOR_TO
29637: IFFALSE 29678
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29639: LD_EXP 116
29643: PUSH
29644: LD_VAR 0 5
29648: ARRAY
29649: PUSH
29650: LD_VAR 0 4
29654: ARRAY
29655: PUSH
29656: LD_INT 1
29658: ARRAY
29659: PUSH
29660: LD_VAR 0 2
29664: EQUAL
29665: IFFALSE 29676
// KillUnit ( vehicle ) ;
29667: LD_VAR 0 2
29671: PPUSH
29672: CALL_OW 66
29676: GO 29636
29678: POP
29679: POP
// end ;
29680: LD_VAR 0 3
29684: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29685: LD_EXP 120
29689: NOT
29690: IFFALSE 29725
29692: GO 29694
29694: DISABLE
// begin initMiner := true ;
29695: LD_ADDR_EXP 120
29699: PUSH
29700: LD_INT 1
29702: ST_TO_ADDR
// minersList := [ ] ;
29703: LD_ADDR_EXP 121
29707: PUSH
29708: EMPTY
29709: ST_TO_ADDR
// minerMinesList := [ ] ;
29710: LD_ADDR_EXP 122
29714: PUSH
29715: EMPTY
29716: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29717: LD_ADDR_EXP 123
29721: PUSH
29722: LD_INT 5
29724: ST_TO_ADDR
// end ;
29725: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29726: LD_EXP 120
29730: PUSH
29731: LD_INT 34
29733: PUSH
29734: LD_EXP 131
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PPUSH
29743: CALL_OW 69
29747: AND
29748: IFFALSE 30211
29750: GO 29752
29752: DISABLE
29753: LD_INT 0
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
// begin enable ;
29759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29760: LD_ADDR_VAR 0 1
29764: PUSH
29765: LD_INT 34
29767: PUSH
29768: LD_EXP 131
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29855
// begin if not i in minersList then
29785: LD_VAR 0 1
29789: PUSH
29790: LD_EXP 121
29794: IN
29795: NOT
29796: IFFALSE 29853
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29798: LD_ADDR_EXP 121
29802: PUSH
29803: LD_EXP 121
29807: PPUSH
29808: LD_EXP 121
29812: PUSH
29813: LD_INT 1
29815: PLUS
29816: PPUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 1
29826: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29827: LD_ADDR_EXP 122
29831: PUSH
29832: LD_EXP 122
29836: PPUSH
29837: LD_EXP 122
29841: PUSH
29842: LD_INT 1
29844: PLUS
29845: PPUSH
29846: EMPTY
29847: PPUSH
29848: CALL_OW 1
29852: ST_TO_ADDR
// end end ;
29853: GO 29782
29855: POP
29856: POP
// for i := minerMinesList downto 1 do
29857: LD_ADDR_VAR 0 1
29861: PUSH
29862: DOUBLE
29863: LD_EXP 122
29867: INC
29868: ST_TO_ADDR
29869: LD_INT 1
29871: PUSH
29872: FOR_DOWNTO
29873: IFFALSE 30209
// begin if IsLive ( minersList [ i ] ) then
29875: LD_EXP 121
29879: PUSH
29880: LD_VAR 0 1
29884: ARRAY
29885: PPUSH
29886: CALL_OW 300
29890: IFFALSE 29918
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29892: LD_EXP 121
29896: PUSH
29897: LD_VAR 0 1
29901: ARRAY
29902: PPUSH
29903: LD_EXP 122
29907: PUSH
29908: LD_VAR 0 1
29912: ARRAY
29913: PPUSH
29914: CALL_OW 505
// if not minerMinesList [ i ] then
29918: LD_EXP 122
29922: PUSH
29923: LD_VAR 0 1
29927: ARRAY
29928: NOT
29929: IFFALSE 29933
// continue ;
29931: GO 29872
// for j := minerMinesList [ i ] downto 1 do
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: DOUBLE
29939: LD_EXP 122
29943: PUSH
29944: LD_VAR 0 1
29948: ARRAY
29949: INC
29950: ST_TO_ADDR
29951: LD_INT 1
29953: PUSH
29954: FOR_DOWNTO
29955: IFFALSE 30205
// begin side := GetSide ( minersList [ i ] ) ;
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_EXP 121
29966: PUSH
29967: LD_VAR 0 1
29971: ARRAY
29972: PPUSH
29973: CALL_OW 255
29977: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29978: LD_ADDR_VAR 0 4
29982: PUSH
29983: LD_EXP 122
29987: PUSH
29988: LD_VAR 0 1
29992: ARRAY
29993: PUSH
29994: LD_VAR 0 2
29998: ARRAY
29999: PUSH
30000: LD_INT 1
30002: ARRAY
30003: PPUSH
30004: LD_EXP 122
30008: PUSH
30009: LD_VAR 0 1
30013: ARRAY
30014: PUSH
30015: LD_VAR 0 2
30019: ARRAY
30020: PUSH
30021: LD_INT 2
30023: ARRAY
30024: PPUSH
30025: CALL_OW 428
30029: ST_TO_ADDR
// if not tmp then
30030: LD_VAR 0 4
30034: NOT
30035: IFFALSE 30039
// continue ;
30037: GO 29954
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30039: LD_VAR 0 4
30043: PUSH
30044: LD_INT 81
30046: PUSH
30047: LD_VAR 0 3
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PPUSH
30056: CALL_OW 69
30060: IN
30061: PUSH
30062: LD_EXP 122
30066: PUSH
30067: LD_VAR 0 1
30071: ARRAY
30072: PUSH
30073: LD_VAR 0 2
30077: ARRAY
30078: PUSH
30079: LD_INT 1
30081: ARRAY
30082: PPUSH
30083: LD_EXP 122
30087: PUSH
30088: LD_VAR 0 1
30092: ARRAY
30093: PUSH
30094: LD_VAR 0 2
30098: ARRAY
30099: PUSH
30100: LD_INT 2
30102: ARRAY
30103: PPUSH
30104: CALL_OW 458
30108: AND
30109: IFFALSE 30203
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30111: LD_EXP 122
30115: PUSH
30116: LD_VAR 0 1
30120: ARRAY
30121: PUSH
30122: LD_VAR 0 2
30126: ARRAY
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PPUSH
30132: LD_EXP 122
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PUSH
30143: LD_VAR 0 2
30147: ARRAY
30148: PUSH
30149: LD_INT 2
30151: ARRAY
30152: PPUSH
30153: LD_VAR 0 3
30157: PPUSH
30158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30162: LD_ADDR_EXP 122
30166: PUSH
30167: LD_EXP 122
30171: PPUSH
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_EXP 122
30181: PUSH
30182: LD_VAR 0 1
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: CALL_OW 3
30197: PPUSH
30198: CALL_OW 1
30202: ST_TO_ADDR
// end ; end ;
30203: GO 29954
30205: POP
30206: POP
// end ;
30207: GO 29872
30209: POP
30210: POP
// end ;
30211: PPOPN 4
30213: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30214: LD_INT 0
30216: PPUSH
30217: PPUSH
// result := false ;
30218: LD_ADDR_VAR 0 4
30222: PUSH
30223: LD_INT 0
30225: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30226: LD_VAR 0 1
30230: PPUSH
30231: CALL_OW 264
30235: PUSH
30236: LD_EXP 131
30240: EQUAL
30241: NOT
30242: IFFALSE 30246
// exit ;
30244: GO 30486
// index := GetElementIndex ( minersList , unit ) ;
30246: LD_ADDR_VAR 0 5
30250: PUSH
30251: LD_EXP 121
30255: PPUSH
30256: LD_VAR 0 1
30260: PPUSH
30261: CALL 36801 0 2
30265: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30266: LD_EXP 122
30270: PUSH
30271: LD_VAR 0 5
30275: ARRAY
30276: PUSH
30277: LD_EXP 123
30281: GREATEREQUAL
30282: IFFALSE 30286
// exit ;
30284: GO 30486
// ComMoveXY ( unit , x , y ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_VAR 0 2
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30305: LD_INT 35
30307: PPUSH
30308: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: CALL 67573 0 3
30331: NOT
30332: PUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 314
30342: AND
30343: IFFALSE 30347
// exit ;
30345: GO 30486
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30347: LD_VAR 0 2
30351: PPUSH
30352: LD_VAR 0 3
30356: PPUSH
30357: CALL_OW 428
30361: PUSH
30362: LD_VAR 0 1
30366: EQUAL
30367: PUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 314
30377: NOT
30378: AND
30379: IFFALSE 30305
// PlaySoundXY ( x , y , PlantMine ) ;
30381: LD_VAR 0 2
30385: PPUSH
30386: LD_VAR 0 3
30390: PPUSH
30391: LD_STRING PlantMine
30393: PPUSH
30394: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30398: LD_VAR 0 2
30402: PPUSH
30403: LD_VAR 0 3
30407: PPUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 255
30417: PPUSH
30418: LD_INT 0
30420: PPUSH
30421: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30425: LD_ADDR_EXP 122
30429: PUSH
30430: LD_EXP 122
30434: PPUSH
30435: LD_VAR 0 5
30439: PUSH
30440: LD_EXP 122
30444: PUSH
30445: LD_VAR 0 5
30449: ARRAY
30450: PUSH
30451: LD_INT 1
30453: PLUS
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_VAR 0 3
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL 37016 0 3
30477: ST_TO_ADDR
// result := true ;
30478: LD_ADDR_VAR 0 4
30482: PUSH
30483: LD_INT 1
30485: ST_TO_ADDR
// end ;
30486: LD_VAR 0 4
30490: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// if not unit in minersList then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_EXP 121
30505: IN
30506: NOT
30507: IFFALSE 30511
// exit ;
30509: GO 30903
// index := GetElementIndex ( minersList , unit ) ;
30511: LD_ADDR_VAR 0 6
30515: PUSH
30516: LD_EXP 121
30520: PPUSH
30521: LD_VAR 0 1
30525: PPUSH
30526: CALL 36801 0 2
30530: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30531: LD_ADDR_VAR 0 5
30535: PUSH
30536: DOUBLE
30537: LD_EXP 122
30541: PUSH
30542: LD_VAR 0 6
30546: ARRAY
30547: INC
30548: ST_TO_ADDR
30549: LD_INT 1
30551: PUSH
30552: FOR_DOWNTO
30553: IFFALSE 30714
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30555: LD_EXP 122
30559: PUSH
30560: LD_VAR 0 6
30564: ARRAY
30565: PUSH
30566: LD_VAR 0 5
30570: ARRAY
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: PUSH
30576: LD_VAR 0 2
30580: EQUAL
30581: PUSH
30582: LD_EXP 122
30586: PUSH
30587: LD_VAR 0 6
30591: ARRAY
30592: PUSH
30593: LD_VAR 0 5
30597: ARRAY
30598: PUSH
30599: LD_INT 2
30601: ARRAY
30602: PUSH
30603: LD_VAR 0 3
30607: EQUAL
30608: AND
30609: IFFALSE 30712
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30611: LD_EXP 122
30615: PUSH
30616: LD_VAR 0 6
30620: ARRAY
30621: PUSH
30622: LD_VAR 0 5
30626: ARRAY
30627: PUSH
30628: LD_INT 1
30630: ARRAY
30631: PPUSH
30632: LD_EXP 122
30636: PUSH
30637: LD_VAR 0 6
30641: ARRAY
30642: PUSH
30643: LD_VAR 0 5
30647: ARRAY
30648: PUSH
30649: LD_INT 2
30651: ARRAY
30652: PPUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 255
30662: PPUSH
30663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30667: LD_ADDR_EXP 122
30671: PUSH
30672: LD_EXP 122
30676: PPUSH
30677: LD_VAR 0 6
30681: PPUSH
30682: LD_EXP 122
30686: PUSH
30687: LD_VAR 0 6
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 5
30697: PPUSH
30698: CALL_OW 3
30702: PPUSH
30703: CALL_OW 1
30707: ST_TO_ADDR
// exit ;
30708: POP
30709: POP
30710: GO 30903
// end ; end ;
30712: GO 30552
30714: POP
30715: POP
// for i := minerMinesList [ index ] downto 1 do
30716: LD_ADDR_VAR 0 5
30720: PUSH
30721: DOUBLE
30722: LD_EXP 122
30726: PUSH
30727: LD_VAR 0 6
30731: ARRAY
30732: INC
30733: ST_TO_ADDR
30734: LD_INT 1
30736: PUSH
30737: FOR_DOWNTO
30738: IFFALSE 30901
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30740: LD_EXP 122
30744: PUSH
30745: LD_VAR 0 6
30749: ARRAY
30750: PUSH
30751: LD_VAR 0 5
30755: ARRAY
30756: PUSH
30757: LD_INT 1
30759: ARRAY
30760: PPUSH
30761: LD_EXP 122
30765: PUSH
30766: LD_VAR 0 6
30770: ARRAY
30771: PUSH
30772: LD_VAR 0 5
30776: ARRAY
30777: PUSH
30778: LD_INT 2
30780: ARRAY
30781: PPUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: CALL_OW 298
30796: PUSH
30797: LD_INT 6
30799: LESS
30800: IFFALSE 30899
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30802: LD_EXP 122
30806: PUSH
30807: LD_VAR 0 6
30811: ARRAY
30812: PUSH
30813: LD_VAR 0 5
30817: ARRAY
30818: PUSH
30819: LD_INT 1
30821: ARRAY
30822: PPUSH
30823: LD_EXP 122
30827: PUSH
30828: LD_VAR 0 6
30832: ARRAY
30833: PUSH
30834: LD_VAR 0 5
30838: ARRAY
30839: PUSH
30840: LD_INT 2
30842: ARRAY
30843: PPUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 255
30853: PPUSH
30854: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30858: LD_ADDR_EXP 122
30862: PUSH
30863: LD_EXP 122
30867: PPUSH
30868: LD_VAR 0 6
30872: PPUSH
30873: LD_EXP 122
30877: PUSH
30878: LD_VAR 0 6
30882: ARRAY
30883: PPUSH
30884: LD_VAR 0 5
30888: PPUSH
30889: CALL_OW 3
30893: PPUSH
30894: CALL_OW 1
30898: ST_TO_ADDR
// end ; end ;
30899: GO 30737
30901: POP
30902: POP
// end ;
30903: LD_VAR 0 4
30907: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 264
30928: PUSH
30929: LD_EXP 131
30933: EQUAL
30934: NOT
30935: PUSH
30936: LD_VAR 0 1
30940: PUSH
30941: LD_EXP 121
30945: IN
30946: NOT
30947: OR
30948: IFFALSE 30952
// exit ;
30950: GO 31274
// index := GetElementIndex ( minersList , unit ) ;
30952: LD_ADDR_VAR 0 6
30956: PUSH
30957: LD_EXP 121
30961: PPUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL 36801 0 2
30971: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30972: LD_ADDR_VAR 0 8
30976: PUSH
30977: LD_EXP 123
30981: PUSH
30982: LD_EXP 122
30986: PUSH
30987: LD_VAR 0 6
30991: ARRAY
30992: MINUS
30993: ST_TO_ADDR
// if not minesFreeAmount then
30994: LD_VAR 0 8
30998: NOT
30999: IFFALSE 31003
// exit ;
31001: GO 31274
// tmp := [ ] ;
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: EMPTY
31009: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31010: LD_ADDR_VAR 0 5
31014: PUSH
31015: DOUBLE
31016: LD_INT 1
31018: DEC
31019: ST_TO_ADDR
31020: LD_VAR 0 8
31024: PUSH
31025: FOR_TO
31026: IFFALSE 31221
// begin _d := rand ( 0 , 5 ) ;
31028: LD_ADDR_VAR 0 11
31032: PUSH
31033: LD_INT 0
31035: PPUSH
31036: LD_INT 5
31038: PPUSH
31039: CALL_OW 12
31043: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31044: LD_ADDR_VAR 0 12
31048: PUSH
31049: LD_INT 2
31051: PPUSH
31052: LD_INT 6
31054: PPUSH
31055: CALL_OW 12
31059: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31060: LD_ADDR_VAR 0 9
31064: PUSH
31065: LD_VAR 0 2
31069: PPUSH
31070: LD_VAR 0 11
31074: PPUSH
31075: LD_VAR 0 12
31079: PPUSH
31080: CALL_OW 272
31084: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31085: LD_ADDR_VAR 0 10
31089: PUSH
31090: LD_VAR 0 3
31094: PPUSH
31095: LD_VAR 0 11
31099: PPUSH
31100: LD_VAR 0 12
31104: PPUSH
31105: CALL_OW 273
31109: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31110: LD_VAR 0 9
31114: PPUSH
31115: LD_VAR 0 10
31119: PPUSH
31120: CALL_OW 488
31124: PUSH
31125: LD_VAR 0 9
31129: PUSH
31130: LD_VAR 0 10
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_VAR 0 7
31143: IN
31144: NOT
31145: AND
31146: PUSH
31147: LD_VAR 0 9
31151: PPUSH
31152: LD_VAR 0 10
31156: PPUSH
31157: CALL_OW 458
31161: NOT
31162: AND
31163: IFFALSE 31205
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31165: LD_ADDR_VAR 0 7
31169: PUSH
31170: LD_VAR 0 7
31174: PPUSH
31175: LD_VAR 0 7
31179: PUSH
31180: LD_INT 1
31182: PLUS
31183: PPUSH
31184: LD_VAR 0 9
31188: PUSH
31189: LD_VAR 0 10
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PPUSH
31198: CALL_OW 1
31202: ST_TO_ADDR
31203: GO 31219
// i := i - 1 ;
31205: LD_ADDR_VAR 0 5
31209: PUSH
31210: LD_VAR 0 5
31214: PUSH
31215: LD_INT 1
31217: MINUS
31218: ST_TO_ADDR
// end ;
31219: GO 31025
31221: POP
31222: POP
// for i in tmp do
31223: LD_ADDR_VAR 0 5
31227: PUSH
31228: LD_VAR 0 7
31232: PUSH
31233: FOR_IN
31234: IFFALSE 31272
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_VAR 0 5
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: LD_VAR 0 5
31254: PUSH
31255: LD_INT 2
31257: ARRAY
31258: PPUSH
31259: CALL 30214 0 3
31263: NOT
31264: IFFALSE 31270
// exit ;
31266: POP
31267: POP
31268: GO 31274
31270: GO 31233
31272: POP
31273: POP
// end ;
31274: LD_VAR 0 4
31278: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31279: LD_INT 0
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
// if not GetClass ( unit ) = class_sniper then
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL_OW 257
31297: PUSH
31298: LD_INT 5
31300: EQUAL
31301: NOT
31302: IFFALSE 31306
// exit ;
31304: GO 31694
// dist := 8 ;
31306: LD_ADDR_VAR 0 5
31310: PUSH
31311: LD_INT 8
31313: ST_TO_ADDR
// viewRange := 12 ;
31314: LD_ADDR_VAR 0 7
31318: PUSH
31319: LD_INT 12
31321: ST_TO_ADDR
// side := GetSide ( unit ) ;
31322: LD_ADDR_VAR 0 6
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 255
31336: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31337: LD_INT 61
31339: PPUSH
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 321
31349: PUSH
31350: LD_INT 2
31352: EQUAL
31353: IFFALSE 31363
// viewRange := 16 ;
31355: LD_ADDR_VAR 0 7
31359: PUSH
31360: LD_INT 16
31362: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31363: LD_VAR 0 1
31367: PPUSH
31368: LD_VAR 0 2
31372: PPUSH
31373: LD_VAR 0 3
31377: PPUSH
31378: CALL_OW 297
31382: PUSH
31383: LD_VAR 0 5
31387: GREATER
31388: IFFALSE 31467
// begin ComMoveXY ( unit , x , y ) ;
31390: LD_VAR 0 1
31394: PPUSH
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 3
31404: PPUSH
31405: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31409: LD_INT 35
31411: PPUSH
31412: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31416: LD_VAR 0 1
31420: PPUSH
31421: LD_VAR 0 2
31425: PPUSH
31426: LD_VAR 0 3
31430: PPUSH
31431: CALL 67573 0 3
31435: NOT
31436: IFFALSE 31440
// exit ;
31438: GO 31694
// until GetDistUnitXY ( unit , x , y ) < dist ;
31440: LD_VAR 0 1
31444: PPUSH
31445: LD_VAR 0 2
31449: PPUSH
31450: LD_VAR 0 3
31454: PPUSH
31455: CALL_OW 297
31459: PUSH
31460: LD_VAR 0 5
31464: LESS
31465: IFFALSE 31409
// end ; ComTurnXY ( unit , x , y ) ;
31467: LD_VAR 0 1
31471: PPUSH
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_VAR 0 3
31481: PPUSH
31482: CALL_OW 118
// wait ( 5 ) ;
31486: LD_INT 5
31488: PPUSH
31489: CALL_OW 67
// _d := GetDir ( unit ) ;
31493: LD_ADDR_VAR 0 10
31497: PUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 254
31507: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31508: LD_ADDR_VAR 0 8
31512: PUSH
31513: LD_VAR 0 1
31517: PPUSH
31518: CALL_OW 250
31522: PPUSH
31523: LD_VAR 0 10
31527: PPUSH
31528: LD_VAR 0 5
31532: PPUSH
31533: CALL_OW 272
31537: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: CALL_OW 251
31552: PPUSH
31553: LD_VAR 0 10
31557: PPUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: CALL_OW 273
31567: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 9
31577: PPUSH
31578: CALL_OW 488
31582: NOT
31583: IFFALSE 31587
// exit ;
31585: GO 31694
// ComAnimCustom ( unit , 1 ) ;
31587: LD_VAR 0 1
31591: PPUSH
31592: LD_INT 1
31594: PPUSH
31595: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31599: LD_VAR 0 8
31603: PPUSH
31604: LD_VAR 0 9
31608: PPUSH
31609: LD_VAR 0 6
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: CALL_OW 330
// repeat wait ( 1 ) ;
31623: LD_INT 1
31625: PPUSH
31626: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 316
31639: PUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 314
31649: OR
31650: PUSH
31651: LD_VAR 0 1
31655: PPUSH
31656: CALL_OW 302
31660: NOT
31661: OR
31662: PUSH
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 301
31672: OR
31673: IFFALSE 31623
// RemoveSeeing ( _x , _y , side ) ;
31675: LD_VAR 0 8
31679: PPUSH
31680: LD_VAR 0 9
31684: PPUSH
31685: LD_VAR 0 6
31689: PPUSH
31690: CALL_OW 331
// end ; end_of_file
31694: LD_VAR 0 4
31698: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31699: LD_VAR 0 1
31703: PUSH
31704: LD_INT 200
31706: DOUBLE
31707: GREATEREQUAL
31708: IFFALSE 31716
31710: LD_INT 299
31712: DOUBLE
31713: LESSEQUAL
31714: IFTRUE 31718
31716: GO 31750
31718: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31719: LD_VAR 0 1
31723: PPUSH
31724: LD_VAR 0 2
31728: PPUSH
31729: LD_VAR 0 3
31733: PPUSH
31734: LD_VAR 0 4
31738: PPUSH
31739: LD_VAR 0 5
31743: PPUSH
31744: CALL 27816 0 5
31748: GO 31827
31750: LD_INT 300
31752: DOUBLE
31753: GREATEREQUAL
31754: IFFALSE 31762
31756: LD_INT 399
31758: DOUBLE
31759: LESSEQUAL
31760: IFTRUE 31764
31762: GO 31826
31764: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31765: LD_VAR 0 1
31769: PPUSH
31770: LD_VAR 0 2
31774: PPUSH
31775: LD_VAR 0 3
31779: PPUSH
31780: LD_VAR 0 4
31784: PPUSH
31785: LD_VAR 0 5
31789: PPUSH
31790: LD_VAR 0 6
31794: PPUSH
31795: LD_VAR 0 7
31799: PPUSH
31800: LD_VAR 0 8
31804: PPUSH
31805: LD_VAR 0 9
31809: PPUSH
31810: LD_VAR 0 10
31814: PPUSH
31815: LD_VAR 0 11
31819: PPUSH
31820: CALL 25704 0 11
31824: GO 31827
31826: POP
// end ;
31827: PPOPN 11
31829: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31830: LD_VAR 0 1
31834: PPUSH
31835: LD_VAR 0 2
31839: PPUSH
31840: LD_VAR 0 3
31844: PPUSH
31845: LD_VAR 0 4
31849: PPUSH
31850: LD_VAR 0 5
31854: PPUSH
31855: CALL 27798 0 5
// end ; end_of_file end_of_file
31859: PPOPN 5
31861: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
31862: LD_INT 0
31864: PPUSH
// ar_miner := 81 ;
31865: LD_ADDR_EXP 131
31869: PUSH
31870: LD_INT 81
31872: ST_TO_ADDR
// ar_crane := 88 ;
31873: LD_ADDR_EXP 130
31877: PUSH
31878: LD_INT 88
31880: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31881: LD_ADDR_EXP 125
31885: PUSH
31886: LD_INT 89
31888: ST_TO_ADDR
// us_hack := 99 ;
31889: LD_ADDR_EXP 126
31893: PUSH
31894: LD_INT 99
31896: ST_TO_ADDR
// us_artillery := 97 ;
31897: LD_ADDR_EXP 127
31901: PUSH
31902: LD_INT 97
31904: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31905: LD_ADDR_EXP 128
31909: PUSH
31910: LD_INT 91
31912: ST_TO_ADDR
// ar_mortar := 92 ;
31913: LD_ADDR_EXP 129
31917: PUSH
31918: LD_INT 92
31920: ST_TO_ADDR
// ru_radar := 98 ;
31921: LD_ADDR_EXP 124
31925: PUSH
31926: LD_INT 98
31928: ST_TO_ADDR
// tech_Artillery := 80 ;
31929: LD_ADDR_EXP 132
31933: PUSH
31934: LD_INT 80
31936: ST_TO_ADDR
// tech_RadMat := 81 ;
31937: LD_ADDR_EXP 133
31941: PUSH
31942: LD_INT 81
31944: ST_TO_ADDR
// tech_BasicTools := 82 ;
31945: LD_ADDR_EXP 134
31949: PUSH
31950: LD_INT 82
31952: ST_TO_ADDR
// tech_Cargo := 83 ;
31953: LD_ADDR_EXP 135
31957: PUSH
31958: LD_INT 83
31960: ST_TO_ADDR
// tech_Track := 84 ;
31961: LD_ADDR_EXP 136
31965: PUSH
31966: LD_INT 84
31968: ST_TO_ADDR
// tech_Crane := 85 ;
31969: LD_ADDR_EXP 137
31973: PUSH
31974: LD_INT 85
31976: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31977: LD_ADDR_EXP 138
31981: PUSH
31982: LD_INT 86
31984: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31985: LD_ADDR_EXP 139
31989: PUSH
31990: LD_INT 87
31992: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
31993: LD_ADDR_EXP 140
31997: PUSH
31998: LD_INT 88
32000: ST_TO_ADDR
// class_mastodont := 31 ;
32001: LD_ADDR_EXP 141
32005: PUSH
32006: LD_INT 31
32008: ST_TO_ADDR
// class_horse := 21 ;
32009: LD_ADDR_EXP 142
32013: PUSH
32014: LD_INT 21
32016: ST_TO_ADDR
// end ;
32017: LD_VAR 0 1
32021: RET
// every 1 do
32022: GO 32024
32024: DISABLE
// InitGlobalVariables ; end_of_file
32025: CALL 31862 0 0
32029: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32030: LD_INT 0
32032: PPUSH
32033: PPUSH
// if exist_mode then
32034: LD_VAR 0 2
32038: IFFALSE 32063
// unit := CreateCharacter ( prefix & ident ) else
32040: LD_ADDR_VAR 0 5
32044: PUSH
32045: LD_VAR 0 3
32049: PUSH
32050: LD_VAR 0 1
32054: STR
32055: PPUSH
32056: CALL_OW 34
32060: ST_TO_ADDR
32061: GO 32078
// unit := NewCharacter ( ident ) ;
32063: LD_ADDR_VAR 0 5
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 25
32077: ST_TO_ADDR
// result := unit ;
32078: LD_ADDR_VAR 0 4
32082: PUSH
32083: LD_VAR 0 5
32087: ST_TO_ADDR
// end ;
32088: LD_VAR 0 4
32092: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
// if not side or not nation then
32097: LD_VAR 0 1
32101: NOT
32102: PUSH
32103: LD_VAR 0 2
32107: NOT
32108: OR
32109: IFFALSE 32113
// exit ;
32111: GO 32881
// case nation of nation_american :
32113: LD_VAR 0 2
32117: PUSH
32118: LD_INT 1
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32340
32126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: LD_INT 35
32134: PUSH
32135: LD_INT 45
32137: PUSH
32138: LD_INT 46
32140: PUSH
32141: LD_INT 47
32143: PUSH
32144: LD_INT 82
32146: PUSH
32147: LD_INT 83
32149: PUSH
32150: LD_INT 84
32152: PUSH
32153: LD_INT 85
32155: PUSH
32156: LD_INT 86
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: LD_INT 6
32167: PUSH
32168: LD_INT 15
32170: PUSH
32171: LD_INT 16
32173: PUSH
32174: LD_INT 7
32176: PUSH
32177: LD_INT 12
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 10
32185: PUSH
32186: LD_INT 14
32188: PUSH
32189: LD_INT 20
32191: PUSH
32192: LD_INT 21
32194: PUSH
32195: LD_INT 22
32197: PUSH
32198: LD_INT 25
32200: PUSH
32201: LD_INT 32
32203: PUSH
32204: LD_INT 27
32206: PUSH
32207: LD_INT 36
32209: PUSH
32210: LD_INT 69
32212: PUSH
32213: LD_INT 39
32215: PUSH
32216: LD_INT 34
32218: PUSH
32219: LD_INT 40
32221: PUSH
32222: LD_INT 48
32224: PUSH
32225: LD_INT 49
32227: PUSH
32228: LD_INT 50
32230: PUSH
32231: LD_INT 51
32233: PUSH
32234: LD_INT 52
32236: PUSH
32237: LD_INT 53
32239: PUSH
32240: LD_INT 54
32242: PUSH
32243: LD_INT 55
32245: PUSH
32246: LD_INT 56
32248: PUSH
32249: LD_INT 57
32251: PUSH
32252: LD_INT 58
32254: PUSH
32255: LD_INT 59
32257: PUSH
32258: LD_INT 60
32260: PUSH
32261: LD_INT 61
32263: PUSH
32264: LD_INT 62
32266: PUSH
32267: LD_INT 80
32269: PUSH
32270: LD_INT 82
32272: PUSH
32273: LD_INT 83
32275: PUSH
32276: LD_INT 84
32278: PUSH
32279: LD_INT 85
32281: PUSH
32282: LD_INT 86
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
32338: GO 32805
32340: LD_INT 2
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32348
32346: GO 32574
32348: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32349: LD_ADDR_VAR 0 4
32353: PUSH
32354: LD_INT 35
32356: PUSH
32357: LD_INT 45
32359: PUSH
32360: LD_INT 46
32362: PUSH
32363: LD_INT 47
32365: PUSH
32366: LD_INT 82
32368: PUSH
32369: LD_INT 83
32371: PUSH
32372: LD_INT 84
32374: PUSH
32375: LD_INT 85
32377: PUSH
32378: LD_INT 87
32380: PUSH
32381: LD_INT 70
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 11
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 5
32398: PUSH
32399: LD_INT 6
32401: PUSH
32402: LD_INT 15
32404: PUSH
32405: LD_INT 18
32407: PUSH
32408: LD_INT 7
32410: PUSH
32411: LD_INT 17
32413: PUSH
32414: LD_INT 8
32416: PUSH
32417: LD_INT 20
32419: PUSH
32420: LD_INT 21
32422: PUSH
32423: LD_INT 22
32425: PUSH
32426: LD_INT 72
32428: PUSH
32429: LD_INT 26
32431: PUSH
32432: LD_INT 69
32434: PUSH
32435: LD_INT 39
32437: PUSH
32438: LD_INT 40
32440: PUSH
32441: LD_INT 41
32443: PUSH
32444: LD_INT 42
32446: PUSH
32447: LD_INT 43
32449: PUSH
32450: LD_INT 48
32452: PUSH
32453: LD_INT 49
32455: PUSH
32456: LD_INT 50
32458: PUSH
32459: LD_INT 51
32461: PUSH
32462: LD_INT 52
32464: PUSH
32465: LD_INT 53
32467: PUSH
32468: LD_INT 54
32470: PUSH
32471: LD_INT 55
32473: PUSH
32474: LD_INT 56
32476: PUSH
32477: LD_INT 60
32479: PUSH
32480: LD_INT 61
32482: PUSH
32483: LD_INT 62
32485: PUSH
32486: LD_INT 66
32488: PUSH
32489: LD_INT 67
32491: PUSH
32492: LD_INT 68
32494: PUSH
32495: LD_INT 81
32497: PUSH
32498: LD_INT 82
32500: PUSH
32501: LD_INT 83
32503: PUSH
32504: LD_INT 84
32506: PUSH
32507: LD_INT 85
32509: PUSH
32510: LD_INT 87
32512: PUSH
32513: LD_INT 88
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
32572: GO 32805
32574: LD_INT 3
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32804
32582: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32583: LD_ADDR_VAR 0 4
32587: PUSH
32588: LD_INT 46
32590: PUSH
32591: LD_INT 47
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 82
32602: PUSH
32603: LD_INT 83
32605: PUSH
32606: LD_INT 84
32608: PUSH
32609: LD_INT 85
32611: PUSH
32612: LD_INT 86
32614: PUSH
32615: LD_INT 11
32617: PUSH
32618: LD_INT 9
32620: PUSH
32621: LD_INT 20
32623: PUSH
32624: LD_INT 19
32626: PUSH
32627: LD_INT 21
32629: PUSH
32630: LD_INT 24
32632: PUSH
32633: LD_INT 22
32635: PUSH
32636: LD_INT 25
32638: PUSH
32639: LD_INT 28
32641: PUSH
32642: LD_INT 29
32644: PUSH
32645: LD_INT 30
32647: PUSH
32648: LD_INT 31
32650: PUSH
32651: LD_INT 37
32653: PUSH
32654: LD_INT 38
32656: PUSH
32657: LD_INT 32
32659: PUSH
32660: LD_INT 27
32662: PUSH
32663: LD_INT 33
32665: PUSH
32666: LD_INT 69
32668: PUSH
32669: LD_INT 39
32671: PUSH
32672: LD_INT 34
32674: PUSH
32675: LD_INT 40
32677: PUSH
32678: LD_INT 71
32680: PUSH
32681: LD_INT 23
32683: PUSH
32684: LD_INT 44
32686: PUSH
32687: LD_INT 48
32689: PUSH
32690: LD_INT 49
32692: PUSH
32693: LD_INT 50
32695: PUSH
32696: LD_INT 51
32698: PUSH
32699: LD_INT 52
32701: PUSH
32702: LD_INT 53
32704: PUSH
32705: LD_INT 54
32707: PUSH
32708: LD_INT 55
32710: PUSH
32711: LD_INT 56
32713: PUSH
32714: LD_INT 57
32716: PUSH
32717: LD_INT 58
32719: PUSH
32720: LD_INT 59
32722: PUSH
32723: LD_INT 63
32725: PUSH
32726: LD_INT 64
32728: PUSH
32729: LD_INT 65
32731: PUSH
32732: LD_INT 82
32734: PUSH
32735: LD_INT 83
32737: PUSH
32738: LD_INT 84
32740: PUSH
32741: LD_INT 85
32743: PUSH
32744: LD_INT 86
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: ST_TO_ADDR
32802: GO 32805
32804: POP
// if state > - 1 and state < 3 then
32805: LD_VAR 0 3
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: GREATER
32814: PUSH
32815: LD_VAR 0 3
32819: PUSH
32820: LD_INT 3
32822: LESS
32823: AND
32824: IFFALSE 32881
// for i in result do
32826: LD_ADDR_VAR 0 5
32830: PUSH
32831: LD_VAR 0 4
32835: PUSH
32836: FOR_IN
32837: IFFALSE 32879
// if GetTech ( i , side ) <> state then
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: CALL_OW 321
32853: PUSH
32854: LD_VAR 0 3
32858: NONEQUAL
32859: IFFALSE 32877
// result := result diff i ;
32861: LD_ADDR_VAR 0 4
32865: PUSH
32866: LD_VAR 0 4
32870: PUSH
32871: LD_VAR 0 5
32875: DIFF
32876: ST_TO_ADDR
32877: GO 32836
32879: POP
32880: POP
// end ;
32881: LD_VAR 0 4
32885: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32886: LD_INT 0
32888: PPUSH
32889: PPUSH
32890: PPUSH
// result := true ;
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 1
32898: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32899: LD_ADDR_VAR 0 5
32903: PUSH
32904: LD_VAR 0 2
32908: PPUSH
32909: CALL_OW 480
32913: ST_TO_ADDR
// if not tmp then
32914: LD_VAR 0 5
32918: NOT
32919: IFFALSE 32923
// exit ;
32921: GO 32972
// for i in tmp do
32923: LD_ADDR_VAR 0 4
32927: PUSH
32928: LD_VAR 0 5
32932: PUSH
32933: FOR_IN
32934: IFFALSE 32970
// if GetTech ( i , side ) <> state_researched then
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_VAR 0 1
32945: PPUSH
32946: CALL_OW 321
32950: PUSH
32951: LD_INT 2
32953: NONEQUAL
32954: IFFALSE 32968
// begin result := false ;
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_INT 0
32963: ST_TO_ADDR
// exit ;
32964: POP
32965: POP
32966: GO 32972
// end ;
32968: GO 32933
32970: POP
32971: POP
// end ;
32972: LD_VAR 0 3
32976: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32977: LD_INT 0
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32992: LD_VAR 0 1
32996: NOT
32997: PUSH
32998: LD_VAR 0 1
33002: PPUSH
33003: CALL_OW 257
33007: PUSH
33008: LD_INT 9
33010: NONEQUAL
33011: OR
33012: IFFALSE 33016
// exit ;
33014: GO 33589
// side := GetSide ( unit ) ;
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_VAR 0 1
33025: PPUSH
33026: CALL_OW 255
33030: ST_TO_ADDR
// tech_space := tech_spacanom ;
33031: LD_ADDR_VAR 0 12
33035: PUSH
33036: LD_INT 29
33038: ST_TO_ADDR
// tech_time := tech_taurad ;
33039: LD_ADDR_VAR 0 13
33043: PUSH
33044: LD_INT 28
33046: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33047: LD_ADDR_VAR 0 11
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 310
33061: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33062: LD_VAR 0 11
33066: PPUSH
33067: CALL_OW 247
33071: PUSH
33072: LD_INT 2
33074: EQUAL
33075: IFFALSE 33079
// exit ;
33077: GO 33589
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33079: LD_ADDR_VAR 0 8
33083: PUSH
33084: LD_INT 81
33086: PUSH
33087: LD_VAR 0 9
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: LD_INT 21
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PPUSH
33117: CALL_OW 69
33121: ST_TO_ADDR
// if not tmp then
33122: LD_VAR 0 8
33126: NOT
33127: IFFALSE 33131
// exit ;
33129: GO 33589
// if in_unit then
33131: LD_VAR 0 11
33135: IFFALSE 33159
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33137: LD_ADDR_VAR 0 10
33141: PUSH
33142: LD_VAR 0 8
33146: PPUSH
33147: LD_VAR 0 11
33151: PPUSH
33152: CALL_OW 74
33156: ST_TO_ADDR
33157: GO 33179
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33159: LD_ADDR_VAR 0 10
33163: PUSH
33164: LD_VAR 0 8
33168: PPUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 74
33178: ST_TO_ADDR
// if not enemy then
33179: LD_VAR 0 10
33183: NOT
33184: IFFALSE 33188
// exit ;
33186: GO 33589
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33188: LD_VAR 0 11
33192: PUSH
33193: LD_VAR 0 11
33197: PPUSH
33198: LD_VAR 0 10
33202: PPUSH
33203: CALL_OW 296
33207: PUSH
33208: LD_INT 13
33210: GREATER
33211: AND
33212: PUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: LD_VAR 0 10
33222: PPUSH
33223: CALL_OW 296
33227: PUSH
33228: LD_INT 12
33230: GREATER
33231: OR
33232: IFFALSE 33236
// exit ;
33234: GO 33589
// missile := [ 1 ] ;
33236: LD_ADDR_VAR 0 14
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33247: LD_VAR 0 9
33251: PPUSH
33252: LD_VAR 0 12
33256: PPUSH
33257: CALL_OW 325
33261: IFFALSE 33290
// missile := Insert ( missile , missile + 1 , 2 ) ;
33263: LD_ADDR_VAR 0 14
33267: PUSH
33268: LD_VAR 0 14
33272: PPUSH
33273: LD_VAR 0 14
33277: PUSH
33278: LD_INT 1
33280: PLUS
33281: PPUSH
33282: LD_INT 2
33284: PPUSH
33285: CALL_OW 2
33289: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33290: LD_VAR 0 9
33294: PPUSH
33295: LD_VAR 0 13
33299: PPUSH
33300: CALL_OW 325
33304: PUSH
33305: LD_VAR 0 10
33309: PPUSH
33310: CALL_OW 255
33314: PPUSH
33315: LD_VAR 0 13
33319: PPUSH
33320: CALL_OW 325
33324: NOT
33325: AND
33326: IFFALSE 33355
// missile := Insert ( missile , missile + 1 , 3 ) ;
33328: LD_ADDR_VAR 0 14
33332: PUSH
33333: LD_VAR 0 14
33337: PPUSH
33338: LD_VAR 0 14
33342: PUSH
33343: LD_INT 1
33345: PLUS
33346: PPUSH
33347: LD_INT 3
33349: PPUSH
33350: CALL_OW 2
33354: ST_TO_ADDR
// if missile < 2 then
33355: LD_VAR 0 14
33359: PUSH
33360: LD_INT 2
33362: LESS
33363: IFFALSE 33367
// exit ;
33365: GO 33589
// x := GetX ( enemy ) ;
33367: LD_ADDR_VAR 0 4
33371: PUSH
33372: LD_VAR 0 10
33376: PPUSH
33377: CALL_OW 250
33381: ST_TO_ADDR
// y := GetY ( enemy ) ;
33382: LD_ADDR_VAR 0 5
33386: PUSH
33387: LD_VAR 0 10
33391: PPUSH
33392: CALL_OW 251
33396: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33397: LD_ADDR_VAR 0 6
33401: PUSH
33402: LD_VAR 0 4
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PPUSH
33411: LD_INT 1
33413: PPUSH
33414: CALL_OW 12
33418: PLUS
33419: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33420: LD_ADDR_VAR 0 7
33424: PUSH
33425: LD_VAR 0 5
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PPUSH
33434: LD_INT 1
33436: PPUSH
33437: CALL_OW 12
33441: PLUS
33442: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33443: LD_VAR 0 6
33447: PPUSH
33448: LD_VAR 0 7
33452: PPUSH
33453: CALL_OW 488
33457: NOT
33458: IFFALSE 33480
// begin _x := x ;
33460: LD_ADDR_VAR 0 6
33464: PUSH
33465: LD_VAR 0 4
33469: ST_TO_ADDR
// _y := y ;
33470: LD_ADDR_VAR 0 7
33474: PUSH
33475: LD_VAR 0 5
33479: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 1
33487: PPUSH
33488: LD_VAR 0 14
33492: PPUSH
33493: CALL_OW 12
33497: ST_TO_ADDR
// case i of 1 :
33498: LD_VAR 0 3
33502: PUSH
33503: LD_INT 1
33505: DOUBLE
33506: EQUAL
33507: IFTRUE 33511
33509: GO 33528
33511: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33512: LD_VAR 0 1
33516: PPUSH
33517: LD_VAR 0 10
33521: PPUSH
33522: CALL_OW 115
33526: GO 33589
33528: LD_INT 2
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33558
33536: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33537: LD_VAR 0 1
33541: PPUSH
33542: LD_VAR 0 6
33546: PPUSH
33547: LD_VAR 0 7
33551: PPUSH
33552: CALL_OW 153
33556: GO 33589
33558: LD_INT 3
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33588
33566: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33567: LD_VAR 0 1
33571: PPUSH
33572: LD_VAR 0 6
33576: PPUSH
33577: LD_VAR 0 7
33581: PPUSH
33582: CALL_OW 154
33586: GO 33589
33588: POP
// end ;
33589: LD_VAR 0 2
33593: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33594: LD_INT 0
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
// if not unit or not building then
33602: LD_VAR 0 1
33606: NOT
33607: PUSH
33608: LD_VAR 0 2
33612: NOT
33613: OR
33614: IFFALSE 33618
// exit ;
33616: GO 33776
// x := GetX ( building ) ;
33618: LD_ADDR_VAR 0 5
33622: PUSH
33623: LD_VAR 0 2
33627: PPUSH
33628: CALL_OW 250
33632: ST_TO_ADDR
// y := GetY ( building ) ;
33633: LD_ADDR_VAR 0 6
33637: PUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: CALL_OW 251
33647: ST_TO_ADDR
// for i = 0 to 5 do
33648: LD_ADDR_VAR 0 4
33652: PUSH
33653: DOUBLE
33654: LD_INT 0
33656: DEC
33657: ST_TO_ADDR
33658: LD_INT 5
33660: PUSH
33661: FOR_TO
33662: IFFALSE 33774
// begin _x := ShiftX ( x , i , 3 ) ;
33664: LD_ADDR_VAR 0 7
33668: PUSH
33669: LD_VAR 0 5
33673: PPUSH
33674: LD_VAR 0 4
33678: PPUSH
33679: LD_INT 3
33681: PPUSH
33682: CALL_OW 272
33686: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33687: LD_ADDR_VAR 0 8
33691: PUSH
33692: LD_VAR 0 6
33696: PPUSH
33697: LD_VAR 0 4
33701: PPUSH
33702: LD_INT 3
33704: PPUSH
33705: CALL_OW 273
33709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33710: LD_VAR 0 7
33714: PPUSH
33715: LD_VAR 0 8
33719: PPUSH
33720: CALL_OW 488
33724: NOT
33725: IFFALSE 33729
// continue ;
33727: GO 33661
// if HexInfo ( _x , _y ) = 0 then
33729: LD_VAR 0 7
33733: PPUSH
33734: LD_VAR 0 8
33738: PPUSH
33739: CALL_OW 428
33743: PUSH
33744: LD_INT 0
33746: EQUAL
33747: IFFALSE 33772
// begin ComMoveXY ( unit , _x , _y ) ;
33749: LD_VAR 0 1
33753: PPUSH
33754: LD_VAR 0 7
33758: PPUSH
33759: LD_VAR 0 8
33763: PPUSH
33764: CALL_OW 111
// exit ;
33768: POP
33769: POP
33770: GO 33776
// end ; end ;
33772: GO 33661
33774: POP
33775: POP
// end ;
33776: LD_VAR 0 3
33780: RET
// export function ScanBase ( side , base_area ) ; begin
33781: LD_INT 0
33783: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: LD_INT 81
33796: PUSH
33797: LD_VAR 0 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PPUSH
33806: CALL_OW 70
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 3
33815: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33816: LD_INT 0
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
// result := false ;
33822: LD_ADDR_VAR 0 2
33826: PUSH
33827: LD_INT 0
33829: ST_TO_ADDR
// side := GetSide ( unit ) ;
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 255
33844: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33845: LD_ADDR_VAR 0 4
33849: PUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: CALL_OW 248
33859: ST_TO_ADDR
// case nat of 1 :
33860: LD_VAR 0 4
33864: PUSH
33865: LD_INT 1
33867: DOUBLE
33868: EQUAL
33869: IFTRUE 33873
33871: GO 33884
33873: POP
// tech := tech_lassight ; 2 :
33874: LD_ADDR_VAR 0 5
33878: PUSH
33879: LD_INT 12
33881: ST_TO_ADDR
33882: GO 33923
33884: LD_INT 2
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33892
33890: GO 33903
33892: POP
// tech := tech_mortar ; 3 :
33893: LD_ADDR_VAR 0 5
33897: PUSH
33898: LD_INT 41
33900: ST_TO_ADDR
33901: GO 33923
33903: LD_INT 3
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33911
33909: GO 33922
33911: POP
// tech := tech_bazooka ; end ;
33912: LD_ADDR_VAR 0 5
33916: PUSH
33917: LD_INT 44
33919: ST_TO_ADDR
33920: GO 33923
33922: POP
// if Researched ( side , tech ) then
33923: LD_VAR 0 3
33927: PPUSH
33928: LD_VAR 0 5
33932: PPUSH
33933: CALL_OW 325
33937: IFFALSE 33964
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: LD_INT 8
33949: PUSH
33950: LD_INT 9
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: PUSH
33958: LD_VAR 0 4
33962: ARRAY
33963: ST_TO_ADDR
// end ;
33964: LD_VAR 0 2
33968: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33969: LD_INT 0
33971: PPUSH
33972: PPUSH
33973: PPUSH
// if not mines then
33974: LD_VAR 0 2
33978: NOT
33979: IFFALSE 33983
// exit ;
33981: GO 34127
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33983: LD_ADDR_VAR 0 5
33987: PUSH
33988: LD_INT 81
33990: PUSH
33991: LD_VAR 0 1
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: LD_INT 21
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PPUSH
34021: CALL_OW 69
34025: ST_TO_ADDR
// for i in mines do
34026: LD_ADDR_VAR 0 4
34030: PUSH
34031: LD_VAR 0 2
34035: PUSH
34036: FOR_IN
34037: IFFALSE 34125
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34039: LD_VAR 0 4
34043: PUSH
34044: LD_INT 1
34046: ARRAY
34047: PPUSH
34048: LD_VAR 0 4
34052: PUSH
34053: LD_INT 2
34055: ARRAY
34056: PPUSH
34057: CALL_OW 458
34061: NOT
34062: IFFALSE 34066
// continue ;
34064: GO 34036
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34066: LD_VAR 0 4
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: PPUSH
34075: LD_VAR 0 4
34079: PUSH
34080: LD_INT 2
34082: ARRAY
34083: PPUSH
34084: CALL_OW 428
34088: PUSH
34089: LD_VAR 0 5
34093: IN
34094: IFFALSE 34123
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34096: LD_VAR 0 4
34100: PUSH
34101: LD_INT 1
34103: ARRAY
34104: PPUSH
34105: LD_VAR 0 4
34109: PUSH
34110: LD_INT 2
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 456
// end ;
34123: GO 34036
34125: POP
34126: POP
// end ;
34127: LD_VAR 0 3
34131: RET
// export function Count ( array ) ; var i ; begin
34132: LD_INT 0
34134: PPUSH
34135: PPUSH
// result := 0 ;
34136: LD_ADDR_VAR 0 2
34140: PUSH
34141: LD_INT 0
34143: ST_TO_ADDR
// for i in array do
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_VAR 0 1
34153: PUSH
34154: FOR_IN
34155: IFFALSE 34179
// if i then
34157: LD_VAR 0 3
34161: IFFALSE 34177
// result := result + 1 ;
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_INT 1
34175: PLUS
34176: ST_TO_ADDR
34177: GO 34154
34179: POP
34180: POP
// end ;
34181: LD_VAR 0 2
34185: RET
// export function IsEmpty ( building ) ; begin
34186: LD_INT 0
34188: PPUSH
// if not building then
34189: LD_VAR 0 1
34193: NOT
34194: IFFALSE 34198
// exit ;
34196: GO 34241
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34198: LD_ADDR_VAR 0 2
34202: PUSH
34203: LD_VAR 0 1
34207: PUSH
34208: LD_INT 22
34210: PUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 255
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 58
34227: PUSH
34228: EMPTY
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PPUSH
34235: CALL_OW 69
34239: IN
34240: ST_TO_ADDR
// end ;
34241: LD_VAR 0 2
34245: RET
// export function IsNotFull ( building ) ; begin
34246: LD_INT 0
34248: PPUSH
// if not building then
34249: LD_VAR 0 1
34253: NOT
34254: IFFALSE 34258
// exit ;
34256: GO 34277
// result := UnitsInside ( building ) < 6 ;
34258: LD_ADDR_VAR 0 2
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 313
34272: PUSH
34273: LD_INT 6
34275: LESS
34276: ST_TO_ADDR
// end ;
34277: LD_VAR 0 2
34281: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
// tmp := [ ] ;
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: EMPTY
34294: ST_TO_ADDR
// list := [ ] ;
34295: LD_ADDR_VAR 0 5
34299: PUSH
34300: EMPTY
34301: ST_TO_ADDR
// for i = 16 to 25 do
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: DOUBLE
34308: LD_INT 16
34310: DEC
34311: ST_TO_ADDR
34312: LD_INT 25
34314: PUSH
34315: FOR_TO
34316: IFFALSE 34389
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_VAR 0 3
34327: PUSH
34328: LD_INT 22
34330: PUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: CALL_OW 255
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 91
34347: PUSH
34348: LD_VAR 0 1
34352: PUSH
34353: LD_INT 6
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 30
34363: PUSH
34364: LD_VAR 0 4
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: PPUSH
34381: CALL_OW 69
34385: ADD
34386: ST_TO_ADDR
34387: GO 34315
34389: POP
34390: POP
// for i = 1 to tmp do
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: DOUBLE
34397: LD_INT 1
34399: DEC
34400: ST_TO_ADDR
34401: LD_VAR 0 3
34405: PUSH
34406: FOR_TO
34407: IFFALSE 34495
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34409: LD_ADDR_VAR 0 5
34413: PUSH
34414: LD_VAR 0 5
34418: PUSH
34419: LD_VAR 0 3
34423: PUSH
34424: LD_VAR 0 4
34428: ARRAY
34429: PPUSH
34430: CALL_OW 266
34434: PUSH
34435: LD_VAR 0 3
34439: PUSH
34440: LD_VAR 0 4
34444: ARRAY
34445: PPUSH
34446: CALL_OW 250
34450: PUSH
34451: LD_VAR 0 3
34455: PUSH
34456: LD_VAR 0 4
34460: ARRAY
34461: PPUSH
34462: CALL_OW 251
34466: PUSH
34467: LD_VAR 0 3
34471: PUSH
34472: LD_VAR 0 4
34476: ARRAY
34477: PPUSH
34478: CALL_OW 254
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: PUSH
34489: EMPTY
34490: LIST
34491: ADD
34492: ST_TO_ADDR
34493: GO 34406
34495: POP
34496: POP
// result := list ;
34497: LD_ADDR_VAR 0 2
34501: PUSH
34502: LD_VAR 0 5
34506: ST_TO_ADDR
// end ;
34507: LD_VAR 0 2
34511: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34512: LD_INT 0
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
// if not factory then
34521: LD_VAR 0 1
34525: NOT
34526: IFFALSE 34530
// exit ;
34528: GO 35123
// if control = control_apeman then
34530: LD_VAR 0 4
34534: PUSH
34535: LD_INT 5
34537: EQUAL
34538: IFFALSE 34647
// begin tmp := UnitsInside ( factory ) ;
34540: LD_ADDR_VAR 0 8
34544: PUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 313
34554: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34555: LD_VAR 0 8
34559: PPUSH
34560: LD_INT 25
34562: PUSH
34563: LD_INT 12
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PPUSH
34570: CALL_OW 72
34574: NOT
34575: IFFALSE 34585
// control := control_manual ;
34577: LD_ADDR_VAR 0 4
34581: PUSH
34582: LD_INT 1
34584: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34585: LD_ADDR_VAR 0 8
34589: PUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL 34282 0 1
34599: ST_TO_ADDR
// if tmp then
34600: LD_VAR 0 8
34604: IFFALSE 34647
// begin for i in tmp do
34606: LD_ADDR_VAR 0 7
34610: PUSH
34611: LD_VAR 0 8
34615: PUSH
34616: FOR_IN
34617: IFFALSE 34645
// if i [ 1 ] = b_ext_radio then
34619: LD_VAR 0 7
34623: PUSH
34624: LD_INT 1
34626: ARRAY
34627: PUSH
34628: LD_INT 22
34630: EQUAL
34631: IFFALSE 34643
// begin control := control_remote ;
34633: LD_ADDR_VAR 0 4
34637: PUSH
34638: LD_INT 2
34640: ST_TO_ADDR
// break ;
34641: GO 34645
// end ;
34643: GO 34616
34645: POP
34646: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: LD_VAR 0 3
34661: PPUSH
34662: LD_VAR 0 4
34666: PPUSH
34667: LD_VAR 0 5
34671: PPUSH
34672: CALL_OW 448
34676: IFFALSE 34711
// begin result := [ chassis , engine , control , weapon ] ;
34678: LD_ADDR_VAR 0 6
34682: PUSH
34683: LD_VAR 0 2
34687: PUSH
34688: LD_VAR 0 3
34692: PUSH
34693: LD_VAR 0 4
34697: PUSH
34698: LD_VAR 0 5
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// exit ;
34709: GO 35123
// end ; _chassis := AvailableChassisList ( factory ) ;
34711: LD_ADDR_VAR 0 9
34715: PUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 475
34725: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34726: LD_ADDR_VAR 0 11
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 476
34740: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34741: LD_ADDR_VAR 0 12
34745: PUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 477
34755: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34756: LD_ADDR_VAR 0 10
34760: PUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 478
34770: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34771: LD_VAR 0 9
34775: NOT
34776: PUSH
34777: LD_VAR 0 11
34781: NOT
34782: OR
34783: PUSH
34784: LD_VAR 0 12
34788: NOT
34789: OR
34790: PUSH
34791: LD_VAR 0 10
34795: NOT
34796: OR
34797: IFFALSE 34832
// begin result := [ chassis , engine , control , weapon ] ;
34799: LD_ADDR_VAR 0 6
34803: PUSH
34804: LD_VAR 0 2
34808: PUSH
34809: LD_VAR 0 3
34813: PUSH
34814: LD_VAR 0 4
34818: PUSH
34819: LD_VAR 0 5
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: ST_TO_ADDR
// exit ;
34830: GO 35123
// end ; if not chassis in _chassis then
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 9
34841: IN
34842: NOT
34843: IFFALSE 34869
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34845: LD_ADDR_VAR 0 2
34849: PUSH
34850: LD_VAR 0 9
34854: PUSH
34855: LD_INT 1
34857: PPUSH
34858: LD_VAR 0 9
34862: PPUSH
34863: CALL_OW 12
34867: ARRAY
34868: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 3
34878: PPUSH
34879: CALL 35128 0 2
34883: NOT
34884: IFFALSE 34943
// repeat engine := _engine [ 1 ] ;
34886: LD_ADDR_VAR 0 3
34890: PUSH
34891: LD_VAR 0 11
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34900: LD_ADDR_VAR 0 11
34904: PUSH
34905: LD_VAR 0 11
34909: PPUSH
34910: LD_INT 1
34912: PPUSH
34913: CALL_OW 3
34917: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 3
34927: PPUSH
34928: CALL 35128 0 2
34932: PUSH
34933: LD_VAR 0 11
34937: PUSH
34938: EMPTY
34939: EQUAL
34940: OR
34941: IFFALSE 34886
// if not control in _control then
34943: LD_VAR 0 4
34947: PUSH
34948: LD_VAR 0 12
34952: IN
34953: NOT
34954: IFFALSE 34980
// control := _control [ rand ( 1 , _control ) ] ;
34956: LD_ADDR_VAR 0 4
34960: PUSH
34961: LD_VAR 0 12
34965: PUSH
34966: LD_INT 1
34968: PPUSH
34969: LD_VAR 0 12
34973: PPUSH
34974: CALL_OW 12
34978: ARRAY
34979: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34980: LD_VAR 0 2
34984: PPUSH
34985: LD_VAR 0 5
34989: PPUSH
34990: CALL 35348 0 2
34994: NOT
34995: IFFALSE 35054
// repeat weapon := _weapon [ 1 ] ;
34997: LD_ADDR_VAR 0 5
35001: PUSH
35002: LD_VAR 0 10
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35011: LD_ADDR_VAR 0 10
35015: PUSH
35016: LD_VAR 0 10
35020: PPUSH
35021: LD_INT 1
35023: PPUSH
35024: CALL_OW 3
35028: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35029: LD_VAR 0 2
35033: PPUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: CALL 35348 0 2
35043: PUSH
35044: LD_VAR 0 10
35048: PUSH
35049: EMPTY
35050: EQUAL
35051: OR
35052: IFFALSE 34997
// result := [ ] ;
35054: LD_ADDR_VAR 0 6
35058: PUSH
35059: EMPTY
35060: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35061: LD_VAR 0 1
35065: PPUSH
35066: LD_VAR 0 2
35070: PPUSH
35071: LD_VAR 0 3
35075: PPUSH
35076: LD_VAR 0 4
35080: PPUSH
35081: LD_VAR 0 5
35085: PPUSH
35086: CALL_OW 448
35090: IFFALSE 35123
// result := [ chassis , engine , control , weapon ] ;
35092: LD_ADDR_VAR 0 6
35096: PUSH
35097: LD_VAR 0 2
35101: PUSH
35102: LD_VAR 0 3
35106: PUSH
35107: LD_VAR 0 4
35111: PUSH
35112: LD_VAR 0 5
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// end ;
35123: LD_VAR 0 6
35127: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35128: LD_INT 0
35130: PPUSH
// if not chassis or not engine then
35131: LD_VAR 0 1
35135: NOT
35136: PUSH
35137: LD_VAR 0 2
35141: NOT
35142: OR
35143: IFFALSE 35147
// exit ;
35145: GO 35343
// case engine of engine_solar :
35147: LD_VAR 0 2
35151: PUSH
35152: LD_INT 2
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35198
35160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 11
35168: PUSH
35169: LD_INT 12
35171: PUSH
35172: LD_INT 13
35174: PUSH
35175: LD_INT 14
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: LD_INT 3
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
35196: GO 35327
35198: LD_INT 1
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35206
35204: GO 35268
35206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35207: LD_ADDR_VAR 0 3
35211: PUSH
35212: LD_INT 11
35214: PUSH
35215: LD_INT 12
35217: PUSH
35218: LD_INT 13
35220: PUSH
35221: LD_INT 14
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 4
35235: PUSH
35236: LD_INT 5
35238: PUSH
35239: LD_INT 21
35241: PUSH
35242: LD_INT 23
35244: PUSH
35245: LD_INT 22
35247: PUSH
35248: LD_INT 24
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: ST_TO_ADDR
35266: GO 35327
35268: LD_INT 3
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35326
35276: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 13
35284: PUSH
35285: LD_INT 14
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: LD_INT 5
35299: PUSH
35300: LD_INT 21
35302: PUSH
35303: LD_INT 22
35305: PUSH
35306: LD_INT 23
35308: PUSH
35309: LD_INT 24
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
35324: GO 35327
35326: POP
// result := ( chassis in result ) ;
35327: LD_ADDR_VAR 0 3
35331: PUSH
35332: LD_VAR 0 1
35336: PUSH
35337: LD_VAR 0 3
35341: IN
35342: ST_TO_ADDR
// end ;
35343: LD_VAR 0 3
35347: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35348: LD_INT 0
35350: PPUSH
// if not chassis or not weapon then
35351: LD_VAR 0 1
35355: NOT
35356: PUSH
35357: LD_VAR 0 2
35361: NOT
35362: OR
35363: IFFALSE 35367
// exit ;
35365: GO 36429
// case weapon of us_machine_gun :
35367: LD_VAR 0 2
35371: PUSH
35372: LD_INT 2
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35380
35378: GO 35410
35380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 2
35391: PUSH
35392: LD_INT 3
35394: PUSH
35395: LD_INT 4
35397: PUSH
35398: LD_INT 5
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
35408: GO 36413
35410: LD_INT 3
35412: DOUBLE
35413: EQUAL
35414: IFTRUE 35418
35416: GO 35448
35418: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35419: LD_ADDR_VAR 0 3
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: LD_INT 5
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
35446: GO 36413
35448: LD_INT 11
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35456
35454: GO 35486
35456: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: LD_INT 4
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
35484: GO 36413
35486: LD_INT 4
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35494
35492: GO 35520
35494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35495: LD_ADDR_VAR 0 3
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 4
35508: PUSH
35509: LD_INT 5
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: ST_TO_ADDR
35518: GO 36413
35520: LD_INT 5
35522: DOUBLE
35523: EQUAL
35524: IFTRUE 35528
35526: GO 35554
35528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35529: LD_ADDR_VAR 0 3
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: LD_INT 4
35542: PUSH
35543: LD_INT 5
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: ST_TO_ADDR
35552: GO 36413
35554: LD_INT 9
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35588
35562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 4
35576: PUSH
35577: LD_INT 5
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
35586: GO 36413
35588: LD_INT 7
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35596
35594: GO 35622
35596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35597: LD_ADDR_VAR 0 3
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: LD_INT 5
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
35620: GO 36413
35622: LD_INT 12
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35630
35628: GO 35656
35630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35631: LD_ADDR_VAR 0 3
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 4
35644: PUSH
35645: LD_INT 5
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: ST_TO_ADDR
35654: GO 36413
35656: LD_INT 13
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35664
35662: GO 35690
35664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: LD_INT 4
35678: PUSH
35679: LD_INT 5
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: ST_TO_ADDR
35688: GO 36413
35690: LD_INT 14
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35698
35696: GO 35716
35698: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35699: LD_ADDR_VAR 0 3
35703: PUSH
35704: LD_INT 4
35706: PUSH
35707: LD_INT 5
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: ST_TO_ADDR
35714: GO 36413
35716: LD_INT 6
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35724
35722: GO 35742
35724: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: LD_INT 4
35732: PUSH
35733: LD_INT 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: ST_TO_ADDR
35740: GO 36413
35742: LD_INT 10
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35768
35750: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 5
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: ST_TO_ADDR
35766: GO 36413
35768: LD_INT 22
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35802
35776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 11
35784: PUSH
35785: LD_INT 12
35787: PUSH
35788: LD_INT 13
35790: PUSH
35791: LD_INT 14
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: ST_TO_ADDR
35800: GO 36413
35802: LD_INT 23
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35810
35808: GO 35836
35810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_INT 11
35818: PUSH
35819: LD_INT 12
35821: PUSH
35822: LD_INT 13
35824: PUSH
35825: LD_INT 14
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: ST_TO_ADDR
35834: GO 36413
35836: LD_INT 24
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35844
35842: GO 35870
35844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_INT 11
35852: PUSH
35853: LD_INT 12
35855: PUSH
35856: LD_INT 13
35858: PUSH
35859: LD_INT 14
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
35868: GO 36413
35870: LD_INT 30
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 35904
35878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_INT 11
35886: PUSH
35887: LD_INT 12
35889: PUSH
35890: LD_INT 13
35892: PUSH
35893: LD_INT 14
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
35902: GO 36413
35904: LD_INT 25
35906: DOUBLE
35907: EQUAL
35908: IFTRUE 35912
35910: GO 35930
35912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_INT 13
35920: PUSH
35921: LD_INT 14
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: ST_TO_ADDR
35928: GO 36413
35930: LD_INT 27
35932: DOUBLE
35933: EQUAL
35934: IFTRUE 35938
35936: GO 35956
35938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35939: LD_ADDR_VAR 0 3
35943: PUSH
35944: LD_INT 13
35946: PUSH
35947: LD_INT 14
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: ST_TO_ADDR
35954: GO 36413
35956: LD_EXP 129
35960: DOUBLE
35961: EQUAL
35962: IFTRUE 35966
35964: GO 35992
35966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35967: LD_ADDR_VAR 0 3
35971: PUSH
35972: LD_INT 11
35974: PUSH
35975: LD_INT 12
35977: PUSH
35978: LD_INT 13
35980: PUSH
35981: LD_INT 14
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: ST_TO_ADDR
35990: GO 36413
35992: LD_INT 28
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36018
36000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_INT 13
36008: PUSH
36009: LD_INT 14
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: ST_TO_ADDR
36016: GO 36413
36018: LD_INT 29
36020: DOUBLE
36021: EQUAL
36022: IFTRUE 36026
36024: GO 36044
36026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36027: LD_ADDR_VAR 0 3
36031: PUSH
36032: LD_INT 13
36034: PUSH
36035: LD_INT 14
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: ST_TO_ADDR
36042: GO 36413
36044: LD_INT 31
36046: DOUBLE
36047: EQUAL
36048: IFTRUE 36052
36050: GO 36070
36052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36053: LD_ADDR_VAR 0 3
36057: PUSH
36058: LD_INT 13
36060: PUSH
36061: LD_INT 14
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: ST_TO_ADDR
36068: GO 36413
36070: LD_INT 26
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36096
36078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: LD_INT 13
36086: PUSH
36087: LD_INT 14
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: ST_TO_ADDR
36094: GO 36413
36096: LD_INT 42
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36104
36102: GO 36130
36104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36105: LD_ADDR_VAR 0 3
36109: PUSH
36110: LD_INT 21
36112: PUSH
36113: LD_INT 22
36115: PUSH
36116: LD_INT 23
36118: PUSH
36119: LD_INT 24
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
36128: GO 36413
36130: LD_INT 43
36132: DOUBLE
36133: EQUAL
36134: IFTRUE 36138
36136: GO 36164
36138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36139: LD_ADDR_VAR 0 3
36143: PUSH
36144: LD_INT 21
36146: PUSH
36147: LD_INT 22
36149: PUSH
36150: LD_INT 23
36152: PUSH
36153: LD_INT 24
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: ST_TO_ADDR
36162: GO 36413
36164: LD_INT 44
36166: DOUBLE
36167: EQUAL
36168: IFTRUE 36172
36170: GO 36198
36172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_INT 21
36180: PUSH
36181: LD_INT 22
36183: PUSH
36184: LD_INT 23
36186: PUSH
36187: LD_INT 24
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
36196: GO 36413
36198: LD_INT 45
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36206
36204: GO 36232
36206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36207: LD_ADDR_VAR 0 3
36211: PUSH
36212: LD_INT 21
36214: PUSH
36215: LD_INT 22
36217: PUSH
36218: LD_INT 23
36220: PUSH
36221: LD_INT 24
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: ST_TO_ADDR
36230: GO 36413
36232: LD_INT 49
36234: DOUBLE
36235: EQUAL
36236: IFTRUE 36240
36238: GO 36266
36240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_INT 21
36248: PUSH
36249: LD_INT 22
36251: PUSH
36252: LD_INT 23
36254: PUSH
36255: LD_INT 24
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: ST_TO_ADDR
36264: GO 36413
36266: LD_INT 51
36268: DOUBLE
36269: EQUAL
36270: IFTRUE 36274
36272: GO 36300
36274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36275: LD_ADDR_VAR 0 3
36279: PUSH
36280: LD_INT 21
36282: PUSH
36283: LD_INT 22
36285: PUSH
36286: LD_INT 23
36288: PUSH
36289: LD_INT 24
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
36298: GO 36413
36300: LD_INT 52
36302: DOUBLE
36303: EQUAL
36304: IFTRUE 36308
36306: GO 36334
36308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: LD_INT 21
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_INT 23
36322: PUSH
36323: LD_INT 24
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
36332: GO 36413
36334: LD_INT 53
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36342
36340: GO 36360
36342: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: LD_INT 23
36350: PUSH
36351: LD_INT 24
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: ST_TO_ADDR
36358: GO 36413
36360: LD_INT 46
36362: DOUBLE
36363: EQUAL
36364: IFTRUE 36368
36366: GO 36386
36368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36369: LD_ADDR_VAR 0 3
36373: PUSH
36374: LD_INT 23
36376: PUSH
36377: LD_INT 24
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: ST_TO_ADDR
36384: GO 36413
36386: LD_INT 47
36388: DOUBLE
36389: EQUAL
36390: IFTRUE 36394
36392: GO 36412
36394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36395: LD_ADDR_VAR 0 3
36399: PUSH
36400: LD_INT 23
36402: PUSH
36403: LD_INT 24
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: ST_TO_ADDR
36410: GO 36413
36412: POP
// result := ( chassis in result ) ;
36413: LD_ADDR_VAR 0 3
36417: PUSH
36418: LD_VAR 0 1
36422: PUSH
36423: LD_VAR 0 3
36427: IN
36428: ST_TO_ADDR
// end ;
36429: LD_VAR 0 3
36433: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
// result := array ;
36443: LD_ADDR_VAR 0 5
36447: PUSH
36448: LD_VAR 0 1
36452: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36453: LD_VAR 0 1
36457: NOT
36458: PUSH
36459: LD_VAR 0 2
36463: NOT
36464: OR
36465: PUSH
36466: LD_VAR 0 3
36470: NOT
36471: OR
36472: PUSH
36473: LD_VAR 0 2
36477: PUSH
36478: LD_VAR 0 1
36482: GREATER
36483: OR
36484: PUSH
36485: LD_VAR 0 3
36489: PUSH
36490: LD_VAR 0 1
36494: GREATER
36495: OR
36496: IFFALSE 36500
// exit ;
36498: GO 36796
// if direction then
36500: LD_VAR 0 4
36504: IFFALSE 36568
// begin d := 1 ;
36506: LD_ADDR_VAR 0 9
36510: PUSH
36511: LD_INT 1
36513: ST_TO_ADDR
// if i_from > i_to then
36514: LD_VAR 0 2
36518: PUSH
36519: LD_VAR 0 3
36523: GREATER
36524: IFFALSE 36550
// length := ( array - i_from ) + i_to else
36526: LD_ADDR_VAR 0 11
36530: PUSH
36531: LD_VAR 0 1
36535: PUSH
36536: LD_VAR 0 2
36540: MINUS
36541: PUSH
36542: LD_VAR 0 3
36546: PLUS
36547: ST_TO_ADDR
36548: GO 36566
// length := i_to - i_from ;
36550: LD_ADDR_VAR 0 11
36554: PUSH
36555: LD_VAR 0 3
36559: PUSH
36560: LD_VAR 0 2
36564: MINUS
36565: ST_TO_ADDR
// end else
36566: GO 36629
// begin d := - 1 ;
36568: LD_ADDR_VAR 0 9
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: ST_TO_ADDR
// if i_from > i_to then
36577: LD_VAR 0 2
36581: PUSH
36582: LD_VAR 0 3
36586: GREATER
36587: IFFALSE 36607
// length := i_from - i_to else
36589: LD_ADDR_VAR 0 11
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: LD_VAR 0 3
36603: MINUS
36604: ST_TO_ADDR
36605: GO 36629
// length := ( array - i_to ) + i_from ;
36607: LD_ADDR_VAR 0 11
36611: PUSH
36612: LD_VAR 0 1
36616: PUSH
36617: LD_VAR 0 3
36621: MINUS
36622: PUSH
36623: LD_VAR 0 2
36627: PLUS
36628: ST_TO_ADDR
// end ; if not length then
36629: LD_VAR 0 11
36633: NOT
36634: IFFALSE 36638
// exit ;
36636: GO 36796
// tmp := array ;
36638: LD_ADDR_VAR 0 10
36642: PUSH
36643: LD_VAR 0 1
36647: ST_TO_ADDR
// for i = 1 to length do
36648: LD_ADDR_VAR 0 6
36652: PUSH
36653: DOUBLE
36654: LD_INT 1
36656: DEC
36657: ST_TO_ADDR
36658: LD_VAR 0 11
36662: PUSH
36663: FOR_TO
36664: IFFALSE 36784
// begin for j = 1 to array do
36666: LD_ADDR_VAR 0 7
36670: PUSH
36671: DOUBLE
36672: LD_INT 1
36674: DEC
36675: ST_TO_ADDR
36676: LD_VAR 0 1
36680: PUSH
36681: FOR_TO
36682: IFFALSE 36770
// begin k := j + d ;
36684: LD_ADDR_VAR 0 8
36688: PUSH
36689: LD_VAR 0 7
36693: PUSH
36694: LD_VAR 0 9
36698: PLUS
36699: ST_TO_ADDR
// if k > array then
36700: LD_VAR 0 8
36704: PUSH
36705: LD_VAR 0 1
36709: GREATER
36710: IFFALSE 36720
// k := 1 ;
36712: LD_ADDR_VAR 0 8
36716: PUSH
36717: LD_INT 1
36719: ST_TO_ADDR
// if not k then
36720: LD_VAR 0 8
36724: NOT
36725: IFFALSE 36737
// k := array ;
36727: LD_ADDR_VAR 0 8
36731: PUSH
36732: LD_VAR 0 1
36736: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36737: LD_ADDR_VAR 0 10
36741: PUSH
36742: LD_VAR 0 10
36746: PPUSH
36747: LD_VAR 0 8
36751: PPUSH
36752: LD_VAR 0 1
36756: PUSH
36757: LD_VAR 0 7
36761: ARRAY
36762: PPUSH
36763: CALL_OW 1
36767: ST_TO_ADDR
// end ;
36768: GO 36681
36770: POP
36771: POP
// array := tmp ;
36772: LD_ADDR_VAR 0 1
36776: PUSH
36777: LD_VAR 0 10
36781: ST_TO_ADDR
// end ;
36782: GO 36663
36784: POP
36785: POP
// result := array ;
36786: LD_ADDR_VAR 0 5
36790: PUSH
36791: LD_VAR 0 1
36795: ST_TO_ADDR
// end ;
36796: LD_VAR 0 5
36800: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
// result := 0 ;
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_INT 0
36812: ST_TO_ADDR
// if not array or not value in array then
36813: LD_VAR 0 1
36817: NOT
36818: PUSH
36819: LD_VAR 0 2
36823: PUSH
36824: LD_VAR 0 1
36828: IN
36829: NOT
36830: OR
36831: IFFALSE 36835
// exit ;
36833: GO 36889
// for i = 1 to array do
36835: LD_ADDR_VAR 0 4
36839: PUSH
36840: DOUBLE
36841: LD_INT 1
36843: DEC
36844: ST_TO_ADDR
36845: LD_VAR 0 1
36849: PUSH
36850: FOR_TO
36851: IFFALSE 36887
// if value = array [ i ] then
36853: LD_VAR 0 2
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_VAR 0 4
36867: ARRAY
36868: EQUAL
36869: IFFALSE 36885
// begin result := i ;
36871: LD_ADDR_VAR 0 3
36875: PUSH
36876: LD_VAR 0 4
36880: ST_TO_ADDR
// exit ;
36881: POP
36882: POP
36883: GO 36889
// end ;
36885: GO 36850
36887: POP
36888: POP
// end ;
36889: LD_VAR 0 3
36893: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36894: LD_INT 0
36896: PPUSH
// vc_chassis := chassis ;
36897: LD_ADDR_OWVAR 37
36901: PUSH
36902: LD_VAR 0 1
36906: ST_TO_ADDR
// vc_engine := engine ;
36907: LD_ADDR_OWVAR 39
36911: PUSH
36912: LD_VAR 0 2
36916: ST_TO_ADDR
// vc_control := control ;
36917: LD_ADDR_OWVAR 38
36921: PUSH
36922: LD_VAR 0 3
36926: ST_TO_ADDR
// vc_weapon := weapon ;
36927: LD_ADDR_OWVAR 40
36931: PUSH
36932: LD_VAR 0 4
36936: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36937: LD_ADDR_OWVAR 41
36941: PUSH
36942: LD_VAR 0 5
36946: ST_TO_ADDR
// end ;
36947: LD_VAR 0 6
36951: RET
// export function WantPlant ( unit ) ; var task ; begin
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
// result := false ;
36956: LD_ADDR_VAR 0 2
36960: PUSH
36961: LD_INT 0
36963: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36964: LD_ADDR_VAR 0 3
36968: PUSH
36969: LD_VAR 0 1
36973: PPUSH
36974: CALL_OW 437
36978: ST_TO_ADDR
// if task then
36979: LD_VAR 0 3
36983: IFFALSE 37011
// if task [ 1 ] [ 1 ] = p then
36985: LD_VAR 0 3
36989: PUSH
36990: LD_INT 1
36992: ARRAY
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: PUSH
36998: LD_STRING p
37000: EQUAL
37001: IFFALSE 37011
// result := true ;
37003: LD_ADDR_VAR 0 2
37007: PUSH
37008: LD_INT 1
37010: ST_TO_ADDR
// end ;
37011: LD_VAR 0 2
37015: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37016: LD_INT 0
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
// if pos < 1 then
37022: LD_VAR 0 2
37026: PUSH
37027: LD_INT 1
37029: LESS
37030: IFFALSE 37034
// exit ;
37032: GO 37337
// if pos = 1 then
37034: LD_VAR 0 2
37038: PUSH
37039: LD_INT 1
37041: EQUAL
37042: IFFALSE 37075
// result := Replace ( arr , pos [ 1 ] , value ) else
37044: LD_ADDR_VAR 0 4
37048: PUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: LD_VAR 0 2
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PPUSH
37063: LD_VAR 0 3
37067: PPUSH
37068: CALL_OW 1
37072: ST_TO_ADDR
37073: GO 37337
// begin tmp := arr ;
37075: LD_ADDR_VAR 0 6
37079: PUSH
37080: LD_VAR 0 1
37084: ST_TO_ADDR
// s_arr := [ tmp ] ;
37085: LD_ADDR_VAR 0 7
37089: PUSH
37090: LD_VAR 0 6
37094: PUSH
37095: EMPTY
37096: LIST
37097: ST_TO_ADDR
// for i = 1 to pos - 1 do
37098: LD_ADDR_VAR 0 5
37102: PUSH
37103: DOUBLE
37104: LD_INT 1
37106: DEC
37107: ST_TO_ADDR
37108: LD_VAR 0 2
37112: PUSH
37113: LD_INT 1
37115: MINUS
37116: PUSH
37117: FOR_TO
37118: IFFALSE 37163
// begin tmp := tmp [ pos [ i ] ] ;
37120: LD_ADDR_VAR 0 6
37124: PUSH
37125: LD_VAR 0 6
37129: PUSH
37130: LD_VAR 0 2
37134: PUSH
37135: LD_VAR 0 5
37139: ARRAY
37140: ARRAY
37141: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37142: LD_ADDR_VAR 0 7
37146: PUSH
37147: LD_VAR 0 7
37151: PUSH
37152: LD_VAR 0 6
37156: PUSH
37157: EMPTY
37158: LIST
37159: ADD
37160: ST_TO_ADDR
// end ;
37161: GO 37117
37163: POP
37164: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37165: LD_ADDR_VAR 0 6
37169: PUSH
37170: LD_VAR 0 6
37174: PPUSH
37175: LD_VAR 0 2
37179: PUSH
37180: LD_VAR 0 2
37184: ARRAY
37185: PPUSH
37186: LD_VAR 0 3
37190: PPUSH
37191: CALL_OW 1
37195: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37196: LD_ADDR_VAR 0 7
37200: PUSH
37201: LD_VAR 0 7
37205: PPUSH
37206: LD_VAR 0 7
37210: PPUSH
37211: LD_VAR 0 6
37215: PPUSH
37216: CALL_OW 1
37220: ST_TO_ADDR
// for i = s_arr downto 2 do
37221: LD_ADDR_VAR 0 5
37225: PUSH
37226: DOUBLE
37227: LD_VAR 0 7
37231: INC
37232: ST_TO_ADDR
37233: LD_INT 2
37235: PUSH
37236: FOR_DOWNTO
37237: IFFALSE 37321
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37239: LD_ADDR_VAR 0 6
37243: PUSH
37244: LD_VAR 0 7
37248: PUSH
37249: LD_VAR 0 5
37253: PUSH
37254: LD_INT 1
37256: MINUS
37257: ARRAY
37258: PPUSH
37259: LD_VAR 0 2
37263: PUSH
37264: LD_VAR 0 5
37268: PUSH
37269: LD_INT 1
37271: MINUS
37272: ARRAY
37273: PPUSH
37274: LD_VAR 0 7
37278: PUSH
37279: LD_VAR 0 5
37283: ARRAY
37284: PPUSH
37285: CALL_OW 1
37289: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37290: LD_ADDR_VAR 0 7
37294: PUSH
37295: LD_VAR 0 7
37299: PPUSH
37300: LD_VAR 0 5
37304: PUSH
37305: LD_INT 1
37307: MINUS
37308: PPUSH
37309: LD_VAR 0 6
37313: PPUSH
37314: CALL_OW 1
37318: ST_TO_ADDR
// end ;
37319: GO 37236
37321: POP
37322: POP
// result := s_arr [ 1 ] ;
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_VAR 0 7
37332: PUSH
37333: LD_INT 1
37335: ARRAY
37336: ST_TO_ADDR
// end ; end ;
37337: LD_VAR 0 4
37341: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37342: LD_INT 0
37344: PPUSH
37345: PPUSH
// if not list then
37346: LD_VAR 0 1
37350: NOT
37351: IFFALSE 37355
// exit ;
37353: GO 37446
// i := list [ pos1 ] ;
37355: LD_ADDR_VAR 0 5
37359: PUSH
37360: LD_VAR 0 1
37364: PUSH
37365: LD_VAR 0 2
37369: ARRAY
37370: ST_TO_ADDR
// if not i then
37371: LD_VAR 0 5
37375: NOT
37376: IFFALSE 37380
// exit ;
37378: GO 37446
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37380: LD_ADDR_VAR 0 1
37384: PUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: LD_VAR 0 2
37394: PPUSH
37395: LD_VAR 0 1
37399: PUSH
37400: LD_VAR 0 3
37404: ARRAY
37405: PPUSH
37406: CALL_OW 1
37410: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37411: LD_ADDR_VAR 0 1
37415: PUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_VAR 0 3
37425: PPUSH
37426: LD_VAR 0 5
37430: PPUSH
37431: CALL_OW 1
37435: ST_TO_ADDR
// result := list ;
37436: LD_ADDR_VAR 0 4
37440: PUSH
37441: LD_VAR 0 1
37445: ST_TO_ADDR
// end ;
37446: LD_VAR 0 4
37450: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37451: LD_INT 0
37453: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37454: LD_ADDR_VAR 0 5
37458: PUSH
37459: LD_VAR 0 1
37463: PPUSH
37464: CALL_OW 250
37468: PPUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 251
37478: PPUSH
37479: LD_VAR 0 2
37483: PPUSH
37484: LD_VAR 0 3
37488: PPUSH
37489: LD_VAR 0 4
37493: PPUSH
37494: CALL 37504 0 5
37498: ST_TO_ADDR
// end ;
37499: LD_VAR 0 5
37503: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37504: LD_INT 0
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
// if not list then
37510: LD_VAR 0 3
37514: NOT
37515: IFFALSE 37519
// exit ;
37517: GO 37907
// result := [ ] ;
37519: LD_ADDR_VAR 0 6
37523: PUSH
37524: EMPTY
37525: ST_TO_ADDR
// for i in list do
37526: LD_ADDR_VAR 0 7
37530: PUSH
37531: LD_VAR 0 3
37535: PUSH
37536: FOR_IN
37537: IFFALSE 37739
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37539: LD_ADDR_VAR 0 9
37543: PUSH
37544: LD_VAR 0 7
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: LD_VAR 0 2
37558: PPUSH
37559: CALL_OW 297
37563: ST_TO_ADDR
// if not result then
37564: LD_VAR 0 6
37568: NOT
37569: IFFALSE 37595
// result := [ [ i , tmp ] ] else
37571: LD_ADDR_VAR 0 6
37575: PUSH
37576: LD_VAR 0 7
37580: PUSH
37581: LD_VAR 0 9
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: ST_TO_ADDR
37593: GO 37737
// begin if result [ result ] [ 2 ] < tmp then
37595: LD_VAR 0 6
37599: PUSH
37600: LD_VAR 0 6
37604: ARRAY
37605: PUSH
37606: LD_INT 2
37608: ARRAY
37609: PUSH
37610: LD_VAR 0 9
37614: LESS
37615: IFFALSE 37657
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37617: LD_ADDR_VAR 0 6
37621: PUSH
37622: LD_VAR 0 6
37626: PPUSH
37627: LD_VAR 0 6
37631: PUSH
37632: LD_INT 1
37634: PLUS
37635: PPUSH
37636: LD_VAR 0 7
37640: PUSH
37641: LD_VAR 0 9
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PPUSH
37650: CALL_OW 2
37654: ST_TO_ADDR
37655: GO 37737
// for j = 1 to result do
37657: LD_ADDR_VAR 0 8
37661: PUSH
37662: DOUBLE
37663: LD_INT 1
37665: DEC
37666: ST_TO_ADDR
37667: LD_VAR 0 6
37671: PUSH
37672: FOR_TO
37673: IFFALSE 37735
// begin if tmp < result [ j ] [ 2 ] then
37675: LD_VAR 0 9
37679: PUSH
37680: LD_VAR 0 6
37684: PUSH
37685: LD_VAR 0 8
37689: ARRAY
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: LESS
37695: IFFALSE 37733
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37697: LD_ADDR_VAR 0 6
37701: PUSH
37702: LD_VAR 0 6
37706: PPUSH
37707: LD_VAR 0 8
37711: PPUSH
37712: LD_VAR 0 7
37716: PUSH
37717: LD_VAR 0 9
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PPUSH
37726: CALL_OW 2
37730: ST_TO_ADDR
// break ;
37731: GO 37735
// end ; end ;
37733: GO 37672
37735: POP
37736: POP
// end ; end ;
37737: GO 37536
37739: POP
37740: POP
// if result and not asc then
37741: LD_VAR 0 6
37745: PUSH
37746: LD_VAR 0 4
37750: NOT
37751: AND
37752: IFFALSE 37827
// begin tmp := result ;
37754: LD_ADDR_VAR 0 9
37758: PUSH
37759: LD_VAR 0 6
37763: ST_TO_ADDR
// for i = tmp downto 1 do
37764: LD_ADDR_VAR 0 7
37768: PUSH
37769: DOUBLE
37770: LD_VAR 0 9
37774: INC
37775: ST_TO_ADDR
37776: LD_INT 1
37778: PUSH
37779: FOR_DOWNTO
37780: IFFALSE 37825
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37782: LD_ADDR_VAR 0 6
37786: PUSH
37787: LD_VAR 0 6
37791: PPUSH
37792: LD_VAR 0 9
37796: PUSH
37797: LD_VAR 0 7
37801: MINUS
37802: PUSH
37803: LD_INT 1
37805: PLUS
37806: PPUSH
37807: LD_VAR 0 9
37811: PUSH
37812: LD_VAR 0 7
37816: ARRAY
37817: PPUSH
37818: CALL_OW 1
37822: ST_TO_ADDR
37823: GO 37779
37825: POP
37826: POP
// end ; tmp := [ ] ;
37827: LD_ADDR_VAR 0 9
37831: PUSH
37832: EMPTY
37833: ST_TO_ADDR
// if mode then
37834: LD_VAR 0 5
37838: IFFALSE 37907
// begin for i = 1 to result do
37840: LD_ADDR_VAR 0 7
37844: PUSH
37845: DOUBLE
37846: LD_INT 1
37848: DEC
37849: ST_TO_ADDR
37850: LD_VAR 0 6
37854: PUSH
37855: FOR_TO
37856: IFFALSE 37895
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37858: LD_ADDR_VAR 0 9
37862: PUSH
37863: LD_VAR 0 9
37867: PPUSH
37868: LD_VAR 0 7
37872: PPUSH
37873: LD_VAR 0 6
37877: PUSH
37878: LD_VAR 0 7
37882: ARRAY
37883: PUSH
37884: LD_INT 1
37886: ARRAY
37887: PPUSH
37888: CALL_OW 1
37892: ST_TO_ADDR
37893: GO 37855
37895: POP
37896: POP
// result := tmp ;
37897: LD_ADDR_VAR 0 6
37901: PUSH
37902: LD_VAR 0 9
37906: ST_TO_ADDR
// end ; end ;
37907: LD_VAR 0 6
37911: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37912: LD_INT 0
37914: PPUSH
37915: PPUSH
37916: PPUSH
37917: PPUSH
37918: PPUSH
37919: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37920: LD_ADDR_VAR 0 5
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: ST_TO_ADDR
// if not x or not y then
37942: LD_VAR 0 2
37946: NOT
37947: PUSH
37948: LD_VAR 0 3
37952: NOT
37953: OR
37954: IFFALSE 37958
// exit ;
37956: GO 39610
// if not range then
37958: LD_VAR 0 4
37962: NOT
37963: IFFALSE 37973
// range := 10 ;
37965: LD_ADDR_VAR 0 4
37969: PUSH
37970: LD_INT 10
37972: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37973: LD_ADDR_VAR 0 8
37977: PUSH
37978: LD_INT 81
37980: PUSH
37981: LD_VAR 0 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 92
37992: PUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_VAR 0 3
38002: PUSH
38003: LD_VAR 0 4
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 3
38016: PUSH
38017: LD_INT 21
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: PPUSH
38036: CALL_OW 69
38040: ST_TO_ADDR
// if not tmp then
38041: LD_VAR 0 8
38045: NOT
38046: IFFALSE 38050
// exit ;
38048: GO 39610
// for i in tmp do
38050: LD_ADDR_VAR 0 6
38054: PUSH
38055: LD_VAR 0 8
38059: PUSH
38060: FOR_IN
38061: IFFALSE 39585
// begin points := [ 0 , 0 , 0 ] ;
38063: LD_ADDR_VAR 0 9
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// bpoints := 1 ;
38082: LD_ADDR_VAR 0 10
38086: PUSH
38087: LD_INT 1
38089: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38090: LD_VAR 0 6
38094: PPUSH
38095: CALL_OW 247
38099: PUSH
38100: LD_INT 1
38102: DOUBLE
38103: EQUAL
38104: IFTRUE 38108
38106: GO 38686
38108: POP
// begin if GetClass ( i ) = 1 then
38109: LD_VAR 0 6
38113: PPUSH
38114: CALL_OW 257
38118: PUSH
38119: LD_INT 1
38121: EQUAL
38122: IFFALSE 38143
// points := [ 10 , 5 , 3 ] ;
38124: LD_ADDR_VAR 0 9
38128: PUSH
38129: LD_INT 10
38131: PUSH
38132: LD_INT 5
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38143: LD_VAR 0 6
38147: PPUSH
38148: CALL_OW 257
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 4
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: IN
38167: IFFALSE 38188
// points := [ 3 , 2 , 1 ] ;
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_INT 3
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 257
38197: PUSH
38198: LD_INT 5
38200: EQUAL
38201: IFFALSE 38222
// points := [ 130 , 5 , 2 ] ;
38203: LD_ADDR_VAR 0 9
38207: PUSH
38208: LD_INT 130
38210: PUSH
38211: LD_INT 5
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38222: LD_VAR 0 6
38226: PPUSH
38227: CALL_OW 257
38231: PUSH
38232: LD_INT 8
38234: EQUAL
38235: IFFALSE 38256
// points := [ 35 , 35 , 30 ] ;
38237: LD_ADDR_VAR 0 9
38241: PUSH
38242: LD_INT 35
38244: PUSH
38245: LD_INT 35
38247: PUSH
38248: LD_INT 30
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38256: LD_VAR 0 6
38260: PPUSH
38261: CALL_OW 257
38265: PUSH
38266: LD_INT 9
38268: EQUAL
38269: IFFALSE 38290
// points := [ 20 , 55 , 40 ] ;
38271: LD_ADDR_VAR 0 9
38275: PUSH
38276: LD_INT 20
38278: PUSH
38279: LD_INT 55
38281: PUSH
38282: LD_INT 40
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38290: LD_VAR 0 6
38294: PPUSH
38295: CALL_OW 257
38299: PUSH
38300: LD_INT 12
38302: PUSH
38303: LD_INT 16
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: IN
38310: IFFALSE 38331
// points := [ 5 , 3 , 2 ] ;
38312: LD_ADDR_VAR 0 9
38316: PUSH
38317: LD_INT 5
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38331: LD_VAR 0 6
38335: PPUSH
38336: CALL_OW 257
38340: PUSH
38341: LD_INT 17
38343: EQUAL
38344: IFFALSE 38365
// points := [ 100 , 50 , 75 ] ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 100
38353: PUSH
38354: LD_INT 50
38356: PUSH
38357: LD_INT 75
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 257
38374: PUSH
38375: LD_INT 15
38377: EQUAL
38378: IFFALSE 38399
// points := [ 10 , 5 , 3 ] ;
38380: LD_ADDR_VAR 0 9
38384: PUSH
38385: LD_INT 10
38387: PUSH
38388: LD_INT 5
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38399: LD_VAR 0 6
38403: PPUSH
38404: CALL_OW 257
38408: PUSH
38409: LD_INT 14
38411: EQUAL
38412: IFFALSE 38433
// points := [ 10 , 0 , 0 ] ;
38414: LD_ADDR_VAR 0 9
38418: PUSH
38419: LD_INT 10
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38433: LD_VAR 0 6
38437: PPUSH
38438: CALL_OW 257
38442: PUSH
38443: LD_INT 11
38445: EQUAL
38446: IFFALSE 38467
// points := [ 30 , 10 , 5 ] ;
38448: LD_ADDR_VAR 0 9
38452: PUSH
38453: LD_INT 30
38455: PUSH
38456: LD_INT 10
38458: PUSH
38459: LD_INT 5
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38467: LD_VAR 0 1
38471: PPUSH
38472: LD_INT 5
38474: PPUSH
38475: CALL_OW 321
38479: PUSH
38480: LD_INT 2
38482: EQUAL
38483: IFFALSE 38500
// bpoints := bpoints * 1.8 ;
38485: LD_ADDR_VAR 0 10
38489: PUSH
38490: LD_VAR 0 10
38494: PUSH
38495: LD_REAL  1.80000000000000E+0000
38498: MUL
38499: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38500: LD_VAR 0 6
38504: PPUSH
38505: CALL_OW 257
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: IN
38528: PUSH
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_INT 51
38536: PPUSH
38537: CALL_OW 321
38541: PUSH
38542: LD_INT 2
38544: EQUAL
38545: AND
38546: IFFALSE 38563
// bpoints := bpoints * 1.2 ;
38548: LD_ADDR_VAR 0 10
38552: PUSH
38553: LD_VAR 0 10
38557: PUSH
38558: LD_REAL  1.20000000000000E+0000
38561: MUL
38562: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 257
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: LD_INT 7
38578: PUSH
38579: LD_INT 9
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: IN
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: LD_INT 52
38595: PPUSH
38596: CALL_OW 321
38600: PUSH
38601: LD_INT 2
38603: EQUAL
38604: AND
38605: IFFALSE 38622
// bpoints := bpoints * 1.5 ;
38607: LD_ADDR_VAR 0 10
38611: PUSH
38612: LD_VAR 0 10
38616: PUSH
38617: LD_REAL  1.50000000000000E+0000
38620: MUL
38621: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38622: LD_VAR 0 1
38626: PPUSH
38627: LD_INT 66
38629: PPUSH
38630: CALL_OW 321
38634: PUSH
38635: LD_INT 2
38637: EQUAL
38638: IFFALSE 38655
// bpoints := bpoints * 1.1 ;
38640: LD_ADDR_VAR 0 10
38644: PUSH
38645: LD_VAR 0 10
38649: PUSH
38650: LD_REAL  1.10000000000000E+0000
38653: MUL
38654: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38655: LD_ADDR_VAR 0 10
38659: PUSH
38660: LD_VAR 0 10
38664: PUSH
38665: LD_VAR 0 6
38669: PPUSH
38670: LD_INT 1
38672: PPUSH
38673: CALL_OW 259
38677: PUSH
38678: LD_REAL  1.15000000000000E+0000
38681: MUL
38682: MUL
38683: ST_TO_ADDR
// end ; unit_vehicle :
38684: GO 39514
38686: LD_INT 2
38688: DOUBLE
38689: EQUAL
38690: IFTRUE 38694
38692: GO 39502
38694: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38695: LD_VAR 0 6
38699: PPUSH
38700: CALL_OW 264
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 42
38710: PUSH
38711: LD_INT 24
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: IN
38719: IFFALSE 38740
// points := [ 25 , 5 , 3 ] ;
38721: LD_ADDR_VAR 0 9
38725: PUSH
38726: LD_INT 25
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38740: LD_VAR 0 6
38744: PPUSH
38745: CALL_OW 264
38749: PUSH
38750: LD_INT 4
38752: PUSH
38753: LD_INT 43
38755: PUSH
38756: LD_INT 25
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: IN
38764: IFFALSE 38785
// points := [ 40 , 15 , 5 ] ;
38766: LD_ADDR_VAR 0 9
38770: PUSH
38771: LD_INT 40
38773: PUSH
38774: LD_INT 15
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38785: LD_VAR 0 6
38789: PPUSH
38790: CALL_OW 264
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: LD_INT 23
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: IN
38805: IFFALSE 38826
// points := [ 7 , 25 , 8 ] ;
38807: LD_ADDR_VAR 0 9
38811: PUSH
38812: LD_INT 7
38814: PUSH
38815: LD_INT 25
38817: PUSH
38818: LD_INT 8
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38826: LD_VAR 0 6
38830: PPUSH
38831: CALL_OW 264
38835: PUSH
38836: LD_INT 5
38838: PUSH
38839: LD_INT 27
38841: PUSH
38842: LD_INT 44
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: IN
38850: IFFALSE 38871
// points := [ 14 , 50 , 16 ] ;
38852: LD_ADDR_VAR 0 9
38856: PUSH
38857: LD_INT 14
38859: PUSH
38860: LD_INT 50
38862: PUSH
38863: LD_INT 16
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38871: LD_VAR 0 6
38875: PPUSH
38876: CALL_OW 264
38880: PUSH
38881: LD_INT 6
38883: PUSH
38884: LD_INT 46
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: IN
38891: IFFALSE 38912
// points := [ 32 , 120 , 70 ] ;
38893: LD_ADDR_VAR 0 9
38897: PUSH
38898: LD_INT 32
38900: PUSH
38901: LD_INT 120
38903: PUSH
38904: LD_INT 70
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38912: LD_VAR 0 6
38916: PPUSH
38917: CALL_OW 264
38921: PUSH
38922: LD_INT 7
38924: PUSH
38925: LD_INT 28
38927: PUSH
38928: LD_INT 45
38930: PUSH
38931: LD_EXP 129
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: IN
38942: IFFALSE 38963
// points := [ 35 , 20 , 45 ] ;
38944: LD_ADDR_VAR 0 9
38948: PUSH
38949: LD_INT 35
38951: PUSH
38952: LD_INT 20
38954: PUSH
38955: LD_INT 45
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38963: LD_VAR 0 6
38967: PPUSH
38968: CALL_OW 264
38972: PUSH
38973: LD_INT 47
38975: PUSH
38976: EMPTY
38977: LIST
38978: IN
38979: IFFALSE 39000
// points := [ 67 , 45 , 75 ] ;
38981: LD_ADDR_VAR 0 9
38985: PUSH
38986: LD_INT 67
38988: PUSH
38989: LD_INT 45
38991: PUSH
38992: LD_INT 75
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39000: LD_VAR 0 6
39004: PPUSH
39005: CALL_OW 264
39009: PUSH
39010: LD_INT 26
39012: PUSH
39013: EMPTY
39014: LIST
39015: IN
39016: IFFALSE 39037
// points := [ 120 , 30 , 80 ] ;
39018: LD_ADDR_VAR 0 9
39022: PUSH
39023: LD_INT 120
39025: PUSH
39026: LD_INT 30
39028: PUSH
39029: LD_INT 80
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39037: LD_VAR 0 6
39041: PPUSH
39042: CALL_OW 264
39046: PUSH
39047: LD_INT 22
39049: PUSH
39050: EMPTY
39051: LIST
39052: IN
39053: IFFALSE 39074
// points := [ 40 , 1 , 1 ] ;
39055: LD_ADDR_VAR 0 9
39059: PUSH
39060: LD_INT 40
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39074: LD_VAR 0 6
39078: PPUSH
39079: CALL_OW 264
39083: PUSH
39084: LD_INT 29
39086: PUSH
39087: EMPTY
39088: LIST
39089: IN
39090: IFFALSE 39111
// points := [ 70 , 200 , 400 ] ;
39092: LD_ADDR_VAR 0 9
39096: PUSH
39097: LD_INT 70
39099: PUSH
39100: LD_INT 200
39102: PUSH
39103: LD_INT 400
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39111: LD_VAR 0 6
39115: PPUSH
39116: CALL_OW 264
39120: PUSH
39121: LD_INT 14
39123: PUSH
39124: LD_INT 53
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: IN
39131: IFFALSE 39152
// points := [ 40 , 10 , 20 ] ;
39133: LD_ADDR_VAR 0 9
39137: PUSH
39138: LD_INT 40
39140: PUSH
39141: LD_INT 10
39143: PUSH
39144: LD_INT 20
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39152: LD_VAR 0 6
39156: PPUSH
39157: CALL_OW 264
39161: PUSH
39162: LD_INT 9
39164: PUSH
39165: EMPTY
39166: LIST
39167: IN
39168: IFFALSE 39189
// points := [ 5 , 70 , 20 ] ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_INT 5
39177: PUSH
39178: LD_INT 70
39180: PUSH
39181: LD_INT 20
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39189: LD_VAR 0 6
39193: PPUSH
39194: CALL_OW 264
39198: PUSH
39199: LD_INT 10
39201: PUSH
39202: EMPTY
39203: LIST
39204: IN
39205: IFFALSE 39226
// points := [ 35 , 110 , 70 ] ;
39207: LD_ADDR_VAR 0 9
39211: PUSH
39212: LD_INT 35
39214: PUSH
39215: LD_INT 110
39217: PUSH
39218: LD_INT 70
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39226: LD_VAR 0 6
39230: PPUSH
39231: CALL_OW 265
39235: PUSH
39236: LD_INT 25
39238: EQUAL
39239: IFFALSE 39260
// points := [ 80 , 65 , 100 ] ;
39241: LD_ADDR_VAR 0 9
39245: PUSH
39246: LD_INT 80
39248: PUSH
39249: LD_INT 65
39251: PUSH
39252: LD_INT 100
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39260: LD_VAR 0 6
39264: PPUSH
39265: CALL_OW 263
39269: PUSH
39270: LD_INT 1
39272: EQUAL
39273: IFFALSE 39308
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39275: LD_ADDR_VAR 0 10
39279: PUSH
39280: LD_VAR 0 10
39284: PUSH
39285: LD_VAR 0 6
39289: PPUSH
39290: CALL_OW 311
39294: PPUSH
39295: LD_INT 3
39297: PPUSH
39298: CALL_OW 259
39302: PUSH
39303: LD_INT 4
39305: MUL
39306: MUL
39307: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39308: LD_VAR 0 6
39312: PPUSH
39313: CALL_OW 263
39317: PUSH
39318: LD_INT 2
39320: EQUAL
39321: IFFALSE 39372
// begin j := IsControledBy ( i ) ;
39323: LD_ADDR_VAR 0 7
39327: PUSH
39328: LD_VAR 0 6
39332: PPUSH
39333: CALL_OW 312
39337: ST_TO_ADDR
// if j then
39338: LD_VAR 0 7
39342: IFFALSE 39372
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39344: LD_ADDR_VAR 0 10
39348: PUSH
39349: LD_VAR 0 10
39353: PUSH
39354: LD_VAR 0 7
39358: PPUSH
39359: LD_INT 3
39361: PPUSH
39362: CALL_OW 259
39366: PUSH
39367: LD_INT 3
39369: MUL
39370: MUL
39371: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39372: LD_VAR 0 6
39376: PPUSH
39377: CALL_OW 264
39381: PUSH
39382: LD_INT 5
39384: PUSH
39385: LD_INT 6
39387: PUSH
39388: LD_INT 46
39390: PUSH
39391: LD_INT 44
39393: PUSH
39394: LD_INT 47
39396: PUSH
39397: LD_INT 45
39399: PUSH
39400: LD_INT 28
39402: PUSH
39403: LD_INT 7
39405: PUSH
39406: LD_INT 27
39408: PUSH
39409: LD_INT 29
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: IN
39424: PUSH
39425: LD_VAR 0 1
39429: PPUSH
39430: LD_INT 52
39432: PPUSH
39433: CALL_OW 321
39437: PUSH
39438: LD_INT 2
39440: EQUAL
39441: AND
39442: IFFALSE 39459
// bpoints := bpoints * 1.2 ;
39444: LD_ADDR_VAR 0 10
39448: PUSH
39449: LD_VAR 0 10
39453: PUSH
39454: LD_REAL  1.20000000000000E+0000
39457: MUL
39458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39459: LD_VAR 0 6
39463: PPUSH
39464: CALL_OW 264
39468: PUSH
39469: LD_INT 6
39471: PUSH
39472: LD_INT 46
39474: PUSH
39475: LD_INT 47
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: IN
39483: IFFALSE 39500
// bpoints := bpoints * 1.2 ;
39485: LD_ADDR_VAR 0 10
39489: PUSH
39490: LD_VAR 0 10
39494: PUSH
39495: LD_REAL  1.20000000000000E+0000
39498: MUL
39499: ST_TO_ADDR
// end ; unit_building :
39500: GO 39514
39502: LD_INT 3
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39513
39510: POP
// ; end ;
39511: GO 39514
39513: POP
// for j = 1 to 3 do
39514: LD_ADDR_VAR 0 7
39518: PUSH
39519: DOUBLE
39520: LD_INT 1
39522: DEC
39523: ST_TO_ADDR
39524: LD_INT 3
39526: PUSH
39527: FOR_TO
39528: IFFALSE 39581
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39530: LD_ADDR_VAR 0 5
39534: PUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: LD_VAR 0 7
39544: PPUSH
39545: LD_VAR 0 5
39549: PUSH
39550: LD_VAR 0 7
39554: ARRAY
39555: PUSH
39556: LD_VAR 0 9
39560: PUSH
39561: LD_VAR 0 7
39565: ARRAY
39566: PUSH
39567: LD_VAR 0 10
39571: MUL
39572: PLUS
39573: PPUSH
39574: CALL_OW 1
39578: ST_TO_ADDR
39579: GO 39527
39581: POP
39582: POP
// end ;
39583: GO 38060
39585: POP
39586: POP
// result := Replace ( result , 4 , tmp ) ;
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: LD_VAR 0 5
39596: PPUSH
39597: LD_INT 4
39599: PPUSH
39600: LD_VAR 0 8
39604: PPUSH
39605: CALL_OW 1
39609: ST_TO_ADDR
// end ;
39610: LD_VAR 0 5
39614: RET
// export function DangerAtRange ( unit , range ) ; begin
39615: LD_INT 0
39617: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL_OW 255
39632: PPUSH
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 250
39642: PPUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 251
39652: PPUSH
39653: LD_VAR 0 2
39657: PPUSH
39658: CALL 37912 0 4
39662: ST_TO_ADDR
// end ;
39663: LD_VAR 0 3
39667: RET
// export function DangerInArea ( side , area ) ; begin
39668: LD_INT 0
39670: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39671: LD_ADDR_VAR 0 3
39675: PUSH
39676: LD_VAR 0 2
39680: PPUSH
39681: LD_INT 81
39683: PUSH
39684: LD_VAR 0 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PPUSH
39693: CALL_OW 70
39697: ST_TO_ADDR
// end ;
39698: LD_VAR 0 3
39702: RET
// export function IsExtension ( b ) ; begin
39703: LD_INT 0
39705: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39706: LD_ADDR_VAR 0 2
39710: PUSH
39711: LD_VAR 0 1
39715: PUSH
39716: LD_INT 23
39718: PUSH
39719: LD_INT 20
39721: PUSH
39722: LD_INT 22
39724: PUSH
39725: LD_INT 17
39727: PUSH
39728: LD_INT 24
39730: PUSH
39731: LD_INT 21
39733: PUSH
39734: LD_INT 19
39736: PUSH
39737: LD_INT 16
39739: PUSH
39740: LD_INT 25
39742: PUSH
39743: LD_INT 18
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: IN
39758: ST_TO_ADDR
// end ;
39759: LD_VAR 0 2
39763: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39764: LD_INT 0
39766: PPUSH
39767: PPUSH
39768: PPUSH
// result := [ ] ;
39769: LD_ADDR_VAR 0 4
39773: PUSH
39774: EMPTY
39775: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39776: LD_ADDR_VAR 0 5
39780: PUSH
39781: LD_VAR 0 2
39785: PPUSH
39786: LD_INT 21
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PPUSH
39796: CALL_OW 70
39800: ST_TO_ADDR
// if not tmp then
39801: LD_VAR 0 5
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39874
// if checkLink then
39810: LD_VAR 0 3
39814: IFFALSE 39864
// begin for i in tmp do
39816: LD_ADDR_VAR 0 6
39820: PUSH
39821: LD_VAR 0 5
39825: PUSH
39826: FOR_IN
39827: IFFALSE 39862
// if GetBase ( i ) <> base then
39829: LD_VAR 0 6
39833: PPUSH
39834: CALL_OW 274
39838: PUSH
39839: LD_VAR 0 1
39843: NONEQUAL
39844: IFFALSE 39860
// ComLinkToBase ( base , i ) ;
39846: LD_VAR 0 1
39850: PPUSH
39851: LD_VAR 0 6
39855: PPUSH
39856: CALL_OW 169
39860: GO 39826
39862: POP
39863: POP
// end ; result := tmp ;
39864: LD_ADDR_VAR 0 4
39868: PUSH
39869: LD_VAR 0 5
39873: ST_TO_ADDR
// end ;
39874: LD_VAR 0 4
39878: RET
// export function ComComplete ( units , b ) ; var i ; begin
39879: LD_INT 0
39881: PPUSH
39882: PPUSH
// if not units then
39883: LD_VAR 0 1
39887: NOT
39888: IFFALSE 39892
// exit ;
39890: GO 39982
// for i in units do
39892: LD_ADDR_VAR 0 4
39896: PUSH
39897: LD_VAR 0 1
39901: PUSH
39902: FOR_IN
39903: IFFALSE 39980
// if BuildingStatus ( b ) = bs_build then
39905: LD_VAR 0 2
39909: PPUSH
39910: CALL_OW 461
39914: PUSH
39915: LD_INT 1
39917: EQUAL
39918: IFFALSE 39978
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39920: LD_VAR 0 4
39924: PPUSH
39925: LD_STRING h
39927: PUSH
39928: LD_VAR 0 2
39932: PPUSH
39933: CALL_OW 250
39937: PUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: CALL_OW 251
39947: PUSH
39948: LD_VAR 0 2
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: PPUSH
39974: CALL_OW 446
39978: GO 39902
39980: POP
39981: POP
// end ;
39982: LD_VAR 0 3
39986: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39987: LD_INT 0
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39995: LD_VAR 0 1
39999: NOT
40000: PUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 263
40010: PUSH
40011: LD_INT 2
40013: NONEQUAL
40014: OR
40015: IFFALSE 40019
// exit ;
40017: GO 40335
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40019: LD_ADDR_VAR 0 6
40023: PUSH
40024: LD_INT 22
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 255
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: LD_INT 30
40046: PUSH
40047: LD_INT 36
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 34
40056: PUSH
40057: LD_INT 31
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PPUSH
40073: CALL_OW 69
40077: ST_TO_ADDR
// if not tmp then
40078: LD_VAR 0 6
40082: NOT
40083: IFFALSE 40087
// exit ;
40085: GO 40335
// result := [ ] ;
40087: LD_ADDR_VAR 0 2
40091: PUSH
40092: EMPTY
40093: ST_TO_ADDR
// for i in tmp do
40094: LD_ADDR_VAR 0 3
40098: PUSH
40099: LD_VAR 0 6
40103: PUSH
40104: FOR_IN
40105: IFFALSE 40176
// begin t := UnitsInside ( i ) ;
40107: LD_ADDR_VAR 0 4
40111: PUSH
40112: LD_VAR 0 3
40116: PPUSH
40117: CALL_OW 313
40121: ST_TO_ADDR
// if t then
40122: LD_VAR 0 4
40126: IFFALSE 40174
// for j in t do
40128: LD_ADDR_VAR 0 7
40132: PUSH
40133: LD_VAR 0 4
40137: PUSH
40138: FOR_IN
40139: IFFALSE 40172
// result := Replace ( result , result + 1 , j ) ;
40141: LD_ADDR_VAR 0 2
40145: PUSH
40146: LD_VAR 0 2
40150: PPUSH
40151: LD_VAR 0 2
40155: PUSH
40156: LD_INT 1
40158: PLUS
40159: PPUSH
40160: LD_VAR 0 7
40164: PPUSH
40165: CALL_OW 1
40169: ST_TO_ADDR
40170: GO 40138
40172: POP
40173: POP
// end ;
40174: GO 40104
40176: POP
40177: POP
// if not result then
40178: LD_VAR 0 2
40182: NOT
40183: IFFALSE 40187
// exit ;
40185: GO 40335
// mech := result [ 1 ] ;
40187: LD_ADDR_VAR 0 5
40191: PUSH
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: ST_TO_ADDR
// if result > 1 then
40201: LD_VAR 0 2
40205: PUSH
40206: LD_INT 1
40208: GREATER
40209: IFFALSE 40321
// begin for i = 2 to result do
40211: LD_ADDR_VAR 0 3
40215: PUSH
40216: DOUBLE
40217: LD_INT 2
40219: DEC
40220: ST_TO_ADDR
40221: LD_VAR 0 2
40225: PUSH
40226: FOR_TO
40227: IFFALSE 40319
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40229: LD_ADDR_VAR 0 4
40233: PUSH
40234: LD_VAR 0 2
40238: PUSH
40239: LD_VAR 0 3
40243: ARRAY
40244: PPUSH
40245: LD_INT 3
40247: PPUSH
40248: CALL_OW 259
40252: PUSH
40253: LD_VAR 0 2
40257: PUSH
40258: LD_VAR 0 3
40262: ARRAY
40263: PPUSH
40264: CALL_OW 432
40268: MINUS
40269: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40270: LD_VAR 0 4
40274: PUSH
40275: LD_VAR 0 5
40279: PPUSH
40280: LD_INT 3
40282: PPUSH
40283: CALL_OW 259
40287: PUSH
40288: LD_VAR 0 5
40292: PPUSH
40293: CALL_OW 432
40297: MINUS
40298: GREATEREQUAL
40299: IFFALSE 40317
// mech := result [ i ] ;
40301: LD_ADDR_VAR 0 5
40305: PUSH
40306: LD_VAR 0 2
40310: PUSH
40311: LD_VAR 0 3
40315: ARRAY
40316: ST_TO_ADDR
// end ;
40317: GO 40226
40319: POP
40320: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40321: LD_VAR 0 1
40325: PPUSH
40326: LD_VAR 0 5
40330: PPUSH
40331: CALL_OW 135
// end ;
40335: LD_VAR 0 2
40339: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40340: LD_INT 0
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
// result := [ ] ;
40355: LD_ADDR_VAR 0 7
40359: PUSH
40360: EMPTY
40361: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40362: LD_VAR 0 1
40366: PPUSH
40367: CALL_OW 266
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: IN
40382: NOT
40383: IFFALSE 40387
// exit ;
40385: GO 42021
// if name then
40387: LD_VAR 0 3
40391: IFFALSE 40407
// SetBName ( base_dep , name ) ;
40393: LD_VAR 0 1
40397: PPUSH
40398: LD_VAR 0 3
40402: PPUSH
40403: CALL_OW 500
// base := GetBase ( base_dep ) ;
40407: LD_ADDR_VAR 0 15
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: CALL_OW 274
40421: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40422: LD_ADDR_VAR 0 16
40426: PUSH
40427: LD_VAR 0 1
40431: PPUSH
40432: CALL_OW 255
40436: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40437: LD_ADDR_VAR 0 17
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 248
40451: ST_TO_ADDR
// if sources then
40452: LD_VAR 0 5
40456: IFFALSE 40503
// for i = 1 to 3 do
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: DOUBLE
40464: LD_INT 1
40466: DEC
40467: ST_TO_ADDR
40468: LD_INT 3
40470: PUSH
40471: FOR_TO
40472: IFFALSE 40501
// AddResourceType ( base , i , sources [ i ] ) ;
40474: LD_VAR 0 15
40478: PPUSH
40479: LD_VAR 0 8
40483: PPUSH
40484: LD_VAR 0 5
40488: PUSH
40489: LD_VAR 0 8
40493: ARRAY
40494: PPUSH
40495: CALL_OW 276
40499: GO 40471
40501: POP
40502: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40503: LD_ADDR_VAR 0 18
40507: PUSH
40508: LD_VAR 0 15
40512: PPUSH
40513: LD_VAR 0 2
40517: PPUSH
40518: LD_INT 1
40520: PPUSH
40521: CALL 39764 0 3
40525: ST_TO_ADDR
// InitHc ;
40526: CALL_OW 19
// InitUc ;
40530: CALL_OW 18
// uc_side := side ;
40534: LD_ADDR_OWVAR 20
40538: PUSH
40539: LD_VAR 0 16
40543: ST_TO_ADDR
// uc_nation := nation ;
40544: LD_ADDR_OWVAR 21
40548: PUSH
40549: LD_VAR 0 17
40553: ST_TO_ADDR
// if buildings then
40554: LD_VAR 0 18
40558: IFFALSE 41880
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40560: LD_ADDR_VAR 0 19
40564: PUSH
40565: LD_VAR 0 18
40569: PPUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: LD_INT 29
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 30
40585: PUSH
40586: LD_INT 30
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: PPUSH
40598: CALL_OW 72
40602: ST_TO_ADDR
// if tmp then
40603: LD_VAR 0 19
40607: IFFALSE 40655
// for i in tmp do
40609: LD_ADDR_VAR 0 8
40613: PUSH
40614: LD_VAR 0 19
40618: PUSH
40619: FOR_IN
40620: IFFALSE 40653
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40622: LD_VAR 0 8
40626: PPUSH
40627: CALL_OW 250
40631: PPUSH
40632: LD_VAR 0 8
40636: PPUSH
40637: CALL_OW 251
40641: PPUSH
40642: LD_VAR 0 16
40646: PPUSH
40647: CALL_OW 441
40651: GO 40619
40653: POP
40654: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40655: LD_VAR 0 18
40659: PPUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 30
40665: PUSH
40666: LD_INT 32
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 30
40675: PUSH
40676: LD_INT 33
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 72
40692: IFFALSE 40780
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40694: LD_ADDR_VAR 0 8
40698: PUSH
40699: LD_VAR 0 18
40703: PPUSH
40704: LD_INT 2
40706: PUSH
40707: LD_INT 30
40709: PUSH
40710: LD_INT 32
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 30
40719: PUSH
40720: LD_INT 33
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: PPUSH
40732: CALL_OW 72
40736: PUSH
40737: FOR_IN
40738: IFFALSE 40778
// begin if not GetBWeapon ( i ) then
40740: LD_VAR 0 8
40744: PPUSH
40745: CALL_OW 269
40749: NOT
40750: IFFALSE 40776
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40752: LD_VAR 0 8
40756: PPUSH
40757: LD_VAR 0 8
40761: PPUSH
40762: LD_VAR 0 2
40766: PPUSH
40767: CALL 42026 0 2
40771: PPUSH
40772: CALL_OW 431
// end ;
40776: GO 40737
40778: POP
40779: POP
// end ; for i = 1 to personel do
40780: LD_ADDR_VAR 0 8
40784: PUSH
40785: DOUBLE
40786: LD_INT 1
40788: DEC
40789: ST_TO_ADDR
40790: LD_VAR 0 6
40794: PUSH
40795: FOR_TO
40796: IFFALSE 41860
// begin if i > 4 then
40798: LD_VAR 0 8
40802: PUSH
40803: LD_INT 4
40805: GREATER
40806: IFFALSE 40810
// break ;
40808: GO 41860
// case i of 1 :
40810: LD_VAR 0 8
40814: PUSH
40815: LD_INT 1
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40823
40821: GO 40903
40823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40824: LD_ADDR_VAR 0 12
40828: PUSH
40829: LD_VAR 0 18
40833: PPUSH
40834: LD_INT 22
40836: PUSH
40837: LD_VAR 0 16
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 58
40848: PUSH
40849: EMPTY
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: LD_INT 30
40857: PUSH
40858: LD_INT 32
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 30
40867: PUSH
40868: LD_INT 4
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 30
40877: PUSH
40878: LD_INT 5
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: PPUSH
40896: CALL_OW 72
40900: ST_TO_ADDR
40901: GO 41125
40903: LD_INT 2
40905: DOUBLE
40906: EQUAL
40907: IFTRUE 40911
40909: GO 40973
40911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40912: LD_ADDR_VAR 0 12
40916: PUSH
40917: LD_VAR 0 18
40921: PPUSH
40922: LD_INT 22
40924: PUSH
40925: LD_VAR 0 16
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 30
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 30
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PPUSH
40966: CALL_OW 72
40970: ST_TO_ADDR
40971: GO 41125
40973: LD_INT 3
40975: DOUBLE
40976: EQUAL
40977: IFTRUE 40981
40979: GO 41043
40981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40982: LD_ADDR_VAR 0 12
40986: PUSH
40987: LD_VAR 0 18
40991: PPUSH
40992: LD_INT 22
40994: PUSH
40995: LD_VAR 0 16
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 30
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 30
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PPUSH
41036: CALL_OW 72
41040: ST_TO_ADDR
41041: GO 41125
41043: LD_INT 4
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41051
41049: GO 41124
41051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41052: LD_ADDR_VAR 0 12
41056: PUSH
41057: LD_VAR 0 18
41061: PPUSH
41062: LD_INT 22
41064: PUSH
41065: LD_VAR 0 16
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 30
41079: PUSH
41080: LD_INT 6
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 30
41089: PUSH
41090: LD_INT 7
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 30
41099: PUSH
41100: LD_INT 8
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PPUSH
41117: CALL_OW 72
41121: ST_TO_ADDR
41122: GO 41125
41124: POP
// if i = 1 then
41125: LD_VAR 0 8
41129: PUSH
41130: LD_INT 1
41132: EQUAL
41133: IFFALSE 41244
// begin tmp := [ ] ;
41135: LD_ADDR_VAR 0 19
41139: PUSH
41140: EMPTY
41141: ST_TO_ADDR
// for j in f do
41142: LD_ADDR_VAR 0 9
41146: PUSH
41147: LD_VAR 0 12
41151: PUSH
41152: FOR_IN
41153: IFFALSE 41226
// if GetBType ( j ) = b_bunker then
41155: LD_VAR 0 9
41159: PPUSH
41160: CALL_OW 266
41164: PUSH
41165: LD_INT 32
41167: EQUAL
41168: IFFALSE 41195
// tmp := Insert ( tmp , 1 , j ) else
41170: LD_ADDR_VAR 0 19
41174: PUSH
41175: LD_VAR 0 19
41179: PPUSH
41180: LD_INT 1
41182: PPUSH
41183: LD_VAR 0 9
41187: PPUSH
41188: CALL_OW 2
41192: ST_TO_ADDR
41193: GO 41224
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41195: LD_ADDR_VAR 0 19
41199: PUSH
41200: LD_VAR 0 19
41204: PPUSH
41205: LD_VAR 0 19
41209: PUSH
41210: LD_INT 1
41212: PLUS
41213: PPUSH
41214: LD_VAR 0 9
41218: PPUSH
41219: CALL_OW 2
41223: ST_TO_ADDR
41224: GO 41152
41226: POP
41227: POP
// if tmp then
41228: LD_VAR 0 19
41232: IFFALSE 41244
// f := tmp ;
41234: LD_ADDR_VAR 0 12
41238: PUSH
41239: LD_VAR 0 19
41243: ST_TO_ADDR
// end ; x := personel [ i ] ;
41244: LD_ADDR_VAR 0 13
41248: PUSH
41249: LD_VAR 0 6
41253: PUSH
41254: LD_VAR 0 8
41258: ARRAY
41259: ST_TO_ADDR
// if x = - 1 then
41260: LD_VAR 0 13
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: EQUAL
41269: IFFALSE 41478
// begin for j in f do
41271: LD_ADDR_VAR 0 9
41275: PUSH
41276: LD_VAR 0 12
41280: PUSH
41281: FOR_IN
41282: IFFALSE 41474
// repeat InitHc ;
41284: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41288: LD_VAR 0 9
41292: PPUSH
41293: CALL_OW 266
41297: PUSH
41298: LD_INT 5
41300: EQUAL
41301: IFFALSE 41371
// begin if UnitsInside ( j ) < 3 then
41303: LD_VAR 0 9
41307: PPUSH
41308: CALL_OW 313
41312: PUSH
41313: LD_INT 3
41315: LESS
41316: IFFALSE 41352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41318: LD_INT 0
41320: PPUSH
41321: LD_INT 5
41323: PUSH
41324: LD_INT 8
41326: PUSH
41327: LD_INT 9
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: LD_VAR 0 17
41339: ARRAY
41340: PPUSH
41341: LD_VAR 0 4
41345: PPUSH
41346: CALL_OW 380
41350: GO 41369
// PrepareHuman ( false , i , skill ) ;
41352: LD_INT 0
41354: PPUSH
41355: LD_VAR 0 8
41359: PPUSH
41360: LD_VAR 0 4
41364: PPUSH
41365: CALL_OW 380
// end else
41369: GO 41388
// PrepareHuman ( false , i , skill ) ;
41371: LD_INT 0
41373: PPUSH
41374: LD_VAR 0 8
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: CALL_OW 380
// un := CreateHuman ;
41388: LD_ADDR_VAR 0 14
41392: PUSH
41393: CALL_OW 44
41397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41398: LD_ADDR_VAR 0 7
41402: PUSH
41403: LD_VAR 0 7
41407: PPUSH
41408: LD_INT 1
41410: PPUSH
41411: LD_VAR 0 14
41415: PPUSH
41416: CALL_OW 2
41420: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41421: LD_VAR 0 14
41425: PPUSH
41426: LD_VAR 0 9
41430: PPUSH
41431: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41435: LD_VAR 0 9
41439: PPUSH
41440: CALL_OW 313
41444: PUSH
41445: LD_INT 6
41447: EQUAL
41448: PUSH
41449: LD_VAR 0 9
41453: PPUSH
41454: CALL_OW 266
41458: PUSH
41459: LD_INT 32
41461: PUSH
41462: LD_INT 31
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: IN
41469: OR
41470: IFFALSE 41284
41472: GO 41281
41474: POP
41475: POP
// end else
41476: GO 41858
// for j = 1 to x do
41478: LD_ADDR_VAR 0 9
41482: PUSH
41483: DOUBLE
41484: LD_INT 1
41486: DEC
41487: ST_TO_ADDR
41488: LD_VAR 0 13
41492: PUSH
41493: FOR_TO
41494: IFFALSE 41856
// begin InitHc ;
41496: CALL_OW 19
// if not f then
41500: LD_VAR 0 12
41504: NOT
41505: IFFALSE 41594
// begin PrepareHuman ( false , i , skill ) ;
41507: LD_INT 0
41509: PPUSH
41510: LD_VAR 0 8
41514: PPUSH
41515: LD_VAR 0 4
41519: PPUSH
41520: CALL_OW 380
// un := CreateHuman ;
41524: LD_ADDR_VAR 0 14
41528: PUSH
41529: CALL_OW 44
41533: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41534: LD_ADDR_VAR 0 7
41538: PUSH
41539: LD_VAR 0 7
41543: PPUSH
41544: LD_INT 1
41546: PPUSH
41547: LD_VAR 0 14
41551: PPUSH
41552: CALL_OW 2
41556: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41557: LD_VAR 0 14
41561: PPUSH
41562: LD_VAR 0 1
41566: PPUSH
41567: CALL_OW 250
41571: PPUSH
41572: LD_VAR 0 1
41576: PPUSH
41577: CALL_OW 251
41581: PPUSH
41582: LD_INT 10
41584: PPUSH
41585: LD_INT 0
41587: PPUSH
41588: CALL_OW 50
// continue ;
41592: GO 41493
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41594: LD_VAR 0 12
41598: PUSH
41599: LD_INT 1
41601: ARRAY
41602: PPUSH
41603: CALL_OW 313
41607: PUSH
41608: LD_VAR 0 12
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PPUSH
41617: CALL_OW 266
41621: PUSH
41622: LD_INT 32
41624: PUSH
41625: LD_INT 31
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: IN
41632: AND
41633: PUSH
41634: LD_VAR 0 12
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: PPUSH
41643: CALL_OW 313
41647: PUSH
41648: LD_INT 6
41650: EQUAL
41651: OR
41652: IFFALSE 41672
// f := Delete ( f , 1 ) ;
41654: LD_ADDR_VAR 0 12
41658: PUSH
41659: LD_VAR 0 12
41663: PPUSH
41664: LD_INT 1
41666: PPUSH
41667: CALL_OW 3
41671: ST_TO_ADDR
// if not f then
41672: LD_VAR 0 12
41676: NOT
41677: IFFALSE 41695
// begin x := x + 2 ;
41679: LD_ADDR_VAR 0 13
41683: PUSH
41684: LD_VAR 0 13
41688: PUSH
41689: LD_INT 2
41691: PLUS
41692: ST_TO_ADDR
// continue ;
41693: GO 41493
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41695: LD_VAR 0 12
41699: PUSH
41700: LD_INT 1
41702: ARRAY
41703: PPUSH
41704: CALL_OW 266
41708: PUSH
41709: LD_INT 5
41711: EQUAL
41712: IFFALSE 41786
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41714: LD_VAR 0 12
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PPUSH
41723: CALL_OW 313
41727: PUSH
41728: LD_INT 3
41730: LESS
41731: IFFALSE 41767
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41733: LD_INT 0
41735: PPUSH
41736: LD_INT 5
41738: PUSH
41739: LD_INT 8
41741: PUSH
41742: LD_INT 9
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: PUSH
41750: LD_VAR 0 17
41754: ARRAY
41755: PPUSH
41756: LD_VAR 0 4
41760: PPUSH
41761: CALL_OW 380
41765: GO 41784
// PrepareHuman ( false , i , skill ) ;
41767: LD_INT 0
41769: PPUSH
41770: LD_VAR 0 8
41774: PPUSH
41775: LD_VAR 0 4
41779: PPUSH
41780: CALL_OW 380
// end else
41784: GO 41803
// PrepareHuman ( false , i , skill ) ;
41786: LD_INT 0
41788: PPUSH
41789: LD_VAR 0 8
41793: PPUSH
41794: LD_VAR 0 4
41798: PPUSH
41799: CALL_OW 380
// un := CreateHuman ;
41803: LD_ADDR_VAR 0 14
41807: PUSH
41808: CALL_OW 44
41812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41813: LD_ADDR_VAR 0 7
41817: PUSH
41818: LD_VAR 0 7
41822: PPUSH
41823: LD_INT 1
41825: PPUSH
41826: LD_VAR 0 14
41830: PPUSH
41831: CALL_OW 2
41835: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41836: LD_VAR 0 14
41840: PPUSH
41841: LD_VAR 0 12
41845: PUSH
41846: LD_INT 1
41848: ARRAY
41849: PPUSH
41850: CALL_OW 52
// end ;
41854: GO 41493
41856: POP
41857: POP
// end ;
41858: GO 40795
41860: POP
41861: POP
// result := result ^ buildings ;
41862: LD_ADDR_VAR 0 7
41866: PUSH
41867: LD_VAR 0 7
41871: PUSH
41872: LD_VAR 0 18
41876: ADD
41877: ST_TO_ADDR
// end else
41878: GO 42021
// begin for i = 1 to personel do
41880: LD_ADDR_VAR 0 8
41884: PUSH
41885: DOUBLE
41886: LD_INT 1
41888: DEC
41889: ST_TO_ADDR
41890: LD_VAR 0 6
41894: PUSH
41895: FOR_TO
41896: IFFALSE 42019
// begin if i > 4 then
41898: LD_VAR 0 8
41902: PUSH
41903: LD_INT 4
41905: GREATER
41906: IFFALSE 41910
// break ;
41908: GO 42019
// x := personel [ i ] ;
41910: LD_ADDR_VAR 0 13
41914: PUSH
41915: LD_VAR 0 6
41919: PUSH
41920: LD_VAR 0 8
41924: ARRAY
41925: ST_TO_ADDR
// if x = - 1 then
41926: LD_VAR 0 13
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: EQUAL
41935: IFFALSE 41939
// continue ;
41937: GO 41895
// PrepareHuman ( false , i , skill ) ;
41939: LD_INT 0
41941: PPUSH
41942: LD_VAR 0 8
41946: PPUSH
41947: LD_VAR 0 4
41951: PPUSH
41952: CALL_OW 380
// un := CreateHuman ;
41956: LD_ADDR_VAR 0 14
41960: PUSH
41961: CALL_OW 44
41965: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41966: LD_VAR 0 14
41970: PPUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 250
41980: PPUSH
41981: LD_VAR 0 1
41985: PPUSH
41986: CALL_OW 251
41990: PPUSH
41991: LD_INT 10
41993: PPUSH
41994: LD_INT 0
41996: PPUSH
41997: CALL_OW 50
// result := result ^ un ;
42001: LD_ADDR_VAR 0 7
42005: PUSH
42006: LD_VAR 0 7
42010: PUSH
42011: LD_VAR 0 14
42015: ADD
42016: ST_TO_ADDR
// end ;
42017: GO 41895
42019: POP
42020: POP
// end ; end ;
42021: LD_VAR 0 7
42025: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42026: LD_INT 0
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
// result := false ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 0
42051: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42052: LD_VAR 0 1
42056: NOT
42057: PUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: CALL_OW 266
42067: PUSH
42068: LD_INT 32
42070: PUSH
42071: LD_INT 33
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: IN
42078: NOT
42079: OR
42080: IFFALSE 42084
// exit ;
42082: GO 43193
// nat := GetNation ( tower ) ;
42084: LD_ADDR_VAR 0 12
42088: PUSH
42089: LD_VAR 0 1
42093: PPUSH
42094: CALL_OW 248
42098: ST_TO_ADDR
// side := GetSide ( tower ) ;
42099: LD_ADDR_VAR 0 16
42103: PUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: CALL_OW 255
42113: ST_TO_ADDR
// x := GetX ( tower ) ;
42114: LD_ADDR_VAR 0 10
42118: PUSH
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 250
42128: ST_TO_ADDR
// y := GetY ( tower ) ;
42129: LD_ADDR_VAR 0 11
42133: PUSH
42134: LD_VAR 0 1
42138: PPUSH
42139: CALL_OW 251
42143: ST_TO_ADDR
// if not x or not y then
42144: LD_VAR 0 10
42148: NOT
42149: PUSH
42150: LD_VAR 0 11
42154: NOT
42155: OR
42156: IFFALSE 42160
// exit ;
42158: GO 43193
// weapon := 0 ;
42160: LD_ADDR_VAR 0 18
42164: PUSH
42165: LD_INT 0
42167: ST_TO_ADDR
// fac_list := [ ] ;
42168: LD_ADDR_VAR 0 17
42172: PUSH
42173: EMPTY
42174: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42175: LD_ADDR_VAR 0 6
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 274
42189: PPUSH
42190: LD_VAR 0 2
42194: PPUSH
42195: LD_INT 0
42197: PPUSH
42198: CALL 39764 0 3
42202: PPUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PPUSH
42213: CALL_OW 72
42217: ST_TO_ADDR
// if not factories then
42218: LD_VAR 0 6
42222: NOT
42223: IFFALSE 42227
// exit ;
42225: GO 43193
// for i in factories do
42227: LD_ADDR_VAR 0 8
42231: PUSH
42232: LD_VAR 0 6
42236: PUSH
42237: FOR_IN
42238: IFFALSE 42263
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42240: LD_ADDR_VAR 0 17
42244: PUSH
42245: LD_VAR 0 17
42249: PUSH
42250: LD_VAR 0 8
42254: PPUSH
42255: CALL_OW 478
42259: UNION
42260: ST_TO_ADDR
42261: GO 42237
42263: POP
42264: POP
// if not fac_list then
42265: LD_VAR 0 17
42269: NOT
42270: IFFALSE 42274
// exit ;
42272: GO 43193
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42274: LD_ADDR_VAR 0 5
42278: PUSH
42279: LD_INT 4
42281: PUSH
42282: LD_INT 5
42284: PUSH
42285: LD_INT 9
42287: PUSH
42288: LD_INT 10
42290: PUSH
42291: LD_INT 6
42293: PUSH
42294: LD_INT 7
42296: PUSH
42297: LD_INT 11
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 27
42311: PUSH
42312: LD_INT 28
42314: PUSH
42315: LD_INT 26
42317: PUSH
42318: LD_INT 30
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 43
42329: PUSH
42330: LD_INT 44
42332: PUSH
42333: LD_INT 46
42335: PUSH
42336: LD_INT 45
42338: PUSH
42339: LD_INT 47
42341: PUSH
42342: LD_INT 49
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: PUSH
42358: LD_VAR 0 12
42362: ARRAY
42363: ST_TO_ADDR
// list := list isect fac_list ;
42364: LD_ADDR_VAR 0 5
42368: PUSH
42369: LD_VAR 0 5
42373: PUSH
42374: LD_VAR 0 17
42378: ISECT
42379: ST_TO_ADDR
// if not list then
42380: LD_VAR 0 5
42384: NOT
42385: IFFALSE 42389
// exit ;
42387: GO 43193
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42389: LD_VAR 0 12
42393: PUSH
42394: LD_INT 3
42396: EQUAL
42397: PUSH
42398: LD_INT 49
42400: PUSH
42401: LD_VAR 0 5
42405: IN
42406: AND
42407: PUSH
42408: LD_INT 31
42410: PPUSH
42411: LD_VAR 0 16
42415: PPUSH
42416: CALL_OW 321
42420: PUSH
42421: LD_INT 2
42423: EQUAL
42424: AND
42425: IFFALSE 42485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42427: LD_INT 22
42429: PUSH
42430: LD_VAR 0 16
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 35
42441: PUSH
42442: LD_INT 49
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 91
42451: PUSH
42452: LD_VAR 0 1
42456: PUSH
42457: LD_INT 10
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: PPUSH
42470: CALL_OW 69
42474: NOT
42475: IFFALSE 42485
// weapon := ru_time_lapser ;
42477: LD_ADDR_VAR 0 18
42481: PUSH
42482: LD_INT 49
42484: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42485: LD_VAR 0 12
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: IN
42500: PUSH
42501: LD_INT 11
42503: PUSH
42504: LD_VAR 0 5
42508: IN
42509: PUSH
42510: LD_INT 30
42512: PUSH
42513: LD_VAR 0 5
42517: IN
42518: OR
42519: AND
42520: PUSH
42521: LD_INT 6
42523: PPUSH
42524: LD_VAR 0 16
42528: PPUSH
42529: CALL_OW 321
42533: PUSH
42534: LD_INT 2
42536: EQUAL
42537: AND
42538: IFFALSE 42703
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42540: LD_INT 22
42542: PUSH
42543: LD_VAR 0 16
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: LD_INT 35
42557: PUSH
42558: LD_INT 11
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 35
42567: PUSH
42568: LD_INT 30
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 91
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 18
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: PPUSH
42601: CALL_OW 69
42605: NOT
42606: PUSH
42607: LD_INT 22
42609: PUSH
42610: LD_VAR 0 16
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 30
42624: PUSH
42625: LD_INT 32
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 30
42634: PUSH
42635: LD_INT 33
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 91
42649: PUSH
42650: LD_VAR 0 1
42654: PUSH
42655: LD_INT 12
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: PUSH
42668: EMPTY
42669: LIST
42670: PPUSH
42671: CALL_OW 69
42675: PUSH
42676: LD_INT 2
42678: GREATER
42679: AND
42680: IFFALSE 42703
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42682: LD_ADDR_VAR 0 18
42686: PUSH
42687: LD_INT 11
42689: PUSH
42690: LD_INT 30
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_VAR 0 12
42701: ARRAY
42702: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42703: LD_VAR 0 18
42707: NOT
42708: PUSH
42709: LD_INT 40
42711: PPUSH
42712: LD_VAR 0 16
42716: PPUSH
42717: CALL_OW 321
42721: PUSH
42722: LD_INT 2
42724: EQUAL
42725: AND
42726: PUSH
42727: LD_INT 7
42729: PUSH
42730: LD_VAR 0 5
42734: IN
42735: PUSH
42736: LD_INT 28
42738: PUSH
42739: LD_VAR 0 5
42743: IN
42744: OR
42745: PUSH
42746: LD_INT 45
42748: PUSH
42749: LD_VAR 0 5
42753: IN
42754: OR
42755: AND
42756: IFFALSE 43010
// begin hex := GetHexInfo ( x , y ) ;
42758: LD_ADDR_VAR 0 4
42762: PUSH
42763: LD_VAR 0 10
42767: PPUSH
42768: LD_VAR 0 11
42772: PPUSH
42773: CALL_OW 546
42777: ST_TO_ADDR
// if hex [ 1 ] then
42778: LD_VAR 0 4
42782: PUSH
42783: LD_INT 1
42785: ARRAY
42786: IFFALSE 42790
// exit ;
42788: GO 43193
// height := hex [ 2 ] ;
42790: LD_ADDR_VAR 0 15
42794: PUSH
42795: LD_VAR 0 4
42799: PUSH
42800: LD_INT 2
42802: ARRAY
42803: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42804: LD_ADDR_VAR 0 14
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// for i in tmp do
42827: LD_ADDR_VAR 0 8
42831: PUSH
42832: LD_VAR 0 14
42836: PUSH
42837: FOR_IN
42838: IFFALSE 43008
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42840: LD_ADDR_VAR 0 9
42844: PUSH
42845: LD_VAR 0 10
42849: PPUSH
42850: LD_VAR 0 8
42854: PPUSH
42855: LD_INT 5
42857: PPUSH
42858: CALL_OW 272
42862: PUSH
42863: LD_VAR 0 11
42867: PPUSH
42868: LD_VAR 0 8
42872: PPUSH
42873: LD_INT 5
42875: PPUSH
42876: CALL_OW 273
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42885: LD_VAR 0 9
42889: PUSH
42890: LD_INT 1
42892: ARRAY
42893: PPUSH
42894: LD_VAR 0 9
42898: PUSH
42899: LD_INT 2
42901: ARRAY
42902: PPUSH
42903: CALL_OW 488
42907: IFFALSE 43006
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42909: LD_ADDR_VAR 0 4
42913: PUSH
42914: LD_VAR 0 9
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 9
42927: PUSH
42928: LD_INT 2
42930: ARRAY
42931: PPUSH
42932: CALL_OW 546
42936: ST_TO_ADDR
// if hex [ 1 ] then
42937: LD_VAR 0 4
42941: PUSH
42942: LD_INT 1
42944: ARRAY
42945: IFFALSE 42949
// continue ;
42947: GO 42837
// h := hex [ 2 ] ;
42949: LD_ADDR_VAR 0 13
42953: PUSH
42954: LD_VAR 0 4
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: ST_TO_ADDR
// if h + 7 < height then
42963: LD_VAR 0 13
42967: PUSH
42968: LD_INT 7
42970: PLUS
42971: PUSH
42972: LD_VAR 0 15
42976: LESS
42977: IFFALSE 43006
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42979: LD_ADDR_VAR 0 18
42983: PUSH
42984: LD_INT 7
42986: PUSH
42987: LD_INT 28
42989: PUSH
42990: LD_INT 45
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: PUSH
42998: LD_VAR 0 12
43002: ARRAY
43003: ST_TO_ADDR
// break ;
43004: GO 43008
// end ; end ; end ;
43006: GO 42837
43008: POP
43009: POP
// end ; if not weapon then
43010: LD_VAR 0 18
43014: NOT
43015: IFFALSE 43075
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_VAR 0 5
43026: PUSH
43027: LD_INT 11
43029: PUSH
43030: LD_INT 30
43032: PUSH
43033: LD_INT 49
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: DIFF
43041: ST_TO_ADDR
// if not list then
43042: LD_VAR 0 5
43046: NOT
43047: IFFALSE 43051
// exit ;
43049: GO 43193
// weapon := list [ rand ( 1 , list ) ] ;
43051: LD_ADDR_VAR 0 18
43055: PUSH
43056: LD_VAR 0 5
43060: PUSH
43061: LD_INT 1
43063: PPUSH
43064: LD_VAR 0 5
43068: PPUSH
43069: CALL_OW 12
43073: ARRAY
43074: ST_TO_ADDR
// end ; if weapon then
43075: LD_VAR 0 18
43079: IFFALSE 43193
// begin tmp := CostOfWeapon ( weapon ) ;
43081: LD_ADDR_VAR 0 14
43085: PUSH
43086: LD_VAR 0 18
43090: PPUSH
43091: CALL_OW 451
43095: ST_TO_ADDR
// j := GetBase ( tower ) ;
43096: LD_ADDR_VAR 0 9
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 274
43110: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43111: LD_VAR 0 9
43115: PPUSH
43116: LD_INT 1
43118: PPUSH
43119: CALL_OW 275
43123: PUSH
43124: LD_VAR 0 14
43128: PUSH
43129: LD_INT 1
43131: ARRAY
43132: GREATEREQUAL
43133: PUSH
43134: LD_VAR 0 9
43138: PPUSH
43139: LD_INT 2
43141: PPUSH
43142: CALL_OW 275
43146: PUSH
43147: LD_VAR 0 14
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: GREATEREQUAL
43156: AND
43157: PUSH
43158: LD_VAR 0 9
43162: PPUSH
43163: LD_INT 3
43165: PPUSH
43166: CALL_OW 275
43170: PUSH
43171: LD_VAR 0 14
43175: PUSH
43176: LD_INT 3
43178: ARRAY
43179: GREATEREQUAL
43180: AND
43181: IFFALSE 43193
// result := weapon ;
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_VAR 0 18
43192: ST_TO_ADDR
// end ; end ;
43193: LD_VAR 0 3
43197: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43198: LD_INT 0
43200: PPUSH
43201: PPUSH
// result := true ;
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_INT 1
43209: ST_TO_ADDR
// if array1 = array2 then
43210: LD_VAR 0 1
43214: PUSH
43215: LD_VAR 0 2
43219: EQUAL
43220: IFFALSE 43280
// begin for i = 1 to array1 do
43222: LD_ADDR_VAR 0 4
43226: PUSH
43227: DOUBLE
43228: LD_INT 1
43230: DEC
43231: ST_TO_ADDR
43232: LD_VAR 0 1
43236: PUSH
43237: FOR_TO
43238: IFFALSE 43276
// if array1 [ i ] <> array2 [ i ] then
43240: LD_VAR 0 1
43244: PUSH
43245: LD_VAR 0 4
43249: ARRAY
43250: PUSH
43251: LD_VAR 0 2
43255: PUSH
43256: LD_VAR 0 4
43260: ARRAY
43261: NONEQUAL
43262: IFFALSE 43274
// begin result := false ;
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 0
43271: ST_TO_ADDR
// break ;
43272: GO 43276
// end ;
43274: GO 43237
43276: POP
43277: POP
// end else
43278: GO 43288
// result := false ;
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_INT 0
43287: ST_TO_ADDR
// end ;
43288: LD_VAR 0 3
43292: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43293: LD_INT 0
43295: PPUSH
43296: PPUSH
// if not array1 or not array2 then
43297: LD_VAR 0 1
43301: NOT
43302: PUSH
43303: LD_VAR 0 2
43307: NOT
43308: OR
43309: IFFALSE 43313
// exit ;
43311: GO 43377
// result := true ;
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_INT 1
43320: ST_TO_ADDR
// for i = 1 to array1 do
43321: LD_ADDR_VAR 0 4
43325: PUSH
43326: DOUBLE
43327: LD_INT 1
43329: DEC
43330: ST_TO_ADDR
43331: LD_VAR 0 1
43335: PUSH
43336: FOR_TO
43337: IFFALSE 43375
// if array1 [ i ] <> array2 [ i ] then
43339: LD_VAR 0 1
43343: PUSH
43344: LD_VAR 0 4
43348: ARRAY
43349: PUSH
43350: LD_VAR 0 2
43354: PUSH
43355: LD_VAR 0 4
43359: ARRAY
43360: NONEQUAL
43361: IFFALSE 43373
// begin result := false ;
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 0
43370: ST_TO_ADDR
// break ;
43371: GO 43375
// end ;
43373: GO 43336
43375: POP
43376: POP
// end ;
43377: LD_VAR 0 3
43381: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43382: LD_INT 0
43384: PPUSH
43385: PPUSH
43386: PPUSH
// pom := GetBase ( fac ) ;
43387: LD_ADDR_VAR 0 5
43391: PUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL_OW 274
43401: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43402: LD_ADDR_VAR 0 4
43406: PUSH
43407: LD_VAR 0 2
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PPUSH
43416: LD_VAR 0 2
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: PPUSH
43425: LD_VAR 0 2
43429: PUSH
43430: LD_INT 3
43432: ARRAY
43433: PPUSH
43434: LD_VAR 0 2
43438: PUSH
43439: LD_INT 4
43441: ARRAY
43442: PPUSH
43443: CALL_OW 449
43447: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_VAR 0 5
43457: PPUSH
43458: LD_INT 1
43460: PPUSH
43461: CALL_OW 275
43465: PUSH
43466: LD_VAR 0 4
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: GREATEREQUAL
43475: PUSH
43476: LD_VAR 0 5
43480: PPUSH
43481: LD_INT 2
43483: PPUSH
43484: CALL_OW 275
43488: PUSH
43489: LD_VAR 0 4
43493: PUSH
43494: LD_INT 2
43496: ARRAY
43497: GREATEREQUAL
43498: AND
43499: PUSH
43500: LD_VAR 0 5
43504: PPUSH
43505: LD_INT 3
43507: PPUSH
43508: CALL_OW 275
43512: PUSH
43513: LD_VAR 0 4
43517: PUSH
43518: LD_INT 3
43520: ARRAY
43521: GREATEREQUAL
43522: AND
43523: ST_TO_ADDR
// end ;
43524: LD_VAR 0 3
43528: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43529: LD_INT 0
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
// pom := GetBase ( building ) ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 274
43549: ST_TO_ADDR
// if not pom then
43550: LD_VAR 0 3
43554: NOT
43555: IFFALSE 43559
// exit ;
43557: GO 43729
// btype := GetBType ( building ) ;
43559: LD_ADDR_VAR 0 5
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: CALL_OW 266
43573: ST_TO_ADDR
// if btype = b_armoury then
43574: LD_VAR 0 5
43578: PUSH
43579: LD_INT 4
43581: EQUAL
43582: IFFALSE 43592
// btype := b_barracks ;
43584: LD_ADDR_VAR 0 5
43588: PUSH
43589: LD_INT 5
43591: ST_TO_ADDR
// if btype = b_depot then
43592: LD_VAR 0 5
43596: PUSH
43597: LD_INT 0
43599: EQUAL
43600: IFFALSE 43610
// btype := b_warehouse ;
43602: LD_ADDR_VAR 0 5
43606: PUSH
43607: LD_INT 1
43609: ST_TO_ADDR
// if btype = b_workshop then
43610: LD_VAR 0 5
43614: PUSH
43615: LD_INT 2
43617: EQUAL
43618: IFFALSE 43628
// btype := b_factory ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_INT 3
43627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43628: LD_ADDR_VAR 0 4
43632: PUSH
43633: LD_VAR 0 5
43637: PPUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 248
43647: PPUSH
43648: CALL_OW 450
43652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43653: LD_ADDR_VAR 0 2
43657: PUSH
43658: LD_VAR 0 3
43662: PPUSH
43663: LD_INT 1
43665: PPUSH
43666: CALL_OW 275
43670: PUSH
43671: LD_VAR 0 4
43675: PUSH
43676: LD_INT 1
43678: ARRAY
43679: GREATEREQUAL
43680: PUSH
43681: LD_VAR 0 3
43685: PPUSH
43686: LD_INT 2
43688: PPUSH
43689: CALL_OW 275
43693: PUSH
43694: LD_VAR 0 4
43698: PUSH
43699: LD_INT 2
43701: ARRAY
43702: GREATEREQUAL
43703: AND
43704: PUSH
43705: LD_VAR 0 3
43709: PPUSH
43710: LD_INT 3
43712: PPUSH
43713: CALL_OW 275
43717: PUSH
43718: LD_VAR 0 4
43722: PUSH
43723: LD_INT 3
43725: ARRAY
43726: GREATEREQUAL
43727: AND
43728: ST_TO_ADDR
// end ;
43729: LD_VAR 0 2
43733: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
43738: PPUSH
// pom := GetBase ( building ) ;
43739: LD_ADDR_VAR 0 4
43743: PUSH
43744: LD_VAR 0 1
43748: PPUSH
43749: CALL_OW 274
43753: ST_TO_ADDR
// if not pom then
43754: LD_VAR 0 4
43758: NOT
43759: IFFALSE 43763
// exit ;
43761: GO 43864
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43763: LD_ADDR_VAR 0 5
43767: PUSH
43768: LD_VAR 0 2
43772: PPUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 248
43782: PPUSH
43783: CALL_OW 450
43787: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_VAR 0 4
43797: PPUSH
43798: LD_INT 1
43800: PPUSH
43801: CALL_OW 275
43805: PUSH
43806: LD_VAR 0 5
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: GREATEREQUAL
43815: PUSH
43816: LD_VAR 0 4
43820: PPUSH
43821: LD_INT 2
43823: PPUSH
43824: CALL_OW 275
43828: PUSH
43829: LD_VAR 0 5
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: GREATEREQUAL
43838: AND
43839: PUSH
43840: LD_VAR 0 4
43844: PPUSH
43845: LD_INT 3
43847: PPUSH
43848: CALL_OW 275
43852: PUSH
43853: LD_VAR 0 5
43857: PUSH
43858: LD_INT 3
43860: ARRAY
43861: GREATEREQUAL
43862: AND
43863: ST_TO_ADDR
// end ;
43864: LD_VAR 0 3
43868: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43869: LD_INT 0
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
// result := false ;
43882: LD_ADDR_VAR 0 8
43886: PUSH
43887: LD_INT 0
43889: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43890: LD_VAR 0 5
43894: NOT
43895: PUSH
43896: LD_VAR 0 1
43900: NOT
43901: OR
43902: PUSH
43903: LD_VAR 0 2
43907: NOT
43908: OR
43909: PUSH
43910: LD_VAR 0 3
43914: NOT
43915: OR
43916: IFFALSE 43920
// exit ;
43918: GO 44734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43920: LD_ADDR_VAR 0 14
43924: PUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: LD_VAR 0 2
43934: PPUSH
43935: LD_VAR 0 3
43939: PPUSH
43940: LD_VAR 0 4
43944: PPUSH
43945: LD_VAR 0 5
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: PPUSH
43954: CALL_OW 248
43958: PPUSH
43959: LD_INT 0
43961: PPUSH
43962: CALL 45971 0 6
43966: ST_TO_ADDR
// if not hexes then
43967: LD_VAR 0 14
43971: NOT
43972: IFFALSE 43976
// exit ;
43974: GO 44734
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43976: LD_ADDR_VAR 0 17
43980: PUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: LD_INT 22
43988: PUSH
43989: LD_VAR 0 13
43993: PPUSH
43994: CALL_OW 255
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 30
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 30
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 72
44039: ST_TO_ADDR
// for i = 1 to hexes do
44040: LD_ADDR_VAR 0 9
44044: PUSH
44045: DOUBLE
44046: LD_INT 1
44048: DEC
44049: ST_TO_ADDR
44050: LD_VAR 0 14
44054: PUSH
44055: FOR_TO
44056: IFFALSE 44732
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44058: LD_ADDR_VAR 0 13
44062: PUSH
44063: LD_VAR 0 14
44067: PUSH
44068: LD_VAR 0 9
44072: ARRAY
44073: PUSH
44074: LD_INT 1
44076: ARRAY
44077: PPUSH
44078: LD_VAR 0 14
44082: PUSH
44083: LD_VAR 0 9
44087: ARRAY
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: PPUSH
44093: CALL_OW 428
44097: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44098: LD_VAR 0 14
44102: PUSH
44103: LD_VAR 0 9
44107: ARRAY
44108: PUSH
44109: LD_INT 1
44111: ARRAY
44112: PPUSH
44113: LD_VAR 0 14
44117: PUSH
44118: LD_VAR 0 9
44122: ARRAY
44123: PUSH
44124: LD_INT 2
44126: ARRAY
44127: PPUSH
44128: CALL_OW 351
44132: PUSH
44133: LD_VAR 0 14
44137: PUSH
44138: LD_VAR 0 9
44142: ARRAY
44143: PUSH
44144: LD_INT 1
44146: ARRAY
44147: PPUSH
44148: LD_VAR 0 14
44152: PUSH
44153: LD_VAR 0 9
44157: ARRAY
44158: PUSH
44159: LD_INT 2
44161: ARRAY
44162: PPUSH
44163: CALL_OW 488
44167: NOT
44168: OR
44169: PUSH
44170: LD_VAR 0 13
44174: PPUSH
44175: CALL_OW 247
44179: PUSH
44180: LD_INT 3
44182: EQUAL
44183: OR
44184: IFFALSE 44190
// exit ;
44186: POP
44187: POP
44188: GO 44734
// if not tmp then
44190: LD_VAR 0 13
44194: NOT
44195: IFFALSE 44199
// continue ;
44197: GO 44055
// result := true ;
44199: LD_ADDR_VAR 0 8
44203: PUSH
44204: LD_INT 1
44206: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44207: LD_VAR 0 6
44211: PUSH
44212: LD_VAR 0 13
44216: PPUSH
44217: CALL_OW 247
44221: PUSH
44222: LD_INT 2
44224: EQUAL
44225: AND
44226: PUSH
44227: LD_VAR 0 13
44231: PPUSH
44232: CALL_OW 263
44236: PUSH
44237: LD_INT 1
44239: EQUAL
44240: AND
44241: IFFALSE 44405
// begin if IsDrivenBy ( tmp ) then
44243: LD_VAR 0 13
44247: PPUSH
44248: CALL_OW 311
44252: IFFALSE 44256
// continue ;
44254: GO 44055
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44256: LD_VAR 0 6
44260: PPUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 60
44266: PUSH
44267: EMPTY
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 55
44279: PUSH
44280: EMPTY
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PPUSH
44291: CALL_OW 72
44295: IFFALSE 44403
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44297: LD_ADDR_VAR 0 18
44301: PUSH
44302: LD_VAR 0 6
44306: PPUSH
44307: LD_INT 3
44309: PUSH
44310: LD_INT 60
44312: PUSH
44313: EMPTY
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: LD_INT 55
44325: PUSH
44326: EMPTY
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PPUSH
44337: CALL_OW 72
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: ST_TO_ADDR
// if IsInUnit ( driver ) then
44346: LD_VAR 0 18
44350: PPUSH
44351: CALL_OW 310
44355: IFFALSE 44366
// ComExit ( driver ) ;
44357: LD_VAR 0 18
44361: PPUSH
44362: CALL 69155 0 1
// AddComEnterUnit ( driver , tmp ) ;
44366: LD_VAR 0 18
44370: PPUSH
44371: LD_VAR 0 13
44375: PPUSH
44376: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44380: LD_VAR 0 18
44384: PPUSH
44385: LD_VAR 0 7
44389: PPUSH
44390: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44394: LD_VAR 0 18
44398: PPUSH
44399: CALL_OW 181
// end ; continue ;
44403: GO 44055
// end ; if not cleaners or not tmp in cleaners then
44405: LD_VAR 0 6
44409: NOT
44410: PUSH
44411: LD_VAR 0 13
44415: PUSH
44416: LD_VAR 0 6
44420: IN
44421: NOT
44422: OR
44423: IFFALSE 44730
// begin if dep then
44425: LD_VAR 0 17
44429: IFFALSE 44565
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44431: LD_ADDR_VAR 0 16
44435: PUSH
44436: LD_VAR 0 17
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: PPUSH
44445: CALL_OW 250
44449: PPUSH
44450: LD_VAR 0 17
44454: PUSH
44455: LD_INT 1
44457: ARRAY
44458: PPUSH
44459: CALL_OW 254
44463: PPUSH
44464: LD_INT 5
44466: PPUSH
44467: CALL_OW 272
44471: PUSH
44472: LD_VAR 0 17
44476: PUSH
44477: LD_INT 1
44479: ARRAY
44480: PPUSH
44481: CALL_OW 251
44485: PPUSH
44486: LD_VAR 0 17
44490: PUSH
44491: LD_INT 1
44493: ARRAY
44494: PPUSH
44495: CALL_OW 254
44499: PPUSH
44500: LD_INT 5
44502: PPUSH
44503: CALL_OW 273
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44512: LD_VAR 0 16
44516: PUSH
44517: LD_INT 1
44519: ARRAY
44520: PPUSH
44521: LD_VAR 0 16
44525: PUSH
44526: LD_INT 2
44528: ARRAY
44529: PPUSH
44530: CALL_OW 488
44534: IFFALSE 44565
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44536: LD_VAR 0 13
44540: PPUSH
44541: LD_VAR 0 16
44545: PUSH
44546: LD_INT 1
44548: ARRAY
44549: PPUSH
44550: LD_VAR 0 16
44554: PUSH
44555: LD_INT 2
44557: ARRAY
44558: PPUSH
44559: CALL_OW 111
// continue ;
44563: GO 44055
// end ; end ; r := GetDir ( tmp ) ;
44565: LD_ADDR_VAR 0 15
44569: PUSH
44570: LD_VAR 0 13
44574: PPUSH
44575: CALL_OW 254
44579: ST_TO_ADDR
// if r = 5 then
44580: LD_VAR 0 15
44584: PUSH
44585: LD_INT 5
44587: EQUAL
44588: IFFALSE 44598
// r := 0 ;
44590: LD_ADDR_VAR 0 15
44594: PUSH
44595: LD_INT 0
44597: ST_TO_ADDR
// for j = r to 5 do
44598: LD_ADDR_VAR 0 10
44602: PUSH
44603: DOUBLE
44604: LD_VAR 0 15
44608: DEC
44609: ST_TO_ADDR
44610: LD_INT 5
44612: PUSH
44613: FOR_TO
44614: IFFALSE 44728
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44616: LD_ADDR_VAR 0 11
44620: PUSH
44621: LD_VAR 0 13
44625: PPUSH
44626: CALL_OW 250
44630: PPUSH
44631: LD_VAR 0 10
44635: PPUSH
44636: LD_INT 2
44638: PPUSH
44639: CALL_OW 272
44643: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44644: LD_ADDR_VAR 0 12
44648: PUSH
44649: LD_VAR 0 13
44653: PPUSH
44654: CALL_OW 251
44658: PPUSH
44659: LD_VAR 0 10
44663: PPUSH
44664: LD_INT 2
44666: PPUSH
44667: CALL_OW 273
44671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44672: LD_VAR 0 11
44676: PPUSH
44677: LD_VAR 0 12
44681: PPUSH
44682: CALL_OW 488
44686: PUSH
44687: LD_VAR 0 11
44691: PPUSH
44692: LD_VAR 0 12
44696: PPUSH
44697: CALL_OW 428
44701: NOT
44702: AND
44703: IFFALSE 44726
// begin ComMoveXY ( tmp , _x , _y ) ;
44705: LD_VAR 0 13
44709: PPUSH
44710: LD_VAR 0 11
44714: PPUSH
44715: LD_VAR 0 12
44719: PPUSH
44720: CALL_OW 111
// break ;
44724: GO 44728
// end ; end ;
44726: GO 44613
44728: POP
44729: POP
// end ; end ;
44730: GO 44055
44732: POP
44733: POP
// end ;
44734: LD_VAR 0 8
44738: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44739: LD_INT 0
44741: PPUSH
// result := true ;
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 1
44749: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44750: LD_VAR 0 2
44754: PUSH
44755: LD_INT 24
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44769
44761: LD_INT 33
44763: DOUBLE
44764: EQUAL
44765: IFTRUE 44769
44767: GO 44794
44769: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44770: LD_ADDR_VAR 0 3
44774: PUSH
44775: LD_INT 32
44777: PPUSH
44778: LD_VAR 0 1
44782: PPUSH
44783: CALL_OW 321
44787: PUSH
44788: LD_INT 2
44790: EQUAL
44791: ST_TO_ADDR
44792: GO 45114
44794: LD_INT 20
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44802
44800: GO 44827
44802: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44803: LD_ADDR_VAR 0 3
44807: PUSH
44808: LD_INT 6
44810: PPUSH
44811: LD_VAR 0 1
44815: PPUSH
44816: CALL_OW 321
44820: PUSH
44821: LD_INT 2
44823: EQUAL
44824: ST_TO_ADDR
44825: GO 45114
44827: LD_INT 22
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44841
44833: LD_INT 36
44835: DOUBLE
44836: EQUAL
44837: IFTRUE 44841
44839: GO 44866
44841: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44842: LD_ADDR_VAR 0 3
44846: PUSH
44847: LD_INT 15
44849: PPUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 321
44859: PUSH
44860: LD_INT 2
44862: EQUAL
44863: ST_TO_ADDR
44864: GO 45114
44866: LD_INT 30
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44874
44872: GO 44899
44874: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44875: LD_ADDR_VAR 0 3
44879: PUSH
44880: LD_INT 20
44882: PPUSH
44883: LD_VAR 0 1
44887: PPUSH
44888: CALL_OW 321
44892: PUSH
44893: LD_INT 2
44895: EQUAL
44896: ST_TO_ADDR
44897: GO 45114
44899: LD_INT 28
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44913
44905: LD_INT 21
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 44938
44913: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_INT 21
44921: PPUSH
44922: LD_VAR 0 1
44926: PPUSH
44927: CALL_OW 321
44931: PUSH
44932: LD_INT 2
44934: EQUAL
44935: ST_TO_ADDR
44936: GO 45114
44938: LD_INT 16
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44946
44944: GO 44973
44946: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44947: LD_ADDR_VAR 0 3
44951: PUSH
44952: LD_EXP 136
44956: PPUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 321
44966: PUSH
44967: LD_INT 2
44969: EQUAL
44970: ST_TO_ADDR
44971: GO 45114
44973: LD_INT 19
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44987
44979: LD_INT 23
44981: DOUBLE
44982: EQUAL
44983: IFTRUE 44987
44985: GO 45014
44987: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44988: LD_ADDR_VAR 0 3
44992: PUSH
44993: LD_EXP 135
44997: PPUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 321
45007: PUSH
45008: LD_INT 2
45010: EQUAL
45011: ST_TO_ADDR
45012: GO 45114
45014: LD_INT 17
45016: DOUBLE
45017: EQUAL
45018: IFTRUE 45022
45020: GO 45047
45022: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45023: LD_ADDR_VAR 0 3
45027: PUSH
45028: LD_INT 39
45030: PPUSH
45031: LD_VAR 0 1
45035: PPUSH
45036: CALL_OW 321
45040: PUSH
45041: LD_INT 2
45043: EQUAL
45044: ST_TO_ADDR
45045: GO 45114
45047: LD_INT 18
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45080
45055: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 40
45063: PPUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 321
45073: PUSH
45074: LD_INT 2
45076: EQUAL
45077: ST_TO_ADDR
45078: GO 45114
45080: LD_INT 27
45082: DOUBLE
45083: EQUAL
45084: IFTRUE 45088
45086: GO 45113
45088: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_INT 35
45096: PPUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 321
45106: PUSH
45107: LD_INT 2
45109: EQUAL
45110: ST_TO_ADDR
45111: GO 45114
45113: POP
// end ;
45114: LD_VAR 0 3
45118: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45119: LD_INT 0
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
// result := false ;
45132: LD_ADDR_VAR 0 6
45136: PUSH
45137: LD_INT 0
45139: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45140: LD_VAR 0 1
45144: NOT
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 266
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: IN
45166: NOT
45167: OR
45168: PUSH
45169: LD_VAR 0 2
45173: NOT
45174: OR
45175: PUSH
45176: LD_VAR 0 5
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 4
45195: PUSH
45196: LD_INT 5
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: IN
45207: NOT
45208: OR
45209: PUSH
45210: LD_VAR 0 3
45214: PPUSH
45215: LD_VAR 0 4
45219: PPUSH
45220: CALL_OW 488
45224: NOT
45225: OR
45226: IFFALSE 45230
// exit ;
45228: GO 45966
// side := GetSide ( depot ) ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 255
45244: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45245: LD_VAR 0 9
45249: PPUSH
45250: LD_VAR 0 2
45254: PPUSH
45255: CALL 44739 0 2
45259: NOT
45260: IFFALSE 45264
// exit ;
45262: GO 45966
// pom := GetBase ( depot ) ;
45264: LD_ADDR_VAR 0 10
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 274
45278: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45279: LD_ADDR_VAR 0 11
45283: PUSH
45284: LD_VAR 0 2
45288: PPUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 248
45298: PPUSH
45299: CALL_OW 450
45303: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45304: LD_VAR 0 10
45308: PPUSH
45309: LD_INT 1
45311: PPUSH
45312: CALL_OW 275
45316: PUSH
45317: LD_VAR 0 11
45321: PUSH
45322: LD_INT 1
45324: ARRAY
45325: GREATEREQUAL
45326: PUSH
45327: LD_VAR 0 10
45331: PPUSH
45332: LD_INT 2
45334: PPUSH
45335: CALL_OW 275
45339: PUSH
45340: LD_VAR 0 11
45344: PUSH
45345: LD_INT 2
45347: ARRAY
45348: GREATEREQUAL
45349: AND
45350: PUSH
45351: LD_VAR 0 10
45355: PPUSH
45356: LD_INT 3
45358: PPUSH
45359: CALL_OW 275
45363: PUSH
45364: LD_VAR 0 11
45368: PUSH
45369: LD_INT 3
45371: ARRAY
45372: GREATEREQUAL
45373: AND
45374: NOT
45375: IFFALSE 45379
// exit ;
45377: GO 45966
// if GetBType ( depot ) = b_depot then
45379: LD_VAR 0 1
45383: PPUSH
45384: CALL_OW 266
45388: PUSH
45389: LD_INT 0
45391: EQUAL
45392: IFFALSE 45404
// dist := 28 else
45394: LD_ADDR_VAR 0 14
45398: PUSH
45399: LD_INT 28
45401: ST_TO_ADDR
45402: GO 45412
// dist := 36 ;
45404: LD_ADDR_VAR 0 14
45408: PUSH
45409: LD_INT 36
45411: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45412: LD_VAR 0 1
45416: PPUSH
45417: LD_VAR 0 3
45421: PPUSH
45422: LD_VAR 0 4
45426: PPUSH
45427: CALL_OW 297
45431: PUSH
45432: LD_VAR 0 14
45436: GREATER
45437: IFFALSE 45441
// exit ;
45439: GO 45966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45441: LD_ADDR_VAR 0 12
45445: PUSH
45446: LD_VAR 0 2
45450: PPUSH
45451: LD_VAR 0 3
45455: PPUSH
45456: LD_VAR 0 4
45460: PPUSH
45461: LD_VAR 0 5
45465: PPUSH
45466: LD_VAR 0 1
45470: PPUSH
45471: CALL_OW 248
45475: PPUSH
45476: LD_INT 0
45478: PPUSH
45479: CALL 45971 0 6
45483: ST_TO_ADDR
// if not hexes then
45484: LD_VAR 0 12
45488: NOT
45489: IFFALSE 45493
// exit ;
45491: GO 45966
// hex := GetHexInfo ( x , y ) ;
45493: LD_ADDR_VAR 0 15
45497: PUSH
45498: LD_VAR 0 3
45502: PPUSH
45503: LD_VAR 0 4
45507: PPUSH
45508: CALL_OW 546
45512: ST_TO_ADDR
// if hex [ 1 ] then
45513: LD_VAR 0 15
45517: PUSH
45518: LD_INT 1
45520: ARRAY
45521: IFFALSE 45525
// exit ;
45523: GO 45966
// height := hex [ 2 ] ;
45525: LD_ADDR_VAR 0 13
45529: PUSH
45530: LD_VAR 0 15
45534: PUSH
45535: LD_INT 2
45537: ARRAY
45538: ST_TO_ADDR
// for i = 1 to hexes do
45539: LD_ADDR_VAR 0 7
45543: PUSH
45544: DOUBLE
45545: LD_INT 1
45547: DEC
45548: ST_TO_ADDR
45549: LD_VAR 0 12
45553: PUSH
45554: FOR_TO
45555: IFFALSE 45885
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45557: LD_VAR 0 12
45561: PUSH
45562: LD_VAR 0 7
45566: ARRAY
45567: PUSH
45568: LD_INT 1
45570: ARRAY
45571: PPUSH
45572: LD_VAR 0 12
45576: PUSH
45577: LD_VAR 0 7
45581: ARRAY
45582: PUSH
45583: LD_INT 2
45585: ARRAY
45586: PPUSH
45587: CALL_OW 488
45591: NOT
45592: PUSH
45593: LD_VAR 0 12
45597: PUSH
45598: LD_VAR 0 7
45602: ARRAY
45603: PUSH
45604: LD_INT 1
45606: ARRAY
45607: PPUSH
45608: LD_VAR 0 12
45612: PUSH
45613: LD_VAR 0 7
45617: ARRAY
45618: PUSH
45619: LD_INT 2
45621: ARRAY
45622: PPUSH
45623: CALL_OW 428
45627: PUSH
45628: LD_INT 0
45630: GREATER
45631: OR
45632: PUSH
45633: LD_VAR 0 12
45637: PUSH
45638: LD_VAR 0 7
45642: ARRAY
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: PPUSH
45648: LD_VAR 0 12
45652: PUSH
45653: LD_VAR 0 7
45657: ARRAY
45658: PUSH
45659: LD_INT 2
45661: ARRAY
45662: PPUSH
45663: CALL_OW 351
45667: OR
45668: IFFALSE 45674
// exit ;
45670: POP
45671: POP
45672: GO 45966
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45674: LD_ADDR_VAR 0 8
45678: PUSH
45679: LD_VAR 0 12
45683: PUSH
45684: LD_VAR 0 7
45688: ARRAY
45689: PUSH
45690: LD_INT 1
45692: ARRAY
45693: PPUSH
45694: LD_VAR 0 12
45698: PUSH
45699: LD_VAR 0 7
45703: ARRAY
45704: PUSH
45705: LD_INT 2
45707: ARRAY
45708: PPUSH
45709: CALL_OW 546
45713: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45714: LD_VAR 0 8
45718: PUSH
45719: LD_INT 1
45721: ARRAY
45722: PUSH
45723: LD_VAR 0 8
45727: PUSH
45728: LD_INT 2
45730: ARRAY
45731: PUSH
45732: LD_VAR 0 13
45736: PUSH
45737: LD_INT 2
45739: PLUS
45740: GREATER
45741: OR
45742: PUSH
45743: LD_VAR 0 8
45747: PUSH
45748: LD_INT 2
45750: ARRAY
45751: PUSH
45752: LD_VAR 0 13
45756: PUSH
45757: LD_INT 2
45759: MINUS
45760: LESS
45761: OR
45762: PUSH
45763: LD_VAR 0 8
45767: PUSH
45768: LD_INT 3
45770: ARRAY
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 8
45777: PUSH
45778: LD_INT 9
45780: PUSH
45781: LD_INT 10
45783: PUSH
45784: LD_INT 11
45786: PUSH
45787: LD_INT 12
45789: PUSH
45790: LD_INT 13
45792: PUSH
45793: LD_INT 16
45795: PUSH
45796: LD_INT 17
45798: PUSH
45799: LD_INT 18
45801: PUSH
45802: LD_INT 19
45804: PUSH
45805: LD_INT 20
45807: PUSH
45808: LD_INT 21
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: IN
45826: NOT
45827: OR
45828: PUSH
45829: LD_VAR 0 8
45833: PUSH
45834: LD_INT 5
45836: ARRAY
45837: NOT
45838: OR
45839: PUSH
45840: LD_VAR 0 8
45844: PUSH
45845: LD_INT 6
45847: ARRAY
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 7
45857: PUSH
45858: LD_INT 9
45860: PUSH
45861: LD_INT 10
45863: PUSH
45864: LD_INT 11
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: IN
45875: NOT
45876: OR
45877: IFFALSE 45883
// exit ;
45879: POP
45880: POP
45881: GO 45966
// end ;
45883: GO 45554
45885: POP
45886: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45887: LD_VAR 0 9
45891: PPUSH
45892: LD_VAR 0 3
45896: PPUSH
45897: LD_VAR 0 4
45901: PPUSH
45902: LD_INT 20
45904: PPUSH
45905: CALL 37912 0 4
45909: PUSH
45910: LD_INT 4
45912: ARRAY
45913: IFFALSE 45917
// exit ;
45915: GO 45966
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45917: LD_VAR 0 2
45921: PUSH
45922: LD_INT 29
45924: PUSH
45925: LD_INT 30
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: IN
45932: PUSH
45933: LD_VAR 0 3
45937: PPUSH
45938: LD_VAR 0 4
45942: PPUSH
45943: LD_VAR 0 9
45947: PPUSH
45948: CALL_OW 440
45952: NOT
45953: AND
45954: IFFALSE 45958
// exit ;
45956: GO 45966
// result := true ;
45958: LD_ADDR_VAR 0 6
45962: PUSH
45963: LD_INT 1
45965: ST_TO_ADDR
// end ;
45966: LD_VAR 0 6
45970: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45971: LD_INT 0
45973: PPUSH
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
// result = [ ] ;
46031: LD_ADDR_VAR 0 7
46035: PUSH
46036: EMPTY
46037: ST_TO_ADDR
// temp_list = [ ] ;
46038: LD_ADDR_VAR 0 9
46042: PUSH
46043: EMPTY
46044: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46045: LD_VAR 0 4
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: LD_INT 4
46064: PUSH
46065: LD_INT 5
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: IN
46076: NOT
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: IN
46093: PUSH
46094: LD_VAR 0 5
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: IN
46113: NOT
46114: AND
46115: OR
46116: IFFALSE 46120
// exit ;
46118: GO 64511
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46120: LD_VAR 0 1
46124: PUSH
46125: LD_INT 6
46127: PUSH
46128: LD_INT 7
46130: PUSH
46131: LD_INT 8
46133: PUSH
46134: LD_INT 13
46136: PUSH
46137: LD_INT 12
46139: PUSH
46140: LD_INT 15
46142: PUSH
46143: LD_INT 11
46145: PUSH
46146: LD_INT 14
46148: PUSH
46149: LD_INT 10
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: IN
46163: IFFALSE 46173
// btype = b_lab ;
46165: LD_ADDR_VAR 0 1
46169: PUSH
46170: LD_INT 6
46172: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46173: LD_VAR 0 6
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: IN
46192: NOT
46193: PUSH
46194: LD_VAR 0 1
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 6
46213: PUSH
46214: LD_INT 36
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: LD_INT 5
46222: PUSH
46223: LD_INT 31
46225: PUSH
46226: LD_INT 32
46228: PUSH
46229: LD_INT 33
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: IN
46245: NOT
46246: PUSH
46247: LD_VAR 0 6
46251: PUSH
46252: LD_INT 1
46254: EQUAL
46255: AND
46256: OR
46257: PUSH
46258: LD_VAR 0 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: IN
46273: NOT
46274: PUSH
46275: LD_VAR 0 6
46279: PUSH
46280: LD_INT 2
46282: EQUAL
46283: AND
46284: OR
46285: IFFALSE 46295
// mode = 0 ;
46287: LD_ADDR_VAR 0 6
46291: PUSH
46292: LD_INT 0
46294: ST_TO_ADDR
// case mode of 0 :
46295: LD_VAR 0 6
46299: PUSH
46300: LD_INT 0
46302: DOUBLE
46303: EQUAL
46304: IFTRUE 46308
46306: GO 57761
46308: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46309: LD_ADDR_VAR 0 11
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46502: LD_ADDR_VAR 0 12
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46698: LD_ADDR_VAR 0 13
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46897: LD_ADDR_VAR 0 14
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47093: LD_ADDR_VAR 0 15
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47286: LD_ADDR_VAR 0 16
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47479: LD_ADDR_VAR 0 17
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47709: LD_ADDR_VAR 0 18
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47939: LD_ADDR_VAR 0 19
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48169: LD_ADDR_VAR 0 20
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48399: LD_ADDR_VAR 0 21
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48629: LD_ADDR_VAR 0 22
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48859: LD_ADDR_VAR 0 23
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49139: LD_ADDR_VAR 0 24
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49415: LD_ADDR_VAR 0 25
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49689: LD_ADDR_VAR 0 26
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49965: LD_ADDR_VAR 0 27
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50245: LD_ADDR_VAR 0 28
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50527: LD_ADDR_VAR 0 29
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50806: LD_ADDR_VAR 0 30
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51084: LD_ADDR_VAR 0 31
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51362: LD_ADDR_VAR 0 32
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51640: LD_ADDR_VAR 0 33
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51919: LD_ADDR_VAR 0 34
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52199: LD_ADDR_VAR 0 35
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52311: LD_ADDR_VAR 0 36
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52423: LD_ADDR_VAR 0 37
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52535: LD_ADDR_VAR 0 38
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52647: LD_ADDR_VAR 0 39
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52759: LD_ADDR_VAR 0 40
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52871: LD_ADDR_VAR 0 41
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53221: LD_ADDR_VAR 0 42
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 3
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53571: LD_ADDR_VAR 0 43
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53919: LD_ADDR_VAR 0 44
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54269: LD_ADDR_VAR 0 45
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 3
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54619: LD_ADDR_VAR 0 46
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54967: LD_ADDR_VAR 0 47
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55118: LD_ADDR_VAR 0 48
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55265: LD_ADDR_VAR 0 49
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55409: LD_ADDR_VAR 0 50
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55553: LD_ADDR_VAR 0 51
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55700: LD_ADDR_VAR 0 52
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55851: LD_ADDR_VAR 0 53
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56081: LD_ADDR_VAR 0 54
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56311: LD_ADDR_VAR 0 55
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56541: LD_ADDR_VAR 0 56
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56771: LD_ADDR_VAR 0 57
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57001: LD_ADDR_VAR 0 58
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57231: LD_ADDR_VAR 0 59
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57319: LD_ADDR_VAR 0 60
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57407: LD_ADDR_VAR 0 61
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57495: LD_ADDR_VAR 0 62
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57583: LD_ADDR_VAR 0 63
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57671: LD_ADDR_VAR 0 64
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// end ; 1 :
57759: GO 63656
57761: LD_INT 1
57763: DOUBLE
57764: EQUAL
57765: IFTRUE 57769
57767: GO 60392
57769: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57770: LD_ADDR_VAR 0 11
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57814: LD_ADDR_VAR 0 12
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57855: LD_ADDR_VAR 0 13
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57895: LD_ADDR_VAR 0 14
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57936: LD_ADDR_VAR 0 15
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57980: LD_ADDR_VAR 0 16
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58026: LD_ADDR_VAR 0 17
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58070: LD_ADDR_VAR 0 18
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58111: LD_ADDR_VAR 0 19
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58151: LD_ADDR_VAR 0 20
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58192: LD_ADDR_VAR 0 21
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58236: LD_ADDR_VAR 0 22
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58282: LD_ADDR_VAR 0 23
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 4
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58326: LD_ADDR_VAR 0 24
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58367: LD_ADDR_VAR 0 25
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 4
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58407: LD_ADDR_VAR 0 26
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58448: LD_ADDR_VAR 0 27
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58492: LD_ADDR_VAR 0 28
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 4
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58538: LD_ADDR_VAR 0 29
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 3
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 5
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 5
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 4
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 6
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 6
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 5
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58693: LD_ADDR_VAR 0 30
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 5
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 6
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 6
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58836: LD_ADDR_VAR 0 31
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 4
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 5
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 5
58913: PUSH
58914: LD_INT 5
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 6
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 6
58943: PUSH
58944: LD_INT 6
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 5
58953: PUSH
58954: LD_INT 6
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58975: LD_ADDR_VAR 0 32
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 3
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 5
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 5
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 4
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 6
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 6
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 5
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59118: LD_ADDR_VAR 0 33
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 4
59170: NEG
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 4
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: NEG
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 5
59204: NEG
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 5
59215: NEG
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 5
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 6
59238: NEG
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 6
59249: NEG
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59273: LD_ADDR_VAR 0 34
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: LD_INT 4
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 4
59328: NEG
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 4
59340: NEG
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: NEG
59353: PUSH
59354: LD_INT 5
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 5
59364: NEG
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 5
59376: NEG
59377: PUSH
59378: LD_INT 5
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 5
59388: NEG
59389: PUSH
59390: LD_INT 6
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 6
59400: NEG
59401: PUSH
59402: LD_INT 5
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 6
59412: NEG
59413: PUSH
59414: LD_INT 6
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59436: LD_ADDR_VAR 0 41
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59480: LD_ADDR_VAR 0 42
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59521: LD_ADDR_VAR 0 43
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59561: LD_ADDR_VAR 0 44
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59602: LD_ADDR_VAR 0 45
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59646: LD_ADDR_VAR 0 46
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59692: LD_ADDR_VAR 0 47
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 3
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59725: LD_ADDR_VAR 0 48
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59756: LD_ADDR_VAR 0 49
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59785: LD_ADDR_VAR 0 50
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59814: LD_ADDR_VAR 0 51
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59845: LD_ADDR_VAR 0 52
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59878: LD_ADDR_VAR 0 53
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59922: LD_ADDR_VAR 0 54
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59963: LD_ADDR_VAR 0 55
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60003: LD_ADDR_VAR 0 56
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: LIST
60043: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60044: LD_ADDR_VAR 0 57
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60088: LD_ADDR_VAR 0 58
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60134: LD_ADDR_VAR 0 59
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60178: LD_ADDR_VAR 0 60
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60219: LD_ADDR_VAR 0 61
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60259: LD_ADDR_VAR 0 62
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60300: LD_ADDR_VAR 0 63
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60344: LD_ADDR_VAR 0 64
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: ST_TO_ADDR
// end ; 2 :
60390: GO 63656
60392: LD_INT 2
60394: DOUBLE
60395: EQUAL
60396: IFTRUE 60400
60398: GO 63655
60400: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60401: LD_ADDR_VAR 0 29
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 5
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 5
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 3
60822: NEG
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 4
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 5
60846: NEG
60847: PUSH
60848: LD_INT 4
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 5
60858: NEG
60859: PUSH
60860: LD_INT 5
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 5
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 5
60882: NEG
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60939: LD_ADDR_VAR 0 30
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: LD_INT 5
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 4
60986: PUSH
60987: LD_INT 5
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: LD_INT 4
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 5
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 4
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 4
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 5
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 5
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: LD_INT 3
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 4
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 3
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 4
61303: NEG
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: NEG
61316: PUSH
61317: LD_INT 4
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 4
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 5
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 5
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 5
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61486: LD_ADDR_VAR 0 31
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 4
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 4
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 5
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 5
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 4
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 4
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: NEG
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 4
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 5
61748: NEG
61749: PUSH
61750: LD_INT 4
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 5
61760: NEG
61761: PUSH
61762: LD_INT 5
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: LD_INT 5
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 5
61784: NEG
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 4
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 4
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 4
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 5
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 5
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62036: LD_ADDR_VAR 0 32
62040: PUSH
62041: LD_INT 4
62043: NEG
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 4
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 4
62088: NEG
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 5
62099: NEG
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 5
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 5
62122: NEG
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 4
62217: NEG
62218: PUSH
62219: LD_INT 4
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: LD_INT 4
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 4
62241: NEG
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 5
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 4
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: LD_INT 3
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 4
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 5
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: LD_INT 5
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 4
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 4
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 4
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 5
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 4
62488: PUSH
62489: LD_INT 5
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 5
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62583: LD_ADDR_VAR 0 33
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: LD_INT 5
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 4
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 4
62638: NEG
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 5
62650: NEG
62651: PUSH
62652: LD_INT 4
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 5
62662: NEG
62663: PUSH
62664: LD_INT 5
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: LD_INT 5
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 5
62686: NEG
62687: PUSH
62688: LD_INT 3
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 4
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 3
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 4
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 4
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 4
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 5
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 4
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: LD_INT 5
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 5
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 4
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 5
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63121: LD_ADDR_VAR 0 34
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 4
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 5
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 4
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 3
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 4
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: LD_INT 5
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 5
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 3
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 4
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 2
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 4
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: LD_INT 4
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 3
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 5
63343: PUSH
63344: LD_INT 4
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 5
63353: PUSH
63354: LD_INT 5
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 4
63363: PUSH
63364: LD_INT 5
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: LD_INT 4
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 3
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 5
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: LD_INT 5
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 4
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 4
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: LD_INT 4
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: NEG
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 4
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: NEG
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: NEG
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 5
63562: NEG
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 5
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 5
63585: NEG
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 3
63597: NEG
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// end ; end ;
63653: GO 63656
63655: POP
// case btype of b_depot , b_warehouse :
63656: LD_VAR 0 1
63660: PUSH
63661: LD_INT 0
63663: DOUBLE
63664: EQUAL
63665: IFTRUE 63675
63667: LD_INT 1
63669: DOUBLE
63670: EQUAL
63671: IFTRUE 63675
63673: GO 63876
63675: POP
// case nation of nation_american :
63676: LD_VAR 0 5
63680: PUSH
63681: LD_INT 1
63683: DOUBLE
63684: EQUAL
63685: IFTRUE 63689
63687: GO 63745
63689: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63690: LD_ADDR_VAR 0 9
63694: PUSH
63695: LD_VAR 0 11
63699: PUSH
63700: LD_VAR 0 12
63704: PUSH
63705: LD_VAR 0 13
63709: PUSH
63710: LD_VAR 0 14
63714: PUSH
63715: LD_VAR 0 15
63719: PUSH
63720: LD_VAR 0 16
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: PUSH
63733: LD_VAR 0 4
63737: PUSH
63738: LD_INT 1
63740: PLUS
63741: ARRAY
63742: ST_TO_ADDR
63743: GO 63874
63745: LD_INT 2
63747: DOUBLE
63748: EQUAL
63749: IFTRUE 63753
63751: GO 63809
63753: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63754: LD_ADDR_VAR 0 9
63758: PUSH
63759: LD_VAR 0 17
63763: PUSH
63764: LD_VAR 0 18
63768: PUSH
63769: LD_VAR 0 19
63773: PUSH
63774: LD_VAR 0 20
63778: PUSH
63779: LD_VAR 0 21
63783: PUSH
63784: LD_VAR 0 22
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: PUSH
63797: LD_VAR 0 4
63801: PUSH
63802: LD_INT 1
63804: PLUS
63805: ARRAY
63806: ST_TO_ADDR
63807: GO 63874
63809: LD_INT 3
63811: DOUBLE
63812: EQUAL
63813: IFTRUE 63817
63815: GO 63873
63817: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63818: LD_ADDR_VAR 0 9
63822: PUSH
63823: LD_VAR 0 23
63827: PUSH
63828: LD_VAR 0 24
63832: PUSH
63833: LD_VAR 0 25
63837: PUSH
63838: LD_VAR 0 26
63842: PUSH
63843: LD_VAR 0 27
63847: PUSH
63848: LD_VAR 0 28
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: PUSH
63861: LD_VAR 0 4
63865: PUSH
63866: LD_INT 1
63868: PLUS
63869: ARRAY
63870: ST_TO_ADDR
63871: GO 63874
63873: POP
63874: GO 64429
63876: LD_INT 2
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63890
63882: LD_INT 3
63884: DOUBLE
63885: EQUAL
63886: IFTRUE 63890
63888: GO 63946
63890: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63891: LD_ADDR_VAR 0 9
63895: PUSH
63896: LD_VAR 0 29
63900: PUSH
63901: LD_VAR 0 30
63905: PUSH
63906: LD_VAR 0 31
63910: PUSH
63911: LD_VAR 0 32
63915: PUSH
63916: LD_VAR 0 33
63920: PUSH
63921: LD_VAR 0 34
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: PUSH
63934: LD_VAR 0 4
63938: PUSH
63939: LD_INT 1
63941: PLUS
63942: ARRAY
63943: ST_TO_ADDR
63944: GO 64429
63946: LD_INT 16
63948: DOUBLE
63949: EQUAL
63950: IFTRUE 64008
63952: LD_INT 17
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 64008
63958: LD_INT 18
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 64008
63964: LD_INT 19
63966: DOUBLE
63967: EQUAL
63968: IFTRUE 64008
63970: LD_INT 22
63972: DOUBLE
63973: EQUAL
63974: IFTRUE 64008
63976: LD_INT 20
63978: DOUBLE
63979: EQUAL
63980: IFTRUE 64008
63982: LD_INT 21
63984: DOUBLE
63985: EQUAL
63986: IFTRUE 64008
63988: LD_INT 23
63990: DOUBLE
63991: EQUAL
63992: IFTRUE 64008
63994: LD_INT 24
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64008
64000: LD_INT 25
64002: DOUBLE
64003: EQUAL
64004: IFTRUE 64008
64006: GO 64064
64008: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64009: LD_ADDR_VAR 0 9
64013: PUSH
64014: LD_VAR 0 35
64018: PUSH
64019: LD_VAR 0 36
64023: PUSH
64024: LD_VAR 0 37
64028: PUSH
64029: LD_VAR 0 38
64033: PUSH
64034: LD_VAR 0 39
64038: PUSH
64039: LD_VAR 0 40
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: PUSH
64052: LD_VAR 0 4
64056: PUSH
64057: LD_INT 1
64059: PLUS
64060: ARRAY
64061: ST_TO_ADDR
64062: GO 64429
64064: LD_INT 6
64066: DOUBLE
64067: EQUAL
64068: IFTRUE 64120
64070: LD_INT 7
64072: DOUBLE
64073: EQUAL
64074: IFTRUE 64120
64076: LD_INT 8
64078: DOUBLE
64079: EQUAL
64080: IFTRUE 64120
64082: LD_INT 13
64084: DOUBLE
64085: EQUAL
64086: IFTRUE 64120
64088: LD_INT 12
64090: DOUBLE
64091: EQUAL
64092: IFTRUE 64120
64094: LD_INT 15
64096: DOUBLE
64097: EQUAL
64098: IFTRUE 64120
64100: LD_INT 11
64102: DOUBLE
64103: EQUAL
64104: IFTRUE 64120
64106: LD_INT 14
64108: DOUBLE
64109: EQUAL
64110: IFTRUE 64120
64112: LD_INT 10
64114: DOUBLE
64115: EQUAL
64116: IFTRUE 64120
64118: GO 64176
64120: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64121: LD_ADDR_VAR 0 9
64125: PUSH
64126: LD_VAR 0 41
64130: PUSH
64131: LD_VAR 0 42
64135: PUSH
64136: LD_VAR 0 43
64140: PUSH
64141: LD_VAR 0 44
64145: PUSH
64146: LD_VAR 0 45
64150: PUSH
64151: LD_VAR 0 46
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_VAR 0 4
64168: PUSH
64169: LD_INT 1
64171: PLUS
64172: ARRAY
64173: ST_TO_ADDR
64174: GO 64429
64176: LD_INT 36
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64184
64182: GO 64240
64184: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64185: LD_ADDR_VAR 0 9
64189: PUSH
64190: LD_VAR 0 47
64194: PUSH
64195: LD_VAR 0 48
64199: PUSH
64200: LD_VAR 0 49
64204: PUSH
64205: LD_VAR 0 50
64209: PUSH
64210: LD_VAR 0 51
64214: PUSH
64215: LD_VAR 0 52
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: PUSH
64228: LD_VAR 0 4
64232: PUSH
64233: LD_INT 1
64235: PLUS
64236: ARRAY
64237: ST_TO_ADDR
64238: GO 64429
64240: LD_INT 4
64242: DOUBLE
64243: EQUAL
64244: IFTRUE 64266
64246: LD_INT 5
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64266
64252: LD_INT 34
64254: DOUBLE
64255: EQUAL
64256: IFTRUE 64266
64258: LD_INT 37
64260: DOUBLE
64261: EQUAL
64262: IFTRUE 64266
64264: GO 64322
64266: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64267: LD_ADDR_VAR 0 9
64271: PUSH
64272: LD_VAR 0 53
64276: PUSH
64277: LD_VAR 0 54
64281: PUSH
64282: LD_VAR 0 55
64286: PUSH
64287: LD_VAR 0 56
64291: PUSH
64292: LD_VAR 0 57
64296: PUSH
64297: LD_VAR 0 58
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: LD_VAR 0 4
64314: PUSH
64315: LD_INT 1
64317: PLUS
64318: ARRAY
64319: ST_TO_ADDR
64320: GO 64429
64322: LD_INT 31
64324: DOUBLE
64325: EQUAL
64326: IFTRUE 64372
64328: LD_INT 32
64330: DOUBLE
64331: EQUAL
64332: IFTRUE 64372
64334: LD_INT 33
64336: DOUBLE
64337: EQUAL
64338: IFTRUE 64372
64340: LD_INT 27
64342: DOUBLE
64343: EQUAL
64344: IFTRUE 64372
64346: LD_INT 26
64348: DOUBLE
64349: EQUAL
64350: IFTRUE 64372
64352: LD_INT 28
64354: DOUBLE
64355: EQUAL
64356: IFTRUE 64372
64358: LD_INT 29
64360: DOUBLE
64361: EQUAL
64362: IFTRUE 64372
64364: LD_INT 30
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64372
64370: GO 64428
64372: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64373: LD_ADDR_VAR 0 9
64377: PUSH
64378: LD_VAR 0 59
64382: PUSH
64383: LD_VAR 0 60
64387: PUSH
64388: LD_VAR 0 61
64392: PUSH
64393: LD_VAR 0 62
64397: PUSH
64398: LD_VAR 0 63
64402: PUSH
64403: LD_VAR 0 64
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: PUSH
64416: LD_VAR 0 4
64420: PUSH
64421: LD_INT 1
64423: PLUS
64424: ARRAY
64425: ST_TO_ADDR
64426: GO 64429
64428: POP
// temp_list2 = [ ] ;
64429: LD_ADDR_VAR 0 10
64433: PUSH
64434: EMPTY
64435: ST_TO_ADDR
// for i in temp_list do
64436: LD_ADDR_VAR 0 8
64440: PUSH
64441: LD_VAR 0 9
64445: PUSH
64446: FOR_IN
64447: IFFALSE 64499
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64449: LD_ADDR_VAR 0 10
64453: PUSH
64454: LD_VAR 0 10
64458: PUSH
64459: LD_VAR 0 8
64463: PUSH
64464: LD_INT 1
64466: ARRAY
64467: PUSH
64468: LD_VAR 0 2
64472: PLUS
64473: PUSH
64474: LD_VAR 0 8
64478: PUSH
64479: LD_INT 2
64481: ARRAY
64482: PUSH
64483: LD_VAR 0 3
64487: PLUS
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: EMPTY
64494: LIST
64495: ADD
64496: ST_TO_ADDR
64497: GO 64446
64499: POP
64500: POP
// result = temp_list2 ;
64501: LD_ADDR_VAR 0 7
64505: PUSH
64506: LD_VAR 0 10
64510: ST_TO_ADDR
// end ;
64511: LD_VAR 0 7
64515: RET
// export function EnemyInRange ( unit , dist ) ; begin
64516: LD_INT 0
64518: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 255
64533: PPUSH
64534: LD_VAR 0 1
64538: PPUSH
64539: CALL_OW 250
64543: PPUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 251
64553: PPUSH
64554: LD_VAR 0 2
64558: PPUSH
64559: CALL 37912 0 4
64563: PUSH
64564: LD_INT 4
64566: ARRAY
64567: ST_TO_ADDR
// end ;
64568: LD_VAR 0 3
64572: RET
// export function PlayerSeeMe ( unit ) ; begin
64573: LD_INT 0
64575: PPUSH
// result := See ( your_side , unit ) ;
64576: LD_ADDR_VAR 0 2
64580: PUSH
64581: LD_OWVAR 2
64585: PPUSH
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 292
64595: ST_TO_ADDR
// end ;
64596: LD_VAR 0 2
64600: RET
// export function ReverseDir ( unit ) ; begin
64601: LD_INT 0
64603: PPUSH
// if not unit then
64604: LD_VAR 0 1
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 64636
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64613: LD_ADDR_VAR 0 2
64617: PUSH
64618: LD_VAR 0 1
64622: PPUSH
64623: CALL_OW 254
64627: PUSH
64628: LD_INT 3
64630: PLUS
64631: PUSH
64632: LD_INT 6
64634: MOD
64635: ST_TO_ADDR
// end ;
64636: LD_VAR 0 2
64640: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64641: LD_INT 0
64643: PPUSH
64644: PPUSH
64645: PPUSH
64646: PPUSH
64647: PPUSH
// if not hexes then
64648: LD_VAR 0 2
64652: NOT
64653: IFFALSE 64657
// exit ;
64655: GO 64805
// dist := 9999 ;
64657: LD_ADDR_VAR 0 5
64661: PUSH
64662: LD_INT 9999
64664: ST_TO_ADDR
// for i = 1 to hexes do
64665: LD_ADDR_VAR 0 4
64669: PUSH
64670: DOUBLE
64671: LD_INT 1
64673: DEC
64674: ST_TO_ADDR
64675: LD_VAR 0 2
64679: PUSH
64680: FOR_TO
64681: IFFALSE 64793
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64683: LD_VAR 0 1
64687: PPUSH
64688: LD_VAR 0 2
64692: PUSH
64693: LD_VAR 0 4
64697: ARRAY
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PPUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_VAR 0 4
64712: ARRAY
64713: PUSH
64714: LD_INT 2
64716: ARRAY
64717: PPUSH
64718: CALL_OW 297
64722: PUSH
64723: LD_VAR 0 5
64727: LESS
64728: IFFALSE 64791
// begin hex := hexes [ i ] ;
64730: LD_ADDR_VAR 0 7
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: LD_VAR 0 4
64744: ARRAY
64745: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64746: LD_ADDR_VAR 0 5
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_VAR 0 4
64765: ARRAY
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 2
64775: PUSH
64776: LD_VAR 0 4
64780: ARRAY
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: PPUSH
64786: CALL_OW 297
64790: ST_TO_ADDR
// end ; end ;
64791: GO 64680
64793: POP
64794: POP
// result := hex ;
64795: LD_ADDR_VAR 0 3
64799: PUSH
64800: LD_VAR 0 7
64804: ST_TO_ADDR
// end ;
64805: LD_VAR 0 3
64809: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64810: LD_INT 0
64812: PPUSH
64813: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64814: LD_VAR 0 1
64818: NOT
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_INT 21
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 23
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PPUSH
64849: CALL_OW 69
64853: IN
64854: NOT
64855: OR
64856: IFFALSE 64860
// exit ;
64858: GO 64907
// for i = 1 to 3 do
64860: LD_ADDR_VAR 0 3
64864: PUSH
64865: DOUBLE
64866: LD_INT 1
64868: DEC
64869: ST_TO_ADDR
64870: LD_INT 3
64872: PUSH
64873: FOR_TO
64874: IFFALSE 64905
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 250
64885: PPUSH
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL_OW 251
64895: PPUSH
64896: LD_INT 1
64898: PPUSH
64899: CALL_OW 453
64903: GO 64873
64905: POP
64906: POP
// end ;
64907: LD_VAR 0 2
64911: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64912: LD_INT 0
64914: PPUSH
64915: PPUSH
64916: PPUSH
64917: PPUSH
64918: PPUSH
64919: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64920: LD_VAR 0 1
64924: NOT
64925: PUSH
64926: LD_VAR 0 2
64930: NOT
64931: OR
64932: PUSH
64933: LD_VAR 0 1
64937: PPUSH
64938: CALL_OW 314
64942: OR
64943: IFFALSE 64947
// exit ;
64945: GO 65388
// x := GetX ( enemy_unit ) ;
64947: LD_ADDR_VAR 0 7
64951: PUSH
64952: LD_VAR 0 2
64956: PPUSH
64957: CALL_OW 250
64961: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64962: LD_ADDR_VAR 0 8
64966: PUSH
64967: LD_VAR 0 2
64971: PPUSH
64972: CALL_OW 251
64976: ST_TO_ADDR
// if not x or not y then
64977: LD_VAR 0 7
64981: NOT
64982: PUSH
64983: LD_VAR 0 8
64987: NOT
64988: OR
64989: IFFALSE 64993
// exit ;
64991: GO 65388
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64993: LD_ADDR_VAR 0 6
64997: PUSH
64998: LD_VAR 0 7
65002: PPUSH
65003: LD_INT 0
65005: PPUSH
65006: LD_INT 4
65008: PPUSH
65009: CALL_OW 272
65013: PUSH
65014: LD_VAR 0 8
65018: PPUSH
65019: LD_INT 0
65021: PPUSH
65022: LD_INT 4
65024: PPUSH
65025: CALL_OW 273
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_VAR 0 7
65038: PPUSH
65039: LD_INT 1
65041: PPUSH
65042: LD_INT 4
65044: PPUSH
65045: CALL_OW 272
65049: PUSH
65050: LD_VAR 0 8
65054: PPUSH
65055: LD_INT 1
65057: PPUSH
65058: LD_INT 4
65060: PPUSH
65061: CALL_OW 273
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_VAR 0 7
65074: PPUSH
65075: LD_INT 2
65077: PPUSH
65078: LD_INT 4
65080: PPUSH
65081: CALL_OW 272
65085: PUSH
65086: LD_VAR 0 8
65090: PPUSH
65091: LD_INT 2
65093: PPUSH
65094: LD_INT 4
65096: PPUSH
65097: CALL_OW 273
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_VAR 0 7
65110: PPUSH
65111: LD_INT 3
65113: PPUSH
65114: LD_INT 4
65116: PPUSH
65117: CALL_OW 272
65121: PUSH
65122: LD_VAR 0 8
65126: PPUSH
65127: LD_INT 3
65129: PPUSH
65130: LD_INT 4
65132: PPUSH
65133: CALL_OW 273
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_VAR 0 7
65146: PPUSH
65147: LD_INT 4
65149: PPUSH
65150: LD_INT 4
65152: PPUSH
65153: CALL_OW 272
65157: PUSH
65158: LD_VAR 0 8
65162: PPUSH
65163: LD_INT 4
65165: PPUSH
65166: LD_INT 4
65168: PPUSH
65169: CALL_OW 273
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_VAR 0 7
65182: PPUSH
65183: LD_INT 5
65185: PPUSH
65186: LD_INT 4
65188: PPUSH
65189: CALL_OW 272
65193: PUSH
65194: LD_VAR 0 8
65198: PPUSH
65199: LD_INT 5
65201: PPUSH
65202: LD_INT 4
65204: PPUSH
65205: CALL_OW 273
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: ST_TO_ADDR
// for i = tmp downto 1 do
65222: LD_ADDR_VAR 0 4
65226: PUSH
65227: DOUBLE
65228: LD_VAR 0 6
65232: INC
65233: ST_TO_ADDR
65234: LD_INT 1
65236: PUSH
65237: FOR_DOWNTO
65238: IFFALSE 65339
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65240: LD_VAR 0 6
65244: PUSH
65245: LD_VAR 0 4
65249: ARRAY
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: PPUSH
65255: LD_VAR 0 6
65259: PUSH
65260: LD_VAR 0 4
65264: ARRAY
65265: PUSH
65266: LD_INT 2
65268: ARRAY
65269: PPUSH
65270: CALL_OW 488
65274: NOT
65275: PUSH
65276: LD_VAR 0 6
65280: PUSH
65281: LD_VAR 0 4
65285: ARRAY
65286: PUSH
65287: LD_INT 1
65289: ARRAY
65290: PPUSH
65291: LD_VAR 0 6
65295: PUSH
65296: LD_VAR 0 4
65300: ARRAY
65301: PUSH
65302: LD_INT 2
65304: ARRAY
65305: PPUSH
65306: CALL_OW 428
65310: PUSH
65311: LD_INT 0
65313: NONEQUAL
65314: OR
65315: IFFALSE 65337
// tmp := Delete ( tmp , i ) ;
65317: LD_ADDR_VAR 0 6
65321: PUSH
65322: LD_VAR 0 6
65326: PPUSH
65327: LD_VAR 0 4
65331: PPUSH
65332: CALL_OW 3
65336: ST_TO_ADDR
65337: GO 65237
65339: POP
65340: POP
// j := GetClosestHex ( unit , tmp ) ;
65341: LD_ADDR_VAR 0 5
65345: PUSH
65346: LD_VAR 0 1
65350: PPUSH
65351: LD_VAR 0 6
65355: PPUSH
65356: CALL 64641 0 2
65360: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65361: LD_VAR 0 1
65365: PPUSH
65366: LD_VAR 0 5
65370: PUSH
65371: LD_INT 1
65373: ARRAY
65374: PPUSH
65375: LD_VAR 0 5
65379: PUSH
65380: LD_INT 2
65382: ARRAY
65383: PPUSH
65384: CALL_OW 111
// end ;
65388: LD_VAR 0 3
65392: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65393: LD_INT 0
65395: PPUSH
65396: PPUSH
65397: PPUSH
// uc_side = 0 ;
65398: LD_ADDR_OWVAR 20
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
// uc_nation = 0 ;
65406: LD_ADDR_OWVAR 21
65410: PUSH
65411: LD_INT 0
65413: ST_TO_ADDR
// InitHc_All ( ) ;
65414: CALL_OW 584
// InitVc ;
65418: CALL_OW 20
// if mastodonts then
65422: LD_VAR 0 6
65426: IFFALSE 65493
// for i = 1 to mastodonts do
65428: LD_ADDR_VAR 0 11
65432: PUSH
65433: DOUBLE
65434: LD_INT 1
65436: DEC
65437: ST_TO_ADDR
65438: LD_VAR 0 6
65442: PUSH
65443: FOR_TO
65444: IFFALSE 65491
// begin vc_chassis := 31 ;
65446: LD_ADDR_OWVAR 37
65450: PUSH
65451: LD_INT 31
65453: ST_TO_ADDR
// vc_control := control_rider ;
65454: LD_ADDR_OWVAR 38
65458: PUSH
65459: LD_INT 4
65461: ST_TO_ADDR
// animal := CreateVehicle ;
65462: LD_ADDR_VAR 0 12
65466: PUSH
65467: CALL_OW 45
65471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65472: LD_VAR 0 12
65476: PPUSH
65477: LD_VAR 0 8
65481: PPUSH
65482: LD_INT 0
65484: PPUSH
65485: CALL 67681 0 3
// end ;
65489: GO 65443
65491: POP
65492: POP
// if horses then
65493: LD_VAR 0 5
65497: IFFALSE 65564
// for i = 1 to horses do
65499: LD_ADDR_VAR 0 11
65503: PUSH
65504: DOUBLE
65505: LD_INT 1
65507: DEC
65508: ST_TO_ADDR
65509: LD_VAR 0 5
65513: PUSH
65514: FOR_TO
65515: IFFALSE 65562
// begin hc_class := 21 ;
65517: LD_ADDR_OWVAR 28
65521: PUSH
65522: LD_INT 21
65524: ST_TO_ADDR
// hc_gallery :=  ;
65525: LD_ADDR_OWVAR 33
65529: PUSH
65530: LD_STRING 
65532: ST_TO_ADDR
// animal := CreateHuman ;
65533: LD_ADDR_VAR 0 12
65537: PUSH
65538: CALL_OW 44
65542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65543: LD_VAR 0 12
65547: PPUSH
65548: LD_VAR 0 8
65552: PPUSH
65553: LD_INT 0
65555: PPUSH
65556: CALL 67681 0 3
// end ;
65560: GO 65514
65562: POP
65563: POP
// if birds then
65564: LD_VAR 0 1
65568: IFFALSE 65635
// for i = 1 to birds do
65570: LD_ADDR_VAR 0 11
65574: PUSH
65575: DOUBLE
65576: LD_INT 1
65578: DEC
65579: ST_TO_ADDR
65580: LD_VAR 0 1
65584: PUSH
65585: FOR_TO
65586: IFFALSE 65633
// begin hc_class = 18 ;
65588: LD_ADDR_OWVAR 28
65592: PUSH
65593: LD_INT 18
65595: ST_TO_ADDR
// hc_gallery =  ;
65596: LD_ADDR_OWVAR 33
65600: PUSH
65601: LD_STRING 
65603: ST_TO_ADDR
// animal := CreateHuman ;
65604: LD_ADDR_VAR 0 12
65608: PUSH
65609: CALL_OW 44
65613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65614: LD_VAR 0 12
65618: PPUSH
65619: LD_VAR 0 8
65623: PPUSH
65624: LD_INT 0
65626: PPUSH
65627: CALL 67681 0 3
// end ;
65631: GO 65585
65633: POP
65634: POP
// if tigers then
65635: LD_VAR 0 2
65639: IFFALSE 65723
// for i = 1 to tigers do
65641: LD_ADDR_VAR 0 11
65645: PUSH
65646: DOUBLE
65647: LD_INT 1
65649: DEC
65650: ST_TO_ADDR
65651: LD_VAR 0 2
65655: PUSH
65656: FOR_TO
65657: IFFALSE 65721
// begin hc_class = class_tiger ;
65659: LD_ADDR_OWVAR 28
65663: PUSH
65664: LD_INT 14
65666: ST_TO_ADDR
// hc_gallery =  ;
65667: LD_ADDR_OWVAR 33
65671: PUSH
65672: LD_STRING 
65674: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65675: LD_ADDR_OWVAR 35
65679: PUSH
65680: LD_INT 7
65682: NEG
65683: PPUSH
65684: LD_INT 7
65686: PPUSH
65687: CALL_OW 12
65691: ST_TO_ADDR
// animal := CreateHuman ;
65692: LD_ADDR_VAR 0 12
65696: PUSH
65697: CALL_OW 44
65701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65702: LD_VAR 0 12
65706: PPUSH
65707: LD_VAR 0 8
65711: PPUSH
65712: LD_INT 0
65714: PPUSH
65715: CALL 67681 0 3
// end ;
65719: GO 65656
65721: POP
65722: POP
// if apemans then
65723: LD_VAR 0 3
65727: IFFALSE 65850
// for i = 1 to apemans do
65729: LD_ADDR_VAR 0 11
65733: PUSH
65734: DOUBLE
65735: LD_INT 1
65737: DEC
65738: ST_TO_ADDR
65739: LD_VAR 0 3
65743: PUSH
65744: FOR_TO
65745: IFFALSE 65848
// begin hc_class = class_apeman ;
65747: LD_ADDR_OWVAR 28
65751: PUSH
65752: LD_INT 12
65754: ST_TO_ADDR
// hc_gallery =  ;
65755: LD_ADDR_OWVAR 33
65759: PUSH
65760: LD_STRING 
65762: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65763: LD_ADDR_OWVAR 35
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PPUSH
65772: LD_INT 2
65774: PPUSH
65775: CALL_OW 12
65779: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65780: LD_ADDR_OWVAR 31
65784: PUSH
65785: LD_INT 1
65787: PPUSH
65788: LD_INT 3
65790: PPUSH
65791: CALL_OW 12
65795: PUSH
65796: LD_INT 1
65798: PPUSH
65799: LD_INT 3
65801: PPUSH
65802: CALL_OW 12
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// animal := CreateHuman ;
65819: LD_ADDR_VAR 0 12
65823: PUSH
65824: CALL_OW 44
65828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65829: LD_VAR 0 12
65833: PPUSH
65834: LD_VAR 0 8
65838: PPUSH
65839: LD_INT 0
65841: PPUSH
65842: CALL 67681 0 3
// end ;
65846: GO 65744
65848: POP
65849: POP
// if enchidnas then
65850: LD_VAR 0 4
65854: IFFALSE 65921
// for i = 1 to enchidnas do
65856: LD_ADDR_VAR 0 11
65860: PUSH
65861: DOUBLE
65862: LD_INT 1
65864: DEC
65865: ST_TO_ADDR
65866: LD_VAR 0 4
65870: PUSH
65871: FOR_TO
65872: IFFALSE 65919
// begin hc_class = 13 ;
65874: LD_ADDR_OWVAR 28
65878: PUSH
65879: LD_INT 13
65881: ST_TO_ADDR
// hc_gallery =  ;
65882: LD_ADDR_OWVAR 33
65886: PUSH
65887: LD_STRING 
65889: ST_TO_ADDR
// animal := CreateHuman ;
65890: LD_ADDR_VAR 0 12
65894: PUSH
65895: CALL_OW 44
65899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65900: LD_VAR 0 12
65904: PPUSH
65905: LD_VAR 0 8
65909: PPUSH
65910: LD_INT 0
65912: PPUSH
65913: CALL 67681 0 3
// end ;
65917: GO 65871
65919: POP
65920: POP
// if fishes then
65921: LD_VAR 0 7
65925: IFFALSE 65992
// for i = 1 to fishes do
65927: LD_ADDR_VAR 0 11
65931: PUSH
65932: DOUBLE
65933: LD_INT 1
65935: DEC
65936: ST_TO_ADDR
65937: LD_VAR 0 7
65941: PUSH
65942: FOR_TO
65943: IFFALSE 65990
// begin hc_class = 20 ;
65945: LD_ADDR_OWVAR 28
65949: PUSH
65950: LD_INT 20
65952: ST_TO_ADDR
// hc_gallery =  ;
65953: LD_ADDR_OWVAR 33
65957: PUSH
65958: LD_STRING 
65960: ST_TO_ADDR
// animal := CreateHuman ;
65961: LD_ADDR_VAR 0 12
65965: PUSH
65966: CALL_OW 44
65970: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65971: LD_VAR 0 12
65975: PPUSH
65976: LD_VAR 0 9
65980: PPUSH
65981: LD_INT 0
65983: PPUSH
65984: CALL 67681 0 3
// end ;
65988: GO 65942
65990: POP
65991: POP
// end ;
65992: LD_VAR 0 10
65996: RET
// export function WantHeal ( sci , unit ) ; begin
65997: LD_INT 0
65999: PPUSH
// if GetTaskList ( sci ) > 0 then
66000: LD_VAR 0 1
66004: PPUSH
66005: CALL_OW 437
66009: PUSH
66010: LD_INT 0
66012: GREATER
66013: IFFALSE 66083
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66015: LD_VAR 0 1
66019: PPUSH
66020: CALL_OW 437
66024: PUSH
66025: LD_INT 1
66027: ARRAY
66028: PUSH
66029: LD_INT 1
66031: ARRAY
66032: PUSH
66033: LD_STRING l
66035: EQUAL
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: CALL_OW 437
66046: PUSH
66047: LD_INT 1
66049: ARRAY
66050: PUSH
66051: LD_INT 4
66053: ARRAY
66054: PUSH
66055: LD_VAR 0 2
66059: EQUAL
66060: AND
66061: IFFALSE 66073
// result := true else
66063: LD_ADDR_VAR 0 3
66067: PUSH
66068: LD_INT 1
66070: ST_TO_ADDR
66071: GO 66081
// result := false ;
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_INT 0
66080: ST_TO_ADDR
// end else
66081: GO 66091
// result := false ;
66083: LD_ADDR_VAR 0 3
66087: PUSH
66088: LD_INT 0
66090: ST_TO_ADDR
// end ;
66091: LD_VAR 0 3
66095: RET
// export function HealTarget ( sci ) ; begin
66096: LD_INT 0
66098: PPUSH
// if not sci then
66099: LD_VAR 0 1
66103: NOT
66104: IFFALSE 66108
// exit ;
66106: GO 66173
// result := 0 ;
66108: LD_ADDR_VAR 0 2
66112: PUSH
66113: LD_INT 0
66115: ST_TO_ADDR
// if GetTaskList ( sci ) then
66116: LD_VAR 0 1
66120: PPUSH
66121: CALL_OW 437
66125: IFFALSE 66173
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66127: LD_VAR 0 1
66131: PPUSH
66132: CALL_OW 437
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: PUSH
66145: LD_STRING l
66147: EQUAL
66148: IFFALSE 66173
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66150: LD_ADDR_VAR 0 2
66154: PUSH
66155: LD_VAR 0 1
66159: PPUSH
66160: CALL_OW 437
66164: PUSH
66165: LD_INT 1
66167: ARRAY
66168: PUSH
66169: LD_INT 4
66171: ARRAY
66172: ST_TO_ADDR
// end ;
66173: LD_VAR 0 2
66177: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66178: LD_INT 0
66180: PPUSH
66181: PPUSH
66182: PPUSH
66183: PPUSH
// if not base_units then
66184: LD_VAR 0 1
66188: NOT
66189: IFFALSE 66193
// exit ;
66191: GO 66280
// result := false ;
66193: LD_ADDR_VAR 0 2
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66201: LD_ADDR_VAR 0 5
66205: PUSH
66206: LD_VAR 0 1
66210: PPUSH
66211: LD_INT 21
66213: PUSH
66214: LD_INT 3
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PPUSH
66221: CALL_OW 72
66225: ST_TO_ADDR
// if not tmp then
66226: LD_VAR 0 5
66230: NOT
66231: IFFALSE 66235
// exit ;
66233: GO 66280
// for i in tmp do
66235: LD_ADDR_VAR 0 3
66239: PUSH
66240: LD_VAR 0 5
66244: PUSH
66245: FOR_IN
66246: IFFALSE 66278
// begin result := EnemyInRange ( i , 22 ) ;
66248: LD_ADDR_VAR 0 2
66252: PUSH
66253: LD_VAR 0 3
66257: PPUSH
66258: LD_INT 22
66260: PPUSH
66261: CALL 64516 0 2
66265: ST_TO_ADDR
// if result then
66266: LD_VAR 0 2
66270: IFFALSE 66276
// exit ;
66272: POP
66273: POP
66274: GO 66280
// end ;
66276: GO 66245
66278: POP
66279: POP
// end ;
66280: LD_VAR 0 2
66284: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66285: LD_INT 0
66287: PPUSH
66288: PPUSH
// if not units then
66289: LD_VAR 0 1
66293: NOT
66294: IFFALSE 66298
// exit ;
66296: GO 66368
// result := [ ] ;
66298: LD_ADDR_VAR 0 3
66302: PUSH
66303: EMPTY
66304: ST_TO_ADDR
// for i in units do
66305: LD_ADDR_VAR 0 4
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: FOR_IN
66316: IFFALSE 66366
// if GetTag ( i ) = tag then
66318: LD_VAR 0 4
66322: PPUSH
66323: CALL_OW 110
66327: PUSH
66328: LD_VAR 0 2
66332: EQUAL
66333: IFFALSE 66364
// result := Replace ( result , result + 1 , i ) ;
66335: LD_ADDR_VAR 0 3
66339: PUSH
66340: LD_VAR 0 3
66344: PPUSH
66345: LD_VAR 0 3
66349: PUSH
66350: LD_INT 1
66352: PLUS
66353: PPUSH
66354: LD_VAR 0 4
66358: PPUSH
66359: CALL_OW 1
66363: ST_TO_ADDR
66364: GO 66315
66366: POP
66367: POP
// end ;
66368: LD_VAR 0 3
66372: RET
// export function IsDriver ( un ) ; begin
66373: LD_INT 0
66375: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66376: LD_ADDR_VAR 0 2
66380: PUSH
66381: LD_VAR 0 1
66385: PUSH
66386: LD_INT 55
66388: PUSH
66389: EMPTY
66390: LIST
66391: PPUSH
66392: CALL_OW 69
66396: IN
66397: ST_TO_ADDR
// end ;
66398: LD_VAR 0 2
66402: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66403: LD_INT 0
66405: PPUSH
66406: PPUSH
// list := [ ] ;
66407: LD_ADDR_VAR 0 5
66411: PUSH
66412: EMPTY
66413: ST_TO_ADDR
// case d of 0 :
66414: LD_VAR 0 3
66418: PUSH
66419: LD_INT 0
66421: DOUBLE
66422: EQUAL
66423: IFTRUE 66427
66425: GO 66560
66427: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66428: LD_ADDR_VAR 0 5
66432: PUSH
66433: LD_VAR 0 1
66437: PUSH
66438: LD_INT 4
66440: MINUS
66441: PUSH
66442: LD_VAR 0 2
66446: PUSH
66447: LD_INT 4
66449: MINUS
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: LD_INT 3
66466: MINUS
66467: PUSH
66468: LD_VAR 0 2
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: LD_VAR 0 1
66485: PUSH
66486: LD_INT 4
66488: PLUS
66489: PUSH
66490: LD_VAR 0 2
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: PUSH
66503: LD_VAR 0 1
66507: PUSH
66508: LD_INT 3
66510: PLUS
66511: PUSH
66512: LD_VAR 0 2
66516: PUSH
66517: LD_INT 3
66519: PLUS
66520: PUSH
66521: LD_INT 5
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: PUSH
66529: LD_VAR 0 1
66533: PUSH
66534: LD_VAR 0 2
66538: PUSH
66539: LD_INT 4
66541: PLUS
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: ST_TO_ADDR
// end ; 1 :
66558: GO 67258
66560: LD_INT 1
66562: DOUBLE
66563: EQUAL
66564: IFTRUE 66568
66566: GO 66701
66568: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66569: LD_ADDR_VAR 0 5
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_VAR 0 2
66583: PUSH
66584: LD_INT 4
66586: MINUS
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_INT 3
66603: MINUS
66604: PUSH
66605: LD_VAR 0 2
66609: PUSH
66610: LD_INT 3
66612: MINUS
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: LD_VAR 0 1
66626: PUSH
66627: LD_INT 4
66629: MINUS
66630: PUSH
66631: LD_VAR 0 2
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: LIST
66643: PUSH
66644: LD_VAR 0 1
66648: PUSH
66649: LD_VAR 0 2
66653: PUSH
66654: LD_INT 3
66656: PLUS
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: LD_VAR 0 1
66670: PUSH
66671: LD_INT 4
66673: PLUS
66674: PUSH
66675: LD_VAR 0 2
66679: PUSH
66680: LD_INT 4
66682: PLUS
66683: PUSH
66684: LD_INT 5
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: ST_TO_ADDR
// end ; 2 :
66699: GO 67258
66701: LD_INT 2
66703: DOUBLE
66704: EQUAL
66705: IFTRUE 66709
66707: GO 66838
66709: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66710: LD_ADDR_VAR 0 5
66714: PUSH
66715: LD_VAR 0 1
66719: PUSH
66720: LD_VAR 0 2
66724: PUSH
66725: LD_INT 3
66727: MINUS
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: PUSH
66737: LD_VAR 0 1
66741: PUSH
66742: LD_INT 4
66744: PLUS
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: LD_INT 4
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: PUSH
66759: LD_VAR 0 1
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: LD_INT 4
66771: PLUS
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: PUSH
66781: LD_VAR 0 1
66785: PUSH
66786: LD_INT 3
66788: MINUS
66789: PUSH
66790: LD_VAR 0 2
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: PUSH
66803: LD_VAR 0 1
66807: PUSH
66808: LD_INT 4
66810: MINUS
66811: PUSH
66812: LD_VAR 0 2
66816: PUSH
66817: LD_INT 4
66819: MINUS
66820: PUSH
66821: LD_INT 2
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: ST_TO_ADDR
// end ; 3 :
66836: GO 67258
66838: LD_INT 3
66840: DOUBLE
66841: EQUAL
66842: IFTRUE 66846
66844: GO 66979
66846: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66847: LD_ADDR_VAR 0 5
66851: PUSH
66852: LD_VAR 0 1
66856: PUSH
66857: LD_INT 3
66859: PLUS
66860: PUSH
66861: LD_VAR 0 2
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: PUSH
66874: LD_VAR 0 1
66878: PUSH
66879: LD_INT 4
66881: PLUS
66882: PUSH
66883: LD_VAR 0 2
66887: PUSH
66888: LD_INT 4
66890: PLUS
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: PUSH
66900: LD_VAR 0 1
66904: PUSH
66905: LD_INT 4
66907: MINUS
66908: PUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: LIST
66921: PUSH
66922: LD_VAR 0 1
66926: PUSH
66927: LD_VAR 0 2
66931: PUSH
66932: LD_INT 4
66934: MINUS
66935: PUSH
66936: LD_INT 3
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: PUSH
66944: LD_VAR 0 1
66948: PUSH
66949: LD_INT 3
66951: MINUS
66952: PUSH
66953: LD_VAR 0 2
66957: PUSH
66958: LD_INT 3
66960: MINUS
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: ST_TO_ADDR
// end ; 4 :
66977: GO 67258
66979: LD_INT 4
66981: DOUBLE
66982: EQUAL
66983: IFTRUE 66987
66985: GO 67120
66987: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66988: LD_ADDR_VAR 0 5
66992: PUSH
66993: LD_VAR 0 1
66997: PUSH
66998: LD_VAR 0 2
67002: PUSH
67003: LD_INT 4
67005: PLUS
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: PUSH
67015: LD_VAR 0 1
67019: PUSH
67020: LD_INT 3
67022: PLUS
67023: PUSH
67024: LD_VAR 0 2
67028: PUSH
67029: LD_INT 3
67031: PLUS
67032: PUSH
67033: LD_INT 5
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: PUSH
67041: LD_VAR 0 1
67045: PUSH
67046: LD_INT 4
67048: PLUS
67049: PUSH
67050: LD_VAR 0 2
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: PUSH
67063: LD_VAR 0 1
67067: PUSH
67068: LD_VAR 0 2
67072: PUSH
67073: LD_INT 3
67075: MINUS
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: PUSH
67085: LD_VAR 0 1
67089: PUSH
67090: LD_INT 4
67092: MINUS
67093: PUSH
67094: LD_VAR 0 2
67098: PUSH
67099: LD_INT 4
67101: MINUS
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// end ; 5 :
67118: GO 67258
67120: LD_INT 5
67122: DOUBLE
67123: EQUAL
67124: IFTRUE 67128
67126: GO 67257
67128: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67129: LD_ADDR_VAR 0 5
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_INT 4
67141: MINUS
67142: PUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_INT 4
67168: MINUS
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: PUSH
67178: LD_VAR 0 1
67182: PUSH
67183: LD_INT 4
67185: PLUS
67186: PUSH
67187: LD_VAR 0 2
67191: PUSH
67192: LD_INT 4
67194: PLUS
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: PUSH
67204: LD_VAR 0 1
67208: PUSH
67209: LD_INT 3
67211: PLUS
67212: PUSH
67213: LD_VAR 0 2
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: LIST
67225: PUSH
67226: LD_VAR 0 1
67230: PUSH
67231: LD_VAR 0 2
67235: PUSH
67236: LD_INT 3
67238: PLUS
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// end ; end ;
67255: GO 67258
67257: POP
// result := list ;
67258: LD_ADDR_VAR 0 4
67262: PUSH
67263: LD_VAR 0 5
67267: ST_TO_ADDR
// end ;
67268: LD_VAR 0 4
67272: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67273: LD_INT 0
67275: PPUSH
67276: PPUSH
67277: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67278: LD_VAR 0 1
67282: NOT
67283: PUSH
67284: LD_VAR 0 2
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 3
67297: PUSH
67298: LD_INT 4
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: IN
67307: NOT
67308: OR
67309: IFFALSE 67313
// exit ;
67311: GO 67405
// tmp := [ ] ;
67313: LD_ADDR_VAR 0 5
67317: PUSH
67318: EMPTY
67319: ST_TO_ADDR
// for i in units do
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_VAR 0 1
67329: PUSH
67330: FOR_IN
67331: IFFALSE 67374
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67333: LD_ADDR_VAR 0 5
67337: PUSH
67338: LD_VAR 0 5
67342: PPUSH
67343: LD_VAR 0 5
67347: PUSH
67348: LD_INT 1
67350: PLUS
67351: PPUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: LD_VAR 0 2
67361: PPUSH
67362: CALL_OW 259
67366: PPUSH
67367: CALL_OW 2
67371: ST_TO_ADDR
67372: GO 67330
67374: POP
67375: POP
// if not tmp then
67376: LD_VAR 0 5
67380: NOT
67381: IFFALSE 67385
// exit ;
67383: GO 67405
// result := SortListByListDesc ( units , tmp ) ;
67385: LD_ADDR_VAR 0 3
67389: PUSH
67390: LD_VAR 0 1
67394: PPUSH
67395: LD_VAR 0 5
67399: PPUSH
67400: CALL_OW 77
67404: ST_TO_ADDR
// end ;
67405: LD_VAR 0 3
67409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
67414: PPUSH
// result := false ;
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_INT 0
67422: ST_TO_ADDR
// x := GetX ( building ) ;
67423: LD_ADDR_VAR 0 4
67427: PUSH
67428: LD_VAR 0 2
67432: PPUSH
67433: CALL_OW 250
67437: ST_TO_ADDR
// y := GetY ( building ) ;
67438: LD_ADDR_VAR 0 5
67442: PUSH
67443: LD_VAR 0 2
67447: PPUSH
67448: CALL_OW 251
67452: ST_TO_ADDR
// if not building or not x or not y then
67453: LD_VAR 0 2
67457: NOT
67458: PUSH
67459: LD_VAR 0 4
67463: NOT
67464: OR
67465: PUSH
67466: LD_VAR 0 5
67470: NOT
67471: OR
67472: IFFALSE 67476
// exit ;
67474: GO 67568
// if GetTaskList ( unit ) then
67476: LD_VAR 0 1
67480: PPUSH
67481: CALL_OW 437
67485: IFFALSE 67568
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67487: LD_STRING e
67489: PUSH
67490: LD_VAR 0 1
67494: PPUSH
67495: CALL_OW 437
67499: PUSH
67500: LD_INT 1
67502: ARRAY
67503: PUSH
67504: LD_INT 1
67506: ARRAY
67507: EQUAL
67508: PUSH
67509: LD_VAR 0 4
67513: PUSH
67514: LD_VAR 0 1
67518: PPUSH
67519: CALL_OW 437
67523: PUSH
67524: LD_INT 1
67526: ARRAY
67527: PUSH
67528: LD_INT 2
67530: ARRAY
67531: EQUAL
67532: AND
67533: PUSH
67534: LD_VAR 0 5
67538: PUSH
67539: LD_VAR 0 1
67543: PPUSH
67544: CALL_OW 437
67548: PUSH
67549: LD_INT 1
67551: ARRAY
67552: PUSH
67553: LD_INT 3
67555: ARRAY
67556: EQUAL
67557: AND
67558: IFFALSE 67568
// result := true end ;
67560: LD_ADDR_VAR 0 3
67564: PUSH
67565: LD_INT 1
67567: ST_TO_ADDR
// end ;
67568: LD_VAR 0 3
67572: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67573: LD_INT 0
67575: PPUSH
// result := false ;
67576: LD_ADDR_VAR 0 4
67580: PUSH
67581: LD_INT 0
67583: ST_TO_ADDR
// if GetTaskList ( unit ) then
67584: LD_VAR 0 1
67588: PPUSH
67589: CALL_OW 437
67593: IFFALSE 67676
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67595: LD_STRING M
67597: PUSH
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 437
67607: PUSH
67608: LD_INT 1
67610: ARRAY
67611: PUSH
67612: LD_INT 1
67614: ARRAY
67615: EQUAL
67616: PUSH
67617: LD_VAR 0 2
67621: PUSH
67622: LD_VAR 0 1
67626: PPUSH
67627: CALL_OW 437
67631: PUSH
67632: LD_INT 1
67634: ARRAY
67635: PUSH
67636: LD_INT 2
67638: ARRAY
67639: EQUAL
67640: AND
67641: PUSH
67642: LD_VAR 0 3
67646: PUSH
67647: LD_VAR 0 1
67651: PPUSH
67652: CALL_OW 437
67656: PUSH
67657: LD_INT 1
67659: ARRAY
67660: PUSH
67661: LD_INT 3
67663: ARRAY
67664: EQUAL
67665: AND
67666: IFFALSE 67676
// result := true ;
67668: LD_ADDR_VAR 0 4
67672: PUSH
67673: LD_INT 1
67675: ST_TO_ADDR
// end ; end ;
67676: LD_VAR 0 4
67680: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67681: LD_INT 0
67683: PPUSH
67684: PPUSH
67685: PPUSH
67686: PPUSH
// if not unit or not area then
67687: LD_VAR 0 1
67691: NOT
67692: PUSH
67693: LD_VAR 0 2
67697: NOT
67698: OR
67699: IFFALSE 67703
// exit ;
67701: GO 67867
// tmp := AreaToList ( area , i ) ;
67703: LD_ADDR_VAR 0 6
67707: PUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: LD_VAR 0 5
67717: PPUSH
67718: CALL_OW 517
67722: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67723: LD_ADDR_VAR 0 5
67727: PUSH
67728: DOUBLE
67729: LD_INT 1
67731: DEC
67732: ST_TO_ADDR
67733: LD_VAR 0 6
67737: PUSH
67738: LD_INT 1
67740: ARRAY
67741: PUSH
67742: FOR_TO
67743: IFFALSE 67865
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67745: LD_ADDR_VAR 0 7
67749: PUSH
67750: LD_VAR 0 6
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PUSH
67759: LD_VAR 0 5
67763: ARRAY
67764: PUSH
67765: LD_VAR 0 6
67769: PUSH
67770: LD_INT 2
67772: ARRAY
67773: PUSH
67774: LD_VAR 0 5
67778: ARRAY
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67784: LD_VAR 0 7
67788: PUSH
67789: LD_INT 1
67791: ARRAY
67792: PPUSH
67793: LD_VAR 0 7
67797: PUSH
67798: LD_INT 2
67800: ARRAY
67801: PPUSH
67802: CALL_OW 428
67806: PUSH
67807: LD_INT 0
67809: EQUAL
67810: IFFALSE 67863
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67812: LD_VAR 0 1
67816: PPUSH
67817: LD_VAR 0 7
67821: PUSH
67822: LD_INT 1
67824: ARRAY
67825: PPUSH
67826: LD_VAR 0 7
67830: PUSH
67831: LD_INT 2
67833: ARRAY
67834: PPUSH
67835: LD_VAR 0 3
67839: PPUSH
67840: CALL_OW 48
// result := IsPlaced ( unit ) ;
67844: LD_ADDR_VAR 0 4
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: CALL_OW 305
67858: ST_TO_ADDR
// exit ;
67859: POP
67860: POP
67861: GO 67867
// end ; end ;
67863: GO 67742
67865: POP
67866: POP
// end ;
67867: LD_VAR 0 4
67871: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
67876: PPUSH
// if not side or side > 8 then
67877: LD_VAR 0 1
67881: NOT
67882: PUSH
67883: LD_VAR 0 1
67887: PUSH
67888: LD_INT 8
67890: GREATER
67891: OR
67892: IFFALSE 67896
// exit ;
67894: GO 68083
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67896: LD_ADDR_VAR 0 4
67900: PUSH
67901: LD_INT 22
67903: PUSH
67904: LD_VAR 0 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 21
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PPUSH
67927: CALL_OW 69
67931: ST_TO_ADDR
// if not tmp then
67932: LD_VAR 0 4
67936: NOT
67937: IFFALSE 67941
// exit ;
67939: GO 68083
// enable_addtolog := true ;
67941: LD_ADDR_OWVAR 81
67945: PUSH
67946: LD_INT 1
67948: ST_TO_ADDR
// AddToLog ( [ ) ;
67949: LD_STRING [
67951: PPUSH
67952: CALL_OW 561
// for i in tmp do
67956: LD_ADDR_VAR 0 3
67960: PUSH
67961: LD_VAR 0 4
67965: PUSH
67966: FOR_IN
67967: IFFALSE 68074
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67969: LD_STRING [
67971: PUSH
67972: LD_VAR 0 3
67976: PPUSH
67977: CALL_OW 266
67981: STR
67982: PUSH
67983: LD_STRING , 
67985: STR
67986: PUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: CALL_OW 250
67996: STR
67997: PUSH
67998: LD_STRING , 
68000: STR
68001: PUSH
68002: LD_VAR 0 3
68006: PPUSH
68007: CALL_OW 251
68011: STR
68012: PUSH
68013: LD_STRING , 
68015: STR
68016: PUSH
68017: LD_VAR 0 3
68021: PPUSH
68022: CALL_OW 254
68026: STR
68027: PUSH
68028: LD_STRING , 
68030: STR
68031: PUSH
68032: LD_VAR 0 3
68036: PPUSH
68037: LD_INT 1
68039: PPUSH
68040: CALL_OW 268
68044: STR
68045: PUSH
68046: LD_STRING , 
68048: STR
68049: PUSH
68050: LD_VAR 0 3
68054: PPUSH
68055: LD_INT 2
68057: PPUSH
68058: CALL_OW 268
68062: STR
68063: PUSH
68064: LD_STRING ],
68066: STR
68067: PPUSH
68068: CALL_OW 561
// end ;
68072: GO 67966
68074: POP
68075: POP
// AddToLog ( ]; ) ;
68076: LD_STRING ];
68078: PPUSH
68079: CALL_OW 561
// end ;
68083: LD_VAR 0 2
68087: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68088: LD_INT 0
68090: PPUSH
68091: PPUSH
68092: PPUSH
68093: PPUSH
68094: PPUSH
// if not area or not rate or not max then
68095: LD_VAR 0 1
68099: NOT
68100: PUSH
68101: LD_VAR 0 2
68105: NOT
68106: OR
68107: PUSH
68108: LD_VAR 0 4
68112: NOT
68113: OR
68114: IFFALSE 68118
// exit ;
68116: GO 68310
// while 1 do
68118: LD_INT 1
68120: IFFALSE 68310
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68122: LD_ADDR_VAR 0 9
68126: PUSH
68127: LD_VAR 0 1
68131: PPUSH
68132: LD_INT 1
68134: PPUSH
68135: CALL_OW 287
68139: PUSH
68140: LD_INT 10
68142: MUL
68143: ST_TO_ADDR
// r := rate / 10 ;
68144: LD_ADDR_VAR 0 7
68148: PUSH
68149: LD_VAR 0 2
68153: PUSH
68154: LD_INT 10
68156: DIVREAL
68157: ST_TO_ADDR
// time := 1 1$00 ;
68158: LD_ADDR_VAR 0 8
68162: PUSH
68163: LD_INT 2100
68165: ST_TO_ADDR
// if amount < min then
68166: LD_VAR 0 9
68170: PUSH
68171: LD_VAR 0 3
68175: LESS
68176: IFFALSE 68194
// r := r * 2 else
68178: LD_ADDR_VAR 0 7
68182: PUSH
68183: LD_VAR 0 7
68187: PUSH
68188: LD_INT 2
68190: MUL
68191: ST_TO_ADDR
68192: GO 68220
// if amount > max then
68194: LD_VAR 0 9
68198: PUSH
68199: LD_VAR 0 4
68203: GREATER
68204: IFFALSE 68220
// r := r / 2 ;
68206: LD_ADDR_VAR 0 7
68210: PUSH
68211: LD_VAR 0 7
68215: PUSH
68216: LD_INT 2
68218: DIVREAL
68219: ST_TO_ADDR
// time := time / r ;
68220: LD_ADDR_VAR 0 8
68224: PUSH
68225: LD_VAR 0 8
68229: PUSH
68230: LD_VAR 0 7
68234: DIVREAL
68235: ST_TO_ADDR
// if time < 0 then
68236: LD_VAR 0 8
68240: PUSH
68241: LD_INT 0
68243: LESS
68244: IFFALSE 68261
// time := time * - 1 ;
68246: LD_ADDR_VAR 0 8
68250: PUSH
68251: LD_VAR 0 8
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: MUL
68260: ST_TO_ADDR
// wait ( time ) ;
68261: LD_VAR 0 8
68265: PPUSH
68266: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68270: LD_INT 35
68272: PPUSH
68273: LD_INT 875
68275: PPUSH
68276: CALL_OW 12
68280: PPUSH
68281: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68285: LD_INT 1
68287: PPUSH
68288: LD_INT 5
68290: PPUSH
68291: CALL_OW 12
68295: PPUSH
68296: LD_VAR 0 1
68300: PPUSH
68301: LD_INT 1
68303: PPUSH
68304: CALL_OW 55
// end ;
68308: GO 68118
// end ;
68310: LD_VAR 0 5
68314: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68315: LD_INT 0
68317: PPUSH
68318: PPUSH
68319: PPUSH
68320: PPUSH
68321: PPUSH
68322: PPUSH
68323: PPUSH
68324: PPUSH
// if not turrets or not factories then
68325: LD_VAR 0 1
68329: NOT
68330: PUSH
68331: LD_VAR 0 2
68335: NOT
68336: OR
68337: IFFALSE 68341
// exit ;
68339: GO 68648
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68341: LD_ADDR_VAR 0 10
68345: PUSH
68346: LD_INT 5
68348: PUSH
68349: LD_INT 6
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 2
68358: PUSH
68359: LD_INT 4
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: LD_INT 5
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 24
68383: PUSH
68384: LD_INT 25
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 23
68393: PUSH
68394: LD_INT 27
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 42
68407: PUSH
68408: LD_INT 43
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 44
68417: PUSH
68418: LD_INT 46
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 45
68427: PUSH
68428: LD_INT 47
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: ST_TO_ADDR
// result := [ ] ;
68445: LD_ADDR_VAR 0 3
68449: PUSH
68450: EMPTY
68451: ST_TO_ADDR
// for i in turrets do
68452: LD_ADDR_VAR 0 4
68456: PUSH
68457: LD_VAR 0 1
68461: PUSH
68462: FOR_IN
68463: IFFALSE 68646
// begin nat := GetNation ( i ) ;
68465: LD_ADDR_VAR 0 7
68469: PUSH
68470: LD_VAR 0 4
68474: PPUSH
68475: CALL_OW 248
68479: ST_TO_ADDR
// weapon := 0 ;
68480: LD_ADDR_VAR 0 8
68484: PUSH
68485: LD_INT 0
68487: ST_TO_ADDR
// if not nat then
68488: LD_VAR 0 7
68492: NOT
68493: IFFALSE 68497
// continue ;
68495: GO 68462
// for j in list [ nat ] do
68497: LD_ADDR_VAR 0 5
68501: PUSH
68502: LD_VAR 0 10
68506: PUSH
68507: LD_VAR 0 7
68511: ARRAY
68512: PUSH
68513: FOR_IN
68514: IFFALSE 68555
// if GetBWeapon ( i ) = j [ 1 ] then
68516: LD_VAR 0 4
68520: PPUSH
68521: CALL_OW 269
68525: PUSH
68526: LD_VAR 0 5
68530: PUSH
68531: LD_INT 1
68533: ARRAY
68534: EQUAL
68535: IFFALSE 68553
// begin weapon := j [ 2 ] ;
68537: LD_ADDR_VAR 0 8
68541: PUSH
68542: LD_VAR 0 5
68546: PUSH
68547: LD_INT 2
68549: ARRAY
68550: ST_TO_ADDR
// break ;
68551: GO 68555
// end ;
68553: GO 68513
68555: POP
68556: POP
// if not weapon then
68557: LD_VAR 0 8
68561: NOT
68562: IFFALSE 68566
// continue ;
68564: GO 68462
// for k in factories do
68566: LD_ADDR_VAR 0 6
68570: PUSH
68571: LD_VAR 0 2
68575: PUSH
68576: FOR_IN
68577: IFFALSE 68642
// begin weapons := AvailableWeaponList ( k ) ;
68579: LD_ADDR_VAR 0 9
68583: PUSH
68584: LD_VAR 0 6
68588: PPUSH
68589: CALL_OW 478
68593: ST_TO_ADDR
// if not weapons then
68594: LD_VAR 0 9
68598: NOT
68599: IFFALSE 68603
// continue ;
68601: GO 68576
// if weapon in weapons then
68603: LD_VAR 0 8
68607: PUSH
68608: LD_VAR 0 9
68612: IN
68613: IFFALSE 68640
// begin result := [ i , weapon ] ;
68615: LD_ADDR_VAR 0 3
68619: PUSH
68620: LD_VAR 0 4
68624: PUSH
68625: LD_VAR 0 8
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: ST_TO_ADDR
// exit ;
68634: POP
68635: POP
68636: POP
68637: POP
68638: GO 68648
// end ; end ;
68640: GO 68576
68642: POP
68643: POP
// end ;
68644: GO 68462
68646: POP
68647: POP
// end ;
68648: LD_VAR 0 3
68652: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68653: LD_INT 0
68655: PPUSH
// if not side or side > 8 then
68656: LD_VAR 0 3
68660: NOT
68661: PUSH
68662: LD_VAR 0 3
68666: PUSH
68667: LD_INT 8
68669: GREATER
68670: OR
68671: IFFALSE 68675
// exit ;
68673: GO 68734
// if not range then
68675: LD_VAR 0 4
68679: NOT
68680: IFFALSE 68691
// range := - 12 ;
68682: LD_ADDR_VAR 0 4
68686: PUSH
68687: LD_INT 12
68689: NEG
68690: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68691: LD_VAR 0 1
68695: PPUSH
68696: LD_VAR 0 2
68700: PPUSH
68701: LD_VAR 0 3
68705: PPUSH
68706: LD_VAR 0 4
68710: PPUSH
68711: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68715: LD_VAR 0 1
68719: PPUSH
68720: LD_VAR 0 2
68724: PPUSH
68725: LD_VAR 0 3
68729: PPUSH
68730: CALL_OW 331
// end ;
68734: LD_VAR 0 5
68738: RET
// export function Video ( mode ) ; begin
68739: LD_INT 0
68741: PPUSH
// ingame_video = mode ;
68742: LD_ADDR_OWVAR 52
68746: PUSH
68747: LD_VAR 0 1
68751: ST_TO_ADDR
// interface_hidden = mode ;
68752: LD_ADDR_OWVAR 54
68756: PUSH
68757: LD_VAR 0 1
68761: ST_TO_ADDR
// end ;
68762: LD_VAR 0 2
68766: RET
// export function Join ( array , element ) ; begin
68767: LD_INT 0
68769: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_VAR 0 1
68784: PUSH
68785: LD_INT 1
68787: PLUS
68788: PPUSH
68789: LD_VAR 0 2
68793: PPUSH
68794: CALL_OW 1
68798: ST_TO_ADDR
// end ;
68799: LD_VAR 0 3
68803: RET
// export function JoinUnion ( array , element ) ; begin
68804: LD_INT 0
68806: PPUSH
// result := array union element ;
68807: LD_ADDR_VAR 0 3
68811: PUSH
68812: LD_VAR 0 1
68816: PUSH
68817: LD_VAR 0 2
68821: UNION
68822: ST_TO_ADDR
// end ;
68823: LD_VAR 0 3
68827: RET
// export function GetBehemoths ( side ) ; begin
68828: LD_INT 0
68830: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68831: LD_ADDR_VAR 0 2
68835: PUSH
68836: LD_INT 22
68838: PUSH
68839: LD_VAR 0 1
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 31
68850: PUSH
68851: LD_INT 25
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PPUSH
68862: CALL_OW 69
68866: ST_TO_ADDR
// end ;
68867: LD_VAR 0 2
68871: RET
// export function Shuffle ( array ) ; var i , index ; begin
68872: LD_INT 0
68874: PPUSH
68875: PPUSH
68876: PPUSH
// result := [ ] ;
68877: LD_ADDR_VAR 0 2
68881: PUSH
68882: EMPTY
68883: ST_TO_ADDR
// if not array then
68884: LD_VAR 0 1
68888: NOT
68889: IFFALSE 68893
// exit ;
68891: GO 68992
// Randomize ;
68893: CALL_OW 10
// for i = array downto 1 do
68897: LD_ADDR_VAR 0 3
68901: PUSH
68902: DOUBLE
68903: LD_VAR 0 1
68907: INC
68908: ST_TO_ADDR
68909: LD_INT 1
68911: PUSH
68912: FOR_DOWNTO
68913: IFFALSE 68990
// begin index := rand ( 1 , array ) ;
68915: LD_ADDR_VAR 0 4
68919: PUSH
68920: LD_INT 1
68922: PPUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 12
68932: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68933: LD_ADDR_VAR 0 2
68937: PUSH
68938: LD_VAR 0 2
68942: PPUSH
68943: LD_VAR 0 2
68947: PUSH
68948: LD_INT 1
68950: PLUS
68951: PPUSH
68952: LD_VAR 0 1
68956: PUSH
68957: LD_VAR 0 4
68961: ARRAY
68962: PPUSH
68963: CALL_OW 2
68967: ST_TO_ADDR
// array := Delete ( array , index ) ;
68968: LD_ADDR_VAR 0 1
68972: PUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: LD_VAR 0 4
68982: PPUSH
68983: CALL_OW 3
68987: ST_TO_ADDR
// end ;
68988: GO 68912
68990: POP
68991: POP
// end ;
68992: LD_VAR 0 2
68996: RET
// export function GetBaseMaterials ( base ) ; begin
68997: LD_INT 0
68999: PPUSH
// result := [ 0 , 0 , 0 ] ;
69000: LD_ADDR_VAR 0 2
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: LIST
69018: ST_TO_ADDR
// if not base then
69019: LD_VAR 0 1
69023: NOT
69024: IFFALSE 69028
// exit ;
69026: GO 69077
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69028: LD_ADDR_VAR 0 2
69032: PUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: LD_INT 1
69040: PPUSH
69041: CALL_OW 275
69045: PUSH
69046: LD_VAR 0 1
69050: PPUSH
69051: LD_INT 2
69053: PPUSH
69054: CALL_OW 275
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_INT 3
69066: PPUSH
69067: CALL_OW 275
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: LIST
69076: ST_TO_ADDR
// end ;
69077: LD_VAR 0 2
69081: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69082: LD_INT 0
69084: PPUSH
69085: PPUSH
// result := array ;
69086: LD_ADDR_VAR 0 3
69090: PUSH
69091: LD_VAR 0 1
69095: ST_TO_ADDR
// if size > 0 then
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 0
69103: GREATER
69104: IFFALSE 69150
// for i := array downto size do
69106: LD_ADDR_VAR 0 4
69110: PUSH
69111: DOUBLE
69112: LD_VAR 0 1
69116: INC
69117: ST_TO_ADDR
69118: LD_VAR 0 2
69122: PUSH
69123: FOR_DOWNTO
69124: IFFALSE 69148
// result := Delete ( result , result ) ;
69126: LD_ADDR_VAR 0 3
69130: PUSH
69131: LD_VAR 0 3
69135: PPUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: CALL_OW 3
69145: ST_TO_ADDR
69146: GO 69123
69148: POP
69149: POP
// end ;
69150: LD_VAR 0 3
69154: RET
// export function ComExit ( unit ) ; var tmp ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
// if not IsInUnit ( unit ) then
69159: LD_VAR 0 1
69163: PPUSH
69164: CALL_OW 310
69168: NOT
69169: IFFALSE 69173
// exit ;
69171: GO 69233
// tmp := IsInUnit ( unit ) ;
69173: LD_ADDR_VAR 0 3
69177: PUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 310
69187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69188: LD_VAR 0 3
69192: PPUSH
69193: CALL_OW 247
69197: PUSH
69198: LD_INT 2
69200: EQUAL
69201: IFFALSE 69214
// ComExitVehicle ( unit ) else
69203: LD_VAR 0 1
69207: PPUSH
69208: CALL_OW 121
69212: GO 69223
// ComExitBuilding ( unit ) ;
69214: LD_VAR 0 1
69218: PPUSH
69219: CALL_OW 122
// result := tmp ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_VAR 0 3
69232: ST_TO_ADDR
// end ;
69233: LD_VAR 0 2
69237: RET
// export function ComExitAll ( units ) ; var i ; begin
69238: LD_INT 0
69240: PPUSH
69241: PPUSH
// if not units then
69242: LD_VAR 0 1
69246: NOT
69247: IFFALSE 69251
// exit ;
69249: GO 69277
// for i in units do
69251: LD_ADDR_VAR 0 3
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: FOR_IN
69262: IFFALSE 69275
// ComExit ( i ) ;
69264: LD_VAR 0 3
69268: PPUSH
69269: CALL 69155 0 1
69273: GO 69261
69275: POP
69276: POP
// end ;
69277: LD_VAR 0 2
69281: RET
// export function ResetHc ; begin
69282: LD_INT 0
69284: PPUSH
// InitHc ;
69285: CALL_OW 19
// hc_importance := 0 ;
69289: LD_ADDR_OWVAR 32
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// end ;
69297: LD_VAR 0 1
69301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69302: LD_INT 0
69304: PPUSH
69305: PPUSH
69306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69307: LD_ADDR_VAR 0 6
69311: PUSH
69312: LD_VAR 0 1
69316: PUSH
69317: LD_VAR 0 3
69321: PLUS
69322: PUSH
69323: LD_INT 2
69325: DIV
69326: ST_TO_ADDR
// if _x < 0 then
69327: LD_VAR 0 6
69331: PUSH
69332: LD_INT 0
69334: LESS
69335: IFFALSE 69352
// _x := _x * - 1 ;
69337: LD_ADDR_VAR 0 6
69341: PUSH
69342: LD_VAR 0 6
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: MUL
69351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69352: LD_ADDR_VAR 0 7
69356: PUSH
69357: LD_VAR 0 2
69361: PUSH
69362: LD_VAR 0 4
69366: PLUS
69367: PUSH
69368: LD_INT 2
69370: DIV
69371: ST_TO_ADDR
// if _y < 0 then
69372: LD_VAR 0 7
69376: PUSH
69377: LD_INT 0
69379: LESS
69380: IFFALSE 69397
// _y := _y * - 1 ;
69382: LD_ADDR_VAR 0 7
69386: PUSH
69387: LD_VAR 0 7
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: MUL
69396: ST_TO_ADDR
// result := [ _x , _y ] ;
69397: LD_ADDR_VAR 0 5
69401: PUSH
69402: LD_VAR 0 6
69406: PUSH
69407: LD_VAR 0 7
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: ST_TO_ADDR
// end ;
69416: LD_VAR 0 5
69420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69421: LD_INT 0
69423: PPUSH
69424: PPUSH
69425: PPUSH
69426: PPUSH
// task := GetTaskList ( unit ) ;
69427: LD_ADDR_VAR 0 7
69431: PUSH
69432: LD_VAR 0 1
69436: PPUSH
69437: CALL_OW 437
69441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69442: LD_VAR 0 7
69446: NOT
69447: PUSH
69448: LD_VAR 0 1
69452: PPUSH
69453: LD_VAR 0 2
69457: PPUSH
69458: CALL_OW 308
69462: NOT
69463: AND
69464: IFFALSE 69468
// exit ;
69466: GO 69586
// if IsInArea ( unit , area ) then
69468: LD_VAR 0 1
69472: PPUSH
69473: LD_VAR 0 2
69477: PPUSH
69478: CALL_OW 308
69482: IFFALSE 69500
// begin ComMoveToArea ( unit , goAway ) ;
69484: LD_VAR 0 1
69488: PPUSH
69489: LD_VAR 0 3
69493: PPUSH
69494: CALL_OW 113
// exit ;
69498: GO 69586
// end ; if task [ 1 ] [ 1 ] <> M then
69500: LD_VAR 0 7
69504: PUSH
69505: LD_INT 1
69507: ARRAY
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PUSH
69513: LD_STRING M
69515: NONEQUAL
69516: IFFALSE 69520
// exit ;
69518: GO 69586
// x := task [ 1 ] [ 2 ] ;
69520: LD_ADDR_VAR 0 5
69524: PUSH
69525: LD_VAR 0 7
69529: PUSH
69530: LD_INT 1
69532: ARRAY
69533: PUSH
69534: LD_INT 2
69536: ARRAY
69537: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69538: LD_ADDR_VAR 0 6
69542: PUSH
69543: LD_VAR 0 7
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: PUSH
69552: LD_INT 3
69554: ARRAY
69555: ST_TO_ADDR
// if InArea ( x , y , area ) then
69556: LD_VAR 0 5
69560: PPUSH
69561: LD_VAR 0 6
69565: PPUSH
69566: LD_VAR 0 2
69570: PPUSH
69571: CALL_OW 309
69575: IFFALSE 69586
// ComStop ( unit ) ;
69577: LD_VAR 0 1
69581: PPUSH
69582: CALL_OW 141
// end ;
69586: LD_VAR 0 4
69590: RET
// export function Abs ( value ) ; begin
69591: LD_INT 0
69593: PPUSH
// result := value ;
69594: LD_ADDR_VAR 0 2
69598: PUSH
69599: LD_VAR 0 1
69603: ST_TO_ADDR
// if value < 0 then
69604: LD_VAR 0 1
69608: PUSH
69609: LD_INT 0
69611: LESS
69612: IFFALSE 69629
// result := value * - 1 ;
69614: LD_ADDR_VAR 0 2
69618: PUSH
69619: LD_VAR 0 1
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: MUL
69628: ST_TO_ADDR
// end ;
69629: LD_VAR 0 2
69633: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69634: LD_INT 0
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
69643: PPUSH
// if not unit or not building then
69644: LD_VAR 0 1
69648: NOT
69649: PUSH
69650: LD_VAR 0 2
69654: NOT
69655: OR
69656: IFFALSE 69660
// exit ;
69658: GO 69886
// x := GetX ( building ) ;
69660: LD_ADDR_VAR 0 4
69664: PUSH
69665: LD_VAR 0 2
69669: PPUSH
69670: CALL_OW 250
69674: ST_TO_ADDR
// y := GetY ( building ) ;
69675: LD_ADDR_VAR 0 6
69679: PUSH
69680: LD_VAR 0 2
69684: PPUSH
69685: CALL_OW 251
69689: ST_TO_ADDR
// d := GetDir ( building ) ;
69690: LD_ADDR_VAR 0 8
69694: PUSH
69695: LD_VAR 0 2
69699: PPUSH
69700: CALL_OW 254
69704: ST_TO_ADDR
// r := 4 ;
69705: LD_ADDR_VAR 0 9
69709: PUSH
69710: LD_INT 4
69712: ST_TO_ADDR
// for i := 1 to 5 do
69713: LD_ADDR_VAR 0 10
69717: PUSH
69718: DOUBLE
69719: LD_INT 1
69721: DEC
69722: ST_TO_ADDR
69723: LD_INT 5
69725: PUSH
69726: FOR_TO
69727: IFFALSE 69884
// begin _x := ShiftX ( x , d , r + i ) ;
69729: LD_ADDR_VAR 0 5
69733: PUSH
69734: LD_VAR 0 4
69738: PPUSH
69739: LD_VAR 0 8
69743: PPUSH
69744: LD_VAR 0 9
69748: PUSH
69749: LD_VAR 0 10
69753: PLUS
69754: PPUSH
69755: CALL_OW 272
69759: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69760: LD_ADDR_VAR 0 7
69764: PUSH
69765: LD_VAR 0 6
69769: PPUSH
69770: LD_VAR 0 8
69774: PPUSH
69775: LD_VAR 0 9
69779: PUSH
69780: LD_VAR 0 10
69784: PLUS
69785: PPUSH
69786: CALL_OW 273
69790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69791: LD_VAR 0 5
69795: PPUSH
69796: LD_VAR 0 7
69800: PPUSH
69801: CALL_OW 488
69805: PUSH
69806: LD_VAR 0 5
69810: PPUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: CALL_OW 428
69820: PPUSH
69821: CALL_OW 247
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: LD_INT 2
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: IN
69836: NOT
69837: AND
69838: IFFALSE 69882
// begin ComMoveXY ( unit , _x , _y ) ;
69840: LD_VAR 0 1
69844: PPUSH
69845: LD_VAR 0 5
69849: PPUSH
69850: LD_VAR 0 7
69854: PPUSH
69855: CALL_OW 111
// result := [ _x , _y ] ;
69859: LD_ADDR_VAR 0 3
69863: PUSH
69864: LD_VAR 0 5
69868: PUSH
69869: LD_VAR 0 7
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// exit ;
69878: POP
69879: POP
69880: GO 69886
// end ; end ;
69882: GO 69726
69884: POP
69885: POP
// end ;
69886: LD_VAR 0 3
69890: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69891: LD_INT 0
69893: PPUSH
69894: PPUSH
69895: PPUSH
// result := 0 ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: LD_INT 0
69903: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69904: LD_VAR 0 1
69908: PUSH
69909: LD_INT 0
69911: LESS
69912: PUSH
69913: LD_VAR 0 1
69917: PUSH
69918: LD_INT 8
69920: GREATER
69921: OR
69922: PUSH
69923: LD_VAR 0 2
69927: PUSH
69928: LD_INT 0
69930: LESS
69931: OR
69932: PUSH
69933: LD_VAR 0 2
69937: PUSH
69938: LD_INT 8
69940: GREATER
69941: OR
69942: IFFALSE 69946
// exit ;
69944: GO 70021
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69946: LD_ADDR_VAR 0 4
69950: PUSH
69951: LD_INT 22
69953: PUSH
69954: LD_VAR 0 2
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PPUSH
69963: CALL_OW 69
69967: PUSH
69968: FOR_IN
69969: IFFALSE 70019
// begin un := UnitShoot ( i ) ;
69971: LD_ADDR_VAR 0 5
69975: PUSH
69976: LD_VAR 0 4
69980: PPUSH
69981: CALL_OW 504
69985: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69986: LD_VAR 0 5
69990: PPUSH
69991: CALL_OW 255
69995: PUSH
69996: LD_VAR 0 1
70000: EQUAL
70001: IFFALSE 70017
// begin result := un ;
70003: LD_ADDR_VAR 0 3
70007: PUSH
70008: LD_VAR 0 5
70012: ST_TO_ADDR
// exit ;
70013: POP
70014: POP
70015: GO 70021
// end ; end ;
70017: GO 69968
70019: POP
70020: POP
// end ;
70021: LD_VAR 0 3
70025: RET
// export function GetCargoBay ( units ) ; begin
70026: LD_INT 0
70028: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70029: LD_ADDR_VAR 0 2
70033: PUSH
70034: LD_VAR 0 1
70038: PPUSH
70039: LD_INT 2
70041: PUSH
70042: LD_INT 34
70044: PUSH
70045: LD_INT 12
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 34
70054: PUSH
70055: LD_INT 51
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 34
70064: PUSH
70065: LD_INT 32
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 34
70074: PUSH
70075: LD_EXP 125
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: PPUSH
70091: CALL_OW 72
70095: ST_TO_ADDR
// end ;
70096: LD_VAR 0 2
70100: RET
// export function Negate ( value ) ; begin
70101: LD_INT 0
70103: PPUSH
// result := not value ;
70104: LD_ADDR_VAR 0 2
70108: PUSH
70109: LD_VAR 0 1
70113: NOT
70114: ST_TO_ADDR
// end ;
70115: LD_VAR 0 2
70119: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
70120: LD_INT 0
70122: PPUSH
// if x1 = x2 then
70123: LD_VAR 0 1
70127: PUSH
70128: LD_VAR 0 3
70132: EQUAL
70133: IFFALSE 70167
// begin if y1 > y2 then
70135: LD_VAR 0 2
70139: PUSH
70140: LD_VAR 0 4
70144: GREATER
70145: IFFALSE 70157
// result := 0 else
70147: LD_ADDR_VAR 0 5
70151: PUSH
70152: LD_INT 0
70154: ST_TO_ADDR
70155: GO 70165
// result := 3 ;
70157: LD_ADDR_VAR 0 5
70161: PUSH
70162: LD_INT 3
70164: ST_TO_ADDR
// exit ;
70165: GO 70253
// end ; if y1 = y2 then
70167: LD_VAR 0 2
70171: PUSH
70172: LD_VAR 0 4
70176: EQUAL
70177: IFFALSE 70211
// begin if x1 > x2 then
70179: LD_VAR 0 1
70183: PUSH
70184: LD_VAR 0 3
70188: GREATER
70189: IFFALSE 70201
// result := 1 else
70191: LD_ADDR_VAR 0 5
70195: PUSH
70196: LD_INT 1
70198: ST_TO_ADDR
70199: GO 70209
// result := 4 ;
70201: LD_ADDR_VAR 0 5
70205: PUSH
70206: LD_INT 4
70208: ST_TO_ADDR
// exit ;
70209: GO 70253
// end ; if x1 > x2 and y1 > y2 then
70211: LD_VAR 0 1
70215: PUSH
70216: LD_VAR 0 3
70220: GREATER
70221: PUSH
70222: LD_VAR 0 2
70226: PUSH
70227: LD_VAR 0 4
70231: GREATER
70232: AND
70233: IFFALSE 70245
// result := 2 else
70235: LD_ADDR_VAR 0 5
70239: PUSH
70240: LD_INT 2
70242: ST_TO_ADDR
70243: GO 70253
// result := 5 ;
70245: LD_ADDR_VAR 0 5
70249: PUSH
70250: LD_INT 5
70252: ST_TO_ADDR
// end ;
70253: LD_VAR 0 5
70257: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70258: LD_INT 0
70260: PPUSH
70261: PPUSH
// if not driver or not IsInUnit ( driver ) then
70262: LD_VAR 0 1
70266: NOT
70267: PUSH
70268: LD_VAR 0 1
70272: PPUSH
70273: CALL_OW 310
70277: NOT
70278: OR
70279: IFFALSE 70283
// exit ;
70281: GO 70373
// vehicle := IsInUnit ( driver ) ;
70283: LD_ADDR_VAR 0 3
70287: PUSH
70288: LD_VAR 0 1
70292: PPUSH
70293: CALL_OW 310
70297: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70298: LD_VAR 0 1
70302: PPUSH
70303: LD_STRING \
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: PUSH
70333: LD_STRING E
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_VAR 0 3
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PPUSH
70369: CALL_OW 446
// end ;
70373: LD_VAR 0 2
70377: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70378: LD_INT 0
70380: PPUSH
70381: PPUSH
// if not driver or not IsInUnit ( driver ) then
70382: LD_VAR 0 1
70386: NOT
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: CALL_OW 310
70397: NOT
70398: OR
70399: IFFALSE 70403
// exit ;
70401: GO 70493
// vehicle := IsInUnit ( driver ) ;
70403: LD_ADDR_VAR 0 3
70407: PUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: CALL_OW 310
70417: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70418: LD_VAR 0 1
70422: PPUSH
70423: LD_STRING \
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: PUSH
70453: LD_STRING E
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: LD_VAR 0 3
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PPUSH
70489: CALL_OW 447
// end ;
70493: LD_VAR 0 2
70497: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
70502: PPUSH
// tmp := [ ] ;
70503: LD_ADDR_VAR 0 5
70507: PUSH
70508: EMPTY
70509: ST_TO_ADDR
// for i in units do
70510: LD_ADDR_VAR 0 4
70514: PUSH
70515: LD_VAR 0 1
70519: PUSH
70520: FOR_IN
70521: IFFALSE 70559
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70523: LD_ADDR_VAR 0 5
70527: PUSH
70528: LD_VAR 0 5
70532: PPUSH
70533: LD_VAR 0 5
70537: PUSH
70538: LD_INT 1
70540: PLUS
70541: PPUSH
70542: LD_VAR 0 4
70546: PPUSH
70547: CALL_OW 256
70551: PPUSH
70552: CALL_OW 2
70556: ST_TO_ADDR
70557: GO 70520
70559: POP
70560: POP
// if not tmp then
70561: LD_VAR 0 5
70565: NOT
70566: IFFALSE 70570
// exit ;
70568: GO 70618
// if asc then
70570: LD_VAR 0 2
70574: IFFALSE 70598
// result := SortListByListAsc ( units , tmp ) else
70576: LD_ADDR_VAR 0 3
70580: PUSH
70581: LD_VAR 0 1
70585: PPUSH
70586: LD_VAR 0 5
70590: PPUSH
70591: CALL_OW 76
70595: ST_TO_ADDR
70596: GO 70618
// result := SortListByListDesc ( units , tmp ) ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: LD_VAR 0 1
70607: PPUSH
70608: LD_VAR 0 5
70612: PPUSH
70613: CALL_OW 77
70617: ST_TO_ADDR
// end ;
70618: LD_VAR 0 3
70622: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70623: LD_INT 0
70625: PPUSH
70626: PPUSH
// task := GetTaskList ( mech ) ;
70627: LD_ADDR_VAR 0 4
70631: PUSH
70632: LD_VAR 0 1
70636: PPUSH
70637: CALL_OW 437
70641: ST_TO_ADDR
// if not task then
70642: LD_VAR 0 4
70646: NOT
70647: IFFALSE 70651
// exit ;
70649: GO 70693
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70651: LD_ADDR_VAR 0 3
70655: PUSH
70656: LD_VAR 0 4
70660: PUSH
70661: LD_INT 1
70663: ARRAY
70664: PUSH
70665: LD_INT 1
70667: ARRAY
70668: PUSH
70669: LD_STRING r
70671: EQUAL
70672: PUSH
70673: LD_VAR 0 4
70677: PUSH
70678: LD_INT 1
70680: ARRAY
70681: PUSH
70682: LD_INT 4
70684: ARRAY
70685: PUSH
70686: LD_VAR 0 2
70690: EQUAL
70691: AND
70692: ST_TO_ADDR
// end ;
70693: LD_VAR 0 3
70697: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70698: LD_INT 0
70700: PPUSH
// SetDir ( unit , d ) ;
70701: LD_VAR 0 1
70705: PPUSH
70706: LD_VAR 0 4
70710: PPUSH
70711: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70715: LD_VAR 0 1
70719: PPUSH
70720: LD_VAR 0 2
70724: PPUSH
70725: LD_VAR 0 3
70729: PPUSH
70730: LD_VAR 0 5
70734: PPUSH
70735: CALL_OW 48
// end ;
70739: LD_VAR 0 6
70743: RET
// export function ToNaturalNumber ( number ) ; begin
70744: LD_INT 0
70746: PPUSH
// result := number div 1 ;
70747: LD_ADDR_VAR 0 2
70751: PUSH
70752: LD_VAR 0 1
70756: PUSH
70757: LD_INT 1
70759: DIV
70760: ST_TO_ADDR
// if number < 0 then
70761: LD_VAR 0 1
70765: PUSH
70766: LD_INT 0
70768: LESS
70769: IFFALSE 70779
// result := 0 ;
70771: LD_ADDR_VAR 0 2
70775: PUSH
70776: LD_INT 0
70778: ST_TO_ADDR
// end ;
70779: LD_VAR 0 2
70783: RET
// export function SortByClass ( units , class ) ; var un ; begin
70784: LD_INT 0
70786: PPUSH
70787: PPUSH
// if not units or not class then
70788: LD_VAR 0 1
70792: NOT
70793: PUSH
70794: LD_VAR 0 2
70798: NOT
70799: OR
70800: IFFALSE 70804
// exit ;
70802: GO 70899
// result := [ ] ;
70804: LD_ADDR_VAR 0 3
70808: PUSH
70809: EMPTY
70810: ST_TO_ADDR
// for un in units do
70811: LD_ADDR_VAR 0 4
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: FOR_IN
70822: IFFALSE 70897
// if GetClass ( un ) = class then
70824: LD_VAR 0 4
70828: PPUSH
70829: CALL_OW 257
70833: PUSH
70834: LD_VAR 0 2
70838: EQUAL
70839: IFFALSE 70866
// result := Insert ( result , 1 , un ) else
70841: LD_ADDR_VAR 0 3
70845: PUSH
70846: LD_VAR 0 3
70850: PPUSH
70851: LD_INT 1
70853: PPUSH
70854: LD_VAR 0 4
70858: PPUSH
70859: CALL_OW 2
70863: ST_TO_ADDR
70864: GO 70895
// result := Replace ( result , result + 1 , un ) ;
70866: LD_ADDR_VAR 0 3
70870: PUSH
70871: LD_VAR 0 3
70875: PPUSH
70876: LD_VAR 0 3
70880: PUSH
70881: LD_INT 1
70883: PLUS
70884: PPUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: CALL_OW 1
70894: ST_TO_ADDR
70895: GO 70821
70897: POP
70898: POP
// end ;
70899: LD_VAR 0 3
70903: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
70908: PPUSH
70909: PPUSH
70910: PPUSH
70911: PPUSH
70912: PPUSH
// result := [ ] ;
70913: LD_ADDR_VAR 0 4
70917: PUSH
70918: EMPTY
70919: ST_TO_ADDR
// if x - r < 0 then
70920: LD_VAR 0 1
70924: PUSH
70925: LD_VAR 0 3
70929: MINUS
70930: PUSH
70931: LD_INT 0
70933: LESS
70934: IFFALSE 70946
// min_x := 0 else
70936: LD_ADDR_VAR 0 8
70940: PUSH
70941: LD_INT 0
70943: ST_TO_ADDR
70944: GO 70962
// min_x := x - r ;
70946: LD_ADDR_VAR 0 8
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_VAR 0 3
70960: MINUS
70961: ST_TO_ADDR
// if y - r < 0 then
70962: LD_VAR 0 2
70966: PUSH
70967: LD_VAR 0 3
70971: MINUS
70972: PUSH
70973: LD_INT 0
70975: LESS
70976: IFFALSE 70988
// min_y := 0 else
70978: LD_ADDR_VAR 0 7
70982: PUSH
70983: LD_INT 0
70985: ST_TO_ADDR
70986: GO 71004
// min_y := y - r ;
70988: LD_ADDR_VAR 0 7
70992: PUSH
70993: LD_VAR 0 2
70997: PUSH
70998: LD_VAR 0 3
71002: MINUS
71003: ST_TO_ADDR
// max_x := x + r ;
71004: LD_ADDR_VAR 0 9
71008: PUSH
71009: LD_VAR 0 1
71013: PUSH
71014: LD_VAR 0 3
71018: PLUS
71019: ST_TO_ADDR
// max_y := y + r ;
71020: LD_ADDR_VAR 0 10
71024: PUSH
71025: LD_VAR 0 2
71029: PUSH
71030: LD_VAR 0 3
71034: PLUS
71035: ST_TO_ADDR
// for _x = min_x to max_x do
71036: LD_ADDR_VAR 0 5
71040: PUSH
71041: DOUBLE
71042: LD_VAR 0 8
71046: DEC
71047: ST_TO_ADDR
71048: LD_VAR 0 9
71052: PUSH
71053: FOR_TO
71054: IFFALSE 71155
// for _y = min_y to max_y do
71056: LD_ADDR_VAR 0 6
71060: PUSH
71061: DOUBLE
71062: LD_VAR 0 7
71066: DEC
71067: ST_TO_ADDR
71068: LD_VAR 0 10
71072: PUSH
71073: FOR_TO
71074: IFFALSE 71151
// begin if not ValidHex ( _x , _y ) then
71076: LD_VAR 0 5
71080: PPUSH
71081: LD_VAR 0 6
71085: PPUSH
71086: CALL_OW 488
71090: NOT
71091: IFFALSE 71095
// continue ;
71093: GO 71073
// if GetResourceTypeXY ( _x , _y ) then
71095: LD_VAR 0 5
71099: PPUSH
71100: LD_VAR 0 6
71104: PPUSH
71105: CALL_OW 283
71109: IFFALSE 71149
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71111: LD_ADDR_VAR 0 4
71115: PUSH
71116: LD_VAR 0 4
71120: PPUSH
71121: LD_VAR 0 4
71125: PUSH
71126: LD_INT 1
71128: PLUS
71129: PPUSH
71130: LD_VAR 0 5
71134: PUSH
71135: LD_VAR 0 6
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PPUSH
71144: CALL_OW 1
71148: ST_TO_ADDR
// end ;
71149: GO 71073
71151: POP
71152: POP
71153: GO 71053
71155: POP
71156: POP
// end ;
71157: LD_VAR 0 4
71161: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
71162: LD_INT 0
71164: PPUSH
71165: PPUSH
71166: PPUSH
71167: PPUSH
71168: PPUSH
71169: PPUSH
// if not units then
71170: LD_VAR 0 1
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71580
// result := UnitFilter ( units , [ f_ok ] ) ;
71179: LD_ADDR_VAR 0 3
71183: PUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: LD_INT 50
71191: PUSH
71192: EMPTY
71193: LIST
71194: PPUSH
71195: CALL_OW 72
71199: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71200: LD_ADDR_VAR 0 7
71204: PUSH
71205: LD_VAR 0 1
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: PPUSH
71214: CALL_OW 255
71218: ST_TO_ADDR
// if not result then
71219: LD_VAR 0 3
71223: NOT
71224: IFFALSE 71228
// exit ;
71226: GO 71580
// for i in result do
71228: LD_ADDR_VAR 0 4
71232: PUSH
71233: LD_VAR 0 3
71237: PUSH
71238: FOR_IN
71239: IFFALSE 71578
// begin tag := GetTag ( i ) + 1 ;
71241: LD_ADDR_VAR 0 8
71245: PUSH
71246: LD_VAR 0 4
71250: PPUSH
71251: CALL_OW 110
71255: PUSH
71256: LD_INT 1
71258: PLUS
71259: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71260: LD_ADDR_VAR 0 6
71264: PUSH
71265: LD_VAR 0 4
71269: PPUSH
71270: CALL_OW 250
71274: PPUSH
71275: LD_VAR 0 4
71279: PPUSH
71280: CALL_OW 251
71284: PPUSH
71285: LD_INT 6
71287: PPUSH
71288: CALL 70904 0 3
71292: ST_TO_ADDR
// if cr then
71293: LD_VAR 0 6
71297: IFFALSE 71336
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71299: LD_VAR 0 4
71303: PPUSH
71304: LD_VAR 0 6
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PUSH
71313: LD_INT 1
71315: ARRAY
71316: PPUSH
71317: LD_VAR 0 6
71321: PUSH
71322: LD_INT 1
71324: ARRAY
71325: PUSH
71326: LD_INT 2
71328: ARRAY
71329: PPUSH
71330: CALL_OW 116
71334: GO 71576
// if path > tag then
71336: LD_VAR 0 2
71340: PUSH
71341: LD_VAR 0 8
71345: GREATER
71346: IFFALSE 71524
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71348: LD_ADDR_VAR 0 5
71352: PUSH
71353: LD_INT 81
71355: PUSH
71356: LD_VAR 0 7
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 91
71367: PUSH
71368: LD_VAR 0 4
71372: PUSH
71373: LD_INT 12
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: LIST
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PPUSH
71385: CALL_OW 69
71389: ST_TO_ADDR
// if enemy then
71390: LD_VAR 0 5
71394: IFFALSE 71422
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71396: LD_VAR 0 4
71400: PPUSH
71401: LD_VAR 0 5
71405: PPUSH
71406: LD_VAR 0 4
71410: PPUSH
71411: CALL_OW 74
71415: PPUSH
71416: CALL_OW 115
71420: GO 71522
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71422: LD_VAR 0 4
71426: PPUSH
71427: LD_VAR 0 2
71431: PUSH
71432: LD_VAR 0 8
71436: ARRAY
71437: PUSH
71438: LD_INT 1
71440: ARRAY
71441: PPUSH
71442: LD_VAR 0 2
71446: PUSH
71447: LD_VAR 0 8
71451: ARRAY
71452: PUSH
71453: LD_INT 2
71455: ARRAY
71456: PPUSH
71457: CALL_OW 297
71461: PUSH
71462: LD_INT 6
71464: GREATER
71465: IFFALSE 71508
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71467: LD_VAR 0 4
71471: PPUSH
71472: LD_VAR 0 2
71476: PUSH
71477: LD_VAR 0 8
71481: ARRAY
71482: PUSH
71483: LD_INT 1
71485: ARRAY
71486: PPUSH
71487: LD_VAR 0 2
71491: PUSH
71492: LD_VAR 0 8
71496: ARRAY
71497: PUSH
71498: LD_INT 2
71500: ARRAY
71501: PPUSH
71502: CALL_OW 114
71506: GO 71522
// SetTag ( i , tag ) ;
71508: LD_VAR 0 4
71512: PPUSH
71513: LD_VAR 0 8
71517: PPUSH
71518: CALL_OW 109
// end else
71522: GO 71576
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71524: LD_ADDR_VAR 0 5
71528: PUSH
71529: LD_INT 81
71531: PUSH
71532: LD_VAR 0 7
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PPUSH
71541: CALL_OW 69
71545: ST_TO_ADDR
// if enemy then
71546: LD_VAR 0 5
71550: IFFALSE 71576
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71552: LD_VAR 0 4
71556: PPUSH
71557: LD_VAR 0 5
71561: PPUSH
71562: LD_VAR 0 4
71566: PPUSH
71567: CALL_OW 74
71571: PPUSH
71572: CALL_OW 115
// end ; end ;
71576: GO 71238
71578: POP
71579: POP
// end ;
71580: LD_VAR 0 3
71584: RET
