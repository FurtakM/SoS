// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL 30664 0 1
// if unit = Burlak then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 49
14586: EQUAL
14587: IFFALSE 14593
// BurlakDying ;
14589: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 255
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: IFFALSE 14622
// lostComradesCounter = lostComradesCounter + 1 ;
14608: LD_ADDR_EXP 23
14612: PUSH
14613: LD_EXP 23
14617: PUSH
14618: LD_INT 1
14620: PLUS
14621: ST_TO_ADDR
// if unit in kirovSolds then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_EXP 59
14631: IN
14632: IFFALSE 14650
// kirovSolds = kirovSolds diff unit ;
14634: LD_ADDR_EXP 59
14638: PUSH
14639: LD_EXP 59
14643: PUSH
14644: LD_VAR 0 1
14648: DIFF
14649: ST_TO_ADDR
// end ;
14650: PPOPN 1
14652: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 30784 0 2
// end ;
14667: PPOPN 2
14669: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 3
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: AND
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: AND
14707: PUSH
14708: LD_EXP 17
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: AND
14717: OR
14718: IFFALSE 14724
// Dial_SecondAttack ;
14720: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 3
14731: EQUAL
14732: PUSH
14733: LD_VAR 0 2
14737: PUSH
14738: LD_INT 6
14740: EQUAL
14741: AND
14742: PUSH
14743: LD_EXP 18
14747: NOT
14748: AND
14749: IFFALSE 14755
// Dialogue_AttackComrade ;
14751: CALL 4057 0 0
// end ; end_of_file
14755: PPOPN 2
14757: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14758: LD_EXP 56
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: PUSH
14772: LD_EXP 29
14776: PUSH
14777: LD_INT 525
14779: LESS
14780: AND
14781: IFFALSE 14793
14783: GO 14785
14785: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14786: LD_STRING ACH_YELENA
14788: PPUSH
14789: CALL_OW 543
14793: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14794: LD_INT 23
14796: PUSH
14797: LD_INT 0
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 14
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 18
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: NOT
14852: IFFALSE 14864
14854: GO 14856
14856: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14857: LD_STRING ACH_NATURE
14859: PPUSH
14860: CALL_OW 543
14864: END
// every 0 0$1 do
14865: GO 14867
14867: DISABLE
// begin enable ;
14868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14869: LD_STRING updateTimer(
14871: PUSH
14872: LD_OWVAR 1
14876: STR
14877: PUSH
14878: LD_STRING );
14880: STR
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// export function SOS_MapStart ( ) ; begin
14887: LD_INT 0
14889: PPUSH
// if streamModeActive then
14890: LD_EXP 61
14894: IFFALSE 14903
// DefineStreamItems ( true ) ;
14896: LD_INT 1
14898: PPUSH
14899: CALL 16707 0 1
// UpdateLuaVariables ( ) ;
14903: CALL 14920 0 0
// UpdateFactoryWaypoints ( ) ;
14907: CALL 29568 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14911: CALL 29825 0 0
// end ;
14915: LD_VAR 0 1
14919: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
14920: LD_INT 0
14922: PPUSH
// if not globalGameSaveCounter then
14923: LD_EXP 60
14927: NOT
14928: IFFALSE 14939
// ToLua ( setGameSaveCounter(0) ) else
14930: LD_STRING setGameSaveCounter(0)
14932: PPUSH
14933: CALL_OW 559
14937: GO 14971
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14939: LD_ADDR_EXP 60
14943: PUSH
14944: LD_EXP 60
14948: PPUSH
14949: CALL 73945 0 1
14953: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14954: LD_STRING setGameSaveCounter(
14956: PUSH
14957: LD_EXP 60
14961: STR
14962: PUSH
14963: LD_STRING )
14965: STR
14966: PPUSH
14967: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14971: LD_STRING setGameDifficulty(
14973: PUSH
14974: LD_OWVAR 67
14978: STR
14979: PUSH
14980: LD_STRING )
14982: STR
14983: PPUSH
14984: CALL_OW 559
// end ;
14988: LD_VAR 0 1
14992: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14993: LD_INT 0
14995: PPUSH
// if p2 = stream_mode then
14996: LD_VAR 0 2
15000: PUSH
15001: LD_INT 100
15003: EQUAL
15004: IFFALSE 16007
// begin if not StreamModeActive then
15006: LD_EXP 61
15010: NOT
15011: IFFALSE 15021
// StreamModeActive := true ;
15013: LD_ADDR_EXP 61
15017: PUSH
15018: LD_INT 1
15020: ST_TO_ADDR
// if p3 = 0 then
15021: LD_VAR 0 3
15025: PUSH
15026: LD_INT 0
15028: EQUAL
15029: IFFALSE 15035
// InitStreamMode ;
15031: CALL 16243 0 0
// if p3 = 1 then
15035: LD_VAR 0 3
15039: PUSH
15040: LD_INT 1
15042: EQUAL
15043: IFFALSE 15053
// sRocket := true ;
15045: LD_ADDR_EXP 66
15049: PUSH
15050: LD_INT 1
15052: ST_TO_ADDR
// if p3 = 2 then
15053: LD_VAR 0 3
15057: PUSH
15058: LD_INT 2
15060: EQUAL
15061: IFFALSE 15071
// sSpeed := true ;
15063: LD_ADDR_EXP 65
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// if p3 = 3 then
15071: LD_VAR 0 3
15075: PUSH
15076: LD_INT 3
15078: EQUAL
15079: IFFALSE 15089
// sEngine := true ;
15081: LD_ADDR_EXP 67
15085: PUSH
15086: LD_INT 1
15088: ST_TO_ADDR
// if p3 = 4 then
15089: LD_VAR 0 3
15093: PUSH
15094: LD_INT 4
15096: EQUAL
15097: IFFALSE 15107
// sSpec := true ;
15099: LD_ADDR_EXP 64
15103: PUSH
15104: LD_INT 1
15106: ST_TO_ADDR
// if p3 = 5 then
15107: LD_VAR 0 3
15111: PUSH
15112: LD_INT 5
15114: EQUAL
15115: IFFALSE 15125
// sLevel := true ;
15117: LD_ADDR_EXP 68
15121: PUSH
15122: LD_INT 1
15124: ST_TO_ADDR
// if p3 = 6 then
15125: LD_VAR 0 3
15129: PUSH
15130: LD_INT 6
15132: EQUAL
15133: IFFALSE 15143
// sArmoury := true ;
15135: LD_ADDR_EXP 69
15139: PUSH
15140: LD_INT 1
15142: ST_TO_ADDR
// if p3 = 7 then
15143: LD_VAR 0 3
15147: PUSH
15148: LD_INT 7
15150: EQUAL
15151: IFFALSE 15161
// sRadar := true ;
15153: LD_ADDR_EXP 70
15157: PUSH
15158: LD_INT 1
15160: ST_TO_ADDR
// if p3 = 8 then
15161: LD_VAR 0 3
15165: PUSH
15166: LD_INT 8
15168: EQUAL
15169: IFFALSE 15179
// sBunker := true ;
15171: LD_ADDR_EXP 71
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// if p3 = 9 then
15179: LD_VAR 0 3
15183: PUSH
15184: LD_INT 9
15186: EQUAL
15187: IFFALSE 15197
// sHack := true ;
15189: LD_ADDR_EXP 72
15193: PUSH
15194: LD_INT 1
15196: ST_TO_ADDR
// if p3 = 10 then
15197: LD_VAR 0 3
15201: PUSH
15202: LD_INT 10
15204: EQUAL
15205: IFFALSE 15215
// sFire := true ;
15207: LD_ADDR_EXP 73
15211: PUSH
15212: LD_INT 1
15214: ST_TO_ADDR
// if p3 = 11 then
15215: LD_VAR 0 3
15219: PUSH
15220: LD_INT 11
15222: EQUAL
15223: IFFALSE 15233
// sRefresh := true ;
15225: LD_ADDR_EXP 74
15229: PUSH
15230: LD_INT 1
15232: ST_TO_ADDR
// if p3 = 12 then
15233: LD_VAR 0 3
15237: PUSH
15238: LD_INT 12
15240: EQUAL
15241: IFFALSE 15251
// sExp := true ;
15243: LD_ADDR_EXP 75
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// if p3 = 13 then
15251: LD_VAR 0 3
15255: PUSH
15256: LD_INT 13
15258: EQUAL
15259: IFFALSE 15269
// sDepot := true ;
15261: LD_ADDR_EXP 76
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// if p3 = 14 then
15269: LD_VAR 0 3
15273: PUSH
15274: LD_INT 14
15276: EQUAL
15277: IFFALSE 15287
// sFlag := true ;
15279: LD_ADDR_EXP 77
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// if p3 = 15 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 15
15294: EQUAL
15295: IFFALSE 15305
// sKamikadze := true ;
15297: LD_ADDR_EXP 85
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if p3 = 16 then
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 16
15312: EQUAL
15313: IFFALSE 15323
// sTroll := true ;
15315: LD_ADDR_EXP 86
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if p3 = 17 then
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 17
15330: EQUAL
15331: IFFALSE 15341
// sSlow := true ;
15333: LD_ADDR_EXP 87
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// if p3 = 18 then
15341: LD_VAR 0 3
15345: PUSH
15346: LD_INT 18
15348: EQUAL
15349: IFFALSE 15359
// sLack := true ;
15351: LD_ADDR_EXP 88
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// if p3 = 19 then
15359: LD_VAR 0 3
15363: PUSH
15364: LD_INT 19
15366: EQUAL
15367: IFFALSE 15377
// sTank := true ;
15369: LD_ADDR_EXP 90
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// if p3 = 20 then
15377: LD_VAR 0 3
15381: PUSH
15382: LD_INT 20
15384: EQUAL
15385: IFFALSE 15395
// sRemote := true ;
15387: LD_ADDR_EXP 91
15391: PUSH
15392: LD_INT 1
15394: ST_TO_ADDR
// if p3 = 21 then
15395: LD_VAR 0 3
15399: PUSH
15400: LD_INT 21
15402: EQUAL
15403: IFFALSE 15413
// sPowell := true ;
15405: LD_ADDR_EXP 92
15409: PUSH
15410: LD_INT 1
15412: ST_TO_ADDR
// if p3 = 22 then
15413: LD_VAR 0 3
15417: PUSH
15418: LD_INT 22
15420: EQUAL
15421: IFFALSE 15431
// sTeleport := true ;
15423: LD_ADDR_EXP 95
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// if p3 = 23 then
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 23
15438: EQUAL
15439: IFFALSE 15449
// sOilTower := true ;
15441: LD_ADDR_EXP 97
15445: PUSH
15446: LD_INT 1
15448: ST_TO_ADDR
// if p3 = 24 then
15449: LD_VAR 0 3
15453: PUSH
15454: LD_INT 24
15456: EQUAL
15457: IFFALSE 15467
// sShovel := true ;
15459: LD_ADDR_EXP 98
15463: PUSH
15464: LD_INT 1
15466: ST_TO_ADDR
// if p3 = 25 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_INT 25
15474: EQUAL
15475: IFFALSE 15485
// sSheik := true ;
15477: LD_ADDR_EXP 99
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// if p3 = 26 then
15485: LD_VAR 0 3
15489: PUSH
15490: LD_INT 26
15492: EQUAL
15493: IFFALSE 15503
// sEarthquake := true ;
15495: LD_ADDR_EXP 101
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// if p3 = 27 then
15503: LD_VAR 0 3
15507: PUSH
15508: LD_INT 27
15510: EQUAL
15511: IFFALSE 15521
// sAI := true ;
15513: LD_ADDR_EXP 102
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// if p3 = 28 then
15521: LD_VAR 0 3
15525: PUSH
15526: LD_INT 28
15528: EQUAL
15529: IFFALSE 15539
// sCargo := true ;
15531: LD_ADDR_EXP 105
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
// if p3 = 29 then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_INT 29
15546: EQUAL
15547: IFFALSE 15557
// sDLaser := true ;
15549: LD_ADDR_EXP 106
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// if p3 = 30 then
15557: LD_VAR 0 3
15561: PUSH
15562: LD_INT 30
15564: EQUAL
15565: IFFALSE 15575
// sExchange := true ;
15567: LD_ADDR_EXP 107
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// if p3 = 31 then
15575: LD_VAR 0 3
15579: PUSH
15580: LD_INT 31
15582: EQUAL
15583: IFFALSE 15593
// sFac := true ;
15585: LD_ADDR_EXP 108
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// if p3 = 32 then
15593: LD_VAR 0 3
15597: PUSH
15598: LD_INT 32
15600: EQUAL
15601: IFFALSE 15611
// sPower := true ;
15603: LD_ADDR_EXP 109
15607: PUSH
15608: LD_INT 1
15610: ST_TO_ADDR
// if p3 = 33 then
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 33
15618: EQUAL
15619: IFFALSE 15629
// sRandom := true ;
15621: LD_ADDR_EXP 110
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if p3 = 34 then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 34
15636: EQUAL
15637: IFFALSE 15647
// sShield := true ;
15639: LD_ADDR_EXP 111
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// if p3 = 35 then
15647: LD_VAR 0 3
15651: PUSH
15652: LD_INT 35
15654: EQUAL
15655: IFFALSE 15665
// sTime := true ;
15657: LD_ADDR_EXP 112
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// if p3 = 36 then
15665: LD_VAR 0 3
15669: PUSH
15670: LD_INT 36
15672: EQUAL
15673: IFFALSE 15683
// sTools := true ;
15675: LD_ADDR_EXP 113
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// if p3 = 101 then
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 101
15690: EQUAL
15691: IFFALSE 15701
// sSold := true ;
15693: LD_ADDR_EXP 78
15697: PUSH
15698: LD_INT 1
15700: ST_TO_ADDR
// if p3 = 102 then
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 102
15708: EQUAL
15709: IFFALSE 15719
// sDiff := true ;
15711: LD_ADDR_EXP 79
15715: PUSH
15716: LD_INT 1
15718: ST_TO_ADDR
// if p3 = 103 then
15719: LD_VAR 0 3
15723: PUSH
15724: LD_INT 103
15726: EQUAL
15727: IFFALSE 15737
// sFog := true ;
15729: LD_ADDR_EXP 82
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// if p3 = 104 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 104
15744: EQUAL
15745: IFFALSE 15755
// sReset := true ;
15747: LD_ADDR_EXP 83
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// if p3 = 105 then
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 105
15762: EQUAL
15763: IFFALSE 15773
// sSun := true ;
15765: LD_ADDR_EXP 84
15769: PUSH
15770: LD_INT 1
15772: ST_TO_ADDR
// if p3 = 106 then
15773: LD_VAR 0 3
15777: PUSH
15778: LD_INT 106
15780: EQUAL
15781: IFFALSE 15791
// sTiger := true ;
15783: LD_ADDR_EXP 80
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if p3 = 107 then
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 107
15798: EQUAL
15799: IFFALSE 15809
// sBomb := true ;
15801: LD_ADDR_EXP 81
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// if p3 = 108 then
15809: LD_VAR 0 3
15813: PUSH
15814: LD_INT 108
15816: EQUAL
15817: IFFALSE 15827
// sWound := true ;
15819: LD_ADDR_EXP 89
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// if p3 = 109 then
15827: LD_VAR 0 3
15831: PUSH
15832: LD_INT 109
15834: EQUAL
15835: IFFALSE 15845
// sBetray := true ;
15837: LD_ADDR_EXP 93
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// if p3 = 110 then
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 110
15852: EQUAL
15853: IFFALSE 15863
// sContamin := true ;
15855: LD_ADDR_EXP 94
15859: PUSH
15860: LD_INT 1
15862: ST_TO_ADDR
// if p3 = 111 then
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 111
15870: EQUAL
15871: IFFALSE 15881
// sOil := true ;
15873: LD_ADDR_EXP 96
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// if p3 = 112 then
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 112
15888: EQUAL
15889: IFFALSE 15899
// sStu := true ;
15891: LD_ADDR_EXP 100
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// if p3 = 113 then
15899: LD_VAR 0 3
15903: PUSH
15904: LD_INT 113
15906: EQUAL
15907: IFFALSE 15917
// sBazooka := true ;
15909: LD_ADDR_EXP 103
15913: PUSH
15914: LD_INT 1
15916: ST_TO_ADDR
// if p3 = 114 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_INT 114
15924: EQUAL
15925: IFFALSE 15935
// sMortar := true ;
15927: LD_ADDR_EXP 104
15931: PUSH
15932: LD_INT 1
15934: ST_TO_ADDR
// if p3 = 115 then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 115
15942: EQUAL
15943: IFFALSE 15953
// sRanger := true ;
15945: LD_ADDR_EXP 114
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// if p3 = 116 then
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 116
15960: EQUAL
15961: IFFALSE 15971
// sComputer := true ;
15963: LD_ADDR_EXP 115
15967: PUSH
15968: LD_INT 1
15970: ST_TO_ADDR
// if p3 = 117 then
15971: LD_VAR 0 3
15975: PUSH
15976: LD_INT 117
15978: EQUAL
15979: IFFALSE 15989
// s30 := true ;
15981: LD_ADDR_EXP 116
15985: PUSH
15986: LD_INT 1
15988: ST_TO_ADDR
// if p3 = 118 then
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 118
15996: EQUAL
15997: IFFALSE 16007
// s60 := true ;
15999: LD_ADDR_EXP 117
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// end ; if p2 = hack_mode then
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 101
16014: EQUAL
16015: IFFALSE 16143
// begin case p3 of 1 :
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 1
16024: DOUBLE
16025: EQUAL
16026: IFTRUE 16030
16028: GO 16037
16030: POP
// hHackUnlimitedResources ; 2 :
16031: CALL 28314 0 0
16035: GO 16143
16037: LD_INT 2
16039: DOUBLE
16040: EQUAL
16041: IFTRUE 16045
16043: GO 16052
16045: POP
// hHackSetLevel10 ; 3 :
16046: CALL 28447 0 0
16050: GO 16143
16052: LD_INT 3
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16067
16060: POP
// hHackSetLevel10YourUnits ; 4 :
16061: CALL 28532 0 0
16065: GO 16143
16067: LD_INT 4
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16082
16075: POP
// hHackInvincible ; 5 :
16076: CALL 28980 0 0
16080: GO 16143
16082: LD_INT 5
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16097
16090: POP
// hHackInvisible ; 6 :
16091: CALL 29091 0 0
16095: GO 16143
16097: LD_INT 6
16099: DOUBLE
16100: EQUAL
16101: IFTRUE 16105
16103: GO 16112
16105: POP
// hHackChangeYourSide ; 7 :
16106: CALL 29148 0 0
16110: GO 16143
16112: LD_INT 7
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16127
16120: POP
// hHackChangeUnitSide ; 8 :
16121: CALL 29190 0 0
16125: GO 16143
16127: LD_INT 8
16129: DOUBLE
16130: EQUAL
16131: IFTRUE 16135
16133: GO 16142
16135: POP
// hHackFog ; end ;
16136: CALL 29291 0 0
16140: GO 16143
16142: POP
// end ; if p2 = game_save_mode then
16143: LD_VAR 0 2
16147: PUSH
16148: LD_INT 102
16150: EQUAL
16151: IFFALSE 16216
// begin if p3 = 1 then
16153: LD_VAR 0 3
16157: PUSH
16158: LD_INT 1
16160: EQUAL
16161: IFFALSE 16173
// globalGameSaveCounter := p4 ;
16163: LD_ADDR_EXP 60
16167: PUSH
16168: LD_VAR 0 4
16172: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16173: LD_VAR 0 3
16177: PUSH
16178: LD_INT 2
16180: EQUAL
16181: PUSH
16182: LD_EXP 60
16186: AND
16187: IFFALSE 16206
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16189: LD_STRING setGameSaveCounter(
16191: PUSH
16192: LD_EXP 60
16196: STR
16197: PUSH
16198: LD_STRING )
16200: STR
16201: PPUSH
16202: CALL_OW 559
// display_strings := globalGameSaveCounter ;
16206: LD_ADDR_OWVAR 47
16210: PUSH
16211: LD_EXP 60
16215: ST_TO_ADDR
// end ; end ;
16216: LD_VAR 0 7
16220: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16221: GO 16223
16223: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16224: LD_STRING initStreamRollete();
16226: PPUSH
16227: CALL_OW 559
// InitStreamMode ;
16231: CALL 16243 0 0
// DefineStreamItems ( false ) ;
16235: LD_INT 0
16237: PPUSH
16238: CALL 16707 0 1
// end ;
16242: END
// function InitStreamMode ; begin
16243: LD_INT 0
16245: PPUSH
// streamModeActive := false ;
16246: LD_ADDR_EXP 61
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// normalCounter := 36 ;
16254: LD_ADDR_EXP 62
16258: PUSH
16259: LD_INT 36
16261: ST_TO_ADDR
// hardcoreCounter := 18 ;
16262: LD_ADDR_EXP 63
16266: PUSH
16267: LD_INT 18
16269: ST_TO_ADDR
// sRocket := false ;
16270: LD_ADDR_EXP 66
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
// sSpeed := false ;
16278: LD_ADDR_EXP 65
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// sEngine := false ;
16286: LD_ADDR_EXP 67
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// sSpec := false ;
16294: LD_ADDR_EXP 64
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// sLevel := false ;
16302: LD_ADDR_EXP 68
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// sArmoury := false ;
16310: LD_ADDR_EXP 69
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// sRadar := false ;
16318: LD_ADDR_EXP 70
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// sBunker := false ;
16326: LD_ADDR_EXP 71
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// sHack := false ;
16334: LD_ADDR_EXP 72
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// sFire := false ;
16342: LD_ADDR_EXP 73
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// sRefresh := false ;
16350: LD_ADDR_EXP 74
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// sExp := false ;
16358: LD_ADDR_EXP 75
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// sDepot := false ;
16366: LD_ADDR_EXP 76
16370: PUSH
16371: LD_INT 0
16373: ST_TO_ADDR
// sFlag := false ;
16374: LD_ADDR_EXP 77
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
// sKamikadze := false ;
16382: LD_ADDR_EXP 85
16386: PUSH
16387: LD_INT 0
16389: ST_TO_ADDR
// sTroll := false ;
16390: LD_ADDR_EXP 86
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// sSlow := false ;
16398: LD_ADDR_EXP 87
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// sLack := false ;
16406: LD_ADDR_EXP 88
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// sTank := false ;
16414: LD_ADDR_EXP 90
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// sRemote := false ;
16422: LD_ADDR_EXP 91
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// sPowell := false ;
16430: LD_ADDR_EXP 92
16434: PUSH
16435: LD_INT 0
16437: ST_TO_ADDR
// sTeleport := false ;
16438: LD_ADDR_EXP 95
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// sOilTower := false ;
16446: LD_ADDR_EXP 97
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// sShovel := false ;
16454: LD_ADDR_EXP 98
16458: PUSH
16459: LD_INT 0
16461: ST_TO_ADDR
// sSheik := false ;
16462: LD_ADDR_EXP 99
16466: PUSH
16467: LD_INT 0
16469: ST_TO_ADDR
// sEarthquake := false ;
16470: LD_ADDR_EXP 101
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// sAI := false ;
16478: LD_ADDR_EXP 102
16482: PUSH
16483: LD_INT 0
16485: ST_TO_ADDR
// sCargo := false ;
16486: LD_ADDR_EXP 105
16490: PUSH
16491: LD_INT 0
16493: ST_TO_ADDR
// sDLaser := false ;
16494: LD_ADDR_EXP 106
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// sExchange := false ;
16502: LD_ADDR_EXP 107
16506: PUSH
16507: LD_INT 0
16509: ST_TO_ADDR
// sFac := false ;
16510: LD_ADDR_EXP 108
16514: PUSH
16515: LD_INT 0
16517: ST_TO_ADDR
// sPower := false ;
16518: LD_ADDR_EXP 109
16522: PUSH
16523: LD_INT 0
16525: ST_TO_ADDR
// sRandom := false ;
16526: LD_ADDR_EXP 110
16530: PUSH
16531: LD_INT 0
16533: ST_TO_ADDR
// sShield := false ;
16534: LD_ADDR_EXP 111
16538: PUSH
16539: LD_INT 0
16541: ST_TO_ADDR
// sTime := false ;
16542: LD_ADDR_EXP 112
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// sTools := false ;
16550: LD_ADDR_EXP 113
16554: PUSH
16555: LD_INT 0
16557: ST_TO_ADDR
// sSold := false ;
16558: LD_ADDR_EXP 78
16562: PUSH
16563: LD_INT 0
16565: ST_TO_ADDR
// sDiff := false ;
16566: LD_ADDR_EXP 79
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// sFog := false ;
16574: LD_ADDR_EXP 82
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// sReset := false ;
16582: LD_ADDR_EXP 83
16586: PUSH
16587: LD_INT 0
16589: ST_TO_ADDR
// sSun := false ;
16590: LD_ADDR_EXP 84
16594: PUSH
16595: LD_INT 0
16597: ST_TO_ADDR
// sTiger := false ;
16598: LD_ADDR_EXP 80
16602: PUSH
16603: LD_INT 0
16605: ST_TO_ADDR
// sBomb := false ;
16606: LD_ADDR_EXP 81
16610: PUSH
16611: LD_INT 0
16613: ST_TO_ADDR
// sWound := false ;
16614: LD_ADDR_EXP 89
16618: PUSH
16619: LD_INT 0
16621: ST_TO_ADDR
// sBetray := false ;
16622: LD_ADDR_EXP 93
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// sContamin := false ;
16630: LD_ADDR_EXP 94
16634: PUSH
16635: LD_INT 0
16637: ST_TO_ADDR
// sOil := false ;
16638: LD_ADDR_EXP 96
16642: PUSH
16643: LD_INT 0
16645: ST_TO_ADDR
// sStu := false ;
16646: LD_ADDR_EXP 100
16650: PUSH
16651: LD_INT 0
16653: ST_TO_ADDR
// sBazooka := false ;
16654: LD_ADDR_EXP 103
16658: PUSH
16659: LD_INT 0
16661: ST_TO_ADDR
// sMortar := false ;
16662: LD_ADDR_EXP 104
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// sRanger := false ;
16670: LD_ADDR_EXP 114
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// sComputer := false ;
16678: LD_ADDR_EXP 115
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// s30 := false ;
16686: LD_ADDR_EXP 116
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// s60 := false ;
16694: LD_ADDR_EXP 117
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// end ;
16702: LD_VAR 0 1
16706: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16707: LD_INT 0
16709: PPUSH
16710: PPUSH
16711: PPUSH
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
// result := [ ] ;
16716: LD_ADDR_VAR 0 2
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// if campaign_id = 1 then
16723: LD_OWVAR 69
16727: PUSH
16728: LD_INT 1
16730: EQUAL
16731: IFFALSE 19897
// begin case mission_number of 1 :
16733: LD_OWVAR 70
16737: PUSH
16738: LD_INT 1
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16822
16746: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: LD_INT 4
16757: PUSH
16758: LD_INT 11
16760: PUSH
16761: LD_INT 12
16763: PUSH
16764: LD_INT 15
16766: PUSH
16767: LD_INT 16
16769: PUSH
16770: LD_INT 22
16772: PUSH
16773: LD_INT 23
16775: PUSH
16776: LD_INT 26
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 101
16792: PUSH
16793: LD_INT 102
16795: PUSH
16796: LD_INT 106
16798: PUSH
16799: LD_INT 116
16801: PUSH
16802: LD_INT 117
16804: PUSH
16805: LD_INT 118
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: ST_TO_ADDR
16820: GO 19895
16822: LD_INT 2
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 16914
16830: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_INT 2
16838: PUSH
16839: LD_INT 4
16841: PUSH
16842: LD_INT 11
16844: PUSH
16845: LD_INT 12
16847: PUSH
16848: LD_INT 15
16850: PUSH
16851: LD_INT 16
16853: PUSH
16854: LD_INT 22
16856: PUSH
16857: LD_INT 23
16859: PUSH
16860: LD_INT 26
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 101
16876: PUSH
16877: LD_INT 102
16879: PUSH
16880: LD_INT 105
16882: PUSH
16883: LD_INT 106
16885: PUSH
16886: LD_INT 108
16888: PUSH
16889: LD_INT 116
16891: PUSH
16892: LD_INT 117
16894: PUSH
16895: LD_INT 118
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: ST_TO_ADDR
16912: GO 19895
16914: LD_INT 3
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 17010
16922: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 4
16933: PUSH
16934: LD_INT 5
16936: PUSH
16937: LD_INT 11
16939: PUSH
16940: LD_INT 12
16942: PUSH
16943: LD_INT 15
16945: PUSH
16946: LD_INT 16
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_INT 26
16954: PUSH
16955: LD_INT 36
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 101
16972: PUSH
16973: LD_INT 102
16975: PUSH
16976: LD_INT 105
16978: PUSH
16979: LD_INT 106
16981: PUSH
16982: LD_INT 108
16984: PUSH
16985: LD_INT 116
16987: PUSH
16988: LD_INT 117
16990: PUSH
16991: LD_INT 118
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ST_TO_ADDR
17008: GO 19895
17010: LD_INT 4
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17114
17018: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17019: LD_ADDR_VAR 0 2
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: LD_INT 5
17032: PUSH
17033: LD_INT 8
17035: PUSH
17036: LD_INT 11
17038: PUSH
17039: LD_INT 12
17041: PUSH
17042: LD_INT 15
17044: PUSH
17045: LD_INT 16
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_INT 23
17053: PUSH
17054: LD_INT 26
17056: PUSH
17057: LD_INT 36
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 101
17076: PUSH
17077: LD_INT 102
17079: PUSH
17080: LD_INT 105
17082: PUSH
17083: LD_INT 106
17085: PUSH
17086: LD_INT 108
17088: PUSH
17089: LD_INT 116
17091: PUSH
17092: LD_INT 117
17094: PUSH
17095: LD_INT 118
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: ST_TO_ADDR
17112: GO 19895
17114: LD_INT 5
17116: DOUBLE
17117: EQUAL
17118: IFTRUE 17122
17120: GO 17234
17122: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: LD_INT 4
17133: PUSH
17134: LD_INT 5
17136: PUSH
17137: LD_INT 6
17139: PUSH
17140: LD_INT 8
17142: PUSH
17143: LD_INT 11
17145: PUSH
17146: LD_INT 12
17148: PUSH
17149: LD_INT 15
17151: PUSH
17152: LD_INT 16
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 23
17160: PUSH
17161: LD_INT 25
17163: PUSH
17164: LD_INT 26
17166: PUSH
17167: LD_INT 36
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 101
17188: PUSH
17189: LD_INT 102
17191: PUSH
17192: LD_INT 105
17194: PUSH
17195: LD_INT 106
17197: PUSH
17198: LD_INT 108
17200: PUSH
17201: LD_INT 109
17203: PUSH
17204: LD_INT 112
17206: PUSH
17207: LD_INT 116
17209: PUSH
17210: LD_INT 117
17212: PUSH
17213: LD_INT 118
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: ST_TO_ADDR
17232: GO 19895
17234: LD_INT 6
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17374
17242: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 4
17253: PUSH
17254: LD_INT 5
17256: PUSH
17257: LD_INT 6
17259: PUSH
17260: LD_INT 8
17262: PUSH
17263: LD_INT 11
17265: PUSH
17266: LD_INT 12
17268: PUSH
17269: LD_INT 15
17271: PUSH
17272: LD_INT 16
17274: PUSH
17275: LD_INT 20
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 23
17286: PUSH
17287: LD_INT 25
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: LD_INT 30
17295: PUSH
17296: LD_INT 31
17298: PUSH
17299: LD_INT 32
17301: PUSH
17302: LD_INT 36
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 101
17328: PUSH
17329: LD_INT 102
17331: PUSH
17332: LD_INT 105
17334: PUSH
17335: LD_INT 106
17337: PUSH
17338: LD_INT 108
17340: PUSH
17341: LD_INT 109
17343: PUSH
17344: LD_INT 112
17346: PUSH
17347: LD_INT 116
17349: PUSH
17350: LD_INT 117
17352: PUSH
17353: LD_INT 118
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: ST_TO_ADDR
17372: GO 19895
17374: LD_INT 7
17376: DOUBLE
17377: EQUAL
17378: IFTRUE 17382
17380: GO 17494
17382: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: LD_INT 5
17396: PUSH
17397: LD_INT 7
17399: PUSH
17400: LD_INT 11
17402: PUSH
17403: LD_INT 12
17405: PUSH
17406: LD_INT 15
17408: PUSH
17409: LD_INT 16
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 25
17426: PUSH
17427: LD_INT 26
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 101
17448: PUSH
17449: LD_INT 102
17451: PUSH
17452: LD_INT 103
17454: PUSH
17455: LD_INT 105
17457: PUSH
17458: LD_INT 106
17460: PUSH
17461: LD_INT 108
17463: PUSH
17464: LD_INT 112
17466: PUSH
17467: LD_INT 116
17469: PUSH
17470: LD_INT 117
17472: PUSH
17473: LD_INT 118
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: ST_TO_ADDR
17492: GO 19895
17494: LD_INT 8
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17642
17502: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17503: LD_ADDR_VAR 0 2
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 4
17513: PUSH
17514: LD_INT 5
17516: PUSH
17517: LD_INT 6
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: LD_INT 8
17525: PUSH
17526: LD_INT 11
17528: PUSH
17529: LD_INT 12
17531: PUSH
17532: LD_INT 15
17534: PUSH
17535: LD_INT 16
17537: PUSH
17538: LD_INT 20
17540: PUSH
17541: LD_INT 21
17543: PUSH
17544: LD_INT 22
17546: PUSH
17547: LD_INT 23
17549: PUSH
17550: LD_INT 25
17552: PUSH
17553: LD_INT 26
17555: PUSH
17556: LD_INT 30
17558: PUSH
17559: LD_INT 31
17561: PUSH
17562: LD_INT 32
17564: PUSH
17565: LD_INT 36
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 101
17592: PUSH
17593: LD_INT 102
17595: PUSH
17596: LD_INT 103
17598: PUSH
17599: LD_INT 105
17601: PUSH
17602: LD_INT 106
17604: PUSH
17605: LD_INT 108
17607: PUSH
17608: LD_INT 109
17610: PUSH
17611: LD_INT 112
17613: PUSH
17614: LD_INT 116
17616: PUSH
17617: LD_INT 117
17619: PUSH
17620: LD_INT 118
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: ST_TO_ADDR
17640: GO 19895
17642: LD_INT 9
17644: DOUBLE
17645: EQUAL
17646: IFTRUE 17650
17648: GO 17798
17650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17651: LD_ADDR_VAR 0 2
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 4
17661: PUSH
17662: LD_INT 5
17664: PUSH
17665: LD_INT 6
17667: PUSH
17668: LD_INT 7
17670: PUSH
17671: LD_INT 8
17673: PUSH
17674: LD_INT 11
17676: PUSH
17677: LD_INT 12
17679: PUSH
17680: LD_INT 15
17682: PUSH
17683: LD_INT 16
17685: PUSH
17686: LD_INT 20
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 22
17694: PUSH
17695: LD_INT 23
17697: PUSH
17698: LD_INT 25
17700: PUSH
17701: LD_INT 26
17703: PUSH
17704: LD_INT 28
17706: PUSH
17707: LD_INT 30
17709: PUSH
17710: LD_INT 31
17712: PUSH
17713: LD_INT 32
17715: PUSH
17716: LD_INT 36
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 101
17744: PUSH
17745: LD_INT 102
17747: PUSH
17748: LD_INT 103
17750: PUSH
17751: LD_INT 105
17753: PUSH
17754: LD_INT 106
17756: PUSH
17757: LD_INT 108
17759: PUSH
17760: LD_INT 109
17762: PUSH
17763: LD_INT 112
17765: PUSH
17766: LD_INT 114
17768: PUSH
17769: LD_INT 116
17771: PUSH
17772: LD_INT 117
17774: PUSH
17775: LD_INT 118
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: ST_TO_ADDR
17796: GO 19895
17798: LD_INT 10
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 18002
17806: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_INT 2
17814: PUSH
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: LD_INT 7
17826: PUSH
17827: LD_INT 8
17829: PUSH
17830: LD_INT 9
17832: PUSH
17833: LD_INT 10
17835: PUSH
17836: LD_INT 11
17838: PUSH
17839: LD_INT 12
17841: PUSH
17842: LD_INT 13
17844: PUSH
17845: LD_INT 14
17847: PUSH
17848: LD_INT 15
17850: PUSH
17851: LD_INT 16
17853: PUSH
17854: LD_INT 17
17856: PUSH
17857: LD_INT 18
17859: PUSH
17860: LD_INT 19
17862: PUSH
17863: LD_INT 20
17865: PUSH
17866: LD_INT 21
17868: PUSH
17869: LD_INT 22
17871: PUSH
17872: LD_INT 23
17874: PUSH
17875: LD_INT 24
17877: PUSH
17878: LD_INT 25
17880: PUSH
17881: LD_INT 26
17883: PUSH
17884: LD_INT 28
17886: PUSH
17887: LD_INT 30
17889: PUSH
17890: LD_INT 31
17892: PUSH
17893: LD_INT 32
17895: PUSH
17896: LD_INT 36
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 101
17932: PUSH
17933: LD_INT 102
17935: PUSH
17936: LD_INT 103
17938: PUSH
17939: LD_INT 104
17941: PUSH
17942: LD_INT 105
17944: PUSH
17945: LD_INT 106
17947: PUSH
17948: LD_INT 107
17950: PUSH
17951: LD_INT 108
17953: PUSH
17954: LD_INT 109
17956: PUSH
17957: LD_INT 110
17959: PUSH
17960: LD_INT 111
17962: PUSH
17963: LD_INT 112
17965: PUSH
17966: LD_INT 114
17968: PUSH
17969: LD_INT 116
17971: PUSH
17972: LD_INT 117
17974: PUSH
17975: LD_INT 118
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: ST_TO_ADDR
18000: GO 19895
18002: LD_INT 11
18004: DOUBLE
18005: EQUAL
18006: IFTRUE 18010
18008: GO 18214
18010: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18011: LD_ADDR_VAR 0 2
18015: PUSH
18016: LD_INT 2
18018: PUSH
18019: LD_INT 3
18021: PUSH
18022: LD_INT 4
18024: PUSH
18025: LD_INT 5
18027: PUSH
18028: LD_INT 6
18030: PUSH
18031: LD_INT 7
18033: PUSH
18034: LD_INT 8
18036: PUSH
18037: LD_INT 9
18039: PUSH
18040: LD_INT 10
18042: PUSH
18043: LD_INT 11
18045: PUSH
18046: LD_INT 12
18048: PUSH
18049: LD_INT 13
18051: PUSH
18052: LD_INT 14
18054: PUSH
18055: LD_INT 15
18057: PUSH
18058: LD_INT 16
18060: PUSH
18061: LD_INT 17
18063: PUSH
18064: LD_INT 18
18066: PUSH
18067: LD_INT 19
18069: PUSH
18070: LD_INT 20
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_INT 23
18081: PUSH
18082: LD_INT 24
18084: PUSH
18085: LD_INT 25
18087: PUSH
18088: LD_INT 26
18090: PUSH
18091: LD_INT 28
18093: PUSH
18094: LD_INT 30
18096: PUSH
18097: LD_INT 31
18099: PUSH
18100: LD_INT 32
18102: PUSH
18103: LD_INT 34
18105: PUSH
18106: LD_INT 36
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 101
18144: PUSH
18145: LD_INT 102
18147: PUSH
18148: LD_INT 103
18150: PUSH
18151: LD_INT 104
18153: PUSH
18154: LD_INT 105
18156: PUSH
18157: LD_INT 106
18159: PUSH
18160: LD_INT 107
18162: PUSH
18163: LD_INT 108
18165: PUSH
18166: LD_INT 109
18168: PUSH
18169: LD_INT 110
18171: PUSH
18172: LD_INT 111
18174: PUSH
18175: LD_INT 112
18177: PUSH
18178: LD_INT 114
18180: PUSH
18181: LD_INT 116
18183: PUSH
18184: LD_INT 117
18186: PUSH
18187: LD_INT 118
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: ST_TO_ADDR
18212: GO 19895
18214: LD_INT 12
18216: DOUBLE
18217: EQUAL
18218: IFTRUE 18222
18220: GO 18442
18222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: LD_INT 4
18239: PUSH
18240: LD_INT 5
18242: PUSH
18243: LD_INT 6
18245: PUSH
18246: LD_INT 7
18248: PUSH
18249: LD_INT 8
18251: PUSH
18252: LD_INT 9
18254: PUSH
18255: LD_INT 10
18257: PUSH
18258: LD_INT 11
18260: PUSH
18261: LD_INT 12
18263: PUSH
18264: LD_INT 13
18266: PUSH
18267: LD_INT 14
18269: PUSH
18270: LD_INT 15
18272: PUSH
18273: LD_INT 16
18275: PUSH
18276: LD_INT 17
18278: PUSH
18279: LD_INT 18
18281: PUSH
18282: LD_INT 19
18284: PUSH
18285: LD_INT 20
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 22
18293: PUSH
18294: LD_INT 23
18296: PUSH
18297: LD_INT 24
18299: PUSH
18300: LD_INT 25
18302: PUSH
18303: LD_INT 26
18305: PUSH
18306: LD_INT 27
18308: PUSH
18309: LD_INT 28
18311: PUSH
18312: LD_INT 30
18314: PUSH
18315: LD_INT 31
18317: PUSH
18318: LD_INT 32
18320: PUSH
18321: LD_INT 33
18323: PUSH
18324: LD_INT 34
18326: PUSH
18327: LD_INT 36
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 101
18368: PUSH
18369: LD_INT 102
18371: PUSH
18372: LD_INT 103
18374: PUSH
18375: LD_INT 104
18377: PUSH
18378: LD_INT 105
18380: PUSH
18381: LD_INT 106
18383: PUSH
18384: LD_INT 107
18386: PUSH
18387: LD_INT 108
18389: PUSH
18390: LD_INT 109
18392: PUSH
18393: LD_INT 110
18395: PUSH
18396: LD_INT 111
18398: PUSH
18399: LD_INT 112
18401: PUSH
18402: LD_INT 113
18404: PUSH
18405: LD_INT 114
18407: PUSH
18408: LD_INT 116
18410: PUSH
18411: LD_INT 117
18413: PUSH
18414: LD_INT 118
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: ST_TO_ADDR
18440: GO 19895
18442: LD_INT 13
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18658
18450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18451: LD_ADDR_VAR 0 2
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: LD_INT 4
18467: PUSH
18468: LD_INT 5
18470: PUSH
18471: LD_INT 8
18473: PUSH
18474: LD_INT 9
18476: PUSH
18477: LD_INT 10
18479: PUSH
18480: LD_INT 11
18482: PUSH
18483: LD_INT 12
18485: PUSH
18486: LD_INT 14
18488: PUSH
18489: LD_INT 15
18491: PUSH
18492: LD_INT 16
18494: PUSH
18495: LD_INT 17
18497: PUSH
18498: LD_INT 18
18500: PUSH
18501: LD_INT 19
18503: PUSH
18504: LD_INT 20
18506: PUSH
18507: LD_INT 21
18509: PUSH
18510: LD_INT 22
18512: PUSH
18513: LD_INT 23
18515: PUSH
18516: LD_INT 24
18518: PUSH
18519: LD_INT 25
18521: PUSH
18522: LD_INT 26
18524: PUSH
18525: LD_INT 27
18527: PUSH
18528: LD_INT 28
18530: PUSH
18531: LD_INT 30
18533: PUSH
18534: LD_INT 31
18536: PUSH
18537: LD_INT 32
18539: PUSH
18540: LD_INT 33
18542: PUSH
18543: LD_INT 34
18545: PUSH
18546: LD_INT 36
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 101
18584: PUSH
18585: LD_INT 102
18587: PUSH
18588: LD_INT 103
18590: PUSH
18591: LD_INT 104
18593: PUSH
18594: LD_INT 105
18596: PUSH
18597: LD_INT 106
18599: PUSH
18600: LD_INT 107
18602: PUSH
18603: LD_INT 108
18605: PUSH
18606: LD_INT 109
18608: PUSH
18609: LD_INT 110
18611: PUSH
18612: LD_INT 111
18614: PUSH
18615: LD_INT 112
18617: PUSH
18618: LD_INT 113
18620: PUSH
18621: LD_INT 114
18623: PUSH
18624: LD_INT 116
18626: PUSH
18627: LD_INT 117
18629: PUSH
18630: LD_INT 118
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: ST_TO_ADDR
18656: GO 19895
18658: LD_INT 14
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18890
18666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18667: LD_ADDR_VAR 0 2
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: LD_INT 3
18680: PUSH
18681: LD_INT 4
18683: PUSH
18684: LD_INT 5
18686: PUSH
18687: LD_INT 6
18689: PUSH
18690: LD_INT 7
18692: PUSH
18693: LD_INT 8
18695: PUSH
18696: LD_INT 9
18698: PUSH
18699: LD_INT 10
18701: PUSH
18702: LD_INT 11
18704: PUSH
18705: LD_INT 12
18707: PUSH
18708: LD_INT 13
18710: PUSH
18711: LD_INT 14
18713: PUSH
18714: LD_INT 15
18716: PUSH
18717: LD_INT 16
18719: PUSH
18720: LD_INT 17
18722: PUSH
18723: LD_INT 18
18725: PUSH
18726: LD_INT 19
18728: PUSH
18729: LD_INT 20
18731: PUSH
18732: LD_INT 21
18734: PUSH
18735: LD_INT 22
18737: PUSH
18738: LD_INT 23
18740: PUSH
18741: LD_INT 24
18743: PUSH
18744: LD_INT 25
18746: PUSH
18747: LD_INT 26
18749: PUSH
18750: LD_INT 27
18752: PUSH
18753: LD_INT 28
18755: PUSH
18756: LD_INT 29
18758: PUSH
18759: LD_INT 30
18761: PUSH
18762: LD_INT 31
18764: PUSH
18765: LD_INT 32
18767: PUSH
18768: LD_INT 33
18770: PUSH
18771: LD_INT 34
18773: PUSH
18774: LD_INT 36
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 101
18816: PUSH
18817: LD_INT 102
18819: PUSH
18820: LD_INT 103
18822: PUSH
18823: LD_INT 104
18825: PUSH
18826: LD_INT 105
18828: PUSH
18829: LD_INT 106
18831: PUSH
18832: LD_INT 107
18834: PUSH
18835: LD_INT 108
18837: PUSH
18838: LD_INT 109
18840: PUSH
18841: LD_INT 110
18843: PUSH
18844: LD_INT 111
18846: PUSH
18847: LD_INT 112
18849: PUSH
18850: LD_INT 113
18852: PUSH
18853: LD_INT 114
18855: PUSH
18856: LD_INT 116
18858: PUSH
18859: LD_INT 117
18861: PUSH
18862: LD_INT 118
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: ST_TO_ADDR
18888: GO 19895
18890: LD_INT 15
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 19122
18898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: LD_INT 3
18912: PUSH
18913: LD_INT 4
18915: PUSH
18916: LD_INT 5
18918: PUSH
18919: LD_INT 6
18921: PUSH
18922: LD_INT 7
18924: PUSH
18925: LD_INT 8
18927: PUSH
18928: LD_INT 9
18930: PUSH
18931: LD_INT 10
18933: PUSH
18934: LD_INT 11
18936: PUSH
18937: LD_INT 12
18939: PUSH
18940: LD_INT 13
18942: PUSH
18943: LD_INT 14
18945: PUSH
18946: LD_INT 15
18948: PUSH
18949: LD_INT 16
18951: PUSH
18952: LD_INT 17
18954: PUSH
18955: LD_INT 18
18957: PUSH
18958: LD_INT 19
18960: PUSH
18961: LD_INT 20
18963: PUSH
18964: LD_INT 21
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_INT 23
18972: PUSH
18973: LD_INT 24
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 26
18981: PUSH
18982: LD_INT 27
18984: PUSH
18985: LD_INT 28
18987: PUSH
18988: LD_INT 29
18990: PUSH
18991: LD_INT 30
18993: PUSH
18994: LD_INT 31
18996: PUSH
18997: LD_INT 32
18999: PUSH
19000: LD_INT 33
19002: PUSH
19003: LD_INT 34
19005: PUSH
19006: LD_INT 36
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 101
19048: PUSH
19049: LD_INT 102
19051: PUSH
19052: LD_INT 103
19054: PUSH
19055: LD_INT 104
19057: PUSH
19058: LD_INT 105
19060: PUSH
19061: LD_INT 106
19063: PUSH
19064: LD_INT 107
19066: PUSH
19067: LD_INT 108
19069: PUSH
19070: LD_INT 109
19072: PUSH
19073: LD_INT 110
19075: PUSH
19076: LD_INT 111
19078: PUSH
19079: LD_INT 112
19081: PUSH
19082: LD_INT 113
19084: PUSH
19085: LD_INT 114
19087: PUSH
19088: LD_INT 116
19090: PUSH
19091: LD_INT 117
19093: PUSH
19094: LD_INT 118
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: ST_TO_ADDR
19120: GO 19895
19122: LD_INT 16
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19266
19130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19131: LD_ADDR_VAR 0 2
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 4
19141: PUSH
19142: LD_INT 5
19144: PUSH
19145: LD_INT 7
19147: PUSH
19148: LD_INT 11
19150: PUSH
19151: LD_INT 12
19153: PUSH
19154: LD_INT 15
19156: PUSH
19157: LD_INT 16
19159: PUSH
19160: LD_INT 20
19162: PUSH
19163: LD_INT 21
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_INT 23
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 26
19177: PUSH
19178: LD_INT 30
19180: PUSH
19181: LD_INT 31
19183: PUSH
19184: LD_INT 32
19186: PUSH
19187: LD_INT 33
19189: PUSH
19190: LD_INT 34
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 101
19216: PUSH
19217: LD_INT 102
19219: PUSH
19220: LD_INT 103
19222: PUSH
19223: LD_INT 106
19225: PUSH
19226: LD_INT 108
19228: PUSH
19229: LD_INT 112
19231: PUSH
19232: LD_INT 113
19234: PUSH
19235: LD_INT 114
19237: PUSH
19238: LD_INT 116
19240: PUSH
19241: LD_INT 117
19243: PUSH
19244: LD_INT 118
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: ST_TO_ADDR
19264: GO 19895
19266: LD_INT 17
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19498
19274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19275: LD_ADDR_VAR 0 2
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: LD_INT 4
19291: PUSH
19292: LD_INT 5
19294: PUSH
19295: LD_INT 6
19297: PUSH
19298: LD_INT 7
19300: PUSH
19301: LD_INT 8
19303: PUSH
19304: LD_INT 9
19306: PUSH
19307: LD_INT 10
19309: PUSH
19310: LD_INT 11
19312: PUSH
19313: LD_INT 12
19315: PUSH
19316: LD_INT 13
19318: PUSH
19319: LD_INT 14
19321: PUSH
19322: LD_INT 15
19324: PUSH
19325: LD_INT 16
19327: PUSH
19328: LD_INT 17
19330: PUSH
19331: LD_INT 18
19333: PUSH
19334: LD_INT 19
19336: PUSH
19337: LD_INT 20
19339: PUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 22
19345: PUSH
19346: LD_INT 23
19348: PUSH
19349: LD_INT 24
19351: PUSH
19352: LD_INT 25
19354: PUSH
19355: LD_INT 26
19357: PUSH
19358: LD_INT 27
19360: PUSH
19361: LD_INT 28
19363: PUSH
19364: LD_INT 29
19366: PUSH
19367: LD_INT 30
19369: PUSH
19370: LD_INT 31
19372: PUSH
19373: LD_INT 32
19375: PUSH
19376: LD_INT 33
19378: PUSH
19379: LD_INT 34
19381: PUSH
19382: LD_INT 36
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 101
19424: PUSH
19425: LD_INT 102
19427: PUSH
19428: LD_INT 103
19430: PUSH
19431: LD_INT 104
19433: PUSH
19434: LD_INT 105
19436: PUSH
19437: LD_INT 106
19439: PUSH
19440: LD_INT 107
19442: PUSH
19443: LD_INT 108
19445: PUSH
19446: LD_INT 109
19448: PUSH
19449: LD_INT 110
19451: PUSH
19452: LD_INT 111
19454: PUSH
19455: LD_INT 112
19457: PUSH
19458: LD_INT 113
19460: PUSH
19461: LD_INT 114
19463: PUSH
19464: LD_INT 116
19466: PUSH
19467: LD_INT 117
19469: PUSH
19470: LD_INT 118
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: ST_TO_ADDR
19496: GO 19895
19498: LD_INT 18
19500: DOUBLE
19501: EQUAL
19502: IFTRUE 19506
19504: GO 19654
19506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19507: LD_ADDR_VAR 0 2
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 4
19517: PUSH
19518: LD_INT 5
19520: PUSH
19521: LD_INT 7
19523: PUSH
19524: LD_INT 11
19526: PUSH
19527: LD_INT 12
19529: PUSH
19530: LD_INT 15
19532: PUSH
19533: LD_INT 16
19535: PUSH
19536: LD_INT 20
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 22
19544: PUSH
19545: LD_INT 23
19547: PUSH
19548: LD_INT 25
19550: PUSH
19551: LD_INT 26
19553: PUSH
19554: LD_INT 30
19556: PUSH
19557: LD_INT 31
19559: PUSH
19560: LD_INT 32
19562: PUSH
19563: LD_INT 33
19565: PUSH
19566: LD_INT 34
19568: PUSH
19569: LD_INT 35
19571: PUSH
19572: LD_INT 36
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 101
19600: PUSH
19601: LD_INT 102
19603: PUSH
19604: LD_INT 103
19606: PUSH
19607: LD_INT 106
19609: PUSH
19610: LD_INT 108
19612: PUSH
19613: LD_INT 112
19615: PUSH
19616: LD_INT 113
19618: PUSH
19619: LD_INT 114
19621: PUSH
19622: LD_INT 115
19624: PUSH
19625: LD_INT 116
19627: PUSH
19628: LD_INT 117
19630: PUSH
19631: LD_INT 118
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: ST_TO_ADDR
19652: GO 19895
19654: LD_INT 19
19656: DOUBLE
19657: EQUAL
19658: IFTRUE 19662
19660: GO 19894
19662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19663: LD_ADDR_VAR 0 2
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: LD_INT 5
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: LD_INT 7
19688: PUSH
19689: LD_INT 8
19691: PUSH
19692: LD_INT 9
19694: PUSH
19695: LD_INT 10
19697: PUSH
19698: LD_INT 11
19700: PUSH
19701: LD_INT 12
19703: PUSH
19704: LD_INT 13
19706: PUSH
19707: LD_INT 14
19709: PUSH
19710: LD_INT 15
19712: PUSH
19713: LD_INT 16
19715: PUSH
19716: LD_INT 17
19718: PUSH
19719: LD_INT 18
19721: PUSH
19722: LD_INT 19
19724: PUSH
19725: LD_INT 20
19727: PUSH
19728: LD_INT 21
19730: PUSH
19731: LD_INT 22
19733: PUSH
19734: LD_INT 23
19736: PUSH
19737: LD_INT 24
19739: PUSH
19740: LD_INT 25
19742: PUSH
19743: LD_INT 26
19745: PUSH
19746: LD_INT 27
19748: PUSH
19749: LD_INT 28
19751: PUSH
19752: LD_INT 29
19754: PUSH
19755: LD_INT 30
19757: PUSH
19758: LD_INT 31
19760: PUSH
19761: LD_INT 32
19763: PUSH
19764: LD_INT 33
19766: PUSH
19767: LD_INT 34
19769: PUSH
19770: LD_INT 35
19772: PUSH
19773: LD_INT 36
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 101
19816: PUSH
19817: LD_INT 102
19819: PUSH
19820: LD_INT 103
19822: PUSH
19823: LD_INT 104
19825: PUSH
19826: LD_INT 105
19828: PUSH
19829: LD_INT 106
19831: PUSH
19832: LD_INT 107
19834: PUSH
19835: LD_INT 108
19837: PUSH
19838: LD_INT 109
19840: PUSH
19841: LD_INT 110
19843: PUSH
19844: LD_INT 111
19846: PUSH
19847: LD_INT 112
19849: PUSH
19850: LD_INT 113
19852: PUSH
19853: LD_INT 114
19855: PUSH
19856: LD_INT 115
19858: PUSH
19859: LD_INT 116
19861: PUSH
19862: LD_INT 117
19864: PUSH
19865: LD_INT 118
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: ST_TO_ADDR
19892: GO 19895
19894: POP
// end else
19895: GO 20126
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 3
19910: PUSH
19911: LD_INT 4
19913: PUSH
19914: LD_INT 5
19916: PUSH
19917: LD_INT 6
19919: PUSH
19920: LD_INT 7
19922: PUSH
19923: LD_INT 8
19925: PUSH
19926: LD_INT 9
19928: PUSH
19929: LD_INT 10
19931: PUSH
19932: LD_INT 11
19934: PUSH
19935: LD_INT 12
19937: PUSH
19938: LD_INT 13
19940: PUSH
19941: LD_INT 14
19943: PUSH
19944: LD_INT 15
19946: PUSH
19947: LD_INT 16
19949: PUSH
19950: LD_INT 17
19952: PUSH
19953: LD_INT 18
19955: PUSH
19956: LD_INT 19
19958: PUSH
19959: LD_INT 20
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 22
19967: PUSH
19968: LD_INT 23
19970: PUSH
19971: LD_INT 24
19973: PUSH
19974: LD_INT 25
19976: PUSH
19977: LD_INT 26
19979: PUSH
19980: LD_INT 27
19982: PUSH
19983: LD_INT 28
19985: PUSH
19986: LD_INT 29
19988: PUSH
19989: LD_INT 30
19991: PUSH
19992: LD_INT 31
19994: PUSH
19995: LD_INT 32
19997: PUSH
19998: LD_INT 33
20000: PUSH
20001: LD_INT 34
20003: PUSH
20004: LD_INT 35
20006: PUSH
20007: LD_INT 36
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 101
20050: PUSH
20051: LD_INT 102
20053: PUSH
20054: LD_INT 103
20056: PUSH
20057: LD_INT 104
20059: PUSH
20060: LD_INT 105
20062: PUSH
20063: LD_INT 106
20065: PUSH
20066: LD_INT 107
20068: PUSH
20069: LD_INT 108
20071: PUSH
20072: LD_INT 109
20074: PUSH
20075: LD_INT 110
20077: PUSH
20078: LD_INT 111
20080: PUSH
20081: LD_INT 112
20083: PUSH
20084: LD_INT 113
20086: PUSH
20087: LD_INT 114
20089: PUSH
20090: LD_INT 115
20092: PUSH
20093: LD_INT 116
20095: PUSH
20096: LD_INT 117
20098: PUSH
20099: LD_INT 118
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: ST_TO_ADDR
// if result then
20126: LD_VAR 0 2
20130: IFFALSE 20916
// begin normal :=  ;
20132: LD_ADDR_VAR 0 5
20136: PUSH
20137: LD_STRING 
20139: ST_TO_ADDR
// hardcore :=  ;
20140: LD_ADDR_VAR 0 6
20144: PUSH
20145: LD_STRING 
20147: ST_TO_ADDR
// active :=  ;
20148: LD_ADDR_VAR 0 7
20152: PUSH
20153: LD_STRING 
20155: ST_TO_ADDR
// for i = 1 to normalCounter do
20156: LD_ADDR_VAR 0 8
20160: PUSH
20161: DOUBLE
20162: LD_INT 1
20164: DEC
20165: ST_TO_ADDR
20166: LD_EXP 62
20170: PUSH
20171: FOR_TO
20172: IFFALSE 20273
// begin tmp := 0 ;
20174: LD_ADDR_VAR 0 3
20178: PUSH
20179: LD_STRING 0
20181: ST_TO_ADDR
// if result [ 1 ] then
20182: LD_VAR 0 2
20186: PUSH
20187: LD_INT 1
20189: ARRAY
20190: IFFALSE 20255
// if result [ 1 ] [ 1 ] = i then
20192: LD_VAR 0 2
20196: PUSH
20197: LD_INT 1
20199: ARRAY
20200: PUSH
20201: LD_INT 1
20203: ARRAY
20204: PUSH
20205: LD_VAR 0 8
20209: EQUAL
20210: IFFALSE 20255
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_INT 1
20224: PPUSH
20225: LD_VAR 0 2
20229: PUSH
20230: LD_INT 1
20232: ARRAY
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 3
20241: PPUSH
20242: CALL_OW 1
20246: ST_TO_ADDR
// tmp := 1 ;
20247: LD_ADDR_VAR 0 3
20251: PUSH
20252: LD_STRING 1
20254: ST_TO_ADDR
// end ; normal := normal & tmp ;
20255: LD_ADDR_VAR 0 5
20259: PUSH
20260: LD_VAR 0 5
20264: PUSH
20265: LD_VAR 0 3
20269: STR
20270: ST_TO_ADDR
// end ;
20271: GO 20171
20273: POP
20274: POP
// for i = 1 to hardcoreCounter do
20275: LD_ADDR_VAR 0 8
20279: PUSH
20280: DOUBLE
20281: LD_INT 1
20283: DEC
20284: ST_TO_ADDR
20285: LD_EXP 63
20289: PUSH
20290: FOR_TO
20291: IFFALSE 20396
// begin tmp := 0 ;
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_STRING 0
20300: ST_TO_ADDR
// if result [ 2 ] then
20301: LD_VAR 0 2
20305: PUSH
20306: LD_INT 2
20308: ARRAY
20309: IFFALSE 20378
// if result [ 2 ] [ 1 ] = 100 + i then
20311: LD_VAR 0 2
20315: PUSH
20316: LD_INT 2
20318: ARRAY
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PUSH
20324: LD_INT 100
20326: PUSH
20327: LD_VAR 0 8
20331: PLUS
20332: EQUAL
20333: IFFALSE 20378
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20335: LD_ADDR_VAR 0 2
20339: PUSH
20340: LD_VAR 0 2
20344: PPUSH
20345: LD_INT 2
20347: PPUSH
20348: LD_VAR 0 2
20352: PUSH
20353: LD_INT 2
20355: ARRAY
20356: PPUSH
20357: LD_INT 1
20359: PPUSH
20360: CALL_OW 3
20364: PPUSH
20365: CALL_OW 1
20369: ST_TO_ADDR
// tmp := 1 ;
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_STRING 1
20377: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20378: LD_ADDR_VAR 0 6
20382: PUSH
20383: LD_VAR 0 6
20387: PUSH
20388: LD_VAR 0 3
20392: STR
20393: ST_TO_ADDR
// end ;
20394: GO 20290
20396: POP
20397: POP
// if isGameLoad then
20398: LD_VAR 0 1
20402: IFFALSE 20877
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20404: LD_ADDR_VAR 0 4
20408: PUSH
20409: LD_EXP 66
20413: PUSH
20414: LD_EXP 65
20418: PUSH
20419: LD_EXP 67
20423: PUSH
20424: LD_EXP 64
20428: PUSH
20429: LD_EXP 68
20433: PUSH
20434: LD_EXP 69
20438: PUSH
20439: LD_EXP 70
20443: PUSH
20444: LD_EXP 71
20448: PUSH
20449: LD_EXP 72
20453: PUSH
20454: LD_EXP 73
20458: PUSH
20459: LD_EXP 74
20463: PUSH
20464: LD_EXP 75
20468: PUSH
20469: LD_EXP 76
20473: PUSH
20474: LD_EXP 77
20478: PUSH
20479: LD_EXP 85
20483: PUSH
20484: LD_EXP 86
20488: PUSH
20489: LD_EXP 87
20493: PUSH
20494: LD_EXP 88
20498: PUSH
20499: LD_EXP 90
20503: PUSH
20504: LD_EXP 91
20508: PUSH
20509: LD_EXP 92
20513: PUSH
20514: LD_EXP 95
20518: PUSH
20519: LD_EXP 97
20523: PUSH
20524: LD_EXP 98
20528: PUSH
20529: LD_EXP 99
20533: PUSH
20534: LD_EXP 101
20538: PUSH
20539: LD_EXP 102
20543: PUSH
20544: LD_EXP 105
20548: PUSH
20549: LD_EXP 106
20553: PUSH
20554: LD_EXP 107
20558: PUSH
20559: LD_EXP 108
20563: PUSH
20564: LD_EXP 109
20568: PUSH
20569: LD_EXP 110
20573: PUSH
20574: LD_EXP 111
20578: PUSH
20579: LD_EXP 112
20583: PUSH
20584: LD_EXP 113
20588: PUSH
20589: LD_EXP 78
20593: PUSH
20594: LD_EXP 79
20598: PUSH
20599: LD_EXP 82
20603: PUSH
20604: LD_EXP 83
20608: PUSH
20609: LD_EXP 84
20613: PUSH
20614: LD_EXP 80
20618: PUSH
20619: LD_EXP 81
20623: PUSH
20624: LD_EXP 89
20628: PUSH
20629: LD_EXP 93
20633: PUSH
20634: LD_EXP 94
20638: PUSH
20639: LD_EXP 96
20643: PUSH
20644: LD_EXP 100
20648: PUSH
20649: LD_EXP 103
20653: PUSH
20654: LD_EXP 104
20658: PUSH
20659: LD_EXP 114
20663: PUSH
20664: LD_EXP 115
20668: PUSH
20669: LD_EXP 116
20673: PUSH
20674: LD_EXP 117
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: ST_TO_ADDR
// tmp :=  ;
20735: LD_ADDR_VAR 0 3
20739: PUSH
20740: LD_STRING 
20742: ST_TO_ADDR
// for i = 1 to normalCounter do
20743: LD_ADDR_VAR 0 8
20747: PUSH
20748: DOUBLE
20749: LD_INT 1
20751: DEC
20752: ST_TO_ADDR
20753: LD_EXP 62
20757: PUSH
20758: FOR_TO
20759: IFFALSE 20795
// begin if flags [ i ] then
20761: LD_VAR 0 4
20765: PUSH
20766: LD_VAR 0 8
20770: ARRAY
20771: IFFALSE 20793
// tmp := tmp & i & ; ;
20773: LD_ADDR_VAR 0 3
20777: PUSH
20778: LD_VAR 0 3
20782: PUSH
20783: LD_VAR 0 8
20787: STR
20788: PUSH
20789: LD_STRING ;
20791: STR
20792: ST_TO_ADDR
// end ;
20793: GO 20758
20795: POP
20796: POP
// for i = 1 to hardcoreCounter do
20797: LD_ADDR_VAR 0 8
20801: PUSH
20802: DOUBLE
20803: LD_INT 1
20805: DEC
20806: ST_TO_ADDR
20807: LD_EXP 63
20811: PUSH
20812: FOR_TO
20813: IFFALSE 20859
// begin if flags [ normalCounter + i ] then
20815: LD_VAR 0 4
20819: PUSH
20820: LD_EXP 62
20824: PUSH
20825: LD_VAR 0 8
20829: PLUS
20830: ARRAY
20831: IFFALSE 20857
// tmp := tmp & ( 100 + i ) & ; ;
20833: LD_ADDR_VAR 0 3
20837: PUSH
20838: LD_VAR 0 3
20842: PUSH
20843: LD_INT 100
20845: PUSH
20846: LD_VAR 0 8
20850: PLUS
20851: STR
20852: PUSH
20853: LD_STRING ;
20855: STR
20856: ST_TO_ADDR
// end ;
20857: GO 20812
20859: POP
20860: POP
// if tmp then
20861: LD_VAR 0 3
20865: IFFALSE 20877
// active := tmp ;
20867: LD_ADDR_VAR 0 7
20871: PUSH
20872: LD_VAR 0 3
20876: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20877: LD_STRING getStreamItemsFromMission("
20879: PUSH
20880: LD_VAR 0 5
20884: STR
20885: PUSH
20886: LD_STRING ","
20888: STR
20889: PUSH
20890: LD_VAR 0 6
20894: STR
20895: PUSH
20896: LD_STRING ","
20898: STR
20899: PUSH
20900: LD_VAR 0 7
20904: STR
20905: PUSH
20906: LD_STRING ")
20908: STR
20909: PPUSH
20910: CALL_OW 559
// end else
20914: GO 20923
// ToLua ( getStreamItemsFromMission("","","") ) ;
20916: LD_STRING getStreamItemsFromMission("","","")
20918: PPUSH
20919: CALL_OW 559
// end ;
20923: LD_VAR 0 2
20927: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20928: LD_EXP 61
20932: PUSH
20933: LD_EXP 66
20937: AND
20938: IFFALSE 21062
20940: GO 20942
20942: DISABLE
20943: LD_INT 0
20945: PPUSH
20946: PPUSH
// begin enable ;
20947: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20948: LD_ADDR_VAR 0 2
20952: PUSH
20953: LD_INT 22
20955: PUSH
20956: LD_OWVAR 2
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: LD_INT 34
20970: PUSH
20971: LD_INT 7
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 34
20980: PUSH
20981: LD_INT 45
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 34
20990: PUSH
20991: LD_INT 28
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 34
21000: PUSH
21001: LD_INT 47
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// if not tmp then
21024: LD_VAR 0 2
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21062
// for i in tmp do
21033: LD_ADDR_VAR 0 1
21037: PUSH
21038: LD_VAR 0 2
21042: PUSH
21043: FOR_IN
21044: IFFALSE 21060
// begin SetLives ( i , 0 ) ;
21046: LD_VAR 0 1
21050: PPUSH
21051: LD_INT 0
21053: PPUSH
21054: CALL_OW 234
// end ;
21058: GO 21043
21060: POP
21061: POP
// end ;
21062: PPOPN 2
21064: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21065: LD_EXP 61
21069: PUSH
21070: LD_EXP 67
21074: AND
21075: IFFALSE 21159
21077: GO 21079
21079: DISABLE
21080: LD_INT 0
21082: PPUSH
21083: PPUSH
// begin enable ;
21084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21085: LD_ADDR_VAR 0 2
21089: PUSH
21090: LD_INT 22
21092: PUSH
21093: LD_OWVAR 2
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 32
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 69
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 2
21125: NOT
21126: IFFALSE 21130
// exit ;
21128: GO 21159
// for i in tmp do
21130: LD_ADDR_VAR 0 1
21134: PUSH
21135: LD_VAR 0 2
21139: PUSH
21140: FOR_IN
21141: IFFALSE 21157
// begin SetLives ( i , 0 ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 0
21150: PPUSH
21151: CALL_OW 234
// end ;
21155: GO 21140
21157: POP
21158: POP
// end ;
21159: PPOPN 2
21161: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21162: LD_EXP 61
21166: PUSH
21167: LD_EXP 64
21171: AND
21172: IFFALSE 21265
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
// begin enable ;
21180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 25
21203: PUSH
21204: LD_INT 5
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 25
21213: PUSH
21214: LD_INT 9
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 25
21223: PUSH
21224: LD_INT 8
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PPUSH
21241: CALL_OW 69
21245: PUSH
21246: FOR_IN
21247: IFFALSE 21263
// begin SetClass ( i , 1 ) ;
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_INT 1
21256: PPUSH
21257: CALL_OW 336
// end ;
21261: GO 21246
21263: POP
21264: POP
// end ;
21265: PPOPN 1
21267: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21268: LD_EXP 61
21272: PUSH
21273: LD_EXP 65
21277: AND
21278: PUSH
21279: LD_OWVAR 65
21283: PUSH
21284: LD_INT 7
21286: LESS
21287: AND
21288: IFFALSE 21302
21290: GO 21292
21292: DISABLE
// begin enable ;
21293: ENABLE
// game_speed := 7 ;
21294: LD_ADDR_OWVAR 65
21298: PUSH
21299: LD_INT 7
21301: ST_TO_ADDR
// end ;
21302: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21303: LD_EXP 61
21307: PUSH
21308: LD_EXP 68
21312: AND
21313: IFFALSE 21515
21315: GO 21317
21317: DISABLE
21318: LD_INT 0
21320: PPUSH
21321: PPUSH
21322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21323: LD_ADDR_VAR 0 3
21327: PUSH
21328: LD_INT 81
21330: PUSH
21331: LD_OWVAR 2
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 21
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PPUSH
21354: CALL_OW 69
21358: ST_TO_ADDR
// if not tmp then
21359: LD_VAR 0 3
21363: NOT
21364: IFFALSE 21368
// exit ;
21366: GO 21515
// if tmp > 5 then
21368: LD_VAR 0 3
21372: PUSH
21373: LD_INT 5
21375: GREATER
21376: IFFALSE 21388
// k := 5 else
21378: LD_ADDR_VAR 0 2
21382: PUSH
21383: LD_INT 5
21385: ST_TO_ADDR
21386: GO 21398
// k := tmp ;
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_VAR 0 3
21397: ST_TO_ADDR
// for i := 1 to k do
21398: LD_ADDR_VAR 0 1
21402: PUSH
21403: DOUBLE
21404: LD_INT 1
21406: DEC
21407: ST_TO_ADDR
21408: LD_VAR 0 2
21412: PUSH
21413: FOR_TO
21414: IFFALSE 21513
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21416: LD_VAR 0 3
21420: PUSH
21421: LD_VAR 0 1
21425: ARRAY
21426: PPUSH
21427: LD_VAR 0 1
21431: PUSH
21432: LD_INT 4
21434: MOD
21435: PUSH
21436: LD_INT 1
21438: PLUS
21439: PPUSH
21440: CALL_OW 259
21444: PUSH
21445: LD_INT 10
21447: LESS
21448: IFFALSE 21511
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21450: LD_VAR 0 3
21454: PUSH
21455: LD_VAR 0 1
21459: ARRAY
21460: PPUSH
21461: LD_VAR 0 1
21465: PUSH
21466: LD_INT 4
21468: MOD
21469: PUSH
21470: LD_INT 1
21472: PLUS
21473: PPUSH
21474: LD_VAR 0 3
21478: PUSH
21479: LD_VAR 0 1
21483: ARRAY
21484: PPUSH
21485: LD_VAR 0 1
21489: PUSH
21490: LD_INT 4
21492: MOD
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: PPUSH
21498: CALL_OW 259
21502: PUSH
21503: LD_INT 1
21505: PLUS
21506: PPUSH
21507: CALL_OW 237
21511: GO 21413
21513: POP
21514: POP
// end ;
21515: PPOPN 3
21517: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21518: LD_EXP 61
21522: PUSH
21523: LD_EXP 69
21527: AND
21528: IFFALSE 21548
21530: GO 21532
21532: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21533: LD_INT 4
21535: PPUSH
21536: LD_OWVAR 2
21540: PPUSH
21541: LD_INT 0
21543: PPUSH
21544: CALL_OW 324
21548: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21549: LD_EXP 61
21553: PUSH
21554: LD_EXP 98
21558: AND
21559: IFFALSE 21579
21561: GO 21563
21563: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21564: LD_INT 19
21566: PPUSH
21567: LD_OWVAR 2
21571: PPUSH
21572: LD_INT 0
21574: PPUSH
21575: CALL_OW 324
21579: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21580: LD_EXP 61
21584: PUSH
21585: LD_EXP 70
21589: AND
21590: IFFALSE 21692
21592: GO 21594
21594: DISABLE
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
// begin enable ;
21599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21600: LD_ADDR_VAR 0 2
21604: PUSH
21605: LD_INT 22
21607: PUSH
21608: LD_OWVAR 2
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: LD_INT 34
21622: PUSH
21623: LD_INT 11
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 34
21632: PUSH
21633: LD_INT 30
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 69
21653: ST_TO_ADDR
// if not tmp then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 21692
// for i in tmp do
21663: LD_ADDR_VAR 0 1
21667: PUSH
21668: LD_VAR 0 2
21672: PUSH
21673: FOR_IN
21674: IFFALSE 21690
// begin SetLives ( i , 0 ) ;
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 0
21683: PPUSH
21684: CALL_OW 234
// end ;
21688: GO 21673
21690: POP
21691: POP
// end ;
21692: PPOPN 2
21694: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21695: LD_EXP 61
21699: PUSH
21700: LD_EXP 71
21704: AND
21705: IFFALSE 21725
21707: GO 21709
21709: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21710: LD_INT 32
21712: PPUSH
21713: LD_OWVAR 2
21717: PPUSH
21718: LD_INT 0
21720: PPUSH
21721: CALL_OW 324
21725: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21726: LD_EXP 61
21730: PUSH
21731: LD_EXP 72
21735: AND
21736: IFFALSE 21917
21738: GO 21740
21740: DISABLE
21741: LD_INT 0
21743: PPUSH
21744: PPUSH
21745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21746: LD_ADDR_VAR 0 2
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_OWVAR 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 33
21765: PUSH
21766: LD_INT 3
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 69
21781: ST_TO_ADDR
// if not tmp then
21782: LD_VAR 0 2
21786: NOT
21787: IFFALSE 21791
// exit ;
21789: GO 21917
// side := 0 ;
21791: LD_ADDR_VAR 0 3
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// for i := 1 to 8 do
21799: LD_ADDR_VAR 0 1
21803: PUSH
21804: DOUBLE
21805: LD_INT 1
21807: DEC
21808: ST_TO_ADDR
21809: LD_INT 8
21811: PUSH
21812: FOR_TO
21813: IFFALSE 21861
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21815: LD_OWVAR 2
21819: PUSH
21820: LD_VAR 0 1
21824: NONEQUAL
21825: PUSH
21826: LD_OWVAR 2
21830: PPUSH
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 81
21840: PUSH
21841: LD_INT 2
21843: EQUAL
21844: AND
21845: IFFALSE 21859
// begin side := i ;
21847: LD_ADDR_VAR 0 3
21851: PUSH
21852: LD_VAR 0 1
21856: ST_TO_ADDR
// break ;
21857: GO 21861
// end ;
21859: GO 21812
21861: POP
21862: POP
// if not side then
21863: LD_VAR 0 3
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 21917
// for i := 1 to tmp do
21872: LD_ADDR_VAR 0 1
21876: PUSH
21877: DOUBLE
21878: LD_INT 1
21880: DEC
21881: ST_TO_ADDR
21882: LD_VAR 0 2
21886: PUSH
21887: FOR_TO
21888: IFFALSE 21915
// if Prob ( 60 ) then
21890: LD_INT 60
21892: PPUSH
21893: CALL_OW 13
21897: IFFALSE 21913
// SetSide ( i , side ) ;
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_VAR 0 3
21908: PPUSH
21909: CALL_OW 235
21913: GO 21887
21915: POP
21916: POP
// end ;
21917: PPOPN 3
21919: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21920: LD_EXP 61
21924: PUSH
21925: LD_EXP 74
21929: AND
21930: IFFALSE 22049
21932: GO 21934
21934: DISABLE
21935: LD_INT 0
21937: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21938: LD_ADDR_VAR 0 1
21942: PUSH
21943: LD_INT 22
21945: PUSH
21946: LD_OWVAR 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: LD_INT 23
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 69
21991: PUSH
21992: FOR_IN
21993: IFFALSE 22047
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 257
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 2
22010: PUSH
22011: LD_INT 3
22013: PUSH
22014: LD_INT 4
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: IN
22023: IFFALSE 22045
// SetClass ( un , rand ( 1 , 4 ) ) ;
22025: LD_VAR 0 1
22029: PPUSH
22030: LD_INT 1
22032: PPUSH
22033: LD_INT 4
22035: PPUSH
22036: CALL_OW 12
22040: PPUSH
22041: CALL_OW 336
22045: GO 21992
22047: POP
22048: POP
// end ;
22049: PPOPN 1
22051: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22052: LD_EXP 61
22056: PUSH
22057: LD_EXP 73
22061: AND
22062: IFFALSE 22141
22064: GO 22066
22066: DISABLE
22067: LD_INT 0
22069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22070: LD_ADDR_VAR 0 1
22074: PUSH
22075: LD_INT 22
22077: PUSH
22078: LD_OWVAR 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 3
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: ST_TO_ADDR
// if not tmp then
22106: LD_VAR 0 1
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22115: LD_VAR 0 1
22119: PUSH
22120: LD_INT 1
22122: PPUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: CALL_OW 12
22132: ARRAY
22133: PPUSH
22134: LD_INT 100
22136: PPUSH
22137: CALL_OW 234
// end ;
22141: PPOPN 1
22143: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22144: LD_EXP 61
22148: PUSH
22149: LD_EXP 75
22153: AND
22154: IFFALSE 22252
22156: GO 22158
22158: DISABLE
22159: LD_INT 0
22161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22162: LD_ADDR_VAR 0 1
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_OWVAR 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 21
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: ST_TO_ADDR
// if not tmp then
22198: LD_VAR 0 1
22202: NOT
22203: IFFALSE 22207
// exit ;
22205: GO 22252
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22207: LD_VAR 0 1
22211: PUSH
22212: LD_INT 1
22214: PPUSH
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 12
22224: ARRAY
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: LD_INT 4
22231: PPUSH
22232: CALL_OW 12
22236: PPUSH
22237: LD_INT 3000
22239: PPUSH
22240: LD_INT 9000
22242: PPUSH
22243: CALL_OW 12
22247: PPUSH
22248: CALL_OW 492
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22255: LD_EXP 61
22259: PUSH
22260: LD_EXP 76
22264: AND
22265: IFFALSE 22285
22267: GO 22269
22269: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22270: LD_INT 1
22272: PPUSH
22273: LD_OWVAR 2
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: CALL_OW 324
22285: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22286: LD_EXP 61
22290: PUSH
22291: LD_EXP 77
22295: AND
22296: IFFALSE 22379
22298: GO 22300
22300: DISABLE
22301: LD_INT 0
22303: PPUSH
22304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_INT 22
22312: PUSH
22313: LD_OWVAR 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 21
22324: PUSH
22325: LD_INT 3
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PPUSH
22336: CALL_OW 69
22340: ST_TO_ADDR
// if not tmp then
22341: LD_VAR 0 2
22345: NOT
22346: IFFALSE 22350
// exit ;
22348: GO 22379
// for i in tmp do
22350: LD_ADDR_VAR 0 1
22354: PUSH
22355: LD_VAR 0 2
22359: PUSH
22360: FOR_IN
22361: IFFALSE 22377
// SetBLevel ( i , 10 ) ;
22363: LD_VAR 0 1
22367: PPUSH
22368: LD_INT 10
22370: PPUSH
22371: CALL_OW 241
22375: GO 22360
22377: POP
22378: POP
// end ;
22379: PPOPN 2
22381: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22382: LD_EXP 61
22386: PUSH
22387: LD_EXP 78
22391: AND
22392: IFFALSE 22503
22394: GO 22396
22396: DISABLE
22397: LD_INT 0
22399: PPUSH
22400: PPUSH
22401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_OWVAR 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 25
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PPUSH
22433: CALL_OW 69
22437: ST_TO_ADDR
// if not tmp then
22438: LD_VAR 0 3
22442: NOT
22443: IFFALSE 22447
// exit ;
22445: GO 22503
// un := tmp [ rand ( 1 , tmp ) ] ;
22447: LD_ADDR_VAR 0 2
22451: PUSH
22452: LD_VAR 0 3
22456: PUSH
22457: LD_INT 1
22459: PPUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 12
22469: ARRAY
22470: ST_TO_ADDR
// if Crawls ( un ) then
22471: LD_VAR 0 2
22475: PPUSH
22476: CALL_OW 318
22480: IFFALSE 22491
// ComWalk ( un ) ;
22482: LD_VAR 0 2
22486: PPUSH
22487: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22491: LD_VAR 0 2
22495: PPUSH
22496: LD_INT 5
22498: PPUSH
22499: CALL_OW 336
// end ;
22503: PPOPN 3
22505: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22506: LD_EXP 61
22510: PUSH
22511: LD_EXP 79
22515: AND
22516: PUSH
22517: LD_OWVAR 67
22521: PUSH
22522: LD_INT 4
22524: LESS
22525: AND
22526: IFFALSE 22545
22528: GO 22530
22530: DISABLE
// begin Difficulty := Difficulty + 1 ;
22531: LD_ADDR_OWVAR 67
22535: PUSH
22536: LD_OWVAR 67
22540: PUSH
22541: LD_INT 1
22543: PLUS
22544: ST_TO_ADDR
// end ;
22545: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22546: LD_EXP 61
22550: PUSH
22551: LD_EXP 80
22555: AND
22556: IFFALSE 22659
22558: GO 22560
22560: DISABLE
22561: LD_INT 0
22563: PPUSH
// begin for i := 1 to 5 do
22564: LD_ADDR_VAR 0 1
22568: PUSH
22569: DOUBLE
22570: LD_INT 1
22572: DEC
22573: ST_TO_ADDR
22574: LD_INT 5
22576: PUSH
22577: FOR_TO
22578: IFFALSE 22657
// begin uc_nation := nation_nature ;
22580: LD_ADDR_OWVAR 21
22584: PUSH
22585: LD_INT 0
22587: ST_TO_ADDR
// uc_side := 0 ;
22588: LD_ADDR_OWVAR 20
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22596: LD_ADDR_OWVAR 29
22600: PUSH
22601: LD_INT 12
22603: PUSH
22604: LD_INT 12
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: ST_TO_ADDR
// hc_agressivity := 20 ;
22611: LD_ADDR_OWVAR 35
22615: PUSH
22616: LD_INT 20
22618: ST_TO_ADDR
// hc_class := class_tiger ;
22619: LD_ADDR_OWVAR 28
22623: PUSH
22624: LD_INT 14
22626: ST_TO_ADDR
// hc_gallery :=  ;
22627: LD_ADDR_OWVAR 33
22631: PUSH
22632: LD_STRING 
22634: ST_TO_ADDR
// hc_name :=  ;
22635: LD_ADDR_OWVAR 26
22639: PUSH
22640: LD_STRING 
22642: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22643: CALL_OW 44
22647: PPUSH
22648: LD_INT 0
22650: PPUSH
22651: CALL_OW 51
// end ;
22655: GO 22577
22657: POP
22658: POP
// end ;
22659: PPOPN 1
22661: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22662: LD_EXP 61
22666: PUSH
22667: LD_EXP 81
22671: AND
22672: IFFALSE 22681
22674: GO 22676
22676: DISABLE
// StreamSibBomb ;
22677: CALL 22682 0 0
22681: END
// export function StreamSibBomb ; var i , x , y ; begin
22682: LD_INT 0
22684: PPUSH
22685: PPUSH
22686: PPUSH
22687: PPUSH
// result := false ;
22688: LD_ADDR_VAR 0 1
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// for i := 1 to 16 do
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: DOUBLE
22702: LD_INT 1
22704: DEC
22705: ST_TO_ADDR
22706: LD_INT 16
22708: PUSH
22709: FOR_TO
22710: IFFALSE 22909
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 10
22719: PUSH
22720: LD_INT 20
22722: PUSH
22723: LD_INT 30
22725: PUSH
22726: LD_INT 40
22728: PUSH
22729: LD_INT 50
22731: PUSH
22732: LD_INT 60
22734: PUSH
22735: LD_INT 70
22737: PUSH
22738: LD_INT 80
22740: PUSH
22741: LD_INT 90
22743: PUSH
22744: LD_INT 100
22746: PUSH
22747: LD_INT 110
22749: PUSH
22750: LD_INT 120
22752: PUSH
22753: LD_INT 130
22755: PUSH
22756: LD_INT 140
22758: PUSH
22759: LD_INT 150
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PPUSH
22782: LD_INT 15
22784: PPUSH
22785: CALL_OW 12
22789: ARRAY
22790: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22791: LD_ADDR_VAR 0 4
22795: PUSH
22796: LD_INT 10
22798: PUSH
22799: LD_INT 20
22801: PUSH
22802: LD_INT 30
22804: PUSH
22805: LD_INT 40
22807: PUSH
22808: LD_INT 50
22810: PUSH
22811: LD_INT 60
22813: PUSH
22814: LD_INT 70
22816: PUSH
22817: LD_INT 80
22819: PUSH
22820: LD_INT 90
22822: PUSH
22823: LD_INT 100
22825: PUSH
22826: LD_INT 110
22828: PUSH
22829: LD_INT 120
22831: PUSH
22832: LD_INT 130
22834: PUSH
22835: LD_INT 140
22837: PUSH
22838: LD_INT 150
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: PPUSH
22861: LD_INT 15
22863: PPUSH
22864: CALL_OW 12
22868: ARRAY
22869: ST_TO_ADDR
// if ValidHex ( x , y ) then
22870: LD_VAR 0 3
22874: PPUSH
22875: LD_VAR 0 4
22879: PPUSH
22880: CALL_OW 488
22884: IFFALSE 22907
// begin result := [ x , y ] ;
22886: LD_ADDR_VAR 0 1
22890: PUSH
22891: LD_VAR 0 3
22895: PUSH
22896: LD_VAR 0 4
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: ST_TO_ADDR
// break ;
22905: GO 22909
// end ; end ;
22907: GO 22709
22909: POP
22910: POP
// if result then
22911: LD_VAR 0 1
22915: IFFALSE 22975
// begin ToLua ( playSibBomb() ) ;
22917: LD_STRING playSibBomb()
22919: PPUSH
22920: CALL_OW 559
// wait ( 0 0$14 ) ;
22924: LD_INT 490
22926: PPUSH
22927: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22931: LD_VAR 0 1
22935: PUSH
22936: LD_INT 1
22938: ARRAY
22939: PPUSH
22940: LD_VAR 0 1
22944: PUSH
22945: LD_INT 2
22947: ARRAY
22948: PPUSH
22949: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22953: LD_VAR 0 1
22957: PUSH
22958: LD_INT 1
22960: ARRAY
22961: PPUSH
22962: LD_VAR 0 1
22966: PUSH
22967: LD_INT 2
22969: ARRAY
22970: PPUSH
22971: CALL_OW 429
// end ; end ;
22975: LD_VAR 0 1
22979: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22980: LD_EXP 61
22984: PUSH
22985: LD_EXP 83
22989: AND
22990: IFFALSE 23002
22992: GO 22994
22994: DISABLE
// YouLost (  ) ;
22995: LD_STRING 
22997: PPUSH
22998: CALL_OW 104
23002: END
// every 0 0$1 trigger StreamModeActive and sFog do
23003: LD_EXP 61
23007: PUSH
23008: LD_EXP 82
23012: AND
23013: IFFALSE 23027
23015: GO 23017
23017: DISABLE
// FogOff ( your_side ) ;
23018: LD_OWVAR 2
23022: PPUSH
23023: CALL_OW 344
23027: END
// every 0 0$1 trigger StreamModeActive and sSun do
23028: LD_EXP 61
23032: PUSH
23033: LD_EXP 84
23037: AND
23038: IFFALSE 23066
23040: GO 23042
23042: DISABLE
// begin solar_recharge_percent := 0 ;
23043: LD_ADDR_OWVAR 79
23047: PUSH
23048: LD_INT 0
23050: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23051: LD_INT 10500
23053: PPUSH
23054: CALL_OW 67
// solar_recharge_percent := 100 ;
23058: LD_ADDR_OWVAR 79
23062: PUSH
23063: LD_INT 100
23065: ST_TO_ADDR
// end ;
23066: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23067: LD_EXP 61
23071: PUSH
23072: LD_EXP 85
23076: AND
23077: IFFALSE 23316
23079: GO 23081
23081: DISABLE
23082: LD_INT 0
23084: PPUSH
23085: PPUSH
23086: PPUSH
// begin tmp := [ ] ;
23087: LD_ADDR_VAR 0 3
23091: PUSH
23092: EMPTY
23093: ST_TO_ADDR
// for i := 1 to 6 do
23094: LD_ADDR_VAR 0 1
23098: PUSH
23099: DOUBLE
23100: LD_INT 1
23102: DEC
23103: ST_TO_ADDR
23104: LD_INT 6
23106: PUSH
23107: FOR_TO
23108: IFFALSE 23213
// begin uc_nation := nation_nature ;
23110: LD_ADDR_OWVAR 21
23114: PUSH
23115: LD_INT 0
23117: ST_TO_ADDR
// uc_side := 0 ;
23118: LD_ADDR_OWVAR 20
23122: PUSH
23123: LD_INT 0
23125: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23126: LD_ADDR_OWVAR 29
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 12
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: ST_TO_ADDR
// hc_agressivity := 20 ;
23141: LD_ADDR_OWVAR 35
23145: PUSH
23146: LD_INT 20
23148: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23149: LD_ADDR_OWVAR 28
23153: PUSH
23154: LD_INT 17
23156: ST_TO_ADDR
// hc_gallery :=  ;
23157: LD_ADDR_OWVAR 33
23161: PUSH
23162: LD_STRING 
23164: ST_TO_ADDR
// hc_name :=  ;
23165: LD_ADDR_OWVAR 26
23169: PUSH
23170: LD_STRING 
23172: ST_TO_ADDR
// un := CreateHuman ;
23173: LD_ADDR_VAR 0 2
23177: PUSH
23178: CALL_OW 44
23182: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23183: LD_VAR 0 2
23187: PPUSH
23188: LD_INT 1
23190: PPUSH
23191: CALL_OW 51
// tmp := tmp ^ un ;
23195: LD_ADDR_VAR 0 3
23199: PUSH
23200: LD_VAR 0 3
23204: PUSH
23205: LD_VAR 0 2
23209: ADD
23210: ST_TO_ADDR
// end ;
23211: GO 23107
23213: POP
23214: POP
// repeat wait ( 0 0$1 ) ;
23215: LD_INT 35
23217: PPUSH
23218: CALL_OW 67
// for un in tmp do
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: LD_VAR 0 3
23231: PUSH
23232: FOR_IN
23233: IFFALSE 23307
// begin if IsDead ( un ) then
23235: LD_VAR 0 2
23239: PPUSH
23240: CALL_OW 301
23244: IFFALSE 23264
// begin tmp := tmp diff un ;
23246: LD_ADDR_VAR 0 3
23250: PUSH
23251: LD_VAR 0 3
23255: PUSH
23256: LD_VAR 0 2
23260: DIFF
23261: ST_TO_ADDR
// continue ;
23262: GO 23232
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23264: LD_VAR 0 2
23268: PPUSH
23269: LD_INT 3
23271: PUSH
23272: LD_INT 22
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PPUSH
23286: CALL_OW 69
23290: PPUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 74
23300: PPUSH
23301: CALL_OW 115
// end ;
23305: GO 23232
23307: POP
23308: POP
// until not tmp ;
23309: LD_VAR 0 3
23313: NOT
23314: IFFALSE 23215
// end ;
23316: PPOPN 3
23318: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23319: LD_EXP 61
23323: PUSH
23324: LD_EXP 86
23328: AND
23329: IFFALSE 23383
23331: GO 23333
23333: DISABLE
// begin ToLua ( displayTroll(); ) ;
23334: LD_STRING displayTroll();
23336: PPUSH
23337: CALL_OW 559
// wait ( 3 3$00 ) ;
23341: LD_INT 6300
23343: PPUSH
23344: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23348: LD_STRING hideTroll();
23350: PPUSH
23351: CALL_OW 559
// wait ( 1 1$00 ) ;
23355: LD_INT 2100
23357: PPUSH
23358: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23362: LD_STRING displayTroll();
23364: PPUSH
23365: CALL_OW 559
// wait ( 1 1$00 ) ;
23369: LD_INT 2100
23371: PPUSH
23372: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23376: LD_STRING hideTroll();
23378: PPUSH
23379: CALL_OW 559
// end ;
23383: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23384: LD_EXP 61
23388: PUSH
23389: LD_EXP 87
23393: AND
23394: IFFALSE 23457
23396: GO 23398
23398: DISABLE
23399: LD_INT 0
23401: PPUSH
// begin p := 0 ;
23402: LD_ADDR_VAR 0 1
23406: PUSH
23407: LD_INT 0
23409: ST_TO_ADDR
// repeat game_speed := 1 ;
23410: LD_ADDR_OWVAR 65
23414: PUSH
23415: LD_INT 1
23417: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23418: LD_INT 35
23420: PPUSH
23421: CALL_OW 67
// p := p + 1 ;
23425: LD_ADDR_VAR 0 1
23429: PUSH
23430: LD_VAR 0 1
23434: PUSH
23435: LD_INT 1
23437: PLUS
23438: ST_TO_ADDR
// until p >= 60 ;
23439: LD_VAR 0 1
23443: PUSH
23444: LD_INT 60
23446: GREATEREQUAL
23447: IFFALSE 23410
// game_speed := 4 ;
23449: LD_ADDR_OWVAR 65
23453: PUSH
23454: LD_INT 4
23456: ST_TO_ADDR
// end ;
23457: PPOPN 1
23459: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23460: LD_EXP 61
23464: PUSH
23465: LD_EXP 88
23469: AND
23470: IFFALSE 23616
23472: GO 23474
23474: DISABLE
23475: LD_INT 0
23477: PPUSH
23478: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23479: LD_ADDR_VAR 0 1
23483: PUSH
23484: LD_INT 22
23486: PUSH
23487: LD_OWVAR 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 30
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PPUSH
23528: CALL_OW 69
23532: ST_TO_ADDR
// if not depot then
23533: LD_VAR 0 1
23537: NOT
23538: IFFALSE 23542
// exit ;
23540: GO 23616
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23542: LD_ADDR_VAR 0 2
23546: PUSH
23547: LD_VAR 0 1
23551: PUSH
23552: LD_INT 1
23554: PPUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 12
23564: ARRAY
23565: PPUSH
23566: CALL_OW 274
23570: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_INT 1
23578: PPUSH
23579: LD_INT 0
23581: PPUSH
23582: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23586: LD_VAR 0 2
23590: PPUSH
23591: LD_INT 2
23593: PPUSH
23594: LD_INT 0
23596: PPUSH
23597: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23601: LD_VAR 0 2
23605: PPUSH
23606: LD_INT 3
23608: PPUSH
23609: LD_INT 0
23611: PPUSH
23612: CALL_OW 277
// end ;
23616: PPOPN 2
23618: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23619: LD_EXP 61
23623: PUSH
23624: LD_EXP 89
23628: AND
23629: IFFALSE 23726
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23637: LD_ADDR_VAR 0 1
23641: PUSH
23642: LD_INT 22
23644: PUSH
23645: LD_OWVAR 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 21
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 23
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: ST_TO_ADDR
// if not tmp then
23691: LD_VAR 0 1
23695: NOT
23696: IFFALSE 23700
// exit ;
23698: GO 23726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23700: LD_VAR 0 1
23704: PUSH
23705: LD_INT 1
23707: PPUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 12
23717: ARRAY
23718: PPUSH
23719: LD_INT 200
23721: PPUSH
23722: CALL_OW 234
// end ;
23726: PPOPN 1
23728: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23729: LD_EXP 61
23733: PUSH
23734: LD_EXP 90
23738: AND
23739: IFFALSE 23818
23741: GO 23743
23743: DISABLE
23744: LD_INT 0
23746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23747: LD_ADDR_VAR 0 1
23751: PUSH
23752: LD_INT 22
23754: PUSH
23755: LD_OWVAR 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 21
23766: PUSH
23767: LD_INT 2
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PPUSH
23778: CALL_OW 69
23782: ST_TO_ADDR
// if not tmp then
23783: LD_VAR 0 1
23787: NOT
23788: IFFALSE 23792
// exit ;
23790: GO 23818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23792: LD_VAR 0 1
23796: PUSH
23797: LD_INT 1
23799: PPUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 12
23809: ARRAY
23810: PPUSH
23811: LD_INT 60
23813: PPUSH
23814: CALL_OW 234
// end ;
23818: PPOPN 1
23820: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23821: LD_EXP 61
23825: PUSH
23826: LD_EXP 91
23830: AND
23831: IFFALSE 23930
23833: GO 23835
23835: DISABLE
23836: LD_INT 0
23838: PPUSH
23839: PPUSH
// begin enable ;
23840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23841: LD_ADDR_VAR 0 1
23845: PUSH
23846: LD_INT 22
23848: PUSH
23849: LD_OWVAR 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 61
23860: PUSH
23861: EMPTY
23862: LIST
23863: PUSH
23864: LD_INT 33
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: PPUSH
23879: CALL_OW 69
23883: ST_TO_ADDR
// if not tmp then
23884: LD_VAR 0 1
23888: NOT
23889: IFFALSE 23893
// exit ;
23891: GO 23930
// for i in tmp do
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_VAR 0 1
23902: PUSH
23903: FOR_IN
23904: IFFALSE 23928
// if IsControledBy ( i ) then
23906: LD_VAR 0 2
23910: PPUSH
23911: CALL_OW 312
23915: IFFALSE 23926
// ComUnlink ( i ) ;
23917: LD_VAR 0 2
23921: PPUSH
23922: CALL_OW 136
23926: GO 23903
23928: POP
23929: POP
// end ;
23930: PPOPN 2
23932: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23933: LD_EXP 61
23937: PUSH
23938: LD_EXP 92
23942: AND
23943: IFFALSE 24083
23945: GO 23947
23947: DISABLE
23948: LD_INT 0
23950: PPUSH
23951: PPUSH
// begin ToLua ( displayPowell(); ) ;
23952: LD_STRING displayPowell();
23954: PPUSH
23955: CALL_OW 559
// uc_side := 0 ;
23959: LD_ADDR_OWVAR 20
23963: PUSH
23964: LD_INT 0
23966: ST_TO_ADDR
// uc_nation := 2 ;
23967: LD_ADDR_OWVAR 21
23971: PUSH
23972: LD_INT 2
23974: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23975: LD_ADDR_OWVAR 37
23979: PUSH
23980: LD_INT 14
23982: ST_TO_ADDR
// vc_engine := engine_siberite ;
23983: LD_ADDR_OWVAR 39
23987: PUSH
23988: LD_INT 3
23990: ST_TO_ADDR
// vc_control := control_apeman ;
23991: LD_ADDR_OWVAR 38
23995: PUSH
23996: LD_INT 5
23998: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23999: LD_ADDR_OWVAR 40
24003: PUSH
24004: LD_INT 29
24006: ST_TO_ADDR
// un := CreateVehicle ;
24007: LD_ADDR_VAR 0 2
24011: PUSH
24012: CALL_OW 45
24016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24017: LD_VAR 0 2
24021: PPUSH
24022: LD_INT 1
24024: PPUSH
24025: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24029: LD_INT 35
24031: PPUSH
24032: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_INT 22
24043: PUSH
24044: LD_OWVAR 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: PPUSH
24058: LD_VAR 0 2
24062: PPUSH
24063: CALL_OW 74
24067: PPUSH
24068: CALL_OW 115
// until IsDead ( un ) ;
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 301
24081: IFFALSE 24029
// end ;
24083: PPOPN 2
24085: END
// every 0 0$1 trigger StreamModeActive and sStu do
24086: LD_EXP 61
24090: PUSH
24091: LD_EXP 100
24095: AND
24096: IFFALSE 24112
24098: GO 24100
24100: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24101: LD_STRING displayStucuk();
24103: PPUSH
24104: CALL_OW 559
// ResetFog ;
24108: CALL_OW 335
// end ;
24112: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24113: LD_EXP 61
24117: PUSH
24118: LD_EXP 93
24122: AND
24123: IFFALSE 24264
24125: GO 24127
24127: DISABLE
24128: LD_INT 0
24130: PPUSH
24131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24132: LD_ADDR_VAR 0 2
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_OWVAR 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 21
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ST_TO_ADDR
// if not tmp then
24168: LD_VAR 0 2
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24264
// un := tmp [ rand ( 1 , tmp ) ] ;
24177: LD_ADDR_VAR 0 1
24181: PUSH
24182: LD_VAR 0 2
24186: PUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_VAR 0 2
24194: PPUSH
24195: CALL_OW 12
24199: ARRAY
24200: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24201: LD_VAR 0 1
24205: PPUSH
24206: LD_INT 0
24208: PPUSH
24209: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24213: LD_VAR 0 1
24217: PPUSH
24218: LD_OWVAR 3
24222: PUSH
24223: LD_VAR 0 1
24227: DIFF
24228: PPUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: CALL_OW 74
24238: PPUSH
24239: CALL_OW 115
// wait ( 0 0$20 ) ;
24243: LD_INT 700
24245: PPUSH
24246: CALL_OW 67
// SetSide ( un , your_side ) ;
24250: LD_VAR 0 1
24254: PPUSH
24255: LD_OWVAR 2
24259: PPUSH
24260: CALL_OW 235
// end ;
24264: PPOPN 2
24266: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24267: LD_EXP 61
24271: PUSH
24272: LD_EXP 94
24276: AND
24277: IFFALSE 24383
24279: GO 24281
24281: DISABLE
24282: LD_INT 0
24284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24285: LD_ADDR_VAR 0 1
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: LD_OWVAR 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 30
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 30
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PPUSH
24334: CALL_OW 69
24338: ST_TO_ADDR
// if not depot then
24339: LD_VAR 0 1
24343: NOT
24344: IFFALSE 24348
// exit ;
24346: GO 24383
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24348: LD_VAR 0 1
24352: PUSH
24353: LD_INT 1
24355: ARRAY
24356: PPUSH
24357: CALL_OW 250
24361: PPUSH
24362: LD_VAR 0 1
24366: PUSH
24367: LD_INT 1
24369: ARRAY
24370: PPUSH
24371: CALL_OW 251
24375: PPUSH
24376: LD_INT 70
24378: PPUSH
24379: CALL_OW 495
// end ;
24383: PPOPN 1
24385: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24386: LD_EXP 61
24390: PUSH
24391: LD_EXP 95
24395: AND
24396: IFFALSE 24607
24398: GO 24400
24400: DISABLE
24401: LD_INT 0
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24408: LD_ADDR_VAR 0 5
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_OWVAR 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 21
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PPUSH
24439: CALL_OW 69
24443: ST_TO_ADDR
// if not tmp then
24444: LD_VAR 0 5
24448: NOT
24449: IFFALSE 24453
// exit ;
24451: GO 24607
// for i in tmp do
24453: LD_ADDR_VAR 0 1
24457: PUSH
24458: LD_VAR 0 5
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24605
// begin d := rand ( 0 , 5 ) ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_INT 0
24473: PPUSH
24474: LD_INT 5
24476: PPUSH
24477: CALL_OW 12
24481: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 250
24496: PPUSH
24497: LD_VAR 0 4
24501: PPUSH
24502: LD_INT 3
24504: PPUSH
24505: LD_INT 12
24507: PPUSH
24508: CALL_OW 12
24512: PPUSH
24513: CALL_OW 272
24517: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 251
24532: PPUSH
24533: LD_VAR 0 4
24537: PPUSH
24538: LD_INT 3
24540: PPUSH
24541: LD_INT 12
24543: PPUSH
24544: CALL_OW 12
24548: PPUSH
24549: CALL_OW 273
24553: ST_TO_ADDR
// if ValidHex ( x , y ) then
24554: LD_VAR 0 2
24558: PPUSH
24559: LD_VAR 0 3
24563: PPUSH
24564: CALL_OW 488
24568: IFFALSE 24603
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_INT 3
24587: PPUSH
24588: LD_INT 6
24590: PPUSH
24591: CALL_OW 12
24595: PPUSH
24596: LD_INT 1
24598: PPUSH
24599: CALL_OW 483
// end ;
24603: GO 24463
24605: POP
24606: POP
// end ;
24607: PPOPN 5
24609: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24610: LD_EXP 61
24614: PUSH
24615: LD_EXP 96
24619: AND
24620: IFFALSE 24714
24622: GO 24624
24624: DISABLE
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24629: LD_ADDR_VAR 0 2
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_OWVAR 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 32
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 21
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: PPUSH
24671: CALL_OW 69
24675: ST_TO_ADDR
// if not tmp then
24676: LD_VAR 0 2
24680: NOT
24681: IFFALSE 24685
// exit ;
24683: GO 24714
// for i in tmp do
24685: LD_ADDR_VAR 0 1
24689: PUSH
24690: LD_VAR 0 2
24694: PUSH
24695: FOR_IN
24696: IFFALSE 24712
// SetFuel ( i , 0 ) ;
24698: LD_VAR 0 1
24702: PPUSH
24703: LD_INT 0
24705: PPUSH
24706: CALL_OW 240
24710: GO 24695
24712: POP
24713: POP
// end ;
24714: PPOPN 2
24716: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24717: LD_EXP 61
24721: PUSH
24722: LD_EXP 97
24726: AND
24727: IFFALSE 24793
24729: GO 24731
24731: DISABLE
24732: LD_INT 0
24734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24735: LD_ADDR_VAR 0 1
24739: PUSH
24740: LD_INT 22
24742: PUSH
24743: LD_OWVAR 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 30
24754: PUSH
24755: LD_INT 29
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PPUSH
24766: CALL_OW 69
24770: ST_TO_ADDR
// if not tmp then
24771: LD_VAR 0 1
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 24793
// DestroyUnit ( tmp [ 1 ] ) ;
24780: LD_VAR 0 1
24784: PUSH
24785: LD_INT 1
24787: ARRAY
24788: PPUSH
24789: CALL_OW 65
// end ;
24793: PPOPN 1
24795: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24796: LD_EXP 61
24800: PUSH
24801: LD_EXP 99
24805: AND
24806: IFFALSE 24935
24808: GO 24810
24810: DISABLE
24811: LD_INT 0
24813: PPUSH
// begin uc_side := 0 ;
24814: LD_ADDR_OWVAR 20
24818: PUSH
24819: LD_INT 0
24821: ST_TO_ADDR
// uc_nation := nation_arabian ;
24822: LD_ADDR_OWVAR 21
24826: PUSH
24827: LD_INT 2
24829: ST_TO_ADDR
// hc_gallery :=  ;
24830: LD_ADDR_OWVAR 33
24834: PUSH
24835: LD_STRING 
24837: ST_TO_ADDR
// hc_name :=  ;
24838: LD_ADDR_OWVAR 26
24842: PUSH
24843: LD_STRING 
24845: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24846: LD_INT 1
24848: PPUSH
24849: LD_INT 11
24851: PPUSH
24852: LD_INT 10
24854: PPUSH
24855: CALL_OW 380
// un := CreateHuman ;
24859: LD_ADDR_VAR 0 1
24863: PUSH
24864: CALL_OW 44
24868: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_INT 1
24876: PPUSH
24877: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24881: LD_INT 35
24883: PPUSH
24884: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24888: LD_VAR 0 1
24892: PPUSH
24893: LD_INT 22
24895: PUSH
24896: LD_OWVAR 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PPUSH
24905: CALL_OW 69
24909: PPUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 74
24919: PPUSH
24920: CALL_OW 115
// until IsDead ( un ) ;
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 301
24933: IFFALSE 24881
// end ;
24935: PPOPN 1
24937: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24938: LD_EXP 61
24942: PUSH
24943: LD_EXP 101
24947: AND
24948: IFFALSE 24960
24950: GO 24952
24952: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24953: LD_STRING earthquake(getX(game), 0, 32)
24955: PPUSH
24956: CALL_OW 559
24960: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24961: LD_EXP 61
24965: PUSH
24966: LD_EXP 102
24970: AND
24971: IFFALSE 25062
24973: GO 24975
24975: DISABLE
24976: LD_INT 0
24978: PPUSH
// begin enable ;
24979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: LD_INT 22
24987: PUSH
24988: LD_OWVAR 2
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 33
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PPUSH
25022: CALL_OW 69
25026: ST_TO_ADDR
// if not tmp then
25027: LD_VAR 0 1
25031: NOT
25032: IFFALSE 25036
// exit ;
25034: GO 25062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25036: LD_VAR 0 1
25040: PUSH
25041: LD_INT 1
25043: PPUSH
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 12
25053: ARRAY
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 234
// end ;
25062: PPOPN 1
25064: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25065: LD_EXP 61
25069: PUSH
25070: LD_EXP 103
25074: AND
25075: IFFALSE 25216
25077: GO 25079
25079: DISABLE
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
25084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_INT 22
25092: PUSH
25093: LD_OWVAR 2
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 25
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: ST_TO_ADDR
// if not tmp then
25121: LD_VAR 0 3
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25216
// un := tmp [ rand ( 1 , tmp ) ] ;
25130: LD_ADDR_VAR 0 2
25134: PUSH
25135: LD_VAR 0 3
25139: PUSH
25140: LD_INT 1
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: CALL_OW 12
25152: ARRAY
25153: ST_TO_ADDR
// if Crawls ( un ) then
25154: LD_VAR 0 2
25158: PPUSH
25159: CALL_OW 318
25163: IFFALSE 25174
// ComWalk ( un ) ;
25165: LD_VAR 0 2
25169: PPUSH
25170: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25174: LD_VAR 0 2
25178: PPUSH
25179: LD_INT 9
25181: PPUSH
25182: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25186: LD_INT 28
25188: PPUSH
25189: LD_OWVAR 2
25193: PPUSH
25194: LD_INT 2
25196: PPUSH
25197: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25201: LD_INT 29
25203: PPUSH
25204: LD_OWVAR 2
25208: PPUSH
25209: LD_INT 2
25211: PPUSH
25212: CALL_OW 322
// end ;
25216: PPOPN 3
25218: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25219: LD_EXP 61
25223: PUSH
25224: LD_EXP 104
25228: AND
25229: IFFALSE 25340
25231: GO 25233
25233: DISABLE
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_INT 22
25246: PUSH
25247: LD_OWVAR 2
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 25
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: ST_TO_ADDR
// if not tmp then
25275: LD_VAR 0 3
25279: NOT
25280: IFFALSE 25284
// exit ;
25282: GO 25340
// un := tmp [ rand ( 1 , tmp ) ] ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_VAR 0 3
25293: PUSH
25294: LD_INT 1
25296: PPUSH
25297: LD_VAR 0 3
25301: PPUSH
25302: CALL_OW 12
25306: ARRAY
25307: ST_TO_ADDR
// if Crawls ( un ) then
25308: LD_VAR 0 2
25312: PPUSH
25313: CALL_OW 318
25317: IFFALSE 25328
// ComWalk ( un ) ;
25319: LD_VAR 0 2
25323: PPUSH
25324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_INT 8
25335: PPUSH
25336: CALL_OW 336
// end ;
25340: PPOPN 3
25342: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25343: LD_EXP 61
25347: PUSH
25348: LD_EXP 105
25352: AND
25353: IFFALSE 25497
25355: GO 25357
25357: DISABLE
25358: LD_INT 0
25360: PPUSH
25361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 34
25404: PUSH
25405: LD_INT 51
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 34
25414: PUSH
25415: LD_INT 32
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 2
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25497
// for i in tmp do
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25495
// if GetCargo ( i , mat_artifact ) = 0 then
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_INT 4
25467: PPUSH
25468: CALL_OW 289
25472: PUSH
25473: LD_INT 0
25475: EQUAL
25476: IFFALSE 25493
// SetCargo ( i , mat_siberit , 100 ) ;
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_INT 3
25485: PPUSH
25486: LD_INT 100
25488: PPUSH
25489: CALL_OW 290
25493: GO 25457
25495: POP
25496: POP
// end ;
25497: PPOPN 2
25499: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25500: LD_EXP 61
25504: PUSH
25505: LD_EXP 106
25509: AND
25510: IFFALSE 25693
25512: GO 25514
25514: DISABLE
25515: LD_INT 0
25517: PPUSH
25518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25519: LD_ADDR_VAR 0 2
25523: PUSH
25524: LD_INT 22
25526: PUSH
25527: LD_OWVAR 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 69
25540: ST_TO_ADDR
// if not tmp then
25541: LD_VAR 0 2
25545: NOT
25546: IFFALSE 25550
// exit ;
25548: GO 25693
// for i := 1 to 2 do
25550: LD_ADDR_VAR 0 1
25554: PUSH
25555: DOUBLE
25556: LD_INT 1
25558: DEC
25559: ST_TO_ADDR
25560: LD_INT 2
25562: PUSH
25563: FOR_TO
25564: IFFALSE 25691
// begin uc_side := your_side ;
25566: LD_ADDR_OWVAR 20
25570: PUSH
25571: LD_OWVAR 2
25575: ST_TO_ADDR
// uc_nation := nation_american ;
25576: LD_ADDR_OWVAR 21
25580: PUSH
25581: LD_INT 1
25583: ST_TO_ADDR
// vc_chassis := us_morphling ;
25584: LD_ADDR_OWVAR 37
25588: PUSH
25589: LD_INT 5
25591: ST_TO_ADDR
// vc_engine := engine_siberite ;
25592: LD_ADDR_OWVAR 39
25596: PUSH
25597: LD_INT 3
25599: ST_TO_ADDR
// vc_control := control_computer ;
25600: LD_ADDR_OWVAR 38
25604: PUSH
25605: LD_INT 3
25607: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25608: LD_ADDR_OWVAR 40
25612: PUSH
25613: LD_INT 10
25615: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25616: LD_VAR 0 2
25620: PUSH
25621: LD_INT 1
25623: ARRAY
25624: PPUSH
25625: CALL_OW 310
25629: NOT
25630: IFFALSE 25677
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25632: CALL_OW 45
25636: PPUSH
25637: LD_VAR 0 2
25641: PUSH
25642: LD_INT 1
25644: ARRAY
25645: PPUSH
25646: CALL_OW 250
25650: PPUSH
25651: LD_VAR 0 2
25655: PUSH
25656: LD_INT 1
25658: ARRAY
25659: PPUSH
25660: CALL_OW 251
25664: PPUSH
25665: LD_INT 12
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 50
25675: GO 25689
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25677: CALL_OW 45
25681: PPUSH
25682: LD_INT 1
25684: PPUSH
25685: CALL_OW 51
// end ;
25689: GO 25563
25691: POP
25692: POP
// end ;
25693: PPOPN 2
25695: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25696: LD_EXP 61
25700: PUSH
25701: LD_EXP 107
25705: AND
25706: IFFALSE 25928
25708: GO 25710
25710: DISABLE
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25719: LD_ADDR_VAR 0 6
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_OWVAR 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 23
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 6
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25928
// s1 := rand ( 1 , 4 ) ;
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_INT 1
25789: PPUSH
25790: LD_INT 4
25792: PPUSH
25793: CALL_OW 12
25797: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25798: LD_ADDR_VAR 0 4
25802: PUSH
25803: LD_VAR 0 6
25807: PUSH
25808: LD_INT 1
25810: ARRAY
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 259
25821: ST_TO_ADDR
// if s1 = 1 then
25822: LD_VAR 0 2
25826: PUSH
25827: LD_INT 1
25829: EQUAL
25830: IFFALSE 25850
// s2 := rand ( 2 , 4 ) else
25832: LD_ADDR_VAR 0 3
25836: PUSH
25837: LD_INT 2
25839: PPUSH
25840: LD_INT 4
25842: PPUSH
25843: CALL_OW 12
25847: ST_TO_ADDR
25848: GO 25858
// s2 := 1 ;
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_INT 1
25857: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25858: LD_ADDR_VAR 0 5
25862: PUSH
25863: LD_VAR 0 6
25867: PUSH
25868: LD_INT 1
25870: ARRAY
25871: PPUSH
25872: LD_VAR 0 3
25876: PPUSH
25877: CALL_OW 259
25881: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25882: LD_VAR 0 6
25886: PUSH
25887: LD_INT 1
25889: ARRAY
25890: PPUSH
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 5
25900: PPUSH
25901: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25905: LD_VAR 0 6
25909: PUSH
25910: LD_INT 1
25912: ARRAY
25913: PPUSH
25914: LD_VAR 0 3
25918: PPUSH
25919: LD_VAR 0 4
25923: PPUSH
25924: CALL_OW 237
// end ;
25928: PPOPN 6
25930: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25931: LD_EXP 61
25935: PUSH
25936: LD_EXP 108
25940: AND
25941: IFFALSE 26020
25943: GO 25945
25945: DISABLE
25946: LD_INT 0
25948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25949: LD_ADDR_VAR 0 1
25953: PUSH
25954: LD_INT 22
25956: PUSH
25957: LD_OWVAR 2
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 30
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 69
25984: ST_TO_ADDR
// if not tmp then
25985: LD_VAR 0 1
25989: NOT
25990: IFFALSE 25994
// exit ;
25992: GO 26020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25994: LD_VAR 0 1
25998: PUSH
25999: LD_INT 1
26001: PPUSH
26002: LD_VAR 0 1
26006: PPUSH
26007: CALL_OW 12
26011: ARRAY
26012: PPUSH
26013: LD_INT 1
26015: PPUSH
26016: CALL_OW 234
// end ;
26020: PPOPN 1
26022: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26023: LD_EXP 61
26027: PUSH
26028: LD_EXP 109
26032: AND
26033: IFFALSE 26145
26035: GO 26037
26037: DISABLE
26038: LD_INT 0
26040: PPUSH
26041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26042: LD_ADDR_VAR 0 2
26046: PUSH
26047: LD_INT 22
26049: PUSH
26050: LD_OWVAR 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 30
26064: PUSH
26065: LD_INT 27
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 30
26074: PUSH
26075: LD_INT 26
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 30
26084: PUSH
26085: LD_INT 28
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: ST_TO_ADDR
// if not tmp then
26107: LD_VAR 0 2
26111: NOT
26112: IFFALSE 26116
// exit ;
26114: GO 26145
// for i in tmp do
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_VAR 0 2
26125: PUSH
26126: FOR_IN
26127: IFFALSE 26143
// SetLives ( i , 1 ) ;
26129: LD_VAR 0 1
26133: PPUSH
26134: LD_INT 1
26136: PPUSH
26137: CALL_OW 234
26141: GO 26126
26143: POP
26144: POP
// end ;
26145: PPOPN 2
26147: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26148: LD_EXP 61
26152: PUSH
26153: LD_EXP 110
26157: AND
26158: IFFALSE 26445
26160: GO 26162
26162: DISABLE
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// begin i := rand ( 1 , 7 ) ;
26168: LD_ADDR_VAR 0 1
26172: PUSH
26173: LD_INT 1
26175: PPUSH
26176: LD_INT 7
26178: PPUSH
26179: CALL_OW 12
26183: ST_TO_ADDR
// case i of 1 :
26184: LD_VAR 0 1
26188: PUSH
26189: LD_INT 1
26191: DOUBLE
26192: EQUAL
26193: IFTRUE 26197
26195: GO 26207
26197: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26198: LD_STRING earthquake(getX(game), 0, 32)
26200: PPUSH
26201: CALL_OW 559
26205: GO 26445
26207: LD_INT 2
26209: DOUBLE
26210: EQUAL
26211: IFTRUE 26215
26213: GO 26229
26215: POP
// begin ToLua ( displayStucuk(); ) ;
26216: LD_STRING displayStucuk();
26218: PPUSH
26219: CALL_OW 559
// ResetFog ;
26223: CALL_OW 335
// end ; 3 :
26227: GO 26445
26229: LD_INT 3
26231: DOUBLE
26232: EQUAL
26233: IFTRUE 26237
26235: GO 26341
26237: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 25
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 2
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26445
// un := tmp [ rand ( 1 , tmp ) ] ;
26283: LD_ADDR_VAR 0 3
26287: PUSH
26288: LD_VAR 0 2
26292: PUSH
26293: LD_INT 1
26295: PPUSH
26296: LD_VAR 0 2
26300: PPUSH
26301: CALL_OW 12
26305: ARRAY
26306: ST_TO_ADDR
// if Crawls ( un ) then
26307: LD_VAR 0 3
26311: PPUSH
26312: CALL_OW 318
26316: IFFALSE 26327
// ComWalk ( un ) ;
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26327: LD_VAR 0 3
26331: PPUSH
26332: LD_INT 8
26334: PPUSH
26335: CALL_OW 336
// end ; 4 :
26339: GO 26445
26341: LD_INT 4
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26423
26349: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26350: LD_ADDR_VAR 0 2
26354: PUSH
26355: LD_INT 22
26357: PUSH
26358: LD_OWVAR 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 30
26369: PUSH
26370: LD_INT 29
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: ST_TO_ADDR
// if not tmp then
26386: LD_VAR 0 2
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26445
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26395: LD_VAR 0 2
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: PPUSH
26404: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26408: LD_VAR 0 2
26412: PUSH
26413: LD_INT 1
26415: ARRAY
26416: PPUSH
26417: CALL_OW 65
// end ; 5 .. 7 :
26421: GO 26445
26423: LD_INT 5
26425: DOUBLE
26426: GREATEREQUAL
26427: IFFALSE 26435
26429: LD_INT 7
26431: DOUBLE
26432: LESSEQUAL
26433: IFTRUE 26437
26435: GO 26444
26437: POP
// StreamSibBomb ; end ;
26438: CALL 22682 0 0
26442: GO 26445
26444: POP
// end ;
26445: PPOPN 3
26447: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26448: LD_EXP 61
26452: PUSH
26453: LD_EXP 111
26457: AND
26458: IFFALSE 26614
26460: GO 26462
26462: DISABLE
26463: LD_INT 0
26465: PPUSH
26466: PPUSH
26467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26468: LD_ADDR_VAR 0 2
26472: PUSH
26473: LD_INT 81
26475: PUSH
26476: LD_OWVAR 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 21
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 21
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 2
26526: NOT
26527: IFFALSE 26531
// exit ;
26529: GO 26614
// p := 0 ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_INT 0
26538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26539: LD_INT 35
26541: PPUSH
26542: CALL_OW 67
// p := p + 1 ;
26546: LD_ADDR_VAR 0 3
26550: PUSH
26551: LD_VAR 0 3
26555: PUSH
26556: LD_INT 1
26558: PLUS
26559: ST_TO_ADDR
// for i in tmp do
26560: LD_ADDR_VAR 0 1
26564: PUSH
26565: LD_VAR 0 2
26569: PUSH
26570: FOR_IN
26571: IFFALSE 26602
// if GetLives ( i ) < 1000 then
26573: LD_VAR 0 1
26577: PPUSH
26578: CALL_OW 256
26582: PUSH
26583: LD_INT 1000
26585: LESS
26586: IFFALSE 26600
// SetLives ( i , 1000 ) ;
26588: LD_VAR 0 1
26592: PPUSH
26593: LD_INT 1000
26595: PPUSH
26596: CALL_OW 234
26600: GO 26570
26602: POP
26603: POP
// until p > 20 ;
26604: LD_VAR 0 3
26608: PUSH
26609: LD_INT 20
26611: GREATER
26612: IFFALSE 26539
// end ;
26614: PPOPN 3
26616: END
// every 0 0$1 trigger StreamModeActive and sTime do
26617: LD_EXP 61
26621: PUSH
26622: LD_EXP 112
26626: AND
26627: IFFALSE 26662
26629: GO 26631
26631: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26632: LD_INT 28
26634: PPUSH
26635: LD_OWVAR 2
26639: PPUSH
26640: LD_INT 2
26642: PPUSH
26643: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26647: LD_INT 30
26649: PPUSH
26650: LD_OWVAR 2
26654: PPUSH
26655: LD_INT 2
26657: PPUSH
26658: CALL_OW 322
// end ;
26662: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26663: LD_EXP 61
26667: PUSH
26668: LD_EXP 113
26672: AND
26673: IFFALSE 26794
26675: GO 26677
26677: DISABLE
26678: LD_INT 0
26680: PPUSH
26681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26682: LD_ADDR_VAR 0 2
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_OWVAR 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 21
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 23
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 2
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26794
// for i in tmp do
26745: LD_ADDR_VAR 0 1
26749: PUSH
26750: LD_VAR 0 2
26754: PUSH
26755: FOR_IN
26756: IFFALSE 26792
// begin if Crawls ( i ) then
26758: LD_VAR 0 1
26762: PPUSH
26763: CALL_OW 318
26767: IFFALSE 26778
// ComWalk ( i ) ;
26769: LD_VAR 0 1
26773: PPUSH
26774: CALL_OW 138
// SetClass ( i , 2 ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: LD_INT 2
26785: PPUSH
26786: CALL_OW 336
// end ;
26790: GO 26755
26792: POP
26793: POP
// end ;
26794: PPOPN 2
26796: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26797: LD_EXP 61
26801: PUSH
26802: LD_EXP 114
26806: AND
26807: IFFALSE 27095
26809: GO 26811
26811: DISABLE
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
26816: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26817: LD_OWVAR 2
26821: PPUSH
26822: LD_INT 9
26824: PPUSH
26825: LD_INT 1
26827: PPUSH
26828: LD_INT 1
26830: PPUSH
26831: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26835: LD_INT 9
26837: PPUSH
26838: LD_OWVAR 2
26842: PPUSH
26843: CALL_OW 343
// uc_side := 9 ;
26847: LD_ADDR_OWVAR 20
26851: PUSH
26852: LD_INT 9
26854: ST_TO_ADDR
// uc_nation := 2 ;
26855: LD_ADDR_OWVAR 21
26859: PUSH
26860: LD_INT 2
26862: ST_TO_ADDR
// hc_name := Dark Warrior ;
26863: LD_ADDR_OWVAR 26
26867: PUSH
26868: LD_STRING Dark Warrior
26870: ST_TO_ADDR
// hc_gallery :=  ;
26871: LD_ADDR_OWVAR 33
26875: PUSH
26876: LD_STRING 
26878: ST_TO_ADDR
// hc_noskilllimit := true ;
26879: LD_ADDR_OWVAR 76
26883: PUSH
26884: LD_INT 1
26886: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26887: LD_ADDR_OWVAR 31
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 30
26897: PUSH
26898: LD_INT 30
26900: PUSH
26901: LD_INT 30
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// un := CreateHuman ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: CALL_OW 44
26919: ST_TO_ADDR
// hc_noskilllimit := false ;
26920: LD_ADDR_OWVAR 76
26924: PUSH
26925: LD_INT 0
26927: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26928: LD_VAR 0 3
26932: PPUSH
26933: LD_INT 1
26935: PPUSH
26936: CALL_OW 51
// ToLua ( playRanger() ) ;
26940: LD_STRING playRanger()
26942: PPUSH
26943: CALL_OW 559
// p := 0 ;
26947: LD_ADDR_VAR 0 2
26951: PUSH
26952: LD_INT 0
26954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26955: LD_INT 35
26957: PPUSH
26958: CALL_OW 67
// p := p + 1 ;
26962: LD_ADDR_VAR 0 2
26966: PUSH
26967: LD_VAR 0 2
26971: PUSH
26972: LD_INT 1
26974: PLUS
26975: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26976: LD_VAR 0 3
26980: PPUSH
26981: CALL_OW 256
26985: PUSH
26986: LD_INT 1000
26988: LESS
26989: IFFALSE 27003
// SetLives ( un , 1000 ) ;
26991: LD_VAR 0 3
26995: PPUSH
26996: LD_INT 1000
26998: PPUSH
26999: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27003: LD_VAR 0 3
27007: PPUSH
27008: LD_INT 81
27010: PUSH
27011: LD_OWVAR 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 91
27022: PUSH
27023: LD_VAR 0 3
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PPUSH
27040: CALL_OW 69
27044: PPUSH
27045: LD_VAR 0 3
27049: PPUSH
27050: CALL_OW 74
27054: PPUSH
27055: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27059: LD_VAR 0 2
27063: PUSH
27064: LD_INT 80
27066: GREATER
27067: PUSH
27068: LD_VAR 0 3
27072: PPUSH
27073: CALL_OW 301
27077: OR
27078: IFFALSE 26955
// if un then
27080: LD_VAR 0 3
27084: IFFALSE 27095
// RemoveUnit ( un ) ;
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL_OW 64
// end ;
27095: PPOPN 3
27097: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27098: LD_EXP 115
27102: IFFALSE 27218
27104: GO 27106
27106: DISABLE
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
27111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27112: LD_ADDR_VAR 0 2
27116: PUSH
27117: LD_INT 81
27119: PUSH
27120: LD_OWVAR 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 21
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PPUSH
27143: CALL_OW 69
27147: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27148: LD_STRING playComputer()
27150: PPUSH
27151: CALL_OW 559
// if not tmp then
27155: LD_VAR 0 2
27159: NOT
27160: IFFALSE 27164
// exit ;
27162: GO 27218
// for i in tmp do
27164: LD_ADDR_VAR 0 1
27168: PUSH
27169: LD_VAR 0 2
27173: PUSH
27174: FOR_IN
27175: IFFALSE 27216
// for j := 1 to 4 do
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: DOUBLE
27183: LD_INT 1
27185: DEC
27186: ST_TO_ADDR
27187: LD_INT 4
27189: PUSH
27190: FOR_TO
27191: IFFALSE 27212
// SetSkill ( i , j , 10 ) ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_VAR 0 3
27202: PPUSH
27203: LD_INT 10
27205: PPUSH
27206: CALL_OW 237
27210: GO 27190
27212: POP
27213: POP
27214: GO 27174
27216: POP
27217: POP
// end ;
27218: PPOPN 3
27220: END
// every 0 0$1 trigger s30 do var i , tmp ;
27221: LD_EXP 116
27225: IFFALSE 27294
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
27233: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27234: LD_ADDR_VAR 0 2
27238: PUSH
27239: LD_INT 22
27241: PUSH
27242: LD_OWVAR 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: ST_TO_ADDR
// if not tmp then
27256: LD_VAR 0 2
27260: NOT
27261: IFFALSE 27265
// exit ;
27263: GO 27294
// for i in tmp do
27265: LD_ADDR_VAR 0 1
27269: PUSH
27270: LD_VAR 0 2
27274: PUSH
27275: FOR_IN
27276: IFFALSE 27292
// SetLives ( i , 300 ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: LD_INT 300
27285: PPUSH
27286: CALL_OW 234
27290: GO 27275
27292: POP
27293: POP
// end ;
27294: PPOPN 2
27296: END
// every 0 0$1 trigger s60 do var i , tmp ;
27297: LD_EXP 117
27301: IFFALSE 27370
27303: GO 27305
27305: DISABLE
27306: LD_INT 0
27308: PPUSH
27309: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_INT 22
27317: PUSH
27318: LD_OWVAR 2
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 69
27331: ST_TO_ADDR
// if not tmp then
27332: LD_VAR 0 2
27336: NOT
27337: IFFALSE 27341
// exit ;
27339: GO 27370
// for i in tmp do
27341: LD_ADDR_VAR 0 1
27345: PUSH
27346: LD_VAR 0 2
27350: PUSH
27351: FOR_IN
27352: IFFALSE 27368
// SetLives ( i , 600 ) ;
27354: LD_VAR 0 1
27358: PPUSH
27359: LD_INT 600
27361: PPUSH
27362: CALL_OW 234
27366: GO 27351
27368: POP
27369: POP
// end ;
27370: PPOPN 2
27372: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27373: LD_INT 0
27375: PPUSH
// case cmd of 301 :
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 301
27383: DOUBLE
27384: EQUAL
27385: IFTRUE 27389
27387: GO 27421
27389: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27390: LD_VAR 0 6
27394: PPUSH
27395: LD_VAR 0 7
27399: PPUSH
27400: LD_VAR 0 8
27404: PPUSH
27405: LD_VAR 0 4
27409: PPUSH
27410: LD_VAR 0 5
27414: PPUSH
27415: CALL 28622 0 5
27419: GO 27542
27421: LD_INT 302
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 27466
27429: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27430: LD_VAR 0 6
27434: PPUSH
27435: LD_VAR 0 7
27439: PPUSH
27440: LD_VAR 0 8
27444: PPUSH
27445: LD_VAR 0 9
27449: PPUSH
27450: LD_VAR 0 4
27454: PPUSH
27455: LD_VAR 0 5
27459: PPUSH
27460: CALL 28713 0 6
27464: GO 27542
27466: LD_INT 303
27468: DOUBLE
27469: EQUAL
27470: IFTRUE 27474
27472: GO 27511
27474: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27475: LD_VAR 0 6
27479: PPUSH
27480: LD_VAR 0 7
27484: PPUSH
27485: LD_VAR 0 8
27489: PPUSH
27490: LD_VAR 0 9
27494: PPUSH
27495: LD_VAR 0 4
27499: PPUSH
27500: LD_VAR 0 5
27504: PPUSH
27505: CALL 27547 0 6
27509: GO 27542
27511: LD_INT 304
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27519
27517: GO 27541
27519: POP
// hHackTeleport ( unit , x , y ) ; end ;
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 4
27529: PPUSH
27530: LD_VAR 0 5
27534: PPUSH
27535: CALL 29306 0 3
27539: GO 27542
27541: POP
// end ;
27542: LD_VAR 0 12
27546: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27547: LD_INT 0
27549: PPUSH
27550: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27551: LD_VAR 0 1
27555: PUSH
27556: LD_INT 1
27558: LESS
27559: PUSH
27560: LD_VAR 0 1
27564: PUSH
27565: LD_INT 3
27567: GREATER
27568: OR
27569: PUSH
27570: LD_VAR 0 5
27574: PPUSH
27575: LD_VAR 0 6
27579: PPUSH
27580: CALL_OW 428
27584: OR
27585: IFFALSE 27589
// exit ;
27587: GO 28309
// uc_side := your_side ;
27589: LD_ADDR_OWVAR 20
27593: PUSH
27594: LD_OWVAR 2
27598: ST_TO_ADDR
// uc_nation := nation ;
27599: LD_ADDR_OWVAR 21
27603: PUSH
27604: LD_VAR 0 1
27608: ST_TO_ADDR
// bc_level = 1 ;
27609: LD_ADDR_OWVAR 43
27613: PUSH
27614: LD_INT 1
27616: ST_TO_ADDR
// case btype of 1 :
27617: LD_VAR 0 2
27621: PUSH
27622: LD_INT 1
27624: DOUBLE
27625: EQUAL
27626: IFTRUE 27630
27628: GO 27641
27630: POP
// bc_type := b_depot ; 2 :
27631: LD_ADDR_OWVAR 42
27635: PUSH
27636: LD_INT 0
27638: ST_TO_ADDR
27639: GO 28253
27641: LD_INT 2
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27660
27649: POP
// bc_type := b_warehouse ; 3 :
27650: LD_ADDR_OWVAR 42
27654: PUSH
27655: LD_INT 1
27657: ST_TO_ADDR
27658: GO 28253
27660: LD_INT 3
27662: DOUBLE
27663: EQUAL
27664: IFTRUE 27668
27666: GO 27679
27668: POP
// bc_type := b_lab ; 4 .. 9 :
27669: LD_ADDR_OWVAR 42
27673: PUSH
27674: LD_INT 6
27676: ST_TO_ADDR
27677: GO 28253
27679: LD_INT 4
27681: DOUBLE
27682: GREATEREQUAL
27683: IFFALSE 27691
27685: LD_INT 9
27687: DOUBLE
27688: LESSEQUAL
27689: IFTRUE 27693
27691: GO 27745
27693: POP
// begin bc_type := b_lab_half ;
27694: LD_ADDR_OWVAR 42
27698: PUSH
27699: LD_INT 7
27701: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27702: LD_ADDR_OWVAR 44
27706: PUSH
27707: LD_INT 10
27709: PUSH
27710: LD_INT 11
27712: PUSH
27713: LD_INT 12
27715: PUSH
27716: LD_INT 15
27718: PUSH
27719: LD_INT 14
27721: PUSH
27722: LD_INT 13
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: PUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_INT 3
27740: MINUS
27741: ARRAY
27742: ST_TO_ADDR
// end ; 10 .. 13 :
27743: GO 28253
27745: LD_INT 10
27747: DOUBLE
27748: GREATEREQUAL
27749: IFFALSE 27757
27751: LD_INT 13
27753: DOUBLE
27754: LESSEQUAL
27755: IFTRUE 27759
27757: GO 27836
27759: POP
// begin bc_type := b_lab_full ;
27760: LD_ADDR_OWVAR 42
27764: PUSH
27765: LD_INT 8
27767: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27768: LD_ADDR_OWVAR 44
27772: PUSH
27773: LD_INT 10
27775: PUSH
27776: LD_INT 12
27778: PUSH
27779: LD_INT 14
27781: PUSH
27782: LD_INT 13
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: PUSH
27791: LD_VAR 0 2
27795: PUSH
27796: LD_INT 9
27798: MINUS
27799: ARRAY
27800: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27801: LD_ADDR_OWVAR 45
27805: PUSH
27806: LD_INT 11
27808: PUSH
27809: LD_INT 15
27811: PUSH
27812: LD_INT 12
27814: PUSH
27815: LD_INT 15
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: PUSH
27824: LD_VAR 0 2
27828: PUSH
27829: LD_INT 9
27831: MINUS
27832: ARRAY
27833: ST_TO_ADDR
// end ; 14 :
27834: GO 28253
27836: LD_INT 14
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27855
27844: POP
// bc_type := b_workshop ; 15 :
27845: LD_ADDR_OWVAR 42
27849: PUSH
27850: LD_INT 2
27852: ST_TO_ADDR
27853: GO 28253
27855: LD_INT 15
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27874
27863: POP
// bc_type := b_factory ; 16 :
27864: LD_ADDR_OWVAR 42
27868: PUSH
27869: LD_INT 3
27871: ST_TO_ADDR
27872: GO 28253
27874: LD_INT 16
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27893
27882: POP
// bc_type := b_ext_gun ; 17 :
27883: LD_ADDR_OWVAR 42
27887: PUSH
27888: LD_INT 17
27890: ST_TO_ADDR
27891: GO 28253
27893: LD_INT 17
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 27929
27901: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27902: LD_ADDR_OWVAR 42
27906: PUSH
27907: LD_INT 19
27909: PUSH
27910: LD_INT 23
27912: PUSH
27913: LD_INT 19
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: LD_VAR 0 1
27925: ARRAY
27926: ST_TO_ADDR
27927: GO 28253
27929: LD_INT 18
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27948
27937: POP
// bc_type := b_ext_radar ; 19 :
27938: LD_ADDR_OWVAR 42
27942: PUSH
27943: LD_INT 20
27945: ST_TO_ADDR
27946: GO 28253
27948: LD_INT 19
27950: DOUBLE
27951: EQUAL
27952: IFTRUE 27956
27954: GO 27967
27956: POP
// bc_type := b_ext_radio ; 20 :
27957: LD_ADDR_OWVAR 42
27961: PUSH
27962: LD_INT 22
27964: ST_TO_ADDR
27965: GO 28253
27967: LD_INT 20
27969: DOUBLE
27970: EQUAL
27971: IFTRUE 27975
27973: GO 27986
27975: POP
// bc_type := b_ext_siberium ; 21 :
27976: LD_ADDR_OWVAR 42
27980: PUSH
27981: LD_INT 21
27983: ST_TO_ADDR
27984: GO 28253
27986: LD_INT 21
27988: DOUBLE
27989: EQUAL
27990: IFTRUE 27994
27992: GO 28005
27994: POP
// bc_type := b_ext_computer ; 22 :
27995: LD_ADDR_OWVAR 42
27999: PUSH
28000: LD_INT 24
28002: ST_TO_ADDR
28003: GO 28253
28005: LD_INT 22
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28024
28013: POP
// bc_type := b_ext_track ; 23 :
28014: LD_ADDR_OWVAR 42
28018: PUSH
28019: LD_INT 16
28021: ST_TO_ADDR
28022: GO 28253
28024: LD_INT 23
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28043
28032: POP
// bc_type := b_ext_laser ; 24 :
28033: LD_ADDR_OWVAR 42
28037: PUSH
28038: LD_INT 25
28040: ST_TO_ADDR
28041: GO 28253
28043: LD_INT 24
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28062
28051: POP
// bc_type := b_control_tower ; 25 :
28052: LD_ADDR_OWVAR 42
28056: PUSH
28057: LD_INT 36
28059: ST_TO_ADDR
28060: GO 28253
28062: LD_INT 25
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28081
28070: POP
// bc_type := b_breastwork ; 26 :
28071: LD_ADDR_OWVAR 42
28075: PUSH
28076: LD_INT 31
28078: ST_TO_ADDR
28079: GO 28253
28081: LD_INT 26
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28100
28089: POP
// bc_type := b_bunker ; 27 :
28090: LD_ADDR_OWVAR 42
28094: PUSH
28095: LD_INT 32
28097: ST_TO_ADDR
28098: GO 28253
28100: LD_INT 27
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28119
28108: POP
// bc_type := b_turret ; 28 :
28109: LD_ADDR_OWVAR 42
28113: PUSH
28114: LD_INT 33
28116: ST_TO_ADDR
28117: GO 28253
28119: LD_INT 28
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28138
28127: POP
// bc_type := b_armoury ; 29 :
28128: LD_ADDR_OWVAR 42
28132: PUSH
28133: LD_INT 4
28135: ST_TO_ADDR
28136: GO 28253
28138: LD_INT 29
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28157
28146: POP
// bc_type := b_barracks ; 30 :
28147: LD_ADDR_OWVAR 42
28151: PUSH
28152: LD_INT 5
28154: ST_TO_ADDR
28155: GO 28253
28157: LD_INT 30
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28176
28165: POP
// bc_type := b_solar_power ; 31 :
28166: LD_ADDR_OWVAR 42
28170: PUSH
28171: LD_INT 27
28173: ST_TO_ADDR
28174: GO 28253
28176: LD_INT 31
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28184
28182: GO 28195
28184: POP
// bc_type := b_oil_power ; 32 :
28185: LD_ADDR_OWVAR 42
28189: PUSH
28190: LD_INT 26
28192: ST_TO_ADDR
28193: GO 28253
28195: LD_INT 32
28197: DOUBLE
28198: EQUAL
28199: IFTRUE 28203
28201: GO 28214
28203: POP
// bc_type := b_siberite_power ; 33 :
28204: LD_ADDR_OWVAR 42
28208: PUSH
28209: LD_INT 28
28211: ST_TO_ADDR
28212: GO 28253
28214: LD_INT 33
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28233
28222: POP
// bc_type := b_oil_mine ; 34 :
28223: LD_ADDR_OWVAR 42
28227: PUSH
28228: LD_INT 29
28230: ST_TO_ADDR
28231: GO 28253
28233: LD_INT 34
28235: DOUBLE
28236: EQUAL
28237: IFTRUE 28241
28239: GO 28252
28241: POP
// bc_type := b_siberite_mine ; end ;
28242: LD_ADDR_OWVAR 42
28246: PUSH
28247: LD_INT 30
28249: ST_TO_ADDR
28250: GO 28253
28252: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28253: LD_ADDR_VAR 0 8
28257: PUSH
28258: LD_VAR 0 5
28262: PPUSH
28263: LD_VAR 0 6
28267: PPUSH
28268: LD_VAR 0 3
28272: PPUSH
28273: CALL_OW 47
28277: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28278: LD_OWVAR 42
28282: PUSH
28283: LD_INT 32
28285: PUSH
28286: LD_INT 33
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: IN
28293: IFFALSE 28309
// PlaceWeaponTurret ( b , weapon ) ;
28295: LD_VAR 0 8
28299: PPUSH
28300: LD_VAR 0 4
28304: PPUSH
28305: CALL_OW 431
// end ;
28309: LD_VAR 0 7
28313: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28314: LD_INT 0
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28320: LD_ADDR_VAR 0 4
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 30
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// if not tmp then
28374: LD_VAR 0 4
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28442
// for i in tmp do
28383: LD_ADDR_VAR 0 2
28387: PUSH
28388: LD_VAR 0 4
28392: PUSH
28393: FOR_IN
28394: IFFALSE 28440
// for j = 1 to 3 do
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: DOUBLE
28402: LD_INT 1
28404: DEC
28405: ST_TO_ADDR
28406: LD_INT 3
28408: PUSH
28409: FOR_TO
28410: IFFALSE 28436
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28412: LD_VAR 0 2
28416: PPUSH
28417: CALL_OW 274
28421: PPUSH
28422: LD_VAR 0 3
28426: PPUSH
28427: LD_INT 99999
28429: PPUSH
28430: CALL_OW 277
28434: GO 28409
28436: POP
28437: POP
28438: GO 28393
28440: POP
28441: POP
// end ;
28442: LD_VAR 0 1
28446: RET
// export function hHackSetLevel10 ; var i , j ; begin
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
28451: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28452: LD_ADDR_VAR 0 2
28456: PUSH
28457: LD_INT 21
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: PUSH
28472: FOR_IN
28473: IFFALSE 28525
// if IsSelected ( i ) then
28475: LD_VAR 0 2
28479: PPUSH
28480: CALL_OW 306
28484: IFFALSE 28523
// begin for j := 1 to 4 do
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: DOUBLE
28492: LD_INT 1
28494: DEC
28495: ST_TO_ADDR
28496: LD_INT 4
28498: PUSH
28499: FOR_TO
28500: IFFALSE 28521
// SetSkill ( i , j , 10 ) ;
28502: LD_VAR 0 2
28506: PPUSH
28507: LD_VAR 0 3
28511: PPUSH
28512: LD_INT 10
28514: PPUSH
28515: CALL_OW 237
28519: GO 28499
28521: POP
28522: POP
// end ;
28523: GO 28472
28525: POP
28526: POP
// end ;
28527: LD_VAR 0 1
28531: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28532: LD_INT 0
28534: PPUSH
28535: PPUSH
28536: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_INT 22
28544: PUSH
28545: LD_OWVAR 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 21
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 69
28572: PUSH
28573: FOR_IN
28574: IFFALSE 28615
// begin for j := 1 to 4 do
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: DOUBLE
28582: LD_INT 1
28584: DEC
28585: ST_TO_ADDR
28586: LD_INT 4
28588: PUSH
28589: FOR_TO
28590: IFFALSE 28611
// SetSkill ( i , j , 10 ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: LD_INT 10
28604: PPUSH
28605: CALL_OW 237
28609: GO 28589
28611: POP
28612: POP
// end ;
28613: GO 28573
28615: POP
28616: POP
// end ;
28617: LD_VAR 0 1
28621: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28622: LD_INT 0
28624: PPUSH
// uc_side := your_side ;
28625: LD_ADDR_OWVAR 20
28629: PUSH
28630: LD_OWVAR 2
28634: ST_TO_ADDR
// uc_nation := nation ;
28635: LD_ADDR_OWVAR 21
28639: PUSH
28640: LD_VAR 0 1
28644: ST_TO_ADDR
// InitHc ;
28645: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28649: LD_INT 0
28651: PPUSH
28652: LD_VAR 0 2
28656: PPUSH
28657: LD_VAR 0 3
28661: PPUSH
28662: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28666: LD_VAR 0 4
28670: PPUSH
28671: LD_VAR 0 5
28675: PPUSH
28676: CALL_OW 428
28680: PUSH
28681: LD_INT 0
28683: EQUAL
28684: IFFALSE 28708
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28686: CALL_OW 44
28690: PPUSH
28691: LD_VAR 0 4
28695: PPUSH
28696: LD_VAR 0 5
28700: PPUSH
28701: LD_INT 1
28703: PPUSH
28704: CALL_OW 48
// end ;
28708: LD_VAR 0 6
28712: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28713: LD_INT 0
28715: PPUSH
28716: PPUSH
// uc_side := your_side ;
28717: LD_ADDR_OWVAR 20
28721: PUSH
28722: LD_OWVAR 2
28726: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28727: LD_VAR 0 1
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: LD_INT 4
28743: PUSH
28744: LD_INT 5
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: IN
28754: IFFALSE 28766
// uc_nation := nation_american else
28756: LD_ADDR_OWVAR 21
28760: PUSH
28761: LD_INT 1
28763: ST_TO_ADDR
28764: GO 28809
// if chassis in [ 11 , 12 , 13 , 14 ] then
28766: LD_VAR 0 1
28770: PUSH
28771: LD_INT 11
28773: PUSH
28774: LD_INT 12
28776: PUSH
28777: LD_INT 13
28779: PUSH
28780: LD_INT 14
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: IN
28789: IFFALSE 28801
// uc_nation := nation_arabian else
28791: LD_ADDR_OWVAR 21
28795: PUSH
28796: LD_INT 2
28798: ST_TO_ADDR
28799: GO 28809
// uc_nation := nation_russian ;
28801: LD_ADDR_OWVAR 21
28805: PUSH
28806: LD_INT 3
28808: ST_TO_ADDR
// vc_chassis := chassis ;
28809: LD_ADDR_OWVAR 37
28813: PUSH
28814: LD_VAR 0 1
28818: ST_TO_ADDR
// vc_engine := engine ;
28819: LD_ADDR_OWVAR 39
28823: PUSH
28824: LD_VAR 0 2
28828: ST_TO_ADDR
// vc_control := control ;
28829: LD_ADDR_OWVAR 38
28833: PUSH
28834: LD_VAR 0 3
28838: ST_TO_ADDR
// vc_weapon := weapon ;
28839: LD_ADDR_OWVAR 40
28843: PUSH
28844: LD_VAR 0 4
28848: ST_TO_ADDR
// un := CreateVehicle ;
28849: LD_ADDR_VAR 0 8
28853: PUSH
28854: CALL_OW 45
28858: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28859: LD_VAR 0 8
28863: PPUSH
28864: LD_INT 0
28866: PPUSH
28867: LD_INT 5
28869: PPUSH
28870: CALL_OW 12
28874: PPUSH
28875: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28879: LD_VAR 0 8
28883: PPUSH
28884: LD_VAR 0 5
28888: PPUSH
28889: LD_VAR 0 6
28893: PPUSH
28894: LD_INT 1
28896: PPUSH
28897: CALL_OW 48
// end ;
28901: LD_VAR 0 7
28905: RET
// export hInvincible ; every 1 do
28906: GO 28908
28908: DISABLE
// hInvincible := [ ] ;
28909: LD_ADDR_EXP 118
28913: PUSH
28914: EMPTY
28915: ST_TO_ADDR
28916: END
// every 10 do var i ;
28917: GO 28919
28919: DISABLE
28920: LD_INT 0
28922: PPUSH
// begin enable ;
28923: ENABLE
// if not hInvincible then
28924: LD_EXP 118
28928: NOT
28929: IFFALSE 28933
// exit ;
28931: GO 28977
// for i in hInvincible do
28933: LD_ADDR_VAR 0 1
28937: PUSH
28938: LD_EXP 118
28942: PUSH
28943: FOR_IN
28944: IFFALSE 28975
// if GetLives ( i ) < 1000 then
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 256
28955: PUSH
28956: LD_INT 1000
28958: LESS
28959: IFFALSE 28973
// SetLives ( i , 1000 ) ;
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_INT 1000
28968: PPUSH
28969: CALL_OW 234
28973: GO 28943
28975: POP
28976: POP
// end ;
28977: PPOPN 1
28979: END
// export function hHackInvincible ; var i ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 21
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: PUSH
29022: FOR_IN
29023: IFFALSE 29084
// if IsSelected ( i ) then
29025: LD_VAR 0 2
29029: PPUSH
29030: CALL_OW 306
29034: IFFALSE 29082
// begin if i in hInvincible then
29036: LD_VAR 0 2
29040: PUSH
29041: LD_EXP 118
29045: IN
29046: IFFALSE 29066
// hInvincible := hInvincible diff i else
29048: LD_ADDR_EXP 118
29052: PUSH
29053: LD_EXP 118
29057: PUSH
29058: LD_VAR 0 2
29062: DIFF
29063: ST_TO_ADDR
29064: GO 29082
// hInvincible := hInvincible union i ;
29066: LD_ADDR_EXP 118
29070: PUSH
29071: LD_EXP 118
29075: PUSH
29076: LD_VAR 0 2
29080: UNION
29081: ST_TO_ADDR
// end ;
29082: GO 29022
29084: POP
29085: POP
// end ;
29086: LD_VAR 0 1
29090: RET
// export function hHackInvisible ; var i , j ; begin
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
29095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29096: LD_ADDR_VAR 0 2
29100: PUSH
29101: LD_INT 21
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PPUSH
29111: CALL_OW 69
29115: PUSH
29116: FOR_IN
29117: IFFALSE 29141
// if IsSelected ( i ) then
29119: LD_VAR 0 2
29123: PPUSH
29124: CALL_OW 306
29128: IFFALSE 29139
// ComForceInvisible ( i ) ;
29130: LD_VAR 0 2
29134: PPUSH
29135: CALL_OW 496
29139: GO 29116
29141: POP
29142: POP
// end ;
29143: LD_VAR 0 1
29147: RET
// export function hHackChangeYourSide ; begin
29148: LD_INT 0
29150: PPUSH
// if your_side = 8 then
29151: LD_OWVAR 2
29155: PUSH
29156: LD_INT 8
29158: EQUAL
29159: IFFALSE 29171
// your_side := 0 else
29161: LD_ADDR_OWVAR 2
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
29169: GO 29185
// your_side := your_side + 1 ;
29171: LD_ADDR_OWVAR 2
29175: PUSH
29176: LD_OWVAR 2
29180: PUSH
29181: LD_INT 1
29183: PLUS
29184: ST_TO_ADDR
// end ;
29185: LD_VAR 0 1
29189: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29190: LD_INT 0
29192: PPUSH
29193: PPUSH
29194: PPUSH
// for i in all_units do
29195: LD_ADDR_VAR 0 2
29199: PUSH
29200: LD_OWVAR 3
29204: PUSH
29205: FOR_IN
29206: IFFALSE 29284
// if IsSelected ( i ) then
29208: LD_VAR 0 2
29212: PPUSH
29213: CALL_OW 306
29217: IFFALSE 29282
// begin j := GetSide ( i ) ;
29219: LD_ADDR_VAR 0 3
29223: PUSH
29224: LD_VAR 0 2
29228: PPUSH
29229: CALL_OW 255
29233: ST_TO_ADDR
// if j = 8 then
29234: LD_VAR 0 3
29238: PUSH
29239: LD_INT 8
29241: EQUAL
29242: IFFALSE 29254
// j := 0 else
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
29252: GO 29268
// j := j + 1 ;
29254: LD_ADDR_VAR 0 3
29258: PUSH
29259: LD_VAR 0 3
29263: PUSH
29264: LD_INT 1
29266: PLUS
29267: ST_TO_ADDR
// SetSide ( i , j ) ;
29268: LD_VAR 0 2
29272: PPUSH
29273: LD_VAR 0 3
29277: PPUSH
29278: CALL_OW 235
// end ;
29282: GO 29205
29284: POP
29285: POP
// end ;
29286: LD_VAR 0 1
29290: RET
// export function hHackFog ; begin
29291: LD_INT 0
29293: PPUSH
// FogOff ( true ) ;
29294: LD_INT 1
29296: PPUSH
29297: CALL_OW 344
// end ;
29301: LD_VAR 0 1
29305: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29306: LD_INT 0
29308: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29309: LD_VAR 0 1
29313: PPUSH
29314: LD_VAR 0 2
29318: PPUSH
29319: LD_VAR 0 3
29323: PPUSH
29324: LD_INT 1
29326: PPUSH
29327: LD_INT 1
29329: PPUSH
29330: CALL_OW 483
// CenterOnXY ( x , y ) ;
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 3
29343: PPUSH
29344: CALL_OW 84
// end ;
29348: LD_VAR 0 4
29352: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29353: LD_INT 0
29355: PPUSH
29356: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29357: LD_VAR 0 1
29361: NOT
29362: PUSH
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_VAR 0 3
29372: PPUSH
29373: CALL_OW 488
29377: NOT
29378: OR
29379: PUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 266
29389: PUSH
29390: LD_INT 3
29392: NONEQUAL
29393: PUSH
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL_OW 247
29403: PUSH
29404: LD_INT 1
29406: EQUAL
29407: NOT
29408: AND
29409: OR
29410: IFFALSE 29414
// exit ;
29412: GO 29563
// if GetType ( factory ) = unit_human then
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 247
29423: PUSH
29424: LD_INT 1
29426: EQUAL
29427: IFFALSE 29444
// factory := IsInUnit ( factory ) ;
29429: LD_ADDR_VAR 0 1
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 310
29443: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 266
29453: PUSH
29454: LD_INT 3
29456: NONEQUAL
29457: IFFALSE 29461
// exit ;
29459: GO 29563
// if HexInfo ( x , y ) = factory then
29461: LD_VAR 0 2
29465: PPUSH
29466: LD_VAR 0 3
29470: PPUSH
29471: CALL_OW 428
29475: PUSH
29476: LD_VAR 0 1
29480: EQUAL
29481: IFFALSE 29508
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29483: LD_ADDR_EXP 119
29487: PUSH
29488: LD_EXP 119
29492: PPUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: LD_INT 0
29500: PPUSH
29501: CALL_OW 1
29505: ST_TO_ADDR
29506: GO 29559
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29508: LD_ADDR_EXP 119
29512: PUSH
29513: LD_EXP 119
29517: PPUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 255
29532: PUSH
29533: LD_VAR 0 1
29537: PUSH
29538: LD_VAR 0 2
29542: PUSH
29543: LD_VAR 0 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 1
29558: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29559: CALL 29568 0 0
// end ;
29563: LD_VAR 0 4
29567: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29568: LD_INT 0
29570: PPUSH
29571: PPUSH
29572: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29573: LD_STRING resetFactoryWaypoint();
29575: PPUSH
29576: CALL_OW 559
// if factoryWaypoints then
29580: LD_EXP 119
29584: IFFALSE 29710
// begin list := PrepareArray ( factoryWaypoints ) ;
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_EXP 119
29595: PPUSH
29596: NOP4
29600: ST_TO_ADDR
// for i := 1 to list do
29601: LD_ADDR_VAR 0 2
29605: PUSH
29606: DOUBLE
29607: LD_INT 1
29609: DEC
29610: ST_TO_ADDR
29611: LD_VAR 0 3
29615: PUSH
29616: FOR_TO
29617: IFFALSE 29708
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29619: LD_STRING setFactoryWaypointXY(
29621: PUSH
29622: LD_VAR 0 3
29626: PUSH
29627: LD_VAR 0 2
29631: ARRAY
29632: PUSH
29633: LD_INT 1
29635: ARRAY
29636: STR
29637: PUSH
29638: LD_STRING ,
29640: STR
29641: PUSH
29642: LD_VAR 0 3
29646: PUSH
29647: LD_VAR 0 2
29651: ARRAY
29652: PUSH
29653: LD_INT 2
29655: ARRAY
29656: STR
29657: PUSH
29658: LD_STRING ,
29660: STR
29661: PUSH
29662: LD_VAR 0 3
29666: PUSH
29667: LD_VAR 0 2
29671: ARRAY
29672: PUSH
29673: LD_INT 3
29675: ARRAY
29676: STR
29677: PUSH
29678: LD_STRING ,
29680: STR
29681: PUSH
29682: LD_VAR 0 3
29686: PUSH
29687: LD_VAR 0 2
29691: ARRAY
29692: PUSH
29693: LD_INT 4
29695: ARRAY
29696: STR
29697: PUSH
29698: LD_STRING )
29700: STR
29701: PPUSH
29702: CALL_OW 559
29706: GO 29616
29708: POP
29709: POP
// end ; end ;
29710: LD_VAR 0 1
29714: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29715: LD_INT 0
29717: PPUSH
// if HexInfo ( x , y ) = warehouse then
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_VAR 0 3
29727: PPUSH
29728: CALL_OW 428
29732: PUSH
29733: LD_VAR 0 1
29737: EQUAL
29738: IFFALSE 29765
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29740: LD_ADDR_EXP 120
29744: PUSH
29745: LD_EXP 120
29749: PPUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_INT 0
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
29763: GO 29816
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29765: LD_ADDR_EXP 120
29769: PUSH
29770: LD_EXP 120
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 255
29789: PUSH
29790: LD_VAR 0 1
29794: PUSH
29795: LD_VAR 0 2
29799: PUSH
29800: LD_VAR 0 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 1
29815: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29816: CALL 29825 0 0
// end ;
29820: LD_VAR 0 4
29824: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
29829: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29830: LD_STRING resetWarehouseGatheringPoints();
29832: PPUSH
29833: CALL_OW 559
// if warehouseGatheringPoints then
29837: LD_EXP 120
29841: IFFALSE 29967
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_EXP 120
29852: PPUSH
29853: NOP4
29857: ST_TO_ADDR
// for i := 1 to list do
29858: LD_ADDR_VAR 0 2
29862: PUSH
29863: DOUBLE
29864: LD_INT 1
29866: DEC
29867: ST_TO_ADDR
29868: LD_VAR 0 3
29872: PUSH
29873: FOR_TO
29874: IFFALSE 29965
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29876: LD_STRING setWarehouseGatheringPointXY(
29878: PUSH
29879: LD_VAR 0 3
29883: PUSH
29884: LD_VAR 0 2
29888: ARRAY
29889: PUSH
29890: LD_INT 1
29892: ARRAY
29893: STR
29894: PUSH
29895: LD_STRING ,
29897: STR
29898: PUSH
29899: LD_VAR 0 3
29903: PUSH
29904: LD_VAR 0 2
29908: ARRAY
29909: PUSH
29910: LD_INT 2
29912: ARRAY
29913: STR
29914: PUSH
29915: LD_STRING ,
29917: STR
29918: PUSH
29919: LD_VAR 0 3
29923: PUSH
29924: LD_VAR 0 2
29928: ARRAY
29929: PUSH
29930: LD_INT 3
29932: ARRAY
29933: STR
29934: PUSH
29935: LD_STRING ,
29937: STR
29938: PUSH
29939: LD_VAR 0 3
29943: PUSH
29944: LD_VAR 0 2
29948: ARRAY
29949: PUSH
29950: LD_INT 4
29952: ARRAY
29953: STR
29954: PUSH
29955: LD_STRING )
29957: STR
29958: PPUSH
29959: CALL_OW 559
29963: GO 29873
29965: POP
29966: POP
// end ; end ;
29967: LD_VAR 0 1
29971: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29972: LD_EXP 120
29976: IFFALSE 30661
29978: GO 29980
29980: DISABLE
29981: LD_INT 0
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
// begin enable ;
29992: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29993: LD_ADDR_VAR 0 3
29997: PUSH
29998: LD_EXP 120
30002: PPUSH
30003: NOP4
30007: ST_TO_ADDR
// if not list then
30008: LD_VAR 0 3
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30661
// for i := 1 to list do
30017: LD_ADDR_VAR 0 1
30021: PUSH
30022: DOUBLE
30023: LD_INT 1
30025: DEC
30026: ST_TO_ADDR
30027: LD_VAR 0 3
30031: PUSH
30032: FOR_TO
30033: IFFALSE 30659
// begin depot := list [ i ] [ 2 ] ;
30035: LD_ADDR_VAR 0 8
30039: PUSH
30040: LD_VAR 0 3
30044: PUSH
30045: LD_VAR 0 1
30049: ARRAY
30050: PUSH
30051: LD_INT 2
30053: ARRAY
30054: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30055: LD_ADDR_VAR 0 5
30059: PUSH
30060: LD_VAR 0 3
30064: PUSH
30065: LD_VAR 0 1
30069: ARRAY
30070: PUSH
30071: LD_INT 1
30073: ARRAY
30074: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30075: LD_VAR 0 8
30079: PPUSH
30080: CALL_OW 301
30084: PUSH
30085: LD_VAR 0 5
30089: PUSH
30090: LD_VAR 0 8
30094: PPUSH
30095: CALL_OW 255
30099: NONEQUAL
30100: OR
30101: IFFALSE 30130
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30103: LD_ADDR_EXP 120
30107: PUSH
30108: LD_EXP 120
30112: PPUSH
30113: LD_VAR 0 8
30117: PPUSH
30118: LD_INT 0
30120: PPUSH
30121: CALL_OW 1
30125: ST_TO_ADDR
// exit ;
30126: POP
30127: POP
30128: GO 30661
// end ; x := list [ i ] [ 3 ] ;
30130: LD_ADDR_VAR 0 6
30134: PUSH
30135: LD_VAR 0 3
30139: PUSH
30140: LD_VAR 0 1
30144: ARRAY
30145: PUSH
30146: LD_INT 3
30148: ARRAY
30149: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30150: LD_ADDR_VAR 0 7
30154: PUSH
30155: LD_VAR 0 3
30159: PUSH
30160: LD_VAR 0 1
30164: ARRAY
30165: PUSH
30166: LD_INT 4
30168: ARRAY
30169: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30170: LD_ADDR_VAR 0 9
30174: PUSH
30175: LD_VAR 0 6
30179: PPUSH
30180: LD_VAR 0 7
30184: PPUSH
30185: LD_INT 16
30187: PPUSH
30188: CALL 74930 0 3
30192: ST_TO_ADDR
// if not cratesNearbyPoint then
30193: LD_VAR 0 9
30197: NOT
30198: IFFALSE 30204
// exit ;
30200: POP
30201: POP
30202: GO 30661
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30204: LD_ADDR_VAR 0 4
30208: PUSH
30209: LD_INT 22
30211: PUSH
30212: LD_VAR 0 5
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: LD_INT 60
30226: PUSH
30227: EMPTY
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 91
30236: PUSH
30237: LD_VAR 0 8
30241: PUSH
30242: LD_INT 6
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 25
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 25
30265: PUSH
30266: LD_INT 16
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 69
30288: PUSH
30289: LD_VAR 0 8
30293: PPUSH
30294: CALL_OW 313
30298: PPUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 60
30304: PUSH
30305: EMPTY
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: LD_INT 25
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 25
30327: PUSH
30328: LD_INT 16
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PPUSH
30344: CALL_OW 72
30348: UNION
30349: ST_TO_ADDR
// if tmp then
30350: LD_VAR 0 4
30354: IFFALSE 30434
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30356: LD_ADDR_VAR 0 4
30360: PUSH
30361: LD_VAR 0 4
30365: PPUSH
30366: LD_INT 3
30368: PPUSH
30369: CALL 72899 0 2
30373: ST_TO_ADDR
// for j in tmp do
30374: LD_ADDR_VAR 0 2
30378: PUSH
30379: LD_VAR 0 4
30383: PUSH
30384: FOR_IN
30385: IFFALSE 30428
// begin if IsInUnit ( j ) then
30387: LD_VAR 0 2
30391: PPUSH
30392: CALL_OW 310
30396: IFFALSE 30407
// ComExit ( j ) ;
30398: LD_VAR 0 2
30402: PPUSH
30403: CALL 72982 0 1
// AddComCollect ( j , x , y ) ;
30407: LD_VAR 0 2
30411: PPUSH
30412: LD_VAR 0 6
30416: PPUSH
30417: LD_VAR 0 7
30421: PPUSH
30422: CALL_OW 177
// end ;
30426: GO 30384
30428: POP
30429: POP
// exit ;
30430: POP
30431: POP
30432: GO 30661
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30434: LD_ADDR_VAR 0 4
30438: PUSH
30439: LD_INT 22
30441: PUSH
30442: LD_VAR 0 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 91
30453: PUSH
30454: LD_VAR 0 8
30458: PUSH
30459: LD_INT 8
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 34
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 34
30482: PUSH
30483: LD_INT 51
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 34
30492: PUSH
30493: LD_INT 32
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 34
30502: PUSH
30503: LD_INT 89
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: PPUSH
30522: CALL_OW 69
30526: ST_TO_ADDR
// if tmp then
30527: LD_VAR 0 4
30531: IFFALSE 30657
// begin for j in tmp do
30533: LD_ADDR_VAR 0 2
30537: PUSH
30538: LD_VAR 0 4
30542: PUSH
30543: FOR_IN
30544: IFFALSE 30655
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30546: LD_VAR 0 2
30550: PPUSH
30551: CALL_OW 262
30555: PUSH
30556: LD_INT 3
30558: EQUAL
30559: PUSH
30560: LD_VAR 0 2
30564: PPUSH
30565: CALL_OW 261
30569: PUSH
30570: LD_INT 20
30572: GREATER
30573: OR
30574: PUSH
30575: LD_VAR 0 2
30579: PPUSH
30580: CALL_OW 314
30584: NOT
30585: AND
30586: PUSH
30587: LD_VAR 0 2
30591: PPUSH
30592: CALL_OW 263
30596: PUSH
30597: LD_INT 1
30599: NONEQUAL
30600: PUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 311
30610: OR
30611: AND
30612: IFFALSE 30653
// begin ComCollect ( j , x , y ) ;
30614: LD_VAR 0 2
30618: PPUSH
30619: LD_VAR 0 6
30623: PPUSH
30624: LD_VAR 0 7
30628: PPUSH
30629: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30633: LD_VAR 0 2
30637: PPUSH
30638: LD_VAR 0 8
30642: PPUSH
30643: CALL_OW 172
// exit ;
30647: POP
30648: POP
30649: POP
30650: POP
30651: GO 30661
// end ;
30653: GO 30543
30655: POP
30656: POP
// end ; end ;
30657: GO 30032
30659: POP
30660: POP
// end ; end_of_file
30661: PPOPN 9
30663: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 264
30679: PUSH
30680: LD_INT 91
30682: EQUAL
30683: IFFALSE 30755
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30685: LD_INT 68
30687: PPUSH
30688: LD_VAR 0 1
30692: PPUSH
30693: CALL_OW 255
30697: PPUSH
30698: CALL_OW 321
30702: PUSH
30703: LD_INT 2
30705: EQUAL
30706: IFFALSE 30718
// eff := 70 else
30708: LD_ADDR_VAR 0 4
30712: PUSH
30713: LD_INT 70
30715: ST_TO_ADDR
30716: GO 30726
// eff := 30 ;
30718: LD_ADDR_VAR 0 4
30722: PUSH
30723: LD_INT 30
30725: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30726: LD_VAR 0 1
30730: PPUSH
30731: CALL_OW 250
30735: PPUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 251
30745: PPUSH
30746: LD_VAR 0 4
30750: PPUSH
30751: CALL_OW 495
// end ; end ;
30755: LD_VAR 0 2
30759: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30760: LD_INT 0
30762: PPUSH
// end ;
30763: LD_VAR 0 4
30767: RET
// export function SOS_Command ( cmd ) ; begin
30768: LD_INT 0
30770: PPUSH
// end ;
30771: LD_VAR 0 2
30775: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30776: LD_INT 0
30778: PPUSH
// end ;
30779: LD_VAR 0 6
30783: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
// if not vehicle or not factory then
30788: LD_VAR 0 1
30792: NOT
30793: PUSH
30794: LD_VAR 0 2
30798: NOT
30799: OR
30800: IFFALSE 30804
// exit ;
30802: GO 31035
// if factoryWaypoints >= factory then
30804: LD_EXP 119
30808: PUSH
30809: LD_VAR 0 2
30813: GREATEREQUAL
30814: IFFALSE 31035
// if factoryWaypoints [ factory ] then
30816: LD_EXP 119
30820: PUSH
30821: LD_VAR 0 2
30825: ARRAY
30826: IFFALSE 31035
// begin if GetControl ( vehicle ) = control_manual then
30828: LD_VAR 0 1
30832: PPUSH
30833: CALL_OW 263
30837: PUSH
30838: LD_INT 1
30840: EQUAL
30841: IFFALSE 30922
// begin driver := IsDrivenBy ( vehicle ) ;
30843: LD_ADDR_VAR 0 4
30847: PUSH
30848: LD_VAR 0 1
30852: PPUSH
30853: CALL_OW 311
30857: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30858: LD_VAR 0 4
30862: PPUSH
30863: LD_EXP 119
30867: PUSH
30868: LD_VAR 0 2
30872: ARRAY
30873: PUSH
30874: LD_INT 3
30876: ARRAY
30877: PPUSH
30878: LD_EXP 119
30882: PUSH
30883: LD_VAR 0 2
30887: ARRAY
30888: PUSH
30889: LD_INT 4
30891: ARRAY
30892: PPUSH
30893: CALL_OW 171
// AddComExitVehicle ( driver ) ;
30897: LD_VAR 0 4
30901: PPUSH
30902: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
30906: LD_VAR 0 4
30910: PPUSH
30911: LD_VAR 0 2
30915: PPUSH
30916: CALL_OW 180
// end else
30920: GO 31035
// if GetControl ( vehicle ) = control_remote then
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 263
30931: PUSH
30932: LD_INT 2
30934: EQUAL
30935: IFFALSE 30996
// begin wait ( 0 0$2 ) ;
30937: LD_INT 70
30939: PPUSH
30940: CALL_OW 67
// if Connect ( vehicle ) then
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL 43222 0 1
30953: IFFALSE 30994
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30955: LD_VAR 0 1
30959: PPUSH
30960: LD_EXP 119
30964: PUSH
30965: LD_VAR 0 2
30969: ARRAY
30970: PUSH
30971: LD_INT 3
30973: ARRAY
30974: PPUSH
30975: LD_EXP 119
30979: PUSH
30980: LD_VAR 0 2
30984: ARRAY
30985: PUSH
30986: LD_INT 4
30988: ARRAY
30989: PPUSH
30990: CALL_OW 171
// end else
30994: GO 31035
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_EXP 119
31005: PUSH
31006: LD_VAR 0 2
31010: ARRAY
31011: PUSH
31012: LD_INT 3
31014: ARRAY
31015: PPUSH
31016: LD_EXP 119
31020: PUSH
31021: LD_VAR 0 2
31025: ARRAY
31026: PUSH
31027: LD_INT 4
31029: ARRAY
31030: PPUSH
31031: CALL_OW 171
// end ; end ;
31035: LD_VAR 0 3
31039: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31040: LD_INT 0
31042: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31043: LD_VAR 0 1
31047: PUSH
31048: LD_INT 250
31050: EQUAL
31051: PUSH
31052: LD_VAR 0 2
31056: PPUSH
31057: CALL_OW 264
31061: PUSH
31062: LD_INT 81
31064: EQUAL
31065: AND
31066: IFFALSE 31087
// MinerPlaceMine ( unit , x , y ) ;
31068: LD_VAR 0 2
31072: PPUSH
31073: LD_VAR 0 4
31077: PPUSH
31078: LD_VAR 0 5
31082: PPUSH
31083: CALL 33472 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 251
31094: EQUAL
31095: PUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: CALL_OW 264
31105: PUSH
31106: LD_INT 81
31108: EQUAL
31109: AND
31110: IFFALSE 31131
// MinerDetonateMine ( unit , x , y ) ;
31112: LD_VAR 0 2
31116: PPUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_VAR 0 5
31126: PPUSH
31127: CALL 33747 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31131: LD_VAR 0 1
31135: PUSH
31136: LD_INT 252
31138: EQUAL
31139: PUSH
31140: LD_VAR 0 2
31144: PPUSH
31145: CALL_OW 264
31149: PUSH
31150: LD_INT 81
31152: EQUAL
31153: AND
31154: IFFALSE 31175
// MinerCreateMinefield ( unit , x , y ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 4
31165: PPUSH
31166: LD_VAR 0 5
31170: PPUSH
31171: CALL 34164 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31175: LD_VAR 0 1
31179: PUSH
31180: LD_INT 253
31182: EQUAL
31183: PUSH
31184: LD_VAR 0 2
31188: PPUSH
31189: CALL_OW 257
31193: PUSH
31194: LD_INT 5
31196: EQUAL
31197: AND
31198: IFFALSE 31219
// ComBinocular ( unit , x , y ) ;
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 4
31209: PPUSH
31210: LD_VAR 0 5
31214: PPUSH
31215: CALL 34533 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31219: LD_VAR 0 1
31223: PUSH
31224: LD_INT 254
31226: EQUAL
31227: PUSH
31228: LD_VAR 0 2
31232: PPUSH
31233: CALL_OW 264
31237: PUSH
31238: LD_INT 99
31240: EQUAL
31241: AND
31242: PUSH
31243: LD_VAR 0 3
31247: PPUSH
31248: CALL_OW 263
31252: PUSH
31253: LD_INT 3
31255: EQUAL
31256: AND
31257: IFFALSE 31273
// HackDestroyVehicle ( unit , selectedUnit ) ;
31259: LD_VAR 0 2
31263: PPUSH
31264: LD_VAR 0 3
31268: PPUSH
31269: CALL 32836 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31273: LD_VAR 0 1
31277: PUSH
31278: LD_INT 255
31280: EQUAL
31281: PUSH
31282: LD_VAR 0 2
31286: PPUSH
31287: CALL_OW 264
31291: PUSH
31292: LD_INT 14
31294: PUSH
31295: LD_INT 53
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: IN
31302: AND
31303: PUSH
31304: LD_VAR 0 4
31308: PPUSH
31309: LD_VAR 0 5
31313: PPUSH
31314: CALL_OW 488
31318: AND
31319: IFFALSE 31343
// CutTreeXYR ( unit , x , y , 12 ) ;
31321: LD_VAR 0 2
31325: PPUSH
31326: LD_VAR 0 4
31330: PPUSH
31331: LD_VAR 0 5
31335: PPUSH
31336: LD_INT 12
31338: PPUSH
31339: CALL 31406 0 4
// if cmd = 256 then
31343: LD_VAR 0 1
31347: PUSH
31348: LD_INT 256
31350: EQUAL
31351: IFFALSE 31372
// SetFactoryWaypoint ( unit , x , y ) ;
31353: LD_VAR 0 2
31357: PPUSH
31358: LD_VAR 0 4
31362: PPUSH
31363: LD_VAR 0 5
31367: PPUSH
31368: CALL 29353 0 3
// if cmd = 257 then
31372: LD_VAR 0 1
31376: PUSH
31377: LD_INT 257
31379: EQUAL
31380: IFFALSE 31401
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31382: LD_VAR 0 2
31386: PPUSH
31387: LD_VAR 0 4
31391: PPUSH
31392: LD_VAR 0 5
31396: PPUSH
31397: CALL 29715 0 3
// end ;
31401: LD_VAR 0 6
31405: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31406: LD_INT 0
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31417: LD_VAR 0 1
31421: NOT
31422: PUSH
31423: LD_VAR 0 2
31427: PPUSH
31428: LD_VAR 0 3
31432: PPUSH
31433: CALL_OW 488
31437: NOT
31438: OR
31439: PUSH
31440: LD_VAR 0 4
31444: NOT
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 31790
// list := [ ] ;
31450: LD_ADDR_VAR 0 13
31454: PUSH
31455: EMPTY
31456: ST_TO_ADDR
// if x - r < 0 then
31457: LD_VAR 0 2
31461: PUSH
31462: LD_VAR 0 4
31466: MINUS
31467: PUSH
31468: LD_INT 0
31470: LESS
31471: IFFALSE 31483
// min_x := 0 else
31473: LD_ADDR_VAR 0 7
31477: PUSH
31478: LD_INT 0
31480: ST_TO_ADDR
31481: GO 31499
// min_x := x - r ;
31483: LD_ADDR_VAR 0 7
31487: PUSH
31488: LD_VAR 0 2
31492: PUSH
31493: LD_VAR 0 4
31497: MINUS
31498: ST_TO_ADDR
// if y - r < 0 then
31499: LD_VAR 0 3
31503: PUSH
31504: LD_VAR 0 4
31508: MINUS
31509: PUSH
31510: LD_INT 0
31512: LESS
31513: IFFALSE 31525
// min_y := 0 else
31515: LD_ADDR_VAR 0 8
31519: PUSH
31520: LD_INT 0
31522: ST_TO_ADDR
31523: GO 31541
// min_y := y - r ;
31525: LD_ADDR_VAR 0 8
31529: PUSH
31530: LD_VAR 0 3
31534: PUSH
31535: LD_VAR 0 4
31539: MINUS
31540: ST_TO_ADDR
// max_x := x + r ;
31541: LD_ADDR_VAR 0 9
31545: PUSH
31546: LD_VAR 0 2
31550: PUSH
31551: LD_VAR 0 4
31555: PLUS
31556: ST_TO_ADDR
// max_y := y + r ;
31557: LD_ADDR_VAR 0 10
31561: PUSH
31562: LD_VAR 0 3
31566: PUSH
31567: LD_VAR 0 4
31571: PLUS
31572: ST_TO_ADDR
// for _x = min_x to max_x do
31573: LD_ADDR_VAR 0 11
31577: PUSH
31578: DOUBLE
31579: LD_VAR 0 7
31583: DEC
31584: ST_TO_ADDR
31585: LD_VAR 0 9
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31708
// for _y = min_y to max_y do
31593: LD_ADDR_VAR 0 12
31597: PUSH
31598: DOUBLE
31599: LD_VAR 0 8
31603: DEC
31604: ST_TO_ADDR
31605: LD_VAR 0 10
31609: PUSH
31610: FOR_TO
31611: IFFALSE 31704
// begin if not ValidHex ( _x , _y ) then
31613: LD_VAR 0 11
31617: PPUSH
31618: LD_VAR 0 12
31622: PPUSH
31623: CALL_OW 488
31627: NOT
31628: IFFALSE 31632
// continue ;
31630: GO 31610
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31632: LD_VAR 0 11
31636: PPUSH
31637: LD_VAR 0 12
31641: PPUSH
31642: CALL_OW 351
31646: PUSH
31647: LD_VAR 0 11
31651: PPUSH
31652: LD_VAR 0 12
31656: PPUSH
31657: CALL_OW 554
31661: AND
31662: IFFALSE 31702
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31664: LD_ADDR_VAR 0 13
31668: PUSH
31669: LD_VAR 0 13
31673: PPUSH
31674: LD_VAR 0 13
31678: PUSH
31679: LD_INT 1
31681: PLUS
31682: PPUSH
31683: LD_VAR 0 11
31687: PUSH
31688: LD_VAR 0 12
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PPUSH
31697: CALL_OW 2
31701: ST_TO_ADDR
// end ;
31702: GO 31610
31704: POP
31705: POP
31706: GO 31590
31708: POP
31709: POP
// if not list then
31710: LD_VAR 0 13
31714: NOT
31715: IFFALSE 31719
// exit ;
31717: GO 31790
// for i in list do
31719: LD_ADDR_VAR 0 6
31723: PUSH
31724: LD_VAR 0 13
31728: PUSH
31729: FOR_IN
31730: IFFALSE 31788
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_STRING M
31739: PUSH
31740: LD_VAR 0 6
31744: PUSH
31745: LD_INT 1
31747: ARRAY
31748: PUSH
31749: LD_VAR 0 6
31753: PUSH
31754: LD_INT 2
31756: ARRAY
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: PPUSH
31782: CALL_OW 447
31786: GO 31729
31788: POP
31789: POP
// end ;
31790: LD_VAR 0 5
31794: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31795: LD_EXP 122
31799: NOT
31800: IFFALSE 31850
31802: GO 31804
31804: DISABLE
// begin initHack := true ;
31805: LD_ADDR_EXP 122
31809: PUSH
31810: LD_INT 1
31812: ST_TO_ADDR
// hackTanks := [ ] ;
31813: LD_ADDR_EXP 123
31817: PUSH
31818: EMPTY
31819: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31820: LD_ADDR_EXP 124
31824: PUSH
31825: EMPTY
31826: ST_TO_ADDR
// hackLimit := 3 ;
31827: LD_ADDR_EXP 125
31831: PUSH
31832: LD_INT 3
31834: ST_TO_ADDR
// hackDist := 12 ;
31835: LD_ADDR_EXP 126
31839: PUSH
31840: LD_INT 12
31842: ST_TO_ADDR
// hackCounter := [ ] ;
31843: LD_ADDR_EXP 127
31847: PUSH
31848: EMPTY
31849: ST_TO_ADDR
// end ;
31850: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31851: LD_EXP 122
31855: PUSH
31856: LD_INT 34
31858: PUSH
31859: LD_INT 99
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 69
31870: AND
31871: IFFALSE 32124
31873: GO 31875
31875: DISABLE
31876: LD_INT 0
31878: PPUSH
31879: PPUSH
// begin enable ;
31880: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31881: LD_ADDR_VAR 0 1
31885: PUSH
31886: LD_INT 34
31888: PUSH
31889: LD_INT 99
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PPUSH
31896: CALL_OW 69
31900: PUSH
31901: FOR_IN
31902: IFFALSE 32122
// begin if not i in hackTanks then
31904: LD_VAR 0 1
31908: PUSH
31909: LD_EXP 123
31913: IN
31914: NOT
31915: IFFALSE 31998
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31917: LD_ADDR_EXP 123
31921: PUSH
31922: LD_EXP 123
31926: PPUSH
31927: LD_EXP 123
31931: PUSH
31932: LD_INT 1
31934: PLUS
31935: PPUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 1
31945: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31946: LD_ADDR_EXP 124
31950: PUSH
31951: LD_EXP 124
31955: PPUSH
31956: LD_EXP 124
31960: PUSH
31961: LD_INT 1
31963: PLUS
31964: PPUSH
31965: EMPTY
31966: PPUSH
31967: CALL_OW 1
31971: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31972: LD_ADDR_EXP 127
31976: PUSH
31977: LD_EXP 127
31981: PPUSH
31982: LD_EXP 127
31986: PUSH
31987: LD_INT 1
31989: PLUS
31990: PPUSH
31991: EMPTY
31992: PPUSH
31993: CALL_OW 1
31997: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 302
32007: NOT
32008: IFFALSE 32021
// begin HackUnlinkAll ( i ) ;
32010: LD_VAR 0 1
32014: PPUSH
32015: CALL 32127 0 1
// continue ;
32019: GO 31901
// end ; HackCheckCapturedStatus ( i ) ;
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL 32570 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32030: LD_ADDR_VAR 0 2
32034: PUSH
32035: LD_INT 81
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 255
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 33
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 91
32064: PUSH
32065: LD_VAR 0 1
32069: PUSH
32070: LD_EXP 126
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 50
32082: PUSH
32083: EMPTY
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: PPUSH
32092: CALL_OW 69
32096: ST_TO_ADDR
// if not tmp then
32097: LD_VAR 0 2
32101: NOT
32102: IFFALSE 32106
// continue ;
32104: GO 31901
// HackLink ( i , tmp ) ;
32106: LD_VAR 0 1
32110: PPUSH
32111: LD_VAR 0 2
32115: PPUSH
32116: CALL 32263 0 2
// end ;
32120: GO 31901
32122: POP
32123: POP
// end ;
32124: PPOPN 2
32126: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32127: LD_INT 0
32129: PPUSH
32130: PPUSH
32131: PPUSH
// if not hack in hackTanks then
32132: LD_VAR 0 1
32136: PUSH
32137: LD_EXP 123
32141: IN
32142: NOT
32143: IFFALSE 32147
// exit ;
32145: GO 32258
// index := GetElementIndex ( hackTanks , hack ) ;
32147: LD_ADDR_VAR 0 4
32151: PUSH
32152: LD_EXP 123
32156: PPUSH
32157: LD_VAR 0 1
32161: PPUSH
32162: CALL 40038 0 2
32166: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32167: LD_EXP 124
32171: PUSH
32172: LD_VAR 0 4
32176: ARRAY
32177: IFFALSE 32258
// begin for i in hackTanksCaptured [ index ] do
32179: LD_ADDR_VAR 0 3
32183: PUSH
32184: LD_EXP 124
32188: PUSH
32189: LD_VAR 0 4
32193: ARRAY
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32222
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32198: LD_VAR 0 3
32202: PUSH
32203: LD_INT 1
32205: ARRAY
32206: PPUSH
32207: LD_VAR 0 3
32211: PUSH
32212: LD_INT 2
32214: ARRAY
32215: PPUSH
32216: CALL_OW 235
32220: GO 32195
32222: POP
32223: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32224: LD_ADDR_EXP 124
32228: PUSH
32229: LD_EXP 124
32233: PPUSH
32234: LD_VAR 0 4
32238: PPUSH
32239: EMPTY
32240: PPUSH
32241: CALL_OW 1
32245: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32246: LD_VAR 0 1
32250: PPUSH
32251: LD_INT 0
32253: PPUSH
32254: CALL_OW 505
// end ; end ;
32258: LD_VAR 0 2
32262: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32263: LD_INT 0
32265: PPUSH
32266: PPUSH
32267: PPUSH
// if not hack in hackTanks or not vehicles then
32268: LD_VAR 0 1
32272: PUSH
32273: LD_EXP 123
32277: IN
32278: NOT
32279: PUSH
32280: LD_VAR 0 2
32284: NOT
32285: OR
32286: IFFALSE 32290
// exit ;
32288: GO 32565
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32290: LD_ADDR_VAR 0 2
32294: PUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: LD_VAR 0 2
32304: PPUSH
32305: LD_INT 1
32307: PPUSH
32308: LD_INT 1
32310: PPUSH
32311: CALL 40688 0 4
32315: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32316: LD_ADDR_VAR 0 5
32320: PUSH
32321: LD_EXP 123
32325: PPUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL 40038 0 2
32335: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32336: LD_EXP 124
32340: PUSH
32341: LD_VAR 0 5
32345: ARRAY
32346: PUSH
32347: LD_EXP 125
32351: LESS
32352: IFFALSE 32541
// begin for i := 1 to vehicles do
32354: LD_ADDR_VAR 0 4
32358: PUSH
32359: DOUBLE
32360: LD_INT 1
32362: DEC
32363: ST_TO_ADDR
32364: LD_VAR 0 2
32368: PUSH
32369: FOR_TO
32370: IFFALSE 32539
// begin if hackTanksCaptured [ index ] = hackLimit then
32372: LD_EXP 124
32376: PUSH
32377: LD_VAR 0 5
32381: ARRAY
32382: PUSH
32383: LD_EXP 125
32387: EQUAL
32388: IFFALSE 32392
// break ;
32390: GO 32539
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32392: LD_ADDR_EXP 127
32396: PUSH
32397: LD_EXP 127
32401: PPUSH
32402: LD_VAR 0 5
32406: PPUSH
32407: LD_EXP 127
32411: PUSH
32412: LD_VAR 0 5
32416: ARRAY
32417: PUSH
32418: LD_INT 1
32420: PLUS
32421: PPUSH
32422: CALL_OW 1
32426: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32427: LD_ADDR_EXP 124
32431: PUSH
32432: LD_EXP 124
32436: PPUSH
32437: LD_VAR 0 5
32441: PUSH
32442: LD_EXP 124
32446: PUSH
32447: LD_VAR 0 5
32451: ARRAY
32452: PUSH
32453: LD_INT 1
32455: PLUS
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PPUSH
32461: LD_VAR 0 2
32465: PUSH
32466: LD_VAR 0 4
32470: ARRAY
32471: PUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_VAR 0 4
32481: ARRAY
32482: PPUSH
32483: CALL_OW 255
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PPUSH
32492: CALL 40253 0 3
32496: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32497: LD_VAR 0 2
32501: PUSH
32502: LD_VAR 0 4
32506: ARRAY
32507: PPUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 255
32517: PPUSH
32518: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32522: LD_VAR 0 2
32526: PUSH
32527: LD_VAR 0 4
32531: ARRAY
32532: PPUSH
32533: CALL_OW 141
// end ;
32537: GO 32369
32539: POP
32540: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32541: LD_VAR 0 1
32545: PPUSH
32546: LD_EXP 124
32550: PUSH
32551: LD_VAR 0 5
32555: ARRAY
32556: PUSH
32557: LD_INT 0
32559: PLUS
32560: PPUSH
32561: CALL_OW 505
// end ;
32565: LD_VAR 0 3
32569: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
// if not hack in hackTanks then
32576: LD_VAR 0 1
32580: PUSH
32581: LD_EXP 123
32585: IN
32586: NOT
32587: IFFALSE 32591
// exit ;
32589: GO 32831
// index := GetElementIndex ( hackTanks , hack ) ;
32591: LD_ADDR_VAR 0 4
32595: PUSH
32596: LD_EXP 123
32600: PPUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: CALL 40038 0 2
32610: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: DOUBLE
32617: LD_EXP 124
32621: PUSH
32622: LD_VAR 0 4
32626: ARRAY
32627: INC
32628: ST_TO_ADDR
32629: LD_INT 1
32631: PUSH
32632: FOR_DOWNTO
32633: IFFALSE 32805
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32635: LD_ADDR_VAR 0 5
32639: PUSH
32640: LD_EXP 124
32644: PUSH
32645: LD_VAR 0 4
32649: ARRAY
32650: PUSH
32651: LD_VAR 0 3
32655: ARRAY
32656: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32657: LD_VAR 0 5
32661: PUSH
32662: LD_INT 1
32664: ARRAY
32665: PPUSH
32666: CALL_OW 302
32670: NOT
32671: PUSH
32672: LD_VAR 0 5
32676: PUSH
32677: LD_INT 1
32679: ARRAY
32680: PPUSH
32681: CALL_OW 255
32685: PUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 255
32695: NONEQUAL
32696: OR
32697: IFFALSE 32803
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32699: LD_VAR 0 5
32703: PUSH
32704: LD_INT 1
32706: ARRAY
32707: PPUSH
32708: CALL_OW 305
32712: PUSH
32713: LD_VAR 0 5
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: CALL_OW 255
32726: PUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 255
32736: EQUAL
32737: AND
32738: IFFALSE 32762
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32740: LD_VAR 0 5
32744: PUSH
32745: LD_INT 1
32747: ARRAY
32748: PPUSH
32749: LD_VAR 0 5
32753: PUSH
32754: LD_INT 2
32756: ARRAY
32757: PPUSH
32758: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32762: LD_ADDR_EXP 124
32766: PUSH
32767: LD_EXP 124
32771: PPUSH
32772: LD_VAR 0 4
32776: PPUSH
32777: LD_EXP 124
32781: PUSH
32782: LD_VAR 0 4
32786: ARRAY
32787: PPUSH
32788: LD_VAR 0 3
32792: PPUSH
32793: CALL_OW 3
32797: PPUSH
32798: CALL_OW 1
32802: ST_TO_ADDR
// end ; end ;
32803: GO 32632
32805: POP
32806: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32807: LD_VAR 0 1
32811: PPUSH
32812: LD_EXP 124
32816: PUSH
32817: LD_VAR 0 4
32821: ARRAY
32822: PUSH
32823: LD_INT 0
32825: PLUS
32826: PPUSH
32827: CALL_OW 505
// end ;
32831: LD_VAR 0 2
32835: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32836: LD_INT 0
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
// if not hack in hackTanks then
32842: LD_VAR 0 1
32846: PUSH
32847: LD_EXP 123
32851: IN
32852: NOT
32853: IFFALSE 32857
// exit ;
32855: GO 32942
// index := GetElementIndex ( hackTanks , hack ) ;
32857: LD_ADDR_VAR 0 5
32861: PUSH
32862: LD_EXP 123
32866: PPUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL 40038 0 2
32876: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32877: LD_ADDR_VAR 0 4
32881: PUSH
32882: DOUBLE
32883: LD_INT 1
32885: DEC
32886: ST_TO_ADDR
32887: LD_EXP 124
32891: PUSH
32892: LD_VAR 0 5
32896: ARRAY
32897: PUSH
32898: FOR_TO
32899: IFFALSE 32940
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32901: LD_EXP 124
32905: PUSH
32906: LD_VAR 0 5
32910: ARRAY
32911: PUSH
32912: LD_VAR 0 4
32916: ARRAY
32917: PUSH
32918: LD_INT 1
32920: ARRAY
32921: PUSH
32922: LD_VAR 0 2
32926: EQUAL
32927: IFFALSE 32938
// KillUnit ( vehicle ) ;
32929: LD_VAR 0 2
32933: PPUSH
32934: CALL_OW 66
32938: GO 32898
32940: POP
32941: POP
// end ;
32942: LD_VAR 0 3
32946: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32947: LD_EXP 128
32951: NOT
32952: IFFALSE 32987
32954: GO 32956
32956: DISABLE
// begin initMiner := true ;
32957: LD_ADDR_EXP 128
32961: PUSH
32962: LD_INT 1
32964: ST_TO_ADDR
// minersList := [ ] ;
32965: LD_ADDR_EXP 129
32969: PUSH
32970: EMPTY
32971: ST_TO_ADDR
// minerMinesList := [ ] ;
32972: LD_ADDR_EXP 130
32976: PUSH
32977: EMPTY
32978: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32979: LD_ADDR_EXP 131
32983: PUSH
32984: LD_INT 5
32986: ST_TO_ADDR
// end ;
32987: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32988: LD_EXP 128
32992: PUSH
32993: LD_INT 34
32995: PUSH
32996: LD_INT 81
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PPUSH
33003: CALL_OW 69
33007: AND
33008: IFFALSE 33469
33010: GO 33012
33012: DISABLE
33013: LD_INT 0
33015: PPUSH
33016: PPUSH
33017: PPUSH
33018: PPUSH
// begin enable ;
33019: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33020: LD_ADDR_VAR 0 1
33024: PUSH
33025: LD_INT 34
33027: PUSH
33028: LD_INT 81
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PPUSH
33035: CALL_OW 69
33039: PUSH
33040: FOR_IN
33041: IFFALSE 33113
// begin if not i in minersList then
33043: LD_VAR 0 1
33047: PUSH
33048: LD_EXP 129
33052: IN
33053: NOT
33054: IFFALSE 33111
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33056: LD_ADDR_EXP 129
33060: PUSH
33061: LD_EXP 129
33065: PPUSH
33066: LD_EXP 129
33070: PUSH
33071: LD_INT 1
33073: PLUS
33074: PPUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: CALL_OW 1
33084: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33085: LD_ADDR_EXP 130
33089: PUSH
33090: LD_EXP 130
33094: PPUSH
33095: LD_EXP 130
33099: PUSH
33100: LD_INT 1
33102: PLUS
33103: PPUSH
33104: EMPTY
33105: PPUSH
33106: CALL_OW 1
33110: ST_TO_ADDR
// end end ;
33111: GO 33040
33113: POP
33114: POP
// for i := minerMinesList downto 1 do
33115: LD_ADDR_VAR 0 1
33119: PUSH
33120: DOUBLE
33121: LD_EXP 130
33125: INC
33126: ST_TO_ADDR
33127: LD_INT 1
33129: PUSH
33130: FOR_DOWNTO
33131: IFFALSE 33467
// begin if IsLive ( minersList [ i ] ) then
33133: LD_EXP 129
33137: PUSH
33138: LD_VAR 0 1
33142: ARRAY
33143: PPUSH
33144: CALL_OW 300
33148: IFFALSE 33176
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33150: LD_EXP 129
33154: PUSH
33155: LD_VAR 0 1
33159: ARRAY
33160: PPUSH
33161: LD_EXP 130
33165: PUSH
33166: LD_VAR 0 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 505
// if not minerMinesList [ i ] then
33176: LD_EXP 130
33180: PUSH
33181: LD_VAR 0 1
33185: ARRAY
33186: NOT
33187: IFFALSE 33191
// continue ;
33189: GO 33130
// for j := minerMinesList [ i ] downto 1 do
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: DOUBLE
33197: LD_EXP 130
33201: PUSH
33202: LD_VAR 0 1
33206: ARRAY
33207: INC
33208: ST_TO_ADDR
33209: LD_INT 1
33211: PUSH
33212: FOR_DOWNTO
33213: IFFALSE 33463
// begin side := GetSide ( minersList [ i ] ) ;
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_EXP 129
33224: PUSH
33225: LD_VAR 0 1
33229: ARRAY
33230: PPUSH
33231: CALL_OW 255
33235: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33236: LD_ADDR_VAR 0 4
33240: PUSH
33241: LD_EXP 130
33245: PUSH
33246: LD_VAR 0 1
33250: ARRAY
33251: PUSH
33252: LD_VAR 0 2
33256: ARRAY
33257: PUSH
33258: LD_INT 1
33260: ARRAY
33261: PPUSH
33262: LD_EXP 130
33266: PUSH
33267: LD_VAR 0 1
33271: ARRAY
33272: PUSH
33273: LD_VAR 0 2
33277: ARRAY
33278: PUSH
33279: LD_INT 2
33281: ARRAY
33282: PPUSH
33283: CALL_OW 428
33287: ST_TO_ADDR
// if not tmp then
33288: LD_VAR 0 4
33292: NOT
33293: IFFALSE 33297
// continue ;
33295: GO 33212
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33297: LD_VAR 0 4
33301: PUSH
33302: LD_INT 81
33304: PUSH
33305: LD_VAR 0 3
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: IN
33319: PUSH
33320: LD_EXP 130
33324: PUSH
33325: LD_VAR 0 1
33329: ARRAY
33330: PUSH
33331: LD_VAR 0 2
33335: ARRAY
33336: PUSH
33337: LD_INT 1
33339: ARRAY
33340: PPUSH
33341: LD_EXP 130
33345: PUSH
33346: LD_VAR 0 1
33350: ARRAY
33351: PUSH
33352: LD_VAR 0 2
33356: ARRAY
33357: PUSH
33358: LD_INT 2
33360: ARRAY
33361: PPUSH
33362: CALL_OW 458
33366: AND
33367: IFFALSE 33461
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33369: LD_EXP 130
33373: PUSH
33374: LD_VAR 0 1
33378: ARRAY
33379: PUSH
33380: LD_VAR 0 2
33384: ARRAY
33385: PUSH
33386: LD_INT 1
33388: ARRAY
33389: PPUSH
33390: LD_EXP 130
33394: PUSH
33395: LD_VAR 0 1
33399: ARRAY
33400: PUSH
33401: LD_VAR 0 2
33405: ARRAY
33406: PUSH
33407: LD_INT 2
33409: ARRAY
33410: PPUSH
33411: LD_VAR 0 3
33415: PPUSH
33416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33420: LD_ADDR_EXP 130
33424: PUSH
33425: LD_EXP 130
33429: PPUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: LD_EXP 130
33439: PUSH
33440: LD_VAR 0 1
33444: ARRAY
33445: PPUSH
33446: LD_VAR 0 2
33450: PPUSH
33451: CALL_OW 3
33455: PPUSH
33456: CALL_OW 1
33460: ST_TO_ADDR
// end ; end ;
33461: GO 33212
33463: POP
33464: POP
// end ;
33465: GO 33130
33467: POP
33468: POP
// end ;
33469: PPOPN 4
33471: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
// result := false ;
33476: LD_ADDR_VAR 0 4
33480: PUSH
33481: LD_INT 0
33483: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 264
33493: PUSH
33494: LD_INT 81
33496: EQUAL
33497: NOT
33498: IFFALSE 33502
// exit ;
33500: GO 33742
// index := GetElementIndex ( minersList , unit ) ;
33502: LD_ADDR_VAR 0 5
33506: PUSH
33507: LD_EXP 129
33511: PPUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL 40038 0 2
33521: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33522: LD_EXP 130
33526: PUSH
33527: LD_VAR 0 5
33531: ARRAY
33532: PUSH
33533: LD_EXP 131
33537: GREATEREQUAL
33538: IFFALSE 33542
// exit ;
33540: GO 33742
// ComMoveXY ( unit , x , y ) ;
33542: LD_VAR 0 1
33546: PPUSH
33547: LD_VAR 0 2
33551: PPUSH
33552: LD_VAR 0 3
33556: PPUSH
33557: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33561: LD_INT 35
33563: PPUSH
33564: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33568: LD_VAR 0 1
33572: PPUSH
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 3
33582: PPUSH
33583: CALL 71393 0 3
33587: NOT
33588: PUSH
33589: LD_VAR 0 1
33593: PPUSH
33594: CALL_OW 314
33598: AND
33599: IFFALSE 33603
// exit ;
33601: GO 33742
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33603: LD_VAR 0 2
33607: PPUSH
33608: LD_VAR 0 3
33612: PPUSH
33613: CALL_OW 428
33617: PUSH
33618: LD_VAR 0 1
33622: EQUAL
33623: PUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL_OW 314
33633: NOT
33634: AND
33635: IFFALSE 33561
// PlaySoundXY ( x , y , PlantMine ) ;
33637: LD_VAR 0 2
33641: PPUSH
33642: LD_VAR 0 3
33646: PPUSH
33647: LD_STRING PlantMine
33649: PPUSH
33650: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33654: LD_VAR 0 2
33658: PPUSH
33659: LD_VAR 0 3
33663: PPUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 255
33673: PPUSH
33674: LD_INT 0
33676: PPUSH
33677: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33681: LD_ADDR_EXP 130
33685: PUSH
33686: LD_EXP 130
33690: PPUSH
33691: LD_VAR 0 5
33695: PUSH
33696: LD_EXP 130
33700: PUSH
33701: LD_VAR 0 5
33705: ARRAY
33706: PUSH
33707: LD_INT 1
33709: PLUS
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PPUSH
33715: LD_VAR 0 2
33719: PUSH
33720: LD_VAR 0 3
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL 40253 0 3
33733: ST_TO_ADDR
// result := true ;
33734: LD_ADDR_VAR 0 4
33738: PUSH
33739: LD_INT 1
33741: ST_TO_ADDR
// end ;
33742: LD_VAR 0 4
33746: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
33751: PPUSH
// if not unit in minersList then
33752: LD_VAR 0 1
33756: PUSH
33757: LD_EXP 129
33761: IN
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 34159
// index := GetElementIndex ( minersList , unit ) ;
33767: LD_ADDR_VAR 0 6
33771: PUSH
33772: LD_EXP 129
33776: PPUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL 40038 0 2
33786: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33787: LD_ADDR_VAR 0 5
33791: PUSH
33792: DOUBLE
33793: LD_EXP 130
33797: PUSH
33798: LD_VAR 0 6
33802: ARRAY
33803: INC
33804: ST_TO_ADDR
33805: LD_INT 1
33807: PUSH
33808: FOR_DOWNTO
33809: IFFALSE 33970
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33811: LD_EXP 130
33815: PUSH
33816: LD_VAR 0 6
33820: ARRAY
33821: PUSH
33822: LD_VAR 0 5
33826: ARRAY
33827: PUSH
33828: LD_INT 1
33830: ARRAY
33831: PUSH
33832: LD_VAR 0 2
33836: EQUAL
33837: PUSH
33838: LD_EXP 130
33842: PUSH
33843: LD_VAR 0 6
33847: ARRAY
33848: PUSH
33849: LD_VAR 0 5
33853: ARRAY
33854: PUSH
33855: LD_INT 2
33857: ARRAY
33858: PUSH
33859: LD_VAR 0 3
33863: EQUAL
33864: AND
33865: IFFALSE 33968
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33867: LD_EXP 130
33871: PUSH
33872: LD_VAR 0 6
33876: ARRAY
33877: PUSH
33878: LD_VAR 0 5
33882: ARRAY
33883: PUSH
33884: LD_INT 1
33886: ARRAY
33887: PPUSH
33888: LD_EXP 130
33892: PUSH
33893: LD_VAR 0 6
33897: ARRAY
33898: PUSH
33899: LD_VAR 0 5
33903: ARRAY
33904: PUSH
33905: LD_INT 2
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 255
33918: PPUSH
33919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33923: LD_ADDR_EXP 130
33927: PUSH
33928: LD_EXP 130
33932: PPUSH
33933: LD_VAR 0 6
33937: PPUSH
33938: LD_EXP 130
33942: PUSH
33943: LD_VAR 0 6
33947: ARRAY
33948: PPUSH
33949: LD_VAR 0 5
33953: PPUSH
33954: CALL_OW 3
33958: PPUSH
33959: CALL_OW 1
33963: ST_TO_ADDR
// exit ;
33964: POP
33965: POP
33966: GO 34159
// end ; end ;
33968: GO 33808
33970: POP
33971: POP
// for i := minerMinesList [ index ] downto 1 do
33972: LD_ADDR_VAR 0 5
33976: PUSH
33977: DOUBLE
33978: LD_EXP 130
33982: PUSH
33983: LD_VAR 0 6
33987: ARRAY
33988: INC
33989: ST_TO_ADDR
33990: LD_INT 1
33992: PUSH
33993: FOR_DOWNTO
33994: IFFALSE 34157
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33996: LD_EXP 130
34000: PUSH
34001: LD_VAR 0 6
34005: ARRAY
34006: PUSH
34007: LD_VAR 0 5
34011: ARRAY
34012: PUSH
34013: LD_INT 1
34015: ARRAY
34016: PPUSH
34017: LD_EXP 130
34021: PUSH
34022: LD_VAR 0 6
34026: ARRAY
34027: PUSH
34028: LD_VAR 0 5
34032: ARRAY
34033: PUSH
34034: LD_INT 2
34036: ARRAY
34037: PPUSH
34038: LD_VAR 0 2
34042: PPUSH
34043: LD_VAR 0 3
34047: PPUSH
34048: CALL_OW 298
34052: PUSH
34053: LD_INT 6
34055: LESS
34056: IFFALSE 34155
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34058: LD_EXP 130
34062: PUSH
34063: LD_VAR 0 6
34067: ARRAY
34068: PUSH
34069: LD_VAR 0 5
34073: ARRAY
34074: PUSH
34075: LD_INT 1
34077: ARRAY
34078: PPUSH
34079: LD_EXP 130
34083: PUSH
34084: LD_VAR 0 6
34088: ARRAY
34089: PUSH
34090: LD_VAR 0 5
34094: ARRAY
34095: PUSH
34096: LD_INT 2
34098: ARRAY
34099: PPUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: CALL_OW 255
34109: PPUSH
34110: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34114: LD_ADDR_EXP 130
34118: PUSH
34119: LD_EXP 130
34123: PPUSH
34124: LD_VAR 0 6
34128: PPUSH
34129: LD_EXP 130
34133: PUSH
34134: LD_VAR 0 6
34138: ARRAY
34139: PPUSH
34140: LD_VAR 0 5
34144: PPUSH
34145: CALL_OW 3
34149: PPUSH
34150: CALL_OW 1
34154: ST_TO_ADDR
// end ; end ;
34155: GO 33993
34157: POP
34158: POP
// end ;
34159: LD_VAR 0 4
34163: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34164: LD_INT 0
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34175: LD_VAR 0 1
34179: PPUSH
34180: CALL_OW 264
34184: PUSH
34185: LD_INT 81
34187: EQUAL
34188: NOT
34189: PUSH
34190: LD_VAR 0 1
34194: PUSH
34195: LD_EXP 129
34199: IN
34200: NOT
34201: OR
34202: IFFALSE 34206
// exit ;
34204: GO 34528
// index := GetElementIndex ( minersList , unit ) ;
34206: LD_ADDR_VAR 0 6
34210: PUSH
34211: LD_EXP 129
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL 40038 0 2
34225: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34226: LD_ADDR_VAR 0 8
34230: PUSH
34231: LD_EXP 131
34235: PUSH
34236: LD_EXP 130
34240: PUSH
34241: LD_VAR 0 6
34245: ARRAY
34246: MINUS
34247: ST_TO_ADDR
// if not minesFreeAmount then
34248: LD_VAR 0 8
34252: NOT
34253: IFFALSE 34257
// exit ;
34255: GO 34528
// tmp := [ ] ;
34257: LD_ADDR_VAR 0 7
34261: PUSH
34262: EMPTY
34263: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34264: LD_ADDR_VAR 0 5
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 8
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34475
// begin _d := rand ( 0 , 5 ) ;
34282: LD_ADDR_VAR 0 11
34286: PUSH
34287: LD_INT 0
34289: PPUSH
34290: LD_INT 5
34292: PPUSH
34293: CALL_OW 12
34297: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34298: LD_ADDR_VAR 0 12
34302: PUSH
34303: LD_INT 2
34305: PPUSH
34306: LD_INT 6
34308: PPUSH
34309: CALL_OW 12
34313: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34314: LD_ADDR_VAR 0 9
34318: PUSH
34319: LD_VAR 0 2
34323: PPUSH
34324: LD_VAR 0 11
34328: PPUSH
34329: LD_VAR 0 12
34333: PPUSH
34334: CALL_OW 272
34338: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34339: LD_ADDR_VAR 0 10
34343: PUSH
34344: LD_VAR 0 3
34348: PPUSH
34349: LD_VAR 0 11
34353: PPUSH
34354: LD_VAR 0 12
34358: PPUSH
34359: CALL_OW 273
34363: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34364: LD_VAR 0 9
34368: PPUSH
34369: LD_VAR 0 10
34373: PPUSH
34374: CALL_OW 488
34378: PUSH
34379: LD_VAR 0 9
34383: PUSH
34384: LD_VAR 0 10
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_VAR 0 7
34397: IN
34398: NOT
34399: AND
34400: PUSH
34401: LD_VAR 0 9
34405: PPUSH
34406: LD_VAR 0 10
34410: PPUSH
34411: CALL_OW 458
34415: NOT
34416: AND
34417: IFFALSE 34459
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: LD_VAR 0 7
34428: PPUSH
34429: LD_VAR 0 7
34433: PUSH
34434: LD_INT 1
34436: PLUS
34437: PPUSH
34438: LD_VAR 0 9
34442: PUSH
34443: LD_VAR 0 10
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 1
34456: ST_TO_ADDR
34457: GO 34473
// i := i - 1 ;
34459: LD_ADDR_VAR 0 5
34463: PUSH
34464: LD_VAR 0 5
34468: PUSH
34469: LD_INT 1
34471: MINUS
34472: ST_TO_ADDR
// end ;
34473: GO 34279
34475: POP
34476: POP
// for i in tmp do
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_VAR 0 7
34486: PUSH
34487: FOR_IN
34488: IFFALSE 34526
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34490: LD_VAR 0 1
34494: PPUSH
34495: LD_VAR 0 5
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PPUSH
34504: LD_VAR 0 5
34508: PUSH
34509: LD_INT 2
34511: ARRAY
34512: PPUSH
34513: CALL 33472 0 3
34517: NOT
34518: IFFALSE 34524
// exit ;
34520: POP
34521: POP
34522: GO 34528
34524: GO 34487
34526: POP
34527: POP
// end ;
34528: LD_VAR 0 4
34532: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34533: LD_INT 0
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// if not GetClass ( unit ) = class_sniper then
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 257
34551: PUSH
34552: LD_INT 5
34554: EQUAL
34555: NOT
34556: IFFALSE 34560
// exit ;
34558: GO 34948
// dist := 8 ;
34560: LD_ADDR_VAR 0 5
34564: PUSH
34565: LD_INT 8
34567: ST_TO_ADDR
// viewRange := 12 ;
34568: LD_ADDR_VAR 0 7
34572: PUSH
34573: LD_INT 12
34575: ST_TO_ADDR
// side := GetSide ( unit ) ;
34576: LD_ADDR_VAR 0 6
34580: PUSH
34581: LD_VAR 0 1
34585: PPUSH
34586: CALL_OW 255
34590: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34591: LD_INT 61
34593: PPUSH
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 321
34603: PUSH
34604: LD_INT 2
34606: EQUAL
34607: IFFALSE 34617
// viewRange := 16 ;
34609: LD_ADDR_VAR 0 7
34613: PUSH
34614: LD_INT 16
34616: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34617: LD_VAR 0 1
34621: PPUSH
34622: LD_VAR 0 2
34626: PPUSH
34627: LD_VAR 0 3
34631: PPUSH
34632: CALL_OW 297
34636: PUSH
34637: LD_VAR 0 5
34641: GREATER
34642: IFFALSE 34721
// begin ComMoveXY ( unit , x , y ) ;
34644: LD_VAR 0 1
34648: PPUSH
34649: LD_VAR 0 2
34653: PPUSH
34654: LD_VAR 0 3
34658: PPUSH
34659: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34663: LD_INT 35
34665: PPUSH
34666: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34670: LD_VAR 0 1
34674: PPUSH
34675: LD_VAR 0 2
34679: PPUSH
34680: LD_VAR 0 3
34684: PPUSH
34685: CALL 71393 0 3
34689: NOT
34690: IFFALSE 34694
// exit ;
34692: GO 34948
// until GetDistUnitXY ( unit , x , y ) < dist ;
34694: LD_VAR 0 1
34698: PPUSH
34699: LD_VAR 0 2
34703: PPUSH
34704: LD_VAR 0 3
34708: PPUSH
34709: CALL_OW 297
34713: PUSH
34714: LD_VAR 0 5
34718: LESS
34719: IFFALSE 34663
// end ; ComTurnXY ( unit , x , y ) ;
34721: LD_VAR 0 1
34725: PPUSH
34726: LD_VAR 0 2
34730: PPUSH
34731: LD_VAR 0 3
34735: PPUSH
34736: CALL_OW 118
// wait ( 5 ) ;
34740: LD_INT 5
34742: PPUSH
34743: CALL_OW 67
// _d := GetDir ( unit ) ;
34747: LD_ADDR_VAR 0 10
34751: PUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 254
34761: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34762: LD_ADDR_VAR 0 8
34766: PUSH
34767: LD_VAR 0 1
34771: PPUSH
34772: CALL_OW 250
34776: PPUSH
34777: LD_VAR 0 10
34781: PPUSH
34782: LD_VAR 0 5
34786: PPUSH
34787: CALL_OW 272
34791: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 251
34806: PPUSH
34807: LD_VAR 0 10
34811: PPUSH
34812: LD_VAR 0 5
34816: PPUSH
34817: CALL_OW 273
34821: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34822: LD_VAR 0 8
34826: PPUSH
34827: LD_VAR 0 9
34831: PPUSH
34832: CALL_OW 488
34836: NOT
34837: IFFALSE 34841
// exit ;
34839: GO 34948
// ComAnimCustom ( unit , 1 ) ;
34841: LD_VAR 0 1
34845: PPUSH
34846: LD_INT 1
34848: PPUSH
34849: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34853: LD_VAR 0 8
34857: PPUSH
34858: LD_VAR 0 9
34862: PPUSH
34863: LD_VAR 0 6
34867: PPUSH
34868: LD_VAR 0 7
34872: PPUSH
34873: CALL_OW 330
// repeat wait ( 1 ) ;
34877: LD_INT 1
34879: PPUSH
34880: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 316
34893: PUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL_OW 314
34903: OR
34904: PUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 302
34914: NOT
34915: OR
34916: PUSH
34917: LD_VAR 0 1
34921: PPUSH
34922: CALL_OW 301
34926: OR
34927: IFFALSE 34877
// RemoveSeeing ( _x , _y , side ) ;
34929: LD_VAR 0 8
34933: PPUSH
34934: LD_VAR 0 9
34938: PPUSH
34939: LD_VAR 0 6
34943: PPUSH
34944: CALL_OW 331
// end ; end_of_file
34948: LD_VAR 0 4
34952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34953: LD_VAR 0 1
34957: PUSH
34958: LD_INT 200
34960: DOUBLE
34961: GREATEREQUAL
34962: IFFALSE 34970
34964: LD_INT 299
34966: DOUBLE
34967: LESSEQUAL
34968: IFTRUE 34972
34970: GO 35004
34972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34973: LD_VAR 0 1
34977: PPUSH
34978: LD_VAR 0 2
34982: PPUSH
34983: LD_VAR 0 3
34987: PPUSH
34988: LD_VAR 0 4
34992: PPUSH
34993: LD_VAR 0 5
34997: PPUSH
34998: CALL 31040 0 5
35002: GO 35081
35004: LD_INT 300
35006: DOUBLE
35007: GREATEREQUAL
35008: IFFALSE 35016
35010: LD_INT 399
35012: DOUBLE
35013: LESSEQUAL
35014: IFTRUE 35018
35016: GO 35080
35018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
35019: LD_VAR 0 1
35023: PPUSH
35024: LD_VAR 0 2
35028: PPUSH
35029: LD_VAR 0 3
35033: PPUSH
35034: LD_VAR 0 4
35038: PPUSH
35039: LD_VAR 0 5
35043: PPUSH
35044: LD_VAR 0 6
35048: PPUSH
35049: LD_VAR 0 7
35053: PPUSH
35054: LD_VAR 0 8
35058: PPUSH
35059: LD_VAR 0 9
35063: PPUSH
35064: LD_VAR 0 10
35068: PPUSH
35069: LD_VAR 0 11
35073: PPUSH
35074: CALL 27373 0 11
35078: GO 35081
35080: POP
// end ;
35081: PPOPN 11
35083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
35084: LD_VAR 0 1
35088: PPUSH
35089: LD_VAR 0 2
35093: PPUSH
35094: LD_VAR 0 3
35098: PPUSH
35099: LD_VAR 0 4
35103: PPUSH
35104: LD_VAR 0 5
35108: PPUSH
35109: CALL 30776 0 5
// end ; end_of_file end_of_file
35113: PPOPN 5
35115: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35116: LD_INT 0
35118: PPUSH
35119: PPUSH
// if exist_mode then
35120: LD_VAR 0 2
35124: IFFALSE 35149
// unit := CreateCharacter ( prefix & ident ) else
35126: LD_ADDR_VAR 0 5
35130: PUSH
35131: LD_VAR 0 3
35135: PUSH
35136: LD_VAR 0 1
35140: STR
35141: PPUSH
35142: CALL_OW 34
35146: ST_TO_ADDR
35147: GO 35164
// unit := NewCharacter ( ident ) ;
35149: LD_ADDR_VAR 0 5
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 25
35163: ST_TO_ADDR
// result := unit ;
35164: LD_ADDR_VAR 0 4
35168: PUSH
35169: LD_VAR 0 5
35173: ST_TO_ADDR
// end ;
35174: LD_VAR 0 4
35178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35179: LD_INT 0
35181: PPUSH
35182: PPUSH
// if not side or not nation then
35183: LD_VAR 0 1
35187: NOT
35188: PUSH
35189: LD_VAR 0 2
35193: NOT
35194: OR
35195: IFFALSE 35199
// exit ;
35197: GO 35967
// case nation of nation_american :
35199: LD_VAR 0 2
35203: PUSH
35204: LD_INT 1
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35212
35210: GO 35426
35212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35213: LD_ADDR_VAR 0 4
35217: PUSH
35218: LD_INT 35
35220: PUSH
35221: LD_INT 45
35223: PUSH
35224: LD_INT 46
35226: PUSH
35227: LD_INT 47
35229: PUSH
35230: LD_INT 82
35232: PUSH
35233: LD_INT 83
35235: PUSH
35236: LD_INT 84
35238: PUSH
35239: LD_INT 85
35241: PUSH
35242: LD_INT 86
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 6
35253: PUSH
35254: LD_INT 15
35256: PUSH
35257: LD_INT 16
35259: PUSH
35260: LD_INT 7
35262: PUSH
35263: LD_INT 12
35265: PUSH
35266: LD_INT 13
35268: PUSH
35269: LD_INT 10
35271: PUSH
35272: LD_INT 14
35274: PUSH
35275: LD_INT 20
35277: PUSH
35278: LD_INT 21
35280: PUSH
35281: LD_INT 22
35283: PUSH
35284: LD_INT 25
35286: PUSH
35287: LD_INT 32
35289: PUSH
35290: LD_INT 27
35292: PUSH
35293: LD_INT 36
35295: PUSH
35296: LD_INT 69
35298: PUSH
35299: LD_INT 39
35301: PUSH
35302: LD_INT 34
35304: PUSH
35305: LD_INT 40
35307: PUSH
35308: LD_INT 48
35310: PUSH
35311: LD_INT 49
35313: PUSH
35314: LD_INT 50
35316: PUSH
35317: LD_INT 51
35319: PUSH
35320: LD_INT 52
35322: PUSH
35323: LD_INT 53
35325: PUSH
35326: LD_INT 54
35328: PUSH
35329: LD_INT 55
35331: PUSH
35332: LD_INT 56
35334: PUSH
35335: LD_INT 57
35337: PUSH
35338: LD_INT 58
35340: PUSH
35341: LD_INT 59
35343: PUSH
35344: LD_INT 60
35346: PUSH
35347: LD_INT 61
35349: PUSH
35350: LD_INT 62
35352: PUSH
35353: LD_INT 80
35355: PUSH
35356: LD_INT 82
35358: PUSH
35359: LD_INT 83
35361: PUSH
35362: LD_INT 84
35364: PUSH
35365: LD_INT 85
35367: PUSH
35368: LD_INT 86
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
35424: GO 35891
35426: LD_INT 2
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35660
35434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35435: LD_ADDR_VAR 0 4
35439: PUSH
35440: LD_INT 35
35442: PUSH
35443: LD_INT 45
35445: PUSH
35446: LD_INT 46
35448: PUSH
35449: LD_INT 47
35451: PUSH
35452: LD_INT 82
35454: PUSH
35455: LD_INT 83
35457: PUSH
35458: LD_INT 84
35460: PUSH
35461: LD_INT 85
35463: PUSH
35464: LD_INT 87
35466: PUSH
35467: LD_INT 70
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 11
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: LD_INT 4
35481: PUSH
35482: LD_INT 5
35484: PUSH
35485: LD_INT 6
35487: PUSH
35488: LD_INT 15
35490: PUSH
35491: LD_INT 18
35493: PUSH
35494: LD_INT 7
35496: PUSH
35497: LD_INT 17
35499: PUSH
35500: LD_INT 8
35502: PUSH
35503: LD_INT 20
35505: PUSH
35506: LD_INT 21
35508: PUSH
35509: LD_INT 22
35511: PUSH
35512: LD_INT 72
35514: PUSH
35515: LD_INT 26
35517: PUSH
35518: LD_INT 69
35520: PUSH
35521: LD_INT 39
35523: PUSH
35524: LD_INT 40
35526: PUSH
35527: LD_INT 41
35529: PUSH
35530: LD_INT 42
35532: PUSH
35533: LD_INT 43
35535: PUSH
35536: LD_INT 48
35538: PUSH
35539: LD_INT 49
35541: PUSH
35542: LD_INT 50
35544: PUSH
35545: LD_INT 51
35547: PUSH
35548: LD_INT 52
35550: PUSH
35551: LD_INT 53
35553: PUSH
35554: LD_INT 54
35556: PUSH
35557: LD_INT 55
35559: PUSH
35560: LD_INT 56
35562: PUSH
35563: LD_INT 60
35565: PUSH
35566: LD_INT 61
35568: PUSH
35569: LD_INT 62
35571: PUSH
35572: LD_INT 66
35574: PUSH
35575: LD_INT 67
35577: PUSH
35578: LD_INT 68
35580: PUSH
35581: LD_INT 81
35583: PUSH
35584: LD_INT 82
35586: PUSH
35587: LD_INT 83
35589: PUSH
35590: LD_INT 84
35592: PUSH
35593: LD_INT 85
35595: PUSH
35596: LD_INT 87
35598: PUSH
35599: LD_INT 88
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: ST_TO_ADDR
35658: GO 35891
35660: LD_INT 3
35662: DOUBLE
35663: EQUAL
35664: IFTRUE 35668
35666: GO 35890
35668: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35669: LD_ADDR_VAR 0 4
35673: PUSH
35674: LD_INT 46
35676: PUSH
35677: LD_INT 47
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 82
35688: PUSH
35689: LD_INT 83
35691: PUSH
35692: LD_INT 84
35694: PUSH
35695: LD_INT 85
35697: PUSH
35698: LD_INT 86
35700: PUSH
35701: LD_INT 11
35703: PUSH
35704: LD_INT 9
35706: PUSH
35707: LD_INT 20
35709: PUSH
35710: LD_INT 19
35712: PUSH
35713: LD_INT 21
35715: PUSH
35716: LD_INT 24
35718: PUSH
35719: LD_INT 22
35721: PUSH
35722: LD_INT 25
35724: PUSH
35725: LD_INT 28
35727: PUSH
35728: LD_INT 29
35730: PUSH
35731: LD_INT 30
35733: PUSH
35734: LD_INT 31
35736: PUSH
35737: LD_INT 37
35739: PUSH
35740: LD_INT 38
35742: PUSH
35743: LD_INT 32
35745: PUSH
35746: LD_INT 27
35748: PUSH
35749: LD_INT 33
35751: PUSH
35752: LD_INT 69
35754: PUSH
35755: LD_INT 39
35757: PUSH
35758: LD_INT 34
35760: PUSH
35761: LD_INT 40
35763: PUSH
35764: LD_INT 71
35766: PUSH
35767: LD_INT 23
35769: PUSH
35770: LD_INT 44
35772: PUSH
35773: LD_INT 48
35775: PUSH
35776: LD_INT 49
35778: PUSH
35779: LD_INT 50
35781: PUSH
35782: LD_INT 51
35784: PUSH
35785: LD_INT 52
35787: PUSH
35788: LD_INT 53
35790: PUSH
35791: LD_INT 54
35793: PUSH
35794: LD_INT 55
35796: PUSH
35797: LD_INT 56
35799: PUSH
35800: LD_INT 57
35802: PUSH
35803: LD_INT 58
35805: PUSH
35806: LD_INT 59
35808: PUSH
35809: LD_INT 63
35811: PUSH
35812: LD_INT 64
35814: PUSH
35815: LD_INT 65
35817: PUSH
35818: LD_INT 82
35820: PUSH
35821: LD_INT 83
35823: PUSH
35824: LD_INT 84
35826: PUSH
35827: LD_INT 85
35829: PUSH
35830: LD_INT 86
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
35888: GO 35891
35890: POP
// if state > - 1 and state < 3 then
35891: LD_VAR 0 3
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: GREATER
35900: PUSH
35901: LD_VAR 0 3
35905: PUSH
35906: LD_INT 3
35908: LESS
35909: AND
35910: IFFALSE 35967
// for i in result do
35912: LD_ADDR_VAR 0 5
35916: PUSH
35917: LD_VAR 0 4
35921: PUSH
35922: FOR_IN
35923: IFFALSE 35965
// if GetTech ( i , side ) <> state then
35925: LD_VAR 0 5
35929: PPUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 321
35939: PUSH
35940: LD_VAR 0 3
35944: NONEQUAL
35945: IFFALSE 35963
// result := result diff i ;
35947: LD_ADDR_VAR 0 4
35951: PUSH
35952: LD_VAR 0 4
35956: PUSH
35957: LD_VAR 0 5
35961: DIFF
35962: ST_TO_ADDR
35963: GO 35922
35965: POP
35966: POP
// end ;
35967: LD_VAR 0 4
35971: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35972: LD_INT 0
35974: PPUSH
35975: PPUSH
35976: PPUSH
// result := true ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_INT 1
35984: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_VAR 0 2
35994: PPUSH
35995: CALL_OW 480
35999: ST_TO_ADDR
// if not tmp then
36000: LD_VAR 0 5
36004: NOT
36005: IFFALSE 36009
// exit ;
36007: GO 36058
// for i in tmp do
36009: LD_ADDR_VAR 0 4
36013: PUSH
36014: LD_VAR 0 5
36018: PUSH
36019: FOR_IN
36020: IFFALSE 36056
// if GetTech ( i , side ) <> state_researched then
36022: LD_VAR 0 4
36026: PPUSH
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 321
36036: PUSH
36037: LD_INT 2
36039: NONEQUAL
36040: IFFALSE 36054
// begin result := false ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// exit ;
36050: POP
36051: POP
36052: GO 36058
// end ;
36054: GO 36019
36056: POP
36057: POP
// end ;
36058: LD_VAR 0 3
36062: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36078: LD_VAR 0 1
36082: NOT
36083: PUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 257
36093: PUSH
36094: LD_INT 9
36096: NONEQUAL
36097: OR
36098: IFFALSE 36102
// exit ;
36100: GO 36675
// side := GetSide ( unit ) ;
36102: LD_ADDR_VAR 0 9
36106: PUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 255
36116: ST_TO_ADDR
// tech_space := tech_spacanom ;
36117: LD_ADDR_VAR 0 12
36121: PUSH
36122: LD_INT 29
36124: ST_TO_ADDR
// tech_time := tech_taurad ;
36125: LD_ADDR_VAR 0 13
36129: PUSH
36130: LD_INT 28
36132: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36133: LD_ADDR_VAR 0 11
36137: PUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 310
36147: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36148: LD_VAR 0 11
36152: PPUSH
36153: CALL_OW 247
36157: PUSH
36158: LD_INT 2
36160: EQUAL
36161: IFFALSE 36165
// exit ;
36163: GO 36675
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36165: LD_ADDR_VAR 0 8
36169: PUSH
36170: LD_INT 81
36172: PUSH
36173: LD_VAR 0 9
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 3
36184: PUSH
36185: LD_INT 21
36187: PUSH
36188: LD_INT 3
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PPUSH
36203: CALL_OW 69
36207: ST_TO_ADDR
// if not tmp then
36208: LD_VAR 0 8
36212: NOT
36213: IFFALSE 36217
// exit ;
36215: GO 36675
// if in_unit then
36217: LD_VAR 0 11
36221: IFFALSE 36245
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36223: LD_ADDR_VAR 0 10
36227: PUSH
36228: LD_VAR 0 8
36232: PPUSH
36233: LD_VAR 0 11
36237: PPUSH
36238: CALL_OW 74
36242: ST_TO_ADDR
36243: GO 36265
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36245: LD_ADDR_VAR 0 10
36249: PUSH
36250: LD_VAR 0 8
36254: PPUSH
36255: LD_VAR 0 1
36259: PPUSH
36260: CALL_OW 74
36264: ST_TO_ADDR
// if not enemy then
36265: LD_VAR 0 10
36269: NOT
36270: IFFALSE 36274
// exit ;
36272: GO 36675
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36274: LD_VAR 0 11
36278: PUSH
36279: LD_VAR 0 11
36283: PPUSH
36284: LD_VAR 0 10
36288: PPUSH
36289: CALL_OW 296
36293: PUSH
36294: LD_INT 13
36296: GREATER
36297: AND
36298: PUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: LD_VAR 0 10
36308: PPUSH
36309: CALL_OW 296
36313: PUSH
36314: LD_INT 12
36316: GREATER
36317: OR
36318: IFFALSE 36322
// exit ;
36320: GO 36675
// missile := [ 1 ] ;
36322: LD_ADDR_VAR 0 14
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36333: LD_VAR 0 9
36337: PPUSH
36338: LD_VAR 0 12
36342: PPUSH
36343: CALL_OW 325
36347: IFFALSE 36376
// missile := Replace ( missile , missile + 1 , 2 ) ;
36349: LD_ADDR_VAR 0 14
36353: PUSH
36354: LD_VAR 0 14
36358: PPUSH
36359: LD_VAR 0 14
36363: PUSH
36364: LD_INT 1
36366: PLUS
36367: PPUSH
36368: LD_INT 2
36370: PPUSH
36371: CALL_OW 1
36375: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36376: LD_VAR 0 9
36380: PPUSH
36381: LD_VAR 0 13
36385: PPUSH
36386: CALL_OW 325
36390: PUSH
36391: LD_VAR 0 10
36395: PPUSH
36396: CALL_OW 255
36400: PPUSH
36401: LD_VAR 0 13
36405: PPUSH
36406: CALL_OW 325
36410: NOT
36411: AND
36412: IFFALSE 36441
// missile := Replace ( missile , missile + 1 , 3 ) ;
36414: LD_ADDR_VAR 0 14
36418: PUSH
36419: LD_VAR 0 14
36423: PPUSH
36424: LD_VAR 0 14
36428: PUSH
36429: LD_INT 1
36431: PLUS
36432: PPUSH
36433: LD_INT 3
36435: PPUSH
36436: CALL_OW 1
36440: ST_TO_ADDR
// if missile < 2 then
36441: LD_VAR 0 14
36445: PUSH
36446: LD_INT 2
36448: LESS
36449: IFFALSE 36453
// exit ;
36451: GO 36675
// x := GetX ( enemy ) ;
36453: LD_ADDR_VAR 0 4
36457: PUSH
36458: LD_VAR 0 10
36462: PPUSH
36463: CALL_OW 250
36467: ST_TO_ADDR
// y := GetY ( enemy ) ;
36468: LD_ADDR_VAR 0 5
36472: PUSH
36473: LD_VAR 0 10
36477: PPUSH
36478: CALL_OW 251
36482: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36483: LD_ADDR_VAR 0 6
36487: PUSH
36488: LD_VAR 0 4
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PPUSH
36497: LD_INT 1
36499: PPUSH
36500: CALL_OW 12
36504: PLUS
36505: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36506: LD_ADDR_VAR 0 7
36510: PUSH
36511: LD_VAR 0 5
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PPUSH
36520: LD_INT 1
36522: PPUSH
36523: CALL_OW 12
36527: PLUS
36528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36529: LD_VAR 0 6
36533: PPUSH
36534: LD_VAR 0 7
36538: PPUSH
36539: CALL_OW 488
36543: NOT
36544: IFFALSE 36566
// begin _x := x ;
36546: LD_ADDR_VAR 0 6
36550: PUSH
36551: LD_VAR 0 4
36555: ST_TO_ADDR
// _y := y ;
36556: LD_ADDR_VAR 0 7
36560: PUSH
36561: LD_VAR 0 5
36565: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_INT 1
36573: PPUSH
36574: LD_VAR 0 14
36578: PPUSH
36579: CALL_OW 12
36583: ST_TO_ADDR
// case i of 1 :
36584: LD_VAR 0 3
36588: PUSH
36589: LD_INT 1
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36614
36597: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36598: LD_VAR 0 1
36602: PPUSH
36603: LD_VAR 0 10
36607: PPUSH
36608: CALL_OW 115
36612: GO 36675
36614: LD_INT 2
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36644
36622: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36623: LD_VAR 0 1
36627: PPUSH
36628: LD_VAR 0 6
36632: PPUSH
36633: LD_VAR 0 7
36637: PPUSH
36638: CALL_OW 153
36642: GO 36675
36644: LD_INT 3
36646: DOUBLE
36647: EQUAL
36648: IFTRUE 36652
36650: GO 36674
36652: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36653: LD_VAR 0 1
36657: PPUSH
36658: LD_VAR 0 6
36662: PPUSH
36663: LD_VAR 0 7
36667: PPUSH
36668: CALL_OW 154
36672: GO 36675
36674: POP
// end ;
36675: LD_VAR 0 2
36679: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36680: LD_INT 0
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
// if not unit or not building then
36688: LD_VAR 0 1
36692: NOT
36693: PUSH
36694: LD_VAR 0 2
36698: NOT
36699: OR
36700: IFFALSE 36704
// exit ;
36702: GO 36862
// x := GetX ( building ) ;
36704: LD_ADDR_VAR 0 5
36708: PUSH
36709: LD_VAR 0 2
36713: PPUSH
36714: CALL_OW 250
36718: ST_TO_ADDR
// y := GetY ( building ) ;
36719: LD_ADDR_VAR 0 6
36723: PUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: CALL_OW 251
36733: ST_TO_ADDR
// for i = 0 to 5 do
36734: LD_ADDR_VAR 0 4
36738: PUSH
36739: DOUBLE
36740: LD_INT 0
36742: DEC
36743: ST_TO_ADDR
36744: LD_INT 5
36746: PUSH
36747: FOR_TO
36748: IFFALSE 36860
// begin _x := ShiftX ( x , i , 3 ) ;
36750: LD_ADDR_VAR 0 7
36754: PUSH
36755: LD_VAR 0 5
36759: PPUSH
36760: LD_VAR 0 4
36764: PPUSH
36765: LD_INT 3
36767: PPUSH
36768: CALL_OW 272
36772: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36773: LD_ADDR_VAR 0 8
36777: PUSH
36778: LD_VAR 0 6
36782: PPUSH
36783: LD_VAR 0 4
36787: PPUSH
36788: LD_INT 3
36790: PPUSH
36791: CALL_OW 273
36795: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36796: LD_VAR 0 7
36800: PPUSH
36801: LD_VAR 0 8
36805: PPUSH
36806: CALL_OW 488
36810: NOT
36811: IFFALSE 36815
// continue ;
36813: GO 36747
// if HexInfo ( _x , _y ) = 0 then
36815: LD_VAR 0 7
36819: PPUSH
36820: LD_VAR 0 8
36824: PPUSH
36825: CALL_OW 428
36829: PUSH
36830: LD_INT 0
36832: EQUAL
36833: IFFALSE 36858
// begin ComMoveXY ( unit , _x , _y ) ;
36835: LD_VAR 0 1
36839: PPUSH
36840: LD_VAR 0 7
36844: PPUSH
36845: LD_VAR 0 8
36849: PPUSH
36850: CALL_OW 111
// exit ;
36854: POP
36855: POP
36856: GO 36862
// end ; end ;
36858: GO 36747
36860: POP
36861: POP
// end ;
36862: LD_VAR 0 3
36866: RET
// export function ScanBase ( side , base_area ) ; begin
36867: LD_INT 0
36869: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_VAR 0 2
36879: PPUSH
36880: LD_INT 81
36882: PUSH
36883: LD_VAR 0 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 70
36896: ST_TO_ADDR
// end ;
36897: LD_VAR 0 3
36901: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
// result := false ;
36908: LD_ADDR_VAR 0 2
36912: PUSH
36913: LD_INT 0
36915: ST_TO_ADDR
// side := GetSide ( unit ) ;
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 255
36930: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36931: LD_ADDR_VAR 0 4
36935: PUSH
36936: LD_VAR 0 1
36940: PPUSH
36941: CALL_OW 248
36945: ST_TO_ADDR
// case nat of 1 :
36946: LD_VAR 0 4
36950: PUSH
36951: LD_INT 1
36953: DOUBLE
36954: EQUAL
36955: IFTRUE 36959
36957: GO 36970
36959: POP
// tech := tech_lassight ; 2 :
36960: LD_ADDR_VAR 0 5
36964: PUSH
36965: LD_INT 12
36967: ST_TO_ADDR
36968: GO 37009
36970: LD_INT 2
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 36989
36978: POP
// tech := tech_mortar ; 3 :
36979: LD_ADDR_VAR 0 5
36983: PUSH
36984: LD_INT 41
36986: ST_TO_ADDR
36987: GO 37009
36989: LD_INT 3
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37008
36997: POP
// tech := tech_bazooka ; end ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_INT 44
37005: ST_TO_ADDR
37006: GO 37009
37008: POP
// if Researched ( side , tech ) then
37009: LD_VAR 0 3
37013: PPUSH
37014: LD_VAR 0 5
37018: PPUSH
37019: CALL_OW 325
37023: IFFALSE 37050
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37025: LD_ADDR_VAR 0 2
37029: PUSH
37030: LD_INT 5
37032: PUSH
37033: LD_INT 8
37035: PUSH
37036: LD_INT 9
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: PUSH
37044: LD_VAR 0 4
37048: ARRAY
37049: ST_TO_ADDR
// end ;
37050: LD_VAR 0 2
37054: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37055: LD_INT 0
37057: PPUSH
37058: PPUSH
37059: PPUSH
// if not mines then
37060: LD_VAR 0 2
37064: NOT
37065: IFFALSE 37069
// exit ;
37067: GO 37213
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37069: LD_ADDR_VAR 0 5
37073: PUSH
37074: LD_INT 81
37076: PUSH
37077: LD_VAR 0 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: LD_INT 21
37091: PUSH
37092: LD_INT 3
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PPUSH
37107: CALL_OW 69
37111: ST_TO_ADDR
// for i in mines do
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: LD_VAR 0 2
37121: PUSH
37122: FOR_IN
37123: IFFALSE 37211
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37125: LD_VAR 0 4
37129: PUSH
37130: LD_INT 1
37132: ARRAY
37133: PPUSH
37134: LD_VAR 0 4
37138: PUSH
37139: LD_INT 2
37141: ARRAY
37142: PPUSH
37143: CALL_OW 458
37147: NOT
37148: IFFALSE 37152
// continue ;
37150: GO 37122
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37152: LD_VAR 0 4
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: LD_VAR 0 4
37165: PUSH
37166: LD_INT 2
37168: ARRAY
37169: PPUSH
37170: CALL_OW 428
37174: PUSH
37175: LD_VAR 0 5
37179: IN
37180: IFFALSE 37209
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37182: LD_VAR 0 4
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 4
37195: PUSH
37196: LD_INT 2
37198: ARRAY
37199: PPUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 456
// end ;
37209: GO 37122
37211: POP
37212: POP
// end ;
37213: LD_VAR 0 3
37217: RET
// export function Count ( array ) ; var i ; begin
37218: LD_INT 0
37220: PPUSH
37221: PPUSH
// result := 0 ;
37222: LD_ADDR_VAR 0 2
37226: PUSH
37227: LD_INT 0
37229: ST_TO_ADDR
// for i in array do
37230: LD_ADDR_VAR 0 3
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: FOR_IN
37241: IFFALSE 37265
// if i then
37243: LD_VAR 0 3
37247: IFFALSE 37263
// result := result + 1 ;
37249: LD_ADDR_VAR 0 2
37253: PUSH
37254: LD_VAR 0 2
37258: PUSH
37259: LD_INT 1
37261: PLUS
37262: ST_TO_ADDR
37263: GO 37240
37265: POP
37266: POP
// end ;
37267: LD_VAR 0 2
37271: RET
// export function IsEmpty ( building ) ; begin
37272: LD_INT 0
37274: PPUSH
// if not building then
37275: LD_VAR 0 1
37279: NOT
37280: IFFALSE 37284
// exit ;
37282: GO 37327
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37284: LD_ADDR_VAR 0 2
37288: PUSH
37289: LD_VAR 0 1
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 255
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 58
37313: PUSH
37314: EMPTY
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PPUSH
37321: CALL_OW 69
37325: IN
37326: ST_TO_ADDR
// end ;
37327: LD_VAR 0 2
37331: RET
// export function IsNotFull ( building ) ; var places ; begin
37332: LD_INT 0
37334: PPUSH
37335: PPUSH
// if not building then
37336: LD_VAR 0 1
37340: NOT
37341: IFFALSE 37345
// exit ;
37343: GO 37516
// result := false ;
37345: LD_ADDR_VAR 0 2
37349: PUSH
37350: LD_INT 0
37352: ST_TO_ADDR
// places := 0 ;
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 0
37360: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 266
37370: PUSH
37371: LD_INT 0
37373: DOUBLE
37374: EQUAL
37375: IFTRUE 37433
37377: LD_INT 1
37379: DOUBLE
37380: EQUAL
37381: IFTRUE 37433
37383: LD_INT 6
37385: DOUBLE
37386: EQUAL
37387: IFTRUE 37433
37389: LD_INT 7
37391: DOUBLE
37392: EQUAL
37393: IFTRUE 37433
37395: LD_INT 8
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37433
37401: LD_INT 4
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37433
37407: LD_INT 5
37409: DOUBLE
37410: EQUAL
37411: IFTRUE 37433
37413: LD_INT 2
37415: DOUBLE
37416: EQUAL
37417: IFTRUE 37433
37419: LD_INT 3
37421: DOUBLE
37422: EQUAL
37423: IFTRUE 37433
37425: LD_INT 35
37427: DOUBLE
37428: EQUAL
37429: IFTRUE 37433
37431: GO 37444
37433: POP
// places := 6 ; b_bunker , b_breastwork :
37434: LD_ADDR_VAR 0 3
37438: PUSH
37439: LD_INT 6
37441: ST_TO_ADDR
37442: GO 37489
37444: LD_INT 32
37446: DOUBLE
37447: EQUAL
37448: IFTRUE 37458
37450: LD_INT 31
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37458
37456: GO 37469
37458: POP
// places := 1 ; b_control_tower :
37459: LD_ADDR_VAR 0 3
37463: PUSH
37464: LD_INT 1
37466: ST_TO_ADDR
37467: GO 37489
37469: LD_INT 36
37471: DOUBLE
37472: EQUAL
37473: IFTRUE 37477
37475: GO 37488
37477: POP
// places := 3 ; end ;
37478: LD_ADDR_VAR 0 3
37482: PUSH
37483: LD_INT 3
37485: ST_TO_ADDR
37486: GO 37489
37488: POP
// if places then
37489: LD_VAR 0 3
37493: IFFALSE 37516
// result := UnitsInside ( building ) < places ;
37495: LD_ADDR_VAR 0 2
37499: PUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 313
37509: PUSH
37510: LD_VAR 0 3
37514: LESS
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 2
37520: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37521: LD_INT 0
37523: PPUSH
37524: PPUSH
37525: PPUSH
37526: PPUSH
// tmp := [ ] ;
37527: LD_ADDR_VAR 0 3
37531: PUSH
37532: EMPTY
37533: ST_TO_ADDR
// list := [ ] ;
37534: LD_ADDR_VAR 0 5
37538: PUSH
37539: EMPTY
37540: ST_TO_ADDR
// for i = 16 to 25 do
37541: LD_ADDR_VAR 0 4
37545: PUSH
37546: DOUBLE
37547: LD_INT 16
37549: DEC
37550: ST_TO_ADDR
37551: LD_INT 25
37553: PUSH
37554: FOR_TO
37555: IFFALSE 37628
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37557: LD_ADDR_VAR 0 3
37561: PUSH
37562: LD_VAR 0 3
37566: PUSH
37567: LD_INT 22
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 91
37586: PUSH
37587: LD_VAR 0 1
37591: PUSH
37592: LD_INT 6
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 30
37602: PUSH
37603: LD_VAR 0 4
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: PPUSH
37620: CALL_OW 69
37624: ADD
37625: ST_TO_ADDR
37626: GO 37554
37628: POP
37629: POP
// for i = 1 to tmp do
37630: LD_ADDR_VAR 0 4
37634: PUSH
37635: DOUBLE
37636: LD_INT 1
37638: DEC
37639: ST_TO_ADDR
37640: LD_VAR 0 3
37644: PUSH
37645: FOR_TO
37646: IFFALSE 37734
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37648: LD_ADDR_VAR 0 5
37652: PUSH
37653: LD_VAR 0 5
37657: PUSH
37658: LD_VAR 0 3
37662: PUSH
37663: LD_VAR 0 4
37667: ARRAY
37668: PPUSH
37669: CALL_OW 266
37673: PUSH
37674: LD_VAR 0 3
37678: PUSH
37679: LD_VAR 0 4
37683: ARRAY
37684: PPUSH
37685: CALL_OW 250
37689: PUSH
37690: LD_VAR 0 3
37694: PUSH
37695: LD_VAR 0 4
37699: ARRAY
37700: PPUSH
37701: CALL_OW 251
37705: PUSH
37706: LD_VAR 0 3
37710: PUSH
37711: LD_VAR 0 4
37715: ARRAY
37716: PPUSH
37717: CALL_OW 254
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: ADD
37731: ST_TO_ADDR
37732: GO 37645
37734: POP
37735: POP
// result := list ;
37736: LD_ADDR_VAR 0 2
37740: PUSH
37741: LD_VAR 0 5
37745: ST_TO_ADDR
// end ;
37746: LD_VAR 0 2
37750: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37751: LD_INT 0
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
// if not factory then
37760: LD_VAR 0 1
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 38362
// if control = control_apeman then
37769: LD_VAR 0 4
37773: PUSH
37774: LD_INT 5
37776: EQUAL
37777: IFFALSE 37886
// begin tmp := UnitsInside ( factory ) ;
37779: LD_ADDR_VAR 0 8
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 313
37793: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37794: LD_VAR 0 8
37798: PPUSH
37799: LD_INT 25
37801: PUSH
37802: LD_INT 12
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PPUSH
37809: CALL_OW 72
37813: NOT
37814: IFFALSE 37824
// control := control_manual ;
37816: LD_ADDR_VAR 0 4
37820: PUSH
37821: LD_INT 1
37823: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL 37521 0 1
37838: ST_TO_ADDR
// if tmp then
37839: LD_VAR 0 8
37843: IFFALSE 37886
// begin for i in tmp do
37845: LD_ADDR_VAR 0 7
37849: PUSH
37850: LD_VAR 0 8
37854: PUSH
37855: FOR_IN
37856: IFFALSE 37884
// if i [ 1 ] = b_ext_radio then
37858: LD_VAR 0 7
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: PUSH
37867: LD_INT 22
37869: EQUAL
37870: IFFALSE 37882
// begin control := control_remote ;
37872: LD_ADDR_VAR 0 4
37876: PUSH
37877: LD_INT 2
37879: ST_TO_ADDR
// break ;
37880: GO 37884
// end ;
37882: GO 37855
37884: POP
37885: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37886: LD_VAR 0 1
37890: PPUSH
37891: LD_VAR 0 2
37895: PPUSH
37896: LD_VAR 0 3
37900: PPUSH
37901: LD_VAR 0 4
37905: PPUSH
37906: LD_VAR 0 5
37910: PPUSH
37911: CALL_OW 448
37915: IFFALSE 37950
// begin result := [ chassis , engine , control , weapon ] ;
37917: LD_ADDR_VAR 0 6
37921: PUSH
37922: LD_VAR 0 2
37926: PUSH
37927: LD_VAR 0 3
37931: PUSH
37932: LD_VAR 0 4
37936: PUSH
37937: LD_VAR 0 5
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: ST_TO_ADDR
// exit ;
37948: GO 38362
// end ; _chassis := AvailableChassisList ( factory ) ;
37950: LD_ADDR_VAR 0 9
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 475
37964: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37965: LD_ADDR_VAR 0 11
37969: PUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 476
37979: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37980: LD_ADDR_VAR 0 12
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 477
37994: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37995: LD_ADDR_VAR 0 10
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 478
38009: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38010: LD_VAR 0 9
38014: NOT
38015: PUSH
38016: LD_VAR 0 11
38020: NOT
38021: OR
38022: PUSH
38023: LD_VAR 0 12
38027: NOT
38028: OR
38029: PUSH
38030: LD_VAR 0 10
38034: NOT
38035: OR
38036: IFFALSE 38071
// begin result := [ chassis , engine , control , weapon ] ;
38038: LD_ADDR_VAR 0 6
38042: PUSH
38043: LD_VAR 0 2
38047: PUSH
38048: LD_VAR 0 3
38052: PUSH
38053: LD_VAR 0 4
38057: PUSH
38058: LD_VAR 0 5
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// exit ;
38069: GO 38362
// end ; if not chassis in _chassis then
38071: LD_VAR 0 2
38075: PUSH
38076: LD_VAR 0 9
38080: IN
38081: NOT
38082: IFFALSE 38108
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38084: LD_ADDR_VAR 0 2
38088: PUSH
38089: LD_VAR 0 9
38093: PUSH
38094: LD_INT 1
38096: PPUSH
38097: LD_VAR 0 9
38101: PPUSH
38102: CALL_OW 12
38106: ARRAY
38107: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38108: LD_VAR 0 2
38112: PPUSH
38113: LD_VAR 0 3
38117: PPUSH
38118: CALL 38367 0 2
38122: NOT
38123: IFFALSE 38182
// repeat engine := _engine [ 1 ] ;
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_VAR 0 11
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38139: LD_ADDR_VAR 0 11
38143: PUSH
38144: LD_VAR 0 11
38148: PPUSH
38149: LD_INT 1
38151: PPUSH
38152: CALL_OW 3
38156: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38157: LD_VAR 0 2
38161: PPUSH
38162: LD_VAR 0 3
38166: PPUSH
38167: CALL 38367 0 2
38171: PUSH
38172: LD_VAR 0 11
38176: PUSH
38177: EMPTY
38178: EQUAL
38179: OR
38180: IFFALSE 38125
// if not control in _control then
38182: LD_VAR 0 4
38186: PUSH
38187: LD_VAR 0 12
38191: IN
38192: NOT
38193: IFFALSE 38219
// control := _control [ rand ( 1 , _control ) ] ;
38195: LD_ADDR_VAR 0 4
38199: PUSH
38200: LD_VAR 0 12
38204: PUSH
38205: LD_INT 1
38207: PPUSH
38208: LD_VAR 0 12
38212: PPUSH
38213: CALL_OW 12
38217: ARRAY
38218: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38219: LD_VAR 0 2
38223: PPUSH
38224: LD_VAR 0 5
38228: PPUSH
38229: CALL 38587 0 2
38233: NOT
38234: IFFALSE 38293
// repeat weapon := _weapon [ 1 ] ;
38236: LD_ADDR_VAR 0 5
38240: PUSH
38241: LD_VAR 0 10
38245: PUSH
38246: LD_INT 1
38248: ARRAY
38249: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38250: LD_ADDR_VAR 0 10
38254: PUSH
38255: LD_VAR 0 10
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: CALL_OW 3
38267: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38268: LD_VAR 0 2
38272: PPUSH
38273: LD_VAR 0 5
38277: PPUSH
38278: CALL 38587 0 2
38282: PUSH
38283: LD_VAR 0 10
38287: PUSH
38288: EMPTY
38289: EQUAL
38290: OR
38291: IFFALSE 38236
// result := [ ] ;
38293: LD_ADDR_VAR 0 6
38297: PUSH
38298: EMPTY
38299: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38300: LD_VAR 0 1
38304: PPUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: LD_VAR 0 3
38314: PPUSH
38315: LD_VAR 0 4
38319: PPUSH
38320: LD_VAR 0 5
38324: PPUSH
38325: CALL_OW 448
38329: IFFALSE 38362
// result := [ chassis , engine , control , weapon ] ;
38331: LD_ADDR_VAR 0 6
38335: PUSH
38336: LD_VAR 0 2
38340: PUSH
38341: LD_VAR 0 3
38345: PUSH
38346: LD_VAR 0 4
38350: PUSH
38351: LD_VAR 0 5
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// end ;
38362: LD_VAR 0 6
38366: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38367: LD_INT 0
38369: PPUSH
// if not chassis or not engine then
38370: LD_VAR 0 1
38374: NOT
38375: PUSH
38376: LD_VAR 0 2
38380: NOT
38381: OR
38382: IFFALSE 38386
// exit ;
38384: GO 38582
// case engine of engine_solar :
38386: LD_VAR 0 2
38390: PUSH
38391: LD_INT 2
38393: DOUBLE
38394: EQUAL
38395: IFTRUE 38399
38397: GO 38437
38399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_INT 11
38407: PUSH
38408: LD_INT 12
38410: PUSH
38411: LD_INT 13
38413: PUSH
38414: LD_INT 14
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
38435: GO 38566
38437: LD_INT 1
38439: DOUBLE
38440: EQUAL
38441: IFTRUE 38445
38443: GO 38507
38445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_INT 11
38453: PUSH
38454: LD_INT 12
38456: PUSH
38457: LD_INT 13
38459: PUSH
38460: LD_INT 14
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 4
38474: PUSH
38475: LD_INT 5
38477: PUSH
38478: LD_INT 21
38480: PUSH
38481: LD_INT 23
38483: PUSH
38484: LD_INT 22
38486: PUSH
38487: LD_INT 24
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: ST_TO_ADDR
38505: GO 38566
38507: LD_INT 3
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38515
38513: GO 38565
38515: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38516: LD_ADDR_VAR 0 3
38520: PUSH
38521: LD_INT 13
38523: PUSH
38524: LD_INT 14
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: LD_INT 4
38535: PUSH
38536: LD_INT 5
38538: PUSH
38539: LD_INT 21
38541: PUSH
38542: LD_INT 22
38544: PUSH
38545: LD_INT 23
38547: PUSH
38548: LD_INT 24
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
38563: GO 38566
38565: POP
// result := ( chassis in result ) ;
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_VAR 0 3
38580: IN
38581: ST_TO_ADDR
// end ;
38582: LD_VAR 0 3
38586: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38587: LD_INT 0
38589: PPUSH
// if not chassis or not weapon then
38590: LD_VAR 0 1
38594: NOT
38595: PUSH
38596: LD_VAR 0 2
38600: NOT
38601: OR
38602: IFFALSE 38606
// exit ;
38604: GO 39666
// case weapon of us_machine_gun :
38606: LD_VAR 0 2
38610: PUSH
38611: LD_INT 2
38613: DOUBLE
38614: EQUAL
38615: IFTRUE 38619
38617: GO 38649
38619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: LD_INT 4
38636: PUSH
38637: LD_INT 5
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
38647: GO 39650
38649: LD_INT 3
38651: DOUBLE
38652: EQUAL
38653: IFTRUE 38657
38655: GO 38687
38657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: LD_INT 4
38674: PUSH
38675: LD_INT 5
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
38685: GO 39650
38687: LD_INT 11
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38725
38695: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: LD_INT 4
38712: PUSH
38713: LD_INT 5
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: ST_TO_ADDR
38723: GO 39650
38725: LD_INT 4
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38733
38731: GO 38759
38733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38734: LD_ADDR_VAR 0 3
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: LD_INT 4
38747: PUSH
38748: LD_INT 5
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
38757: GO 39650
38759: LD_INT 5
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38767
38765: GO 38793
38767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: LD_INT 4
38781: PUSH
38782: LD_INT 5
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
38791: GO 39650
38793: LD_INT 9
38795: DOUBLE
38796: EQUAL
38797: IFTRUE 38801
38799: GO 38827
38801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 3
38812: PUSH
38813: LD_INT 4
38815: PUSH
38816: LD_INT 5
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
38825: GO 39650
38827: LD_INT 7
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38861
38835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: LD_INT 4
38849: PUSH
38850: LD_INT 5
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
38859: GO 39650
38861: LD_INT 12
38863: DOUBLE
38864: EQUAL
38865: IFTRUE 38869
38867: GO 38895
38869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38870: LD_ADDR_VAR 0 3
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: LD_INT 4
38883: PUSH
38884: LD_INT 5
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
38893: GO 39650
38895: LD_INT 13
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38929
38903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38904: LD_ADDR_VAR 0 3
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 4
38917: PUSH
38918: LD_INT 5
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: ST_TO_ADDR
38927: GO 39650
38929: LD_INT 14
38931: DOUBLE
38932: EQUAL
38933: IFTRUE 38937
38935: GO 38955
38937: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38938: LD_ADDR_VAR 0 3
38942: PUSH
38943: LD_INT 4
38945: PUSH
38946: LD_INT 5
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: ST_TO_ADDR
38953: GO 39650
38955: LD_INT 6
38957: DOUBLE
38958: EQUAL
38959: IFTRUE 38963
38961: GO 38981
38963: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38964: LD_ADDR_VAR 0 3
38968: PUSH
38969: LD_INT 4
38971: PUSH
38972: LD_INT 5
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: ST_TO_ADDR
38979: GO 39650
38981: LD_INT 10
38983: DOUBLE
38984: EQUAL
38985: IFTRUE 38989
38987: GO 39007
38989: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38990: LD_ADDR_VAR 0 3
38994: PUSH
38995: LD_INT 4
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: ST_TO_ADDR
39005: GO 39650
39007: LD_INT 22
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39041
39015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_INT 11
39023: PUSH
39024: LD_INT 12
39026: PUSH
39027: LD_INT 13
39029: PUSH
39030: LD_INT 14
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
39039: GO 39650
39041: LD_INT 23
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 39075
39049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_INT 11
39057: PUSH
39058: LD_INT 12
39060: PUSH
39061: LD_INT 13
39063: PUSH
39064: LD_INT 14
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
39073: GO 39650
39075: LD_INT 24
39077: DOUBLE
39078: EQUAL
39079: IFTRUE 39083
39081: GO 39109
39083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39084: LD_ADDR_VAR 0 3
39088: PUSH
39089: LD_INT 11
39091: PUSH
39092: LD_INT 12
39094: PUSH
39095: LD_INT 13
39097: PUSH
39098: LD_INT 14
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
39107: GO 39650
39109: LD_INT 30
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39143
39117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_INT 11
39125: PUSH
39126: LD_INT 12
39128: PUSH
39129: LD_INT 13
39131: PUSH
39132: LD_INT 14
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
39141: GO 39650
39143: LD_INT 25
39145: DOUBLE
39146: EQUAL
39147: IFTRUE 39151
39149: GO 39169
39151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39152: LD_ADDR_VAR 0 3
39156: PUSH
39157: LD_INT 13
39159: PUSH
39160: LD_INT 14
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: ST_TO_ADDR
39167: GO 39650
39169: LD_INT 27
39171: DOUBLE
39172: EQUAL
39173: IFTRUE 39177
39175: GO 39195
39177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: LD_INT 13
39185: PUSH
39186: LD_INT 14
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: ST_TO_ADDR
39193: GO 39650
39195: LD_INT 92
39197: DOUBLE
39198: EQUAL
39199: IFTRUE 39203
39201: GO 39229
39203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_INT 11
39211: PUSH
39212: LD_INT 12
39214: PUSH
39215: LD_INT 13
39217: PUSH
39218: LD_INT 14
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: ST_TO_ADDR
39227: GO 39650
39229: LD_INT 28
39231: DOUBLE
39232: EQUAL
39233: IFTRUE 39237
39235: GO 39255
39237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: LD_INT 13
39245: PUSH
39246: LD_INT 14
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: ST_TO_ADDR
39253: GO 39650
39255: LD_INT 29
39257: DOUBLE
39258: EQUAL
39259: IFTRUE 39263
39261: GO 39281
39263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_INT 13
39271: PUSH
39272: LD_INT 14
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: ST_TO_ADDR
39279: GO 39650
39281: LD_INT 31
39283: DOUBLE
39284: EQUAL
39285: IFTRUE 39289
39287: GO 39307
39289: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_INT 13
39297: PUSH
39298: LD_INT 14
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: ST_TO_ADDR
39305: GO 39650
39307: LD_INT 26
39309: DOUBLE
39310: EQUAL
39311: IFTRUE 39315
39313: GO 39333
39315: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39316: LD_ADDR_VAR 0 3
39320: PUSH
39321: LD_INT 13
39323: PUSH
39324: LD_INT 14
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: ST_TO_ADDR
39331: GO 39650
39333: LD_INT 42
39335: DOUBLE
39336: EQUAL
39337: IFTRUE 39341
39339: GO 39367
39341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: LD_INT 21
39349: PUSH
39350: LD_INT 22
39352: PUSH
39353: LD_INT 23
39355: PUSH
39356: LD_INT 24
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: ST_TO_ADDR
39365: GO 39650
39367: LD_INT 43
39369: DOUBLE
39370: EQUAL
39371: IFTRUE 39375
39373: GO 39401
39375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39376: LD_ADDR_VAR 0 3
39380: PUSH
39381: LD_INT 21
39383: PUSH
39384: LD_INT 22
39386: PUSH
39387: LD_INT 23
39389: PUSH
39390: LD_INT 24
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
39399: GO 39650
39401: LD_INT 44
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39409
39407: GO 39435
39409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39410: LD_ADDR_VAR 0 3
39414: PUSH
39415: LD_INT 21
39417: PUSH
39418: LD_INT 22
39420: PUSH
39421: LD_INT 23
39423: PUSH
39424: LD_INT 24
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
39433: GO 39650
39435: LD_INT 45
39437: DOUBLE
39438: EQUAL
39439: IFTRUE 39443
39441: GO 39469
39443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39444: LD_ADDR_VAR 0 3
39448: PUSH
39449: LD_INT 21
39451: PUSH
39452: LD_INT 22
39454: PUSH
39455: LD_INT 23
39457: PUSH
39458: LD_INT 24
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: ST_TO_ADDR
39467: GO 39650
39469: LD_INT 49
39471: DOUBLE
39472: EQUAL
39473: IFTRUE 39477
39475: GO 39503
39477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_INT 21
39485: PUSH
39486: LD_INT 22
39488: PUSH
39489: LD_INT 23
39491: PUSH
39492: LD_INT 24
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: ST_TO_ADDR
39501: GO 39650
39503: LD_INT 51
39505: DOUBLE
39506: EQUAL
39507: IFTRUE 39511
39509: GO 39537
39511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 21
39519: PUSH
39520: LD_INT 22
39522: PUSH
39523: LD_INT 23
39525: PUSH
39526: LD_INT 24
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
39535: GO 39650
39537: LD_INT 52
39539: DOUBLE
39540: EQUAL
39541: IFTRUE 39545
39543: GO 39571
39545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39546: LD_ADDR_VAR 0 3
39550: PUSH
39551: LD_INT 21
39553: PUSH
39554: LD_INT 22
39556: PUSH
39557: LD_INT 23
39559: PUSH
39560: LD_INT 24
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
39569: GO 39650
39571: LD_INT 53
39573: DOUBLE
39574: EQUAL
39575: IFTRUE 39579
39577: GO 39597
39579: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39580: LD_ADDR_VAR 0 3
39584: PUSH
39585: LD_INT 23
39587: PUSH
39588: LD_INT 24
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: ST_TO_ADDR
39595: GO 39650
39597: LD_INT 46
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39623
39605: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_INT 23
39613: PUSH
39614: LD_INT 24
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: ST_TO_ADDR
39621: GO 39650
39623: LD_INT 47
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39649
39631: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_INT 23
39639: PUSH
39640: LD_INT 24
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: ST_TO_ADDR
39647: GO 39650
39649: POP
// result := ( chassis in result ) ;
39650: LD_ADDR_VAR 0 3
39654: PUSH
39655: LD_VAR 0 1
39659: PUSH
39660: LD_VAR 0 3
39664: IN
39665: ST_TO_ADDR
// end ;
39666: LD_VAR 0 3
39670: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39671: LD_INT 0
39673: PPUSH
39674: PPUSH
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
// result := array ;
39680: LD_ADDR_VAR 0 5
39684: PUSH
39685: LD_VAR 0 1
39689: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39690: LD_VAR 0 1
39694: NOT
39695: PUSH
39696: LD_VAR 0 2
39700: NOT
39701: OR
39702: PUSH
39703: LD_VAR 0 3
39707: NOT
39708: OR
39709: PUSH
39710: LD_VAR 0 2
39714: PUSH
39715: LD_VAR 0 1
39719: GREATER
39720: OR
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: LD_VAR 0 1
39731: GREATER
39732: OR
39733: IFFALSE 39737
// exit ;
39735: GO 40033
// if direction then
39737: LD_VAR 0 4
39741: IFFALSE 39805
// begin d := 1 ;
39743: LD_ADDR_VAR 0 9
39747: PUSH
39748: LD_INT 1
39750: ST_TO_ADDR
// if i_from > i_to then
39751: LD_VAR 0 2
39755: PUSH
39756: LD_VAR 0 3
39760: GREATER
39761: IFFALSE 39787
// length := ( array - i_from ) + i_to else
39763: LD_ADDR_VAR 0 11
39767: PUSH
39768: LD_VAR 0 1
39772: PUSH
39773: LD_VAR 0 2
39777: MINUS
39778: PUSH
39779: LD_VAR 0 3
39783: PLUS
39784: ST_TO_ADDR
39785: GO 39803
// length := i_to - i_from ;
39787: LD_ADDR_VAR 0 11
39791: PUSH
39792: LD_VAR 0 3
39796: PUSH
39797: LD_VAR 0 2
39801: MINUS
39802: ST_TO_ADDR
// end else
39803: GO 39866
// begin d := - 1 ;
39805: LD_ADDR_VAR 0 9
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: ST_TO_ADDR
// if i_from > i_to then
39814: LD_VAR 0 2
39818: PUSH
39819: LD_VAR 0 3
39823: GREATER
39824: IFFALSE 39844
// length := i_from - i_to else
39826: LD_ADDR_VAR 0 11
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_VAR 0 3
39840: MINUS
39841: ST_TO_ADDR
39842: GO 39866
// length := ( array - i_to ) + i_from ;
39844: LD_ADDR_VAR 0 11
39848: PUSH
39849: LD_VAR 0 1
39853: PUSH
39854: LD_VAR 0 3
39858: MINUS
39859: PUSH
39860: LD_VAR 0 2
39864: PLUS
39865: ST_TO_ADDR
// end ; if not length then
39866: LD_VAR 0 11
39870: NOT
39871: IFFALSE 39875
// exit ;
39873: GO 40033
// tmp := array ;
39875: LD_ADDR_VAR 0 10
39879: PUSH
39880: LD_VAR 0 1
39884: ST_TO_ADDR
// for i = 1 to length do
39885: LD_ADDR_VAR 0 6
39889: PUSH
39890: DOUBLE
39891: LD_INT 1
39893: DEC
39894: ST_TO_ADDR
39895: LD_VAR 0 11
39899: PUSH
39900: FOR_TO
39901: IFFALSE 40021
// begin for j = 1 to array do
39903: LD_ADDR_VAR 0 7
39907: PUSH
39908: DOUBLE
39909: LD_INT 1
39911: DEC
39912: ST_TO_ADDR
39913: LD_VAR 0 1
39917: PUSH
39918: FOR_TO
39919: IFFALSE 40007
// begin k := j + d ;
39921: LD_ADDR_VAR 0 8
39925: PUSH
39926: LD_VAR 0 7
39930: PUSH
39931: LD_VAR 0 9
39935: PLUS
39936: ST_TO_ADDR
// if k > array then
39937: LD_VAR 0 8
39941: PUSH
39942: LD_VAR 0 1
39946: GREATER
39947: IFFALSE 39957
// k := 1 ;
39949: LD_ADDR_VAR 0 8
39953: PUSH
39954: LD_INT 1
39956: ST_TO_ADDR
// if not k then
39957: LD_VAR 0 8
39961: NOT
39962: IFFALSE 39974
// k := array ;
39964: LD_ADDR_VAR 0 8
39968: PUSH
39969: LD_VAR 0 1
39973: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39974: LD_ADDR_VAR 0 10
39978: PUSH
39979: LD_VAR 0 10
39983: PPUSH
39984: LD_VAR 0 8
39988: PPUSH
39989: LD_VAR 0 1
39993: PUSH
39994: LD_VAR 0 7
39998: ARRAY
39999: PPUSH
40000: CALL_OW 1
40004: ST_TO_ADDR
// end ;
40005: GO 39918
40007: POP
40008: POP
// array := tmp ;
40009: LD_ADDR_VAR 0 1
40013: PUSH
40014: LD_VAR 0 10
40018: ST_TO_ADDR
// end ;
40019: GO 39900
40021: POP
40022: POP
// result := array ;
40023: LD_ADDR_VAR 0 5
40027: PUSH
40028: LD_VAR 0 1
40032: ST_TO_ADDR
// end ;
40033: LD_VAR 0 5
40037: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
// result := 0 ;
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_INT 0
40049: ST_TO_ADDR
// if not array or not value in array then
40050: LD_VAR 0 1
40054: NOT
40055: PUSH
40056: LD_VAR 0 2
40060: PUSH
40061: LD_VAR 0 1
40065: IN
40066: NOT
40067: OR
40068: IFFALSE 40072
// exit ;
40070: GO 40126
// for i = 1 to array do
40072: LD_ADDR_VAR 0 4
40076: PUSH
40077: DOUBLE
40078: LD_INT 1
40080: DEC
40081: ST_TO_ADDR
40082: LD_VAR 0 1
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40124
// if value = array [ i ] then
40090: LD_VAR 0 2
40094: PUSH
40095: LD_VAR 0 1
40099: PUSH
40100: LD_VAR 0 4
40104: ARRAY
40105: EQUAL
40106: IFFALSE 40122
// begin result := i ;
40108: LD_ADDR_VAR 0 3
40112: PUSH
40113: LD_VAR 0 4
40117: ST_TO_ADDR
// exit ;
40118: POP
40119: POP
40120: GO 40126
// end ;
40122: GO 40087
40124: POP
40125: POP
// end ;
40126: LD_VAR 0 3
40130: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40131: LD_INT 0
40133: PPUSH
// vc_chassis := chassis ;
40134: LD_ADDR_OWVAR 37
40138: PUSH
40139: LD_VAR 0 1
40143: ST_TO_ADDR
// vc_engine := engine ;
40144: LD_ADDR_OWVAR 39
40148: PUSH
40149: LD_VAR 0 2
40153: ST_TO_ADDR
// vc_control := control ;
40154: LD_ADDR_OWVAR 38
40158: PUSH
40159: LD_VAR 0 3
40163: ST_TO_ADDR
// vc_weapon := weapon ;
40164: LD_ADDR_OWVAR 40
40168: PUSH
40169: LD_VAR 0 4
40173: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40174: LD_ADDR_OWVAR 41
40178: PUSH
40179: LD_VAR 0 5
40183: ST_TO_ADDR
// end ;
40184: LD_VAR 0 6
40188: RET
// export function WantPlant ( unit ) ; var task ; begin
40189: LD_INT 0
40191: PPUSH
40192: PPUSH
// result := false ;
40193: LD_ADDR_VAR 0 2
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: CALL_OW 437
40215: ST_TO_ADDR
// if task then
40216: LD_VAR 0 3
40220: IFFALSE 40248
// if task [ 1 ] [ 1 ] = p then
40222: LD_VAR 0 3
40226: PUSH
40227: LD_INT 1
40229: ARRAY
40230: PUSH
40231: LD_INT 1
40233: ARRAY
40234: PUSH
40235: LD_STRING p
40237: EQUAL
40238: IFFALSE 40248
// result := true ;
40240: LD_ADDR_VAR 0 2
40244: PUSH
40245: LD_INT 1
40247: ST_TO_ADDR
// end ;
40248: LD_VAR 0 2
40252: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40253: LD_INT 0
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
// if pos < 1 then
40259: LD_VAR 0 2
40263: PUSH
40264: LD_INT 1
40266: LESS
40267: IFFALSE 40271
// exit ;
40269: GO 40574
// if pos = 1 then
40271: LD_VAR 0 2
40275: PUSH
40276: LD_INT 1
40278: EQUAL
40279: IFFALSE 40312
// result := Replace ( arr , pos [ 1 ] , value ) else
40281: LD_ADDR_VAR 0 4
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: LD_VAR 0 2
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: PPUSH
40300: LD_VAR 0 3
40304: PPUSH
40305: CALL_OW 1
40309: ST_TO_ADDR
40310: GO 40574
// begin tmp := arr ;
40312: LD_ADDR_VAR 0 6
40316: PUSH
40317: LD_VAR 0 1
40321: ST_TO_ADDR
// s_arr := [ tmp ] ;
40322: LD_ADDR_VAR 0 7
40326: PUSH
40327: LD_VAR 0 6
40331: PUSH
40332: EMPTY
40333: LIST
40334: ST_TO_ADDR
// for i = 1 to pos - 1 do
40335: LD_ADDR_VAR 0 5
40339: PUSH
40340: DOUBLE
40341: LD_INT 1
40343: DEC
40344: ST_TO_ADDR
40345: LD_VAR 0 2
40349: PUSH
40350: LD_INT 1
40352: MINUS
40353: PUSH
40354: FOR_TO
40355: IFFALSE 40400
// begin tmp := tmp [ pos [ i ] ] ;
40357: LD_ADDR_VAR 0 6
40361: PUSH
40362: LD_VAR 0 6
40366: PUSH
40367: LD_VAR 0 2
40371: PUSH
40372: LD_VAR 0 5
40376: ARRAY
40377: ARRAY
40378: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40379: LD_ADDR_VAR 0 7
40383: PUSH
40384: LD_VAR 0 7
40388: PUSH
40389: LD_VAR 0 6
40393: PUSH
40394: EMPTY
40395: LIST
40396: ADD
40397: ST_TO_ADDR
// end ;
40398: GO 40354
40400: POP
40401: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40402: LD_ADDR_VAR 0 6
40406: PUSH
40407: LD_VAR 0 6
40411: PPUSH
40412: LD_VAR 0 2
40416: PUSH
40417: LD_VAR 0 2
40421: ARRAY
40422: PPUSH
40423: LD_VAR 0 3
40427: PPUSH
40428: CALL_OW 1
40432: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40433: LD_ADDR_VAR 0 7
40437: PUSH
40438: LD_VAR 0 7
40442: PPUSH
40443: LD_VAR 0 7
40447: PPUSH
40448: LD_VAR 0 6
40452: PPUSH
40453: CALL_OW 1
40457: ST_TO_ADDR
// for i = s_arr downto 2 do
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: DOUBLE
40464: LD_VAR 0 7
40468: INC
40469: ST_TO_ADDR
40470: LD_INT 2
40472: PUSH
40473: FOR_DOWNTO
40474: IFFALSE 40558
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40476: LD_ADDR_VAR 0 6
40480: PUSH
40481: LD_VAR 0 7
40485: PUSH
40486: LD_VAR 0 5
40490: PUSH
40491: LD_INT 1
40493: MINUS
40494: ARRAY
40495: PPUSH
40496: LD_VAR 0 2
40500: PUSH
40501: LD_VAR 0 5
40505: PUSH
40506: LD_INT 1
40508: MINUS
40509: ARRAY
40510: PPUSH
40511: LD_VAR 0 7
40515: PUSH
40516: LD_VAR 0 5
40520: ARRAY
40521: PPUSH
40522: CALL_OW 1
40526: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40527: LD_ADDR_VAR 0 7
40531: PUSH
40532: LD_VAR 0 7
40536: PPUSH
40537: LD_VAR 0 5
40541: PUSH
40542: LD_INT 1
40544: MINUS
40545: PPUSH
40546: LD_VAR 0 6
40550: PPUSH
40551: CALL_OW 1
40555: ST_TO_ADDR
// end ;
40556: GO 40473
40558: POP
40559: POP
// result := s_arr [ 1 ] ;
40560: LD_ADDR_VAR 0 4
40564: PUSH
40565: LD_VAR 0 7
40569: PUSH
40570: LD_INT 1
40572: ARRAY
40573: ST_TO_ADDR
// end ; end ;
40574: LD_VAR 0 4
40578: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40579: LD_INT 0
40581: PPUSH
40582: PPUSH
// if not list then
40583: LD_VAR 0 1
40587: NOT
40588: IFFALSE 40592
// exit ;
40590: GO 40683
// i := list [ pos1 ] ;
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 1
40601: PUSH
40602: LD_VAR 0 2
40606: ARRAY
40607: ST_TO_ADDR
// if not i then
40608: LD_VAR 0 5
40612: NOT
40613: IFFALSE 40617
// exit ;
40615: GO 40683
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40617: LD_ADDR_VAR 0 1
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: LD_VAR 0 2
40631: PPUSH
40632: LD_VAR 0 1
40636: PUSH
40637: LD_VAR 0 3
40641: ARRAY
40642: PPUSH
40643: CALL_OW 1
40647: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40648: LD_ADDR_VAR 0 1
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: LD_VAR 0 3
40662: PPUSH
40663: LD_VAR 0 5
40667: PPUSH
40668: CALL_OW 1
40672: ST_TO_ADDR
// result := list ;
40673: LD_ADDR_VAR 0 4
40677: PUSH
40678: LD_VAR 0 1
40682: ST_TO_ADDR
// end ;
40683: LD_VAR 0 4
40687: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40688: LD_INT 0
40690: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 250
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 251
40715: PPUSH
40716: LD_VAR 0 2
40720: PPUSH
40721: LD_VAR 0 3
40725: PPUSH
40726: LD_VAR 0 4
40730: PPUSH
40731: CALL 40741 0 5
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 5
40740: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
// if not list then
40747: LD_VAR 0 3
40751: NOT
40752: IFFALSE 40756
// exit ;
40754: GO 41144
// result := [ ] ;
40756: LD_ADDR_VAR 0 6
40760: PUSH
40761: EMPTY
40762: ST_TO_ADDR
// for i in list do
40763: LD_ADDR_VAR 0 7
40767: PUSH
40768: LD_VAR 0 3
40772: PUSH
40773: FOR_IN
40774: IFFALSE 40976
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40776: LD_ADDR_VAR 0 9
40780: PUSH
40781: LD_VAR 0 7
40785: PPUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL_OW 297
40800: ST_TO_ADDR
// if not result then
40801: LD_VAR 0 6
40805: NOT
40806: IFFALSE 40832
// result := [ [ i , tmp ] ] else
40808: LD_ADDR_VAR 0 6
40812: PUSH
40813: LD_VAR 0 7
40817: PUSH
40818: LD_VAR 0 9
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: EMPTY
40828: LIST
40829: ST_TO_ADDR
40830: GO 40974
// begin if result [ result ] [ 2 ] < tmp then
40832: LD_VAR 0 6
40836: PUSH
40837: LD_VAR 0 6
40841: ARRAY
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: PUSH
40847: LD_VAR 0 9
40851: LESS
40852: IFFALSE 40894
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40854: LD_ADDR_VAR 0 6
40858: PUSH
40859: LD_VAR 0 6
40863: PPUSH
40864: LD_VAR 0 6
40868: PUSH
40869: LD_INT 1
40871: PLUS
40872: PPUSH
40873: LD_VAR 0 7
40877: PUSH
40878: LD_VAR 0 9
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PPUSH
40887: CALL_OW 2
40891: ST_TO_ADDR
40892: GO 40974
// for j = 1 to result do
40894: LD_ADDR_VAR 0 8
40898: PUSH
40899: DOUBLE
40900: LD_INT 1
40902: DEC
40903: ST_TO_ADDR
40904: LD_VAR 0 6
40908: PUSH
40909: FOR_TO
40910: IFFALSE 40972
// begin if tmp < result [ j ] [ 2 ] then
40912: LD_VAR 0 9
40916: PUSH
40917: LD_VAR 0 6
40921: PUSH
40922: LD_VAR 0 8
40926: ARRAY
40927: PUSH
40928: LD_INT 2
40930: ARRAY
40931: LESS
40932: IFFALSE 40970
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40934: LD_ADDR_VAR 0 6
40938: PUSH
40939: LD_VAR 0 6
40943: PPUSH
40944: LD_VAR 0 8
40948: PPUSH
40949: LD_VAR 0 7
40953: PUSH
40954: LD_VAR 0 9
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PPUSH
40963: CALL_OW 2
40967: ST_TO_ADDR
// break ;
40968: GO 40972
// end ; end ;
40970: GO 40909
40972: POP
40973: POP
// end ; end ;
40974: GO 40773
40976: POP
40977: POP
// if result and not asc then
40978: LD_VAR 0 6
40982: PUSH
40983: LD_VAR 0 4
40987: NOT
40988: AND
40989: IFFALSE 41064
// begin tmp := result ;
40991: LD_ADDR_VAR 0 9
40995: PUSH
40996: LD_VAR 0 6
41000: ST_TO_ADDR
// for i = tmp downto 1 do
41001: LD_ADDR_VAR 0 7
41005: PUSH
41006: DOUBLE
41007: LD_VAR 0 9
41011: INC
41012: ST_TO_ADDR
41013: LD_INT 1
41015: PUSH
41016: FOR_DOWNTO
41017: IFFALSE 41062
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41019: LD_ADDR_VAR 0 6
41023: PUSH
41024: LD_VAR 0 6
41028: PPUSH
41029: LD_VAR 0 9
41033: PUSH
41034: LD_VAR 0 7
41038: MINUS
41039: PUSH
41040: LD_INT 1
41042: PLUS
41043: PPUSH
41044: LD_VAR 0 9
41048: PUSH
41049: LD_VAR 0 7
41053: ARRAY
41054: PPUSH
41055: CALL_OW 1
41059: ST_TO_ADDR
41060: GO 41016
41062: POP
41063: POP
// end ; tmp := [ ] ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: EMPTY
41070: ST_TO_ADDR
// if mode then
41071: LD_VAR 0 5
41075: IFFALSE 41144
// begin for i = 1 to result do
41077: LD_ADDR_VAR 0 7
41081: PUSH
41082: DOUBLE
41083: LD_INT 1
41085: DEC
41086: ST_TO_ADDR
41087: LD_VAR 0 6
41091: PUSH
41092: FOR_TO
41093: IFFALSE 41132
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41095: LD_ADDR_VAR 0 9
41099: PUSH
41100: LD_VAR 0 9
41104: PPUSH
41105: LD_VAR 0 7
41109: PPUSH
41110: LD_VAR 0 6
41114: PUSH
41115: LD_VAR 0 7
41119: ARRAY
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: PPUSH
41125: CALL_OW 1
41129: ST_TO_ADDR
41130: GO 41092
41132: POP
41133: POP
// result := tmp ;
41134: LD_ADDR_VAR 0 6
41138: PUSH
41139: LD_VAR 0 9
41143: ST_TO_ADDR
// end ; end ;
41144: LD_VAR 0 6
41148: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41149: LD_INT 0
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
41156: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41157: LD_ADDR_VAR 0 5
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: ST_TO_ADDR
// if not x or not y then
41179: LD_VAR 0 2
41183: NOT
41184: PUSH
41185: LD_VAR 0 3
41189: NOT
41190: OR
41191: IFFALSE 41195
// exit ;
41193: GO 42845
// if not range then
41195: LD_VAR 0 4
41199: NOT
41200: IFFALSE 41210
// range := 10 ;
41202: LD_ADDR_VAR 0 4
41206: PUSH
41207: LD_INT 10
41209: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41210: LD_ADDR_VAR 0 8
41214: PUSH
41215: LD_INT 81
41217: PUSH
41218: LD_VAR 0 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 92
41229: PUSH
41230: LD_VAR 0 2
41234: PUSH
41235: LD_VAR 0 3
41239: PUSH
41240: LD_VAR 0 4
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: LD_INT 21
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PPUSH
41273: CALL_OW 69
41277: ST_TO_ADDR
// if not tmp then
41278: LD_VAR 0 8
41282: NOT
41283: IFFALSE 41287
// exit ;
41285: GO 42845
// for i in tmp do
41287: LD_ADDR_VAR 0 6
41291: PUSH
41292: LD_VAR 0 8
41296: PUSH
41297: FOR_IN
41298: IFFALSE 42820
// begin points := [ 0 , 0 , 0 ] ;
41300: LD_ADDR_VAR 0 9
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: ST_TO_ADDR
// bpoints := 1 ;
41319: LD_ADDR_VAR 0 10
41323: PUSH
41324: LD_INT 1
41326: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41327: LD_VAR 0 6
41331: PPUSH
41332: CALL_OW 247
41336: PUSH
41337: LD_INT 1
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41923
41345: POP
// begin if GetClass ( i ) = 1 then
41346: LD_VAR 0 6
41350: PPUSH
41351: CALL_OW 257
41355: PUSH
41356: LD_INT 1
41358: EQUAL
41359: IFFALSE 41380
// points := [ 10 , 5 , 3 ] ;
41361: LD_ADDR_VAR 0 9
41365: PUSH
41366: LD_INT 10
41368: PUSH
41369: LD_INT 5
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41380: LD_VAR 0 6
41384: PPUSH
41385: CALL_OW 257
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: LD_INT 4
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: IN
41404: IFFALSE 41425
// points := [ 3 , 2 , 1 ] ;
41406: LD_ADDR_VAR 0 9
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41425: LD_VAR 0 6
41429: PPUSH
41430: CALL_OW 257
41434: PUSH
41435: LD_INT 5
41437: EQUAL
41438: IFFALSE 41459
// points := [ 130 , 5 , 2 ] ;
41440: LD_ADDR_VAR 0 9
41444: PUSH
41445: LD_INT 130
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41459: LD_VAR 0 6
41463: PPUSH
41464: CALL_OW 257
41468: PUSH
41469: LD_INT 8
41471: EQUAL
41472: IFFALSE 41493
// points := [ 35 , 35 , 30 ] ;
41474: LD_ADDR_VAR 0 9
41478: PUSH
41479: LD_INT 35
41481: PUSH
41482: LD_INT 35
41484: PUSH
41485: LD_INT 30
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41493: LD_VAR 0 6
41497: PPUSH
41498: CALL_OW 257
41502: PUSH
41503: LD_INT 9
41505: EQUAL
41506: IFFALSE 41527
// points := [ 20 , 55 , 40 ] ;
41508: LD_ADDR_VAR 0 9
41512: PUSH
41513: LD_INT 20
41515: PUSH
41516: LD_INT 55
41518: PUSH
41519: LD_INT 40
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41527: LD_VAR 0 6
41531: PPUSH
41532: CALL_OW 257
41536: PUSH
41537: LD_INT 12
41539: PUSH
41540: LD_INT 16
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: IN
41547: IFFALSE 41568
// points := [ 5 , 3 , 2 ] ;
41549: LD_ADDR_VAR 0 9
41553: PUSH
41554: LD_INT 5
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41568: LD_VAR 0 6
41572: PPUSH
41573: CALL_OW 257
41577: PUSH
41578: LD_INT 17
41580: EQUAL
41581: IFFALSE 41602
// points := [ 100 , 50 , 75 ] ;
41583: LD_ADDR_VAR 0 9
41587: PUSH
41588: LD_INT 100
41590: PUSH
41591: LD_INT 50
41593: PUSH
41594: LD_INT 75
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41602: LD_VAR 0 6
41606: PPUSH
41607: CALL_OW 257
41611: PUSH
41612: LD_INT 15
41614: EQUAL
41615: IFFALSE 41636
// points := [ 10 , 5 , 3 ] ;
41617: LD_ADDR_VAR 0 9
41621: PUSH
41622: LD_INT 10
41624: PUSH
41625: LD_INT 5
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41636: LD_VAR 0 6
41640: PPUSH
41641: CALL_OW 257
41645: PUSH
41646: LD_INT 14
41648: EQUAL
41649: IFFALSE 41670
// points := [ 10 , 0 , 0 ] ;
41651: LD_ADDR_VAR 0 9
41655: PUSH
41656: LD_INT 10
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41670: LD_VAR 0 6
41674: PPUSH
41675: CALL_OW 257
41679: PUSH
41680: LD_INT 11
41682: EQUAL
41683: IFFALSE 41704
// points := [ 30 , 10 , 5 ] ;
41685: LD_ADDR_VAR 0 9
41689: PUSH
41690: LD_INT 30
41692: PUSH
41693: LD_INT 10
41695: PUSH
41696: LD_INT 5
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41704: LD_VAR 0 1
41708: PPUSH
41709: LD_INT 5
41711: PPUSH
41712: CALL_OW 321
41716: PUSH
41717: LD_INT 2
41719: EQUAL
41720: IFFALSE 41737
// bpoints := bpoints * 1.8 ;
41722: LD_ADDR_VAR 0 10
41726: PUSH
41727: LD_VAR 0 10
41731: PUSH
41732: LD_REAL  1.80000000000000E+0000
41735: MUL
41736: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41737: LD_VAR 0 6
41741: PPUSH
41742: CALL_OW 257
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 3
41755: PUSH
41756: LD_INT 4
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: IN
41765: PUSH
41766: LD_VAR 0 1
41770: PPUSH
41771: LD_INT 51
41773: PPUSH
41774: CALL_OW 321
41778: PUSH
41779: LD_INT 2
41781: EQUAL
41782: AND
41783: IFFALSE 41800
// bpoints := bpoints * 1.2 ;
41785: LD_ADDR_VAR 0 10
41789: PUSH
41790: LD_VAR 0 10
41794: PUSH
41795: LD_REAL  1.20000000000000E+0000
41798: MUL
41799: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41800: LD_VAR 0 6
41804: PPUSH
41805: CALL_OW 257
41809: PUSH
41810: LD_INT 5
41812: PUSH
41813: LD_INT 7
41815: PUSH
41816: LD_INT 9
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: IN
41824: PUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: LD_INT 52
41832: PPUSH
41833: CALL_OW 321
41837: PUSH
41838: LD_INT 2
41840: EQUAL
41841: AND
41842: IFFALSE 41859
// bpoints := bpoints * 1.5 ;
41844: LD_ADDR_VAR 0 10
41848: PUSH
41849: LD_VAR 0 10
41853: PUSH
41854: LD_REAL  1.50000000000000E+0000
41857: MUL
41858: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41859: LD_VAR 0 1
41863: PPUSH
41864: LD_INT 66
41866: PPUSH
41867: CALL_OW 321
41871: PUSH
41872: LD_INT 2
41874: EQUAL
41875: IFFALSE 41892
// bpoints := bpoints * 1.1 ;
41877: LD_ADDR_VAR 0 10
41881: PUSH
41882: LD_VAR 0 10
41886: PUSH
41887: LD_REAL  1.10000000000000E+0000
41890: MUL
41891: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41892: LD_ADDR_VAR 0 10
41896: PUSH
41897: LD_VAR 0 10
41901: PUSH
41902: LD_VAR 0 6
41906: PPUSH
41907: LD_INT 1
41909: PPUSH
41910: CALL_OW 259
41914: PUSH
41915: LD_REAL  1.15000000000000E+0000
41918: MUL
41919: MUL
41920: ST_TO_ADDR
// end ; unit_vehicle :
41921: GO 42749
41923: LD_INT 2
41925: DOUBLE
41926: EQUAL
41927: IFTRUE 41931
41929: GO 42737
41931: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41932: LD_VAR 0 6
41936: PPUSH
41937: CALL_OW 264
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 42
41947: PUSH
41948: LD_INT 24
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: IN
41956: IFFALSE 41977
// points := [ 25 , 5 , 3 ] ;
41958: LD_ADDR_VAR 0 9
41962: PUSH
41963: LD_INT 25
41965: PUSH
41966: LD_INT 5
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41977: LD_VAR 0 6
41981: PPUSH
41982: CALL_OW 264
41986: PUSH
41987: LD_INT 4
41989: PUSH
41990: LD_INT 43
41992: PUSH
41993: LD_INT 25
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: IN
42001: IFFALSE 42022
// points := [ 40 , 15 , 5 ] ;
42003: LD_ADDR_VAR 0 9
42007: PUSH
42008: LD_INT 40
42010: PUSH
42011: LD_INT 15
42013: PUSH
42014: LD_INT 5
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42022: LD_VAR 0 6
42026: PPUSH
42027: CALL_OW 264
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: LD_INT 23
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: IN
42042: IFFALSE 42063
// points := [ 7 , 25 , 8 ] ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_INT 7
42051: PUSH
42052: LD_INT 25
42054: PUSH
42055: LD_INT 8
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42063: LD_VAR 0 6
42067: PPUSH
42068: CALL_OW 264
42072: PUSH
42073: LD_INT 5
42075: PUSH
42076: LD_INT 27
42078: PUSH
42079: LD_INT 44
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: IN
42087: IFFALSE 42108
// points := [ 14 , 50 , 16 ] ;
42089: LD_ADDR_VAR 0 9
42093: PUSH
42094: LD_INT 14
42096: PUSH
42097: LD_INT 50
42099: PUSH
42100: LD_INT 16
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42108: LD_VAR 0 6
42112: PPUSH
42113: CALL_OW 264
42117: PUSH
42118: LD_INT 6
42120: PUSH
42121: LD_INT 46
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: IN
42128: IFFALSE 42149
// points := [ 32 , 120 , 70 ] ;
42130: LD_ADDR_VAR 0 9
42134: PUSH
42135: LD_INT 32
42137: PUSH
42138: LD_INT 120
42140: PUSH
42141: LD_INT 70
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42149: LD_VAR 0 6
42153: PPUSH
42154: CALL_OW 264
42158: PUSH
42159: LD_INT 7
42161: PUSH
42162: LD_INT 28
42164: PUSH
42165: LD_INT 45
42167: PUSH
42168: LD_INT 92
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: IN
42177: IFFALSE 42198
// points := [ 35 , 20 , 45 ] ;
42179: LD_ADDR_VAR 0 9
42183: PUSH
42184: LD_INT 35
42186: PUSH
42187: LD_INT 20
42189: PUSH
42190: LD_INT 45
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42198: LD_VAR 0 6
42202: PPUSH
42203: CALL_OW 264
42207: PUSH
42208: LD_INT 47
42210: PUSH
42211: EMPTY
42212: LIST
42213: IN
42214: IFFALSE 42235
// points := [ 67 , 45 , 75 ] ;
42216: LD_ADDR_VAR 0 9
42220: PUSH
42221: LD_INT 67
42223: PUSH
42224: LD_INT 45
42226: PUSH
42227: LD_INT 75
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42235: LD_VAR 0 6
42239: PPUSH
42240: CALL_OW 264
42244: PUSH
42245: LD_INT 26
42247: PUSH
42248: EMPTY
42249: LIST
42250: IN
42251: IFFALSE 42272
// points := [ 120 , 30 , 80 ] ;
42253: LD_ADDR_VAR 0 9
42257: PUSH
42258: LD_INT 120
42260: PUSH
42261: LD_INT 30
42263: PUSH
42264: LD_INT 80
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42272: LD_VAR 0 6
42276: PPUSH
42277: CALL_OW 264
42281: PUSH
42282: LD_INT 22
42284: PUSH
42285: EMPTY
42286: LIST
42287: IN
42288: IFFALSE 42309
// points := [ 40 , 1 , 1 ] ;
42290: LD_ADDR_VAR 0 9
42294: PUSH
42295: LD_INT 40
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42309: LD_VAR 0 6
42313: PPUSH
42314: CALL_OW 264
42318: PUSH
42319: LD_INT 29
42321: PUSH
42322: EMPTY
42323: LIST
42324: IN
42325: IFFALSE 42346
// points := [ 70 , 200 , 400 ] ;
42327: LD_ADDR_VAR 0 9
42331: PUSH
42332: LD_INT 70
42334: PUSH
42335: LD_INT 200
42337: PUSH
42338: LD_INT 400
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42346: LD_VAR 0 6
42350: PPUSH
42351: CALL_OW 264
42355: PUSH
42356: LD_INT 14
42358: PUSH
42359: LD_INT 53
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: IN
42366: IFFALSE 42387
// points := [ 40 , 10 , 20 ] ;
42368: LD_ADDR_VAR 0 9
42372: PUSH
42373: LD_INT 40
42375: PUSH
42376: LD_INT 10
42378: PUSH
42379: LD_INT 20
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42387: LD_VAR 0 6
42391: PPUSH
42392: CALL_OW 264
42396: PUSH
42397: LD_INT 9
42399: PUSH
42400: EMPTY
42401: LIST
42402: IN
42403: IFFALSE 42424
// points := [ 5 , 70 , 20 ] ;
42405: LD_ADDR_VAR 0 9
42409: PUSH
42410: LD_INT 5
42412: PUSH
42413: LD_INT 70
42415: PUSH
42416: LD_INT 20
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42424: LD_VAR 0 6
42428: PPUSH
42429: CALL_OW 264
42433: PUSH
42434: LD_INT 10
42436: PUSH
42437: EMPTY
42438: LIST
42439: IN
42440: IFFALSE 42461
// points := [ 35 , 110 , 70 ] ;
42442: LD_ADDR_VAR 0 9
42446: PUSH
42447: LD_INT 35
42449: PUSH
42450: LD_INT 110
42452: PUSH
42453: LD_INT 70
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42461: LD_VAR 0 6
42465: PPUSH
42466: CALL_OW 265
42470: PUSH
42471: LD_INT 25
42473: EQUAL
42474: IFFALSE 42495
// points := [ 80 , 65 , 100 ] ;
42476: LD_ADDR_VAR 0 9
42480: PUSH
42481: LD_INT 80
42483: PUSH
42484: LD_INT 65
42486: PUSH
42487: LD_INT 100
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42495: LD_VAR 0 6
42499: PPUSH
42500: CALL_OW 263
42504: PUSH
42505: LD_INT 1
42507: EQUAL
42508: IFFALSE 42543
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42510: LD_ADDR_VAR 0 10
42514: PUSH
42515: LD_VAR 0 10
42519: PUSH
42520: LD_VAR 0 6
42524: PPUSH
42525: CALL_OW 311
42529: PPUSH
42530: LD_INT 3
42532: PPUSH
42533: CALL_OW 259
42537: PUSH
42538: LD_INT 4
42540: MUL
42541: MUL
42542: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42543: LD_VAR 0 6
42547: PPUSH
42548: CALL_OW 263
42552: PUSH
42553: LD_INT 2
42555: EQUAL
42556: IFFALSE 42607
// begin j := IsControledBy ( i ) ;
42558: LD_ADDR_VAR 0 7
42562: PUSH
42563: LD_VAR 0 6
42567: PPUSH
42568: CALL_OW 312
42572: ST_TO_ADDR
// if j then
42573: LD_VAR 0 7
42577: IFFALSE 42607
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42579: LD_ADDR_VAR 0 10
42583: PUSH
42584: LD_VAR 0 10
42588: PUSH
42589: LD_VAR 0 7
42593: PPUSH
42594: LD_INT 3
42596: PPUSH
42597: CALL_OW 259
42601: PUSH
42602: LD_INT 3
42604: MUL
42605: MUL
42606: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42607: LD_VAR 0 6
42611: PPUSH
42612: CALL_OW 264
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 6
42622: PUSH
42623: LD_INT 46
42625: PUSH
42626: LD_INT 44
42628: PUSH
42629: LD_INT 47
42631: PUSH
42632: LD_INT 45
42634: PUSH
42635: LD_INT 28
42637: PUSH
42638: LD_INT 7
42640: PUSH
42641: LD_INT 27
42643: PUSH
42644: LD_INT 29
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: IN
42659: PUSH
42660: LD_VAR 0 1
42664: PPUSH
42665: LD_INT 52
42667: PPUSH
42668: CALL_OW 321
42672: PUSH
42673: LD_INT 2
42675: EQUAL
42676: AND
42677: IFFALSE 42694
// bpoints := bpoints * 1.2 ;
42679: LD_ADDR_VAR 0 10
42683: PUSH
42684: LD_VAR 0 10
42688: PUSH
42689: LD_REAL  1.20000000000000E+0000
42692: MUL
42693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42694: LD_VAR 0 6
42698: PPUSH
42699: CALL_OW 264
42703: PUSH
42704: LD_INT 6
42706: PUSH
42707: LD_INT 46
42709: PUSH
42710: LD_INT 47
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: IN
42718: IFFALSE 42735
// bpoints := bpoints * 1.2 ;
42720: LD_ADDR_VAR 0 10
42724: PUSH
42725: LD_VAR 0 10
42729: PUSH
42730: LD_REAL  1.20000000000000E+0000
42733: MUL
42734: ST_TO_ADDR
// end ; unit_building :
42735: GO 42749
42737: LD_INT 3
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42745
42743: GO 42748
42745: POP
// ; end ;
42746: GO 42749
42748: POP
// for j = 1 to 3 do
42749: LD_ADDR_VAR 0 7
42753: PUSH
42754: DOUBLE
42755: LD_INT 1
42757: DEC
42758: ST_TO_ADDR
42759: LD_INT 3
42761: PUSH
42762: FOR_TO
42763: IFFALSE 42816
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42765: LD_ADDR_VAR 0 5
42769: PUSH
42770: LD_VAR 0 5
42774: PPUSH
42775: LD_VAR 0 7
42779: PPUSH
42780: LD_VAR 0 5
42784: PUSH
42785: LD_VAR 0 7
42789: ARRAY
42790: PUSH
42791: LD_VAR 0 9
42795: PUSH
42796: LD_VAR 0 7
42800: ARRAY
42801: PUSH
42802: LD_VAR 0 10
42806: MUL
42807: PLUS
42808: PPUSH
42809: CALL_OW 1
42813: ST_TO_ADDR
42814: GO 42762
42816: POP
42817: POP
// end ;
42818: GO 41297
42820: POP
42821: POP
// result := Replace ( result , 4 , tmp ) ;
42822: LD_ADDR_VAR 0 5
42826: PUSH
42827: LD_VAR 0 5
42831: PPUSH
42832: LD_INT 4
42834: PPUSH
42835: LD_VAR 0 8
42839: PPUSH
42840: CALL_OW 1
42844: ST_TO_ADDR
// end ;
42845: LD_VAR 0 5
42849: RET
// export function DangerAtRange ( unit , range ) ; begin
42850: LD_INT 0
42852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42853: LD_ADDR_VAR 0 3
42857: PUSH
42858: LD_VAR 0 1
42862: PPUSH
42863: CALL_OW 255
42867: PPUSH
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 250
42877: PPUSH
42878: LD_VAR 0 1
42882: PPUSH
42883: CALL_OW 251
42887: PPUSH
42888: LD_VAR 0 2
42892: PPUSH
42893: CALL 41149 0 4
42897: ST_TO_ADDR
// end ;
42898: LD_VAR 0 3
42902: RET
// export function DangerInArea ( side , area ) ; begin
42903: LD_INT 0
42905: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_VAR 0 2
42915: PPUSH
42916: LD_INT 81
42918: PUSH
42919: LD_VAR 0 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PPUSH
42928: CALL_OW 70
42932: ST_TO_ADDR
// end ;
42933: LD_VAR 0 3
42937: RET
// export function IsExtension ( b ) ; begin
42938: LD_INT 0
42940: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42941: LD_ADDR_VAR 0 2
42945: PUSH
42946: LD_VAR 0 1
42950: PUSH
42951: LD_INT 23
42953: PUSH
42954: LD_INT 20
42956: PUSH
42957: LD_INT 22
42959: PUSH
42960: LD_INT 17
42962: PUSH
42963: LD_INT 24
42965: PUSH
42966: LD_INT 21
42968: PUSH
42969: LD_INT 19
42971: PUSH
42972: LD_INT 16
42974: PUSH
42975: LD_INT 25
42977: PUSH
42978: LD_INT 18
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: IN
42993: ST_TO_ADDR
// end ;
42994: LD_VAR 0 2
42998: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42999: LD_INT 0
43001: PPUSH
43002: PPUSH
43003: PPUSH
// result := [ ] ;
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: EMPTY
43010: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43011: LD_ADDR_VAR 0 5
43015: PUSH
43016: LD_VAR 0 2
43020: PPUSH
43021: LD_INT 21
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PPUSH
43031: CALL_OW 70
43035: ST_TO_ADDR
// if not tmp then
43036: LD_VAR 0 5
43040: NOT
43041: IFFALSE 43045
// exit ;
43043: GO 43109
// if checkLink then
43045: LD_VAR 0 3
43049: IFFALSE 43099
// begin for i in tmp do
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_VAR 0 5
43060: PUSH
43061: FOR_IN
43062: IFFALSE 43097
// if GetBase ( i ) <> base then
43064: LD_VAR 0 6
43068: PPUSH
43069: CALL_OW 274
43073: PUSH
43074: LD_VAR 0 1
43078: NONEQUAL
43079: IFFALSE 43095
// ComLinkToBase ( base , i ) ;
43081: LD_VAR 0 1
43085: PPUSH
43086: LD_VAR 0 6
43090: PPUSH
43091: CALL_OW 169
43095: GO 43061
43097: POP
43098: POP
// end ; result := tmp ;
43099: LD_ADDR_VAR 0 4
43103: PUSH
43104: LD_VAR 0 5
43108: ST_TO_ADDR
// end ;
43109: LD_VAR 0 4
43113: RET
// export function ComComplete ( units , b ) ; var i ; begin
43114: LD_INT 0
43116: PPUSH
43117: PPUSH
// if not units then
43118: LD_VAR 0 1
43122: NOT
43123: IFFALSE 43127
// exit ;
43125: GO 43217
// for i in units do
43127: LD_ADDR_VAR 0 4
43131: PUSH
43132: LD_VAR 0 1
43136: PUSH
43137: FOR_IN
43138: IFFALSE 43215
// if BuildingStatus ( b ) = bs_build then
43140: LD_VAR 0 2
43144: PPUSH
43145: CALL_OW 461
43149: PUSH
43150: LD_INT 1
43152: EQUAL
43153: IFFALSE 43213
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43155: LD_VAR 0 4
43159: PPUSH
43160: LD_STRING h
43162: PUSH
43163: LD_VAR 0 2
43167: PPUSH
43168: CALL_OW 250
43172: PUSH
43173: LD_VAR 0 2
43177: PPUSH
43178: CALL_OW 251
43182: PUSH
43183: LD_VAR 0 2
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: PUSH
43206: EMPTY
43207: LIST
43208: PPUSH
43209: CALL_OW 446
43213: GO 43137
43215: POP
43216: POP
// end ;
43217: LD_VAR 0 3
43221: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43222: LD_INT 0
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43230: LD_VAR 0 1
43234: NOT
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 263
43245: PUSH
43246: LD_INT 2
43248: NONEQUAL
43249: OR
43250: IFFALSE 43254
// exit ;
43252: GO 43570
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43254: LD_ADDR_VAR 0 6
43258: PUSH
43259: LD_INT 22
43261: PUSH
43262: LD_VAR 0 1
43266: PPUSH
43267: CALL_OW 255
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 30
43281: PUSH
43282: LD_INT 36
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 34
43291: PUSH
43292: LD_INT 31
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PPUSH
43308: CALL_OW 69
43312: ST_TO_ADDR
// if not tmp then
43313: LD_VAR 0 6
43317: NOT
43318: IFFALSE 43322
// exit ;
43320: GO 43570
// result := [ ] ;
43322: LD_ADDR_VAR 0 2
43326: PUSH
43327: EMPTY
43328: ST_TO_ADDR
// for i in tmp do
43329: LD_ADDR_VAR 0 3
43333: PUSH
43334: LD_VAR 0 6
43338: PUSH
43339: FOR_IN
43340: IFFALSE 43411
// begin t := UnitsInside ( i ) ;
43342: LD_ADDR_VAR 0 4
43346: PUSH
43347: LD_VAR 0 3
43351: PPUSH
43352: CALL_OW 313
43356: ST_TO_ADDR
// if t then
43357: LD_VAR 0 4
43361: IFFALSE 43409
// for j in t do
43363: LD_ADDR_VAR 0 7
43367: PUSH
43368: LD_VAR 0 4
43372: PUSH
43373: FOR_IN
43374: IFFALSE 43407
// result := Replace ( result , result + 1 , j ) ;
43376: LD_ADDR_VAR 0 2
43380: PUSH
43381: LD_VAR 0 2
43385: PPUSH
43386: LD_VAR 0 2
43390: PUSH
43391: LD_INT 1
43393: PLUS
43394: PPUSH
43395: LD_VAR 0 7
43399: PPUSH
43400: CALL_OW 1
43404: ST_TO_ADDR
43405: GO 43373
43407: POP
43408: POP
// end ;
43409: GO 43339
43411: POP
43412: POP
// if not result then
43413: LD_VAR 0 2
43417: NOT
43418: IFFALSE 43422
// exit ;
43420: GO 43570
// mech := result [ 1 ] ;
43422: LD_ADDR_VAR 0 5
43426: PUSH
43427: LD_VAR 0 2
43431: PUSH
43432: LD_INT 1
43434: ARRAY
43435: ST_TO_ADDR
// if result > 1 then
43436: LD_VAR 0 2
43440: PUSH
43441: LD_INT 1
43443: GREATER
43444: IFFALSE 43556
// begin for i = 2 to result do
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: DOUBLE
43452: LD_INT 2
43454: DEC
43455: ST_TO_ADDR
43456: LD_VAR 0 2
43460: PUSH
43461: FOR_TO
43462: IFFALSE 43554
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43464: LD_ADDR_VAR 0 4
43468: PUSH
43469: LD_VAR 0 2
43473: PUSH
43474: LD_VAR 0 3
43478: ARRAY
43479: PPUSH
43480: LD_INT 3
43482: PPUSH
43483: CALL_OW 259
43487: PUSH
43488: LD_VAR 0 2
43492: PUSH
43493: LD_VAR 0 3
43497: ARRAY
43498: PPUSH
43499: CALL_OW 432
43503: MINUS
43504: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43505: LD_VAR 0 4
43509: PUSH
43510: LD_VAR 0 5
43514: PPUSH
43515: LD_INT 3
43517: PPUSH
43518: CALL_OW 259
43522: PUSH
43523: LD_VAR 0 5
43527: PPUSH
43528: CALL_OW 432
43532: MINUS
43533: GREATEREQUAL
43534: IFFALSE 43552
// mech := result [ i ] ;
43536: LD_ADDR_VAR 0 5
43540: PUSH
43541: LD_VAR 0 2
43545: PUSH
43546: LD_VAR 0 3
43550: ARRAY
43551: ST_TO_ADDR
// end ;
43552: GO 43461
43554: POP
43555: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43556: LD_VAR 0 1
43560: PPUSH
43561: LD_VAR 0 5
43565: PPUSH
43566: CALL_OW 135
// end ;
43570: LD_VAR 0 2
43574: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43575: LD_INT 0
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
// result := [ ] ;
43590: LD_ADDR_VAR 0 7
43594: PUSH
43595: EMPTY
43596: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43597: LD_VAR 0 1
43601: PPUSH
43602: CALL_OW 266
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: IN
43617: NOT
43618: IFFALSE 43622
// exit ;
43620: GO 45256
// if name then
43622: LD_VAR 0 3
43626: IFFALSE 43642
// SetBName ( base_dep , name ) ;
43628: LD_VAR 0 1
43632: PPUSH
43633: LD_VAR 0 3
43637: PPUSH
43638: CALL_OW 500
// base := GetBase ( base_dep ) ;
43642: LD_ADDR_VAR 0 15
43646: PUSH
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL_OW 274
43656: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43657: LD_ADDR_VAR 0 16
43661: PUSH
43662: LD_VAR 0 1
43666: PPUSH
43667: CALL_OW 255
43671: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43672: LD_ADDR_VAR 0 17
43676: PUSH
43677: LD_VAR 0 1
43681: PPUSH
43682: CALL_OW 248
43686: ST_TO_ADDR
// if sources then
43687: LD_VAR 0 5
43691: IFFALSE 43738
// for i = 1 to 3 do
43693: LD_ADDR_VAR 0 8
43697: PUSH
43698: DOUBLE
43699: LD_INT 1
43701: DEC
43702: ST_TO_ADDR
43703: LD_INT 3
43705: PUSH
43706: FOR_TO
43707: IFFALSE 43736
// AddResourceType ( base , i , sources [ i ] ) ;
43709: LD_VAR 0 15
43713: PPUSH
43714: LD_VAR 0 8
43718: PPUSH
43719: LD_VAR 0 5
43723: PUSH
43724: LD_VAR 0 8
43728: ARRAY
43729: PPUSH
43730: CALL_OW 276
43734: GO 43706
43736: POP
43737: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43738: LD_ADDR_VAR 0 18
43742: PUSH
43743: LD_VAR 0 15
43747: PPUSH
43748: LD_VAR 0 2
43752: PPUSH
43753: LD_INT 1
43755: PPUSH
43756: CALL 42999 0 3
43760: ST_TO_ADDR
// InitHc ;
43761: CALL_OW 19
// InitUc ;
43765: CALL_OW 18
// uc_side := side ;
43769: LD_ADDR_OWVAR 20
43773: PUSH
43774: LD_VAR 0 16
43778: ST_TO_ADDR
// uc_nation := nation ;
43779: LD_ADDR_OWVAR 21
43783: PUSH
43784: LD_VAR 0 17
43788: ST_TO_ADDR
// if buildings then
43789: LD_VAR 0 18
43793: IFFALSE 45115
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43795: LD_ADDR_VAR 0 19
43799: PUSH
43800: LD_VAR 0 18
43804: PPUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 30
43810: PUSH
43811: LD_INT 29
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 30
43820: PUSH
43821: LD_INT 30
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: PPUSH
43833: CALL_OW 72
43837: ST_TO_ADDR
// if tmp then
43838: LD_VAR 0 19
43842: IFFALSE 43890
// for i in tmp do
43844: LD_ADDR_VAR 0 8
43848: PUSH
43849: LD_VAR 0 19
43853: PUSH
43854: FOR_IN
43855: IFFALSE 43888
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43857: LD_VAR 0 8
43861: PPUSH
43862: CALL_OW 250
43866: PPUSH
43867: LD_VAR 0 8
43871: PPUSH
43872: CALL_OW 251
43876: PPUSH
43877: LD_VAR 0 16
43881: PPUSH
43882: CALL_OW 441
43886: GO 43854
43888: POP
43889: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43890: LD_VAR 0 18
43894: PPUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 30
43900: PUSH
43901: LD_INT 32
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 30
43910: PUSH
43911: LD_INT 33
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: PPUSH
43923: CALL_OW 72
43927: IFFALSE 44015
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43929: LD_ADDR_VAR 0 8
43933: PUSH
43934: LD_VAR 0 18
43938: PPUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 30
43944: PUSH
43945: LD_INT 32
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 30
43954: PUSH
43955: LD_INT 33
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: PPUSH
43967: CALL_OW 72
43971: PUSH
43972: FOR_IN
43973: IFFALSE 44013
// begin if not GetBWeapon ( i ) then
43975: LD_VAR 0 8
43979: PPUSH
43980: CALL_OW 269
43984: NOT
43985: IFFALSE 44011
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43987: LD_VAR 0 8
43991: PPUSH
43992: LD_VAR 0 8
43996: PPUSH
43997: LD_VAR 0 2
44001: PPUSH
44002: CALL 45261 0 2
44006: PPUSH
44007: CALL_OW 431
// end ;
44011: GO 43972
44013: POP
44014: POP
// end ; for i = 1 to personel do
44015: LD_ADDR_VAR 0 8
44019: PUSH
44020: DOUBLE
44021: LD_INT 1
44023: DEC
44024: ST_TO_ADDR
44025: LD_VAR 0 6
44029: PUSH
44030: FOR_TO
44031: IFFALSE 45095
// begin if i > 4 then
44033: LD_VAR 0 8
44037: PUSH
44038: LD_INT 4
44040: GREATER
44041: IFFALSE 44045
// break ;
44043: GO 45095
// case i of 1 :
44045: LD_VAR 0 8
44049: PUSH
44050: LD_INT 1
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44058
44056: GO 44138
44058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44059: LD_ADDR_VAR 0 12
44063: PUSH
44064: LD_VAR 0 18
44068: PPUSH
44069: LD_INT 22
44071: PUSH
44072: LD_VAR 0 16
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 58
44083: PUSH
44084: EMPTY
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 30
44092: PUSH
44093: LD_INT 32
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 30
44102: PUSH
44103: LD_INT 4
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 30
44112: PUSH
44113: LD_INT 5
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: PPUSH
44131: CALL_OW 72
44135: ST_TO_ADDR
44136: GO 44360
44138: LD_INT 2
44140: DOUBLE
44141: EQUAL
44142: IFTRUE 44146
44144: GO 44208
44146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44147: LD_ADDR_VAR 0 12
44151: PUSH
44152: LD_VAR 0 18
44156: PPUSH
44157: LD_INT 22
44159: PUSH
44160: LD_VAR 0 16
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 30
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 30
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 72
44205: ST_TO_ADDR
44206: GO 44360
44208: LD_INT 3
44210: DOUBLE
44211: EQUAL
44212: IFTRUE 44216
44214: GO 44278
44216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44217: LD_ADDR_VAR 0 12
44221: PUSH
44222: LD_VAR 0 18
44226: PPUSH
44227: LD_INT 22
44229: PUSH
44230: LD_VAR 0 16
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 30
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 30
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PPUSH
44271: CALL_OW 72
44275: ST_TO_ADDR
44276: GO 44360
44278: LD_INT 4
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44359
44286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44287: LD_ADDR_VAR 0 12
44291: PUSH
44292: LD_VAR 0 18
44296: PPUSH
44297: LD_INT 22
44299: PUSH
44300: LD_VAR 0 16
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 30
44314: PUSH
44315: LD_INT 6
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 30
44324: PUSH
44325: LD_INT 7
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 30
44334: PUSH
44335: LD_INT 8
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PPUSH
44352: CALL_OW 72
44356: ST_TO_ADDR
44357: GO 44360
44359: POP
// if i = 1 then
44360: LD_VAR 0 8
44364: PUSH
44365: LD_INT 1
44367: EQUAL
44368: IFFALSE 44479
// begin tmp := [ ] ;
44370: LD_ADDR_VAR 0 19
44374: PUSH
44375: EMPTY
44376: ST_TO_ADDR
// for j in f do
44377: LD_ADDR_VAR 0 9
44381: PUSH
44382: LD_VAR 0 12
44386: PUSH
44387: FOR_IN
44388: IFFALSE 44461
// if GetBType ( j ) = b_bunker then
44390: LD_VAR 0 9
44394: PPUSH
44395: CALL_OW 266
44399: PUSH
44400: LD_INT 32
44402: EQUAL
44403: IFFALSE 44430
// tmp := Insert ( tmp , 1 , j ) else
44405: LD_ADDR_VAR 0 19
44409: PUSH
44410: LD_VAR 0 19
44414: PPUSH
44415: LD_INT 1
44417: PPUSH
44418: LD_VAR 0 9
44422: PPUSH
44423: CALL_OW 2
44427: ST_TO_ADDR
44428: GO 44459
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44430: LD_ADDR_VAR 0 19
44434: PUSH
44435: LD_VAR 0 19
44439: PPUSH
44440: LD_VAR 0 19
44444: PUSH
44445: LD_INT 1
44447: PLUS
44448: PPUSH
44449: LD_VAR 0 9
44453: PPUSH
44454: CALL_OW 2
44458: ST_TO_ADDR
44459: GO 44387
44461: POP
44462: POP
// if tmp then
44463: LD_VAR 0 19
44467: IFFALSE 44479
// f := tmp ;
44469: LD_ADDR_VAR 0 12
44473: PUSH
44474: LD_VAR 0 19
44478: ST_TO_ADDR
// end ; x := personel [ i ] ;
44479: LD_ADDR_VAR 0 13
44483: PUSH
44484: LD_VAR 0 6
44488: PUSH
44489: LD_VAR 0 8
44493: ARRAY
44494: ST_TO_ADDR
// if x = - 1 then
44495: LD_VAR 0 13
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: EQUAL
44504: IFFALSE 44713
// begin for j in f do
44506: LD_ADDR_VAR 0 9
44510: PUSH
44511: LD_VAR 0 12
44515: PUSH
44516: FOR_IN
44517: IFFALSE 44709
// repeat InitHc ;
44519: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44523: LD_VAR 0 9
44527: PPUSH
44528: CALL_OW 266
44532: PUSH
44533: LD_INT 5
44535: EQUAL
44536: IFFALSE 44606
// begin if UnitsInside ( j ) < 3 then
44538: LD_VAR 0 9
44542: PPUSH
44543: CALL_OW 313
44547: PUSH
44548: LD_INT 3
44550: LESS
44551: IFFALSE 44587
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44553: LD_INT 0
44555: PPUSH
44556: LD_INT 5
44558: PUSH
44559: LD_INT 8
44561: PUSH
44562: LD_INT 9
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: PUSH
44570: LD_VAR 0 17
44574: ARRAY
44575: PPUSH
44576: LD_VAR 0 4
44580: PPUSH
44581: CALL_OW 380
44585: GO 44604
// PrepareHuman ( false , i , skill ) ;
44587: LD_INT 0
44589: PPUSH
44590: LD_VAR 0 8
44594: PPUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: CALL_OW 380
// end else
44604: GO 44623
// PrepareHuman ( false , i , skill ) ;
44606: LD_INT 0
44608: PPUSH
44609: LD_VAR 0 8
44613: PPUSH
44614: LD_VAR 0 4
44618: PPUSH
44619: CALL_OW 380
// un := CreateHuman ;
44623: LD_ADDR_VAR 0 14
44627: PUSH
44628: CALL_OW 44
44632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44633: LD_ADDR_VAR 0 7
44637: PUSH
44638: LD_VAR 0 7
44642: PPUSH
44643: LD_INT 1
44645: PPUSH
44646: LD_VAR 0 14
44650: PPUSH
44651: CALL_OW 2
44655: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44656: LD_VAR 0 14
44660: PPUSH
44661: LD_VAR 0 9
44665: PPUSH
44666: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44670: LD_VAR 0 9
44674: PPUSH
44675: CALL_OW 313
44679: PUSH
44680: LD_INT 6
44682: EQUAL
44683: PUSH
44684: LD_VAR 0 9
44688: PPUSH
44689: CALL_OW 266
44693: PUSH
44694: LD_INT 32
44696: PUSH
44697: LD_INT 31
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: IN
44704: OR
44705: IFFALSE 44519
44707: GO 44516
44709: POP
44710: POP
// end else
44711: GO 45093
// for j = 1 to x do
44713: LD_ADDR_VAR 0 9
44717: PUSH
44718: DOUBLE
44719: LD_INT 1
44721: DEC
44722: ST_TO_ADDR
44723: LD_VAR 0 13
44727: PUSH
44728: FOR_TO
44729: IFFALSE 45091
// begin InitHc ;
44731: CALL_OW 19
// if not f then
44735: LD_VAR 0 12
44739: NOT
44740: IFFALSE 44829
// begin PrepareHuman ( false , i , skill ) ;
44742: LD_INT 0
44744: PPUSH
44745: LD_VAR 0 8
44749: PPUSH
44750: LD_VAR 0 4
44754: PPUSH
44755: CALL_OW 380
// un := CreateHuman ;
44759: LD_ADDR_VAR 0 14
44763: PUSH
44764: CALL_OW 44
44768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44769: LD_ADDR_VAR 0 7
44773: PUSH
44774: LD_VAR 0 7
44778: PPUSH
44779: LD_INT 1
44781: PPUSH
44782: LD_VAR 0 14
44786: PPUSH
44787: CALL_OW 2
44791: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44792: LD_VAR 0 14
44796: PPUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 250
44806: PPUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: CALL_OW 251
44816: PPUSH
44817: LD_INT 10
44819: PPUSH
44820: LD_INT 0
44822: PPUSH
44823: CALL_OW 50
// continue ;
44827: GO 44728
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44829: LD_VAR 0 12
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PPUSH
44838: CALL_OW 313
44842: PUSH
44843: LD_VAR 0 12
44847: PUSH
44848: LD_INT 1
44850: ARRAY
44851: PPUSH
44852: CALL_OW 266
44856: PUSH
44857: LD_INT 32
44859: PUSH
44860: LD_INT 31
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: IN
44867: AND
44868: PUSH
44869: LD_VAR 0 12
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: CALL_OW 313
44882: PUSH
44883: LD_INT 6
44885: EQUAL
44886: OR
44887: IFFALSE 44907
// f := Delete ( f , 1 ) ;
44889: LD_ADDR_VAR 0 12
44893: PUSH
44894: LD_VAR 0 12
44898: PPUSH
44899: LD_INT 1
44901: PPUSH
44902: CALL_OW 3
44906: ST_TO_ADDR
// if not f then
44907: LD_VAR 0 12
44911: NOT
44912: IFFALSE 44930
// begin x := x + 2 ;
44914: LD_ADDR_VAR 0 13
44918: PUSH
44919: LD_VAR 0 13
44923: PUSH
44924: LD_INT 2
44926: PLUS
44927: ST_TO_ADDR
// continue ;
44928: GO 44728
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44930: LD_VAR 0 12
44934: PUSH
44935: LD_INT 1
44937: ARRAY
44938: PPUSH
44939: CALL_OW 266
44943: PUSH
44944: LD_INT 5
44946: EQUAL
44947: IFFALSE 45021
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44949: LD_VAR 0 12
44953: PUSH
44954: LD_INT 1
44956: ARRAY
44957: PPUSH
44958: CALL_OW 313
44962: PUSH
44963: LD_INT 3
44965: LESS
44966: IFFALSE 45002
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44968: LD_INT 0
44970: PPUSH
44971: LD_INT 5
44973: PUSH
44974: LD_INT 8
44976: PUSH
44977: LD_INT 9
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: PUSH
44985: LD_VAR 0 17
44989: ARRAY
44990: PPUSH
44991: LD_VAR 0 4
44995: PPUSH
44996: CALL_OW 380
45000: GO 45019
// PrepareHuman ( false , i , skill ) ;
45002: LD_INT 0
45004: PPUSH
45005: LD_VAR 0 8
45009: PPUSH
45010: LD_VAR 0 4
45014: PPUSH
45015: CALL_OW 380
// end else
45019: GO 45038
// PrepareHuman ( false , i , skill ) ;
45021: LD_INT 0
45023: PPUSH
45024: LD_VAR 0 8
45028: PPUSH
45029: LD_VAR 0 4
45033: PPUSH
45034: CALL_OW 380
// un := CreateHuman ;
45038: LD_ADDR_VAR 0 14
45042: PUSH
45043: CALL_OW 44
45047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45048: LD_ADDR_VAR 0 7
45052: PUSH
45053: LD_VAR 0 7
45057: PPUSH
45058: LD_INT 1
45060: PPUSH
45061: LD_VAR 0 14
45065: PPUSH
45066: CALL_OW 2
45070: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45071: LD_VAR 0 14
45075: PPUSH
45076: LD_VAR 0 12
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PPUSH
45085: CALL_OW 52
// end ;
45089: GO 44728
45091: POP
45092: POP
// end ;
45093: GO 44030
45095: POP
45096: POP
// result := result ^ buildings ;
45097: LD_ADDR_VAR 0 7
45101: PUSH
45102: LD_VAR 0 7
45106: PUSH
45107: LD_VAR 0 18
45111: ADD
45112: ST_TO_ADDR
// end else
45113: GO 45256
// begin for i = 1 to personel do
45115: LD_ADDR_VAR 0 8
45119: PUSH
45120: DOUBLE
45121: LD_INT 1
45123: DEC
45124: ST_TO_ADDR
45125: LD_VAR 0 6
45129: PUSH
45130: FOR_TO
45131: IFFALSE 45254
// begin if i > 4 then
45133: LD_VAR 0 8
45137: PUSH
45138: LD_INT 4
45140: GREATER
45141: IFFALSE 45145
// break ;
45143: GO 45254
// x := personel [ i ] ;
45145: LD_ADDR_VAR 0 13
45149: PUSH
45150: LD_VAR 0 6
45154: PUSH
45155: LD_VAR 0 8
45159: ARRAY
45160: ST_TO_ADDR
// if x = - 1 then
45161: LD_VAR 0 13
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: EQUAL
45170: IFFALSE 45174
// continue ;
45172: GO 45130
// PrepareHuman ( false , i , skill ) ;
45174: LD_INT 0
45176: PPUSH
45177: LD_VAR 0 8
45181: PPUSH
45182: LD_VAR 0 4
45186: PPUSH
45187: CALL_OW 380
// un := CreateHuman ;
45191: LD_ADDR_VAR 0 14
45195: PUSH
45196: CALL_OW 44
45200: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45201: LD_VAR 0 14
45205: PPUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 250
45215: PPUSH
45216: LD_VAR 0 1
45220: PPUSH
45221: CALL_OW 251
45225: PPUSH
45226: LD_INT 10
45228: PPUSH
45229: LD_INT 0
45231: PPUSH
45232: CALL_OW 50
// result := result ^ un ;
45236: LD_ADDR_VAR 0 7
45240: PUSH
45241: LD_VAR 0 7
45245: PUSH
45246: LD_VAR 0 14
45250: ADD
45251: ST_TO_ADDR
// end ;
45252: GO 45130
45254: POP
45255: POP
// end ; end ;
45256: LD_VAR 0 7
45260: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45261: LD_INT 0
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
// result := false ;
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 0
45286: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45287: LD_VAR 0 1
45291: NOT
45292: PUSH
45293: LD_VAR 0 1
45297: PPUSH
45298: CALL_OW 266
45302: PUSH
45303: LD_INT 32
45305: PUSH
45306: LD_INT 33
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: IN
45313: NOT
45314: OR
45315: IFFALSE 45319
// exit ;
45317: GO 46428
// nat := GetNation ( tower ) ;
45319: LD_ADDR_VAR 0 12
45323: PUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: CALL_OW 248
45333: ST_TO_ADDR
// side := GetSide ( tower ) ;
45334: LD_ADDR_VAR 0 16
45338: PUSH
45339: LD_VAR 0 1
45343: PPUSH
45344: CALL_OW 255
45348: ST_TO_ADDR
// x := GetX ( tower ) ;
45349: LD_ADDR_VAR 0 10
45353: PUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: CALL_OW 250
45363: ST_TO_ADDR
// y := GetY ( tower ) ;
45364: LD_ADDR_VAR 0 11
45368: PUSH
45369: LD_VAR 0 1
45373: PPUSH
45374: CALL_OW 251
45378: ST_TO_ADDR
// if not x or not y then
45379: LD_VAR 0 10
45383: NOT
45384: PUSH
45385: LD_VAR 0 11
45389: NOT
45390: OR
45391: IFFALSE 45395
// exit ;
45393: GO 46428
// weapon := 0 ;
45395: LD_ADDR_VAR 0 18
45399: PUSH
45400: LD_INT 0
45402: ST_TO_ADDR
// fac_list := [ ] ;
45403: LD_ADDR_VAR 0 17
45407: PUSH
45408: EMPTY
45409: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45410: LD_ADDR_VAR 0 6
45414: PUSH
45415: LD_VAR 0 1
45419: PPUSH
45420: CALL_OW 274
45424: PPUSH
45425: LD_VAR 0 2
45429: PPUSH
45430: LD_INT 0
45432: PPUSH
45433: CALL 42999 0 3
45437: PPUSH
45438: LD_INT 30
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PPUSH
45448: CALL_OW 72
45452: ST_TO_ADDR
// if not factories then
45453: LD_VAR 0 6
45457: NOT
45458: IFFALSE 45462
// exit ;
45460: GO 46428
// for i in factories do
45462: LD_ADDR_VAR 0 8
45466: PUSH
45467: LD_VAR 0 6
45471: PUSH
45472: FOR_IN
45473: IFFALSE 45498
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45475: LD_ADDR_VAR 0 17
45479: PUSH
45480: LD_VAR 0 17
45484: PUSH
45485: LD_VAR 0 8
45489: PPUSH
45490: CALL_OW 478
45494: UNION
45495: ST_TO_ADDR
45496: GO 45472
45498: POP
45499: POP
// if not fac_list then
45500: LD_VAR 0 17
45504: NOT
45505: IFFALSE 45509
// exit ;
45507: GO 46428
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45509: LD_ADDR_VAR 0 5
45513: PUSH
45514: LD_INT 4
45516: PUSH
45517: LD_INT 5
45519: PUSH
45520: LD_INT 9
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: LD_INT 6
45528: PUSH
45529: LD_INT 7
45531: PUSH
45532: LD_INT 11
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 27
45546: PUSH
45547: LD_INT 28
45549: PUSH
45550: LD_INT 26
45552: PUSH
45553: LD_INT 30
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 43
45564: PUSH
45565: LD_INT 44
45567: PUSH
45568: LD_INT 46
45570: PUSH
45571: LD_INT 45
45573: PUSH
45574: LD_INT 47
45576: PUSH
45577: LD_INT 49
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: PUSH
45593: LD_VAR 0 12
45597: ARRAY
45598: ST_TO_ADDR
// list := list isect fac_list ;
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: LD_VAR 0 5
45608: PUSH
45609: LD_VAR 0 17
45613: ISECT
45614: ST_TO_ADDR
// if not list then
45615: LD_VAR 0 5
45619: NOT
45620: IFFALSE 45624
// exit ;
45622: GO 46428
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45624: LD_VAR 0 12
45628: PUSH
45629: LD_INT 3
45631: EQUAL
45632: PUSH
45633: LD_INT 49
45635: PUSH
45636: LD_VAR 0 5
45640: IN
45641: AND
45642: PUSH
45643: LD_INT 31
45645: PPUSH
45646: LD_VAR 0 16
45650: PPUSH
45651: CALL_OW 321
45655: PUSH
45656: LD_INT 2
45658: EQUAL
45659: AND
45660: IFFALSE 45720
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45662: LD_INT 22
45664: PUSH
45665: LD_VAR 0 16
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 35
45676: PUSH
45677: LD_INT 49
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 91
45686: PUSH
45687: LD_VAR 0 1
45691: PUSH
45692: LD_INT 10
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: PPUSH
45705: CALL_OW 69
45709: NOT
45710: IFFALSE 45720
// weapon := ru_time_lapser ;
45712: LD_ADDR_VAR 0 18
45716: PUSH
45717: LD_INT 49
45719: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45720: LD_VAR 0 12
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: IN
45735: PUSH
45736: LD_INT 11
45738: PUSH
45739: LD_VAR 0 5
45743: IN
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: LD_VAR 0 5
45752: IN
45753: OR
45754: AND
45755: PUSH
45756: LD_INT 6
45758: PPUSH
45759: LD_VAR 0 16
45763: PPUSH
45764: CALL_OW 321
45768: PUSH
45769: LD_INT 2
45771: EQUAL
45772: AND
45773: IFFALSE 45938
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45775: LD_INT 22
45777: PUSH
45778: LD_VAR 0 16
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 35
45792: PUSH
45793: LD_INT 11
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 35
45802: PUSH
45803: LD_INT 30
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 91
45817: PUSH
45818: LD_VAR 0 1
45822: PUSH
45823: LD_INT 18
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: PPUSH
45836: CALL_OW 69
45840: NOT
45841: PUSH
45842: LD_INT 22
45844: PUSH
45845: LD_VAR 0 16
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 30
45859: PUSH
45860: LD_INT 32
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 30
45869: PUSH
45870: LD_INT 33
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 91
45884: PUSH
45885: LD_VAR 0 1
45889: PUSH
45890: LD_INT 12
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: PPUSH
45906: CALL_OW 69
45910: PUSH
45911: LD_INT 2
45913: GREATER
45914: AND
45915: IFFALSE 45938
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45917: LD_ADDR_VAR 0 18
45921: PUSH
45922: LD_INT 11
45924: PUSH
45925: LD_INT 30
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_VAR 0 12
45936: ARRAY
45937: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45938: LD_VAR 0 18
45942: NOT
45943: PUSH
45944: LD_INT 40
45946: PPUSH
45947: LD_VAR 0 16
45951: PPUSH
45952: CALL_OW 321
45956: PUSH
45957: LD_INT 2
45959: EQUAL
45960: AND
45961: PUSH
45962: LD_INT 7
45964: PUSH
45965: LD_VAR 0 5
45969: IN
45970: PUSH
45971: LD_INT 28
45973: PUSH
45974: LD_VAR 0 5
45978: IN
45979: OR
45980: PUSH
45981: LD_INT 45
45983: PUSH
45984: LD_VAR 0 5
45988: IN
45989: OR
45990: AND
45991: IFFALSE 46245
// begin hex := GetHexInfo ( x , y ) ;
45993: LD_ADDR_VAR 0 4
45997: PUSH
45998: LD_VAR 0 10
46002: PPUSH
46003: LD_VAR 0 11
46007: PPUSH
46008: CALL_OW 546
46012: ST_TO_ADDR
// if hex [ 1 ] then
46013: LD_VAR 0 4
46017: PUSH
46018: LD_INT 1
46020: ARRAY
46021: IFFALSE 46025
// exit ;
46023: GO 46428
// height := hex [ 2 ] ;
46025: LD_ADDR_VAR 0 15
46029: PUSH
46030: LD_VAR 0 4
46034: PUSH
46035: LD_INT 2
46037: ARRAY
46038: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46039: LD_ADDR_VAR 0 14
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 5
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// for i in tmp do
46062: LD_ADDR_VAR 0 8
46066: PUSH
46067: LD_VAR 0 14
46071: PUSH
46072: FOR_IN
46073: IFFALSE 46243
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46075: LD_ADDR_VAR 0 9
46079: PUSH
46080: LD_VAR 0 10
46084: PPUSH
46085: LD_VAR 0 8
46089: PPUSH
46090: LD_INT 5
46092: PPUSH
46093: CALL_OW 272
46097: PUSH
46098: LD_VAR 0 11
46102: PPUSH
46103: LD_VAR 0 8
46107: PPUSH
46108: LD_INT 5
46110: PPUSH
46111: CALL_OW 273
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46120: LD_VAR 0 9
46124: PUSH
46125: LD_INT 1
46127: ARRAY
46128: PPUSH
46129: LD_VAR 0 9
46133: PUSH
46134: LD_INT 2
46136: ARRAY
46137: PPUSH
46138: CALL_OW 488
46142: IFFALSE 46241
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46144: LD_ADDR_VAR 0 4
46148: PUSH
46149: LD_VAR 0 9
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: PPUSH
46158: LD_VAR 0 9
46162: PUSH
46163: LD_INT 2
46165: ARRAY
46166: PPUSH
46167: CALL_OW 546
46171: ST_TO_ADDR
// if hex [ 1 ] then
46172: LD_VAR 0 4
46176: PUSH
46177: LD_INT 1
46179: ARRAY
46180: IFFALSE 46184
// continue ;
46182: GO 46072
// h := hex [ 2 ] ;
46184: LD_ADDR_VAR 0 13
46188: PUSH
46189: LD_VAR 0 4
46193: PUSH
46194: LD_INT 2
46196: ARRAY
46197: ST_TO_ADDR
// if h + 7 < height then
46198: LD_VAR 0 13
46202: PUSH
46203: LD_INT 7
46205: PLUS
46206: PUSH
46207: LD_VAR 0 15
46211: LESS
46212: IFFALSE 46241
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46214: LD_ADDR_VAR 0 18
46218: PUSH
46219: LD_INT 7
46221: PUSH
46222: LD_INT 28
46224: PUSH
46225: LD_INT 45
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: PUSH
46233: LD_VAR 0 12
46237: ARRAY
46238: ST_TO_ADDR
// break ;
46239: GO 46243
// end ; end ; end ;
46241: GO 46072
46243: POP
46244: POP
// end ; if not weapon then
46245: LD_VAR 0 18
46249: NOT
46250: IFFALSE 46310
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46252: LD_ADDR_VAR 0 5
46256: PUSH
46257: LD_VAR 0 5
46261: PUSH
46262: LD_INT 11
46264: PUSH
46265: LD_INT 30
46267: PUSH
46268: LD_INT 49
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: DIFF
46276: ST_TO_ADDR
// if not list then
46277: LD_VAR 0 5
46281: NOT
46282: IFFALSE 46286
// exit ;
46284: GO 46428
// weapon := list [ rand ( 1 , list ) ] ;
46286: LD_ADDR_VAR 0 18
46290: PUSH
46291: LD_VAR 0 5
46295: PUSH
46296: LD_INT 1
46298: PPUSH
46299: LD_VAR 0 5
46303: PPUSH
46304: CALL_OW 12
46308: ARRAY
46309: ST_TO_ADDR
// end ; if weapon then
46310: LD_VAR 0 18
46314: IFFALSE 46428
// begin tmp := CostOfWeapon ( weapon ) ;
46316: LD_ADDR_VAR 0 14
46320: PUSH
46321: LD_VAR 0 18
46325: PPUSH
46326: CALL_OW 451
46330: ST_TO_ADDR
// j := GetBase ( tower ) ;
46331: LD_ADDR_VAR 0 9
46335: PUSH
46336: LD_VAR 0 1
46340: PPUSH
46341: CALL_OW 274
46345: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46346: LD_VAR 0 9
46350: PPUSH
46351: LD_INT 1
46353: PPUSH
46354: CALL_OW 275
46358: PUSH
46359: LD_VAR 0 14
46363: PUSH
46364: LD_INT 1
46366: ARRAY
46367: GREATEREQUAL
46368: PUSH
46369: LD_VAR 0 9
46373: PPUSH
46374: LD_INT 2
46376: PPUSH
46377: CALL_OW 275
46381: PUSH
46382: LD_VAR 0 14
46386: PUSH
46387: LD_INT 2
46389: ARRAY
46390: GREATEREQUAL
46391: AND
46392: PUSH
46393: LD_VAR 0 9
46397: PPUSH
46398: LD_INT 3
46400: PPUSH
46401: CALL_OW 275
46405: PUSH
46406: LD_VAR 0 14
46410: PUSH
46411: LD_INT 3
46413: ARRAY
46414: GREATEREQUAL
46415: AND
46416: IFFALSE 46428
// result := weapon ;
46418: LD_ADDR_VAR 0 3
46422: PUSH
46423: LD_VAR 0 18
46427: ST_TO_ADDR
// end ; end ;
46428: LD_VAR 0 3
46432: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46433: LD_INT 0
46435: PPUSH
46436: PPUSH
// result := true ;
46437: LD_ADDR_VAR 0 3
46441: PUSH
46442: LD_INT 1
46444: ST_TO_ADDR
// if array1 = array2 then
46445: LD_VAR 0 1
46449: PUSH
46450: LD_VAR 0 2
46454: EQUAL
46455: IFFALSE 46515
// begin for i = 1 to array1 do
46457: LD_ADDR_VAR 0 4
46461: PUSH
46462: DOUBLE
46463: LD_INT 1
46465: DEC
46466: ST_TO_ADDR
46467: LD_VAR 0 1
46471: PUSH
46472: FOR_TO
46473: IFFALSE 46511
// if array1 [ i ] <> array2 [ i ] then
46475: LD_VAR 0 1
46479: PUSH
46480: LD_VAR 0 4
46484: ARRAY
46485: PUSH
46486: LD_VAR 0 2
46490: PUSH
46491: LD_VAR 0 4
46495: ARRAY
46496: NONEQUAL
46497: IFFALSE 46509
// begin result := false ;
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_INT 0
46506: ST_TO_ADDR
// break ;
46507: GO 46511
// end ;
46509: GO 46472
46511: POP
46512: POP
// end else
46513: GO 46523
// result := false ;
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: LD_INT 0
46522: ST_TO_ADDR
// end ;
46523: LD_VAR 0 3
46527: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46528: LD_INT 0
46530: PPUSH
46531: PPUSH
// if not array1 or not array2 then
46532: LD_VAR 0 1
46536: NOT
46537: PUSH
46538: LD_VAR 0 2
46542: NOT
46543: OR
46544: IFFALSE 46548
// exit ;
46546: GO 46612
// result := true ;
46548: LD_ADDR_VAR 0 3
46552: PUSH
46553: LD_INT 1
46555: ST_TO_ADDR
// for i = 1 to array1 do
46556: LD_ADDR_VAR 0 4
46560: PUSH
46561: DOUBLE
46562: LD_INT 1
46564: DEC
46565: ST_TO_ADDR
46566: LD_VAR 0 1
46570: PUSH
46571: FOR_TO
46572: IFFALSE 46610
// if array1 [ i ] <> array2 [ i ] then
46574: LD_VAR 0 1
46578: PUSH
46579: LD_VAR 0 4
46583: ARRAY
46584: PUSH
46585: LD_VAR 0 2
46589: PUSH
46590: LD_VAR 0 4
46594: ARRAY
46595: NONEQUAL
46596: IFFALSE 46608
// begin result := false ;
46598: LD_ADDR_VAR 0 3
46602: PUSH
46603: LD_INT 0
46605: ST_TO_ADDR
// break ;
46606: GO 46610
// end ;
46608: GO 46571
46610: POP
46611: POP
// end ;
46612: LD_VAR 0 3
46616: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46617: LD_INT 0
46619: PPUSH
46620: PPUSH
46621: PPUSH
// pom := GetBase ( fac ) ;
46622: LD_ADDR_VAR 0 5
46626: PUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: CALL_OW 274
46636: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46637: LD_ADDR_VAR 0 4
46641: PUSH
46642: LD_VAR 0 2
46646: PUSH
46647: LD_INT 1
46649: ARRAY
46650: PPUSH
46651: LD_VAR 0 2
46655: PUSH
46656: LD_INT 2
46658: ARRAY
46659: PPUSH
46660: LD_VAR 0 2
46664: PUSH
46665: LD_INT 3
46667: ARRAY
46668: PPUSH
46669: LD_VAR 0 2
46673: PUSH
46674: LD_INT 4
46676: ARRAY
46677: PPUSH
46678: CALL_OW 449
46682: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_VAR 0 5
46692: PPUSH
46693: LD_INT 1
46695: PPUSH
46696: CALL_OW 275
46700: PUSH
46701: LD_VAR 0 4
46705: PUSH
46706: LD_INT 1
46708: ARRAY
46709: GREATEREQUAL
46710: PUSH
46711: LD_VAR 0 5
46715: PPUSH
46716: LD_INT 2
46718: PPUSH
46719: CALL_OW 275
46723: PUSH
46724: LD_VAR 0 4
46728: PUSH
46729: LD_INT 2
46731: ARRAY
46732: GREATEREQUAL
46733: AND
46734: PUSH
46735: LD_VAR 0 5
46739: PPUSH
46740: LD_INT 3
46742: PPUSH
46743: CALL_OW 275
46747: PUSH
46748: LD_VAR 0 4
46752: PUSH
46753: LD_INT 3
46755: ARRAY
46756: GREATEREQUAL
46757: AND
46758: ST_TO_ADDR
// end ;
46759: LD_VAR 0 3
46763: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46764: LD_INT 0
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
// pom := GetBase ( building ) ;
46770: LD_ADDR_VAR 0 3
46774: PUSH
46775: LD_VAR 0 1
46779: PPUSH
46780: CALL_OW 274
46784: ST_TO_ADDR
// if not pom then
46785: LD_VAR 0 3
46789: NOT
46790: IFFALSE 46794
// exit ;
46792: GO 46964
// btype := GetBType ( building ) ;
46794: LD_ADDR_VAR 0 5
46798: PUSH
46799: LD_VAR 0 1
46803: PPUSH
46804: CALL_OW 266
46808: ST_TO_ADDR
// if btype = b_armoury then
46809: LD_VAR 0 5
46813: PUSH
46814: LD_INT 4
46816: EQUAL
46817: IFFALSE 46827
// btype := b_barracks ;
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_INT 5
46826: ST_TO_ADDR
// if btype = b_depot then
46827: LD_VAR 0 5
46831: PUSH
46832: LD_INT 0
46834: EQUAL
46835: IFFALSE 46845
// btype := b_warehouse ;
46837: LD_ADDR_VAR 0 5
46841: PUSH
46842: LD_INT 1
46844: ST_TO_ADDR
// if btype = b_workshop then
46845: LD_VAR 0 5
46849: PUSH
46850: LD_INT 2
46852: EQUAL
46853: IFFALSE 46863
// btype := b_factory ;
46855: LD_ADDR_VAR 0 5
46859: PUSH
46860: LD_INT 3
46862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46863: LD_ADDR_VAR 0 4
46867: PUSH
46868: LD_VAR 0 5
46872: PPUSH
46873: LD_VAR 0 1
46877: PPUSH
46878: CALL_OW 248
46882: PPUSH
46883: CALL_OW 450
46887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46888: LD_ADDR_VAR 0 2
46892: PUSH
46893: LD_VAR 0 3
46897: PPUSH
46898: LD_INT 1
46900: PPUSH
46901: CALL_OW 275
46905: PUSH
46906: LD_VAR 0 4
46910: PUSH
46911: LD_INT 1
46913: ARRAY
46914: GREATEREQUAL
46915: PUSH
46916: LD_VAR 0 3
46920: PPUSH
46921: LD_INT 2
46923: PPUSH
46924: CALL_OW 275
46928: PUSH
46929: LD_VAR 0 4
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: GREATEREQUAL
46938: AND
46939: PUSH
46940: LD_VAR 0 3
46944: PPUSH
46945: LD_INT 3
46947: PPUSH
46948: CALL_OW 275
46952: PUSH
46953: LD_VAR 0 4
46957: PUSH
46958: LD_INT 3
46960: ARRAY
46961: GREATEREQUAL
46962: AND
46963: ST_TO_ADDR
// end ;
46964: LD_VAR 0 2
46968: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46969: LD_INT 0
46971: PPUSH
46972: PPUSH
46973: PPUSH
// pom := GetBase ( building ) ;
46974: LD_ADDR_VAR 0 4
46978: PUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 274
46988: ST_TO_ADDR
// if not pom then
46989: LD_VAR 0 4
46993: NOT
46994: IFFALSE 46998
// exit ;
46996: GO 47099
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46998: LD_ADDR_VAR 0 5
47002: PUSH
47003: LD_VAR 0 2
47007: PPUSH
47008: LD_VAR 0 1
47012: PPUSH
47013: CALL_OW 248
47017: PPUSH
47018: CALL_OW 450
47022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: LD_VAR 0 4
47032: PPUSH
47033: LD_INT 1
47035: PPUSH
47036: CALL_OW 275
47040: PUSH
47041: LD_VAR 0 5
47045: PUSH
47046: LD_INT 1
47048: ARRAY
47049: GREATEREQUAL
47050: PUSH
47051: LD_VAR 0 4
47055: PPUSH
47056: LD_INT 2
47058: PPUSH
47059: CALL_OW 275
47063: PUSH
47064: LD_VAR 0 5
47068: PUSH
47069: LD_INT 2
47071: ARRAY
47072: GREATEREQUAL
47073: AND
47074: PUSH
47075: LD_VAR 0 4
47079: PPUSH
47080: LD_INT 3
47082: PPUSH
47083: CALL_OW 275
47087: PUSH
47088: LD_VAR 0 5
47092: PUSH
47093: LD_INT 3
47095: ARRAY
47096: GREATEREQUAL
47097: AND
47098: ST_TO_ADDR
// end ;
47099: LD_VAR 0 3
47103: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47104: LD_INT 0
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
// result := false ;
47117: LD_ADDR_VAR 0 8
47121: PUSH
47122: LD_INT 0
47124: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47125: LD_VAR 0 5
47129: NOT
47130: PUSH
47131: LD_VAR 0 1
47135: NOT
47136: OR
47137: PUSH
47138: LD_VAR 0 2
47142: NOT
47143: OR
47144: PUSH
47145: LD_VAR 0 3
47149: NOT
47150: OR
47151: IFFALSE 47155
// exit ;
47153: GO 47969
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47155: LD_ADDR_VAR 0 14
47159: PUSH
47160: LD_VAR 0 1
47164: PPUSH
47165: LD_VAR 0 2
47169: PPUSH
47170: LD_VAR 0 3
47174: PPUSH
47175: LD_VAR 0 4
47179: PPUSH
47180: LD_VAR 0 5
47184: PUSH
47185: LD_INT 1
47187: ARRAY
47188: PPUSH
47189: CALL_OW 248
47193: PPUSH
47194: LD_INT 0
47196: PPUSH
47197: CALL 49202 0 6
47201: ST_TO_ADDR
// if not hexes then
47202: LD_VAR 0 14
47206: NOT
47207: IFFALSE 47211
// exit ;
47209: GO 47969
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47211: LD_ADDR_VAR 0 17
47215: PUSH
47216: LD_VAR 0 5
47220: PPUSH
47221: LD_INT 22
47223: PUSH
47224: LD_VAR 0 13
47228: PPUSH
47229: CALL_OW 255
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 30
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 30
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PPUSH
47270: CALL_OW 72
47274: ST_TO_ADDR
// for i = 1 to hexes do
47275: LD_ADDR_VAR 0 9
47279: PUSH
47280: DOUBLE
47281: LD_INT 1
47283: DEC
47284: ST_TO_ADDR
47285: LD_VAR 0 14
47289: PUSH
47290: FOR_TO
47291: IFFALSE 47967
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47293: LD_ADDR_VAR 0 13
47297: PUSH
47298: LD_VAR 0 14
47302: PUSH
47303: LD_VAR 0 9
47307: ARRAY
47308: PUSH
47309: LD_INT 1
47311: ARRAY
47312: PPUSH
47313: LD_VAR 0 14
47317: PUSH
47318: LD_VAR 0 9
47322: ARRAY
47323: PUSH
47324: LD_INT 2
47326: ARRAY
47327: PPUSH
47328: CALL_OW 428
47332: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47333: LD_VAR 0 14
47337: PUSH
47338: LD_VAR 0 9
47342: ARRAY
47343: PUSH
47344: LD_INT 1
47346: ARRAY
47347: PPUSH
47348: LD_VAR 0 14
47352: PUSH
47353: LD_VAR 0 9
47357: ARRAY
47358: PUSH
47359: LD_INT 2
47361: ARRAY
47362: PPUSH
47363: CALL_OW 351
47367: PUSH
47368: LD_VAR 0 14
47372: PUSH
47373: LD_VAR 0 9
47377: ARRAY
47378: PUSH
47379: LD_INT 1
47381: ARRAY
47382: PPUSH
47383: LD_VAR 0 14
47387: PUSH
47388: LD_VAR 0 9
47392: ARRAY
47393: PUSH
47394: LD_INT 2
47396: ARRAY
47397: PPUSH
47398: CALL_OW 488
47402: NOT
47403: OR
47404: PUSH
47405: LD_VAR 0 13
47409: PPUSH
47410: CALL_OW 247
47414: PUSH
47415: LD_INT 3
47417: EQUAL
47418: OR
47419: IFFALSE 47425
// exit ;
47421: POP
47422: POP
47423: GO 47969
// if not tmp then
47425: LD_VAR 0 13
47429: NOT
47430: IFFALSE 47434
// continue ;
47432: GO 47290
// result := true ;
47434: LD_ADDR_VAR 0 8
47438: PUSH
47439: LD_INT 1
47441: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47442: LD_VAR 0 6
47446: PUSH
47447: LD_VAR 0 13
47451: PPUSH
47452: CALL_OW 247
47456: PUSH
47457: LD_INT 2
47459: EQUAL
47460: AND
47461: PUSH
47462: LD_VAR 0 13
47466: PPUSH
47467: CALL_OW 263
47471: PUSH
47472: LD_INT 1
47474: EQUAL
47475: AND
47476: IFFALSE 47640
// begin if IsDrivenBy ( tmp ) then
47478: LD_VAR 0 13
47482: PPUSH
47483: CALL_OW 311
47487: IFFALSE 47491
// continue ;
47489: GO 47290
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47491: LD_VAR 0 6
47495: PPUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 60
47501: PUSH
47502: EMPTY
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 55
47514: PUSH
47515: EMPTY
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PPUSH
47526: CALL_OW 72
47530: IFFALSE 47638
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47532: LD_ADDR_VAR 0 18
47536: PUSH
47537: LD_VAR 0 6
47541: PPUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 60
47547: PUSH
47548: EMPTY
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: LD_INT 55
47560: PUSH
47561: EMPTY
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PPUSH
47572: CALL_OW 72
47576: PUSH
47577: LD_INT 1
47579: ARRAY
47580: ST_TO_ADDR
// if IsInUnit ( driver ) then
47581: LD_VAR 0 18
47585: PPUSH
47586: CALL_OW 310
47590: IFFALSE 47601
// ComExit ( driver ) ;
47592: LD_VAR 0 18
47596: PPUSH
47597: CALL 72982 0 1
// AddComEnterUnit ( driver , tmp ) ;
47601: LD_VAR 0 18
47605: PPUSH
47606: LD_VAR 0 13
47610: PPUSH
47611: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47615: LD_VAR 0 18
47619: PPUSH
47620: LD_VAR 0 7
47624: PPUSH
47625: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47629: LD_VAR 0 18
47633: PPUSH
47634: CALL_OW 181
// end ; continue ;
47638: GO 47290
// end ; if not cleaners or not tmp in cleaners then
47640: LD_VAR 0 6
47644: NOT
47645: PUSH
47646: LD_VAR 0 13
47650: PUSH
47651: LD_VAR 0 6
47655: IN
47656: NOT
47657: OR
47658: IFFALSE 47965
// begin if dep then
47660: LD_VAR 0 17
47664: IFFALSE 47800
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47666: LD_ADDR_VAR 0 16
47670: PUSH
47671: LD_VAR 0 17
47675: PUSH
47676: LD_INT 1
47678: ARRAY
47679: PPUSH
47680: CALL_OW 250
47684: PPUSH
47685: LD_VAR 0 17
47689: PUSH
47690: LD_INT 1
47692: ARRAY
47693: PPUSH
47694: CALL_OW 254
47698: PPUSH
47699: LD_INT 5
47701: PPUSH
47702: CALL_OW 272
47706: PUSH
47707: LD_VAR 0 17
47711: PUSH
47712: LD_INT 1
47714: ARRAY
47715: PPUSH
47716: CALL_OW 251
47720: PPUSH
47721: LD_VAR 0 17
47725: PUSH
47726: LD_INT 1
47728: ARRAY
47729: PPUSH
47730: CALL_OW 254
47734: PPUSH
47735: LD_INT 5
47737: PPUSH
47738: CALL_OW 273
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47747: LD_VAR 0 16
47751: PUSH
47752: LD_INT 1
47754: ARRAY
47755: PPUSH
47756: LD_VAR 0 16
47760: PUSH
47761: LD_INT 2
47763: ARRAY
47764: PPUSH
47765: CALL_OW 488
47769: IFFALSE 47800
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47771: LD_VAR 0 13
47775: PPUSH
47776: LD_VAR 0 16
47780: PUSH
47781: LD_INT 1
47783: ARRAY
47784: PPUSH
47785: LD_VAR 0 16
47789: PUSH
47790: LD_INT 2
47792: ARRAY
47793: PPUSH
47794: CALL_OW 111
// continue ;
47798: GO 47290
// end ; end ; r := GetDir ( tmp ) ;
47800: LD_ADDR_VAR 0 15
47804: PUSH
47805: LD_VAR 0 13
47809: PPUSH
47810: CALL_OW 254
47814: ST_TO_ADDR
// if r = 5 then
47815: LD_VAR 0 15
47819: PUSH
47820: LD_INT 5
47822: EQUAL
47823: IFFALSE 47833
// r := 0 ;
47825: LD_ADDR_VAR 0 15
47829: PUSH
47830: LD_INT 0
47832: ST_TO_ADDR
// for j = r to 5 do
47833: LD_ADDR_VAR 0 10
47837: PUSH
47838: DOUBLE
47839: LD_VAR 0 15
47843: DEC
47844: ST_TO_ADDR
47845: LD_INT 5
47847: PUSH
47848: FOR_TO
47849: IFFALSE 47963
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47851: LD_ADDR_VAR 0 11
47855: PUSH
47856: LD_VAR 0 13
47860: PPUSH
47861: CALL_OW 250
47865: PPUSH
47866: LD_VAR 0 10
47870: PPUSH
47871: LD_INT 2
47873: PPUSH
47874: CALL_OW 272
47878: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47879: LD_ADDR_VAR 0 12
47883: PUSH
47884: LD_VAR 0 13
47888: PPUSH
47889: CALL_OW 251
47893: PPUSH
47894: LD_VAR 0 10
47898: PPUSH
47899: LD_INT 2
47901: PPUSH
47902: CALL_OW 273
47906: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47907: LD_VAR 0 11
47911: PPUSH
47912: LD_VAR 0 12
47916: PPUSH
47917: CALL_OW 488
47921: PUSH
47922: LD_VAR 0 11
47926: PPUSH
47927: LD_VAR 0 12
47931: PPUSH
47932: CALL_OW 428
47936: NOT
47937: AND
47938: IFFALSE 47961
// begin ComMoveXY ( tmp , _x , _y ) ;
47940: LD_VAR 0 13
47944: PPUSH
47945: LD_VAR 0 11
47949: PPUSH
47950: LD_VAR 0 12
47954: PPUSH
47955: CALL_OW 111
// break ;
47959: GO 47963
// end ; end ;
47961: GO 47848
47963: POP
47964: POP
// end ; end ;
47965: GO 47290
47967: POP
47968: POP
// end ;
47969: LD_VAR 0 8
47973: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47974: LD_INT 0
47976: PPUSH
// result := true ;
47977: LD_ADDR_VAR 0 3
47981: PUSH
47982: LD_INT 1
47984: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47985: LD_VAR 0 2
47989: PUSH
47990: LD_INT 24
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 48004
47996: LD_INT 33
47998: DOUBLE
47999: EQUAL
48000: IFTRUE 48004
48002: GO 48029
48004: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48005: LD_ADDR_VAR 0 3
48009: PUSH
48010: LD_INT 32
48012: PPUSH
48013: LD_VAR 0 1
48017: PPUSH
48018: CALL_OW 321
48022: PUSH
48023: LD_INT 2
48025: EQUAL
48026: ST_TO_ADDR
48027: GO 48345
48029: LD_INT 20
48031: DOUBLE
48032: EQUAL
48033: IFTRUE 48037
48035: GO 48062
48037: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_INT 6
48045: PPUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 321
48055: PUSH
48056: LD_INT 2
48058: EQUAL
48059: ST_TO_ADDR
48060: GO 48345
48062: LD_INT 22
48064: DOUBLE
48065: EQUAL
48066: IFTRUE 48076
48068: LD_INT 36
48070: DOUBLE
48071: EQUAL
48072: IFTRUE 48076
48074: GO 48101
48076: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48077: LD_ADDR_VAR 0 3
48081: PUSH
48082: LD_INT 15
48084: PPUSH
48085: LD_VAR 0 1
48089: PPUSH
48090: CALL_OW 321
48094: PUSH
48095: LD_INT 2
48097: EQUAL
48098: ST_TO_ADDR
48099: GO 48345
48101: LD_INT 30
48103: DOUBLE
48104: EQUAL
48105: IFTRUE 48109
48107: GO 48134
48109: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48110: LD_ADDR_VAR 0 3
48114: PUSH
48115: LD_INT 20
48117: PPUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 321
48127: PUSH
48128: LD_INT 2
48130: EQUAL
48131: ST_TO_ADDR
48132: GO 48345
48134: LD_INT 28
48136: DOUBLE
48137: EQUAL
48138: IFTRUE 48148
48140: LD_INT 21
48142: DOUBLE
48143: EQUAL
48144: IFTRUE 48148
48146: GO 48173
48148: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48149: LD_ADDR_VAR 0 3
48153: PUSH
48154: LD_INT 21
48156: PPUSH
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 321
48166: PUSH
48167: LD_INT 2
48169: EQUAL
48170: ST_TO_ADDR
48171: GO 48345
48173: LD_INT 16
48175: DOUBLE
48176: EQUAL
48177: IFTRUE 48181
48179: GO 48206
48181: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48182: LD_ADDR_VAR 0 3
48186: PUSH
48187: LD_INT 84
48189: PPUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: CALL_OW 321
48199: PUSH
48200: LD_INT 2
48202: EQUAL
48203: ST_TO_ADDR
48204: GO 48345
48206: LD_INT 19
48208: DOUBLE
48209: EQUAL
48210: IFTRUE 48220
48212: LD_INT 23
48214: DOUBLE
48215: EQUAL
48216: IFTRUE 48220
48218: GO 48245
48220: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48221: LD_ADDR_VAR 0 3
48225: PUSH
48226: LD_INT 83
48228: PPUSH
48229: LD_VAR 0 1
48233: PPUSH
48234: CALL_OW 321
48238: PUSH
48239: LD_INT 2
48241: EQUAL
48242: ST_TO_ADDR
48243: GO 48345
48245: LD_INT 17
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48253
48251: GO 48278
48253: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48254: LD_ADDR_VAR 0 3
48258: PUSH
48259: LD_INT 39
48261: PPUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 321
48271: PUSH
48272: LD_INT 2
48274: EQUAL
48275: ST_TO_ADDR
48276: GO 48345
48278: LD_INT 18
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 48311
48286: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48287: LD_ADDR_VAR 0 3
48291: PUSH
48292: LD_INT 40
48294: PPUSH
48295: LD_VAR 0 1
48299: PPUSH
48300: CALL_OW 321
48304: PUSH
48305: LD_INT 2
48307: EQUAL
48308: ST_TO_ADDR
48309: GO 48345
48311: LD_INT 27
48313: DOUBLE
48314: EQUAL
48315: IFTRUE 48319
48317: GO 48344
48319: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48320: LD_ADDR_VAR 0 3
48324: PUSH
48325: LD_INT 35
48327: PPUSH
48328: LD_VAR 0 1
48332: PPUSH
48333: CALL_OW 321
48337: PUSH
48338: LD_INT 2
48340: EQUAL
48341: ST_TO_ADDR
48342: GO 48345
48344: POP
// end ;
48345: LD_VAR 0 3
48349: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48350: LD_INT 0
48352: PPUSH
48353: PPUSH
48354: PPUSH
48355: PPUSH
48356: PPUSH
48357: PPUSH
48358: PPUSH
48359: PPUSH
48360: PPUSH
48361: PPUSH
48362: PPUSH
// result := false ;
48363: LD_ADDR_VAR 0 6
48367: PUSH
48368: LD_INT 0
48370: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48371: LD_VAR 0 1
48375: NOT
48376: PUSH
48377: LD_VAR 0 1
48381: PPUSH
48382: CALL_OW 266
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: IN
48397: NOT
48398: OR
48399: PUSH
48400: LD_VAR 0 2
48404: NOT
48405: OR
48406: PUSH
48407: LD_VAR 0 5
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: LD_INT 5
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: IN
48438: NOT
48439: OR
48440: PUSH
48441: LD_VAR 0 3
48445: PPUSH
48446: LD_VAR 0 4
48450: PPUSH
48451: CALL_OW 488
48455: NOT
48456: OR
48457: IFFALSE 48461
// exit ;
48459: GO 49197
// side := GetSide ( depot ) ;
48461: LD_ADDR_VAR 0 9
48465: PUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: CALL_OW 255
48475: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48476: LD_VAR 0 9
48480: PPUSH
48481: LD_VAR 0 2
48485: PPUSH
48486: CALL 47974 0 2
48490: NOT
48491: IFFALSE 48495
// exit ;
48493: GO 49197
// pom := GetBase ( depot ) ;
48495: LD_ADDR_VAR 0 10
48499: PUSH
48500: LD_VAR 0 1
48504: PPUSH
48505: CALL_OW 274
48509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48510: LD_ADDR_VAR 0 11
48514: PUSH
48515: LD_VAR 0 2
48519: PPUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 248
48529: PPUSH
48530: CALL_OW 450
48534: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48535: LD_VAR 0 10
48539: PPUSH
48540: LD_INT 1
48542: PPUSH
48543: CALL_OW 275
48547: PUSH
48548: LD_VAR 0 11
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: GREATEREQUAL
48557: PUSH
48558: LD_VAR 0 10
48562: PPUSH
48563: LD_INT 2
48565: PPUSH
48566: CALL_OW 275
48570: PUSH
48571: LD_VAR 0 11
48575: PUSH
48576: LD_INT 2
48578: ARRAY
48579: GREATEREQUAL
48580: AND
48581: PUSH
48582: LD_VAR 0 10
48586: PPUSH
48587: LD_INT 3
48589: PPUSH
48590: CALL_OW 275
48594: PUSH
48595: LD_VAR 0 11
48599: PUSH
48600: LD_INT 3
48602: ARRAY
48603: GREATEREQUAL
48604: AND
48605: NOT
48606: IFFALSE 48610
// exit ;
48608: GO 49197
// if GetBType ( depot ) = b_depot then
48610: LD_VAR 0 1
48614: PPUSH
48615: CALL_OW 266
48619: PUSH
48620: LD_INT 0
48622: EQUAL
48623: IFFALSE 48635
// dist := 28 else
48625: LD_ADDR_VAR 0 14
48629: PUSH
48630: LD_INT 28
48632: ST_TO_ADDR
48633: GO 48643
// dist := 36 ;
48635: LD_ADDR_VAR 0 14
48639: PUSH
48640: LD_INT 36
48642: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48643: LD_VAR 0 1
48647: PPUSH
48648: LD_VAR 0 3
48652: PPUSH
48653: LD_VAR 0 4
48657: PPUSH
48658: CALL_OW 297
48662: PUSH
48663: LD_VAR 0 14
48667: GREATER
48668: IFFALSE 48672
// exit ;
48670: GO 49197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48672: LD_ADDR_VAR 0 12
48676: PUSH
48677: LD_VAR 0 2
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: LD_VAR 0 4
48691: PPUSH
48692: LD_VAR 0 5
48696: PPUSH
48697: LD_VAR 0 1
48701: PPUSH
48702: CALL_OW 248
48706: PPUSH
48707: LD_INT 0
48709: PPUSH
48710: CALL 49202 0 6
48714: ST_TO_ADDR
// if not hexes then
48715: LD_VAR 0 12
48719: NOT
48720: IFFALSE 48724
// exit ;
48722: GO 49197
// hex := GetHexInfo ( x , y ) ;
48724: LD_ADDR_VAR 0 15
48728: PUSH
48729: LD_VAR 0 3
48733: PPUSH
48734: LD_VAR 0 4
48738: PPUSH
48739: CALL_OW 546
48743: ST_TO_ADDR
// if hex [ 1 ] then
48744: LD_VAR 0 15
48748: PUSH
48749: LD_INT 1
48751: ARRAY
48752: IFFALSE 48756
// exit ;
48754: GO 49197
// height := hex [ 2 ] ;
48756: LD_ADDR_VAR 0 13
48760: PUSH
48761: LD_VAR 0 15
48765: PUSH
48766: LD_INT 2
48768: ARRAY
48769: ST_TO_ADDR
// for i = 1 to hexes do
48770: LD_ADDR_VAR 0 7
48774: PUSH
48775: DOUBLE
48776: LD_INT 1
48778: DEC
48779: ST_TO_ADDR
48780: LD_VAR 0 12
48784: PUSH
48785: FOR_TO
48786: IFFALSE 49116
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48788: LD_VAR 0 12
48792: PUSH
48793: LD_VAR 0 7
48797: ARRAY
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: PPUSH
48803: LD_VAR 0 12
48807: PUSH
48808: LD_VAR 0 7
48812: ARRAY
48813: PUSH
48814: LD_INT 2
48816: ARRAY
48817: PPUSH
48818: CALL_OW 488
48822: NOT
48823: PUSH
48824: LD_VAR 0 12
48828: PUSH
48829: LD_VAR 0 7
48833: ARRAY
48834: PUSH
48835: LD_INT 1
48837: ARRAY
48838: PPUSH
48839: LD_VAR 0 12
48843: PUSH
48844: LD_VAR 0 7
48848: ARRAY
48849: PUSH
48850: LD_INT 2
48852: ARRAY
48853: PPUSH
48854: CALL_OW 428
48858: PUSH
48859: LD_INT 0
48861: GREATER
48862: OR
48863: PUSH
48864: LD_VAR 0 12
48868: PUSH
48869: LD_VAR 0 7
48873: ARRAY
48874: PUSH
48875: LD_INT 1
48877: ARRAY
48878: PPUSH
48879: LD_VAR 0 12
48883: PUSH
48884: LD_VAR 0 7
48888: ARRAY
48889: PUSH
48890: LD_INT 2
48892: ARRAY
48893: PPUSH
48894: CALL_OW 351
48898: OR
48899: IFFALSE 48905
// exit ;
48901: POP
48902: POP
48903: GO 49197
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48905: LD_ADDR_VAR 0 8
48909: PUSH
48910: LD_VAR 0 12
48914: PUSH
48915: LD_VAR 0 7
48919: ARRAY
48920: PUSH
48921: LD_INT 1
48923: ARRAY
48924: PPUSH
48925: LD_VAR 0 12
48929: PUSH
48930: LD_VAR 0 7
48934: ARRAY
48935: PUSH
48936: LD_INT 2
48938: ARRAY
48939: PPUSH
48940: CALL_OW 546
48944: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48945: LD_VAR 0 8
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: PUSH
48954: LD_VAR 0 8
48958: PUSH
48959: LD_INT 2
48961: ARRAY
48962: PUSH
48963: LD_VAR 0 13
48967: PUSH
48968: LD_INT 2
48970: PLUS
48971: GREATER
48972: OR
48973: PUSH
48974: LD_VAR 0 8
48978: PUSH
48979: LD_INT 2
48981: ARRAY
48982: PUSH
48983: LD_VAR 0 13
48987: PUSH
48988: LD_INT 2
48990: MINUS
48991: LESS
48992: OR
48993: PUSH
48994: LD_VAR 0 8
48998: PUSH
48999: LD_INT 3
49001: ARRAY
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 8
49008: PUSH
49009: LD_INT 9
49011: PUSH
49012: LD_INT 10
49014: PUSH
49015: LD_INT 11
49017: PUSH
49018: LD_INT 12
49020: PUSH
49021: LD_INT 13
49023: PUSH
49024: LD_INT 16
49026: PUSH
49027: LD_INT 17
49029: PUSH
49030: LD_INT 18
49032: PUSH
49033: LD_INT 19
49035: PUSH
49036: LD_INT 20
49038: PUSH
49039: LD_INT 21
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: IN
49057: NOT
49058: OR
49059: PUSH
49060: LD_VAR 0 8
49064: PUSH
49065: LD_INT 5
49067: ARRAY
49068: NOT
49069: OR
49070: PUSH
49071: LD_VAR 0 8
49075: PUSH
49076: LD_INT 6
49078: ARRAY
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 7
49088: PUSH
49089: LD_INT 9
49091: PUSH
49092: LD_INT 10
49094: PUSH
49095: LD_INT 11
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: IN
49106: NOT
49107: OR
49108: IFFALSE 49114
// exit ;
49110: POP
49111: POP
49112: GO 49197
// end ;
49114: GO 48785
49116: POP
49117: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49118: LD_VAR 0 9
49122: PPUSH
49123: LD_VAR 0 3
49127: PPUSH
49128: LD_VAR 0 4
49132: PPUSH
49133: LD_INT 20
49135: PPUSH
49136: CALL 41149 0 4
49140: PUSH
49141: LD_INT 4
49143: ARRAY
49144: IFFALSE 49148
// exit ;
49146: GO 49197
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49148: LD_VAR 0 2
49152: PUSH
49153: LD_INT 29
49155: PUSH
49156: LD_INT 30
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: IN
49163: PUSH
49164: LD_VAR 0 3
49168: PPUSH
49169: LD_VAR 0 4
49173: PPUSH
49174: LD_VAR 0 9
49178: PPUSH
49179: CALL_OW 440
49183: NOT
49184: AND
49185: IFFALSE 49189
// exit ;
49187: GO 49197
// result := true ;
49189: LD_ADDR_VAR 0 6
49193: PUSH
49194: LD_INT 1
49196: ST_TO_ADDR
// end ;
49197: LD_VAR 0 6
49201: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49202: LD_INT 0
49204: PPUSH
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
// result = [ ] ;
49262: LD_ADDR_VAR 0 7
49266: PUSH
49267: EMPTY
49268: ST_TO_ADDR
// temp_list = [ ] ;
49269: LD_ADDR_VAR 0 9
49273: PUSH
49274: EMPTY
49275: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49276: LD_VAR 0 4
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: LD_INT 4
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: IN
49307: NOT
49308: PUSH
49309: LD_VAR 0 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: IN
49324: PUSH
49325: LD_VAR 0 5
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: IN
49344: NOT
49345: AND
49346: OR
49347: IFFALSE 49351
// exit ;
49349: GO 67742
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49351: LD_VAR 0 1
49355: PUSH
49356: LD_INT 6
49358: PUSH
49359: LD_INT 7
49361: PUSH
49362: LD_INT 8
49364: PUSH
49365: LD_INT 13
49367: PUSH
49368: LD_INT 12
49370: PUSH
49371: LD_INT 15
49373: PUSH
49374: LD_INT 11
49376: PUSH
49377: LD_INT 14
49379: PUSH
49380: LD_INT 10
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: IN
49394: IFFALSE 49404
// btype = b_lab ;
49396: LD_ADDR_VAR 0 1
49400: PUSH
49401: LD_INT 6
49403: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49404: LD_VAR 0 6
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: IN
49423: NOT
49424: PUSH
49425: LD_VAR 0 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 6
49444: PUSH
49445: LD_INT 36
49447: PUSH
49448: LD_INT 4
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 31
49456: PUSH
49457: LD_INT 32
49459: PUSH
49460: LD_INT 33
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: IN
49476: NOT
49477: PUSH
49478: LD_VAR 0 6
49482: PUSH
49483: LD_INT 1
49485: EQUAL
49486: AND
49487: OR
49488: PUSH
49489: LD_VAR 0 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: IN
49504: NOT
49505: PUSH
49506: LD_VAR 0 6
49510: PUSH
49511: LD_INT 2
49513: EQUAL
49514: AND
49515: OR
49516: IFFALSE 49526
// mode = 0 ;
49518: LD_ADDR_VAR 0 6
49522: PUSH
49523: LD_INT 0
49525: ST_TO_ADDR
// case mode of 0 :
49526: LD_VAR 0 6
49530: PUSH
49531: LD_INT 0
49533: DOUBLE
49534: EQUAL
49535: IFTRUE 49539
49537: GO 60992
49539: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49540: LD_ADDR_VAR 0 11
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49733: LD_ADDR_VAR 0 12
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49929: LD_ADDR_VAR 0 13
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50128: LD_ADDR_VAR 0 14
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50324: LD_ADDR_VAR 0 15
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50517: LD_ADDR_VAR 0 16
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50710: LD_ADDR_VAR 0 17
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50940: LD_ADDR_VAR 0 18
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51170: LD_ADDR_VAR 0 19
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51400: LD_ADDR_VAR 0 20
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51630: LD_ADDR_VAR 0 21
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51860: LD_ADDR_VAR 0 22
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52090: LD_ADDR_VAR 0 23
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52370: LD_ADDR_VAR 0 24
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52646: LD_ADDR_VAR 0 25
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52920: LD_ADDR_VAR 0 26
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53196: LD_ADDR_VAR 0 27
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53476: LD_ADDR_VAR 0 28
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 29
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54037: LD_ADDR_VAR 0 30
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54315: LD_ADDR_VAR 0 31
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 32
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54871: LD_ADDR_VAR 0 33
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55150: LD_ADDR_VAR 0 34
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55430: LD_ADDR_VAR 0 35
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55542: LD_ADDR_VAR 0 36
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55654: LD_ADDR_VAR 0 37
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55766: LD_ADDR_VAR 0 38
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55878: LD_ADDR_VAR 0 39
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55990: LD_ADDR_VAR 0 40
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56102: LD_ADDR_VAR 0 41
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56452: LD_ADDR_VAR 0 42
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56802: LD_ADDR_VAR 0 43
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 3
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57150: LD_ADDR_VAR 0 44
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 3
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57500: LD_ADDR_VAR 0 45
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57850: LD_ADDR_VAR 0 46
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58198: LD_ADDR_VAR 0 47
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58349: LD_ADDR_VAR 0 48
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58496: LD_ADDR_VAR 0 49
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58640: LD_ADDR_VAR 0 50
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58784: LD_ADDR_VAR 0 51
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58931: LD_ADDR_VAR 0 52
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59082: LD_ADDR_VAR 0 53
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59312: LD_ADDR_VAR 0 54
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59542: LD_ADDR_VAR 0 55
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59772: LD_ADDR_VAR 0 56
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60002: LD_ADDR_VAR 0 57
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60232: LD_ADDR_VAR 0 58
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60462: LD_ADDR_VAR 0 59
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60550: LD_ADDR_VAR 0 60
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60638: LD_ADDR_VAR 0 61
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60726: LD_ADDR_VAR 0 62
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60814: LD_ADDR_VAR 0 63
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60902: LD_ADDR_VAR 0 64
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// end ; 1 :
60990: GO 66887
60992: LD_INT 1
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61000
60998: GO 63623
61000: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61001: LD_ADDR_VAR 0 11
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 3
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61045: LD_ADDR_VAR 0 12
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61086: LD_ADDR_VAR 0 13
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61126: LD_ADDR_VAR 0 14
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61167: LD_ADDR_VAR 0 15
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61211: LD_ADDR_VAR 0 16
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61257: LD_ADDR_VAR 0 17
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61301: LD_ADDR_VAR 0 18
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61342: LD_ADDR_VAR 0 19
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61382: LD_ADDR_VAR 0 20
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61423: LD_ADDR_VAR 0 21
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 3
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61467: LD_ADDR_VAR 0 22
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 3
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61513: LD_ADDR_VAR 0 23
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 4
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61557: LD_ADDR_VAR 0 24
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61598: LD_ADDR_VAR 0 25
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61638: LD_ADDR_VAR 0 26
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 4
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61679: LD_ADDR_VAR 0 27
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61723: LD_ADDR_VAR 0 28
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 3
61742: NEG
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 4
61754: NEG
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61769: LD_ADDR_VAR 0 29
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 4
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 5
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 5
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 4
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 6
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 6
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 5
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61924: LD_ADDR_VAR 0 30
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 4
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 6
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 6
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62067: LD_ADDR_VAR 0 31
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 4
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 4
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 5
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 5
62144: PUSH
62145: LD_INT 5
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: LD_INT 5
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 6
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 6
62174: PUSH
62175: LD_INT 6
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: LD_INT 6
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62206: LD_ADDR_VAR 0 32
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 4
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 4
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 3
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 5
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 4
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 6
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 6
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 5
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62349: LD_ADDR_VAR 0 33
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 4
62401: NEG
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 5
62435: NEG
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 5
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 5
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 6
62469: NEG
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 6
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62504: LD_ADDR_VAR 0 34
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: NEG
62536: PUSH
62537: LD_INT 3
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: NEG
62548: PUSH
62549: LD_INT 4
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 4
62559: NEG
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 4
62571: NEG
62572: PUSH
62573: LD_INT 4
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 4
62583: NEG
62584: PUSH
62585: LD_INT 5
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 5
62595: NEG
62596: PUSH
62597: LD_INT 4
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 5
62607: NEG
62608: PUSH
62609: LD_INT 5
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 5
62619: NEG
62620: PUSH
62621: LD_INT 6
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 6
62631: NEG
62632: PUSH
62633: LD_INT 5
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 6
62643: NEG
62644: PUSH
62645: LD_INT 6
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62667: LD_ADDR_VAR 0 41
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 3
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62711: LD_ADDR_VAR 0 42
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62752: LD_ADDR_VAR 0 43
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62792: LD_ADDR_VAR 0 44
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 2
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62833: LD_ADDR_VAR 0 45
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62877: LD_ADDR_VAR 0 46
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62923: LD_ADDR_VAR 0 47
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62956: LD_ADDR_VAR 0 48
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62987: LD_ADDR_VAR 0 49
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 3
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63016: LD_ADDR_VAR 0 50
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63045: LD_ADDR_VAR 0 51
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63076: LD_ADDR_VAR 0 52
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63109: LD_ADDR_VAR 0 53
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 3
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63153: LD_ADDR_VAR 0 54
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63194: LD_ADDR_VAR 0 55
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: LD_INT 3
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63234: LD_ADDR_VAR 0 56
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 3
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 2
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63275: LD_ADDR_VAR 0 57
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63319: LD_ADDR_VAR 0 58
63323: PUSH
63324: LD_INT 2
63326: NEG
63327: PUSH
63328: LD_INT 3
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: NEG
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: LD_INT 3
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63365: LD_ADDR_VAR 0 59
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63409: LD_ADDR_VAR 0 60
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63450: LD_ADDR_VAR 0 61
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63490: LD_ADDR_VAR 0 62
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63531: LD_ADDR_VAR 0 63
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63575: LD_ADDR_VAR 0 64
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// end ; 2 :
63621: GO 66887
63623: LD_INT 2
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63631
63629: GO 66886
63631: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63632: LD_ADDR_VAR 0 29
63636: PUSH
63637: LD_INT 4
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 4
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 4
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 5
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 4
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: LD_INT 4
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 3
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 4
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 4
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 5
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 5
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 4
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 3
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 5
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 4
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 4
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 4
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 2
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: LD_INT 4
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: NEG
64030: PUSH
64031: LD_INT 5
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: NEG
64042: PUSH
64043: LD_INT 4
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 3
64053: NEG
64054: PUSH
64055: LD_INT 3
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 4
64065: NEG
64066: PUSH
64067: LD_INT 3
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 5
64077: NEG
64078: PUSH
64079: LD_INT 4
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 5
64089: NEG
64090: PUSH
64091: LD_INT 5
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: NEG
64102: PUSH
64103: LD_INT 5
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 5
64113: NEG
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64170: LD_ADDR_VAR 0 30
64174: PUSH
64175: LD_INT 4
64177: PUSH
64178: LD_INT 4
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 5
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 5
64207: PUSH
64208: LD_INT 5
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 4
64217: PUSH
64218: LD_INT 5
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 5
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: LD_INT 5
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 4
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 4
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 4
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: LD_INT 2
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 4
64371: NEG
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 4
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 5
64416: NEG
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 5
64427: NEG
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 5
64439: NEG
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: LD_INT 4
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 3
64510: NEG
64511: PUSH
64512: LD_INT 2
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 4
64522: NEG
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 4
64534: NEG
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: NEG
64547: PUSH
64548: LD_INT 4
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 4
64558: NEG
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 4
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 5
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 4
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: LD_INT 3
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 4
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 3
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 5
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64717: LD_ADDR_VAR 0 31
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: LD_INT 4
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 5
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 5
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 4
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 3
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 5
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 2
64806: NEG
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: NEG
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 3
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 4
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: NEG
64897: PUSH
64898: LD_INT 2
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 4
64919: NEG
64920: PUSH
64921: LD_INT 4
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 4
64931: NEG
64932: PUSH
64933: LD_INT 5
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: LD_INT 4
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: NEG
64968: PUSH
64969: LD_INT 3
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 5
64979: NEG
64980: PUSH
64981: LD_INT 4
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 5
64991: NEG
64992: PUSH
64993: LD_INT 5
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 3
65003: NEG
65004: PUSH
65005: LD_INT 5
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 5
65015: NEG
65016: PUSH
65017: LD_INT 3
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 3
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 4
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 4
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 4
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 4
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 5
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65267: LD_ADDR_VAR 0 32
65271: PUSH
65272: LD_INT 4
65274: NEG
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 4
65285: NEG
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 4
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 5
65330: NEG
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 5
65341: NEG
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 5
65353: NEG
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: LD_INT 3
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: LD_INT 4
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PUSH
65402: LD_INT 3
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: LD_INT 3
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: NEG
65449: PUSH
65450: LD_INT 4
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: LD_INT 4
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 5
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 3
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: LD_INT 4
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: NEG
65575: PUSH
65576: LD_INT 5
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 3
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 4
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 4
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 4
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 4
65679: PUSH
65680: LD_INT 4
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: LD_INT 3
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 5
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 5
65709: PUSH
65710: LD_INT 5
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: LD_INT 5
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 5
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: LD_INT 5
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65814: LD_ADDR_VAR 0 33
65818: PUSH
65819: LD_INT 4
65821: NEG
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 4
65833: NEG
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: LD_INT 4
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: NEG
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 5
65881: NEG
65882: PUSH
65883: LD_INT 4
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: NEG
65894: PUSH
65895: LD_INT 5
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: NEG
65906: PUSH
65907: LD_INT 5
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 5
65917: NEG
65918: PUSH
65919: LD_INT 3
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 4
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 3
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 4
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 4
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 4
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 5
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 5
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 4
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 3
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 5
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: LD_INT 4
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 3
66164: PUSH
66165: LD_INT 4
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: LD_INT 3
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 4
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: LD_INT 4
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 4
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 5
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 5
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66352: LD_ADDR_VAR 0 34
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 4
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 5
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 4
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 5
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 3
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: LD_INT 5
66453: NEG
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 4
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 4
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: LD_INT 2
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: PUSH
66555: LD_INT 4
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 4
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: LD_INT 4
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 5
66584: PUSH
66585: LD_INT 5
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 4
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: LD_INT 4
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 3
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: LD_INT 5
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 3
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 2
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: LD_INT 4
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: LD_INT 4
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 4
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 4
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 3
66760: NEG
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 4
66782: NEG
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 5
66793: NEG
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 5
66804: NEG
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 5
66816: NEG
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: NEG
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: ST_TO_ADDR
// end ; end ;
66884: GO 66887
66886: POP
// case btype of b_depot , b_warehouse :
66887: LD_VAR 0 1
66891: PUSH
66892: LD_INT 0
66894: DOUBLE
66895: EQUAL
66896: IFTRUE 66906
66898: LD_INT 1
66900: DOUBLE
66901: EQUAL
66902: IFTRUE 66906
66904: GO 67107
66906: POP
// case nation of nation_american :
66907: LD_VAR 0 5
66911: PUSH
66912: LD_INT 1
66914: DOUBLE
66915: EQUAL
66916: IFTRUE 66920
66918: GO 66976
66920: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66921: LD_ADDR_VAR 0 9
66925: PUSH
66926: LD_VAR 0 11
66930: PUSH
66931: LD_VAR 0 12
66935: PUSH
66936: LD_VAR 0 13
66940: PUSH
66941: LD_VAR 0 14
66945: PUSH
66946: LD_VAR 0 15
66950: PUSH
66951: LD_VAR 0 16
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: PUSH
66964: LD_VAR 0 4
66968: PUSH
66969: LD_INT 1
66971: PLUS
66972: ARRAY
66973: ST_TO_ADDR
66974: GO 67105
66976: LD_INT 2
66978: DOUBLE
66979: EQUAL
66980: IFTRUE 66984
66982: GO 67040
66984: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66985: LD_ADDR_VAR 0 9
66989: PUSH
66990: LD_VAR 0 17
66994: PUSH
66995: LD_VAR 0 18
66999: PUSH
67000: LD_VAR 0 19
67004: PUSH
67005: LD_VAR 0 20
67009: PUSH
67010: LD_VAR 0 21
67014: PUSH
67015: LD_VAR 0 22
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: PUSH
67028: LD_VAR 0 4
67032: PUSH
67033: LD_INT 1
67035: PLUS
67036: ARRAY
67037: ST_TO_ADDR
67038: GO 67105
67040: LD_INT 3
67042: DOUBLE
67043: EQUAL
67044: IFTRUE 67048
67046: GO 67104
67048: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67049: LD_ADDR_VAR 0 9
67053: PUSH
67054: LD_VAR 0 23
67058: PUSH
67059: LD_VAR 0 24
67063: PUSH
67064: LD_VAR 0 25
67068: PUSH
67069: LD_VAR 0 26
67073: PUSH
67074: LD_VAR 0 27
67078: PUSH
67079: LD_VAR 0 28
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: PUSH
67092: LD_VAR 0 4
67096: PUSH
67097: LD_INT 1
67099: PLUS
67100: ARRAY
67101: ST_TO_ADDR
67102: GO 67105
67104: POP
67105: GO 67660
67107: LD_INT 2
67109: DOUBLE
67110: EQUAL
67111: IFTRUE 67121
67113: LD_INT 3
67115: DOUBLE
67116: EQUAL
67117: IFTRUE 67121
67119: GO 67177
67121: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67122: LD_ADDR_VAR 0 9
67126: PUSH
67127: LD_VAR 0 29
67131: PUSH
67132: LD_VAR 0 30
67136: PUSH
67137: LD_VAR 0 31
67141: PUSH
67142: LD_VAR 0 32
67146: PUSH
67147: LD_VAR 0 33
67151: PUSH
67152: LD_VAR 0 34
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: PUSH
67165: LD_VAR 0 4
67169: PUSH
67170: LD_INT 1
67172: PLUS
67173: ARRAY
67174: ST_TO_ADDR
67175: GO 67660
67177: LD_INT 16
67179: DOUBLE
67180: EQUAL
67181: IFTRUE 67239
67183: LD_INT 17
67185: DOUBLE
67186: EQUAL
67187: IFTRUE 67239
67189: LD_INT 18
67191: DOUBLE
67192: EQUAL
67193: IFTRUE 67239
67195: LD_INT 19
67197: DOUBLE
67198: EQUAL
67199: IFTRUE 67239
67201: LD_INT 22
67203: DOUBLE
67204: EQUAL
67205: IFTRUE 67239
67207: LD_INT 20
67209: DOUBLE
67210: EQUAL
67211: IFTRUE 67239
67213: LD_INT 21
67215: DOUBLE
67216: EQUAL
67217: IFTRUE 67239
67219: LD_INT 23
67221: DOUBLE
67222: EQUAL
67223: IFTRUE 67239
67225: LD_INT 24
67227: DOUBLE
67228: EQUAL
67229: IFTRUE 67239
67231: LD_INT 25
67233: DOUBLE
67234: EQUAL
67235: IFTRUE 67239
67237: GO 67295
67239: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67240: LD_ADDR_VAR 0 9
67244: PUSH
67245: LD_VAR 0 35
67249: PUSH
67250: LD_VAR 0 36
67254: PUSH
67255: LD_VAR 0 37
67259: PUSH
67260: LD_VAR 0 38
67264: PUSH
67265: LD_VAR 0 39
67269: PUSH
67270: LD_VAR 0 40
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: PUSH
67283: LD_VAR 0 4
67287: PUSH
67288: LD_INT 1
67290: PLUS
67291: ARRAY
67292: ST_TO_ADDR
67293: GO 67660
67295: LD_INT 6
67297: DOUBLE
67298: EQUAL
67299: IFTRUE 67351
67301: LD_INT 7
67303: DOUBLE
67304: EQUAL
67305: IFTRUE 67351
67307: LD_INT 8
67309: DOUBLE
67310: EQUAL
67311: IFTRUE 67351
67313: LD_INT 13
67315: DOUBLE
67316: EQUAL
67317: IFTRUE 67351
67319: LD_INT 12
67321: DOUBLE
67322: EQUAL
67323: IFTRUE 67351
67325: LD_INT 15
67327: DOUBLE
67328: EQUAL
67329: IFTRUE 67351
67331: LD_INT 11
67333: DOUBLE
67334: EQUAL
67335: IFTRUE 67351
67337: LD_INT 14
67339: DOUBLE
67340: EQUAL
67341: IFTRUE 67351
67343: LD_INT 10
67345: DOUBLE
67346: EQUAL
67347: IFTRUE 67351
67349: GO 67407
67351: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67352: LD_ADDR_VAR 0 9
67356: PUSH
67357: LD_VAR 0 41
67361: PUSH
67362: LD_VAR 0 42
67366: PUSH
67367: LD_VAR 0 43
67371: PUSH
67372: LD_VAR 0 44
67376: PUSH
67377: LD_VAR 0 45
67381: PUSH
67382: LD_VAR 0 46
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: PUSH
67395: LD_VAR 0 4
67399: PUSH
67400: LD_INT 1
67402: PLUS
67403: ARRAY
67404: ST_TO_ADDR
67405: GO 67660
67407: LD_INT 36
67409: DOUBLE
67410: EQUAL
67411: IFTRUE 67415
67413: GO 67471
67415: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67416: LD_ADDR_VAR 0 9
67420: PUSH
67421: LD_VAR 0 47
67425: PUSH
67426: LD_VAR 0 48
67430: PUSH
67431: LD_VAR 0 49
67435: PUSH
67436: LD_VAR 0 50
67440: PUSH
67441: LD_VAR 0 51
67445: PUSH
67446: LD_VAR 0 52
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: PUSH
67459: LD_VAR 0 4
67463: PUSH
67464: LD_INT 1
67466: PLUS
67467: ARRAY
67468: ST_TO_ADDR
67469: GO 67660
67471: LD_INT 4
67473: DOUBLE
67474: EQUAL
67475: IFTRUE 67497
67477: LD_INT 5
67479: DOUBLE
67480: EQUAL
67481: IFTRUE 67497
67483: LD_INT 34
67485: DOUBLE
67486: EQUAL
67487: IFTRUE 67497
67489: LD_INT 37
67491: DOUBLE
67492: EQUAL
67493: IFTRUE 67497
67495: GO 67553
67497: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67498: LD_ADDR_VAR 0 9
67502: PUSH
67503: LD_VAR 0 53
67507: PUSH
67508: LD_VAR 0 54
67512: PUSH
67513: LD_VAR 0 55
67517: PUSH
67518: LD_VAR 0 56
67522: PUSH
67523: LD_VAR 0 57
67527: PUSH
67528: LD_VAR 0 58
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: PUSH
67541: LD_VAR 0 4
67545: PUSH
67546: LD_INT 1
67548: PLUS
67549: ARRAY
67550: ST_TO_ADDR
67551: GO 67660
67553: LD_INT 31
67555: DOUBLE
67556: EQUAL
67557: IFTRUE 67603
67559: LD_INT 32
67561: DOUBLE
67562: EQUAL
67563: IFTRUE 67603
67565: LD_INT 33
67567: DOUBLE
67568: EQUAL
67569: IFTRUE 67603
67571: LD_INT 27
67573: DOUBLE
67574: EQUAL
67575: IFTRUE 67603
67577: LD_INT 26
67579: DOUBLE
67580: EQUAL
67581: IFTRUE 67603
67583: LD_INT 28
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67603
67589: LD_INT 29
67591: DOUBLE
67592: EQUAL
67593: IFTRUE 67603
67595: LD_INT 30
67597: DOUBLE
67598: EQUAL
67599: IFTRUE 67603
67601: GO 67659
67603: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67604: LD_ADDR_VAR 0 9
67608: PUSH
67609: LD_VAR 0 59
67613: PUSH
67614: LD_VAR 0 60
67618: PUSH
67619: LD_VAR 0 61
67623: PUSH
67624: LD_VAR 0 62
67628: PUSH
67629: LD_VAR 0 63
67633: PUSH
67634: LD_VAR 0 64
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: PUSH
67647: LD_VAR 0 4
67651: PUSH
67652: LD_INT 1
67654: PLUS
67655: ARRAY
67656: ST_TO_ADDR
67657: GO 67660
67659: POP
// temp_list2 = [ ] ;
67660: LD_ADDR_VAR 0 10
67664: PUSH
67665: EMPTY
67666: ST_TO_ADDR
// for i in temp_list do
67667: LD_ADDR_VAR 0 8
67671: PUSH
67672: LD_VAR 0 9
67676: PUSH
67677: FOR_IN
67678: IFFALSE 67730
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67680: LD_ADDR_VAR 0 10
67684: PUSH
67685: LD_VAR 0 10
67689: PUSH
67690: LD_VAR 0 8
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PUSH
67699: LD_VAR 0 2
67703: PLUS
67704: PUSH
67705: LD_VAR 0 8
67709: PUSH
67710: LD_INT 2
67712: ARRAY
67713: PUSH
67714: LD_VAR 0 3
67718: PLUS
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: EMPTY
67725: LIST
67726: ADD
67727: ST_TO_ADDR
67728: GO 67677
67730: POP
67731: POP
// result = temp_list2 ;
67732: LD_ADDR_VAR 0 7
67736: PUSH
67737: LD_VAR 0 10
67741: ST_TO_ADDR
// end ;
67742: LD_VAR 0 7
67746: RET
// export function EnemyInRange ( unit , dist ) ; begin
67747: LD_INT 0
67749: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: LD_VAR 0 1
67759: PPUSH
67760: CALL_OW 255
67764: PPUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: CALL_OW 250
67774: PPUSH
67775: LD_VAR 0 1
67779: PPUSH
67780: CALL_OW 251
67784: PPUSH
67785: LD_VAR 0 2
67789: PPUSH
67790: CALL 41149 0 4
67794: PUSH
67795: LD_INT 4
67797: ARRAY
67798: ST_TO_ADDR
// end ;
67799: LD_VAR 0 3
67803: RET
// export function PlayerSeeMe ( unit ) ; begin
67804: LD_INT 0
67806: PPUSH
// result := See ( your_side , unit ) ;
67807: LD_ADDR_VAR 0 2
67811: PUSH
67812: LD_OWVAR 2
67816: PPUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 292
67826: ST_TO_ADDR
// end ;
67827: LD_VAR 0 2
67831: RET
// export function ReverseDir ( unit ) ; begin
67832: LD_INT 0
67834: PPUSH
// if not unit then
67835: LD_VAR 0 1
67839: NOT
67840: IFFALSE 67844
// exit ;
67842: GO 67867
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67844: LD_ADDR_VAR 0 2
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: CALL_OW 254
67858: PUSH
67859: LD_INT 3
67861: PLUS
67862: PUSH
67863: LD_INT 6
67865: MOD
67866: ST_TO_ADDR
// end ;
67867: LD_VAR 0 2
67871: RET
// export function ReverseArray ( array ) ; var i ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
// if not array then
67876: LD_VAR 0 1
67880: NOT
67881: IFFALSE 67885
// exit ;
67883: GO 67940
// result := [ ] ;
67885: LD_ADDR_VAR 0 2
67889: PUSH
67890: EMPTY
67891: ST_TO_ADDR
// for i := array downto 1 do
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: DOUBLE
67898: LD_VAR 0 1
67902: INC
67903: ST_TO_ADDR
67904: LD_INT 1
67906: PUSH
67907: FOR_DOWNTO
67908: IFFALSE 67938
// result := Join ( result , array [ i ] ) ;
67910: LD_ADDR_VAR 0 2
67914: PUSH
67915: LD_VAR 0 2
67919: PPUSH
67920: LD_VAR 0 1
67924: PUSH
67925: LD_VAR 0 3
67929: ARRAY
67930: PPUSH
67931: CALL 72584 0 2
67935: ST_TO_ADDR
67936: GO 67907
67938: POP
67939: POP
// end ;
67940: LD_VAR 0 2
67944: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67945: LD_INT 0
67947: PPUSH
67948: PPUSH
67949: PPUSH
67950: PPUSH
67951: PPUSH
67952: PPUSH
// if not unit or not hexes then
67953: LD_VAR 0 1
67957: NOT
67958: PUSH
67959: LD_VAR 0 2
67963: NOT
67964: OR
67965: IFFALSE 67969
// exit ;
67967: GO 68092
// dist := 9999 ;
67969: LD_ADDR_VAR 0 5
67973: PUSH
67974: LD_INT 9999
67976: ST_TO_ADDR
// for i = 1 to hexes do
67977: LD_ADDR_VAR 0 4
67981: PUSH
67982: DOUBLE
67983: LD_INT 1
67985: DEC
67986: ST_TO_ADDR
67987: LD_VAR 0 2
67991: PUSH
67992: FOR_TO
67993: IFFALSE 68080
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67995: LD_ADDR_VAR 0 6
67999: PUSH
68000: LD_VAR 0 1
68004: PPUSH
68005: LD_VAR 0 2
68009: PUSH
68010: LD_VAR 0 4
68014: ARRAY
68015: PUSH
68016: LD_INT 1
68018: ARRAY
68019: PPUSH
68020: LD_VAR 0 2
68024: PUSH
68025: LD_VAR 0 4
68029: ARRAY
68030: PUSH
68031: LD_INT 2
68033: ARRAY
68034: PPUSH
68035: CALL_OW 297
68039: ST_TO_ADDR
// if tdist < dist then
68040: LD_VAR 0 6
68044: PUSH
68045: LD_VAR 0 5
68049: LESS
68050: IFFALSE 68078
// begin hex := hexes [ i ] ;
68052: LD_ADDR_VAR 0 8
68056: PUSH
68057: LD_VAR 0 2
68061: PUSH
68062: LD_VAR 0 4
68066: ARRAY
68067: ST_TO_ADDR
// dist := tdist ;
68068: LD_ADDR_VAR 0 5
68072: PUSH
68073: LD_VAR 0 6
68077: ST_TO_ADDR
// end ; end ;
68078: GO 67992
68080: POP
68081: POP
// result := hex ;
68082: LD_ADDR_VAR 0 3
68086: PUSH
68087: LD_VAR 0 8
68091: ST_TO_ADDR
// end ;
68092: LD_VAR 0 3
68096: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68097: LD_INT 0
68099: PPUSH
68100: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68101: LD_VAR 0 1
68105: NOT
68106: PUSH
68107: LD_VAR 0 1
68111: PUSH
68112: LD_INT 21
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 23
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PPUSH
68136: CALL_OW 69
68140: IN
68141: NOT
68142: OR
68143: IFFALSE 68147
// exit ;
68145: GO 68194
// for i = 1 to 3 do
68147: LD_ADDR_VAR 0 3
68151: PUSH
68152: DOUBLE
68153: LD_INT 1
68155: DEC
68156: ST_TO_ADDR
68157: LD_INT 3
68159: PUSH
68160: FOR_TO
68161: IFFALSE 68192
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68163: LD_VAR 0 1
68167: PPUSH
68168: CALL_OW 250
68172: PPUSH
68173: LD_VAR 0 1
68177: PPUSH
68178: CALL_OW 251
68182: PPUSH
68183: LD_INT 1
68185: PPUSH
68186: CALL_OW 453
68190: GO 68160
68192: POP
68193: POP
// end ;
68194: LD_VAR 0 2
68198: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68199: LD_INT 0
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68207: LD_VAR 0 1
68211: NOT
68212: PUSH
68213: LD_VAR 0 2
68217: NOT
68218: OR
68219: PUSH
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 314
68229: OR
68230: IFFALSE 68234
// exit ;
68232: GO 68701
// if GetLives ( i ) < 250 then
68234: LD_VAR 0 4
68238: PPUSH
68239: CALL_OW 256
68243: PUSH
68244: LD_INT 250
68246: LESS
68247: IFFALSE 68260
// begin ComAutodestruct ( i ) ;
68249: LD_VAR 0 4
68253: PPUSH
68254: CALL 68097 0 1
// exit ;
68258: GO 68701
// end ; x := GetX ( enemy_unit ) ;
68260: LD_ADDR_VAR 0 7
68264: PUSH
68265: LD_VAR 0 2
68269: PPUSH
68270: CALL_OW 250
68274: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68275: LD_ADDR_VAR 0 8
68279: PUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: CALL_OW 251
68289: ST_TO_ADDR
// if not x or not y then
68290: LD_VAR 0 7
68294: NOT
68295: PUSH
68296: LD_VAR 0 8
68300: NOT
68301: OR
68302: IFFALSE 68306
// exit ;
68304: GO 68701
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68306: LD_ADDR_VAR 0 6
68310: PUSH
68311: LD_VAR 0 7
68315: PPUSH
68316: LD_INT 0
68318: PPUSH
68319: LD_INT 4
68321: PPUSH
68322: CALL_OW 272
68326: PUSH
68327: LD_VAR 0 8
68331: PPUSH
68332: LD_INT 0
68334: PPUSH
68335: LD_INT 4
68337: PPUSH
68338: CALL_OW 273
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_VAR 0 7
68351: PPUSH
68352: LD_INT 1
68354: PPUSH
68355: LD_INT 4
68357: PPUSH
68358: CALL_OW 272
68362: PUSH
68363: LD_VAR 0 8
68367: PPUSH
68368: LD_INT 1
68370: PPUSH
68371: LD_INT 4
68373: PPUSH
68374: CALL_OW 273
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_VAR 0 7
68387: PPUSH
68388: LD_INT 2
68390: PPUSH
68391: LD_INT 4
68393: PPUSH
68394: CALL_OW 272
68398: PUSH
68399: LD_VAR 0 8
68403: PPUSH
68404: LD_INT 2
68406: PPUSH
68407: LD_INT 4
68409: PPUSH
68410: CALL_OW 273
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_VAR 0 7
68423: PPUSH
68424: LD_INT 3
68426: PPUSH
68427: LD_INT 4
68429: PPUSH
68430: CALL_OW 272
68434: PUSH
68435: LD_VAR 0 8
68439: PPUSH
68440: LD_INT 3
68442: PPUSH
68443: LD_INT 4
68445: PPUSH
68446: CALL_OW 273
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_VAR 0 7
68459: PPUSH
68460: LD_INT 4
68462: PPUSH
68463: LD_INT 4
68465: PPUSH
68466: CALL_OW 272
68470: PUSH
68471: LD_VAR 0 8
68475: PPUSH
68476: LD_INT 4
68478: PPUSH
68479: LD_INT 4
68481: PPUSH
68482: CALL_OW 273
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_VAR 0 7
68495: PPUSH
68496: LD_INT 5
68498: PPUSH
68499: LD_INT 4
68501: PPUSH
68502: CALL_OW 272
68506: PUSH
68507: LD_VAR 0 8
68511: PPUSH
68512: LD_INT 5
68514: PPUSH
68515: LD_INT 4
68517: PPUSH
68518: CALL_OW 273
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: ST_TO_ADDR
// for i = tmp downto 1 do
68535: LD_ADDR_VAR 0 4
68539: PUSH
68540: DOUBLE
68541: LD_VAR 0 6
68545: INC
68546: ST_TO_ADDR
68547: LD_INT 1
68549: PUSH
68550: FOR_DOWNTO
68551: IFFALSE 68652
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68553: LD_VAR 0 6
68557: PUSH
68558: LD_VAR 0 4
68562: ARRAY
68563: PUSH
68564: LD_INT 1
68566: ARRAY
68567: PPUSH
68568: LD_VAR 0 6
68572: PUSH
68573: LD_VAR 0 4
68577: ARRAY
68578: PUSH
68579: LD_INT 2
68581: ARRAY
68582: PPUSH
68583: CALL_OW 488
68587: NOT
68588: PUSH
68589: LD_VAR 0 6
68593: PUSH
68594: LD_VAR 0 4
68598: ARRAY
68599: PUSH
68600: LD_INT 1
68602: ARRAY
68603: PPUSH
68604: LD_VAR 0 6
68608: PUSH
68609: LD_VAR 0 4
68613: ARRAY
68614: PUSH
68615: LD_INT 2
68617: ARRAY
68618: PPUSH
68619: CALL_OW 428
68623: PUSH
68624: LD_INT 0
68626: NONEQUAL
68627: OR
68628: IFFALSE 68650
// tmp := Delete ( tmp , i ) ;
68630: LD_ADDR_VAR 0 6
68634: PUSH
68635: LD_VAR 0 6
68639: PPUSH
68640: LD_VAR 0 4
68644: PPUSH
68645: CALL_OW 3
68649: ST_TO_ADDR
68650: GO 68550
68652: POP
68653: POP
// j := GetClosestHex ( unit , tmp ) ;
68654: LD_ADDR_VAR 0 5
68658: PUSH
68659: LD_VAR 0 1
68663: PPUSH
68664: LD_VAR 0 6
68668: PPUSH
68669: CALL 67945 0 2
68673: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68674: LD_VAR 0 1
68678: PPUSH
68679: LD_VAR 0 5
68683: PUSH
68684: LD_INT 1
68686: ARRAY
68687: PPUSH
68688: LD_VAR 0 5
68692: PUSH
68693: LD_INT 2
68695: ARRAY
68696: PPUSH
68697: CALL_OW 111
// end ;
68701: LD_VAR 0 3
68705: RET
// export function PrepareApemanSoldier ( ) ; begin
68706: LD_INT 0
68708: PPUSH
// uc_nation := 0 ;
68709: LD_ADDR_OWVAR 21
68713: PUSH
68714: LD_INT 0
68716: ST_TO_ADDR
// hc_sex := sex_male ;
68717: LD_ADDR_OWVAR 27
68721: PUSH
68722: LD_INT 1
68724: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68725: LD_ADDR_OWVAR 28
68729: PUSH
68730: LD_INT 15
68732: ST_TO_ADDR
// hc_gallery :=  ;
68733: LD_ADDR_OWVAR 33
68737: PUSH
68738: LD_STRING 
68740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68741: LD_ADDR_OWVAR 31
68745: PUSH
68746: LD_INT 0
68748: PPUSH
68749: LD_INT 3
68751: PPUSH
68752: CALL_OW 12
68756: PUSH
68757: LD_INT 0
68759: PPUSH
68760: LD_INT 3
68762: PPUSH
68763: CALL_OW 12
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: ST_TO_ADDR
// end ;
68780: LD_VAR 0 1
68784: RET
// export function PrepareApemanEngineer ( ) ; begin
68785: LD_INT 0
68787: PPUSH
// uc_nation := 0 ;
68788: LD_ADDR_OWVAR 21
68792: PUSH
68793: LD_INT 0
68795: ST_TO_ADDR
// hc_sex := sex_male ;
68796: LD_ADDR_OWVAR 27
68800: PUSH
68801: LD_INT 1
68803: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68804: LD_ADDR_OWVAR 28
68808: PUSH
68809: LD_INT 16
68811: ST_TO_ADDR
// hc_gallery :=  ;
68812: LD_ADDR_OWVAR 33
68816: PUSH
68817: LD_STRING 
68819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68820: LD_ADDR_OWVAR 31
68824: PUSH
68825: LD_INT 0
68827: PPUSH
68828: LD_INT 3
68830: PPUSH
68831: CALL_OW 12
68835: PUSH
68836: LD_INT 0
68838: PPUSH
68839: LD_INT 3
68841: PPUSH
68842: CALL_OW 12
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: ST_TO_ADDR
// end ;
68859: LD_VAR 0 1
68863: RET
// export function PrepareApeman ( agressivity ) ; begin
68864: LD_INT 0
68866: PPUSH
// uc_side := 0 ;
68867: LD_ADDR_OWVAR 20
68871: PUSH
68872: LD_INT 0
68874: ST_TO_ADDR
// uc_nation := 0 ;
68875: LD_ADDR_OWVAR 21
68879: PUSH
68880: LD_INT 0
68882: ST_TO_ADDR
// hc_sex := sex_male ;
68883: LD_ADDR_OWVAR 27
68887: PUSH
68888: LD_INT 1
68890: ST_TO_ADDR
// hc_class := class_apeman ;
68891: LD_ADDR_OWVAR 28
68895: PUSH
68896: LD_INT 12
68898: ST_TO_ADDR
// hc_gallery :=  ;
68899: LD_ADDR_OWVAR 33
68903: PUSH
68904: LD_STRING 
68906: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68907: LD_ADDR_OWVAR 35
68911: PUSH
68912: LD_VAR 0 1
68916: NEG
68917: PPUSH
68918: LD_VAR 0 1
68922: PPUSH
68923: CALL_OW 12
68927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68928: LD_ADDR_OWVAR 31
68932: PUSH
68933: LD_INT 0
68935: PPUSH
68936: LD_INT 3
68938: PPUSH
68939: CALL_OW 12
68943: PUSH
68944: LD_INT 0
68946: PPUSH
68947: LD_INT 3
68949: PPUSH
68950: CALL_OW 12
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: LD_INT 0
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: ST_TO_ADDR
// end ;
68967: LD_VAR 0 2
68971: RET
// export function PrepareTiger ( agressivity ) ; begin
68972: LD_INT 0
68974: PPUSH
// uc_side := 0 ;
68975: LD_ADDR_OWVAR 20
68979: PUSH
68980: LD_INT 0
68982: ST_TO_ADDR
// uc_nation := 0 ;
68983: LD_ADDR_OWVAR 21
68987: PUSH
68988: LD_INT 0
68990: ST_TO_ADDR
// hc_class := class_tiger ;
68991: LD_ADDR_OWVAR 28
68995: PUSH
68996: LD_INT 14
68998: ST_TO_ADDR
// hc_gallery :=  ;
68999: LD_ADDR_OWVAR 33
69003: PUSH
69004: LD_STRING 
69006: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69007: LD_ADDR_OWVAR 35
69011: PUSH
69012: LD_VAR 0 1
69016: NEG
69017: PPUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL_OW 12
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 2
69032: RET
// export function PrepareEnchidna ( ) ; begin
69033: LD_INT 0
69035: PPUSH
// uc_side := 0 ;
69036: LD_ADDR_OWVAR 20
69040: PUSH
69041: LD_INT 0
69043: ST_TO_ADDR
// uc_nation := 0 ;
69044: LD_ADDR_OWVAR 21
69048: PUSH
69049: LD_INT 0
69051: ST_TO_ADDR
// hc_class := class_baggie ;
69052: LD_ADDR_OWVAR 28
69056: PUSH
69057: LD_INT 13
69059: ST_TO_ADDR
// hc_gallery :=  ;
69060: LD_ADDR_OWVAR 33
69064: PUSH
69065: LD_STRING 
69067: ST_TO_ADDR
// end ;
69068: LD_VAR 0 1
69072: RET
// export function PrepareFrog ( ) ; begin
69073: LD_INT 0
69075: PPUSH
// uc_side := 0 ;
69076: LD_ADDR_OWVAR 20
69080: PUSH
69081: LD_INT 0
69083: ST_TO_ADDR
// uc_nation := 0 ;
69084: LD_ADDR_OWVAR 21
69088: PUSH
69089: LD_INT 0
69091: ST_TO_ADDR
// hc_class := class_frog ;
69092: LD_ADDR_OWVAR 28
69096: PUSH
69097: LD_INT 19
69099: ST_TO_ADDR
// hc_gallery :=  ;
69100: LD_ADDR_OWVAR 33
69104: PUSH
69105: LD_STRING 
69107: ST_TO_ADDR
// end ;
69108: LD_VAR 0 1
69112: RET
// export function PrepareFish ( ) ; begin
69113: LD_INT 0
69115: PPUSH
// uc_side := 0 ;
69116: LD_ADDR_OWVAR 20
69120: PUSH
69121: LD_INT 0
69123: ST_TO_ADDR
// uc_nation := 0 ;
69124: LD_ADDR_OWVAR 21
69128: PUSH
69129: LD_INT 0
69131: ST_TO_ADDR
// hc_class := class_fish ;
69132: LD_ADDR_OWVAR 28
69136: PUSH
69137: LD_INT 20
69139: ST_TO_ADDR
// hc_gallery :=  ;
69140: LD_ADDR_OWVAR 33
69144: PUSH
69145: LD_STRING 
69147: ST_TO_ADDR
// end ;
69148: LD_VAR 0 1
69152: RET
// export function PrepareBird ( ) ; begin
69153: LD_INT 0
69155: PPUSH
// uc_side := 0 ;
69156: LD_ADDR_OWVAR 20
69160: PUSH
69161: LD_INT 0
69163: ST_TO_ADDR
// uc_nation := 0 ;
69164: LD_ADDR_OWVAR 21
69168: PUSH
69169: LD_INT 0
69171: ST_TO_ADDR
// hc_class := class_phororhacos ;
69172: LD_ADDR_OWVAR 28
69176: PUSH
69177: LD_INT 18
69179: ST_TO_ADDR
// hc_gallery :=  ;
69180: LD_ADDR_OWVAR 33
69184: PUSH
69185: LD_STRING 
69187: ST_TO_ADDR
// end ;
69188: LD_VAR 0 1
69192: RET
// export function PrepareHorse ( ) ; begin
69193: LD_INT 0
69195: PPUSH
// uc_side := 0 ;
69196: LD_ADDR_OWVAR 20
69200: PUSH
69201: LD_INT 0
69203: ST_TO_ADDR
// uc_nation := 0 ;
69204: LD_ADDR_OWVAR 21
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// hc_class := class_horse ;
69212: LD_ADDR_OWVAR 28
69216: PUSH
69217: LD_INT 21
69219: ST_TO_ADDR
// hc_gallery :=  ;
69220: LD_ADDR_OWVAR 33
69224: PUSH
69225: LD_STRING 
69227: ST_TO_ADDR
// end ;
69228: LD_VAR 0 1
69232: RET
// export function PrepareMastodont ( ) ; begin
69233: LD_INT 0
69235: PPUSH
// uc_side := 0 ;
69236: LD_ADDR_OWVAR 20
69240: PUSH
69241: LD_INT 0
69243: ST_TO_ADDR
// uc_nation := 0 ;
69244: LD_ADDR_OWVAR 21
69248: PUSH
69249: LD_INT 0
69251: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69252: LD_ADDR_OWVAR 37
69256: PUSH
69257: LD_INT 31
69259: ST_TO_ADDR
// vc_control := control_rider ;
69260: LD_ADDR_OWVAR 38
69264: PUSH
69265: LD_INT 4
69267: ST_TO_ADDR
// end ;
69268: LD_VAR 0 1
69272: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
// uc_side = 0 ;
69278: LD_ADDR_OWVAR 20
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// uc_nation = 0 ;
69286: LD_ADDR_OWVAR 21
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// InitHc_All ( ) ;
69294: CALL_OW 584
// InitVc ;
69298: CALL_OW 20
// if mastodonts then
69302: LD_VAR 0 6
69306: IFFALSE 69373
// for i = 1 to mastodonts do
69308: LD_ADDR_VAR 0 11
69312: PUSH
69313: DOUBLE
69314: LD_INT 1
69316: DEC
69317: ST_TO_ADDR
69318: LD_VAR 0 6
69322: PUSH
69323: FOR_TO
69324: IFFALSE 69371
// begin vc_chassis := 31 ;
69326: LD_ADDR_OWVAR 37
69330: PUSH
69331: LD_INT 31
69333: ST_TO_ADDR
// vc_control := control_rider ;
69334: LD_ADDR_OWVAR 38
69338: PUSH
69339: LD_INT 4
69341: ST_TO_ADDR
// animal := CreateVehicle ;
69342: LD_ADDR_VAR 0 12
69346: PUSH
69347: CALL_OW 45
69351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69352: LD_VAR 0 12
69356: PPUSH
69357: LD_VAR 0 8
69361: PPUSH
69362: LD_INT 0
69364: PPUSH
69365: CALL 71501 0 3
// end ;
69369: GO 69323
69371: POP
69372: POP
// if horses then
69373: LD_VAR 0 5
69377: IFFALSE 69444
// for i = 1 to horses do
69379: LD_ADDR_VAR 0 11
69383: PUSH
69384: DOUBLE
69385: LD_INT 1
69387: DEC
69388: ST_TO_ADDR
69389: LD_VAR 0 5
69393: PUSH
69394: FOR_TO
69395: IFFALSE 69442
// begin hc_class := 21 ;
69397: LD_ADDR_OWVAR 28
69401: PUSH
69402: LD_INT 21
69404: ST_TO_ADDR
// hc_gallery :=  ;
69405: LD_ADDR_OWVAR 33
69409: PUSH
69410: LD_STRING 
69412: ST_TO_ADDR
// animal := CreateHuman ;
69413: LD_ADDR_VAR 0 12
69417: PUSH
69418: CALL_OW 44
69422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69423: LD_VAR 0 12
69427: PPUSH
69428: LD_VAR 0 8
69432: PPUSH
69433: LD_INT 0
69435: PPUSH
69436: CALL 71501 0 3
// end ;
69440: GO 69394
69442: POP
69443: POP
// if birds then
69444: LD_VAR 0 1
69448: IFFALSE 69515
// for i = 1 to birds do
69450: LD_ADDR_VAR 0 11
69454: PUSH
69455: DOUBLE
69456: LD_INT 1
69458: DEC
69459: ST_TO_ADDR
69460: LD_VAR 0 1
69464: PUSH
69465: FOR_TO
69466: IFFALSE 69513
// begin hc_class = 18 ;
69468: LD_ADDR_OWVAR 28
69472: PUSH
69473: LD_INT 18
69475: ST_TO_ADDR
// hc_gallery =  ;
69476: LD_ADDR_OWVAR 33
69480: PUSH
69481: LD_STRING 
69483: ST_TO_ADDR
// animal := CreateHuman ;
69484: LD_ADDR_VAR 0 12
69488: PUSH
69489: CALL_OW 44
69493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69494: LD_VAR 0 12
69498: PPUSH
69499: LD_VAR 0 8
69503: PPUSH
69504: LD_INT 0
69506: PPUSH
69507: CALL 71501 0 3
// end ;
69511: GO 69465
69513: POP
69514: POP
// if tigers then
69515: LD_VAR 0 2
69519: IFFALSE 69603
// for i = 1 to tigers do
69521: LD_ADDR_VAR 0 11
69525: PUSH
69526: DOUBLE
69527: LD_INT 1
69529: DEC
69530: ST_TO_ADDR
69531: LD_VAR 0 2
69535: PUSH
69536: FOR_TO
69537: IFFALSE 69601
// begin hc_class = class_tiger ;
69539: LD_ADDR_OWVAR 28
69543: PUSH
69544: LD_INT 14
69546: ST_TO_ADDR
// hc_gallery =  ;
69547: LD_ADDR_OWVAR 33
69551: PUSH
69552: LD_STRING 
69554: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69555: LD_ADDR_OWVAR 35
69559: PUSH
69560: LD_INT 7
69562: NEG
69563: PPUSH
69564: LD_INT 7
69566: PPUSH
69567: CALL_OW 12
69571: ST_TO_ADDR
// animal := CreateHuman ;
69572: LD_ADDR_VAR 0 12
69576: PUSH
69577: CALL_OW 44
69581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69582: LD_VAR 0 12
69586: PPUSH
69587: LD_VAR 0 8
69591: PPUSH
69592: LD_INT 0
69594: PPUSH
69595: CALL 71501 0 3
// end ;
69599: GO 69536
69601: POP
69602: POP
// if apemans then
69603: LD_VAR 0 3
69607: IFFALSE 69730
// for i = 1 to apemans do
69609: LD_ADDR_VAR 0 11
69613: PUSH
69614: DOUBLE
69615: LD_INT 1
69617: DEC
69618: ST_TO_ADDR
69619: LD_VAR 0 3
69623: PUSH
69624: FOR_TO
69625: IFFALSE 69728
// begin hc_class = class_apeman ;
69627: LD_ADDR_OWVAR 28
69631: PUSH
69632: LD_INT 12
69634: ST_TO_ADDR
// hc_gallery =  ;
69635: LD_ADDR_OWVAR 33
69639: PUSH
69640: LD_STRING 
69642: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69643: LD_ADDR_OWVAR 35
69647: PUSH
69648: LD_INT 2
69650: NEG
69651: PPUSH
69652: LD_INT 2
69654: PPUSH
69655: CALL_OW 12
69659: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69660: LD_ADDR_OWVAR 31
69664: PUSH
69665: LD_INT 1
69667: PPUSH
69668: LD_INT 3
69670: PPUSH
69671: CALL_OW 12
69675: PUSH
69676: LD_INT 1
69678: PPUSH
69679: LD_INT 3
69681: PPUSH
69682: CALL_OW 12
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// animal := CreateHuman ;
69699: LD_ADDR_VAR 0 12
69703: PUSH
69704: CALL_OW 44
69708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69709: LD_VAR 0 12
69713: PPUSH
69714: LD_VAR 0 8
69718: PPUSH
69719: LD_INT 0
69721: PPUSH
69722: CALL 71501 0 3
// end ;
69726: GO 69624
69728: POP
69729: POP
// if enchidnas then
69730: LD_VAR 0 4
69734: IFFALSE 69801
// for i = 1 to enchidnas do
69736: LD_ADDR_VAR 0 11
69740: PUSH
69741: DOUBLE
69742: LD_INT 1
69744: DEC
69745: ST_TO_ADDR
69746: LD_VAR 0 4
69750: PUSH
69751: FOR_TO
69752: IFFALSE 69799
// begin hc_class = 13 ;
69754: LD_ADDR_OWVAR 28
69758: PUSH
69759: LD_INT 13
69761: ST_TO_ADDR
// hc_gallery =  ;
69762: LD_ADDR_OWVAR 33
69766: PUSH
69767: LD_STRING 
69769: ST_TO_ADDR
// animal := CreateHuman ;
69770: LD_ADDR_VAR 0 12
69774: PUSH
69775: CALL_OW 44
69779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69780: LD_VAR 0 12
69784: PPUSH
69785: LD_VAR 0 8
69789: PPUSH
69790: LD_INT 0
69792: PPUSH
69793: CALL 71501 0 3
// end ;
69797: GO 69751
69799: POP
69800: POP
// if fishes then
69801: LD_VAR 0 7
69805: IFFALSE 69872
// for i = 1 to fishes do
69807: LD_ADDR_VAR 0 11
69811: PUSH
69812: DOUBLE
69813: LD_INT 1
69815: DEC
69816: ST_TO_ADDR
69817: LD_VAR 0 7
69821: PUSH
69822: FOR_TO
69823: IFFALSE 69870
// begin hc_class = 20 ;
69825: LD_ADDR_OWVAR 28
69829: PUSH
69830: LD_INT 20
69832: ST_TO_ADDR
// hc_gallery =  ;
69833: LD_ADDR_OWVAR 33
69837: PUSH
69838: LD_STRING 
69840: ST_TO_ADDR
// animal := CreateHuman ;
69841: LD_ADDR_VAR 0 12
69845: PUSH
69846: CALL_OW 44
69850: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69851: LD_VAR 0 12
69855: PPUSH
69856: LD_VAR 0 9
69860: PPUSH
69861: LD_INT 0
69863: PPUSH
69864: CALL 71501 0 3
// end ;
69868: GO 69822
69870: POP
69871: POP
// end ;
69872: LD_VAR 0 10
69876: RET
// export function WantHeal ( sci , unit ) ; begin
69877: LD_INT 0
69879: PPUSH
// if GetTaskList ( sci ) > 0 then
69880: LD_VAR 0 1
69884: PPUSH
69885: CALL_OW 437
69889: PUSH
69890: LD_INT 0
69892: GREATER
69893: IFFALSE 69963
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69895: LD_VAR 0 1
69899: PPUSH
69900: CALL_OW 437
69904: PUSH
69905: LD_INT 1
69907: ARRAY
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: LD_STRING l
69915: EQUAL
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: CALL_OW 437
69926: PUSH
69927: LD_INT 1
69929: ARRAY
69930: PUSH
69931: LD_INT 4
69933: ARRAY
69934: PUSH
69935: LD_VAR 0 2
69939: EQUAL
69940: AND
69941: IFFALSE 69953
// result := true else
69943: LD_ADDR_VAR 0 3
69947: PUSH
69948: LD_INT 1
69950: ST_TO_ADDR
69951: GO 69961
// result := false ;
69953: LD_ADDR_VAR 0 3
69957: PUSH
69958: LD_INT 0
69960: ST_TO_ADDR
// end else
69961: GO 69971
// result := false ;
69963: LD_ADDR_VAR 0 3
69967: PUSH
69968: LD_INT 0
69970: ST_TO_ADDR
// end ;
69971: LD_VAR 0 3
69975: RET
// export function HealTarget ( sci ) ; begin
69976: LD_INT 0
69978: PPUSH
// if not sci then
69979: LD_VAR 0 1
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70053
// result := 0 ;
69988: LD_ADDR_VAR 0 2
69992: PUSH
69993: LD_INT 0
69995: ST_TO_ADDR
// if GetTaskList ( sci ) then
69996: LD_VAR 0 1
70000: PPUSH
70001: CALL_OW 437
70005: IFFALSE 70053
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 437
70016: PUSH
70017: LD_INT 1
70019: ARRAY
70020: PUSH
70021: LD_INT 1
70023: ARRAY
70024: PUSH
70025: LD_STRING l
70027: EQUAL
70028: IFFALSE 70053
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70030: LD_ADDR_VAR 0 2
70034: PUSH
70035: LD_VAR 0 1
70039: PPUSH
70040: CALL_OW 437
70044: PUSH
70045: LD_INT 1
70047: ARRAY
70048: PUSH
70049: LD_INT 4
70051: ARRAY
70052: ST_TO_ADDR
// end ;
70053: LD_VAR 0 2
70057: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70058: LD_INT 0
70060: PPUSH
70061: PPUSH
70062: PPUSH
70063: PPUSH
// if not base_units then
70064: LD_VAR 0 1
70068: NOT
70069: IFFALSE 70073
// exit ;
70071: GO 70160
// result := false ;
70073: LD_ADDR_VAR 0 2
70077: PUSH
70078: LD_INT 0
70080: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70081: LD_ADDR_VAR 0 5
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_INT 21
70093: PUSH
70094: LD_INT 3
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PPUSH
70101: CALL_OW 72
70105: ST_TO_ADDR
// if not tmp then
70106: LD_VAR 0 5
70110: NOT
70111: IFFALSE 70115
// exit ;
70113: GO 70160
// for i in tmp do
70115: LD_ADDR_VAR 0 3
70119: PUSH
70120: LD_VAR 0 5
70124: PUSH
70125: FOR_IN
70126: IFFALSE 70158
// begin result := EnemyInRange ( i , 22 ) ;
70128: LD_ADDR_VAR 0 2
70132: PUSH
70133: LD_VAR 0 3
70137: PPUSH
70138: LD_INT 22
70140: PPUSH
70141: CALL 67747 0 2
70145: ST_TO_ADDR
// if result then
70146: LD_VAR 0 2
70150: IFFALSE 70156
// exit ;
70152: POP
70153: POP
70154: GO 70160
// end ;
70156: GO 70125
70158: POP
70159: POP
// end ;
70160: LD_VAR 0 2
70164: RET
// export function FilterByTag ( units , tag ) ; begin
70165: LD_INT 0
70167: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70168: LD_ADDR_VAR 0 3
70172: PUSH
70173: LD_VAR 0 1
70177: PPUSH
70178: LD_INT 120
70180: PUSH
70181: LD_VAR 0 2
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PPUSH
70190: CALL_OW 72
70194: ST_TO_ADDR
// end ;
70195: LD_VAR 0 3
70199: RET
// export function IsDriver ( un ) ; begin
70200: LD_INT 0
70202: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70203: LD_ADDR_VAR 0 2
70207: PUSH
70208: LD_VAR 0 1
70212: PUSH
70213: LD_INT 55
70215: PUSH
70216: EMPTY
70217: LIST
70218: PPUSH
70219: CALL_OW 69
70223: IN
70224: ST_TO_ADDR
// end ;
70225: LD_VAR 0 2
70229: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70230: LD_INT 0
70232: PPUSH
70233: PPUSH
// list := [ ] ;
70234: LD_ADDR_VAR 0 5
70238: PUSH
70239: EMPTY
70240: ST_TO_ADDR
// case d of 0 :
70241: LD_VAR 0 3
70245: PUSH
70246: LD_INT 0
70248: DOUBLE
70249: EQUAL
70250: IFTRUE 70254
70252: GO 70387
70254: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70255: LD_ADDR_VAR 0 5
70259: PUSH
70260: LD_VAR 0 1
70264: PUSH
70265: LD_INT 4
70267: MINUS
70268: PUSH
70269: LD_VAR 0 2
70273: PUSH
70274: LD_INT 4
70276: MINUS
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: PUSH
70286: LD_VAR 0 1
70290: PUSH
70291: LD_INT 3
70293: MINUS
70294: PUSH
70295: LD_VAR 0 2
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: LIST
70307: PUSH
70308: LD_VAR 0 1
70312: PUSH
70313: LD_INT 4
70315: PLUS
70316: PUSH
70317: LD_VAR 0 2
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: PUSH
70330: LD_VAR 0 1
70334: PUSH
70335: LD_INT 3
70337: PLUS
70338: PUSH
70339: LD_VAR 0 2
70343: PUSH
70344: LD_INT 3
70346: PLUS
70347: PUSH
70348: LD_INT 5
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: LIST
70355: PUSH
70356: LD_VAR 0 1
70360: PUSH
70361: LD_VAR 0 2
70365: PUSH
70366: LD_INT 4
70368: PLUS
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: ST_TO_ADDR
// end ; 1 :
70385: GO 71085
70387: LD_INT 1
70389: DOUBLE
70390: EQUAL
70391: IFTRUE 70395
70393: GO 70528
70395: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70396: LD_ADDR_VAR 0 5
70400: PUSH
70401: LD_VAR 0 1
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: LD_INT 4
70413: MINUS
70414: PUSH
70415: LD_INT 3
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: PUSH
70423: LD_VAR 0 1
70427: PUSH
70428: LD_INT 3
70430: MINUS
70431: PUSH
70432: LD_VAR 0 2
70436: PUSH
70437: LD_INT 3
70439: MINUS
70440: PUSH
70441: LD_INT 2
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: LIST
70448: PUSH
70449: LD_VAR 0 1
70453: PUSH
70454: LD_INT 4
70456: MINUS
70457: PUSH
70458: LD_VAR 0 2
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: PUSH
70471: LD_VAR 0 1
70475: PUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_INT 3
70483: PLUS
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: PUSH
70493: LD_VAR 0 1
70497: PUSH
70498: LD_INT 4
70500: PLUS
70501: PUSH
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 4
70509: PLUS
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: ST_TO_ADDR
// end ; 2 :
70526: GO 71085
70528: LD_INT 2
70530: DOUBLE
70531: EQUAL
70532: IFTRUE 70536
70534: GO 70665
70536: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70537: LD_ADDR_VAR 0 5
70541: PUSH
70542: LD_VAR 0 1
70546: PUSH
70547: LD_VAR 0 2
70551: PUSH
70552: LD_INT 3
70554: MINUS
70555: PUSH
70556: LD_INT 3
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: LIST
70563: PUSH
70564: LD_VAR 0 1
70568: PUSH
70569: LD_INT 4
70571: PLUS
70572: PUSH
70573: LD_VAR 0 2
70577: PUSH
70578: LD_INT 4
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: PUSH
70586: LD_VAR 0 1
70590: PUSH
70591: LD_VAR 0 2
70595: PUSH
70596: LD_INT 4
70598: PLUS
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: LIST
70607: PUSH
70608: LD_VAR 0 1
70612: PUSH
70613: LD_INT 3
70615: MINUS
70616: PUSH
70617: LD_VAR 0 2
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: PUSH
70630: LD_VAR 0 1
70634: PUSH
70635: LD_INT 4
70637: MINUS
70638: PUSH
70639: LD_VAR 0 2
70643: PUSH
70644: LD_INT 4
70646: MINUS
70647: PUSH
70648: LD_INT 2
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: LIST
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// end ; 3 :
70663: GO 71085
70665: LD_INT 3
70667: DOUBLE
70668: EQUAL
70669: IFTRUE 70673
70671: GO 70806
70673: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70674: LD_ADDR_VAR 0 5
70678: PUSH
70679: LD_VAR 0 1
70683: PUSH
70684: LD_INT 3
70686: PLUS
70687: PUSH
70688: LD_VAR 0 2
70692: PUSH
70693: LD_INT 4
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: PUSH
70701: LD_VAR 0 1
70705: PUSH
70706: LD_INT 4
70708: PLUS
70709: PUSH
70710: LD_VAR 0 2
70714: PUSH
70715: LD_INT 4
70717: PLUS
70718: PUSH
70719: LD_INT 5
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: LIST
70726: PUSH
70727: LD_VAR 0 1
70731: PUSH
70732: LD_INT 4
70734: MINUS
70735: PUSH
70736: LD_VAR 0 2
70740: PUSH
70741: LD_INT 1
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: PUSH
70749: LD_VAR 0 1
70753: PUSH
70754: LD_VAR 0 2
70758: PUSH
70759: LD_INT 4
70761: MINUS
70762: PUSH
70763: LD_INT 3
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: PUSH
70771: LD_VAR 0 1
70775: PUSH
70776: LD_INT 3
70778: MINUS
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_INT 3
70787: MINUS
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// end ; 4 :
70804: GO 71085
70806: LD_INT 4
70808: DOUBLE
70809: EQUAL
70810: IFTRUE 70814
70812: GO 70947
70814: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: LD_VAR 0 1
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: LD_INT 4
70832: PLUS
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: LIST
70841: PUSH
70842: LD_VAR 0 1
70846: PUSH
70847: LD_INT 3
70849: PLUS
70850: PUSH
70851: LD_VAR 0 2
70855: PUSH
70856: LD_INT 3
70858: PLUS
70859: PUSH
70860: LD_INT 5
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: PUSH
70868: LD_VAR 0 1
70872: PUSH
70873: LD_INT 4
70875: PLUS
70876: PUSH
70877: LD_VAR 0 2
70881: PUSH
70882: LD_INT 4
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: LIST
70889: PUSH
70890: LD_VAR 0 1
70894: PUSH
70895: LD_VAR 0 2
70899: PUSH
70900: LD_INT 3
70902: MINUS
70903: PUSH
70904: LD_INT 3
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: LIST
70911: PUSH
70912: LD_VAR 0 1
70916: PUSH
70917: LD_INT 4
70919: MINUS
70920: PUSH
70921: LD_VAR 0 2
70925: PUSH
70926: LD_INT 4
70928: MINUS
70929: PUSH
70930: LD_INT 2
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: ST_TO_ADDR
// end ; 5 :
70945: GO 71085
70947: LD_INT 5
70949: DOUBLE
70950: EQUAL
70951: IFTRUE 70955
70953: GO 71084
70955: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70956: LD_ADDR_VAR 0 5
70960: PUSH
70961: LD_VAR 0 1
70965: PUSH
70966: LD_INT 4
70968: MINUS
70969: PUSH
70970: LD_VAR 0 2
70974: PUSH
70975: LD_INT 1
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: LIST
70982: PUSH
70983: LD_VAR 0 1
70987: PUSH
70988: LD_VAR 0 2
70992: PUSH
70993: LD_INT 4
70995: MINUS
70996: PUSH
70997: LD_INT 3
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: LIST
71004: PUSH
71005: LD_VAR 0 1
71009: PUSH
71010: LD_INT 4
71012: PLUS
71013: PUSH
71014: LD_VAR 0 2
71018: PUSH
71019: LD_INT 4
71021: PLUS
71022: PUSH
71023: LD_INT 5
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: PUSH
71031: LD_VAR 0 1
71035: PUSH
71036: LD_INT 3
71038: PLUS
71039: PUSH
71040: LD_VAR 0 2
71044: PUSH
71045: LD_INT 4
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: PUSH
71053: LD_VAR 0 1
71057: PUSH
71058: LD_VAR 0 2
71062: PUSH
71063: LD_INT 3
71065: PLUS
71066: PUSH
71067: LD_INT 0
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: ST_TO_ADDR
// end ; end ;
71082: GO 71085
71084: POP
// result := list ;
71085: LD_ADDR_VAR 0 4
71089: PUSH
71090: LD_VAR 0 5
71094: ST_TO_ADDR
// end ;
71095: LD_VAR 0 4
71099: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71100: LD_INT 0
71102: PPUSH
71103: PPUSH
71104: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71105: LD_VAR 0 1
71109: NOT
71110: PUSH
71111: LD_VAR 0 2
71115: PUSH
71116: LD_INT 1
71118: PUSH
71119: LD_INT 2
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: IN
71134: NOT
71135: OR
71136: IFFALSE 71140
// exit ;
71138: GO 71223
// tmp := [ ] ;
71140: LD_ADDR_VAR 0 5
71144: PUSH
71145: EMPTY
71146: ST_TO_ADDR
// for i in units do
71147: LD_ADDR_VAR 0 4
71151: PUSH
71152: LD_VAR 0 1
71156: PUSH
71157: FOR_IN
71158: IFFALSE 71192
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71160: LD_ADDR_VAR 0 5
71164: PUSH
71165: LD_VAR 0 5
71169: PPUSH
71170: LD_VAR 0 4
71174: PPUSH
71175: LD_VAR 0 2
71179: PPUSH
71180: CALL_OW 259
71184: PPUSH
71185: CALL 72584 0 2
71189: ST_TO_ADDR
71190: GO 71157
71192: POP
71193: POP
// if not tmp then
71194: LD_VAR 0 5
71198: NOT
71199: IFFALSE 71203
// exit ;
71201: GO 71223
// result := SortListByListDesc ( units , tmp ) ;
71203: LD_ADDR_VAR 0 3
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: LD_VAR 0 5
71217: PPUSH
71218: CALL_OW 77
71222: ST_TO_ADDR
// end ;
71223: LD_VAR 0 3
71227: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71228: LD_INT 0
71230: PPUSH
71231: PPUSH
71232: PPUSH
// result := false ;
71233: LD_ADDR_VAR 0 3
71237: PUSH
71238: LD_INT 0
71240: ST_TO_ADDR
// if not building then
71241: LD_VAR 0 2
71245: NOT
71246: IFFALSE 71250
// exit ;
71248: GO 71388
// x := GetX ( building ) ;
71250: LD_ADDR_VAR 0 4
71254: PUSH
71255: LD_VAR 0 2
71259: PPUSH
71260: CALL_OW 250
71264: ST_TO_ADDR
// y := GetY ( building ) ;
71265: LD_ADDR_VAR 0 5
71269: PUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: CALL_OW 251
71279: ST_TO_ADDR
// if not x or not y then
71280: LD_VAR 0 4
71284: NOT
71285: PUSH
71286: LD_VAR 0 5
71290: NOT
71291: OR
71292: IFFALSE 71296
// exit ;
71294: GO 71388
// if GetTaskList ( unit ) then
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 437
71305: IFFALSE 71388
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71307: LD_STRING e
71309: PUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 437
71319: PUSH
71320: LD_INT 1
71322: ARRAY
71323: PUSH
71324: LD_INT 1
71326: ARRAY
71327: EQUAL
71328: PUSH
71329: LD_VAR 0 4
71333: PUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 437
71343: PUSH
71344: LD_INT 1
71346: ARRAY
71347: PUSH
71348: LD_INT 2
71350: ARRAY
71351: EQUAL
71352: AND
71353: PUSH
71354: LD_VAR 0 5
71358: PUSH
71359: LD_VAR 0 1
71363: PPUSH
71364: CALL_OW 437
71368: PUSH
71369: LD_INT 1
71371: ARRAY
71372: PUSH
71373: LD_INT 3
71375: ARRAY
71376: EQUAL
71377: AND
71378: IFFALSE 71388
// result := true end ;
71380: LD_ADDR_VAR 0 3
71384: PUSH
71385: LD_INT 1
71387: ST_TO_ADDR
// end ;
71388: LD_VAR 0 3
71392: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71393: LD_INT 0
71395: PPUSH
// result := false ;
71396: LD_ADDR_VAR 0 4
71400: PUSH
71401: LD_INT 0
71403: ST_TO_ADDR
// if GetTaskList ( unit ) then
71404: LD_VAR 0 1
71408: PPUSH
71409: CALL_OW 437
71413: IFFALSE 71496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71415: LD_STRING M
71417: PUSH
71418: LD_VAR 0 1
71422: PPUSH
71423: CALL_OW 437
71427: PUSH
71428: LD_INT 1
71430: ARRAY
71431: PUSH
71432: LD_INT 1
71434: ARRAY
71435: EQUAL
71436: PUSH
71437: LD_VAR 0 2
71441: PUSH
71442: LD_VAR 0 1
71446: PPUSH
71447: CALL_OW 437
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PUSH
71456: LD_INT 2
71458: ARRAY
71459: EQUAL
71460: AND
71461: PUSH
71462: LD_VAR 0 3
71466: PUSH
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 437
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PUSH
71481: LD_INT 3
71483: ARRAY
71484: EQUAL
71485: AND
71486: IFFALSE 71496
// result := true ;
71488: LD_ADDR_VAR 0 4
71492: PUSH
71493: LD_INT 1
71495: ST_TO_ADDR
// end ; end ;
71496: LD_VAR 0 4
71500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71501: LD_INT 0
71503: PPUSH
71504: PPUSH
71505: PPUSH
71506: PPUSH
// if not unit or not area then
71507: LD_VAR 0 1
71511: NOT
71512: PUSH
71513: LD_VAR 0 2
71517: NOT
71518: OR
71519: IFFALSE 71523
// exit ;
71521: GO 71687
// tmp := AreaToList ( area , i ) ;
71523: LD_ADDR_VAR 0 6
71527: PUSH
71528: LD_VAR 0 2
71532: PPUSH
71533: LD_VAR 0 5
71537: PPUSH
71538: CALL_OW 517
71542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71543: LD_ADDR_VAR 0 5
71547: PUSH
71548: DOUBLE
71549: LD_INT 1
71551: DEC
71552: ST_TO_ADDR
71553: LD_VAR 0 6
71557: PUSH
71558: LD_INT 1
71560: ARRAY
71561: PUSH
71562: FOR_TO
71563: IFFALSE 71685
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71565: LD_ADDR_VAR 0 7
71569: PUSH
71570: LD_VAR 0 6
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: PUSH
71579: LD_VAR 0 5
71583: ARRAY
71584: PUSH
71585: LD_VAR 0 6
71589: PUSH
71590: LD_INT 2
71592: ARRAY
71593: PUSH
71594: LD_VAR 0 5
71598: ARRAY
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71604: LD_VAR 0 7
71608: PUSH
71609: LD_INT 1
71611: ARRAY
71612: PPUSH
71613: LD_VAR 0 7
71617: PUSH
71618: LD_INT 2
71620: ARRAY
71621: PPUSH
71622: CALL_OW 428
71626: PUSH
71627: LD_INT 0
71629: EQUAL
71630: IFFALSE 71683
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 7
71641: PUSH
71642: LD_INT 1
71644: ARRAY
71645: PPUSH
71646: LD_VAR 0 7
71650: PUSH
71651: LD_INT 2
71653: ARRAY
71654: PPUSH
71655: LD_VAR 0 3
71659: PPUSH
71660: CALL_OW 48
// result := IsPlaced ( unit ) ;
71664: LD_ADDR_VAR 0 4
71668: PUSH
71669: LD_VAR 0 1
71673: PPUSH
71674: CALL_OW 305
71678: ST_TO_ADDR
// exit ;
71679: POP
71680: POP
71681: GO 71687
// end ; end ;
71683: GO 71562
71685: POP
71686: POP
// end ;
71687: LD_VAR 0 4
71691: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71692: LD_INT 0
71694: PPUSH
71695: PPUSH
71696: PPUSH
// if not side or side > 8 then
71697: LD_VAR 0 1
71701: NOT
71702: PUSH
71703: LD_VAR 0 1
71707: PUSH
71708: LD_INT 8
71710: GREATER
71711: OR
71712: IFFALSE 71716
// exit ;
71714: GO 71903
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71716: LD_ADDR_VAR 0 4
71720: PUSH
71721: LD_INT 22
71723: PUSH
71724: LD_VAR 0 1
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 21
71735: PUSH
71736: LD_INT 3
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PPUSH
71747: CALL_OW 69
71751: ST_TO_ADDR
// if not tmp then
71752: LD_VAR 0 4
71756: NOT
71757: IFFALSE 71761
// exit ;
71759: GO 71903
// enable_addtolog := true ;
71761: LD_ADDR_OWVAR 81
71765: PUSH
71766: LD_INT 1
71768: ST_TO_ADDR
// AddToLog ( [ ) ;
71769: LD_STRING [
71771: PPUSH
71772: CALL_OW 561
// for i in tmp do
71776: LD_ADDR_VAR 0 3
71780: PUSH
71781: LD_VAR 0 4
71785: PUSH
71786: FOR_IN
71787: IFFALSE 71894
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71789: LD_STRING [
71791: PUSH
71792: LD_VAR 0 3
71796: PPUSH
71797: CALL_OW 266
71801: STR
71802: PUSH
71803: LD_STRING , 
71805: STR
71806: PUSH
71807: LD_VAR 0 3
71811: PPUSH
71812: CALL_OW 250
71816: STR
71817: PUSH
71818: LD_STRING , 
71820: STR
71821: PUSH
71822: LD_VAR 0 3
71826: PPUSH
71827: CALL_OW 251
71831: STR
71832: PUSH
71833: LD_STRING , 
71835: STR
71836: PUSH
71837: LD_VAR 0 3
71841: PPUSH
71842: CALL_OW 254
71846: STR
71847: PUSH
71848: LD_STRING , 
71850: STR
71851: PUSH
71852: LD_VAR 0 3
71856: PPUSH
71857: LD_INT 1
71859: PPUSH
71860: CALL_OW 268
71864: STR
71865: PUSH
71866: LD_STRING , 
71868: STR
71869: PUSH
71870: LD_VAR 0 3
71874: PPUSH
71875: LD_INT 2
71877: PPUSH
71878: CALL_OW 268
71882: STR
71883: PUSH
71884: LD_STRING ],
71886: STR
71887: PPUSH
71888: CALL_OW 561
// end ;
71892: GO 71786
71894: POP
71895: POP
// AddToLog ( ]; ) ;
71896: LD_STRING ];
71898: PPUSH
71899: CALL_OW 561
// end ;
71903: LD_VAR 0 2
71907: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71908: LD_INT 0
71910: PPUSH
71911: PPUSH
71912: PPUSH
71913: PPUSH
71914: PPUSH
// if not area or not rate or not max then
71915: LD_VAR 0 1
71919: NOT
71920: PUSH
71921: LD_VAR 0 2
71925: NOT
71926: OR
71927: PUSH
71928: LD_VAR 0 4
71932: NOT
71933: OR
71934: IFFALSE 71938
// exit ;
71936: GO 72127
// while 1 do
71938: LD_INT 1
71940: IFFALSE 72127
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71942: LD_ADDR_VAR 0 9
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: LD_INT 1
71954: PPUSH
71955: CALL_OW 287
71959: PUSH
71960: LD_INT 10
71962: MUL
71963: ST_TO_ADDR
// r := rate / 10 ;
71964: LD_ADDR_VAR 0 7
71968: PUSH
71969: LD_VAR 0 2
71973: PUSH
71974: LD_INT 10
71976: DIVREAL
71977: ST_TO_ADDR
// time := 1 1$00 ;
71978: LD_ADDR_VAR 0 8
71982: PUSH
71983: LD_INT 2100
71985: ST_TO_ADDR
// if amount < min then
71986: LD_VAR 0 9
71990: PUSH
71991: LD_VAR 0 3
71995: LESS
71996: IFFALSE 72014
// r := r * 2 else
71998: LD_ADDR_VAR 0 7
72002: PUSH
72003: LD_VAR 0 7
72007: PUSH
72008: LD_INT 2
72010: MUL
72011: ST_TO_ADDR
72012: GO 72040
// if amount > max then
72014: LD_VAR 0 9
72018: PUSH
72019: LD_VAR 0 4
72023: GREATER
72024: IFFALSE 72040
// r := r / 2 ;
72026: LD_ADDR_VAR 0 7
72030: PUSH
72031: LD_VAR 0 7
72035: PUSH
72036: LD_INT 2
72038: DIVREAL
72039: ST_TO_ADDR
// time := time / r ;
72040: LD_ADDR_VAR 0 8
72044: PUSH
72045: LD_VAR 0 8
72049: PUSH
72050: LD_VAR 0 7
72054: DIVREAL
72055: ST_TO_ADDR
// if time < 0 then
72056: LD_VAR 0 8
72060: PUSH
72061: LD_INT 0
72063: LESS
72064: IFFALSE 72081
// time := time * - 1 ;
72066: LD_ADDR_VAR 0 8
72070: PUSH
72071: LD_VAR 0 8
72075: PUSH
72076: LD_INT 1
72078: NEG
72079: MUL
72080: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72081: LD_VAR 0 8
72085: PUSH
72086: LD_INT 35
72088: PPUSH
72089: LD_INT 875
72091: PPUSH
72092: CALL_OW 12
72096: PLUS
72097: PPUSH
72098: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72102: LD_INT 1
72104: PPUSH
72105: LD_INT 5
72107: PPUSH
72108: CALL_OW 12
72112: PPUSH
72113: LD_VAR 0 1
72117: PPUSH
72118: LD_INT 1
72120: PPUSH
72121: CALL_OW 55
// end ;
72125: GO 71938
// end ;
72127: LD_VAR 0 5
72131: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72132: LD_INT 0
72134: PPUSH
72135: PPUSH
72136: PPUSH
72137: PPUSH
72138: PPUSH
72139: PPUSH
72140: PPUSH
72141: PPUSH
// if not turrets or not factories then
72142: LD_VAR 0 1
72146: NOT
72147: PUSH
72148: LD_VAR 0 2
72152: NOT
72153: OR
72154: IFFALSE 72158
// exit ;
72156: GO 72465
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72158: LD_ADDR_VAR 0 10
72162: PUSH
72163: LD_INT 5
72165: PUSH
72166: LD_INT 6
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 2
72175: PUSH
72176: LD_INT 4
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 3
72185: PUSH
72186: LD_INT 5
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 24
72200: PUSH
72201: LD_INT 25
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 23
72210: PUSH
72211: LD_INT 27
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 42
72224: PUSH
72225: LD_INT 43
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 44
72234: PUSH
72235: LD_INT 46
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 45
72244: PUSH
72245: LD_INT 47
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: ST_TO_ADDR
// result := [ ] ;
72262: LD_ADDR_VAR 0 3
72266: PUSH
72267: EMPTY
72268: ST_TO_ADDR
// for i in turrets do
72269: LD_ADDR_VAR 0 4
72273: PUSH
72274: LD_VAR 0 1
72278: PUSH
72279: FOR_IN
72280: IFFALSE 72463
// begin nat := GetNation ( i ) ;
72282: LD_ADDR_VAR 0 7
72286: PUSH
72287: LD_VAR 0 4
72291: PPUSH
72292: CALL_OW 248
72296: ST_TO_ADDR
// weapon := 0 ;
72297: LD_ADDR_VAR 0 8
72301: PUSH
72302: LD_INT 0
72304: ST_TO_ADDR
// if not nat then
72305: LD_VAR 0 7
72309: NOT
72310: IFFALSE 72314
// continue ;
72312: GO 72279
// for j in list [ nat ] do
72314: LD_ADDR_VAR 0 5
72318: PUSH
72319: LD_VAR 0 10
72323: PUSH
72324: LD_VAR 0 7
72328: ARRAY
72329: PUSH
72330: FOR_IN
72331: IFFALSE 72372
// if GetBWeapon ( i ) = j [ 1 ] then
72333: LD_VAR 0 4
72337: PPUSH
72338: CALL_OW 269
72342: PUSH
72343: LD_VAR 0 5
72347: PUSH
72348: LD_INT 1
72350: ARRAY
72351: EQUAL
72352: IFFALSE 72370
// begin weapon := j [ 2 ] ;
72354: LD_ADDR_VAR 0 8
72358: PUSH
72359: LD_VAR 0 5
72363: PUSH
72364: LD_INT 2
72366: ARRAY
72367: ST_TO_ADDR
// break ;
72368: GO 72372
// end ;
72370: GO 72330
72372: POP
72373: POP
// if not weapon then
72374: LD_VAR 0 8
72378: NOT
72379: IFFALSE 72383
// continue ;
72381: GO 72279
// for k in factories do
72383: LD_ADDR_VAR 0 6
72387: PUSH
72388: LD_VAR 0 2
72392: PUSH
72393: FOR_IN
72394: IFFALSE 72459
// begin weapons := AvailableWeaponList ( k ) ;
72396: LD_ADDR_VAR 0 9
72400: PUSH
72401: LD_VAR 0 6
72405: PPUSH
72406: CALL_OW 478
72410: ST_TO_ADDR
// if not weapons then
72411: LD_VAR 0 9
72415: NOT
72416: IFFALSE 72420
// continue ;
72418: GO 72393
// if weapon in weapons then
72420: LD_VAR 0 8
72424: PUSH
72425: LD_VAR 0 9
72429: IN
72430: IFFALSE 72457
// begin result := [ i , weapon ] ;
72432: LD_ADDR_VAR 0 3
72436: PUSH
72437: LD_VAR 0 4
72441: PUSH
72442: LD_VAR 0 8
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: ST_TO_ADDR
// exit ;
72451: POP
72452: POP
72453: POP
72454: POP
72455: GO 72465
// end ; end ;
72457: GO 72393
72459: POP
72460: POP
// end ;
72461: GO 72279
72463: POP
72464: POP
// end ;
72465: LD_VAR 0 3
72469: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72470: LD_INT 0
72472: PPUSH
// if not side or side > 8 then
72473: LD_VAR 0 3
72477: NOT
72478: PUSH
72479: LD_VAR 0 3
72483: PUSH
72484: LD_INT 8
72486: GREATER
72487: OR
72488: IFFALSE 72492
// exit ;
72490: GO 72551
// if not range then
72492: LD_VAR 0 4
72496: NOT
72497: IFFALSE 72508
// range := - 12 ;
72499: LD_ADDR_VAR 0 4
72503: PUSH
72504: LD_INT 12
72506: NEG
72507: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72508: LD_VAR 0 1
72512: PPUSH
72513: LD_VAR 0 2
72517: PPUSH
72518: LD_VAR 0 3
72522: PPUSH
72523: LD_VAR 0 4
72527: PPUSH
72528: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72532: LD_VAR 0 1
72536: PPUSH
72537: LD_VAR 0 2
72541: PPUSH
72542: LD_VAR 0 3
72546: PPUSH
72547: CALL_OW 331
// end ;
72551: LD_VAR 0 5
72555: RET
// export function Video ( mode ) ; begin
72556: LD_INT 0
72558: PPUSH
// ingame_video = mode ;
72559: LD_ADDR_OWVAR 52
72563: PUSH
72564: LD_VAR 0 1
72568: ST_TO_ADDR
// interface_hidden = mode ;
72569: LD_ADDR_OWVAR 54
72573: PUSH
72574: LD_VAR 0 1
72578: ST_TO_ADDR
// end ;
72579: LD_VAR 0 2
72583: RET
// export function Join ( array , element ) ; begin
72584: LD_INT 0
72586: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72587: LD_ADDR_VAR 0 3
72591: PUSH
72592: LD_VAR 0 1
72596: PPUSH
72597: LD_VAR 0 1
72601: PUSH
72602: LD_INT 1
72604: PLUS
72605: PPUSH
72606: LD_VAR 0 2
72610: PPUSH
72611: CALL_OW 1
72615: ST_TO_ADDR
// end ;
72616: LD_VAR 0 3
72620: RET
// export function JoinUnion ( array , element ) ; begin
72621: LD_INT 0
72623: PPUSH
// result := array union element ;
72624: LD_ADDR_VAR 0 3
72628: PUSH
72629: LD_VAR 0 1
72633: PUSH
72634: LD_VAR 0 2
72638: UNION
72639: ST_TO_ADDR
// end ;
72640: LD_VAR 0 3
72644: RET
// export function GetBehemoths ( side ) ; begin
72645: LD_INT 0
72647: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72648: LD_ADDR_VAR 0 2
72652: PUSH
72653: LD_INT 22
72655: PUSH
72656: LD_VAR 0 1
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 31
72667: PUSH
72668: LD_INT 25
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PPUSH
72679: CALL_OW 69
72683: ST_TO_ADDR
// end ;
72684: LD_VAR 0 2
72688: RET
// export function Shuffle ( array ) ; var i , index ; begin
72689: LD_INT 0
72691: PPUSH
72692: PPUSH
72693: PPUSH
// result := [ ] ;
72694: LD_ADDR_VAR 0 2
72698: PUSH
72699: EMPTY
72700: ST_TO_ADDR
// if not array then
72701: LD_VAR 0 1
72705: NOT
72706: IFFALSE 72710
// exit ;
72708: GO 72809
// Randomize ;
72710: CALL_OW 10
// for i = array downto 1 do
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: DOUBLE
72720: LD_VAR 0 1
72724: INC
72725: ST_TO_ADDR
72726: LD_INT 1
72728: PUSH
72729: FOR_DOWNTO
72730: IFFALSE 72807
// begin index := rand ( 1 , array ) ;
72732: LD_ADDR_VAR 0 4
72736: PUSH
72737: LD_INT 1
72739: PPUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: CALL_OW 12
72749: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72750: LD_ADDR_VAR 0 2
72754: PUSH
72755: LD_VAR 0 2
72759: PPUSH
72760: LD_VAR 0 2
72764: PUSH
72765: LD_INT 1
72767: PLUS
72768: PPUSH
72769: LD_VAR 0 1
72773: PUSH
72774: LD_VAR 0 4
72778: ARRAY
72779: PPUSH
72780: CALL_OW 2
72784: ST_TO_ADDR
// array := Delete ( array , index ) ;
72785: LD_ADDR_VAR 0 1
72789: PUSH
72790: LD_VAR 0 1
72794: PPUSH
72795: LD_VAR 0 4
72799: PPUSH
72800: CALL_OW 3
72804: ST_TO_ADDR
// end ;
72805: GO 72729
72807: POP
72808: POP
// end ;
72809: LD_VAR 0 2
72813: RET
// export function GetBaseMaterials ( base ) ; begin
72814: LD_INT 0
72816: PPUSH
// result := [ 0 , 0 , 0 ] ;
72817: LD_ADDR_VAR 0 2
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: ST_TO_ADDR
// if not base then
72836: LD_VAR 0 1
72840: NOT
72841: IFFALSE 72845
// exit ;
72843: GO 72894
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72845: LD_ADDR_VAR 0 2
72849: PUSH
72850: LD_VAR 0 1
72854: PPUSH
72855: LD_INT 1
72857: PPUSH
72858: CALL_OW 275
72862: PUSH
72863: LD_VAR 0 1
72867: PPUSH
72868: LD_INT 2
72870: PPUSH
72871: CALL_OW 275
72875: PUSH
72876: LD_VAR 0 1
72880: PPUSH
72881: LD_INT 3
72883: PPUSH
72884: CALL_OW 275
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: ST_TO_ADDR
// end ;
72894: LD_VAR 0 2
72898: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72899: LD_INT 0
72901: PPUSH
72902: PPUSH
// result := array ;
72903: LD_ADDR_VAR 0 3
72907: PUSH
72908: LD_VAR 0 1
72912: ST_TO_ADDR
// if size >= result then
72913: LD_VAR 0 2
72917: PUSH
72918: LD_VAR 0 3
72922: GREATEREQUAL
72923: IFFALSE 72927
// exit ;
72925: GO 72977
// if size then
72927: LD_VAR 0 2
72931: IFFALSE 72977
// for i := array downto size do
72933: LD_ADDR_VAR 0 4
72937: PUSH
72938: DOUBLE
72939: LD_VAR 0 1
72943: INC
72944: ST_TO_ADDR
72945: LD_VAR 0 2
72949: PUSH
72950: FOR_DOWNTO
72951: IFFALSE 72975
// result := Delete ( result , result ) ;
72953: LD_ADDR_VAR 0 3
72957: PUSH
72958: LD_VAR 0 3
72962: PPUSH
72963: LD_VAR 0 3
72967: PPUSH
72968: CALL_OW 3
72972: ST_TO_ADDR
72973: GO 72950
72975: POP
72976: POP
// end ;
72977: LD_VAR 0 3
72981: RET
// export function ComExit ( unit ) ; var tmp ; begin
72982: LD_INT 0
72984: PPUSH
72985: PPUSH
// if not IsInUnit ( unit ) then
72986: LD_VAR 0 1
72990: PPUSH
72991: CALL_OW 310
72995: NOT
72996: IFFALSE 73000
// exit ;
72998: GO 73060
// tmp := IsInUnit ( unit ) ;
73000: LD_ADDR_VAR 0 3
73004: PUSH
73005: LD_VAR 0 1
73009: PPUSH
73010: CALL_OW 310
73014: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73015: LD_VAR 0 3
73019: PPUSH
73020: CALL_OW 247
73024: PUSH
73025: LD_INT 2
73027: EQUAL
73028: IFFALSE 73041
// ComExitVehicle ( unit ) else
73030: LD_VAR 0 1
73034: PPUSH
73035: CALL_OW 121
73039: GO 73050
// ComExitBuilding ( unit ) ;
73041: LD_VAR 0 1
73045: PPUSH
73046: CALL_OW 122
// result := tmp ;
73050: LD_ADDR_VAR 0 2
73054: PUSH
73055: LD_VAR 0 3
73059: ST_TO_ADDR
// end ;
73060: LD_VAR 0 2
73064: RET
// export function ComExitAll ( units ) ; var i ; begin
73065: LD_INT 0
73067: PPUSH
73068: PPUSH
// if not units then
73069: LD_VAR 0 1
73073: NOT
73074: IFFALSE 73078
// exit ;
73076: GO 73104
// for i in units do
73078: LD_ADDR_VAR 0 3
73082: PUSH
73083: LD_VAR 0 1
73087: PUSH
73088: FOR_IN
73089: IFFALSE 73102
// ComExit ( i ) ;
73091: LD_VAR 0 3
73095: PPUSH
73096: CALL 72982 0 1
73100: GO 73088
73102: POP
73103: POP
// end ;
73104: LD_VAR 0 2
73108: RET
// export function ResetHc ; begin
73109: LD_INT 0
73111: PPUSH
// InitHc ;
73112: CALL_OW 19
// hc_importance := 0 ;
73116: LD_ADDR_OWVAR 32
73120: PUSH
73121: LD_INT 0
73123: ST_TO_ADDR
// end ;
73124: LD_VAR 0 1
73128: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73129: LD_INT 0
73131: PPUSH
73132: PPUSH
73133: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73134: LD_ADDR_VAR 0 6
73138: PUSH
73139: LD_VAR 0 1
73143: PUSH
73144: LD_VAR 0 3
73148: PLUS
73149: PUSH
73150: LD_INT 2
73152: DIV
73153: ST_TO_ADDR
// if _x < 0 then
73154: LD_VAR 0 6
73158: PUSH
73159: LD_INT 0
73161: LESS
73162: IFFALSE 73179
// _x := _x * - 1 ;
73164: LD_ADDR_VAR 0 6
73168: PUSH
73169: LD_VAR 0 6
73173: PUSH
73174: LD_INT 1
73176: NEG
73177: MUL
73178: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73179: LD_ADDR_VAR 0 7
73183: PUSH
73184: LD_VAR 0 2
73188: PUSH
73189: LD_VAR 0 4
73193: PLUS
73194: PUSH
73195: LD_INT 2
73197: DIV
73198: ST_TO_ADDR
// if _y < 0 then
73199: LD_VAR 0 7
73203: PUSH
73204: LD_INT 0
73206: LESS
73207: IFFALSE 73224
// _y := _y * - 1 ;
73209: LD_ADDR_VAR 0 7
73213: PUSH
73214: LD_VAR 0 7
73218: PUSH
73219: LD_INT 1
73221: NEG
73222: MUL
73223: ST_TO_ADDR
// result := [ _x , _y ] ;
73224: LD_ADDR_VAR 0 5
73228: PUSH
73229: LD_VAR 0 6
73233: PUSH
73234: LD_VAR 0 7
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: ST_TO_ADDR
// end ;
73243: LD_VAR 0 5
73247: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73248: LD_INT 0
73250: PPUSH
73251: PPUSH
73252: PPUSH
73253: PPUSH
// task := GetTaskList ( unit ) ;
73254: LD_ADDR_VAR 0 7
73258: PUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: CALL_OW 437
73268: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73269: LD_VAR 0 7
73273: NOT
73274: PUSH
73275: LD_VAR 0 1
73279: PPUSH
73280: LD_VAR 0 2
73284: PPUSH
73285: CALL_OW 308
73289: NOT
73290: AND
73291: IFFALSE 73295
// exit ;
73293: GO 73413
// if IsInArea ( unit , area ) then
73295: LD_VAR 0 1
73299: PPUSH
73300: LD_VAR 0 2
73304: PPUSH
73305: CALL_OW 308
73309: IFFALSE 73327
// begin ComMoveToArea ( unit , goAway ) ;
73311: LD_VAR 0 1
73315: PPUSH
73316: LD_VAR 0 3
73320: PPUSH
73321: CALL_OW 113
// exit ;
73325: GO 73413
// end ; if task [ 1 ] [ 1 ] <> M then
73327: LD_VAR 0 7
73331: PUSH
73332: LD_INT 1
73334: ARRAY
73335: PUSH
73336: LD_INT 1
73338: ARRAY
73339: PUSH
73340: LD_STRING M
73342: NONEQUAL
73343: IFFALSE 73347
// exit ;
73345: GO 73413
// x := task [ 1 ] [ 2 ] ;
73347: LD_ADDR_VAR 0 5
73351: PUSH
73352: LD_VAR 0 7
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PUSH
73361: LD_INT 2
73363: ARRAY
73364: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73365: LD_ADDR_VAR 0 6
73369: PUSH
73370: LD_VAR 0 7
73374: PUSH
73375: LD_INT 1
73377: ARRAY
73378: PUSH
73379: LD_INT 3
73381: ARRAY
73382: ST_TO_ADDR
// if InArea ( x , y , area ) then
73383: LD_VAR 0 5
73387: PPUSH
73388: LD_VAR 0 6
73392: PPUSH
73393: LD_VAR 0 2
73397: PPUSH
73398: CALL_OW 309
73402: IFFALSE 73413
// ComStop ( unit ) ;
73404: LD_VAR 0 1
73408: PPUSH
73409: CALL_OW 141
// end ;
73413: LD_VAR 0 4
73417: RET
// export function Abs ( value ) ; begin
73418: LD_INT 0
73420: PPUSH
// result := value ;
73421: LD_ADDR_VAR 0 2
73425: PUSH
73426: LD_VAR 0 1
73430: ST_TO_ADDR
// if value < 0 then
73431: LD_VAR 0 1
73435: PUSH
73436: LD_INT 0
73438: LESS
73439: IFFALSE 73456
// result := value * - 1 ;
73441: LD_ADDR_VAR 0 2
73445: PUSH
73446: LD_VAR 0 1
73450: PUSH
73451: LD_INT 1
73453: NEG
73454: MUL
73455: ST_TO_ADDR
// end ;
73456: LD_VAR 0 2
73460: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73461: LD_INT 0
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
73469: PPUSH
73470: PPUSH
// if not unit or not building then
73471: LD_VAR 0 1
73475: NOT
73476: PUSH
73477: LD_VAR 0 2
73481: NOT
73482: OR
73483: IFFALSE 73487
// exit ;
73485: GO 73713
// x := GetX ( building ) ;
73487: LD_ADDR_VAR 0 4
73491: PUSH
73492: LD_VAR 0 2
73496: PPUSH
73497: CALL_OW 250
73501: ST_TO_ADDR
// y := GetY ( building ) ;
73502: LD_ADDR_VAR 0 6
73506: PUSH
73507: LD_VAR 0 2
73511: PPUSH
73512: CALL_OW 251
73516: ST_TO_ADDR
// d := GetDir ( building ) ;
73517: LD_ADDR_VAR 0 8
73521: PUSH
73522: LD_VAR 0 2
73526: PPUSH
73527: CALL_OW 254
73531: ST_TO_ADDR
// r := 4 ;
73532: LD_ADDR_VAR 0 9
73536: PUSH
73537: LD_INT 4
73539: ST_TO_ADDR
// for i := 1 to 5 do
73540: LD_ADDR_VAR 0 10
73544: PUSH
73545: DOUBLE
73546: LD_INT 1
73548: DEC
73549: ST_TO_ADDR
73550: LD_INT 5
73552: PUSH
73553: FOR_TO
73554: IFFALSE 73711
// begin _x := ShiftX ( x , d , r + i ) ;
73556: LD_ADDR_VAR 0 5
73560: PUSH
73561: LD_VAR 0 4
73565: PPUSH
73566: LD_VAR 0 8
73570: PPUSH
73571: LD_VAR 0 9
73575: PUSH
73576: LD_VAR 0 10
73580: PLUS
73581: PPUSH
73582: CALL_OW 272
73586: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73587: LD_ADDR_VAR 0 7
73591: PUSH
73592: LD_VAR 0 6
73596: PPUSH
73597: LD_VAR 0 8
73601: PPUSH
73602: LD_VAR 0 9
73606: PUSH
73607: LD_VAR 0 10
73611: PLUS
73612: PPUSH
73613: CALL_OW 273
73617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73618: LD_VAR 0 5
73622: PPUSH
73623: LD_VAR 0 7
73627: PPUSH
73628: CALL_OW 488
73632: PUSH
73633: LD_VAR 0 5
73637: PPUSH
73638: LD_VAR 0 7
73642: PPUSH
73643: CALL_OW 428
73647: PPUSH
73648: CALL_OW 247
73652: PUSH
73653: LD_INT 3
73655: PUSH
73656: LD_INT 2
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: IN
73663: NOT
73664: AND
73665: IFFALSE 73709
// begin ComMoveXY ( unit , _x , _y ) ;
73667: LD_VAR 0 1
73671: PPUSH
73672: LD_VAR 0 5
73676: PPUSH
73677: LD_VAR 0 7
73681: PPUSH
73682: CALL_OW 111
// result := [ _x , _y ] ;
73686: LD_ADDR_VAR 0 3
73690: PUSH
73691: LD_VAR 0 5
73695: PUSH
73696: LD_VAR 0 7
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: ST_TO_ADDR
// exit ;
73705: POP
73706: POP
73707: GO 73713
// end ; end ;
73709: GO 73553
73711: POP
73712: POP
// end ;
73713: LD_VAR 0 3
73717: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73718: LD_INT 0
73720: PPUSH
73721: PPUSH
73722: PPUSH
// result := 0 ;
73723: LD_ADDR_VAR 0 3
73727: PUSH
73728: LD_INT 0
73730: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73731: LD_VAR 0 1
73735: PUSH
73736: LD_INT 0
73738: LESS
73739: PUSH
73740: LD_VAR 0 1
73744: PUSH
73745: LD_INT 8
73747: GREATER
73748: OR
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: LD_INT 0
73757: LESS
73758: OR
73759: PUSH
73760: LD_VAR 0 2
73764: PUSH
73765: LD_INT 8
73767: GREATER
73768: OR
73769: IFFALSE 73773
// exit ;
73771: GO 73848
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73773: LD_ADDR_VAR 0 4
73777: PUSH
73778: LD_INT 22
73780: PUSH
73781: LD_VAR 0 2
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PPUSH
73790: CALL_OW 69
73794: PUSH
73795: FOR_IN
73796: IFFALSE 73846
// begin un := UnitShoot ( i ) ;
73798: LD_ADDR_VAR 0 5
73802: PUSH
73803: LD_VAR 0 4
73807: PPUSH
73808: CALL_OW 504
73812: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73813: LD_VAR 0 5
73817: PPUSH
73818: CALL_OW 255
73822: PUSH
73823: LD_VAR 0 1
73827: EQUAL
73828: IFFALSE 73844
// begin result := un ;
73830: LD_ADDR_VAR 0 3
73834: PUSH
73835: LD_VAR 0 5
73839: ST_TO_ADDR
// exit ;
73840: POP
73841: POP
73842: GO 73848
// end ; end ;
73844: GO 73795
73846: POP
73847: POP
// end ;
73848: LD_VAR 0 3
73852: RET
// export function GetCargoBay ( units ) ; begin
73853: LD_INT 0
73855: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73856: LD_ADDR_VAR 0 2
73860: PUSH
73861: LD_VAR 0 1
73865: PPUSH
73866: LD_INT 2
73868: PUSH
73869: LD_INT 34
73871: PUSH
73872: LD_INT 12
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 34
73881: PUSH
73882: LD_INT 51
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 34
73891: PUSH
73892: LD_INT 32
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 34
73901: PUSH
73902: LD_INT 89
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: PPUSH
73916: CALL_OW 72
73920: ST_TO_ADDR
// end ;
73921: LD_VAR 0 2
73925: RET
// export function Negate ( value ) ; begin
73926: LD_INT 0
73928: PPUSH
// result := not value ;
73929: LD_ADDR_VAR 0 2
73933: PUSH
73934: LD_VAR 0 1
73938: NOT
73939: ST_TO_ADDR
// end ;
73940: LD_VAR 0 2
73944: RET
// export function Inc ( value ) ; begin
73945: LD_INT 0
73947: PPUSH
// result := value + 1 ;
73948: LD_ADDR_VAR 0 2
73952: PUSH
73953: LD_VAR 0 1
73957: PUSH
73958: LD_INT 1
73960: PLUS
73961: ST_TO_ADDR
// end ;
73962: LD_VAR 0 2
73966: RET
// export function Dec ( value ) ; begin
73967: LD_INT 0
73969: PPUSH
// result := value - 1 ;
73970: LD_ADDR_VAR 0 2
73974: PUSH
73975: LD_VAR 0 1
73979: PUSH
73980: LD_INT 1
73982: MINUS
73983: ST_TO_ADDR
// end ;
73984: LD_VAR 0 2
73988: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73989: LD_INT 0
73991: PPUSH
73992: PPUSH
73993: PPUSH
73994: PPUSH
73995: PPUSH
73996: PPUSH
73997: PPUSH
73998: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73999: LD_VAR 0 1
74003: PPUSH
74004: LD_VAR 0 2
74008: PPUSH
74009: CALL_OW 488
74013: NOT
74014: PUSH
74015: LD_VAR 0 3
74019: PPUSH
74020: LD_VAR 0 4
74024: PPUSH
74025: CALL_OW 488
74029: NOT
74030: OR
74031: IFFALSE 74044
// begin result := - 1 ;
74033: LD_ADDR_VAR 0 5
74037: PUSH
74038: LD_INT 1
74040: NEG
74041: ST_TO_ADDR
// exit ;
74042: GO 74279
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74044: LD_ADDR_VAR 0 12
74048: PUSH
74049: LD_VAR 0 1
74053: PPUSH
74054: LD_VAR 0 2
74058: PPUSH
74059: LD_VAR 0 3
74063: PPUSH
74064: LD_VAR 0 4
74068: PPUSH
74069: CALL 73129 0 4
74073: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74074: LD_ADDR_VAR 0 11
74078: PUSH
74079: LD_VAR 0 1
74083: PPUSH
74084: LD_VAR 0 2
74088: PPUSH
74089: LD_VAR 0 12
74093: PUSH
74094: LD_INT 1
74096: ARRAY
74097: PPUSH
74098: LD_VAR 0 12
74102: PUSH
74103: LD_INT 2
74105: ARRAY
74106: PPUSH
74107: CALL_OW 298
74111: ST_TO_ADDR
// distance := 9999 ;
74112: LD_ADDR_VAR 0 10
74116: PUSH
74117: LD_INT 9999
74119: ST_TO_ADDR
// for i := 0 to 5 do
74120: LD_ADDR_VAR 0 6
74124: PUSH
74125: DOUBLE
74126: LD_INT 0
74128: DEC
74129: ST_TO_ADDR
74130: LD_INT 5
74132: PUSH
74133: FOR_TO
74134: IFFALSE 74277
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74136: LD_ADDR_VAR 0 7
74140: PUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: LD_VAR 0 6
74150: PPUSH
74151: LD_VAR 0 11
74155: PPUSH
74156: CALL_OW 272
74160: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74161: LD_ADDR_VAR 0 8
74165: PUSH
74166: LD_VAR 0 2
74170: PPUSH
74171: LD_VAR 0 6
74175: PPUSH
74176: LD_VAR 0 11
74180: PPUSH
74181: CALL_OW 273
74185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74186: LD_VAR 0 7
74190: PPUSH
74191: LD_VAR 0 8
74195: PPUSH
74196: CALL_OW 488
74200: NOT
74201: IFFALSE 74205
// continue ;
74203: GO 74133
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74205: LD_ADDR_VAR 0 9
74209: PUSH
74210: LD_VAR 0 12
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PPUSH
74219: LD_VAR 0 12
74223: PUSH
74224: LD_INT 2
74226: ARRAY
74227: PPUSH
74228: LD_VAR 0 7
74232: PPUSH
74233: LD_VAR 0 8
74237: PPUSH
74238: CALL_OW 298
74242: ST_TO_ADDR
// if tmp < distance then
74243: LD_VAR 0 9
74247: PUSH
74248: LD_VAR 0 10
74252: LESS
74253: IFFALSE 74275
// begin result := i ;
74255: LD_ADDR_VAR 0 5
74259: PUSH
74260: LD_VAR 0 6
74264: ST_TO_ADDR
// distance := tmp ;
74265: LD_ADDR_VAR 0 10
74269: PUSH
74270: LD_VAR 0 9
74274: ST_TO_ADDR
// end ; end ;
74275: GO 74133
74277: POP
74278: POP
// end ;
74279: LD_VAR 0 5
74283: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74284: LD_INT 0
74286: PPUSH
74287: PPUSH
// if not driver or not IsInUnit ( driver ) then
74288: LD_VAR 0 1
74292: NOT
74293: PUSH
74294: LD_VAR 0 1
74298: PPUSH
74299: CALL_OW 310
74303: NOT
74304: OR
74305: IFFALSE 74309
// exit ;
74307: GO 74399
// vehicle := IsInUnit ( driver ) ;
74309: LD_ADDR_VAR 0 3
74313: PUSH
74314: LD_VAR 0 1
74318: PPUSH
74319: CALL_OW 310
74323: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74324: LD_VAR 0 1
74328: PPUSH
74329: LD_STRING \
74331: PUSH
74332: LD_INT 0
74334: PUSH
74335: LD_INT 0
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: LD_INT 0
74346: PUSH
74347: LD_INT 0
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: PUSH
74359: LD_STRING E
74361: PUSH
74362: LD_INT 0
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: LD_VAR 0 3
74372: PUSH
74373: LD_INT 0
74375: PUSH
74376: LD_INT 0
74378: PUSH
74379: LD_INT 0
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PPUSH
74395: CALL_OW 446
// end ;
74399: LD_VAR 0 2
74403: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74404: LD_INT 0
74406: PPUSH
74407: PPUSH
// if not driver or not IsInUnit ( driver ) then
74408: LD_VAR 0 1
74412: NOT
74413: PUSH
74414: LD_VAR 0 1
74418: PPUSH
74419: CALL_OW 310
74423: NOT
74424: OR
74425: IFFALSE 74429
// exit ;
74427: GO 74519
// vehicle := IsInUnit ( driver ) ;
74429: LD_ADDR_VAR 0 3
74433: PUSH
74434: LD_VAR 0 1
74438: PPUSH
74439: CALL_OW 310
74443: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74444: LD_VAR 0 1
74448: PPUSH
74449: LD_STRING \
74451: PUSH
74452: LD_INT 0
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 0
74460: PUSH
74461: LD_INT 0
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: LD_INT 0
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: LD_STRING E
74481: PUSH
74482: LD_INT 0
74484: PUSH
74485: LD_INT 0
74487: PUSH
74488: LD_VAR 0 3
74492: PUSH
74493: LD_INT 0
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PPUSH
74515: CALL_OW 447
// end ;
74519: LD_VAR 0 2
74523: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74524: LD_INT 0
74526: PPUSH
74527: PPUSH
74528: PPUSH
// tmp := [ ] ;
74529: LD_ADDR_VAR 0 5
74533: PUSH
74534: EMPTY
74535: ST_TO_ADDR
// for i in units do
74536: LD_ADDR_VAR 0 4
74540: PUSH
74541: LD_VAR 0 1
74545: PUSH
74546: FOR_IN
74547: IFFALSE 74585
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74549: LD_ADDR_VAR 0 5
74553: PUSH
74554: LD_VAR 0 5
74558: PPUSH
74559: LD_VAR 0 5
74563: PUSH
74564: LD_INT 1
74566: PLUS
74567: PPUSH
74568: LD_VAR 0 4
74572: PPUSH
74573: CALL_OW 256
74577: PPUSH
74578: CALL_OW 2
74582: ST_TO_ADDR
74583: GO 74546
74585: POP
74586: POP
// if not tmp then
74587: LD_VAR 0 5
74591: NOT
74592: IFFALSE 74596
// exit ;
74594: GO 74644
// if asc then
74596: LD_VAR 0 2
74600: IFFALSE 74624
// result := SortListByListAsc ( units , tmp ) else
74602: LD_ADDR_VAR 0 3
74606: PUSH
74607: LD_VAR 0 1
74611: PPUSH
74612: LD_VAR 0 5
74616: PPUSH
74617: CALL_OW 76
74621: ST_TO_ADDR
74622: GO 74644
// result := SortListByListDesc ( units , tmp ) ;
74624: LD_ADDR_VAR 0 3
74628: PUSH
74629: LD_VAR 0 1
74633: PPUSH
74634: LD_VAR 0 5
74638: PPUSH
74639: CALL_OW 77
74643: ST_TO_ADDR
// end ;
74644: LD_VAR 0 3
74648: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74649: LD_INT 0
74651: PPUSH
74652: PPUSH
// task := GetTaskList ( mech ) ;
74653: LD_ADDR_VAR 0 4
74657: PUSH
74658: LD_VAR 0 1
74662: PPUSH
74663: CALL_OW 437
74667: ST_TO_ADDR
// if not task then
74668: LD_VAR 0 4
74672: NOT
74673: IFFALSE 74677
// exit ;
74675: GO 74719
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74677: LD_ADDR_VAR 0 3
74681: PUSH
74682: LD_VAR 0 4
74686: PUSH
74687: LD_INT 1
74689: ARRAY
74690: PUSH
74691: LD_INT 1
74693: ARRAY
74694: PUSH
74695: LD_STRING r
74697: EQUAL
74698: PUSH
74699: LD_VAR 0 4
74703: PUSH
74704: LD_INT 1
74706: ARRAY
74707: PUSH
74708: LD_INT 4
74710: ARRAY
74711: PUSH
74712: LD_VAR 0 2
74716: EQUAL
74717: AND
74718: ST_TO_ADDR
// end ;
74719: LD_VAR 0 3
74723: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74724: LD_INT 0
74726: PPUSH
// SetDir ( unit , d ) ;
74727: LD_VAR 0 1
74731: PPUSH
74732: LD_VAR 0 4
74736: PPUSH
74737: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74741: LD_VAR 0 1
74745: PPUSH
74746: LD_VAR 0 2
74750: PPUSH
74751: LD_VAR 0 3
74755: PPUSH
74756: LD_VAR 0 5
74760: PPUSH
74761: CALL_OW 48
// end ;
74765: LD_VAR 0 6
74769: RET
// export function ToNaturalNumber ( number ) ; begin
74770: LD_INT 0
74772: PPUSH
// result := number div 1 ;
74773: LD_ADDR_VAR 0 2
74777: PUSH
74778: LD_VAR 0 1
74782: PUSH
74783: LD_INT 1
74785: DIV
74786: ST_TO_ADDR
// if number < 0 then
74787: LD_VAR 0 1
74791: PUSH
74792: LD_INT 0
74794: LESS
74795: IFFALSE 74805
// result := 0 ;
74797: LD_ADDR_VAR 0 2
74801: PUSH
74802: LD_INT 0
74804: ST_TO_ADDR
// end ;
74805: LD_VAR 0 2
74809: RET
// export function SortByClass ( units , class ) ; var un ; begin
74810: LD_INT 0
74812: PPUSH
74813: PPUSH
// if not units or not class then
74814: LD_VAR 0 1
74818: NOT
74819: PUSH
74820: LD_VAR 0 2
74824: NOT
74825: OR
74826: IFFALSE 74830
// exit ;
74828: GO 74925
// result := [ ] ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: EMPTY
74836: ST_TO_ADDR
// for un in units do
74837: LD_ADDR_VAR 0 4
74841: PUSH
74842: LD_VAR 0 1
74846: PUSH
74847: FOR_IN
74848: IFFALSE 74923
// if GetClass ( un ) = class then
74850: LD_VAR 0 4
74854: PPUSH
74855: CALL_OW 257
74859: PUSH
74860: LD_VAR 0 2
74864: EQUAL
74865: IFFALSE 74892
// result := Insert ( result , 1 , un ) else
74867: LD_ADDR_VAR 0 3
74871: PUSH
74872: LD_VAR 0 3
74876: PPUSH
74877: LD_INT 1
74879: PPUSH
74880: LD_VAR 0 4
74884: PPUSH
74885: CALL_OW 2
74889: ST_TO_ADDR
74890: GO 74921
// result := Replace ( result , result + 1 , un ) ;
74892: LD_ADDR_VAR 0 3
74896: PUSH
74897: LD_VAR 0 3
74901: PPUSH
74902: LD_VAR 0 3
74906: PUSH
74907: LD_INT 1
74909: PLUS
74910: PPUSH
74911: LD_VAR 0 4
74915: PPUSH
74916: CALL_OW 1
74920: ST_TO_ADDR
74921: GO 74847
74923: POP
74924: POP
// end ;
74925: LD_VAR 0 3
74929: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
74936: PPUSH
74937: PPUSH
74938: PPUSH
// result := [ ] ;
74939: LD_ADDR_VAR 0 4
74943: PUSH
74944: EMPTY
74945: ST_TO_ADDR
// if x - r < 0 then
74946: LD_VAR 0 1
74950: PUSH
74951: LD_VAR 0 3
74955: MINUS
74956: PUSH
74957: LD_INT 0
74959: LESS
74960: IFFALSE 74972
// min_x := 0 else
74962: LD_ADDR_VAR 0 8
74966: PUSH
74967: LD_INT 0
74969: ST_TO_ADDR
74970: GO 74988
// min_x := x - r ;
74972: LD_ADDR_VAR 0 8
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: LD_VAR 0 3
74986: MINUS
74987: ST_TO_ADDR
// if y - r < 0 then
74988: LD_VAR 0 2
74992: PUSH
74993: LD_VAR 0 3
74997: MINUS
74998: PUSH
74999: LD_INT 0
75001: LESS
75002: IFFALSE 75014
// min_y := 0 else
75004: LD_ADDR_VAR 0 7
75008: PUSH
75009: LD_INT 0
75011: ST_TO_ADDR
75012: GO 75030
// min_y := y - r ;
75014: LD_ADDR_VAR 0 7
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_VAR 0 3
75028: MINUS
75029: ST_TO_ADDR
// max_x := x + r ;
75030: LD_ADDR_VAR 0 9
75034: PUSH
75035: LD_VAR 0 1
75039: PUSH
75040: LD_VAR 0 3
75044: PLUS
75045: ST_TO_ADDR
// max_y := y + r ;
75046: LD_ADDR_VAR 0 10
75050: PUSH
75051: LD_VAR 0 2
75055: PUSH
75056: LD_VAR 0 3
75060: PLUS
75061: ST_TO_ADDR
// for _x = min_x to max_x do
75062: LD_ADDR_VAR 0 5
75066: PUSH
75067: DOUBLE
75068: LD_VAR 0 8
75072: DEC
75073: ST_TO_ADDR
75074: LD_VAR 0 9
75078: PUSH
75079: FOR_TO
75080: IFFALSE 75181
// for _y = min_y to max_y do
75082: LD_ADDR_VAR 0 6
75086: PUSH
75087: DOUBLE
75088: LD_VAR 0 7
75092: DEC
75093: ST_TO_ADDR
75094: LD_VAR 0 10
75098: PUSH
75099: FOR_TO
75100: IFFALSE 75177
// begin if not ValidHex ( _x , _y ) then
75102: LD_VAR 0 5
75106: PPUSH
75107: LD_VAR 0 6
75111: PPUSH
75112: CALL_OW 488
75116: NOT
75117: IFFALSE 75121
// continue ;
75119: GO 75099
// if GetResourceTypeXY ( _x , _y ) then
75121: LD_VAR 0 5
75125: PPUSH
75126: LD_VAR 0 6
75130: PPUSH
75131: CALL_OW 283
75135: IFFALSE 75175
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75137: LD_ADDR_VAR 0 4
75141: PUSH
75142: LD_VAR 0 4
75146: PPUSH
75147: LD_VAR 0 4
75151: PUSH
75152: LD_INT 1
75154: PLUS
75155: PPUSH
75156: LD_VAR 0 5
75160: PUSH
75161: LD_VAR 0 6
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PPUSH
75170: CALL_OW 1
75174: ST_TO_ADDR
// end ;
75175: GO 75099
75177: POP
75178: POP
75179: GO 75079
75181: POP
75182: POP
// end ;
75183: LD_VAR 0 4
75187: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75188: LD_INT 0
75190: PPUSH
75191: PPUSH
75192: PPUSH
75193: PPUSH
75194: PPUSH
75195: PPUSH
75196: PPUSH
75197: PPUSH
// if not units then
75198: LD_VAR 0 1
75202: NOT
75203: IFFALSE 75207
// exit ;
75205: GO 75731
// result := UnitFilter ( units , [ f_ok ] ) ;
75207: LD_ADDR_VAR 0 3
75211: PUSH
75212: LD_VAR 0 1
75216: PPUSH
75217: LD_INT 50
75219: PUSH
75220: EMPTY
75221: LIST
75222: PPUSH
75223: CALL_OW 72
75227: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75228: LD_ADDR_VAR 0 8
75232: PUSH
75233: LD_VAR 0 1
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PPUSH
75242: CALL_OW 255
75246: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75247: LD_ADDR_VAR 0 10
75251: PUSH
75252: LD_INT 29
75254: PUSH
75255: LD_INT 91
75257: PUSH
75258: LD_INT 49
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: LIST
75265: ST_TO_ADDR
// if not result then
75266: LD_VAR 0 3
75270: NOT
75271: IFFALSE 75275
// exit ;
75273: GO 75731
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75275: LD_ADDR_VAR 0 5
75279: PUSH
75280: LD_INT 81
75282: PUSH
75283: LD_VAR 0 8
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PPUSH
75292: CALL_OW 69
75296: ST_TO_ADDR
// for i in result do
75297: LD_ADDR_VAR 0 4
75301: PUSH
75302: LD_VAR 0 3
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75729
// begin tag := GetTag ( i ) + 1 ;
75310: LD_ADDR_VAR 0 9
75314: PUSH
75315: LD_VAR 0 4
75319: PPUSH
75320: CALL_OW 110
75324: PUSH
75325: LD_INT 1
75327: PLUS
75328: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75329: LD_ADDR_VAR 0 7
75333: PUSH
75334: LD_VAR 0 4
75338: PPUSH
75339: CALL_OW 250
75343: PPUSH
75344: LD_VAR 0 4
75348: PPUSH
75349: CALL_OW 251
75353: PPUSH
75354: LD_INT 6
75356: PPUSH
75357: CALL 74930 0 3
75361: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75362: LD_VAR 0 4
75366: PPUSH
75367: CALL_OW 247
75371: PUSH
75372: LD_INT 2
75374: EQUAL
75375: PUSH
75376: LD_VAR 0 7
75380: AND
75381: PUSH
75382: LD_VAR 0 4
75386: PPUSH
75387: CALL_OW 264
75391: PUSH
75392: LD_VAR 0 10
75396: IN
75397: NOT
75398: AND
75399: IFFALSE 75438
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75401: LD_VAR 0 4
75405: PPUSH
75406: LD_VAR 0 7
75410: PUSH
75411: LD_INT 1
75413: ARRAY
75414: PUSH
75415: LD_INT 1
75417: ARRAY
75418: PPUSH
75419: LD_VAR 0 7
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 2
75430: ARRAY
75431: PPUSH
75432: CALL_OW 116
75436: GO 75727
// if path > tag then
75438: LD_VAR 0 2
75442: PUSH
75443: LD_VAR 0 9
75447: GREATER
75448: IFFALSE 75656
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75450: LD_ADDR_VAR 0 6
75454: PUSH
75455: LD_VAR 0 5
75459: PPUSH
75460: LD_INT 91
75462: PUSH
75463: LD_VAR 0 4
75467: PUSH
75468: LD_INT 8
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: LIST
75475: PPUSH
75476: CALL_OW 72
75480: ST_TO_ADDR
// if nearEnemy then
75481: LD_VAR 0 6
75485: IFFALSE 75554
// begin if GetWeapon ( i ) = ru_time_lapser then
75487: LD_VAR 0 4
75491: PPUSH
75492: CALL_OW 264
75496: PUSH
75497: LD_INT 49
75499: EQUAL
75500: IFFALSE 75528
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75502: LD_VAR 0 4
75506: PPUSH
75507: LD_VAR 0 6
75511: PPUSH
75512: LD_VAR 0 4
75516: PPUSH
75517: CALL_OW 74
75521: PPUSH
75522: CALL_OW 112
75526: GO 75552
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75528: LD_VAR 0 4
75532: PPUSH
75533: LD_VAR 0 6
75537: PPUSH
75538: LD_VAR 0 4
75542: PPUSH
75543: CALL_OW 74
75547: PPUSH
75548: CALL_OW 115
// end else
75552: GO 75654
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75554: LD_VAR 0 4
75558: PPUSH
75559: LD_VAR 0 2
75563: PUSH
75564: LD_VAR 0 9
75568: ARRAY
75569: PUSH
75570: LD_INT 1
75572: ARRAY
75573: PPUSH
75574: LD_VAR 0 2
75578: PUSH
75579: LD_VAR 0 9
75583: ARRAY
75584: PUSH
75585: LD_INT 2
75587: ARRAY
75588: PPUSH
75589: CALL_OW 297
75593: PUSH
75594: LD_INT 6
75596: GREATER
75597: IFFALSE 75640
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75599: LD_VAR 0 4
75603: PPUSH
75604: LD_VAR 0 2
75608: PUSH
75609: LD_VAR 0 9
75613: ARRAY
75614: PUSH
75615: LD_INT 1
75617: ARRAY
75618: PPUSH
75619: LD_VAR 0 2
75623: PUSH
75624: LD_VAR 0 9
75628: ARRAY
75629: PUSH
75630: LD_INT 2
75632: ARRAY
75633: PPUSH
75634: CALL_OW 114
75638: GO 75654
// SetTag ( i , tag ) ;
75640: LD_VAR 0 4
75644: PPUSH
75645: LD_VAR 0 9
75649: PPUSH
75650: CALL_OW 109
// end else
75654: GO 75727
// if enemy then
75656: LD_VAR 0 5
75660: IFFALSE 75727
// begin if GetWeapon ( i ) = ru_time_lapser then
75662: LD_VAR 0 4
75666: PPUSH
75667: CALL_OW 264
75671: PUSH
75672: LD_INT 49
75674: EQUAL
75675: IFFALSE 75703
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75677: LD_VAR 0 4
75681: PPUSH
75682: LD_VAR 0 5
75686: PPUSH
75687: LD_VAR 0 4
75691: PPUSH
75692: CALL_OW 74
75696: PPUSH
75697: CALL_OW 112
75701: GO 75727
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75703: LD_VAR 0 4
75707: PPUSH
75708: LD_VAR 0 5
75712: PPUSH
75713: LD_VAR 0 4
75717: PPUSH
75718: CALL_OW 74
75722: PPUSH
75723: CALL_OW 115
// end ; end ;
75727: GO 75307
75729: POP
75730: POP
// end ;
75731: LD_VAR 0 3
75735: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75736: LD_INT 0
75738: PPUSH
75739: PPUSH
75740: PPUSH
// if not unit or IsInUnit ( unit ) then
75741: LD_VAR 0 1
75745: NOT
75746: PUSH
75747: LD_VAR 0 1
75751: PPUSH
75752: CALL_OW 310
75756: OR
75757: IFFALSE 75761
// exit ;
75759: GO 75852
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75761: LD_ADDR_VAR 0 4
75765: PUSH
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 250
75775: PPUSH
75776: LD_VAR 0 2
75780: PPUSH
75781: LD_INT 1
75783: PPUSH
75784: CALL_OW 272
75788: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75789: LD_ADDR_VAR 0 5
75793: PUSH
75794: LD_VAR 0 1
75798: PPUSH
75799: CALL_OW 251
75803: PPUSH
75804: LD_VAR 0 2
75808: PPUSH
75809: LD_INT 1
75811: PPUSH
75812: CALL_OW 273
75816: ST_TO_ADDR
// if ValidHex ( x , y ) then
75817: LD_VAR 0 4
75821: PPUSH
75822: LD_VAR 0 5
75826: PPUSH
75827: CALL_OW 488
75831: IFFALSE 75852
// ComTurnXY ( unit , x , y ) ;
75833: LD_VAR 0 1
75837: PPUSH
75838: LD_VAR 0 4
75842: PPUSH
75843: LD_VAR 0 5
75847: PPUSH
75848: CALL_OW 118
// end ;
75852: LD_VAR 0 3
75856: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75857: LD_INT 0
75859: PPUSH
75860: PPUSH
// result := false ;
75861: LD_ADDR_VAR 0 3
75865: PUSH
75866: LD_INT 0
75868: ST_TO_ADDR
// if not units then
75869: LD_VAR 0 2
75873: NOT
75874: IFFALSE 75878
// exit ;
75876: GO 75923
// for i in units do
75878: LD_ADDR_VAR 0 4
75882: PUSH
75883: LD_VAR 0 2
75887: PUSH
75888: FOR_IN
75889: IFFALSE 75921
// if See ( side , i ) then
75891: LD_VAR 0 1
75895: PPUSH
75896: LD_VAR 0 4
75900: PPUSH
75901: CALL_OW 292
75905: IFFALSE 75919
// begin result := true ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_INT 1
75914: ST_TO_ADDR
// exit ;
75915: POP
75916: POP
75917: GO 75923
// end ;
75919: GO 75888
75921: POP
75922: POP
// end ;
75923: LD_VAR 0 3
75927: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75928: LD_INT 0
75930: PPUSH
75931: PPUSH
75932: PPUSH
75933: PPUSH
// if not unit or not points then
75934: LD_VAR 0 1
75938: NOT
75939: PUSH
75940: LD_VAR 0 2
75944: NOT
75945: OR
75946: IFFALSE 75950
// exit ;
75948: GO 76040
// dist := 99999 ;
75950: LD_ADDR_VAR 0 5
75954: PUSH
75955: LD_INT 99999
75957: ST_TO_ADDR
// for i in points do
75958: LD_ADDR_VAR 0 4
75962: PUSH
75963: LD_VAR 0 2
75967: PUSH
75968: FOR_IN
75969: IFFALSE 76038
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75971: LD_ADDR_VAR 0 6
75975: PUSH
75976: LD_VAR 0 1
75980: PPUSH
75981: LD_VAR 0 4
75985: PUSH
75986: LD_INT 1
75988: ARRAY
75989: PPUSH
75990: LD_VAR 0 4
75994: PUSH
75995: LD_INT 2
75997: ARRAY
75998: PPUSH
75999: CALL_OW 297
76003: ST_TO_ADDR
// if tmpDist < dist then
76004: LD_VAR 0 6
76008: PUSH
76009: LD_VAR 0 5
76013: LESS
76014: IFFALSE 76036
// begin result := i ;
76016: LD_ADDR_VAR 0 3
76020: PUSH
76021: LD_VAR 0 4
76025: ST_TO_ADDR
// dist := tmpDist ;
76026: LD_ADDR_VAR 0 5
76030: PUSH
76031: LD_VAR 0 6
76035: ST_TO_ADDR
// end ; end ;
76036: GO 75968
76038: POP
76039: POP
// end ;
76040: LD_VAR 0 3
76044: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76045: LD_INT 0
76047: PPUSH
// uc_side := side ;
76048: LD_ADDR_OWVAR 20
76052: PUSH
76053: LD_VAR 0 1
76057: ST_TO_ADDR
// uc_nation := 3 ;
76058: LD_ADDR_OWVAR 21
76062: PUSH
76063: LD_INT 3
76065: ST_TO_ADDR
// vc_chassis := 25 ;
76066: LD_ADDR_OWVAR 37
76070: PUSH
76071: LD_INT 25
76073: ST_TO_ADDR
// vc_engine := engine_siberite ;
76074: LD_ADDR_OWVAR 39
76078: PUSH
76079: LD_INT 3
76081: ST_TO_ADDR
// vc_control := control_computer ;
76082: LD_ADDR_OWVAR 38
76086: PUSH
76087: LD_INT 3
76089: ST_TO_ADDR
// vc_weapon := 59 ;
76090: LD_ADDR_OWVAR 40
76094: PUSH
76095: LD_INT 59
76097: ST_TO_ADDR
// result := CreateVehicle ;
76098: LD_ADDR_VAR 0 5
76102: PUSH
76103: CALL_OW 45
76107: ST_TO_ADDR
// SetDir ( result , d ) ;
76108: LD_VAR 0 5
76112: PPUSH
76113: LD_VAR 0 4
76117: PPUSH
76118: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76122: LD_VAR 0 5
76126: PPUSH
76127: LD_VAR 0 2
76131: PPUSH
76132: LD_VAR 0 3
76136: PPUSH
76137: LD_INT 0
76139: PPUSH
76140: CALL_OW 48
// end ;
76144: LD_VAR 0 5
76148: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76149: LD_INT 0
76151: PPUSH
76152: PPUSH
76153: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76154: LD_ADDR_VAR 0 2
76158: PUSH
76159: LD_INT 0
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: LD_INT 0
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76177: LD_VAR 0 1
76181: NOT
76182: PUSH
76183: LD_VAR 0 1
76187: PPUSH
76188: CALL_OW 264
76192: PUSH
76193: LD_INT 12
76195: PUSH
76196: LD_INT 51
76198: PUSH
76199: LD_INT 32
76201: PUSH
76202: LD_INT 89
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: IN
76211: NOT
76212: OR
76213: IFFALSE 76217
// exit ;
76215: GO 76315
// for i := 1 to 3 do
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: DOUBLE
76223: LD_INT 1
76225: DEC
76226: ST_TO_ADDR
76227: LD_INT 3
76229: PUSH
76230: FOR_TO
76231: IFFALSE 76313
// begin tmp := GetCargo ( cargo , i ) ;
76233: LD_ADDR_VAR 0 4
76237: PUSH
76238: LD_VAR 0 1
76242: PPUSH
76243: LD_VAR 0 3
76247: PPUSH
76248: CALL_OW 289
76252: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76253: LD_ADDR_VAR 0 2
76257: PUSH
76258: LD_VAR 0 2
76262: PPUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: LD_VAR 0 4
76272: PPUSH
76273: CALL_OW 1
76277: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76278: LD_ADDR_VAR 0 2
76282: PUSH
76283: LD_VAR 0 2
76287: PPUSH
76288: LD_INT 4
76290: PPUSH
76291: LD_VAR 0 2
76295: PUSH
76296: LD_INT 4
76298: ARRAY
76299: PUSH
76300: LD_VAR 0 4
76304: PLUS
76305: PPUSH
76306: CALL_OW 1
76310: ST_TO_ADDR
// end ;
76311: GO 76230
76313: POP
76314: POP
// end ;
76315: LD_VAR 0 2
76319: RET
// export function Length ( on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76320: LD_VAR 0 1
76324: PPUSH
76325: LD_VAR 0 2
76329: PPUSH
76330: LD_VAR 0 3
76334: PPUSH
76335: LD_VAR 0 4
76339: PPUSH
76340: LD_VAR 0 5
76344: PPUSH
76345: LD_VAR 0 6
76349: PPUSH
76350: CALL 14993 0 6
// end ;
76354: PPOPN 6
76356: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76357: LD_INT 0
76359: PPUSH
// begin if not units then
76360: LD_VAR 0 1
76364: NOT
76365: IFFALSE 76369
// exit ;
76367: GO 76369
// end ;
76369: PPOPN 7
76371: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76372: CALL 14887 0 0
// end ;
76376: PPOPN 1
76378: END
