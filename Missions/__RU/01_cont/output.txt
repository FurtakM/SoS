// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL 29199 0 1
// if unit = Burlak then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 49
14586: EQUAL
14587: IFFALSE 14593
// BurlakDying ;
14589: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 255
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: IFFALSE 14622
// lostComradesCounter = lostComradesCounter + 1 ;
14608: LD_ADDR_EXP 23
14612: PUSH
14613: LD_EXP 23
14617: PUSH
14618: LD_INT 1
14620: PLUS
14621: ST_TO_ADDR
// if unit in kirovSolds then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_EXP 59
14631: IN
14632: IFFALSE 14650
// kirovSolds = kirovSolds diff unit ;
14634: LD_ADDR_EXP 59
14638: PUSH
14639: LD_EXP 59
14643: PUSH
14644: LD_VAR 0 1
14648: DIFF
14649: ST_TO_ADDR
// end ;
14650: PPOPN 1
14652: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 29321 0 2
// end ;
14667: PPOPN 2
14669: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 3
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: AND
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: AND
14707: PUSH
14708: LD_EXP 17
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: AND
14717: OR
14718: IFFALSE 14724
// Dial_SecondAttack ;
14720: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 3
14731: EQUAL
14732: PUSH
14733: LD_VAR 0 2
14737: PUSH
14738: LD_INT 6
14740: EQUAL
14741: AND
14742: PUSH
14743: LD_EXP 18
14747: NOT
14748: AND
14749: IFFALSE 14755
// Dialogue_AttackComrade ;
14751: CALL 4057 0 0
// end ; end_of_file
14755: PPOPN 2
14757: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14758: LD_EXP 56
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: PUSH
14772: LD_EXP 29
14776: PUSH
14777: LD_INT 525
14779: LESS
14780: AND
14781: IFFALSE 14793
14783: GO 14785
14785: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14786: LD_STRING ACH_YELENA
14788: PPUSH
14789: CALL_OW 543
14793: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14794: LD_INT 23
14796: PUSH
14797: LD_INT 0
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 14
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 18
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: NOT
14852: IFFALSE 14864
14854: GO 14856
14856: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14857: LD_STRING ACH_NATURE
14859: PPUSH
14860: CALL_OW 543
14864: END
// every 0 0$1 do
14865: GO 14867
14867: DISABLE
// begin enable ;
14868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14869: LD_STRING updateTimer(
14871: PUSH
14872: LD_OWVAR 1
14876: STR
14877: PUSH
14878: LD_STRING );
14880: STR
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// export function SOS_MapStart ( ) ; begin
14887: LD_INT 0
14889: PPUSH
// if streamModeActive then
14890: LD_EXP 60
14894: IFFALSE 14903
// DefineStreamItems ( true ) ;
14896: LD_INT 1
14898: PPUSH
14899: CALL 16553 0 1
// UpdateFactoryWaypoints ( ) ;
14903: CALL 30137 0 0
// end ;
14907: LD_VAR 0 1
14911: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14912: LD_INT 0
14914: PPUSH
// if p2 = 100 then
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 100
14922: EQUAL
14923: IFFALSE 15926
// begin if not StreamModeActive then
14925: LD_EXP 60
14929: NOT
14930: IFFALSE 14940
// StreamModeActive := true ;
14932: LD_ADDR_EXP 60
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// if p3 = 0 then
14940: LD_VAR 0 3
14944: PUSH
14945: LD_INT 0
14947: EQUAL
14948: IFFALSE 14954
// InitStreamMode ;
14950: CALL 16089 0 0
// if p3 = 1 then
14954: LD_VAR 0 3
14958: PUSH
14959: LD_INT 1
14961: EQUAL
14962: IFFALSE 14972
// sRocket := true ;
14964: LD_ADDR_EXP 65
14968: PUSH
14969: LD_INT 1
14971: ST_TO_ADDR
// if p3 = 2 then
14972: LD_VAR 0 3
14976: PUSH
14977: LD_INT 2
14979: EQUAL
14980: IFFALSE 14990
// sSpeed := true ;
14982: LD_ADDR_EXP 64
14986: PUSH
14987: LD_INT 1
14989: ST_TO_ADDR
// if p3 = 3 then
14990: LD_VAR 0 3
14994: PUSH
14995: LD_INT 3
14997: EQUAL
14998: IFFALSE 15008
// sEngine := true ;
15000: LD_ADDR_EXP 66
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// if p3 = 4 then
15008: LD_VAR 0 3
15012: PUSH
15013: LD_INT 4
15015: EQUAL
15016: IFFALSE 15026
// sSpec := true ;
15018: LD_ADDR_EXP 63
15022: PUSH
15023: LD_INT 1
15025: ST_TO_ADDR
// if p3 = 5 then
15026: LD_VAR 0 3
15030: PUSH
15031: LD_INT 5
15033: EQUAL
15034: IFFALSE 15044
// sLevel := true ;
15036: LD_ADDR_EXP 67
15040: PUSH
15041: LD_INT 1
15043: ST_TO_ADDR
// if p3 = 6 then
15044: LD_VAR 0 3
15048: PUSH
15049: LD_INT 6
15051: EQUAL
15052: IFFALSE 15062
// sArmoury := true ;
15054: LD_ADDR_EXP 68
15058: PUSH
15059: LD_INT 1
15061: ST_TO_ADDR
// if p3 = 7 then
15062: LD_VAR 0 3
15066: PUSH
15067: LD_INT 7
15069: EQUAL
15070: IFFALSE 15080
// sRadar := true ;
15072: LD_ADDR_EXP 69
15076: PUSH
15077: LD_INT 1
15079: ST_TO_ADDR
// if p3 = 8 then
15080: LD_VAR 0 3
15084: PUSH
15085: LD_INT 8
15087: EQUAL
15088: IFFALSE 15098
// sBunker := true ;
15090: LD_ADDR_EXP 70
15094: PUSH
15095: LD_INT 1
15097: ST_TO_ADDR
// if p3 = 9 then
15098: LD_VAR 0 3
15102: PUSH
15103: LD_INT 9
15105: EQUAL
15106: IFFALSE 15116
// sHack := true ;
15108: LD_ADDR_EXP 71
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// if p3 = 10 then
15116: LD_VAR 0 3
15120: PUSH
15121: LD_INT 10
15123: EQUAL
15124: IFFALSE 15134
// sFire := true ;
15126: LD_ADDR_EXP 72
15130: PUSH
15131: LD_INT 1
15133: ST_TO_ADDR
// if p3 = 11 then
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 11
15141: EQUAL
15142: IFFALSE 15152
// sRefresh := true ;
15144: LD_ADDR_EXP 73
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if p3 = 12 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 12
15159: EQUAL
15160: IFFALSE 15170
// sExp := true ;
15162: LD_ADDR_EXP 74
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 13 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 13
15177: EQUAL
15178: IFFALSE 15188
// sDepot := true ;
15180: LD_ADDR_EXP 75
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 14 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 14
15195: EQUAL
15196: IFFALSE 15206
// sFlag := true ;
15198: LD_ADDR_EXP 76
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 15 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 15
15213: EQUAL
15214: IFFALSE 15224
// sKamikadze := true ;
15216: LD_ADDR_EXP 84
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 16 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 16
15231: EQUAL
15232: IFFALSE 15242
// sTroll := true ;
15234: LD_ADDR_EXP 85
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 17 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 17
15249: EQUAL
15250: IFFALSE 15260
// sSlow := true ;
15252: LD_ADDR_EXP 86
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 18 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 18
15267: EQUAL
15268: IFFALSE 15278
// sLack := true ;
15270: LD_ADDR_EXP 87
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 19 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 19
15285: EQUAL
15286: IFFALSE 15296
// sTank := true ;
15288: LD_ADDR_EXP 89
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 20 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 20
15303: EQUAL
15304: IFFALSE 15314
// sRemote := true ;
15306: LD_ADDR_EXP 90
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 21 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 21
15321: EQUAL
15322: IFFALSE 15332
// sPowell := true ;
15324: LD_ADDR_EXP 91
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 22 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 22
15339: EQUAL
15340: IFFALSE 15350
// sTeleport := true ;
15342: LD_ADDR_EXP 94
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 23 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 23
15357: EQUAL
15358: IFFALSE 15368
// sOilTower := true ;
15360: LD_ADDR_EXP 96
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 24 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 24
15375: EQUAL
15376: IFFALSE 15386
// sShovel := true ;
15378: LD_ADDR_EXP 97
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 25 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 25
15393: EQUAL
15394: IFFALSE 15404
// sSheik := true ;
15396: LD_ADDR_EXP 98
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 26 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 26
15411: EQUAL
15412: IFFALSE 15422
// sEarthquake := true ;
15414: LD_ADDR_EXP 100
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 27 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 27
15429: EQUAL
15430: IFFALSE 15440
// sAI := true ;
15432: LD_ADDR_EXP 101
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 28 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 28
15447: EQUAL
15448: IFFALSE 15458
// sCargo := true ;
15450: LD_ADDR_EXP 104
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 29 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 29
15465: EQUAL
15466: IFFALSE 15476
// sDLaser := true ;
15468: LD_ADDR_EXP 105
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 30 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 30
15483: EQUAL
15484: IFFALSE 15494
// sExchange := true ;
15486: LD_ADDR_EXP 106
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 31 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 31
15501: EQUAL
15502: IFFALSE 15512
// sFac := true ;
15504: LD_ADDR_EXP 107
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 32 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 32
15519: EQUAL
15520: IFFALSE 15530
// sPower := true ;
15522: LD_ADDR_EXP 108
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 33 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 33
15537: EQUAL
15538: IFFALSE 15548
// sRandom := true ;
15540: LD_ADDR_EXP 109
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 34 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 34
15555: EQUAL
15556: IFFALSE 15566
// sShield := true ;
15558: LD_ADDR_EXP 110
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 35 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 35
15573: EQUAL
15574: IFFALSE 15584
// sTime := true ;
15576: LD_ADDR_EXP 111
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 36 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 36
15591: EQUAL
15592: IFFALSE 15602
// sTools := true ;
15594: LD_ADDR_EXP 112
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 101 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 101
15609: EQUAL
15610: IFFALSE 15620
// sSold := true ;
15612: LD_ADDR_EXP 77
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 102 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 102
15627: EQUAL
15628: IFFALSE 15638
// sDiff := true ;
15630: LD_ADDR_EXP 78
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 103 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 103
15645: EQUAL
15646: IFFALSE 15656
// sFog := true ;
15648: LD_ADDR_EXP 81
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 104 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 104
15663: EQUAL
15664: IFFALSE 15674
// sReset := true ;
15666: LD_ADDR_EXP 82
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 105 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 105
15681: EQUAL
15682: IFFALSE 15692
// sSun := true ;
15684: LD_ADDR_EXP 83
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 106 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 106
15699: EQUAL
15700: IFFALSE 15710
// sTiger := true ;
15702: LD_ADDR_EXP 79
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 107 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 107
15717: EQUAL
15718: IFFALSE 15728
// sBomb := true ;
15720: LD_ADDR_EXP 80
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 108 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 108
15735: EQUAL
15736: IFFALSE 15746
// sWound := true ;
15738: LD_ADDR_EXP 88
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 109 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 109
15753: EQUAL
15754: IFFALSE 15764
// sBetray := true ;
15756: LD_ADDR_EXP 92
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 110 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 110
15771: EQUAL
15772: IFFALSE 15782
// sContamin := true ;
15774: LD_ADDR_EXP 93
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 111 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 111
15789: EQUAL
15790: IFFALSE 15800
// sOil := true ;
15792: LD_ADDR_EXP 95
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 112 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 112
15807: EQUAL
15808: IFFALSE 15818
// sStu := true ;
15810: LD_ADDR_EXP 99
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 113 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 113
15825: EQUAL
15826: IFFALSE 15836
// sBazooka := true ;
15828: LD_ADDR_EXP 102
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 114 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 114
15843: EQUAL
15844: IFFALSE 15854
// sMortar := true ;
15846: LD_ADDR_EXP 103
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 115 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 115
15861: EQUAL
15862: IFFALSE 15872
// sRanger := true ;
15864: LD_ADDR_EXP 113
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 116 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 116
15879: EQUAL
15880: IFFALSE 15890
// sComputer := true ;
15882: LD_ADDR_EXP 114
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 117 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 117
15897: EQUAL
15898: IFFALSE 15908
// s30 := true ;
15900: LD_ADDR_EXP 115
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 118 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 118
15915: EQUAL
15916: IFFALSE 15926
// s60 := true ;
15918: LD_ADDR_EXP 116
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// end ; if p2 = 101 then
15926: LD_VAR 0 2
15930: PUSH
15931: LD_INT 101
15933: EQUAL
15934: IFFALSE 16062
// begin case p3 of 1 :
15936: LD_VAR 0 3
15940: PUSH
15941: LD_INT 1
15943: DOUBLE
15944: EQUAL
15945: IFTRUE 15949
15947: GO 15956
15949: POP
// hHackUnlimitedResources ; 2 :
15950: CALL 28160 0 0
15954: GO 16062
15956: LD_INT 2
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15964
15962: GO 15971
15964: POP
// hHackSetLevel10 ; 3 :
15965: CALL 28293 0 0
15969: GO 16062
15971: LD_INT 3
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 15986
15979: POP
// hHackSetLevel10YourUnits ; 4 :
15980: CALL 28378 0 0
15984: GO 16062
15986: LD_INT 4
15988: DOUBLE
15989: EQUAL
15990: IFTRUE 15994
15992: GO 16001
15994: POP
// hHackInvincible ; 5 :
15995: CALL 28826 0 0
15999: GO 16062
16001: LD_INT 5
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16016
16009: POP
// hHackInvisible ; 6 :
16010: CALL 28937 0 0
16014: GO 16062
16016: LD_INT 6
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16031
16024: POP
// hHackChangeYourSide ; 7 :
16025: CALL 28994 0 0
16029: GO 16062
16031: LD_INT 7
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16046
16039: POP
// hHackChangeUnitSide ; 8 :
16040: CALL 29036 0 0
16044: GO 16062
16046: LD_INT 8
16048: DOUBLE
16049: EQUAL
16050: IFTRUE 16054
16052: GO 16061
16054: POP
// hHackFog ; end ;
16055: CALL 29137 0 0
16059: GO 16062
16061: POP
// end ; end ;
16062: LD_VAR 0 7
16066: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16067: GO 16069
16069: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16070: LD_STRING initStreamRollete();
16072: PPUSH
16073: CALL_OW 559
// InitStreamMode ;
16077: CALL 16089 0 0
// DefineStreamItems ( false ) ;
16081: LD_INT 0
16083: PPUSH
16084: CALL 16553 0 1
// end ;
16088: END
// function InitStreamMode ; begin
16089: LD_INT 0
16091: PPUSH
// streamModeActive := false ;
16092: LD_ADDR_EXP 60
16096: PUSH
16097: LD_INT 0
16099: ST_TO_ADDR
// normalCounter := 36 ;
16100: LD_ADDR_EXP 61
16104: PUSH
16105: LD_INT 36
16107: ST_TO_ADDR
// hardcoreCounter := 18 ;
16108: LD_ADDR_EXP 62
16112: PUSH
16113: LD_INT 18
16115: ST_TO_ADDR
// sRocket := false ;
16116: LD_ADDR_EXP 65
16120: PUSH
16121: LD_INT 0
16123: ST_TO_ADDR
// sSpeed := false ;
16124: LD_ADDR_EXP 64
16128: PUSH
16129: LD_INT 0
16131: ST_TO_ADDR
// sEngine := false ;
16132: LD_ADDR_EXP 66
16136: PUSH
16137: LD_INT 0
16139: ST_TO_ADDR
// sSpec := false ;
16140: LD_ADDR_EXP 63
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// sLevel := false ;
16148: LD_ADDR_EXP 67
16152: PUSH
16153: LD_INT 0
16155: ST_TO_ADDR
// sArmoury := false ;
16156: LD_ADDR_EXP 68
16160: PUSH
16161: LD_INT 0
16163: ST_TO_ADDR
// sRadar := false ;
16164: LD_ADDR_EXP 69
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// sBunker := false ;
16172: LD_ADDR_EXP 70
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// sHack := false ;
16180: LD_ADDR_EXP 71
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// sFire := false ;
16188: LD_ADDR_EXP 72
16192: PUSH
16193: LD_INT 0
16195: ST_TO_ADDR
// sRefresh := false ;
16196: LD_ADDR_EXP 73
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// sExp := false ;
16204: LD_ADDR_EXP 74
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// sDepot := false ;
16212: LD_ADDR_EXP 75
16216: PUSH
16217: LD_INT 0
16219: ST_TO_ADDR
// sFlag := false ;
16220: LD_ADDR_EXP 76
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// sKamikadze := false ;
16228: LD_ADDR_EXP 84
16232: PUSH
16233: LD_INT 0
16235: ST_TO_ADDR
// sTroll := false ;
16236: LD_ADDR_EXP 85
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// sSlow := false ;
16244: LD_ADDR_EXP 86
16248: PUSH
16249: LD_INT 0
16251: ST_TO_ADDR
// sLack := false ;
16252: LD_ADDR_EXP 87
16256: PUSH
16257: LD_INT 0
16259: ST_TO_ADDR
// sTank := false ;
16260: LD_ADDR_EXP 89
16264: PUSH
16265: LD_INT 0
16267: ST_TO_ADDR
// sRemote := false ;
16268: LD_ADDR_EXP 90
16272: PUSH
16273: LD_INT 0
16275: ST_TO_ADDR
// sPowell := false ;
16276: LD_ADDR_EXP 91
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
// sTeleport := false ;
16284: LD_ADDR_EXP 94
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// sOilTower := false ;
16292: LD_ADDR_EXP 96
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// sShovel := false ;
16300: LD_ADDR_EXP 97
16304: PUSH
16305: LD_INT 0
16307: ST_TO_ADDR
// sSheik := false ;
16308: LD_ADDR_EXP 98
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// sEarthquake := false ;
16316: LD_ADDR_EXP 100
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// sAI := false ;
16324: LD_ADDR_EXP 101
16328: PUSH
16329: LD_INT 0
16331: ST_TO_ADDR
// sCargo := false ;
16332: LD_ADDR_EXP 104
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// sDLaser := false ;
16340: LD_ADDR_EXP 105
16344: PUSH
16345: LD_INT 0
16347: ST_TO_ADDR
// sExchange := false ;
16348: LD_ADDR_EXP 106
16352: PUSH
16353: LD_INT 0
16355: ST_TO_ADDR
// sFac := false ;
16356: LD_ADDR_EXP 107
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// sPower := false ;
16364: LD_ADDR_EXP 108
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// sRandom := false ;
16372: LD_ADDR_EXP 109
16376: PUSH
16377: LD_INT 0
16379: ST_TO_ADDR
// sShield := false ;
16380: LD_ADDR_EXP 110
16384: PUSH
16385: LD_INT 0
16387: ST_TO_ADDR
// sTime := false ;
16388: LD_ADDR_EXP 111
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// sTools := false ;
16396: LD_ADDR_EXP 112
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// sSold := false ;
16404: LD_ADDR_EXP 77
16408: PUSH
16409: LD_INT 0
16411: ST_TO_ADDR
// sDiff := false ;
16412: LD_ADDR_EXP 78
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// sFog := false ;
16420: LD_ADDR_EXP 81
16424: PUSH
16425: LD_INT 0
16427: ST_TO_ADDR
// sReset := false ;
16428: LD_ADDR_EXP 82
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
// sSun := false ;
16436: LD_ADDR_EXP 83
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// sTiger := false ;
16444: LD_ADDR_EXP 79
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// sBomb := false ;
16452: LD_ADDR_EXP 80
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// sWound := false ;
16460: LD_ADDR_EXP 88
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// sBetray := false ;
16468: LD_ADDR_EXP 92
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// sContamin := false ;
16476: LD_ADDR_EXP 93
16480: PUSH
16481: LD_INT 0
16483: ST_TO_ADDR
// sOil := false ;
16484: LD_ADDR_EXP 95
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// sStu := false ;
16492: LD_ADDR_EXP 99
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// sBazooka := false ;
16500: LD_ADDR_EXP 102
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// sMortar := false ;
16508: LD_ADDR_EXP 103
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// sRanger := false ;
16516: LD_ADDR_EXP 113
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// sComputer := false ;
16524: LD_ADDR_EXP 114
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// s30 := false ;
16532: LD_ADDR_EXP 115
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// s60 := false ;
16540: LD_ADDR_EXP 116
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// end ;
16548: LD_VAR 0 1
16552: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
// result := [ ] ;
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: EMPTY
16568: ST_TO_ADDR
// if campaign_id = 1 then
16569: LD_OWVAR 69
16573: PUSH
16574: LD_INT 1
16576: EQUAL
16577: IFFALSE 19743
// begin case mission_number of 1 :
16579: LD_OWVAR 70
16583: PUSH
16584: LD_INT 1
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16668
16592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16593: LD_ADDR_VAR 0 2
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: LD_INT 4
16603: PUSH
16604: LD_INT 11
16606: PUSH
16607: LD_INT 12
16609: PUSH
16610: LD_INT 15
16612: PUSH
16613: LD_INT 16
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 23
16621: PUSH
16622: LD_INT 26
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 101
16638: PUSH
16639: LD_INT 102
16641: PUSH
16642: LD_INT 106
16644: PUSH
16645: LD_INT 116
16647: PUSH
16648: LD_INT 117
16650: PUSH
16651: LD_INT 118
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: ST_TO_ADDR
16666: GO 19741
16668: LD_INT 2
16670: DOUBLE
16671: EQUAL
16672: IFTRUE 16676
16674: GO 16760
16676: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 4
16687: PUSH
16688: LD_INT 11
16690: PUSH
16691: LD_INT 12
16693: PUSH
16694: LD_INT 15
16696: PUSH
16697: LD_INT 16
16699: PUSH
16700: LD_INT 22
16702: PUSH
16703: LD_INT 23
16705: PUSH
16706: LD_INT 26
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 101
16722: PUSH
16723: LD_INT 102
16725: PUSH
16726: LD_INT 105
16728: PUSH
16729: LD_INT 106
16731: PUSH
16732: LD_INT 108
16734: PUSH
16735: LD_INT 116
16737: PUSH
16738: LD_INT 117
16740: PUSH
16741: LD_INT 118
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: ST_TO_ADDR
16758: GO 19741
16760: LD_INT 3
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16856
16768: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 2
16776: PUSH
16777: LD_INT 4
16779: PUSH
16780: LD_INT 5
16782: PUSH
16783: LD_INT 11
16785: PUSH
16786: LD_INT 12
16788: PUSH
16789: LD_INT 15
16791: PUSH
16792: LD_INT 16
16794: PUSH
16795: LD_INT 22
16797: PUSH
16798: LD_INT 26
16800: PUSH
16801: LD_INT 36
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 101
16818: PUSH
16819: LD_INT 102
16821: PUSH
16822: LD_INT 105
16824: PUSH
16825: LD_INT 106
16827: PUSH
16828: LD_INT 108
16830: PUSH
16831: LD_INT 116
16833: PUSH
16834: LD_INT 117
16836: PUSH
16837: LD_INT 118
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: ST_TO_ADDR
16854: GO 19741
16856: LD_INT 4
16858: DOUBLE
16859: EQUAL
16860: IFTRUE 16864
16862: GO 16960
16864: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 8
16881: PUSH
16882: LD_INT 11
16884: PUSH
16885: LD_INT 12
16887: PUSH
16888: LD_INT 15
16890: PUSH
16891: LD_INT 16
16893: PUSH
16894: LD_INT 22
16896: PUSH
16897: LD_INT 23
16899: PUSH
16900: LD_INT 26
16902: PUSH
16903: LD_INT 36
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 101
16922: PUSH
16923: LD_INT 102
16925: PUSH
16926: LD_INT 105
16928: PUSH
16929: LD_INT 106
16931: PUSH
16932: LD_INT 108
16934: PUSH
16935: LD_INT 116
16937: PUSH
16938: LD_INT 117
16940: PUSH
16941: LD_INT 118
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: ST_TO_ADDR
16958: GO 19741
16960: LD_INT 5
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 17080
16968: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16969: LD_ADDR_VAR 0 2
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 4
16979: PUSH
16980: LD_INT 5
16982: PUSH
16983: LD_INT 6
16985: PUSH
16986: LD_INT 8
16988: PUSH
16989: LD_INT 11
16991: PUSH
16992: LD_INT 12
16994: PUSH
16995: LD_INT 15
16997: PUSH
16998: LD_INT 16
17000: PUSH
17001: LD_INT 22
17003: PUSH
17004: LD_INT 23
17006: PUSH
17007: LD_INT 25
17009: PUSH
17010: LD_INT 26
17012: PUSH
17013: LD_INT 36
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 101
17034: PUSH
17035: LD_INT 102
17037: PUSH
17038: LD_INT 105
17040: PUSH
17041: LD_INT 106
17043: PUSH
17044: LD_INT 108
17046: PUSH
17047: LD_INT 109
17049: PUSH
17050: LD_INT 112
17052: PUSH
17053: LD_INT 116
17055: PUSH
17056: LD_INT 117
17058: PUSH
17059: LD_INT 118
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: ST_TO_ADDR
17078: GO 19741
17080: LD_INT 6
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17220
17088: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: LD_INT 5
17102: PUSH
17103: LD_INT 6
17105: PUSH
17106: LD_INT 8
17108: PUSH
17109: LD_INT 11
17111: PUSH
17112: LD_INT 12
17114: PUSH
17115: LD_INT 15
17117: PUSH
17118: LD_INT 16
17120: PUSH
17121: LD_INT 20
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 22
17129: PUSH
17130: LD_INT 23
17132: PUSH
17133: LD_INT 25
17135: PUSH
17136: LD_INT 26
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 31
17144: PUSH
17145: LD_INT 32
17147: PUSH
17148: LD_INT 36
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 101
17174: PUSH
17175: LD_INT 102
17177: PUSH
17178: LD_INT 105
17180: PUSH
17181: LD_INT 106
17183: PUSH
17184: LD_INT 108
17186: PUSH
17187: LD_INT 109
17189: PUSH
17190: LD_INT 112
17192: PUSH
17193: LD_INT 116
17195: PUSH
17196: LD_INT 117
17198: PUSH
17199: LD_INT 118
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 19741
17220: LD_INT 7
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17340
17228: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 4
17239: PUSH
17240: LD_INT 5
17242: PUSH
17243: LD_INT 7
17245: PUSH
17246: LD_INT 11
17248: PUSH
17249: LD_INT 12
17251: PUSH
17252: LD_INT 15
17254: PUSH
17255: LD_INT 16
17257: PUSH
17258: LD_INT 20
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 23
17269: PUSH
17270: LD_INT 25
17272: PUSH
17273: LD_INT 26
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 101
17294: PUSH
17295: LD_INT 102
17297: PUSH
17298: LD_INT 103
17300: PUSH
17301: LD_INT 105
17303: PUSH
17304: LD_INT 106
17306: PUSH
17307: LD_INT 108
17309: PUSH
17310: LD_INT 112
17312: PUSH
17313: LD_INT 116
17315: PUSH
17316: LD_INT 117
17318: PUSH
17319: LD_INT 118
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: ST_TO_ADDR
17338: GO 19741
17340: LD_INT 8
17342: DOUBLE
17343: EQUAL
17344: IFTRUE 17348
17346: GO 17488
17348: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: LD_INT 2
17356: PUSH
17357: LD_INT 4
17359: PUSH
17360: LD_INT 5
17362: PUSH
17363: LD_INT 6
17365: PUSH
17366: LD_INT 7
17368: PUSH
17369: LD_INT 8
17371: PUSH
17372: LD_INT 11
17374: PUSH
17375: LD_INT 12
17377: PUSH
17378: LD_INT 15
17380: PUSH
17381: LD_INT 16
17383: PUSH
17384: LD_INT 20
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 22
17392: PUSH
17393: LD_INT 23
17395: PUSH
17396: LD_INT 25
17398: PUSH
17399: LD_INT 26
17401: PUSH
17402: LD_INT 30
17404: PUSH
17405: LD_INT 31
17407: PUSH
17408: LD_INT 32
17410: PUSH
17411: LD_INT 36
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 101
17438: PUSH
17439: LD_INT 102
17441: PUSH
17442: LD_INT 103
17444: PUSH
17445: LD_INT 105
17447: PUSH
17448: LD_INT 106
17450: PUSH
17451: LD_INT 108
17453: PUSH
17454: LD_INT 109
17456: PUSH
17457: LD_INT 112
17459: PUSH
17460: LD_INT 116
17462: PUSH
17463: LD_INT 117
17465: PUSH
17466: LD_INT 118
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: ST_TO_ADDR
17486: GO 19741
17488: LD_INT 9
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17644
17496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 4
17507: PUSH
17508: LD_INT 5
17510: PUSH
17511: LD_INT 6
17513: PUSH
17514: LD_INT 7
17516: PUSH
17517: LD_INT 8
17519: PUSH
17520: LD_INT 11
17522: PUSH
17523: LD_INT 12
17525: PUSH
17526: LD_INT 15
17528: PUSH
17529: LD_INT 16
17531: PUSH
17532: LD_INT 20
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 22
17540: PUSH
17541: LD_INT 23
17543: PUSH
17544: LD_INT 25
17546: PUSH
17547: LD_INT 26
17549: PUSH
17550: LD_INT 28
17552: PUSH
17553: LD_INT 30
17555: PUSH
17556: LD_INT 31
17558: PUSH
17559: LD_INT 32
17561: PUSH
17562: LD_INT 36
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 101
17590: PUSH
17591: LD_INT 102
17593: PUSH
17594: LD_INT 103
17596: PUSH
17597: LD_INT 105
17599: PUSH
17600: LD_INT 106
17602: PUSH
17603: LD_INT 108
17605: PUSH
17606: LD_INT 109
17608: PUSH
17609: LD_INT 112
17611: PUSH
17612: LD_INT 114
17614: PUSH
17615: LD_INT 116
17617: PUSH
17618: LD_INT 117
17620: PUSH
17621: LD_INT 118
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: ST_TO_ADDR
17642: GO 19741
17644: LD_INT 10
17646: DOUBLE
17647: EQUAL
17648: IFTRUE 17652
17650: GO 17848
17652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: LD_INT 4
17663: PUSH
17664: LD_INT 5
17666: PUSH
17667: LD_INT 6
17669: PUSH
17670: LD_INT 7
17672: PUSH
17673: LD_INT 8
17675: PUSH
17676: LD_INT 9
17678: PUSH
17679: LD_INT 10
17681: PUSH
17682: LD_INT 11
17684: PUSH
17685: LD_INT 12
17687: PUSH
17688: LD_INT 13
17690: PUSH
17691: LD_INT 14
17693: PUSH
17694: LD_INT 15
17696: PUSH
17697: LD_INT 16
17699: PUSH
17700: LD_INT 17
17702: PUSH
17703: LD_INT 18
17705: PUSH
17706: LD_INT 19
17708: PUSH
17709: LD_INT 20
17711: PUSH
17712: LD_INT 21
17714: PUSH
17715: LD_INT 22
17717: PUSH
17718: LD_INT 23
17720: PUSH
17721: LD_INT 24
17723: PUSH
17724: LD_INT 25
17726: PUSH
17727: LD_INT 26
17729: PUSH
17730: LD_INT 28
17732: PUSH
17733: LD_INT 30
17735: PUSH
17736: LD_INT 31
17738: PUSH
17739: LD_INT 32
17741: PUSH
17742: LD_INT 36
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 101
17778: PUSH
17779: LD_INT 102
17781: PUSH
17782: LD_INT 103
17784: PUSH
17785: LD_INT 104
17787: PUSH
17788: LD_INT 105
17790: PUSH
17791: LD_INT 106
17793: PUSH
17794: LD_INT 107
17796: PUSH
17797: LD_INT 108
17799: PUSH
17800: LD_INT 109
17802: PUSH
17803: LD_INT 110
17805: PUSH
17806: LD_INT 111
17808: PUSH
17809: LD_INT 112
17811: PUSH
17812: LD_INT 114
17814: PUSH
17815: LD_INT 116
17817: PUSH
17818: LD_INT 117
17820: PUSH
17821: LD_INT 118
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: ST_TO_ADDR
17846: GO 19741
17848: LD_INT 11
17850: DOUBLE
17851: EQUAL
17852: IFTRUE 17856
17854: GO 18060
17856: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17857: LD_ADDR_VAR 0 2
17861: PUSH
17862: LD_INT 2
17864: PUSH
17865: LD_INT 3
17867: PUSH
17868: LD_INT 4
17870: PUSH
17871: LD_INT 5
17873: PUSH
17874: LD_INT 6
17876: PUSH
17877: LD_INT 7
17879: PUSH
17880: LD_INT 8
17882: PUSH
17883: LD_INT 9
17885: PUSH
17886: LD_INT 10
17888: PUSH
17889: LD_INT 11
17891: PUSH
17892: LD_INT 12
17894: PUSH
17895: LD_INT 13
17897: PUSH
17898: LD_INT 14
17900: PUSH
17901: LD_INT 15
17903: PUSH
17904: LD_INT 16
17906: PUSH
17907: LD_INT 17
17909: PUSH
17910: LD_INT 18
17912: PUSH
17913: LD_INT 19
17915: PUSH
17916: LD_INT 20
17918: PUSH
17919: LD_INT 21
17921: PUSH
17922: LD_INT 22
17924: PUSH
17925: LD_INT 23
17927: PUSH
17928: LD_INT 24
17930: PUSH
17931: LD_INT 25
17933: PUSH
17934: LD_INT 26
17936: PUSH
17937: LD_INT 28
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 34
17951: PUSH
17952: LD_INT 36
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 101
17990: PUSH
17991: LD_INT 102
17993: PUSH
17994: LD_INT 103
17996: PUSH
17997: LD_INT 104
17999: PUSH
18000: LD_INT 105
18002: PUSH
18003: LD_INT 106
18005: PUSH
18006: LD_INT 107
18008: PUSH
18009: LD_INT 108
18011: PUSH
18012: LD_INT 109
18014: PUSH
18015: LD_INT 110
18017: PUSH
18018: LD_INT 111
18020: PUSH
18021: LD_INT 112
18023: PUSH
18024: LD_INT 114
18026: PUSH
18027: LD_INT 116
18029: PUSH
18030: LD_INT 117
18032: PUSH
18033: LD_INT 118
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: ST_TO_ADDR
18058: GO 19741
18060: LD_INT 12
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18288
18068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: LD_INT 4
18085: PUSH
18086: LD_INT 5
18088: PUSH
18089: LD_INT 6
18091: PUSH
18092: LD_INT 7
18094: PUSH
18095: LD_INT 8
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: LD_INT 10
18103: PUSH
18104: LD_INT 11
18106: PUSH
18107: LD_INT 12
18109: PUSH
18110: LD_INT 13
18112: PUSH
18113: LD_INT 14
18115: PUSH
18116: LD_INT 15
18118: PUSH
18119: LD_INT 16
18121: PUSH
18122: LD_INT 17
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: LD_INT 19
18130: PUSH
18131: LD_INT 20
18133: PUSH
18134: LD_INT 21
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_INT 23
18142: PUSH
18143: LD_INT 24
18145: PUSH
18146: LD_INT 25
18148: PUSH
18149: LD_INT 26
18151: PUSH
18152: LD_INT 27
18154: PUSH
18155: LD_INT 28
18157: PUSH
18158: LD_INT 30
18160: PUSH
18161: LD_INT 31
18163: PUSH
18164: LD_INT 32
18166: PUSH
18167: LD_INT 33
18169: PUSH
18170: LD_INT 34
18172: PUSH
18173: LD_INT 36
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 101
18214: PUSH
18215: LD_INT 102
18217: PUSH
18218: LD_INT 103
18220: PUSH
18221: LD_INT 104
18223: PUSH
18224: LD_INT 105
18226: PUSH
18227: LD_INT 106
18229: PUSH
18230: LD_INT 107
18232: PUSH
18233: LD_INT 108
18235: PUSH
18236: LD_INT 109
18238: PUSH
18239: LD_INT 110
18241: PUSH
18242: LD_INT 111
18244: PUSH
18245: LD_INT 112
18247: PUSH
18248: LD_INT 113
18250: PUSH
18251: LD_INT 114
18253: PUSH
18254: LD_INT 116
18256: PUSH
18257: LD_INT 117
18259: PUSH
18260: LD_INT 118
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: ST_TO_ADDR
18286: GO 19741
18288: LD_INT 13
18290: DOUBLE
18291: EQUAL
18292: IFTRUE 18296
18294: GO 18504
18296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18297: LD_ADDR_VAR 0 2
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 3
18310: PUSH
18311: LD_INT 4
18313: PUSH
18314: LD_INT 5
18316: PUSH
18317: LD_INT 8
18319: PUSH
18320: LD_INT 9
18322: PUSH
18323: LD_INT 10
18325: PUSH
18326: LD_INT 11
18328: PUSH
18329: LD_INT 12
18331: PUSH
18332: LD_INT 14
18334: PUSH
18335: LD_INT 15
18337: PUSH
18338: LD_INT 16
18340: PUSH
18341: LD_INT 17
18343: PUSH
18344: LD_INT 18
18346: PUSH
18347: LD_INT 19
18349: PUSH
18350: LD_INT 20
18352: PUSH
18353: LD_INT 21
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_INT 23
18361: PUSH
18362: LD_INT 24
18364: PUSH
18365: LD_INT 25
18367: PUSH
18368: LD_INT 26
18370: PUSH
18371: LD_INT 27
18373: PUSH
18374: LD_INT 28
18376: PUSH
18377: LD_INT 30
18379: PUSH
18380: LD_INT 31
18382: PUSH
18383: LD_INT 32
18385: PUSH
18386: LD_INT 33
18388: PUSH
18389: LD_INT 34
18391: PUSH
18392: LD_INT 36
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 101
18430: PUSH
18431: LD_INT 102
18433: PUSH
18434: LD_INT 103
18436: PUSH
18437: LD_INT 104
18439: PUSH
18440: LD_INT 105
18442: PUSH
18443: LD_INT 106
18445: PUSH
18446: LD_INT 107
18448: PUSH
18449: LD_INT 108
18451: PUSH
18452: LD_INT 109
18454: PUSH
18455: LD_INT 110
18457: PUSH
18458: LD_INT 111
18460: PUSH
18461: LD_INT 112
18463: PUSH
18464: LD_INT 113
18466: PUSH
18467: LD_INT 114
18469: PUSH
18470: LD_INT 116
18472: PUSH
18473: LD_INT 117
18475: PUSH
18476: LD_INT 118
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: ST_TO_ADDR
18502: GO 19741
18504: LD_INT 14
18506: DOUBLE
18507: EQUAL
18508: IFTRUE 18512
18510: GO 18736
18512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18513: LD_ADDR_VAR 0 2
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: LD_INT 5
18532: PUSH
18533: LD_INT 6
18535: PUSH
18536: LD_INT 7
18538: PUSH
18539: LD_INT 8
18541: PUSH
18542: LD_INT 9
18544: PUSH
18545: LD_INT 10
18547: PUSH
18548: LD_INT 11
18550: PUSH
18551: LD_INT 12
18553: PUSH
18554: LD_INT 13
18556: PUSH
18557: LD_INT 14
18559: PUSH
18560: LD_INT 15
18562: PUSH
18563: LD_INT 16
18565: PUSH
18566: LD_INT 17
18568: PUSH
18569: LD_INT 18
18571: PUSH
18572: LD_INT 19
18574: PUSH
18575: LD_INT 20
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 22
18583: PUSH
18584: LD_INT 23
18586: PUSH
18587: LD_INT 24
18589: PUSH
18590: LD_INT 25
18592: PUSH
18593: LD_INT 26
18595: PUSH
18596: LD_INT 27
18598: PUSH
18599: LD_INT 28
18601: PUSH
18602: LD_INT 29
18604: PUSH
18605: LD_INT 30
18607: PUSH
18608: LD_INT 31
18610: PUSH
18611: LD_INT 32
18613: PUSH
18614: LD_INT 33
18616: PUSH
18617: LD_INT 34
18619: PUSH
18620: LD_INT 36
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 101
18662: PUSH
18663: LD_INT 102
18665: PUSH
18666: LD_INT 103
18668: PUSH
18669: LD_INT 104
18671: PUSH
18672: LD_INT 105
18674: PUSH
18675: LD_INT 106
18677: PUSH
18678: LD_INT 107
18680: PUSH
18681: LD_INT 108
18683: PUSH
18684: LD_INT 109
18686: PUSH
18687: LD_INT 110
18689: PUSH
18690: LD_INT 111
18692: PUSH
18693: LD_INT 112
18695: PUSH
18696: LD_INT 113
18698: PUSH
18699: LD_INT 114
18701: PUSH
18702: LD_INT 116
18704: PUSH
18705: LD_INT 117
18707: PUSH
18708: LD_INT 118
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: ST_TO_ADDR
18734: GO 19741
18736: LD_INT 15
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18968
18744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18745: LD_ADDR_VAR 0 2
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: LD_INT 4
18761: PUSH
18762: LD_INT 5
18764: PUSH
18765: LD_INT 6
18767: PUSH
18768: LD_INT 7
18770: PUSH
18771: LD_INT 8
18773: PUSH
18774: LD_INT 9
18776: PUSH
18777: LD_INT 10
18779: PUSH
18780: LD_INT 11
18782: PUSH
18783: LD_INT 12
18785: PUSH
18786: LD_INT 13
18788: PUSH
18789: LD_INT 14
18791: PUSH
18792: LD_INT 15
18794: PUSH
18795: LD_INT 16
18797: PUSH
18798: LD_INT 17
18800: PUSH
18801: LD_INT 18
18803: PUSH
18804: LD_INT 19
18806: PUSH
18807: LD_INT 20
18809: PUSH
18810: LD_INT 21
18812: PUSH
18813: LD_INT 22
18815: PUSH
18816: LD_INT 23
18818: PUSH
18819: LD_INT 24
18821: PUSH
18822: LD_INT 25
18824: PUSH
18825: LD_INT 26
18827: PUSH
18828: LD_INT 27
18830: PUSH
18831: LD_INT 28
18833: PUSH
18834: LD_INT 29
18836: PUSH
18837: LD_INT 30
18839: PUSH
18840: LD_INT 31
18842: PUSH
18843: LD_INT 32
18845: PUSH
18846: LD_INT 33
18848: PUSH
18849: LD_INT 34
18851: PUSH
18852: LD_INT 36
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 101
18894: PUSH
18895: LD_INT 102
18897: PUSH
18898: LD_INT 103
18900: PUSH
18901: LD_INT 104
18903: PUSH
18904: LD_INT 105
18906: PUSH
18907: LD_INT 106
18909: PUSH
18910: LD_INT 107
18912: PUSH
18913: LD_INT 108
18915: PUSH
18916: LD_INT 109
18918: PUSH
18919: LD_INT 110
18921: PUSH
18922: LD_INT 111
18924: PUSH
18925: LD_INT 112
18927: PUSH
18928: LD_INT 113
18930: PUSH
18931: LD_INT 114
18933: PUSH
18934: LD_INT 116
18936: PUSH
18937: LD_INT 117
18939: PUSH
18940: LD_INT 118
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: ST_TO_ADDR
18966: GO 19741
18968: LD_INT 16
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19112
18976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: LD_INT 5
18990: PUSH
18991: LD_INT 7
18993: PUSH
18994: LD_INT 11
18996: PUSH
18997: LD_INT 12
18999: PUSH
19000: LD_INT 15
19002: PUSH
19003: LD_INT 16
19005: PUSH
19006: LD_INT 20
19008: PUSH
19009: LD_INT 21
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_INT 23
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 26
19023: PUSH
19024: LD_INT 30
19026: PUSH
19027: LD_INT 31
19029: PUSH
19030: LD_INT 32
19032: PUSH
19033: LD_INT 33
19035: PUSH
19036: LD_INT 34
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 101
19062: PUSH
19063: LD_INT 102
19065: PUSH
19066: LD_INT 103
19068: PUSH
19069: LD_INT 106
19071: PUSH
19072: LD_INT 108
19074: PUSH
19075: LD_INT 112
19077: PUSH
19078: LD_INT 113
19080: PUSH
19081: LD_INT 114
19083: PUSH
19084: LD_INT 116
19086: PUSH
19087: LD_INT 117
19089: PUSH
19090: LD_INT 118
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: ST_TO_ADDR
19110: GO 19741
19112: LD_INT 17
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19344
19120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 3
19134: PUSH
19135: LD_INT 4
19137: PUSH
19138: LD_INT 5
19140: PUSH
19141: LD_INT 6
19143: PUSH
19144: LD_INT 7
19146: PUSH
19147: LD_INT 8
19149: PUSH
19150: LD_INT 9
19152: PUSH
19153: LD_INT 10
19155: PUSH
19156: LD_INT 11
19158: PUSH
19159: LD_INT 12
19161: PUSH
19162: LD_INT 13
19164: PUSH
19165: LD_INT 14
19167: PUSH
19168: LD_INT 15
19170: PUSH
19171: LD_INT 16
19173: PUSH
19174: LD_INT 17
19176: PUSH
19177: LD_INT 18
19179: PUSH
19180: LD_INT 19
19182: PUSH
19183: LD_INT 20
19185: PUSH
19186: LD_INT 21
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 23
19194: PUSH
19195: LD_INT 24
19197: PUSH
19198: LD_INT 25
19200: PUSH
19201: LD_INT 26
19203: PUSH
19204: LD_INT 27
19206: PUSH
19207: LD_INT 28
19209: PUSH
19210: LD_INT 29
19212: PUSH
19213: LD_INT 30
19215: PUSH
19216: LD_INT 31
19218: PUSH
19219: LD_INT 32
19221: PUSH
19222: LD_INT 33
19224: PUSH
19225: LD_INT 34
19227: PUSH
19228: LD_INT 36
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 101
19270: PUSH
19271: LD_INT 102
19273: PUSH
19274: LD_INT 103
19276: PUSH
19277: LD_INT 104
19279: PUSH
19280: LD_INT 105
19282: PUSH
19283: LD_INT 106
19285: PUSH
19286: LD_INT 107
19288: PUSH
19289: LD_INT 108
19291: PUSH
19292: LD_INT 109
19294: PUSH
19295: LD_INT 110
19297: PUSH
19298: LD_INT 111
19300: PUSH
19301: LD_INT 112
19303: PUSH
19304: LD_INT 113
19306: PUSH
19307: LD_INT 114
19309: PUSH
19310: LD_INT 116
19312: PUSH
19313: LD_INT 117
19315: PUSH
19316: LD_INT 118
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 19741
19344: LD_INT 18
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19500
19352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 4
19363: PUSH
19364: LD_INT 5
19366: PUSH
19367: LD_INT 7
19369: PUSH
19370: LD_INT 11
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 15
19378: PUSH
19379: LD_INT 16
19381: PUSH
19382: LD_INT 20
19384: PUSH
19385: LD_INT 21
19387: PUSH
19388: LD_INT 22
19390: PUSH
19391: LD_INT 23
19393: PUSH
19394: LD_INT 25
19396: PUSH
19397: LD_INT 26
19399: PUSH
19400: LD_INT 30
19402: PUSH
19403: LD_INT 31
19405: PUSH
19406: LD_INT 32
19408: PUSH
19409: LD_INT 33
19411: PUSH
19412: LD_INT 34
19414: PUSH
19415: LD_INT 35
19417: PUSH
19418: LD_INT 36
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 101
19446: PUSH
19447: LD_INT 102
19449: PUSH
19450: LD_INT 103
19452: PUSH
19453: LD_INT 106
19455: PUSH
19456: LD_INT 108
19458: PUSH
19459: LD_INT 112
19461: PUSH
19462: LD_INT 113
19464: PUSH
19465: LD_INT 114
19467: PUSH
19468: LD_INT 115
19470: PUSH
19471: LD_INT 116
19473: PUSH
19474: LD_INT 117
19476: PUSH
19477: LD_INT 118
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: ST_TO_ADDR
19498: GO 19741
19500: LD_INT 19
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19740
19508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: LD_INT 4
19525: PUSH
19526: LD_INT 5
19528: PUSH
19529: LD_INT 6
19531: PUSH
19532: LD_INT 7
19534: PUSH
19535: LD_INT 8
19537: PUSH
19538: LD_INT 9
19540: PUSH
19541: LD_INT 10
19543: PUSH
19544: LD_INT 11
19546: PUSH
19547: LD_INT 12
19549: PUSH
19550: LD_INT 13
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: LD_INT 15
19558: PUSH
19559: LD_INT 16
19561: PUSH
19562: LD_INT 17
19564: PUSH
19565: LD_INT 18
19567: PUSH
19568: LD_INT 19
19570: PUSH
19571: LD_INT 20
19573: PUSH
19574: LD_INT 21
19576: PUSH
19577: LD_INT 22
19579: PUSH
19580: LD_INT 23
19582: PUSH
19583: LD_INT 24
19585: PUSH
19586: LD_INT 25
19588: PUSH
19589: LD_INT 26
19591: PUSH
19592: LD_INT 27
19594: PUSH
19595: LD_INT 28
19597: PUSH
19598: LD_INT 29
19600: PUSH
19601: LD_INT 30
19603: PUSH
19604: LD_INT 31
19606: PUSH
19607: LD_INT 32
19609: PUSH
19610: LD_INT 33
19612: PUSH
19613: LD_INT 34
19615: PUSH
19616: LD_INT 35
19618: PUSH
19619: LD_INT 36
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 101
19662: PUSH
19663: LD_INT 102
19665: PUSH
19666: LD_INT 103
19668: PUSH
19669: LD_INT 104
19671: PUSH
19672: LD_INT 105
19674: PUSH
19675: LD_INT 106
19677: PUSH
19678: LD_INT 107
19680: PUSH
19681: LD_INT 108
19683: PUSH
19684: LD_INT 109
19686: PUSH
19687: LD_INT 110
19689: PUSH
19690: LD_INT 111
19692: PUSH
19693: LD_INT 112
19695: PUSH
19696: LD_INT 113
19698: PUSH
19699: LD_INT 114
19701: PUSH
19702: LD_INT 115
19704: PUSH
19705: LD_INT 116
19707: PUSH
19708: LD_INT 117
19710: PUSH
19711: LD_INT 118
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: ST_TO_ADDR
19738: GO 19741
19740: POP
// end else
19741: GO 19972
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 3
19756: PUSH
19757: LD_INT 4
19759: PUSH
19760: LD_INT 5
19762: PUSH
19763: LD_INT 6
19765: PUSH
19766: LD_INT 7
19768: PUSH
19769: LD_INT 8
19771: PUSH
19772: LD_INT 9
19774: PUSH
19775: LD_INT 10
19777: PUSH
19778: LD_INT 11
19780: PUSH
19781: LD_INT 12
19783: PUSH
19784: LD_INT 13
19786: PUSH
19787: LD_INT 14
19789: PUSH
19790: LD_INT 15
19792: PUSH
19793: LD_INT 16
19795: PUSH
19796: LD_INT 17
19798: PUSH
19799: LD_INT 18
19801: PUSH
19802: LD_INT 19
19804: PUSH
19805: LD_INT 20
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_INT 23
19816: PUSH
19817: LD_INT 24
19819: PUSH
19820: LD_INT 25
19822: PUSH
19823: LD_INT 26
19825: PUSH
19826: LD_INT 27
19828: PUSH
19829: LD_INT 28
19831: PUSH
19832: LD_INT 29
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 31
19840: PUSH
19841: LD_INT 32
19843: PUSH
19844: LD_INT 33
19846: PUSH
19847: LD_INT 34
19849: PUSH
19850: LD_INT 35
19852: PUSH
19853: LD_INT 36
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 101
19896: PUSH
19897: LD_INT 102
19899: PUSH
19900: LD_INT 103
19902: PUSH
19903: LD_INT 104
19905: PUSH
19906: LD_INT 105
19908: PUSH
19909: LD_INT 106
19911: PUSH
19912: LD_INT 107
19914: PUSH
19915: LD_INT 108
19917: PUSH
19918: LD_INT 109
19920: PUSH
19921: LD_INT 110
19923: PUSH
19924: LD_INT 111
19926: PUSH
19927: LD_INT 112
19929: PUSH
19930: LD_INT 113
19932: PUSH
19933: LD_INT 114
19935: PUSH
19936: LD_INT 115
19938: PUSH
19939: LD_INT 116
19941: PUSH
19942: LD_INT 117
19944: PUSH
19945: LD_INT 118
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: ST_TO_ADDR
// if result then
19972: LD_VAR 0 2
19976: IFFALSE 20762
// begin normal :=  ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: LD_STRING 
19985: ST_TO_ADDR
// hardcore :=  ;
19986: LD_ADDR_VAR 0 6
19990: PUSH
19991: LD_STRING 
19993: ST_TO_ADDR
// active :=  ;
19994: LD_ADDR_VAR 0 7
19998: PUSH
19999: LD_STRING 
20001: ST_TO_ADDR
// for i = 1 to normalCounter do
20002: LD_ADDR_VAR 0 8
20006: PUSH
20007: DOUBLE
20008: LD_INT 1
20010: DEC
20011: ST_TO_ADDR
20012: LD_EXP 61
20016: PUSH
20017: FOR_TO
20018: IFFALSE 20119
// begin tmp := 0 ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_STRING 0
20027: ST_TO_ADDR
// if result [ 1 ] then
20028: LD_VAR 0 2
20032: PUSH
20033: LD_INT 1
20035: ARRAY
20036: IFFALSE 20101
// if result [ 1 ] [ 1 ] = i then
20038: LD_VAR 0 2
20042: PUSH
20043: LD_INT 1
20045: ARRAY
20046: PUSH
20047: LD_INT 1
20049: ARRAY
20050: PUSH
20051: LD_VAR 0 8
20055: EQUAL
20056: IFFALSE 20101
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: LD_VAR 0 2
20075: PUSH
20076: LD_INT 1
20078: ARRAY
20079: PPUSH
20080: LD_INT 1
20082: PPUSH
20083: CALL_OW 3
20087: PPUSH
20088: CALL_OW 1
20092: ST_TO_ADDR
// tmp := 1 ;
20093: LD_ADDR_VAR 0 3
20097: PUSH
20098: LD_STRING 1
20100: ST_TO_ADDR
// end ; normal := normal & tmp ;
20101: LD_ADDR_VAR 0 5
20105: PUSH
20106: LD_VAR 0 5
20110: PUSH
20111: LD_VAR 0 3
20115: STR
20116: ST_TO_ADDR
// end ;
20117: GO 20017
20119: POP
20120: POP
// for i = 1 to hardcoreCounter do
20121: LD_ADDR_VAR 0 8
20125: PUSH
20126: DOUBLE
20127: LD_INT 1
20129: DEC
20130: ST_TO_ADDR
20131: LD_EXP 62
20135: PUSH
20136: FOR_TO
20137: IFFALSE 20242
// begin tmp := 0 ;
20139: LD_ADDR_VAR 0 3
20143: PUSH
20144: LD_STRING 0
20146: ST_TO_ADDR
// if result [ 2 ] then
20147: LD_VAR 0 2
20151: PUSH
20152: LD_INT 2
20154: ARRAY
20155: IFFALSE 20224
// if result [ 2 ] [ 1 ] = 100 + i then
20157: LD_VAR 0 2
20161: PUSH
20162: LD_INT 2
20164: ARRAY
20165: PUSH
20166: LD_INT 1
20168: ARRAY
20169: PUSH
20170: LD_INT 100
20172: PUSH
20173: LD_VAR 0 8
20177: PLUS
20178: EQUAL
20179: IFFALSE 20224
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_VAR 0 2
20190: PPUSH
20191: LD_INT 2
20193: PPUSH
20194: LD_VAR 0 2
20198: PUSH
20199: LD_INT 2
20201: ARRAY
20202: PPUSH
20203: LD_INT 1
20205: PPUSH
20206: CALL_OW 3
20210: PPUSH
20211: CALL_OW 1
20215: ST_TO_ADDR
// tmp := 1 ;
20216: LD_ADDR_VAR 0 3
20220: PUSH
20221: LD_STRING 1
20223: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20224: LD_ADDR_VAR 0 6
20228: PUSH
20229: LD_VAR 0 6
20233: PUSH
20234: LD_VAR 0 3
20238: STR
20239: ST_TO_ADDR
// end ;
20240: GO 20136
20242: POP
20243: POP
// if isGameLoad then
20244: LD_VAR 0 1
20248: IFFALSE 20723
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20250: LD_ADDR_VAR 0 4
20254: PUSH
20255: LD_EXP 65
20259: PUSH
20260: LD_EXP 64
20264: PUSH
20265: LD_EXP 66
20269: PUSH
20270: LD_EXP 63
20274: PUSH
20275: LD_EXP 67
20279: PUSH
20280: LD_EXP 68
20284: PUSH
20285: LD_EXP 69
20289: PUSH
20290: LD_EXP 70
20294: PUSH
20295: LD_EXP 71
20299: PUSH
20300: LD_EXP 72
20304: PUSH
20305: LD_EXP 73
20309: PUSH
20310: LD_EXP 74
20314: PUSH
20315: LD_EXP 75
20319: PUSH
20320: LD_EXP 76
20324: PUSH
20325: LD_EXP 84
20329: PUSH
20330: LD_EXP 85
20334: PUSH
20335: LD_EXP 86
20339: PUSH
20340: LD_EXP 87
20344: PUSH
20345: LD_EXP 89
20349: PUSH
20350: LD_EXP 90
20354: PUSH
20355: LD_EXP 91
20359: PUSH
20360: LD_EXP 94
20364: PUSH
20365: LD_EXP 96
20369: PUSH
20370: LD_EXP 97
20374: PUSH
20375: LD_EXP 98
20379: PUSH
20380: LD_EXP 100
20384: PUSH
20385: LD_EXP 101
20389: PUSH
20390: LD_EXP 104
20394: PUSH
20395: LD_EXP 105
20399: PUSH
20400: LD_EXP 106
20404: PUSH
20405: LD_EXP 107
20409: PUSH
20410: LD_EXP 108
20414: PUSH
20415: LD_EXP 109
20419: PUSH
20420: LD_EXP 110
20424: PUSH
20425: LD_EXP 111
20429: PUSH
20430: LD_EXP 112
20434: PUSH
20435: LD_EXP 77
20439: PUSH
20440: LD_EXP 78
20444: PUSH
20445: LD_EXP 81
20449: PUSH
20450: LD_EXP 82
20454: PUSH
20455: LD_EXP 83
20459: PUSH
20460: LD_EXP 79
20464: PUSH
20465: LD_EXP 80
20469: PUSH
20470: LD_EXP 88
20474: PUSH
20475: LD_EXP 92
20479: PUSH
20480: LD_EXP 93
20484: PUSH
20485: LD_EXP 95
20489: PUSH
20490: LD_EXP 99
20494: PUSH
20495: LD_EXP 102
20499: PUSH
20500: LD_EXP 103
20504: PUSH
20505: LD_EXP 113
20509: PUSH
20510: LD_EXP 114
20514: PUSH
20515: LD_EXP 115
20519: PUSH
20520: LD_EXP 116
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: ST_TO_ADDR
// tmp :=  ;
20581: LD_ADDR_VAR 0 3
20585: PUSH
20586: LD_STRING 
20588: ST_TO_ADDR
// for i = 1 to normalCounter do
20589: LD_ADDR_VAR 0 8
20593: PUSH
20594: DOUBLE
20595: LD_INT 1
20597: DEC
20598: ST_TO_ADDR
20599: LD_EXP 61
20603: PUSH
20604: FOR_TO
20605: IFFALSE 20641
// begin if flags [ i ] then
20607: LD_VAR 0 4
20611: PUSH
20612: LD_VAR 0 8
20616: ARRAY
20617: IFFALSE 20639
// tmp := tmp & i & ; ;
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_VAR 0 3
20628: PUSH
20629: LD_VAR 0 8
20633: STR
20634: PUSH
20635: LD_STRING ;
20637: STR
20638: ST_TO_ADDR
// end ;
20639: GO 20604
20641: POP
20642: POP
// for i = 1 to hardcoreCounter do
20643: LD_ADDR_VAR 0 8
20647: PUSH
20648: DOUBLE
20649: LD_INT 1
20651: DEC
20652: ST_TO_ADDR
20653: LD_EXP 62
20657: PUSH
20658: FOR_TO
20659: IFFALSE 20705
// begin if flags [ normalCounter + i ] then
20661: LD_VAR 0 4
20665: PUSH
20666: LD_EXP 61
20670: PUSH
20671: LD_VAR 0 8
20675: PLUS
20676: ARRAY
20677: IFFALSE 20703
// tmp := tmp & ( 100 + i ) & ; ;
20679: LD_ADDR_VAR 0 3
20683: PUSH
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 100
20691: PUSH
20692: LD_VAR 0 8
20696: PLUS
20697: STR
20698: PUSH
20699: LD_STRING ;
20701: STR
20702: ST_TO_ADDR
// end ;
20703: GO 20658
20705: POP
20706: POP
// if tmp then
20707: LD_VAR 0 3
20711: IFFALSE 20723
// active := tmp ;
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_VAR 0 3
20722: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20723: LD_STRING getStreamItemsFromMission("
20725: PUSH
20726: LD_VAR 0 5
20730: STR
20731: PUSH
20732: LD_STRING ","
20734: STR
20735: PUSH
20736: LD_VAR 0 6
20740: STR
20741: PUSH
20742: LD_STRING ","
20744: STR
20745: PUSH
20746: LD_VAR 0 7
20750: STR
20751: PUSH
20752: LD_STRING ")
20754: STR
20755: PPUSH
20756: CALL_OW 559
// end else
20760: GO 20769
// ToLua ( getStreamItemsFromMission("","","") ) ;
20762: LD_STRING getStreamItemsFromMission("","","")
20764: PPUSH
20765: CALL_OW 559
// end ;
20769: LD_VAR 0 2
20773: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20774: LD_EXP 60
20778: PUSH
20779: LD_EXP 65
20783: AND
20784: IFFALSE 20908
20786: GO 20788
20788: DISABLE
20789: LD_INT 0
20791: PPUSH
20792: PPUSH
// begin enable ;
20793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20794: LD_ADDR_VAR 0 2
20798: PUSH
20799: LD_INT 22
20801: PUSH
20802: LD_OWVAR 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 34
20816: PUSH
20817: LD_INT 7
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 34
20826: PUSH
20827: LD_INT 45
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 34
20836: PUSH
20837: LD_INT 28
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 34
20846: PUSH
20847: LD_INT 47
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: ST_TO_ADDR
// if not tmp then
20870: LD_VAR 0 2
20874: NOT
20875: IFFALSE 20879
// exit ;
20877: GO 20908
// for i in tmp do
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_VAR 0 2
20888: PUSH
20889: FOR_IN
20890: IFFALSE 20906
// begin SetLives ( i , 0 ) ;
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: CALL_OW 234
// end ;
20904: GO 20889
20906: POP
20907: POP
// end ;
20908: PPOPN 2
20910: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20911: LD_EXP 60
20915: PUSH
20916: LD_EXP 66
20920: AND
20921: IFFALSE 21005
20923: GO 20925
20925: DISABLE
20926: LD_INT 0
20928: PPUSH
20929: PPUSH
// begin enable ;
20930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_OWVAR 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 32
20950: PUSH
20951: LD_INT 3
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: CALL_OW 69
20966: ST_TO_ADDR
// if not tmp then
20967: LD_VAR 0 2
20971: NOT
20972: IFFALSE 20976
// exit ;
20974: GO 21005
// for i in tmp do
20976: LD_ADDR_VAR 0 1
20980: PUSH
20981: LD_VAR 0 2
20985: PUSH
20986: FOR_IN
20987: IFFALSE 21003
// begin SetLives ( i , 0 ) ;
20989: LD_VAR 0 1
20993: PPUSH
20994: LD_INT 0
20996: PPUSH
20997: CALL_OW 234
// end ;
21001: GO 20986
21003: POP
21004: POP
// end ;
21005: PPOPN 2
21007: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21008: LD_EXP 60
21012: PUSH
21013: LD_EXP 63
21017: AND
21018: IFFALSE 21111
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
// begin enable ;
21026: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_OWVAR 2
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 25
21049: PUSH
21050: LD_INT 5
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 25
21059: PUSH
21060: LD_INT 9
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 25
21069: PUSH
21070: LD_INT 8
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PPUSH
21087: CALL_OW 69
21091: PUSH
21092: FOR_IN
21093: IFFALSE 21109
// begin SetClass ( i , 1 ) ;
21095: LD_VAR 0 1
21099: PPUSH
21100: LD_INT 1
21102: PPUSH
21103: CALL_OW 336
// end ;
21107: GO 21092
21109: POP
21110: POP
// end ;
21111: PPOPN 1
21113: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21114: LD_EXP 60
21118: PUSH
21119: LD_EXP 64
21123: AND
21124: PUSH
21125: LD_OWVAR 65
21129: PUSH
21130: LD_INT 7
21132: LESS
21133: AND
21134: IFFALSE 21148
21136: GO 21138
21138: DISABLE
// begin enable ;
21139: ENABLE
// game_speed := 7 ;
21140: LD_ADDR_OWVAR 65
21144: PUSH
21145: LD_INT 7
21147: ST_TO_ADDR
// end ;
21148: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21149: LD_EXP 60
21153: PUSH
21154: LD_EXP 67
21158: AND
21159: IFFALSE 21361
21161: GO 21163
21163: DISABLE
21164: LD_INT 0
21166: PPUSH
21167: PPUSH
21168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21169: LD_ADDR_VAR 0 3
21173: PUSH
21174: LD_INT 81
21176: PUSH
21177: LD_OWVAR 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: ST_TO_ADDR
// if not tmp then
21205: LD_VAR 0 3
21209: NOT
21210: IFFALSE 21214
// exit ;
21212: GO 21361
// if tmp > 5 then
21214: LD_VAR 0 3
21218: PUSH
21219: LD_INT 5
21221: GREATER
21222: IFFALSE 21234
// k := 5 else
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: LD_INT 5
21231: ST_TO_ADDR
21232: GO 21244
// k := tmp ;
21234: LD_ADDR_VAR 0 2
21238: PUSH
21239: LD_VAR 0 3
21243: ST_TO_ADDR
// for i := 1 to k do
21244: LD_ADDR_VAR 0 1
21248: PUSH
21249: DOUBLE
21250: LD_INT 1
21252: DEC
21253: ST_TO_ADDR
21254: LD_VAR 0 2
21258: PUSH
21259: FOR_TO
21260: IFFALSE 21359
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_VAR 0 1
21271: ARRAY
21272: PPUSH
21273: LD_VAR 0 1
21277: PUSH
21278: LD_INT 4
21280: MOD
21281: PUSH
21282: LD_INT 1
21284: PLUS
21285: PPUSH
21286: CALL_OW 259
21290: PUSH
21291: LD_INT 10
21293: LESS
21294: IFFALSE 21357
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21296: LD_VAR 0 3
21300: PUSH
21301: LD_VAR 0 1
21305: ARRAY
21306: PPUSH
21307: LD_VAR 0 1
21311: PUSH
21312: LD_INT 4
21314: MOD
21315: PUSH
21316: LD_INT 1
21318: PLUS
21319: PPUSH
21320: LD_VAR 0 3
21324: PUSH
21325: LD_VAR 0 1
21329: ARRAY
21330: PPUSH
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 4
21338: MOD
21339: PUSH
21340: LD_INT 1
21342: PLUS
21343: PPUSH
21344: CALL_OW 259
21348: PUSH
21349: LD_INT 1
21351: PLUS
21352: PPUSH
21353: CALL_OW 237
21357: GO 21259
21359: POP
21360: POP
// end ;
21361: PPOPN 3
21363: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21364: LD_EXP 60
21368: PUSH
21369: LD_EXP 68
21373: AND
21374: IFFALSE 21394
21376: GO 21378
21378: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21379: LD_INT 4
21381: PPUSH
21382: LD_OWVAR 2
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 324
21394: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21395: LD_EXP 60
21399: PUSH
21400: LD_EXP 97
21404: AND
21405: IFFALSE 21425
21407: GO 21409
21409: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21410: LD_INT 19
21412: PPUSH
21413: LD_OWVAR 2
21417: PPUSH
21418: LD_INT 0
21420: PPUSH
21421: CALL_OW 324
21425: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21426: LD_EXP 60
21430: PUSH
21431: LD_EXP 69
21435: AND
21436: IFFALSE 21538
21438: GO 21440
21440: DISABLE
21441: LD_INT 0
21443: PPUSH
21444: PPUSH
// begin enable ;
21445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21446: LD_ADDR_VAR 0 2
21450: PUSH
21451: LD_INT 22
21453: PUSH
21454: LD_OWVAR 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 34
21468: PUSH
21469: LD_INT 11
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 34
21478: PUSH
21479: LD_INT 30
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: ST_TO_ADDR
// if not tmp then
21500: LD_VAR 0 2
21504: NOT
21505: IFFALSE 21509
// exit ;
21507: GO 21538
// for i in tmp do
21509: LD_ADDR_VAR 0 1
21513: PUSH
21514: LD_VAR 0 2
21518: PUSH
21519: FOR_IN
21520: IFFALSE 21536
// begin SetLives ( i , 0 ) ;
21522: LD_VAR 0 1
21526: PPUSH
21527: LD_INT 0
21529: PPUSH
21530: CALL_OW 234
// end ;
21534: GO 21519
21536: POP
21537: POP
// end ;
21538: PPOPN 2
21540: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21541: LD_EXP 60
21545: PUSH
21546: LD_EXP 70
21550: AND
21551: IFFALSE 21571
21553: GO 21555
21555: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21556: LD_INT 32
21558: PPUSH
21559: LD_OWVAR 2
21563: PPUSH
21564: LD_INT 0
21566: PPUSH
21567: CALL_OW 324
21571: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21572: LD_EXP 60
21576: PUSH
21577: LD_EXP 71
21581: AND
21582: IFFALSE 21763
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
21591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_OWVAR 2
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 33
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PPUSH
21623: CALL_OW 69
21627: ST_TO_ADDR
// if not tmp then
21628: LD_VAR 0 2
21632: NOT
21633: IFFALSE 21637
// exit ;
21635: GO 21763
// side := 0 ;
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// for i := 1 to 8 do
21645: LD_ADDR_VAR 0 1
21649: PUSH
21650: DOUBLE
21651: LD_INT 1
21653: DEC
21654: ST_TO_ADDR
21655: LD_INT 8
21657: PUSH
21658: FOR_TO
21659: IFFALSE 21707
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21661: LD_OWVAR 2
21665: PUSH
21666: LD_VAR 0 1
21670: NONEQUAL
21671: PUSH
21672: LD_OWVAR 2
21676: PPUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 81
21686: PUSH
21687: LD_INT 2
21689: EQUAL
21690: AND
21691: IFFALSE 21705
// begin side := i ;
21693: LD_ADDR_VAR 0 3
21697: PUSH
21698: LD_VAR 0 1
21702: ST_TO_ADDR
// break ;
21703: GO 21707
// end ;
21705: GO 21658
21707: POP
21708: POP
// if not side then
21709: LD_VAR 0 3
21713: NOT
21714: IFFALSE 21718
// exit ;
21716: GO 21763
// for i := 1 to tmp do
21718: LD_ADDR_VAR 0 1
21722: PUSH
21723: DOUBLE
21724: LD_INT 1
21726: DEC
21727: ST_TO_ADDR
21728: LD_VAR 0 2
21732: PUSH
21733: FOR_TO
21734: IFFALSE 21761
// if Prob ( 60 ) then
21736: LD_INT 60
21738: PPUSH
21739: CALL_OW 13
21743: IFFALSE 21759
// SetSide ( i , side ) ;
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_VAR 0 3
21754: PPUSH
21755: CALL_OW 235
21759: GO 21733
21761: POP
21762: POP
// end ;
21763: PPOPN 3
21765: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21766: LD_EXP 60
21770: PUSH
21771: LD_EXP 73
21775: AND
21776: IFFALSE 21895
21778: GO 21780
21780: DISABLE
21781: LD_INT 0
21783: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_INT 22
21791: PUSH
21792: LD_OWVAR 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 21
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: LD_INT 23
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: PPUSH
21833: CALL_OW 69
21837: PUSH
21838: FOR_IN
21839: IFFALSE 21893
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 257
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: LD_INT 3
21859: PUSH
21860: LD_INT 4
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: IN
21869: IFFALSE 21891
// SetClass ( un , rand ( 1 , 4 ) ) ;
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: LD_INT 4
21881: PPUSH
21882: CALL_OW 12
21886: PPUSH
21887: CALL_OW 336
21891: GO 21838
21893: POP
21894: POP
// end ;
21895: PPOPN 1
21897: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21898: LD_EXP 60
21902: PUSH
21903: LD_EXP 72
21907: AND
21908: IFFALSE 21987
21910: GO 21912
21912: DISABLE
21913: LD_INT 0
21915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21916: LD_ADDR_VAR 0 1
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_OWVAR 2
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 21
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PPUSH
21947: CALL_OW 69
21951: ST_TO_ADDR
// if not tmp then
21952: LD_VAR 0 1
21956: NOT
21957: IFFALSE 21961
// exit ;
21959: GO 21987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21961: LD_VAR 0 1
21965: PUSH
21966: LD_INT 1
21968: PPUSH
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 12
21978: ARRAY
21979: PPUSH
21980: LD_INT 100
21982: PPUSH
21983: CALL_OW 234
// end ;
21987: PPOPN 1
21989: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21990: LD_EXP 60
21994: PUSH
21995: LD_EXP 74
21999: AND
22000: IFFALSE 22098
22002: GO 22004
22004: DISABLE
22005: LD_INT 0
22007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22008: LD_ADDR_VAR 0 1
22012: PUSH
22013: LD_INT 22
22015: PUSH
22016: LD_OWVAR 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 21
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PPUSH
22039: CALL_OW 69
22043: ST_TO_ADDR
// if not tmp then
22044: LD_VAR 0 1
22048: NOT
22049: IFFALSE 22053
// exit ;
22051: GO 22098
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22053: LD_VAR 0 1
22057: PUSH
22058: LD_INT 1
22060: PPUSH
22061: LD_VAR 0 1
22065: PPUSH
22066: CALL_OW 12
22070: ARRAY
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: LD_INT 4
22077: PPUSH
22078: CALL_OW 12
22082: PPUSH
22083: LD_INT 3000
22085: PPUSH
22086: LD_INT 9000
22088: PPUSH
22089: CALL_OW 12
22093: PPUSH
22094: CALL_OW 492
// end ;
22098: PPOPN 1
22100: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22101: LD_EXP 60
22105: PUSH
22106: LD_EXP 75
22110: AND
22111: IFFALSE 22131
22113: GO 22115
22115: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22116: LD_INT 1
22118: PPUSH
22119: LD_OWVAR 2
22123: PPUSH
22124: LD_INT 0
22126: PPUSH
22127: CALL_OW 324
22131: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22132: LD_EXP 60
22136: PUSH
22137: LD_EXP 76
22141: AND
22142: IFFALSE 22225
22144: GO 22146
22146: DISABLE
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22151: LD_ADDR_VAR 0 2
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_OWVAR 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 21
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 69
22186: ST_TO_ADDR
// if not tmp then
22187: LD_VAR 0 2
22191: NOT
22192: IFFALSE 22196
// exit ;
22194: GO 22225
// for i in tmp do
22196: LD_ADDR_VAR 0 1
22200: PUSH
22201: LD_VAR 0 2
22205: PUSH
22206: FOR_IN
22207: IFFALSE 22223
// SetBLevel ( i , 10 ) ;
22209: LD_VAR 0 1
22213: PPUSH
22214: LD_INT 10
22216: PPUSH
22217: CALL_OW 241
22221: GO 22206
22223: POP
22224: POP
// end ;
22225: PPOPN 2
22227: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22228: LD_EXP 60
22232: PUSH
22233: LD_EXP 77
22237: AND
22238: IFFALSE 22349
22240: GO 22242
22242: DISABLE
22243: LD_INT 0
22245: PPUSH
22246: PPUSH
22247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22248: LD_ADDR_VAR 0 3
22252: PUSH
22253: LD_INT 22
22255: PUSH
22256: LD_OWVAR 2
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 25
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PPUSH
22279: CALL_OW 69
22283: ST_TO_ADDR
// if not tmp then
22284: LD_VAR 0 3
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22349
// un := tmp [ rand ( 1 , tmp ) ] ;
22293: LD_ADDR_VAR 0 2
22297: PUSH
22298: LD_VAR 0 3
22302: PUSH
22303: LD_INT 1
22305: PPUSH
22306: LD_VAR 0 3
22310: PPUSH
22311: CALL_OW 12
22315: ARRAY
22316: ST_TO_ADDR
// if Crawls ( un ) then
22317: LD_VAR 0 2
22321: PPUSH
22322: CALL_OW 318
22326: IFFALSE 22337
// ComWalk ( un ) ;
22328: LD_VAR 0 2
22332: PPUSH
22333: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22337: LD_VAR 0 2
22341: PPUSH
22342: LD_INT 5
22344: PPUSH
22345: CALL_OW 336
// end ;
22349: PPOPN 3
22351: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22352: LD_EXP 60
22356: PUSH
22357: LD_EXP 78
22361: AND
22362: PUSH
22363: LD_OWVAR 67
22367: PUSH
22368: LD_INT 4
22370: LESS
22371: AND
22372: IFFALSE 22391
22374: GO 22376
22376: DISABLE
// begin Difficulty := Difficulty + 1 ;
22377: LD_ADDR_OWVAR 67
22381: PUSH
22382: LD_OWVAR 67
22386: PUSH
22387: LD_INT 1
22389: PLUS
22390: ST_TO_ADDR
// end ;
22391: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22392: LD_EXP 60
22396: PUSH
22397: LD_EXP 79
22401: AND
22402: IFFALSE 22505
22404: GO 22406
22406: DISABLE
22407: LD_INT 0
22409: PPUSH
// begin for i := 1 to 5 do
22410: LD_ADDR_VAR 0 1
22414: PUSH
22415: DOUBLE
22416: LD_INT 1
22418: DEC
22419: ST_TO_ADDR
22420: LD_INT 5
22422: PUSH
22423: FOR_TO
22424: IFFALSE 22503
// begin uc_nation := nation_nature ;
22426: LD_ADDR_OWVAR 21
22430: PUSH
22431: LD_INT 0
22433: ST_TO_ADDR
// uc_side := 0 ;
22434: LD_ADDR_OWVAR 20
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22442: LD_ADDR_OWVAR 29
22446: PUSH
22447: LD_INT 12
22449: PUSH
22450: LD_INT 12
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: ST_TO_ADDR
// hc_agressivity := 20 ;
22457: LD_ADDR_OWVAR 35
22461: PUSH
22462: LD_INT 20
22464: ST_TO_ADDR
// hc_class := class_tiger ;
22465: LD_ADDR_OWVAR 28
22469: PUSH
22470: LD_INT 14
22472: ST_TO_ADDR
// hc_gallery :=  ;
22473: LD_ADDR_OWVAR 33
22477: PUSH
22478: LD_STRING 
22480: ST_TO_ADDR
// hc_name :=  ;
22481: LD_ADDR_OWVAR 26
22485: PUSH
22486: LD_STRING 
22488: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22489: CALL_OW 44
22493: PPUSH
22494: LD_INT 0
22496: PPUSH
22497: CALL_OW 51
// end ;
22501: GO 22423
22503: POP
22504: POP
// end ;
22505: PPOPN 1
22507: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22508: LD_EXP 60
22512: PUSH
22513: LD_EXP 80
22517: AND
22518: IFFALSE 22527
22520: GO 22522
22522: DISABLE
// StreamSibBomb ;
22523: CALL 22528 0 0
22527: END
// export function StreamSibBomb ; var i , x , y ; begin
22528: LD_INT 0
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// result := false ;
22534: LD_ADDR_VAR 0 1
22538: PUSH
22539: LD_INT 0
22541: ST_TO_ADDR
// for i := 1 to 16 do
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: DOUBLE
22548: LD_INT 1
22550: DEC
22551: ST_TO_ADDR
22552: LD_INT 16
22554: PUSH
22555: FOR_TO
22556: IFFALSE 22755
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22558: LD_ADDR_VAR 0 3
22562: PUSH
22563: LD_INT 10
22565: PUSH
22566: LD_INT 20
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: LD_INT 40
22574: PUSH
22575: LD_INT 50
22577: PUSH
22578: LD_INT 60
22580: PUSH
22581: LD_INT 70
22583: PUSH
22584: LD_INT 80
22586: PUSH
22587: LD_INT 90
22589: PUSH
22590: LD_INT 100
22592: PUSH
22593: LD_INT 110
22595: PUSH
22596: LD_INT 120
22598: PUSH
22599: LD_INT 130
22601: PUSH
22602: LD_INT 140
22604: PUSH
22605: LD_INT 150
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: PPUSH
22628: LD_INT 15
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: LD_INT 10
22644: PUSH
22645: LD_INT 20
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: LD_INT 40
22653: PUSH
22654: LD_INT 50
22656: PUSH
22657: LD_INT 60
22659: PUSH
22660: LD_INT 70
22662: PUSH
22663: LD_INT 80
22665: PUSH
22666: LD_INT 90
22668: PUSH
22669: LD_INT 100
22671: PUSH
22672: LD_INT 110
22674: PUSH
22675: LD_INT 120
22677: PUSH
22678: LD_INT 130
22680: PUSH
22681: LD_INT 140
22683: PUSH
22684: LD_INT 150
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PPUSH
22707: LD_INT 15
22709: PPUSH
22710: CALL_OW 12
22714: ARRAY
22715: ST_TO_ADDR
// if ValidHex ( x , y ) then
22716: LD_VAR 0 3
22720: PPUSH
22721: LD_VAR 0 4
22725: PPUSH
22726: CALL_OW 488
22730: IFFALSE 22753
// begin result := [ x , y ] ;
22732: LD_ADDR_VAR 0 1
22736: PUSH
22737: LD_VAR 0 3
22741: PUSH
22742: LD_VAR 0 4
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: ST_TO_ADDR
// break ;
22751: GO 22755
// end ; end ;
22753: GO 22555
22755: POP
22756: POP
// if result then
22757: LD_VAR 0 1
22761: IFFALSE 22821
// begin ToLua ( playSibBomb() ) ;
22763: LD_STRING playSibBomb()
22765: PPUSH
22766: CALL_OW 559
// wait ( 0 0$14 ) ;
22770: LD_INT 490
22772: PPUSH
22773: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22777: LD_VAR 0 1
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: PPUSH
22786: LD_VAR 0 1
22790: PUSH
22791: LD_INT 2
22793: ARRAY
22794: PPUSH
22795: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22799: LD_VAR 0 1
22803: PUSH
22804: LD_INT 1
22806: ARRAY
22807: PPUSH
22808: LD_VAR 0 1
22812: PUSH
22813: LD_INT 2
22815: ARRAY
22816: PPUSH
22817: CALL_OW 429
// end ; end ;
22821: LD_VAR 0 1
22825: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22826: LD_EXP 60
22830: PUSH
22831: LD_EXP 82
22835: AND
22836: IFFALSE 22848
22838: GO 22840
22840: DISABLE
// YouLost (  ) ;
22841: LD_STRING 
22843: PPUSH
22844: CALL_OW 104
22848: END
// every 0 0$1 trigger StreamModeActive and sFog do
22849: LD_EXP 60
22853: PUSH
22854: LD_EXP 81
22858: AND
22859: IFFALSE 22873
22861: GO 22863
22863: DISABLE
// FogOff ( your_side ) ;
22864: LD_OWVAR 2
22868: PPUSH
22869: CALL_OW 344
22873: END
// every 0 0$1 trigger StreamModeActive and sSun do
22874: LD_EXP 60
22878: PUSH
22879: LD_EXP 83
22883: AND
22884: IFFALSE 22912
22886: GO 22888
22888: DISABLE
// begin solar_recharge_percent := 0 ;
22889: LD_ADDR_OWVAR 79
22893: PUSH
22894: LD_INT 0
22896: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22897: LD_INT 10500
22899: PPUSH
22900: CALL_OW 67
// solar_recharge_percent := 100 ;
22904: LD_ADDR_OWVAR 79
22908: PUSH
22909: LD_INT 100
22911: ST_TO_ADDR
// end ;
22912: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22913: LD_EXP 60
22917: PUSH
22918: LD_EXP 84
22922: AND
22923: IFFALSE 23162
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
22932: PPUSH
// begin tmp := [ ] ;
22933: LD_ADDR_VAR 0 3
22937: PUSH
22938: EMPTY
22939: ST_TO_ADDR
// for i := 1 to 6 do
22940: LD_ADDR_VAR 0 1
22944: PUSH
22945: DOUBLE
22946: LD_INT 1
22948: DEC
22949: ST_TO_ADDR
22950: LD_INT 6
22952: PUSH
22953: FOR_TO
22954: IFFALSE 23059
// begin uc_nation := nation_nature ;
22956: LD_ADDR_OWVAR 21
22960: PUSH
22961: LD_INT 0
22963: ST_TO_ADDR
// uc_side := 0 ;
22964: LD_ADDR_OWVAR 20
22968: PUSH
22969: LD_INT 0
22971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22972: LD_ADDR_OWVAR 29
22976: PUSH
22977: LD_INT 12
22979: PUSH
22980: LD_INT 12
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// hc_agressivity := 20 ;
22987: LD_ADDR_OWVAR 35
22991: PUSH
22992: LD_INT 20
22994: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22995: LD_ADDR_OWVAR 28
22999: PUSH
23000: LD_INT 17
23002: ST_TO_ADDR
// hc_gallery :=  ;
23003: LD_ADDR_OWVAR 33
23007: PUSH
23008: LD_STRING 
23010: ST_TO_ADDR
// hc_name :=  ;
23011: LD_ADDR_OWVAR 26
23015: PUSH
23016: LD_STRING 
23018: ST_TO_ADDR
// un := CreateHuman ;
23019: LD_ADDR_VAR 0 2
23023: PUSH
23024: CALL_OW 44
23028: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23029: LD_VAR 0 2
23033: PPUSH
23034: LD_INT 1
23036: PPUSH
23037: CALL_OW 51
// tmp := tmp ^ un ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: LD_VAR 0 3
23050: PUSH
23051: LD_VAR 0 2
23055: ADD
23056: ST_TO_ADDR
// end ;
23057: GO 22953
23059: POP
23060: POP
// repeat wait ( 0 0$1 ) ;
23061: LD_INT 35
23063: PPUSH
23064: CALL_OW 67
// for un in tmp do
23068: LD_ADDR_VAR 0 2
23072: PUSH
23073: LD_VAR 0 3
23077: PUSH
23078: FOR_IN
23079: IFFALSE 23153
// begin if IsDead ( un ) then
23081: LD_VAR 0 2
23085: PPUSH
23086: CALL_OW 301
23090: IFFALSE 23110
// begin tmp := tmp diff un ;
23092: LD_ADDR_VAR 0 3
23096: PUSH
23097: LD_VAR 0 3
23101: PUSH
23102: LD_VAR 0 2
23106: DIFF
23107: ST_TO_ADDR
// continue ;
23108: GO 23078
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23110: LD_VAR 0 2
23114: PPUSH
23115: LD_INT 3
23117: PUSH
23118: LD_INT 22
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PPUSH
23132: CALL_OW 69
23136: PPUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: CALL_OW 74
23146: PPUSH
23147: CALL_OW 115
// end ;
23151: GO 23078
23153: POP
23154: POP
// until not tmp ;
23155: LD_VAR 0 3
23159: NOT
23160: IFFALSE 23061
// end ;
23162: PPOPN 3
23164: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23165: LD_EXP 60
23169: PUSH
23170: LD_EXP 85
23174: AND
23175: IFFALSE 23229
23177: GO 23179
23179: DISABLE
// begin ToLua ( displayTroll(); ) ;
23180: LD_STRING displayTroll();
23182: PPUSH
23183: CALL_OW 559
// wait ( 3 3$00 ) ;
23187: LD_INT 6300
23189: PPUSH
23190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23194: LD_STRING hideTroll();
23196: PPUSH
23197: CALL_OW 559
// wait ( 1 1$00 ) ;
23201: LD_INT 2100
23203: PPUSH
23204: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23208: LD_STRING displayTroll();
23210: PPUSH
23211: CALL_OW 559
// wait ( 1 1$00 ) ;
23215: LD_INT 2100
23217: PPUSH
23218: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23222: LD_STRING hideTroll();
23224: PPUSH
23225: CALL_OW 559
// end ;
23229: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23230: LD_EXP 60
23234: PUSH
23235: LD_EXP 86
23239: AND
23240: IFFALSE 23303
23242: GO 23244
23244: DISABLE
23245: LD_INT 0
23247: PPUSH
// begin p := 0 ;
23248: LD_ADDR_VAR 0 1
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// repeat game_speed := 1 ;
23256: LD_ADDR_OWVAR 65
23260: PUSH
23261: LD_INT 1
23263: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23264: LD_INT 35
23266: PPUSH
23267: CALL_OW 67
// p := p + 1 ;
23271: LD_ADDR_VAR 0 1
23275: PUSH
23276: LD_VAR 0 1
23280: PUSH
23281: LD_INT 1
23283: PLUS
23284: ST_TO_ADDR
// until p >= 60 ;
23285: LD_VAR 0 1
23289: PUSH
23290: LD_INT 60
23292: GREATEREQUAL
23293: IFFALSE 23256
// game_speed := 4 ;
23295: LD_ADDR_OWVAR 65
23299: PUSH
23300: LD_INT 4
23302: ST_TO_ADDR
// end ;
23303: PPOPN 1
23305: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23306: LD_EXP 60
23310: PUSH
23311: LD_EXP 87
23315: AND
23316: IFFALSE 23462
23318: GO 23320
23320: DISABLE
23321: LD_INT 0
23323: PPUSH
23324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23325: LD_ADDR_VAR 0 1
23329: PUSH
23330: LD_INT 22
23332: PUSH
23333: LD_OWVAR 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 30
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: ST_TO_ADDR
// if not depot then
23379: LD_VAR 0 1
23383: NOT
23384: IFFALSE 23388
// exit ;
23386: GO 23462
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23388: LD_ADDR_VAR 0 2
23392: PUSH
23393: LD_VAR 0 1
23397: PUSH
23398: LD_INT 1
23400: PPUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 12
23410: ARRAY
23411: PPUSH
23412: CALL_OW 274
23416: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23417: LD_VAR 0 2
23421: PPUSH
23422: LD_INT 1
23424: PPUSH
23425: LD_INT 0
23427: PPUSH
23428: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23432: LD_VAR 0 2
23436: PPUSH
23437: LD_INT 2
23439: PPUSH
23440: LD_INT 0
23442: PPUSH
23443: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23447: LD_VAR 0 2
23451: PPUSH
23452: LD_INT 3
23454: PPUSH
23455: LD_INT 0
23457: PPUSH
23458: CALL_OW 277
// end ;
23462: PPOPN 2
23464: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23465: LD_EXP 60
23469: PUSH
23470: LD_EXP 88
23474: AND
23475: IFFALSE 23572
23477: GO 23479
23479: DISABLE
23480: LD_INT 0
23482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23483: LD_ADDR_VAR 0 1
23487: PUSH
23488: LD_INT 22
23490: PUSH
23491: LD_OWVAR 2
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 21
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: LD_INT 23
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 69
23536: ST_TO_ADDR
// if not tmp then
23537: LD_VAR 0 1
23541: NOT
23542: IFFALSE 23546
// exit ;
23544: GO 23572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23546: LD_VAR 0 1
23550: PUSH
23551: LD_INT 1
23553: PPUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: CALL_OW 12
23563: ARRAY
23564: PPUSH
23565: LD_INT 200
23567: PPUSH
23568: CALL_OW 234
// end ;
23572: PPOPN 1
23574: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23575: LD_EXP 60
23579: PUSH
23580: LD_EXP 89
23584: AND
23585: IFFALSE 23664
23587: GO 23589
23589: DISABLE
23590: LD_INT 0
23592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23593: LD_ADDR_VAR 0 1
23597: PUSH
23598: LD_INT 22
23600: PUSH
23601: LD_OWVAR 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 21
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: ST_TO_ADDR
// if not tmp then
23629: LD_VAR 0 1
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 23664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23638: LD_VAR 0 1
23642: PUSH
23643: LD_INT 1
23645: PPUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 12
23655: ARRAY
23656: PPUSH
23657: LD_INT 60
23659: PPUSH
23660: CALL_OW 234
// end ;
23664: PPOPN 1
23666: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23667: LD_EXP 60
23671: PUSH
23672: LD_EXP 90
23676: AND
23677: IFFALSE 23776
23679: GO 23681
23681: DISABLE
23682: LD_INT 0
23684: PPUSH
23685: PPUSH
// begin enable ;
23686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23687: LD_ADDR_VAR 0 1
23691: PUSH
23692: LD_INT 22
23694: PUSH
23695: LD_OWVAR 2
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 61
23706: PUSH
23707: EMPTY
23708: LIST
23709: PUSH
23710: LD_INT 33
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: PPUSH
23725: CALL_OW 69
23729: ST_TO_ADDR
// if not tmp then
23730: LD_VAR 0 1
23734: NOT
23735: IFFALSE 23739
// exit ;
23737: GO 23776
// for i in tmp do
23739: LD_ADDR_VAR 0 2
23743: PUSH
23744: LD_VAR 0 1
23748: PUSH
23749: FOR_IN
23750: IFFALSE 23774
// if IsControledBy ( i ) then
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 312
23761: IFFALSE 23772
// ComUnlink ( i ) ;
23763: LD_VAR 0 2
23767: PPUSH
23768: CALL_OW 136
23772: GO 23749
23774: POP
23775: POP
// end ;
23776: PPOPN 2
23778: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23779: LD_EXP 60
23783: PUSH
23784: LD_EXP 91
23788: AND
23789: IFFALSE 23929
23791: GO 23793
23793: DISABLE
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
// begin ToLua ( displayPowell(); ) ;
23798: LD_STRING displayPowell();
23800: PPUSH
23801: CALL_OW 559
// uc_side := 0 ;
23805: LD_ADDR_OWVAR 20
23809: PUSH
23810: LD_INT 0
23812: ST_TO_ADDR
// uc_nation := 2 ;
23813: LD_ADDR_OWVAR 21
23817: PUSH
23818: LD_INT 2
23820: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23821: LD_ADDR_OWVAR 37
23825: PUSH
23826: LD_INT 14
23828: ST_TO_ADDR
// vc_engine := engine_siberite ;
23829: LD_ADDR_OWVAR 39
23833: PUSH
23834: LD_INT 3
23836: ST_TO_ADDR
// vc_control := control_apeman ;
23837: LD_ADDR_OWVAR 38
23841: PUSH
23842: LD_INT 5
23844: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23845: LD_ADDR_OWVAR 40
23849: PUSH
23850: LD_INT 29
23852: ST_TO_ADDR
// un := CreateVehicle ;
23853: LD_ADDR_VAR 0 2
23857: PUSH
23858: CALL_OW 45
23862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23863: LD_VAR 0 2
23867: PPUSH
23868: LD_INT 1
23870: PPUSH
23871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23875: LD_INT 35
23877: PPUSH
23878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_INT 22
23889: PUSH
23890: LD_OWVAR 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 69
23903: PPUSH
23904: LD_VAR 0 2
23908: PPUSH
23909: CALL_OW 74
23913: PPUSH
23914: CALL_OW 115
// until IsDead ( un ) ;
23918: LD_VAR 0 2
23922: PPUSH
23923: CALL_OW 301
23927: IFFALSE 23875
// end ;
23929: PPOPN 2
23931: END
// every 0 0$1 trigger StreamModeActive and sStu do
23932: LD_EXP 60
23936: PUSH
23937: LD_EXP 99
23941: AND
23942: IFFALSE 23958
23944: GO 23946
23946: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23947: LD_STRING displayStucuk();
23949: PPUSH
23950: CALL_OW 559
// ResetFog ;
23954: CALL_OW 335
// end ;
23958: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23959: LD_EXP 60
23963: PUSH
23964: LD_EXP 92
23968: AND
23969: IFFALSE 24110
23971: GO 23973
23973: DISABLE
23974: LD_INT 0
23976: PPUSH
23977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23978: LD_ADDR_VAR 0 2
23982: PUSH
23983: LD_INT 22
23985: PUSH
23986: LD_OWVAR 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 21
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: ST_TO_ADDR
// if not tmp then
24014: LD_VAR 0 2
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24110
// un := tmp [ rand ( 1 , tmp ) ] ;
24023: LD_ADDR_VAR 0 1
24027: PUSH
24028: LD_VAR 0 2
24032: PUSH
24033: LD_INT 1
24035: PPUSH
24036: LD_VAR 0 2
24040: PPUSH
24041: CALL_OW 12
24045: ARRAY
24046: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24047: LD_VAR 0 1
24051: PPUSH
24052: LD_INT 0
24054: PPUSH
24055: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24059: LD_VAR 0 1
24063: PPUSH
24064: LD_OWVAR 3
24068: PUSH
24069: LD_VAR 0 1
24073: DIFF
24074: PPUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 74
24084: PPUSH
24085: CALL_OW 115
// wait ( 0 0$20 ) ;
24089: LD_INT 700
24091: PPUSH
24092: CALL_OW 67
// SetSide ( un , your_side ) ;
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_OWVAR 2
24105: PPUSH
24106: CALL_OW 235
// end ;
24110: PPOPN 2
24112: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24113: LD_EXP 60
24117: PUSH
24118: LD_EXP 93
24122: AND
24123: IFFALSE 24229
24125: GO 24127
24127: DISABLE
24128: LD_INT 0
24130: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24131: LD_ADDR_VAR 0 1
24135: PUSH
24136: LD_INT 22
24138: PUSH
24139: LD_OWVAR 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: LD_INT 30
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 30
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PPUSH
24180: CALL_OW 69
24184: ST_TO_ADDR
// if not depot then
24185: LD_VAR 0 1
24189: NOT
24190: IFFALSE 24194
// exit ;
24192: GO 24229
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24194: LD_VAR 0 1
24198: PUSH
24199: LD_INT 1
24201: ARRAY
24202: PPUSH
24203: CALL_OW 250
24207: PPUSH
24208: LD_VAR 0 1
24212: PUSH
24213: LD_INT 1
24215: ARRAY
24216: PPUSH
24217: CALL_OW 251
24221: PPUSH
24222: LD_INT 70
24224: PPUSH
24225: CALL_OW 495
// end ;
24229: PPOPN 1
24231: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24232: LD_EXP 60
24236: PUSH
24237: LD_EXP 94
24241: AND
24242: IFFALSE 24453
24244: GO 24246
24246: DISABLE
24247: LD_INT 0
24249: PPUSH
24250: PPUSH
24251: PPUSH
24252: PPUSH
24253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24254: LD_ADDR_VAR 0 5
24258: PUSH
24259: LD_INT 22
24261: PUSH
24262: LD_OWVAR 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: ST_TO_ADDR
// if not tmp then
24290: LD_VAR 0 5
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24453
// for i in tmp do
24299: LD_ADDR_VAR 0 1
24303: PUSH
24304: LD_VAR 0 5
24308: PUSH
24309: FOR_IN
24310: IFFALSE 24451
// begin d := rand ( 0 , 5 ) ;
24312: LD_ADDR_VAR 0 4
24316: PUSH
24317: LD_INT 0
24319: PPUSH
24320: LD_INT 5
24322: PPUSH
24323: CALL_OW 12
24327: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24328: LD_ADDR_VAR 0 2
24332: PUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 250
24342: PPUSH
24343: LD_VAR 0 4
24347: PPUSH
24348: LD_INT 3
24350: PPUSH
24351: LD_INT 12
24353: PPUSH
24354: CALL_OW 12
24358: PPUSH
24359: CALL_OW 272
24363: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 251
24378: PPUSH
24379: LD_VAR 0 4
24383: PPUSH
24384: LD_INT 3
24386: PPUSH
24387: LD_INT 12
24389: PPUSH
24390: CALL_OW 12
24394: PPUSH
24395: CALL_OW 273
24399: ST_TO_ADDR
// if ValidHex ( x , y ) then
24400: LD_VAR 0 2
24404: PPUSH
24405: LD_VAR 0 3
24409: PPUSH
24410: CALL_OW 488
24414: IFFALSE 24449
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24416: LD_VAR 0 1
24420: PPUSH
24421: LD_VAR 0 2
24425: PPUSH
24426: LD_VAR 0 3
24430: PPUSH
24431: LD_INT 3
24433: PPUSH
24434: LD_INT 6
24436: PPUSH
24437: CALL_OW 12
24441: PPUSH
24442: LD_INT 1
24444: PPUSH
24445: CALL_OW 483
// end ;
24449: GO 24309
24451: POP
24452: POP
// end ;
24453: PPOPN 5
24455: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24456: LD_EXP 60
24460: PUSH
24461: LD_EXP 95
24465: AND
24466: IFFALSE 24560
24468: GO 24470
24470: DISABLE
24471: LD_INT 0
24473: PPUSH
24474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24475: LD_ADDR_VAR 0 2
24479: PUSH
24480: LD_INT 22
24482: PUSH
24483: LD_OWVAR 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 32
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 21
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: PPUSH
24517: CALL_OW 69
24521: ST_TO_ADDR
// if not tmp then
24522: LD_VAR 0 2
24526: NOT
24527: IFFALSE 24531
// exit ;
24529: GO 24560
// for i in tmp do
24531: LD_ADDR_VAR 0 1
24535: PUSH
24536: LD_VAR 0 2
24540: PUSH
24541: FOR_IN
24542: IFFALSE 24558
// SetFuel ( i , 0 ) ;
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_INT 0
24551: PPUSH
24552: CALL_OW 240
24556: GO 24541
24558: POP
24559: POP
// end ;
24560: PPOPN 2
24562: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24563: LD_EXP 60
24567: PUSH
24568: LD_EXP 96
24572: AND
24573: IFFALSE 24639
24575: GO 24577
24577: DISABLE
24578: LD_INT 0
24580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24581: LD_ADDR_VAR 0 1
24585: PUSH
24586: LD_INT 22
24588: PUSH
24589: LD_OWVAR 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 29
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PPUSH
24612: CALL_OW 69
24616: ST_TO_ADDR
// if not tmp then
24617: LD_VAR 0 1
24621: NOT
24622: IFFALSE 24626
// exit ;
24624: GO 24639
// DestroyUnit ( tmp [ 1 ] ) ;
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 1
24633: ARRAY
24634: PPUSH
24635: CALL_OW 65
// end ;
24639: PPOPN 1
24641: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24642: LD_EXP 60
24646: PUSH
24647: LD_EXP 98
24651: AND
24652: IFFALSE 24781
24654: GO 24656
24656: DISABLE
24657: LD_INT 0
24659: PPUSH
// begin uc_side := 0 ;
24660: LD_ADDR_OWVAR 20
24664: PUSH
24665: LD_INT 0
24667: ST_TO_ADDR
// uc_nation := nation_arabian ;
24668: LD_ADDR_OWVAR 21
24672: PUSH
24673: LD_INT 2
24675: ST_TO_ADDR
// hc_gallery :=  ;
24676: LD_ADDR_OWVAR 33
24680: PUSH
24681: LD_STRING 
24683: ST_TO_ADDR
// hc_name :=  ;
24684: LD_ADDR_OWVAR 26
24688: PUSH
24689: LD_STRING 
24691: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24692: LD_INT 1
24694: PPUSH
24695: LD_INT 11
24697: PPUSH
24698: LD_INT 10
24700: PPUSH
24701: CALL_OW 380
// un := CreateHuman ;
24705: LD_ADDR_VAR 0 1
24709: PUSH
24710: CALL_OW 44
24714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24727: LD_INT 35
24729: PPUSH
24730: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24734: LD_VAR 0 1
24738: PPUSH
24739: LD_INT 22
24741: PUSH
24742: LD_OWVAR 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: PPUSH
24756: LD_VAR 0 1
24760: PPUSH
24761: CALL_OW 74
24765: PPUSH
24766: CALL_OW 115
// until IsDead ( un ) ;
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 301
24779: IFFALSE 24727
// end ;
24781: PPOPN 1
24783: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24784: LD_EXP 60
24788: PUSH
24789: LD_EXP 100
24793: AND
24794: IFFALSE 24806
24796: GO 24798
24798: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24799: LD_STRING earthquake(getX(game), 0, 32)
24801: PPUSH
24802: CALL_OW 559
24806: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24807: LD_EXP 60
24811: PUSH
24812: LD_EXP 101
24816: AND
24817: IFFALSE 24908
24819: GO 24821
24821: DISABLE
24822: LD_INT 0
24824: PPUSH
// begin enable ;
24825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24826: LD_ADDR_VAR 0 1
24830: PUSH
24831: LD_INT 22
24833: PUSH
24834: LD_OWVAR 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 21
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 33
24855: PUSH
24856: LD_INT 3
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: PPUSH
24868: CALL_OW 69
24872: ST_TO_ADDR
// if not tmp then
24873: LD_VAR 0 1
24877: NOT
24878: IFFALSE 24882
// exit ;
24880: GO 24908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24882: LD_VAR 0 1
24886: PUSH
24887: LD_INT 1
24889: PPUSH
24890: LD_VAR 0 1
24894: PPUSH
24895: CALL_OW 12
24899: ARRAY
24900: PPUSH
24901: LD_INT 1
24903: PPUSH
24904: CALL_OW 234
// end ;
24908: PPOPN 1
24910: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24911: LD_EXP 60
24915: PUSH
24916: LD_EXP 102
24920: AND
24921: IFFALSE 25062
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 22
24938: PUSH
24939: LD_OWVAR 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 25
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PPUSH
24962: CALL_OW 69
24966: ST_TO_ADDR
// if not tmp then
24967: LD_VAR 0 3
24971: NOT
24972: IFFALSE 24976
// exit ;
24974: GO 25062
// un := tmp [ rand ( 1 , tmp ) ] ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_VAR 0 3
24985: PUSH
24986: LD_INT 1
24988: PPUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: CALL_OW 12
24998: ARRAY
24999: ST_TO_ADDR
// if Crawls ( un ) then
25000: LD_VAR 0 2
25004: PPUSH
25005: CALL_OW 318
25009: IFFALSE 25020
// ComWalk ( un ) ;
25011: LD_VAR 0 2
25015: PPUSH
25016: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25020: LD_VAR 0 2
25024: PPUSH
25025: LD_INT 9
25027: PPUSH
25028: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25032: LD_INT 28
25034: PPUSH
25035: LD_OWVAR 2
25039: PPUSH
25040: LD_INT 2
25042: PPUSH
25043: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25047: LD_INT 29
25049: PPUSH
25050: LD_OWVAR 2
25054: PPUSH
25055: LD_INT 2
25057: PPUSH
25058: CALL_OW 322
// end ;
25062: PPOPN 3
25064: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25065: LD_EXP 60
25069: PUSH
25070: LD_EXP 103
25074: AND
25075: IFFALSE 25186
25077: GO 25079
25079: DISABLE
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
25084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_INT 22
25092: PUSH
25093: LD_OWVAR 2
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 25
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: ST_TO_ADDR
// if not tmp then
25121: LD_VAR 0 3
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25186
// un := tmp [ rand ( 1 , tmp ) ] ;
25130: LD_ADDR_VAR 0 2
25134: PUSH
25135: LD_VAR 0 3
25139: PUSH
25140: LD_INT 1
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: CALL_OW 12
25152: ARRAY
25153: ST_TO_ADDR
// if Crawls ( un ) then
25154: LD_VAR 0 2
25158: PPUSH
25159: CALL_OW 318
25163: IFFALSE 25174
// ComWalk ( un ) ;
25165: LD_VAR 0 2
25169: PPUSH
25170: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25174: LD_VAR 0 2
25178: PPUSH
25179: LD_INT 8
25181: PPUSH
25182: CALL_OW 336
// end ;
25186: PPOPN 3
25188: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25189: LD_EXP 60
25193: PUSH
25194: LD_EXP 104
25198: AND
25199: IFFALSE 25343
25201: GO 25203
25203: DISABLE
25204: LD_INT 0
25206: PPUSH
25207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25208: LD_ADDR_VAR 0 2
25212: PUSH
25213: LD_INT 22
25215: PUSH
25216: LD_OWVAR 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 21
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 34
25240: PUSH
25241: LD_INT 12
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 51
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 34
25260: PUSH
25261: LD_INT 32
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 2
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 25343
// for i in tmp do
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_VAR 0 2
25302: PUSH
25303: FOR_IN
25304: IFFALSE 25341
// if GetCargo ( i , mat_artifact ) = 0 then
25306: LD_VAR 0 1
25310: PPUSH
25311: LD_INT 4
25313: PPUSH
25314: CALL_OW 289
25318: PUSH
25319: LD_INT 0
25321: EQUAL
25322: IFFALSE 25339
// SetCargo ( i , mat_siberit , 100 ) ;
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_INT 3
25331: PPUSH
25332: LD_INT 100
25334: PPUSH
25335: CALL_OW 290
25339: GO 25303
25341: POP
25342: POP
// end ;
25343: PPOPN 2
25345: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25346: LD_EXP 60
25350: PUSH
25351: LD_EXP 105
25355: AND
25356: IFFALSE 25539
25358: GO 25360
25360: DISABLE
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_INT 22
25372: PUSH
25373: LD_OWVAR 2
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PPUSH
25382: CALL_OW 69
25386: ST_TO_ADDR
// if not tmp then
25387: LD_VAR 0 2
25391: NOT
25392: IFFALSE 25396
// exit ;
25394: GO 25539
// for i := 1 to 2 do
25396: LD_ADDR_VAR 0 1
25400: PUSH
25401: DOUBLE
25402: LD_INT 1
25404: DEC
25405: ST_TO_ADDR
25406: LD_INT 2
25408: PUSH
25409: FOR_TO
25410: IFFALSE 25537
// begin uc_side := your_side ;
25412: LD_ADDR_OWVAR 20
25416: PUSH
25417: LD_OWVAR 2
25421: ST_TO_ADDR
// uc_nation := nation_american ;
25422: LD_ADDR_OWVAR 21
25426: PUSH
25427: LD_INT 1
25429: ST_TO_ADDR
// vc_chassis := us_morphling ;
25430: LD_ADDR_OWVAR 37
25434: PUSH
25435: LD_INT 5
25437: ST_TO_ADDR
// vc_engine := engine_siberite ;
25438: LD_ADDR_OWVAR 39
25442: PUSH
25443: LD_INT 3
25445: ST_TO_ADDR
// vc_control := control_computer ;
25446: LD_ADDR_OWVAR 38
25450: PUSH
25451: LD_INT 3
25453: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25454: LD_ADDR_OWVAR 40
25458: PUSH
25459: LD_INT 10
25461: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25462: LD_VAR 0 2
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: PPUSH
25471: CALL_OW 310
25475: NOT
25476: IFFALSE 25523
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25478: CALL_OW 45
25482: PPUSH
25483: LD_VAR 0 2
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PPUSH
25492: CALL_OW 250
25496: PPUSH
25497: LD_VAR 0 2
25501: PUSH
25502: LD_INT 1
25504: ARRAY
25505: PPUSH
25506: CALL_OW 251
25510: PPUSH
25511: LD_INT 12
25513: PPUSH
25514: LD_INT 1
25516: PPUSH
25517: CALL_OW 50
25521: GO 25535
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25523: CALL_OW 45
25527: PPUSH
25528: LD_INT 1
25530: PPUSH
25531: CALL_OW 51
// end ;
25535: GO 25409
25537: POP
25538: POP
// end ;
25539: PPOPN 2
25541: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25542: LD_EXP 60
25546: PUSH
25547: LD_EXP 106
25551: AND
25552: IFFALSE 25774
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
25563: PPUSH
25564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25565: LD_ADDR_VAR 0 6
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_OWVAR 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 21
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 3
25594: PUSH
25595: LD_INT 23
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 69
25618: ST_TO_ADDR
// if not tmp then
25619: LD_VAR 0 6
25623: NOT
25624: IFFALSE 25628
// exit ;
25626: GO 25774
// s1 := rand ( 1 , 4 ) ;
25628: LD_ADDR_VAR 0 2
25632: PUSH
25633: LD_INT 1
25635: PPUSH
25636: LD_INT 4
25638: PPUSH
25639: CALL_OW 12
25643: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25644: LD_ADDR_VAR 0 4
25648: PUSH
25649: LD_VAR 0 6
25653: PUSH
25654: LD_INT 1
25656: ARRAY
25657: PPUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: CALL_OW 259
25667: ST_TO_ADDR
// if s1 = 1 then
25668: LD_VAR 0 2
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25696
// s2 := rand ( 2 , 4 ) else
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 2
25685: PPUSH
25686: LD_INT 4
25688: PPUSH
25689: CALL_OW 12
25693: ST_TO_ADDR
25694: GO 25704
// s2 := 1 ;
25696: LD_ADDR_VAR 0 3
25700: PUSH
25701: LD_INT 1
25703: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25704: LD_ADDR_VAR 0 5
25708: PUSH
25709: LD_VAR 0 6
25713: PUSH
25714: LD_INT 1
25716: ARRAY
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 259
25727: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25728: LD_VAR 0 6
25732: PUSH
25733: LD_INT 1
25735: ARRAY
25736: PPUSH
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 5
25746: PPUSH
25747: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25751: LD_VAR 0 6
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_VAR 0 3
25764: PPUSH
25765: LD_VAR 0 4
25769: PPUSH
25770: CALL_OW 237
// end ;
25774: PPOPN 6
25776: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25777: LD_EXP 60
25781: PUSH
25782: LD_EXP 107
25786: AND
25787: IFFALSE 25866
25789: GO 25791
25791: DISABLE
25792: LD_INT 0
25794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25795: LD_ADDR_VAR 0 1
25799: PUSH
25800: LD_INT 22
25802: PUSH
25803: LD_OWVAR 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 30
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PPUSH
25826: CALL_OW 69
25830: ST_TO_ADDR
// if not tmp then
25831: LD_VAR 0 1
25835: NOT
25836: IFFALSE 25840
// exit ;
25838: GO 25866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25840: LD_VAR 0 1
25844: PUSH
25845: LD_INT 1
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL_OW 12
25857: ARRAY
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: CALL_OW 234
// end ;
25866: PPOPN 1
25868: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25869: LD_EXP 60
25873: PUSH
25874: LD_EXP 108
25878: AND
25879: IFFALSE 25991
25881: GO 25883
25883: DISABLE
25884: LD_INT 0
25886: PPUSH
25887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25888: LD_ADDR_VAR 0 2
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_OWVAR 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 30
25910: PUSH
25911: LD_INT 27
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 30
25920: PUSH
25921: LD_INT 26
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 30
25930: PUSH
25931: LD_INT 28
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PPUSH
25948: CALL_OW 69
25952: ST_TO_ADDR
// if not tmp then
25953: LD_VAR 0 2
25957: NOT
25958: IFFALSE 25962
// exit ;
25960: GO 25991
// for i in tmp do
25962: LD_ADDR_VAR 0 1
25966: PUSH
25967: LD_VAR 0 2
25971: PUSH
25972: FOR_IN
25973: IFFALSE 25989
// SetLives ( i , 1 ) ;
25975: LD_VAR 0 1
25979: PPUSH
25980: LD_INT 1
25982: PPUSH
25983: CALL_OW 234
25987: GO 25972
25989: POP
25990: POP
// end ;
25991: PPOPN 2
25993: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25994: LD_EXP 60
25998: PUSH
25999: LD_EXP 109
26003: AND
26004: IFFALSE 26291
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
26013: PPUSH
// begin i := rand ( 1 , 7 ) ;
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_INT 1
26021: PPUSH
26022: LD_INT 7
26024: PPUSH
26025: CALL_OW 12
26029: ST_TO_ADDR
// case i of 1 :
26030: LD_VAR 0 1
26034: PUSH
26035: LD_INT 1
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26053
26043: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26044: LD_STRING earthquake(getX(game), 0, 32)
26046: PPUSH
26047: CALL_OW 559
26051: GO 26291
26053: LD_INT 2
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26075
26061: POP
// begin ToLua ( displayStucuk(); ) ;
26062: LD_STRING displayStucuk();
26064: PPUSH
26065: CALL_OW 559
// ResetFog ;
26069: CALL_OW 335
// end ; 3 :
26073: GO 26291
26075: LD_INT 3
26077: DOUBLE
26078: EQUAL
26079: IFTRUE 26083
26081: GO 26187
26083: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26084: LD_ADDR_VAR 0 2
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 25
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 69
26119: ST_TO_ADDR
// if not tmp then
26120: LD_VAR 0 2
26124: NOT
26125: IFFALSE 26129
// exit ;
26127: GO 26291
// un := tmp [ rand ( 1 , tmp ) ] ;
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_VAR 0 2
26138: PUSH
26139: LD_INT 1
26141: PPUSH
26142: LD_VAR 0 2
26146: PPUSH
26147: CALL_OW 12
26151: ARRAY
26152: ST_TO_ADDR
// if Crawls ( un ) then
26153: LD_VAR 0 3
26157: PPUSH
26158: CALL_OW 318
26162: IFFALSE 26173
// ComWalk ( un ) ;
26164: LD_VAR 0 3
26168: PPUSH
26169: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26173: LD_VAR 0 3
26177: PPUSH
26178: LD_INT 8
26180: PPUSH
26181: CALL_OW 336
// end ; 4 :
26185: GO 26291
26187: LD_INT 4
26189: DOUBLE
26190: EQUAL
26191: IFTRUE 26195
26193: GO 26269
26195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: LD_INT 22
26203: PUSH
26204: LD_OWVAR 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 30
26215: PUSH
26216: LD_INT 29
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PPUSH
26227: CALL_OW 69
26231: ST_TO_ADDR
// if not tmp then
26232: LD_VAR 0 2
26236: NOT
26237: IFFALSE 26241
// exit ;
26239: GO 26291
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26241: LD_VAR 0 2
26245: PUSH
26246: LD_INT 1
26248: ARRAY
26249: PPUSH
26250: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26254: LD_VAR 0 2
26258: PUSH
26259: LD_INT 1
26261: ARRAY
26262: PPUSH
26263: CALL_OW 65
// end ; 5 .. 7 :
26267: GO 26291
26269: LD_INT 5
26271: DOUBLE
26272: GREATEREQUAL
26273: IFFALSE 26281
26275: LD_INT 7
26277: DOUBLE
26278: LESSEQUAL
26279: IFTRUE 26283
26281: GO 26290
26283: POP
// StreamSibBomb ; end ;
26284: CALL 22528 0 0
26288: GO 26291
26290: POP
// end ;
26291: PPOPN 3
26293: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26294: LD_EXP 60
26298: PUSH
26299: LD_EXP 110
26303: AND
26304: IFFALSE 26460
26306: GO 26308
26308: DISABLE
26309: LD_INT 0
26311: PPUSH
26312: PPUSH
26313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26314: LD_ADDR_VAR 0 2
26318: PUSH
26319: LD_INT 81
26321: PUSH
26322: LD_OWVAR 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 21
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PPUSH
26363: CALL_OW 69
26367: ST_TO_ADDR
// if not tmp then
26368: LD_VAR 0 2
26372: NOT
26373: IFFALSE 26377
// exit ;
26375: GO 26460
// p := 0 ;
26377: LD_ADDR_VAR 0 3
26381: PUSH
26382: LD_INT 0
26384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26385: LD_INT 35
26387: PPUSH
26388: CALL_OW 67
// p := p + 1 ;
26392: LD_ADDR_VAR 0 3
26396: PUSH
26397: LD_VAR 0 3
26401: PUSH
26402: LD_INT 1
26404: PLUS
26405: ST_TO_ADDR
// for i in tmp do
26406: LD_ADDR_VAR 0 1
26410: PUSH
26411: LD_VAR 0 2
26415: PUSH
26416: FOR_IN
26417: IFFALSE 26448
// if GetLives ( i ) < 1000 then
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 256
26428: PUSH
26429: LD_INT 1000
26431: LESS
26432: IFFALSE 26446
// SetLives ( i , 1000 ) ;
26434: LD_VAR 0 1
26438: PPUSH
26439: LD_INT 1000
26441: PPUSH
26442: CALL_OW 234
26446: GO 26416
26448: POP
26449: POP
// until p > 20 ;
26450: LD_VAR 0 3
26454: PUSH
26455: LD_INT 20
26457: GREATER
26458: IFFALSE 26385
// end ;
26460: PPOPN 3
26462: END
// every 0 0$1 trigger StreamModeActive and sTime do
26463: LD_EXP 60
26467: PUSH
26468: LD_EXP 111
26472: AND
26473: IFFALSE 26508
26475: GO 26477
26477: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26478: LD_INT 28
26480: PPUSH
26481: LD_OWVAR 2
26485: PPUSH
26486: LD_INT 2
26488: PPUSH
26489: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26493: LD_INT 30
26495: PPUSH
26496: LD_OWVAR 2
26500: PPUSH
26501: LD_INT 2
26503: PPUSH
26504: CALL_OW 322
// end ;
26508: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26509: LD_EXP 60
26513: PUSH
26514: LD_EXP 112
26518: AND
26519: IFFALSE 26640
26521: GO 26523
26523: DISABLE
26524: LD_INT 0
26526: PPUSH
26527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_INT 22
26535: PUSH
26536: LD_OWVAR 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 21
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: PUSH
26558: LD_INT 23
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 69
26581: ST_TO_ADDR
// if not tmp then
26582: LD_VAR 0 2
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26640
// for i in tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26638
// begin if Crawls ( i ) then
26604: LD_VAR 0 1
26608: PPUSH
26609: CALL_OW 318
26613: IFFALSE 26624
// ComWalk ( i ) ;
26615: LD_VAR 0 1
26619: PPUSH
26620: CALL_OW 138
// SetClass ( i , 2 ) ;
26624: LD_VAR 0 1
26628: PPUSH
26629: LD_INT 2
26631: PPUSH
26632: CALL_OW 336
// end ;
26636: GO 26601
26638: POP
26639: POP
// end ;
26640: PPOPN 2
26642: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26643: LD_EXP 60
26647: PUSH
26648: LD_EXP 113
26652: AND
26653: IFFALSE 26941
26655: GO 26657
26657: DISABLE
26658: LD_INT 0
26660: PPUSH
26661: PPUSH
26662: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26663: LD_OWVAR 2
26667: PPUSH
26668: LD_INT 9
26670: PPUSH
26671: LD_INT 1
26673: PPUSH
26674: LD_INT 1
26676: PPUSH
26677: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26681: LD_INT 9
26683: PPUSH
26684: LD_OWVAR 2
26688: PPUSH
26689: CALL_OW 343
// uc_side := 9 ;
26693: LD_ADDR_OWVAR 20
26697: PUSH
26698: LD_INT 9
26700: ST_TO_ADDR
// uc_nation := 2 ;
26701: LD_ADDR_OWVAR 21
26705: PUSH
26706: LD_INT 2
26708: ST_TO_ADDR
// hc_name := Dark Warrior ;
26709: LD_ADDR_OWVAR 26
26713: PUSH
26714: LD_STRING Dark Warrior
26716: ST_TO_ADDR
// hc_gallery :=  ;
26717: LD_ADDR_OWVAR 33
26721: PUSH
26722: LD_STRING 
26724: ST_TO_ADDR
// hc_noskilllimit := true ;
26725: LD_ADDR_OWVAR 76
26729: PUSH
26730: LD_INT 1
26732: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26733: LD_ADDR_OWVAR 31
26737: PUSH
26738: LD_INT 30
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 30
26746: PUSH
26747: LD_INT 30
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
// un := CreateHuman ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: CALL_OW 44
26765: ST_TO_ADDR
// hc_noskilllimit := false ;
26766: LD_ADDR_OWVAR 76
26770: PUSH
26771: LD_INT 0
26773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26774: LD_VAR 0 3
26778: PPUSH
26779: LD_INT 1
26781: PPUSH
26782: CALL_OW 51
// ToLua ( playRanger() ) ;
26786: LD_STRING playRanger()
26788: PPUSH
26789: CALL_OW 559
// p := 0 ;
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: LD_INT 0
26800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26801: LD_INT 35
26803: PPUSH
26804: CALL_OW 67
// p := p + 1 ;
26808: LD_ADDR_VAR 0 2
26812: PUSH
26813: LD_VAR 0 2
26817: PUSH
26818: LD_INT 1
26820: PLUS
26821: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26822: LD_VAR 0 3
26826: PPUSH
26827: CALL_OW 256
26831: PUSH
26832: LD_INT 1000
26834: LESS
26835: IFFALSE 26849
// SetLives ( un , 1000 ) ;
26837: LD_VAR 0 3
26841: PPUSH
26842: LD_INT 1000
26844: PPUSH
26845: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26849: LD_VAR 0 3
26853: PPUSH
26854: LD_INT 81
26856: PUSH
26857: LD_OWVAR 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 91
26868: PUSH
26869: LD_VAR 0 3
26873: PUSH
26874: LD_INT 30
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PPUSH
26886: CALL_OW 69
26890: PPUSH
26891: LD_VAR 0 3
26895: PPUSH
26896: CALL_OW 74
26900: PPUSH
26901: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26905: LD_VAR 0 2
26909: PUSH
26910: LD_INT 80
26912: GREATER
26913: PUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 301
26923: OR
26924: IFFALSE 26801
// if un then
26926: LD_VAR 0 3
26930: IFFALSE 26941
// RemoveUnit ( un ) ;
26932: LD_VAR 0 3
26936: PPUSH
26937: CALL_OW 64
// end ;
26941: PPOPN 3
26943: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26944: LD_EXP 114
26948: IFFALSE 27064
26950: GO 26952
26952: DISABLE
26953: LD_INT 0
26955: PPUSH
26956: PPUSH
26957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26958: LD_ADDR_VAR 0 2
26962: PUSH
26963: LD_INT 81
26965: PUSH
26966: LD_OWVAR 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PPUSH
26989: CALL_OW 69
26993: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26994: LD_STRING playComputer()
26996: PPUSH
26997: CALL_OW 559
// if not tmp then
27001: LD_VAR 0 2
27005: NOT
27006: IFFALSE 27010
// exit ;
27008: GO 27064
// for i in tmp do
27010: LD_ADDR_VAR 0 1
27014: PUSH
27015: LD_VAR 0 2
27019: PUSH
27020: FOR_IN
27021: IFFALSE 27062
// for j := 1 to 4 do
27023: LD_ADDR_VAR 0 3
27027: PUSH
27028: DOUBLE
27029: LD_INT 1
27031: DEC
27032: ST_TO_ADDR
27033: LD_INT 4
27035: PUSH
27036: FOR_TO
27037: IFFALSE 27058
// SetSkill ( i , j , 10 ) ;
27039: LD_VAR 0 1
27043: PPUSH
27044: LD_VAR 0 3
27048: PPUSH
27049: LD_INT 10
27051: PPUSH
27052: CALL_OW 237
27056: GO 27036
27058: POP
27059: POP
27060: GO 27020
27062: POP
27063: POP
// end ;
27064: PPOPN 3
27066: END
// every 0 0$1 trigger s30 do var i , tmp ;
27067: LD_EXP 115
27071: IFFALSE 27140
27073: GO 27075
27075: DISABLE
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27080: LD_ADDR_VAR 0 2
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_OWVAR 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PPUSH
27097: CALL_OW 69
27101: ST_TO_ADDR
// if not tmp then
27102: LD_VAR 0 2
27106: NOT
27107: IFFALSE 27111
// exit ;
27109: GO 27140
// for i in tmp do
27111: LD_ADDR_VAR 0 1
27115: PUSH
27116: LD_VAR 0 2
27120: PUSH
27121: FOR_IN
27122: IFFALSE 27138
// SetLives ( i , 300 ) ;
27124: LD_VAR 0 1
27128: PPUSH
27129: LD_INT 300
27131: PPUSH
27132: CALL_OW 234
27136: GO 27121
27138: POP
27139: POP
// end ;
27140: PPOPN 2
27142: END
// every 0 0$1 trigger s60 do var i , tmp ;
27143: LD_EXP 116
27147: IFFALSE 27216
27149: GO 27151
27151: DISABLE
27152: LD_INT 0
27154: PPUSH
27155: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27156: LD_ADDR_VAR 0 2
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: LD_OWVAR 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: ST_TO_ADDR
// if not tmp then
27178: LD_VAR 0 2
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27216
// for i in tmp do
27187: LD_ADDR_VAR 0 1
27191: PUSH
27192: LD_VAR 0 2
27196: PUSH
27197: FOR_IN
27198: IFFALSE 27214
// SetLives ( i , 600 ) ;
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_INT 600
27207: PPUSH
27208: CALL_OW 234
27212: GO 27197
27214: POP
27215: POP
// end ;
27216: PPOPN 2
27218: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27219: LD_INT 0
27221: PPUSH
// case cmd of 301 :
27222: LD_VAR 0 1
27226: PUSH
27227: LD_INT 301
27229: DOUBLE
27230: EQUAL
27231: IFTRUE 27235
27233: GO 27267
27235: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27236: LD_VAR 0 6
27240: PPUSH
27241: LD_VAR 0 7
27245: PPUSH
27246: LD_VAR 0 8
27250: PPUSH
27251: LD_VAR 0 4
27255: PPUSH
27256: LD_VAR 0 5
27260: PPUSH
27261: CALL 28468 0 5
27265: GO 27388
27267: LD_INT 302
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27312
27275: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27276: LD_VAR 0 6
27280: PPUSH
27281: LD_VAR 0 7
27285: PPUSH
27286: LD_VAR 0 8
27290: PPUSH
27291: LD_VAR 0 9
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: LD_VAR 0 5
27305: PPUSH
27306: CALL 28559 0 6
27310: GO 27388
27312: LD_INT 303
27314: DOUBLE
27315: EQUAL
27316: IFTRUE 27320
27318: GO 27357
27320: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27321: LD_VAR 0 6
27325: PPUSH
27326: LD_VAR 0 7
27330: PPUSH
27331: LD_VAR 0 8
27335: PPUSH
27336: LD_VAR 0 9
27340: PPUSH
27341: LD_VAR 0 4
27345: PPUSH
27346: LD_VAR 0 5
27350: PPUSH
27351: CALL 27393 0 6
27355: GO 27388
27357: LD_INT 304
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 27387
27365: POP
// hHackTeleport ( unit , x , y ) ; end ;
27366: LD_VAR 0 2
27370: PPUSH
27371: LD_VAR 0 4
27375: PPUSH
27376: LD_VAR 0 5
27380: PPUSH
27381: CALL 29152 0 3
27385: GO 27388
27387: POP
// end ;
27388: LD_VAR 0 12
27392: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27393: LD_INT 0
27395: PPUSH
27396: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27397: LD_VAR 0 1
27401: PUSH
27402: LD_INT 1
27404: LESS
27405: PUSH
27406: LD_VAR 0 1
27410: PUSH
27411: LD_INT 3
27413: GREATER
27414: OR
27415: PUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: LD_VAR 0 6
27425: PPUSH
27426: CALL_OW 428
27430: OR
27431: IFFALSE 27435
// exit ;
27433: GO 28155
// uc_side := your_side ;
27435: LD_ADDR_OWVAR 20
27439: PUSH
27440: LD_OWVAR 2
27444: ST_TO_ADDR
// uc_nation := nation ;
27445: LD_ADDR_OWVAR 21
27449: PUSH
27450: LD_VAR 0 1
27454: ST_TO_ADDR
// bc_level = 1 ;
27455: LD_ADDR_OWVAR 43
27459: PUSH
27460: LD_INT 1
27462: ST_TO_ADDR
// case btype of 1 :
27463: LD_VAR 0 2
27467: PUSH
27468: LD_INT 1
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27476
27474: GO 27487
27476: POP
// bc_type := b_depot ; 2 :
27477: LD_ADDR_OWVAR 42
27481: PUSH
27482: LD_INT 0
27484: ST_TO_ADDR
27485: GO 28099
27487: LD_INT 2
27489: DOUBLE
27490: EQUAL
27491: IFTRUE 27495
27493: GO 27506
27495: POP
// bc_type := b_warehouse ; 3 :
27496: LD_ADDR_OWVAR 42
27500: PUSH
27501: LD_INT 1
27503: ST_TO_ADDR
27504: GO 28099
27506: LD_INT 3
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27525
27514: POP
// bc_type := b_lab ; 4 .. 9 :
27515: LD_ADDR_OWVAR 42
27519: PUSH
27520: LD_INT 6
27522: ST_TO_ADDR
27523: GO 28099
27525: LD_INT 4
27527: DOUBLE
27528: GREATEREQUAL
27529: IFFALSE 27537
27531: LD_INT 9
27533: DOUBLE
27534: LESSEQUAL
27535: IFTRUE 27539
27537: GO 27591
27539: POP
// begin bc_type := b_lab_half ;
27540: LD_ADDR_OWVAR 42
27544: PUSH
27545: LD_INT 7
27547: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27548: LD_ADDR_OWVAR 44
27552: PUSH
27553: LD_INT 10
27555: PUSH
27556: LD_INT 11
27558: PUSH
27559: LD_INT 12
27561: PUSH
27562: LD_INT 15
27564: PUSH
27565: LD_INT 14
27567: PUSH
27568: LD_INT 13
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: PUSH
27579: LD_VAR 0 2
27583: PUSH
27584: LD_INT 3
27586: MINUS
27587: ARRAY
27588: ST_TO_ADDR
// end ; 10 .. 13 :
27589: GO 28099
27591: LD_INT 10
27593: DOUBLE
27594: GREATEREQUAL
27595: IFFALSE 27603
27597: LD_INT 13
27599: DOUBLE
27600: LESSEQUAL
27601: IFTRUE 27605
27603: GO 27682
27605: POP
// begin bc_type := b_lab_full ;
27606: LD_ADDR_OWVAR 42
27610: PUSH
27611: LD_INT 8
27613: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27614: LD_ADDR_OWVAR 44
27618: PUSH
27619: LD_INT 10
27621: PUSH
27622: LD_INT 12
27624: PUSH
27625: LD_INT 14
27627: PUSH
27628: LD_INT 13
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: PUSH
27637: LD_VAR 0 2
27641: PUSH
27642: LD_INT 9
27644: MINUS
27645: ARRAY
27646: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27647: LD_ADDR_OWVAR 45
27651: PUSH
27652: LD_INT 11
27654: PUSH
27655: LD_INT 15
27657: PUSH
27658: LD_INT 12
27660: PUSH
27661: LD_INT 15
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: LD_VAR 0 2
27674: PUSH
27675: LD_INT 9
27677: MINUS
27678: ARRAY
27679: ST_TO_ADDR
// end ; 14 :
27680: GO 28099
27682: LD_INT 14
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27690
27688: GO 27701
27690: POP
// bc_type := b_workshop ; 15 :
27691: LD_ADDR_OWVAR 42
27695: PUSH
27696: LD_INT 2
27698: ST_TO_ADDR
27699: GO 28099
27701: LD_INT 15
27703: DOUBLE
27704: EQUAL
27705: IFTRUE 27709
27707: GO 27720
27709: POP
// bc_type := b_factory ; 16 :
27710: LD_ADDR_OWVAR 42
27714: PUSH
27715: LD_INT 3
27717: ST_TO_ADDR
27718: GO 28099
27720: LD_INT 16
27722: DOUBLE
27723: EQUAL
27724: IFTRUE 27728
27726: GO 27739
27728: POP
// bc_type := b_ext_gun ; 17 :
27729: LD_ADDR_OWVAR 42
27733: PUSH
27734: LD_INT 17
27736: ST_TO_ADDR
27737: GO 28099
27739: LD_INT 17
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27775
27747: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27748: LD_ADDR_OWVAR 42
27752: PUSH
27753: LD_INT 19
27755: PUSH
27756: LD_INT 23
27758: PUSH
27759: LD_INT 19
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: PUSH
27767: LD_VAR 0 1
27771: ARRAY
27772: ST_TO_ADDR
27773: GO 28099
27775: LD_INT 18
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27783
27781: GO 27794
27783: POP
// bc_type := b_ext_radar ; 19 :
27784: LD_ADDR_OWVAR 42
27788: PUSH
27789: LD_INT 20
27791: ST_TO_ADDR
27792: GO 28099
27794: LD_INT 19
27796: DOUBLE
27797: EQUAL
27798: IFTRUE 27802
27800: GO 27813
27802: POP
// bc_type := b_ext_radio ; 20 :
27803: LD_ADDR_OWVAR 42
27807: PUSH
27808: LD_INT 22
27810: ST_TO_ADDR
27811: GO 28099
27813: LD_INT 20
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27821
27819: GO 27832
27821: POP
// bc_type := b_ext_siberium ; 21 :
27822: LD_ADDR_OWVAR 42
27826: PUSH
27827: LD_INT 21
27829: ST_TO_ADDR
27830: GO 28099
27832: LD_INT 21
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 27851
27840: POP
// bc_type := b_ext_computer ; 22 :
27841: LD_ADDR_OWVAR 42
27845: PUSH
27846: LD_INT 24
27848: ST_TO_ADDR
27849: GO 28099
27851: LD_INT 22
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27870
27859: POP
// bc_type := b_ext_track ; 23 :
27860: LD_ADDR_OWVAR 42
27864: PUSH
27865: LD_INT 16
27867: ST_TO_ADDR
27868: GO 28099
27870: LD_INT 23
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 27889
27878: POP
// bc_type := b_ext_laser ; 24 :
27879: LD_ADDR_OWVAR 42
27883: PUSH
27884: LD_INT 25
27886: ST_TO_ADDR
27887: GO 28099
27889: LD_INT 24
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27908
27897: POP
// bc_type := b_control_tower ; 25 :
27898: LD_ADDR_OWVAR 42
27902: PUSH
27903: LD_INT 36
27905: ST_TO_ADDR
27906: GO 28099
27908: LD_INT 25
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27916
27914: GO 27927
27916: POP
// bc_type := b_breastwork ; 26 :
27917: LD_ADDR_OWVAR 42
27921: PUSH
27922: LD_INT 31
27924: ST_TO_ADDR
27925: GO 28099
27927: LD_INT 26
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 27946
27935: POP
// bc_type := b_bunker ; 27 :
27936: LD_ADDR_OWVAR 42
27940: PUSH
27941: LD_INT 32
27943: ST_TO_ADDR
27944: GO 28099
27946: LD_INT 27
27948: DOUBLE
27949: EQUAL
27950: IFTRUE 27954
27952: GO 27965
27954: POP
// bc_type := b_turret ; 28 :
27955: LD_ADDR_OWVAR 42
27959: PUSH
27960: LD_INT 33
27962: ST_TO_ADDR
27963: GO 28099
27965: LD_INT 28
27967: DOUBLE
27968: EQUAL
27969: IFTRUE 27973
27971: GO 27984
27973: POP
// bc_type := b_armoury ; 29 :
27974: LD_ADDR_OWVAR 42
27978: PUSH
27979: LD_INT 4
27981: ST_TO_ADDR
27982: GO 28099
27984: LD_INT 29
27986: DOUBLE
27987: EQUAL
27988: IFTRUE 27992
27990: GO 28003
27992: POP
// bc_type := b_barracks ; 30 :
27993: LD_ADDR_OWVAR 42
27997: PUSH
27998: LD_INT 5
28000: ST_TO_ADDR
28001: GO 28099
28003: LD_INT 30
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28022
28011: POP
// bc_type := b_solar_power ; 31 :
28012: LD_ADDR_OWVAR 42
28016: PUSH
28017: LD_INT 27
28019: ST_TO_ADDR
28020: GO 28099
28022: LD_INT 31
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28041
28030: POP
// bc_type := b_oil_power ; 32 :
28031: LD_ADDR_OWVAR 42
28035: PUSH
28036: LD_INT 26
28038: ST_TO_ADDR
28039: GO 28099
28041: LD_INT 32
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28060
28049: POP
// bc_type := b_siberite_power ; 33 :
28050: LD_ADDR_OWVAR 42
28054: PUSH
28055: LD_INT 28
28057: ST_TO_ADDR
28058: GO 28099
28060: LD_INT 33
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28079
28068: POP
// bc_type := b_oil_mine ; 34 :
28069: LD_ADDR_OWVAR 42
28073: PUSH
28074: LD_INT 29
28076: ST_TO_ADDR
28077: GO 28099
28079: LD_INT 34
28081: DOUBLE
28082: EQUAL
28083: IFTRUE 28087
28085: GO 28098
28087: POP
// bc_type := b_siberite_mine ; end ;
28088: LD_ADDR_OWVAR 42
28092: PUSH
28093: LD_INT 30
28095: ST_TO_ADDR
28096: GO 28099
28098: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28099: LD_ADDR_VAR 0 8
28103: PUSH
28104: LD_VAR 0 5
28108: PPUSH
28109: LD_VAR 0 6
28113: PPUSH
28114: LD_VAR 0 3
28118: PPUSH
28119: CALL_OW 47
28123: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28124: LD_OWVAR 42
28128: PUSH
28129: LD_INT 32
28131: PUSH
28132: LD_INT 33
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: IN
28139: IFFALSE 28155
// PlaceWeaponTurret ( b , weapon ) ;
28141: LD_VAR 0 8
28145: PPUSH
28146: LD_VAR 0 4
28150: PPUSH
28151: CALL_OW 431
// end ;
28155: LD_VAR 0 7
28159: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28160: LD_INT 0
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28166: LD_ADDR_VAR 0 4
28170: PUSH
28171: LD_INT 22
28173: PUSH
28174: LD_OWVAR 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 30
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 30
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PPUSH
28215: CALL_OW 69
28219: ST_TO_ADDR
// if not tmp then
28220: LD_VAR 0 4
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 28288
// for i in tmp do
28229: LD_ADDR_VAR 0 2
28233: PUSH
28234: LD_VAR 0 4
28238: PUSH
28239: FOR_IN
28240: IFFALSE 28286
// for j = 1 to 3 do
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: DOUBLE
28248: LD_INT 1
28250: DEC
28251: ST_TO_ADDR
28252: LD_INT 3
28254: PUSH
28255: FOR_TO
28256: IFFALSE 28282
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28258: LD_VAR 0 2
28262: PPUSH
28263: CALL_OW 274
28267: PPUSH
28268: LD_VAR 0 3
28272: PPUSH
28273: LD_INT 99999
28275: PPUSH
28276: CALL_OW 277
28280: GO 28255
28282: POP
28283: POP
28284: GO 28239
28286: POP
28287: POP
// end ;
28288: LD_VAR 0 1
28292: RET
// export function hHackSetLevel10 ; var i , j ; begin
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
28297: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28298: LD_ADDR_VAR 0 2
28302: PUSH
28303: LD_INT 21
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 69
28317: PUSH
28318: FOR_IN
28319: IFFALSE 28371
// if IsSelected ( i ) then
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL_OW 306
28330: IFFALSE 28369
// begin for j := 1 to 4 do
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: DOUBLE
28338: LD_INT 1
28340: DEC
28341: ST_TO_ADDR
28342: LD_INT 4
28344: PUSH
28345: FOR_TO
28346: IFFALSE 28367
// SetSkill ( i , j , 10 ) ;
28348: LD_VAR 0 2
28352: PPUSH
28353: LD_VAR 0 3
28357: PPUSH
28358: LD_INT 10
28360: PPUSH
28361: CALL_OW 237
28365: GO 28345
28367: POP
28368: POP
// end ;
28369: GO 28318
28371: POP
28372: POP
// end ;
28373: LD_VAR 0 1
28377: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28378: LD_INT 0
28380: PPUSH
28381: PPUSH
28382: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28383: LD_ADDR_VAR 0 2
28387: PUSH
28388: LD_INT 22
28390: PUSH
28391: LD_OWVAR 2
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 21
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PPUSH
28414: CALL_OW 69
28418: PUSH
28419: FOR_IN
28420: IFFALSE 28461
// begin for j := 1 to 4 do
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: DOUBLE
28428: LD_INT 1
28430: DEC
28431: ST_TO_ADDR
28432: LD_INT 4
28434: PUSH
28435: FOR_TO
28436: IFFALSE 28457
// SetSkill ( i , j , 10 ) ;
28438: LD_VAR 0 2
28442: PPUSH
28443: LD_VAR 0 3
28447: PPUSH
28448: LD_INT 10
28450: PPUSH
28451: CALL_OW 237
28455: GO 28435
28457: POP
28458: POP
// end ;
28459: GO 28419
28461: POP
28462: POP
// end ;
28463: LD_VAR 0 1
28467: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28468: LD_INT 0
28470: PPUSH
// uc_side := your_side ;
28471: LD_ADDR_OWVAR 20
28475: PUSH
28476: LD_OWVAR 2
28480: ST_TO_ADDR
// uc_nation := nation ;
28481: LD_ADDR_OWVAR 21
28485: PUSH
28486: LD_VAR 0 1
28490: ST_TO_ADDR
// InitHc ;
28491: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28495: LD_INT 0
28497: PPUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: LD_VAR 0 3
28507: PPUSH
28508: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28512: LD_VAR 0 4
28516: PPUSH
28517: LD_VAR 0 5
28521: PPUSH
28522: CALL_OW 428
28526: PUSH
28527: LD_INT 0
28529: EQUAL
28530: IFFALSE 28554
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28532: CALL_OW 44
28536: PPUSH
28537: LD_VAR 0 4
28541: PPUSH
28542: LD_VAR 0 5
28546: PPUSH
28547: LD_INT 1
28549: PPUSH
28550: CALL_OW 48
// end ;
28554: LD_VAR 0 6
28558: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
// uc_side := your_side ;
28563: LD_ADDR_OWVAR 20
28567: PUSH
28568: LD_OWVAR 2
28572: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28573: LD_VAR 0 1
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 3
28586: PUSH
28587: LD_INT 4
28589: PUSH
28590: LD_INT 5
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: IN
28600: IFFALSE 28612
// uc_nation := nation_american else
28602: LD_ADDR_OWVAR 21
28606: PUSH
28607: LD_INT 1
28609: ST_TO_ADDR
28610: GO 28655
// if chassis in [ 11 , 12 , 13 , 14 ] then
28612: LD_VAR 0 1
28616: PUSH
28617: LD_INT 11
28619: PUSH
28620: LD_INT 12
28622: PUSH
28623: LD_INT 13
28625: PUSH
28626: LD_INT 14
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: IN
28635: IFFALSE 28647
// uc_nation := nation_arabian else
28637: LD_ADDR_OWVAR 21
28641: PUSH
28642: LD_INT 2
28644: ST_TO_ADDR
28645: GO 28655
// uc_nation := nation_russian ;
28647: LD_ADDR_OWVAR 21
28651: PUSH
28652: LD_INT 3
28654: ST_TO_ADDR
// vc_chassis := chassis ;
28655: LD_ADDR_OWVAR 37
28659: PUSH
28660: LD_VAR 0 1
28664: ST_TO_ADDR
// vc_engine := engine ;
28665: LD_ADDR_OWVAR 39
28669: PUSH
28670: LD_VAR 0 2
28674: ST_TO_ADDR
// vc_control := control ;
28675: LD_ADDR_OWVAR 38
28679: PUSH
28680: LD_VAR 0 3
28684: ST_TO_ADDR
// vc_weapon := weapon ;
28685: LD_ADDR_OWVAR 40
28689: PUSH
28690: LD_VAR 0 4
28694: ST_TO_ADDR
// un := CreateVehicle ;
28695: LD_ADDR_VAR 0 8
28699: PUSH
28700: CALL_OW 45
28704: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28705: LD_VAR 0 8
28709: PPUSH
28710: LD_INT 0
28712: PPUSH
28713: LD_INT 5
28715: PPUSH
28716: CALL_OW 12
28720: PPUSH
28721: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28725: LD_VAR 0 8
28729: PPUSH
28730: LD_VAR 0 5
28734: PPUSH
28735: LD_VAR 0 6
28739: PPUSH
28740: LD_INT 1
28742: PPUSH
28743: CALL_OW 48
// end ;
28747: LD_VAR 0 7
28751: RET
// export hInvincible ; every 1 do
28752: GO 28754
28754: DISABLE
// hInvincible := [ ] ;
28755: LD_ADDR_EXP 117
28759: PUSH
28760: EMPTY
28761: ST_TO_ADDR
28762: END
// every 10 do var i ;
28763: GO 28765
28765: DISABLE
28766: LD_INT 0
28768: PPUSH
// begin enable ;
28769: ENABLE
// if not hInvincible then
28770: LD_EXP 117
28774: NOT
28775: IFFALSE 28779
// exit ;
28777: GO 28823
// for i in hInvincible do
28779: LD_ADDR_VAR 0 1
28783: PUSH
28784: LD_EXP 117
28788: PUSH
28789: FOR_IN
28790: IFFALSE 28821
// if GetLives ( i ) < 1000 then
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 256
28801: PUSH
28802: LD_INT 1000
28804: LESS
28805: IFFALSE 28819
// SetLives ( i , 1000 ) ;
28807: LD_VAR 0 1
28811: PPUSH
28812: LD_INT 1000
28814: PPUSH
28815: CALL_OW 234
28819: GO 28789
28821: POP
28822: POP
// end ;
28823: PPOPN 1
28825: END
// export function hHackInvincible ; var i ; begin
28826: LD_INT 0
28828: PPUSH
28829: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28830: LD_ADDR_VAR 0 2
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 21
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 21
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: PPUSH
28863: CALL_OW 69
28867: PUSH
28868: FOR_IN
28869: IFFALSE 28930
// if IsSelected ( i ) then
28871: LD_VAR 0 2
28875: PPUSH
28876: CALL_OW 306
28880: IFFALSE 28928
// begin if i in hInvincible then
28882: LD_VAR 0 2
28886: PUSH
28887: LD_EXP 117
28891: IN
28892: IFFALSE 28912
// hInvincible := hInvincible diff i else
28894: LD_ADDR_EXP 117
28898: PUSH
28899: LD_EXP 117
28903: PUSH
28904: LD_VAR 0 2
28908: DIFF
28909: ST_TO_ADDR
28910: GO 28928
// hInvincible := hInvincible union i ;
28912: LD_ADDR_EXP 117
28916: PUSH
28917: LD_EXP 117
28921: PUSH
28922: LD_VAR 0 2
28926: UNION
28927: ST_TO_ADDR
// end ;
28928: GO 28868
28930: POP
28931: POP
// end ;
28932: LD_VAR 0 1
28936: RET
// export function hHackInvisible ; var i , j ; begin
28937: LD_INT 0
28939: PPUSH
28940: PPUSH
28941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_INT 21
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: PUSH
28962: FOR_IN
28963: IFFALSE 28987
// if IsSelected ( i ) then
28965: LD_VAR 0 2
28969: PPUSH
28970: CALL_OW 306
28974: IFFALSE 28985
// ComForceInvisible ( i ) ;
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL_OW 496
28985: GO 28962
28987: POP
28988: POP
// end ;
28989: LD_VAR 0 1
28993: RET
// export function hHackChangeYourSide ; begin
28994: LD_INT 0
28996: PPUSH
// if your_side = 8 then
28997: LD_OWVAR 2
29001: PUSH
29002: LD_INT 8
29004: EQUAL
29005: IFFALSE 29017
// your_side := 0 else
29007: LD_ADDR_OWVAR 2
29011: PUSH
29012: LD_INT 0
29014: ST_TO_ADDR
29015: GO 29031
// your_side := your_side + 1 ;
29017: LD_ADDR_OWVAR 2
29021: PUSH
29022: LD_OWVAR 2
29026: PUSH
29027: LD_INT 1
29029: PLUS
29030: ST_TO_ADDR
// end ;
29031: LD_VAR 0 1
29035: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
29040: PPUSH
// for i in all_units do
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_OWVAR 3
29050: PUSH
29051: FOR_IN
29052: IFFALSE 29130
// if IsSelected ( i ) then
29054: LD_VAR 0 2
29058: PPUSH
29059: CALL_OW 306
29063: IFFALSE 29128
// begin j := GetSide ( i ) ;
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_VAR 0 2
29074: PPUSH
29075: CALL_OW 255
29079: ST_TO_ADDR
// if j = 8 then
29080: LD_VAR 0 3
29084: PUSH
29085: LD_INT 8
29087: EQUAL
29088: IFFALSE 29100
// j := 0 else
29090: LD_ADDR_VAR 0 3
29094: PUSH
29095: LD_INT 0
29097: ST_TO_ADDR
29098: GO 29114
// j := j + 1 ;
29100: LD_ADDR_VAR 0 3
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_INT 1
29112: PLUS
29113: ST_TO_ADDR
// SetSide ( i , j ) ;
29114: LD_VAR 0 2
29118: PPUSH
29119: LD_VAR 0 3
29123: PPUSH
29124: CALL_OW 235
// end ;
29128: GO 29051
29130: POP
29131: POP
// end ;
29132: LD_VAR 0 1
29136: RET
// export function hHackFog ; begin
29137: LD_INT 0
29139: PPUSH
// FogOff ( true ) ;
29140: LD_INT 1
29142: PPUSH
29143: CALL_OW 344
// end ;
29147: LD_VAR 0 1
29151: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29152: LD_INT 0
29154: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_VAR 0 2
29164: PPUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: LD_INT 1
29172: PPUSH
29173: LD_INT 1
29175: PPUSH
29176: CALL_OW 483
// CenterOnXY ( x , y ) ;
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: CALL_OW 84
// end ; end_of_file
29194: LD_VAR 0 4
29198: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29205: LD_VAR 0 1
29209: PPUSH
29210: CALL_OW 264
29214: PUSH
29215: LD_EXP 133
29219: EQUAL
29220: IFFALSE 29292
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29222: LD_INT 68
29224: PPUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 255
29234: PPUSH
29235: CALL_OW 321
29239: PUSH
29240: LD_INT 2
29242: EQUAL
29243: IFFALSE 29255
// eff := 70 else
29245: LD_ADDR_VAR 0 4
29249: PUSH
29250: LD_INT 70
29252: ST_TO_ADDR
29253: GO 29263
// eff := 30 ;
29255: LD_ADDR_VAR 0 4
29259: PUSH
29260: LD_INT 30
29262: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 250
29272: PPUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 251
29282: PPUSH
29283: LD_VAR 0 4
29287: PPUSH
29288: CALL_OW 495
// end ; end ;
29292: LD_VAR 0 2
29296: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29297: LD_INT 0
29299: PPUSH
// end ;
29300: LD_VAR 0 4
29304: RET
// export function SOS_Command ( cmd ) ; begin
29305: LD_INT 0
29307: PPUSH
// end ;
29308: LD_VAR 0 2
29312: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29313: LD_INT 0
29315: PPUSH
// end ;
29316: LD_VAR 0 6
29320: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
// if not vehicle or not factory then
29325: LD_VAR 0 1
29329: NOT
29330: PUSH
29331: LD_VAR 0 2
29335: NOT
29336: OR
29337: IFFALSE 29341
// exit ;
29339: GO 29572
// if factoryWaypoints >= factory then
29341: LD_EXP 118
29345: PUSH
29346: LD_VAR 0 2
29350: GREATEREQUAL
29351: IFFALSE 29572
// if factoryWaypoints [ factory ] then
29353: LD_EXP 118
29357: PUSH
29358: LD_VAR 0 2
29362: ARRAY
29363: IFFALSE 29572
// begin if GetControl ( vehicle ) = control_manual then
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 263
29374: PUSH
29375: LD_INT 1
29377: EQUAL
29378: IFFALSE 29459
// begin driver := IsDrivenBy ( vehicle ) ;
29380: LD_ADDR_VAR 0 4
29384: PUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: CALL_OW 311
29394: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29395: LD_VAR 0 4
29399: PPUSH
29400: LD_EXP 118
29404: PUSH
29405: LD_VAR 0 2
29409: ARRAY
29410: PUSH
29411: LD_INT 3
29413: ARRAY
29414: PPUSH
29415: LD_EXP 118
29419: PUSH
29420: LD_VAR 0 2
29424: ARRAY
29425: PUSH
29426: LD_INT 4
29428: ARRAY
29429: PPUSH
29430: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29434: LD_VAR 0 4
29438: PPUSH
29439: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29443: LD_VAR 0 4
29447: PPUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: CALL_OW 180
// end else
29457: GO 29572
// if GetControl ( vehicle ) = control_remote then
29459: LD_VAR 0 1
29463: PPUSH
29464: CALL_OW 263
29468: PUSH
29469: LD_INT 2
29471: EQUAL
29472: IFFALSE 29533
// begin wait ( 0 0$2 ) ;
29474: LD_INT 70
29476: PPUSH
29477: CALL_OW 67
// if Connect ( vehicle ) then
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL 42127 0 1
29490: IFFALSE 29531
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_EXP 118
29501: PUSH
29502: LD_VAR 0 2
29506: ARRAY
29507: PUSH
29508: LD_INT 3
29510: ARRAY
29511: PPUSH
29512: LD_EXP 118
29516: PUSH
29517: LD_VAR 0 2
29521: ARRAY
29522: PUSH
29523: LD_INT 4
29525: ARRAY
29526: PPUSH
29527: CALL_OW 171
// end else
29531: GO 29572
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_EXP 118
29542: PUSH
29543: LD_VAR 0 2
29547: ARRAY
29548: PUSH
29549: LD_INT 3
29551: ARRAY
29552: PPUSH
29553: LD_EXP 118
29557: PUSH
29558: LD_VAR 0 2
29562: ARRAY
29563: PUSH
29564: LD_INT 4
29566: ARRAY
29567: PPUSH
29568: CALL_OW 171
// end ; end ;
29572: LD_VAR 0 3
29576: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29577: LD_INT 0
29579: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29580: LD_VAR 0 1
29584: PUSH
29585: LD_INT 250
29587: EQUAL
29588: PUSH
29589: LD_VAR 0 2
29593: PPUSH
29594: CALL_OW 264
29598: PUSH
29599: LD_EXP 136
29603: EQUAL
29604: AND
29605: IFFALSE 29626
// MinerPlaceMine ( unit , x , y ) ;
29607: LD_VAR 0 2
29611: PPUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: LD_VAR 0 5
29621: PPUSH
29622: CALL 32354 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29626: LD_VAR 0 1
29630: PUSH
29631: LD_INT 251
29633: EQUAL
29634: PUSH
29635: LD_VAR 0 2
29639: PPUSH
29640: CALL_OW 264
29644: PUSH
29645: LD_EXP 136
29649: EQUAL
29650: AND
29651: IFFALSE 29672
// MinerDetonateMine ( unit , x , y ) ;
29653: LD_VAR 0 2
29657: PPUSH
29658: LD_VAR 0 4
29662: PPUSH
29663: LD_VAR 0 5
29667: PPUSH
29668: CALL 32631 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29672: LD_VAR 0 1
29676: PUSH
29677: LD_INT 252
29679: EQUAL
29680: PUSH
29681: LD_VAR 0 2
29685: PPUSH
29686: CALL_OW 264
29690: PUSH
29691: LD_EXP 136
29695: EQUAL
29696: AND
29697: IFFALSE 29718
// MinerCreateMinefield ( unit , x , y ) ;
29699: LD_VAR 0 2
29703: PPUSH
29704: LD_VAR 0 4
29708: PPUSH
29709: LD_VAR 0 5
29713: PPUSH
29714: CALL 33048 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29718: LD_VAR 0 1
29722: PUSH
29723: LD_INT 253
29725: EQUAL
29726: PUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 257
29736: PUSH
29737: LD_INT 5
29739: EQUAL
29740: AND
29741: IFFALSE 29762
// ComBinocular ( unit , x , y ) ;
29743: LD_VAR 0 2
29747: PPUSH
29748: LD_VAR 0 4
29752: PPUSH
29753: LD_VAR 0 5
29757: PPUSH
29758: CALL 33419 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29762: LD_VAR 0 1
29766: PUSH
29767: LD_INT 254
29769: EQUAL
29770: PUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: CALL_OW 264
29780: PUSH
29781: LD_EXP 131
29785: EQUAL
29786: AND
29787: PUSH
29788: LD_VAR 0 3
29792: PPUSH
29793: CALL_OW 263
29797: PUSH
29798: LD_INT 3
29800: EQUAL
29801: AND
29802: IFFALSE 29818
// HackDestroyVehicle ( unit , selectedUnit ) ;
29804: LD_VAR 0 2
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: CALL 31714 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29818: LD_VAR 0 1
29822: PUSH
29823: LD_INT 255
29825: EQUAL
29826: PUSH
29827: LD_VAR 0 2
29831: PPUSH
29832: CALL_OW 264
29836: PUSH
29837: LD_INT 14
29839: PUSH
29840: LD_INT 53
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: IN
29847: AND
29848: PUSH
29849: LD_VAR 0 4
29853: PPUSH
29854: LD_VAR 0 5
29858: PPUSH
29859: CALL_OW 488
29863: AND
29864: IFFALSE 29888
// CutTreeXYR ( unit , x , y , 12 ) ;
29866: LD_VAR 0 2
29870: PPUSH
29871: LD_VAR 0 4
29875: PPUSH
29876: LD_VAR 0 5
29880: PPUSH
29881: LD_INT 12
29883: PPUSH
29884: CALL 30280 0 4
// if cmd = 256 then
29888: LD_VAR 0 1
29892: PUSH
29893: LD_INT 256
29895: EQUAL
29896: IFFALSE 29917
// SetFactoryWaypoint ( unit , x , y ) ;
29898: LD_VAR 0 2
29902: PPUSH
29903: LD_VAR 0 4
29907: PPUSH
29908: LD_VAR 0 5
29912: PPUSH
29913: CALL 29922 0 3
// end ;
29917: LD_VAR 0 6
29921: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29922: LD_INT 0
29924: PPUSH
29925: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29926: LD_VAR 0 1
29930: NOT
29931: PUSH
29932: LD_VAR 0 2
29936: PPUSH
29937: LD_VAR 0 3
29941: PPUSH
29942: CALL_OW 488
29946: NOT
29947: OR
29948: PUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 266
29958: PUSH
29959: LD_INT 3
29961: NONEQUAL
29962: PUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 247
29972: PUSH
29973: LD_INT 1
29975: EQUAL
29976: NOT
29977: AND
29978: OR
29979: IFFALSE 29983
// exit ;
29981: GO 30132
// if GetType ( factory ) = unit_human then
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL_OW 247
29992: PUSH
29993: LD_INT 1
29995: EQUAL
29996: IFFALSE 30013
// factory := IsInUnit ( factory ) ;
29998: LD_ADDR_VAR 0 1
30002: PUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL_OW 310
30012: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL_OW 266
30022: PUSH
30023: LD_INT 3
30025: NONEQUAL
30026: IFFALSE 30030
// exit ;
30028: GO 30132
// if HexInfo ( x , y ) = factory then
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 428
30044: PUSH
30045: LD_VAR 0 1
30049: EQUAL
30050: IFFALSE 30077
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30052: LD_ADDR_EXP 118
30056: PUSH
30057: LD_EXP 118
30061: PPUSH
30062: LD_VAR 0 1
30066: PPUSH
30067: LD_INT 0
30069: PPUSH
30070: CALL_OW 1
30074: ST_TO_ADDR
30075: GO 30128
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30077: LD_ADDR_EXP 118
30081: PUSH
30082: LD_EXP 118
30086: PPUSH
30087: LD_VAR 0 1
30091: PPUSH
30092: LD_VAR 0 1
30096: PPUSH
30097: CALL_OW 255
30101: PUSH
30102: LD_VAR 0 1
30106: PUSH
30107: LD_VAR 0 2
30111: PUSH
30112: LD_VAR 0 3
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: PPUSH
30123: CALL_OW 1
30127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30128: CALL 30137 0 0
// end ;
30132: LD_VAR 0 4
30136: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30141: LD_STRING resetFactoryWaypoint();
30143: PPUSH
30144: CALL_OW 559
// if factoryWaypoints then
30148: LD_EXP 118
30152: IFFALSE 30275
// begin for i := 1 to factoryWaypoints do
30154: LD_ADDR_VAR 0 2
30158: PUSH
30159: DOUBLE
30160: LD_INT 1
30162: DEC
30163: ST_TO_ADDR
30164: LD_EXP 118
30168: PUSH
30169: FOR_TO
30170: IFFALSE 30273
// if factoryWaypoints [ i ] then
30172: LD_EXP 118
30176: PUSH
30177: LD_VAR 0 2
30181: ARRAY
30182: IFFALSE 30271
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
30184: LD_STRING setFactoryWaypointXY(
30186: PUSH
30187: LD_EXP 118
30191: PUSH
30192: LD_VAR 0 2
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: ARRAY
30201: STR
30202: PUSH
30203: LD_STRING ,
30205: STR
30206: PUSH
30207: LD_EXP 118
30211: PUSH
30212: LD_VAR 0 2
30216: ARRAY
30217: PUSH
30218: LD_INT 2
30220: ARRAY
30221: STR
30222: PUSH
30223: LD_STRING ,
30225: STR
30226: PUSH
30227: LD_EXP 118
30231: PUSH
30232: LD_VAR 0 2
30236: ARRAY
30237: PUSH
30238: LD_INT 3
30240: ARRAY
30241: STR
30242: PUSH
30243: LD_STRING ,
30245: STR
30246: PUSH
30247: LD_EXP 118
30251: PUSH
30252: LD_VAR 0 2
30256: ARRAY
30257: PUSH
30258: LD_INT 4
30260: ARRAY
30261: STR
30262: PUSH
30263: LD_STRING )
30265: STR
30266: PPUSH
30267: CALL_OW 559
30271: GO 30169
30273: POP
30274: POP
// end ; end ;
30275: LD_VAR 0 1
30279: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30280: LD_INT 0
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30291: LD_VAR 0 1
30295: NOT
30296: PUSH
30297: LD_VAR 0 2
30301: PPUSH
30302: LD_VAR 0 3
30306: PPUSH
30307: CALL_OW 488
30311: NOT
30312: OR
30313: PUSH
30314: LD_VAR 0 4
30318: NOT
30319: OR
30320: IFFALSE 30324
// exit ;
30322: GO 30664
// list := [ ] ;
30324: LD_ADDR_VAR 0 13
30328: PUSH
30329: EMPTY
30330: ST_TO_ADDR
// if x - r < 0 then
30331: LD_VAR 0 2
30335: PUSH
30336: LD_VAR 0 4
30340: MINUS
30341: PUSH
30342: LD_INT 0
30344: LESS
30345: IFFALSE 30357
// min_x := 0 else
30347: LD_ADDR_VAR 0 7
30351: PUSH
30352: LD_INT 0
30354: ST_TO_ADDR
30355: GO 30373
// min_x := x - r ;
30357: LD_ADDR_VAR 0 7
30361: PUSH
30362: LD_VAR 0 2
30366: PUSH
30367: LD_VAR 0 4
30371: MINUS
30372: ST_TO_ADDR
// if y - r < 0 then
30373: LD_VAR 0 3
30377: PUSH
30378: LD_VAR 0 4
30382: MINUS
30383: PUSH
30384: LD_INT 0
30386: LESS
30387: IFFALSE 30399
// min_y := 0 else
30389: LD_ADDR_VAR 0 8
30393: PUSH
30394: LD_INT 0
30396: ST_TO_ADDR
30397: GO 30415
// min_y := y - r ;
30399: LD_ADDR_VAR 0 8
30403: PUSH
30404: LD_VAR 0 3
30408: PUSH
30409: LD_VAR 0 4
30413: MINUS
30414: ST_TO_ADDR
// max_x := x + r ;
30415: LD_ADDR_VAR 0 9
30419: PUSH
30420: LD_VAR 0 2
30424: PUSH
30425: LD_VAR 0 4
30429: PLUS
30430: ST_TO_ADDR
// max_y := y + r ;
30431: LD_ADDR_VAR 0 10
30435: PUSH
30436: LD_VAR 0 3
30440: PUSH
30441: LD_VAR 0 4
30445: PLUS
30446: ST_TO_ADDR
// for _x = min_x to max_x do
30447: LD_ADDR_VAR 0 11
30451: PUSH
30452: DOUBLE
30453: LD_VAR 0 7
30457: DEC
30458: ST_TO_ADDR
30459: LD_VAR 0 9
30463: PUSH
30464: FOR_TO
30465: IFFALSE 30582
// for _y = min_y to max_y do
30467: LD_ADDR_VAR 0 12
30471: PUSH
30472: DOUBLE
30473: LD_VAR 0 8
30477: DEC
30478: ST_TO_ADDR
30479: LD_VAR 0 10
30483: PUSH
30484: FOR_TO
30485: IFFALSE 30578
// begin if not ValidHex ( _x , _y ) then
30487: LD_VAR 0 11
30491: PPUSH
30492: LD_VAR 0 12
30496: PPUSH
30497: CALL_OW 488
30501: NOT
30502: IFFALSE 30506
// continue ;
30504: GO 30484
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30506: LD_VAR 0 11
30510: PPUSH
30511: LD_VAR 0 12
30515: PPUSH
30516: CALL_OW 351
30520: PUSH
30521: LD_VAR 0 11
30525: PPUSH
30526: LD_VAR 0 12
30530: PPUSH
30531: CALL_OW 554
30535: AND
30536: IFFALSE 30576
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30538: LD_ADDR_VAR 0 13
30542: PUSH
30543: LD_VAR 0 13
30547: PPUSH
30548: LD_VAR 0 13
30552: PUSH
30553: LD_INT 1
30555: PLUS
30556: PPUSH
30557: LD_VAR 0 11
30561: PUSH
30562: LD_VAR 0 12
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PPUSH
30571: CALL_OW 2
30575: ST_TO_ADDR
// end ;
30576: GO 30484
30578: POP
30579: POP
30580: GO 30464
30582: POP
30583: POP
// if not list then
30584: LD_VAR 0 13
30588: NOT
30589: IFFALSE 30593
// exit ;
30591: GO 30664
// for i in list do
30593: LD_ADDR_VAR 0 6
30597: PUSH
30598: LD_VAR 0 13
30602: PUSH
30603: FOR_IN
30604: IFFALSE 30662
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30606: LD_VAR 0 1
30610: PPUSH
30611: LD_STRING M
30613: PUSH
30614: LD_VAR 0 6
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: PUSH
30623: LD_VAR 0 6
30627: PUSH
30628: LD_INT 2
30630: ARRAY
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: PUSH
30653: EMPTY
30654: LIST
30655: PPUSH
30656: CALL_OW 447
30660: GO 30603
30662: POP
30663: POP
// end ;
30664: LD_VAR 0 5
30668: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30669: LD_EXP 119
30673: NOT
30674: IFFALSE 30724
30676: GO 30678
30678: DISABLE
// begin initHack := true ;
30679: LD_ADDR_EXP 119
30683: PUSH
30684: LD_INT 1
30686: ST_TO_ADDR
// hackTanks := [ ] ;
30687: LD_ADDR_EXP 120
30691: PUSH
30692: EMPTY
30693: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30694: LD_ADDR_EXP 121
30698: PUSH
30699: EMPTY
30700: ST_TO_ADDR
// hackLimit := 3 ;
30701: LD_ADDR_EXP 122
30705: PUSH
30706: LD_INT 3
30708: ST_TO_ADDR
// hackDist := 12 ;
30709: LD_ADDR_EXP 123
30713: PUSH
30714: LD_INT 12
30716: ST_TO_ADDR
// hackCounter := [ ] ;
30717: LD_ADDR_EXP 124
30721: PUSH
30722: EMPTY
30723: ST_TO_ADDR
// end ;
30724: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30725: LD_EXP 119
30729: PUSH
30730: LD_INT 34
30732: PUSH
30733: LD_EXP 131
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 69
30746: AND
30747: IFFALSE 31002
30749: GO 30751
30751: DISABLE
30752: LD_INT 0
30754: PPUSH
30755: PPUSH
// begin enable ;
30756: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30757: LD_ADDR_VAR 0 1
30761: PUSH
30762: LD_INT 34
30764: PUSH
30765: LD_EXP 131
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PPUSH
30774: CALL_OW 69
30778: PUSH
30779: FOR_IN
30780: IFFALSE 31000
// begin if not i in hackTanks then
30782: LD_VAR 0 1
30786: PUSH
30787: LD_EXP 120
30791: IN
30792: NOT
30793: IFFALSE 30876
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30795: LD_ADDR_EXP 120
30799: PUSH
30800: LD_EXP 120
30804: PPUSH
30805: LD_EXP 120
30809: PUSH
30810: LD_INT 1
30812: PLUS
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 1
30823: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30824: LD_ADDR_EXP 121
30828: PUSH
30829: LD_EXP 121
30833: PPUSH
30834: LD_EXP 121
30838: PUSH
30839: LD_INT 1
30841: PLUS
30842: PPUSH
30843: EMPTY
30844: PPUSH
30845: CALL_OW 1
30849: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30850: LD_ADDR_EXP 124
30854: PUSH
30855: LD_EXP 124
30859: PPUSH
30860: LD_EXP 124
30864: PUSH
30865: LD_INT 1
30867: PLUS
30868: PPUSH
30869: EMPTY
30870: PPUSH
30871: CALL_OW 1
30875: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30876: LD_VAR 0 1
30880: PPUSH
30881: CALL_OW 302
30885: NOT
30886: IFFALSE 30899
// begin HackUnlinkAll ( i ) ;
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL 31005 0 1
// continue ;
30897: GO 30779
// end ; HackCheckCapturedStatus ( i ) ;
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL 31448 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30908: LD_ADDR_VAR 0 2
30912: PUSH
30913: LD_INT 81
30915: PUSH
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 255
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 33
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 91
30942: PUSH
30943: LD_VAR 0 1
30947: PUSH
30948: LD_EXP 123
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 50
30960: PUSH
30961: EMPTY
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: PPUSH
30970: CALL_OW 69
30974: ST_TO_ADDR
// if not tmp then
30975: LD_VAR 0 2
30979: NOT
30980: IFFALSE 30984
// continue ;
30982: GO 30779
// HackLink ( i , tmp ) ;
30984: LD_VAR 0 1
30988: PPUSH
30989: LD_VAR 0 2
30993: PPUSH
30994: CALL 31141 0 2
// end ;
30998: GO 30779
31000: POP
31001: POP
// end ;
31002: PPOPN 2
31004: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31005: LD_INT 0
31007: PPUSH
31008: PPUSH
31009: PPUSH
// if not hack in hackTanks then
31010: LD_VAR 0 1
31014: PUSH
31015: LD_EXP 120
31019: IN
31020: NOT
31021: IFFALSE 31025
// exit ;
31023: GO 31136
// index := GetElementIndex ( hackTanks , hack ) ;
31025: LD_ADDR_VAR 0 4
31029: PUSH
31030: LD_EXP 120
31034: PPUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL 38941 0 2
31044: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31045: LD_EXP 121
31049: PUSH
31050: LD_VAR 0 4
31054: ARRAY
31055: IFFALSE 31136
// begin for i in hackTanksCaptured [ index ] do
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_EXP 121
31066: PUSH
31067: LD_VAR 0 4
31071: ARRAY
31072: PUSH
31073: FOR_IN
31074: IFFALSE 31100
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31076: LD_VAR 0 3
31080: PUSH
31081: LD_INT 1
31083: ARRAY
31084: PPUSH
31085: LD_VAR 0 3
31089: PUSH
31090: LD_INT 2
31092: ARRAY
31093: PPUSH
31094: CALL_OW 235
31098: GO 31073
31100: POP
31101: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31102: LD_ADDR_EXP 121
31106: PUSH
31107: LD_EXP 121
31111: PPUSH
31112: LD_VAR 0 4
31116: PPUSH
31117: EMPTY
31118: PPUSH
31119: CALL_OW 1
31123: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31124: LD_VAR 0 1
31128: PPUSH
31129: LD_INT 0
31131: PPUSH
31132: CALL_OW 505
// end ; end ;
31136: LD_VAR 0 2
31140: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31141: LD_INT 0
31143: PPUSH
31144: PPUSH
31145: PPUSH
// if not hack in hackTanks or not vehicles then
31146: LD_VAR 0 1
31150: PUSH
31151: LD_EXP 120
31155: IN
31156: NOT
31157: PUSH
31158: LD_VAR 0 2
31162: NOT
31163: OR
31164: IFFALSE 31168
// exit ;
31166: GO 31443
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31168: LD_ADDR_VAR 0 2
31172: PUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: LD_VAR 0 2
31182: PPUSH
31183: LD_INT 1
31185: PPUSH
31186: LD_INT 1
31188: PPUSH
31189: CALL 39591 0 4
31193: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: LD_EXP 120
31203: PPUSH
31204: LD_VAR 0 1
31208: PPUSH
31209: CALL 38941 0 2
31213: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31214: LD_EXP 121
31218: PUSH
31219: LD_VAR 0 5
31223: ARRAY
31224: PUSH
31225: LD_EXP 122
31229: LESS
31230: IFFALSE 31419
// begin for i := 1 to vehicles do
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: DOUBLE
31238: LD_INT 1
31240: DEC
31241: ST_TO_ADDR
31242: LD_VAR 0 2
31246: PUSH
31247: FOR_TO
31248: IFFALSE 31417
// begin if hackTanksCaptured [ index ] = hackLimit then
31250: LD_EXP 121
31254: PUSH
31255: LD_VAR 0 5
31259: ARRAY
31260: PUSH
31261: LD_EXP 122
31265: EQUAL
31266: IFFALSE 31270
// break ;
31268: GO 31417
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31270: LD_ADDR_EXP 124
31274: PUSH
31275: LD_EXP 124
31279: PPUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: LD_EXP 124
31289: PUSH
31290: LD_VAR 0 5
31294: ARRAY
31295: PUSH
31296: LD_INT 1
31298: PLUS
31299: PPUSH
31300: CALL_OW 1
31304: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31305: LD_ADDR_EXP 121
31309: PUSH
31310: LD_EXP 121
31314: PPUSH
31315: LD_VAR 0 5
31319: PUSH
31320: LD_EXP 121
31324: PUSH
31325: LD_VAR 0 5
31329: ARRAY
31330: PUSH
31331: LD_INT 1
31333: PLUS
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PPUSH
31339: LD_VAR 0 2
31343: PUSH
31344: LD_VAR 0 4
31348: ARRAY
31349: PUSH
31350: LD_VAR 0 2
31354: PUSH
31355: LD_VAR 0 4
31359: ARRAY
31360: PPUSH
31361: CALL_OW 255
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PPUSH
31370: CALL 39156 0 3
31374: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31375: LD_VAR 0 2
31379: PUSH
31380: LD_VAR 0 4
31384: ARRAY
31385: PPUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 255
31395: PPUSH
31396: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31400: LD_VAR 0 2
31404: PUSH
31405: LD_VAR 0 4
31409: ARRAY
31410: PPUSH
31411: CALL_OW 141
// end ;
31415: GO 31247
31417: POP
31418: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31419: LD_VAR 0 1
31423: PPUSH
31424: LD_EXP 121
31428: PUSH
31429: LD_VAR 0 5
31433: ARRAY
31434: PUSH
31435: LD_INT 0
31437: PLUS
31438: PPUSH
31439: CALL_OW 505
// end ;
31443: LD_VAR 0 3
31447: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
31452: PPUSH
31453: PPUSH
// if not hack in hackTanks then
31454: LD_VAR 0 1
31458: PUSH
31459: LD_EXP 120
31463: IN
31464: NOT
31465: IFFALSE 31469
// exit ;
31467: GO 31709
// index := GetElementIndex ( hackTanks , hack ) ;
31469: LD_ADDR_VAR 0 4
31473: PUSH
31474: LD_EXP 120
31478: PPUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL 38941 0 2
31488: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: DOUBLE
31495: LD_EXP 121
31499: PUSH
31500: LD_VAR 0 4
31504: ARRAY
31505: INC
31506: ST_TO_ADDR
31507: LD_INT 1
31509: PUSH
31510: FOR_DOWNTO
31511: IFFALSE 31683
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_EXP 121
31522: PUSH
31523: LD_VAR 0 4
31527: ARRAY
31528: PUSH
31529: LD_VAR 0 3
31533: ARRAY
31534: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31535: LD_VAR 0 5
31539: PUSH
31540: LD_INT 1
31542: ARRAY
31543: PPUSH
31544: CALL_OW 302
31548: NOT
31549: PUSH
31550: LD_VAR 0 5
31554: PUSH
31555: LD_INT 1
31557: ARRAY
31558: PPUSH
31559: CALL_OW 255
31563: PUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 255
31573: NONEQUAL
31574: OR
31575: IFFALSE 31681
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31577: LD_VAR 0 5
31581: PUSH
31582: LD_INT 1
31584: ARRAY
31585: PPUSH
31586: CALL_OW 305
31590: PUSH
31591: LD_VAR 0 5
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: CALL_OW 255
31604: PUSH
31605: LD_VAR 0 1
31609: PPUSH
31610: CALL_OW 255
31614: EQUAL
31615: AND
31616: IFFALSE 31640
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31618: LD_VAR 0 5
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: LD_VAR 0 5
31631: PUSH
31632: LD_INT 2
31634: ARRAY
31635: PPUSH
31636: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31640: LD_ADDR_EXP 121
31644: PUSH
31645: LD_EXP 121
31649: PPUSH
31650: LD_VAR 0 4
31654: PPUSH
31655: LD_EXP 121
31659: PUSH
31660: LD_VAR 0 4
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 3
31670: PPUSH
31671: CALL_OW 3
31675: PPUSH
31676: CALL_OW 1
31680: ST_TO_ADDR
// end ; end ;
31681: GO 31510
31683: POP
31684: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31685: LD_VAR 0 1
31689: PPUSH
31690: LD_EXP 121
31694: PUSH
31695: LD_VAR 0 4
31699: ARRAY
31700: PUSH
31701: LD_INT 0
31703: PLUS
31704: PPUSH
31705: CALL_OW 505
// end ;
31709: LD_VAR 0 2
31713: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31714: LD_INT 0
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
// if not hack in hackTanks then
31720: LD_VAR 0 1
31724: PUSH
31725: LD_EXP 120
31729: IN
31730: NOT
31731: IFFALSE 31735
// exit ;
31733: GO 31820
// index := GetElementIndex ( hackTanks , hack ) ;
31735: LD_ADDR_VAR 0 5
31739: PUSH
31740: LD_EXP 120
31744: PPUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL 38941 0 2
31754: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31755: LD_ADDR_VAR 0 4
31759: PUSH
31760: DOUBLE
31761: LD_INT 1
31763: DEC
31764: ST_TO_ADDR
31765: LD_EXP 121
31769: PUSH
31770: LD_VAR 0 5
31774: ARRAY
31775: PUSH
31776: FOR_TO
31777: IFFALSE 31818
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31779: LD_EXP 121
31783: PUSH
31784: LD_VAR 0 5
31788: ARRAY
31789: PUSH
31790: LD_VAR 0 4
31794: ARRAY
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PUSH
31800: LD_VAR 0 2
31804: EQUAL
31805: IFFALSE 31816
// KillUnit ( vehicle ) ;
31807: LD_VAR 0 2
31811: PPUSH
31812: CALL_OW 66
31816: GO 31776
31818: POP
31819: POP
// end ;
31820: LD_VAR 0 3
31824: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31825: LD_EXP 125
31829: NOT
31830: IFFALSE 31865
31832: GO 31834
31834: DISABLE
// begin initMiner := true ;
31835: LD_ADDR_EXP 125
31839: PUSH
31840: LD_INT 1
31842: ST_TO_ADDR
// minersList := [ ] ;
31843: LD_ADDR_EXP 126
31847: PUSH
31848: EMPTY
31849: ST_TO_ADDR
// minerMinesList := [ ] ;
31850: LD_ADDR_EXP 127
31854: PUSH
31855: EMPTY
31856: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31857: LD_ADDR_EXP 128
31861: PUSH
31862: LD_INT 5
31864: ST_TO_ADDR
// end ;
31865: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31866: LD_EXP 125
31870: PUSH
31871: LD_INT 34
31873: PUSH
31874: LD_EXP 136
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: AND
31888: IFFALSE 32351
31890: GO 31892
31892: DISABLE
31893: LD_INT 0
31895: PPUSH
31896: PPUSH
31897: PPUSH
31898: PPUSH
// begin enable ;
31899: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31900: LD_ADDR_VAR 0 1
31904: PUSH
31905: LD_INT 34
31907: PUSH
31908: LD_EXP 136
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PPUSH
31917: CALL_OW 69
31921: PUSH
31922: FOR_IN
31923: IFFALSE 31995
// begin if not i in minersList then
31925: LD_VAR 0 1
31929: PUSH
31930: LD_EXP 126
31934: IN
31935: NOT
31936: IFFALSE 31993
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31938: LD_ADDR_EXP 126
31942: PUSH
31943: LD_EXP 126
31947: PPUSH
31948: LD_EXP 126
31952: PUSH
31953: LD_INT 1
31955: PLUS
31956: PPUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 1
31966: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31967: LD_ADDR_EXP 127
31971: PUSH
31972: LD_EXP 127
31976: PPUSH
31977: LD_EXP 127
31981: PUSH
31982: LD_INT 1
31984: PLUS
31985: PPUSH
31986: EMPTY
31987: PPUSH
31988: CALL_OW 1
31992: ST_TO_ADDR
// end end ;
31993: GO 31922
31995: POP
31996: POP
// for i := minerMinesList downto 1 do
31997: LD_ADDR_VAR 0 1
32001: PUSH
32002: DOUBLE
32003: LD_EXP 127
32007: INC
32008: ST_TO_ADDR
32009: LD_INT 1
32011: PUSH
32012: FOR_DOWNTO
32013: IFFALSE 32349
// begin if IsLive ( minersList [ i ] ) then
32015: LD_EXP 126
32019: PUSH
32020: LD_VAR 0 1
32024: ARRAY
32025: PPUSH
32026: CALL_OW 300
32030: IFFALSE 32058
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32032: LD_EXP 126
32036: PUSH
32037: LD_VAR 0 1
32041: ARRAY
32042: PPUSH
32043: LD_EXP 127
32047: PUSH
32048: LD_VAR 0 1
32052: ARRAY
32053: PPUSH
32054: CALL_OW 505
// if not minerMinesList [ i ] then
32058: LD_EXP 127
32062: PUSH
32063: LD_VAR 0 1
32067: ARRAY
32068: NOT
32069: IFFALSE 32073
// continue ;
32071: GO 32012
// for j := minerMinesList [ i ] downto 1 do
32073: LD_ADDR_VAR 0 2
32077: PUSH
32078: DOUBLE
32079: LD_EXP 127
32083: PUSH
32084: LD_VAR 0 1
32088: ARRAY
32089: INC
32090: ST_TO_ADDR
32091: LD_INT 1
32093: PUSH
32094: FOR_DOWNTO
32095: IFFALSE 32345
// begin side := GetSide ( minersList [ i ] ) ;
32097: LD_ADDR_VAR 0 3
32101: PUSH
32102: LD_EXP 126
32106: PUSH
32107: LD_VAR 0 1
32111: ARRAY
32112: PPUSH
32113: CALL_OW 255
32117: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32118: LD_ADDR_VAR 0 4
32122: PUSH
32123: LD_EXP 127
32127: PUSH
32128: LD_VAR 0 1
32132: ARRAY
32133: PUSH
32134: LD_VAR 0 2
32138: ARRAY
32139: PUSH
32140: LD_INT 1
32142: ARRAY
32143: PPUSH
32144: LD_EXP 127
32148: PUSH
32149: LD_VAR 0 1
32153: ARRAY
32154: PUSH
32155: LD_VAR 0 2
32159: ARRAY
32160: PUSH
32161: LD_INT 2
32163: ARRAY
32164: PPUSH
32165: CALL_OW 428
32169: ST_TO_ADDR
// if not tmp then
32170: LD_VAR 0 4
32174: NOT
32175: IFFALSE 32179
// continue ;
32177: GO 32094
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32179: LD_VAR 0 4
32183: PUSH
32184: LD_INT 81
32186: PUSH
32187: LD_VAR 0 3
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PPUSH
32196: CALL_OW 69
32200: IN
32201: PUSH
32202: LD_EXP 127
32206: PUSH
32207: LD_VAR 0 1
32211: ARRAY
32212: PUSH
32213: LD_VAR 0 2
32217: ARRAY
32218: PUSH
32219: LD_INT 1
32221: ARRAY
32222: PPUSH
32223: LD_EXP 127
32227: PUSH
32228: LD_VAR 0 1
32232: ARRAY
32233: PUSH
32234: LD_VAR 0 2
32238: ARRAY
32239: PUSH
32240: LD_INT 2
32242: ARRAY
32243: PPUSH
32244: CALL_OW 458
32248: AND
32249: IFFALSE 32343
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32251: LD_EXP 127
32255: PUSH
32256: LD_VAR 0 1
32260: ARRAY
32261: PUSH
32262: LD_VAR 0 2
32266: ARRAY
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PPUSH
32272: LD_EXP 127
32276: PUSH
32277: LD_VAR 0 1
32281: ARRAY
32282: PUSH
32283: LD_VAR 0 2
32287: ARRAY
32288: PUSH
32289: LD_INT 2
32291: ARRAY
32292: PPUSH
32293: LD_VAR 0 3
32297: PPUSH
32298: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32302: LD_ADDR_EXP 127
32306: PUSH
32307: LD_EXP 127
32311: PPUSH
32312: LD_VAR 0 1
32316: PPUSH
32317: LD_EXP 127
32321: PUSH
32322: LD_VAR 0 1
32326: ARRAY
32327: PPUSH
32328: LD_VAR 0 2
32332: PPUSH
32333: CALL_OW 3
32337: PPUSH
32338: CALL_OW 1
32342: ST_TO_ADDR
// end ; end ;
32343: GO 32094
32345: POP
32346: POP
// end ;
32347: GO 32012
32349: POP
32350: POP
// end ;
32351: PPOPN 4
32353: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32354: LD_INT 0
32356: PPUSH
32357: PPUSH
// result := false ;
32358: LD_ADDR_VAR 0 4
32362: PUSH
32363: LD_INT 0
32365: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 264
32375: PUSH
32376: LD_EXP 136
32380: EQUAL
32381: NOT
32382: IFFALSE 32386
// exit ;
32384: GO 32626
// index := GetElementIndex ( minersList , unit ) ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: LD_EXP 126
32395: PPUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: CALL 38941 0 2
32405: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32406: LD_EXP 127
32410: PUSH
32411: LD_VAR 0 5
32415: ARRAY
32416: PUSH
32417: LD_EXP 128
32421: GREATEREQUAL
32422: IFFALSE 32426
// exit ;
32424: GO 32626
// ComMoveXY ( unit , x , y ) ;
32426: LD_VAR 0 1
32430: PPUSH
32431: LD_VAR 0 2
32435: PPUSH
32436: LD_VAR 0 3
32440: PPUSH
32441: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32445: LD_INT 35
32447: PPUSH
32448: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: CALL 69660 0 3
32471: NOT
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 314
32482: AND
32483: IFFALSE 32487
// exit ;
32485: GO 32626
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32487: LD_VAR 0 2
32491: PPUSH
32492: LD_VAR 0 3
32496: PPUSH
32497: CALL_OW 428
32501: PUSH
32502: LD_VAR 0 1
32506: EQUAL
32507: PUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 314
32517: NOT
32518: AND
32519: IFFALSE 32445
// PlaySoundXY ( x , y , PlantMine ) ;
32521: LD_VAR 0 2
32525: PPUSH
32526: LD_VAR 0 3
32530: PPUSH
32531: LD_STRING PlantMine
32533: PPUSH
32534: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32538: LD_VAR 0 2
32542: PPUSH
32543: LD_VAR 0 3
32547: PPUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 255
32557: PPUSH
32558: LD_INT 0
32560: PPUSH
32561: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32565: LD_ADDR_EXP 127
32569: PUSH
32570: LD_EXP 127
32574: PPUSH
32575: LD_VAR 0 5
32579: PUSH
32580: LD_EXP 127
32584: PUSH
32585: LD_VAR 0 5
32589: ARRAY
32590: PUSH
32591: LD_INT 1
32593: PLUS
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: LD_VAR 0 2
32603: PUSH
32604: LD_VAR 0 3
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PPUSH
32613: CALL 39156 0 3
32617: ST_TO_ADDR
// result := true ;
32618: LD_ADDR_VAR 0 4
32622: PUSH
32623: LD_INT 1
32625: ST_TO_ADDR
// end ;
32626: LD_VAR 0 4
32630: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
32635: PPUSH
// if not unit in minersList then
32636: LD_VAR 0 1
32640: PUSH
32641: LD_EXP 126
32645: IN
32646: NOT
32647: IFFALSE 32651
// exit ;
32649: GO 33043
// index := GetElementIndex ( minersList , unit ) ;
32651: LD_ADDR_VAR 0 6
32655: PUSH
32656: LD_EXP 126
32660: PPUSH
32661: LD_VAR 0 1
32665: PPUSH
32666: CALL 38941 0 2
32670: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: DOUBLE
32677: LD_EXP 127
32681: PUSH
32682: LD_VAR 0 6
32686: ARRAY
32687: INC
32688: ST_TO_ADDR
32689: LD_INT 1
32691: PUSH
32692: FOR_DOWNTO
32693: IFFALSE 32854
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32695: LD_EXP 127
32699: PUSH
32700: LD_VAR 0 6
32704: ARRAY
32705: PUSH
32706: LD_VAR 0 5
32710: ARRAY
32711: PUSH
32712: LD_INT 1
32714: ARRAY
32715: PUSH
32716: LD_VAR 0 2
32720: EQUAL
32721: PUSH
32722: LD_EXP 127
32726: PUSH
32727: LD_VAR 0 6
32731: ARRAY
32732: PUSH
32733: LD_VAR 0 5
32737: ARRAY
32738: PUSH
32739: LD_INT 2
32741: ARRAY
32742: PUSH
32743: LD_VAR 0 3
32747: EQUAL
32748: AND
32749: IFFALSE 32852
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32751: LD_EXP 127
32755: PUSH
32756: LD_VAR 0 6
32760: ARRAY
32761: PUSH
32762: LD_VAR 0 5
32766: ARRAY
32767: PUSH
32768: LD_INT 1
32770: ARRAY
32771: PPUSH
32772: LD_EXP 127
32776: PUSH
32777: LD_VAR 0 6
32781: ARRAY
32782: PUSH
32783: LD_VAR 0 5
32787: ARRAY
32788: PUSH
32789: LD_INT 2
32791: ARRAY
32792: PPUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 255
32802: PPUSH
32803: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32807: LD_ADDR_EXP 127
32811: PUSH
32812: LD_EXP 127
32816: PPUSH
32817: LD_VAR 0 6
32821: PPUSH
32822: LD_EXP 127
32826: PUSH
32827: LD_VAR 0 6
32831: ARRAY
32832: PPUSH
32833: LD_VAR 0 5
32837: PPUSH
32838: CALL_OW 3
32842: PPUSH
32843: CALL_OW 1
32847: ST_TO_ADDR
// exit ;
32848: POP
32849: POP
32850: GO 33043
// end ; end ;
32852: GO 32692
32854: POP
32855: POP
// for i := minerMinesList [ index ] downto 1 do
32856: LD_ADDR_VAR 0 5
32860: PUSH
32861: DOUBLE
32862: LD_EXP 127
32866: PUSH
32867: LD_VAR 0 6
32871: ARRAY
32872: INC
32873: ST_TO_ADDR
32874: LD_INT 1
32876: PUSH
32877: FOR_DOWNTO
32878: IFFALSE 33041
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32880: LD_EXP 127
32884: PUSH
32885: LD_VAR 0 6
32889: ARRAY
32890: PUSH
32891: LD_VAR 0 5
32895: ARRAY
32896: PUSH
32897: LD_INT 1
32899: ARRAY
32900: PPUSH
32901: LD_EXP 127
32905: PUSH
32906: LD_VAR 0 6
32910: ARRAY
32911: PUSH
32912: LD_VAR 0 5
32916: ARRAY
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: PPUSH
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_VAR 0 3
32931: PPUSH
32932: CALL_OW 298
32936: PUSH
32937: LD_INT 6
32939: LESS
32940: IFFALSE 33039
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32942: LD_EXP 127
32946: PUSH
32947: LD_VAR 0 6
32951: ARRAY
32952: PUSH
32953: LD_VAR 0 5
32957: ARRAY
32958: PUSH
32959: LD_INT 1
32961: ARRAY
32962: PPUSH
32963: LD_EXP 127
32967: PUSH
32968: LD_VAR 0 6
32972: ARRAY
32973: PUSH
32974: LD_VAR 0 5
32978: ARRAY
32979: PUSH
32980: LD_INT 2
32982: ARRAY
32983: PPUSH
32984: LD_VAR 0 1
32988: PPUSH
32989: CALL_OW 255
32993: PPUSH
32994: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32998: LD_ADDR_EXP 127
33002: PUSH
33003: LD_EXP 127
33007: PPUSH
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_EXP 127
33017: PUSH
33018: LD_VAR 0 6
33022: ARRAY
33023: PPUSH
33024: LD_VAR 0 5
33028: PPUSH
33029: CALL_OW 3
33033: PPUSH
33034: CALL_OW 1
33038: ST_TO_ADDR
// end ; end ;
33039: GO 32877
33041: POP
33042: POP
// end ;
33043: LD_VAR 0 4
33047: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 264
33068: PUSH
33069: LD_EXP 136
33073: EQUAL
33074: NOT
33075: PUSH
33076: LD_VAR 0 1
33080: PUSH
33081: LD_EXP 126
33085: IN
33086: NOT
33087: OR
33088: IFFALSE 33092
// exit ;
33090: GO 33414
// index := GetElementIndex ( minersList , unit ) ;
33092: LD_ADDR_VAR 0 6
33096: PUSH
33097: LD_EXP 126
33101: PPUSH
33102: LD_VAR 0 1
33106: PPUSH
33107: CALL 38941 0 2
33111: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33112: LD_ADDR_VAR 0 8
33116: PUSH
33117: LD_EXP 128
33121: PUSH
33122: LD_EXP 127
33126: PUSH
33127: LD_VAR 0 6
33131: ARRAY
33132: MINUS
33133: ST_TO_ADDR
// if not minesFreeAmount then
33134: LD_VAR 0 8
33138: NOT
33139: IFFALSE 33143
// exit ;
33141: GO 33414
// tmp := [ ] ;
33143: LD_ADDR_VAR 0 7
33147: PUSH
33148: EMPTY
33149: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33150: LD_ADDR_VAR 0 5
33154: PUSH
33155: DOUBLE
33156: LD_INT 1
33158: DEC
33159: ST_TO_ADDR
33160: LD_VAR 0 8
33164: PUSH
33165: FOR_TO
33166: IFFALSE 33361
// begin _d := rand ( 0 , 5 ) ;
33168: LD_ADDR_VAR 0 11
33172: PUSH
33173: LD_INT 0
33175: PPUSH
33176: LD_INT 5
33178: PPUSH
33179: CALL_OW 12
33183: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33184: LD_ADDR_VAR 0 12
33188: PUSH
33189: LD_INT 2
33191: PPUSH
33192: LD_INT 6
33194: PPUSH
33195: CALL_OW 12
33199: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33200: LD_ADDR_VAR 0 9
33204: PUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 11
33214: PPUSH
33215: LD_VAR 0 12
33219: PPUSH
33220: CALL_OW 272
33224: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33225: LD_ADDR_VAR 0 10
33229: PUSH
33230: LD_VAR 0 3
33234: PPUSH
33235: LD_VAR 0 11
33239: PPUSH
33240: LD_VAR 0 12
33244: PPUSH
33245: CALL_OW 273
33249: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33250: LD_VAR 0 9
33254: PPUSH
33255: LD_VAR 0 10
33259: PPUSH
33260: CALL_OW 488
33264: PUSH
33265: LD_VAR 0 9
33269: PUSH
33270: LD_VAR 0 10
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_VAR 0 7
33283: IN
33284: NOT
33285: AND
33286: PUSH
33287: LD_VAR 0 9
33291: PPUSH
33292: LD_VAR 0 10
33296: PPUSH
33297: CALL_OW 458
33301: NOT
33302: AND
33303: IFFALSE 33345
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33305: LD_ADDR_VAR 0 7
33309: PUSH
33310: LD_VAR 0 7
33314: PPUSH
33315: LD_VAR 0 7
33319: PUSH
33320: LD_INT 1
33322: PLUS
33323: PPUSH
33324: LD_VAR 0 9
33328: PUSH
33329: LD_VAR 0 10
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PPUSH
33338: CALL_OW 1
33342: ST_TO_ADDR
33343: GO 33359
// i := i - 1 ;
33345: LD_ADDR_VAR 0 5
33349: PUSH
33350: LD_VAR 0 5
33354: PUSH
33355: LD_INT 1
33357: MINUS
33358: ST_TO_ADDR
// end ;
33359: GO 33165
33361: POP
33362: POP
// for i in tmp do
33363: LD_ADDR_VAR 0 5
33367: PUSH
33368: LD_VAR 0 7
33372: PUSH
33373: FOR_IN
33374: IFFALSE 33412
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33376: LD_VAR 0 1
33380: PPUSH
33381: LD_VAR 0 5
33385: PUSH
33386: LD_INT 1
33388: ARRAY
33389: PPUSH
33390: LD_VAR 0 5
33394: PUSH
33395: LD_INT 2
33397: ARRAY
33398: PPUSH
33399: CALL 32354 0 3
33403: NOT
33404: IFFALSE 33410
// exit ;
33406: POP
33407: POP
33408: GO 33414
33410: GO 33373
33412: POP
33413: POP
// end ;
33414: LD_VAR 0 4
33418: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33419: LD_INT 0
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
33427: PPUSH
// if not GetClass ( unit ) = class_sniper then
33428: LD_VAR 0 1
33432: PPUSH
33433: CALL_OW 257
33437: PUSH
33438: LD_INT 5
33440: EQUAL
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33834
// dist := 8 ;
33446: LD_ADDR_VAR 0 5
33450: PUSH
33451: LD_INT 8
33453: ST_TO_ADDR
// viewRange := 12 ;
33454: LD_ADDR_VAR 0 7
33458: PUSH
33459: LD_INT 12
33461: ST_TO_ADDR
// side := GetSide ( unit ) ;
33462: LD_ADDR_VAR 0 6
33466: PUSH
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 255
33476: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33477: LD_INT 61
33479: PPUSH
33480: LD_VAR 0 6
33484: PPUSH
33485: CALL_OW 321
33489: PUSH
33490: LD_INT 2
33492: EQUAL
33493: IFFALSE 33503
// viewRange := 16 ;
33495: LD_ADDR_VAR 0 7
33499: PUSH
33500: LD_INT 16
33502: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33503: LD_VAR 0 1
33507: PPUSH
33508: LD_VAR 0 2
33512: PPUSH
33513: LD_VAR 0 3
33517: PPUSH
33518: CALL_OW 297
33522: PUSH
33523: LD_VAR 0 5
33527: GREATER
33528: IFFALSE 33607
// begin ComMoveXY ( unit , x , y ) ;
33530: LD_VAR 0 1
33534: PPUSH
33535: LD_VAR 0 2
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33549: LD_INT 35
33551: PPUSH
33552: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_VAR 0 2
33565: PPUSH
33566: LD_VAR 0 3
33570: PPUSH
33571: CALL 69660 0 3
33575: NOT
33576: IFFALSE 33580
// exit ;
33578: GO 33834
// until GetDistUnitXY ( unit , x , y ) < dist ;
33580: LD_VAR 0 1
33584: PPUSH
33585: LD_VAR 0 2
33589: PPUSH
33590: LD_VAR 0 3
33594: PPUSH
33595: CALL_OW 297
33599: PUSH
33600: LD_VAR 0 5
33604: LESS
33605: IFFALSE 33549
// end ; ComTurnXY ( unit , x , y ) ;
33607: LD_VAR 0 1
33611: PPUSH
33612: LD_VAR 0 2
33616: PPUSH
33617: LD_VAR 0 3
33621: PPUSH
33622: CALL_OW 118
// wait ( 5 ) ;
33626: LD_INT 5
33628: PPUSH
33629: CALL_OW 67
// _d := GetDir ( unit ) ;
33633: LD_ADDR_VAR 0 10
33637: PUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL_OW 254
33647: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33648: LD_ADDR_VAR 0 8
33652: PUSH
33653: LD_VAR 0 1
33657: PPUSH
33658: CALL_OW 250
33662: PPUSH
33663: LD_VAR 0 10
33667: PPUSH
33668: LD_VAR 0 5
33672: PPUSH
33673: CALL_OW 272
33677: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_VAR 0 1
33687: PPUSH
33688: CALL_OW 251
33692: PPUSH
33693: LD_VAR 0 10
33697: PPUSH
33698: LD_VAR 0 5
33702: PPUSH
33703: CALL_OW 273
33707: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33708: LD_VAR 0 8
33712: PPUSH
33713: LD_VAR 0 9
33717: PPUSH
33718: CALL_OW 488
33722: NOT
33723: IFFALSE 33727
// exit ;
33725: GO 33834
// ComAnimCustom ( unit , 1 ) ;
33727: LD_VAR 0 1
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33739: LD_VAR 0 8
33743: PPUSH
33744: LD_VAR 0 9
33748: PPUSH
33749: LD_VAR 0 6
33753: PPUSH
33754: LD_VAR 0 7
33758: PPUSH
33759: CALL_OW 330
// repeat wait ( 1 ) ;
33763: LD_INT 1
33765: PPUSH
33766: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33770: LD_VAR 0 1
33774: PPUSH
33775: CALL_OW 316
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 314
33789: OR
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 302
33800: NOT
33801: OR
33802: PUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 301
33812: OR
33813: IFFALSE 33763
// RemoveSeeing ( _x , _y , side ) ;
33815: LD_VAR 0 8
33819: PPUSH
33820: LD_VAR 0 9
33824: PPUSH
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 331
// end ; end_of_file
33834: LD_VAR 0 4
33838: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33839: LD_VAR 0 1
33843: PUSH
33844: LD_INT 200
33846: DOUBLE
33847: GREATEREQUAL
33848: IFFALSE 33856
33850: LD_INT 299
33852: DOUBLE
33853: LESSEQUAL
33854: IFTRUE 33858
33856: GO 33890
33858: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33859: LD_VAR 0 1
33863: PPUSH
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: LD_VAR 0 4
33878: PPUSH
33879: LD_VAR 0 5
33883: PPUSH
33884: CALL 29577 0 5
33888: GO 33967
33890: LD_INT 300
33892: DOUBLE
33893: GREATEREQUAL
33894: IFFALSE 33902
33896: LD_INT 399
33898: DOUBLE
33899: LESSEQUAL
33900: IFTRUE 33904
33902: GO 33966
33904: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33905: LD_VAR 0 1
33909: PPUSH
33910: LD_VAR 0 2
33914: PPUSH
33915: LD_VAR 0 3
33919: PPUSH
33920: LD_VAR 0 4
33924: PPUSH
33925: LD_VAR 0 5
33929: PPUSH
33930: LD_VAR 0 6
33934: PPUSH
33935: LD_VAR 0 7
33939: PPUSH
33940: LD_VAR 0 8
33944: PPUSH
33945: LD_VAR 0 9
33949: PPUSH
33950: LD_VAR 0 10
33954: PPUSH
33955: LD_VAR 0 11
33959: PPUSH
33960: CALL 27219 0 11
33964: GO 33967
33966: POP
// end ;
33967: PPOPN 11
33969: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33970: LD_VAR 0 1
33974: PPUSH
33975: LD_VAR 0 2
33979: PPUSH
33980: LD_VAR 0 3
33984: PPUSH
33985: LD_VAR 0 4
33989: PPUSH
33990: LD_VAR 0 5
33994: PPUSH
33995: CALL 29313 0 5
// end ; end_of_file end_of_file
33999: PPOPN 5
34001: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34002: LD_INT 0
34004: PPUSH
// ar_miner := 81 ;
34005: LD_ADDR_EXP 136
34009: PUSH
34010: LD_INT 81
34012: ST_TO_ADDR
// ar_crane := 88 ;
34013: LD_ADDR_EXP 135
34017: PUSH
34018: LD_INT 88
34020: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34021: LD_ADDR_EXP 130
34025: PUSH
34026: LD_INT 89
34028: ST_TO_ADDR
// us_hack := 99 ;
34029: LD_ADDR_EXP 131
34033: PUSH
34034: LD_INT 99
34036: ST_TO_ADDR
// us_artillery := 97 ;
34037: LD_ADDR_EXP 132
34041: PUSH
34042: LD_INT 97
34044: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34045: LD_ADDR_EXP 133
34049: PUSH
34050: LD_INT 91
34052: ST_TO_ADDR
// ar_mortar := 92 ;
34053: LD_ADDR_EXP 134
34057: PUSH
34058: LD_INT 92
34060: ST_TO_ADDR
// ru_radar := 98 ;
34061: LD_ADDR_EXP 129
34065: PUSH
34066: LD_INT 98
34068: ST_TO_ADDR
// tech_Artillery := 80 ;
34069: LD_ADDR_EXP 137
34073: PUSH
34074: LD_INT 80
34076: ST_TO_ADDR
// tech_RadMat := 81 ;
34077: LD_ADDR_EXP 138
34081: PUSH
34082: LD_INT 81
34084: ST_TO_ADDR
// tech_BasicTools := 82 ;
34085: LD_ADDR_EXP 139
34089: PUSH
34090: LD_INT 82
34092: ST_TO_ADDR
// tech_Cargo := 83 ;
34093: LD_ADDR_EXP 140
34097: PUSH
34098: LD_INT 83
34100: ST_TO_ADDR
// tech_Track := 84 ;
34101: LD_ADDR_EXP 141
34105: PUSH
34106: LD_INT 84
34108: ST_TO_ADDR
// tech_Crane := 85 ;
34109: LD_ADDR_EXP 142
34113: PUSH
34114: LD_INT 85
34116: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34117: LD_ADDR_EXP 143
34121: PUSH
34122: LD_INT 86
34124: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34125: LD_ADDR_EXP 144
34129: PUSH
34130: LD_INT 87
34132: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
34133: LD_ADDR_EXP 145
34137: PUSH
34138: LD_INT 88
34140: ST_TO_ADDR
// class_mastodont := 31 ;
34141: LD_ADDR_EXP 146
34145: PUSH
34146: LD_INT 31
34148: ST_TO_ADDR
// class_horse := 21 ;
34149: LD_ADDR_EXP 147
34153: PUSH
34154: LD_INT 21
34156: ST_TO_ADDR
// end ;
34157: LD_VAR 0 1
34161: RET
// every 1 do
34162: GO 34164
34164: DISABLE
// InitGlobalVariables ; end_of_file
34165: CALL 34002 0 0
34169: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// if exist_mode then
34174: LD_VAR 0 2
34178: IFFALSE 34203
// unit := CreateCharacter ( prefix & ident ) else
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_VAR 0 3
34189: PUSH
34190: LD_VAR 0 1
34194: STR
34195: PPUSH
34196: CALL_OW 34
34200: ST_TO_ADDR
34201: GO 34218
// unit := NewCharacter ( ident ) ;
34203: LD_ADDR_VAR 0 5
34207: PUSH
34208: LD_VAR 0 1
34212: PPUSH
34213: CALL_OW 25
34217: ST_TO_ADDR
// result := unit ;
34218: LD_ADDR_VAR 0 4
34222: PUSH
34223: LD_VAR 0 5
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 4
34232: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
// if not side or not nation then
34237: LD_VAR 0 1
34241: NOT
34242: PUSH
34243: LD_VAR 0 2
34247: NOT
34248: OR
34249: IFFALSE 34253
// exit ;
34251: GO 35021
// case nation of nation_american :
34253: LD_VAR 0 2
34257: PUSH
34258: LD_INT 1
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34480
34266: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34267: LD_ADDR_VAR 0 4
34271: PUSH
34272: LD_INT 35
34274: PUSH
34275: LD_INT 45
34277: PUSH
34278: LD_INT 46
34280: PUSH
34281: LD_INT 47
34283: PUSH
34284: LD_INT 82
34286: PUSH
34287: LD_INT 83
34289: PUSH
34290: LD_INT 84
34292: PUSH
34293: LD_INT 85
34295: PUSH
34296: LD_INT 86
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 6
34307: PUSH
34308: LD_INT 15
34310: PUSH
34311: LD_INT 16
34313: PUSH
34314: LD_INT 7
34316: PUSH
34317: LD_INT 12
34319: PUSH
34320: LD_INT 13
34322: PUSH
34323: LD_INT 10
34325: PUSH
34326: LD_INT 14
34328: PUSH
34329: LD_INT 20
34331: PUSH
34332: LD_INT 21
34334: PUSH
34335: LD_INT 22
34337: PUSH
34338: LD_INT 25
34340: PUSH
34341: LD_INT 32
34343: PUSH
34344: LD_INT 27
34346: PUSH
34347: LD_INT 36
34349: PUSH
34350: LD_INT 69
34352: PUSH
34353: LD_INT 39
34355: PUSH
34356: LD_INT 34
34358: PUSH
34359: LD_INT 40
34361: PUSH
34362: LD_INT 48
34364: PUSH
34365: LD_INT 49
34367: PUSH
34368: LD_INT 50
34370: PUSH
34371: LD_INT 51
34373: PUSH
34374: LD_INT 52
34376: PUSH
34377: LD_INT 53
34379: PUSH
34380: LD_INT 54
34382: PUSH
34383: LD_INT 55
34385: PUSH
34386: LD_INT 56
34388: PUSH
34389: LD_INT 57
34391: PUSH
34392: LD_INT 58
34394: PUSH
34395: LD_INT 59
34397: PUSH
34398: LD_INT 60
34400: PUSH
34401: LD_INT 61
34403: PUSH
34404: LD_INT 62
34406: PUSH
34407: LD_INT 80
34409: PUSH
34410: LD_INT 82
34412: PUSH
34413: LD_INT 83
34415: PUSH
34416: LD_INT 84
34418: PUSH
34419: LD_INT 85
34421: PUSH
34422: LD_INT 86
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 34945
34480: LD_INT 2
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34714
34488: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34489: LD_ADDR_VAR 0 4
34493: PUSH
34494: LD_INT 35
34496: PUSH
34497: LD_INT 45
34499: PUSH
34500: LD_INT 46
34502: PUSH
34503: LD_INT 47
34505: PUSH
34506: LD_INT 82
34508: PUSH
34509: LD_INT 83
34511: PUSH
34512: LD_INT 84
34514: PUSH
34515: LD_INT 85
34517: PUSH
34518: LD_INT 87
34520: PUSH
34521: LD_INT 70
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 11
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 4
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: LD_INT 6
34541: PUSH
34542: LD_INT 15
34544: PUSH
34545: LD_INT 18
34547: PUSH
34548: LD_INT 7
34550: PUSH
34551: LD_INT 17
34553: PUSH
34554: LD_INT 8
34556: PUSH
34557: LD_INT 20
34559: PUSH
34560: LD_INT 21
34562: PUSH
34563: LD_INT 22
34565: PUSH
34566: LD_INT 72
34568: PUSH
34569: LD_INT 26
34571: PUSH
34572: LD_INT 69
34574: PUSH
34575: LD_INT 39
34577: PUSH
34578: LD_INT 40
34580: PUSH
34581: LD_INT 41
34583: PUSH
34584: LD_INT 42
34586: PUSH
34587: LD_INT 43
34589: PUSH
34590: LD_INT 48
34592: PUSH
34593: LD_INT 49
34595: PUSH
34596: LD_INT 50
34598: PUSH
34599: LD_INT 51
34601: PUSH
34602: LD_INT 52
34604: PUSH
34605: LD_INT 53
34607: PUSH
34608: LD_INT 54
34610: PUSH
34611: LD_INT 55
34613: PUSH
34614: LD_INT 56
34616: PUSH
34617: LD_INT 60
34619: PUSH
34620: LD_INT 61
34622: PUSH
34623: LD_INT 62
34625: PUSH
34626: LD_INT 66
34628: PUSH
34629: LD_INT 67
34631: PUSH
34632: LD_INT 68
34634: PUSH
34635: LD_INT 81
34637: PUSH
34638: LD_INT 82
34640: PUSH
34641: LD_INT 83
34643: PUSH
34644: LD_INT 84
34646: PUSH
34647: LD_INT 85
34649: PUSH
34650: LD_INT 87
34652: PUSH
34653: LD_INT 88
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
34712: GO 34945
34714: LD_INT 3
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 34944
34722: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: LD_INT 46
34730: PUSH
34731: LD_INT 47
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 82
34742: PUSH
34743: LD_INT 83
34745: PUSH
34746: LD_INT 84
34748: PUSH
34749: LD_INT 85
34751: PUSH
34752: LD_INT 86
34754: PUSH
34755: LD_INT 11
34757: PUSH
34758: LD_INT 9
34760: PUSH
34761: LD_INT 20
34763: PUSH
34764: LD_INT 19
34766: PUSH
34767: LD_INT 21
34769: PUSH
34770: LD_INT 24
34772: PUSH
34773: LD_INT 22
34775: PUSH
34776: LD_INT 25
34778: PUSH
34779: LD_INT 28
34781: PUSH
34782: LD_INT 29
34784: PUSH
34785: LD_INT 30
34787: PUSH
34788: LD_INT 31
34790: PUSH
34791: LD_INT 37
34793: PUSH
34794: LD_INT 38
34796: PUSH
34797: LD_INT 32
34799: PUSH
34800: LD_INT 27
34802: PUSH
34803: LD_INT 33
34805: PUSH
34806: LD_INT 69
34808: PUSH
34809: LD_INT 39
34811: PUSH
34812: LD_INT 34
34814: PUSH
34815: LD_INT 40
34817: PUSH
34818: LD_INT 71
34820: PUSH
34821: LD_INT 23
34823: PUSH
34824: LD_INT 44
34826: PUSH
34827: LD_INT 48
34829: PUSH
34830: LD_INT 49
34832: PUSH
34833: LD_INT 50
34835: PUSH
34836: LD_INT 51
34838: PUSH
34839: LD_INT 52
34841: PUSH
34842: LD_INT 53
34844: PUSH
34845: LD_INT 54
34847: PUSH
34848: LD_INT 55
34850: PUSH
34851: LD_INT 56
34853: PUSH
34854: LD_INT 57
34856: PUSH
34857: LD_INT 58
34859: PUSH
34860: LD_INT 59
34862: PUSH
34863: LD_INT 63
34865: PUSH
34866: LD_INT 64
34868: PUSH
34869: LD_INT 65
34871: PUSH
34872: LD_INT 82
34874: PUSH
34875: LD_INT 83
34877: PUSH
34878: LD_INT 84
34880: PUSH
34881: LD_INT 85
34883: PUSH
34884: LD_INT 86
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
34942: GO 34945
34944: POP
// if state > - 1 and state < 3 then
34945: LD_VAR 0 3
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: GREATER
34954: PUSH
34955: LD_VAR 0 3
34959: PUSH
34960: LD_INT 3
34962: LESS
34963: AND
34964: IFFALSE 35021
// for i in result do
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 4
34975: PUSH
34976: FOR_IN
34977: IFFALSE 35019
// if GetTech ( i , side ) <> state then
34979: LD_VAR 0 5
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 321
34993: PUSH
34994: LD_VAR 0 3
34998: NONEQUAL
34999: IFFALSE 35017
// result := result diff i ;
35001: LD_ADDR_VAR 0 4
35005: PUSH
35006: LD_VAR 0 4
35010: PUSH
35011: LD_VAR 0 5
35015: DIFF
35016: ST_TO_ADDR
35017: GO 34976
35019: POP
35020: POP
// end ;
35021: LD_VAR 0 4
35025: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
// result := true ;
35031: LD_ADDR_VAR 0 3
35035: PUSH
35036: LD_INT 1
35038: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35039: LD_ADDR_VAR 0 5
35043: PUSH
35044: LD_VAR 0 2
35048: PPUSH
35049: CALL_OW 480
35053: ST_TO_ADDR
// if not tmp then
35054: LD_VAR 0 5
35058: NOT
35059: IFFALSE 35063
// exit ;
35061: GO 35112
// for i in tmp do
35063: LD_ADDR_VAR 0 4
35067: PUSH
35068: LD_VAR 0 5
35072: PUSH
35073: FOR_IN
35074: IFFALSE 35110
// if GetTech ( i , side ) <> state_researched then
35076: LD_VAR 0 4
35080: PPUSH
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 321
35090: PUSH
35091: LD_INT 2
35093: NONEQUAL
35094: IFFALSE 35108
// begin result := false ;
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 0
35103: ST_TO_ADDR
// exit ;
35104: POP
35105: POP
35106: GO 35112
// end ;
35108: GO 35073
35110: POP
35111: POP
// end ;
35112: LD_VAR 0 3
35116: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35117: LD_INT 0
35119: PPUSH
35120: PPUSH
35121: PPUSH
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35132: LD_VAR 0 1
35136: NOT
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 257
35147: PUSH
35148: LD_INT 9
35150: NONEQUAL
35151: OR
35152: IFFALSE 35156
// exit ;
35154: GO 35729
// side := GetSide ( unit ) ;
35156: LD_ADDR_VAR 0 9
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 255
35170: ST_TO_ADDR
// tech_space := tech_spacanom ;
35171: LD_ADDR_VAR 0 12
35175: PUSH
35176: LD_INT 29
35178: ST_TO_ADDR
// tech_time := tech_taurad ;
35179: LD_ADDR_VAR 0 13
35183: PUSH
35184: LD_INT 28
35186: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35187: LD_ADDR_VAR 0 11
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 310
35201: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35202: LD_VAR 0 11
35206: PPUSH
35207: CALL_OW 247
35211: PUSH
35212: LD_INT 2
35214: EQUAL
35215: IFFALSE 35219
// exit ;
35217: GO 35729
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35219: LD_ADDR_VAR 0 8
35223: PUSH
35224: LD_INT 81
35226: PUSH
35227: LD_VAR 0 9
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: LD_INT 21
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PPUSH
35257: CALL_OW 69
35261: ST_TO_ADDR
// if not tmp then
35262: LD_VAR 0 8
35266: NOT
35267: IFFALSE 35271
// exit ;
35269: GO 35729
// if in_unit then
35271: LD_VAR 0 11
35275: IFFALSE 35299
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35277: LD_ADDR_VAR 0 10
35281: PUSH
35282: LD_VAR 0 8
35286: PPUSH
35287: LD_VAR 0 11
35291: PPUSH
35292: CALL_OW 74
35296: ST_TO_ADDR
35297: GO 35319
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35299: LD_ADDR_VAR 0 10
35303: PUSH
35304: LD_VAR 0 8
35308: PPUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: CALL_OW 74
35318: ST_TO_ADDR
// if not enemy then
35319: LD_VAR 0 10
35323: NOT
35324: IFFALSE 35328
// exit ;
35326: GO 35729
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35328: LD_VAR 0 11
35332: PUSH
35333: LD_VAR 0 11
35337: PPUSH
35338: LD_VAR 0 10
35342: PPUSH
35343: CALL_OW 296
35347: PUSH
35348: LD_INT 13
35350: GREATER
35351: AND
35352: PUSH
35353: LD_VAR 0 1
35357: PPUSH
35358: LD_VAR 0 10
35362: PPUSH
35363: CALL_OW 296
35367: PUSH
35368: LD_INT 12
35370: GREATER
35371: OR
35372: IFFALSE 35376
// exit ;
35374: GO 35729
// missile := [ 1 ] ;
35376: LD_ADDR_VAR 0 14
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35387: LD_VAR 0 9
35391: PPUSH
35392: LD_VAR 0 12
35396: PPUSH
35397: CALL_OW 325
35401: IFFALSE 35430
// missile := Replace ( missile , missile + 1 , 2 ) ;
35403: LD_ADDR_VAR 0 14
35407: PUSH
35408: LD_VAR 0 14
35412: PPUSH
35413: LD_VAR 0 14
35417: PUSH
35418: LD_INT 1
35420: PLUS
35421: PPUSH
35422: LD_INT 2
35424: PPUSH
35425: CALL_OW 1
35429: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35430: LD_VAR 0 9
35434: PPUSH
35435: LD_VAR 0 13
35439: PPUSH
35440: CALL_OW 325
35444: PUSH
35445: LD_VAR 0 10
35449: PPUSH
35450: CALL_OW 255
35454: PPUSH
35455: LD_VAR 0 13
35459: PPUSH
35460: CALL_OW 325
35464: NOT
35465: AND
35466: IFFALSE 35495
// missile := Replace ( missile , missile + 1 , 3 ) ;
35468: LD_ADDR_VAR 0 14
35472: PUSH
35473: LD_VAR 0 14
35477: PPUSH
35478: LD_VAR 0 14
35482: PUSH
35483: LD_INT 1
35485: PLUS
35486: PPUSH
35487: LD_INT 3
35489: PPUSH
35490: CALL_OW 1
35494: ST_TO_ADDR
// if missile < 2 then
35495: LD_VAR 0 14
35499: PUSH
35500: LD_INT 2
35502: LESS
35503: IFFALSE 35507
// exit ;
35505: GO 35729
// x := GetX ( enemy ) ;
35507: LD_ADDR_VAR 0 4
35511: PUSH
35512: LD_VAR 0 10
35516: PPUSH
35517: CALL_OW 250
35521: ST_TO_ADDR
// y := GetY ( enemy ) ;
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: LD_VAR 0 10
35531: PPUSH
35532: CALL_OW 251
35536: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 4
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PPUSH
35551: LD_INT 1
35553: PPUSH
35554: CALL_OW 12
35558: PLUS
35559: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35560: LD_ADDR_VAR 0 7
35564: PUSH
35565: LD_VAR 0 5
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PPUSH
35574: LD_INT 1
35576: PPUSH
35577: CALL_OW 12
35581: PLUS
35582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35583: LD_VAR 0 6
35587: PPUSH
35588: LD_VAR 0 7
35592: PPUSH
35593: CALL_OW 488
35597: NOT
35598: IFFALSE 35620
// begin _x := x ;
35600: LD_ADDR_VAR 0 6
35604: PUSH
35605: LD_VAR 0 4
35609: ST_TO_ADDR
// _y := y ;
35610: LD_ADDR_VAR 0 7
35614: PUSH
35615: LD_VAR 0 5
35619: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_INT 1
35627: PPUSH
35628: LD_VAR 0 14
35632: PPUSH
35633: CALL_OW 12
35637: ST_TO_ADDR
// case i of 1 :
35638: LD_VAR 0 3
35642: PUSH
35643: LD_INT 1
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35668
35651: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35652: LD_VAR 0 1
35656: PPUSH
35657: LD_VAR 0 10
35661: PPUSH
35662: CALL_OW 115
35666: GO 35729
35668: LD_INT 2
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35676
35674: GO 35698
35676: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35677: LD_VAR 0 1
35681: PPUSH
35682: LD_VAR 0 6
35686: PPUSH
35687: LD_VAR 0 7
35691: PPUSH
35692: CALL_OW 153
35696: GO 35729
35698: LD_INT 3
35700: DOUBLE
35701: EQUAL
35702: IFTRUE 35706
35704: GO 35728
35706: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35707: LD_VAR 0 1
35711: PPUSH
35712: LD_VAR 0 6
35716: PPUSH
35717: LD_VAR 0 7
35721: PPUSH
35722: CALL_OW 154
35726: GO 35729
35728: POP
// end ;
35729: LD_VAR 0 2
35733: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35734: LD_INT 0
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
// if not unit or not building then
35742: LD_VAR 0 1
35746: NOT
35747: PUSH
35748: LD_VAR 0 2
35752: NOT
35753: OR
35754: IFFALSE 35758
// exit ;
35756: GO 35916
// x := GetX ( building ) ;
35758: LD_ADDR_VAR 0 5
35762: PUSH
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 250
35772: ST_TO_ADDR
// y := GetY ( building ) ;
35773: LD_ADDR_VAR 0 6
35777: PUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: CALL_OW 251
35787: ST_TO_ADDR
// for i = 0 to 5 do
35788: LD_ADDR_VAR 0 4
35792: PUSH
35793: DOUBLE
35794: LD_INT 0
35796: DEC
35797: ST_TO_ADDR
35798: LD_INT 5
35800: PUSH
35801: FOR_TO
35802: IFFALSE 35914
// begin _x := ShiftX ( x , i , 3 ) ;
35804: LD_ADDR_VAR 0 7
35808: PUSH
35809: LD_VAR 0 5
35813: PPUSH
35814: LD_VAR 0 4
35818: PPUSH
35819: LD_INT 3
35821: PPUSH
35822: CALL_OW 272
35826: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35827: LD_ADDR_VAR 0 8
35831: PUSH
35832: LD_VAR 0 6
35836: PPUSH
35837: LD_VAR 0 4
35841: PPUSH
35842: LD_INT 3
35844: PPUSH
35845: CALL_OW 273
35849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35850: LD_VAR 0 7
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: CALL_OW 488
35864: NOT
35865: IFFALSE 35869
// continue ;
35867: GO 35801
// if HexInfo ( _x , _y ) = 0 then
35869: LD_VAR 0 7
35873: PPUSH
35874: LD_VAR 0 8
35878: PPUSH
35879: CALL_OW 428
35883: PUSH
35884: LD_INT 0
35886: EQUAL
35887: IFFALSE 35912
// begin ComMoveXY ( unit , _x , _y ) ;
35889: LD_VAR 0 1
35893: PPUSH
35894: LD_VAR 0 7
35898: PPUSH
35899: LD_VAR 0 8
35903: PPUSH
35904: CALL_OW 111
// exit ;
35908: POP
35909: POP
35910: GO 35916
// end ; end ;
35912: GO 35801
35914: POP
35915: POP
// end ;
35916: LD_VAR 0 3
35920: RET
// export function ScanBase ( side , base_area ) ; begin
35921: LD_INT 0
35923: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35924: LD_ADDR_VAR 0 3
35928: PUSH
35929: LD_VAR 0 2
35933: PPUSH
35934: LD_INT 81
35936: PUSH
35937: LD_VAR 0 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL_OW 70
35950: ST_TO_ADDR
// end ;
35951: LD_VAR 0 3
35955: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35956: LD_INT 0
35958: PPUSH
35959: PPUSH
35960: PPUSH
35961: PPUSH
// result := false ;
35962: LD_ADDR_VAR 0 2
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// side := GetSide ( unit ) ;
35970: LD_ADDR_VAR 0 3
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 255
35984: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35985: LD_ADDR_VAR 0 4
35989: PUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 248
35999: ST_TO_ADDR
// case nat of 1 :
36000: LD_VAR 0 4
36004: PUSH
36005: LD_INT 1
36007: DOUBLE
36008: EQUAL
36009: IFTRUE 36013
36011: GO 36024
36013: POP
// tech := tech_lassight ; 2 :
36014: LD_ADDR_VAR 0 5
36018: PUSH
36019: LD_INT 12
36021: ST_TO_ADDR
36022: GO 36063
36024: LD_INT 2
36026: DOUBLE
36027: EQUAL
36028: IFTRUE 36032
36030: GO 36043
36032: POP
// tech := tech_mortar ; 3 :
36033: LD_ADDR_VAR 0 5
36037: PUSH
36038: LD_INT 41
36040: ST_TO_ADDR
36041: GO 36063
36043: LD_INT 3
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36051
36049: GO 36062
36051: POP
// tech := tech_bazooka ; end ;
36052: LD_ADDR_VAR 0 5
36056: PUSH
36057: LD_INT 44
36059: ST_TO_ADDR
36060: GO 36063
36062: POP
// if Researched ( side , tech ) then
36063: LD_VAR 0 3
36067: PPUSH
36068: LD_VAR 0 5
36072: PPUSH
36073: CALL_OW 325
36077: IFFALSE 36104
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36079: LD_ADDR_VAR 0 2
36083: PUSH
36084: LD_INT 5
36086: PUSH
36087: LD_INT 8
36089: PUSH
36090: LD_INT 9
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: PUSH
36098: LD_VAR 0 4
36102: ARRAY
36103: ST_TO_ADDR
// end ;
36104: LD_VAR 0 2
36108: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36109: LD_INT 0
36111: PPUSH
36112: PPUSH
36113: PPUSH
// if not mines then
36114: LD_VAR 0 2
36118: NOT
36119: IFFALSE 36123
// exit ;
36121: GO 36267
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36123: LD_ADDR_VAR 0 5
36127: PUSH
36128: LD_INT 81
36130: PUSH
36131: LD_VAR 0 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: LD_INT 21
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 69
36165: ST_TO_ADDR
// for i in mines do
36166: LD_ADDR_VAR 0 4
36170: PUSH
36171: LD_VAR 0 2
36175: PUSH
36176: FOR_IN
36177: IFFALSE 36265
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36179: LD_VAR 0 4
36183: PUSH
36184: LD_INT 1
36186: ARRAY
36187: PPUSH
36188: LD_VAR 0 4
36192: PUSH
36193: LD_INT 2
36195: ARRAY
36196: PPUSH
36197: CALL_OW 458
36201: NOT
36202: IFFALSE 36206
// continue ;
36204: GO 36176
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36206: LD_VAR 0 4
36210: PUSH
36211: LD_INT 1
36213: ARRAY
36214: PPUSH
36215: LD_VAR 0 4
36219: PUSH
36220: LD_INT 2
36222: ARRAY
36223: PPUSH
36224: CALL_OW 428
36228: PUSH
36229: LD_VAR 0 5
36233: IN
36234: IFFALSE 36263
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36236: LD_VAR 0 4
36240: PUSH
36241: LD_INT 1
36243: ARRAY
36244: PPUSH
36245: LD_VAR 0 4
36249: PUSH
36250: LD_INT 2
36252: ARRAY
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 456
// end ;
36263: GO 36176
36265: POP
36266: POP
// end ;
36267: LD_VAR 0 3
36271: RET
// export function Count ( array ) ; var i ; begin
36272: LD_INT 0
36274: PPUSH
36275: PPUSH
// result := 0 ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_INT 0
36283: ST_TO_ADDR
// for i in array do
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_VAR 0 1
36293: PUSH
36294: FOR_IN
36295: IFFALSE 36319
// if i then
36297: LD_VAR 0 3
36301: IFFALSE 36317
// result := result + 1 ;
36303: LD_ADDR_VAR 0 2
36307: PUSH
36308: LD_VAR 0 2
36312: PUSH
36313: LD_INT 1
36315: PLUS
36316: ST_TO_ADDR
36317: GO 36294
36319: POP
36320: POP
// end ;
36321: LD_VAR 0 2
36325: RET
// export function IsEmpty ( building ) ; begin
36326: LD_INT 0
36328: PPUSH
// if not building then
36329: LD_VAR 0 1
36333: NOT
36334: IFFALSE 36338
// exit ;
36336: GO 36381
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36338: LD_ADDR_VAR 0 2
36342: PUSH
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 22
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 255
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 58
36367: PUSH
36368: EMPTY
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PPUSH
36375: CALL_OW 69
36379: IN
36380: ST_TO_ADDR
// end ;
36381: LD_VAR 0 2
36385: RET
// export function IsNotFull ( building ) ; begin
36386: LD_INT 0
36388: PPUSH
// if not building then
36389: LD_VAR 0 1
36393: NOT
36394: IFFALSE 36398
// exit ;
36396: GO 36417
// result := UnitsInside ( building ) < 6 ;
36398: LD_ADDR_VAR 0 2
36402: PUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 313
36412: PUSH
36413: LD_INT 6
36415: LESS
36416: ST_TO_ADDR
// end ;
36417: LD_VAR 0 2
36421: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36422: LD_INT 0
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
// tmp := [ ] ;
36428: LD_ADDR_VAR 0 3
36432: PUSH
36433: EMPTY
36434: ST_TO_ADDR
// list := [ ] ;
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: EMPTY
36441: ST_TO_ADDR
// for i = 16 to 25 do
36442: LD_ADDR_VAR 0 4
36446: PUSH
36447: DOUBLE
36448: LD_INT 16
36450: DEC
36451: ST_TO_ADDR
36452: LD_INT 25
36454: PUSH
36455: FOR_TO
36456: IFFALSE 36529
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36458: LD_ADDR_VAR 0 3
36462: PUSH
36463: LD_VAR 0 3
36467: PUSH
36468: LD_INT 22
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 255
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 91
36487: PUSH
36488: LD_VAR 0 1
36492: PUSH
36493: LD_INT 6
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 30
36503: PUSH
36504: LD_VAR 0 4
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: PUSH
36518: EMPTY
36519: LIST
36520: PPUSH
36521: CALL_OW 69
36525: ADD
36526: ST_TO_ADDR
36527: GO 36455
36529: POP
36530: POP
// for i = 1 to tmp do
36531: LD_ADDR_VAR 0 4
36535: PUSH
36536: DOUBLE
36537: LD_INT 1
36539: DEC
36540: ST_TO_ADDR
36541: LD_VAR 0 3
36545: PUSH
36546: FOR_TO
36547: IFFALSE 36635
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36549: LD_ADDR_VAR 0 5
36553: PUSH
36554: LD_VAR 0 5
36558: PUSH
36559: LD_VAR 0 3
36563: PUSH
36564: LD_VAR 0 4
36568: ARRAY
36569: PPUSH
36570: CALL_OW 266
36574: PUSH
36575: LD_VAR 0 3
36579: PUSH
36580: LD_VAR 0 4
36584: ARRAY
36585: PPUSH
36586: CALL_OW 250
36590: PUSH
36591: LD_VAR 0 3
36595: PUSH
36596: LD_VAR 0 4
36600: ARRAY
36601: PPUSH
36602: CALL_OW 251
36606: PUSH
36607: LD_VAR 0 3
36611: PUSH
36612: LD_VAR 0 4
36616: ARRAY
36617: PPUSH
36618: CALL_OW 254
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: PUSH
36629: EMPTY
36630: LIST
36631: ADD
36632: ST_TO_ADDR
36633: GO 36546
36635: POP
36636: POP
// result := list ;
36637: LD_ADDR_VAR 0 2
36641: PUSH
36642: LD_VAR 0 5
36646: ST_TO_ADDR
// end ;
36647: LD_VAR 0 2
36651: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36652: LD_INT 0
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
// if not factory then
36661: LD_VAR 0 1
36665: NOT
36666: IFFALSE 36670
// exit ;
36668: GO 37263
// if control = control_apeman then
36670: LD_VAR 0 4
36674: PUSH
36675: LD_INT 5
36677: EQUAL
36678: IFFALSE 36787
// begin tmp := UnitsInside ( factory ) ;
36680: LD_ADDR_VAR 0 8
36684: PUSH
36685: LD_VAR 0 1
36689: PPUSH
36690: CALL_OW 313
36694: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36695: LD_VAR 0 8
36699: PPUSH
36700: LD_INT 25
36702: PUSH
36703: LD_INT 12
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PPUSH
36710: CALL_OW 72
36714: NOT
36715: IFFALSE 36725
// control := control_manual ;
36717: LD_ADDR_VAR 0 4
36721: PUSH
36722: LD_INT 1
36724: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36725: LD_ADDR_VAR 0 8
36729: PUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL 36422 0 1
36739: ST_TO_ADDR
// if tmp then
36740: LD_VAR 0 8
36744: IFFALSE 36787
// begin for i in tmp do
36746: LD_ADDR_VAR 0 7
36750: PUSH
36751: LD_VAR 0 8
36755: PUSH
36756: FOR_IN
36757: IFFALSE 36785
// if i [ 1 ] = b_ext_radio then
36759: LD_VAR 0 7
36763: PUSH
36764: LD_INT 1
36766: ARRAY
36767: PUSH
36768: LD_INT 22
36770: EQUAL
36771: IFFALSE 36783
// begin control := control_remote ;
36773: LD_ADDR_VAR 0 4
36777: PUSH
36778: LD_INT 2
36780: ST_TO_ADDR
// break ;
36781: GO 36785
// end ;
36783: GO 36756
36785: POP
36786: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36787: LD_VAR 0 1
36791: PPUSH
36792: LD_VAR 0 2
36796: PPUSH
36797: LD_VAR 0 3
36801: PPUSH
36802: LD_VAR 0 4
36806: PPUSH
36807: LD_VAR 0 5
36811: PPUSH
36812: CALL_OW 448
36816: IFFALSE 36851
// begin result := [ chassis , engine , control , weapon ] ;
36818: LD_ADDR_VAR 0 6
36822: PUSH
36823: LD_VAR 0 2
36827: PUSH
36828: LD_VAR 0 3
36832: PUSH
36833: LD_VAR 0 4
36837: PUSH
36838: LD_VAR 0 5
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// exit ;
36849: GO 37263
// end ; _chassis := AvailableChassisList ( factory ) ;
36851: LD_ADDR_VAR 0 9
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 475
36865: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36866: LD_ADDR_VAR 0 11
36870: PUSH
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL_OW 476
36880: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36881: LD_ADDR_VAR 0 12
36885: PUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 477
36895: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36896: LD_ADDR_VAR 0 10
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 478
36910: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36911: LD_VAR 0 9
36915: NOT
36916: PUSH
36917: LD_VAR 0 11
36921: NOT
36922: OR
36923: PUSH
36924: LD_VAR 0 12
36928: NOT
36929: OR
36930: PUSH
36931: LD_VAR 0 10
36935: NOT
36936: OR
36937: IFFALSE 36972
// begin result := [ chassis , engine , control , weapon ] ;
36939: LD_ADDR_VAR 0 6
36943: PUSH
36944: LD_VAR 0 2
36948: PUSH
36949: LD_VAR 0 3
36953: PUSH
36954: LD_VAR 0 4
36958: PUSH
36959: LD_VAR 0 5
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// exit ;
36970: GO 37263
// end ; if not chassis in _chassis then
36972: LD_VAR 0 2
36976: PUSH
36977: LD_VAR 0 9
36981: IN
36982: NOT
36983: IFFALSE 37009
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36985: LD_ADDR_VAR 0 2
36989: PUSH
36990: LD_VAR 0 9
36994: PUSH
36995: LD_INT 1
36997: PPUSH
36998: LD_VAR 0 9
37002: PPUSH
37003: CALL_OW 12
37007: ARRAY
37008: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37009: LD_VAR 0 2
37013: PPUSH
37014: LD_VAR 0 3
37018: PPUSH
37019: CALL 37268 0 2
37023: NOT
37024: IFFALSE 37083
// repeat engine := _engine [ 1 ] ;
37026: LD_ADDR_VAR 0 3
37030: PUSH
37031: LD_VAR 0 11
37035: PUSH
37036: LD_INT 1
37038: ARRAY
37039: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37040: LD_ADDR_VAR 0 11
37044: PUSH
37045: LD_VAR 0 11
37049: PPUSH
37050: LD_INT 1
37052: PPUSH
37053: CALL_OW 3
37057: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37058: LD_VAR 0 2
37062: PPUSH
37063: LD_VAR 0 3
37067: PPUSH
37068: CALL 37268 0 2
37072: PUSH
37073: LD_VAR 0 11
37077: PUSH
37078: EMPTY
37079: EQUAL
37080: OR
37081: IFFALSE 37026
// if not control in _control then
37083: LD_VAR 0 4
37087: PUSH
37088: LD_VAR 0 12
37092: IN
37093: NOT
37094: IFFALSE 37120
// control := _control [ rand ( 1 , _control ) ] ;
37096: LD_ADDR_VAR 0 4
37100: PUSH
37101: LD_VAR 0 12
37105: PUSH
37106: LD_INT 1
37108: PPUSH
37109: LD_VAR 0 12
37113: PPUSH
37114: CALL_OW 12
37118: ARRAY
37119: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37120: LD_VAR 0 2
37124: PPUSH
37125: LD_VAR 0 5
37129: PPUSH
37130: CALL 37488 0 2
37134: NOT
37135: IFFALSE 37194
// repeat weapon := _weapon [ 1 ] ;
37137: LD_ADDR_VAR 0 5
37141: PUSH
37142: LD_VAR 0 10
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37151: LD_ADDR_VAR 0 10
37155: PUSH
37156: LD_VAR 0 10
37160: PPUSH
37161: LD_INT 1
37163: PPUSH
37164: CALL_OW 3
37168: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37169: LD_VAR 0 2
37173: PPUSH
37174: LD_VAR 0 5
37178: PPUSH
37179: CALL 37488 0 2
37183: PUSH
37184: LD_VAR 0 10
37188: PUSH
37189: EMPTY
37190: EQUAL
37191: OR
37192: IFFALSE 37137
// result := [ ] ;
37194: LD_ADDR_VAR 0 6
37198: PUSH
37199: EMPTY
37200: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37201: LD_VAR 0 1
37205: PPUSH
37206: LD_VAR 0 2
37210: PPUSH
37211: LD_VAR 0 3
37215: PPUSH
37216: LD_VAR 0 4
37220: PPUSH
37221: LD_VAR 0 5
37225: PPUSH
37226: CALL_OW 448
37230: IFFALSE 37263
// result := [ chassis , engine , control , weapon ] ;
37232: LD_ADDR_VAR 0 6
37236: PUSH
37237: LD_VAR 0 2
37241: PUSH
37242: LD_VAR 0 3
37246: PUSH
37247: LD_VAR 0 4
37251: PUSH
37252: LD_VAR 0 5
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
// end ;
37263: LD_VAR 0 6
37267: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37268: LD_INT 0
37270: PPUSH
// if not chassis or not engine then
37271: LD_VAR 0 1
37275: NOT
37276: PUSH
37277: LD_VAR 0 2
37281: NOT
37282: OR
37283: IFFALSE 37287
// exit ;
37285: GO 37483
// case engine of engine_solar :
37287: LD_VAR 0 2
37291: PUSH
37292: LD_INT 2
37294: DOUBLE
37295: EQUAL
37296: IFTRUE 37300
37298: GO 37338
37300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_INT 11
37308: PUSH
37309: LD_INT 12
37311: PUSH
37312: LD_INT 13
37314: PUSH
37315: LD_INT 14
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
37336: GO 37467
37338: LD_INT 1
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37346
37344: GO 37408
37346: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_INT 11
37354: PUSH
37355: LD_INT 12
37357: PUSH
37358: LD_INT 13
37360: PUSH
37361: LD_INT 14
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: LD_INT 21
37381: PUSH
37382: LD_INT 23
37384: PUSH
37385: LD_INT 22
37387: PUSH
37388: LD_INT 24
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: ST_TO_ADDR
37406: GO 37467
37408: LD_INT 3
37410: DOUBLE
37411: EQUAL
37412: IFTRUE 37416
37414: GO 37466
37416: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37417: LD_ADDR_VAR 0 3
37421: PUSH
37422: LD_INT 13
37424: PUSH
37425: LD_INT 14
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: LD_INT 21
37442: PUSH
37443: LD_INT 22
37445: PUSH
37446: LD_INT 23
37448: PUSH
37449: LD_INT 24
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: ST_TO_ADDR
37464: GO 37467
37466: POP
// result := ( chassis in result ) ;
37467: LD_ADDR_VAR 0 3
37471: PUSH
37472: LD_VAR 0 1
37476: PUSH
37477: LD_VAR 0 3
37481: IN
37482: ST_TO_ADDR
// end ;
37483: LD_VAR 0 3
37487: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37488: LD_INT 0
37490: PPUSH
// if not chassis or not weapon then
37491: LD_VAR 0 1
37495: NOT
37496: PUSH
37497: LD_VAR 0 2
37501: NOT
37502: OR
37503: IFFALSE 37507
// exit ;
37505: GO 38569
// case weapon of us_machine_gun :
37507: LD_VAR 0 2
37511: PUSH
37512: LD_INT 2
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37520
37518: GO 37550
37520: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: LD_INT 4
37537: PUSH
37538: LD_INT 5
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
37548: GO 38553
37550: LD_INT 3
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37588
37558: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 4
37575: PUSH
37576: LD_INT 5
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
37586: GO 38553
37588: LD_INT 11
37590: DOUBLE
37591: EQUAL
37592: IFTRUE 37596
37594: GO 37626
37596: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37597: LD_ADDR_VAR 0 3
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 3
37610: PUSH
37611: LD_INT 4
37613: PUSH
37614: LD_INT 5
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
37624: GO 38553
37626: LD_INT 4
37628: DOUBLE
37629: EQUAL
37630: IFTRUE 37634
37632: GO 37660
37634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37635: LD_ADDR_VAR 0 3
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 3
37645: PUSH
37646: LD_INT 4
37648: PUSH
37649: LD_INT 5
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
37658: GO 38553
37660: LD_INT 5
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37668
37666: GO 37694
37668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 4
37682: PUSH
37683: LD_INT 5
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
37692: GO 38553
37694: LD_INT 9
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37702
37700: GO 37728
37702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: LD_INT 4
37716: PUSH
37717: LD_INT 5
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
37726: GO 38553
37728: LD_INT 7
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37736
37734: GO 37762
37736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: LD_INT 4
37750: PUSH
37751: LD_INT 5
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: ST_TO_ADDR
37760: GO 38553
37762: LD_INT 12
37764: DOUBLE
37765: EQUAL
37766: IFTRUE 37770
37768: GO 37796
37770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37771: LD_ADDR_VAR 0 3
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: LD_INT 4
37784: PUSH
37785: LD_INT 5
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
37794: GO 38553
37796: LD_INT 13
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37830
37804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37805: LD_ADDR_VAR 0 3
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 4
37818: PUSH
37819: LD_INT 5
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
37828: GO 38553
37830: LD_INT 14
37832: DOUBLE
37833: EQUAL
37834: IFTRUE 37838
37836: GO 37856
37838: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 4
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: ST_TO_ADDR
37854: GO 38553
37856: LD_INT 6
37858: DOUBLE
37859: EQUAL
37860: IFTRUE 37864
37862: GO 37882
37864: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37865: LD_ADDR_VAR 0 3
37869: PUSH
37870: LD_INT 4
37872: PUSH
37873: LD_INT 5
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: ST_TO_ADDR
37880: GO 38553
37882: LD_INT 10
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37908
37890: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37891: LD_ADDR_VAR 0 3
37895: PUSH
37896: LD_INT 4
37898: PUSH
37899: LD_INT 5
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: ST_TO_ADDR
37906: GO 38553
37908: LD_INT 22
37910: DOUBLE
37911: EQUAL
37912: IFTRUE 37916
37914: GO 37942
37916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37917: LD_ADDR_VAR 0 3
37921: PUSH
37922: LD_INT 11
37924: PUSH
37925: LD_INT 12
37927: PUSH
37928: LD_INT 13
37930: PUSH
37931: LD_INT 14
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
37940: GO 38553
37942: LD_INT 23
37944: DOUBLE
37945: EQUAL
37946: IFTRUE 37950
37948: GO 37976
37950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37951: LD_ADDR_VAR 0 3
37955: PUSH
37956: LD_INT 11
37958: PUSH
37959: LD_INT 12
37961: PUSH
37962: LD_INT 13
37964: PUSH
37965: LD_INT 14
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
37974: GO 38553
37976: LD_INT 24
37978: DOUBLE
37979: EQUAL
37980: IFTRUE 37984
37982: GO 38010
37984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37985: LD_ADDR_VAR 0 3
37989: PUSH
37990: LD_INT 11
37992: PUSH
37993: LD_INT 12
37995: PUSH
37996: LD_INT 13
37998: PUSH
37999: LD_INT 14
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: ST_TO_ADDR
38008: GO 38553
38010: LD_INT 30
38012: DOUBLE
38013: EQUAL
38014: IFTRUE 38018
38016: GO 38044
38018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38019: LD_ADDR_VAR 0 3
38023: PUSH
38024: LD_INT 11
38026: PUSH
38027: LD_INT 12
38029: PUSH
38030: LD_INT 13
38032: PUSH
38033: LD_INT 14
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
38042: GO 38553
38044: LD_INT 25
38046: DOUBLE
38047: EQUAL
38048: IFTRUE 38052
38050: GO 38070
38052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_INT 13
38060: PUSH
38061: LD_INT 14
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: ST_TO_ADDR
38068: GO 38553
38070: LD_INT 27
38072: DOUBLE
38073: EQUAL
38074: IFTRUE 38078
38076: GO 38096
38078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 13
38086: PUSH
38087: LD_INT 14
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: ST_TO_ADDR
38094: GO 38553
38096: LD_EXP 134
38100: DOUBLE
38101: EQUAL
38102: IFTRUE 38106
38104: GO 38132
38106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38107: LD_ADDR_VAR 0 3
38111: PUSH
38112: LD_INT 11
38114: PUSH
38115: LD_INT 12
38117: PUSH
38118: LD_INT 13
38120: PUSH
38121: LD_INT 14
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
38130: GO 38553
38132: LD_INT 28
38134: DOUBLE
38135: EQUAL
38136: IFTRUE 38140
38138: GO 38158
38140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38141: LD_ADDR_VAR 0 3
38145: PUSH
38146: LD_INT 13
38148: PUSH
38149: LD_INT 14
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: ST_TO_ADDR
38156: GO 38553
38158: LD_INT 29
38160: DOUBLE
38161: EQUAL
38162: IFTRUE 38166
38164: GO 38184
38166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38167: LD_ADDR_VAR 0 3
38171: PUSH
38172: LD_INT 13
38174: PUSH
38175: LD_INT 14
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: ST_TO_ADDR
38182: GO 38553
38184: LD_INT 31
38186: DOUBLE
38187: EQUAL
38188: IFTRUE 38192
38190: GO 38210
38192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38193: LD_ADDR_VAR 0 3
38197: PUSH
38198: LD_INT 13
38200: PUSH
38201: LD_INT 14
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: ST_TO_ADDR
38208: GO 38553
38210: LD_INT 26
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38236
38218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38219: LD_ADDR_VAR 0 3
38223: PUSH
38224: LD_INT 13
38226: PUSH
38227: LD_INT 14
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: ST_TO_ADDR
38234: GO 38553
38236: LD_INT 42
38238: DOUBLE
38239: EQUAL
38240: IFTRUE 38244
38242: GO 38270
38244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38245: LD_ADDR_VAR 0 3
38249: PUSH
38250: LD_INT 21
38252: PUSH
38253: LD_INT 22
38255: PUSH
38256: LD_INT 23
38258: PUSH
38259: LD_INT 24
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
38268: GO 38553
38270: LD_INT 43
38272: DOUBLE
38273: EQUAL
38274: IFTRUE 38278
38276: GO 38304
38278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38279: LD_ADDR_VAR 0 3
38283: PUSH
38284: LD_INT 21
38286: PUSH
38287: LD_INT 22
38289: PUSH
38290: LD_INT 23
38292: PUSH
38293: LD_INT 24
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
38302: GO 38553
38304: LD_INT 44
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38338
38312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 21
38320: PUSH
38321: LD_INT 22
38323: PUSH
38324: LD_INT 23
38326: PUSH
38327: LD_INT 24
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: ST_TO_ADDR
38336: GO 38553
38338: LD_INT 45
38340: DOUBLE
38341: EQUAL
38342: IFTRUE 38346
38344: GO 38372
38346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38347: LD_ADDR_VAR 0 3
38351: PUSH
38352: LD_INT 21
38354: PUSH
38355: LD_INT 22
38357: PUSH
38358: LD_INT 23
38360: PUSH
38361: LD_INT 24
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
38370: GO 38553
38372: LD_INT 49
38374: DOUBLE
38375: EQUAL
38376: IFTRUE 38380
38378: GO 38406
38380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_INT 21
38388: PUSH
38389: LD_INT 22
38391: PUSH
38392: LD_INT 23
38394: PUSH
38395: LD_INT 24
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
38404: GO 38553
38406: LD_INT 51
38408: DOUBLE
38409: EQUAL
38410: IFTRUE 38414
38412: GO 38440
38414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_INT 21
38422: PUSH
38423: LD_INT 22
38425: PUSH
38426: LD_INT 23
38428: PUSH
38429: LD_INT 24
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: ST_TO_ADDR
38438: GO 38553
38440: LD_INT 52
38442: DOUBLE
38443: EQUAL
38444: IFTRUE 38448
38446: GO 38474
38448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38449: LD_ADDR_VAR 0 3
38453: PUSH
38454: LD_INT 21
38456: PUSH
38457: LD_INT 22
38459: PUSH
38460: LD_INT 23
38462: PUSH
38463: LD_INT 24
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
38472: GO 38553
38474: LD_INT 53
38476: DOUBLE
38477: EQUAL
38478: IFTRUE 38482
38480: GO 38500
38482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_INT 23
38490: PUSH
38491: LD_INT 24
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: ST_TO_ADDR
38498: GO 38553
38500: LD_INT 46
38502: DOUBLE
38503: EQUAL
38504: IFTRUE 38508
38506: GO 38526
38508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_INT 23
38516: PUSH
38517: LD_INT 24
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: ST_TO_ADDR
38524: GO 38553
38526: LD_INT 47
38528: DOUBLE
38529: EQUAL
38530: IFTRUE 38534
38532: GO 38552
38534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_INT 23
38542: PUSH
38543: LD_INT 24
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: ST_TO_ADDR
38550: GO 38553
38552: POP
// result := ( chassis in result ) ;
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_VAR 0 1
38562: PUSH
38563: LD_VAR 0 3
38567: IN
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 3
38573: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38574: LD_INT 0
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
// result := array ;
38583: LD_ADDR_VAR 0 5
38587: PUSH
38588: LD_VAR 0 1
38592: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38593: LD_VAR 0 1
38597: NOT
38598: PUSH
38599: LD_VAR 0 2
38603: NOT
38604: OR
38605: PUSH
38606: LD_VAR 0 3
38610: NOT
38611: OR
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_VAR 0 1
38622: GREATER
38623: OR
38624: PUSH
38625: LD_VAR 0 3
38629: PUSH
38630: LD_VAR 0 1
38634: GREATER
38635: OR
38636: IFFALSE 38640
// exit ;
38638: GO 38936
// if direction then
38640: LD_VAR 0 4
38644: IFFALSE 38708
// begin d := 1 ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_INT 1
38653: ST_TO_ADDR
// if i_from > i_to then
38654: LD_VAR 0 2
38658: PUSH
38659: LD_VAR 0 3
38663: GREATER
38664: IFFALSE 38690
// length := ( array - i_from ) + i_to else
38666: LD_ADDR_VAR 0 11
38670: PUSH
38671: LD_VAR 0 1
38675: PUSH
38676: LD_VAR 0 2
38680: MINUS
38681: PUSH
38682: LD_VAR 0 3
38686: PLUS
38687: ST_TO_ADDR
38688: GO 38706
// length := i_to - i_from ;
38690: LD_ADDR_VAR 0 11
38694: PUSH
38695: LD_VAR 0 3
38699: PUSH
38700: LD_VAR 0 2
38704: MINUS
38705: ST_TO_ADDR
// end else
38706: GO 38769
// begin d := - 1 ;
38708: LD_ADDR_VAR 0 9
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: ST_TO_ADDR
// if i_from > i_to then
38717: LD_VAR 0 2
38721: PUSH
38722: LD_VAR 0 3
38726: GREATER
38727: IFFALSE 38747
// length := i_from - i_to else
38729: LD_ADDR_VAR 0 11
38733: PUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_VAR 0 3
38743: MINUS
38744: ST_TO_ADDR
38745: GO 38769
// length := ( array - i_to ) + i_from ;
38747: LD_ADDR_VAR 0 11
38751: PUSH
38752: LD_VAR 0 1
38756: PUSH
38757: LD_VAR 0 3
38761: MINUS
38762: PUSH
38763: LD_VAR 0 2
38767: PLUS
38768: ST_TO_ADDR
// end ; if not length then
38769: LD_VAR 0 11
38773: NOT
38774: IFFALSE 38778
// exit ;
38776: GO 38936
// tmp := array ;
38778: LD_ADDR_VAR 0 10
38782: PUSH
38783: LD_VAR 0 1
38787: ST_TO_ADDR
// for i = 1 to length do
38788: LD_ADDR_VAR 0 6
38792: PUSH
38793: DOUBLE
38794: LD_INT 1
38796: DEC
38797: ST_TO_ADDR
38798: LD_VAR 0 11
38802: PUSH
38803: FOR_TO
38804: IFFALSE 38924
// begin for j = 1 to array do
38806: LD_ADDR_VAR 0 7
38810: PUSH
38811: DOUBLE
38812: LD_INT 1
38814: DEC
38815: ST_TO_ADDR
38816: LD_VAR 0 1
38820: PUSH
38821: FOR_TO
38822: IFFALSE 38910
// begin k := j + d ;
38824: LD_ADDR_VAR 0 8
38828: PUSH
38829: LD_VAR 0 7
38833: PUSH
38834: LD_VAR 0 9
38838: PLUS
38839: ST_TO_ADDR
// if k > array then
38840: LD_VAR 0 8
38844: PUSH
38845: LD_VAR 0 1
38849: GREATER
38850: IFFALSE 38860
// k := 1 ;
38852: LD_ADDR_VAR 0 8
38856: PUSH
38857: LD_INT 1
38859: ST_TO_ADDR
// if not k then
38860: LD_VAR 0 8
38864: NOT
38865: IFFALSE 38877
// k := array ;
38867: LD_ADDR_VAR 0 8
38871: PUSH
38872: LD_VAR 0 1
38876: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38877: LD_ADDR_VAR 0 10
38881: PUSH
38882: LD_VAR 0 10
38886: PPUSH
38887: LD_VAR 0 8
38891: PPUSH
38892: LD_VAR 0 1
38896: PUSH
38897: LD_VAR 0 7
38901: ARRAY
38902: PPUSH
38903: CALL_OW 1
38907: ST_TO_ADDR
// end ;
38908: GO 38821
38910: POP
38911: POP
// array := tmp ;
38912: LD_ADDR_VAR 0 1
38916: PUSH
38917: LD_VAR 0 10
38921: ST_TO_ADDR
// end ;
38922: GO 38803
38924: POP
38925: POP
// result := array ;
38926: LD_ADDR_VAR 0 5
38930: PUSH
38931: LD_VAR 0 1
38935: ST_TO_ADDR
// end ;
38936: LD_VAR 0 5
38940: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38941: LD_INT 0
38943: PPUSH
38944: PPUSH
// result := 0 ;
38945: LD_ADDR_VAR 0 3
38949: PUSH
38950: LD_INT 0
38952: ST_TO_ADDR
// if not array or not value in array then
38953: LD_VAR 0 1
38957: NOT
38958: PUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_VAR 0 1
38968: IN
38969: NOT
38970: OR
38971: IFFALSE 38975
// exit ;
38973: GO 39029
// for i = 1 to array do
38975: LD_ADDR_VAR 0 4
38979: PUSH
38980: DOUBLE
38981: LD_INT 1
38983: DEC
38984: ST_TO_ADDR
38985: LD_VAR 0 1
38989: PUSH
38990: FOR_TO
38991: IFFALSE 39027
// if value = array [ i ] then
38993: LD_VAR 0 2
38997: PUSH
38998: LD_VAR 0 1
39002: PUSH
39003: LD_VAR 0 4
39007: ARRAY
39008: EQUAL
39009: IFFALSE 39025
// begin result := i ;
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: LD_VAR 0 4
39020: ST_TO_ADDR
// exit ;
39021: POP
39022: POP
39023: GO 39029
// end ;
39025: GO 38990
39027: POP
39028: POP
// end ;
39029: LD_VAR 0 3
39033: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39034: LD_INT 0
39036: PPUSH
// vc_chassis := chassis ;
39037: LD_ADDR_OWVAR 37
39041: PUSH
39042: LD_VAR 0 1
39046: ST_TO_ADDR
// vc_engine := engine ;
39047: LD_ADDR_OWVAR 39
39051: PUSH
39052: LD_VAR 0 2
39056: ST_TO_ADDR
// vc_control := control ;
39057: LD_ADDR_OWVAR 38
39061: PUSH
39062: LD_VAR 0 3
39066: ST_TO_ADDR
// vc_weapon := weapon ;
39067: LD_ADDR_OWVAR 40
39071: PUSH
39072: LD_VAR 0 4
39076: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39077: LD_ADDR_OWVAR 41
39081: PUSH
39082: LD_VAR 0 5
39086: ST_TO_ADDR
// end ;
39087: LD_VAR 0 6
39091: RET
// export function WantPlant ( unit ) ; var task ; begin
39092: LD_INT 0
39094: PPUSH
39095: PPUSH
// result := false ;
39096: LD_ADDR_VAR 0 2
39100: PUSH
39101: LD_INT 0
39103: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39104: LD_ADDR_VAR 0 3
39108: PUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 437
39118: ST_TO_ADDR
// if task then
39119: LD_VAR 0 3
39123: IFFALSE 39151
// if task [ 1 ] [ 1 ] = p then
39125: LD_VAR 0 3
39129: PUSH
39130: LD_INT 1
39132: ARRAY
39133: PUSH
39134: LD_INT 1
39136: ARRAY
39137: PUSH
39138: LD_STRING p
39140: EQUAL
39141: IFFALSE 39151
// result := true ;
39143: LD_ADDR_VAR 0 2
39147: PUSH
39148: LD_INT 1
39150: ST_TO_ADDR
// end ;
39151: LD_VAR 0 2
39155: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39156: LD_INT 0
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
// if pos < 1 then
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 1
39169: LESS
39170: IFFALSE 39174
// exit ;
39172: GO 39477
// if pos = 1 then
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 1
39181: EQUAL
39182: IFFALSE 39215
// result := Replace ( arr , pos [ 1 ] , value ) else
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: LD_VAR 0 2
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: PPUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: CALL_OW 1
39212: ST_TO_ADDR
39213: GO 39477
// begin tmp := arr ;
39215: LD_ADDR_VAR 0 6
39219: PUSH
39220: LD_VAR 0 1
39224: ST_TO_ADDR
// s_arr := [ tmp ] ;
39225: LD_ADDR_VAR 0 7
39229: PUSH
39230: LD_VAR 0 6
39234: PUSH
39235: EMPTY
39236: LIST
39237: ST_TO_ADDR
// for i = 1 to pos - 1 do
39238: LD_ADDR_VAR 0 5
39242: PUSH
39243: DOUBLE
39244: LD_INT 1
39246: DEC
39247: ST_TO_ADDR
39248: LD_VAR 0 2
39252: PUSH
39253: LD_INT 1
39255: MINUS
39256: PUSH
39257: FOR_TO
39258: IFFALSE 39303
// begin tmp := tmp [ pos [ i ] ] ;
39260: LD_ADDR_VAR 0 6
39264: PUSH
39265: LD_VAR 0 6
39269: PUSH
39270: LD_VAR 0 2
39274: PUSH
39275: LD_VAR 0 5
39279: ARRAY
39280: ARRAY
39281: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39282: LD_ADDR_VAR 0 7
39286: PUSH
39287: LD_VAR 0 7
39291: PUSH
39292: LD_VAR 0 6
39296: PUSH
39297: EMPTY
39298: LIST
39299: ADD
39300: ST_TO_ADDR
// end ;
39301: GO 39257
39303: POP
39304: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39305: LD_ADDR_VAR 0 6
39309: PUSH
39310: LD_VAR 0 6
39314: PPUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_VAR 0 2
39324: ARRAY
39325: PPUSH
39326: LD_VAR 0 3
39330: PPUSH
39331: CALL_OW 1
39335: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39336: LD_ADDR_VAR 0 7
39340: PUSH
39341: LD_VAR 0 7
39345: PPUSH
39346: LD_VAR 0 7
39350: PPUSH
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 1
39360: ST_TO_ADDR
// for i = s_arr downto 2 do
39361: LD_ADDR_VAR 0 5
39365: PUSH
39366: DOUBLE
39367: LD_VAR 0 7
39371: INC
39372: ST_TO_ADDR
39373: LD_INT 2
39375: PUSH
39376: FOR_DOWNTO
39377: IFFALSE 39461
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39379: LD_ADDR_VAR 0 6
39383: PUSH
39384: LD_VAR 0 7
39388: PUSH
39389: LD_VAR 0 5
39393: PUSH
39394: LD_INT 1
39396: MINUS
39397: ARRAY
39398: PPUSH
39399: LD_VAR 0 2
39403: PUSH
39404: LD_VAR 0 5
39408: PUSH
39409: LD_INT 1
39411: MINUS
39412: ARRAY
39413: PPUSH
39414: LD_VAR 0 7
39418: PUSH
39419: LD_VAR 0 5
39423: ARRAY
39424: PPUSH
39425: CALL_OW 1
39429: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39430: LD_ADDR_VAR 0 7
39434: PUSH
39435: LD_VAR 0 7
39439: PPUSH
39440: LD_VAR 0 5
39444: PUSH
39445: LD_INT 1
39447: MINUS
39448: PPUSH
39449: LD_VAR 0 6
39453: PPUSH
39454: CALL_OW 1
39458: ST_TO_ADDR
// end ;
39459: GO 39376
39461: POP
39462: POP
// result := s_arr [ 1 ] ;
39463: LD_ADDR_VAR 0 4
39467: PUSH
39468: LD_VAR 0 7
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: ST_TO_ADDR
// end ; end ;
39477: LD_VAR 0 4
39481: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39482: LD_INT 0
39484: PPUSH
39485: PPUSH
// if not list then
39486: LD_VAR 0 1
39490: NOT
39491: IFFALSE 39495
// exit ;
39493: GO 39586
// i := list [ pos1 ] ;
39495: LD_ADDR_VAR 0 5
39499: PUSH
39500: LD_VAR 0 1
39504: PUSH
39505: LD_VAR 0 2
39509: ARRAY
39510: ST_TO_ADDR
// if not i then
39511: LD_VAR 0 5
39515: NOT
39516: IFFALSE 39520
// exit ;
39518: GO 39586
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39520: LD_ADDR_VAR 0 1
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: LD_VAR 0 1
39539: PUSH
39540: LD_VAR 0 3
39544: ARRAY
39545: PPUSH
39546: CALL_OW 1
39550: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39551: LD_ADDR_VAR 0 1
39555: PUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: LD_VAR 0 3
39565: PPUSH
39566: LD_VAR 0 5
39570: PPUSH
39571: CALL_OW 1
39575: ST_TO_ADDR
// result := list ;
39576: LD_ADDR_VAR 0 4
39580: PUSH
39581: LD_VAR 0 1
39585: ST_TO_ADDR
// end ;
39586: LD_VAR 0 4
39590: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39591: LD_INT 0
39593: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39594: LD_ADDR_VAR 0 5
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: CALL_OW 250
39608: PPUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 251
39618: PPUSH
39619: LD_VAR 0 2
39623: PPUSH
39624: LD_VAR 0 3
39628: PPUSH
39629: LD_VAR 0 4
39633: PPUSH
39634: CALL 39644 0 5
39638: ST_TO_ADDR
// end ;
39639: LD_VAR 0 5
39643: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
// if not list then
39650: LD_VAR 0 3
39654: NOT
39655: IFFALSE 39659
// exit ;
39657: GO 40047
// result := [ ] ;
39659: LD_ADDR_VAR 0 6
39663: PUSH
39664: EMPTY
39665: ST_TO_ADDR
// for i in list do
39666: LD_ADDR_VAR 0 7
39670: PUSH
39671: LD_VAR 0 3
39675: PUSH
39676: FOR_IN
39677: IFFALSE 39879
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39679: LD_ADDR_VAR 0 9
39683: PUSH
39684: LD_VAR 0 7
39688: PPUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: CALL_OW 297
39703: ST_TO_ADDR
// if not result then
39704: LD_VAR 0 6
39708: NOT
39709: IFFALSE 39735
// result := [ [ i , tmp ] ] else
39711: LD_ADDR_VAR 0 6
39715: PUSH
39716: LD_VAR 0 7
39720: PUSH
39721: LD_VAR 0 9
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: ST_TO_ADDR
39733: GO 39877
// begin if result [ result ] [ 2 ] < tmp then
39735: LD_VAR 0 6
39739: PUSH
39740: LD_VAR 0 6
39744: ARRAY
39745: PUSH
39746: LD_INT 2
39748: ARRAY
39749: PUSH
39750: LD_VAR 0 9
39754: LESS
39755: IFFALSE 39797
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39757: LD_ADDR_VAR 0 6
39761: PUSH
39762: LD_VAR 0 6
39766: PPUSH
39767: LD_VAR 0 6
39771: PUSH
39772: LD_INT 1
39774: PLUS
39775: PPUSH
39776: LD_VAR 0 7
39780: PUSH
39781: LD_VAR 0 9
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PPUSH
39790: CALL_OW 2
39794: ST_TO_ADDR
39795: GO 39877
// for j = 1 to result do
39797: LD_ADDR_VAR 0 8
39801: PUSH
39802: DOUBLE
39803: LD_INT 1
39805: DEC
39806: ST_TO_ADDR
39807: LD_VAR 0 6
39811: PUSH
39812: FOR_TO
39813: IFFALSE 39875
// begin if tmp < result [ j ] [ 2 ] then
39815: LD_VAR 0 9
39819: PUSH
39820: LD_VAR 0 6
39824: PUSH
39825: LD_VAR 0 8
39829: ARRAY
39830: PUSH
39831: LD_INT 2
39833: ARRAY
39834: LESS
39835: IFFALSE 39873
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39837: LD_ADDR_VAR 0 6
39841: PUSH
39842: LD_VAR 0 6
39846: PPUSH
39847: LD_VAR 0 8
39851: PPUSH
39852: LD_VAR 0 7
39856: PUSH
39857: LD_VAR 0 9
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PPUSH
39866: CALL_OW 2
39870: ST_TO_ADDR
// break ;
39871: GO 39875
// end ; end ;
39873: GO 39812
39875: POP
39876: POP
// end ; end ;
39877: GO 39676
39879: POP
39880: POP
// if result and not asc then
39881: LD_VAR 0 6
39885: PUSH
39886: LD_VAR 0 4
39890: NOT
39891: AND
39892: IFFALSE 39967
// begin tmp := result ;
39894: LD_ADDR_VAR 0 9
39898: PUSH
39899: LD_VAR 0 6
39903: ST_TO_ADDR
// for i = tmp downto 1 do
39904: LD_ADDR_VAR 0 7
39908: PUSH
39909: DOUBLE
39910: LD_VAR 0 9
39914: INC
39915: ST_TO_ADDR
39916: LD_INT 1
39918: PUSH
39919: FOR_DOWNTO
39920: IFFALSE 39965
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39922: LD_ADDR_VAR 0 6
39926: PUSH
39927: LD_VAR 0 6
39931: PPUSH
39932: LD_VAR 0 9
39936: PUSH
39937: LD_VAR 0 7
39941: MINUS
39942: PUSH
39943: LD_INT 1
39945: PLUS
39946: PPUSH
39947: LD_VAR 0 9
39951: PUSH
39952: LD_VAR 0 7
39956: ARRAY
39957: PPUSH
39958: CALL_OW 1
39962: ST_TO_ADDR
39963: GO 39919
39965: POP
39966: POP
// end ; tmp := [ ] ;
39967: LD_ADDR_VAR 0 9
39971: PUSH
39972: EMPTY
39973: ST_TO_ADDR
// if mode then
39974: LD_VAR 0 5
39978: IFFALSE 40047
// begin for i = 1 to result do
39980: LD_ADDR_VAR 0 7
39984: PUSH
39985: DOUBLE
39986: LD_INT 1
39988: DEC
39989: ST_TO_ADDR
39990: LD_VAR 0 6
39994: PUSH
39995: FOR_TO
39996: IFFALSE 40035
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_VAR 0 9
40007: PPUSH
40008: LD_VAR 0 7
40012: PPUSH
40013: LD_VAR 0 6
40017: PUSH
40018: LD_VAR 0 7
40022: ARRAY
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: PPUSH
40028: CALL_OW 1
40032: ST_TO_ADDR
40033: GO 39995
40035: POP
40036: POP
// result := tmp ;
40037: LD_ADDR_VAR 0 6
40041: PUSH
40042: LD_VAR 0 9
40046: ST_TO_ADDR
// end ; end ;
40047: LD_VAR 0 6
40051: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40052: LD_INT 0
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40060: LD_ADDR_VAR 0 5
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
// if not x or not y then
40082: LD_VAR 0 2
40086: NOT
40087: PUSH
40088: LD_VAR 0 3
40092: NOT
40093: OR
40094: IFFALSE 40098
// exit ;
40096: GO 41750
// if not range then
40098: LD_VAR 0 4
40102: NOT
40103: IFFALSE 40113
// range := 10 ;
40105: LD_ADDR_VAR 0 4
40109: PUSH
40110: LD_INT 10
40112: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40113: LD_ADDR_VAR 0 8
40117: PUSH
40118: LD_INT 81
40120: PUSH
40121: LD_VAR 0 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 92
40132: PUSH
40133: LD_VAR 0 2
40137: PUSH
40138: LD_VAR 0 3
40142: PUSH
40143: LD_VAR 0 4
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: LD_INT 21
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: PPUSH
40176: CALL_OW 69
40180: ST_TO_ADDR
// if not tmp then
40181: LD_VAR 0 8
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 41750
// for i in tmp do
40190: LD_ADDR_VAR 0 6
40194: PUSH
40195: LD_VAR 0 8
40199: PUSH
40200: FOR_IN
40201: IFFALSE 41725
// begin points := [ 0 , 0 , 0 ] ;
40203: LD_ADDR_VAR 0 9
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// bpoints := 1 ;
40222: LD_ADDR_VAR 0 10
40226: PUSH
40227: LD_INT 1
40229: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40230: LD_VAR 0 6
40234: PPUSH
40235: CALL_OW 247
40239: PUSH
40240: LD_INT 1
40242: DOUBLE
40243: EQUAL
40244: IFTRUE 40248
40246: GO 40826
40248: POP
// begin if GetClass ( i ) = 1 then
40249: LD_VAR 0 6
40253: PPUSH
40254: CALL_OW 257
40258: PUSH
40259: LD_INT 1
40261: EQUAL
40262: IFFALSE 40283
// points := [ 10 , 5 , 3 ] ;
40264: LD_ADDR_VAR 0 9
40268: PUSH
40269: LD_INT 10
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40283: LD_VAR 0 6
40287: PPUSH
40288: CALL_OW 257
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 4
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: IN
40307: IFFALSE 40328
// points := [ 3 , 2 , 1 ] ;
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40328: LD_VAR 0 6
40332: PPUSH
40333: CALL_OW 257
40337: PUSH
40338: LD_INT 5
40340: EQUAL
40341: IFFALSE 40362
// points := [ 130 , 5 , 2 ] ;
40343: LD_ADDR_VAR 0 9
40347: PUSH
40348: LD_INT 130
40350: PUSH
40351: LD_INT 5
40353: PUSH
40354: LD_INT 2
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40362: LD_VAR 0 6
40366: PPUSH
40367: CALL_OW 257
40371: PUSH
40372: LD_INT 8
40374: EQUAL
40375: IFFALSE 40396
// points := [ 35 , 35 , 30 ] ;
40377: LD_ADDR_VAR 0 9
40381: PUSH
40382: LD_INT 35
40384: PUSH
40385: LD_INT 35
40387: PUSH
40388: LD_INT 30
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40396: LD_VAR 0 6
40400: PPUSH
40401: CALL_OW 257
40405: PUSH
40406: LD_INT 9
40408: EQUAL
40409: IFFALSE 40430
// points := [ 20 , 55 , 40 ] ;
40411: LD_ADDR_VAR 0 9
40415: PUSH
40416: LD_INT 20
40418: PUSH
40419: LD_INT 55
40421: PUSH
40422: LD_INT 40
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40430: LD_VAR 0 6
40434: PPUSH
40435: CALL_OW 257
40439: PUSH
40440: LD_INT 12
40442: PUSH
40443: LD_INT 16
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: IN
40450: IFFALSE 40471
// points := [ 5 , 3 , 2 ] ;
40452: LD_ADDR_VAR 0 9
40456: PUSH
40457: LD_INT 5
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40471: LD_VAR 0 6
40475: PPUSH
40476: CALL_OW 257
40480: PUSH
40481: LD_INT 17
40483: EQUAL
40484: IFFALSE 40505
// points := [ 100 , 50 , 75 ] ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_INT 100
40493: PUSH
40494: LD_INT 50
40496: PUSH
40497: LD_INT 75
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40505: LD_VAR 0 6
40509: PPUSH
40510: CALL_OW 257
40514: PUSH
40515: LD_INT 15
40517: EQUAL
40518: IFFALSE 40539
// points := [ 10 , 5 , 3 ] ;
40520: LD_ADDR_VAR 0 9
40524: PUSH
40525: LD_INT 10
40527: PUSH
40528: LD_INT 5
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40539: LD_VAR 0 6
40543: PPUSH
40544: CALL_OW 257
40548: PUSH
40549: LD_INT 14
40551: EQUAL
40552: IFFALSE 40573
// points := [ 10 , 0 , 0 ] ;
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: LD_INT 10
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40573: LD_VAR 0 6
40577: PPUSH
40578: CALL_OW 257
40582: PUSH
40583: LD_INT 11
40585: EQUAL
40586: IFFALSE 40607
// points := [ 30 , 10 , 5 ] ;
40588: LD_ADDR_VAR 0 9
40592: PUSH
40593: LD_INT 30
40595: PUSH
40596: LD_INT 10
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_INT 5
40614: PPUSH
40615: CALL_OW 321
40619: PUSH
40620: LD_INT 2
40622: EQUAL
40623: IFFALSE 40640
// bpoints := bpoints * 1.8 ;
40625: LD_ADDR_VAR 0 10
40629: PUSH
40630: LD_VAR 0 10
40634: PUSH
40635: LD_REAL  1.80000000000000E+0000
40638: MUL
40639: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40640: LD_VAR 0 6
40644: PPUSH
40645: CALL_OW 257
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 4
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: IN
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: LD_INT 51
40676: PPUSH
40677: CALL_OW 321
40681: PUSH
40682: LD_INT 2
40684: EQUAL
40685: AND
40686: IFFALSE 40703
// bpoints := bpoints * 1.2 ;
40688: LD_ADDR_VAR 0 10
40692: PUSH
40693: LD_VAR 0 10
40697: PUSH
40698: LD_REAL  1.20000000000000E+0000
40701: MUL
40702: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40703: LD_VAR 0 6
40707: PPUSH
40708: CALL_OW 257
40712: PUSH
40713: LD_INT 5
40715: PUSH
40716: LD_INT 7
40718: PUSH
40719: LD_INT 9
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: IN
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_INT 52
40735: PPUSH
40736: CALL_OW 321
40740: PUSH
40741: LD_INT 2
40743: EQUAL
40744: AND
40745: IFFALSE 40762
// bpoints := bpoints * 1.5 ;
40747: LD_ADDR_VAR 0 10
40751: PUSH
40752: LD_VAR 0 10
40756: PUSH
40757: LD_REAL  1.50000000000000E+0000
40760: MUL
40761: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40762: LD_VAR 0 1
40766: PPUSH
40767: LD_INT 66
40769: PPUSH
40770: CALL_OW 321
40774: PUSH
40775: LD_INT 2
40777: EQUAL
40778: IFFALSE 40795
// bpoints := bpoints * 1.1 ;
40780: LD_ADDR_VAR 0 10
40784: PUSH
40785: LD_VAR 0 10
40789: PUSH
40790: LD_REAL  1.10000000000000E+0000
40793: MUL
40794: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40795: LD_ADDR_VAR 0 10
40799: PUSH
40800: LD_VAR 0 10
40804: PUSH
40805: LD_VAR 0 6
40809: PPUSH
40810: LD_INT 1
40812: PPUSH
40813: CALL_OW 259
40817: PUSH
40818: LD_REAL  1.15000000000000E+0000
40821: MUL
40822: MUL
40823: ST_TO_ADDR
// end ; unit_vehicle :
40824: GO 41654
40826: LD_INT 2
40828: DOUBLE
40829: EQUAL
40830: IFTRUE 40834
40832: GO 41642
40834: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40835: LD_VAR 0 6
40839: PPUSH
40840: CALL_OW 264
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 42
40850: PUSH
40851: LD_INT 24
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: IN
40859: IFFALSE 40880
// points := [ 25 , 5 , 3 ] ;
40861: LD_ADDR_VAR 0 9
40865: PUSH
40866: LD_INT 25
40868: PUSH
40869: LD_INT 5
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40880: LD_VAR 0 6
40884: PPUSH
40885: CALL_OW 264
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 43
40895: PUSH
40896: LD_INT 25
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: IN
40904: IFFALSE 40925
// points := [ 40 , 15 , 5 ] ;
40906: LD_ADDR_VAR 0 9
40910: PUSH
40911: LD_INT 40
40913: PUSH
40914: LD_INT 15
40916: PUSH
40917: LD_INT 5
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40925: LD_VAR 0 6
40929: PPUSH
40930: CALL_OW 264
40934: PUSH
40935: LD_INT 3
40937: PUSH
40938: LD_INT 23
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: IN
40945: IFFALSE 40966
// points := [ 7 , 25 , 8 ] ;
40947: LD_ADDR_VAR 0 9
40951: PUSH
40952: LD_INT 7
40954: PUSH
40955: LD_INT 25
40957: PUSH
40958: LD_INT 8
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40966: LD_VAR 0 6
40970: PPUSH
40971: CALL_OW 264
40975: PUSH
40976: LD_INT 5
40978: PUSH
40979: LD_INT 27
40981: PUSH
40982: LD_INT 44
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: IN
40990: IFFALSE 41011
// points := [ 14 , 50 , 16 ] ;
40992: LD_ADDR_VAR 0 9
40996: PUSH
40997: LD_INT 14
40999: PUSH
41000: LD_INT 50
41002: PUSH
41003: LD_INT 16
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41011: LD_VAR 0 6
41015: PPUSH
41016: CALL_OW 264
41020: PUSH
41021: LD_INT 6
41023: PUSH
41024: LD_INT 46
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: IN
41031: IFFALSE 41052
// points := [ 32 , 120 , 70 ] ;
41033: LD_ADDR_VAR 0 9
41037: PUSH
41038: LD_INT 32
41040: PUSH
41041: LD_INT 120
41043: PUSH
41044: LD_INT 70
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41052: LD_VAR 0 6
41056: PPUSH
41057: CALL_OW 264
41061: PUSH
41062: LD_INT 7
41064: PUSH
41065: LD_INT 28
41067: PUSH
41068: LD_INT 45
41070: PUSH
41071: LD_EXP 134
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: IN
41082: IFFALSE 41103
// points := [ 35 , 20 , 45 ] ;
41084: LD_ADDR_VAR 0 9
41088: PUSH
41089: LD_INT 35
41091: PUSH
41092: LD_INT 20
41094: PUSH
41095: LD_INT 45
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41103: LD_VAR 0 6
41107: PPUSH
41108: CALL_OW 264
41112: PUSH
41113: LD_INT 47
41115: PUSH
41116: EMPTY
41117: LIST
41118: IN
41119: IFFALSE 41140
// points := [ 67 , 45 , 75 ] ;
41121: LD_ADDR_VAR 0 9
41125: PUSH
41126: LD_INT 67
41128: PUSH
41129: LD_INT 45
41131: PUSH
41132: LD_INT 75
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41140: LD_VAR 0 6
41144: PPUSH
41145: CALL_OW 264
41149: PUSH
41150: LD_INT 26
41152: PUSH
41153: EMPTY
41154: LIST
41155: IN
41156: IFFALSE 41177
// points := [ 120 , 30 , 80 ] ;
41158: LD_ADDR_VAR 0 9
41162: PUSH
41163: LD_INT 120
41165: PUSH
41166: LD_INT 30
41168: PUSH
41169: LD_INT 80
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41177: LD_VAR 0 6
41181: PPUSH
41182: CALL_OW 264
41186: PUSH
41187: LD_INT 22
41189: PUSH
41190: EMPTY
41191: LIST
41192: IN
41193: IFFALSE 41214
// points := [ 40 , 1 , 1 ] ;
41195: LD_ADDR_VAR 0 9
41199: PUSH
41200: LD_INT 40
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41214: LD_VAR 0 6
41218: PPUSH
41219: CALL_OW 264
41223: PUSH
41224: LD_INT 29
41226: PUSH
41227: EMPTY
41228: LIST
41229: IN
41230: IFFALSE 41251
// points := [ 70 , 200 , 400 ] ;
41232: LD_ADDR_VAR 0 9
41236: PUSH
41237: LD_INT 70
41239: PUSH
41240: LD_INT 200
41242: PUSH
41243: LD_INT 400
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41251: LD_VAR 0 6
41255: PPUSH
41256: CALL_OW 264
41260: PUSH
41261: LD_INT 14
41263: PUSH
41264: LD_INT 53
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: IN
41271: IFFALSE 41292
// points := [ 40 , 10 , 20 ] ;
41273: LD_ADDR_VAR 0 9
41277: PUSH
41278: LD_INT 40
41280: PUSH
41281: LD_INT 10
41283: PUSH
41284: LD_INT 20
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41292: LD_VAR 0 6
41296: PPUSH
41297: CALL_OW 264
41301: PUSH
41302: LD_INT 9
41304: PUSH
41305: EMPTY
41306: LIST
41307: IN
41308: IFFALSE 41329
// points := [ 5 , 70 , 20 ] ;
41310: LD_ADDR_VAR 0 9
41314: PUSH
41315: LD_INT 5
41317: PUSH
41318: LD_INT 70
41320: PUSH
41321: LD_INT 20
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41329: LD_VAR 0 6
41333: PPUSH
41334: CALL_OW 264
41338: PUSH
41339: LD_INT 10
41341: PUSH
41342: EMPTY
41343: LIST
41344: IN
41345: IFFALSE 41366
// points := [ 35 , 110 , 70 ] ;
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: LD_INT 35
41354: PUSH
41355: LD_INT 110
41357: PUSH
41358: LD_INT 70
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41366: LD_VAR 0 6
41370: PPUSH
41371: CALL_OW 265
41375: PUSH
41376: LD_INT 25
41378: EQUAL
41379: IFFALSE 41400
// points := [ 80 , 65 , 100 ] ;
41381: LD_ADDR_VAR 0 9
41385: PUSH
41386: LD_INT 80
41388: PUSH
41389: LD_INT 65
41391: PUSH
41392: LD_INT 100
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41400: LD_VAR 0 6
41404: PPUSH
41405: CALL_OW 263
41409: PUSH
41410: LD_INT 1
41412: EQUAL
41413: IFFALSE 41448
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41415: LD_ADDR_VAR 0 10
41419: PUSH
41420: LD_VAR 0 10
41424: PUSH
41425: LD_VAR 0 6
41429: PPUSH
41430: CALL_OW 311
41434: PPUSH
41435: LD_INT 3
41437: PPUSH
41438: CALL_OW 259
41442: PUSH
41443: LD_INT 4
41445: MUL
41446: MUL
41447: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41448: LD_VAR 0 6
41452: PPUSH
41453: CALL_OW 263
41457: PUSH
41458: LD_INT 2
41460: EQUAL
41461: IFFALSE 41512
// begin j := IsControledBy ( i ) ;
41463: LD_ADDR_VAR 0 7
41467: PUSH
41468: LD_VAR 0 6
41472: PPUSH
41473: CALL_OW 312
41477: ST_TO_ADDR
// if j then
41478: LD_VAR 0 7
41482: IFFALSE 41512
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41484: LD_ADDR_VAR 0 10
41488: PUSH
41489: LD_VAR 0 10
41493: PUSH
41494: LD_VAR 0 7
41498: PPUSH
41499: LD_INT 3
41501: PPUSH
41502: CALL_OW 259
41506: PUSH
41507: LD_INT 3
41509: MUL
41510: MUL
41511: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41512: LD_VAR 0 6
41516: PPUSH
41517: CALL_OW 264
41521: PUSH
41522: LD_INT 5
41524: PUSH
41525: LD_INT 6
41527: PUSH
41528: LD_INT 46
41530: PUSH
41531: LD_INT 44
41533: PUSH
41534: LD_INT 47
41536: PUSH
41537: LD_INT 45
41539: PUSH
41540: LD_INT 28
41542: PUSH
41543: LD_INT 7
41545: PUSH
41546: LD_INT 27
41548: PUSH
41549: LD_INT 29
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: IN
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: LD_INT 52
41572: PPUSH
41573: CALL_OW 321
41577: PUSH
41578: LD_INT 2
41580: EQUAL
41581: AND
41582: IFFALSE 41599
// bpoints := bpoints * 1.2 ;
41584: LD_ADDR_VAR 0 10
41588: PUSH
41589: LD_VAR 0 10
41593: PUSH
41594: LD_REAL  1.20000000000000E+0000
41597: MUL
41598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41599: LD_VAR 0 6
41603: PPUSH
41604: CALL_OW 264
41608: PUSH
41609: LD_INT 6
41611: PUSH
41612: LD_INT 46
41614: PUSH
41615: LD_INT 47
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: IN
41623: IFFALSE 41640
// bpoints := bpoints * 1.2 ;
41625: LD_ADDR_VAR 0 10
41629: PUSH
41630: LD_VAR 0 10
41634: PUSH
41635: LD_REAL  1.20000000000000E+0000
41638: MUL
41639: ST_TO_ADDR
// end ; unit_building :
41640: GO 41654
41642: LD_INT 3
41644: DOUBLE
41645: EQUAL
41646: IFTRUE 41650
41648: GO 41653
41650: POP
// ; end ;
41651: GO 41654
41653: POP
// for j = 1 to 3 do
41654: LD_ADDR_VAR 0 7
41658: PUSH
41659: DOUBLE
41660: LD_INT 1
41662: DEC
41663: ST_TO_ADDR
41664: LD_INT 3
41666: PUSH
41667: FOR_TO
41668: IFFALSE 41721
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_VAR 0 5
41679: PPUSH
41680: LD_VAR 0 7
41684: PPUSH
41685: LD_VAR 0 5
41689: PUSH
41690: LD_VAR 0 7
41694: ARRAY
41695: PUSH
41696: LD_VAR 0 9
41700: PUSH
41701: LD_VAR 0 7
41705: ARRAY
41706: PUSH
41707: LD_VAR 0 10
41711: MUL
41712: PLUS
41713: PPUSH
41714: CALL_OW 1
41718: ST_TO_ADDR
41719: GO 41667
41721: POP
41722: POP
// end ;
41723: GO 40200
41725: POP
41726: POP
// result := Replace ( result , 4 , tmp ) ;
41727: LD_ADDR_VAR 0 5
41731: PUSH
41732: LD_VAR 0 5
41736: PPUSH
41737: LD_INT 4
41739: PPUSH
41740: LD_VAR 0 8
41744: PPUSH
41745: CALL_OW 1
41749: ST_TO_ADDR
// end ;
41750: LD_VAR 0 5
41754: RET
// export function DangerAtRange ( unit , range ) ; begin
41755: LD_INT 0
41757: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41758: LD_ADDR_VAR 0 3
41762: PUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: CALL_OW 255
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 250
41782: PPUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_VAR 0 2
41797: PPUSH
41798: CALL 40052 0 4
41802: ST_TO_ADDR
// end ;
41803: LD_VAR 0 3
41807: RET
// export function DangerInArea ( side , area ) ; begin
41808: LD_INT 0
41810: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41811: LD_ADDR_VAR 0 3
41815: PUSH
41816: LD_VAR 0 2
41820: PPUSH
41821: LD_INT 81
41823: PUSH
41824: LD_VAR 0 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PPUSH
41833: CALL_OW 70
41837: ST_TO_ADDR
// end ;
41838: LD_VAR 0 3
41842: RET
// export function IsExtension ( b ) ; begin
41843: LD_INT 0
41845: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41846: LD_ADDR_VAR 0 2
41850: PUSH
41851: LD_VAR 0 1
41855: PUSH
41856: LD_INT 23
41858: PUSH
41859: LD_INT 20
41861: PUSH
41862: LD_INT 22
41864: PUSH
41865: LD_INT 17
41867: PUSH
41868: LD_INT 24
41870: PUSH
41871: LD_INT 21
41873: PUSH
41874: LD_INT 19
41876: PUSH
41877: LD_INT 16
41879: PUSH
41880: LD_INT 25
41882: PUSH
41883: LD_INT 18
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: IN
41898: ST_TO_ADDR
// end ;
41899: LD_VAR 0 2
41903: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
41908: PPUSH
// result := [ ] ;
41909: LD_ADDR_VAR 0 4
41913: PUSH
41914: EMPTY
41915: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: LD_INT 21
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PPUSH
41936: CALL_OW 70
41940: ST_TO_ADDR
// if not tmp then
41941: LD_VAR 0 5
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 42014
// if checkLink then
41950: LD_VAR 0 3
41954: IFFALSE 42004
// begin for i in tmp do
41956: LD_ADDR_VAR 0 6
41960: PUSH
41961: LD_VAR 0 5
41965: PUSH
41966: FOR_IN
41967: IFFALSE 42002
// if GetBase ( i ) <> base then
41969: LD_VAR 0 6
41973: PPUSH
41974: CALL_OW 274
41978: PUSH
41979: LD_VAR 0 1
41983: NONEQUAL
41984: IFFALSE 42000
// ComLinkToBase ( base , i ) ;
41986: LD_VAR 0 1
41990: PPUSH
41991: LD_VAR 0 6
41995: PPUSH
41996: CALL_OW 169
42000: GO 41966
42002: POP
42003: POP
// end ; result := tmp ;
42004: LD_ADDR_VAR 0 4
42008: PUSH
42009: LD_VAR 0 5
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 4
42018: RET
// export function ComComplete ( units , b ) ; var i ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
// if not units then
42023: LD_VAR 0 1
42027: NOT
42028: IFFALSE 42032
// exit ;
42030: GO 42122
// for i in units do
42032: LD_ADDR_VAR 0 4
42036: PUSH
42037: LD_VAR 0 1
42041: PUSH
42042: FOR_IN
42043: IFFALSE 42120
// if BuildingStatus ( b ) = bs_build then
42045: LD_VAR 0 2
42049: PPUSH
42050: CALL_OW 461
42054: PUSH
42055: LD_INT 1
42057: EQUAL
42058: IFFALSE 42118
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42060: LD_VAR 0 4
42064: PPUSH
42065: LD_STRING h
42067: PUSH
42068: LD_VAR 0 2
42072: PPUSH
42073: CALL_OW 250
42077: PUSH
42078: LD_VAR 0 2
42082: PPUSH
42083: CALL_OW 251
42087: PUSH
42088: LD_VAR 0 2
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: PPUSH
42114: CALL_OW 446
42118: GO 42042
42120: POP
42121: POP
// end ;
42122: LD_VAR 0 3
42126: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42127: LD_INT 0
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42135: LD_VAR 0 1
42139: NOT
42140: PUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: CALL_OW 263
42150: PUSH
42151: LD_INT 2
42153: NONEQUAL
42154: OR
42155: IFFALSE 42159
// exit ;
42157: GO 42475
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42159: LD_ADDR_VAR 0 6
42163: PUSH
42164: LD_INT 22
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 255
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 30
42186: PUSH
42187: LD_INT 36
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 34
42196: PUSH
42197: LD_INT 31
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PPUSH
42213: CALL_OW 69
42217: ST_TO_ADDR
// if not tmp then
42218: LD_VAR 0 6
42222: NOT
42223: IFFALSE 42227
// exit ;
42225: GO 42475
// result := [ ] ;
42227: LD_ADDR_VAR 0 2
42231: PUSH
42232: EMPTY
42233: ST_TO_ADDR
// for i in tmp do
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: LD_VAR 0 6
42243: PUSH
42244: FOR_IN
42245: IFFALSE 42316
// begin t := UnitsInside ( i ) ;
42247: LD_ADDR_VAR 0 4
42251: PUSH
42252: LD_VAR 0 3
42256: PPUSH
42257: CALL_OW 313
42261: ST_TO_ADDR
// if t then
42262: LD_VAR 0 4
42266: IFFALSE 42314
// for j in t do
42268: LD_ADDR_VAR 0 7
42272: PUSH
42273: LD_VAR 0 4
42277: PUSH
42278: FOR_IN
42279: IFFALSE 42312
// result := Replace ( result , result + 1 , j ) ;
42281: LD_ADDR_VAR 0 2
42285: PUSH
42286: LD_VAR 0 2
42290: PPUSH
42291: LD_VAR 0 2
42295: PUSH
42296: LD_INT 1
42298: PLUS
42299: PPUSH
42300: LD_VAR 0 7
42304: PPUSH
42305: CALL_OW 1
42309: ST_TO_ADDR
42310: GO 42278
42312: POP
42313: POP
// end ;
42314: GO 42244
42316: POP
42317: POP
// if not result then
42318: LD_VAR 0 2
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42475
// mech := result [ 1 ] ;
42327: LD_ADDR_VAR 0 5
42331: PUSH
42332: LD_VAR 0 2
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: ST_TO_ADDR
// if result > 1 then
42341: LD_VAR 0 2
42345: PUSH
42346: LD_INT 1
42348: GREATER
42349: IFFALSE 42461
// begin for i = 2 to result do
42351: LD_ADDR_VAR 0 3
42355: PUSH
42356: DOUBLE
42357: LD_INT 2
42359: DEC
42360: ST_TO_ADDR
42361: LD_VAR 0 2
42365: PUSH
42366: FOR_TO
42367: IFFALSE 42459
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42369: LD_ADDR_VAR 0 4
42373: PUSH
42374: LD_VAR 0 2
42378: PUSH
42379: LD_VAR 0 3
42383: ARRAY
42384: PPUSH
42385: LD_INT 3
42387: PPUSH
42388: CALL_OW 259
42392: PUSH
42393: LD_VAR 0 2
42397: PUSH
42398: LD_VAR 0 3
42402: ARRAY
42403: PPUSH
42404: CALL_OW 432
42408: MINUS
42409: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42410: LD_VAR 0 4
42414: PUSH
42415: LD_VAR 0 5
42419: PPUSH
42420: LD_INT 3
42422: PPUSH
42423: CALL_OW 259
42427: PUSH
42428: LD_VAR 0 5
42432: PPUSH
42433: CALL_OW 432
42437: MINUS
42438: GREATEREQUAL
42439: IFFALSE 42457
// mech := result [ i ] ;
42441: LD_ADDR_VAR 0 5
42445: PUSH
42446: LD_VAR 0 2
42450: PUSH
42451: LD_VAR 0 3
42455: ARRAY
42456: ST_TO_ADDR
// end ;
42457: GO 42366
42459: POP
42460: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42461: LD_VAR 0 1
42465: PPUSH
42466: LD_VAR 0 5
42470: PPUSH
42471: CALL_OW 135
// end ;
42475: LD_VAR 0 2
42479: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42480: LD_INT 0
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
// result := [ ] ;
42495: LD_ADDR_VAR 0 7
42499: PUSH
42500: EMPTY
42501: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42502: LD_VAR 0 1
42506: PPUSH
42507: CALL_OW 266
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: IN
42522: NOT
42523: IFFALSE 42527
// exit ;
42525: GO 44161
// if name then
42527: LD_VAR 0 3
42531: IFFALSE 42547
// SetBName ( base_dep , name ) ;
42533: LD_VAR 0 1
42537: PPUSH
42538: LD_VAR 0 3
42542: PPUSH
42543: CALL_OW 500
// base := GetBase ( base_dep ) ;
42547: LD_ADDR_VAR 0 15
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 274
42561: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42562: LD_ADDR_VAR 0 16
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 255
42576: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42577: LD_ADDR_VAR 0 17
42581: PUSH
42582: LD_VAR 0 1
42586: PPUSH
42587: CALL_OW 248
42591: ST_TO_ADDR
// if sources then
42592: LD_VAR 0 5
42596: IFFALSE 42643
// for i = 1 to 3 do
42598: LD_ADDR_VAR 0 8
42602: PUSH
42603: DOUBLE
42604: LD_INT 1
42606: DEC
42607: ST_TO_ADDR
42608: LD_INT 3
42610: PUSH
42611: FOR_TO
42612: IFFALSE 42641
// AddResourceType ( base , i , sources [ i ] ) ;
42614: LD_VAR 0 15
42618: PPUSH
42619: LD_VAR 0 8
42623: PPUSH
42624: LD_VAR 0 5
42628: PUSH
42629: LD_VAR 0 8
42633: ARRAY
42634: PPUSH
42635: CALL_OW 276
42639: GO 42611
42641: POP
42642: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42643: LD_ADDR_VAR 0 18
42647: PUSH
42648: LD_VAR 0 15
42652: PPUSH
42653: LD_VAR 0 2
42657: PPUSH
42658: LD_INT 1
42660: PPUSH
42661: CALL 41904 0 3
42665: ST_TO_ADDR
// InitHc ;
42666: CALL_OW 19
// InitUc ;
42670: CALL_OW 18
// uc_side := side ;
42674: LD_ADDR_OWVAR 20
42678: PUSH
42679: LD_VAR 0 16
42683: ST_TO_ADDR
// uc_nation := nation ;
42684: LD_ADDR_OWVAR 21
42688: PUSH
42689: LD_VAR 0 17
42693: ST_TO_ADDR
// if buildings then
42694: LD_VAR 0 18
42698: IFFALSE 44020
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42700: LD_ADDR_VAR 0 19
42704: PUSH
42705: LD_VAR 0 18
42709: PPUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 30
42715: PUSH
42716: LD_INT 29
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 30
42725: PUSH
42726: LD_INT 30
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: PPUSH
42738: CALL_OW 72
42742: ST_TO_ADDR
// if tmp then
42743: LD_VAR 0 19
42747: IFFALSE 42795
// for i in tmp do
42749: LD_ADDR_VAR 0 8
42753: PUSH
42754: LD_VAR 0 19
42758: PUSH
42759: FOR_IN
42760: IFFALSE 42793
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42762: LD_VAR 0 8
42766: PPUSH
42767: CALL_OW 250
42771: PPUSH
42772: LD_VAR 0 8
42776: PPUSH
42777: CALL_OW 251
42781: PPUSH
42782: LD_VAR 0 16
42786: PPUSH
42787: CALL_OW 441
42791: GO 42759
42793: POP
42794: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42795: LD_VAR 0 18
42799: PPUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: LD_INT 32
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 30
42815: PUSH
42816: LD_INT 33
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PPUSH
42828: CALL_OW 72
42832: IFFALSE 42920
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42834: LD_ADDR_VAR 0 8
42838: PUSH
42839: LD_VAR 0 18
42843: PPUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 30
42849: PUSH
42850: LD_INT 32
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 30
42859: PUSH
42860: LD_INT 33
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: PPUSH
42872: CALL_OW 72
42876: PUSH
42877: FOR_IN
42878: IFFALSE 42918
// begin if not GetBWeapon ( i ) then
42880: LD_VAR 0 8
42884: PPUSH
42885: CALL_OW 269
42889: NOT
42890: IFFALSE 42916
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42892: LD_VAR 0 8
42896: PPUSH
42897: LD_VAR 0 8
42901: PPUSH
42902: LD_VAR 0 2
42906: PPUSH
42907: CALL 44166 0 2
42911: PPUSH
42912: CALL_OW 431
// end ;
42916: GO 42877
42918: POP
42919: POP
// end ; for i = 1 to personel do
42920: LD_ADDR_VAR 0 8
42924: PUSH
42925: DOUBLE
42926: LD_INT 1
42928: DEC
42929: ST_TO_ADDR
42930: LD_VAR 0 6
42934: PUSH
42935: FOR_TO
42936: IFFALSE 44000
// begin if i > 4 then
42938: LD_VAR 0 8
42942: PUSH
42943: LD_INT 4
42945: GREATER
42946: IFFALSE 42950
// break ;
42948: GO 44000
// case i of 1 :
42950: LD_VAR 0 8
42954: PUSH
42955: LD_INT 1
42957: DOUBLE
42958: EQUAL
42959: IFTRUE 42963
42961: GO 43043
42963: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42964: LD_ADDR_VAR 0 12
42968: PUSH
42969: LD_VAR 0 18
42973: PPUSH
42974: LD_INT 22
42976: PUSH
42977: LD_VAR 0 16
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 58
42988: PUSH
42989: EMPTY
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 30
42997: PUSH
42998: LD_INT 32
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 30
43007: PUSH
43008: LD_INT 4
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 30
43017: PUSH
43018: LD_INT 5
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: PPUSH
43036: CALL_OW 72
43040: ST_TO_ADDR
43041: GO 43265
43043: LD_INT 2
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43051
43049: GO 43113
43051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43052: LD_ADDR_VAR 0 12
43056: PUSH
43057: LD_VAR 0 18
43061: PPUSH
43062: LD_INT 22
43064: PUSH
43065: LD_VAR 0 16
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 30
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 30
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PPUSH
43106: CALL_OW 72
43110: ST_TO_ADDR
43111: GO 43265
43113: LD_INT 3
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43183
43121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43122: LD_ADDR_VAR 0 12
43126: PUSH
43127: LD_VAR 0 18
43131: PPUSH
43132: LD_INT 22
43134: PUSH
43135: LD_VAR 0 16
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 30
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 30
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PPUSH
43176: CALL_OW 72
43180: ST_TO_ADDR
43181: GO 43265
43183: LD_INT 4
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43264
43191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43192: LD_ADDR_VAR 0 12
43196: PUSH
43197: LD_VAR 0 18
43201: PPUSH
43202: LD_INT 22
43204: PUSH
43205: LD_VAR 0 16
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 30
43219: PUSH
43220: LD_INT 6
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 30
43229: PUSH
43230: LD_INT 7
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 30
43239: PUSH
43240: LD_INT 8
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PPUSH
43257: CALL_OW 72
43261: ST_TO_ADDR
43262: GO 43265
43264: POP
// if i = 1 then
43265: LD_VAR 0 8
43269: PUSH
43270: LD_INT 1
43272: EQUAL
43273: IFFALSE 43384
// begin tmp := [ ] ;
43275: LD_ADDR_VAR 0 19
43279: PUSH
43280: EMPTY
43281: ST_TO_ADDR
// for j in f do
43282: LD_ADDR_VAR 0 9
43286: PUSH
43287: LD_VAR 0 12
43291: PUSH
43292: FOR_IN
43293: IFFALSE 43366
// if GetBType ( j ) = b_bunker then
43295: LD_VAR 0 9
43299: PPUSH
43300: CALL_OW 266
43304: PUSH
43305: LD_INT 32
43307: EQUAL
43308: IFFALSE 43335
// tmp := Insert ( tmp , 1 , j ) else
43310: LD_ADDR_VAR 0 19
43314: PUSH
43315: LD_VAR 0 19
43319: PPUSH
43320: LD_INT 1
43322: PPUSH
43323: LD_VAR 0 9
43327: PPUSH
43328: CALL_OW 2
43332: ST_TO_ADDR
43333: GO 43364
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43335: LD_ADDR_VAR 0 19
43339: PUSH
43340: LD_VAR 0 19
43344: PPUSH
43345: LD_VAR 0 19
43349: PUSH
43350: LD_INT 1
43352: PLUS
43353: PPUSH
43354: LD_VAR 0 9
43358: PPUSH
43359: CALL_OW 2
43363: ST_TO_ADDR
43364: GO 43292
43366: POP
43367: POP
// if tmp then
43368: LD_VAR 0 19
43372: IFFALSE 43384
// f := tmp ;
43374: LD_ADDR_VAR 0 12
43378: PUSH
43379: LD_VAR 0 19
43383: ST_TO_ADDR
// end ; x := personel [ i ] ;
43384: LD_ADDR_VAR 0 13
43388: PUSH
43389: LD_VAR 0 6
43393: PUSH
43394: LD_VAR 0 8
43398: ARRAY
43399: ST_TO_ADDR
// if x = - 1 then
43400: LD_VAR 0 13
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: EQUAL
43409: IFFALSE 43618
// begin for j in f do
43411: LD_ADDR_VAR 0 9
43415: PUSH
43416: LD_VAR 0 12
43420: PUSH
43421: FOR_IN
43422: IFFALSE 43614
// repeat InitHc ;
43424: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43428: LD_VAR 0 9
43432: PPUSH
43433: CALL_OW 266
43437: PUSH
43438: LD_INT 5
43440: EQUAL
43441: IFFALSE 43511
// begin if UnitsInside ( j ) < 3 then
43443: LD_VAR 0 9
43447: PPUSH
43448: CALL_OW 313
43452: PUSH
43453: LD_INT 3
43455: LESS
43456: IFFALSE 43492
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43458: LD_INT 0
43460: PPUSH
43461: LD_INT 5
43463: PUSH
43464: LD_INT 8
43466: PUSH
43467: LD_INT 9
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: PUSH
43475: LD_VAR 0 17
43479: ARRAY
43480: PPUSH
43481: LD_VAR 0 4
43485: PPUSH
43486: CALL_OW 380
43490: GO 43509
// PrepareHuman ( false , i , skill ) ;
43492: LD_INT 0
43494: PPUSH
43495: LD_VAR 0 8
43499: PPUSH
43500: LD_VAR 0 4
43504: PPUSH
43505: CALL_OW 380
// end else
43509: GO 43528
// PrepareHuman ( false , i , skill ) ;
43511: LD_INT 0
43513: PPUSH
43514: LD_VAR 0 8
43518: PPUSH
43519: LD_VAR 0 4
43523: PPUSH
43524: CALL_OW 380
// un := CreateHuman ;
43528: LD_ADDR_VAR 0 14
43532: PUSH
43533: CALL_OW 44
43537: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43538: LD_ADDR_VAR 0 7
43542: PUSH
43543: LD_VAR 0 7
43547: PPUSH
43548: LD_INT 1
43550: PPUSH
43551: LD_VAR 0 14
43555: PPUSH
43556: CALL_OW 2
43560: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43561: LD_VAR 0 14
43565: PPUSH
43566: LD_VAR 0 9
43570: PPUSH
43571: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43575: LD_VAR 0 9
43579: PPUSH
43580: CALL_OW 313
43584: PUSH
43585: LD_INT 6
43587: EQUAL
43588: PUSH
43589: LD_VAR 0 9
43593: PPUSH
43594: CALL_OW 266
43598: PUSH
43599: LD_INT 32
43601: PUSH
43602: LD_INT 31
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: IN
43609: OR
43610: IFFALSE 43424
43612: GO 43421
43614: POP
43615: POP
// end else
43616: GO 43998
// for j = 1 to x do
43618: LD_ADDR_VAR 0 9
43622: PUSH
43623: DOUBLE
43624: LD_INT 1
43626: DEC
43627: ST_TO_ADDR
43628: LD_VAR 0 13
43632: PUSH
43633: FOR_TO
43634: IFFALSE 43996
// begin InitHc ;
43636: CALL_OW 19
// if not f then
43640: LD_VAR 0 12
43644: NOT
43645: IFFALSE 43734
// begin PrepareHuman ( false , i , skill ) ;
43647: LD_INT 0
43649: PPUSH
43650: LD_VAR 0 8
43654: PPUSH
43655: LD_VAR 0 4
43659: PPUSH
43660: CALL_OW 380
// un := CreateHuman ;
43664: LD_ADDR_VAR 0 14
43668: PUSH
43669: CALL_OW 44
43673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43674: LD_ADDR_VAR 0 7
43678: PUSH
43679: LD_VAR 0 7
43683: PPUSH
43684: LD_INT 1
43686: PPUSH
43687: LD_VAR 0 14
43691: PPUSH
43692: CALL_OW 2
43696: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43697: LD_VAR 0 14
43701: PPUSH
43702: LD_VAR 0 1
43706: PPUSH
43707: CALL_OW 250
43711: PPUSH
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 251
43721: PPUSH
43722: LD_INT 10
43724: PPUSH
43725: LD_INT 0
43727: PPUSH
43728: CALL_OW 50
// continue ;
43732: GO 43633
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43734: LD_VAR 0 12
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: PPUSH
43743: CALL_OW 313
43747: PUSH
43748: LD_VAR 0 12
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: CALL_OW 266
43761: PUSH
43762: LD_INT 32
43764: PUSH
43765: LD_INT 31
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: IN
43772: AND
43773: PUSH
43774: LD_VAR 0 12
43778: PUSH
43779: LD_INT 1
43781: ARRAY
43782: PPUSH
43783: CALL_OW 313
43787: PUSH
43788: LD_INT 6
43790: EQUAL
43791: OR
43792: IFFALSE 43812
// f := Delete ( f , 1 ) ;
43794: LD_ADDR_VAR 0 12
43798: PUSH
43799: LD_VAR 0 12
43803: PPUSH
43804: LD_INT 1
43806: PPUSH
43807: CALL_OW 3
43811: ST_TO_ADDR
// if not f then
43812: LD_VAR 0 12
43816: NOT
43817: IFFALSE 43835
// begin x := x + 2 ;
43819: LD_ADDR_VAR 0 13
43823: PUSH
43824: LD_VAR 0 13
43828: PUSH
43829: LD_INT 2
43831: PLUS
43832: ST_TO_ADDR
// continue ;
43833: GO 43633
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43835: LD_VAR 0 12
43839: PUSH
43840: LD_INT 1
43842: ARRAY
43843: PPUSH
43844: CALL_OW 266
43848: PUSH
43849: LD_INT 5
43851: EQUAL
43852: IFFALSE 43926
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43854: LD_VAR 0 12
43858: PUSH
43859: LD_INT 1
43861: ARRAY
43862: PPUSH
43863: CALL_OW 313
43867: PUSH
43868: LD_INT 3
43870: LESS
43871: IFFALSE 43907
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43873: LD_INT 0
43875: PPUSH
43876: LD_INT 5
43878: PUSH
43879: LD_INT 8
43881: PUSH
43882: LD_INT 9
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: PUSH
43890: LD_VAR 0 17
43894: ARRAY
43895: PPUSH
43896: LD_VAR 0 4
43900: PPUSH
43901: CALL_OW 380
43905: GO 43924
// PrepareHuman ( false , i , skill ) ;
43907: LD_INT 0
43909: PPUSH
43910: LD_VAR 0 8
43914: PPUSH
43915: LD_VAR 0 4
43919: PPUSH
43920: CALL_OW 380
// end else
43924: GO 43943
// PrepareHuman ( false , i , skill ) ;
43926: LD_INT 0
43928: PPUSH
43929: LD_VAR 0 8
43933: PPUSH
43934: LD_VAR 0 4
43938: PPUSH
43939: CALL_OW 380
// un := CreateHuman ;
43943: LD_ADDR_VAR 0 14
43947: PUSH
43948: CALL_OW 44
43952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43953: LD_ADDR_VAR 0 7
43957: PUSH
43958: LD_VAR 0 7
43962: PPUSH
43963: LD_INT 1
43965: PPUSH
43966: LD_VAR 0 14
43970: PPUSH
43971: CALL_OW 2
43975: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43976: LD_VAR 0 14
43980: PPUSH
43981: LD_VAR 0 12
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PPUSH
43990: CALL_OW 52
// end ;
43994: GO 43633
43996: POP
43997: POP
// end ;
43998: GO 42935
44000: POP
44001: POP
// result := result ^ buildings ;
44002: LD_ADDR_VAR 0 7
44006: PUSH
44007: LD_VAR 0 7
44011: PUSH
44012: LD_VAR 0 18
44016: ADD
44017: ST_TO_ADDR
// end else
44018: GO 44161
// begin for i = 1 to personel do
44020: LD_ADDR_VAR 0 8
44024: PUSH
44025: DOUBLE
44026: LD_INT 1
44028: DEC
44029: ST_TO_ADDR
44030: LD_VAR 0 6
44034: PUSH
44035: FOR_TO
44036: IFFALSE 44159
// begin if i > 4 then
44038: LD_VAR 0 8
44042: PUSH
44043: LD_INT 4
44045: GREATER
44046: IFFALSE 44050
// break ;
44048: GO 44159
// x := personel [ i ] ;
44050: LD_ADDR_VAR 0 13
44054: PUSH
44055: LD_VAR 0 6
44059: PUSH
44060: LD_VAR 0 8
44064: ARRAY
44065: ST_TO_ADDR
// if x = - 1 then
44066: LD_VAR 0 13
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: EQUAL
44075: IFFALSE 44079
// continue ;
44077: GO 44035
// PrepareHuman ( false , i , skill ) ;
44079: LD_INT 0
44081: PPUSH
44082: LD_VAR 0 8
44086: PPUSH
44087: LD_VAR 0 4
44091: PPUSH
44092: CALL_OW 380
// un := CreateHuman ;
44096: LD_ADDR_VAR 0 14
44100: PUSH
44101: CALL_OW 44
44105: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44106: LD_VAR 0 14
44110: PPUSH
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 250
44120: PPUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: CALL_OW 251
44130: PPUSH
44131: LD_INT 10
44133: PPUSH
44134: LD_INT 0
44136: PPUSH
44137: CALL_OW 50
// result := result ^ un ;
44141: LD_ADDR_VAR 0 7
44145: PUSH
44146: LD_VAR 0 7
44150: PUSH
44151: LD_VAR 0 14
44155: ADD
44156: ST_TO_ADDR
// end ;
44157: GO 44035
44159: POP
44160: POP
// end ; end ;
44161: LD_VAR 0 7
44165: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44166: LD_INT 0
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
// result := false ;
44184: LD_ADDR_VAR 0 3
44188: PUSH
44189: LD_INT 0
44191: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44192: LD_VAR 0 1
44196: NOT
44197: PUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: CALL_OW 266
44207: PUSH
44208: LD_INT 32
44210: PUSH
44211: LD_INT 33
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: IN
44218: NOT
44219: OR
44220: IFFALSE 44224
// exit ;
44222: GO 45333
// nat := GetNation ( tower ) ;
44224: LD_ADDR_VAR 0 12
44228: PUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 248
44238: ST_TO_ADDR
// side := GetSide ( tower ) ;
44239: LD_ADDR_VAR 0 16
44243: PUSH
44244: LD_VAR 0 1
44248: PPUSH
44249: CALL_OW 255
44253: ST_TO_ADDR
// x := GetX ( tower ) ;
44254: LD_ADDR_VAR 0 10
44258: PUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 250
44268: ST_TO_ADDR
// y := GetY ( tower ) ;
44269: LD_ADDR_VAR 0 11
44273: PUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 251
44283: ST_TO_ADDR
// if not x or not y then
44284: LD_VAR 0 10
44288: NOT
44289: PUSH
44290: LD_VAR 0 11
44294: NOT
44295: OR
44296: IFFALSE 44300
// exit ;
44298: GO 45333
// weapon := 0 ;
44300: LD_ADDR_VAR 0 18
44304: PUSH
44305: LD_INT 0
44307: ST_TO_ADDR
// fac_list := [ ] ;
44308: LD_ADDR_VAR 0 17
44312: PUSH
44313: EMPTY
44314: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44315: LD_ADDR_VAR 0 6
44319: PUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: CALL_OW 274
44329: PPUSH
44330: LD_VAR 0 2
44334: PPUSH
44335: LD_INT 0
44337: PPUSH
44338: CALL 41904 0 3
44342: PPUSH
44343: LD_INT 30
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PPUSH
44353: CALL_OW 72
44357: ST_TO_ADDR
// if not factories then
44358: LD_VAR 0 6
44362: NOT
44363: IFFALSE 44367
// exit ;
44365: GO 45333
// for i in factories do
44367: LD_ADDR_VAR 0 8
44371: PUSH
44372: LD_VAR 0 6
44376: PUSH
44377: FOR_IN
44378: IFFALSE 44403
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44380: LD_ADDR_VAR 0 17
44384: PUSH
44385: LD_VAR 0 17
44389: PUSH
44390: LD_VAR 0 8
44394: PPUSH
44395: CALL_OW 478
44399: UNION
44400: ST_TO_ADDR
44401: GO 44377
44403: POP
44404: POP
// if not fac_list then
44405: LD_VAR 0 17
44409: NOT
44410: IFFALSE 44414
// exit ;
44412: GO 45333
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44414: LD_ADDR_VAR 0 5
44418: PUSH
44419: LD_INT 4
44421: PUSH
44422: LD_INT 5
44424: PUSH
44425: LD_INT 9
44427: PUSH
44428: LD_INT 10
44430: PUSH
44431: LD_INT 6
44433: PUSH
44434: LD_INT 7
44436: PUSH
44437: LD_INT 11
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 27
44451: PUSH
44452: LD_INT 28
44454: PUSH
44455: LD_INT 26
44457: PUSH
44458: LD_INT 30
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 43
44469: PUSH
44470: LD_INT 44
44472: PUSH
44473: LD_INT 46
44475: PUSH
44476: LD_INT 45
44478: PUSH
44479: LD_INT 47
44481: PUSH
44482: LD_INT 49
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: PUSH
44498: LD_VAR 0 12
44502: ARRAY
44503: ST_TO_ADDR
// list := list isect fac_list ;
44504: LD_ADDR_VAR 0 5
44508: PUSH
44509: LD_VAR 0 5
44513: PUSH
44514: LD_VAR 0 17
44518: ISECT
44519: ST_TO_ADDR
// if not list then
44520: LD_VAR 0 5
44524: NOT
44525: IFFALSE 44529
// exit ;
44527: GO 45333
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44529: LD_VAR 0 12
44533: PUSH
44534: LD_INT 3
44536: EQUAL
44537: PUSH
44538: LD_INT 49
44540: PUSH
44541: LD_VAR 0 5
44545: IN
44546: AND
44547: PUSH
44548: LD_INT 31
44550: PPUSH
44551: LD_VAR 0 16
44555: PPUSH
44556: CALL_OW 321
44560: PUSH
44561: LD_INT 2
44563: EQUAL
44564: AND
44565: IFFALSE 44625
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44567: LD_INT 22
44569: PUSH
44570: LD_VAR 0 16
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 35
44581: PUSH
44582: LD_INT 49
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 91
44591: PUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_INT 10
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: PPUSH
44610: CALL_OW 69
44614: NOT
44615: IFFALSE 44625
// weapon := ru_time_lapser ;
44617: LD_ADDR_VAR 0 18
44621: PUSH
44622: LD_INT 49
44624: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44625: LD_VAR 0 12
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: IN
44640: PUSH
44641: LD_INT 11
44643: PUSH
44644: LD_VAR 0 5
44648: IN
44649: PUSH
44650: LD_INT 30
44652: PUSH
44653: LD_VAR 0 5
44657: IN
44658: OR
44659: AND
44660: PUSH
44661: LD_INT 6
44663: PPUSH
44664: LD_VAR 0 16
44668: PPUSH
44669: CALL_OW 321
44673: PUSH
44674: LD_INT 2
44676: EQUAL
44677: AND
44678: IFFALSE 44843
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44680: LD_INT 22
44682: PUSH
44683: LD_VAR 0 16
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 35
44697: PUSH
44698: LD_INT 11
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 35
44707: PUSH
44708: LD_INT 30
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 91
44722: PUSH
44723: LD_VAR 0 1
44727: PUSH
44728: LD_INT 18
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: PPUSH
44741: CALL_OW 69
44745: NOT
44746: PUSH
44747: LD_INT 22
44749: PUSH
44750: LD_VAR 0 16
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 30
44764: PUSH
44765: LD_INT 32
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 30
44774: PUSH
44775: LD_INT 33
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 91
44789: PUSH
44790: LD_VAR 0 1
44794: PUSH
44795: LD_INT 12
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: PPUSH
44811: CALL_OW 69
44815: PUSH
44816: LD_INT 2
44818: GREATER
44819: AND
44820: IFFALSE 44843
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44822: LD_ADDR_VAR 0 18
44826: PUSH
44827: LD_INT 11
44829: PUSH
44830: LD_INT 30
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_VAR 0 12
44841: ARRAY
44842: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44843: LD_VAR 0 18
44847: NOT
44848: PUSH
44849: LD_INT 40
44851: PPUSH
44852: LD_VAR 0 16
44856: PPUSH
44857: CALL_OW 321
44861: PUSH
44862: LD_INT 2
44864: EQUAL
44865: AND
44866: PUSH
44867: LD_INT 7
44869: PUSH
44870: LD_VAR 0 5
44874: IN
44875: PUSH
44876: LD_INT 28
44878: PUSH
44879: LD_VAR 0 5
44883: IN
44884: OR
44885: PUSH
44886: LD_INT 45
44888: PUSH
44889: LD_VAR 0 5
44893: IN
44894: OR
44895: AND
44896: IFFALSE 45150
// begin hex := GetHexInfo ( x , y ) ;
44898: LD_ADDR_VAR 0 4
44902: PUSH
44903: LD_VAR 0 10
44907: PPUSH
44908: LD_VAR 0 11
44912: PPUSH
44913: CALL_OW 546
44917: ST_TO_ADDR
// if hex [ 1 ] then
44918: LD_VAR 0 4
44922: PUSH
44923: LD_INT 1
44925: ARRAY
44926: IFFALSE 44930
// exit ;
44928: GO 45333
// height := hex [ 2 ] ;
44930: LD_ADDR_VAR 0 15
44934: PUSH
44935: LD_VAR 0 4
44939: PUSH
44940: LD_INT 2
44942: ARRAY
44943: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44944: LD_ADDR_VAR 0 14
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: LD_INT 5
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: ST_TO_ADDR
// for i in tmp do
44967: LD_ADDR_VAR 0 8
44971: PUSH
44972: LD_VAR 0 14
44976: PUSH
44977: FOR_IN
44978: IFFALSE 45148
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44980: LD_ADDR_VAR 0 9
44984: PUSH
44985: LD_VAR 0 10
44989: PPUSH
44990: LD_VAR 0 8
44994: PPUSH
44995: LD_INT 5
44997: PPUSH
44998: CALL_OW 272
45002: PUSH
45003: LD_VAR 0 11
45007: PPUSH
45008: LD_VAR 0 8
45012: PPUSH
45013: LD_INT 5
45015: PPUSH
45016: CALL_OW 273
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45025: LD_VAR 0 9
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: PPUSH
45034: LD_VAR 0 9
45038: PUSH
45039: LD_INT 2
45041: ARRAY
45042: PPUSH
45043: CALL_OW 488
45047: IFFALSE 45146
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45049: LD_ADDR_VAR 0 4
45053: PUSH
45054: LD_VAR 0 9
45058: PUSH
45059: LD_INT 1
45061: ARRAY
45062: PPUSH
45063: LD_VAR 0 9
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: PPUSH
45072: CALL_OW 546
45076: ST_TO_ADDR
// if hex [ 1 ] then
45077: LD_VAR 0 4
45081: PUSH
45082: LD_INT 1
45084: ARRAY
45085: IFFALSE 45089
// continue ;
45087: GO 44977
// h := hex [ 2 ] ;
45089: LD_ADDR_VAR 0 13
45093: PUSH
45094: LD_VAR 0 4
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: ST_TO_ADDR
// if h + 7 < height then
45103: LD_VAR 0 13
45107: PUSH
45108: LD_INT 7
45110: PLUS
45111: PUSH
45112: LD_VAR 0 15
45116: LESS
45117: IFFALSE 45146
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45119: LD_ADDR_VAR 0 18
45123: PUSH
45124: LD_INT 7
45126: PUSH
45127: LD_INT 28
45129: PUSH
45130: LD_INT 45
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: PUSH
45138: LD_VAR 0 12
45142: ARRAY
45143: ST_TO_ADDR
// break ;
45144: GO 45148
// end ; end ; end ;
45146: GO 44977
45148: POP
45149: POP
// end ; if not weapon then
45150: LD_VAR 0 18
45154: NOT
45155: IFFALSE 45215
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45157: LD_ADDR_VAR 0 5
45161: PUSH
45162: LD_VAR 0 5
45166: PUSH
45167: LD_INT 11
45169: PUSH
45170: LD_INT 30
45172: PUSH
45173: LD_INT 49
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: DIFF
45181: ST_TO_ADDR
// if not list then
45182: LD_VAR 0 5
45186: NOT
45187: IFFALSE 45191
// exit ;
45189: GO 45333
// weapon := list [ rand ( 1 , list ) ] ;
45191: LD_ADDR_VAR 0 18
45195: PUSH
45196: LD_VAR 0 5
45200: PUSH
45201: LD_INT 1
45203: PPUSH
45204: LD_VAR 0 5
45208: PPUSH
45209: CALL_OW 12
45213: ARRAY
45214: ST_TO_ADDR
// end ; if weapon then
45215: LD_VAR 0 18
45219: IFFALSE 45333
// begin tmp := CostOfWeapon ( weapon ) ;
45221: LD_ADDR_VAR 0 14
45225: PUSH
45226: LD_VAR 0 18
45230: PPUSH
45231: CALL_OW 451
45235: ST_TO_ADDR
// j := GetBase ( tower ) ;
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_VAR 0 1
45245: PPUSH
45246: CALL_OW 274
45250: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45251: LD_VAR 0 9
45255: PPUSH
45256: LD_INT 1
45258: PPUSH
45259: CALL_OW 275
45263: PUSH
45264: LD_VAR 0 14
45268: PUSH
45269: LD_INT 1
45271: ARRAY
45272: GREATEREQUAL
45273: PUSH
45274: LD_VAR 0 9
45278: PPUSH
45279: LD_INT 2
45281: PPUSH
45282: CALL_OW 275
45286: PUSH
45287: LD_VAR 0 14
45291: PUSH
45292: LD_INT 2
45294: ARRAY
45295: GREATEREQUAL
45296: AND
45297: PUSH
45298: LD_VAR 0 9
45302: PPUSH
45303: LD_INT 3
45305: PPUSH
45306: CALL_OW 275
45310: PUSH
45311: LD_VAR 0 14
45315: PUSH
45316: LD_INT 3
45318: ARRAY
45319: GREATEREQUAL
45320: AND
45321: IFFALSE 45333
// result := weapon ;
45323: LD_ADDR_VAR 0 3
45327: PUSH
45328: LD_VAR 0 18
45332: ST_TO_ADDR
// end ; end ;
45333: LD_VAR 0 3
45337: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45338: LD_INT 0
45340: PPUSH
45341: PPUSH
// result := true ;
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_INT 1
45349: ST_TO_ADDR
// if array1 = array2 then
45350: LD_VAR 0 1
45354: PUSH
45355: LD_VAR 0 2
45359: EQUAL
45360: IFFALSE 45420
// begin for i = 1 to array1 do
45362: LD_ADDR_VAR 0 4
45366: PUSH
45367: DOUBLE
45368: LD_INT 1
45370: DEC
45371: ST_TO_ADDR
45372: LD_VAR 0 1
45376: PUSH
45377: FOR_TO
45378: IFFALSE 45416
// if array1 [ i ] <> array2 [ i ] then
45380: LD_VAR 0 1
45384: PUSH
45385: LD_VAR 0 4
45389: ARRAY
45390: PUSH
45391: LD_VAR 0 2
45395: PUSH
45396: LD_VAR 0 4
45400: ARRAY
45401: NONEQUAL
45402: IFFALSE 45414
// begin result := false ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_INT 0
45411: ST_TO_ADDR
// break ;
45412: GO 45416
// end ;
45414: GO 45377
45416: POP
45417: POP
// end else
45418: GO 45428
// result := false ;
45420: LD_ADDR_VAR 0 3
45424: PUSH
45425: LD_INT 0
45427: ST_TO_ADDR
// end ;
45428: LD_VAR 0 3
45432: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
// if not array1 or not array2 then
45437: LD_VAR 0 1
45441: NOT
45442: PUSH
45443: LD_VAR 0 2
45447: NOT
45448: OR
45449: IFFALSE 45453
// exit ;
45451: GO 45517
// result := true ;
45453: LD_ADDR_VAR 0 3
45457: PUSH
45458: LD_INT 1
45460: ST_TO_ADDR
// for i = 1 to array1 do
45461: LD_ADDR_VAR 0 4
45465: PUSH
45466: DOUBLE
45467: LD_INT 1
45469: DEC
45470: ST_TO_ADDR
45471: LD_VAR 0 1
45475: PUSH
45476: FOR_TO
45477: IFFALSE 45515
// if array1 [ i ] <> array2 [ i ] then
45479: LD_VAR 0 1
45483: PUSH
45484: LD_VAR 0 4
45488: ARRAY
45489: PUSH
45490: LD_VAR 0 2
45494: PUSH
45495: LD_VAR 0 4
45499: ARRAY
45500: NONEQUAL
45501: IFFALSE 45513
// begin result := false ;
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: LD_INT 0
45510: ST_TO_ADDR
// break ;
45511: GO 45515
// end ;
45513: GO 45476
45515: POP
45516: POP
// end ;
45517: LD_VAR 0 3
45521: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45522: LD_INT 0
45524: PPUSH
45525: PPUSH
45526: PPUSH
// pom := GetBase ( fac ) ;
45527: LD_ADDR_VAR 0 5
45531: PUSH
45532: LD_VAR 0 1
45536: PPUSH
45537: CALL_OW 274
45541: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45542: LD_ADDR_VAR 0 4
45546: PUSH
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 1
45554: ARRAY
45555: PPUSH
45556: LD_VAR 0 2
45560: PUSH
45561: LD_INT 2
45563: ARRAY
45564: PPUSH
45565: LD_VAR 0 2
45569: PUSH
45570: LD_INT 3
45572: ARRAY
45573: PPUSH
45574: LD_VAR 0 2
45578: PUSH
45579: LD_INT 4
45581: ARRAY
45582: PPUSH
45583: CALL_OW 449
45587: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_VAR 0 5
45597: PPUSH
45598: LD_INT 1
45600: PPUSH
45601: CALL_OW 275
45605: PUSH
45606: LD_VAR 0 4
45610: PUSH
45611: LD_INT 1
45613: ARRAY
45614: GREATEREQUAL
45615: PUSH
45616: LD_VAR 0 5
45620: PPUSH
45621: LD_INT 2
45623: PPUSH
45624: CALL_OW 275
45628: PUSH
45629: LD_VAR 0 4
45633: PUSH
45634: LD_INT 2
45636: ARRAY
45637: GREATEREQUAL
45638: AND
45639: PUSH
45640: LD_VAR 0 5
45644: PPUSH
45645: LD_INT 3
45647: PPUSH
45648: CALL_OW 275
45652: PUSH
45653: LD_VAR 0 4
45657: PUSH
45658: LD_INT 3
45660: ARRAY
45661: GREATEREQUAL
45662: AND
45663: ST_TO_ADDR
// end ;
45664: LD_VAR 0 3
45668: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45669: LD_INT 0
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
// pom := GetBase ( building ) ;
45675: LD_ADDR_VAR 0 3
45679: PUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 274
45689: ST_TO_ADDR
// if not pom then
45690: LD_VAR 0 3
45694: NOT
45695: IFFALSE 45699
// exit ;
45697: GO 45869
// btype := GetBType ( building ) ;
45699: LD_ADDR_VAR 0 5
45703: PUSH
45704: LD_VAR 0 1
45708: PPUSH
45709: CALL_OW 266
45713: ST_TO_ADDR
// if btype = b_armoury then
45714: LD_VAR 0 5
45718: PUSH
45719: LD_INT 4
45721: EQUAL
45722: IFFALSE 45732
// btype := b_barracks ;
45724: LD_ADDR_VAR 0 5
45728: PUSH
45729: LD_INT 5
45731: ST_TO_ADDR
// if btype = b_depot then
45732: LD_VAR 0 5
45736: PUSH
45737: LD_INT 0
45739: EQUAL
45740: IFFALSE 45750
// btype := b_warehouse ;
45742: LD_ADDR_VAR 0 5
45746: PUSH
45747: LD_INT 1
45749: ST_TO_ADDR
// if btype = b_workshop then
45750: LD_VAR 0 5
45754: PUSH
45755: LD_INT 2
45757: EQUAL
45758: IFFALSE 45768
// btype := b_factory ;
45760: LD_ADDR_VAR 0 5
45764: PUSH
45765: LD_INT 3
45767: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45768: LD_ADDR_VAR 0 4
45772: PUSH
45773: LD_VAR 0 5
45777: PPUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 248
45787: PPUSH
45788: CALL_OW 450
45792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45793: LD_ADDR_VAR 0 2
45797: PUSH
45798: LD_VAR 0 3
45802: PPUSH
45803: LD_INT 1
45805: PPUSH
45806: CALL_OW 275
45810: PUSH
45811: LD_VAR 0 4
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: GREATEREQUAL
45820: PUSH
45821: LD_VAR 0 3
45825: PPUSH
45826: LD_INT 2
45828: PPUSH
45829: CALL_OW 275
45833: PUSH
45834: LD_VAR 0 4
45838: PUSH
45839: LD_INT 2
45841: ARRAY
45842: GREATEREQUAL
45843: AND
45844: PUSH
45845: LD_VAR 0 3
45849: PPUSH
45850: LD_INT 3
45852: PPUSH
45853: CALL_OW 275
45857: PUSH
45858: LD_VAR 0 4
45862: PUSH
45863: LD_INT 3
45865: ARRAY
45866: GREATEREQUAL
45867: AND
45868: ST_TO_ADDR
// end ;
45869: LD_VAR 0 2
45873: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45874: LD_INT 0
45876: PPUSH
45877: PPUSH
45878: PPUSH
// pom := GetBase ( building ) ;
45879: LD_ADDR_VAR 0 4
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 274
45893: ST_TO_ADDR
// if not pom then
45894: LD_VAR 0 4
45898: NOT
45899: IFFALSE 45903
// exit ;
45901: GO 46004
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45903: LD_ADDR_VAR 0 5
45907: PUSH
45908: LD_VAR 0 2
45912: PPUSH
45913: LD_VAR 0 1
45917: PPUSH
45918: CALL_OW 248
45922: PPUSH
45923: CALL_OW 450
45927: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45928: LD_ADDR_VAR 0 3
45932: PUSH
45933: LD_VAR 0 4
45937: PPUSH
45938: LD_INT 1
45940: PPUSH
45941: CALL_OW 275
45945: PUSH
45946: LD_VAR 0 5
45950: PUSH
45951: LD_INT 1
45953: ARRAY
45954: GREATEREQUAL
45955: PUSH
45956: LD_VAR 0 4
45960: PPUSH
45961: LD_INT 2
45963: PPUSH
45964: CALL_OW 275
45968: PUSH
45969: LD_VAR 0 5
45973: PUSH
45974: LD_INT 2
45976: ARRAY
45977: GREATEREQUAL
45978: AND
45979: PUSH
45980: LD_VAR 0 4
45984: PPUSH
45985: LD_INT 3
45987: PPUSH
45988: CALL_OW 275
45992: PUSH
45993: LD_VAR 0 5
45997: PUSH
45998: LD_INT 3
46000: ARRAY
46001: GREATEREQUAL
46002: AND
46003: ST_TO_ADDR
// end ;
46004: LD_VAR 0 3
46008: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46009: LD_INT 0
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
// result := false ;
46022: LD_ADDR_VAR 0 8
46026: PUSH
46027: LD_INT 0
46029: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46030: LD_VAR 0 5
46034: NOT
46035: PUSH
46036: LD_VAR 0 1
46040: NOT
46041: OR
46042: PUSH
46043: LD_VAR 0 2
46047: NOT
46048: OR
46049: PUSH
46050: LD_VAR 0 3
46054: NOT
46055: OR
46056: IFFALSE 46060
// exit ;
46058: GO 46874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46060: LD_ADDR_VAR 0 14
46064: PUSH
46065: LD_VAR 0 1
46069: PPUSH
46070: LD_VAR 0 2
46074: PPUSH
46075: LD_VAR 0 3
46079: PPUSH
46080: LD_VAR 0 4
46084: PPUSH
46085: LD_VAR 0 5
46089: PUSH
46090: LD_INT 1
46092: ARRAY
46093: PPUSH
46094: CALL_OW 248
46098: PPUSH
46099: LD_INT 0
46101: PPUSH
46102: CALL 48111 0 6
46106: ST_TO_ADDR
// if not hexes then
46107: LD_VAR 0 14
46111: NOT
46112: IFFALSE 46116
// exit ;
46114: GO 46874
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46116: LD_ADDR_VAR 0 17
46120: PUSH
46121: LD_VAR 0 5
46125: PPUSH
46126: LD_INT 22
46128: PUSH
46129: LD_VAR 0 13
46133: PPUSH
46134: CALL_OW 255
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 30
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 30
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PPUSH
46175: CALL_OW 72
46179: ST_TO_ADDR
// for i = 1 to hexes do
46180: LD_ADDR_VAR 0 9
46184: PUSH
46185: DOUBLE
46186: LD_INT 1
46188: DEC
46189: ST_TO_ADDR
46190: LD_VAR 0 14
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46872
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46198: LD_ADDR_VAR 0 13
46202: PUSH
46203: LD_VAR 0 14
46207: PUSH
46208: LD_VAR 0 9
46212: ARRAY
46213: PUSH
46214: LD_INT 1
46216: ARRAY
46217: PPUSH
46218: LD_VAR 0 14
46222: PUSH
46223: LD_VAR 0 9
46227: ARRAY
46228: PUSH
46229: LD_INT 2
46231: ARRAY
46232: PPUSH
46233: CALL_OW 428
46237: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46238: LD_VAR 0 14
46242: PUSH
46243: LD_VAR 0 9
46247: ARRAY
46248: PUSH
46249: LD_INT 1
46251: ARRAY
46252: PPUSH
46253: LD_VAR 0 14
46257: PUSH
46258: LD_VAR 0 9
46262: ARRAY
46263: PUSH
46264: LD_INT 2
46266: ARRAY
46267: PPUSH
46268: CALL_OW 351
46272: PUSH
46273: LD_VAR 0 14
46277: PUSH
46278: LD_VAR 0 9
46282: ARRAY
46283: PUSH
46284: LD_INT 1
46286: ARRAY
46287: PPUSH
46288: LD_VAR 0 14
46292: PUSH
46293: LD_VAR 0 9
46297: ARRAY
46298: PUSH
46299: LD_INT 2
46301: ARRAY
46302: PPUSH
46303: CALL_OW 488
46307: NOT
46308: OR
46309: PUSH
46310: LD_VAR 0 13
46314: PPUSH
46315: CALL_OW 247
46319: PUSH
46320: LD_INT 3
46322: EQUAL
46323: OR
46324: IFFALSE 46330
// exit ;
46326: POP
46327: POP
46328: GO 46874
// if not tmp then
46330: LD_VAR 0 13
46334: NOT
46335: IFFALSE 46339
// continue ;
46337: GO 46195
// result := true ;
46339: LD_ADDR_VAR 0 8
46343: PUSH
46344: LD_INT 1
46346: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46347: LD_VAR 0 6
46351: PUSH
46352: LD_VAR 0 13
46356: PPUSH
46357: CALL_OW 247
46361: PUSH
46362: LD_INT 2
46364: EQUAL
46365: AND
46366: PUSH
46367: LD_VAR 0 13
46371: PPUSH
46372: CALL_OW 263
46376: PUSH
46377: LD_INT 1
46379: EQUAL
46380: AND
46381: IFFALSE 46545
// begin if IsDrivenBy ( tmp ) then
46383: LD_VAR 0 13
46387: PPUSH
46388: CALL_OW 311
46392: IFFALSE 46396
// continue ;
46394: GO 46195
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46396: LD_VAR 0 6
46400: PPUSH
46401: LD_INT 3
46403: PUSH
46404: LD_INT 60
46406: PUSH
46407: EMPTY
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 55
46419: PUSH
46420: EMPTY
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PPUSH
46431: CALL_OW 72
46435: IFFALSE 46543
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46437: LD_ADDR_VAR 0 18
46441: PUSH
46442: LD_VAR 0 6
46446: PPUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 60
46452: PUSH
46453: EMPTY
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 55
46465: PUSH
46466: EMPTY
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PPUSH
46477: CALL_OW 72
46481: PUSH
46482: LD_INT 1
46484: ARRAY
46485: ST_TO_ADDR
// if IsInUnit ( driver ) then
46486: LD_VAR 0 18
46490: PPUSH
46491: CALL_OW 310
46495: IFFALSE 46506
// ComExit ( driver ) ;
46497: LD_VAR 0 18
46501: PPUSH
46502: CALL 71239 0 1
// AddComEnterUnit ( driver , tmp ) ;
46506: LD_VAR 0 18
46510: PPUSH
46511: LD_VAR 0 13
46515: PPUSH
46516: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46520: LD_VAR 0 18
46524: PPUSH
46525: LD_VAR 0 7
46529: PPUSH
46530: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46534: LD_VAR 0 18
46538: PPUSH
46539: CALL_OW 181
// end ; continue ;
46543: GO 46195
// end ; if not cleaners or not tmp in cleaners then
46545: LD_VAR 0 6
46549: NOT
46550: PUSH
46551: LD_VAR 0 13
46555: PUSH
46556: LD_VAR 0 6
46560: IN
46561: NOT
46562: OR
46563: IFFALSE 46870
// begin if dep then
46565: LD_VAR 0 17
46569: IFFALSE 46705
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46571: LD_ADDR_VAR 0 16
46575: PUSH
46576: LD_VAR 0 17
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: PPUSH
46585: CALL_OW 250
46589: PPUSH
46590: LD_VAR 0 17
46594: PUSH
46595: LD_INT 1
46597: ARRAY
46598: PPUSH
46599: CALL_OW 254
46603: PPUSH
46604: LD_INT 5
46606: PPUSH
46607: CALL_OW 272
46611: PUSH
46612: LD_VAR 0 17
46616: PUSH
46617: LD_INT 1
46619: ARRAY
46620: PPUSH
46621: CALL_OW 251
46625: PPUSH
46626: LD_VAR 0 17
46630: PUSH
46631: LD_INT 1
46633: ARRAY
46634: PPUSH
46635: CALL_OW 254
46639: PPUSH
46640: LD_INT 5
46642: PPUSH
46643: CALL_OW 273
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46652: LD_VAR 0 16
46656: PUSH
46657: LD_INT 1
46659: ARRAY
46660: PPUSH
46661: LD_VAR 0 16
46665: PUSH
46666: LD_INT 2
46668: ARRAY
46669: PPUSH
46670: CALL_OW 488
46674: IFFALSE 46705
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46676: LD_VAR 0 13
46680: PPUSH
46681: LD_VAR 0 16
46685: PUSH
46686: LD_INT 1
46688: ARRAY
46689: PPUSH
46690: LD_VAR 0 16
46694: PUSH
46695: LD_INT 2
46697: ARRAY
46698: PPUSH
46699: CALL_OW 111
// continue ;
46703: GO 46195
// end ; end ; r := GetDir ( tmp ) ;
46705: LD_ADDR_VAR 0 15
46709: PUSH
46710: LD_VAR 0 13
46714: PPUSH
46715: CALL_OW 254
46719: ST_TO_ADDR
// if r = 5 then
46720: LD_VAR 0 15
46724: PUSH
46725: LD_INT 5
46727: EQUAL
46728: IFFALSE 46738
// r := 0 ;
46730: LD_ADDR_VAR 0 15
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// for j = r to 5 do
46738: LD_ADDR_VAR 0 10
46742: PUSH
46743: DOUBLE
46744: LD_VAR 0 15
46748: DEC
46749: ST_TO_ADDR
46750: LD_INT 5
46752: PUSH
46753: FOR_TO
46754: IFFALSE 46868
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46756: LD_ADDR_VAR 0 11
46760: PUSH
46761: LD_VAR 0 13
46765: PPUSH
46766: CALL_OW 250
46770: PPUSH
46771: LD_VAR 0 10
46775: PPUSH
46776: LD_INT 2
46778: PPUSH
46779: CALL_OW 272
46783: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46784: LD_ADDR_VAR 0 12
46788: PUSH
46789: LD_VAR 0 13
46793: PPUSH
46794: CALL_OW 251
46798: PPUSH
46799: LD_VAR 0 10
46803: PPUSH
46804: LD_INT 2
46806: PPUSH
46807: CALL_OW 273
46811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46812: LD_VAR 0 11
46816: PPUSH
46817: LD_VAR 0 12
46821: PPUSH
46822: CALL_OW 488
46826: PUSH
46827: LD_VAR 0 11
46831: PPUSH
46832: LD_VAR 0 12
46836: PPUSH
46837: CALL_OW 428
46841: NOT
46842: AND
46843: IFFALSE 46866
// begin ComMoveXY ( tmp , _x , _y ) ;
46845: LD_VAR 0 13
46849: PPUSH
46850: LD_VAR 0 11
46854: PPUSH
46855: LD_VAR 0 12
46859: PPUSH
46860: CALL_OW 111
// break ;
46864: GO 46868
// end ; end ;
46866: GO 46753
46868: POP
46869: POP
// end ; end ;
46870: GO 46195
46872: POP
46873: POP
// end ;
46874: LD_VAR 0 8
46878: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46879: LD_INT 0
46881: PPUSH
// result := true ;
46882: LD_ADDR_VAR 0 3
46886: PUSH
46887: LD_INT 1
46889: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46890: LD_VAR 0 2
46894: PUSH
46895: LD_INT 24
46897: DOUBLE
46898: EQUAL
46899: IFTRUE 46909
46901: LD_INT 33
46903: DOUBLE
46904: EQUAL
46905: IFTRUE 46909
46907: GO 46934
46909: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46910: LD_ADDR_VAR 0 3
46914: PUSH
46915: LD_INT 32
46917: PPUSH
46918: LD_VAR 0 1
46922: PPUSH
46923: CALL_OW 321
46927: PUSH
46928: LD_INT 2
46930: EQUAL
46931: ST_TO_ADDR
46932: GO 47254
46934: LD_INT 20
46936: DOUBLE
46937: EQUAL
46938: IFTRUE 46942
46940: GO 46967
46942: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46943: LD_ADDR_VAR 0 3
46947: PUSH
46948: LD_INT 6
46950: PPUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: CALL_OW 321
46960: PUSH
46961: LD_INT 2
46963: EQUAL
46964: ST_TO_ADDR
46965: GO 47254
46967: LD_INT 22
46969: DOUBLE
46970: EQUAL
46971: IFTRUE 46981
46973: LD_INT 36
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 47006
46981: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46982: LD_ADDR_VAR 0 3
46986: PUSH
46987: LD_INT 15
46989: PPUSH
46990: LD_VAR 0 1
46994: PPUSH
46995: CALL_OW 321
46999: PUSH
47000: LD_INT 2
47002: EQUAL
47003: ST_TO_ADDR
47004: GO 47254
47006: LD_INT 30
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47014
47012: GO 47039
47014: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 20
47022: PPUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: CALL_OW 321
47032: PUSH
47033: LD_INT 2
47035: EQUAL
47036: ST_TO_ADDR
47037: GO 47254
47039: LD_INT 28
47041: DOUBLE
47042: EQUAL
47043: IFTRUE 47053
47045: LD_INT 21
47047: DOUBLE
47048: EQUAL
47049: IFTRUE 47053
47051: GO 47078
47053: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47054: LD_ADDR_VAR 0 3
47058: PUSH
47059: LD_INT 21
47061: PPUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: CALL_OW 321
47071: PUSH
47072: LD_INT 2
47074: EQUAL
47075: ST_TO_ADDR
47076: GO 47254
47078: LD_INT 16
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47113
47086: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47087: LD_ADDR_VAR 0 3
47091: PUSH
47092: LD_EXP 141
47096: PPUSH
47097: LD_VAR 0 1
47101: PPUSH
47102: CALL_OW 321
47106: PUSH
47107: LD_INT 2
47109: EQUAL
47110: ST_TO_ADDR
47111: GO 47254
47113: LD_INT 19
47115: DOUBLE
47116: EQUAL
47117: IFTRUE 47127
47119: LD_INT 23
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47154
47127: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47128: LD_ADDR_VAR 0 3
47132: PUSH
47133: LD_EXP 140
47137: PPUSH
47138: LD_VAR 0 1
47142: PPUSH
47143: CALL_OW 321
47147: PUSH
47148: LD_INT 2
47150: EQUAL
47151: ST_TO_ADDR
47152: GO 47254
47154: LD_INT 17
47156: DOUBLE
47157: EQUAL
47158: IFTRUE 47162
47160: GO 47187
47162: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47163: LD_ADDR_VAR 0 3
47167: PUSH
47168: LD_INT 39
47170: PPUSH
47171: LD_VAR 0 1
47175: PPUSH
47176: CALL_OW 321
47180: PUSH
47181: LD_INT 2
47183: EQUAL
47184: ST_TO_ADDR
47185: GO 47254
47187: LD_INT 18
47189: DOUBLE
47190: EQUAL
47191: IFTRUE 47195
47193: GO 47220
47195: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47196: LD_ADDR_VAR 0 3
47200: PUSH
47201: LD_INT 40
47203: PPUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 321
47213: PUSH
47214: LD_INT 2
47216: EQUAL
47217: ST_TO_ADDR
47218: GO 47254
47220: LD_INT 27
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47253
47228: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47229: LD_ADDR_VAR 0 3
47233: PUSH
47234: LD_INT 35
47236: PPUSH
47237: LD_VAR 0 1
47241: PPUSH
47242: CALL_OW 321
47246: PUSH
47247: LD_INT 2
47249: EQUAL
47250: ST_TO_ADDR
47251: GO 47254
47253: POP
// end ;
47254: LD_VAR 0 3
47258: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47259: LD_INT 0
47261: PPUSH
47262: PPUSH
47263: PPUSH
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
47268: PPUSH
47269: PPUSH
47270: PPUSH
47271: PPUSH
// result := false ;
47272: LD_ADDR_VAR 0 6
47276: PUSH
47277: LD_INT 0
47279: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47280: LD_VAR 0 1
47284: NOT
47285: PUSH
47286: LD_VAR 0 1
47290: PPUSH
47291: CALL_OW 266
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: IN
47306: NOT
47307: OR
47308: PUSH
47309: LD_VAR 0 2
47313: NOT
47314: OR
47315: PUSH
47316: LD_VAR 0 5
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: LD_INT 5
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: IN
47347: NOT
47348: OR
47349: PUSH
47350: LD_VAR 0 3
47354: PPUSH
47355: LD_VAR 0 4
47359: PPUSH
47360: CALL_OW 488
47364: NOT
47365: OR
47366: IFFALSE 47370
// exit ;
47368: GO 48106
// side := GetSide ( depot ) ;
47370: LD_ADDR_VAR 0 9
47374: PUSH
47375: LD_VAR 0 1
47379: PPUSH
47380: CALL_OW 255
47384: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47385: LD_VAR 0 9
47389: PPUSH
47390: LD_VAR 0 2
47394: PPUSH
47395: CALL 46879 0 2
47399: NOT
47400: IFFALSE 47404
// exit ;
47402: GO 48106
// pom := GetBase ( depot ) ;
47404: LD_ADDR_VAR 0 10
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 274
47418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47419: LD_ADDR_VAR 0 11
47423: PUSH
47424: LD_VAR 0 2
47428: PPUSH
47429: LD_VAR 0 1
47433: PPUSH
47434: CALL_OW 248
47438: PPUSH
47439: CALL_OW 450
47443: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47444: LD_VAR 0 10
47448: PPUSH
47449: LD_INT 1
47451: PPUSH
47452: CALL_OW 275
47456: PUSH
47457: LD_VAR 0 11
47461: PUSH
47462: LD_INT 1
47464: ARRAY
47465: GREATEREQUAL
47466: PUSH
47467: LD_VAR 0 10
47471: PPUSH
47472: LD_INT 2
47474: PPUSH
47475: CALL_OW 275
47479: PUSH
47480: LD_VAR 0 11
47484: PUSH
47485: LD_INT 2
47487: ARRAY
47488: GREATEREQUAL
47489: AND
47490: PUSH
47491: LD_VAR 0 10
47495: PPUSH
47496: LD_INT 3
47498: PPUSH
47499: CALL_OW 275
47503: PUSH
47504: LD_VAR 0 11
47508: PUSH
47509: LD_INT 3
47511: ARRAY
47512: GREATEREQUAL
47513: AND
47514: NOT
47515: IFFALSE 47519
// exit ;
47517: GO 48106
// if GetBType ( depot ) = b_depot then
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 266
47528: PUSH
47529: LD_INT 0
47531: EQUAL
47532: IFFALSE 47544
// dist := 28 else
47534: LD_ADDR_VAR 0 14
47538: PUSH
47539: LD_INT 28
47541: ST_TO_ADDR
47542: GO 47552
// dist := 36 ;
47544: LD_ADDR_VAR 0 14
47548: PUSH
47549: LD_INT 36
47551: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47552: LD_VAR 0 1
47556: PPUSH
47557: LD_VAR 0 3
47561: PPUSH
47562: LD_VAR 0 4
47566: PPUSH
47567: CALL_OW 297
47571: PUSH
47572: LD_VAR 0 14
47576: GREATER
47577: IFFALSE 47581
// exit ;
47579: GO 48106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47581: LD_ADDR_VAR 0 12
47585: PUSH
47586: LD_VAR 0 2
47590: PPUSH
47591: LD_VAR 0 3
47595: PPUSH
47596: LD_VAR 0 4
47600: PPUSH
47601: LD_VAR 0 5
47605: PPUSH
47606: LD_VAR 0 1
47610: PPUSH
47611: CALL_OW 248
47615: PPUSH
47616: LD_INT 0
47618: PPUSH
47619: CALL 48111 0 6
47623: ST_TO_ADDR
// if not hexes then
47624: LD_VAR 0 12
47628: NOT
47629: IFFALSE 47633
// exit ;
47631: GO 48106
// hex := GetHexInfo ( x , y ) ;
47633: LD_ADDR_VAR 0 15
47637: PUSH
47638: LD_VAR 0 3
47642: PPUSH
47643: LD_VAR 0 4
47647: PPUSH
47648: CALL_OW 546
47652: ST_TO_ADDR
// if hex [ 1 ] then
47653: LD_VAR 0 15
47657: PUSH
47658: LD_INT 1
47660: ARRAY
47661: IFFALSE 47665
// exit ;
47663: GO 48106
// height := hex [ 2 ] ;
47665: LD_ADDR_VAR 0 13
47669: PUSH
47670: LD_VAR 0 15
47674: PUSH
47675: LD_INT 2
47677: ARRAY
47678: ST_TO_ADDR
// for i = 1 to hexes do
47679: LD_ADDR_VAR 0 7
47683: PUSH
47684: DOUBLE
47685: LD_INT 1
47687: DEC
47688: ST_TO_ADDR
47689: LD_VAR 0 12
47693: PUSH
47694: FOR_TO
47695: IFFALSE 48025
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47697: LD_VAR 0 12
47701: PUSH
47702: LD_VAR 0 7
47706: ARRAY
47707: PUSH
47708: LD_INT 1
47710: ARRAY
47711: PPUSH
47712: LD_VAR 0 12
47716: PUSH
47717: LD_VAR 0 7
47721: ARRAY
47722: PUSH
47723: LD_INT 2
47725: ARRAY
47726: PPUSH
47727: CALL_OW 488
47731: NOT
47732: PUSH
47733: LD_VAR 0 12
47737: PUSH
47738: LD_VAR 0 7
47742: ARRAY
47743: PUSH
47744: LD_INT 1
47746: ARRAY
47747: PPUSH
47748: LD_VAR 0 12
47752: PUSH
47753: LD_VAR 0 7
47757: ARRAY
47758: PUSH
47759: LD_INT 2
47761: ARRAY
47762: PPUSH
47763: CALL_OW 428
47767: PUSH
47768: LD_INT 0
47770: GREATER
47771: OR
47772: PUSH
47773: LD_VAR 0 12
47777: PUSH
47778: LD_VAR 0 7
47782: ARRAY
47783: PUSH
47784: LD_INT 1
47786: ARRAY
47787: PPUSH
47788: LD_VAR 0 12
47792: PUSH
47793: LD_VAR 0 7
47797: ARRAY
47798: PUSH
47799: LD_INT 2
47801: ARRAY
47802: PPUSH
47803: CALL_OW 351
47807: OR
47808: IFFALSE 47814
// exit ;
47810: POP
47811: POP
47812: GO 48106
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47814: LD_ADDR_VAR 0 8
47818: PUSH
47819: LD_VAR 0 12
47823: PUSH
47824: LD_VAR 0 7
47828: ARRAY
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PPUSH
47834: LD_VAR 0 12
47838: PUSH
47839: LD_VAR 0 7
47843: ARRAY
47844: PUSH
47845: LD_INT 2
47847: ARRAY
47848: PPUSH
47849: CALL_OW 546
47853: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47854: LD_VAR 0 8
47858: PUSH
47859: LD_INT 1
47861: ARRAY
47862: PUSH
47863: LD_VAR 0 8
47867: PUSH
47868: LD_INT 2
47870: ARRAY
47871: PUSH
47872: LD_VAR 0 13
47876: PUSH
47877: LD_INT 2
47879: PLUS
47880: GREATER
47881: OR
47882: PUSH
47883: LD_VAR 0 8
47887: PUSH
47888: LD_INT 2
47890: ARRAY
47891: PUSH
47892: LD_VAR 0 13
47896: PUSH
47897: LD_INT 2
47899: MINUS
47900: LESS
47901: OR
47902: PUSH
47903: LD_VAR 0 8
47907: PUSH
47908: LD_INT 3
47910: ARRAY
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 8
47917: PUSH
47918: LD_INT 9
47920: PUSH
47921: LD_INT 10
47923: PUSH
47924: LD_INT 11
47926: PUSH
47927: LD_INT 12
47929: PUSH
47930: LD_INT 13
47932: PUSH
47933: LD_INT 16
47935: PUSH
47936: LD_INT 17
47938: PUSH
47939: LD_INT 18
47941: PUSH
47942: LD_INT 19
47944: PUSH
47945: LD_INT 20
47947: PUSH
47948: LD_INT 21
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: IN
47966: NOT
47967: OR
47968: PUSH
47969: LD_VAR 0 8
47973: PUSH
47974: LD_INT 5
47976: ARRAY
47977: NOT
47978: OR
47979: PUSH
47980: LD_VAR 0 8
47984: PUSH
47985: LD_INT 6
47987: ARRAY
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: LD_INT 7
47997: PUSH
47998: LD_INT 9
48000: PUSH
48001: LD_INT 10
48003: PUSH
48004: LD_INT 11
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: IN
48015: NOT
48016: OR
48017: IFFALSE 48023
// exit ;
48019: POP
48020: POP
48021: GO 48106
// end ;
48023: GO 47694
48025: POP
48026: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48027: LD_VAR 0 9
48031: PPUSH
48032: LD_VAR 0 3
48036: PPUSH
48037: LD_VAR 0 4
48041: PPUSH
48042: LD_INT 20
48044: PPUSH
48045: CALL 40052 0 4
48049: PUSH
48050: LD_INT 4
48052: ARRAY
48053: IFFALSE 48057
// exit ;
48055: GO 48106
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48057: LD_VAR 0 2
48061: PUSH
48062: LD_INT 29
48064: PUSH
48065: LD_INT 30
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: IN
48072: PUSH
48073: LD_VAR 0 3
48077: PPUSH
48078: LD_VAR 0 4
48082: PPUSH
48083: LD_VAR 0 9
48087: PPUSH
48088: CALL_OW 440
48092: NOT
48093: AND
48094: IFFALSE 48098
// exit ;
48096: GO 48106
// result := true ;
48098: LD_ADDR_VAR 0 6
48102: PUSH
48103: LD_INT 1
48105: ST_TO_ADDR
// end ;
48106: LD_VAR 0 6
48110: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48111: LD_INT 0
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
// result = [ ] ;
48171: LD_ADDR_VAR 0 7
48175: PUSH
48176: EMPTY
48177: ST_TO_ADDR
// temp_list = [ ] ;
48178: LD_ADDR_VAR 0 9
48182: PUSH
48183: EMPTY
48184: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48185: LD_VAR 0 4
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: LD_INT 4
48204: PUSH
48205: LD_INT 5
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: IN
48216: NOT
48217: PUSH
48218: LD_VAR 0 1
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: IN
48233: PUSH
48234: LD_VAR 0 5
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 3
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: IN
48253: NOT
48254: AND
48255: OR
48256: IFFALSE 48260
// exit ;
48258: GO 66651
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48260: LD_VAR 0 1
48264: PUSH
48265: LD_INT 6
48267: PUSH
48268: LD_INT 7
48270: PUSH
48271: LD_INT 8
48273: PUSH
48274: LD_INT 13
48276: PUSH
48277: LD_INT 12
48279: PUSH
48280: LD_INT 15
48282: PUSH
48283: LD_INT 11
48285: PUSH
48286: LD_INT 14
48288: PUSH
48289: LD_INT 10
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: IN
48303: IFFALSE 48313
// btype = b_lab ;
48305: LD_ADDR_VAR 0 1
48309: PUSH
48310: LD_INT 6
48312: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48313: LD_VAR 0 6
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: IN
48332: NOT
48333: PUSH
48334: LD_VAR 0 1
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: LD_INT 6
48353: PUSH
48354: LD_INT 36
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: LD_INT 5
48362: PUSH
48363: LD_INT 31
48365: PUSH
48366: LD_INT 32
48368: PUSH
48369: LD_INT 33
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: IN
48385: NOT
48386: PUSH
48387: LD_VAR 0 6
48391: PUSH
48392: LD_INT 1
48394: EQUAL
48395: AND
48396: OR
48397: PUSH
48398: LD_VAR 0 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: IN
48413: NOT
48414: PUSH
48415: LD_VAR 0 6
48419: PUSH
48420: LD_INT 2
48422: EQUAL
48423: AND
48424: OR
48425: IFFALSE 48435
// mode = 0 ;
48427: LD_ADDR_VAR 0 6
48431: PUSH
48432: LD_INT 0
48434: ST_TO_ADDR
// case mode of 0 :
48435: LD_VAR 0 6
48439: PUSH
48440: LD_INT 0
48442: DOUBLE
48443: EQUAL
48444: IFTRUE 48448
48446: GO 59901
48448: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48449: LD_ADDR_VAR 0 11
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48642: LD_ADDR_VAR 0 12
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48838: LD_ADDR_VAR 0 13
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 3
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49037: LD_ADDR_VAR 0 14
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49233: LD_ADDR_VAR 0 15
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49426: LD_ADDR_VAR 0 16
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49619: LD_ADDR_VAR 0 17
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49849: LD_ADDR_VAR 0 18
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50079: LD_ADDR_VAR 0 19
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50309: LD_ADDR_VAR 0 20
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50539: LD_ADDR_VAR 0 21
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50769: LD_ADDR_VAR 0 22
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50999: LD_ADDR_VAR 0 23
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51279: LD_ADDR_VAR 0 24
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51555: LD_ADDR_VAR 0 25
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51829: LD_ADDR_VAR 0 26
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52105: LD_ADDR_VAR 0 27
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 3
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52385: LD_ADDR_VAR 0 28
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52667: LD_ADDR_VAR 0 29
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 30
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53224: LD_ADDR_VAR 0 31
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53502: LD_ADDR_VAR 0 32
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53780: LD_ADDR_VAR 0 33
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 3
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54059: LD_ADDR_VAR 0 34
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54339: LD_ADDR_VAR 0 35
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54451: LD_ADDR_VAR 0 36
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54563: LD_ADDR_VAR 0 37
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54675: LD_ADDR_VAR 0 38
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54787: LD_ADDR_VAR 0 39
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54899: LD_ADDR_VAR 0 40
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55011: LD_ADDR_VAR 0 41
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55361: LD_ADDR_VAR 0 42
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55711: LD_ADDR_VAR 0 43
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56059: LD_ADDR_VAR 0 44
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56409: LD_ADDR_VAR 0 45
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56759: LD_ADDR_VAR 0 46
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57107: LD_ADDR_VAR 0 47
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57258: LD_ADDR_VAR 0 48
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57405: LD_ADDR_VAR 0 49
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57549: LD_ADDR_VAR 0 50
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57693: LD_ADDR_VAR 0 51
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57840: LD_ADDR_VAR 0 52
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57991: LD_ADDR_VAR 0 53
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58221: LD_ADDR_VAR 0 54
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58451: LD_ADDR_VAR 0 55
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58681: LD_ADDR_VAR 0 56
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58911: LD_ADDR_VAR 0 57
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59141: LD_ADDR_VAR 0 58
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59371: LD_ADDR_VAR 0 59
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59459: LD_ADDR_VAR 0 60
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59547: LD_ADDR_VAR 0 61
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59635: LD_ADDR_VAR 0 62
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59723: LD_ADDR_VAR 0 63
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59811: LD_ADDR_VAR 0 64
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// end ; 1 :
59899: GO 65796
59901: LD_INT 1
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59909
59907: GO 62532
59909: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59910: LD_ADDR_VAR 0 11
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59954: LD_ADDR_VAR 0 12
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59995: LD_ADDR_VAR 0 13
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60035: LD_ADDR_VAR 0 14
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60076: LD_ADDR_VAR 0 15
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60120: LD_ADDR_VAR 0 16
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60166: LD_ADDR_VAR 0 17
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60210: LD_ADDR_VAR 0 18
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60251: LD_ADDR_VAR 0 19
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60291: LD_ADDR_VAR 0 20
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60332: LD_ADDR_VAR 0 21
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60376: LD_ADDR_VAR 0 22
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60422: LD_ADDR_VAR 0 23
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 4
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60466: LD_ADDR_VAR 0 24
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60507: LD_ADDR_VAR 0 25
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60547: LD_ADDR_VAR 0 26
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60588: LD_ADDR_VAR 0 27
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 4
60617: NEG
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60632: LD_ADDR_VAR 0 28
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: LD_INT 4
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60678: LD_ADDR_VAR 0 29
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 3
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 3
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 4
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 4
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 5
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 5
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 6
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: LD_INT 6
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 5
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60833: LD_ADDR_VAR 0 30
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 4
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 5
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 5
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 6
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 6
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60976: LD_ADDR_VAR 0 31
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 4
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 5
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: PUSH
61064: LD_INT 5
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 6
61073: PUSH
61074: LD_INT 5
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 6
61083: PUSH
61084: LD_INT 6
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: LD_INT 6
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61115: LD_ADDR_VAR 0 32
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 4
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 5
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 4
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: LD_INT 6
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 6
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 5
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61258: LD_ADDR_VAR 0 33
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: NEG
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 4
61310: NEG
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 4
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 4
61333: NEG
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 5
61344: NEG
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 5
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 5
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 6
61378: NEG
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 6
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61413: LD_ADDR_VAR 0 34
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 4
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 4
61480: NEG
61481: PUSH
61482: LD_INT 4
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 4
61492: NEG
61493: PUSH
61494: LD_INT 5
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 5
61504: NEG
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 5
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 5
61528: NEG
61529: PUSH
61530: LD_INT 6
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 6
61540: NEG
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 6
61552: NEG
61553: PUSH
61554: LD_INT 6
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61576: LD_ADDR_VAR 0 41
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 3
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: LIST
61619: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61620: LD_ADDR_VAR 0 42
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61661: LD_ADDR_VAR 0 43
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61701: LD_ADDR_VAR 0 44
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 2
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61742: LD_ADDR_VAR 0 45
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61786: LD_ADDR_VAR 0 46
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61832: LD_ADDR_VAR 0 47
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61865: LD_ADDR_VAR 0 48
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61896: LD_ADDR_VAR 0 49
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61925: LD_ADDR_VAR 0 50
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61954: LD_ADDR_VAR 0 51
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61985: LD_ADDR_VAR 0 52
61989: PUSH
61990: LD_INT 3
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62018: LD_ADDR_VAR 0 53
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62062: LD_ADDR_VAR 0 54
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62103: LD_ADDR_VAR 0 55
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62143: LD_ADDR_VAR 0 56
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62184: LD_ADDR_VAR 0 57
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62228: LD_ADDR_VAR 0 58
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: NEG
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62274: LD_ADDR_VAR 0 59
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62318: LD_ADDR_VAR 0 60
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62359: LD_ADDR_VAR 0 61
62363: PUSH
62364: LD_INT 2
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62399: LD_ADDR_VAR 0 62
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62440: LD_ADDR_VAR 0 63
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62484: LD_ADDR_VAR 0 64
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: LIST
62529: ST_TO_ADDR
// end ; 2 :
62530: GO 65796
62532: LD_INT 2
62534: DOUBLE
62535: EQUAL
62536: IFTRUE 62540
62538: GO 65795
62540: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62541: LD_ADDR_VAR 0 29
62545: PUSH
62546: LD_INT 4
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 5
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 5
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 4
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 4
62671: PUSH
62672: LD_INT 4
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: LD_INT 4
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 4
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 4
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: LD_INT 5
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: LD_INT 5
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 4
62880: NEG
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: NEG
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 4
62903: NEG
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 4
62926: NEG
62927: PUSH
62928: LD_INT 4
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: LD_INT 5
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: LD_INT 4
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 4
62974: NEG
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 5
62986: NEG
62987: PUSH
62988: LD_INT 4
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 5
62998: NEG
62999: PUSH
63000: LD_INT 5
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: LD_INT 5
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 5
63022: NEG
63023: PUSH
63024: LD_INT 3
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63079: LD_ADDR_VAR 0 30
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: LD_INT 4
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 5
63106: PUSH
63107: LD_INT 4
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: PUSH
63117: LD_INT 5
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: LD_INT 5
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 4
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 5
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 4
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 4
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 4
63269: NEG
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 4
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 4
63314: NEG
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 5
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 5
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 5
63348: NEG
63349: PUSH
63350: LD_INT 2
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: LD_INT 3
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: LD_INT 4
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: LD_INT 2
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 4
63431: NEG
63432: PUSH
63433: LD_INT 3
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 4
63443: NEG
63444: PUSH
63445: LD_INT 4
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: LD_INT 4
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 4
63467: NEG
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 4
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 5
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 4
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 3
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: LD_INT 4
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 5
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: LD_INT 5
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63626: LD_ADDR_VAR 0 31
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 5
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 5
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 4
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 4
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 4
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: LD_INT 5
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 4
63876: NEG
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 5
63888: NEG
63889: PUSH
63890: LD_INT 4
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 5
63900: NEG
63901: PUSH
63902: LD_INT 5
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 5
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 4
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: LD_INT 4
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: LD_INT 2
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 2
64026: NEG
64027: PUSH
64028: LD_INT 4
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 4
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 4
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 5
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 5
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 3
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 5
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64176: LD_ADDR_VAR 0 32
64180: PUSH
64181: LD_INT 4
64183: NEG
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 4
64194: NEG
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 4
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 5
64239: NEG
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 5
64250: NEG
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 5
64262: NEG
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: NEG
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: LD_INT 3
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: LD_INT 4
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: LD_INT 3
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 4
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: NEG
64358: PUSH
64359: LD_INT 4
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: LD_INT 4
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 4
64381: NEG
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 4
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 5
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: LD_INT 4
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 4
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 5
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: LD_INT 5
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 4
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 4
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 4
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 4
64588: PUSH
64589: LD_INT 4
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 4
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: LD_INT 4
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 5
64618: PUSH
64619: LD_INT 5
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: LD_INT 5
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 5
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 3
64668: PUSH
64669: LD_INT 5
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64723: LD_ADDR_VAR 0 33
64727: PUSH
64728: LD_INT 4
64730: NEG
64731: PUSH
64732: LD_INT 4
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 4
64742: NEG
64743: PUSH
64744: LD_INT 5
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: LD_INT 4
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 4
64778: NEG
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 5
64790: NEG
64791: PUSH
64792: LD_INT 4
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 5
64802: NEG
64803: PUSH
64804: LD_INT 5
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: LD_INT 5
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 5
64826: NEG
64827: PUSH
64828: LD_INT 3
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 4
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 4
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: LD_INT 4
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 4
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 5
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 4
65063: PUSH
65064: LD_INT 4
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: LD_INT 4
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 4
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 4
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 4
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 5
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 5
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65261: LD_ADDR_VAR 0 34
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: LD_INT 4
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 5
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: LD_INT 4
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 5
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: LD_INT 3
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: LD_INT 5
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 4
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: LD_INT 4
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 5
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: LD_INT 5
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 4
65503: PUSH
65504: LD_INT 5
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: LD_INT 4
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 3
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 5
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 5
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 4
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 4
65646: NEG
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 4
65657: NEG
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 3
65669: NEG
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 3
65680: NEG
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 4
65691: NEG
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 5
65702: NEG
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 5
65713: NEG
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 5
65725: NEG
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// end ; end ;
65793: GO 65796
65795: POP
// case btype of b_depot , b_warehouse :
65796: LD_VAR 0 1
65800: PUSH
65801: LD_INT 0
65803: DOUBLE
65804: EQUAL
65805: IFTRUE 65815
65807: LD_INT 1
65809: DOUBLE
65810: EQUAL
65811: IFTRUE 65815
65813: GO 66016
65815: POP
// case nation of nation_american :
65816: LD_VAR 0 5
65820: PUSH
65821: LD_INT 1
65823: DOUBLE
65824: EQUAL
65825: IFTRUE 65829
65827: GO 65885
65829: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65830: LD_ADDR_VAR 0 9
65834: PUSH
65835: LD_VAR 0 11
65839: PUSH
65840: LD_VAR 0 12
65844: PUSH
65845: LD_VAR 0 13
65849: PUSH
65850: LD_VAR 0 14
65854: PUSH
65855: LD_VAR 0 15
65859: PUSH
65860: LD_VAR 0 16
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: PUSH
65873: LD_VAR 0 4
65877: PUSH
65878: LD_INT 1
65880: PLUS
65881: ARRAY
65882: ST_TO_ADDR
65883: GO 66014
65885: LD_INT 2
65887: DOUBLE
65888: EQUAL
65889: IFTRUE 65893
65891: GO 65949
65893: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65894: LD_ADDR_VAR 0 9
65898: PUSH
65899: LD_VAR 0 17
65903: PUSH
65904: LD_VAR 0 18
65908: PUSH
65909: LD_VAR 0 19
65913: PUSH
65914: LD_VAR 0 20
65918: PUSH
65919: LD_VAR 0 21
65923: PUSH
65924: LD_VAR 0 22
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: PUSH
65937: LD_VAR 0 4
65941: PUSH
65942: LD_INT 1
65944: PLUS
65945: ARRAY
65946: ST_TO_ADDR
65947: GO 66014
65949: LD_INT 3
65951: DOUBLE
65952: EQUAL
65953: IFTRUE 65957
65955: GO 66013
65957: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65958: LD_ADDR_VAR 0 9
65962: PUSH
65963: LD_VAR 0 23
65967: PUSH
65968: LD_VAR 0 24
65972: PUSH
65973: LD_VAR 0 25
65977: PUSH
65978: LD_VAR 0 26
65982: PUSH
65983: LD_VAR 0 27
65987: PUSH
65988: LD_VAR 0 28
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: PUSH
66001: LD_VAR 0 4
66005: PUSH
66006: LD_INT 1
66008: PLUS
66009: ARRAY
66010: ST_TO_ADDR
66011: GO 66014
66013: POP
66014: GO 66569
66016: LD_INT 2
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66030
66022: LD_INT 3
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66030
66028: GO 66086
66030: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66031: LD_ADDR_VAR 0 9
66035: PUSH
66036: LD_VAR 0 29
66040: PUSH
66041: LD_VAR 0 30
66045: PUSH
66046: LD_VAR 0 31
66050: PUSH
66051: LD_VAR 0 32
66055: PUSH
66056: LD_VAR 0 33
66060: PUSH
66061: LD_VAR 0 34
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: PUSH
66074: LD_VAR 0 4
66078: PUSH
66079: LD_INT 1
66081: PLUS
66082: ARRAY
66083: ST_TO_ADDR
66084: GO 66569
66086: LD_INT 16
66088: DOUBLE
66089: EQUAL
66090: IFTRUE 66148
66092: LD_INT 17
66094: DOUBLE
66095: EQUAL
66096: IFTRUE 66148
66098: LD_INT 18
66100: DOUBLE
66101: EQUAL
66102: IFTRUE 66148
66104: LD_INT 19
66106: DOUBLE
66107: EQUAL
66108: IFTRUE 66148
66110: LD_INT 22
66112: DOUBLE
66113: EQUAL
66114: IFTRUE 66148
66116: LD_INT 20
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66148
66122: LD_INT 21
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66148
66128: LD_INT 23
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66148
66134: LD_INT 24
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66148
66140: LD_INT 25
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66148
66146: GO 66204
66148: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66149: LD_ADDR_VAR 0 9
66153: PUSH
66154: LD_VAR 0 35
66158: PUSH
66159: LD_VAR 0 36
66163: PUSH
66164: LD_VAR 0 37
66168: PUSH
66169: LD_VAR 0 38
66173: PUSH
66174: LD_VAR 0 39
66178: PUSH
66179: LD_VAR 0 40
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: PUSH
66192: LD_VAR 0 4
66196: PUSH
66197: LD_INT 1
66199: PLUS
66200: ARRAY
66201: ST_TO_ADDR
66202: GO 66569
66204: LD_INT 6
66206: DOUBLE
66207: EQUAL
66208: IFTRUE 66260
66210: LD_INT 7
66212: DOUBLE
66213: EQUAL
66214: IFTRUE 66260
66216: LD_INT 8
66218: DOUBLE
66219: EQUAL
66220: IFTRUE 66260
66222: LD_INT 13
66224: DOUBLE
66225: EQUAL
66226: IFTRUE 66260
66228: LD_INT 12
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66260
66234: LD_INT 15
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66260
66240: LD_INT 11
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66260
66246: LD_INT 14
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66260
66252: LD_INT 10
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66260
66258: GO 66316
66260: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66261: LD_ADDR_VAR 0 9
66265: PUSH
66266: LD_VAR 0 41
66270: PUSH
66271: LD_VAR 0 42
66275: PUSH
66276: LD_VAR 0 43
66280: PUSH
66281: LD_VAR 0 44
66285: PUSH
66286: LD_VAR 0 45
66290: PUSH
66291: LD_VAR 0 46
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 4
66308: PUSH
66309: LD_INT 1
66311: PLUS
66312: ARRAY
66313: ST_TO_ADDR
66314: GO 66569
66316: LD_INT 36
66318: DOUBLE
66319: EQUAL
66320: IFTRUE 66324
66322: GO 66380
66324: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66325: LD_ADDR_VAR 0 9
66329: PUSH
66330: LD_VAR 0 47
66334: PUSH
66335: LD_VAR 0 48
66339: PUSH
66340: LD_VAR 0 49
66344: PUSH
66345: LD_VAR 0 50
66349: PUSH
66350: LD_VAR 0 51
66354: PUSH
66355: LD_VAR 0 52
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 4
66372: PUSH
66373: LD_INT 1
66375: PLUS
66376: ARRAY
66377: ST_TO_ADDR
66378: GO 66569
66380: LD_INT 4
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66406
66386: LD_INT 5
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66406
66392: LD_INT 34
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66406
66398: LD_INT 37
66400: DOUBLE
66401: EQUAL
66402: IFTRUE 66406
66404: GO 66462
66406: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66407: LD_ADDR_VAR 0 9
66411: PUSH
66412: LD_VAR 0 53
66416: PUSH
66417: LD_VAR 0 54
66421: PUSH
66422: LD_VAR 0 55
66426: PUSH
66427: LD_VAR 0 56
66431: PUSH
66432: LD_VAR 0 57
66436: PUSH
66437: LD_VAR 0 58
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: PUSH
66450: LD_VAR 0 4
66454: PUSH
66455: LD_INT 1
66457: PLUS
66458: ARRAY
66459: ST_TO_ADDR
66460: GO 66569
66462: LD_INT 31
66464: DOUBLE
66465: EQUAL
66466: IFTRUE 66512
66468: LD_INT 32
66470: DOUBLE
66471: EQUAL
66472: IFTRUE 66512
66474: LD_INT 33
66476: DOUBLE
66477: EQUAL
66478: IFTRUE 66512
66480: LD_INT 27
66482: DOUBLE
66483: EQUAL
66484: IFTRUE 66512
66486: LD_INT 26
66488: DOUBLE
66489: EQUAL
66490: IFTRUE 66512
66492: LD_INT 28
66494: DOUBLE
66495: EQUAL
66496: IFTRUE 66512
66498: LD_INT 29
66500: DOUBLE
66501: EQUAL
66502: IFTRUE 66512
66504: LD_INT 30
66506: DOUBLE
66507: EQUAL
66508: IFTRUE 66512
66510: GO 66568
66512: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66513: LD_ADDR_VAR 0 9
66517: PUSH
66518: LD_VAR 0 59
66522: PUSH
66523: LD_VAR 0 60
66527: PUSH
66528: LD_VAR 0 61
66532: PUSH
66533: LD_VAR 0 62
66537: PUSH
66538: LD_VAR 0 63
66542: PUSH
66543: LD_VAR 0 64
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: PUSH
66556: LD_VAR 0 4
66560: PUSH
66561: LD_INT 1
66563: PLUS
66564: ARRAY
66565: ST_TO_ADDR
66566: GO 66569
66568: POP
// temp_list2 = [ ] ;
66569: LD_ADDR_VAR 0 10
66573: PUSH
66574: EMPTY
66575: ST_TO_ADDR
// for i in temp_list do
66576: LD_ADDR_VAR 0 8
66580: PUSH
66581: LD_VAR 0 9
66585: PUSH
66586: FOR_IN
66587: IFFALSE 66639
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66589: LD_ADDR_VAR 0 10
66593: PUSH
66594: LD_VAR 0 10
66598: PUSH
66599: LD_VAR 0 8
66603: PUSH
66604: LD_INT 1
66606: ARRAY
66607: PUSH
66608: LD_VAR 0 2
66612: PLUS
66613: PUSH
66614: LD_VAR 0 8
66618: PUSH
66619: LD_INT 2
66621: ARRAY
66622: PUSH
66623: LD_VAR 0 3
66627: PLUS
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: ADD
66636: ST_TO_ADDR
66637: GO 66586
66639: POP
66640: POP
// result = temp_list2 ;
66641: LD_ADDR_VAR 0 7
66645: PUSH
66646: LD_VAR 0 10
66650: ST_TO_ADDR
// end ;
66651: LD_VAR 0 7
66655: RET
// export function EnemyInRange ( unit , dist ) ; begin
66656: LD_INT 0
66658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66659: LD_ADDR_VAR 0 3
66663: PUSH
66664: LD_VAR 0 1
66668: PPUSH
66669: CALL_OW 255
66673: PPUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: CALL_OW 250
66683: PPUSH
66684: LD_VAR 0 1
66688: PPUSH
66689: CALL_OW 251
66693: PPUSH
66694: LD_VAR 0 2
66698: PPUSH
66699: CALL 40052 0 4
66703: PUSH
66704: LD_INT 4
66706: ARRAY
66707: ST_TO_ADDR
// end ;
66708: LD_VAR 0 3
66712: RET
// export function PlayerSeeMe ( unit ) ; begin
66713: LD_INT 0
66715: PPUSH
// result := See ( your_side , unit ) ;
66716: LD_ADDR_VAR 0 2
66720: PUSH
66721: LD_OWVAR 2
66725: PPUSH
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 292
66735: ST_TO_ADDR
// end ;
66736: LD_VAR 0 2
66740: RET
// export function ReverseDir ( unit ) ; begin
66741: LD_INT 0
66743: PPUSH
// if not unit then
66744: LD_VAR 0 1
66748: NOT
66749: IFFALSE 66753
// exit ;
66751: GO 66776
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66753: LD_ADDR_VAR 0 2
66757: PUSH
66758: LD_VAR 0 1
66762: PPUSH
66763: CALL_OW 254
66767: PUSH
66768: LD_INT 3
66770: PLUS
66771: PUSH
66772: LD_INT 6
66774: MOD
66775: ST_TO_ADDR
// end ;
66776: LD_VAR 0 2
66780: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
66787: PPUSH
// if not hexes then
66788: LD_VAR 0 2
66792: NOT
66793: IFFALSE 66797
// exit ;
66795: GO 66945
// dist := 9999 ;
66797: LD_ADDR_VAR 0 5
66801: PUSH
66802: LD_INT 9999
66804: ST_TO_ADDR
// for i = 1 to hexes do
66805: LD_ADDR_VAR 0 4
66809: PUSH
66810: DOUBLE
66811: LD_INT 1
66813: DEC
66814: ST_TO_ADDR
66815: LD_VAR 0 2
66819: PUSH
66820: FOR_TO
66821: IFFALSE 66933
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66823: LD_VAR 0 1
66827: PPUSH
66828: LD_VAR 0 2
66832: PUSH
66833: LD_VAR 0 4
66837: ARRAY
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PPUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_VAR 0 4
66852: ARRAY
66853: PUSH
66854: LD_INT 2
66856: ARRAY
66857: PPUSH
66858: CALL_OW 297
66862: PUSH
66863: LD_VAR 0 5
66867: LESS
66868: IFFALSE 66931
// begin hex := hexes [ i ] ;
66870: LD_ADDR_VAR 0 7
66874: PUSH
66875: LD_VAR 0 2
66879: PUSH
66880: LD_VAR 0 4
66884: ARRAY
66885: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66886: LD_ADDR_VAR 0 5
66890: PUSH
66891: LD_VAR 0 1
66895: PPUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_VAR 0 4
66905: ARRAY
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PPUSH
66911: LD_VAR 0 2
66915: PUSH
66916: LD_VAR 0 4
66920: ARRAY
66921: PUSH
66922: LD_INT 2
66924: ARRAY
66925: PPUSH
66926: CALL_OW 297
66930: ST_TO_ADDR
// end ; end ;
66931: GO 66820
66933: POP
66934: POP
// result := hex ;
66935: LD_ADDR_VAR 0 3
66939: PUSH
66940: LD_VAR 0 7
66944: ST_TO_ADDR
// end ;
66945: LD_VAR 0 3
66949: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66950: LD_INT 0
66952: PPUSH
66953: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66954: LD_VAR 0 1
66958: NOT
66959: PUSH
66960: LD_VAR 0 1
66964: PUSH
66965: LD_INT 21
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 23
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PPUSH
66989: CALL_OW 69
66993: IN
66994: NOT
66995: OR
66996: IFFALSE 67000
// exit ;
66998: GO 67047
// for i = 1 to 3 do
67000: LD_ADDR_VAR 0 3
67004: PUSH
67005: DOUBLE
67006: LD_INT 1
67008: DEC
67009: ST_TO_ADDR
67010: LD_INT 3
67012: PUSH
67013: FOR_TO
67014: IFFALSE 67045
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67016: LD_VAR 0 1
67020: PPUSH
67021: CALL_OW 250
67025: PPUSH
67026: LD_VAR 0 1
67030: PPUSH
67031: CALL_OW 251
67035: PPUSH
67036: LD_INT 1
67038: PPUSH
67039: CALL_OW 453
67043: GO 67013
67045: POP
67046: POP
// end ;
67047: LD_VAR 0 2
67051: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67052: LD_INT 0
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
67059: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67060: LD_VAR 0 1
67064: NOT
67065: PUSH
67066: LD_VAR 0 2
67070: NOT
67071: OR
67072: PUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 314
67082: OR
67083: IFFALSE 67087
// exit ;
67085: GO 67528
// x := GetX ( enemy_unit ) ;
67087: LD_ADDR_VAR 0 7
67091: PUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 250
67101: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67102: LD_ADDR_VAR 0 8
67106: PUSH
67107: LD_VAR 0 2
67111: PPUSH
67112: CALL_OW 251
67116: ST_TO_ADDR
// if not x or not y then
67117: LD_VAR 0 7
67121: NOT
67122: PUSH
67123: LD_VAR 0 8
67127: NOT
67128: OR
67129: IFFALSE 67133
// exit ;
67131: GO 67528
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67133: LD_ADDR_VAR 0 6
67137: PUSH
67138: LD_VAR 0 7
67142: PPUSH
67143: LD_INT 0
67145: PPUSH
67146: LD_INT 4
67148: PPUSH
67149: CALL_OW 272
67153: PUSH
67154: LD_VAR 0 8
67158: PPUSH
67159: LD_INT 0
67161: PPUSH
67162: LD_INT 4
67164: PPUSH
67165: CALL_OW 273
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_VAR 0 7
67178: PPUSH
67179: LD_INT 1
67181: PPUSH
67182: LD_INT 4
67184: PPUSH
67185: CALL_OW 272
67189: PUSH
67190: LD_VAR 0 8
67194: PPUSH
67195: LD_INT 1
67197: PPUSH
67198: LD_INT 4
67200: PPUSH
67201: CALL_OW 273
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_VAR 0 7
67214: PPUSH
67215: LD_INT 2
67217: PPUSH
67218: LD_INT 4
67220: PPUSH
67221: CALL_OW 272
67225: PUSH
67226: LD_VAR 0 8
67230: PPUSH
67231: LD_INT 2
67233: PPUSH
67234: LD_INT 4
67236: PPUSH
67237: CALL_OW 273
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_VAR 0 7
67250: PPUSH
67251: LD_INT 3
67253: PPUSH
67254: LD_INT 4
67256: PPUSH
67257: CALL_OW 272
67261: PUSH
67262: LD_VAR 0 8
67266: PPUSH
67267: LD_INT 3
67269: PPUSH
67270: LD_INT 4
67272: PPUSH
67273: CALL_OW 273
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_VAR 0 7
67286: PPUSH
67287: LD_INT 4
67289: PPUSH
67290: LD_INT 4
67292: PPUSH
67293: CALL_OW 272
67297: PUSH
67298: LD_VAR 0 8
67302: PPUSH
67303: LD_INT 4
67305: PPUSH
67306: LD_INT 4
67308: PPUSH
67309: CALL_OW 273
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 7
67322: PPUSH
67323: LD_INT 5
67325: PPUSH
67326: LD_INT 4
67328: PPUSH
67329: CALL_OW 272
67333: PUSH
67334: LD_VAR 0 8
67338: PPUSH
67339: LD_INT 5
67341: PPUSH
67342: LD_INT 4
67344: PPUSH
67345: CALL_OW 273
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// for i = tmp downto 1 do
67362: LD_ADDR_VAR 0 4
67366: PUSH
67367: DOUBLE
67368: LD_VAR 0 6
67372: INC
67373: ST_TO_ADDR
67374: LD_INT 1
67376: PUSH
67377: FOR_DOWNTO
67378: IFFALSE 67479
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67380: LD_VAR 0 6
67384: PUSH
67385: LD_VAR 0 4
67389: ARRAY
67390: PUSH
67391: LD_INT 1
67393: ARRAY
67394: PPUSH
67395: LD_VAR 0 6
67399: PUSH
67400: LD_VAR 0 4
67404: ARRAY
67405: PUSH
67406: LD_INT 2
67408: ARRAY
67409: PPUSH
67410: CALL_OW 488
67414: NOT
67415: PUSH
67416: LD_VAR 0 6
67420: PUSH
67421: LD_VAR 0 4
67425: ARRAY
67426: PUSH
67427: LD_INT 1
67429: ARRAY
67430: PPUSH
67431: LD_VAR 0 6
67435: PUSH
67436: LD_VAR 0 4
67440: ARRAY
67441: PUSH
67442: LD_INT 2
67444: ARRAY
67445: PPUSH
67446: CALL_OW 428
67450: PUSH
67451: LD_INT 0
67453: NONEQUAL
67454: OR
67455: IFFALSE 67477
// tmp := Delete ( tmp , i ) ;
67457: LD_ADDR_VAR 0 6
67461: PUSH
67462: LD_VAR 0 6
67466: PPUSH
67467: LD_VAR 0 4
67471: PPUSH
67472: CALL_OW 3
67476: ST_TO_ADDR
67477: GO 67377
67479: POP
67480: POP
// j := GetClosestHex ( unit , tmp ) ;
67481: LD_ADDR_VAR 0 5
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_VAR 0 6
67495: PPUSH
67496: CALL 66781 0 2
67500: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67501: LD_VAR 0 1
67505: PPUSH
67506: LD_VAR 0 5
67510: PUSH
67511: LD_INT 1
67513: ARRAY
67514: PPUSH
67515: LD_VAR 0 5
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: PPUSH
67524: CALL_OW 111
// end ;
67528: LD_VAR 0 3
67532: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67533: LD_INT 0
67535: PPUSH
67536: PPUSH
67537: PPUSH
// uc_side = 0 ;
67538: LD_ADDR_OWVAR 20
67542: PUSH
67543: LD_INT 0
67545: ST_TO_ADDR
// uc_nation = 0 ;
67546: LD_ADDR_OWVAR 21
67550: PUSH
67551: LD_INT 0
67553: ST_TO_ADDR
// InitHc_All ( ) ;
67554: CALL_OW 584
// InitVc ;
67558: CALL_OW 20
// if mastodonts then
67562: LD_VAR 0 6
67566: IFFALSE 67633
// for i = 1 to mastodonts do
67568: LD_ADDR_VAR 0 11
67572: PUSH
67573: DOUBLE
67574: LD_INT 1
67576: DEC
67577: ST_TO_ADDR
67578: LD_VAR 0 6
67582: PUSH
67583: FOR_TO
67584: IFFALSE 67631
// begin vc_chassis := 31 ;
67586: LD_ADDR_OWVAR 37
67590: PUSH
67591: LD_INT 31
67593: ST_TO_ADDR
// vc_control := control_rider ;
67594: LD_ADDR_OWVAR 38
67598: PUSH
67599: LD_INT 4
67601: ST_TO_ADDR
// animal := CreateVehicle ;
67602: LD_ADDR_VAR 0 12
67606: PUSH
67607: CALL_OW 45
67611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67612: LD_VAR 0 12
67616: PPUSH
67617: LD_VAR 0 8
67621: PPUSH
67622: LD_INT 0
67624: PPUSH
67625: CALL 69768 0 3
// end ;
67629: GO 67583
67631: POP
67632: POP
// if horses then
67633: LD_VAR 0 5
67637: IFFALSE 67704
// for i = 1 to horses do
67639: LD_ADDR_VAR 0 11
67643: PUSH
67644: DOUBLE
67645: LD_INT 1
67647: DEC
67648: ST_TO_ADDR
67649: LD_VAR 0 5
67653: PUSH
67654: FOR_TO
67655: IFFALSE 67702
// begin hc_class := 21 ;
67657: LD_ADDR_OWVAR 28
67661: PUSH
67662: LD_INT 21
67664: ST_TO_ADDR
// hc_gallery :=  ;
67665: LD_ADDR_OWVAR 33
67669: PUSH
67670: LD_STRING 
67672: ST_TO_ADDR
// animal := CreateHuman ;
67673: LD_ADDR_VAR 0 12
67677: PUSH
67678: CALL_OW 44
67682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67683: LD_VAR 0 12
67687: PPUSH
67688: LD_VAR 0 8
67692: PPUSH
67693: LD_INT 0
67695: PPUSH
67696: CALL 69768 0 3
// end ;
67700: GO 67654
67702: POP
67703: POP
// if birds then
67704: LD_VAR 0 1
67708: IFFALSE 67775
// for i = 1 to birds do
67710: LD_ADDR_VAR 0 11
67714: PUSH
67715: DOUBLE
67716: LD_INT 1
67718: DEC
67719: ST_TO_ADDR
67720: LD_VAR 0 1
67724: PUSH
67725: FOR_TO
67726: IFFALSE 67773
// begin hc_class = 18 ;
67728: LD_ADDR_OWVAR 28
67732: PUSH
67733: LD_INT 18
67735: ST_TO_ADDR
// hc_gallery =  ;
67736: LD_ADDR_OWVAR 33
67740: PUSH
67741: LD_STRING 
67743: ST_TO_ADDR
// animal := CreateHuman ;
67744: LD_ADDR_VAR 0 12
67748: PUSH
67749: CALL_OW 44
67753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67754: LD_VAR 0 12
67758: PPUSH
67759: LD_VAR 0 8
67763: PPUSH
67764: LD_INT 0
67766: PPUSH
67767: CALL 69768 0 3
// end ;
67771: GO 67725
67773: POP
67774: POP
// if tigers then
67775: LD_VAR 0 2
67779: IFFALSE 67863
// for i = 1 to tigers do
67781: LD_ADDR_VAR 0 11
67785: PUSH
67786: DOUBLE
67787: LD_INT 1
67789: DEC
67790: ST_TO_ADDR
67791: LD_VAR 0 2
67795: PUSH
67796: FOR_TO
67797: IFFALSE 67861
// begin hc_class = class_tiger ;
67799: LD_ADDR_OWVAR 28
67803: PUSH
67804: LD_INT 14
67806: ST_TO_ADDR
// hc_gallery =  ;
67807: LD_ADDR_OWVAR 33
67811: PUSH
67812: LD_STRING 
67814: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67815: LD_ADDR_OWVAR 35
67819: PUSH
67820: LD_INT 7
67822: NEG
67823: PPUSH
67824: LD_INT 7
67826: PPUSH
67827: CALL_OW 12
67831: ST_TO_ADDR
// animal := CreateHuman ;
67832: LD_ADDR_VAR 0 12
67836: PUSH
67837: CALL_OW 44
67841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67842: LD_VAR 0 12
67846: PPUSH
67847: LD_VAR 0 8
67851: PPUSH
67852: LD_INT 0
67854: PPUSH
67855: CALL 69768 0 3
// end ;
67859: GO 67796
67861: POP
67862: POP
// if apemans then
67863: LD_VAR 0 3
67867: IFFALSE 67990
// for i = 1 to apemans do
67869: LD_ADDR_VAR 0 11
67873: PUSH
67874: DOUBLE
67875: LD_INT 1
67877: DEC
67878: ST_TO_ADDR
67879: LD_VAR 0 3
67883: PUSH
67884: FOR_TO
67885: IFFALSE 67988
// begin hc_class = class_apeman ;
67887: LD_ADDR_OWVAR 28
67891: PUSH
67892: LD_INT 12
67894: ST_TO_ADDR
// hc_gallery =  ;
67895: LD_ADDR_OWVAR 33
67899: PUSH
67900: LD_STRING 
67902: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67903: LD_ADDR_OWVAR 35
67907: PUSH
67908: LD_INT 2
67910: NEG
67911: PPUSH
67912: LD_INT 2
67914: PPUSH
67915: CALL_OW 12
67919: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67920: LD_ADDR_OWVAR 31
67924: PUSH
67925: LD_INT 1
67927: PPUSH
67928: LD_INT 3
67930: PPUSH
67931: CALL_OW 12
67935: PUSH
67936: LD_INT 1
67938: PPUSH
67939: LD_INT 3
67941: PPUSH
67942: CALL_OW 12
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: ST_TO_ADDR
// animal := CreateHuman ;
67959: LD_ADDR_VAR 0 12
67963: PUSH
67964: CALL_OW 44
67968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67969: LD_VAR 0 12
67973: PPUSH
67974: LD_VAR 0 8
67978: PPUSH
67979: LD_INT 0
67981: PPUSH
67982: CALL 69768 0 3
// end ;
67986: GO 67884
67988: POP
67989: POP
// if enchidnas then
67990: LD_VAR 0 4
67994: IFFALSE 68061
// for i = 1 to enchidnas do
67996: LD_ADDR_VAR 0 11
68000: PUSH
68001: DOUBLE
68002: LD_INT 1
68004: DEC
68005: ST_TO_ADDR
68006: LD_VAR 0 4
68010: PUSH
68011: FOR_TO
68012: IFFALSE 68059
// begin hc_class = 13 ;
68014: LD_ADDR_OWVAR 28
68018: PUSH
68019: LD_INT 13
68021: ST_TO_ADDR
// hc_gallery =  ;
68022: LD_ADDR_OWVAR 33
68026: PUSH
68027: LD_STRING 
68029: ST_TO_ADDR
// animal := CreateHuman ;
68030: LD_ADDR_VAR 0 12
68034: PUSH
68035: CALL_OW 44
68039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68040: LD_VAR 0 12
68044: PPUSH
68045: LD_VAR 0 8
68049: PPUSH
68050: LD_INT 0
68052: PPUSH
68053: CALL 69768 0 3
// end ;
68057: GO 68011
68059: POP
68060: POP
// if fishes then
68061: LD_VAR 0 7
68065: IFFALSE 68132
// for i = 1 to fishes do
68067: LD_ADDR_VAR 0 11
68071: PUSH
68072: DOUBLE
68073: LD_INT 1
68075: DEC
68076: ST_TO_ADDR
68077: LD_VAR 0 7
68081: PUSH
68082: FOR_TO
68083: IFFALSE 68130
// begin hc_class = 20 ;
68085: LD_ADDR_OWVAR 28
68089: PUSH
68090: LD_INT 20
68092: ST_TO_ADDR
// hc_gallery =  ;
68093: LD_ADDR_OWVAR 33
68097: PUSH
68098: LD_STRING 
68100: ST_TO_ADDR
// animal := CreateHuman ;
68101: LD_ADDR_VAR 0 12
68105: PUSH
68106: CALL_OW 44
68110: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68111: LD_VAR 0 12
68115: PPUSH
68116: LD_VAR 0 9
68120: PPUSH
68121: LD_INT 0
68123: PPUSH
68124: CALL 69768 0 3
// end ;
68128: GO 68082
68130: POP
68131: POP
// end ;
68132: LD_VAR 0 10
68136: RET
// export function WantHeal ( sci , unit ) ; begin
68137: LD_INT 0
68139: PPUSH
// if GetTaskList ( sci ) > 0 then
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL_OW 437
68149: PUSH
68150: LD_INT 0
68152: GREATER
68153: IFFALSE 68223
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68155: LD_VAR 0 1
68159: PPUSH
68160: CALL_OW 437
68164: PUSH
68165: LD_INT 1
68167: ARRAY
68168: PUSH
68169: LD_INT 1
68171: ARRAY
68172: PUSH
68173: LD_STRING l
68175: EQUAL
68176: PUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL_OW 437
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: PUSH
68191: LD_INT 4
68193: ARRAY
68194: PUSH
68195: LD_VAR 0 2
68199: EQUAL
68200: AND
68201: IFFALSE 68213
// result := true else
68203: LD_ADDR_VAR 0 3
68207: PUSH
68208: LD_INT 1
68210: ST_TO_ADDR
68211: GO 68221
// result := false ;
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_INT 0
68220: ST_TO_ADDR
// end else
68221: GO 68231
// result := false ;
68223: LD_ADDR_VAR 0 3
68227: PUSH
68228: LD_INT 0
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 3
68235: RET
// export function HealTarget ( sci ) ; begin
68236: LD_INT 0
68238: PPUSH
// if not sci then
68239: LD_VAR 0 1
68243: NOT
68244: IFFALSE 68248
// exit ;
68246: GO 68313
// result := 0 ;
68248: LD_ADDR_VAR 0 2
68252: PUSH
68253: LD_INT 0
68255: ST_TO_ADDR
// if GetTaskList ( sci ) then
68256: LD_VAR 0 1
68260: PPUSH
68261: CALL_OW 437
68265: IFFALSE 68313
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68267: LD_VAR 0 1
68271: PPUSH
68272: CALL_OW 437
68276: PUSH
68277: LD_INT 1
68279: ARRAY
68280: PUSH
68281: LD_INT 1
68283: ARRAY
68284: PUSH
68285: LD_STRING l
68287: EQUAL
68288: IFFALSE 68313
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68290: LD_ADDR_VAR 0 2
68294: PUSH
68295: LD_VAR 0 1
68299: PPUSH
68300: CALL_OW 437
68304: PUSH
68305: LD_INT 1
68307: ARRAY
68308: PUSH
68309: LD_INT 4
68311: ARRAY
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 2
68317: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68318: LD_INT 0
68320: PPUSH
68321: PPUSH
68322: PPUSH
68323: PPUSH
// if not base_units then
68324: LD_VAR 0 1
68328: NOT
68329: IFFALSE 68333
// exit ;
68331: GO 68420
// result := false ;
68333: LD_ADDR_VAR 0 2
68337: PUSH
68338: LD_INT 0
68340: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68341: LD_ADDR_VAR 0 5
68345: PUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: LD_INT 21
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PPUSH
68361: CALL_OW 72
68365: ST_TO_ADDR
// if not tmp then
68366: LD_VAR 0 5
68370: NOT
68371: IFFALSE 68375
// exit ;
68373: GO 68420
// for i in tmp do
68375: LD_ADDR_VAR 0 3
68379: PUSH
68380: LD_VAR 0 5
68384: PUSH
68385: FOR_IN
68386: IFFALSE 68418
// begin result := EnemyInRange ( i , 22 ) ;
68388: LD_ADDR_VAR 0 2
68392: PUSH
68393: LD_VAR 0 3
68397: PPUSH
68398: LD_INT 22
68400: PPUSH
68401: CALL 66656 0 2
68405: ST_TO_ADDR
// if result then
68406: LD_VAR 0 2
68410: IFFALSE 68416
// exit ;
68412: POP
68413: POP
68414: GO 68420
// end ;
68416: GO 68385
68418: POP
68419: POP
// end ;
68420: LD_VAR 0 2
68424: RET
// export function FilterByTag ( units , tag ) ; begin
68425: LD_INT 0
68427: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68428: LD_ADDR_VAR 0 3
68432: PUSH
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_INT 120
68440: PUSH
68441: LD_VAR 0 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PPUSH
68450: CALL_OW 72
68454: ST_TO_ADDR
// end ;
68455: LD_VAR 0 3
68459: RET
// export function IsDriver ( un ) ; begin
68460: LD_INT 0
68462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68463: LD_ADDR_VAR 0 2
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 55
68475: PUSH
68476: EMPTY
68477: LIST
68478: PPUSH
68479: CALL_OW 69
68483: IN
68484: ST_TO_ADDR
// end ;
68485: LD_VAR 0 2
68489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68490: LD_INT 0
68492: PPUSH
68493: PPUSH
// list := [ ] ;
68494: LD_ADDR_VAR 0 5
68498: PUSH
68499: EMPTY
68500: ST_TO_ADDR
// case d of 0 :
68501: LD_VAR 0 3
68505: PUSH
68506: LD_INT 0
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68514
68512: GO 68647
68514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68515: LD_ADDR_VAR 0 5
68519: PUSH
68520: LD_VAR 0 1
68524: PUSH
68525: LD_INT 4
68527: MINUS
68528: PUSH
68529: LD_VAR 0 2
68533: PUSH
68534: LD_INT 4
68536: MINUS
68537: PUSH
68538: LD_INT 2
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: LIST
68545: PUSH
68546: LD_VAR 0 1
68550: PUSH
68551: LD_INT 3
68553: MINUS
68554: PUSH
68555: LD_VAR 0 2
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 4
68575: PLUS
68576: PUSH
68577: LD_VAR 0 2
68581: PUSH
68582: LD_INT 4
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: PUSH
68590: LD_VAR 0 1
68594: PUSH
68595: LD_INT 3
68597: PLUS
68598: PUSH
68599: LD_VAR 0 2
68603: PUSH
68604: LD_INT 3
68606: PLUS
68607: PUSH
68608: LD_INT 5
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: LIST
68615: PUSH
68616: LD_VAR 0 1
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_INT 4
68628: PLUS
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// end ; 1 :
68645: GO 69345
68647: LD_INT 1
68649: DOUBLE
68650: EQUAL
68651: IFTRUE 68655
68653: GO 68788
68655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68656: LD_ADDR_VAR 0 5
68660: PUSH
68661: LD_VAR 0 1
68665: PUSH
68666: LD_VAR 0 2
68670: PUSH
68671: LD_INT 4
68673: MINUS
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: LIST
68682: PUSH
68683: LD_VAR 0 1
68687: PUSH
68688: LD_INT 3
68690: MINUS
68691: PUSH
68692: LD_VAR 0 2
68696: PUSH
68697: LD_INT 3
68699: MINUS
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: LIST
68708: PUSH
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 4
68716: MINUS
68717: PUSH
68718: LD_VAR 0 2
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: LIST
68730: PUSH
68731: LD_VAR 0 1
68735: PUSH
68736: LD_VAR 0 2
68740: PUSH
68741: LD_INT 3
68743: PLUS
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: PUSH
68753: LD_VAR 0 1
68757: PUSH
68758: LD_INT 4
68760: PLUS
68761: PUSH
68762: LD_VAR 0 2
68766: PUSH
68767: LD_INT 4
68769: PLUS
68770: PUSH
68771: LD_INT 5
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: ST_TO_ADDR
// end ; 2 :
68786: GO 69345
68788: LD_INT 2
68790: DOUBLE
68791: EQUAL
68792: IFTRUE 68796
68794: GO 68925
68796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68797: LD_ADDR_VAR 0 5
68801: PUSH
68802: LD_VAR 0 1
68806: PUSH
68807: LD_VAR 0 2
68811: PUSH
68812: LD_INT 3
68814: MINUS
68815: PUSH
68816: LD_INT 3
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: LIST
68823: PUSH
68824: LD_VAR 0 1
68828: PUSH
68829: LD_INT 4
68831: PLUS
68832: PUSH
68833: LD_VAR 0 2
68837: PUSH
68838: LD_INT 4
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: PUSH
68846: LD_VAR 0 1
68850: PUSH
68851: LD_VAR 0 2
68855: PUSH
68856: LD_INT 4
68858: PLUS
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: LD_INT 3
68875: MINUS
68876: PUSH
68877: LD_VAR 0 2
68881: PUSH
68882: LD_INT 1
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: PUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 4
68897: MINUS
68898: PUSH
68899: LD_VAR 0 2
68903: PUSH
68904: LD_INT 4
68906: MINUS
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// end ; 3 :
68923: GO 69345
68925: LD_INT 3
68927: DOUBLE
68928: EQUAL
68929: IFTRUE 68933
68931: GO 69066
68933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68934: LD_ADDR_VAR 0 5
68938: PUSH
68939: LD_VAR 0 1
68943: PUSH
68944: LD_INT 3
68946: PLUS
68947: PUSH
68948: LD_VAR 0 2
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: PUSH
68961: LD_VAR 0 1
68965: PUSH
68966: LD_INT 4
68968: PLUS
68969: PUSH
68970: LD_VAR 0 2
68974: PUSH
68975: LD_INT 4
68977: PLUS
68978: PUSH
68979: LD_INT 5
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: LIST
68986: PUSH
68987: LD_VAR 0 1
68991: PUSH
68992: LD_INT 4
68994: MINUS
68995: PUSH
68996: LD_VAR 0 2
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: LD_VAR 0 2
69018: PUSH
69019: LD_INT 4
69021: MINUS
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_INT 3
69038: MINUS
69039: PUSH
69040: LD_VAR 0 2
69044: PUSH
69045: LD_INT 3
69047: MINUS
69048: PUSH
69049: LD_INT 2
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: ST_TO_ADDR
// end ; 4 :
69064: GO 69345
69066: LD_INT 4
69068: DOUBLE
69069: EQUAL
69070: IFTRUE 69074
69072: GO 69207
69074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69075: LD_ADDR_VAR 0 5
69079: PUSH
69080: LD_VAR 0 1
69084: PUSH
69085: LD_VAR 0 2
69089: PUSH
69090: LD_INT 4
69092: PLUS
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: LD_INT 3
69109: PLUS
69110: PUSH
69111: LD_VAR 0 2
69115: PUSH
69116: LD_INT 3
69118: PLUS
69119: PUSH
69120: LD_INT 5
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: PUSH
69128: LD_VAR 0 1
69132: PUSH
69133: LD_INT 4
69135: PLUS
69136: PUSH
69137: LD_VAR 0 2
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: LIST
69149: PUSH
69150: LD_VAR 0 1
69154: PUSH
69155: LD_VAR 0 2
69159: PUSH
69160: LD_INT 3
69162: MINUS
69163: PUSH
69164: LD_INT 3
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: PUSH
69172: LD_VAR 0 1
69176: PUSH
69177: LD_INT 4
69179: MINUS
69180: PUSH
69181: LD_VAR 0 2
69185: PUSH
69186: LD_INT 4
69188: MINUS
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: ST_TO_ADDR
// end ; 5 :
69205: GO 69345
69207: LD_INT 5
69209: DOUBLE
69210: EQUAL
69211: IFTRUE 69215
69213: GO 69344
69215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69216: LD_ADDR_VAR 0 5
69220: PUSH
69221: LD_VAR 0 1
69225: PUSH
69226: LD_INT 4
69228: MINUS
69229: PUSH
69230: LD_VAR 0 2
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: LIST
69242: PUSH
69243: LD_VAR 0 1
69247: PUSH
69248: LD_VAR 0 2
69252: PUSH
69253: LD_INT 4
69255: MINUS
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: PUSH
69265: LD_VAR 0 1
69269: PUSH
69270: LD_INT 4
69272: PLUS
69273: PUSH
69274: LD_VAR 0 2
69278: PUSH
69279: LD_INT 4
69281: PLUS
69282: PUSH
69283: LD_INT 5
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: PUSH
69291: LD_VAR 0 1
69295: PUSH
69296: LD_INT 3
69298: PLUS
69299: PUSH
69300: LD_VAR 0 2
69304: PUSH
69305: LD_INT 4
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_VAR 0 2
69322: PUSH
69323: LD_INT 3
69325: PLUS
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: ST_TO_ADDR
// end ; end ;
69342: GO 69345
69344: POP
// result := list ;
69345: LD_ADDR_VAR 0 4
69349: PUSH
69350: LD_VAR 0 5
69354: ST_TO_ADDR
// end ;
69355: LD_VAR 0 4
69359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
69364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69365: LD_VAR 0 1
69369: NOT
69370: PUSH
69371: LD_VAR 0 2
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: LD_INT 2
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: IN
69394: NOT
69395: OR
69396: IFFALSE 69400
// exit ;
69398: GO 69492
// tmp := [ ] ;
69400: LD_ADDR_VAR 0 5
69404: PUSH
69405: EMPTY
69406: ST_TO_ADDR
// for i in units do
69407: LD_ADDR_VAR 0 4
69411: PUSH
69412: LD_VAR 0 1
69416: PUSH
69417: FOR_IN
69418: IFFALSE 69461
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69420: LD_ADDR_VAR 0 5
69424: PUSH
69425: LD_VAR 0 5
69429: PPUSH
69430: LD_VAR 0 5
69434: PUSH
69435: LD_INT 1
69437: PLUS
69438: PPUSH
69439: LD_VAR 0 4
69443: PPUSH
69444: LD_VAR 0 2
69448: PPUSH
69449: CALL_OW 259
69453: PPUSH
69454: CALL_OW 2
69458: ST_TO_ADDR
69459: GO 69417
69461: POP
69462: POP
// if not tmp then
69463: LD_VAR 0 5
69467: NOT
69468: IFFALSE 69472
// exit ;
69470: GO 69492
// result := SortListByListDesc ( units , tmp ) ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: LD_VAR 0 5
69486: PPUSH
69487: CALL_OW 77
69491: ST_TO_ADDR
// end ;
69492: LD_VAR 0 3
69496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69497: LD_INT 0
69499: PPUSH
69500: PPUSH
69501: PPUSH
// result := false ;
69502: LD_ADDR_VAR 0 3
69506: PUSH
69507: LD_INT 0
69509: ST_TO_ADDR
// x := GetX ( building ) ;
69510: LD_ADDR_VAR 0 4
69514: PUSH
69515: LD_VAR 0 2
69519: PPUSH
69520: CALL_OW 250
69524: ST_TO_ADDR
// y := GetY ( building ) ;
69525: LD_ADDR_VAR 0 5
69529: PUSH
69530: LD_VAR 0 2
69534: PPUSH
69535: CALL_OW 251
69539: ST_TO_ADDR
// if not building or not x or not y then
69540: LD_VAR 0 2
69544: NOT
69545: PUSH
69546: LD_VAR 0 4
69550: NOT
69551: OR
69552: PUSH
69553: LD_VAR 0 5
69557: NOT
69558: OR
69559: IFFALSE 69563
// exit ;
69561: GO 69655
// if GetTaskList ( unit ) then
69563: LD_VAR 0 1
69567: PPUSH
69568: CALL_OW 437
69572: IFFALSE 69655
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69574: LD_STRING e
69576: PUSH
69577: LD_VAR 0 1
69581: PPUSH
69582: CALL_OW 437
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PUSH
69591: LD_INT 1
69593: ARRAY
69594: EQUAL
69595: PUSH
69596: LD_VAR 0 4
69600: PUSH
69601: LD_VAR 0 1
69605: PPUSH
69606: CALL_OW 437
69610: PUSH
69611: LD_INT 1
69613: ARRAY
69614: PUSH
69615: LD_INT 2
69617: ARRAY
69618: EQUAL
69619: AND
69620: PUSH
69621: LD_VAR 0 5
69625: PUSH
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL_OW 437
69635: PUSH
69636: LD_INT 1
69638: ARRAY
69639: PUSH
69640: LD_INT 3
69642: ARRAY
69643: EQUAL
69644: AND
69645: IFFALSE 69655
// result := true end ;
69647: LD_ADDR_VAR 0 3
69651: PUSH
69652: LD_INT 1
69654: ST_TO_ADDR
// end ;
69655: LD_VAR 0 3
69659: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69660: LD_INT 0
69662: PPUSH
// result := false ;
69663: LD_ADDR_VAR 0 4
69667: PUSH
69668: LD_INT 0
69670: ST_TO_ADDR
// if GetTaskList ( unit ) then
69671: LD_VAR 0 1
69675: PPUSH
69676: CALL_OW 437
69680: IFFALSE 69763
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69682: LD_STRING M
69684: PUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 437
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PUSH
69699: LD_INT 1
69701: ARRAY
69702: EQUAL
69703: PUSH
69704: LD_VAR 0 2
69708: PUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 437
69718: PUSH
69719: LD_INT 1
69721: ARRAY
69722: PUSH
69723: LD_INT 2
69725: ARRAY
69726: EQUAL
69727: AND
69728: PUSH
69729: LD_VAR 0 3
69733: PUSH
69734: LD_VAR 0 1
69738: PPUSH
69739: CALL_OW 437
69743: PUSH
69744: LD_INT 1
69746: ARRAY
69747: PUSH
69748: LD_INT 3
69750: ARRAY
69751: EQUAL
69752: AND
69753: IFFALSE 69763
// result := true ;
69755: LD_ADDR_VAR 0 4
69759: PUSH
69760: LD_INT 1
69762: ST_TO_ADDR
// end ; end ;
69763: LD_VAR 0 4
69767: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69768: LD_INT 0
69770: PPUSH
69771: PPUSH
69772: PPUSH
69773: PPUSH
// if not unit or not area then
69774: LD_VAR 0 1
69778: NOT
69779: PUSH
69780: LD_VAR 0 2
69784: NOT
69785: OR
69786: IFFALSE 69790
// exit ;
69788: GO 69954
// tmp := AreaToList ( area , i ) ;
69790: LD_ADDR_VAR 0 6
69794: PUSH
69795: LD_VAR 0 2
69799: PPUSH
69800: LD_VAR 0 5
69804: PPUSH
69805: CALL_OW 517
69809: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69810: LD_ADDR_VAR 0 5
69814: PUSH
69815: DOUBLE
69816: LD_INT 1
69818: DEC
69819: ST_TO_ADDR
69820: LD_VAR 0 6
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: FOR_TO
69830: IFFALSE 69952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69832: LD_ADDR_VAR 0 7
69836: PUSH
69837: LD_VAR 0 6
69841: PUSH
69842: LD_INT 1
69844: ARRAY
69845: PUSH
69846: LD_VAR 0 5
69850: ARRAY
69851: PUSH
69852: LD_VAR 0 6
69856: PUSH
69857: LD_INT 2
69859: ARRAY
69860: PUSH
69861: LD_VAR 0 5
69865: ARRAY
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69871: LD_VAR 0 7
69875: PUSH
69876: LD_INT 1
69878: ARRAY
69879: PPUSH
69880: LD_VAR 0 7
69884: PUSH
69885: LD_INT 2
69887: ARRAY
69888: PPUSH
69889: CALL_OW 428
69893: PUSH
69894: LD_INT 0
69896: EQUAL
69897: IFFALSE 69950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69899: LD_VAR 0 1
69903: PPUSH
69904: LD_VAR 0 7
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PPUSH
69913: LD_VAR 0 7
69917: PUSH
69918: LD_INT 2
69920: ARRAY
69921: PPUSH
69922: LD_VAR 0 3
69926: PPUSH
69927: CALL_OW 48
// result := IsPlaced ( unit ) ;
69931: LD_ADDR_VAR 0 4
69935: PUSH
69936: LD_VAR 0 1
69940: PPUSH
69941: CALL_OW 305
69945: ST_TO_ADDR
// exit ;
69946: POP
69947: POP
69948: GO 69954
// end ; end ;
69950: GO 69829
69952: POP
69953: POP
// end ;
69954: LD_VAR 0 4
69958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69959: LD_INT 0
69961: PPUSH
69962: PPUSH
69963: PPUSH
// if not side or side > 8 then
69964: LD_VAR 0 1
69968: NOT
69969: PUSH
69970: LD_VAR 0 1
69974: PUSH
69975: LD_INT 8
69977: GREATER
69978: OR
69979: IFFALSE 69983
// exit ;
69981: GO 70170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69983: LD_ADDR_VAR 0 4
69987: PUSH
69988: LD_INT 22
69990: PUSH
69991: LD_VAR 0 1
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 21
70002: PUSH
70003: LD_INT 3
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PPUSH
70014: CALL_OW 69
70018: ST_TO_ADDR
// if not tmp then
70019: LD_VAR 0 4
70023: NOT
70024: IFFALSE 70028
// exit ;
70026: GO 70170
// enable_addtolog := true ;
70028: LD_ADDR_OWVAR 81
70032: PUSH
70033: LD_INT 1
70035: ST_TO_ADDR
// AddToLog ( [ ) ;
70036: LD_STRING [
70038: PPUSH
70039: CALL_OW 561
// for i in tmp do
70043: LD_ADDR_VAR 0 3
70047: PUSH
70048: LD_VAR 0 4
70052: PUSH
70053: FOR_IN
70054: IFFALSE 70161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70056: LD_STRING [
70058: PUSH
70059: LD_VAR 0 3
70063: PPUSH
70064: CALL_OW 266
70068: STR
70069: PUSH
70070: LD_STRING , 
70072: STR
70073: PUSH
70074: LD_VAR 0 3
70078: PPUSH
70079: CALL_OW 250
70083: STR
70084: PUSH
70085: LD_STRING , 
70087: STR
70088: PUSH
70089: LD_VAR 0 3
70093: PPUSH
70094: CALL_OW 251
70098: STR
70099: PUSH
70100: LD_STRING , 
70102: STR
70103: PUSH
70104: LD_VAR 0 3
70108: PPUSH
70109: CALL_OW 254
70113: STR
70114: PUSH
70115: LD_STRING , 
70117: STR
70118: PUSH
70119: LD_VAR 0 3
70123: PPUSH
70124: LD_INT 1
70126: PPUSH
70127: CALL_OW 268
70131: STR
70132: PUSH
70133: LD_STRING , 
70135: STR
70136: PUSH
70137: LD_VAR 0 3
70141: PPUSH
70142: LD_INT 2
70144: PPUSH
70145: CALL_OW 268
70149: STR
70150: PUSH
70151: LD_STRING ],
70153: STR
70154: PPUSH
70155: CALL_OW 561
// end ;
70159: GO 70053
70161: POP
70162: POP
// AddToLog ( ]; ) ;
70163: LD_STRING ];
70165: PPUSH
70166: CALL_OW 561
// end ;
70170: LD_VAR 0 2
70174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70175: LD_INT 0
70177: PPUSH
70178: PPUSH
70179: PPUSH
70180: PPUSH
70181: PPUSH
// if not area or not rate or not max then
70182: LD_VAR 0 1
70186: NOT
70187: PUSH
70188: LD_VAR 0 2
70192: NOT
70193: OR
70194: PUSH
70195: LD_VAR 0 4
70199: NOT
70200: OR
70201: IFFALSE 70205
// exit ;
70203: GO 70394
// while 1 do
70205: LD_INT 1
70207: IFFALSE 70394
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70209: LD_ADDR_VAR 0 9
70213: PUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: LD_INT 1
70221: PPUSH
70222: CALL_OW 287
70226: PUSH
70227: LD_INT 10
70229: MUL
70230: ST_TO_ADDR
// r := rate / 10 ;
70231: LD_ADDR_VAR 0 7
70235: PUSH
70236: LD_VAR 0 2
70240: PUSH
70241: LD_INT 10
70243: DIVREAL
70244: ST_TO_ADDR
// time := 1 1$00 ;
70245: LD_ADDR_VAR 0 8
70249: PUSH
70250: LD_INT 2100
70252: ST_TO_ADDR
// if amount < min then
70253: LD_VAR 0 9
70257: PUSH
70258: LD_VAR 0 3
70262: LESS
70263: IFFALSE 70281
// r := r * 2 else
70265: LD_ADDR_VAR 0 7
70269: PUSH
70270: LD_VAR 0 7
70274: PUSH
70275: LD_INT 2
70277: MUL
70278: ST_TO_ADDR
70279: GO 70307
// if amount > max then
70281: LD_VAR 0 9
70285: PUSH
70286: LD_VAR 0 4
70290: GREATER
70291: IFFALSE 70307
// r := r / 2 ;
70293: LD_ADDR_VAR 0 7
70297: PUSH
70298: LD_VAR 0 7
70302: PUSH
70303: LD_INT 2
70305: DIVREAL
70306: ST_TO_ADDR
// time := time / r ;
70307: LD_ADDR_VAR 0 8
70311: PUSH
70312: LD_VAR 0 8
70316: PUSH
70317: LD_VAR 0 7
70321: DIVREAL
70322: ST_TO_ADDR
// if time < 0 then
70323: LD_VAR 0 8
70327: PUSH
70328: LD_INT 0
70330: LESS
70331: IFFALSE 70348
// time := time * - 1 ;
70333: LD_ADDR_VAR 0 8
70337: PUSH
70338: LD_VAR 0 8
70342: PUSH
70343: LD_INT 1
70345: NEG
70346: MUL
70347: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70348: LD_VAR 0 8
70352: PUSH
70353: LD_INT 35
70355: PPUSH
70356: LD_INT 875
70358: PPUSH
70359: CALL_OW 12
70363: PLUS
70364: PPUSH
70365: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70369: LD_INT 1
70371: PPUSH
70372: LD_INT 5
70374: PPUSH
70375: CALL_OW 12
70379: PPUSH
70380: LD_VAR 0 1
70384: PPUSH
70385: LD_INT 1
70387: PPUSH
70388: CALL_OW 55
// end ;
70392: GO 70205
// end ;
70394: LD_VAR 0 5
70398: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70399: LD_INT 0
70401: PPUSH
70402: PPUSH
70403: PPUSH
70404: PPUSH
70405: PPUSH
70406: PPUSH
70407: PPUSH
70408: PPUSH
// if not turrets or not factories then
70409: LD_VAR 0 1
70413: NOT
70414: PUSH
70415: LD_VAR 0 2
70419: NOT
70420: OR
70421: IFFALSE 70425
// exit ;
70423: GO 70732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70425: LD_ADDR_VAR 0 10
70429: PUSH
70430: LD_INT 5
70432: PUSH
70433: LD_INT 6
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 3
70452: PUSH
70453: LD_INT 5
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 24
70467: PUSH
70468: LD_INT 25
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 23
70477: PUSH
70478: LD_INT 27
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 42
70491: PUSH
70492: LD_INT 43
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 44
70501: PUSH
70502: LD_INT 46
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 45
70511: PUSH
70512: LD_INT 47
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: ST_TO_ADDR
// result := [ ] ;
70529: LD_ADDR_VAR 0 3
70533: PUSH
70534: EMPTY
70535: ST_TO_ADDR
// for i in turrets do
70536: LD_ADDR_VAR 0 4
70540: PUSH
70541: LD_VAR 0 1
70545: PUSH
70546: FOR_IN
70547: IFFALSE 70730
// begin nat := GetNation ( i ) ;
70549: LD_ADDR_VAR 0 7
70553: PUSH
70554: LD_VAR 0 4
70558: PPUSH
70559: CALL_OW 248
70563: ST_TO_ADDR
// weapon := 0 ;
70564: LD_ADDR_VAR 0 8
70568: PUSH
70569: LD_INT 0
70571: ST_TO_ADDR
// if not nat then
70572: LD_VAR 0 7
70576: NOT
70577: IFFALSE 70581
// continue ;
70579: GO 70546
// for j in list [ nat ] do
70581: LD_ADDR_VAR 0 5
70585: PUSH
70586: LD_VAR 0 10
70590: PUSH
70591: LD_VAR 0 7
70595: ARRAY
70596: PUSH
70597: FOR_IN
70598: IFFALSE 70639
// if GetBWeapon ( i ) = j [ 1 ] then
70600: LD_VAR 0 4
70604: PPUSH
70605: CALL_OW 269
70609: PUSH
70610: LD_VAR 0 5
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: EQUAL
70619: IFFALSE 70637
// begin weapon := j [ 2 ] ;
70621: LD_ADDR_VAR 0 8
70625: PUSH
70626: LD_VAR 0 5
70630: PUSH
70631: LD_INT 2
70633: ARRAY
70634: ST_TO_ADDR
// break ;
70635: GO 70639
// end ;
70637: GO 70597
70639: POP
70640: POP
// if not weapon then
70641: LD_VAR 0 8
70645: NOT
70646: IFFALSE 70650
// continue ;
70648: GO 70546
// for k in factories do
70650: LD_ADDR_VAR 0 6
70654: PUSH
70655: LD_VAR 0 2
70659: PUSH
70660: FOR_IN
70661: IFFALSE 70726
// begin weapons := AvailableWeaponList ( k ) ;
70663: LD_ADDR_VAR 0 9
70667: PUSH
70668: LD_VAR 0 6
70672: PPUSH
70673: CALL_OW 478
70677: ST_TO_ADDR
// if not weapons then
70678: LD_VAR 0 9
70682: NOT
70683: IFFALSE 70687
// continue ;
70685: GO 70660
// if weapon in weapons then
70687: LD_VAR 0 8
70691: PUSH
70692: LD_VAR 0 9
70696: IN
70697: IFFALSE 70724
// begin result := [ i , weapon ] ;
70699: LD_ADDR_VAR 0 3
70703: PUSH
70704: LD_VAR 0 4
70708: PUSH
70709: LD_VAR 0 8
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: ST_TO_ADDR
// exit ;
70718: POP
70719: POP
70720: POP
70721: POP
70722: GO 70732
// end ; end ;
70724: GO 70660
70726: POP
70727: POP
// end ;
70728: GO 70546
70730: POP
70731: POP
// end ;
70732: LD_VAR 0 3
70736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70737: LD_INT 0
70739: PPUSH
// if not side or side > 8 then
70740: LD_VAR 0 3
70744: NOT
70745: PUSH
70746: LD_VAR 0 3
70750: PUSH
70751: LD_INT 8
70753: GREATER
70754: OR
70755: IFFALSE 70759
// exit ;
70757: GO 70818
// if not range then
70759: LD_VAR 0 4
70763: NOT
70764: IFFALSE 70775
// range := - 12 ;
70766: LD_ADDR_VAR 0 4
70770: PUSH
70771: LD_INT 12
70773: NEG
70774: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70775: LD_VAR 0 1
70779: PPUSH
70780: LD_VAR 0 2
70784: PPUSH
70785: LD_VAR 0 3
70789: PPUSH
70790: LD_VAR 0 4
70794: PPUSH
70795: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70799: LD_VAR 0 1
70803: PPUSH
70804: LD_VAR 0 2
70808: PPUSH
70809: LD_VAR 0 3
70813: PPUSH
70814: CALL_OW 331
// end ;
70818: LD_VAR 0 5
70822: RET
// export function Video ( mode ) ; begin
70823: LD_INT 0
70825: PPUSH
// ingame_video = mode ;
70826: LD_ADDR_OWVAR 52
70830: PUSH
70831: LD_VAR 0 1
70835: ST_TO_ADDR
// interface_hidden = mode ;
70836: LD_ADDR_OWVAR 54
70840: PUSH
70841: LD_VAR 0 1
70845: ST_TO_ADDR
// end ;
70846: LD_VAR 0 2
70850: RET
// export function Join ( array , element ) ; begin
70851: LD_INT 0
70853: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70854: LD_ADDR_VAR 0 3
70858: PUSH
70859: LD_VAR 0 1
70863: PPUSH
70864: LD_VAR 0 1
70868: PUSH
70869: LD_INT 1
70871: PLUS
70872: PPUSH
70873: LD_VAR 0 2
70877: PPUSH
70878: CALL_OW 1
70882: ST_TO_ADDR
// end ;
70883: LD_VAR 0 3
70887: RET
// export function JoinUnion ( array , element ) ; begin
70888: LD_INT 0
70890: PPUSH
// result := array union element ;
70891: LD_ADDR_VAR 0 3
70895: PUSH
70896: LD_VAR 0 1
70900: PUSH
70901: LD_VAR 0 2
70905: UNION
70906: ST_TO_ADDR
// end ;
70907: LD_VAR 0 3
70911: RET
// export function GetBehemoths ( side ) ; begin
70912: LD_INT 0
70914: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70915: LD_ADDR_VAR 0 2
70919: PUSH
70920: LD_INT 22
70922: PUSH
70923: LD_VAR 0 1
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 31
70934: PUSH
70935: LD_INT 25
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PPUSH
70946: CALL_OW 69
70950: ST_TO_ADDR
// end ;
70951: LD_VAR 0 2
70955: RET
// export function Shuffle ( array ) ; var i , index ; begin
70956: LD_INT 0
70958: PPUSH
70959: PPUSH
70960: PPUSH
// result := [ ] ;
70961: LD_ADDR_VAR 0 2
70965: PUSH
70966: EMPTY
70967: ST_TO_ADDR
// if not array then
70968: LD_VAR 0 1
70972: NOT
70973: IFFALSE 70977
// exit ;
70975: GO 71076
// Randomize ;
70977: CALL_OW 10
// for i = array downto 1 do
70981: LD_ADDR_VAR 0 3
70985: PUSH
70986: DOUBLE
70987: LD_VAR 0 1
70991: INC
70992: ST_TO_ADDR
70993: LD_INT 1
70995: PUSH
70996: FOR_DOWNTO
70997: IFFALSE 71074
// begin index := rand ( 1 , array ) ;
70999: LD_ADDR_VAR 0 4
71003: PUSH
71004: LD_INT 1
71006: PPUSH
71007: LD_VAR 0 1
71011: PPUSH
71012: CALL_OW 12
71016: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71017: LD_ADDR_VAR 0 2
71021: PUSH
71022: LD_VAR 0 2
71026: PPUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 1
71034: PLUS
71035: PPUSH
71036: LD_VAR 0 1
71040: PUSH
71041: LD_VAR 0 4
71045: ARRAY
71046: PPUSH
71047: CALL_OW 2
71051: ST_TO_ADDR
// array := Delete ( array , index ) ;
71052: LD_ADDR_VAR 0 1
71056: PUSH
71057: LD_VAR 0 1
71061: PPUSH
71062: LD_VAR 0 4
71066: PPUSH
71067: CALL_OW 3
71071: ST_TO_ADDR
// end ;
71072: GO 70996
71074: POP
71075: POP
// end ;
71076: LD_VAR 0 2
71080: RET
// export function GetBaseMaterials ( base ) ; begin
71081: LD_INT 0
71083: PPUSH
// result := [ 0 , 0 , 0 ] ;
71084: LD_ADDR_VAR 0 2
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: LIST
71102: ST_TO_ADDR
// if not base then
71103: LD_VAR 0 1
71107: NOT
71108: IFFALSE 71112
// exit ;
71110: GO 71161
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71112: LD_ADDR_VAR 0 2
71116: PUSH
71117: LD_VAR 0 1
71121: PPUSH
71122: LD_INT 1
71124: PPUSH
71125: CALL_OW 275
71129: PUSH
71130: LD_VAR 0 1
71134: PPUSH
71135: LD_INT 2
71137: PPUSH
71138: CALL_OW 275
71142: PUSH
71143: LD_VAR 0 1
71147: PPUSH
71148: LD_INT 3
71150: PPUSH
71151: CALL_OW 275
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: ST_TO_ADDR
// end ;
71161: LD_VAR 0 2
71165: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71166: LD_INT 0
71168: PPUSH
71169: PPUSH
// result := array ;
71170: LD_ADDR_VAR 0 3
71174: PUSH
71175: LD_VAR 0 1
71179: ST_TO_ADDR
// if size > 0 then
71180: LD_VAR 0 2
71184: PUSH
71185: LD_INT 0
71187: GREATER
71188: IFFALSE 71234
// for i := array downto size do
71190: LD_ADDR_VAR 0 4
71194: PUSH
71195: DOUBLE
71196: LD_VAR 0 1
71200: INC
71201: ST_TO_ADDR
71202: LD_VAR 0 2
71206: PUSH
71207: FOR_DOWNTO
71208: IFFALSE 71232
// result := Delete ( result , result ) ;
71210: LD_ADDR_VAR 0 3
71214: PUSH
71215: LD_VAR 0 3
71219: PPUSH
71220: LD_VAR 0 3
71224: PPUSH
71225: CALL_OW 3
71229: ST_TO_ADDR
71230: GO 71207
71232: POP
71233: POP
// end ;
71234: LD_VAR 0 3
71238: RET
// export function ComExit ( unit ) ; var tmp ; begin
71239: LD_INT 0
71241: PPUSH
71242: PPUSH
// if not IsInUnit ( unit ) then
71243: LD_VAR 0 1
71247: PPUSH
71248: CALL_OW 310
71252: NOT
71253: IFFALSE 71257
// exit ;
71255: GO 71317
// tmp := IsInUnit ( unit ) ;
71257: LD_ADDR_VAR 0 3
71261: PUSH
71262: LD_VAR 0 1
71266: PPUSH
71267: CALL_OW 310
71271: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71272: LD_VAR 0 3
71276: PPUSH
71277: CALL_OW 247
71281: PUSH
71282: LD_INT 2
71284: EQUAL
71285: IFFALSE 71298
// ComExitVehicle ( unit ) else
71287: LD_VAR 0 1
71291: PPUSH
71292: CALL_OW 121
71296: GO 71307
// ComExitBuilding ( unit ) ;
71298: LD_VAR 0 1
71302: PPUSH
71303: CALL_OW 122
// result := tmp ;
71307: LD_ADDR_VAR 0 2
71311: PUSH
71312: LD_VAR 0 3
71316: ST_TO_ADDR
// end ;
71317: LD_VAR 0 2
71321: RET
// export function ComExitAll ( units ) ; var i ; begin
71322: LD_INT 0
71324: PPUSH
71325: PPUSH
// if not units then
71326: LD_VAR 0 1
71330: NOT
71331: IFFALSE 71335
// exit ;
71333: GO 71361
// for i in units do
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_VAR 0 1
71344: PUSH
71345: FOR_IN
71346: IFFALSE 71359
// ComExit ( i ) ;
71348: LD_VAR 0 3
71352: PPUSH
71353: CALL 71239 0 1
71357: GO 71345
71359: POP
71360: POP
// end ;
71361: LD_VAR 0 2
71365: RET
// export function ResetHc ; begin
71366: LD_INT 0
71368: PPUSH
// InitHc ;
71369: CALL_OW 19
// hc_importance := 0 ;
71373: LD_ADDR_OWVAR 32
71377: PUSH
71378: LD_INT 0
71380: ST_TO_ADDR
// end ;
71381: LD_VAR 0 1
71385: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71386: LD_INT 0
71388: PPUSH
71389: PPUSH
71390: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71391: LD_ADDR_VAR 0 6
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_VAR 0 3
71405: PLUS
71406: PUSH
71407: LD_INT 2
71409: DIV
71410: ST_TO_ADDR
// if _x < 0 then
71411: LD_VAR 0 6
71415: PUSH
71416: LD_INT 0
71418: LESS
71419: IFFALSE 71436
// _x := _x * - 1 ;
71421: LD_ADDR_VAR 0 6
71425: PUSH
71426: LD_VAR 0 6
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: MUL
71435: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71436: LD_ADDR_VAR 0 7
71440: PUSH
71441: LD_VAR 0 2
71445: PUSH
71446: LD_VAR 0 4
71450: PLUS
71451: PUSH
71452: LD_INT 2
71454: DIV
71455: ST_TO_ADDR
// if _y < 0 then
71456: LD_VAR 0 7
71460: PUSH
71461: LD_INT 0
71463: LESS
71464: IFFALSE 71481
// _y := _y * - 1 ;
71466: LD_ADDR_VAR 0 7
71470: PUSH
71471: LD_VAR 0 7
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: MUL
71480: ST_TO_ADDR
// result := [ _x , _y ] ;
71481: LD_ADDR_VAR 0 5
71485: PUSH
71486: LD_VAR 0 6
71490: PUSH
71491: LD_VAR 0 7
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: ST_TO_ADDR
// end ;
71500: LD_VAR 0 5
71504: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71505: LD_INT 0
71507: PPUSH
71508: PPUSH
71509: PPUSH
71510: PPUSH
// task := GetTaskList ( unit ) ;
71511: LD_ADDR_VAR 0 7
71515: PUSH
71516: LD_VAR 0 1
71520: PPUSH
71521: CALL_OW 437
71525: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71526: LD_VAR 0 7
71530: NOT
71531: PUSH
71532: LD_VAR 0 1
71536: PPUSH
71537: LD_VAR 0 2
71541: PPUSH
71542: CALL_OW 308
71546: NOT
71547: AND
71548: IFFALSE 71552
// exit ;
71550: GO 71670
// if IsInArea ( unit , area ) then
71552: LD_VAR 0 1
71556: PPUSH
71557: LD_VAR 0 2
71561: PPUSH
71562: CALL_OW 308
71566: IFFALSE 71584
// begin ComMoveToArea ( unit , goAway ) ;
71568: LD_VAR 0 1
71572: PPUSH
71573: LD_VAR 0 3
71577: PPUSH
71578: CALL_OW 113
// exit ;
71582: GO 71670
// end ; if task [ 1 ] [ 1 ] <> M then
71584: LD_VAR 0 7
71588: PUSH
71589: LD_INT 1
71591: ARRAY
71592: PUSH
71593: LD_INT 1
71595: ARRAY
71596: PUSH
71597: LD_STRING M
71599: NONEQUAL
71600: IFFALSE 71604
// exit ;
71602: GO 71670
// x := task [ 1 ] [ 2 ] ;
71604: LD_ADDR_VAR 0 5
71608: PUSH
71609: LD_VAR 0 7
71613: PUSH
71614: LD_INT 1
71616: ARRAY
71617: PUSH
71618: LD_INT 2
71620: ARRAY
71621: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71622: LD_ADDR_VAR 0 6
71626: PUSH
71627: LD_VAR 0 7
71631: PUSH
71632: LD_INT 1
71634: ARRAY
71635: PUSH
71636: LD_INT 3
71638: ARRAY
71639: ST_TO_ADDR
// if InArea ( x , y , area ) then
71640: LD_VAR 0 5
71644: PPUSH
71645: LD_VAR 0 6
71649: PPUSH
71650: LD_VAR 0 2
71654: PPUSH
71655: CALL_OW 309
71659: IFFALSE 71670
// ComStop ( unit ) ;
71661: LD_VAR 0 1
71665: PPUSH
71666: CALL_OW 141
// end ;
71670: LD_VAR 0 4
71674: RET
// export function Abs ( value ) ; begin
71675: LD_INT 0
71677: PPUSH
// result := value ;
71678: LD_ADDR_VAR 0 2
71682: PUSH
71683: LD_VAR 0 1
71687: ST_TO_ADDR
// if value < 0 then
71688: LD_VAR 0 1
71692: PUSH
71693: LD_INT 0
71695: LESS
71696: IFFALSE 71713
// result := value * - 1 ;
71698: LD_ADDR_VAR 0 2
71702: PUSH
71703: LD_VAR 0 1
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: MUL
71712: ST_TO_ADDR
// end ;
71713: LD_VAR 0 2
71717: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71718: LD_INT 0
71720: PPUSH
71721: PPUSH
71722: PPUSH
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
// if not unit or not building then
71728: LD_VAR 0 1
71732: NOT
71733: PUSH
71734: LD_VAR 0 2
71738: NOT
71739: OR
71740: IFFALSE 71744
// exit ;
71742: GO 71970
// x := GetX ( building ) ;
71744: LD_ADDR_VAR 0 4
71748: PUSH
71749: LD_VAR 0 2
71753: PPUSH
71754: CALL_OW 250
71758: ST_TO_ADDR
// y := GetY ( building ) ;
71759: LD_ADDR_VAR 0 6
71763: PUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: CALL_OW 251
71773: ST_TO_ADDR
// d := GetDir ( building ) ;
71774: LD_ADDR_VAR 0 8
71778: PUSH
71779: LD_VAR 0 2
71783: PPUSH
71784: CALL_OW 254
71788: ST_TO_ADDR
// r := 4 ;
71789: LD_ADDR_VAR 0 9
71793: PUSH
71794: LD_INT 4
71796: ST_TO_ADDR
// for i := 1 to 5 do
71797: LD_ADDR_VAR 0 10
71801: PUSH
71802: DOUBLE
71803: LD_INT 1
71805: DEC
71806: ST_TO_ADDR
71807: LD_INT 5
71809: PUSH
71810: FOR_TO
71811: IFFALSE 71968
// begin _x := ShiftX ( x , d , r + i ) ;
71813: LD_ADDR_VAR 0 5
71817: PUSH
71818: LD_VAR 0 4
71822: PPUSH
71823: LD_VAR 0 8
71827: PPUSH
71828: LD_VAR 0 9
71832: PUSH
71833: LD_VAR 0 10
71837: PLUS
71838: PPUSH
71839: CALL_OW 272
71843: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71844: LD_ADDR_VAR 0 7
71848: PUSH
71849: LD_VAR 0 6
71853: PPUSH
71854: LD_VAR 0 8
71858: PPUSH
71859: LD_VAR 0 9
71863: PUSH
71864: LD_VAR 0 10
71868: PLUS
71869: PPUSH
71870: CALL_OW 273
71874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71875: LD_VAR 0 5
71879: PPUSH
71880: LD_VAR 0 7
71884: PPUSH
71885: CALL_OW 488
71889: PUSH
71890: LD_VAR 0 5
71894: PPUSH
71895: LD_VAR 0 7
71899: PPUSH
71900: CALL_OW 428
71904: PPUSH
71905: CALL_OW 247
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: LD_INT 2
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: IN
71920: NOT
71921: AND
71922: IFFALSE 71966
// begin ComMoveXY ( unit , _x , _y ) ;
71924: LD_VAR 0 1
71928: PPUSH
71929: LD_VAR 0 5
71933: PPUSH
71934: LD_VAR 0 7
71938: PPUSH
71939: CALL_OW 111
// result := [ _x , _y ] ;
71943: LD_ADDR_VAR 0 3
71947: PUSH
71948: LD_VAR 0 5
71952: PUSH
71953: LD_VAR 0 7
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: ST_TO_ADDR
// exit ;
71962: POP
71963: POP
71964: GO 71970
// end ; end ;
71966: GO 71810
71968: POP
71969: POP
// end ;
71970: LD_VAR 0 3
71974: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
71979: PPUSH
// result := 0 ;
71980: LD_ADDR_VAR 0 3
71984: PUSH
71985: LD_INT 0
71987: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71988: LD_VAR 0 1
71992: PUSH
71993: LD_INT 0
71995: LESS
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_INT 8
72004: GREATER
72005: OR
72006: PUSH
72007: LD_VAR 0 2
72011: PUSH
72012: LD_INT 0
72014: LESS
72015: OR
72016: PUSH
72017: LD_VAR 0 2
72021: PUSH
72022: LD_INT 8
72024: GREATER
72025: OR
72026: IFFALSE 72030
// exit ;
72028: GO 72105
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72030: LD_ADDR_VAR 0 4
72034: PUSH
72035: LD_INT 22
72037: PUSH
72038: LD_VAR 0 2
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PPUSH
72047: CALL_OW 69
72051: PUSH
72052: FOR_IN
72053: IFFALSE 72103
// begin un := UnitShoot ( i ) ;
72055: LD_ADDR_VAR 0 5
72059: PUSH
72060: LD_VAR 0 4
72064: PPUSH
72065: CALL_OW 504
72069: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72070: LD_VAR 0 5
72074: PPUSH
72075: CALL_OW 255
72079: PUSH
72080: LD_VAR 0 1
72084: EQUAL
72085: IFFALSE 72101
// begin result := un ;
72087: LD_ADDR_VAR 0 3
72091: PUSH
72092: LD_VAR 0 5
72096: ST_TO_ADDR
// exit ;
72097: POP
72098: POP
72099: GO 72105
// end ; end ;
72101: GO 72052
72103: POP
72104: POP
// end ;
72105: LD_VAR 0 3
72109: RET
// export function GetCargoBay ( units ) ; begin
72110: LD_INT 0
72112: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72113: LD_ADDR_VAR 0 2
72117: PUSH
72118: LD_VAR 0 1
72122: PPUSH
72123: LD_INT 2
72125: PUSH
72126: LD_INT 34
72128: PUSH
72129: LD_INT 12
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 34
72138: PUSH
72139: LD_INT 51
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 34
72148: PUSH
72149: LD_INT 32
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 34
72158: PUSH
72159: LD_EXP 130
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: PPUSH
72175: CALL_OW 72
72179: ST_TO_ADDR
// end ;
72180: LD_VAR 0 2
72184: RET
// export function Negate ( value ) ; begin
72185: LD_INT 0
72187: PPUSH
// result := not value ;
72188: LD_ADDR_VAR 0 2
72192: PUSH
72193: LD_VAR 0 1
72197: NOT
72198: ST_TO_ADDR
// end ;
72199: LD_VAR 0 2
72203: RET
// export function Inc ( value ) ; begin
72204: LD_INT 0
72206: PPUSH
// result := value + 1 ;
72207: LD_ADDR_VAR 0 2
72211: PUSH
72212: LD_VAR 0 1
72216: PUSH
72217: LD_INT 1
72219: PLUS
72220: ST_TO_ADDR
// end ;
72221: LD_VAR 0 2
72225: RET
// export function Dec ( value ) ; begin
72226: LD_INT 0
72228: PPUSH
// result := value - 1 ;
72229: LD_ADDR_VAR 0 2
72233: PUSH
72234: LD_VAR 0 1
72238: PUSH
72239: LD_INT 1
72241: MINUS
72242: ST_TO_ADDR
// end ;
72243: LD_VAR 0 2
72247: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72248: LD_INT 0
72250: PPUSH
72251: PPUSH
72252: PPUSH
72253: PPUSH
72254: PPUSH
72255: PPUSH
72256: PPUSH
72257: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72258: LD_VAR 0 1
72262: PPUSH
72263: LD_VAR 0 2
72267: PPUSH
72268: CALL_OW 488
72272: NOT
72273: PUSH
72274: LD_VAR 0 3
72278: PPUSH
72279: LD_VAR 0 4
72283: PPUSH
72284: CALL_OW 488
72288: NOT
72289: OR
72290: IFFALSE 72303
// begin result := - 1 ;
72292: LD_ADDR_VAR 0 5
72296: PUSH
72297: LD_INT 1
72299: NEG
72300: ST_TO_ADDR
// exit ;
72301: GO 72538
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72303: LD_ADDR_VAR 0 12
72307: PUSH
72308: LD_VAR 0 1
72312: PPUSH
72313: LD_VAR 0 2
72317: PPUSH
72318: LD_VAR 0 3
72322: PPUSH
72323: LD_VAR 0 4
72327: PPUSH
72328: CALL 71386 0 4
72332: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72333: LD_ADDR_VAR 0 11
72337: PUSH
72338: LD_VAR 0 1
72342: PPUSH
72343: LD_VAR 0 2
72347: PPUSH
72348: LD_VAR 0 12
72352: PUSH
72353: LD_INT 1
72355: ARRAY
72356: PPUSH
72357: LD_VAR 0 12
72361: PUSH
72362: LD_INT 2
72364: ARRAY
72365: PPUSH
72366: CALL_OW 298
72370: ST_TO_ADDR
// distance := 9999 ;
72371: LD_ADDR_VAR 0 10
72375: PUSH
72376: LD_INT 9999
72378: ST_TO_ADDR
// for i := 0 to 5 do
72379: LD_ADDR_VAR 0 6
72383: PUSH
72384: DOUBLE
72385: LD_INT 0
72387: DEC
72388: ST_TO_ADDR
72389: LD_INT 5
72391: PUSH
72392: FOR_TO
72393: IFFALSE 72536
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72395: LD_ADDR_VAR 0 7
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 6
72409: PPUSH
72410: LD_VAR 0 11
72414: PPUSH
72415: CALL_OW 272
72419: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72420: LD_ADDR_VAR 0 8
72424: PUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: LD_VAR 0 6
72434: PPUSH
72435: LD_VAR 0 11
72439: PPUSH
72440: CALL_OW 273
72444: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72445: LD_VAR 0 7
72449: PPUSH
72450: LD_VAR 0 8
72454: PPUSH
72455: CALL_OW 488
72459: NOT
72460: IFFALSE 72464
// continue ;
72462: GO 72392
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72464: LD_ADDR_VAR 0 9
72468: PUSH
72469: LD_VAR 0 12
72473: PUSH
72474: LD_INT 1
72476: ARRAY
72477: PPUSH
72478: LD_VAR 0 12
72482: PUSH
72483: LD_INT 2
72485: ARRAY
72486: PPUSH
72487: LD_VAR 0 7
72491: PPUSH
72492: LD_VAR 0 8
72496: PPUSH
72497: CALL_OW 298
72501: ST_TO_ADDR
// if tmp < distance then
72502: LD_VAR 0 9
72506: PUSH
72507: LD_VAR 0 10
72511: LESS
72512: IFFALSE 72534
// begin result := i ;
72514: LD_ADDR_VAR 0 5
72518: PUSH
72519: LD_VAR 0 6
72523: ST_TO_ADDR
// distance := tmp ;
72524: LD_ADDR_VAR 0 10
72528: PUSH
72529: LD_VAR 0 9
72533: ST_TO_ADDR
// end ; end ;
72534: GO 72392
72536: POP
72537: POP
// end ;
72538: LD_VAR 0 5
72542: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72543: LD_INT 0
72545: PPUSH
72546: PPUSH
// if not driver or not IsInUnit ( driver ) then
72547: LD_VAR 0 1
72551: NOT
72552: PUSH
72553: LD_VAR 0 1
72557: PPUSH
72558: CALL_OW 310
72562: NOT
72563: OR
72564: IFFALSE 72568
// exit ;
72566: GO 72658
// vehicle := IsInUnit ( driver ) ;
72568: LD_ADDR_VAR 0 3
72572: PUSH
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL_OW 310
72582: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72583: LD_VAR 0 1
72587: PPUSH
72588: LD_STRING \
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: PUSH
72618: LD_STRING E
72620: PUSH
72621: LD_INT 0
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: LD_VAR 0 3
72631: PUSH
72632: LD_INT 0
72634: PUSH
72635: LD_INT 0
72637: PUSH
72638: LD_INT 0
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PPUSH
72654: CALL_OW 446
// end ;
72658: LD_VAR 0 2
72662: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72663: LD_INT 0
72665: PPUSH
72666: PPUSH
// if not driver or not IsInUnit ( driver ) then
72667: LD_VAR 0 1
72671: NOT
72672: PUSH
72673: LD_VAR 0 1
72677: PPUSH
72678: CALL_OW 310
72682: NOT
72683: OR
72684: IFFALSE 72688
// exit ;
72686: GO 72778
// vehicle := IsInUnit ( driver ) ;
72688: LD_ADDR_VAR 0 3
72692: PUSH
72693: LD_VAR 0 1
72697: PPUSH
72698: CALL_OW 310
72702: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72703: LD_VAR 0 1
72707: PPUSH
72708: LD_STRING \
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: LD_INT 0
72719: PUSH
72720: LD_INT 0
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 0
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: PUSH
72738: LD_STRING E
72740: PUSH
72741: LD_INT 0
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_VAR 0 3
72751: PUSH
72752: LD_INT 0
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: LD_INT 0
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PPUSH
72774: CALL_OW 447
// end ;
72778: LD_VAR 0 2
72782: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72783: LD_INT 0
72785: PPUSH
72786: PPUSH
72787: PPUSH
// tmp := [ ] ;
72788: LD_ADDR_VAR 0 5
72792: PUSH
72793: EMPTY
72794: ST_TO_ADDR
// for i in units do
72795: LD_ADDR_VAR 0 4
72799: PUSH
72800: LD_VAR 0 1
72804: PUSH
72805: FOR_IN
72806: IFFALSE 72844
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72808: LD_ADDR_VAR 0 5
72812: PUSH
72813: LD_VAR 0 5
72817: PPUSH
72818: LD_VAR 0 5
72822: PUSH
72823: LD_INT 1
72825: PLUS
72826: PPUSH
72827: LD_VAR 0 4
72831: PPUSH
72832: CALL_OW 256
72836: PPUSH
72837: CALL_OW 2
72841: ST_TO_ADDR
72842: GO 72805
72844: POP
72845: POP
// if not tmp then
72846: LD_VAR 0 5
72850: NOT
72851: IFFALSE 72855
// exit ;
72853: GO 72903
// if asc then
72855: LD_VAR 0 2
72859: IFFALSE 72883
// result := SortListByListAsc ( units , tmp ) else
72861: LD_ADDR_VAR 0 3
72865: PUSH
72866: LD_VAR 0 1
72870: PPUSH
72871: LD_VAR 0 5
72875: PPUSH
72876: CALL_OW 76
72880: ST_TO_ADDR
72881: GO 72903
// result := SortListByListDesc ( units , tmp ) ;
72883: LD_ADDR_VAR 0 3
72887: PUSH
72888: LD_VAR 0 1
72892: PPUSH
72893: LD_VAR 0 5
72897: PPUSH
72898: CALL_OW 77
72902: ST_TO_ADDR
// end ;
72903: LD_VAR 0 3
72907: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72908: LD_INT 0
72910: PPUSH
72911: PPUSH
// task := GetTaskList ( mech ) ;
72912: LD_ADDR_VAR 0 4
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 437
72926: ST_TO_ADDR
// if not task then
72927: LD_VAR 0 4
72931: NOT
72932: IFFALSE 72936
// exit ;
72934: GO 72978
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72936: LD_ADDR_VAR 0 3
72940: PUSH
72941: LD_VAR 0 4
72945: PUSH
72946: LD_INT 1
72948: ARRAY
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PUSH
72954: LD_STRING r
72956: EQUAL
72957: PUSH
72958: LD_VAR 0 4
72962: PUSH
72963: LD_INT 1
72965: ARRAY
72966: PUSH
72967: LD_INT 4
72969: ARRAY
72970: PUSH
72971: LD_VAR 0 2
72975: EQUAL
72976: AND
72977: ST_TO_ADDR
// end ;
72978: LD_VAR 0 3
72982: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72983: LD_INT 0
72985: PPUSH
// SetDir ( unit , d ) ;
72986: LD_VAR 0 1
72990: PPUSH
72991: LD_VAR 0 4
72995: PPUSH
72996: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_VAR 0 2
73009: PPUSH
73010: LD_VAR 0 3
73014: PPUSH
73015: LD_VAR 0 5
73019: PPUSH
73020: CALL_OW 48
// end ;
73024: LD_VAR 0 6
73028: RET
// export function ToNaturalNumber ( number ) ; begin
73029: LD_INT 0
73031: PPUSH
// result := number div 1 ;
73032: LD_ADDR_VAR 0 2
73036: PUSH
73037: LD_VAR 0 1
73041: PUSH
73042: LD_INT 1
73044: DIV
73045: ST_TO_ADDR
// if number < 0 then
73046: LD_VAR 0 1
73050: PUSH
73051: LD_INT 0
73053: LESS
73054: IFFALSE 73064
// result := 0 ;
73056: LD_ADDR_VAR 0 2
73060: PUSH
73061: LD_INT 0
73063: ST_TO_ADDR
// end ;
73064: LD_VAR 0 2
73068: RET
// export function SortByClass ( units , class ) ; var un ; begin
73069: LD_INT 0
73071: PPUSH
73072: PPUSH
// if not units or not class then
73073: LD_VAR 0 1
73077: NOT
73078: PUSH
73079: LD_VAR 0 2
73083: NOT
73084: OR
73085: IFFALSE 73089
// exit ;
73087: GO 73184
// result := [ ] ;
73089: LD_ADDR_VAR 0 3
73093: PUSH
73094: EMPTY
73095: ST_TO_ADDR
// for un in units do
73096: LD_ADDR_VAR 0 4
73100: PUSH
73101: LD_VAR 0 1
73105: PUSH
73106: FOR_IN
73107: IFFALSE 73182
// if GetClass ( un ) = class then
73109: LD_VAR 0 4
73113: PPUSH
73114: CALL_OW 257
73118: PUSH
73119: LD_VAR 0 2
73123: EQUAL
73124: IFFALSE 73151
// result := Insert ( result , 1 , un ) else
73126: LD_ADDR_VAR 0 3
73130: PUSH
73131: LD_VAR 0 3
73135: PPUSH
73136: LD_INT 1
73138: PPUSH
73139: LD_VAR 0 4
73143: PPUSH
73144: CALL_OW 2
73148: ST_TO_ADDR
73149: GO 73180
// result := Replace ( result , result + 1 , un ) ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 3
73160: PPUSH
73161: LD_VAR 0 3
73165: PUSH
73166: LD_INT 1
73168: PLUS
73169: PPUSH
73170: LD_VAR 0 4
73174: PPUSH
73175: CALL_OW 1
73179: ST_TO_ADDR
73180: GO 73106
73182: POP
73183: POP
// end ;
73184: LD_VAR 0 3
73188: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73189: LD_INT 0
73191: PPUSH
73192: PPUSH
73193: PPUSH
73194: PPUSH
73195: PPUSH
73196: PPUSH
73197: PPUSH
// result := [ ] ;
73198: LD_ADDR_VAR 0 4
73202: PUSH
73203: EMPTY
73204: ST_TO_ADDR
// if x - r < 0 then
73205: LD_VAR 0 1
73209: PUSH
73210: LD_VAR 0 3
73214: MINUS
73215: PUSH
73216: LD_INT 0
73218: LESS
73219: IFFALSE 73231
// min_x := 0 else
73221: LD_ADDR_VAR 0 8
73225: PUSH
73226: LD_INT 0
73228: ST_TO_ADDR
73229: GO 73247
// min_x := x - r ;
73231: LD_ADDR_VAR 0 8
73235: PUSH
73236: LD_VAR 0 1
73240: PUSH
73241: LD_VAR 0 3
73245: MINUS
73246: ST_TO_ADDR
// if y - r < 0 then
73247: LD_VAR 0 2
73251: PUSH
73252: LD_VAR 0 3
73256: MINUS
73257: PUSH
73258: LD_INT 0
73260: LESS
73261: IFFALSE 73273
// min_y := 0 else
73263: LD_ADDR_VAR 0 7
73267: PUSH
73268: LD_INT 0
73270: ST_TO_ADDR
73271: GO 73289
// min_y := y - r ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 2
73282: PUSH
73283: LD_VAR 0 3
73287: MINUS
73288: ST_TO_ADDR
// max_x := x + r ;
73289: LD_ADDR_VAR 0 9
73293: PUSH
73294: LD_VAR 0 1
73298: PUSH
73299: LD_VAR 0 3
73303: PLUS
73304: ST_TO_ADDR
// max_y := y + r ;
73305: LD_ADDR_VAR 0 10
73309: PUSH
73310: LD_VAR 0 2
73314: PUSH
73315: LD_VAR 0 3
73319: PLUS
73320: ST_TO_ADDR
// for _x = min_x to max_x do
73321: LD_ADDR_VAR 0 5
73325: PUSH
73326: DOUBLE
73327: LD_VAR 0 8
73331: DEC
73332: ST_TO_ADDR
73333: LD_VAR 0 9
73337: PUSH
73338: FOR_TO
73339: IFFALSE 73440
// for _y = min_y to max_y do
73341: LD_ADDR_VAR 0 6
73345: PUSH
73346: DOUBLE
73347: LD_VAR 0 7
73351: DEC
73352: ST_TO_ADDR
73353: LD_VAR 0 10
73357: PUSH
73358: FOR_TO
73359: IFFALSE 73436
// begin if not ValidHex ( _x , _y ) then
73361: LD_VAR 0 5
73365: PPUSH
73366: LD_VAR 0 6
73370: PPUSH
73371: CALL_OW 488
73375: NOT
73376: IFFALSE 73380
// continue ;
73378: GO 73358
// if GetResourceTypeXY ( _x , _y ) then
73380: LD_VAR 0 5
73384: PPUSH
73385: LD_VAR 0 6
73389: PPUSH
73390: CALL_OW 283
73394: IFFALSE 73434
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73396: LD_ADDR_VAR 0 4
73400: PUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: LD_VAR 0 4
73410: PUSH
73411: LD_INT 1
73413: PLUS
73414: PPUSH
73415: LD_VAR 0 5
73419: PUSH
73420: LD_VAR 0 6
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PPUSH
73429: CALL_OW 1
73433: ST_TO_ADDR
// end ;
73434: GO 73358
73436: POP
73437: POP
73438: GO 73338
73440: POP
73441: POP
// end ;
73442: LD_VAR 0 4
73446: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73447: LD_INT 0
73449: PPUSH
73450: PPUSH
73451: PPUSH
73452: PPUSH
73453: PPUSH
73454: PPUSH
73455: PPUSH
73456: PPUSH
// if not units then
73457: LD_VAR 0 1
73461: NOT
73462: IFFALSE 73466
// exit ;
73464: GO 73891
// result := UnitFilter ( units , [ f_ok ] ) ;
73466: LD_ADDR_VAR 0 3
73470: PUSH
73471: LD_VAR 0 1
73475: PPUSH
73476: LD_INT 50
73478: PUSH
73479: EMPTY
73480: LIST
73481: PPUSH
73482: CALL_OW 72
73486: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73487: LD_ADDR_VAR 0 8
73491: PUSH
73492: LD_VAR 0 1
73496: PUSH
73497: LD_INT 1
73499: ARRAY
73500: PPUSH
73501: CALL_OW 255
73505: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
73506: LD_ADDR_VAR 0 10
73510: PUSH
73511: LD_INT 29
73513: PUSH
73514: LD_EXP 133
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: ST_TO_ADDR
// if not result then
73523: LD_VAR 0 3
73527: NOT
73528: IFFALSE 73532
// exit ;
73530: GO 73891
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73532: LD_ADDR_VAR 0 5
73536: PUSH
73537: LD_INT 81
73539: PUSH
73540: LD_VAR 0 8
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PPUSH
73549: CALL_OW 69
73553: ST_TO_ADDR
// for i in result do
73554: LD_ADDR_VAR 0 4
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: FOR_IN
73565: IFFALSE 73889
// begin tag := GetTag ( i ) + 1 ;
73567: LD_ADDR_VAR 0 9
73571: PUSH
73572: LD_VAR 0 4
73576: PPUSH
73577: CALL_OW 110
73581: PUSH
73582: LD_INT 1
73584: PLUS
73585: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73586: LD_ADDR_VAR 0 7
73590: PUSH
73591: LD_VAR 0 4
73595: PPUSH
73596: CALL_OW 250
73600: PPUSH
73601: LD_VAR 0 4
73605: PPUSH
73606: CALL_OW 251
73610: PPUSH
73611: LD_INT 6
73613: PPUSH
73614: CALL 73189 0 3
73618: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73619: LD_VAR 0 7
73623: PUSH
73624: LD_VAR 0 4
73628: PPUSH
73629: CALL_OW 264
73633: PUSH
73634: LD_VAR 0 10
73638: IN
73639: NOT
73640: AND
73641: IFFALSE 73680
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73643: LD_VAR 0 4
73647: PPUSH
73648: LD_VAR 0 7
73652: PUSH
73653: LD_INT 1
73655: ARRAY
73656: PUSH
73657: LD_INT 1
73659: ARRAY
73660: PPUSH
73661: LD_VAR 0 7
73665: PUSH
73666: LD_INT 1
73668: ARRAY
73669: PUSH
73670: LD_INT 2
73672: ARRAY
73673: PPUSH
73674: CALL_OW 116
73678: GO 73887
// if path > tag then
73680: LD_VAR 0 2
73684: PUSH
73685: LD_VAR 0 9
73689: GREATER
73690: IFFALSE 73857
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73692: LD_ADDR_VAR 0 6
73696: PUSH
73697: LD_VAR 0 5
73701: PPUSH
73702: LD_INT 91
73704: PUSH
73705: LD_VAR 0 4
73709: PUSH
73710: LD_INT 12
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: LIST
73717: PPUSH
73718: CALL_OW 72
73722: ST_TO_ADDR
// if nearEnemy then
73723: LD_VAR 0 6
73727: IFFALSE 73755
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73729: LD_VAR 0 4
73733: PPUSH
73734: LD_VAR 0 6
73738: PPUSH
73739: LD_VAR 0 4
73743: PPUSH
73744: CALL_OW 74
73748: PPUSH
73749: CALL_OW 115
73753: GO 73855
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73755: LD_VAR 0 4
73759: PPUSH
73760: LD_VAR 0 2
73764: PUSH
73765: LD_VAR 0 9
73769: ARRAY
73770: PUSH
73771: LD_INT 1
73773: ARRAY
73774: PPUSH
73775: LD_VAR 0 2
73779: PUSH
73780: LD_VAR 0 9
73784: ARRAY
73785: PUSH
73786: LD_INT 2
73788: ARRAY
73789: PPUSH
73790: CALL_OW 297
73794: PUSH
73795: LD_INT 6
73797: GREATER
73798: IFFALSE 73841
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73800: LD_VAR 0 4
73804: PPUSH
73805: LD_VAR 0 2
73809: PUSH
73810: LD_VAR 0 9
73814: ARRAY
73815: PUSH
73816: LD_INT 1
73818: ARRAY
73819: PPUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_VAR 0 9
73829: ARRAY
73830: PUSH
73831: LD_INT 2
73833: ARRAY
73834: PPUSH
73835: CALL_OW 114
73839: GO 73855
// SetTag ( i , tag ) ;
73841: LD_VAR 0 4
73845: PPUSH
73846: LD_VAR 0 9
73850: PPUSH
73851: CALL_OW 109
// end else
73855: GO 73887
// if enemy then
73857: LD_VAR 0 5
73861: IFFALSE 73887
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73863: LD_VAR 0 4
73867: PPUSH
73868: LD_VAR 0 5
73872: PPUSH
73873: LD_VAR 0 4
73877: PPUSH
73878: CALL_OW 74
73882: PPUSH
73883: CALL_OW 115
// end ;
73887: GO 73564
73889: POP
73890: POP
// end ;
73891: LD_VAR 0 3
73895: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73896: LD_INT 0
73898: PPUSH
73899: PPUSH
73900: PPUSH
// if not unit or IsInUnit ( unit ) then
73901: LD_VAR 0 1
73905: NOT
73906: PUSH
73907: LD_VAR 0 1
73911: PPUSH
73912: CALL_OW 310
73916: OR
73917: IFFALSE 73921
// exit ;
73919: GO 74012
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73921: LD_ADDR_VAR 0 4
73925: PUSH
73926: LD_VAR 0 1
73930: PPUSH
73931: CALL_OW 250
73935: PPUSH
73936: LD_VAR 0 2
73940: PPUSH
73941: LD_INT 1
73943: PPUSH
73944: CALL_OW 272
73948: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73949: LD_ADDR_VAR 0 5
73953: PUSH
73954: LD_VAR 0 1
73958: PPUSH
73959: CALL_OW 251
73963: PPUSH
73964: LD_VAR 0 2
73968: PPUSH
73969: LD_INT 1
73971: PPUSH
73972: CALL_OW 273
73976: ST_TO_ADDR
// if ValidHex ( x , y ) then
73977: LD_VAR 0 4
73981: PPUSH
73982: LD_VAR 0 5
73986: PPUSH
73987: CALL_OW 488
73991: IFFALSE 74012
// ComTurnXY ( unit , x , y ) ;
73993: LD_VAR 0 1
73997: PPUSH
73998: LD_VAR 0 4
74002: PPUSH
74003: LD_VAR 0 5
74007: PPUSH
74008: CALL_OW 118
// end ;
74012: LD_VAR 0 3
74016: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74017: LD_INT 0
74019: PPUSH
74020: PPUSH
// result := false ;
74021: LD_ADDR_VAR 0 3
74025: PUSH
74026: LD_INT 0
74028: ST_TO_ADDR
// if not units then
74029: LD_VAR 0 2
74033: NOT
74034: IFFALSE 74038
// exit ;
74036: GO 74083
// for i in units do
74038: LD_ADDR_VAR 0 4
74042: PUSH
74043: LD_VAR 0 2
74047: PUSH
74048: FOR_IN
74049: IFFALSE 74081
// if See ( side , i ) then
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_VAR 0 4
74060: PPUSH
74061: CALL_OW 292
74065: IFFALSE 74079
// begin result := true ;
74067: LD_ADDR_VAR 0 3
74071: PUSH
74072: LD_INT 1
74074: ST_TO_ADDR
// exit ;
74075: POP
74076: POP
74077: GO 74083
// end ;
74079: GO 74048
74081: POP
74082: POP
// end ;
74083: LD_VAR 0 3
74087: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74088: LD_INT 0
74090: PPUSH
74091: PPUSH
74092: PPUSH
74093: PPUSH
// if not unit or not points then
74094: LD_VAR 0 1
74098: NOT
74099: PUSH
74100: LD_VAR 0 2
74104: NOT
74105: OR
74106: IFFALSE 74110
// exit ;
74108: GO 74200
// dist := 99999 ;
74110: LD_ADDR_VAR 0 5
74114: PUSH
74115: LD_INT 99999
74117: ST_TO_ADDR
// for i in points do
74118: LD_ADDR_VAR 0 4
74122: PUSH
74123: LD_VAR 0 2
74127: PUSH
74128: FOR_IN
74129: IFFALSE 74198
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74131: LD_ADDR_VAR 0 6
74135: PUSH
74136: LD_VAR 0 1
74140: PPUSH
74141: LD_VAR 0 4
74145: PUSH
74146: LD_INT 1
74148: ARRAY
74149: PPUSH
74150: LD_VAR 0 4
74154: PUSH
74155: LD_INT 2
74157: ARRAY
74158: PPUSH
74159: CALL_OW 297
74163: ST_TO_ADDR
// if tmpDist < dist then
74164: LD_VAR 0 6
74168: PUSH
74169: LD_VAR 0 5
74173: LESS
74174: IFFALSE 74196
// begin result := i ;
74176: LD_ADDR_VAR 0 3
74180: PUSH
74181: LD_VAR 0 4
74185: ST_TO_ADDR
// dist := tmpDist ;
74186: LD_ADDR_VAR 0 5
74190: PUSH
74191: LD_VAR 0 6
74195: ST_TO_ADDR
// end ; end ;
74196: GO 74128
74198: POP
74199: POP
// end ; end_of_file
74200: LD_VAR 0 3
74204: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74205: LD_VAR 0 1
74209: PPUSH
74210: LD_VAR 0 2
74214: PPUSH
74215: LD_VAR 0 3
74219: PPUSH
74220: LD_VAR 0 4
74224: PPUSH
74225: LD_VAR 0 5
74229: PPUSH
74230: LD_VAR 0 6
74234: PPUSH
74235: CALL 14912 0 6
// end ;
74239: PPOPN 6
74241: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74242: CALL 14887 0 0
// end ;
74246: PPOPN 1
74248: END
