// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 9931 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 2114 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , melEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// melEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 10304 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 10304 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 10304 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 10304 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 10304 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 10304 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 10304 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 10304 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 10304 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 10304 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Mel ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 10304 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 44519 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 48494 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: IFFALSE 1139
1133: PUSH
1134: LD_EXP 14
1138: AND
1139: IFFALSE 1313
1141: GO 1143
1143: DISABLE
// begin uc_side := 1 ;
1144: LD_ADDR_OWVAR 20
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// uc_nation := nation_american ;
1152: LD_ADDR_OWVAR 21
1156: PUSH
1157: LD_INT 1
1159: ST_TO_ADDR
// hc_class := class_soldier ;
1160: LD_ADDR_OWVAR 28
1164: PUSH
1165: LD_INT 1
1167: ST_TO_ADDR
// hc_sex := sex_male ;
1168: LD_ADDR_OWVAR 27
1172: PUSH
1173: LD_INT 1
1175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1176: LD_ADDR_OWVAR 33
1180: PUSH
1181: LD_STRING SecondCharsGal
1183: ST_TO_ADDR
// hc_face_number := 56 ;
1184: LD_ADDR_OWVAR 34
1188: PUSH
1189: LD_INT 56
1191: ST_TO_ADDR
// hc_name := Mel Brennan ;
1192: LD_ADDR_OWVAR 26
1196: PUSH
1197: LD_STRING Mel Brennan
1199: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1200: LD_ADDR_OWVAR 29
1204: PUSH
1205: LD_INT 12
1207: PUSH
1208: LD_INT 11
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 0 ] ;
1215: LD_ADDR_OWVAR 30
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 0
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1238: LD_ADDR_OWVAR 31
1242: PUSH
1243: LD_OWVAR 67
1247: PUSH
1248: LD_INT 2
1250: PUSH
1251: LD_INT 0
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// Mel := CreateHuman ;
1263: LD_ADDR_EXP 35
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitXY ( Mel , 77 , 19 , true ) ;
1273: LD_EXP 35
1277: PPUSH
1278: LD_INT 77
1280: PPUSH
1281: LD_INT 19
1283: PPUSH
1284: LD_INT 1
1286: PPUSH
1287: CALL_OW 48
// wait ( 0 0$2 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// ComAgressiveMove ( Mel , 50 , 21 ) ;
1298: LD_EXP 35
1302: PPUSH
1303: LD_INT 50
1305: PPUSH
1306: LD_INT 21
1308: PPUSH
1309: CALL_OW 114
// end ;
1313: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1314: LD_EXP 15
1318: IFFALSE 1772
1320: GO 1322
1322: DISABLE
1323: LD_INT 0
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
// begin enable ;
1329: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_EXP 36
1339: PPUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 120
1345: PUSH
1346: LD_INT 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: PPUSH
1360: CALL_OW 72
1364: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1365: LD_ADDR_VAR 0 2
1369: PUSH
1370: LD_EXP 36
1374: PPUSH
1375: LD_INT 120
1377: PUSH
1378: LD_INT 2
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PPUSH
1385: CALL_OW 72
1389: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1390: LD_ADDR_VAR 0 3
1394: PUSH
1395: LD_INT 17
1397: PPUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 3
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PPUSH
1408: CALL_OW 70
1412: ST_TO_ADDR
// if IsOk ( Mel ) then
1413: LD_EXP 35
1417: PPUSH
1418: CALL_OW 302
1422: IFFALSE 1444
// tmp := Join ( tmp , Mel ) ;
1424: LD_ADDR_VAR 0 4
1428: PUSH
1429: LD_VAR 0 4
1433: PPUSH
1434: LD_EXP 35
1438: PPUSH
1439: CALL 48494 0 2
1443: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 24
1454: PUSH
1455: LD_INT 1000
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 72
1470: IFFALSE 1509
// begin if IsInUnit ( Gladstone ) then
1472: LD_EXP 33
1476: PPUSH
1477: CALL_OW 310
1481: IFFALSE 1507
// begin ComExitBuilding ( Gladstone ) ;
1483: LD_EXP 33
1487: PPUSH
1488: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1492: LD_EXP 33
1496: PPUSH
1497: LD_INT 39
1499: PPUSH
1500: LD_INT 7
1502: PPUSH
1503: CALL_OW 171
// end ; end else
1507: GO 1533
// if not IsInUnit ( Gladstone ) then
1509: LD_EXP 33
1513: PPUSH
1514: CALL_OW 310
1518: NOT
1519: IFFALSE 1533
// ComEnterUnit ( Gladstone , usLab ) ;
1521: LD_EXP 33
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 120
// if eng then
1533: LD_VAR 0 2
1537: IFFALSE 1606
// if GetLives ( usBun1 ) < 1000 then
1539: LD_INT 3
1541: PPUSH
1542: CALL_OW 256
1546: PUSH
1547: LD_INT 1000
1549: LESS
1550: IFFALSE 1566
// ComRepairBuilding ( eng , usBun1 ) else
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 130
1564: GO 1606
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1566: LD_VAR 0 2
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: PPUSH
1575: LD_INT 37
1577: PPUSH
1578: LD_INT 9
1580: PPUSH
1581: CALL_OW 297
1585: PUSH
1586: LD_INT 5
1588: GREATER
1589: IFFALSE 1606
// ComMoveXY ( eng , 37 , 9 ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_INT 9
1601: PPUSH
1602: CALL_OW 111
// for i in tmp do
1606: LD_ADDR_VAR 0 1
1610: PUSH
1611: LD_VAR 0 4
1615: PUSH
1616: FOR_IN
1617: IFFALSE 1770
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 600
1631: LESS
1632: IFFALSE 1655
1634: PUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 37
1642: PPUSH
1643: LD_INT 9
1645: PPUSH
1646: CALL_OW 297
1650: PUSH
1651: LD_INT 5
1653: GREATER
1654: AND
1655: IFFALSE 1674
// begin ComMoveXY ( i , 37 , 9 ) ;
1657: LD_VAR 0 1
1661: PPUSH
1662: LD_INT 37
1664: PPUSH
1665: LD_INT 9
1667: PPUSH
1668: CALL_OW 111
// continue ;
1672: GO 1616
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1674: LD_VAR 0 3
1678: NOT
1679: IFFALSE 1702
1681: PUSH
1682: LD_VAR 0 1
1686: PPUSH
1687: LD_INT 37
1689: PPUSH
1690: LD_INT 9
1692: PPUSH
1693: CALL_OW 297
1697: PUSH
1698: LD_INT 5
1700: GREATER
1701: AND
1702: IFFALSE 1721
// begin ComMoveXY ( i , 37 , 9 ) ;
1704: LD_VAR 0 1
1708: PPUSH
1709: LD_INT 37
1711: PPUSH
1712: LD_INT 9
1714: PPUSH
1715: CALL_OW 111
// continue ;
1719: GO 1616
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1721: LD_VAR 0 3
1725: IFFALSE 1742
1727: PUSH
1728: LD_VAR 0 1
1732: PPUSH
1733: CALL_OW 256
1737: PUSH
1738: LD_INT 1000
1740: EQUAL
1741: AND
1742: IFFALSE 1768
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_VAR 0 3
1753: PPUSH
1754: LD_VAR 0 1
1758: PPUSH
1759: CALL_OW 74
1763: PPUSH
1764: CALL_OW 115
// end ;
1768: GO 1616
1770: POP
1771: POP
// end ; end_of_file
1772: PPOPN 4
1774: END
// every 0 0$1 trigger not attackedByApe do var un ;
1775: LD_EXP 7
1779: NOT
1780: IFFALSE 1856
1782: GO 1784
1784: DISABLE
1785: LD_INT 0
1787: PPUSH
// begin enable ;
1788: ENABLE
// un := UnitShoot ( Burlak ) ;
1789: LD_ADDR_VAR 0 1
1793: PUSH
1794: LD_EXP 22
1798: PPUSH
1799: CALL_OW 504
1803: ST_TO_ADDR
// if un > - 1 then
1804: LD_VAR 0 1
1808: PUSH
1809: LD_INT 1
1811: NEG
1812: GREATER
1813: IFFALSE 1856
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 255
1824: PUSH
1825: LD_INT 0
1827: EQUAL
1828: IFFALSE 1845
1830: PUSH
1831: LD_VAR 0 1
1835: PPUSH
1836: CALL_OW 257
1840: PUSH
1841: LD_INT 12
1843: EQUAL
1844: AND
1845: IFFALSE 1856
// begin attackedByApe := true ;
1847: LD_ADDR_EXP 7
1851: PUSH
1852: LD_INT 1
1854: ST_TO_ADDR
// disable ;
1855: DISABLE
// end ; end ;
1856: PPOPN 1
1858: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL 70183 0 1
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1868: LD_VAR 0 1
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: IFFALSE 1898
1883: PUSH
1884: LD_VAR 0 1
1888: PPUSH
1889: CALL_OW 247
1893: PUSH
1894: LD_INT 1
1896: EQUAL
1897: AND
1898: IFFALSE 1915
// loseCounter := Inc ( loseCounter ) ;
1900: LD_ADDR_EXP 20
1904: PUSH
1905: LD_EXP 20
1909: PPUSH
1910: CALL 49867 0 1
1914: ST_TO_ADDR
// if un = Burlak then
1915: LD_VAR 0 1
1919: PUSH
1920: LD_EXP 22
1924: EQUAL
1925: IFFALSE 1934
// YouLost ( Burlak ) ;
1927: LD_STRING Burlak
1929: PPUSH
1930: CALL_OW 104
// end ;
1934: PPOPN 1
1936: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not apeRadioKilled and GetTag ( un ) = tApeRadio and GetSide ( un ) = 0 and killerSide = 3 then
1937: LD_EXP 9
1941: NOT
1942: IFFALSE 1959
1944: PUSH
1945: LD_VAR 0 1
1949: PPUSH
1950: CALL_OW 110
1954: PUSH
1955: LD_INT 1
1957: EQUAL
1958: AND
1959: IFFALSE 1976
1961: PUSH
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 255
1971: PUSH
1972: LD_INT 0
1974: EQUAL
1975: AND
1976: IFFALSE 1988
1978: PUSH
1979: LD_VAR 0 2
1983: PUSH
1984: LD_INT 3
1986: EQUAL
1987: AND
1988: IFFALSE 2000
// apeRadioKilled := un ;
1990: LD_ADDR_EXP 9
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// end ;
2000: PPOPN 3
2002: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
2003: LD_VAR 0 1
2007: PPUSH
2008: CALL_OW 255
2012: PUSH
2013: LD_INT 3
2015: EQUAL
2016: IFFALSE 2078
// begin someoneGetsHurt := true ;
2018: LD_ADDR_EXP 21
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if un = Burlak and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
2026: LD_VAR 0 1
2030: PUSH
2031: LD_EXP 22
2035: EQUAL
2036: IFFALSE 2069
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 25
2051: PUSH
2052: LD_INT 4
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: NOT
2068: AND
2069: IFFALSE 2078
// begin YouLost ( Burlak ) ;
2071: LD_STRING Burlak
2073: PPUSH
2074: CALL_OW 104
// end ; end ; end ;
2078: PPOPN 1
2080: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
2081: LD_VAR 0 1
2085: PUSH
2086: LD_INT 3
2088: EQUAL
2089: IFFALSE 2101
2091: PUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_INT 6
2099: EQUAL
2100: AND
2101: IFFALSE 2111
// attackedAllied := true ;
2103: LD_ADDR_EXP 13
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// end ; end_of_file
2111: PPOPN 2
2113: END
// export function Action ; begin
2114: LD_INT 0
2116: PPUSH
// InGameOn ;
2117: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
2121: LD_INT 78
2123: PPUSH
2124: LD_INT 85
2126: PPUSH
2127: CALL_OW 86
// wait ( 0 0$2 ) ;
2131: LD_INT 70
2133: PPUSH
2134: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 78
2145: PPUSH
2146: LD_INT 85
2148: PPUSH
2149: LD_INT 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL 50654 0 5
// ComHold ( Burlak ) ;
2159: LD_EXP 22
2163: PPUSH
2164: CALL_OW 140
// wait ( 0 0$3 ) ;
2168: LD_INT 105
2170: PPUSH
2171: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2175: LD_EXP 22
2179: PPUSH
2180: LD_INT 79
2182: PPUSH
2183: LD_INT 89
2185: PPUSH
2186: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2190: LD_INT 18
2192: PPUSH
2193: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2197: LD_EXP 22
2201: PPUSH
2202: LD_STRING D1-Bur-1
2204: PPUSH
2205: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2209: LD_EXP 22
2213: PPUSH
2214: LD_INT 81
2216: PPUSH
2217: LD_INT 87
2219: PPUSH
2220: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2224: LD_INT 10
2226: PPUSH
2227: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2231: LD_EXP 22
2235: PPUSH
2236: LD_STRING D1-Bur-1a
2238: PPUSH
2239: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2243: LD_EXP 22
2247: PPUSH
2248: LD_INT 85
2250: PPUSH
2251: LD_INT 90
2253: PPUSH
2254: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2258: LD_INT 18
2260: PPUSH
2261: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2265: LD_EXP 22
2269: PPUSH
2270: LD_STRING D1-Bur-1b
2272: PPUSH
2273: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2277: LD_EXP 22
2281: PPUSH
2282: LD_INT 85
2284: PPUSH
2285: LD_INT 87
2287: PPUSH
2288: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2292: LD_INT 10
2294: PPUSH
2295: CALL_OW 67
// InGameOff ;
2299: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2303: LD_STRING M1
2305: PPUSH
2306: CALL_OW 337
// SaveForQuickRestart ;
2310: CALL_OW 22
// if debug then
2314: LD_EXP 1
2318: IFFALSE 2327
// FogOff ( 3 ) ;
2320: LD_INT 3
2322: PPUSH
2323: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2327: LD_INT 350
2329: PUSH
2330: LD_INT 70
2332: PUSH
2333: LD_OWVAR 67
2337: MUL
2338: MINUS
2339: PPUSH
2340: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2344: LD_EXP 22
2348: PPUSH
2349: LD_INT 80
2351: PPUSH
2352: LD_INT 87
2354: PPUSH
2355: CALL_OW 297
2359: PUSH
2360: LD_INT 8
2362: LESS
2363: IFFALSE 2369
// SendApemanAttack ;
2365: CALL 9656 0 0
// end ;
2369: LD_VAR 0 1
2373: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2374: LD_EXP 22
2378: PPUSH
2379: LD_INT 6
2381: PPUSH
2382: CALL_OW 308
2386: IFFALSE 2428
2388: GO 2390
2390: DISABLE
// begin waterfallSpotted := true ;
2391: LD_ADDR_EXP 8
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2399: LD_INT 75
2401: PPUSH
2402: LD_INT 89
2404: PPUSH
2405: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2409: LD_INT 7
2411: PPUSH
2412: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2416: LD_EXP 22
2420: PPUSH
2421: LD_STRING DWaterfall-Bur-1
2423: PPUSH
2424: CALL_OW 88
// end ;
2428: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2429: LD_EXP 22
2433: PPUSH
2434: LD_INT 25
2436: PUSH
2437: LD_INT 12
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 69
2448: PPUSH
2449: LD_EXP 22
2453: PPUSH
2454: CALL_OW 74
2458: PPUSH
2459: CALL_OW 296
2463: PUSH
2464: LD_INT 6
2466: LESS
2467: IFFALSE 2558
2469: GO 2471
2471: DISABLE
// begin apeSpotted := true ;
2472: LD_ADDR_EXP 6
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// if joinedToBelkov then
2480: LD_EXP 3
2484: IFFALSE 2488
// exit ;
2486: GO 2558
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2488: LD_EXP 22
2492: PPUSH
2493: LD_INT 25
2495: PUSH
2496: LD_INT 12
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PPUSH
2508: LD_EXP 22
2512: PPUSH
2513: CALL_OW 74
2517: PPUSH
2518: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2522: LD_INT 10
2524: PPUSH
2525: CALL_OW 67
// DialogueOn ;
2529: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2533: LD_EXP 22
2537: PPUSH
2538: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2542: LD_EXP 22
2546: PPUSH
2547: LD_STRING D2-Bur-1
2549: PPUSH
2550: CALL_OW 88
// DialogueOff ;
2554: CALL_OW 7
// end ;
2558: END
// every 0 0$1 trigger attackedByApe do
2559: LD_EXP 7
2563: IFFALSE 2587
2565: GO 2567
2567: DISABLE
// begin wait ( 0 0$0.3 ) ;
2568: LD_INT 10
2570: PPUSH
2571: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2575: LD_EXP 22
2579: PPUSH
2580: LD_STRING D2-Bur-1a
2582: PPUSH
2583: CALL_OW 88
// end ;
2587: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2588: LD_INT 3
2590: PPUSH
2591: LD_INT 130
2593: PPUSH
2594: LD_INT 97
2596: PPUSH
2597: CALL_OW 293
2601: IFFALSE 2624
2603: PUSH
2604: LD_EXP 22
2608: PPUSH
2609: LD_INT 130
2611: PPUSH
2612: LD_INT 97
2614: PPUSH
2615: CALL_OW 297
2619: PUSH
2620: LD_INT 6
2622: LESS
2623: AND
2624: IFFALSE 2633
2626: PUSH
2627: LD_EXP 3
2631: NOT
2632: AND
2633: IFFALSE 2642
2635: PUSH
2636: LD_EXP 4
2640: NOT
2641: AND
2642: IFFALSE 2667
2644: GO 2646
2646: DISABLE
// begin DialogueOn ;
2647: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2651: LD_EXP 22
2655: PPUSH
2656: LD_STRING DCorpse-Bur-1
2658: PPUSH
2659: CALL_OW 88
// DialogueOff ;
2663: CALL_OW 7
// end ;
2667: END
// every 0 0$1 trigger apeRadioKilled do var un , tmp , tmp2 ;
2668: LD_EXP 9
2672: IFFALSE 3056
2674: GO 2676
2676: DISABLE
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , apeRadioKilled , 12 ] ] ) ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 22
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 21
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 91
2709: PUSH
2710: LD_EXP 9
2714: PUSH
2715: LD_INT 12
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// if not tmp or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2733: LD_VAR 0 2
2737: NOT
2738: IFTRUE 2774
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 21
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: LD_INT 1
2772: EQUAL
2773: OR
2774: IFFALSE 2778
// exit ;
2776: GO 3056
// tmp2 := [ Kirilenkova , Belkov , Saseda , Jaworska ] ;
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: LD_EXP 31
2787: PUSH
2788: LD_EXP 27
2792: PUSH
2793: LD_EXP 24
2797: PUSH
2798: LD_EXP 25
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: ST_TO_ADDR
// Randomize ;
2809: CALL_OW 10
// un := tmp2 [ rand ( 1 , Count ( tmp2 ) ) ] ;
2813: LD_ADDR_VAR 0 1
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL 12528 0 1
2835: PPUSH
2836: CALL_OW 12
2840: ARRAY
2841: ST_TO_ADDR
// if not un in tmp then
2842: LD_VAR 0 1
2846: PUSH
2847: LD_VAR 0 2
2851: IN
2852: NOT
2853: IFFALSE 2865
// un := Burlak ;
2855: LD_ADDR_VAR 0 1
2859: PUSH
2860: LD_EXP 22
2864: ST_TO_ADDR
// DialogueOn ;
2865: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2869: LD_EXP 9
2873: PPUSH
2874: CALL_OW 87
// case un of Kirilenkova :
2878: LD_VAR 0 1
2882: PUSH
2883: LD_EXP 31
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2908
2893: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2894: LD_EXP 31
2898: PPUSH
2899: LD_STRING D2a-Kir-1
2901: PPUSH
2902: CALL_OW 88
2906: GO 3009
2908: LD_EXP 27
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2933
2918: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2919: LD_EXP 27
2923: PPUSH
2924: LD_STRING D2a-Bel-1
2926: PPUSH
2927: CALL_OW 88
2931: GO 3009
2933: LD_EXP 22
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2958
2943: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2944: LD_EXP 22
2948: PPUSH
2949: LD_STRING D2a-Bur-1
2951: PPUSH
2952: CALL_OW 88
2956: GO 3009
2958: LD_EXP 25
2962: DOUBLE
2963: EQUAL
2964: IFTRUE 2968
2966: GO 2983
2968: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2969: LD_EXP 25
2973: PPUSH
2974: LD_STRING D2a-RFSol1-1
2976: PPUSH
2977: CALL_OW 88
2981: GO 3009
2983: LD_EXP 24
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3008
2993: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2994: LD_EXP 24
2998: PPUSH
2999: LD_STRING D2a-RSol1-1
3001: PPUSH
3002: CALL_OW 88
3006: GO 3009
3008: POP
// if hasGnyevko then
3009: LD_EXP 4
3013: IFFALSE 3040
// begin if IsOk ( Gnyevko ) then
3015: LD_EXP 30
3019: PPUSH
3020: CALL_OW 302
3024: IFFALSE 3038
// Say ( Gnyevko , D2a-Gny-1 ) ;
3026: LD_EXP 30
3030: PPUSH
3031: LD_STRING D2a-Gny-1
3033: PPUSH
3034: CALL_OW 88
// end else
3038: GO 3052
// Say ( Burlak , D2a-Bur-2 ) ;
3040: LD_EXP 22
3044: PPUSH
3045: LD_STRING D2a-Bur-2
3047: PPUSH
3048: CALL_OW 88
// DialogueOff ;
3052: CALL_OW 7
// end ;
3056: PPOPN 3
3058: END
// every 0 0$1 do var un , tmp ;
3059: GO 3061
3061: DISABLE
3062: LD_INT 0
3064: PPUSH
3065: PPUSH
// begin if Difficulty = 1 then
3066: LD_OWVAR 67
3070: PUSH
3071: LD_INT 1
3073: EQUAL
3074: IFFALSE 3078
// exit ;
3076: GO 3219
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
3078: LD_INT 16800
3080: PUSH
3081: LD_INT 2100
3083: PUSH
3084: LD_OWVAR 67
3088: MUL
3089: MINUS
3090: PPUSH
3091: CALL_OW 67
// if hasGnyevko then
3095: LD_EXP 4
3099: IFFALSE 3103
// exit ;
3101: GO 3219
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 25
3120: PUSH
3121: LD_INT 14
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
3137: LD_ADDR_VAR 0 1
3141: PUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: LD_EXP 30
3151: PPUSH
3152: CALL_OW 74
3156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3157: LD_INT 35
3159: PPUSH
3160: CALL_OW 67
// if hasGnyevko then
3164: LD_EXP 4
3168: IFFALSE 3181
// begin ComFree ( un ) ;
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 139
// exit ;
3179: GO 3219
// end ; if not HasTask ( un ) then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 314
3190: NOT
3191: IFFALSE 3207
// ComAttackUnit ( un , Gnyevko ) ;
3193: LD_VAR 0 1
3197: PPUSH
3198: LD_EXP 30
3202: PPUSH
3203: CALL_OW 115
// until not IsOk ( un ) ;
3207: LD_VAR 0 1
3211: PPUSH
3212: CALL_OW 302
3216: NOT
3217: IFFALSE 3157
// end ;
3219: PPOPN 2
3221: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3222: LD_INT 3
3224: PPUSH
3225: LD_EXP 30
3229: PPUSH
3230: CALL_OW 292
3234: IFFALSE 3247
3236: PUSH
3237: LD_EXP 30
3241: PPUSH
3242: CALL_OW 302
3246: AND
3247: IFFALSE 3256
3249: PUSH
3250: LD_EXP 4
3254: NOT
3255: AND
3256: IFFALSE 3679
3258: GO 3260
3260: DISABLE
3261: LD_INT 0
3263: PPUSH
// begin hasGnyevko := true ;
3264: LD_ADDR_EXP 4
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3272: LD_ADDR_VAR 0 1
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 3
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 21
3289: PUSH
3290: LD_INT 1
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PPUSH
3301: CALL_OW 69
3305: PPUSH
3306: LD_EXP 30
3310: PPUSH
3311: CALL_OW 74
3315: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_EXP 22
3325: PUSH
3326: LD_EXP 24
3330: PUSH
3331: LD_EXP 25
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: IN
3341: NOT
3342: IFFALSE 3354
// un := Burlak ;
3344: LD_ADDR_VAR 0 1
3348: PUSH
3349: LD_EXP 22
3353: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3354: LD_EXP 30
3358: PPUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3368: LD_INT 10
3370: PPUSH
3371: CALL_OW 67
// DialogueOn ;
3375: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3379: LD_EXP 30
3383: PPUSH
3384: CALL_OW 87
// case un of Burlak :
3388: LD_VAR 0 1
3392: PUSH
3393: LD_EXP 22
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3403
3401: GO 3418
3403: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3404: LD_EXP 22
3408: PPUSH
3409: LD_STRING D3-Bur-1
3411: PPUSH
3412: CALL_OW 88
3416: GO 3469
3418: LD_EXP 24
3422: DOUBLE
3423: EQUAL
3424: IFTRUE 3428
3426: GO 3443
3428: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3429: LD_EXP 24
3433: PPUSH
3434: LD_STRING D3-RSol1-1
3436: PPUSH
3437: CALL_OW 88
3441: GO 3469
3443: LD_EXP 25
3447: DOUBLE
3448: EQUAL
3449: IFTRUE 3453
3451: GO 3468
3453: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3454: LD_EXP 25
3458: PPUSH
3459: LD_STRING D3-RFSol1-1
3461: PPUSH
3462: CALL_OW 88
3466: GO 3469
3468: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3469: LD_EXP 30
3473: PPUSH
3474: LD_STRING D3-Gny-1
3476: PPUSH
3477: CALL_OW 88
// if un = Burlak then
3481: LD_VAR 0 1
3485: PUSH
3486: LD_EXP 22
3490: EQUAL
3491: IFFALSE 3613
// begin if attackedByApe then
3493: LD_EXP 7
3497: IFFALSE 3513
// Say ( Burlak , D3-Bur-2 ) else
3499: LD_EXP 22
3503: PPUSH
3504: LD_STRING D3-Bur-2
3506: PPUSH
3507: CALL_OW 88
3511: GO 3545
// if apeRadioKilled then
3513: LD_EXP 9
3517: IFFALSE 3533
// Say ( Burlak , D3-Bur-2a ) else
3519: LD_EXP 22
3523: PPUSH
3524: LD_STRING D3-Bur-2a
3526: PPUSH
3527: CALL_OW 88
3531: GO 3545
// Say ( Burlak , D3-Bur-2b ) ;
3533: LD_EXP 22
3537: PPUSH
3538: LD_STRING D3-Bur-2b
3540: PPUSH
3541: CALL_OW 88
// if not joinedToBelkov then
3545: LD_EXP 3
3549: NOT
3550: IFFALSE 3566
// Say ( Burlak , D3-Bur-2c ) else
3552: LD_EXP 22
3556: PPUSH
3557: LD_STRING D3-Bur-2c
3559: PPUSH
3560: CALL_OW 88
3564: GO 3599
// if not americansDefeated then
3566: LD_EXP 10
3570: NOT
3571: IFFALSE 3587
// Say ( Burlak , D3-Bur-2d ) else
3573: LD_EXP 22
3577: PPUSH
3578: LD_STRING D3-Bur-2d
3580: PPUSH
3581: CALL_OW 88
3585: GO 3599
// Say ( Burlak , D3-Bur-2e ) ;
3587: LD_EXP 22
3591: PPUSH
3592: LD_STRING D3-Bur-2e
3594: PPUSH
3595: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3599: LD_EXP 30
3603: PPUSH
3604: LD_STRING D3-Gny-2
3606: PPUSH
3607: CALL_OW 88
// end else
3611: GO 3663
// begin if un = Saseda then
3613: LD_VAR 0 1
3617: PUSH
3618: LD_EXP 24
3622: EQUAL
3623: IFFALSE 3639
// Say ( Saseda , D3-RSol1-2 ) else
3625: LD_EXP 24
3629: PPUSH
3630: LD_STRING D3-RSol1-2
3632: PPUSH
3633: CALL_OW 88
3637: GO 3651
// Say ( Jaworska , D3-RFSol1-2 ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_STRING D3-RFSol1-2
3646: PPUSH
3647: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3651: LD_EXP 30
3655: PPUSH
3656: LD_STRING D3-Gny-2a
3658: PPUSH
3659: CALL_OW 88
// end ; DialogueOff ;
3663: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3667: LD_EXP 30
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: CALL_OW 235
// end ;
3679: PPOPN 1
3681: END
// function GnyevkoPokryshkinScene ; begin
3682: LD_INT 0
3684: PPUSH
// gnyevkoMeetPokryshkin := true ;
3685: LD_ADDR_EXP 11
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComHold ( Burlak ) ;
3693: LD_EXP 22
3697: PPUSH
3698: CALL_OW 140
// InGameOn ;
3702: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3706: LD_INT 76
3708: PPUSH
3709: LD_INT 56
3711: PPUSH
3712: LD_INT 3
3714: PPUSH
3715: LD_INT 12
3717: PPUSH
3718: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3722: LD_EXP 23
3726: PPUSH
3727: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3731: LD_EXP 30
3735: PPUSH
3736: LD_INT 6
3738: PPUSH
3739: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3743: LD_EXP 30
3747: PPUSH
3748: LD_INT 79
3750: PPUSH
3751: LD_INT 56
3753: PPUSH
3754: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3758: LD_EXP 23
3762: PPUSH
3763: LD_STRING D4-Pok-1
3765: PPUSH
3766: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3770: LD_EXP 30
3774: PPUSH
3775: LD_STRING D4-Gny-1a
3777: PPUSH
3778: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3782: LD_EXP 30
3786: PPUSH
3787: LD_STRING D4-Gny-2
3789: PPUSH
3790: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3794: LD_EXP 23
3798: PPUSH
3799: LD_STRING D4-Pok-3
3801: PPUSH
3802: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3806: LD_INT 76
3808: PPUSH
3809: LD_INT 56
3811: PPUSH
3812: LD_INT 3
3814: PPUSH
3815: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3819: LD_EXP 22
3823: PPUSH
3824: CALL_OW 87
// InGameOff ;
3828: CALL_OW 9
// ComFree ( Burlak ) ;
3832: LD_EXP 22
3836: PPUSH
3837: CALL_OW 139
// end ;
3841: LD_VAR 0 1
3845: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3846: LD_EXP 24
3850: PUSH
3851: LD_EXP 25
3855: PUSH
3856: LD_EXP 26
3860: PUSH
3861: LD_EXP 27
3865: PUSH
3866: LD_EXP 28
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PPUSH
3878: LD_INT 101
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: IFFALSE 5492
3894: GO 3896
3896: DISABLE
// begin if hasGnyevko then
3897: LD_EXP 4
3901: IFFALSE 3981
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3903: LD_EXP 22
3907: PPUSH
3908: LD_EXP 30
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 4
3920: GREATER
3921: IFFALSE 3937
3923: PUSH
3924: LD_INT 6
3926: PPUSH
3927: LD_EXP 30
3931: PPUSH
3932: CALL_OW 292
3936: AND
3937: IFFALSE 3954
3939: PUSH
3940: LD_INT 6
3942: PPUSH
3943: LD_EXP 22
3947: PPUSH
3948: CALL_OW 292
3952: NOT
3953: AND
3954: IFFALSE 3981
// begin GnyevkoPokryshkinScene ;
3956: CALL 3682 0 0
// repeat wait ( 0 0$1 ) ;
3960: LD_INT 35
3962: PPUSH
3963: CALL_OW 67
// until See ( 6 , Burlak ) ;
3967: LD_INT 6
3969: PPUSH
3970: LD_EXP 22
3974: PPUSH
3975: CALL_OW 292
3979: IFFALSE 3960
// end ; end ; joinedToBelkov := true ;
3981: LD_ADDR_EXP 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// Video ( true ) ;
3989: LD_INT 1
3991: PPUSH
3992: CALL 48466 0 1
// ChangeSideFog ( 6 , 3 ) ;
3996: LD_INT 6
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
4006: LD_INT 76
4008: PPUSH
4009: LD_INT 56
4011: PPUSH
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 12
4017: PPUSH
4018: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
4022: LD_EXP 23
4026: PPUSH
4027: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
4031: LD_EXP 23
4035: PPUSH
4036: LD_EXP 22
4040: PPUSH
4041: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
4045: LD_EXP 23
4049: PPUSH
4050: LD_STRING D4-Pok-1
4052: PPUSH
4053: CALL_OW 88
// if gnyevkoMeetPokryshkin then
4057: LD_EXP 11
4061: IFFALSE 4077
// Say ( Gnyevko , D4-Gny-3 ) else
4063: LD_EXP 30
4067: PPUSH
4068: LD_STRING D4-Gny-3
4070: PPUSH
4071: CALL_OW 88
4075: GO 4135
// if hasGnyevko and IsOk ( Gnyevko ) then
4077: LD_EXP 4
4081: IFFALSE 4094
4083: PUSH
4084: LD_EXP 30
4088: PPUSH
4089: CALL_OW 302
4093: AND
4094: IFFALSE 4135
// begin SetSide ( Gnyevko , 6 ) ;
4096: LD_EXP 30
4100: PPUSH
4101: LD_INT 6
4103: PPUSH
4104: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
4108: LD_EXP 30
4112: PPUSH
4113: LD_STRING D4-Gny-1
4115: PPUSH
4116: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
4120: LD_EXP 30
4124: PPUSH
4125: LD_INT 83
4127: PPUSH
4128: LD_INT 60
4130: PPUSH
4131: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
4135: LD_EXP 22
4139: PPUSH
4140: LD_EXP 23
4144: PPUSH
4145: CALL_OW 112
// repeat wait ( 3 ) ;
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
4156: LD_EXP 22
4160: PPUSH
4161: LD_EXP 23
4165: PPUSH
4166: CALL_OW 296
4170: PUSH
4171: LD_INT 5
4173: LESS
4174: IFFALSE 4149
// ComTurnUnit ( Pokryshkin , Burlak ) ;
4176: LD_EXP 23
4180: PPUSH
4181: LD_EXP 22
4185: PPUSH
4186: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_EXP 23
4199: PPUSH
4200: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
4204: LD_EXP 22
4208: PPUSH
4209: LD_STRING D4-Bur-3
4211: PPUSH
4212: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4216: LD_EXP 23
4220: PPUSH
4221: LD_STRING D4-Pok-4
4223: PPUSH
4224: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4228: LD_EXP 32
4232: PPUSH
4233: LD_INT 31
4235: PPUSH
4236: LD_INT 51
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL_OW 48
// wait ( 0 0$2 ) ;
4246: LD_INT 70
4248: PPUSH
4249: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4253: LD_EXP 22
4257: PPUSH
4258: LD_STRING D4-Bur-4
4260: PPUSH
4261: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4265: LD_EXP 23
4269: PPUSH
4270: LD_STRING D4-Pok-5
4272: PPUSH
4273: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4277: LD_EXP 32
4281: PPUSH
4282: LD_STRING D4-Sol1-5
4284: PPUSH
4285: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4289: LD_EXP 23
4293: PPUSH
4294: LD_STRING D4-Pok-6
4296: PPUSH
4297: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4301: LD_EXP 23
4305: PPUSH
4306: LD_STRING D4-Pok-6a
4308: PPUSH
4309: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4313: LD_EXP 22
4317: PPUSH
4318: LD_STRING D4-Bur-6
4320: PPUSH
4321: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4325: LD_EXP 23
4329: PPUSH
4330: LD_STRING D4-Pok-7
4332: PPUSH
4333: CALL_OW 88
// Video ( false ) ;
4337: LD_INT 0
4339: PPUSH
4340: CALL 48466 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4344: LD_INT 76
4346: PPUSH
4347: LD_INT 56
4349: PPUSH
4350: LD_INT 3
4352: PPUSH
4353: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4357: LD_STRING M2
4359: PPUSH
4360: CALL_OW 337
// ComFree ( Burlak ) ;
4364: LD_EXP 22
4368: PPUSH
4369: CALL_OW 139
// followPokryshkin := true ;
4373: LD_ADDR_EXP 12
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4381: LD_INT 70
4383: PPUSH
4384: CALL_OW 67
// MoveToHill ;
4388: CALL 10109 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4392: LD_INT 65
4394: PPUSH
4395: LD_INT 57
4397: PPUSH
4398: LD_INT 3
4400: PPUSH
4401: LD_INT 9
4403: NEG
4404: PPUSH
4405: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4409: LD_INT 35
4411: PPUSH
4412: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4416: LD_EXP 23
4420: PPUSH
4421: LD_INT 65
4423: PPUSH
4424: LD_INT 59
4426: PPUSH
4427: CALL_OW 297
4431: PUSH
4432: LD_INT 5
4434: LESS
4435: IFFALSE 4409
// followPokryshkin := false ;
4437: LD_ADDR_EXP 12
4441: PUSH
4442: LD_INT 0
4444: ST_TO_ADDR
// InGameOn ;
4445: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4449: LD_EXP 23
4453: PPUSH
4454: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4458: LD_EXP 22
4462: PPUSH
4463: LD_INT 69
4465: PPUSH
4466: LD_INT 65
4468: PPUSH
4469: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4473: LD_EXP 32
4477: PPUSH
4478: LD_INT 58
4480: PPUSH
4481: LD_INT 57
4483: PPUSH
4484: CALL_OW 111
// repeat wait ( 3 ) ;
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4495: LD_EXP 32
4499: PPUSH
4500: LD_INT 58
4502: PPUSH
4503: LD_INT 57
4505: PPUSH
4506: CALL_OW 297
4510: PUSH
4511: LD_INT 4
4513: LESS
4514: IFFALSE 4488
// SetLives ( Brown , 300 ) ;
4516: LD_EXP 32
4520: PPUSH
4521: LD_INT 300
4523: PPUSH
4524: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4528: LD_EXP 32
4532: PPUSH
4533: LD_STRING D5-Sol1-1
4535: PPUSH
4536: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4540: LD_EXP 23
4544: PPUSH
4545: LD_STRING D5-Pok-1
4547: PPUSH
4548: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4552: LD_EXP 23
4556: PUSH
4557: LD_EXP 27
4561: PUSH
4562: LD_EXP 26
4566: PUSH
4567: LD_EXP 25
4571: PUSH
4572: LD_EXP 24
4576: PUSH
4577: LD_EXP 28
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PPUSH
4590: LD_EXP 32
4594: PPUSH
4595: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4599: LD_EXP 32
4603: PPUSH
4604: LD_STRING D5-Sol1-2
4606: PPUSH
4607: CALL_OW 91
// KillUnit ( Brown ) ;
4611: LD_EXP 32
4615: PPUSH
4616: CALL_OW 66
// ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4620: LD_EXP 23
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 26
4634: PUSH
4635: LD_EXP 25
4639: PUSH
4640: LD_EXP 24
4644: PUSH
4645: LD_EXP 28
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 138
// if hasGnyevko then
4662: LD_EXP 4
4666: IFFALSE 4677
// ComWalk ( Gnyevko ) ;
4668: LD_EXP 30
4672: PPUSH
4673: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4677: LD_EXP 23
4681: PPUSH
4682: LD_INT 60
4684: PPUSH
4685: LD_INT 56
4687: PPUSH
4688: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4692: LD_INT 18
4694: PPUSH
4695: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4699: LD_EXP 27
4703: PPUSH
4704: LD_INT 61
4706: PPUSH
4707: LD_INT 59
4709: PPUSH
4710: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4714: LD_EXP 23
4718: PPUSH
4719: LD_INT 58
4721: PPUSH
4722: LD_INT 57
4724: PPUSH
4725: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4729: LD_EXP 27
4733: PPUSH
4734: LD_INT 58
4736: PPUSH
4737: LD_INT 57
4739: PPUSH
4740: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4744: LD_EXP 22
4748: PPUSH
4749: LD_INT 62
4751: PPUSH
4752: LD_INT 58
4754: PPUSH
4755: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4759: LD_EXP 22
4763: PPUSH
4764: LD_INT 61
4766: PPUSH
4767: LD_INT 58
4769: PPUSH
4770: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4774: LD_EXP 27
4778: PPUSH
4779: LD_INT 58
4781: PPUSH
4782: LD_INT 57
4784: PPUSH
4785: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4789: LD_EXP 23
4793: PPUSH
4794: LD_STRING D4-Pok-2
4796: PPUSH
4797: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4801: LD_INT 10
4803: PPUSH
4804: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4808: LD_EXP 22
4812: PPUSH
4813: LD_STRING D5-Bur-2
4815: PPUSH
4816: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4820: LD_EXP 23
4824: PPUSH
4825: LD_STRING D5-Pok-2
4827: PPUSH
4828: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4832: LD_EXP 27
4836: PPUSH
4837: LD_EXP 22
4841: PPUSH
4842: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4846: LD_EXP 27
4850: PPUSH
4851: LD_STRING D5-Bel-2
4853: PPUSH
4854: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4858: LD_EXP 23
4862: PPUSH
4863: LD_EXP 27
4867: PPUSH
4868: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_STRING D5-Pok-3
4879: PPUSH
4880: CALL_OW 88
// if hasGnyevko then
4884: LD_EXP 4
4888: IFFALSE 4916
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4890: LD_EXP 30
4894: PPUSH
4895: LD_EXP 22
4899: PPUSH
4900: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4904: LD_EXP 30
4908: PPUSH
4909: LD_STRING D5-Gny-3
4911: PPUSH
4912: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4916: LD_EXP 22
4920: PPUSH
4921: LD_STRING D5-Bur-3
4923: PPUSH
4924: CALL_OW 88
// wait ( 0 0$2 ) ;
4928: LD_INT 70
4930: PPUSH
4931: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4935: LD_EXP 23
4939: PPUSH
4940: LD_INT 78
4942: PPUSH
4943: LD_INT 57
4945: PPUSH
4946: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4950: LD_EXP 23
4954: PPUSH
4955: LD_STRING D6-Pok-1
4957: PPUSH
4958: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4962: LD_EXP 22
4966: PPUSH
4967: LD_INT 75
4969: PPUSH
4970: LD_INT 56
4972: PPUSH
4973: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4977: LD_EXP 22
4981: PPUSH
4982: LD_INT 83
4984: PPUSH
4985: LD_INT 62
4987: PPUSH
4988: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
4992: LD_EXP 27
4996: PPUSH
4997: LD_INT 80
4999: PPUSH
5000: LD_INT 64
5002: PPUSH
5003: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
5007: LD_EXP 25
5011: PPUSH
5012: LD_INT 83
5014: PPUSH
5015: LD_INT 67
5017: PPUSH
5018: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
5022: LD_EXP 26
5026: PPUSH
5027: LD_INT 81
5029: PPUSH
5030: LD_INT 52
5032: PPUSH
5033: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
5037: LD_EXP 24
5041: PPUSH
5042: LD_INT 78
5044: PPUSH
5045: LD_INT 54
5047: PPUSH
5048: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
5052: LD_EXP 28
5056: PPUSH
5057: LD_INT 75
5059: PPUSH
5060: LD_INT 62
5062: PPUSH
5063: CALL_OW 111
// if hasGnyevko then
5067: LD_EXP 4
5071: IFFALSE 5102
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
5073: LD_EXP 30
5077: PPUSH
5078: LD_INT 77
5080: PPUSH
5081: LD_INT 60
5083: PPUSH
5084: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
5088: LD_EXP 30
5092: PPUSH
5093: LD_EXP 22
5097: PPUSH
5098: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
5102: LD_EXP 22
5106: PPUSH
5107: LD_STRING D6-Bur-1
5109: PPUSH
5110: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
5114: LD_INT 65
5116: PPUSH
5117: LD_INT 57
5119: PPUSH
5120: LD_INT 3
5122: PPUSH
5123: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
5127: LD_EXP 23
5131: PPUSH
5132: LD_INT 87
5134: PPUSH
5135: LD_INT 66
5137: PPUSH
5138: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
5142: LD_EXP 26
5146: PPUSH
5147: LD_INT 92
5149: PPUSH
5150: LD_INT 60
5152: PPUSH
5153: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
5157: LD_EXP 24
5161: PPUSH
5162: LD_INT 90
5164: PPUSH
5165: LD_INT 64
5167: PPUSH
5168: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_INT 87
5179: PPUSH
5180: LD_INT 73
5182: PPUSH
5183: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
5187: LD_EXP 28
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 69
5197: PPUSH
5198: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
5202: LD_EXP 27
5206: PPUSH
5207: LD_INT 90
5209: PPUSH
5210: LD_INT 71
5212: PPUSH
5213: CALL_OW 171
// if not dialogue_skipped then
5217: LD_OWVAR 59
5221: NOT
5222: IFFALSE 5234
// CenterOnXY ( 84 , 64 ) ;
5224: LD_INT 84
5226: PPUSH
5227: LD_INT 64
5229: PPUSH
5230: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5234: LD_EXP 23
5238: PPUSH
5239: LD_STRING D6-Pok-2
5241: PPUSH
5242: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5246: LD_EXP 25
5250: PPUSH
5251: LD_INT 113
5253: PPUSH
5254: LD_INT 104
5256: PPUSH
5257: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5261: LD_EXP 28
5265: PPUSH
5266: LD_INT 107
5268: PPUSH
5269: LD_INT 106
5271: PPUSH
5272: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5276: LD_EXP 24
5280: PPUSH
5281: LD_INT 125
5283: PPUSH
5284: LD_INT 97
5286: PPUSH
5287: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5291: LD_EXP 26
5295: PPUSH
5296: LD_INT 124
5298: PPUSH
5299: LD_INT 101
5301: PPUSH
5302: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5306: LD_EXP 27
5310: PPUSH
5311: LD_INT 119
5313: PPUSH
5314: LD_INT 101
5316: PPUSH
5317: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5321: LD_EXP 22
5325: PPUSH
5326: LD_EXP 23
5330: PPUSH
5331: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5335: LD_EXP 27
5339: PPUSH
5340: LD_STRING D6-Bel-2
5342: PPUSH
5343: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5347: LD_EXP 23
5351: PPUSH
5352: LD_INT 119
5354: PPUSH
5355: LD_INT 93
5357: PPUSH
5358: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5362: LD_EXP 22
5366: PPUSH
5367: LD_STRING D6-Bur-2
5369: PPUSH
5370: CALL_OW 88
// if not dialogue_skipped then
5374: LD_OWVAR 59
5378: NOT
5379: IFFALSE 5391
// CenterOnXY ( 105 , 82 ) ;
5381: LD_INT 105
5383: PPUSH
5384: LD_INT 82
5386: PPUSH
5387: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5391: LD_EXP 23
5395: PPUSH
5396: LD_STRING D6-Pok-3
5398: PPUSH
5399: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5403: LD_EXP 23
5407: PPUSH
5408: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5412: LD_EXP 29
5416: PPUSH
5417: LD_STRING D6-Kur-3
5419: PPUSH
5420: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5424: LD_EXP 25
5428: PUSH
5429: LD_EXP 27
5433: PUSH
5434: LD_EXP 24
5438: PUSH
5439: LD_EXP 22
5443: PUSH
5444: LD_EXP 26
5448: PUSH
5449: LD_EXP 28
5453: PUSH
5454: LD_EXP 30
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5472: LD_EXP 23
5476: PPUSH
5477: LD_STRING D6-Pok-4
5479: PPUSH
5480: CALL_OW 88
// InGameOff ;
5484: CALL_OW 9
// AttackOnTimsBase ;
5488: CALL 5493 0 0
// end ;
5492: END
// function AttackOnTimsBase ; var i , tmp ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
5497: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5498: LD_INT 6
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5514: LD_INT 3
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 69
5563: PUSH
5564: LD_EXP 23
5568: DIFF
5569: ST_TO_ADDR
// for i in tmp do
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_VAR 0 3
5579: PUSH
5580: FOR_IN
5581: IFFALSE 5597
// DoNotAttack ( 1 , i ) ;
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 2
5590: PPUSH
5591: CALL_OW 471
5595: GO 5580
5597: POP
5598: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5599: LD_EXP 23
5603: PPUSH
5604: LD_INT 65
5606: PPUSH
5607: LD_INT 40
5609: PPUSH
5610: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_INT 75
5621: PPUSH
5622: LD_INT 51
5624: PPUSH
5625: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5629: LD_EXP 27
5633: PPUSH
5634: LD_STRING D6-Bel-4
5636: PPUSH
5637: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5641: LD_EXP 23
5645: PPUSH
5646: LD_INT 57
5648: PPUSH
5649: LD_INT 30
5651: PPUSH
5652: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: LD_INT 60
5663: PPUSH
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5671: LD_INT 35
5673: PPUSH
5674: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5678: LD_EXP 23
5682: PPUSH
5683: LD_INT 65
5685: PPUSH
5686: LD_INT 40
5688: PPUSH
5689: CALL_OW 297
5693: PUSH
5694: LD_INT 4
5696: LESS
5697: IFFALSE 5671
// Say ( Pokryshkin , D7-Pok-1 ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_STRING D7-Pok-1
5706: PPUSH
5707: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5711: LD_INT 10
5713: PPUSH
5714: CALL_OW 67
// async ;
5718: ASYNC
// Say ( Holland , D7-FSol1-1 ) ;
5719: LD_EXP 34
5723: PPUSH
5724: LD_STRING D7-FSol1-1
5726: PPUSH
5727: CALL_OW 88
// sync ;
5731: SYNC
// repeat wait ( 0 0$1 ) ;
5732: LD_INT 35
5734: PPUSH
5735: CALL_OW 67
// until not IsOk ( Pokryshkin ) ;
5739: LD_EXP 23
5743: PPUSH
5744: CALL_OW 302
5748: NOT
5749: IFFALSE 5732
// Say ( Belkov , D7a-Bel-1 ) ;
5751: LD_EXP 27
5755: PPUSH
5756: LD_STRING D7a-Bel-1
5758: PPUSH
5759: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5763: LD_VAR 0 3
5767: PPUSH
5768: LD_INT 85
5770: PPUSH
5771: LD_INT 63
5773: PPUSH
5774: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5778: LD_EXP 24
5782: PPUSH
5783: LD_STRING D7a-RSol1-1
5785: PPUSH
5786: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5790: LD_EXP 34
5794: PPUSH
5795: LD_STRING D7a-FSol1-1
5797: PPUSH
5798: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5802: LD_INT 35
5804: PPUSH
5805: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5809: LD_EXP 27
5813: PPUSH
5814: LD_INT 85
5816: PPUSH
5817: LD_INT 63
5819: PPUSH
5820: CALL_OW 297
5824: PUSH
5825: LD_INT 8
5827: LESS
5828: IFFALSE 5802
// for i in tmp do
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: FOR_IN
5841: IFFALSE 5857
// NormalAttack ( 1 , i ) ;
5843: LD_INT 1
5845: PPUSH
5846: LD_VAR 0 2
5850: PPUSH
5851: CALL_OW 472
5855: GO 5840
5857: POP
5858: POP
// InGameOn ;
5859: CALL_OW 8
// ComHold ( Burlak ) ;
5863: LD_EXP 22
5867: PPUSH
5868: CALL_OW 140
// CenterNowOnUnits ( Belkov ) ;
5872: LD_EXP 27
5876: PPUSH
5877: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5881: LD_EXP 27
5885: PPUSH
5886: LD_STRING D7b-Bel-1
5888: PPUSH
5889: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5893: LD_EXP 27
5897: PPUSH
5898: LD_EXP 25
5902: PPUSH
5903: CALL_OW 119
// for i in tmp diff Belkov do
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: LD_VAR 0 3
5916: PUSH
5917: LD_EXP 27
5921: DIFF
5922: PUSH
5923: FOR_IN
5924: IFFALSE 5942
// ComTurnUnit ( i , Belkov ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_EXP 27
5935: PPUSH
5936: CALL_OW 119
5940: GO 5923
5942: POP
5943: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5944: LD_EXP 25
5948: PPUSH
5949: LD_STRING D7b-FSol1-1
5951: PPUSH
5952: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5956: LD_EXP 27
5960: PPUSH
5961: LD_STRING D7b-Bel-2
5963: PPUSH
5964: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5968: LD_EXP 24
5972: PPUSH
5973: LD_STRING D7b-RSol1-2
5975: PPUSH
5976: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5980: LD_EXP 27
5984: PPUSH
5985: LD_EXP 22
5989: PPUSH
5990: CALL_OW 296
5994: PUSH
5995: LD_INT 10
5997: GREATER
5998: IFFALSE 6096
// begin Say ( Belkov , D7b-Bel-3 ) ;
6000: LD_EXP 27
6004: PPUSH
6005: LD_STRING D7b-Bel-3
6007: PPUSH
6008: CALL_OW 88
// InGameOff ;
6012: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
6016: LD_INT 35
6018: PPUSH
6019: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
6023: LD_EXP 22
6027: PPUSH
6028: LD_EXP 27
6032: PPUSH
6033: CALL_OW 296
6037: PUSH
6038: LD_INT 10
6040: LESSEQUAL
6041: IFFALSE 6016
// InGameOn ;
6043: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
6047: LD_EXP 22
6051: PPUSH
6052: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6056: LD_EXP 22
6060: PPUSH
6061: LD_EXP 27
6065: PPUSH
6066: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
6070: LD_EXP 27
6074: PPUSH
6075: LD_EXP 22
6079: PPUSH
6080: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
6084: LD_EXP 27
6088: PPUSH
6089: LD_STRING D7b-Bel-3a
6091: PPUSH
6092: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
6096: LD_EXP 22
6100: PPUSH
6101: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6105: LD_EXP 22
6109: PPUSH
6110: LD_EXP 27
6114: PPUSH
6115: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
6119: LD_EXP 22
6123: PPUSH
6124: LD_STRING D7b-Bur-3
6126: PPUSH
6127: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
6131: LD_EXP 22
6135: PPUSH
6136: LD_EXP 27
6140: PPUSH
6141: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
6145: LD_VAR 0 3
6149: PPUSH
6150: LD_EXP 22
6154: PPUSH
6155: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
6159: LD_EXP 27
6163: PPUSH
6164: LD_STRING D7b-Bel-4
6166: PPUSH
6167: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
6171: LD_EXP 22
6175: PPUSH
6176: LD_STRING D7b-Bur-4
6178: PPUSH
6179: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
6183: LD_EXP 27
6187: PPUSH
6188: LD_STRING D7b-Bel-5
6190: PPUSH
6191: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
6195: LD_EXP 25
6199: PPUSH
6200: LD_STRING D7b-FSol1-5
6202: PPUSH
6203: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
6207: LD_EXP 27
6211: PPUSH
6212: LD_STRING D7b-Bel-6
6214: PPUSH
6215: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
6219: LD_EXP 22
6223: PPUSH
6224: LD_STRING D7b-Bur-6
6226: PPUSH
6227: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
6231: LD_EXP 24
6235: PPUSH
6236: LD_STRING D7b-RSol1-6
6238: PPUSH
6239: CALL_OW 88
// InGameOff ;
6243: CALL_OW 9
// for i in tmp do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: LD_VAR 0 3
6256: PUSH
6257: FOR_IN
6258: IFFALSE 6274
// SetSide ( i , 3 ) ;
6260: LD_VAR 0 2
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: CALL_OW 235
6272: GO 6257
6274: POP
6275: POP
// ChangeMissionObjectives ( M3 ) ;
6276: LD_STRING M3
6278: PPUSH
6279: CALL_OW 337
// burlakAsCommander := true ;
6283: LD_ADDR_EXP 14
6287: PUSH
6288: LD_INT 1
6290: ST_TO_ADDR
// end ;
6291: LD_VAR 0 1
6295: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6296: LD_EXP 12
6300: IFFALSE 6322
6302: PUSH
6303: LD_EXP 23
6307: PPUSH
6308: LD_EXP 22
6312: PPUSH
6313: CALL_OW 296
6317: PUSH
6318: LD_INT 10
6320: GREATER
6321: AND
6322: IFFALSE 6468
6324: GO 6326
6326: DISABLE
// begin InGameOn ;
6327: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6331: LD_EXP 23
6335: PPUSH
6336: LD_EXP 22
6340: PPUSH
6341: CALL_OW 119
// ComHold ( Burlak ) ;
6345: LD_EXP 22
6349: PPUSH
6350: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6354: LD_EXP 23
6358: PPUSH
6359: LD_STRING DSplit-Pok-1
6361: PPUSH
6362: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6366: LD_EXP 22
6370: PPUSH
6371: LD_EXP 23
6375: PPUSH
6376: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6380: LD_EXP 22
6384: PPUSH
6385: LD_STRING DSplit-Bur-1
6387: PPUSH
6388: CALL_OW 88
// repeat wait ( 3 ) ;
6392: LD_INT 3
6394: PPUSH
6395: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6399: LD_EXP 23
6403: PPUSH
6404: LD_EXP 22
6408: PPUSH
6409: CALL_OW 296
6413: PUSH
6414: LD_INT 6
6416: LESS
6417: IFFALSE 6392
// InGameOff ;
6419: CALL_OW 9
// ComFree ( Burlak ) ;
6423: LD_EXP 22
6427: PPUSH
6428: CALL_OW 139
// if IsOk ( Brown ) then
6432: LD_EXP 32
6436: PPUSH
6437: CALL_OW 302
6441: IFFALSE 6467
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6443: LD_EXP 23
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 59
6453: PPUSH
6454: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6458: LD_EXP 23
6462: PPUSH
6463: CALL_OW 197
// end ; enable ;
6467: ENABLE
// end ;
6468: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6469: LD_EXP 13
6473: IFFALSE 6486
6475: PUSH
6476: LD_EXP 23
6480: PPUSH
6481: CALL_OW 302
6485: AND
6486: IFFALSE 6494
6488: PUSH
6489: LD_EXP 3
6493: AND
6494: IFFALSE 6526
6496: GO 6498
6498: DISABLE
// begin DialogueOn ;
6499: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6503: LD_EXP 23
6507: PPUSH
6508: LD_STRING DAttack-Pok-1
6510: PPUSH
6511: CALL_OW 88
// DialogueOff ;
6515: CALL_OW 7
// YouLost ( Ally ) ;
6519: LD_STRING Ally
6521: PPUSH
6522: CALL_OW 104
// end ;
6526: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6527: LD_INT 18
6529: PPUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 25
6542: PUSH
6543: LD_INT 1
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 70
6558: IFFALSE 6569
6560: PUSH
6561: LD_INT 3
6563: PPUSH
6564: CALL_OW 302
6568: AND
6569: IFFALSE 6581
6571: GO 6573
6573: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6574: LD_STRING ACH_BACKENTRANCE
6576: PPUSH
6577: CALL_OW 543
6581: END
// every 0 0$1 trigger burlakAsCommander do
6582: LD_EXP 14
6586: IFFALSE 6750
6588: GO 6590
6590: DISABLE
// begin if Difficulty > 1 then
6591: LD_OWVAR 67
6595: PUSH
6596: LD_INT 1
6598: GREATER
6599: IFFALSE 6611
// SetLives ( usBun1 , 1000 ) ;
6601: LD_INT 3
6603: PPUSH
6604: LD_INT 1000
6606: PPUSH
6607: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6611: LD_INT 35
6613: PPUSH
6614: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 22
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 21
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 69
6649: PPUSH
6650: CALL 51939 0 2
6654: IFFALSE 6611
// Say ( Holland , D8-FSol1-1 ) ;
6656: LD_EXP 34
6660: PPUSH
6661: LD_STRING D8-FSol1-1
6663: PPUSH
6664: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6668: LD_EXP 33
6672: PPUSH
6673: LD_STRING D8-Glad-1
6675: PPUSH
6676: CALL_OW 88
// activeAmericanScript := true ;
6680: LD_ADDR_EXP 15
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6688: LD_EXP 22
6692: PPUSH
6693: LD_STRING D8-Bur-1
6695: PPUSH
6696: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6700: LD_INT 70
6702: PPUSH
6703: CALL_OW 67
// if not IsOk ( usBun1 ) then
6707: LD_INT 3
6709: PPUSH
6710: CALL_OW 302
6714: NOT
6715: IFFALSE 6719
// exit ;
6717: GO 6750
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6719: LD_INT 14
6721: PPUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 70
6736: IFFALSE 6700
// Say ( Holland , D8-FSol1-2 ) ;
6738: LD_EXP 34
6742: PPUSH
6743: LD_STRING D8-FSol1-2
6745: PPUSH
6746: CALL_OW 88
// end ;
6750: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6751: LD_EXP 33
6755: PPUSH
6756: LD_INT 15
6758: PPUSH
6759: CALL_OW 308
6763: IFTRUE 6782
6765: PUSH
6766: LD_EXP 33
6770: PPUSH
6771: LD_INT 71
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 307
6781: OR
6782: IFFALSE 6814
6784: GO 6786
6786: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6787: LD_EXP 33
6791: PPUSH
6792: CALL_OW 64
// gladstoneEscaped := true ;
6796: LD_ADDR_EXP 16
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6804: LD_INT 1
6806: PPUSH
6807: LD_STRING 01_GladstoneEscaped
6809: PPUSH
6810: CALL_OW 39
// end ;
6814: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6815: LD_EXP 34
6819: PPUSH
6820: LD_INT 15
6822: PPUSH
6823: CALL_OW 308
6827: IFTRUE 6846
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_INT 72
6837: PPUSH
6838: LD_INT 1
6840: PPUSH
6841: CALL_OW 307
6845: OR
6846: IFFALSE 6878
6848: GO 6850
6850: DISABLE
// begin RemoveUnit ( Holland ) ;
6851: LD_EXP 34
6855: PPUSH
6856: CALL_OW 64
// hollandEscaped := true ;
6860: LD_ADDR_EXP 17
6864: PUSH
6865: LD_INT 1
6867: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6868: LD_INT 1
6870: PPUSH
6871: LD_STRING 01_HollandEscaped
6873: PPUSH
6874: CALL_OW 39
// end ;
6878: END
// every 0 0$1 trigger IsInArea ( Mel , escapeArea ) or IsAt ( Mel , 70 , 1 ) do
6879: LD_EXP 35
6883: PPUSH
6884: LD_INT 15
6886: PPUSH
6887: CALL_OW 308
6891: IFTRUE 6910
6893: PUSH
6894: LD_EXP 35
6898: PPUSH
6899: LD_INT 70
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 307
6909: OR
6910: IFFALSE 6942
6912: GO 6914
6914: DISABLE
// begin RemoveUnit ( Mel ) ;
6915: LD_EXP 35
6919: PPUSH
6920: CALL_OW 64
// MelEscaped := true ;
6924: LD_ADDR_EXP 18
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// SaveVariable ( 1 , 01_MelEscaped ) ;
6932: LD_INT 1
6934: PPUSH
6935: LD_STRING 01_MelEscaped
6937: PPUSH
6938: CALL_OW 39
// end ;
6942: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6943: LD_INT 3
6945: PPUSH
6946: CALL_OW 302
6950: NOT
6951: IFFALSE 8610
6953: GO 6955
6955: DISABLE
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
// begin activeAmericanScript := false ;
6961: LD_ADDR_EXP 15
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6969: LD_EXP 33
6973: PPUSH
6974: CALL_OW 310
6978: IFFALSE 6989
// ComExitBuilding ( Gladstone ) ;
6980: LD_EXP 33
6984: PPUSH
6985: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
6989: LD_EXP 33
6993: PPUSH
6994: LD_INT 71
6996: PPUSH
6997: LD_INT 1
6999: PPUSH
7000: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
7004: LD_EXP 34
7008: PPUSH
7009: LD_INT 72
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: CALL_OW 111
// ComMoveXY ( Mel , 70 , 1 ) ;
7019: LD_EXP 35
7023: PPUSH
7024: LD_INT 70
7026: PPUSH
7027: LD_INT 1
7029: PPUSH
7030: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
7034: LD_EXP 34
7038: PPUSH
7039: LD_STRING D8-FSol1-2a
7041: PPUSH
7042: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
7046: LD_EXP 33
7050: PPUSH
7051: LD_STRING D8-Glad-2
7053: PPUSH
7054: CALL_OW 88
// wait ( 0 0$1 ) ;
7058: LD_INT 35
7060: PPUSH
7061: CALL_OW 67
// if IsOk ( Gladstone ) then
7065: LD_EXP 33
7069: PPUSH
7070: CALL_OW 302
7074: IFFALSE 7163
// begin DialogueOn ;
7076: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
7080: LD_EXP 33
7084: PPUSH
7085: CALL_OW 250
7089: PPUSH
7090: LD_EXP 33
7094: PPUSH
7095: CALL_OW 251
7099: PPUSH
7100: LD_INT 3
7102: PPUSH
7103: LD_INT 3
7105: NEG
7106: PPUSH
7107: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
7111: LD_EXP 33
7115: PPUSH
7116: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
7120: LD_EXP 22
7124: PPUSH
7125: LD_STRING D8-Bur-2
7127: PPUSH
7128: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
7132: LD_EXP 33
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_EXP 33
7146: PPUSH
7147: CALL_OW 251
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 331
// DialogueOff ;
7159: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7163: LD_INT 35
7165: PPUSH
7166: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
7170: LD_EXP 33
7174: PPUSH
7175: CALL_OW 302
7179: NOT
7180: IFFALSE 7194
7182: PUSH
7183: LD_EXP 34
7187: PPUSH
7188: CALL_OW 302
7192: NOT
7193: AND
7194: IFFALSE 7163
// if gladstoneEscaped and hollandEscaped then
7196: LD_EXP 16
7200: IFFALSE 7208
7202: PUSH
7203: LD_EXP 17
7207: AND
7208: IFFALSE 7224
// Say ( Burlak , D9-Bur-1c ) else
7210: LD_EXP 22
7214: PPUSH
7215: LD_STRING D9-Bur-1c
7217: PPUSH
7218: CALL_OW 88
7222: GO 7276
// if hollandEscaped then
7224: LD_EXP 17
7228: IFFALSE 7244
// Say ( Burlak , D9-Bur-1b ) else
7230: LD_EXP 22
7234: PPUSH
7235: LD_STRING D9-Bur-1b
7237: PPUSH
7238: CALL_OW 88
7242: GO 7276
// if gladstoneEscaped then
7244: LD_EXP 16
7248: IFFALSE 7264
// Say ( Burlak , D9-Bur-1a ) else
7250: LD_EXP 22
7254: PPUSH
7255: LD_STRING D9-Bur-1a
7257: PPUSH
7258: CALL_OW 88
7262: GO 7276
// Say ( Burlak , D9-Bur-1 ) ;
7264: LD_EXP 22
7268: PPUSH
7269: LD_STRING D9-Bur-1
7271: PPUSH
7272: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7276: LD_INT 35
7278: PPUSH
7279: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7283: LD_INT 22
7285: PUSH
7286: LD_INT 1
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: LD_INT 50
7295: PUSH
7296: EMPTY
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: NOT
7308: IFFALSE 7276
// DialogueOn ;
7310: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7314: LD_EXP 27
7318: PPUSH
7319: LD_STRING D10-Bel-1
7321: PPUSH
7322: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7326: LD_EXP 22
7330: PPUSH
7331: LD_STRING D10-Bur-1
7333: PPUSH
7334: CALL_OW 88
// if IsOk ( Belkov ) then
7338: LD_EXP 27
7342: PPUSH
7343: CALL_OW 302
7347: IFFALSE 7363
// Say ( Belkov , D10-Bel-1a ) else
7349: LD_EXP 27
7353: PPUSH
7354: LD_STRING D10-Bel-1a
7356: PPUSH
7357: CALL_OW 88
7361: GO 7436
// if IsOk ( Saseda ) then
7363: LD_EXP 24
7367: PPUSH
7368: CALL_OW 302
7372: IFFALSE 7388
// Say ( Saseda , D10-RSol1-1 ) else
7374: LD_EXP 24
7378: PPUSH
7379: LD_STRING D10-RSol1-1
7381: PPUSH
7382: CALL_OW 88
7386: GO 7436
// if IsOk ( Balei ) then
7388: LD_EXP 26
7392: PPUSH
7393: CALL_OW 302
7397: IFFALSE 7413
// Say ( Balei , D10-RSol1-1 ) else
7399: LD_EXP 26
7403: PPUSH
7404: LD_STRING D10-RSol1-1
7406: PPUSH
7407: CALL_OW 88
7411: GO 7436
// if IsOk ( Jaunzeme ) then
7413: LD_EXP 28
7417: PPUSH
7418: CALL_OW 302
7422: IFFALSE 7436
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7424: LD_EXP 28
7428: PPUSH
7429: LD_STRING D10-RSol1-1
7431: PPUSH
7432: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7436: LD_ADDR_VAR 0 1
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 25
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 26
7463: PUSH
7464: LD_INT 1
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: PUSH
7481: LD_EXP 22
7485: PUSH
7486: LD_EXP 30
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: DIFF
7495: ST_TO_ADDR
// if tmp then
7496: LD_VAR 0 1
7500: IFFALSE 7514
// Say ( Burlak , D10-Bur-2 ) ;
7502: LD_EXP 22
7506: PPUSH
7507: LD_STRING D10-Bur-2
7509: PPUSH
7510: CALL_OW 88
// DialogueOff ;
7514: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7518: LD_EXP 16
7522: IFTRUE 7530
7524: PUSH
7525: LD_EXP 17
7529: OR
7530: IFFALSE 7541
// ChangeMissionObjectives ( M4b ) else
7532: LD_STRING M4b
7534: PPUSH
7535: CALL_OW 337
7539: GO 7548
// ChangeMissionObjectives ( M4a ) ;
7541: LD_STRING M4a
7543: PPUSH
7544: CALL_OW 337
// canEnd := true ;
7548: LD_ADDR_EXP 19
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7556: LD_INT 16
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7566: LD_INT 700
7568: PPUSH
7569: LD_INT 1400
7571: PPUSH
7572: CALL_OW 12
7576: PPUSH
7577: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7581: LD_INT 35
7583: PPUSH
7584: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7588: LD_EXP 31
7592: PPUSH
7593: LD_INT 12
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 49
7603: IFFALSE 7581
// if not See ( 3 , Kirilenkova ) then
7605: LD_INT 3
7607: PPUSH
7608: LD_EXP 31
7612: PPUSH
7613: CALL_OW 292
7617: NOT
7618: IFFALSE 8071
// begin DialogueOn ;
7620: CALL_OW 6
// InGameOn ;
7624: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7628: LD_EXP 31
7632: PPUSH
7633: LD_STRING D11b-Kir-1
7635: PPUSH
7636: CALL_OW 586
// if IsOk ( Belkov ) then
7640: LD_EXP 27
7644: PPUSH
7645: CALL_OW 302
7649: IFFALSE 7677
// begin Say ( Belkov , D11b-Bel-1 ) ;
7651: LD_EXP 27
7655: PPUSH
7656: LD_STRING D11b-Bel-1
7658: PPUSH
7659: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7663: LD_EXP 27
7667: PPUSH
7668: LD_STRING D11b-Bel-1a
7670: PPUSH
7671: CALL_OW 88
// end else
7675: GO 7750
// if IsOk ( Jaworska ) then
7677: LD_EXP 25
7681: PPUSH
7682: CALL_OW 302
7686: IFFALSE 7702
// Say ( Jaworska , D11b-RFSol1-1 ) else
7688: LD_EXP 25
7692: PPUSH
7693: LD_STRING D11b-RFSol1-1
7695: PPUSH
7696: CALL_OW 88
7700: GO 7750
// if IsOk ( Saseda ) then
7702: LD_EXP 24
7706: PPUSH
7707: CALL_OW 302
7711: IFFALSE 7727
// Say ( Saseda , D11b-RSol1-1 ) else
7713: LD_EXP 24
7717: PPUSH
7718: LD_STRING D11b-RSol1-1
7720: PPUSH
7721: CALL_OW 88
7725: GO 7750
// if IsOk ( Balei ) then
7727: LD_EXP 26
7731: PPUSH
7732: CALL_OW 302
7736: IFFALSE 7750
// Say ( Balei , D11b-RSol1-1 ) ;
7738: LD_EXP 26
7742: PPUSH
7743: LD_STRING D11b-RSol1-1
7745: PPUSH
7746: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7750: LD_INT 22
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 25
7762: PUSH
7763: LD_INT 12
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 91
7772: PUSH
7773: LD_EXP 31
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 69
7795: IFFALSE 7873
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7797: LD_EXP 31
7801: PPUSH
7802: LD_STRING D11b1-Kir-1
7804: PPUSH
7805: CALL_OW 586
// if attackedByApe then
7809: LD_EXP 7
7813: IFFALSE 7841
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7815: LD_EXP 22
7819: PPUSH
7820: LD_STRING D11b1-Bur-1
7822: PPUSH
7823: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7827: LD_EXP 27
7831: PPUSH
7832: LD_STRING D11b2-Bel-1
7834: PPUSH
7835: CALL_OW 88
// end else
7839: GO 7871
// if waterfallSpotted then
7841: LD_EXP 8
7845: IFFALSE 7871
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7847: LD_EXP 22
7851: PPUSH
7852: LD_STRING D11b1-Bur-1a
7854: PPUSH
7855: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7859: LD_EXP 27
7863: PPUSH
7864: LD_STRING D11b2-Bel-1
7866: PPUSH
7867: CALL_OW 88
// end ; end else
7871: GO 7915
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7873: LD_EXP 31
7877: PPUSH
7878: LD_STRING D11b2-Kir-1
7880: PPUSH
7881: CALL_OW 586
// if waterfallSpotted then
7885: LD_EXP 8
7889: IFFALSE 7915
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7891: LD_EXP 22
7895: PPUSH
7896: LD_STRING D11b1-Bur-1a
7898: PPUSH
7899: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7903: LD_EXP 27
7907: PPUSH
7908: LD_STRING D11b2-Bel-1
7910: PPUSH
7911: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7915: LD_EXP 8
7919: NOT
7920: IFFALSE 7929
7922: PUSH
7923: LD_EXP 7
7927: NOT
7928: AND
7929: IFFALSE 8029
// begin if IsOk ( Belkov ) then
7931: LD_EXP 27
7935: PPUSH
7936: CALL_OW 302
7940: IFFALSE 7956
// Say ( Belkov , D11b1-Bel-1 ) else
7942: LD_EXP 27
7946: PPUSH
7947: LD_STRING D11b1-Bel-1
7949: PPUSH
7950: CALL_OW 88
7954: GO 8029
// if IsOk ( Saseda ) then
7956: LD_EXP 24
7960: PPUSH
7961: CALL_OW 302
7965: IFFALSE 7981
// Say ( Saseda , D11b1-RSol1-1 ) else
7967: LD_EXP 24
7971: PPUSH
7972: LD_STRING D11b1-RSol1-1
7974: PPUSH
7975: CALL_OW 88
7979: GO 8029
// if IsOk ( Jaworska ) then
7981: LD_EXP 25
7985: PPUSH
7986: CALL_OW 302
7990: IFFALSE 8006
// Say ( Jaworska , D11b1-RFSol1-1 ) else
7992: LD_EXP 25
7996: PPUSH
7997: LD_STRING D11b1-RFSol1-1
7999: PPUSH
8000: CALL_OW 88
8004: GO 8029
// if IsOk ( Balei ) then
8006: LD_EXP 26
8010: PPUSH
8011: CALL_OW 302
8015: IFFALSE 8029
// Say ( Balei , D11b1-RSol1-1 ) ;
8017: LD_EXP 26
8021: PPUSH
8022: LD_STRING D11b1-RSol1-1
8024: PPUSH
8025: CALL_OW 88
// end ; DialogueOff ;
8029: CALL_OW 7
// InGameOff ;
8033: CALL_OW 9
// wait ( 1 1$00 - ( 0 0$10 * Difficulty ) ) ;
8037: LD_INT 2100
8039: PUSH
8040: LD_INT 350
8042: PUSH
8043: LD_OWVAR 67
8047: MUL
8048: MINUS
8049: PPUSH
8050: CALL_OW 67
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
8054: LD_EXP 31
8058: PPUSH
8059: LD_INT 75
8061: PPUSH
8062: LD_INT 95
8064: PPUSH
8065: CALL_OW 111
// end else
8069: GO 8307
// begin DialogueOn ;
8071: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
8075: LD_EXP 31
8079: PPUSH
8080: LD_INT 3
8082: PPUSH
8083: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8087: LD_EXP 31
8091: PPUSH
8092: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8096: LD_EXP 31
8100: PPUSH
8101: LD_STRING D11a-Kir-1
8103: PPUSH
8104: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8108: LD_EXP 31
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: CALL_OW 296
8122: PUSH
8123: LD_INT 8
8125: LESS
8126: IFFALSE 8140
// Say ( Belkov , D11a-Bel-1 ) ;
8128: LD_EXP 27
8132: PPUSH
8133: LD_STRING D11a-Bel-1
8135: PPUSH
8136: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8140: LD_EXP 31
8144: PPUSH
8145: LD_STRING D11a-Kir-2
8147: PPUSH
8148: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8152: LD_EXP 31
8156: PPUSH
8157: LD_EXP 27
8161: PPUSH
8162: CALL_OW 296
8166: PUSH
8167: LD_INT 8
8169: LESS
8170: IFFALSE 8186
// Say ( Belkov , D11a-Bel-2 ) else
8172: LD_EXP 27
8176: PPUSH
8177: LD_STRING D11a-Bel-2
8179: PPUSH
8180: CALL_OW 88
8184: GO 8286
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
8186: LD_EXP 31
8190: PPUSH
8191: LD_EXP 24
8195: PPUSH
8196: CALL_OW 296
8200: PUSH
8201: LD_INT 8
8203: LESS
8204: IFFALSE 8220
// Say ( Saseda , D11a-RSol1-2 ) else
8206: LD_EXP 24
8210: PPUSH
8211: LD_STRING D11a-RSol1-2
8213: PPUSH
8214: CALL_OW 88
8218: GO 8286
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
8220: LD_EXP 31
8224: PPUSH
8225: LD_EXP 25
8229: PPUSH
8230: CALL_OW 296
8234: PUSH
8235: LD_INT 8
8237: LESS
8238: IFFALSE 8254
// Say ( Jaworska , D11a-RFSol1-2 ) else
8240: LD_EXP 25
8244: PPUSH
8245: LD_STRING D11a-RFSol1-2
8247: PPUSH
8248: CALL_OW 88
8252: GO 8286
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
8254: LD_EXP 31
8258: PPUSH
8259: LD_EXP 26
8263: PPUSH
8264: CALL_OW 296
8268: PUSH
8269: LD_INT 8
8271: LESS
8272: IFFALSE 8286
// Say ( Balei , D11a-RSol1-2 ) ;
8274: LD_EXP 26
8278: PPUSH
8279: LD_STRING D11a-RSol1-2
8281: PPUSH
8282: CALL_OW 88
// DialogueOff ;
8286: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8290: LD_STRING ACH_YELENA
8292: PPUSH
8293: CALL_OW 543
// hasKirilenkova := true ;
8297: LD_ADDR_EXP 5
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// exit ;
8305: GO 8610
// end ; p := 0 ;
8307: LD_ADDR_VAR 0 3
8311: PUSH
8312: LD_INT 0
8314: ST_TO_ADDR
// if Difficulty > 2 then
8315: LD_OWVAR 67
8319: PUSH
8320: LD_INT 2
8322: GREATER
8323: IFFALSE 8403
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8325: LD_INT 5
8327: NEG
8328: PUSH
8329: LD_INT 8
8331: NEG
8332: PUSH
8333: LD_INT 10
8335: NEG
8336: PUSH
8337: LD_INT 12
8339: NEG
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: PUSH
8347: LD_OWVAR 67
8351: ARRAY
8352: PPUSH
8353: CALL 44621 0 1
// ape := CreateHuman ;
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: CALL_OW 44
8366: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8367: LD_VAR 0 2
8371: PPUSH
8372: LD_INT 65
8374: PPUSH
8375: LD_INT 89
8377: PPUSH
8378: LD_INT 2
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8388: LD_VAR 0 2
8392: PPUSH
8393: LD_INT 74
8395: PPUSH
8396: LD_INT 94
8398: PPUSH
8399: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8403: LD_INT 35
8405: PPUSH
8406: CALL_OW 67
// p := Inc ( p ) ;
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: CALL 49867 0 1
8424: ST_TO_ADDR
// if p > 120 and IsOk ( ape ) and not HasTask ( ape ) then
8425: LD_VAR 0 3
8429: PUSH
8430: LD_INT 120
8432: GREATER
8433: IFFALSE 8446
8435: PUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL_OW 302
8445: AND
8446: IFFALSE 8460
8448: PUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL_OW 314
8458: NOT
8459: AND
8460: IFFALSE 8476
// ComAttackUnit ( ape , Kirilenkova ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_EXP 31
8471: PPUSH
8472: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8476: LD_INT 3
8478: PPUSH
8479: LD_EXP 31
8483: PPUSH
8484: CALL_OW 292
8488: IFFALSE 8501
8490: PUSH
8491: LD_EXP 31
8495: PPUSH
8496: CALL_OW 302
8500: AND
8501: IFFALSE 8403
// if p < 15 then
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 15
8510: LESS
8511: IFFALSE 8520
// SetAchievement ( ACH_YELENA ) ;
8513: LD_STRING ACH_YELENA
8515: PPUSH
8516: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8520: LD_EXP 31
8524: PPUSH
8525: LD_EXP 22
8529: PPUSH
8530: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8534: LD_INT 10
8536: PPUSH
8537: CALL_OW 67
// DialogueOn ;
8541: CALL_OW 6
// InGameOn ;
8545: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8549: LD_EXP 31
8553: PPUSH
8554: LD_INT 3
8556: PPUSH
8557: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8561: LD_EXP 31
8565: PPUSH
8566: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8570: LD_EXP 31
8574: PPUSH
8575: LD_STRING D11c-Kir-1
8577: PPUSH
8578: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8582: LD_EXP 22
8586: PPUSH
8587: LD_STRING D11c-Bur-1
8589: PPUSH
8590: CALL_OW 88
// DialogueOff ;
8594: CALL_OW 7
// InGameOff ;
8598: CALL_OW 9
// hasKirilenkova := true ;
8602: LD_ADDR_EXP 5
8606: PUSH
8607: LD_INT 1
8609: ST_TO_ADDR
// end ;
8610: PPOPN 3
8612: END
// every 0 0$1 trigger joinedToBelkov and not UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_alive ] ) do
8613: LD_EXP 3
8617: IFFALSE 8664
8619: PUSH
8620: LD_EXP 24
8624: PUSH
8625: LD_EXP 25
8629: PUSH
8630: LD_EXP 26
8634: PUSH
8635: LD_EXP 27
8639: PUSH
8640: LD_EXP 28
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PPUSH
8652: LD_INT 51
8654: PUSH
8655: EMPTY
8656: LIST
8657: PPUSH
8658: CALL_OW 72
8662: NOT
8663: AND
8664: IFFALSE 8676
8666: GO 8668
8668: DISABLE
// begin YouLost ( Comrades ) ;
8669: LD_STRING Comrades
8671: PPUSH
8672: CALL_OW 104
// end ;
8676: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8677: LD_EXP 19
8681: IFFALSE 8697
8683: PUSH
8684: LD_EXP 22
8688: PPUSH
8689: LD_INT 16
8691: PPUSH
8692: CALL_OW 308
8696: AND
8697: IFFALSE 9086
8699: GO 8701
8701: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8702: LD_INT 22
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 50
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 95
8733: PUSH
8734: LD_INT 16
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 69
8755: IFFALSE 8764
// Query ( QExit1 ) ;
8757: LD_STRING QExit1
8759: PPUSH
8760: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8764: LD_INT 35
8766: PPUSH
8767: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8771: LD_INT 22
8773: PUSH
8774: LD_INT 3
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 21
8783: PUSH
8784: LD_INT 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 50
8793: PUSH
8794: EMPTY
8795: LIST
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: LD_INT 95
8802: PUSH
8803: LD_INT 16
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: NOT
8825: IFFALSE 8764
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8827: LD_EXP 27
8831: PUSH
8832: LD_EXP 24
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PPUSH
8841: LD_INT 157
8843: PPUSH
8844: LD_INT 118
8846: PPUSH
8847: CALL_OW 73
8851: PUSH
8852: LD_EXP 27
8856: EQUAL
8857: IFFALSE 8870
8859: PUSH
8860: LD_EXP 27
8864: PPUSH
8865: CALL_OW 302
8869: AND
8870: IFFALSE 8886
// Say ( Belkov , D12-Bel-1 ) else
8872: LD_EXP 27
8876: PPUSH
8877: LD_STRING D12-Bel-1
8879: PPUSH
8880: CALL_OW 88
8884: GO 8934
// if IsOk ( Saseda ) then
8886: LD_EXP 24
8890: PPUSH
8891: CALL_OW 302
8895: IFFALSE 8911
// Say ( Saseda , D12-RSol1-1 ) else
8897: LD_EXP 24
8901: PPUSH
8902: LD_STRING D12-RSol1-1
8904: PPUSH
8905: CALL_OW 88
8909: GO 8934
// if IsOk ( Balei ) then
8911: LD_EXP 26
8915: PPUSH
8916: CALL_OW 302
8920: IFFALSE 8934
// Say ( Balei , D12-RSol1-1 ) ;
8922: LD_EXP 26
8926: PPUSH
8927: LD_STRING D12-RSol1-1
8929: PPUSH
8930: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
8934: LD_EXP 9
8938: IFFALSE 8947
8940: PUSH
8941: LD_EXP 4
8945: NOT
8946: AND
8947: IFFALSE 9082
// begin DialogueOn ;
8949: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING D12-Bur-1
8960: PPUSH
8961: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
8965: LD_EXP 27
8969: PPUSH
8970: LD_STRING D12-Bel-2
8972: PPUSH
8973: CALL_OW 88
// DialogueOff ;
8977: CALL_OW 7
// if Query ( QExit2 ) = 1 then
8981: LD_STRING QExit2
8983: PPUSH
8984: CALL_OW 97
8988: PUSH
8989: LD_INT 1
8991: EQUAL
8992: IFFALSE 9000
// begin FinishMission ;
8994: CALL 9087 0 0
// exit ;
8998: GO 9086
// end ; repeat wait ( 0 0$3 ) ;
9000: LD_INT 105
9002: PPUSH
9003: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
9007: LD_INT 22
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 1
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 50
9029: PUSH
9030: EMPTY
9031: LIST
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 95
9038: PUSH
9039: LD_INT 16
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: NOT
9061: IFFALSE 9078
// if Query ( QExit2 ) = 1 then
9063: LD_STRING QExit2
9065: PPUSH
9066: CALL_OW 97
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: IFFALSE 9078
// break ;
9076: GO 9082
// until false ;
9078: LD_INT 0
9080: IFFALSE 9000
// end ; FinishMission ;
9082: CALL 9087 0 0
// end ;
9086: END
// function FinishMission ; begin
9087: LD_INT 0
9089: PPUSH
// if tick <= 4 4$00 then
9090: LD_OWVAR 1
9094: PUSH
9095: LD_INT 8400
9097: LESSEQUAL
9098: IFFALSE 9107
// SetAchievement ( ACH_RSPEED_1 ) ;
9100: LD_STRING ACH_RSPEED_1
9102: PPUSH
9103: CALL_OW 543
// if not someoneGetsHurt then
9107: LD_EXP 21
9111: NOT
9112: IFFALSE 9121
// SetAchievement ( ACH_BANDAGE ) ;
9114: LD_STRING ACH_BANDAGE
9116: PPUSH
9117: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or MelEscaped ) then
9121: LD_EXP 16
9125: IFFALSE 9141
9127: PUSH
9128: LD_EXP 17
9132: IFTRUE 9140
9134: PUSH
9135: LD_EXP 18
9139: OR
9140: AND
9141: IFFALSE 9156
// AddMedal ( NoEscape , - 3 ) else
9143: LD_STRING NoEscape
9145: PPUSH
9146: LD_INT 3
9148: NEG
9149: PPUSH
9150: CALL_OW 101
9154: GO 9212
// if gladstoneEscaped then
9156: LD_EXP 16
9160: IFFALSE 9175
// AddMedal ( NoEscape , - 1 ) else
9162: LD_STRING NoEscape
9164: PPUSH
9165: LD_INT 1
9167: NEG
9168: PPUSH
9169: CALL_OW 101
9173: GO 9212
// if hollandEscaped or MelEscaped then
9175: LD_EXP 17
9179: IFTRUE 9187
9181: PUSH
9182: LD_EXP 18
9186: OR
9187: IFFALSE 9202
// AddMedal ( NoEscape , - 2 ) else
9189: LD_STRING NoEscape
9191: PPUSH
9192: LD_INT 2
9194: NEG
9195: PPUSH
9196: CALL_OW 101
9200: GO 9212
// AddMedal ( NoEscape , 1 ) ;
9202: LD_STRING NoEscape
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
9212: LD_EXP 4
9216: IFFALSE 9229
9218: PUSH
9219: LD_EXP 30
9223: PPUSH
9224: CALL_OW 302
9228: AND
9229: IFFALSE 9237
9231: PUSH
9232: LD_EXP 5
9236: AND
9237: IFFALSE 9250
9239: PUSH
9240: LD_EXP 31
9244: PPUSH
9245: CALL_OW 302
9249: AND
9250: IFFALSE 9264
// AddMedal ( Gnyevko , 1 ) else
9252: LD_STRING Gnyevko
9254: PPUSH
9255: LD_INT 1
9257: PPUSH
9258: CALL_OW 101
9262: GO 9369
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
9264: LD_EXP 30
9268: PPUSH
9269: CALL_OW 302
9273: NOT
9274: IFFALSE 9288
9276: PUSH
9277: LD_EXP 31
9281: PPUSH
9282: CALL_OW 302
9286: NOT
9287: AND
9288: IFFALSE 9303
// AddMedal ( Gnyevko , - 3 ) else
9290: LD_STRING Gnyevko
9292: PPUSH
9293: LD_INT 3
9295: NEG
9296: PPUSH
9297: CALL_OW 101
9301: GO 9369
// if not hasGnyevko then
9303: LD_EXP 4
9307: NOT
9308: IFFALSE 9323
// AddMedal ( Gnyevko , - 1 ) else
9310: LD_STRING Gnyevko
9312: PPUSH
9313: LD_INT 1
9315: NEG
9316: PPUSH
9317: CALL_OW 101
9321: GO 9369
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
9323: LD_EXP 30
9327: PPUSH
9328: CALL_OW 302
9332: NOT
9333: IFTRUE 9347
9335: PUSH
9336: LD_EXP 31
9340: PPUSH
9341: CALL_OW 302
9345: NOT
9346: OR
9347: IFTRUE 9356
9349: PUSH
9350: LD_EXP 5
9354: NOT
9355: OR
9356: IFFALSE 9369
// AddMedal ( Gnyevko , - 2 ) ;
9358: LD_STRING Gnyevko
9360: PPUSH
9361: LD_INT 2
9363: NEG
9364: PPUSH
9365: CALL_OW 101
// if loseCounter then
9369: LD_EXP 20
9373: IFFALSE 9388
// AddMedal ( NoLosses , - 1 ) else
9375: LD_STRING NoLosses
9377: PPUSH
9378: LD_INT 1
9380: NEG
9381: PPUSH
9382: CALL_OW 101
9386: GO 9398
// AddMedal ( NoLosses , 1 ) ;
9388: LD_STRING NoLosses
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 101
// GiveMedals ( MAIN ) ;
9398: LD_STRING MAIN
9400: PPUSH
9401: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9405: LD_INT 22
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 50
9427: PUSH
9428: EMPTY
9429: LIST
9430: PUSH
9431: LD_INT 23
9433: PUSH
9434: LD_INT 3
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PPUSH
9447: CALL_OW 69
9451: PPUSH
9452: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9456: LD_EXP 22
9460: PPUSH
9461: LD_EXP 2
9465: PUSH
9466: LD_STRING Burlak
9468: STR
9469: PPUSH
9470: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9474: LD_EXP 30
9478: PPUSH
9479: CALL_OW 302
9483: IFFALSE 9491
9485: PUSH
9486: LD_EXP 4
9490: AND
9491: IFFALSE 9511
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9493: LD_EXP 30
9497: PPUSH
9498: LD_EXP 2
9502: PUSH
9503: LD_STRING Gnyevko
9505: STR
9506: PPUSH
9507: CALL_OW 38
// if IsOk ( Belkov ) then
9511: LD_EXP 27
9515: PPUSH
9516: CALL_OW 302
9520: IFFALSE 9540
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9522: LD_EXP 27
9526: PPUSH
9527: LD_EXP 2
9531: PUSH
9532: LD_STRING Belkov
9534: STR
9535: PPUSH
9536: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9540: LD_EXP 31
9544: PPUSH
9545: CALL_OW 302
9549: IFFALSE 9557
9551: PUSH
9552: LD_EXP 5
9556: AND
9557: IFFALSE 9577
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9559: LD_EXP 31
9563: PPUSH
9564: LD_EXP 2
9568: PUSH
9569: LD_STRING Kirilenkova
9571: STR
9572: PPUSH
9573: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9577: LD_INT 22
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 50
9589: PUSH
9590: EMPTY
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: PPUSH
9608: CALL_OW 69
9612: PUSH
9613: LD_EXP 22
9617: PUSH
9618: LD_EXP 30
9622: PUSH
9623: LD_EXP 27
9627: PUSH
9628: LD_EXP 31
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: DIFF
9639: PPUSH
9640: LD_STRING 01_belkovTeam
9642: PPUSH
9643: CALL_OW 38
// YouWin ;
9647: CALL_OW 103
// end ; end_of_file
9651: LD_VAR 0 1
9655: RET
// export function SendApemanAttack ; var ape ; begin
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
// PrepareApeman ( 0 ) ;
9660: LD_INT 0
9662: PPUSH
9663: CALL 44621 0 1
// ape := CreateHuman ;
9667: LD_ADDR_VAR 0 2
9671: PUSH
9672: CALL_OW 44
9676: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 65
9684: PPUSH
9685: LD_INT 89
9687: PPUSH
9688: LD_INT 0
9690: PPUSH
9691: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9695: LD_VAR 0 2
9699: PPUSH
9700: LD_EXP 22
9704: PPUSH
9705: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9709: LD_INT 35
9711: PPUSH
9712: CALL_OW 67
// if joinedToBelkov then
9716: LD_EXP 3
9720: IFFALSE 9739
// begin ComMoveXY ( ape , 66 , 90 ) ;
9722: LD_VAR 0 2
9726: PPUSH
9727: LD_INT 66
9729: PPUSH
9730: LD_INT 90
9732: PPUSH
9733: CALL_OW 111
// exit ;
9737: GO 9926
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9739: LD_VAR 0 2
9743: PPUSH
9744: LD_EXP 22
9748: PPUSH
9749: CALL_OW 296
9753: PUSH
9754: LD_INT 5
9756: LESS
9757: IFFALSE 9709
// wait ( 0 0$0.3 ) ;
9759: LD_INT 10
9761: PPUSH
9762: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9766: LD_VAR 0 2
9770: PPUSH
9771: LD_EXP 22
9775: PPUSH
9776: CALL_OW 119
// if HasTask ( Burlak ) then
9780: LD_EXP 22
9784: PPUSH
9785: CALL_OW 314
9789: IFFALSE 9800
// wait ( 0 0$3 ) else
9791: LD_INT 105
9793: PPUSH
9794: CALL_OW 67
9798: GO 9807
// wait ( 0 0$10 ) ;
9800: LD_INT 350
9802: PPUSH
9803: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9807: LD_INT 6
9809: PPUSH
9810: LD_VAR 0 2
9814: PPUSH
9815: CALL_OW 292
9819: IFTRUE 9827
9821: PUSH
9822: LD_EXP 3
9826: OR
9827: IFFALSE 9846
// begin ComMoveXY ( ape , 66 , 90 ) ;
9829: LD_VAR 0 2
9833: PPUSH
9834: LD_INT 66
9836: PPUSH
9837: LD_INT 90
9839: PPUSH
9840: CALL_OW 111
// exit ;
9844: GO 9926
// end ; ComAttackUnit ( ape , Burlak ) ;
9846: LD_VAR 0 2
9850: PPUSH
9851: LD_EXP 22
9855: PPUSH
9856: CALL_OW 115
// repeat wait ( 1 ) ;
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9867: LD_VAR 0 2
9871: PPUSH
9872: CALL_OW 256
9876: PUSH
9877: LD_INT 980
9879: LESS
9880: IFFALSE 9899
9882: PUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: CALL_OW 504
9892: PUSH
9893: LD_EXP 22
9897: EQUAL
9898: AND
9899: IFFALSE 9912
9901: PUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: CALL_OW 583
9911: AND
9912: IFFALSE 9860
// SetLives ( ape , 200 ) ;
9914: LD_VAR 0 2
9918: PPUSH
9919: LD_INT 200
9921: PPUSH
9922: CALL_OW 234
// end ;
9926: LD_VAR 0 1
9930: RET
// export function CreateNature ; var i , ape , r ; begin
9931: LD_INT 0
9933: PPUSH
9934: PPUSH
9935: PPUSH
9936: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
9937: LD_INT 5
9939: PPUSH
9940: LD_INT 3
9942: PUSH
9943: LD_INT 4
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: LD_INT 6
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: LD_OWVAR 67
9962: ARRAY
9963: PPUSH
9964: LD_INT 0
9966: PPUSH
9967: LD_INT 5
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: LD_INT 0
9975: PPUSH
9976: LD_INT 3
9978: PPUSH
9979: LD_INT 7
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: CALL 45145 0 9
// r := 2 ;
9989: LD_ADDR_VAR 0 4
9993: PUSH
9994: LD_INT 2
9996: ST_TO_ADDR
// for i := 1 to 3 do
9997: LD_ADDR_VAR 0 2
10001: PUSH
10002: DOUBLE
10003: LD_INT 1
10005: DEC
10006: ST_TO_ADDR
10007: LD_INT 3
10009: PUSH
10010: FOR_TO
10011: IFFALSE 10102
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
10013: LD_INT 5
10015: NEG
10016: PUSH
10017: LD_INT 8
10019: NEG
10020: PUSH
10021: LD_INT 10
10023: NEG
10024: PUSH
10025: LD_INT 12
10027: NEG
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_OWVAR 67
10039: ARRAY
10040: PPUSH
10041: CALL 44621 0 1
// ape := CreateHuman ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: CALL_OW 44
10054: ST_TO_ADDR
// if i = r then
10055: LD_VAR 0 2
10059: PUSH
10060: LD_VAR 0 4
10064: EQUAL
10065: IFFALSE 10079
// SetTag ( i , tApeRadio ) ;
10067: LD_VAR 0 2
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 66
10086: PPUSH
10087: LD_INT 92
10089: PPUSH
10090: LD_INT 3
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 50
// end ;
10100: GO 10010
10102: POP
10103: POP
// end ;
10104: LD_VAR 0 1
10108: RET
// export function MoveToHill ; begin
10109: LD_INT 0
10111: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10112: LD_EXP 23
10116: PPUSH
10117: LD_INT 65
10119: PPUSH
10120: LD_INT 59
10122: PPUSH
10123: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10127: LD_EXP 23
10131: PPUSH
10132: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10136: LD_EXP 24
10140: PPUSH
10141: LD_INT 65
10143: PPUSH
10144: LD_INT 58
10146: PPUSH
10147: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10151: LD_EXP 24
10155: PPUSH
10156: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10160: LD_EXP 25
10164: PPUSH
10165: LD_INT 64
10167: PPUSH
10168: LD_INT 57
10170: PPUSH
10171: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10175: LD_EXP 25
10179: PPUSH
10180: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10184: LD_EXP 26
10188: PPUSH
10189: LD_INT 64
10191: PPUSH
10192: LD_INT 56
10194: PPUSH
10195: CALL_OW 111
// AddComCrawl ( Balei ) ;
10199: LD_EXP 26
10203: PPUSH
10204: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_INT 63
10215: PPUSH
10216: LD_INT 55
10218: PPUSH
10219: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10223: LD_EXP 27
10227: PPUSH
10228: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10232: LD_EXP 28
10236: PPUSH
10237: LD_INT 66
10239: PPUSH
10240: LD_INT 58
10242: PPUSH
10243: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10247: LD_EXP 28
10251: PPUSH
10252: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
10256: LD_EXP 4
10260: IFFALSE 10273
10262: PUSH
10263: LD_EXP 30
10267: PPUSH
10268: CALL_OW 302
10272: AND
10273: IFFALSE 10299
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10275: LD_EXP 30
10279: PPUSH
10280: LD_INT 63
10282: PPUSH
10283: LD_INT 54
10285: PPUSH
10286: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10290: LD_EXP 30
10294: PPUSH
10295: CALL_OW 197
// end ; end ; end_of_file
10299: LD_VAR 0 1
10303: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
// if exist_mode then
10308: LD_VAR 0 2
10312: IFFALSE 10358
// begin unit := CreateCharacter ( prefix & ident ) ;
10314: LD_ADDR_VAR 0 5
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: LD_VAR 0 1
10328: STR
10329: PPUSH
10330: CALL_OW 34
10334: ST_TO_ADDR
// if unit then
10335: LD_VAR 0 5
10339: IFFALSE 10356
// DeleteCharacters ( prefix & ident ) ;
10341: LD_VAR 0 3
10345: PUSH
10346: LD_VAR 0 1
10350: STR
10351: PPUSH
10352: CALL_OW 40
// end else
10356: GO 10373
// unit := NewCharacter ( ident ) ;
10358: LD_ADDR_VAR 0 5
10362: PUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 25
10372: ST_TO_ADDR
// result := unit ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_VAR 0 5
10382: ST_TO_ADDR
// end ;
10383: LD_VAR 0 4
10387: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10388: LD_INT 0
10390: PPUSH
10391: PPUSH
// if exist_mode then
10392: LD_VAR 0 2
10396: IFFALSE 10421
// unit := CreateCharacter ( prefix & ident ) else
10398: LD_ADDR_VAR 0 5
10402: PUSH
10403: LD_VAR 0 3
10407: PUSH
10408: LD_VAR 0 1
10412: STR
10413: PPUSH
10414: CALL_OW 34
10418: ST_TO_ADDR
10419: GO 10436
// unit := NewCharacter ( ident ) ;
10421: LD_ADDR_VAR 0 5
10425: PUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 25
10435: ST_TO_ADDR
// result := unit ;
10436: LD_ADDR_VAR 0 4
10440: PUSH
10441: LD_VAR 0 5
10445: ST_TO_ADDR
// end ;
10446: LD_VAR 0 4
10450: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10451: LD_INT 0
10453: PPUSH
10454: PPUSH
// if not side or not nation then
10455: LD_VAR 0 1
10459: NOT
10460: IFTRUE 10469
10462: PUSH
10463: LD_VAR 0 2
10467: NOT
10468: OR
10469: IFFALSE 10473
// exit ;
10471: GO 11267
// case nation of nation_american :
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: DOUBLE
10481: EQUAL
10482: IFTRUE 10486
10484: GO 10708
10486: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_INT 35
10494: PUSH
10495: LD_INT 45
10497: PUSH
10498: LD_INT 46
10500: PUSH
10501: LD_INT 47
10503: PUSH
10504: LD_INT 82
10506: PUSH
10507: LD_INT 83
10509: PUSH
10510: LD_INT 84
10512: PUSH
10513: LD_INT 85
10515: PUSH
10516: LD_INT 86
10518: PUSH
10519: LD_INT 1
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 6
10527: PUSH
10528: LD_INT 15
10530: PUSH
10531: LD_INT 16
10533: PUSH
10534: LD_INT 7
10536: PUSH
10537: LD_INT 12
10539: PUSH
10540: LD_INT 13
10542: PUSH
10543: LD_INT 10
10545: PUSH
10546: LD_INT 14
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 22
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 27
10566: PUSH
10567: LD_INT 36
10569: PUSH
10570: LD_INT 69
10572: PUSH
10573: LD_INT 39
10575: PUSH
10576: LD_INT 34
10578: PUSH
10579: LD_INT 40
10581: PUSH
10582: LD_INT 48
10584: PUSH
10585: LD_INT 49
10587: PUSH
10588: LD_INT 50
10590: PUSH
10591: LD_INT 51
10593: PUSH
10594: LD_INT 52
10596: PUSH
10597: LD_INT 53
10599: PUSH
10600: LD_INT 54
10602: PUSH
10603: LD_INT 55
10605: PUSH
10606: LD_INT 56
10608: PUSH
10609: LD_INT 57
10611: PUSH
10612: LD_INT 58
10614: PUSH
10615: LD_INT 59
10617: PUSH
10618: LD_INT 60
10620: PUSH
10621: LD_INT 61
10623: PUSH
10624: LD_INT 62
10626: PUSH
10627: LD_INT 80
10629: PUSH
10630: LD_INT 82
10632: PUSH
10633: LD_INT 83
10635: PUSH
10636: LD_INT 84
10638: PUSH
10639: LD_INT 85
10641: PUSH
10642: LD_INT 86
10644: PUSH
10645: LD_INT 90
10647: PUSH
10648: LD_INT 93
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: ST_TO_ADDR
10706: GO 11189
10708: LD_INT 2
10710: DOUBLE
10711: EQUAL
10712: IFTRUE 10716
10714: GO 10950
10716: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
10717: LD_ADDR_VAR 0 4
10721: PUSH
10722: LD_INT 35
10724: PUSH
10725: LD_INT 45
10727: PUSH
10728: LD_INT 46
10730: PUSH
10731: LD_INT 47
10733: PUSH
10734: LD_INT 82
10736: PUSH
10737: LD_INT 83
10739: PUSH
10740: LD_INT 84
10742: PUSH
10743: LD_INT 85
10745: PUSH
10746: LD_INT 87
10748: PUSH
10749: LD_INT 70
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: LD_INT 11
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 4
10763: PUSH
10764: LD_INT 5
10766: PUSH
10767: LD_INT 6
10769: PUSH
10770: LD_INT 15
10772: PUSH
10773: LD_INT 18
10775: PUSH
10776: LD_INT 7
10778: PUSH
10779: LD_INT 17
10781: PUSH
10782: LD_INT 8
10784: PUSH
10785: LD_INT 20
10787: PUSH
10788: LD_INT 21
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_INT 72
10796: PUSH
10797: LD_INT 26
10799: PUSH
10800: LD_INT 69
10802: PUSH
10803: LD_INT 39
10805: PUSH
10806: LD_INT 40
10808: PUSH
10809: LD_INT 41
10811: PUSH
10812: LD_INT 42
10814: PUSH
10815: LD_INT 43
10817: PUSH
10818: LD_INT 48
10820: PUSH
10821: LD_INT 49
10823: PUSH
10824: LD_INT 50
10826: PUSH
10827: LD_INT 51
10829: PUSH
10830: LD_INT 52
10832: PUSH
10833: LD_INT 53
10835: PUSH
10836: LD_INT 54
10838: PUSH
10839: LD_INT 55
10841: PUSH
10842: LD_INT 56
10844: PUSH
10845: LD_INT 60
10847: PUSH
10848: LD_INT 61
10850: PUSH
10851: LD_INT 62
10853: PUSH
10854: LD_INT 66
10856: PUSH
10857: LD_INT 67
10859: PUSH
10860: LD_INT 68
10862: PUSH
10863: LD_INT 81
10865: PUSH
10866: LD_INT 82
10868: PUSH
10869: LD_INT 83
10871: PUSH
10872: LD_INT 84
10874: PUSH
10875: LD_INT 85
10877: PUSH
10878: LD_INT 87
10880: PUSH
10881: LD_INT 88
10883: PUSH
10884: LD_INT 92
10886: PUSH
10887: LD_INT 94
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: ST_TO_ADDR
10948: GO 11189
10950: LD_INT 3
10952: DOUBLE
10953: EQUAL
10954: IFTRUE 10958
10956: GO 11188
10958: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
10959: LD_ADDR_VAR 0 4
10963: PUSH
10964: LD_INT 46
10966: PUSH
10967: LD_INT 47
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: LD_INT 2
10975: PUSH
10976: LD_INT 82
10978: PUSH
10979: LD_INT 83
10981: PUSH
10982: LD_INT 84
10984: PUSH
10985: LD_INT 85
10987: PUSH
10988: LD_INT 86
10990: PUSH
10991: LD_INT 11
10993: PUSH
10994: LD_INT 9
10996: PUSH
10997: LD_INT 20
10999: PUSH
11000: LD_INT 19
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 24
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_INT 25
11014: PUSH
11015: LD_INT 28
11017: PUSH
11018: LD_INT 29
11020: PUSH
11021: LD_INT 30
11023: PUSH
11024: LD_INT 31
11026: PUSH
11027: LD_INT 37
11029: PUSH
11030: LD_INT 38
11032: PUSH
11033: LD_INT 32
11035: PUSH
11036: LD_INT 27
11038: PUSH
11039: LD_INT 33
11041: PUSH
11042: LD_INT 69
11044: PUSH
11045: LD_INT 39
11047: PUSH
11048: LD_INT 34
11050: PUSH
11051: LD_INT 40
11053: PUSH
11054: LD_INT 71
11056: PUSH
11057: LD_INT 23
11059: PUSH
11060: LD_INT 44
11062: PUSH
11063: LD_INT 48
11065: PUSH
11066: LD_INT 49
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: LD_INT 51
11074: PUSH
11075: LD_INT 52
11077: PUSH
11078: LD_INT 53
11080: PUSH
11081: LD_INT 54
11083: PUSH
11084: LD_INT 55
11086: PUSH
11087: LD_INT 56
11089: PUSH
11090: LD_INT 57
11092: PUSH
11093: LD_INT 58
11095: PUSH
11096: LD_INT 59
11098: PUSH
11099: LD_INT 63
11101: PUSH
11102: LD_INT 64
11104: PUSH
11105: LD_INT 65
11107: PUSH
11108: LD_INT 82
11110: PUSH
11111: LD_INT 83
11113: PUSH
11114: LD_INT 84
11116: PUSH
11117: LD_INT 85
11119: PUSH
11120: LD_INT 86
11122: PUSH
11123: LD_INT 89
11125: PUSH
11126: LD_INT 91
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: ST_TO_ADDR
11186: GO 11189
11188: POP
// if state > - 1 and state < 3 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 1
11196: NEG
11197: GREATER
11198: IFFALSE 11210
11200: PUSH
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 3
11208: LESS
11209: AND
11210: IFFALSE 11267
// for i in result do
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_VAR 0 4
11221: PUSH
11222: FOR_IN
11223: IFFALSE 11265
// if GetTech ( i , side ) <> state then
11225: LD_VAR 0 5
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 321
11239: PUSH
11240: LD_VAR 0 3
11244: NONEQUAL
11245: IFFALSE 11263
// result := result diff i ;
11247: LD_ADDR_VAR 0 4
11251: PUSH
11252: LD_VAR 0 4
11256: PUSH
11257: LD_VAR 0 5
11261: DIFF
11262: ST_TO_ADDR
11263: GO 11222
11265: POP
11266: POP
// end ;
11267: LD_VAR 0 4
11271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11272: LD_INT 0
11274: PPUSH
11275: PPUSH
11276: PPUSH
// result := true ;
11277: LD_ADDR_VAR 0 3
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11285: LD_ADDR_VAR 0 5
11289: PUSH
11290: LD_VAR 0 2
11294: PPUSH
11295: CALL_OW 480
11299: ST_TO_ADDR
// if not tmp then
11300: LD_VAR 0 5
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 11358
// for i in tmp do
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_VAR 0 5
11318: PUSH
11319: FOR_IN
11320: IFFALSE 11356
// if GetTech ( i , side ) <> state_researched then
11322: LD_VAR 0 4
11326: PPUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 321
11336: PUSH
11337: LD_INT 2
11339: NONEQUAL
11340: IFFALSE 11354
// begin result := false ;
11342: LD_ADDR_VAR 0 3
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// exit ;
11350: POP
11351: POP
11352: GO 11358
// end ;
11354: GO 11319
11356: POP
11357: POP
// end ;
11358: LD_VAR 0 3
11362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11378: LD_VAR 0 1
11382: NOT
11383: IFTRUE 11400
11385: PUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 257
11395: PUSH
11396: LD_INT 9
11398: NONEQUAL
11399: OR
11400: IFFALSE 11404
// exit ;
11402: GO 11983
// side := GetSide ( unit ) ;
11404: LD_ADDR_VAR 0 9
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 255
11418: ST_TO_ADDR
// tech_space := tech_spacanom ;
11419: LD_ADDR_VAR 0 12
11423: PUSH
11424: LD_INT 29
11426: ST_TO_ADDR
// tech_time := tech_taurad ;
11427: LD_ADDR_VAR 0 13
11431: PUSH
11432: LD_INT 28
11434: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11435: LD_ADDR_VAR 0 11
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 310
11449: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11450: LD_VAR 0 11
11454: PPUSH
11455: CALL_OW 247
11459: PUSH
11460: LD_INT 2
11462: EQUAL
11463: IFFALSE 11467
// exit ;
11465: GO 11983
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11467: LD_ADDR_VAR 0 8
11471: PUSH
11472: LD_INT 81
11474: PUSH
11475: LD_VAR 0 9
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: LD_INT 21
11489: PUSH
11490: LD_INT 3
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 8
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11983
// if in_unit then
11519: LD_VAR 0 11
11523: IFFALSE 11547
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 8
11534: PPUSH
11535: LD_VAR 0 11
11539: PPUSH
11540: CALL_OW 74
11544: ST_TO_ADDR
11545: GO 11567
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11547: LD_ADDR_VAR 0 10
11551: PUSH
11552: LD_VAR 0 8
11556: PPUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 74
11566: ST_TO_ADDR
// if not enemy then
11567: LD_VAR 0 10
11571: NOT
11572: IFFALSE 11576
// exit ;
11574: GO 11983
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11576: LD_VAR 0 11
11580: IFFALSE 11602
11582: PUSH
11583: LD_VAR 0 11
11587: PPUSH
11588: LD_VAR 0 10
11592: PPUSH
11593: CALL_OW 296
11597: PUSH
11598: LD_INT 13
11600: GREATER
11601: AND
11602: IFTRUE 11624
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: LD_VAR 0 10
11614: PPUSH
11615: CALL_OW 296
11619: PUSH
11620: LD_INT 12
11622: GREATER
11623: OR
11624: IFFALSE 11628
// exit ;
11626: GO 11983
// missile := [ 1 ] ;
11628: LD_ADDR_VAR 0 14
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11639: LD_VAR 0 9
11643: PPUSH
11644: LD_VAR 0 12
11648: PPUSH
11649: CALL_OW 325
11653: IFFALSE 11682
// missile := Replace ( missile , missile + 1 , 2 ) ;
11655: LD_ADDR_VAR 0 14
11659: PUSH
11660: LD_VAR 0 14
11664: PPUSH
11665: LD_VAR 0 14
11669: PUSH
11670: LD_INT 1
11672: PLUS
11673: PPUSH
11674: LD_INT 2
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11682: LD_VAR 0 9
11686: PPUSH
11687: LD_VAR 0 13
11691: PPUSH
11692: CALL_OW 325
11696: IFFALSE 11720
11698: PUSH
11699: LD_VAR 0 10
11703: PPUSH
11704: CALL_OW 255
11708: PPUSH
11709: LD_VAR 0 13
11713: PPUSH
11714: CALL_OW 325
11718: NOT
11719: AND
11720: IFFALSE 11749
// missile := Replace ( missile , missile + 1 , 3 ) ;
11722: LD_ADDR_VAR 0 14
11726: PUSH
11727: LD_VAR 0 14
11731: PPUSH
11732: LD_VAR 0 14
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: PPUSH
11741: LD_INT 3
11743: PPUSH
11744: CALL_OW 1
11748: ST_TO_ADDR
// if missile < 2 then
11749: LD_VAR 0 14
11753: PUSH
11754: LD_INT 2
11756: LESS
11757: IFFALSE 11761
// exit ;
11759: GO 11983
// x := GetX ( enemy ) ;
11761: LD_ADDR_VAR 0 4
11765: PUSH
11766: LD_VAR 0 10
11770: PPUSH
11771: CALL_OW 250
11775: ST_TO_ADDR
// y := GetY ( enemy ) ;
11776: LD_ADDR_VAR 0 5
11780: PUSH
11781: LD_VAR 0 10
11785: PPUSH
11786: CALL_OW 251
11790: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11791: LD_ADDR_VAR 0 6
11795: PUSH
11796: LD_VAR 0 4
11800: PUSH
11801: LD_INT 1
11803: NEG
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 12
11812: PLUS
11813: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11814: LD_ADDR_VAR 0 7
11818: PUSH
11819: LD_VAR 0 5
11823: PUSH
11824: LD_INT 1
11826: NEG
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 12
11835: PLUS
11836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11837: LD_VAR 0 6
11841: PPUSH
11842: LD_VAR 0 7
11846: PPUSH
11847: CALL_OW 488
11851: NOT
11852: IFFALSE 11874
// begin _x := x ;
11854: LD_ADDR_VAR 0 6
11858: PUSH
11859: LD_VAR 0 4
11863: ST_TO_ADDR
// _y := y ;
11864: LD_ADDR_VAR 0 7
11868: PUSH
11869: LD_VAR 0 5
11873: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 1
11881: PPUSH
11882: LD_VAR 0 14
11886: PPUSH
11887: CALL_OW 12
11891: ST_TO_ADDR
// case i of 1 :
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 1
11899: DOUBLE
11900: EQUAL
11901: IFTRUE 11905
11903: GO 11922
11905: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11906: LD_VAR 0 1
11910: PPUSH
11911: LD_VAR 0 10
11915: PPUSH
11916: CALL_OW 115
11920: GO 11983
11922: LD_INT 2
11924: DOUBLE
11925: EQUAL
11926: IFTRUE 11930
11928: GO 11952
11930: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_VAR 0 6
11940: PPUSH
11941: LD_VAR 0 7
11945: PPUSH
11946: CALL_OW 153
11950: GO 11983
11952: LD_INT 3
11954: DOUBLE
11955: EQUAL
11956: IFTRUE 11960
11958: GO 11982
11960: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11961: LD_VAR 0 1
11965: PPUSH
11966: LD_VAR 0 6
11970: PPUSH
11971: LD_VAR 0 7
11975: PPUSH
11976: CALL_OW 154
11980: GO 11983
11982: POP
// end ;
11983: LD_VAR 0 2
11987: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11988: LD_INT 0
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
// if not unit or not building then
11996: LD_VAR 0 1
12000: NOT
12001: IFTRUE 12010
12003: PUSH
12004: LD_VAR 0 2
12008: NOT
12009: OR
12010: IFFALSE 12014
// exit ;
12012: GO 12172
// x := GetX ( building ) ;
12014: LD_ADDR_VAR 0 5
12018: PUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL_OW 250
12028: ST_TO_ADDR
// y := GetY ( building ) ;
12029: LD_ADDR_VAR 0 6
12033: PUSH
12034: LD_VAR 0 2
12038: PPUSH
12039: CALL_OW 251
12043: ST_TO_ADDR
// for i := 0 to 5 do
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: DOUBLE
12050: LD_INT 0
12052: DEC
12053: ST_TO_ADDR
12054: LD_INT 5
12056: PUSH
12057: FOR_TO
12058: IFFALSE 12170
// begin _x := ShiftX ( x , i , 3 ) ;
12060: LD_ADDR_VAR 0 7
12064: PUSH
12065: LD_VAR 0 5
12069: PPUSH
12070: LD_VAR 0 4
12074: PPUSH
12075: LD_INT 3
12077: PPUSH
12078: CALL_OW 272
12082: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12083: LD_ADDR_VAR 0 8
12087: PUSH
12088: LD_VAR 0 6
12092: PPUSH
12093: LD_VAR 0 4
12097: PPUSH
12098: LD_INT 3
12100: PPUSH
12101: CALL_OW 273
12105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12106: LD_VAR 0 7
12110: PPUSH
12111: LD_VAR 0 8
12115: PPUSH
12116: CALL_OW 488
12120: NOT
12121: IFFALSE 12125
// continue ;
12123: GO 12057
// if HexInfo ( _x , _y ) = 0 then
12125: LD_VAR 0 7
12129: PPUSH
12130: LD_VAR 0 8
12134: PPUSH
12135: CALL_OW 428
12139: PUSH
12140: LD_INT 0
12142: EQUAL
12143: IFFALSE 12168
// begin ComMoveXY ( unit , _x , _y ) ;
12145: LD_VAR 0 1
12149: PPUSH
12150: LD_VAR 0 7
12154: PPUSH
12155: LD_VAR 0 8
12159: PPUSH
12160: CALL_OW 111
// exit ;
12164: POP
12165: POP
12166: GO 12172
// end ; end ;
12168: GO 12057
12170: POP
12171: POP
// end ;
12172: LD_VAR 0 3
12176: RET
// export function ScanBase ( side , base_area ) ; begin
12177: LD_INT 0
12179: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12180: LD_ADDR_VAR 0 3
12184: PUSH
12185: LD_VAR 0 2
12189: PPUSH
12190: LD_INT 81
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 70
12206: ST_TO_ADDR
// end ;
12207: LD_VAR 0 3
12211: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
// result := false ;
12218: LD_ADDR_VAR 0 2
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// side := GetSide ( unit ) ;
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 255
12240: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12241: LD_ADDR_VAR 0 4
12245: PUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 248
12255: ST_TO_ADDR
// case nat of 1 :
12256: LD_VAR 0 4
12260: PUSH
12261: LD_INT 1
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12280
12269: POP
// tech := tech_lassight ; 2 :
12270: LD_ADDR_VAR 0 5
12274: PUSH
12275: LD_INT 12
12277: ST_TO_ADDR
12278: GO 12319
12280: LD_INT 2
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12299
12288: POP
// tech := tech_mortar ; 3 :
12289: LD_ADDR_VAR 0 5
12293: PUSH
12294: LD_INT 41
12296: ST_TO_ADDR
12297: GO 12319
12299: LD_INT 3
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12318
12307: POP
// tech := tech_bazooka ; end ;
12308: LD_ADDR_VAR 0 5
12312: PUSH
12313: LD_INT 44
12315: ST_TO_ADDR
12316: GO 12319
12318: POP
// if Researched ( side , tech ) then
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_VAR 0 5
12328: PPUSH
12329: CALL_OW 325
12333: IFFALSE 12360
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12335: LD_ADDR_VAR 0 2
12339: PUSH
12340: LD_INT 5
12342: PUSH
12343: LD_INT 8
12345: PUSH
12346: LD_INT 9
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: LD_VAR 0 4
12358: ARRAY
12359: ST_TO_ADDR
// end ;
12360: LD_VAR 0 2
12364: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
// if not mines then
12370: LD_VAR 0 2
12374: NOT
12375: IFFALSE 12379
// exit ;
12377: GO 12523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: LD_INT 81
12386: PUSH
12387: LD_VAR 0 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 3
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: ST_TO_ADDR
// for i in mines do
12422: LD_ADDR_VAR 0 4
12426: PUSH
12427: LD_VAR 0 2
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12521
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12435: LD_VAR 0 4
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: LD_VAR 0 4
12448: PUSH
12449: LD_INT 2
12451: ARRAY
12452: PPUSH
12453: CALL_OW 458
12457: NOT
12458: IFFALSE 12462
// continue ;
12460: GO 12432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12462: LD_VAR 0 4
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: LD_VAR 0 4
12475: PUSH
12476: LD_INT 2
12478: ARRAY
12479: PPUSH
12480: CALL_OW 428
12484: PUSH
12485: LD_VAR 0 5
12489: IN
12490: IFFALSE 12519
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12492: LD_VAR 0 4
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 4
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: PPUSH
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 456
// end ;
12519: GO 12432
12521: POP
12522: POP
// end ;
12523: LD_VAR 0 3
12527: RET
// export function Count ( array ) ; begin
12528: LD_INT 0
12530: PPUSH
// result := array + 0 ;
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 0
12543: PLUS
12544: ST_TO_ADDR
// end ;
12545: LD_VAR 0 2
12549: RET
// export function IsEmpty ( building ) ; begin
12550: LD_INT 0
12552: PPUSH
// if not building then
12553: LD_VAR 0 1
12557: NOT
12558: IFFALSE 12562
// exit ;
12560: GO 12605
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12562: LD_ADDR_VAR 0 2
12566: PUSH
12567: LD_VAR 0 1
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: CALL_OW 255
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 58
12591: PUSH
12592: EMPTY
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: IN
12604: ST_TO_ADDR
// end ;
12605: LD_VAR 0 2
12609: RET
// export function IsNotFull ( building ) ; var places ; begin
12610: LD_INT 0
12612: PPUSH
12613: PPUSH
// if not building then
12614: LD_VAR 0 1
12618: NOT
12619: IFFALSE 12623
// exit ;
12621: GO 12651
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 62
12638: PUSH
12639: EMPTY
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 72
12650: ST_TO_ADDR
// end ;
12651: LD_VAR 0 2
12655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
12660: PPUSH
12661: PPUSH
// tmp := [ ] ;
12662: LD_ADDR_VAR 0 3
12666: PUSH
12667: EMPTY
12668: ST_TO_ADDR
// list := [ ] ;
12669: LD_ADDR_VAR 0 5
12673: PUSH
12674: EMPTY
12675: ST_TO_ADDR
// for i = 16 to 25 do
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: DOUBLE
12682: LD_INT 16
12684: DEC
12685: ST_TO_ADDR
12686: LD_INT 25
12688: PUSH
12689: FOR_TO
12690: IFFALSE 12763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_VAR 0 3
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 255
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 91
12721: PUSH
12722: LD_VAR 0 1
12726: PUSH
12727: LD_INT 6
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_VAR 0 4
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: ADD
12760: ST_TO_ADDR
12761: GO 12689
12763: POP
12764: POP
// for i = 1 to tmp do
12765: LD_ADDR_VAR 0 4
12769: PUSH
12770: DOUBLE
12771: LD_INT 1
12773: DEC
12774: ST_TO_ADDR
12775: LD_VAR 0 3
12779: PUSH
12780: FOR_TO
12781: IFFALSE 12869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12783: LD_ADDR_VAR 0 5
12787: PUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: PUSH
12798: LD_VAR 0 4
12802: ARRAY
12803: PPUSH
12804: CALL_OW 266
12808: PUSH
12809: LD_VAR 0 3
12813: PUSH
12814: LD_VAR 0 4
12818: ARRAY
12819: PPUSH
12820: CALL_OW 250
12824: PUSH
12825: LD_VAR 0 3
12829: PUSH
12830: LD_VAR 0 4
12834: ARRAY
12835: PPUSH
12836: CALL_OW 251
12840: PUSH
12841: LD_VAR 0 3
12845: PUSH
12846: LD_VAR 0 4
12850: ARRAY
12851: PPUSH
12852: CALL_OW 254
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: ADD
12866: ST_TO_ADDR
12867: GO 12780
12869: POP
12870: POP
// result := list ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 5
12880: ST_TO_ADDR
// end ;
12881: LD_VAR 0 2
12885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
// if not factory then
12895: LD_VAR 0 1
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 13507
// if control = control_apeman then
12904: LD_VAR 0 4
12908: PUSH
12909: LD_INT 5
12911: EQUAL
12912: IFFALSE 13021
// begin tmp := UnitsInside ( factory ) ;
12914: LD_ADDR_VAR 0 8
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 313
12928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12929: LD_VAR 0 8
12933: PPUSH
12934: LD_INT 25
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 72
12948: NOT
12949: IFFALSE 12959
// control := control_manual ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12959: LD_ADDR_VAR 0 8
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL 12656 0 1
12973: ST_TO_ADDR
// if tmp then
12974: LD_VAR 0 8
12978: IFFALSE 13021
// begin for i in tmp do
12980: LD_ADDR_VAR 0 7
12984: PUSH
12985: LD_VAR 0 8
12989: PUSH
12990: FOR_IN
12991: IFFALSE 13019
// if i [ 1 ] = b_ext_radio then
12993: LD_VAR 0 7
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PUSH
13002: LD_INT 22
13004: EQUAL
13005: IFFALSE 13017
// begin control := control_remote ;
13007: LD_ADDR_VAR 0 4
13011: PUSH
13012: LD_INT 2
13014: ST_TO_ADDR
// break ;
13015: GO 13019
// end ;
13017: GO 12990
13019: POP
13020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_VAR 0 2
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_VAR 0 4
13040: PPUSH
13041: LD_VAR 0 5
13045: PPUSH
13046: CALL_OW 448
13050: IFFALSE 13085
// begin result := [ chassis , engine , control , weapon ] ;
13052: LD_ADDR_VAR 0 6
13056: PUSH
13057: LD_VAR 0 2
13061: PUSH
13062: LD_VAR 0 3
13066: PUSH
13067: LD_VAR 0 4
13071: PUSH
13072: LD_VAR 0 5
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: ST_TO_ADDR
// exit ;
13083: GO 13507
// end ; _chassis := AvailableChassisList ( factory ) ;
13085: LD_ADDR_VAR 0 9
13089: PUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 475
13099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13100: LD_ADDR_VAR 0 11
13104: PUSH
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 476
13114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13115: LD_ADDR_VAR 0 12
13119: PUSH
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 477
13129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13130: LD_ADDR_VAR 0 10
13134: PUSH
13135: LD_VAR 0 1
13139: PPUSH
13140: CALL_OW 478
13144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13145: LD_VAR 0 9
13149: NOT
13150: IFTRUE 13159
13152: PUSH
13153: LD_VAR 0 11
13157: NOT
13158: OR
13159: IFTRUE 13168
13161: PUSH
13162: LD_VAR 0 12
13166: NOT
13167: OR
13168: IFTRUE 13177
13170: PUSH
13171: LD_VAR 0 10
13175: NOT
13176: OR
13177: IFFALSE 13212
// begin result := [ chassis , engine , control , weapon ] ;
13179: LD_ADDR_VAR 0 6
13183: PUSH
13184: LD_VAR 0 2
13188: PUSH
13189: LD_VAR 0 3
13193: PUSH
13194: LD_VAR 0 4
13198: PUSH
13199: LD_VAR 0 5
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
// exit ;
13210: GO 13507
// end ; if not chassis in _chassis then
13212: LD_VAR 0 2
13216: PUSH
13217: LD_VAR 0 9
13221: IN
13222: NOT
13223: IFFALSE 13249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: LD_VAR 0 9
13234: PUSH
13235: LD_INT 1
13237: PPUSH
13238: LD_VAR 0 9
13242: PPUSH
13243: CALL_OW 12
13247: ARRAY
13248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13249: LD_VAR 0 2
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: CALL 13512 0 2
13263: NOT
13264: IFFALSE 13325
// repeat engine := _engine [ 1 ] ;
13266: LD_ADDR_VAR 0 3
13270: PUSH
13271: LD_VAR 0 11
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13280: LD_ADDR_VAR 0 11
13284: PUSH
13285: LD_VAR 0 11
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 3
13297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13298: LD_VAR 0 2
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: CALL 13512 0 2
13312: IFTRUE 13323
13314: PUSH
13315: LD_VAR 0 11
13319: PUSH
13320: EMPTY
13321: EQUAL
13322: OR
13323: IFFALSE 13266
// if not control in _control then
13325: LD_VAR 0 4
13329: PUSH
13330: LD_VAR 0 12
13334: IN
13335: NOT
13336: IFFALSE 13362
// control := _control [ rand ( 1 , _control ) ] ;
13338: LD_ADDR_VAR 0 4
13342: PUSH
13343: LD_VAR 0 12
13347: PUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_VAR 0 12
13355: PPUSH
13356: CALL_OW 12
13360: ARRAY
13361: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13362: LD_VAR 0 2
13366: PPUSH
13367: LD_VAR 0 5
13371: PPUSH
13372: CALL 13734 0 2
13376: NOT
13377: IFFALSE 13438
// repeat weapon := _weapon [ 1 ] ;
13379: LD_ADDR_VAR 0 5
13383: PUSH
13384: LD_VAR 0 10
13388: PUSH
13389: LD_INT 1
13391: ARRAY
13392: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13393: LD_ADDR_VAR 0 10
13397: PUSH
13398: LD_VAR 0 10
13402: PPUSH
13403: LD_INT 1
13405: PPUSH
13406: CALL_OW 3
13410: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13411: LD_VAR 0 2
13415: PPUSH
13416: LD_VAR 0 5
13420: PPUSH
13421: CALL 13734 0 2
13425: IFTRUE 13436
13427: PUSH
13428: LD_VAR 0 10
13432: PUSH
13433: EMPTY
13434: EQUAL
13435: OR
13436: IFFALSE 13379
// result := [ ] ;
13438: LD_ADDR_VAR 0 6
13442: PUSH
13443: EMPTY
13444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13445: LD_VAR 0 1
13449: PPUSH
13450: LD_VAR 0 2
13454: PPUSH
13455: LD_VAR 0 3
13459: PPUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: LD_VAR 0 5
13469: PPUSH
13470: CALL_OW 448
13474: IFFALSE 13507
// result := [ chassis , engine , control , weapon ] ;
13476: LD_ADDR_VAR 0 6
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_VAR 0 3
13490: PUSH
13491: LD_VAR 0 4
13495: PUSH
13496: LD_VAR 0 5
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: ST_TO_ADDR
// end ;
13507: LD_VAR 0 6
13511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13512: LD_INT 0
13514: PPUSH
// if not chassis or not engine then
13515: LD_VAR 0 1
13519: NOT
13520: IFTRUE 13529
13522: PUSH
13523: LD_VAR 0 2
13527: NOT
13528: OR
13529: IFFALSE 13533
// exit ;
13531: GO 13729
// case engine of engine_solar :
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 2
13540: DOUBLE
13541: EQUAL
13542: IFTRUE 13546
13544: GO 13584
13546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: LD_INT 11
13554: PUSH
13555: LD_INT 12
13557: PUSH
13558: LD_INT 13
13560: PUSH
13561: LD_INT 14
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: ST_TO_ADDR
13582: GO 13713
13584: LD_INT 1
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13654
13592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 12
13603: PUSH
13604: LD_INT 13
13606: PUSH
13607: LD_INT 14
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: LD_INT 5
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 23
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 24
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: ST_TO_ADDR
13652: GO 13713
13654: LD_INT 3
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13662
13660: GO 13712
13662: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_INT 13
13670: PUSH
13671: LD_INT 14
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: LD_INT 3
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 21
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_INT 23
13694: PUSH
13695: LD_INT 24
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: ST_TO_ADDR
13710: GO 13713
13712: POP
// result := ( chassis in result ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_VAR 0 3
13727: IN
13728: ST_TO_ADDR
// end ;
13729: LD_VAR 0 3
13733: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13734: LD_INT 0
13736: PPUSH
// if not chassis or not weapon then
13737: LD_VAR 0 1
13741: NOT
13742: IFTRUE 13751
13744: PUSH
13745: LD_VAR 0 2
13749: NOT
13750: OR
13751: IFFALSE 13755
// exit ;
13753: GO 14849
// case weapon of us_machine_gun :
13755: LD_VAR 0 2
13759: PUSH
13760: LD_INT 2
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13798
13768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 14833
13798: LD_INT 3
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13836
13806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_INT 1
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 3
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: LD_INT 5
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: ST_TO_ADDR
13834: GO 14833
13836: LD_INT 11
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13874
13844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13845: LD_ADDR_VAR 0 3
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: ST_TO_ADDR
13872: GO 14833
13874: LD_INT 4
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13908
13882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: LD_INT 5
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: ST_TO_ADDR
13906: GO 14833
13908: LD_INT 5
13910: DOUBLE
13911: EQUAL
13912: IFTRUE 13916
13914: GO 13942
13916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13917: LD_ADDR_VAR 0 3
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 14833
13942: LD_INT 9
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 13976
13950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13951: LD_ADDR_VAR 0 3
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 3
13961: PUSH
13962: LD_INT 4
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: ST_TO_ADDR
13974: GO 14833
13976: LD_INT 7
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 14010
13984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13985: LD_ADDR_VAR 0 3
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: LD_INT 4
13998: PUSH
13999: LD_INT 5
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 14833
14010: LD_INT 12
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14044
14018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: LD_INT 5
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: ST_TO_ADDR
14042: GO 14833
14044: LD_INT 13
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14078
14052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
14076: GO 14833
14078: LD_INT 14
14080: DOUBLE
14081: EQUAL
14082: IFTRUE 14086
14084: GO 14104
14086: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14087: LD_ADDR_VAR 0 3
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: ST_TO_ADDR
14102: GO 14833
14104: LD_INT 6
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14130
14112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_INT 4
14120: PUSH
14121: LD_INT 5
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: ST_TO_ADDR
14128: GO 14833
14130: LD_INT 10
14132: DOUBLE
14133: EQUAL
14134: IFTRUE 14138
14136: GO 14156
14138: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14139: LD_ADDR_VAR 0 3
14143: PUSH
14144: LD_INT 4
14146: PUSH
14147: LD_INT 5
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: ST_TO_ADDR
14154: GO 14833
14156: LD_INT 22
14158: DOUBLE
14159: EQUAL
14160: IFTRUE 14164
14162: GO 14190
14164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 11
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: LD_INT 13
14178: PUSH
14179: LD_INT 14
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: ST_TO_ADDR
14188: GO 14833
14190: LD_INT 23
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14224
14198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 13
14212: PUSH
14213: LD_INT 14
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: ST_TO_ADDR
14222: GO 14833
14224: LD_INT 24
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14258
14232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_INT 12
14243: PUSH
14244: LD_INT 13
14246: PUSH
14247: LD_INT 14
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14833
14258: LD_INT 30
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14292
14266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14267: LD_ADDR_VAR 0 3
14271: PUSH
14272: LD_INT 11
14274: PUSH
14275: LD_INT 12
14277: PUSH
14278: LD_INT 13
14280: PUSH
14281: LD_INT 14
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: ST_TO_ADDR
14290: GO 14833
14292: LD_INT 25
14294: DOUBLE
14295: EQUAL
14296: IFTRUE 14300
14298: GO 14318
14300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14301: LD_ADDR_VAR 0 3
14305: PUSH
14306: LD_INT 13
14308: PUSH
14309: LD_INT 14
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
14316: GO 14833
14318: LD_INT 27
14320: DOUBLE
14321: EQUAL
14322: IFTRUE 14326
14324: GO 14344
14326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14327: LD_ADDR_VAR 0 3
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: ST_TO_ADDR
14342: GO 14833
14344: LD_INT 92
14346: DOUBLE
14347: EQUAL
14348: IFTRUE 14352
14350: GO 14378
14352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14353: LD_ADDR_VAR 0 3
14357: PUSH
14358: LD_INT 11
14360: PUSH
14361: LD_INT 12
14363: PUSH
14364: LD_INT 13
14366: PUSH
14367: LD_INT 14
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 14833
14378: LD_INT 28
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14404
14386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_INT 13
14394: PUSH
14395: LD_INT 14
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: ST_TO_ADDR
14402: GO 14833
14404: LD_INT 29
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14430
14412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 13
14420: PUSH
14421: LD_INT 14
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: ST_TO_ADDR
14428: GO 14833
14430: LD_INT 31
14432: DOUBLE
14433: EQUAL
14434: IFTRUE 14438
14436: GO 14456
14438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_INT 13
14446: PUSH
14447: LD_INT 14
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 14833
14456: LD_INT 26
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14482
14464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 13
14472: PUSH
14473: LD_INT 14
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 14833
14482: LD_INT 42
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14516
14490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 22
14501: PUSH
14502: LD_INT 23
14504: PUSH
14505: LD_INT 24
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: ST_TO_ADDR
14514: GO 14833
14516: LD_INT 43
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14550
14524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: LD_INT 21
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 23
14538: PUSH
14539: LD_INT 24
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: ST_TO_ADDR
14548: GO 14833
14550: LD_INT 44
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14584
14558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 23
14572: PUSH
14573: LD_INT 24
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: ST_TO_ADDR
14582: GO 14833
14584: LD_INT 45
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14618
14592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_INT 21
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 23
14606: PUSH
14607: LD_INT 24
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 14833
14618: LD_INT 49
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14652
14626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_INT 21
14634: PUSH
14635: LD_INT 22
14637: PUSH
14638: LD_INT 23
14640: PUSH
14641: LD_INT 24
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: ST_TO_ADDR
14650: GO 14833
14652: LD_INT 51
14654: DOUBLE
14655: EQUAL
14656: IFTRUE 14660
14658: GO 14686
14660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_INT 23
14674: PUSH
14675: LD_INT 24
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: ST_TO_ADDR
14684: GO 14833
14686: LD_INT 52
14688: DOUBLE
14689: EQUAL
14690: IFTRUE 14694
14692: GO 14720
14694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_INT 23
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
14718: GO 14833
14720: LD_INT 53
14722: DOUBLE
14723: EQUAL
14724: IFTRUE 14728
14726: GO 14746
14728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14729: LD_ADDR_VAR 0 3
14733: PUSH
14734: LD_INT 23
14736: PUSH
14737: LD_INT 24
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
14744: GO 14833
14746: LD_INT 46
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14772
14754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_INT 23
14762: PUSH
14763: LD_INT 24
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 14833
14772: LD_INT 47
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14798
14780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 24
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 14833
14798: LD_INT 98
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 14832
14806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: LD_INT 21
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_INT 23
14820: PUSH
14821: LD_INT 24
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: ST_TO_ADDR
14830: GO 14833
14832: POP
// result := ( chassis in result ) ;
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_VAR 0 1
14842: PUSH
14843: LD_VAR 0 3
14847: IN
14848: ST_TO_ADDR
// end ;
14849: LD_VAR 0 3
14853: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
// result := array ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_VAR 0 1
14872: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14873: LD_VAR 0 1
14877: NOT
14878: IFTRUE 14887
14880: PUSH
14881: LD_VAR 0 2
14885: NOT
14886: OR
14887: IFTRUE 14896
14889: PUSH
14890: LD_VAR 0 3
14894: NOT
14895: OR
14896: IFTRUE 14910
14898: PUSH
14899: LD_VAR 0 2
14903: PUSH
14904: LD_VAR 0 1
14908: GREATER
14909: OR
14910: IFTRUE 14924
14912: PUSH
14913: LD_VAR 0 3
14917: PUSH
14918: LD_VAR 0 1
14922: GREATER
14923: OR
14924: IFFALSE 14928
// exit ;
14926: GO 15224
// if direction then
14928: LD_VAR 0 4
14932: IFFALSE 14996
// begin d := 1 ;
14934: LD_ADDR_VAR 0 9
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if i_from > i_to then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 3
14951: GREATER
14952: IFFALSE 14978
// length := ( array - i_from ) + i_to else
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: LD_VAR 0 2
14968: MINUS
14969: PUSH
14970: LD_VAR 0 3
14974: PLUS
14975: ST_TO_ADDR
14976: GO 14994
// length := i_to - i_from ;
14978: LD_ADDR_VAR 0 11
14982: PUSH
14983: LD_VAR 0 3
14987: PUSH
14988: LD_VAR 0 2
14992: MINUS
14993: ST_TO_ADDR
// end else
14994: GO 15057
// begin d := - 1 ;
14996: LD_ADDR_VAR 0 9
15000: PUSH
15001: LD_INT 1
15003: NEG
15004: ST_TO_ADDR
// if i_from > i_to then
15005: LD_VAR 0 2
15009: PUSH
15010: LD_VAR 0 3
15014: GREATER
15015: IFFALSE 15035
// length := i_from - i_to else
15017: LD_ADDR_VAR 0 11
15021: PUSH
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 3
15031: MINUS
15032: ST_TO_ADDR
15033: GO 15057
// length := ( array - i_to ) + i_from ;
15035: LD_ADDR_VAR 0 11
15039: PUSH
15040: LD_VAR 0 1
15044: PUSH
15045: LD_VAR 0 3
15049: MINUS
15050: PUSH
15051: LD_VAR 0 2
15055: PLUS
15056: ST_TO_ADDR
// end ; if not length then
15057: LD_VAR 0 11
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15224
// tmp := array ;
15066: LD_ADDR_VAR 0 10
15070: PUSH
15071: LD_VAR 0 1
15075: ST_TO_ADDR
// for i = 1 to length do
15076: LD_ADDR_VAR 0 6
15080: PUSH
15081: DOUBLE
15082: LD_INT 1
15084: DEC
15085: ST_TO_ADDR
15086: LD_VAR 0 11
15090: PUSH
15091: FOR_TO
15092: IFFALSE 15212
// begin for j = 1 to array do
15094: LD_ADDR_VAR 0 7
15098: PUSH
15099: DOUBLE
15100: LD_INT 1
15102: DEC
15103: ST_TO_ADDR
15104: LD_VAR 0 1
15108: PUSH
15109: FOR_TO
15110: IFFALSE 15198
// begin k := j + d ;
15112: LD_ADDR_VAR 0 8
15116: PUSH
15117: LD_VAR 0 7
15121: PUSH
15122: LD_VAR 0 9
15126: PLUS
15127: ST_TO_ADDR
// if k > array then
15128: LD_VAR 0 8
15132: PUSH
15133: LD_VAR 0 1
15137: GREATER
15138: IFFALSE 15148
// k := 1 ;
15140: LD_ADDR_VAR 0 8
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// if not k then
15148: LD_VAR 0 8
15152: NOT
15153: IFFALSE 15165
// k := array ;
15155: LD_ADDR_VAR 0 8
15159: PUSH
15160: LD_VAR 0 1
15164: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15165: LD_ADDR_VAR 0 10
15169: PUSH
15170: LD_VAR 0 10
15174: PPUSH
15175: LD_VAR 0 8
15179: PPUSH
15180: LD_VAR 0 1
15184: PUSH
15185: LD_VAR 0 7
15189: ARRAY
15190: PPUSH
15191: CALL_OW 1
15195: ST_TO_ADDR
// end ;
15196: GO 15109
15198: POP
15199: POP
// array := tmp ;
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 10
15209: ST_TO_ADDR
// end ;
15210: GO 15091
15212: POP
15213: POP
// result := array ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 1
15223: ST_TO_ADDR
// end ;
15224: LD_VAR 0 5
15228: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15229: LD_INT 0
15231: PPUSH
15232: PPUSH
// result := 0 ;
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// if not array or not value in array then
15241: LD_VAR 0 1
15245: NOT
15246: IFTRUE 15261
15248: PUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_VAR 0 1
15258: IN
15259: NOT
15260: OR
15261: IFFALSE 15265
// exit ;
15263: GO 15319
// for i = 1 to array do
15265: LD_ADDR_VAR 0 4
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_VAR 0 1
15279: PUSH
15280: FOR_TO
15281: IFFALSE 15317
// if value = array [ i ] then
15283: LD_VAR 0 2
15287: PUSH
15288: LD_VAR 0 1
15292: PUSH
15293: LD_VAR 0 4
15297: ARRAY
15298: EQUAL
15299: IFFALSE 15315
// begin result := i ;
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_VAR 0 4
15310: ST_TO_ADDR
// exit ;
15311: POP
15312: POP
15313: GO 15319
// end ;
15315: GO 15280
15317: POP
15318: POP
// end ;
15319: LD_VAR 0 3
15323: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15324: LD_INT 0
15326: PPUSH
// vc_chassis := chassis ;
15327: LD_ADDR_OWVAR 37
15331: PUSH
15332: LD_VAR 0 1
15336: ST_TO_ADDR
// vc_engine := engine ;
15337: LD_ADDR_OWVAR 39
15341: PUSH
15342: LD_VAR 0 2
15346: ST_TO_ADDR
// vc_control := control ;
15347: LD_ADDR_OWVAR 38
15351: PUSH
15352: LD_VAR 0 3
15356: ST_TO_ADDR
// vc_weapon := weapon ;
15357: LD_ADDR_OWVAR 40
15361: PUSH
15362: LD_VAR 0 4
15366: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15367: LD_ADDR_OWVAR 41
15371: PUSH
15372: LD_VAR 0 5
15376: ST_TO_ADDR
// end ;
15377: LD_VAR 0 6
15381: RET
// export function WantPlant ( unit ) ; var task ; begin
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
// result := false ;
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 437
15408: ST_TO_ADDR
// if task then
15409: LD_VAR 0 3
15413: IFFALSE 15441
// if task [ 1 ] [ 1 ] = p then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PUSH
15428: LD_STRING p
15430: EQUAL
15431: IFFALSE 15441
// result := true ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// end ;
15441: LD_VAR 0 2
15445: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15446: LD_INT 0
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
// if pos < 1 then
15452: LD_VAR 0 2
15456: PUSH
15457: LD_INT 1
15459: LESS
15460: IFFALSE 15464
// exit ;
15462: GO 15767
// if pos = 1 then
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 1
15471: EQUAL
15472: IFFALSE 15505
// result := Replace ( arr , pos [ 1 ] , value ) else
15474: LD_ADDR_VAR 0 4
15478: PUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_VAR 0 2
15488: PUSH
15489: LD_INT 1
15491: ARRAY
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: CALL_OW 1
15502: ST_TO_ADDR
15503: GO 15767
// begin tmp := arr ;
15505: LD_ADDR_VAR 0 6
15509: PUSH
15510: LD_VAR 0 1
15514: ST_TO_ADDR
// s_arr := [ tmp ] ;
15515: LD_ADDR_VAR 0 7
15519: PUSH
15520: LD_VAR 0 6
15524: PUSH
15525: EMPTY
15526: LIST
15527: ST_TO_ADDR
// for i = 1 to pos - 1 do
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: DOUBLE
15534: LD_INT 1
15536: DEC
15537: ST_TO_ADDR
15538: LD_VAR 0 2
15542: PUSH
15543: LD_INT 1
15545: MINUS
15546: PUSH
15547: FOR_TO
15548: IFFALSE 15593
// begin tmp := tmp [ pos [ i ] ] ;
15550: LD_ADDR_VAR 0 6
15554: PUSH
15555: LD_VAR 0 6
15559: PUSH
15560: LD_VAR 0 2
15564: PUSH
15565: LD_VAR 0 5
15569: ARRAY
15570: ARRAY
15571: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15572: LD_ADDR_VAR 0 7
15576: PUSH
15577: LD_VAR 0 7
15581: PUSH
15582: LD_VAR 0 6
15586: PUSH
15587: EMPTY
15588: LIST
15589: ADD
15590: ST_TO_ADDR
// end ;
15591: GO 15547
15593: POP
15594: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15595: LD_ADDR_VAR 0 6
15599: PUSH
15600: LD_VAR 0 6
15604: PPUSH
15605: LD_VAR 0 2
15609: PUSH
15610: LD_VAR 0 2
15614: ARRAY
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15626: LD_ADDR_VAR 0 7
15630: PUSH
15631: LD_VAR 0 7
15635: PPUSH
15636: LD_VAR 0 7
15640: PPUSH
15641: LD_VAR 0 6
15645: PPUSH
15646: CALL_OW 1
15650: ST_TO_ADDR
// for i = s_arr downto 2 do
15651: LD_ADDR_VAR 0 5
15655: PUSH
15656: DOUBLE
15657: LD_VAR 0 7
15661: INC
15662: ST_TO_ADDR
15663: LD_INT 2
15665: PUSH
15666: FOR_DOWNTO
15667: IFFALSE 15751
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15669: LD_ADDR_VAR 0 6
15673: PUSH
15674: LD_VAR 0 7
15678: PUSH
15679: LD_VAR 0 5
15683: PUSH
15684: LD_INT 1
15686: MINUS
15687: ARRAY
15688: PPUSH
15689: LD_VAR 0 2
15693: PUSH
15694: LD_VAR 0 5
15698: PUSH
15699: LD_INT 1
15701: MINUS
15702: ARRAY
15703: PPUSH
15704: LD_VAR 0 7
15708: PUSH
15709: LD_VAR 0 5
15713: ARRAY
15714: PPUSH
15715: CALL_OW 1
15719: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15720: LD_ADDR_VAR 0 7
15724: PUSH
15725: LD_VAR 0 7
15729: PPUSH
15730: LD_VAR 0 5
15734: PUSH
15735: LD_INT 1
15737: MINUS
15738: PPUSH
15739: LD_VAR 0 6
15743: PPUSH
15744: CALL_OW 1
15748: ST_TO_ADDR
// end ;
15749: GO 15666
15751: POP
15752: POP
// result := s_arr [ 1 ] ;
15753: LD_ADDR_VAR 0 4
15757: PUSH
15758: LD_VAR 0 7
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: ST_TO_ADDR
// end ; end ;
15767: LD_VAR 0 4
15771: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// if not list then
15776: LD_VAR 0 1
15780: NOT
15781: IFFALSE 15785
// exit ;
15783: GO 15876
// i := list [ pos1 ] ;
15785: LD_ADDR_VAR 0 5
15789: PUSH
15790: LD_VAR 0 1
15794: PUSH
15795: LD_VAR 0 2
15799: ARRAY
15800: ST_TO_ADDR
// if not i then
15801: LD_VAR 0 5
15805: NOT
15806: IFFALSE 15810
// exit ;
15808: GO 15876
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15810: LD_ADDR_VAR 0 1
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: LD_VAR 0 2
15824: PPUSH
15825: LD_VAR 0 1
15829: PUSH
15830: LD_VAR 0 3
15834: ARRAY
15835: PPUSH
15836: CALL_OW 1
15840: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15841: LD_ADDR_VAR 0 1
15845: PUSH
15846: LD_VAR 0 1
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_VAR 0 5
15860: PPUSH
15861: CALL_OW 1
15865: ST_TO_ADDR
// result := list ;
15866: LD_ADDR_VAR 0 4
15870: PUSH
15871: LD_VAR 0 1
15875: ST_TO_ADDR
// end ;
15876: LD_VAR 0 4
15880: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15881: LD_INT 0
15883: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15884: LD_ADDR_VAR 0 5
15888: PUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 251
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: LD_VAR 0 3
15918: PPUSH
15919: LD_VAR 0 4
15923: PPUSH
15924: CALL 16306 0 5
15928: ST_TO_ADDR
// end ;
15929: LD_VAR 0 5
15933: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15934: LD_INT 0
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
// if not list or not unit then
15940: LD_VAR 0 2
15944: NOT
15945: IFTRUE 15954
15947: PUSH
15948: LD_VAR 0 1
15952: NOT
15953: OR
15954: IFFALSE 15958
// exit ;
15956: GO 16301
// result := [ ] ;
15958: LD_ADDR_VAR 0 5
15962: PUSH
15963: EMPTY
15964: ST_TO_ADDR
// for i in list do
15965: LD_ADDR_VAR 0 6
15969: PUSH
15970: LD_VAR 0 2
15974: PUSH
15975: FOR_IN
15976: IFFALSE 16194
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15978: LD_ADDR_VAR 0 8
15982: PUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_VAR 0 6
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 6
16001: PUSH
16002: LD_INT 2
16004: ARRAY
16005: PPUSH
16006: CALL_OW 297
16010: ST_TO_ADDR
// if not Count ( result ) then
16011: LD_VAR 0 5
16015: PPUSH
16016: CALL 12528 0 1
16020: NOT
16021: IFFALSE 16054
// begin result := Join ( result , [ i , tmp ] ) ;
16023: LD_ADDR_VAR 0 5
16027: PUSH
16028: LD_VAR 0 5
16032: PPUSH
16033: LD_VAR 0 6
16037: PUSH
16038: LD_VAR 0 8
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL 48494 0 2
16051: ST_TO_ADDR
// continue ;
16052: GO 15975
// end ; if result [ result ] [ 2 ] <= tmp then
16054: LD_VAR 0 5
16058: PUSH
16059: LD_VAR 0 5
16063: ARRAY
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PUSH
16069: LD_VAR 0 8
16073: LESSEQUAL
16074: IFFALSE 16107
// result := Join ( result , [ i , tmp ] ) else
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_VAR 0 5
16085: PPUSH
16086: LD_VAR 0 6
16090: PUSH
16091: LD_VAR 0 8
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL 48494 0 2
16104: ST_TO_ADDR
16105: GO 16192
// begin for j := 1 to Count ( result ) do
16107: LD_ADDR_VAR 0 7
16111: PUSH
16112: DOUBLE
16113: LD_INT 1
16115: DEC
16116: ST_TO_ADDR
16117: LD_VAR 0 5
16121: PPUSH
16122: CALL 12528 0 1
16126: PUSH
16127: FOR_TO
16128: IFFALSE 16190
// begin if tmp < result [ j ] [ 2 ] then
16130: LD_VAR 0 8
16134: PUSH
16135: LD_VAR 0 5
16139: PUSH
16140: LD_VAR 0 7
16144: ARRAY
16145: PUSH
16146: LD_INT 2
16148: ARRAY
16149: LESS
16150: IFFALSE 16188
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16152: LD_ADDR_VAR 0 5
16156: PUSH
16157: LD_VAR 0 5
16161: PPUSH
16162: LD_VAR 0 7
16166: PPUSH
16167: LD_VAR 0 6
16171: PUSH
16172: LD_VAR 0 8
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PPUSH
16181: CALL_OW 2
16185: ST_TO_ADDR
// break ;
16186: GO 16190
// end ; end ;
16188: GO 16127
16190: POP
16191: POP
// end ; end ;
16192: GO 15975
16194: POP
16195: POP
// if result and not asc then
16196: LD_VAR 0 5
16200: IFFALSE 16209
16202: PUSH
16203: LD_VAR 0 3
16207: NOT
16208: AND
16209: IFFALSE 16226
// result := ReverseArray ( result ) ;
16211: LD_ADDR_VAR 0 5
16215: PUSH
16216: LD_VAR 0 5
16220: PPUSH
16221: CALL 43584 0 1
16225: ST_TO_ADDR
// tmp := [ ] ;
16226: LD_ADDR_VAR 0 8
16230: PUSH
16231: EMPTY
16232: ST_TO_ADDR
// if mode then
16233: LD_VAR 0 4
16237: IFFALSE 16301
// begin for i := 1 to result do
16239: LD_ADDR_VAR 0 6
16243: PUSH
16244: DOUBLE
16245: LD_INT 1
16247: DEC
16248: ST_TO_ADDR
16249: LD_VAR 0 5
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16289
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16257: LD_ADDR_VAR 0 8
16261: PUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 5
16271: PUSH
16272: LD_VAR 0 6
16276: ARRAY
16277: PUSH
16278: LD_INT 1
16280: ARRAY
16281: PPUSH
16282: CALL 48494 0 2
16286: ST_TO_ADDR
16287: GO 16254
16289: POP
16290: POP
// result := tmp ;
16291: LD_ADDR_VAR 0 5
16295: PUSH
16296: LD_VAR 0 8
16300: ST_TO_ADDR
// end ; end ;
16301: LD_VAR 0 5
16305: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
// if not list then
16312: LD_VAR 0 3
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16711
// result := [ ] ;
16321: LD_ADDR_VAR 0 6
16325: PUSH
16326: EMPTY
16327: ST_TO_ADDR
// for i in list do
16328: LD_ADDR_VAR 0 7
16332: PUSH
16333: LD_VAR 0 3
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16541
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16341: LD_ADDR_VAR 0 9
16345: PUSH
16346: LD_VAR 0 7
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: CALL_OW 297
16365: ST_TO_ADDR
// if not result then
16366: LD_VAR 0 6
16370: NOT
16371: IFFALSE 16397
// result := [ [ i , tmp ] ] else
16373: LD_ADDR_VAR 0 6
16377: PUSH
16378: LD_VAR 0 7
16382: PUSH
16383: LD_VAR 0 9
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: ST_TO_ADDR
16395: GO 16539
// begin if result [ result ] [ 2 ] <= tmp then
16397: LD_VAR 0 6
16401: PUSH
16402: LD_VAR 0 6
16406: ARRAY
16407: PUSH
16408: LD_INT 2
16410: ARRAY
16411: PUSH
16412: LD_VAR 0 9
16416: LESSEQUAL
16417: IFFALSE 16459
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16419: LD_ADDR_VAR 0 6
16423: PUSH
16424: LD_VAR 0 6
16428: PPUSH
16429: LD_VAR 0 6
16433: PUSH
16434: LD_INT 1
16436: PLUS
16437: PPUSH
16438: LD_VAR 0 7
16442: PUSH
16443: LD_VAR 0 9
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 2
16456: ST_TO_ADDR
16457: GO 16539
// for j := 1 to result do
16459: LD_ADDR_VAR 0 8
16463: PUSH
16464: DOUBLE
16465: LD_INT 1
16467: DEC
16468: ST_TO_ADDR
16469: LD_VAR 0 6
16473: PUSH
16474: FOR_TO
16475: IFFALSE 16537
// begin if tmp < result [ j ] [ 2 ] then
16477: LD_VAR 0 9
16481: PUSH
16482: LD_VAR 0 6
16486: PUSH
16487: LD_VAR 0 8
16491: ARRAY
16492: PUSH
16493: LD_INT 2
16495: ARRAY
16496: LESS
16497: IFFALSE 16535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16499: LD_ADDR_VAR 0 6
16503: PUSH
16504: LD_VAR 0 6
16508: PPUSH
16509: LD_VAR 0 8
16513: PPUSH
16514: LD_VAR 0 7
16518: PUSH
16519: LD_VAR 0 9
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 2
16532: ST_TO_ADDR
// break ;
16533: GO 16537
// end ; end ;
16535: GO 16474
16537: POP
16538: POP
// end ; end ;
16539: GO 16338
16541: POP
16542: POP
// if result and not asc then
16543: LD_VAR 0 6
16547: IFFALSE 16556
16549: PUSH
16550: LD_VAR 0 4
16554: NOT
16555: AND
16556: IFFALSE 16631
// begin tmp := result ;
16558: LD_ADDR_VAR 0 9
16562: PUSH
16563: LD_VAR 0 6
16567: ST_TO_ADDR
// for i = tmp downto 1 do
16568: LD_ADDR_VAR 0 7
16572: PUSH
16573: DOUBLE
16574: LD_VAR 0 9
16578: INC
16579: ST_TO_ADDR
16580: LD_INT 1
16582: PUSH
16583: FOR_DOWNTO
16584: IFFALSE 16629
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16586: LD_ADDR_VAR 0 6
16590: PUSH
16591: LD_VAR 0 6
16595: PPUSH
16596: LD_VAR 0 9
16600: PUSH
16601: LD_VAR 0 7
16605: MINUS
16606: PUSH
16607: LD_INT 1
16609: PLUS
16610: PPUSH
16611: LD_VAR 0 9
16615: PUSH
16616: LD_VAR 0 7
16620: ARRAY
16621: PPUSH
16622: CALL_OW 1
16626: ST_TO_ADDR
16627: GO 16583
16629: POP
16630: POP
// end ; tmp := [ ] ;
16631: LD_ADDR_VAR 0 9
16635: PUSH
16636: EMPTY
16637: ST_TO_ADDR
// if mode then
16638: LD_VAR 0 5
16642: IFFALSE 16711
// begin for i = 1 to result do
16644: LD_ADDR_VAR 0 7
16648: PUSH
16649: DOUBLE
16650: LD_INT 1
16652: DEC
16653: ST_TO_ADDR
16654: LD_VAR 0 6
16658: PUSH
16659: FOR_TO
16660: IFFALSE 16699
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16662: LD_ADDR_VAR 0 9
16666: PUSH
16667: LD_VAR 0 9
16671: PPUSH
16672: LD_VAR 0 7
16676: PPUSH
16677: LD_VAR 0 6
16681: PUSH
16682: LD_VAR 0 7
16686: ARRAY
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PPUSH
16692: CALL_OW 1
16696: ST_TO_ADDR
16697: GO 16659
16699: POP
16700: POP
// result := tmp ;
16701: LD_ADDR_VAR 0 6
16705: PUSH
16706: LD_VAR 0 9
16710: ST_TO_ADDR
// end ; end ;
16711: LD_VAR 0 6
16715: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16716: LD_INT 0
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16724: LD_ADDR_VAR 0 5
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// if not x or not y then
16746: LD_VAR 0 2
16750: NOT
16751: IFTRUE 16760
16753: PUSH
16754: LD_VAR 0 3
16758: NOT
16759: OR
16760: IFFALSE 16764
// exit ;
16762: GO 18420
// if not range then
16764: LD_VAR 0 4
16768: NOT
16769: IFFALSE 16779
// range := 10 ;
16771: LD_ADDR_VAR 0 4
16775: PUSH
16776: LD_INT 10
16778: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16779: LD_ADDR_VAR 0 8
16783: PUSH
16784: LD_INT 81
16786: PUSH
16787: LD_VAR 0 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 92
16798: PUSH
16799: LD_VAR 0 2
16803: PUSH
16804: LD_VAR 0 3
16808: PUSH
16809: LD_VAR 0 4
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: LD_INT 21
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: ST_TO_ADDR
// if not tmp then
16847: LD_VAR 0 8
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 18420
// for i in tmp do
16856: LD_ADDR_VAR 0 6
16860: PUSH
16861: LD_VAR 0 8
16865: PUSH
16866: FOR_IN
16867: IFFALSE 18395
// begin points := [ 0 , 0 , 0 ] ;
16869: LD_ADDR_VAR 0 9
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: ST_TO_ADDR
// bpoints := 1 ;
16888: LD_ADDR_VAR 0 10
16892: PUSH
16893: LD_INT 1
16895: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16896: LD_VAR 0 6
16900: PPUSH
16901: CALL_OW 247
16905: PUSH
16906: LD_INT 1
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 17496
16914: POP
// begin if GetClass ( i ) = 1 then
16915: LD_VAR 0 6
16919: PPUSH
16920: CALL_OW 257
16924: PUSH
16925: LD_INT 1
16927: EQUAL
16928: IFFALSE 16949
// points := [ 10 , 5 , 3 ] ;
16930: LD_ADDR_VAR 0 9
16934: PUSH
16935: LD_INT 10
16937: PUSH
16938: LD_INT 5
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16949: LD_VAR 0 6
16953: PPUSH
16954: CALL_OW 257
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 3
16964: PUSH
16965: LD_INT 4
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: IN
16973: IFFALSE 16994
// points := [ 3 , 2 , 1 ] ;
16975: LD_ADDR_VAR 0 9
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16994: LD_VAR 0 6
16998: PPUSH
16999: CALL_OW 257
17003: PUSH
17004: LD_INT 5
17006: EQUAL
17007: IFFALSE 17028
// points := [ 130 , 5 , 2 ] ;
17009: LD_ADDR_VAR 0 9
17013: PUSH
17014: LD_INT 130
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17028: LD_VAR 0 6
17032: PPUSH
17033: CALL_OW 257
17037: PUSH
17038: LD_INT 8
17040: EQUAL
17041: IFFALSE 17062
// points := [ 35 , 35 , 30 ] ;
17043: LD_ADDR_VAR 0 9
17047: PUSH
17048: LD_INT 35
17050: PUSH
17051: LD_INT 35
17053: PUSH
17054: LD_INT 30
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17062: LD_VAR 0 6
17066: PPUSH
17067: CALL_OW 257
17071: PUSH
17072: LD_INT 9
17074: EQUAL
17075: IFFALSE 17096
// points := [ 20 , 55 , 40 ] ;
17077: LD_ADDR_VAR 0 9
17081: PUSH
17082: LD_INT 20
17084: PUSH
17085: LD_INT 55
17087: PUSH
17088: LD_INT 40
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17096: LD_VAR 0 6
17100: PPUSH
17101: CALL_OW 257
17105: PUSH
17106: LD_INT 12
17108: PUSH
17109: LD_INT 16
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: IN
17116: IFFALSE 17137
// points := [ 5 , 3 , 2 ] ;
17118: LD_ADDR_VAR 0 9
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 3
17128: PUSH
17129: LD_INT 2
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17137: LD_VAR 0 6
17141: PPUSH
17142: CALL_OW 257
17146: PUSH
17147: LD_INT 17
17149: EQUAL
17150: IFFALSE 17171
// points := [ 100 , 50 , 75 ] ;
17152: LD_ADDR_VAR 0 9
17156: PUSH
17157: LD_INT 100
17159: PUSH
17160: LD_INT 50
17162: PUSH
17163: LD_INT 75
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17171: LD_VAR 0 6
17175: PPUSH
17176: CALL_OW 257
17180: PUSH
17181: LD_INT 15
17183: EQUAL
17184: IFFALSE 17205
// points := [ 10 , 5 , 3 ] ;
17186: LD_ADDR_VAR 0 9
17190: PUSH
17191: LD_INT 10
17193: PUSH
17194: LD_INT 5
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17205: LD_VAR 0 6
17209: PPUSH
17210: CALL_OW 257
17214: PUSH
17215: LD_INT 14
17217: EQUAL
17218: IFFALSE 17239
// points := [ 10 , 0 , 0 ] ;
17220: LD_ADDR_VAR 0 9
17224: PUSH
17225: LD_INT 10
17227: PUSH
17228: LD_INT 0
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17239: LD_VAR 0 6
17243: PPUSH
17244: CALL_OW 257
17248: PUSH
17249: LD_INT 11
17251: EQUAL
17252: IFFALSE 17273
// points := [ 30 , 10 , 5 ] ;
17254: LD_ADDR_VAR 0 9
17258: PUSH
17259: LD_INT 30
17261: PUSH
17262: LD_INT 10
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17273: LD_VAR 0 1
17277: PPUSH
17278: LD_INT 5
17280: PPUSH
17281: CALL_OW 321
17285: PUSH
17286: LD_INT 2
17288: EQUAL
17289: IFFALSE 17306
// bpoints := bpoints * 1.8 ;
17291: LD_ADDR_VAR 0 10
17295: PUSH
17296: LD_VAR 0 10
17300: PUSH
17301: LD_REAL  1.80000000000000E+0000
17304: MUL
17305: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17306: LD_VAR 0 6
17310: PPUSH
17311: CALL_OW 257
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: LD_INT 4
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: IN
17334: IFFALSE 17354
17336: PUSH
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 51
17344: PPUSH
17345: CALL_OW 321
17349: PUSH
17350: LD_INT 2
17352: EQUAL
17353: AND
17354: IFFALSE 17371
// bpoints := bpoints * 1.2 ;
17356: LD_ADDR_VAR 0 10
17360: PUSH
17361: LD_VAR 0 10
17365: PUSH
17366: LD_REAL  1.20000000000000E+0000
17369: MUL
17370: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17371: LD_VAR 0 6
17375: PPUSH
17376: CALL_OW 257
17380: PUSH
17381: LD_INT 5
17383: PUSH
17384: LD_INT 7
17386: PUSH
17387: LD_INT 9
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: IN
17395: IFFALSE 17415
17397: PUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: LD_INT 52
17405: PPUSH
17406: CALL_OW 321
17410: PUSH
17411: LD_INT 2
17413: EQUAL
17414: AND
17415: IFFALSE 17432
// bpoints := bpoints * 1.5 ;
17417: LD_ADDR_VAR 0 10
17421: PUSH
17422: LD_VAR 0 10
17426: PUSH
17427: LD_REAL  1.50000000000000E+0000
17430: MUL
17431: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_INT 66
17439: PPUSH
17440: CALL_OW 321
17444: PUSH
17445: LD_INT 2
17447: EQUAL
17448: IFFALSE 17465
// bpoints := bpoints * 1.1 ;
17450: LD_ADDR_VAR 0 10
17454: PUSH
17455: LD_VAR 0 10
17459: PUSH
17460: LD_REAL  1.10000000000000E+0000
17463: MUL
17464: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17465: LD_ADDR_VAR 0 10
17469: PUSH
17470: LD_VAR 0 10
17474: PUSH
17475: LD_VAR 0 6
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 259
17487: PUSH
17488: LD_REAL  1.15000000000000E+0000
17491: MUL
17492: MUL
17493: ST_TO_ADDR
// end ; unit_vehicle :
17494: GO 18324
17496: LD_INT 2
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 18312
17504: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17505: LD_VAR 0 6
17509: PPUSH
17510: CALL_OW 264
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: LD_INT 42
17520: PUSH
17521: LD_INT 24
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: IN
17529: IFFALSE 17550
// points := [ 25 , 5 , 3 ] ;
17531: LD_ADDR_VAR 0 9
17535: PUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 5
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17550: LD_VAR 0 6
17554: PPUSH
17555: CALL_OW 264
17559: PUSH
17560: LD_INT 4
17562: PUSH
17563: LD_INT 43
17565: PUSH
17566: LD_INT 25
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: IN
17574: IFFALSE 17595
// points := [ 40 , 15 , 5 ] ;
17576: LD_ADDR_VAR 0 9
17580: PUSH
17581: LD_INT 40
17583: PUSH
17584: LD_INT 15
17586: PUSH
17587: LD_INT 5
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17595: LD_VAR 0 6
17599: PPUSH
17600: CALL_OW 264
17604: PUSH
17605: LD_INT 3
17607: PUSH
17608: LD_INT 23
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: IN
17615: IFFALSE 17636
// points := [ 7 , 25 , 8 ] ;
17617: LD_ADDR_VAR 0 9
17621: PUSH
17622: LD_INT 7
17624: PUSH
17625: LD_INT 25
17627: PUSH
17628: LD_INT 8
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17636: LD_VAR 0 6
17640: PPUSH
17641: CALL_OW 264
17645: PUSH
17646: LD_INT 5
17648: PUSH
17649: LD_INT 27
17651: PUSH
17652: LD_INT 44
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: IN
17660: IFFALSE 17681
// points := [ 14 , 50 , 16 ] ;
17662: LD_ADDR_VAR 0 9
17666: PUSH
17667: LD_INT 14
17669: PUSH
17670: LD_INT 50
17672: PUSH
17673: LD_INT 16
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17681: LD_VAR 0 6
17685: PPUSH
17686: CALL_OW 264
17690: PUSH
17691: LD_INT 6
17693: PUSH
17694: LD_INT 46
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: IN
17701: IFFALSE 17722
// points := [ 32 , 120 , 70 ] ;
17703: LD_ADDR_VAR 0 9
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 120
17713: PUSH
17714: LD_INT 70
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17722: LD_VAR 0 6
17726: PPUSH
17727: CALL_OW 264
17731: PUSH
17732: LD_INT 7
17734: PUSH
17735: LD_INT 28
17737: PUSH
17738: LD_INT 45
17740: PUSH
17741: LD_INT 92
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: IN
17750: IFFALSE 17771
// points := [ 35 , 20 , 45 ] ;
17752: LD_ADDR_VAR 0 9
17756: PUSH
17757: LD_INT 35
17759: PUSH
17760: LD_INT 20
17762: PUSH
17763: LD_INT 45
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17771: LD_VAR 0 6
17775: PPUSH
17776: CALL_OW 264
17780: PUSH
17781: LD_INT 47
17783: PUSH
17784: EMPTY
17785: LIST
17786: IN
17787: IFFALSE 17808
// points := [ 67 , 45 , 75 ] ;
17789: LD_ADDR_VAR 0 9
17793: PUSH
17794: LD_INT 67
17796: PUSH
17797: LD_INT 45
17799: PUSH
17800: LD_INT 75
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17808: LD_VAR 0 6
17812: PPUSH
17813: CALL_OW 264
17817: PUSH
17818: LD_INT 26
17820: PUSH
17821: EMPTY
17822: LIST
17823: IN
17824: IFFALSE 17845
// points := [ 120 , 30 , 80 ] ;
17826: LD_ADDR_VAR 0 9
17830: PUSH
17831: LD_INT 120
17833: PUSH
17834: LD_INT 30
17836: PUSH
17837: LD_INT 80
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17845: LD_VAR 0 6
17849: PPUSH
17850: CALL_OW 264
17854: PUSH
17855: LD_INT 22
17857: PUSH
17858: EMPTY
17859: LIST
17860: IN
17861: IFFALSE 17882
// points := [ 40 , 1 , 1 ] ;
17863: LD_ADDR_VAR 0 9
17867: PUSH
17868: LD_INT 40
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17882: LD_VAR 0 6
17886: PPUSH
17887: CALL_OW 264
17891: PUSH
17892: LD_INT 29
17894: PUSH
17895: EMPTY
17896: LIST
17897: IN
17898: IFFALSE 17919
// points := [ 70 , 200 , 400 ] ;
17900: LD_ADDR_VAR 0 9
17904: PUSH
17905: LD_INT 70
17907: PUSH
17908: LD_INT 200
17910: PUSH
17911: LD_INT 400
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17919: LD_VAR 0 6
17923: PPUSH
17924: CALL_OW 264
17928: PUSH
17929: LD_INT 14
17931: PUSH
17932: LD_INT 53
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: IN
17939: IFFALSE 17960
// points := [ 40 , 10 , 20 ] ;
17941: LD_ADDR_VAR 0 9
17945: PUSH
17946: LD_INT 40
17948: PUSH
17949: LD_INT 10
17951: PUSH
17952: LD_INT 20
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17960: LD_VAR 0 6
17964: PPUSH
17965: CALL_OW 264
17969: PUSH
17970: LD_INT 9
17972: PUSH
17973: EMPTY
17974: LIST
17975: IN
17976: IFFALSE 17997
// points := [ 5 , 70 , 20 ] ;
17978: LD_ADDR_VAR 0 9
17982: PUSH
17983: LD_INT 5
17985: PUSH
17986: LD_INT 70
17988: PUSH
17989: LD_INT 20
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17997: LD_VAR 0 6
18001: PPUSH
18002: CALL_OW 264
18006: PUSH
18007: LD_INT 10
18009: PUSH
18010: EMPTY
18011: LIST
18012: IN
18013: IFFALSE 18034
// points := [ 35 , 110 , 70 ] ;
18015: LD_ADDR_VAR 0 9
18019: PUSH
18020: LD_INT 35
18022: PUSH
18023: LD_INT 110
18025: PUSH
18026: LD_INT 70
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18034: LD_VAR 0 6
18038: PPUSH
18039: CALL_OW 265
18043: PUSH
18044: LD_INT 25
18046: EQUAL
18047: IFFALSE 18068
// points := [ 80 , 65 , 100 ] ;
18049: LD_ADDR_VAR 0 9
18053: PUSH
18054: LD_INT 80
18056: PUSH
18057: LD_INT 65
18059: PUSH
18060: LD_INT 100
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18068: LD_VAR 0 6
18072: PPUSH
18073: CALL_OW 263
18077: PUSH
18078: LD_INT 1
18080: EQUAL
18081: IFFALSE 18116
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18083: LD_ADDR_VAR 0 10
18087: PUSH
18088: LD_VAR 0 10
18092: PUSH
18093: LD_VAR 0 6
18097: PPUSH
18098: CALL_OW 311
18102: PPUSH
18103: LD_INT 3
18105: PPUSH
18106: CALL_OW 259
18110: PUSH
18111: LD_INT 4
18113: MUL
18114: MUL
18115: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18116: LD_VAR 0 6
18120: PPUSH
18121: CALL_OW 263
18125: PUSH
18126: LD_INT 2
18128: EQUAL
18129: IFFALSE 18180
// begin j := IsControledBy ( i ) ;
18131: LD_ADDR_VAR 0 7
18135: PUSH
18136: LD_VAR 0 6
18140: PPUSH
18141: CALL_OW 312
18145: ST_TO_ADDR
// if j then
18146: LD_VAR 0 7
18150: IFFALSE 18180
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18152: LD_ADDR_VAR 0 10
18156: PUSH
18157: LD_VAR 0 10
18161: PUSH
18162: LD_VAR 0 7
18166: PPUSH
18167: LD_INT 3
18169: PPUSH
18170: CALL_OW 259
18174: PUSH
18175: LD_INT 3
18177: MUL
18178: MUL
18179: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18180: LD_VAR 0 6
18184: PPUSH
18185: CALL_OW 264
18189: PUSH
18190: LD_INT 5
18192: PUSH
18193: LD_INT 6
18195: PUSH
18196: LD_INT 46
18198: PUSH
18199: LD_INT 44
18201: PUSH
18202: LD_INT 47
18204: PUSH
18205: LD_INT 45
18207: PUSH
18208: LD_INT 28
18210: PUSH
18211: LD_INT 7
18213: PUSH
18214: LD_INT 27
18216: PUSH
18217: LD_INT 29
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: IN
18232: IFFALSE 18252
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_INT 52
18242: PPUSH
18243: CALL_OW 321
18247: PUSH
18248: LD_INT 2
18250: EQUAL
18251: AND
18252: IFFALSE 18269
// bpoints := bpoints * 1.2 ;
18254: LD_ADDR_VAR 0 10
18258: PUSH
18259: LD_VAR 0 10
18263: PUSH
18264: LD_REAL  1.20000000000000E+0000
18267: MUL
18268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18269: LD_VAR 0 6
18273: PPUSH
18274: CALL_OW 264
18278: PUSH
18279: LD_INT 6
18281: PUSH
18282: LD_INT 46
18284: PUSH
18285: LD_INT 47
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: IN
18293: IFFALSE 18310
// bpoints := bpoints * 1.2 ;
18295: LD_ADDR_VAR 0 10
18299: PUSH
18300: LD_VAR 0 10
18304: PUSH
18305: LD_REAL  1.20000000000000E+0000
18308: MUL
18309: ST_TO_ADDR
// end ; unit_building :
18310: GO 18324
18312: LD_INT 3
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18323
18320: POP
// ; end ;
18321: GO 18324
18323: POP
// for j = 1 to 3 do
18324: LD_ADDR_VAR 0 7
18328: PUSH
18329: DOUBLE
18330: LD_INT 1
18332: DEC
18333: ST_TO_ADDR
18334: LD_INT 3
18336: PUSH
18337: FOR_TO
18338: IFFALSE 18391
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18340: LD_ADDR_VAR 0 5
18344: PUSH
18345: LD_VAR 0 5
18349: PPUSH
18350: LD_VAR 0 7
18354: PPUSH
18355: LD_VAR 0 5
18359: PUSH
18360: LD_VAR 0 7
18364: ARRAY
18365: PUSH
18366: LD_VAR 0 9
18370: PUSH
18371: LD_VAR 0 7
18375: ARRAY
18376: PUSH
18377: LD_VAR 0 10
18381: MUL
18382: PLUS
18383: PPUSH
18384: CALL_OW 1
18388: ST_TO_ADDR
18389: GO 18337
18391: POP
18392: POP
// end ;
18393: GO 16866
18395: POP
18396: POP
// result := Replace ( result , 4 , tmp ) ;
18397: LD_ADDR_VAR 0 5
18401: PUSH
18402: LD_VAR 0 5
18406: PPUSH
18407: LD_INT 4
18409: PPUSH
18410: LD_VAR 0 8
18414: PPUSH
18415: CALL_OW 1
18419: ST_TO_ADDR
// end ;
18420: LD_VAR 0 5
18424: RET
// export function DangerAtRange ( unit , range ) ; begin
18425: LD_INT 0
18427: PPUSH
// if not unit then
18428: LD_VAR 0 1
18432: NOT
18433: IFFALSE 18437
// exit ;
18435: GO 18482
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18437: LD_ADDR_VAR 0 3
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 255
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 250
18461: PPUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 251
18471: PPUSH
18472: LD_VAR 0 2
18476: PPUSH
18477: CALL 16716 0 4
18481: ST_TO_ADDR
// end ;
18482: LD_VAR 0 3
18486: RET
// export function DangerInArea ( side , area ) ; begin
18487: LD_INT 0
18489: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: LD_INT 81
18502: PUSH
18503: LD_VAR 0 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 70
18516: ST_TO_ADDR
// end ;
18517: LD_VAR 0 3
18521: RET
// export function IsExtension ( b ) ; begin
18522: LD_INT 0
18524: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18525: LD_ADDR_VAR 0 2
18529: PUSH
18530: LD_VAR 0 1
18534: PUSH
18535: LD_INT 23
18537: PUSH
18538: LD_INT 20
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_INT 17
18546: PUSH
18547: LD_INT 24
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 19
18555: PUSH
18556: LD_INT 16
18558: PUSH
18559: LD_INT 25
18561: PUSH
18562: LD_INT 18
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: IN
18577: ST_TO_ADDR
// end ;
18578: LD_VAR 0 2
18582: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// result := [ ] ;
18588: LD_ADDR_VAR 0 4
18592: PUSH
18593: EMPTY
18594: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18595: LD_ADDR_VAR 0 5
18599: PUSH
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 3
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PPUSH
18615: CALL_OW 70
18619: ST_TO_ADDR
// if not tmp then
18620: LD_VAR 0 5
18624: NOT
18625: IFFALSE 18629
// exit ;
18627: GO 18693
// if checkLink then
18629: LD_VAR 0 3
18633: IFFALSE 18683
// begin for i in tmp do
18635: LD_ADDR_VAR 0 6
18639: PUSH
18640: LD_VAR 0 5
18644: PUSH
18645: FOR_IN
18646: IFFALSE 18681
// if GetBase ( i ) <> base then
18648: LD_VAR 0 6
18652: PPUSH
18653: CALL_OW 274
18657: PUSH
18658: LD_VAR 0 1
18662: NONEQUAL
18663: IFFALSE 18679
// ComLinkToBase ( base , i ) ;
18665: LD_VAR 0 1
18669: PPUSH
18670: LD_VAR 0 6
18674: PPUSH
18675: CALL_OW 169
18679: GO 18645
18681: POP
18682: POP
// end ; result := tmp ;
18683: LD_ADDR_VAR 0 4
18687: PUSH
18688: LD_VAR 0 5
18692: ST_TO_ADDR
// end ;
18693: LD_VAR 0 4
18697: RET
// export function ComComplete ( units , b ) ; var i ; begin
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// if not units then
18702: LD_VAR 0 1
18706: NOT
18707: IFFALSE 18711
// exit ;
18709: GO 18801
// for i in units do
18711: LD_ADDR_VAR 0 4
18715: PUSH
18716: LD_VAR 0 1
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18799
// if BuildingStatus ( b ) = bs_build then
18724: LD_VAR 0 2
18728: PPUSH
18729: CALL_OW 461
18733: PUSH
18734: LD_INT 1
18736: EQUAL
18737: IFFALSE 18797
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18739: LD_VAR 0 4
18743: PPUSH
18744: LD_STRING h
18746: PUSH
18747: LD_VAR 0 2
18751: PPUSH
18752: CALL_OW 250
18756: PUSH
18757: LD_VAR 0 2
18761: PPUSH
18762: CALL_OW 251
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: PPUSH
18793: CALL_OW 446
18797: GO 18721
18799: POP
18800: POP
// end ;
18801: LD_VAR 0 3
18805: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
18813: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18814: LD_VAR 0 1
18818: NOT
18819: IFTRUE 18836
18821: PUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 263
18831: PUSH
18832: LD_INT 2
18834: NONEQUAL
18835: OR
18836: IFFALSE 18840
// exit ;
18838: GO 19156
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18840: LD_ADDR_VAR 0 6
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 255
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 36
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 34
18877: PUSH
18878: LD_INT 31
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PPUSH
18894: CALL_OW 69
18898: ST_TO_ADDR
// if not tmp then
18899: LD_VAR 0 6
18903: NOT
18904: IFFALSE 18908
// exit ;
18906: GO 19156
// result := [ ] ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: EMPTY
18914: ST_TO_ADDR
// for i in tmp do
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_VAR 0 6
18924: PUSH
18925: FOR_IN
18926: IFFALSE 18997
// begin t := UnitsInside ( i ) ;
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_VAR 0 3
18937: PPUSH
18938: CALL_OW 313
18942: ST_TO_ADDR
// if t then
18943: LD_VAR 0 4
18947: IFFALSE 18995
// for j in t do
18949: LD_ADDR_VAR 0 7
18953: PUSH
18954: LD_VAR 0 4
18958: PUSH
18959: FOR_IN
18960: IFFALSE 18993
// result := Replace ( result , result + 1 , j ) ;
18962: LD_ADDR_VAR 0 2
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: LD_VAR 0 2
18976: PUSH
18977: LD_INT 1
18979: PLUS
18980: PPUSH
18981: LD_VAR 0 7
18985: PPUSH
18986: CALL_OW 1
18990: ST_TO_ADDR
18991: GO 18959
18993: POP
18994: POP
// end ;
18995: GO 18925
18997: POP
18998: POP
// if not result then
18999: LD_VAR 0 2
19003: NOT
19004: IFFALSE 19008
// exit ;
19006: GO 19156
// mech := result [ 1 ] ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 2
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: ST_TO_ADDR
// if result > 1 then
19022: LD_VAR 0 2
19026: PUSH
19027: LD_INT 1
19029: GREATER
19030: IFFALSE 19142
// begin for i = 2 to result do
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: DOUBLE
19038: LD_INT 2
19040: DEC
19041: ST_TO_ADDR
19042: LD_VAR 0 2
19046: PUSH
19047: FOR_TO
19048: IFFALSE 19140
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19050: LD_ADDR_VAR 0 4
19054: PUSH
19055: LD_VAR 0 2
19059: PUSH
19060: LD_VAR 0 3
19064: ARRAY
19065: PPUSH
19066: LD_INT 3
19068: PPUSH
19069: CALL_OW 259
19073: PUSH
19074: LD_VAR 0 2
19078: PUSH
19079: LD_VAR 0 3
19083: ARRAY
19084: PPUSH
19085: CALL_OW 432
19089: MINUS
19090: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19091: LD_VAR 0 4
19095: PUSH
19096: LD_VAR 0 5
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: CALL_OW 259
19108: PUSH
19109: LD_VAR 0 5
19113: PPUSH
19114: CALL_OW 432
19118: MINUS
19119: GREATEREQUAL
19120: IFFALSE 19138
// mech := result [ i ] ;
19122: LD_ADDR_VAR 0 5
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: LD_VAR 0 3
19136: ARRAY
19137: ST_TO_ADDR
// end ;
19138: GO 19047
19140: POP
19141: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19142: LD_VAR 0 1
19146: PPUSH
19147: LD_VAR 0 5
19151: PPUSH
19152: CALL_OW 135
// end ;
19156: LD_VAR 0 2
19160: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19161: LD_INT 0
19163: PPUSH
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
19174: PPUSH
19175: PPUSH
// result := [ ] ;
19176: LD_ADDR_VAR 0 7
19180: PUSH
19181: EMPTY
19182: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19183: LD_VAR 0 1
19187: PPUSH
19188: CALL_OW 266
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: IN
19203: NOT
19204: IFFALSE 19208
// exit ;
19206: GO 20848
// if name then
19208: LD_VAR 0 3
19212: IFFALSE 19228
// SetBName ( base_dep , name ) ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: CALL_OW 500
// base := GetBase ( base_dep ) ;
19228: LD_ADDR_VAR 0 15
19232: PUSH
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 274
19242: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19243: LD_ADDR_VAR 0 16
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 255
19257: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19258: LD_ADDR_VAR 0 17
19262: PUSH
19263: LD_VAR 0 1
19267: PPUSH
19268: CALL_OW 248
19272: ST_TO_ADDR
// if sources then
19273: LD_VAR 0 5
19277: IFFALSE 19324
// for i = 1 to 3 do
19279: LD_ADDR_VAR 0 8
19283: PUSH
19284: DOUBLE
19285: LD_INT 1
19287: DEC
19288: ST_TO_ADDR
19289: LD_INT 3
19291: PUSH
19292: FOR_TO
19293: IFFALSE 19322
// AddResourceType ( base , i , sources [ i ] ) ;
19295: LD_VAR 0 15
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: LD_VAR 0 5
19309: PUSH
19310: LD_VAR 0 8
19314: ARRAY
19315: PPUSH
19316: CALL_OW 276
19320: GO 19292
19322: POP
19323: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19324: LD_ADDR_VAR 0 18
19328: PUSH
19329: LD_VAR 0 15
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL 18583 0 3
19346: ST_TO_ADDR
// InitHc ;
19347: CALL_OW 19
// InitUc ;
19351: CALL_OW 18
// uc_side := side ;
19355: LD_ADDR_OWVAR 20
19359: PUSH
19360: LD_VAR 0 16
19364: ST_TO_ADDR
// uc_nation := nation ;
19365: LD_ADDR_OWVAR 21
19369: PUSH
19370: LD_VAR 0 17
19374: ST_TO_ADDR
// if buildings then
19375: LD_VAR 0 18
19379: IFFALSE 20707
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19381: LD_ADDR_VAR 0 19
19385: PUSH
19386: LD_VAR 0 18
19390: PPUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 30
19396: PUSH
19397: LD_INT 29
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 30
19406: PUSH
19407: LD_INT 30
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 72
19423: ST_TO_ADDR
// if tmp then
19424: LD_VAR 0 19
19428: IFFALSE 19476
// for i in tmp do
19430: LD_ADDR_VAR 0 8
19434: PUSH
19435: LD_VAR 0 19
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19474
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19443: LD_VAR 0 8
19447: PPUSH
19448: CALL_OW 250
19452: PPUSH
19453: LD_VAR 0 8
19457: PPUSH
19458: CALL_OW 251
19462: PPUSH
19463: LD_VAR 0 16
19467: PPUSH
19468: CALL_OW 441
19472: GO 19440
19474: POP
19475: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19476: LD_VAR 0 18
19480: PPUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 30
19486: PUSH
19487: LD_INT 32
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 30
19496: PUSH
19497: LD_INT 33
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 72
19513: IFFALSE 19601
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19515: LD_ADDR_VAR 0 8
19519: PUSH
19520: LD_VAR 0 18
19524: PPUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 32
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 33
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 72
19557: PUSH
19558: FOR_IN
19559: IFFALSE 19599
// begin if not GetBWeapon ( i ) then
19561: LD_VAR 0 8
19565: PPUSH
19566: CALL_OW 269
19570: NOT
19571: IFFALSE 19597
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19573: LD_VAR 0 8
19577: PPUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: CALL 20853 0 2
19592: PPUSH
19593: CALL_OW 431
// end ;
19597: GO 19558
19599: POP
19600: POP
// end ; for i = 1 to personel do
19601: LD_ADDR_VAR 0 8
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_VAR 0 6
19615: PUSH
19616: FOR_TO
19617: IFFALSE 20687
// begin if i > 4 then
19619: LD_VAR 0 8
19623: PUSH
19624: LD_INT 4
19626: GREATER
19627: IFFALSE 19631
// break ;
19629: GO 20687
// case i of 1 :
19631: LD_VAR 0 8
19635: PUSH
19636: LD_INT 1
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19724
19644: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19645: LD_ADDR_VAR 0 12
19649: PUSH
19650: LD_VAR 0 18
19654: PPUSH
19655: LD_INT 22
19657: PUSH
19658: LD_VAR 0 16
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 58
19669: PUSH
19670: EMPTY
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 30
19678: PUSH
19679: LD_INT 32
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 30
19688: PUSH
19689: LD_INT 4
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 5
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: PPUSH
19717: CALL_OW 72
19721: ST_TO_ADDR
19722: GO 19946
19724: LD_INT 2
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19794
19732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19733: LD_ADDR_VAR 0 12
19737: PUSH
19738: LD_VAR 0 18
19742: PPUSH
19743: LD_INT 22
19745: PUSH
19746: LD_VAR 0 16
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 30
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: ST_TO_ADDR
19792: GO 19946
19794: LD_INT 3
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19864
19802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19803: LD_ADDR_VAR 0 12
19807: PUSH
19808: LD_VAR 0 18
19812: PPUSH
19813: LD_INT 22
19815: PUSH
19816: LD_VAR 0 16
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PPUSH
19857: CALL_OW 72
19861: ST_TO_ADDR
19862: GO 19946
19864: LD_INT 4
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19945
19872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19873: LD_ADDR_VAR 0 12
19877: PUSH
19878: LD_VAR 0 18
19882: PPUSH
19883: LD_INT 22
19885: PUSH
19886: LD_VAR 0 16
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 30
19900: PUSH
19901: LD_INT 6
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 7
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 8
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 72
19942: ST_TO_ADDR
19943: GO 19946
19945: POP
// if i = 1 then
19946: LD_VAR 0 8
19950: PUSH
19951: LD_INT 1
19953: EQUAL
19954: IFFALSE 20065
// begin tmp := [ ] ;
19956: LD_ADDR_VAR 0 19
19960: PUSH
19961: EMPTY
19962: ST_TO_ADDR
// for j in f do
19963: LD_ADDR_VAR 0 9
19967: PUSH
19968: LD_VAR 0 12
19972: PUSH
19973: FOR_IN
19974: IFFALSE 20047
// if GetBType ( j ) = b_bunker then
19976: LD_VAR 0 9
19980: PPUSH
19981: CALL_OW 266
19985: PUSH
19986: LD_INT 32
19988: EQUAL
19989: IFFALSE 20016
// tmp := Insert ( tmp , 1 , j ) else
19991: LD_ADDR_VAR 0 19
19995: PUSH
19996: LD_VAR 0 19
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_VAR 0 9
20008: PPUSH
20009: CALL_OW 2
20013: ST_TO_ADDR
20014: GO 20045
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20016: LD_ADDR_VAR 0 19
20020: PUSH
20021: LD_VAR 0 19
20025: PPUSH
20026: LD_VAR 0 19
20030: PUSH
20031: LD_INT 1
20033: PLUS
20034: PPUSH
20035: LD_VAR 0 9
20039: PPUSH
20040: CALL_OW 2
20044: ST_TO_ADDR
20045: GO 19973
20047: POP
20048: POP
// if tmp then
20049: LD_VAR 0 19
20053: IFFALSE 20065
// f := tmp ;
20055: LD_ADDR_VAR 0 12
20059: PUSH
20060: LD_VAR 0 19
20064: ST_TO_ADDR
// end ; x := personel [ i ] ;
20065: LD_ADDR_VAR 0 13
20069: PUSH
20070: LD_VAR 0 6
20074: PUSH
20075: LD_VAR 0 8
20079: ARRAY
20080: ST_TO_ADDR
// if x = - 1 then
20081: LD_VAR 0 13
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: EQUAL
20090: IFFALSE 20301
// begin for j in f do
20092: LD_ADDR_VAR 0 9
20096: PUSH
20097: LD_VAR 0 12
20101: PUSH
20102: FOR_IN
20103: IFFALSE 20297
// repeat InitHc ;
20105: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20109: LD_VAR 0 9
20113: PPUSH
20114: CALL_OW 266
20118: PUSH
20119: LD_INT 5
20121: EQUAL
20122: IFFALSE 20192
// begin if UnitsInside ( j ) < 3 then
20124: LD_VAR 0 9
20128: PPUSH
20129: CALL_OW 313
20133: PUSH
20134: LD_INT 3
20136: LESS
20137: IFFALSE 20173
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20139: LD_INT 0
20141: PPUSH
20142: LD_INT 5
20144: PUSH
20145: LD_INT 8
20147: PUSH
20148: LD_INT 9
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_VAR 0 17
20160: ARRAY
20161: PPUSH
20162: LD_VAR 0 4
20166: PPUSH
20167: CALL_OW 380
20171: GO 20190
// PrepareHuman ( false , i , skill ) ;
20173: LD_INT 0
20175: PPUSH
20176: LD_VAR 0 8
20180: PPUSH
20181: LD_VAR 0 4
20185: PPUSH
20186: CALL_OW 380
// end else
20190: GO 20209
// PrepareHuman ( false , i , skill ) ;
20192: LD_INT 0
20194: PPUSH
20195: LD_VAR 0 8
20199: PPUSH
20200: LD_VAR 0 4
20204: PPUSH
20205: CALL_OW 380
// un := CreateHuman ;
20209: LD_ADDR_VAR 0 14
20213: PUSH
20214: CALL_OW 44
20218: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20219: LD_ADDR_VAR 0 7
20223: PUSH
20224: LD_VAR 0 7
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: LD_VAR 0 14
20236: PPUSH
20237: CALL_OW 2
20241: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20242: LD_VAR 0 14
20246: PPUSH
20247: LD_VAR 0 9
20251: PPUSH
20252: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20256: LD_VAR 0 9
20260: PPUSH
20261: CALL_OW 313
20265: PUSH
20266: LD_INT 6
20268: EQUAL
20269: IFTRUE 20293
20271: PUSH
20272: LD_VAR 0 9
20276: PPUSH
20277: CALL_OW 266
20281: PUSH
20282: LD_INT 32
20284: PUSH
20285: LD_INT 31
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: IN
20292: OR
20293: IFFALSE 20105
20295: GO 20102
20297: POP
20298: POP
// end else
20299: GO 20685
// for j = 1 to x do
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_VAR 0 13
20315: PUSH
20316: FOR_TO
20317: IFFALSE 20683
// begin InitHc ;
20319: CALL_OW 19
// if not f then
20323: LD_VAR 0 12
20327: NOT
20328: IFFALSE 20417
// begin PrepareHuman ( false , i , skill ) ;
20330: LD_INT 0
20332: PPUSH
20333: LD_VAR 0 8
20337: PPUSH
20338: LD_VAR 0 4
20342: PPUSH
20343: CALL_OW 380
// un := CreateHuman ;
20347: LD_ADDR_VAR 0 14
20351: PUSH
20352: CALL_OW 44
20356: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20357: LD_ADDR_VAR 0 7
20361: PUSH
20362: LD_VAR 0 7
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 14
20374: PPUSH
20375: CALL_OW 2
20379: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20380: LD_VAR 0 14
20384: PPUSH
20385: LD_VAR 0 1
20389: PPUSH
20390: CALL_OW 250
20394: PPUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 251
20404: PPUSH
20405: LD_INT 10
20407: PPUSH
20408: LD_INT 0
20410: PPUSH
20411: CALL_OW 50
// continue ;
20415: GO 20316
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20417: LD_VAR 0 12
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: CALL_OW 313
20430: IFFALSE 20458
20432: PUSH
20433: LD_VAR 0 12
20437: PUSH
20438: LD_INT 1
20440: ARRAY
20441: PPUSH
20442: CALL_OW 266
20446: PUSH
20447: LD_INT 32
20449: PUSH
20450: LD_INT 31
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: IN
20457: AND
20458: IFTRUE 20479
20460: PUSH
20461: LD_VAR 0 12
20465: PUSH
20466: LD_INT 1
20468: ARRAY
20469: PPUSH
20470: CALL_OW 313
20474: PUSH
20475: LD_INT 6
20477: EQUAL
20478: OR
20479: IFFALSE 20499
// f := Delete ( f , 1 ) ;
20481: LD_ADDR_VAR 0 12
20485: PUSH
20486: LD_VAR 0 12
20490: PPUSH
20491: LD_INT 1
20493: PPUSH
20494: CALL_OW 3
20498: ST_TO_ADDR
// if not f then
20499: LD_VAR 0 12
20503: NOT
20504: IFFALSE 20522
// begin x := x + 2 ;
20506: LD_ADDR_VAR 0 13
20510: PUSH
20511: LD_VAR 0 13
20515: PUSH
20516: LD_INT 2
20518: PLUS
20519: ST_TO_ADDR
// continue ;
20520: GO 20316
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20522: LD_VAR 0 12
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PPUSH
20531: CALL_OW 266
20535: PUSH
20536: LD_INT 5
20538: EQUAL
20539: IFFALSE 20613
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20541: LD_VAR 0 12
20545: PUSH
20546: LD_INT 1
20548: ARRAY
20549: PPUSH
20550: CALL_OW 313
20554: PUSH
20555: LD_INT 3
20557: LESS
20558: IFFALSE 20594
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20560: LD_INT 0
20562: PPUSH
20563: LD_INT 5
20565: PUSH
20566: LD_INT 8
20568: PUSH
20569: LD_INT 9
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: PUSH
20577: LD_VAR 0 17
20581: ARRAY
20582: PPUSH
20583: LD_VAR 0 4
20587: PPUSH
20588: CALL_OW 380
20592: GO 20611
// PrepareHuman ( false , i , skill ) ;
20594: LD_INT 0
20596: PPUSH
20597: LD_VAR 0 8
20601: PPUSH
20602: LD_VAR 0 4
20606: PPUSH
20607: CALL_OW 380
// end else
20611: GO 20630
// PrepareHuman ( false , i , skill ) ;
20613: LD_INT 0
20615: PPUSH
20616: LD_VAR 0 8
20620: PPUSH
20621: LD_VAR 0 4
20625: PPUSH
20626: CALL_OW 380
// un := CreateHuman ;
20630: LD_ADDR_VAR 0 14
20634: PUSH
20635: CALL_OW 44
20639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20640: LD_ADDR_VAR 0 7
20644: PUSH
20645: LD_VAR 0 7
20649: PPUSH
20650: LD_INT 1
20652: PPUSH
20653: LD_VAR 0 14
20657: PPUSH
20658: CALL_OW 2
20662: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20663: LD_VAR 0 14
20667: PPUSH
20668: LD_VAR 0 12
20672: PUSH
20673: LD_INT 1
20675: ARRAY
20676: PPUSH
20677: CALL_OW 52
// end ;
20681: GO 20316
20683: POP
20684: POP
// end ;
20685: GO 19616
20687: POP
20688: POP
// result := result ^ buildings ;
20689: LD_ADDR_VAR 0 7
20693: PUSH
20694: LD_VAR 0 7
20698: PUSH
20699: LD_VAR 0 18
20703: ADD
20704: ST_TO_ADDR
// end else
20705: GO 20848
// begin for i = 1 to personel do
20707: LD_ADDR_VAR 0 8
20711: PUSH
20712: DOUBLE
20713: LD_INT 1
20715: DEC
20716: ST_TO_ADDR
20717: LD_VAR 0 6
20721: PUSH
20722: FOR_TO
20723: IFFALSE 20846
// begin if i > 4 then
20725: LD_VAR 0 8
20729: PUSH
20730: LD_INT 4
20732: GREATER
20733: IFFALSE 20737
// break ;
20735: GO 20846
// x := personel [ i ] ;
20737: LD_ADDR_VAR 0 13
20741: PUSH
20742: LD_VAR 0 6
20746: PUSH
20747: LD_VAR 0 8
20751: ARRAY
20752: ST_TO_ADDR
// if x = - 1 then
20753: LD_VAR 0 13
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: EQUAL
20762: IFFALSE 20766
// continue ;
20764: GO 20722
// PrepareHuman ( false , i , skill ) ;
20766: LD_INT 0
20768: PPUSH
20769: LD_VAR 0 8
20773: PPUSH
20774: LD_VAR 0 4
20778: PPUSH
20779: CALL_OW 380
// un := CreateHuman ;
20783: LD_ADDR_VAR 0 14
20787: PUSH
20788: CALL_OW 44
20792: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20793: LD_VAR 0 14
20797: PPUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 250
20807: PPUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 251
20817: PPUSH
20818: LD_INT 10
20820: PPUSH
20821: LD_INT 0
20823: PPUSH
20824: CALL_OW 50
// result := result ^ un ;
20828: LD_ADDR_VAR 0 7
20832: PUSH
20833: LD_VAR 0 7
20837: PUSH
20838: LD_VAR 0 14
20842: ADD
20843: ST_TO_ADDR
// end ;
20844: GO 20722
20846: POP
20847: POP
// end ; end ;
20848: LD_VAR 0 7
20852: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
// result := false ;
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20879: LD_VAR 0 1
20883: NOT
20884: IFTRUE 20909
20886: PUSH
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL_OW 266
20896: PUSH
20897: LD_INT 32
20899: PUSH
20900: LD_INT 33
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: IN
20907: NOT
20908: OR
20909: IFFALSE 20913
// exit ;
20911: GO 22048
// nat := GetNation ( tower ) ;
20913: LD_ADDR_VAR 0 12
20917: PUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL_OW 248
20927: ST_TO_ADDR
// side := GetSide ( tower ) ;
20928: LD_ADDR_VAR 0 16
20932: PUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 255
20942: ST_TO_ADDR
// x := GetX ( tower ) ;
20943: LD_ADDR_VAR 0 10
20947: PUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 250
20957: ST_TO_ADDR
// y := GetY ( tower ) ;
20958: LD_ADDR_VAR 0 11
20962: PUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 251
20972: ST_TO_ADDR
// if not x or not y then
20973: LD_VAR 0 10
20977: NOT
20978: IFTRUE 20987
20980: PUSH
20981: LD_VAR 0 11
20985: NOT
20986: OR
20987: IFFALSE 20991
// exit ;
20989: GO 22048
// weapon := 0 ;
20991: LD_ADDR_VAR 0 18
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// fac_list := [ ] ;
20999: LD_ADDR_VAR 0 17
21003: PUSH
21004: EMPTY
21005: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21006: LD_ADDR_VAR 0 6
21010: PUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 274
21020: PPUSH
21021: LD_VAR 0 2
21025: PPUSH
21026: LD_INT 0
21028: PPUSH
21029: CALL 18583 0 3
21033: PPUSH
21034: LD_INT 30
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 72
21048: ST_TO_ADDR
// if not factories then
21049: LD_VAR 0 6
21053: NOT
21054: IFFALSE 21058
// exit ;
21056: GO 22048
// for i in factories do
21058: LD_ADDR_VAR 0 8
21062: PUSH
21063: LD_VAR 0 6
21067: PUSH
21068: FOR_IN
21069: IFFALSE 21094
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21071: LD_ADDR_VAR 0 17
21075: PUSH
21076: LD_VAR 0 17
21080: PUSH
21081: LD_VAR 0 8
21085: PPUSH
21086: CALL_OW 478
21090: UNION
21091: ST_TO_ADDR
21092: GO 21068
21094: POP
21095: POP
// if not fac_list then
21096: LD_VAR 0 17
21100: NOT
21101: IFFALSE 21105
// exit ;
21103: GO 22048
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_INT 4
21112: PUSH
21113: LD_INT 5
21115: PUSH
21116: LD_INT 9
21118: PUSH
21119: LD_INT 10
21121: PUSH
21122: LD_INT 6
21124: PUSH
21125: LD_INT 7
21127: PUSH
21128: LD_INT 11
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 27
21142: PUSH
21143: LD_INT 28
21145: PUSH
21146: LD_INT 26
21148: PUSH
21149: LD_INT 30
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 43
21160: PUSH
21161: LD_INT 44
21163: PUSH
21164: LD_INT 46
21166: PUSH
21167: LD_INT 45
21169: PUSH
21170: LD_INT 47
21172: PUSH
21173: LD_INT 49
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: LD_VAR 0 12
21193: ARRAY
21194: ST_TO_ADDR
// list := list isect fac_list ;
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_VAR 0 5
21204: PUSH
21205: LD_VAR 0 17
21209: ISECT
21210: ST_TO_ADDR
// if not list then
21211: LD_VAR 0 5
21215: NOT
21216: IFFALSE 21220
// exit ;
21218: GO 22048
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21220: LD_VAR 0 12
21224: PUSH
21225: LD_INT 3
21227: EQUAL
21228: IFFALSE 21240
21230: PUSH
21231: LD_INT 49
21233: PUSH
21234: LD_VAR 0 5
21238: IN
21239: AND
21240: IFFALSE 21260
21242: PUSH
21243: LD_INT 31
21245: PPUSH
21246: LD_VAR 0 16
21250: PPUSH
21251: CALL_OW 321
21255: PUSH
21256: LD_INT 2
21258: EQUAL
21259: AND
21260: IFFALSE 21320
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21262: LD_INT 22
21264: PUSH
21265: LD_VAR 0 16
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 35
21276: PUSH
21277: LD_INT 49
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 91
21286: PUSH
21287: LD_VAR 0 1
21291: PUSH
21292: LD_INT 10
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: NOT
21310: IFFALSE 21320
// weapon := ru_time_lapser ;
21312: LD_ADDR_VAR 0 18
21316: PUSH
21317: LD_INT 49
21319: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21320: LD_VAR 0 12
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: IN
21335: IFFALSE 21359
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_VAR 0 5
21345: IN
21346: IFTRUE 21358
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_VAR 0 5
21356: IN
21357: OR
21358: AND
21359: IFFALSE 21379
21361: PUSH
21362: LD_INT 6
21364: PPUSH
21365: LD_VAR 0 16
21369: PPUSH
21370: CALL_OW 321
21374: PUSH
21375: LD_INT 2
21377: EQUAL
21378: AND
21379: IFFALSE 21546
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 16
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 35
21398: PUSH
21399: LD_INT 11
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 35
21408: PUSH
21409: LD_INT 30
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 91
21423: PUSH
21424: LD_VAR 0 1
21428: PUSH
21429: LD_INT 18
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: PPUSH
21442: CALL_OW 69
21446: NOT
21447: IFFALSE 21523
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_VAR 0 16
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 30
21467: PUSH
21468: LD_INT 32
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 30
21477: PUSH
21478: LD_INT 33
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 91
21492: PUSH
21493: LD_VAR 0 1
21497: PUSH
21498: LD_INT 12
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: PPUSH
21514: CALL_OW 69
21518: PUSH
21519: LD_INT 2
21521: GREATER
21522: AND
21523: IFFALSE 21546
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21525: LD_ADDR_VAR 0 18
21529: PUSH
21530: LD_INT 11
21532: PUSH
21533: LD_INT 30
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_VAR 0 12
21544: ARRAY
21545: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21546: LD_VAR 0 18
21550: NOT
21551: IFFALSE 21571
21553: PUSH
21554: LD_INT 40
21556: PPUSH
21557: LD_VAR 0 16
21561: PPUSH
21562: CALL_OW 321
21566: PUSH
21567: LD_INT 2
21569: EQUAL
21570: AND
21571: IFFALSE 21607
21573: PUSH
21574: LD_INT 7
21576: PUSH
21577: LD_VAR 0 5
21581: IN
21582: IFTRUE 21594
21584: PUSH
21585: LD_INT 28
21587: PUSH
21588: LD_VAR 0 5
21592: IN
21593: OR
21594: IFTRUE 21606
21596: PUSH
21597: LD_INT 45
21599: PUSH
21600: LD_VAR 0 5
21604: IN
21605: OR
21606: AND
21607: IFFALSE 21861
// begin hex := GetHexInfo ( x , y ) ;
21609: LD_ADDR_VAR 0 4
21613: PUSH
21614: LD_VAR 0 10
21618: PPUSH
21619: LD_VAR 0 11
21623: PPUSH
21624: CALL_OW 546
21628: ST_TO_ADDR
// if hex [ 1 ] then
21629: LD_VAR 0 4
21633: PUSH
21634: LD_INT 1
21636: ARRAY
21637: IFFALSE 21641
// exit ;
21639: GO 22048
// height := hex [ 2 ] ;
21641: LD_ADDR_VAR 0 15
21645: PUSH
21646: LD_VAR 0 4
21650: PUSH
21651: LD_INT 2
21653: ARRAY
21654: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21655: LD_ADDR_VAR 0 14
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: LD_INT 5
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// for i in tmp do
21678: LD_ADDR_VAR 0 8
21682: PUSH
21683: LD_VAR 0 14
21687: PUSH
21688: FOR_IN
21689: IFFALSE 21859
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21691: LD_ADDR_VAR 0 9
21695: PUSH
21696: LD_VAR 0 10
21700: PPUSH
21701: LD_VAR 0 8
21705: PPUSH
21706: LD_INT 5
21708: PPUSH
21709: CALL_OW 272
21713: PUSH
21714: LD_VAR 0 11
21718: PPUSH
21719: LD_VAR 0 8
21723: PPUSH
21724: LD_INT 5
21726: PPUSH
21727: CALL_OW 273
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21736: LD_VAR 0 9
21740: PUSH
21741: LD_INT 1
21743: ARRAY
21744: PPUSH
21745: LD_VAR 0 9
21749: PUSH
21750: LD_INT 2
21752: ARRAY
21753: PPUSH
21754: CALL_OW 488
21758: IFFALSE 21857
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21760: LD_ADDR_VAR 0 4
21764: PUSH
21765: LD_VAR 0 9
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PPUSH
21774: LD_VAR 0 9
21778: PUSH
21779: LD_INT 2
21781: ARRAY
21782: PPUSH
21783: CALL_OW 546
21787: ST_TO_ADDR
// if hex [ 1 ] then
21788: LD_VAR 0 4
21792: PUSH
21793: LD_INT 1
21795: ARRAY
21796: IFFALSE 21800
// continue ;
21798: GO 21688
// h := hex [ 2 ] ;
21800: LD_ADDR_VAR 0 13
21804: PUSH
21805: LD_VAR 0 4
21809: PUSH
21810: LD_INT 2
21812: ARRAY
21813: ST_TO_ADDR
// if h + 7 < height then
21814: LD_VAR 0 13
21818: PUSH
21819: LD_INT 7
21821: PLUS
21822: PUSH
21823: LD_VAR 0 15
21827: LESS
21828: IFFALSE 21857
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21830: LD_ADDR_VAR 0 18
21834: PUSH
21835: LD_INT 7
21837: PUSH
21838: LD_INT 28
21840: PUSH
21841: LD_INT 45
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_VAR 0 12
21853: ARRAY
21854: ST_TO_ADDR
// break ;
21855: GO 21859
// end ; end ; end ;
21857: GO 21688
21859: POP
21860: POP
// end ; if not weapon then
21861: LD_VAR 0 18
21865: NOT
21866: IFFALSE 21926
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21868: LD_ADDR_VAR 0 5
21872: PUSH
21873: LD_VAR 0 5
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 30
21883: PUSH
21884: LD_INT 49
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: DIFF
21892: ST_TO_ADDR
// if not list then
21893: LD_VAR 0 5
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 22048
// weapon := list [ rand ( 1 , list ) ] ;
21902: LD_ADDR_VAR 0 18
21906: PUSH
21907: LD_VAR 0 5
21911: PUSH
21912: LD_INT 1
21914: PPUSH
21915: LD_VAR 0 5
21919: PPUSH
21920: CALL_OW 12
21924: ARRAY
21925: ST_TO_ADDR
// end ; if weapon then
21926: LD_VAR 0 18
21930: IFFALSE 22048
// begin tmp := CostOfWeapon ( weapon ) ;
21932: LD_ADDR_VAR 0 14
21936: PUSH
21937: LD_VAR 0 18
21941: PPUSH
21942: CALL_OW 451
21946: ST_TO_ADDR
// j := GetBase ( tower ) ;
21947: LD_ADDR_VAR 0 9
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 274
21961: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21962: LD_VAR 0 9
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 275
21974: PUSH
21975: LD_VAR 0 14
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: GREATEREQUAL
21984: IFFALSE 22010
21986: PUSH
21987: LD_VAR 0 9
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 275
21999: PUSH
22000: LD_VAR 0 14
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: GREATEREQUAL
22009: AND
22010: IFFALSE 22036
22012: PUSH
22013: LD_VAR 0 9
22017: PPUSH
22018: LD_INT 3
22020: PPUSH
22021: CALL_OW 275
22025: PUSH
22026: LD_VAR 0 14
22030: PUSH
22031: LD_INT 3
22033: ARRAY
22034: GREATEREQUAL
22035: AND
22036: IFFALSE 22048
// result := weapon ;
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_VAR 0 18
22047: ST_TO_ADDR
// end ; end ;
22048: LD_VAR 0 3
22052: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
// result := true ;
22057: LD_ADDR_VAR 0 3
22061: PUSH
22062: LD_INT 1
22064: ST_TO_ADDR
// if array1 = array2 then
22065: LD_VAR 0 1
22069: PUSH
22070: LD_VAR 0 2
22074: EQUAL
22075: IFFALSE 22135
// begin for i = 1 to array1 do
22077: LD_ADDR_VAR 0 4
22081: PUSH
22082: DOUBLE
22083: LD_INT 1
22085: DEC
22086: ST_TO_ADDR
22087: LD_VAR 0 1
22091: PUSH
22092: FOR_TO
22093: IFFALSE 22131
// if array1 [ i ] <> array2 [ i ] then
22095: LD_VAR 0 1
22099: PUSH
22100: LD_VAR 0 4
22104: ARRAY
22105: PUSH
22106: LD_VAR 0 2
22110: PUSH
22111: LD_VAR 0 4
22115: ARRAY
22116: NONEQUAL
22117: IFFALSE 22129
// begin result := false ;
22119: LD_ADDR_VAR 0 3
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// break ;
22127: GO 22131
// end ;
22129: GO 22092
22131: POP
22132: POP
// end else
22133: GO 22143
// result := false ;
22135: LD_ADDR_VAR 0 3
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// end ;
22143: LD_VAR 0 3
22147: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22148: LD_INT 0
22150: PPUSH
22151: PPUSH
// if not array1 or not array2 then
22152: LD_VAR 0 1
22156: NOT
22157: IFTRUE 22166
22159: PUSH
22160: LD_VAR 0 2
22164: NOT
22165: OR
22166: IFFALSE 22170
// exit ;
22168: GO 22234
// result := true ;
22170: LD_ADDR_VAR 0 3
22174: PUSH
22175: LD_INT 1
22177: ST_TO_ADDR
// for i = 1 to array1 do
22178: LD_ADDR_VAR 0 4
22182: PUSH
22183: DOUBLE
22184: LD_INT 1
22186: DEC
22187: ST_TO_ADDR
22188: LD_VAR 0 1
22192: PUSH
22193: FOR_TO
22194: IFFALSE 22232
// if array1 [ i ] <> array2 [ i ] then
22196: LD_VAR 0 1
22200: PUSH
22201: LD_VAR 0 4
22205: ARRAY
22206: PUSH
22207: LD_VAR 0 2
22211: PUSH
22212: LD_VAR 0 4
22216: ARRAY
22217: NONEQUAL
22218: IFFALSE 22230
// begin result := false ;
22220: LD_ADDR_VAR 0 3
22224: PUSH
22225: LD_INT 0
22227: ST_TO_ADDR
// break ;
22228: GO 22232
// end ;
22230: GO 22193
22232: POP
22233: POP
// end ;
22234: LD_VAR 0 3
22238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22239: LD_INT 0
22241: PPUSH
22242: PPUSH
22243: PPUSH
// pom := GetBase ( fac ) ;
22244: LD_ADDR_VAR 0 5
22248: PUSH
22249: LD_VAR 0 1
22253: PPUSH
22254: CALL_OW 274
22258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22259: LD_ADDR_VAR 0 4
22263: PUSH
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: PPUSH
22273: LD_VAR 0 2
22277: PUSH
22278: LD_INT 2
22280: ARRAY
22281: PPUSH
22282: LD_VAR 0 2
22286: PUSH
22287: LD_INT 3
22289: ARRAY
22290: PPUSH
22291: LD_VAR 0 2
22295: PUSH
22296: LD_INT 4
22298: ARRAY
22299: PPUSH
22300: CALL_OW 449
22304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22305: LD_ADDR_VAR 0 3
22309: PUSH
22310: LD_VAR 0 5
22314: PPUSH
22315: LD_INT 1
22317: PPUSH
22318: CALL_OW 275
22322: PUSH
22323: LD_VAR 0 4
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: GREATEREQUAL
22332: IFFALSE 22358
22334: PUSH
22335: LD_VAR 0 5
22339: PPUSH
22340: LD_INT 2
22342: PPUSH
22343: CALL_OW 275
22347: PUSH
22348: LD_VAR 0 4
22352: PUSH
22353: LD_INT 2
22355: ARRAY
22356: GREATEREQUAL
22357: AND
22358: IFFALSE 22384
22360: PUSH
22361: LD_VAR 0 5
22365: PPUSH
22366: LD_INT 3
22368: PPUSH
22369: CALL_OW 275
22373: PUSH
22374: LD_VAR 0 4
22378: PUSH
22379: LD_INT 3
22381: ARRAY
22382: GREATEREQUAL
22383: AND
22384: ST_TO_ADDR
// end ;
22385: LD_VAR 0 3
22389: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22390: LD_INT 0
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
// pom := GetBase ( building ) ;
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 274
22410: ST_TO_ADDR
// if not pom then
22411: LD_VAR 0 3
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22594
// btype := GetBType ( building ) ;
22420: LD_ADDR_VAR 0 5
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 266
22434: ST_TO_ADDR
// if btype = b_armoury then
22435: LD_VAR 0 5
22439: PUSH
22440: LD_INT 4
22442: EQUAL
22443: IFFALSE 22453
// btype := b_barracks ;
22445: LD_ADDR_VAR 0 5
22449: PUSH
22450: LD_INT 5
22452: ST_TO_ADDR
// if btype = b_depot then
22453: LD_VAR 0 5
22457: PUSH
22458: LD_INT 0
22460: EQUAL
22461: IFFALSE 22471
// btype := b_warehouse ;
22463: LD_ADDR_VAR 0 5
22467: PUSH
22468: LD_INT 1
22470: ST_TO_ADDR
// if btype = b_workshop then
22471: LD_VAR 0 5
22475: PUSH
22476: LD_INT 2
22478: EQUAL
22479: IFFALSE 22489
// btype := b_factory ;
22481: LD_ADDR_VAR 0 5
22485: PUSH
22486: LD_INT 3
22488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22489: LD_ADDR_VAR 0 4
22493: PUSH
22494: LD_VAR 0 5
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 248
22508: PPUSH
22509: CALL_OW 450
22513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PPUSH
22524: LD_INT 1
22526: PPUSH
22527: CALL_OW 275
22531: PUSH
22532: LD_VAR 0 4
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: GREATEREQUAL
22541: IFFALSE 22567
22543: PUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: LD_INT 2
22551: PPUSH
22552: CALL_OW 275
22556: PUSH
22557: LD_VAR 0 4
22561: PUSH
22562: LD_INT 2
22564: ARRAY
22565: GREATEREQUAL
22566: AND
22567: IFFALSE 22593
22569: PUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_INT 3
22577: PPUSH
22578: CALL_OW 275
22582: PUSH
22583: LD_VAR 0 4
22587: PUSH
22588: LD_INT 3
22590: ARRAY
22591: GREATEREQUAL
22592: AND
22593: ST_TO_ADDR
// end ;
22594: LD_VAR 0 2
22598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22599: LD_INT 0
22601: PPUSH
22602: PPUSH
22603: PPUSH
// pom := GetBase ( building ) ;
22604: LD_ADDR_VAR 0 4
22608: PUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 274
22618: ST_TO_ADDR
// if not pom then
22619: LD_VAR 0 4
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22733
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22628: LD_ADDR_VAR 0 5
22632: PUSH
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 248
22647: PPUSH
22648: CALL_OW 450
22652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: LD_VAR 0 4
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 275
22670: PUSH
22671: LD_VAR 0 5
22675: PUSH
22676: LD_INT 1
22678: ARRAY
22679: GREATEREQUAL
22680: IFFALSE 22706
22682: PUSH
22683: LD_VAR 0 4
22687: PPUSH
22688: LD_INT 2
22690: PPUSH
22691: CALL_OW 275
22695: PUSH
22696: LD_VAR 0 5
22700: PUSH
22701: LD_INT 2
22703: ARRAY
22704: GREATEREQUAL
22705: AND
22706: IFFALSE 22732
22708: PUSH
22709: LD_VAR 0 4
22713: PPUSH
22714: LD_INT 3
22716: PPUSH
22717: CALL_OW 275
22721: PUSH
22722: LD_VAR 0 5
22726: PUSH
22727: LD_INT 3
22729: ARRAY
22730: GREATEREQUAL
22731: AND
22732: ST_TO_ADDR
// end ;
22733: LD_VAR 0 3
22737: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22738: LD_INT 0
22740: PPUSH
22741: PPUSH
22742: PPUSH
22743: PPUSH
22744: PPUSH
22745: PPUSH
22746: PPUSH
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// result := false ;
22751: LD_ADDR_VAR 0 8
22755: PUSH
22756: LD_INT 0
22758: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22759: LD_VAR 0 5
22763: NOT
22764: IFTRUE 22773
22766: PUSH
22767: LD_VAR 0 1
22771: NOT
22772: OR
22773: IFTRUE 22782
22775: PUSH
22776: LD_VAR 0 2
22780: NOT
22781: OR
22782: IFTRUE 22791
22784: PUSH
22785: LD_VAR 0 3
22789: NOT
22790: OR
22791: IFFALSE 22795
// exit ;
22793: GO 23621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22795: LD_ADDR_VAR 0 14
22799: PUSH
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_VAR 0 2
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: LD_VAR 0 4
22819: PPUSH
22820: LD_VAR 0 5
22824: PUSH
22825: LD_INT 1
22827: ARRAY
22828: PPUSH
22829: CALL_OW 248
22833: PPUSH
22834: LD_INT 0
22836: PPUSH
22837: CALL 24902 0 6
22841: ST_TO_ADDR
// if not hexes then
22842: LD_VAR 0 14
22846: NOT
22847: IFFALSE 22851
// exit ;
22849: GO 23621
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22851: LD_ADDR_VAR 0 17
22855: PUSH
22856: LD_VAR 0 5
22860: PPUSH
22861: LD_INT 22
22863: PUSH
22864: LD_VAR 0 13
22868: PPUSH
22869: CALL_OW 255
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PPUSH
22910: CALL_OW 72
22914: ST_TO_ADDR
// for i = 1 to hexes do
22915: LD_ADDR_VAR 0 9
22919: PUSH
22920: DOUBLE
22921: LD_INT 1
22923: DEC
22924: ST_TO_ADDR
22925: LD_VAR 0 14
22929: PUSH
22930: FOR_TO
22931: IFFALSE 23619
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22933: LD_ADDR_VAR 0 13
22937: PUSH
22938: LD_VAR 0 14
22942: PUSH
22943: LD_VAR 0 9
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PPUSH
22953: LD_VAR 0 14
22957: PUSH
22958: LD_VAR 0 9
22962: ARRAY
22963: PUSH
22964: LD_INT 2
22966: ARRAY
22967: PPUSH
22968: CALL_OW 428
22972: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22973: LD_VAR 0 14
22977: PUSH
22978: LD_VAR 0 9
22982: ARRAY
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: LD_VAR 0 14
22992: PUSH
22993: LD_VAR 0 9
22997: ARRAY
22998: PUSH
22999: LD_INT 2
23001: ARRAY
23002: PPUSH
23003: CALL_OW 351
23007: IFTRUE 23046
23009: PUSH
23010: LD_VAR 0 14
23014: PUSH
23015: LD_VAR 0 9
23019: ARRAY
23020: PUSH
23021: LD_INT 1
23023: ARRAY
23024: PPUSH
23025: LD_VAR 0 14
23029: PUSH
23030: LD_VAR 0 9
23034: ARRAY
23035: PUSH
23036: LD_INT 2
23038: ARRAY
23039: PPUSH
23040: CALL_OW 488
23044: NOT
23045: OR
23046: IFTRUE 23063
23048: PUSH
23049: LD_VAR 0 13
23053: PPUSH
23054: CALL_OW 247
23058: PUSH
23059: LD_INT 3
23061: EQUAL
23062: OR
23063: IFFALSE 23069
// exit ;
23065: POP
23066: POP
23067: GO 23621
// if not tmp then
23069: LD_VAR 0 13
23073: NOT
23074: IFFALSE 23078
// continue ;
23076: GO 22930
// result := true ;
23078: LD_ADDR_VAR 0 8
23082: PUSH
23083: LD_INT 1
23085: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23086: LD_VAR 0 6
23090: IFFALSE 23107
23092: PUSH
23093: LD_VAR 0 13
23097: PPUSH
23098: CALL_OW 247
23102: PUSH
23103: LD_INT 2
23105: EQUAL
23106: AND
23107: IFFALSE 23124
23109: PUSH
23110: LD_VAR 0 13
23114: PPUSH
23115: CALL_OW 263
23119: PUSH
23120: LD_INT 1
23122: EQUAL
23123: AND
23124: IFFALSE 23288
// begin if IsDrivenBy ( tmp ) then
23126: LD_VAR 0 13
23130: PPUSH
23131: CALL_OW 311
23135: IFFALSE 23139
// continue ;
23137: GO 22930
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23139: LD_VAR 0 6
23143: PPUSH
23144: LD_INT 3
23146: PUSH
23147: LD_INT 60
23149: PUSH
23150: EMPTY
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 55
23162: PUSH
23163: EMPTY
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 72
23178: IFFALSE 23286
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23180: LD_ADDR_VAR 0 18
23184: PUSH
23185: LD_VAR 0 6
23189: PPUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 60
23195: PUSH
23196: EMPTY
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 55
23208: PUSH
23209: EMPTY
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 72
23224: PUSH
23225: LD_INT 1
23227: ARRAY
23228: ST_TO_ADDR
// if IsInUnit ( driver ) then
23229: LD_VAR 0 18
23233: PPUSH
23234: CALL_OW 310
23238: IFFALSE 23249
// ComExit ( driver ) ;
23240: LD_VAR 0 18
23244: PPUSH
23245: CALL 48892 0 1
// AddComEnterUnit ( driver , tmp ) ;
23249: LD_VAR 0 18
23253: PPUSH
23254: LD_VAR 0 13
23258: PPUSH
23259: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23263: LD_VAR 0 18
23267: PPUSH
23268: LD_VAR 0 7
23272: PPUSH
23273: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23277: LD_VAR 0 18
23281: PPUSH
23282: CALL_OW 181
// end ; continue ;
23286: GO 22930
// end ; if not cleaners or not tmp in cleaners then
23288: LD_VAR 0 6
23292: NOT
23293: IFTRUE 23308
23295: PUSH
23296: LD_VAR 0 13
23300: PUSH
23301: LD_VAR 0 6
23305: IN
23306: NOT
23307: OR
23308: IFFALSE 23617
// begin if dep then
23310: LD_VAR 0 17
23314: IFFALSE 23450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23316: LD_ADDR_VAR 0 16
23320: PUSH
23321: LD_VAR 0 17
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PPUSH
23330: CALL_OW 250
23334: PPUSH
23335: LD_VAR 0 17
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PPUSH
23344: CALL_OW 254
23348: PPUSH
23349: LD_INT 5
23351: PPUSH
23352: CALL_OW 272
23356: PUSH
23357: LD_VAR 0 17
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: CALL_OW 251
23370: PPUSH
23371: LD_VAR 0 17
23375: PUSH
23376: LD_INT 1
23378: ARRAY
23379: PPUSH
23380: CALL_OW 254
23384: PPUSH
23385: LD_INT 5
23387: PPUSH
23388: CALL_OW 273
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23397: LD_VAR 0 16
23401: PUSH
23402: LD_INT 1
23404: ARRAY
23405: PPUSH
23406: LD_VAR 0 16
23410: PUSH
23411: LD_INT 2
23413: ARRAY
23414: PPUSH
23415: CALL_OW 488
23419: IFFALSE 23450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23421: LD_VAR 0 13
23425: PPUSH
23426: LD_VAR 0 16
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: LD_VAR 0 16
23439: PUSH
23440: LD_INT 2
23442: ARRAY
23443: PPUSH
23444: CALL_OW 111
// continue ;
23448: GO 22930
// end ; end ; r := GetDir ( tmp ) ;
23450: LD_ADDR_VAR 0 15
23454: PUSH
23455: LD_VAR 0 13
23459: PPUSH
23460: CALL_OW 254
23464: ST_TO_ADDR
// if r = 5 then
23465: LD_VAR 0 15
23469: PUSH
23470: LD_INT 5
23472: EQUAL
23473: IFFALSE 23483
// r := 0 ;
23475: LD_ADDR_VAR 0 15
23479: PUSH
23480: LD_INT 0
23482: ST_TO_ADDR
// for j = r to 5 do
23483: LD_ADDR_VAR 0 10
23487: PUSH
23488: DOUBLE
23489: LD_VAR 0 15
23493: DEC
23494: ST_TO_ADDR
23495: LD_INT 5
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23615
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23501: LD_ADDR_VAR 0 11
23505: PUSH
23506: LD_VAR 0 13
23510: PPUSH
23511: CALL_OW 250
23515: PPUSH
23516: LD_VAR 0 10
23520: PPUSH
23521: LD_INT 2
23523: PPUSH
23524: CALL_OW 272
23528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23529: LD_ADDR_VAR 0 12
23533: PUSH
23534: LD_VAR 0 13
23538: PPUSH
23539: CALL_OW 251
23543: PPUSH
23544: LD_VAR 0 10
23548: PPUSH
23549: LD_INT 2
23551: PPUSH
23552: CALL_OW 273
23556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23557: LD_VAR 0 11
23561: PPUSH
23562: LD_VAR 0 12
23566: PPUSH
23567: CALL_OW 488
23571: IFFALSE 23590
23573: PUSH
23574: LD_VAR 0 11
23578: PPUSH
23579: LD_VAR 0 12
23583: PPUSH
23584: CALL_OW 428
23588: NOT
23589: AND
23590: IFFALSE 23613
// begin ComMoveXY ( tmp , _x , _y ) ;
23592: LD_VAR 0 13
23596: PPUSH
23597: LD_VAR 0 11
23601: PPUSH
23602: LD_VAR 0 12
23606: PPUSH
23607: CALL_OW 111
// break ;
23611: GO 23615
// end ; end ;
23613: GO 23498
23615: POP
23616: POP
// end ; end ;
23617: GO 22930
23619: POP
23620: POP
// end ;
23621: LD_VAR 0 8
23625: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23626: LD_INT 0
23628: PPUSH
// result := true ;
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_INT 1
23636: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23637: LD_VAR 0 2
23641: PUSH
23642: LD_INT 24
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23656
23648: LD_INT 33
23650: DOUBLE
23651: EQUAL
23652: IFTRUE 23656
23654: GO 23681
23656: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23657: LD_ADDR_VAR 0 3
23661: PUSH
23662: LD_INT 32
23664: PPUSH
23665: LD_VAR 0 1
23669: PPUSH
23670: CALL_OW 321
23674: PUSH
23675: LD_INT 2
23677: EQUAL
23678: ST_TO_ADDR
23679: GO 23997
23681: LD_INT 20
23683: DOUBLE
23684: EQUAL
23685: IFTRUE 23689
23687: GO 23714
23689: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23690: LD_ADDR_VAR 0 3
23694: PUSH
23695: LD_INT 6
23697: PPUSH
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 321
23707: PUSH
23708: LD_INT 2
23710: EQUAL
23711: ST_TO_ADDR
23712: GO 23997
23714: LD_INT 22
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23728
23720: LD_INT 36
23722: DOUBLE
23723: EQUAL
23724: IFTRUE 23728
23726: GO 23753
23728: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23729: LD_ADDR_VAR 0 3
23733: PUSH
23734: LD_INT 15
23736: PPUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL_OW 321
23746: PUSH
23747: LD_INT 2
23749: EQUAL
23750: ST_TO_ADDR
23751: GO 23997
23753: LD_INT 30
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23786
23761: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_INT 20
23769: PPUSH
23770: LD_VAR 0 1
23774: PPUSH
23775: CALL_OW 321
23779: PUSH
23780: LD_INT 2
23782: EQUAL
23783: ST_TO_ADDR
23784: GO 23997
23786: LD_INT 28
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23800
23792: LD_INT 21
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23825
23800: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 21
23808: PPUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 321
23818: PUSH
23819: LD_INT 2
23821: EQUAL
23822: ST_TO_ADDR
23823: GO 23997
23825: LD_INT 16
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23858
23833: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23834: LD_ADDR_VAR 0 3
23838: PUSH
23839: LD_INT 84
23841: PPUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 321
23851: PUSH
23852: LD_INT 2
23854: EQUAL
23855: ST_TO_ADDR
23856: GO 23997
23858: LD_INT 19
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23872
23864: LD_INT 23
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23897
23872: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 83
23880: PPUSH
23881: LD_VAR 0 1
23885: PPUSH
23886: CALL_OW 321
23890: PUSH
23891: LD_INT 2
23893: EQUAL
23894: ST_TO_ADDR
23895: GO 23997
23897: LD_INT 17
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23930
23905: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 39
23913: PPUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL_OW 321
23923: PUSH
23924: LD_INT 2
23926: EQUAL
23927: ST_TO_ADDR
23928: GO 23997
23930: LD_INT 18
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23963
23938: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23939: LD_ADDR_VAR 0 3
23943: PUSH
23944: LD_INT 40
23946: PPUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 321
23956: PUSH
23957: LD_INT 2
23959: EQUAL
23960: ST_TO_ADDR
23961: GO 23997
23963: LD_INT 27
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23996
23971: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_INT 35
23979: PPUSH
23980: LD_VAR 0 1
23984: PPUSH
23985: CALL_OW 321
23989: PUSH
23990: LD_INT 2
23992: EQUAL
23993: ST_TO_ADDR
23994: GO 23997
23996: POP
// end ;
23997: LD_VAR 0 3
24001: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
24006: PPUSH
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
// result := false ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// if btype = b_depot then
24023: LD_VAR 0 2
24027: PUSH
24028: LD_INT 0
24030: EQUAL
24031: IFFALSE 24043
// begin result := true ;
24033: LD_ADDR_VAR 0 6
24037: PUSH
24038: LD_INT 1
24040: ST_TO_ADDR
// exit ;
24041: GO 24897
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24043: LD_VAR 0 1
24047: NOT
24048: IFTRUE 24073
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 266
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: IN
24071: NOT
24072: OR
24073: IFTRUE 24082
24075: PUSH
24076: LD_VAR 0 2
24080: NOT
24081: OR
24082: IFTRUE 24118
24084: PUSH
24085: LD_VAR 0 5
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 3
24101: PUSH
24102: LD_INT 4
24104: PUSH
24105: LD_INT 5
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: IN
24116: NOT
24117: OR
24118: IFTRUE 24137
24120: PUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: LD_VAR 0 4
24130: PPUSH
24131: CALL_OW 488
24135: NOT
24136: OR
24137: IFFALSE 24141
// exit ;
24139: GO 24897
// side := GetSide ( depot ) ;
24141: LD_ADDR_VAR 0 9
24145: PUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 255
24155: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24156: LD_VAR 0 9
24160: PPUSH
24161: LD_VAR 0 2
24165: PPUSH
24166: CALL 23626 0 2
24170: NOT
24171: IFFALSE 24175
// exit ;
24173: GO 24897
// pom := GetBase ( depot ) ;
24175: LD_ADDR_VAR 0 10
24179: PUSH
24180: LD_VAR 0 1
24184: PPUSH
24185: CALL_OW 274
24189: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24190: LD_ADDR_VAR 0 11
24194: PUSH
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 248
24209: PPUSH
24210: CALL_OW 450
24214: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24215: LD_VAR 0 10
24219: PPUSH
24220: LD_INT 1
24222: PPUSH
24223: CALL_OW 275
24227: PUSH
24228: LD_VAR 0 11
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: GREATEREQUAL
24237: IFFALSE 24263
24239: PUSH
24240: LD_VAR 0 10
24244: PPUSH
24245: LD_INT 2
24247: PPUSH
24248: CALL_OW 275
24252: PUSH
24253: LD_VAR 0 11
24257: PUSH
24258: LD_INT 2
24260: ARRAY
24261: GREATEREQUAL
24262: AND
24263: IFFALSE 24289
24265: PUSH
24266: LD_VAR 0 10
24270: PPUSH
24271: LD_INT 3
24273: PPUSH
24274: CALL_OW 275
24278: PUSH
24279: LD_VAR 0 11
24283: PUSH
24284: LD_INT 3
24286: ARRAY
24287: GREATEREQUAL
24288: AND
24289: NOT
24290: IFFALSE 24294
// exit ;
24292: GO 24897
// if GetBType ( depot ) = b_depot then
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL_OW 266
24303: PUSH
24304: LD_INT 0
24306: EQUAL
24307: IFFALSE 24319
// dist := 28 else
24309: LD_ADDR_VAR 0 14
24313: PUSH
24314: LD_INT 28
24316: ST_TO_ADDR
24317: GO 24327
// dist := 36 ;
24319: LD_ADDR_VAR 0 14
24323: PUSH
24324: LD_INT 36
24326: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24327: LD_VAR 0 1
24331: PPUSH
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_VAR 0 4
24341: PPUSH
24342: CALL_OW 297
24346: PUSH
24347: LD_VAR 0 14
24351: GREATER
24352: IFFALSE 24356
// exit ;
24354: GO 24897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24356: LD_ADDR_VAR 0 12
24360: PUSH
24361: LD_VAR 0 2
24365: PPUSH
24366: LD_VAR 0 3
24370: PPUSH
24371: LD_VAR 0 4
24375: PPUSH
24376: LD_VAR 0 5
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 248
24390: PPUSH
24391: LD_INT 0
24393: PPUSH
24394: CALL 24902 0 6
24398: ST_TO_ADDR
// if not hexes then
24399: LD_VAR 0 12
24403: NOT
24404: IFFALSE 24408
// exit ;
24406: GO 24897
// hex := GetHexInfo ( x , y ) ;
24408: LD_ADDR_VAR 0 15
24412: PUSH
24413: LD_VAR 0 3
24417: PPUSH
24418: LD_VAR 0 4
24422: PPUSH
24423: CALL_OW 546
24427: ST_TO_ADDR
// if hex [ 1 ] then
24428: LD_VAR 0 15
24432: PUSH
24433: LD_INT 1
24435: ARRAY
24436: IFFALSE 24440
// exit ;
24438: GO 24897
// height := hex [ 2 ] ;
24440: LD_ADDR_VAR 0 13
24444: PUSH
24445: LD_VAR 0 15
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: ST_TO_ADDR
// for i = 1 to hexes do
24454: LD_ADDR_VAR 0 7
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_VAR 0 12
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24814
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24472: LD_VAR 0 12
24476: PUSH
24477: LD_VAR 0 7
24481: ARRAY
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 12
24491: PUSH
24492: LD_VAR 0 7
24496: ARRAY
24497: PUSH
24498: LD_INT 2
24500: ARRAY
24501: PPUSH
24502: CALL_OW 488
24506: NOT
24507: IFTRUE 24549
24509: PUSH
24510: LD_VAR 0 12
24514: PUSH
24515: LD_VAR 0 7
24519: ARRAY
24520: PUSH
24521: LD_INT 1
24523: ARRAY
24524: PPUSH
24525: LD_VAR 0 12
24529: PUSH
24530: LD_VAR 0 7
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: CALL_OW 428
24544: PUSH
24545: LD_INT 0
24547: GREATER
24548: OR
24549: IFTRUE 24587
24551: PUSH
24552: LD_VAR 0 12
24556: PUSH
24557: LD_VAR 0 7
24561: ARRAY
24562: PUSH
24563: LD_INT 1
24565: ARRAY
24566: PPUSH
24567: LD_VAR 0 12
24571: PUSH
24572: LD_VAR 0 7
24576: ARRAY
24577: PUSH
24578: LD_INT 2
24580: ARRAY
24581: PPUSH
24582: CALL_OW 351
24586: OR
24587: IFFALSE 24593
// exit ;
24589: POP
24590: POP
24591: GO 24897
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24593: LD_ADDR_VAR 0 8
24597: PUSH
24598: LD_VAR 0 12
24602: PUSH
24603: LD_VAR 0 7
24607: ARRAY
24608: PUSH
24609: LD_INT 1
24611: ARRAY
24612: PPUSH
24613: LD_VAR 0 12
24617: PUSH
24618: LD_VAR 0 7
24622: ARRAY
24623: PUSH
24624: LD_INT 2
24626: ARRAY
24627: PPUSH
24628: CALL_OW 546
24632: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24633: LD_VAR 0 8
24637: PUSH
24638: LD_INT 1
24640: ARRAY
24641: IFTRUE 24663
24643: PUSH
24644: LD_VAR 0 8
24648: PUSH
24649: LD_INT 2
24651: ARRAY
24652: PUSH
24653: LD_VAR 0 13
24657: PUSH
24658: LD_INT 2
24660: PLUS
24661: GREATER
24662: OR
24663: IFTRUE 24685
24665: PUSH
24666: LD_VAR 0 8
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PUSH
24675: LD_VAR 0 13
24679: PUSH
24680: LD_INT 2
24682: MINUS
24683: LESS
24684: OR
24685: IFTRUE 24753
24687: PUSH
24688: LD_VAR 0 8
24692: PUSH
24693: LD_INT 3
24695: ARRAY
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 8
24702: PUSH
24703: LD_INT 9
24705: PUSH
24706: LD_INT 10
24708: PUSH
24709: LD_INT 11
24711: PUSH
24712: LD_INT 12
24714: PUSH
24715: LD_INT 13
24717: PUSH
24718: LD_INT 16
24720: PUSH
24721: LD_INT 17
24723: PUSH
24724: LD_INT 18
24726: PUSH
24727: LD_INT 19
24729: PUSH
24730: LD_INT 20
24732: PUSH
24733: LD_INT 21
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: IN
24751: NOT
24752: OR
24753: IFTRUE 24766
24755: PUSH
24756: LD_VAR 0 8
24760: PUSH
24761: LD_INT 5
24763: ARRAY
24764: NOT
24765: OR
24766: IFTRUE 24806
24768: PUSH
24769: LD_VAR 0 8
24773: PUSH
24774: LD_INT 6
24776: ARRAY
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 7
24786: PUSH
24787: LD_INT 9
24789: PUSH
24790: LD_INT 10
24792: PUSH
24793: LD_INT 11
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: NOT
24805: OR
24806: IFFALSE 24812
// exit ;
24808: POP
24809: POP
24810: GO 24897
// end ;
24812: GO 24469
24814: POP
24815: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24816: LD_VAR 0 9
24820: PPUSH
24821: LD_VAR 0 3
24825: PPUSH
24826: LD_VAR 0 4
24830: PPUSH
24831: LD_INT 20
24833: PPUSH
24834: CALL 16716 0 4
24838: PUSH
24839: LD_INT 4
24841: ARRAY
24842: IFFALSE 24846
// exit ;
24844: GO 24897
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24846: LD_VAR 0 2
24850: PUSH
24851: LD_INT 29
24853: PUSH
24854: LD_INT 30
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: IN
24861: IFFALSE 24885
24863: PUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: LD_VAR 0 4
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: CALL_OW 440
24883: NOT
24884: AND
24885: IFFALSE 24889
// exit ;
24887: GO 24897
// result := true ;
24889: LD_ADDR_VAR 0 6
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// end ;
24897: LD_VAR 0 6
24901: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24902: LD_INT 0
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
24921: PPUSH
24922: PPUSH
24923: PPUSH
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
24942: PPUSH
24943: PPUSH
24944: PPUSH
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// result = [ ] ;
24962: LD_ADDR_VAR 0 7
24966: PUSH
24967: EMPTY
24968: ST_TO_ADDR
// temp_list = [ ] ;
24969: LD_ADDR_VAR 0 9
24973: PUSH
24974: EMPTY
24975: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24976: LD_VAR 0 4
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: LD_INT 4
24995: PUSH
24996: LD_INT 5
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: IN
25007: NOT
25008: IFTRUE 25051
25010: PUSH
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: IN
25026: IFFALSE 25050
25028: PUSH
25029: LD_VAR 0 5
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: IN
25048: NOT
25049: AND
25050: OR
25051: IFFALSE 25055
// exit ;
25053: GO 43454
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 6
25062: PUSH
25063: LD_INT 7
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: LD_INT 13
25071: PUSH
25072: LD_INT 12
25074: PUSH
25075: LD_INT 15
25077: PUSH
25078: LD_INT 11
25080: PUSH
25081: LD_INT 14
25083: PUSH
25084: LD_INT 10
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: IN
25098: IFFALSE 25108
// btype = b_lab ;
25100: LD_ADDR_VAR 0 1
25104: PUSH
25105: LD_INT 6
25107: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25108: LD_VAR 0 6
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: IN
25127: NOT
25128: IFTRUE 25196
25130: PUSH
25131: LD_VAR 0 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: LD_INT 6
25150: PUSH
25151: LD_INT 36
25153: PUSH
25154: LD_INT 4
25156: PUSH
25157: LD_INT 5
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: IN
25182: NOT
25183: IFFALSE 25195
25185: PUSH
25186: LD_VAR 0 6
25190: PUSH
25191: LD_INT 1
25193: EQUAL
25194: AND
25195: OR
25196: IFTRUE 25228
25198: PUSH
25199: LD_VAR 0 1
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: IN
25214: NOT
25215: IFFALSE 25227
25217: PUSH
25218: LD_VAR 0 6
25222: PUSH
25223: LD_INT 2
25225: EQUAL
25226: AND
25227: OR
25228: IFFALSE 25238
// mode = 0 ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_INT 0
25237: ST_TO_ADDR
// case mode of 0 :
25238: LD_VAR 0 6
25242: PUSH
25243: LD_INT 0
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 36704
25251: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25252: LD_ADDR_VAR 0 11
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 3
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25445: LD_ADDR_VAR 0 12
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 3
25602: NEG
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25641: LD_ADDR_VAR 0 13
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 3
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 3
25812: NEG
25813: PUSH
25814: LD_INT 3
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25840: LD_ADDR_VAR 0 14
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 3
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 3
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26036: LD_ADDR_VAR 0 15
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26229: LD_ADDR_VAR 0 16
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 3
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26422: LD_ADDR_VAR 0 17
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26652: LD_ADDR_VAR 0 18
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: LD_INT 2
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26882: LD_ADDR_VAR 0 19
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27112: LD_ADDR_VAR 0 20
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27342: LD_ADDR_VAR 0 21
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27572: LD_ADDR_VAR 0 22
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27802: LD_ADDR_VAR 0 23
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 3
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 3
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 2
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28082: LD_ADDR_VAR 0 24
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28358: LD_ADDR_VAR 0 25
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 3
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 3
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28632: LD_ADDR_VAR 0 26
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: NEG
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28908: LD_ADDR_VAR 0 27
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 3
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29188: LD_ADDR_VAR 0 28
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 2
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29470: LD_ADDR_VAR 0 29
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 1
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29749: LD_ADDR_VAR 0 30
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30027: LD_ADDR_VAR 0 31
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 2
30216: NEG
30217: PUSH
30218: LD_INT 3
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30305: LD_ADDR_VAR 0 32
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30583: LD_ADDR_VAR 0 33
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30862: LD_ADDR_VAR 0 34
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 2
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 2
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 3
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: LD_INT 3
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31142: LD_ADDR_VAR 0 35
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31254: LD_ADDR_VAR 0 36
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31366: LD_ADDR_VAR 0 37
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31478: LD_ADDR_VAR 0 38
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31590: LD_ADDR_VAR 0 39
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31702: LD_ADDR_VAR 0 40
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31814: LD_ADDR_VAR 0 41
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32164: LD_ADDR_VAR 0 42
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32514: LD_ADDR_VAR 0 43
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32862: LD_ADDR_VAR 0 44
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: NEG
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 3
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 3
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33212: LD_ADDR_VAR 0 45
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 3
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: NEG
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33562: LD_ADDR_VAR 0 46
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 2
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: LD_INT 3
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33910: LD_ADDR_VAR 0 47
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34061: LD_ADDR_VAR 0 48
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 2
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34208: LD_ADDR_VAR 0 49
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34352: LD_ADDR_VAR 0 50
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34496: LD_ADDR_VAR 0 51
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34643: LD_ADDR_VAR 0 52
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34794: LD_ADDR_VAR 0 53
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35024: LD_ADDR_VAR 0 54
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35254: LD_ADDR_VAR 0 55
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35484: LD_ADDR_VAR 0 56
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35714: LD_ADDR_VAR 0 57
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35944: LD_ADDR_VAR 0 58
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36174: LD_ADDR_VAR 0 59
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36262: LD_ADDR_VAR 0 60
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36350: LD_ADDR_VAR 0 61
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36438: LD_ADDR_VAR 0 62
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36526: LD_ADDR_VAR 0 63
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36614: LD_ADDR_VAR 0 64
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// end ; 1 :
36702: GO 42599
36704: LD_INT 1
36706: DOUBLE
36707: EQUAL
36708: IFTRUE 36712
36710: GO 39335
36712: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36713: LD_ADDR_VAR 0 11
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 3
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36757: LD_ADDR_VAR 0 12
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36798: LD_ADDR_VAR 0 13
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 3
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36838: LD_ADDR_VAR 0 14
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36879: LD_ADDR_VAR 0 15
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36923: LD_ADDR_VAR 0 16
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: LD_INT 3
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36969: LD_ADDR_VAR 0 17
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37013: LD_ADDR_VAR 0 18
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37054: LD_ADDR_VAR 0 19
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37094: LD_ADDR_VAR 0 20
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 3
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 3
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37135: LD_ADDR_VAR 0 21
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37179: LD_ADDR_VAR 0 22
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37225: LD_ADDR_VAR 0 23
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 4
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37269: LD_ADDR_VAR 0 24
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 4
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37310: LD_ADDR_VAR 0 25
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: LD_INT 4
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37350: LD_ADDR_VAR 0 26
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 4
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37391: LD_ADDR_VAR 0 27
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: NEG
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 4
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37435: LD_ADDR_VAR 0 28
37439: PUSH
37440: LD_INT 3
37442: NEG
37443: PUSH
37444: LD_INT 3
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: NEG
37455: PUSH
37456: LD_INT 4
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 4
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37481: LD_ADDR_VAR 0 29
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 3
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 3
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 4
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 4
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 3
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 5
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 5
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 4
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 6
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 6
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 5
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37636: LD_ADDR_VAR 0 30
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 4
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 4
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 5
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 5
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 6
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 6
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37779: LD_ADDR_VAR 0 31
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 4
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 4
37826: PUSH
37827: LD_INT 4
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 4
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 5
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 6
37876: PUSH
37877: LD_INT 5
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 6
37886: PUSH
37887: LD_INT 6
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 5
37896: PUSH
37897: LD_INT 6
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37918: LD_ADDR_VAR 0 32
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 4
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 5
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 6
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 6
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38061: LD_ADDR_VAR 0 33
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 3
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 4
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 4
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 4
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 5
38147: NEG
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 5
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 5
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 6
38181: NEG
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 6
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38216: LD_ADDR_VAR 0 34
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 4
38271: NEG
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: LD_INT 4
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 4
38295: NEG
38296: PUSH
38297: LD_INT 5
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 5
38307: NEG
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 5
38319: NEG
38320: PUSH
38321: LD_INT 5
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 5
38331: NEG
38332: PUSH
38333: LD_INT 6
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 6
38343: NEG
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 6
38355: NEG
38356: PUSH
38357: LD_INT 6
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38379: LD_ADDR_VAR 0 41
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38423: LD_ADDR_VAR 0 42
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38464: LD_ADDR_VAR 0 43
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38504: LD_ADDR_VAR 0 44
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38545: LD_ADDR_VAR 0 45
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38589: LD_ADDR_VAR 0 46
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 2
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 3
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: NEG
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38635: LD_ADDR_VAR 0 47
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 3
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38668: LD_ADDR_VAR 0 48
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38699: LD_ADDR_VAR 0 49
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38728: LD_ADDR_VAR 0 50
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38757: LD_ADDR_VAR 0 51
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38788: LD_ADDR_VAR 0 52
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38821: LD_ADDR_VAR 0 53
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 3
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 3
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38865: LD_ADDR_VAR 0 54
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38906: LD_ADDR_VAR 0 55
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38946: LD_ADDR_VAR 0 56
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38987: LD_ADDR_VAR 0 57
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: NEG
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 3
39016: NEG
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39031: LD_ADDR_VAR 0 58
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: NEG
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39077: LD_ADDR_VAR 0 59
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39121: LD_ADDR_VAR 0 60
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39162: LD_ADDR_VAR 0 61
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39202: LD_ADDR_VAR 0 62
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39243: LD_ADDR_VAR 0 63
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39287: LD_ADDR_VAR 0 64
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// end ; 2 :
39333: GO 42599
39335: LD_INT 2
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 42598
39343: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39344: LD_ADDR_VAR 0 29
39348: PUSH
39349: LD_INT 4
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 4
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 5
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 4
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 5
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 4
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: LD_INT 4
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 4
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 4
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 4
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 5
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 5
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 3
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 4
39683: NEG
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 4
39694: NEG
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 4
39706: NEG
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 4
39729: NEG
39730: PUSH
39731: LD_INT 4
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: LD_INT 5
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 3
39753: NEG
39754: PUSH
39755: LD_INT 4
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: LD_INT 3
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 4
39777: NEG
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 5
39789: NEG
39790: PUSH
39791: LD_INT 4
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: LD_INT 5
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: LD_INT 5
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 5
39825: NEG
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39882: LD_ADDR_VAR 0 30
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 4
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 5
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 5
39919: PUSH
39920: LD_INT 5
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: LD_INT 5
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 5
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 5
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 4
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 4
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 4
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 4
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 5
40128: NEG
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 5
40139: NEG
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 5
40151: NEG
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 3
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 4
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 4
40234: NEG
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: LD_INT 4
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 4
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 4
40270: NEG
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 4
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 5
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 4
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 3
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: NEG
40373: PUSH
40374: LD_INT 5
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40429: LD_ADDR_VAR 0 31
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 4
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 4
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: LD_INT 5
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 5
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 4
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 4
40585: NEG
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 4
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 4
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 4
40631: NEG
40632: PUSH
40633: LD_INT 4
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 4
40643: NEG
40644: PUSH
40645: LD_INT 5
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: LD_INT 3
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 4
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 5
40691: NEG
40692: PUSH
40693: LD_INT 4
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 5
40703: NEG
40704: PUSH
40705: LD_INT 5
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 5
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 5
40727: NEG
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 4
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 4
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 4
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 4
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 5
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 5
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 4
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 3
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 5
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40979: LD_ADDR_VAR 0 32
40983: PUSH
40984: LD_INT 4
40986: NEG
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 5
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 5
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 5
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 3
41100: NEG
41101: PUSH
41102: LD_INT 4
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 4
41160: NEG
41161: PUSH
41162: LD_INT 4
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 4
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 4
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 5
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 4
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 5
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 3
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 5
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 4
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 4
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: LD_INT 4
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 5
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 4
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 5
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: LD_INT 5
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41526: LD_ADDR_VAR 0 33
41530: PUSH
41531: LD_INT 4
41533: NEG
41534: PUSH
41535: LD_INT 4
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: LD_INT 5
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 3
41557: NEG
41558: PUSH
41559: LD_INT 4
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 3
41569: NEG
41570: PUSH
41571: LD_INT 3
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 4
41581: NEG
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 5
41593: NEG
41594: PUSH
41595: LD_INT 4
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 5
41605: NEG
41606: PUSH
41607: LD_INT 5
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: LD_INT 5
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 5
41629: NEG
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 4
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 4
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 4
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 5
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 4
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 4
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 4
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 4
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 4
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 4
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 5
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 4
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 5
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42064: LD_ADDR_VAR 0 34
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 4
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 5
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 4
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 3
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 4
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 5
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: LD_INT 5
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 4
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 4
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 5
42286: PUSH
42287: LD_INT 4
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: LD_INT 5
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 4
42306: PUSH
42307: LD_INT 5
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 4
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 5
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: LD_INT 5
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 4
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 4
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 4
42449: NEG
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 4
42460: NEG
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 4
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 5
42505: NEG
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 5
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 5
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// end ; end ;
42596: GO 42599
42598: POP
// case btype of b_depot , b_warehouse :
42599: LD_VAR 0 1
42603: PUSH
42604: LD_INT 0
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42618
42610: LD_INT 1
42612: DOUBLE
42613: EQUAL
42614: IFTRUE 42618
42616: GO 42819
42618: POP
// case nation of nation_american :
42619: LD_VAR 0 5
42623: PUSH
42624: LD_INT 1
42626: DOUBLE
42627: EQUAL
42628: IFTRUE 42632
42630: GO 42688
42632: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42633: LD_ADDR_VAR 0 9
42637: PUSH
42638: LD_VAR 0 11
42642: PUSH
42643: LD_VAR 0 12
42647: PUSH
42648: LD_VAR 0 13
42652: PUSH
42653: LD_VAR 0 14
42657: PUSH
42658: LD_VAR 0 15
42662: PUSH
42663: LD_VAR 0 16
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: LD_VAR 0 4
42680: PUSH
42681: LD_INT 1
42683: PLUS
42684: ARRAY
42685: ST_TO_ADDR
42686: GO 42817
42688: LD_INT 2
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42752
42696: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42697: LD_ADDR_VAR 0 9
42701: PUSH
42702: LD_VAR 0 17
42706: PUSH
42707: LD_VAR 0 18
42711: PUSH
42712: LD_VAR 0 19
42716: PUSH
42717: LD_VAR 0 20
42721: PUSH
42722: LD_VAR 0 21
42726: PUSH
42727: LD_VAR 0 22
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: PUSH
42740: LD_VAR 0 4
42744: PUSH
42745: LD_INT 1
42747: PLUS
42748: ARRAY
42749: ST_TO_ADDR
42750: GO 42817
42752: LD_INT 3
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42816
42760: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_VAR 0 23
42770: PUSH
42771: LD_VAR 0 24
42775: PUSH
42776: LD_VAR 0 25
42780: PUSH
42781: LD_VAR 0 26
42785: PUSH
42786: LD_VAR 0 27
42790: PUSH
42791: LD_VAR 0 28
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: PUSH
42804: LD_VAR 0 4
42808: PUSH
42809: LD_INT 1
42811: PLUS
42812: ARRAY
42813: ST_TO_ADDR
42814: GO 42817
42816: POP
42817: GO 43372
42819: LD_INT 2
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42833
42825: LD_INT 3
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42889
42833: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_VAR 0 29
42843: PUSH
42844: LD_VAR 0 30
42848: PUSH
42849: LD_VAR 0 31
42853: PUSH
42854: LD_VAR 0 32
42858: PUSH
42859: LD_VAR 0 33
42863: PUSH
42864: LD_VAR 0 34
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: PLUS
42885: ARRAY
42886: ST_TO_ADDR
42887: GO 43372
42889: LD_INT 16
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42951
42895: LD_INT 17
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42951
42901: LD_INT 18
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42951
42907: LD_INT 19
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42951
42913: LD_INT 22
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42951
42919: LD_INT 20
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42951
42925: LD_INT 21
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42951
42931: LD_INT 23
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42951
42937: LD_INT 24
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42951
42943: LD_INT 25
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 43007
42951: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42952: LD_ADDR_VAR 0 9
42956: PUSH
42957: LD_VAR 0 35
42961: PUSH
42962: LD_VAR 0 36
42966: PUSH
42967: LD_VAR 0 37
42971: PUSH
42972: LD_VAR 0 38
42976: PUSH
42977: LD_VAR 0 39
42981: PUSH
42982: LD_VAR 0 40
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: PUSH
42995: LD_VAR 0 4
42999: PUSH
43000: LD_INT 1
43002: PLUS
43003: ARRAY
43004: ST_TO_ADDR
43005: GO 43372
43007: LD_INT 6
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43063
43013: LD_INT 7
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43063
43019: LD_INT 8
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43063
43025: LD_INT 13
43027: DOUBLE
43028: EQUAL
43029: IFTRUE 43063
43031: LD_INT 12
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43063
43037: LD_INT 15
43039: DOUBLE
43040: EQUAL
43041: IFTRUE 43063
43043: LD_INT 11
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43063
43049: LD_INT 14
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43063
43055: LD_INT 10
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43119
43063: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43064: LD_ADDR_VAR 0 9
43068: PUSH
43069: LD_VAR 0 41
43073: PUSH
43074: LD_VAR 0 42
43078: PUSH
43079: LD_VAR 0 43
43083: PUSH
43084: LD_VAR 0 44
43088: PUSH
43089: LD_VAR 0 45
43093: PUSH
43094: LD_VAR 0 46
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: PUSH
43107: LD_VAR 0 4
43111: PUSH
43112: LD_INT 1
43114: PLUS
43115: ARRAY
43116: ST_TO_ADDR
43117: GO 43372
43119: LD_INT 36
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43183
43127: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: LD_VAR 0 47
43137: PUSH
43138: LD_VAR 0 48
43142: PUSH
43143: LD_VAR 0 49
43147: PUSH
43148: LD_VAR 0 50
43152: PUSH
43153: LD_VAR 0 51
43157: PUSH
43158: LD_VAR 0 52
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: PUSH
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: PLUS
43179: ARRAY
43180: ST_TO_ADDR
43181: GO 43372
43183: LD_INT 4
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43209
43189: LD_INT 5
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43209
43195: LD_INT 34
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43209
43201: LD_INT 37
43203: DOUBLE
43204: EQUAL
43205: IFTRUE 43209
43207: GO 43265
43209: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43210: LD_ADDR_VAR 0 9
43214: PUSH
43215: LD_VAR 0 53
43219: PUSH
43220: LD_VAR 0 54
43224: PUSH
43225: LD_VAR 0 55
43229: PUSH
43230: LD_VAR 0 56
43234: PUSH
43235: LD_VAR 0 57
43239: PUSH
43240: LD_VAR 0 58
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: PUSH
43253: LD_VAR 0 4
43257: PUSH
43258: LD_INT 1
43260: PLUS
43261: ARRAY
43262: ST_TO_ADDR
43263: GO 43372
43265: LD_INT 31
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43315
43271: LD_INT 32
43273: DOUBLE
43274: EQUAL
43275: IFTRUE 43315
43277: LD_INT 33
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43315
43283: LD_INT 27
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43315
43289: LD_INT 26
43291: DOUBLE
43292: EQUAL
43293: IFTRUE 43315
43295: LD_INT 28
43297: DOUBLE
43298: EQUAL
43299: IFTRUE 43315
43301: LD_INT 29
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43315
43307: LD_INT 30
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43371
43315: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: LD_VAR 0 59
43325: PUSH
43326: LD_VAR 0 60
43330: PUSH
43331: LD_VAR 0 61
43335: PUSH
43336: LD_VAR 0 62
43340: PUSH
43341: LD_VAR 0 63
43345: PUSH
43346: LD_VAR 0 64
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: LD_VAR 0 4
43363: PUSH
43364: LD_INT 1
43366: PLUS
43367: ARRAY
43368: ST_TO_ADDR
43369: GO 43372
43371: POP
// temp_list2 = [ ] ;
43372: LD_ADDR_VAR 0 10
43376: PUSH
43377: EMPTY
43378: ST_TO_ADDR
// for i in temp_list do
43379: LD_ADDR_VAR 0 8
43383: PUSH
43384: LD_VAR 0 9
43388: PUSH
43389: FOR_IN
43390: IFFALSE 43442
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43392: LD_ADDR_VAR 0 10
43396: PUSH
43397: LD_VAR 0 10
43401: PUSH
43402: LD_VAR 0 8
43406: PUSH
43407: LD_INT 1
43409: ARRAY
43410: PUSH
43411: LD_VAR 0 2
43415: PLUS
43416: PUSH
43417: LD_VAR 0 8
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 3
43430: PLUS
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: ADD
43439: ST_TO_ADDR
43440: GO 43389
43442: POP
43443: POP
// result = temp_list2 ;
43444: LD_ADDR_VAR 0 7
43448: PUSH
43449: LD_VAR 0 10
43453: ST_TO_ADDR
// end ;
43454: LD_VAR 0 7
43458: RET
// export function EnemyInRange ( unit , dist ) ; begin
43459: LD_INT 0
43461: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: CALL_OW 255
43476: PPUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 250
43486: PPUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: CALL_OW 251
43496: PPUSH
43497: LD_VAR 0 2
43501: PPUSH
43502: CALL 16716 0 4
43506: PUSH
43507: LD_INT 4
43509: ARRAY
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 3
43515: RET
// export function PlayerSeeMe ( unit ) ; begin
43516: LD_INT 0
43518: PPUSH
// result := See ( your_side , unit ) ;
43519: LD_ADDR_VAR 0 2
43523: PUSH
43524: LD_OWVAR 2
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 292
43538: ST_TO_ADDR
// end ;
43539: LD_VAR 0 2
43543: RET
// export function ReverseDir ( unit ) ; begin
43544: LD_INT 0
43546: PPUSH
// if not unit then
43547: LD_VAR 0 1
43551: NOT
43552: IFFALSE 43556
// exit ;
43554: GO 43579
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43556: LD_ADDR_VAR 0 2
43560: PUSH
43561: LD_VAR 0 1
43565: PPUSH
43566: CALL_OW 254
43570: PUSH
43571: LD_INT 3
43573: PLUS
43574: PUSH
43575: LD_INT 6
43577: MOD
43578: ST_TO_ADDR
// end ;
43579: LD_VAR 0 2
43583: RET
// export function ReverseArray ( array ) ; var i ; begin
43584: LD_INT 0
43586: PPUSH
43587: PPUSH
// if not array then
43588: LD_VAR 0 1
43592: NOT
43593: IFFALSE 43597
// exit ;
43595: GO 43652
// result := [ ] ;
43597: LD_ADDR_VAR 0 2
43601: PUSH
43602: EMPTY
43603: ST_TO_ADDR
// for i := array downto 1 do
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: DOUBLE
43610: LD_VAR 0 1
43614: INC
43615: ST_TO_ADDR
43616: LD_INT 1
43618: PUSH
43619: FOR_DOWNTO
43620: IFFALSE 43650
// result := Join ( result , array [ i ] ) ;
43622: LD_ADDR_VAR 0 2
43626: PUSH
43627: LD_VAR 0 2
43631: PPUSH
43632: LD_VAR 0 1
43636: PUSH
43637: LD_VAR 0 3
43641: ARRAY
43642: PPUSH
43643: CALL 48494 0 2
43647: ST_TO_ADDR
43648: GO 43619
43650: POP
43651: POP
// end ;
43652: LD_VAR 0 2
43656: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43657: LD_INT 0
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
// if not unit or not hexes then
43665: LD_VAR 0 1
43669: NOT
43670: IFTRUE 43679
43672: PUSH
43673: LD_VAR 0 2
43677: NOT
43678: OR
43679: IFFALSE 43683
// exit ;
43681: GO 43806
// dist := 9999 ;
43683: LD_ADDR_VAR 0 5
43687: PUSH
43688: LD_INT 9999
43690: ST_TO_ADDR
// for i = 1 to hexes do
43691: LD_ADDR_VAR 0 4
43695: PUSH
43696: DOUBLE
43697: LD_INT 1
43699: DEC
43700: ST_TO_ADDR
43701: LD_VAR 0 2
43705: PUSH
43706: FOR_TO
43707: IFFALSE 43794
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43709: LD_ADDR_VAR 0 6
43713: PUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: LD_VAR 0 2
43723: PUSH
43724: LD_VAR 0 4
43728: ARRAY
43729: PUSH
43730: LD_INT 1
43732: ARRAY
43733: PPUSH
43734: LD_VAR 0 2
43738: PUSH
43739: LD_VAR 0 4
43743: ARRAY
43744: PUSH
43745: LD_INT 2
43747: ARRAY
43748: PPUSH
43749: CALL_OW 297
43753: ST_TO_ADDR
// if tdist < dist then
43754: LD_VAR 0 6
43758: PUSH
43759: LD_VAR 0 5
43763: LESS
43764: IFFALSE 43792
// begin hex := hexes [ i ] ;
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_VAR 0 2
43775: PUSH
43776: LD_VAR 0 4
43780: ARRAY
43781: ST_TO_ADDR
// dist := tdist ;
43782: LD_ADDR_VAR 0 5
43786: PUSH
43787: LD_VAR 0 6
43791: ST_TO_ADDR
// end ; end ;
43792: GO 43706
43794: POP
43795: POP
// result := hex ;
43796: LD_ADDR_VAR 0 3
43800: PUSH
43801: LD_VAR 0 8
43805: ST_TO_ADDR
// end ;
43806: LD_VAR 0 3
43810: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43811: LD_INT 0
43813: PPUSH
43814: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43815: LD_VAR 0 1
43819: NOT
43820: IFTRUE 43859
43822: PUSH
43823: LD_VAR 0 1
43827: PUSH
43828: LD_INT 21
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 23
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PPUSH
43852: CALL_OW 69
43856: IN
43857: NOT
43858: OR
43859: IFFALSE 43863
// exit ;
43861: GO 43910
// for i = 1 to 3 do
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: DOUBLE
43869: LD_INT 1
43871: DEC
43872: ST_TO_ADDR
43873: LD_INT 3
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43908
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43879: LD_VAR 0 1
43883: PPUSH
43884: CALL_OW 250
43888: PPUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 251
43898: PPUSH
43899: LD_INT 1
43901: PPUSH
43902: CALL_OW 453
43906: GO 43876
43908: POP
43909: POP
// end ;
43910: LD_VAR 0 2
43914: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43915: LD_INT 0
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
// if not unit or not enemy_unit then
43923: LD_VAR 0 1
43927: NOT
43928: IFTRUE 43937
43930: PUSH
43931: LD_VAR 0 2
43935: NOT
43936: OR
43937: IFFALSE 43941
// exit ;
43939: GO 44412
// if GetLives ( i ) < 250 then
43941: LD_VAR 0 4
43945: PPUSH
43946: CALL_OW 256
43950: PUSH
43951: LD_INT 250
43953: LESS
43954: IFFALSE 43967
// begin ComAutodestruct ( i ) ;
43956: LD_VAR 0 4
43960: PPUSH
43961: CALL 43811 0 1
// exit ;
43965: GO 44412
// end ; x := GetX ( enemy_unit ) ;
43967: LD_ADDR_VAR 0 7
43971: PUSH
43972: LD_VAR 0 2
43976: PPUSH
43977: CALL_OW 250
43981: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43982: LD_ADDR_VAR 0 8
43986: PUSH
43987: LD_VAR 0 2
43991: PPUSH
43992: CALL_OW 251
43996: ST_TO_ADDR
// if not x or not y then
43997: LD_VAR 0 7
44001: NOT
44002: IFTRUE 44011
44004: PUSH
44005: LD_VAR 0 8
44009: NOT
44010: OR
44011: IFFALSE 44015
// exit ;
44013: GO 44412
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_VAR 0 7
44024: PPUSH
44025: LD_INT 0
44027: PPUSH
44028: LD_INT 4
44030: PPUSH
44031: CALL_OW 272
44035: PUSH
44036: LD_VAR 0 8
44040: PPUSH
44041: LD_INT 0
44043: PPUSH
44044: LD_INT 4
44046: PPUSH
44047: CALL_OW 273
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: LD_INT 1
44063: PPUSH
44064: LD_INT 4
44066: PPUSH
44067: CALL_OW 272
44071: PUSH
44072: LD_VAR 0 8
44076: PPUSH
44077: LD_INT 1
44079: PPUSH
44080: LD_INT 4
44082: PPUSH
44083: CALL_OW 273
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_VAR 0 7
44096: PPUSH
44097: LD_INT 2
44099: PPUSH
44100: LD_INT 4
44102: PPUSH
44103: CALL_OW 272
44107: PUSH
44108: LD_VAR 0 8
44112: PPUSH
44113: LD_INT 2
44115: PPUSH
44116: LD_INT 4
44118: PPUSH
44119: CALL_OW 273
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_VAR 0 7
44132: PPUSH
44133: LD_INT 3
44135: PPUSH
44136: LD_INT 4
44138: PPUSH
44139: CALL_OW 272
44143: PUSH
44144: LD_VAR 0 8
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: LD_INT 4
44154: PPUSH
44155: CALL_OW 273
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_VAR 0 7
44168: PPUSH
44169: LD_INT 4
44171: PPUSH
44172: LD_INT 4
44174: PPUSH
44175: CALL_OW 272
44179: PUSH
44180: LD_VAR 0 8
44184: PPUSH
44185: LD_INT 4
44187: PPUSH
44188: LD_INT 4
44190: PPUSH
44191: CALL_OW 273
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_VAR 0 7
44204: PPUSH
44205: LD_INT 5
44207: PPUSH
44208: LD_INT 4
44210: PPUSH
44211: CALL_OW 272
44215: PUSH
44216: LD_VAR 0 8
44220: PPUSH
44221: LD_INT 5
44223: PPUSH
44224: LD_INT 4
44226: PPUSH
44227: CALL_OW 273
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// for i = tmp downto 1 do
44244: LD_ADDR_VAR 0 4
44248: PUSH
44249: DOUBLE
44250: LD_VAR 0 6
44254: INC
44255: ST_TO_ADDR
44256: LD_INT 1
44258: PUSH
44259: FOR_DOWNTO
44260: IFFALSE 44363
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44262: LD_VAR 0 6
44266: PUSH
44267: LD_VAR 0 4
44271: ARRAY
44272: PUSH
44273: LD_INT 1
44275: ARRAY
44276: PPUSH
44277: LD_VAR 0 6
44281: PUSH
44282: LD_VAR 0 4
44286: ARRAY
44287: PUSH
44288: LD_INT 2
44290: ARRAY
44291: PPUSH
44292: CALL_OW 488
44296: NOT
44297: IFTRUE 44339
44299: PUSH
44300: LD_VAR 0 6
44304: PUSH
44305: LD_VAR 0 4
44309: ARRAY
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: PPUSH
44315: LD_VAR 0 6
44319: PUSH
44320: LD_VAR 0 4
44324: ARRAY
44325: PUSH
44326: LD_INT 2
44328: ARRAY
44329: PPUSH
44330: CALL_OW 428
44334: PUSH
44335: LD_INT 0
44337: NONEQUAL
44338: OR
44339: IFFALSE 44361
// tmp := Delete ( tmp , i ) ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_VAR 0 6
44350: PPUSH
44351: LD_VAR 0 4
44355: PPUSH
44356: CALL_OW 3
44360: ST_TO_ADDR
44361: GO 44259
44363: POP
44364: POP
// j := GetClosestHex ( unit , tmp ) ;
44365: LD_ADDR_VAR 0 5
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: CALL 43657 0 2
44384: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44385: LD_VAR 0 1
44389: PPUSH
44390: LD_VAR 0 5
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: LD_VAR 0 5
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PPUSH
44408: CALL_OW 111
// end ;
44412: LD_VAR 0 3
44416: RET
// export function PrepareApemanSoldier ( ) ; begin
44417: LD_INT 0
44419: PPUSH
// uc_nation := 0 ;
44420: LD_ADDR_OWVAR 21
44424: PUSH
44425: LD_INT 0
44427: ST_TO_ADDR
// hc_sex := sex_male ;
44428: LD_ADDR_OWVAR 27
44432: PUSH
44433: LD_INT 1
44435: ST_TO_ADDR
// hc_name :=  ;
44436: LD_ADDR_OWVAR 26
44440: PUSH
44441: LD_STRING 
44443: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44444: LD_ADDR_OWVAR 28
44448: PUSH
44449: LD_INT 15
44451: ST_TO_ADDR
// hc_gallery :=  ;
44452: LD_ADDR_OWVAR 33
44456: PUSH
44457: LD_STRING 
44459: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44460: LD_ADDR_OWVAR 31
44464: PUSH
44465: LD_INT 0
44467: PPUSH
44468: LD_INT 3
44470: PPUSH
44471: CALL_OW 12
44475: PUSH
44476: LD_INT 0
44478: PPUSH
44479: LD_INT 3
44481: PPUSH
44482: CALL_OW 12
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44499: LD_ADDR_OWVAR 29
44503: PUSH
44504: LD_INT 12
44506: PUSH
44507: LD_INT 12
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// end ;
44514: LD_VAR 0 1
44518: RET
// export function PrepareApemanEngineer ( ) ; begin
44519: LD_INT 0
44521: PPUSH
// uc_nation := 0 ;
44522: LD_ADDR_OWVAR 21
44526: PUSH
44527: LD_INT 0
44529: ST_TO_ADDR
// hc_sex := sex_male ;
44530: LD_ADDR_OWVAR 27
44534: PUSH
44535: LD_INT 1
44537: ST_TO_ADDR
// hc_name :=  ;
44538: LD_ADDR_OWVAR 26
44542: PUSH
44543: LD_STRING 
44545: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44546: LD_ADDR_OWVAR 28
44550: PUSH
44551: LD_INT 16
44553: ST_TO_ADDR
// hc_gallery :=  ;
44554: LD_ADDR_OWVAR 33
44558: PUSH
44559: LD_STRING 
44561: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44562: LD_ADDR_OWVAR 31
44566: PUSH
44567: LD_INT 0
44569: PPUSH
44570: LD_INT 3
44572: PPUSH
44573: CALL_OW 12
44577: PUSH
44578: LD_INT 0
44580: PPUSH
44581: LD_INT 3
44583: PPUSH
44584: CALL_OW 12
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44601: LD_ADDR_OWVAR 29
44605: PUSH
44606: LD_INT 12
44608: PUSH
44609: LD_INT 12
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// end ;
44616: LD_VAR 0 1
44620: RET
// export function PrepareApeman ( agressivity ) ; begin
44621: LD_INT 0
44623: PPUSH
// uc_side := 0 ;
44624: LD_ADDR_OWVAR 20
44628: PUSH
44629: LD_INT 0
44631: ST_TO_ADDR
// uc_nation := 0 ;
44632: LD_ADDR_OWVAR 21
44636: PUSH
44637: LD_INT 0
44639: ST_TO_ADDR
// hc_sex := sex_male ;
44640: LD_ADDR_OWVAR 27
44644: PUSH
44645: LD_INT 1
44647: ST_TO_ADDR
// hc_class := class_apeman ;
44648: LD_ADDR_OWVAR 28
44652: PUSH
44653: LD_INT 12
44655: ST_TO_ADDR
// hc_gallery :=  ;
44656: LD_ADDR_OWVAR 33
44660: PUSH
44661: LD_STRING 
44663: ST_TO_ADDR
// hc_name :=  ;
44664: LD_ADDR_OWVAR 26
44668: PUSH
44669: LD_STRING 
44671: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44672: LD_ADDR_OWVAR 29
44676: PUSH
44677: LD_INT 12
44679: PUSH
44680: LD_INT 12
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: ST_TO_ADDR
// if agressivity = 0 then
44687: LD_VAR 0 1
44691: PUSH
44692: LD_INT 0
44694: EQUAL
44695: IFFALSE 44707
// hc_agressivity := 0 else
44697: LD_ADDR_OWVAR 35
44701: PUSH
44702: LD_INT 0
44704: ST_TO_ADDR
44705: GO 44728
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44707: LD_ADDR_OWVAR 35
44711: PUSH
44712: LD_VAR 0 1
44716: NEG
44717: PPUSH
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 12
44727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44728: LD_ADDR_OWVAR 31
44732: PUSH
44733: LD_INT 0
44735: PPUSH
44736: LD_INT 3
44738: PPUSH
44739: CALL_OW 12
44743: PUSH
44744: LD_INT 0
44746: PPUSH
44747: LD_INT 3
44749: PPUSH
44750: CALL_OW 12
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// end ;
44767: LD_VAR 0 2
44771: RET
// export function PrepareTiger ( agressivity ) ; begin
44772: LD_INT 0
44774: PPUSH
// uc_side := 0 ;
44775: LD_ADDR_OWVAR 20
44779: PUSH
44780: LD_INT 0
44782: ST_TO_ADDR
// uc_nation := 0 ;
44783: LD_ADDR_OWVAR 21
44787: PUSH
44788: LD_INT 0
44790: ST_TO_ADDR
// InitHc ;
44791: CALL_OW 19
// hc_class := class_tiger ;
44795: LD_ADDR_OWVAR 28
44799: PUSH
44800: LD_INT 14
44802: ST_TO_ADDR
// hc_gallery :=  ;
44803: LD_ADDR_OWVAR 33
44807: PUSH
44808: LD_STRING 
44810: ST_TO_ADDR
// hc_name :=  ;
44811: LD_ADDR_OWVAR 26
44815: PUSH
44816: LD_STRING 
44818: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44819: LD_ADDR_OWVAR 35
44823: PUSH
44824: LD_VAR 0 1
44828: NEG
44829: PPUSH
44830: LD_VAR 0 1
44834: PPUSH
44835: CALL_OW 12
44839: ST_TO_ADDR
// end ;
44840: LD_VAR 0 2
44844: RET
// export function PrepareEnchidna ( ) ; begin
44845: LD_INT 0
44847: PPUSH
// uc_side := 0 ;
44848: LD_ADDR_OWVAR 20
44852: PUSH
44853: LD_INT 0
44855: ST_TO_ADDR
// uc_nation := 0 ;
44856: LD_ADDR_OWVAR 21
44860: PUSH
44861: LD_INT 0
44863: ST_TO_ADDR
// InitHc ;
44864: CALL_OW 19
// hc_class := class_baggie ;
44868: LD_ADDR_OWVAR 28
44872: PUSH
44873: LD_INT 13
44875: ST_TO_ADDR
// hc_gallery :=  ;
44876: LD_ADDR_OWVAR 33
44880: PUSH
44881: LD_STRING 
44883: ST_TO_ADDR
// hc_name :=  ;
44884: LD_ADDR_OWVAR 26
44888: PUSH
44889: LD_STRING 
44891: ST_TO_ADDR
// end ;
44892: LD_VAR 0 1
44896: RET
// export function PrepareFrog ( ) ; begin
44897: LD_INT 0
44899: PPUSH
// uc_side := 0 ;
44900: LD_ADDR_OWVAR 20
44904: PUSH
44905: LD_INT 0
44907: ST_TO_ADDR
// uc_nation := 0 ;
44908: LD_ADDR_OWVAR 21
44912: PUSH
44913: LD_INT 0
44915: ST_TO_ADDR
// InitHc ;
44916: CALL_OW 19
// hc_class := class_frog ;
44920: LD_ADDR_OWVAR 28
44924: PUSH
44925: LD_INT 19
44927: ST_TO_ADDR
// hc_gallery :=  ;
44928: LD_ADDR_OWVAR 33
44932: PUSH
44933: LD_STRING 
44935: ST_TO_ADDR
// hc_name :=  ;
44936: LD_ADDR_OWVAR 26
44940: PUSH
44941: LD_STRING 
44943: ST_TO_ADDR
// end ;
44944: LD_VAR 0 1
44948: RET
// export function PrepareFish ( ) ; begin
44949: LD_INT 0
44951: PPUSH
// uc_side := 0 ;
44952: LD_ADDR_OWVAR 20
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// uc_nation := 0 ;
44960: LD_ADDR_OWVAR 21
44964: PUSH
44965: LD_INT 0
44967: ST_TO_ADDR
// InitHc ;
44968: CALL_OW 19
// hc_class := class_fish ;
44972: LD_ADDR_OWVAR 28
44976: PUSH
44977: LD_INT 20
44979: ST_TO_ADDR
// hc_gallery :=  ;
44980: LD_ADDR_OWVAR 33
44984: PUSH
44985: LD_STRING 
44987: ST_TO_ADDR
// hc_name :=  ;
44988: LD_ADDR_OWVAR 26
44992: PUSH
44993: LD_STRING 
44995: ST_TO_ADDR
// end ;
44996: LD_VAR 0 1
45000: RET
// export function PrepareBird ( ) ; begin
45001: LD_INT 0
45003: PPUSH
// uc_side := 0 ;
45004: LD_ADDR_OWVAR 20
45008: PUSH
45009: LD_INT 0
45011: ST_TO_ADDR
// uc_nation := 0 ;
45012: LD_ADDR_OWVAR 21
45016: PUSH
45017: LD_INT 0
45019: ST_TO_ADDR
// InitHc ;
45020: CALL_OW 19
// hc_class := class_phororhacos ;
45024: LD_ADDR_OWVAR 28
45028: PUSH
45029: LD_INT 18
45031: ST_TO_ADDR
// hc_gallery :=  ;
45032: LD_ADDR_OWVAR 33
45036: PUSH
45037: LD_STRING 
45039: ST_TO_ADDR
// hc_name :=  ;
45040: LD_ADDR_OWVAR 26
45044: PUSH
45045: LD_STRING 
45047: ST_TO_ADDR
// end ;
45048: LD_VAR 0 1
45052: RET
// export function PrepareHorse ( ) ; begin
45053: LD_INT 0
45055: PPUSH
// uc_side := 0 ;
45056: LD_ADDR_OWVAR 20
45060: PUSH
45061: LD_INT 0
45063: ST_TO_ADDR
// uc_nation := 0 ;
45064: LD_ADDR_OWVAR 21
45068: PUSH
45069: LD_INT 0
45071: ST_TO_ADDR
// InitHc ;
45072: CALL_OW 19
// hc_class := class_horse ;
45076: LD_ADDR_OWVAR 28
45080: PUSH
45081: LD_INT 21
45083: ST_TO_ADDR
// hc_gallery :=  ;
45084: LD_ADDR_OWVAR 33
45088: PUSH
45089: LD_STRING 
45091: ST_TO_ADDR
// hc_name :=  ;
45092: LD_ADDR_OWVAR 26
45096: PUSH
45097: LD_STRING 
45099: ST_TO_ADDR
// end ;
45100: LD_VAR 0 1
45104: RET
// export function PrepareMastodont ( ) ; begin
45105: LD_INT 0
45107: PPUSH
// uc_side := 0 ;
45108: LD_ADDR_OWVAR 20
45112: PUSH
45113: LD_INT 0
45115: ST_TO_ADDR
// uc_nation := 0 ;
45116: LD_ADDR_OWVAR 21
45120: PUSH
45121: LD_INT 0
45123: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45124: LD_ADDR_OWVAR 37
45128: PUSH
45129: LD_INT 31
45131: ST_TO_ADDR
// vc_control := control_rider ;
45132: LD_ADDR_OWVAR 38
45136: PUSH
45137: LD_INT 4
45139: ST_TO_ADDR
// end ;
45140: LD_VAR 0 1
45144: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45145: LD_INT 0
45147: PPUSH
45148: PPUSH
45149: PPUSH
// uc_side = 0 ;
45150: LD_ADDR_OWVAR 20
45154: PUSH
45155: LD_INT 0
45157: ST_TO_ADDR
// uc_nation = 0 ;
45158: LD_ADDR_OWVAR 21
45162: PUSH
45163: LD_INT 0
45165: ST_TO_ADDR
// InitHc_All ( ) ;
45166: CALL_OW 584
// InitVc ;
45170: CALL_OW 20
// if mastodonts then
45174: LD_VAR 0 6
45178: IFFALSE 45245
// for i = 1 to mastodonts do
45180: LD_ADDR_VAR 0 11
45184: PUSH
45185: DOUBLE
45186: LD_INT 1
45188: DEC
45189: ST_TO_ADDR
45190: LD_VAR 0 6
45194: PUSH
45195: FOR_TO
45196: IFFALSE 45243
// begin vc_chassis := 31 ;
45198: LD_ADDR_OWVAR 37
45202: PUSH
45203: LD_INT 31
45205: ST_TO_ADDR
// vc_control := control_rider ;
45206: LD_ADDR_OWVAR 38
45210: PUSH
45211: LD_INT 4
45213: ST_TO_ADDR
// animal := CreateVehicle ;
45214: LD_ADDR_VAR 0 12
45218: PUSH
45219: CALL_OW 45
45223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45224: LD_VAR 0 12
45228: PPUSH
45229: LD_VAR 0 8
45233: PPUSH
45234: LD_INT 0
45236: PPUSH
45237: CALL 47387 0 3
// end ;
45241: GO 45195
45243: POP
45244: POP
// if horses then
45245: LD_VAR 0 5
45249: IFFALSE 45316
// for i = 1 to horses do
45251: LD_ADDR_VAR 0 11
45255: PUSH
45256: DOUBLE
45257: LD_INT 1
45259: DEC
45260: ST_TO_ADDR
45261: LD_VAR 0 5
45265: PUSH
45266: FOR_TO
45267: IFFALSE 45314
// begin hc_class := 21 ;
45269: LD_ADDR_OWVAR 28
45273: PUSH
45274: LD_INT 21
45276: ST_TO_ADDR
// hc_gallery :=  ;
45277: LD_ADDR_OWVAR 33
45281: PUSH
45282: LD_STRING 
45284: ST_TO_ADDR
// animal := CreateHuman ;
45285: LD_ADDR_VAR 0 12
45289: PUSH
45290: CALL_OW 44
45294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45295: LD_VAR 0 12
45299: PPUSH
45300: LD_VAR 0 8
45304: PPUSH
45305: LD_INT 0
45307: PPUSH
45308: CALL 47387 0 3
// end ;
45312: GO 45266
45314: POP
45315: POP
// if birds then
45316: LD_VAR 0 1
45320: IFFALSE 45387
// for i = 1 to birds do
45322: LD_ADDR_VAR 0 11
45326: PUSH
45327: DOUBLE
45328: LD_INT 1
45330: DEC
45331: ST_TO_ADDR
45332: LD_VAR 0 1
45336: PUSH
45337: FOR_TO
45338: IFFALSE 45385
// begin hc_class := 18 ;
45340: LD_ADDR_OWVAR 28
45344: PUSH
45345: LD_INT 18
45347: ST_TO_ADDR
// hc_gallery =  ;
45348: LD_ADDR_OWVAR 33
45352: PUSH
45353: LD_STRING 
45355: ST_TO_ADDR
// animal := CreateHuman ;
45356: LD_ADDR_VAR 0 12
45360: PUSH
45361: CALL_OW 44
45365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45366: LD_VAR 0 12
45370: PPUSH
45371: LD_VAR 0 8
45375: PPUSH
45376: LD_INT 0
45378: PPUSH
45379: CALL 47387 0 3
// end ;
45383: GO 45337
45385: POP
45386: POP
// if tigers then
45387: LD_VAR 0 2
45391: IFFALSE 45475
// for i = 1 to tigers do
45393: LD_ADDR_VAR 0 11
45397: PUSH
45398: DOUBLE
45399: LD_INT 1
45401: DEC
45402: ST_TO_ADDR
45403: LD_VAR 0 2
45407: PUSH
45408: FOR_TO
45409: IFFALSE 45473
// begin hc_class = class_tiger ;
45411: LD_ADDR_OWVAR 28
45415: PUSH
45416: LD_INT 14
45418: ST_TO_ADDR
// hc_gallery =  ;
45419: LD_ADDR_OWVAR 33
45423: PUSH
45424: LD_STRING 
45426: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45427: LD_ADDR_OWVAR 35
45431: PUSH
45432: LD_INT 7
45434: NEG
45435: PPUSH
45436: LD_INT 7
45438: PPUSH
45439: CALL_OW 12
45443: ST_TO_ADDR
// animal := CreateHuman ;
45444: LD_ADDR_VAR 0 12
45448: PUSH
45449: CALL_OW 44
45453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45454: LD_VAR 0 12
45458: PPUSH
45459: LD_VAR 0 8
45463: PPUSH
45464: LD_INT 0
45466: PPUSH
45467: CALL 47387 0 3
// end ;
45471: GO 45408
45473: POP
45474: POP
// if apemans then
45475: LD_VAR 0 3
45479: IFFALSE 45602
// for i = 1 to apemans do
45481: LD_ADDR_VAR 0 11
45485: PUSH
45486: DOUBLE
45487: LD_INT 1
45489: DEC
45490: ST_TO_ADDR
45491: LD_VAR 0 3
45495: PUSH
45496: FOR_TO
45497: IFFALSE 45600
// begin hc_class = class_apeman ;
45499: LD_ADDR_OWVAR 28
45503: PUSH
45504: LD_INT 12
45506: ST_TO_ADDR
// hc_gallery =  ;
45507: LD_ADDR_OWVAR 33
45511: PUSH
45512: LD_STRING 
45514: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45515: LD_ADDR_OWVAR 35
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PPUSH
45524: LD_INT 2
45526: PPUSH
45527: CALL_OW 12
45531: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45532: LD_ADDR_OWVAR 31
45536: PUSH
45537: LD_INT 1
45539: PPUSH
45540: LD_INT 3
45542: PPUSH
45543: CALL_OW 12
45547: PUSH
45548: LD_INT 1
45550: PPUSH
45551: LD_INT 3
45553: PPUSH
45554: CALL_OW 12
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// animal := CreateHuman ;
45571: LD_ADDR_VAR 0 12
45575: PUSH
45576: CALL_OW 44
45580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45581: LD_VAR 0 12
45585: PPUSH
45586: LD_VAR 0 8
45590: PPUSH
45591: LD_INT 0
45593: PPUSH
45594: CALL 47387 0 3
// end ;
45598: GO 45496
45600: POP
45601: POP
// if enchidnas then
45602: LD_VAR 0 4
45606: IFFALSE 45673
// for i = 1 to enchidnas do
45608: LD_ADDR_VAR 0 11
45612: PUSH
45613: DOUBLE
45614: LD_INT 1
45616: DEC
45617: ST_TO_ADDR
45618: LD_VAR 0 4
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45671
// begin hc_class = 13 ;
45626: LD_ADDR_OWVAR 28
45630: PUSH
45631: LD_INT 13
45633: ST_TO_ADDR
// hc_gallery =  ;
45634: LD_ADDR_OWVAR 33
45638: PUSH
45639: LD_STRING 
45641: ST_TO_ADDR
// animal := CreateHuman ;
45642: LD_ADDR_VAR 0 12
45646: PUSH
45647: CALL_OW 44
45651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45652: LD_VAR 0 12
45656: PPUSH
45657: LD_VAR 0 8
45661: PPUSH
45662: LD_INT 0
45664: PPUSH
45665: CALL 47387 0 3
// end ;
45669: GO 45623
45671: POP
45672: POP
// if fishes then
45673: LD_VAR 0 7
45677: IFFALSE 45744
// for i = 1 to fishes do
45679: LD_ADDR_VAR 0 11
45683: PUSH
45684: DOUBLE
45685: LD_INT 1
45687: DEC
45688: ST_TO_ADDR
45689: LD_VAR 0 7
45693: PUSH
45694: FOR_TO
45695: IFFALSE 45742
// begin hc_class = 20 ;
45697: LD_ADDR_OWVAR 28
45701: PUSH
45702: LD_INT 20
45704: ST_TO_ADDR
// hc_gallery =  ;
45705: LD_ADDR_OWVAR 33
45709: PUSH
45710: LD_STRING 
45712: ST_TO_ADDR
// animal := CreateHuman ;
45713: LD_ADDR_VAR 0 12
45717: PUSH
45718: CALL_OW 44
45722: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45723: LD_VAR 0 12
45727: PPUSH
45728: LD_VAR 0 9
45732: PPUSH
45733: LD_INT 0
45735: PPUSH
45736: CALL 47387 0 3
// end ;
45740: GO 45694
45742: POP
45743: POP
// end ;
45744: LD_VAR 0 10
45748: RET
// export function WantHeal ( sci , unit ) ; begin
45749: LD_INT 0
45751: PPUSH
// if GetTaskList ( sci ) > 0 then
45752: LD_VAR 0 1
45756: PPUSH
45757: CALL_OW 437
45761: PUSH
45762: LD_INT 0
45764: GREATER
45765: IFFALSE 45837
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45767: LD_VAR 0 1
45771: PPUSH
45772: CALL_OW 437
45776: PUSH
45777: LD_INT 1
45779: ARRAY
45780: PUSH
45781: LD_INT 1
45783: ARRAY
45784: PUSH
45785: LD_STRING l
45787: EQUAL
45788: IFFALSE 45815
45790: PUSH
45791: LD_VAR 0 1
45795: PPUSH
45796: CALL_OW 437
45800: PUSH
45801: LD_INT 1
45803: ARRAY
45804: PUSH
45805: LD_INT 4
45807: ARRAY
45808: PUSH
45809: LD_VAR 0 2
45813: EQUAL
45814: AND
45815: IFFALSE 45827
// result := true else
45817: LD_ADDR_VAR 0 3
45821: PUSH
45822: LD_INT 1
45824: ST_TO_ADDR
45825: GO 45835
// result := false ;
45827: LD_ADDR_VAR 0 3
45831: PUSH
45832: LD_INT 0
45834: ST_TO_ADDR
// end else
45835: GO 45845
// result := false ;
45837: LD_ADDR_VAR 0 3
45841: PUSH
45842: LD_INT 0
45844: ST_TO_ADDR
// end ;
45845: LD_VAR 0 3
45849: RET
// export function HealTarget ( sci ) ; begin
45850: LD_INT 0
45852: PPUSH
// if not sci then
45853: LD_VAR 0 1
45857: NOT
45858: IFFALSE 45862
// exit ;
45860: GO 45927
// result := 0 ;
45862: LD_ADDR_VAR 0 2
45866: PUSH
45867: LD_INT 0
45869: ST_TO_ADDR
// if GetTaskList ( sci ) then
45870: LD_VAR 0 1
45874: PPUSH
45875: CALL_OW 437
45879: IFFALSE 45927
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45881: LD_VAR 0 1
45885: PPUSH
45886: CALL_OW 437
45890: PUSH
45891: LD_INT 1
45893: ARRAY
45894: PUSH
45895: LD_INT 1
45897: ARRAY
45898: PUSH
45899: LD_STRING l
45901: EQUAL
45902: IFFALSE 45927
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45904: LD_ADDR_VAR 0 2
45908: PUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: CALL_OW 437
45918: PUSH
45919: LD_INT 1
45921: ARRAY
45922: PUSH
45923: LD_INT 4
45925: ARRAY
45926: ST_TO_ADDR
// end ;
45927: LD_VAR 0 2
45931: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45932: LD_INT 0
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
// if not base_units then
45938: LD_VAR 0 1
45942: NOT
45943: IFFALSE 45947
// exit ;
45945: GO 46034
// result := false ;
45947: LD_ADDR_VAR 0 2
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45955: LD_ADDR_VAR 0 5
45959: PUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: LD_INT 21
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PPUSH
45975: CALL_OW 72
45979: ST_TO_ADDR
// if not tmp then
45980: LD_VAR 0 5
45984: NOT
45985: IFFALSE 45989
// exit ;
45987: GO 46034
// for i in tmp do
45989: LD_ADDR_VAR 0 3
45993: PUSH
45994: LD_VAR 0 5
45998: PUSH
45999: FOR_IN
46000: IFFALSE 46032
// begin result := EnemyInRange ( i , 22 ) ;
46002: LD_ADDR_VAR 0 2
46006: PUSH
46007: LD_VAR 0 3
46011: PPUSH
46012: LD_INT 22
46014: PPUSH
46015: CALL 43459 0 2
46019: ST_TO_ADDR
// if result then
46020: LD_VAR 0 2
46024: IFFALSE 46030
// exit ;
46026: POP
46027: POP
46028: GO 46034
// end ;
46030: GO 45999
46032: POP
46033: POP
// end ;
46034: LD_VAR 0 2
46038: RET
// export function FilterByTag ( units , tag ) ; begin
46039: LD_INT 0
46041: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46042: LD_ADDR_VAR 0 3
46046: PUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: LD_INT 120
46054: PUSH
46055: LD_VAR 0 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PPUSH
46064: CALL_OW 72
46068: ST_TO_ADDR
// end ;
46069: LD_VAR 0 3
46073: RET
// export function IsDriver ( un ) ; begin
46074: LD_INT 0
46076: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46077: LD_ADDR_VAR 0 2
46081: PUSH
46082: LD_VAR 0 1
46086: PUSH
46087: LD_INT 55
46089: PUSH
46090: EMPTY
46091: LIST
46092: PPUSH
46093: CALL_OW 69
46097: IN
46098: ST_TO_ADDR
// end ;
46099: LD_VAR 0 2
46103: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46104: LD_INT 0
46106: PPUSH
46107: PPUSH
// list := [ ] ;
46108: LD_ADDR_VAR 0 5
46112: PUSH
46113: EMPTY
46114: ST_TO_ADDR
// case d of 0 :
46115: LD_VAR 0 3
46119: PUSH
46120: LD_INT 0
46122: DOUBLE
46123: EQUAL
46124: IFTRUE 46128
46126: GO 46261
46128: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46129: LD_ADDR_VAR 0 5
46133: PUSH
46134: LD_VAR 0 1
46138: PUSH
46139: LD_INT 4
46141: MINUS
46142: PUSH
46143: LD_VAR 0 2
46147: PUSH
46148: LD_INT 4
46150: MINUS
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: PUSH
46160: LD_VAR 0 1
46164: PUSH
46165: LD_INT 3
46167: MINUS
46168: PUSH
46169: LD_VAR 0 2
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: PUSH
46182: LD_VAR 0 1
46186: PUSH
46187: LD_INT 4
46189: PLUS
46190: PUSH
46191: LD_VAR 0 2
46195: PUSH
46196: LD_INT 4
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_VAR 0 1
46208: PUSH
46209: LD_INT 3
46211: PLUS
46212: PUSH
46213: LD_VAR 0 2
46217: PUSH
46218: LD_INT 3
46220: PLUS
46221: PUSH
46222: LD_INT 5
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: PUSH
46230: LD_VAR 0 1
46234: PUSH
46235: LD_VAR 0 2
46239: PUSH
46240: LD_INT 4
46242: PLUS
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
// end ; 1 :
46259: GO 46959
46261: LD_INT 1
46263: DOUBLE
46264: EQUAL
46265: IFTRUE 46269
46267: GO 46402
46269: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46270: LD_ADDR_VAR 0 5
46274: PUSH
46275: LD_VAR 0 1
46279: PUSH
46280: LD_VAR 0 2
46284: PUSH
46285: LD_INT 4
46287: MINUS
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: PUSH
46297: LD_VAR 0 1
46301: PUSH
46302: LD_INT 3
46304: MINUS
46305: PUSH
46306: LD_VAR 0 2
46310: PUSH
46311: LD_INT 3
46313: MINUS
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: PUSH
46323: LD_VAR 0 1
46327: PUSH
46328: LD_INT 4
46330: MINUS
46331: PUSH
46332: LD_VAR 0 2
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: PUSH
46345: LD_VAR 0 1
46349: PUSH
46350: LD_VAR 0 2
46354: PUSH
46355: LD_INT 3
46357: PLUS
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: PUSH
46367: LD_VAR 0 1
46371: PUSH
46372: LD_INT 4
46374: PLUS
46375: PUSH
46376: LD_VAR 0 2
46380: PUSH
46381: LD_INT 4
46383: PLUS
46384: PUSH
46385: LD_INT 5
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// end ; 2 :
46400: GO 46959
46402: LD_INT 2
46404: DOUBLE
46405: EQUAL
46406: IFTRUE 46410
46408: GO 46539
46410: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46411: LD_ADDR_VAR 0 5
46415: PUSH
46416: LD_VAR 0 1
46420: PUSH
46421: LD_VAR 0 2
46425: PUSH
46426: LD_INT 3
46428: MINUS
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: PUSH
46438: LD_VAR 0 1
46442: PUSH
46443: LD_INT 4
46445: PLUS
46446: PUSH
46447: LD_VAR 0 2
46451: PUSH
46452: LD_INT 4
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: PUSH
46460: LD_VAR 0 1
46464: PUSH
46465: LD_VAR 0 2
46469: PUSH
46470: LD_INT 4
46472: PLUS
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: PUSH
46482: LD_VAR 0 1
46486: PUSH
46487: LD_INT 3
46489: MINUS
46490: PUSH
46491: LD_VAR 0 2
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: PUSH
46504: LD_VAR 0 1
46508: PUSH
46509: LD_INT 4
46511: MINUS
46512: PUSH
46513: LD_VAR 0 2
46517: PUSH
46518: LD_INT 4
46520: MINUS
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// end ; 3 :
46537: GO 46959
46539: LD_INT 3
46541: DOUBLE
46542: EQUAL
46543: IFTRUE 46547
46545: GO 46680
46547: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46548: LD_ADDR_VAR 0 5
46552: PUSH
46553: LD_VAR 0 1
46557: PUSH
46558: LD_INT 3
46560: PLUS
46561: PUSH
46562: LD_VAR 0 2
46566: PUSH
46567: LD_INT 4
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: PUSH
46575: LD_VAR 0 1
46579: PUSH
46580: LD_INT 4
46582: PLUS
46583: PUSH
46584: LD_VAR 0 2
46588: PUSH
46589: LD_INT 4
46591: PLUS
46592: PUSH
46593: LD_INT 5
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: PUSH
46601: LD_VAR 0 1
46605: PUSH
46606: LD_INT 4
46608: MINUS
46609: PUSH
46610: LD_VAR 0 2
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: PUSH
46623: LD_VAR 0 1
46627: PUSH
46628: LD_VAR 0 2
46632: PUSH
46633: LD_INT 4
46635: MINUS
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: PUSH
46645: LD_VAR 0 1
46649: PUSH
46650: LD_INT 3
46652: MINUS
46653: PUSH
46654: LD_VAR 0 2
46658: PUSH
46659: LD_INT 3
46661: MINUS
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// end ; 4 :
46678: GO 46959
46680: LD_INT 4
46682: DOUBLE
46683: EQUAL
46684: IFTRUE 46688
46686: GO 46821
46688: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46689: LD_ADDR_VAR 0 5
46693: PUSH
46694: LD_VAR 0 1
46698: PUSH
46699: LD_VAR 0 2
46703: PUSH
46704: LD_INT 4
46706: PLUS
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: PUSH
46716: LD_VAR 0 1
46720: PUSH
46721: LD_INT 3
46723: PLUS
46724: PUSH
46725: LD_VAR 0 2
46729: PUSH
46730: LD_INT 3
46732: PLUS
46733: PUSH
46734: LD_INT 5
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: PUSH
46742: LD_VAR 0 1
46746: PUSH
46747: LD_INT 4
46749: PLUS
46750: PUSH
46751: LD_VAR 0 2
46755: PUSH
46756: LD_INT 4
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: PUSH
46764: LD_VAR 0 1
46768: PUSH
46769: LD_VAR 0 2
46773: PUSH
46774: LD_INT 3
46776: MINUS
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: PUSH
46786: LD_VAR 0 1
46790: PUSH
46791: LD_INT 4
46793: MINUS
46794: PUSH
46795: LD_VAR 0 2
46799: PUSH
46800: LD_INT 4
46802: MINUS
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// end ; 5 :
46819: GO 46959
46821: LD_INT 5
46823: DOUBLE
46824: EQUAL
46825: IFTRUE 46829
46827: GO 46958
46829: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46830: LD_ADDR_VAR 0 5
46834: PUSH
46835: LD_VAR 0 1
46839: PUSH
46840: LD_INT 4
46842: MINUS
46843: PUSH
46844: LD_VAR 0 2
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: PUSH
46857: LD_VAR 0 1
46861: PUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_INT 4
46869: MINUS
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: PUSH
46879: LD_VAR 0 1
46883: PUSH
46884: LD_INT 4
46886: PLUS
46887: PUSH
46888: LD_VAR 0 2
46892: PUSH
46893: LD_INT 4
46895: PLUS
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: PUSH
46905: LD_VAR 0 1
46909: PUSH
46910: LD_INT 3
46912: PLUS
46913: PUSH
46914: LD_VAR 0 2
46918: PUSH
46919: LD_INT 4
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: PUSH
46927: LD_VAR 0 1
46931: PUSH
46932: LD_VAR 0 2
46936: PUSH
46937: LD_INT 3
46939: PLUS
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// end ; end ;
46956: GO 46959
46958: POP
// result := list ;
46959: LD_ADDR_VAR 0 4
46963: PUSH
46964: LD_VAR 0 5
46968: ST_TO_ADDR
// end ;
46969: LD_VAR 0 4
46973: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46974: LD_INT 0
46976: PPUSH
46977: PPUSH
46978: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46979: LD_VAR 0 1
46983: NOT
46984: IFTRUE 47012
46986: PUSH
46987: LD_VAR 0 2
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: LD_INT 4
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: IN
47010: NOT
47011: OR
47012: IFFALSE 47016
// exit ;
47014: GO 47099
// tmp := [ ] ;
47016: LD_ADDR_VAR 0 5
47020: PUSH
47021: EMPTY
47022: ST_TO_ADDR
// for i in units do
47023: LD_ADDR_VAR 0 4
47027: PUSH
47028: LD_VAR 0 1
47032: PUSH
47033: FOR_IN
47034: IFFALSE 47068
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47036: LD_ADDR_VAR 0 5
47040: PUSH
47041: LD_VAR 0 5
47045: PPUSH
47046: LD_VAR 0 4
47050: PPUSH
47051: LD_VAR 0 2
47055: PPUSH
47056: CALL_OW 259
47060: PPUSH
47061: CALL 48494 0 2
47065: ST_TO_ADDR
47066: GO 47033
47068: POP
47069: POP
// if not tmp then
47070: LD_VAR 0 5
47074: NOT
47075: IFFALSE 47079
// exit ;
47077: GO 47099
// result := SortListByListDesc ( units , tmp ) ;
47079: LD_ADDR_VAR 0 3
47083: PUSH
47084: LD_VAR 0 1
47088: PPUSH
47089: LD_VAR 0 5
47093: PPUSH
47094: CALL_OW 77
47098: ST_TO_ADDR
// end ;
47099: LD_VAR 0 3
47103: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47104: LD_INT 0
47106: PPUSH
47107: PPUSH
47108: PPUSH
// result := false ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 0
47116: ST_TO_ADDR
// if not building then
47117: LD_VAR 0 2
47121: NOT
47122: IFFALSE 47126
// exit ;
47124: GO 47270
// x := GetX ( building ) ;
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: LD_VAR 0 2
47135: PPUSH
47136: CALL_OW 250
47140: ST_TO_ADDR
// y := GetY ( building ) ;
47141: LD_ADDR_VAR 0 5
47145: PUSH
47146: LD_VAR 0 2
47150: PPUSH
47151: CALL_OW 251
47155: ST_TO_ADDR
// if not x or not y then
47156: LD_VAR 0 4
47160: NOT
47161: IFTRUE 47170
47163: PUSH
47164: LD_VAR 0 5
47168: NOT
47169: OR
47170: IFFALSE 47174
// exit ;
47172: GO 47270
// if GetTaskList ( unit ) then
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL_OW 437
47183: IFFALSE 47270
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47185: LD_STRING e
47187: PUSH
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 437
47197: PUSH
47198: LD_INT 1
47200: ARRAY
47201: PUSH
47202: LD_INT 1
47204: ARRAY
47205: EQUAL
47206: IFFALSE 47233
47208: PUSH
47209: LD_VAR 0 4
47213: PUSH
47214: LD_VAR 0 1
47218: PPUSH
47219: CALL_OW 437
47223: PUSH
47224: LD_INT 1
47226: ARRAY
47227: PUSH
47228: LD_INT 2
47230: ARRAY
47231: EQUAL
47232: AND
47233: IFFALSE 47260
47235: PUSH
47236: LD_VAR 0 5
47240: PUSH
47241: LD_VAR 0 1
47245: PPUSH
47246: CALL_OW 437
47250: PUSH
47251: LD_INT 1
47253: ARRAY
47254: PUSH
47255: LD_INT 3
47257: ARRAY
47258: EQUAL
47259: AND
47260: IFFALSE 47270
// result := true end ;
47262: LD_ADDR_VAR 0 3
47266: PUSH
47267: LD_INT 1
47269: ST_TO_ADDR
// end ;
47270: LD_VAR 0 3
47274: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47275: LD_INT 0
47277: PPUSH
// result := false ;
47278: LD_ADDR_VAR 0 4
47282: PUSH
47283: LD_INT 0
47285: ST_TO_ADDR
// if GetTaskList ( unit ) then
47286: LD_VAR 0 1
47290: PPUSH
47291: CALL_OW 437
47295: IFFALSE 47382
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47297: LD_STRING M
47299: PUSH
47300: LD_VAR 0 1
47304: PPUSH
47305: CALL_OW 437
47309: PUSH
47310: LD_INT 1
47312: ARRAY
47313: PUSH
47314: LD_INT 1
47316: ARRAY
47317: EQUAL
47318: IFFALSE 47345
47320: PUSH
47321: LD_VAR 0 2
47325: PUSH
47326: LD_VAR 0 1
47330: PPUSH
47331: CALL_OW 437
47335: PUSH
47336: LD_INT 1
47338: ARRAY
47339: PUSH
47340: LD_INT 2
47342: ARRAY
47343: EQUAL
47344: AND
47345: IFFALSE 47372
47347: PUSH
47348: LD_VAR 0 3
47352: PUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 437
47362: PUSH
47363: LD_INT 1
47365: ARRAY
47366: PUSH
47367: LD_INT 3
47369: ARRAY
47370: EQUAL
47371: AND
47372: IFFALSE 47382
// result := true ;
47374: LD_ADDR_VAR 0 4
47378: PUSH
47379: LD_INT 1
47381: ST_TO_ADDR
// end ; end ;
47382: LD_VAR 0 4
47386: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47387: LD_INT 0
47389: PPUSH
47390: PPUSH
47391: PPUSH
47392: PPUSH
// if not unit or not area then
47393: LD_VAR 0 1
47397: NOT
47398: IFTRUE 47407
47400: PUSH
47401: LD_VAR 0 2
47405: NOT
47406: OR
47407: IFFALSE 47411
// exit ;
47409: GO 47587
// tmp := AreaToList ( area , i ) ;
47411: LD_ADDR_VAR 0 6
47415: PUSH
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_VAR 0 5
47425: PPUSH
47426: CALL_OW 517
47430: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47431: LD_ADDR_VAR 0 5
47435: PUSH
47436: DOUBLE
47437: LD_INT 1
47439: DEC
47440: ST_TO_ADDR
47441: LD_VAR 0 6
47445: PUSH
47446: LD_INT 1
47448: ARRAY
47449: PUSH
47450: FOR_TO
47451: IFFALSE 47585
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47453: LD_ADDR_VAR 0 7
47457: PUSH
47458: LD_VAR 0 6
47462: PUSH
47463: LD_INT 1
47465: ARRAY
47466: PUSH
47467: LD_VAR 0 5
47471: ARRAY
47472: PUSH
47473: LD_VAR 0 6
47477: PUSH
47478: LD_INT 2
47480: ARRAY
47481: PUSH
47482: LD_VAR 0 5
47486: ARRAY
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47492: LD_INT 92
47494: PUSH
47495: LD_VAR 0 7
47499: PUSH
47500: LD_INT 1
47502: ARRAY
47503: PUSH
47504: LD_VAR 0 7
47508: PUSH
47509: LD_INT 2
47511: ARRAY
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: PPUSH
47522: CALL_OW 69
47526: PUSH
47527: LD_INT 0
47529: EQUAL
47530: IFFALSE 47583
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47532: LD_VAR 0 1
47536: PPUSH
47537: LD_VAR 0 7
47541: PUSH
47542: LD_INT 1
47544: ARRAY
47545: PPUSH
47546: LD_VAR 0 7
47550: PUSH
47551: LD_INT 2
47553: ARRAY
47554: PPUSH
47555: LD_VAR 0 3
47559: PPUSH
47560: CALL_OW 48
// result := IsPlaced ( unit ) ;
47564: LD_ADDR_VAR 0 4
47568: PUSH
47569: LD_VAR 0 1
47573: PPUSH
47574: CALL_OW 305
47578: ST_TO_ADDR
// exit ;
47579: POP
47580: POP
47581: GO 47587
// end ; end ;
47583: GO 47450
47585: POP
47586: POP
// end ;
47587: LD_VAR 0 4
47591: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47592: LD_INT 0
47594: PPUSH
47595: PPUSH
47596: PPUSH
// if not side or side > 8 then
47597: LD_VAR 0 1
47601: NOT
47602: IFTRUE 47614
47604: PUSH
47605: LD_VAR 0 1
47609: PUSH
47610: LD_INT 8
47612: GREATER
47613: OR
47614: IFFALSE 47618
// exit ;
47616: GO 47805
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47618: LD_ADDR_VAR 0 4
47622: PUSH
47623: LD_INT 22
47625: PUSH
47626: LD_VAR 0 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 21
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PPUSH
47649: CALL_OW 69
47653: ST_TO_ADDR
// if not tmp then
47654: LD_VAR 0 4
47658: NOT
47659: IFFALSE 47663
// exit ;
47661: GO 47805
// enable_addtolog := true ;
47663: LD_ADDR_OWVAR 81
47667: PUSH
47668: LD_INT 1
47670: ST_TO_ADDR
// AddToLog ( [ ) ;
47671: LD_STRING [
47673: PPUSH
47674: CALL_OW 561
// for i in tmp do
47678: LD_ADDR_VAR 0 3
47682: PUSH
47683: LD_VAR 0 4
47687: PUSH
47688: FOR_IN
47689: IFFALSE 47796
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47691: LD_STRING [
47693: PUSH
47694: LD_VAR 0 3
47698: PPUSH
47699: CALL_OW 266
47703: STR
47704: PUSH
47705: LD_STRING , 
47707: STR
47708: PUSH
47709: LD_VAR 0 3
47713: PPUSH
47714: CALL_OW 250
47718: STR
47719: PUSH
47720: LD_STRING , 
47722: STR
47723: PUSH
47724: LD_VAR 0 3
47728: PPUSH
47729: CALL_OW 251
47733: STR
47734: PUSH
47735: LD_STRING , 
47737: STR
47738: PUSH
47739: LD_VAR 0 3
47743: PPUSH
47744: CALL_OW 254
47748: STR
47749: PUSH
47750: LD_STRING , 
47752: STR
47753: PUSH
47754: LD_VAR 0 3
47758: PPUSH
47759: LD_INT 1
47761: PPUSH
47762: CALL_OW 268
47766: STR
47767: PUSH
47768: LD_STRING , 
47770: STR
47771: PUSH
47772: LD_VAR 0 3
47776: PPUSH
47777: LD_INT 2
47779: PPUSH
47780: CALL_OW 268
47784: STR
47785: PUSH
47786: LD_STRING ],
47788: STR
47789: PPUSH
47790: CALL_OW 561
// end ;
47794: GO 47688
47796: POP
47797: POP
// AddToLog ( ]; ) ;
47798: LD_STRING ];
47800: PPUSH
47801: CALL_OW 561
// end ;
47805: LD_VAR 0 2
47809: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47810: LD_INT 0
47812: PPUSH
47813: PPUSH
47814: PPUSH
47815: PPUSH
47816: PPUSH
// if not area or not rate or not max then
47817: LD_VAR 0 1
47821: NOT
47822: IFTRUE 47831
47824: PUSH
47825: LD_VAR 0 2
47829: NOT
47830: OR
47831: IFTRUE 47840
47833: PUSH
47834: LD_VAR 0 4
47838: NOT
47839: OR
47840: IFFALSE 47844
// exit ;
47842: GO 48033
// while 1 do
47844: LD_INT 1
47846: IFFALSE 48033
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47848: LD_ADDR_VAR 0 9
47852: PUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: LD_INT 1
47860: PPUSH
47861: CALL_OW 287
47865: PUSH
47866: LD_INT 10
47868: MUL
47869: ST_TO_ADDR
// r := rate / 10 ;
47870: LD_ADDR_VAR 0 7
47874: PUSH
47875: LD_VAR 0 2
47879: PUSH
47880: LD_INT 10
47882: DIVREAL
47883: ST_TO_ADDR
// time := 1 1$00 ;
47884: LD_ADDR_VAR 0 8
47888: PUSH
47889: LD_INT 2100
47891: ST_TO_ADDR
// if amount < min then
47892: LD_VAR 0 9
47896: PUSH
47897: LD_VAR 0 3
47901: LESS
47902: IFFALSE 47920
// r := r * 2 else
47904: LD_ADDR_VAR 0 7
47908: PUSH
47909: LD_VAR 0 7
47913: PUSH
47914: LD_INT 2
47916: MUL
47917: ST_TO_ADDR
47918: GO 47946
// if amount > max then
47920: LD_VAR 0 9
47924: PUSH
47925: LD_VAR 0 4
47929: GREATER
47930: IFFALSE 47946
// r := r / 2 ;
47932: LD_ADDR_VAR 0 7
47936: PUSH
47937: LD_VAR 0 7
47941: PUSH
47942: LD_INT 2
47944: DIVREAL
47945: ST_TO_ADDR
// time := time / r ;
47946: LD_ADDR_VAR 0 8
47950: PUSH
47951: LD_VAR 0 8
47955: PUSH
47956: LD_VAR 0 7
47960: DIVREAL
47961: ST_TO_ADDR
// if time < 0 then
47962: LD_VAR 0 8
47966: PUSH
47967: LD_INT 0
47969: LESS
47970: IFFALSE 47987
// time := time * - 1 ;
47972: LD_ADDR_VAR 0 8
47976: PUSH
47977: LD_VAR 0 8
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: MUL
47986: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47987: LD_VAR 0 8
47991: PUSH
47992: LD_INT 35
47994: PPUSH
47995: LD_INT 875
47997: PPUSH
47998: CALL_OW 12
48002: PLUS
48003: PPUSH
48004: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48008: LD_INT 1
48010: PPUSH
48011: LD_INT 5
48013: PPUSH
48014: CALL_OW 12
48018: PPUSH
48019: LD_VAR 0 1
48023: PPUSH
48024: LD_INT 1
48026: PPUSH
48027: CALL_OW 55
// end ;
48031: GO 47844
// end ;
48033: LD_VAR 0 5
48037: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48038: LD_INT 0
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
// if not turrets or not factories then
48048: LD_VAR 0 1
48052: NOT
48053: IFTRUE 48062
48055: PUSH
48056: LD_VAR 0 2
48060: NOT
48061: OR
48062: IFFALSE 48066
// exit ;
48064: GO 48373
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48066: LD_ADDR_VAR 0 10
48070: PUSH
48071: LD_INT 5
48073: PUSH
48074: LD_INT 6
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 24
48108: PUSH
48109: LD_INT 25
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 23
48118: PUSH
48119: LD_INT 27
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 42
48132: PUSH
48133: LD_INT 43
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 44
48142: PUSH
48143: LD_INT 46
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 45
48152: PUSH
48153: LD_INT 47
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// result := [ ] ;
48170: LD_ADDR_VAR 0 3
48174: PUSH
48175: EMPTY
48176: ST_TO_ADDR
// for i in turrets do
48177: LD_ADDR_VAR 0 4
48181: PUSH
48182: LD_VAR 0 1
48186: PUSH
48187: FOR_IN
48188: IFFALSE 48371
// begin nat := GetNation ( i ) ;
48190: LD_ADDR_VAR 0 7
48194: PUSH
48195: LD_VAR 0 4
48199: PPUSH
48200: CALL_OW 248
48204: ST_TO_ADDR
// weapon := 0 ;
48205: LD_ADDR_VAR 0 8
48209: PUSH
48210: LD_INT 0
48212: ST_TO_ADDR
// if not nat then
48213: LD_VAR 0 7
48217: NOT
48218: IFFALSE 48222
// continue ;
48220: GO 48187
// for j in list [ nat ] do
48222: LD_ADDR_VAR 0 5
48226: PUSH
48227: LD_VAR 0 10
48231: PUSH
48232: LD_VAR 0 7
48236: ARRAY
48237: PUSH
48238: FOR_IN
48239: IFFALSE 48280
// if GetBWeapon ( i ) = j [ 1 ] then
48241: LD_VAR 0 4
48245: PPUSH
48246: CALL_OW 269
48250: PUSH
48251: LD_VAR 0 5
48255: PUSH
48256: LD_INT 1
48258: ARRAY
48259: EQUAL
48260: IFFALSE 48278
// begin weapon := j [ 2 ] ;
48262: LD_ADDR_VAR 0 8
48266: PUSH
48267: LD_VAR 0 5
48271: PUSH
48272: LD_INT 2
48274: ARRAY
48275: ST_TO_ADDR
// break ;
48276: GO 48280
// end ;
48278: GO 48238
48280: POP
48281: POP
// if not weapon then
48282: LD_VAR 0 8
48286: NOT
48287: IFFALSE 48291
// continue ;
48289: GO 48187
// for k in factories do
48291: LD_ADDR_VAR 0 6
48295: PUSH
48296: LD_VAR 0 2
48300: PUSH
48301: FOR_IN
48302: IFFALSE 48367
// begin weapons := AvailableWeaponList ( k ) ;
48304: LD_ADDR_VAR 0 9
48308: PUSH
48309: LD_VAR 0 6
48313: PPUSH
48314: CALL_OW 478
48318: ST_TO_ADDR
// if not weapons then
48319: LD_VAR 0 9
48323: NOT
48324: IFFALSE 48328
// continue ;
48326: GO 48301
// if weapon in weapons then
48328: LD_VAR 0 8
48332: PUSH
48333: LD_VAR 0 9
48337: IN
48338: IFFALSE 48365
// begin result := [ i , weapon ] ;
48340: LD_ADDR_VAR 0 3
48344: PUSH
48345: LD_VAR 0 4
48349: PUSH
48350: LD_VAR 0 8
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// exit ;
48359: POP
48360: POP
48361: POP
48362: POP
48363: GO 48373
// end ; end ;
48365: GO 48301
48367: POP
48368: POP
// end ;
48369: GO 48187
48371: POP
48372: POP
// end ;
48373: LD_VAR 0 3
48377: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48378: LD_INT 0
48380: PPUSH
// if not side or side > 8 then
48381: LD_VAR 0 3
48385: NOT
48386: IFTRUE 48398
48388: PUSH
48389: LD_VAR 0 3
48393: PUSH
48394: LD_INT 8
48396: GREATER
48397: OR
48398: IFFALSE 48402
// exit ;
48400: GO 48461
// if not range then
48402: LD_VAR 0 4
48406: NOT
48407: IFFALSE 48418
// range := - 12 ;
48409: LD_ADDR_VAR 0 4
48413: PUSH
48414: LD_INT 12
48416: NEG
48417: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48418: LD_VAR 0 1
48422: PPUSH
48423: LD_VAR 0 2
48427: PPUSH
48428: LD_VAR 0 3
48432: PPUSH
48433: LD_VAR 0 4
48437: PPUSH
48438: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_VAR 0 2
48451: PPUSH
48452: LD_VAR 0 3
48456: PPUSH
48457: CALL_OW 331
// end ;
48461: LD_VAR 0 5
48465: RET
// export function Video ( mode ) ; begin
48466: LD_INT 0
48468: PPUSH
// ingame_video = mode ;
48469: LD_ADDR_OWVAR 52
48473: PUSH
48474: LD_VAR 0 1
48478: ST_TO_ADDR
// interface_hidden = mode ;
48479: LD_ADDR_OWVAR 54
48483: PUSH
48484: LD_VAR 0 1
48488: ST_TO_ADDR
// end ;
48489: LD_VAR 0 2
48493: RET
// export function Join ( array , element ) ; begin
48494: LD_INT 0
48496: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48497: LD_ADDR_VAR 0 3
48501: PUSH
48502: LD_VAR 0 1
48506: PPUSH
48507: LD_VAR 0 1
48511: PUSH
48512: LD_INT 1
48514: PLUS
48515: PPUSH
48516: LD_VAR 0 2
48520: PPUSH
48521: CALL_OW 1
48525: ST_TO_ADDR
// end ;
48526: LD_VAR 0 3
48530: RET
// export function JoinUnion ( array , element ) ; begin
48531: LD_INT 0
48533: PPUSH
// result := array union element ;
48534: LD_ADDR_VAR 0 3
48538: PUSH
48539: LD_VAR 0 1
48543: PUSH
48544: LD_VAR 0 2
48548: UNION
48549: ST_TO_ADDR
// end ;
48550: LD_VAR 0 3
48554: RET
// export function GetBehemoths ( side ) ; begin
48555: LD_INT 0
48557: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48558: LD_ADDR_VAR 0 2
48562: PUSH
48563: LD_INT 22
48565: PUSH
48566: LD_VAR 0 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 31
48577: PUSH
48578: LD_INT 25
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PPUSH
48589: CALL_OW 69
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 2
48598: RET
// export function Shuffle ( array ) ; var i , index ; begin
48599: LD_INT 0
48601: PPUSH
48602: PPUSH
48603: PPUSH
// result := [ ] ;
48604: LD_ADDR_VAR 0 2
48608: PUSH
48609: EMPTY
48610: ST_TO_ADDR
// if not array then
48611: LD_VAR 0 1
48615: NOT
48616: IFFALSE 48620
// exit ;
48618: GO 48719
// Randomize ;
48620: CALL_OW 10
// for i = array downto 1 do
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: DOUBLE
48630: LD_VAR 0 1
48634: INC
48635: ST_TO_ADDR
48636: LD_INT 1
48638: PUSH
48639: FOR_DOWNTO
48640: IFFALSE 48717
// begin index := rand ( 1 , array ) ;
48642: LD_ADDR_VAR 0 4
48646: PUSH
48647: LD_INT 1
48649: PPUSH
48650: LD_VAR 0 1
48654: PPUSH
48655: CALL_OW 12
48659: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48660: LD_ADDR_VAR 0 2
48664: PUSH
48665: LD_VAR 0 2
48669: PPUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_INT 1
48677: PLUS
48678: PPUSH
48679: LD_VAR 0 1
48683: PUSH
48684: LD_VAR 0 4
48688: ARRAY
48689: PPUSH
48690: CALL_OW 2
48694: ST_TO_ADDR
// array := Delete ( array , index ) ;
48695: LD_ADDR_VAR 0 1
48699: PUSH
48700: LD_VAR 0 1
48704: PPUSH
48705: LD_VAR 0 4
48709: PPUSH
48710: CALL_OW 3
48714: ST_TO_ADDR
// end ;
48715: GO 48639
48717: POP
48718: POP
// end ;
48719: LD_VAR 0 2
48723: RET
// export function GetBaseMaterials ( base ) ; begin
48724: LD_INT 0
48726: PPUSH
// result := [ 0 , 0 , 0 ] ;
48727: LD_ADDR_VAR 0 2
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// if not base then
48746: LD_VAR 0 1
48750: NOT
48751: IFFALSE 48755
// exit ;
48753: GO 48804
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48755: LD_ADDR_VAR 0 2
48759: PUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: LD_INT 1
48767: PPUSH
48768: CALL_OW 275
48772: PUSH
48773: LD_VAR 0 1
48777: PPUSH
48778: LD_INT 2
48780: PPUSH
48781: CALL_OW 275
48785: PUSH
48786: LD_VAR 0 1
48790: PPUSH
48791: LD_INT 3
48793: PPUSH
48794: CALL_OW 275
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: ST_TO_ADDR
// end ;
48804: LD_VAR 0 2
48808: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48809: LD_INT 0
48811: PPUSH
48812: PPUSH
// result := array ;
48813: LD_ADDR_VAR 0 3
48817: PUSH
48818: LD_VAR 0 1
48822: ST_TO_ADDR
// if size >= result then
48823: LD_VAR 0 2
48827: PUSH
48828: LD_VAR 0 3
48832: GREATEREQUAL
48833: IFFALSE 48837
// exit ;
48835: GO 48887
// if size then
48837: LD_VAR 0 2
48841: IFFALSE 48887
// for i := array downto size do
48843: LD_ADDR_VAR 0 4
48847: PUSH
48848: DOUBLE
48849: LD_VAR 0 1
48853: INC
48854: ST_TO_ADDR
48855: LD_VAR 0 2
48859: PUSH
48860: FOR_DOWNTO
48861: IFFALSE 48885
// result := Delete ( result , result ) ;
48863: LD_ADDR_VAR 0 3
48867: PUSH
48868: LD_VAR 0 3
48872: PPUSH
48873: LD_VAR 0 3
48877: PPUSH
48878: CALL_OW 3
48882: ST_TO_ADDR
48883: GO 48860
48885: POP
48886: POP
// end ;
48887: LD_VAR 0 3
48891: RET
// export function ComExit ( unit ) ; var tmp ; begin
48892: LD_INT 0
48894: PPUSH
48895: PPUSH
// if not IsInUnit ( unit ) then
48896: LD_VAR 0 1
48900: PPUSH
48901: CALL_OW 310
48905: NOT
48906: IFFALSE 48910
// exit ;
48908: GO 48970
// tmp := IsInUnit ( unit ) ;
48910: LD_ADDR_VAR 0 3
48914: PUSH
48915: LD_VAR 0 1
48919: PPUSH
48920: CALL_OW 310
48924: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48925: LD_VAR 0 3
48929: PPUSH
48930: CALL_OW 247
48934: PUSH
48935: LD_INT 2
48937: EQUAL
48938: IFFALSE 48951
// ComExitVehicle ( unit ) else
48940: LD_VAR 0 1
48944: PPUSH
48945: CALL_OW 121
48949: GO 48960
// ComExitBuilding ( unit ) ;
48951: LD_VAR 0 1
48955: PPUSH
48956: CALL_OW 122
// result := tmp ;
48960: LD_ADDR_VAR 0 2
48964: PUSH
48965: LD_VAR 0 3
48969: ST_TO_ADDR
// end ;
48970: LD_VAR 0 2
48974: RET
// export function ComExitAll ( units ) ; var i ; begin
48975: LD_INT 0
48977: PPUSH
48978: PPUSH
// if not units then
48979: LD_VAR 0 1
48983: NOT
48984: IFFALSE 48988
// exit ;
48986: GO 49014
// for i in units do
48988: LD_ADDR_VAR 0 3
48992: PUSH
48993: LD_VAR 0 1
48997: PUSH
48998: FOR_IN
48999: IFFALSE 49012
// ComExit ( i ) ;
49001: LD_VAR 0 3
49005: PPUSH
49006: CALL 48892 0 1
49010: GO 48998
49012: POP
49013: POP
// end ;
49014: LD_VAR 0 2
49018: RET
// export function ResetHc ; begin
49019: LD_INT 0
49021: PPUSH
// InitHc ;
49022: CALL_OW 19
// hc_importance := 0 ;
49026: LD_ADDR_OWVAR 32
49030: PUSH
49031: LD_INT 0
49033: ST_TO_ADDR
// end ;
49034: LD_VAR 0 1
49038: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49039: LD_INT 0
49041: PPUSH
49042: PPUSH
49043: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49044: LD_ADDR_VAR 0 6
49048: PUSH
49049: LD_VAR 0 1
49053: PUSH
49054: LD_VAR 0 3
49058: PLUS
49059: PUSH
49060: LD_INT 2
49062: DIV
49063: ST_TO_ADDR
// if _x < 0 then
49064: LD_VAR 0 6
49068: PUSH
49069: LD_INT 0
49071: LESS
49072: IFFALSE 49089
// _x := _x * - 1 ;
49074: LD_ADDR_VAR 0 6
49078: PUSH
49079: LD_VAR 0 6
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: MUL
49088: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49089: LD_ADDR_VAR 0 7
49093: PUSH
49094: LD_VAR 0 2
49098: PUSH
49099: LD_VAR 0 4
49103: PLUS
49104: PUSH
49105: LD_INT 2
49107: DIV
49108: ST_TO_ADDR
// if _y < 0 then
49109: LD_VAR 0 7
49113: PUSH
49114: LD_INT 0
49116: LESS
49117: IFFALSE 49134
// _y := _y * - 1 ;
49119: LD_ADDR_VAR 0 7
49123: PUSH
49124: LD_VAR 0 7
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: MUL
49133: ST_TO_ADDR
// result := [ _x , _y ] ;
49134: LD_ADDR_VAR 0 5
49138: PUSH
49139: LD_VAR 0 6
49143: PUSH
49144: LD_VAR 0 7
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// end ;
49153: LD_VAR 0 5
49157: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49158: LD_INT 0
49160: PPUSH
49161: PPUSH
49162: PPUSH
49163: PPUSH
// task := GetTaskList ( unit ) ;
49164: LD_ADDR_VAR 0 7
49168: PUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 437
49178: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49179: LD_VAR 0 7
49183: NOT
49184: IFFALSE 49203
49186: PUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: LD_VAR 0 2
49196: PPUSH
49197: CALL_OW 308
49201: NOT
49202: AND
49203: IFFALSE 49207
// exit ;
49205: GO 49325
// if IsInArea ( unit , area ) then
49207: LD_VAR 0 1
49211: PPUSH
49212: LD_VAR 0 2
49216: PPUSH
49217: CALL_OW 308
49221: IFFALSE 49239
// begin ComMoveToArea ( unit , goAway ) ;
49223: LD_VAR 0 1
49227: PPUSH
49228: LD_VAR 0 3
49232: PPUSH
49233: CALL_OW 113
// exit ;
49237: GO 49325
// end ; if task [ 1 ] [ 1 ] <> M then
49239: LD_VAR 0 7
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: PUSH
49252: LD_STRING M
49254: NONEQUAL
49255: IFFALSE 49259
// exit ;
49257: GO 49325
// x := task [ 1 ] [ 2 ] ;
49259: LD_ADDR_VAR 0 5
49263: PUSH
49264: LD_VAR 0 7
49268: PUSH
49269: LD_INT 1
49271: ARRAY
49272: PUSH
49273: LD_INT 2
49275: ARRAY
49276: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49277: LD_ADDR_VAR 0 6
49281: PUSH
49282: LD_VAR 0 7
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: PUSH
49291: LD_INT 3
49293: ARRAY
49294: ST_TO_ADDR
// if InArea ( x , y , area ) then
49295: LD_VAR 0 5
49299: PPUSH
49300: LD_VAR 0 6
49304: PPUSH
49305: LD_VAR 0 2
49309: PPUSH
49310: CALL_OW 309
49314: IFFALSE 49325
// ComStop ( unit ) ;
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 141
// end ;
49325: LD_VAR 0 4
49329: RET
// export function Abs ( value ) ; begin
49330: LD_INT 0
49332: PPUSH
// result := value ;
49333: LD_ADDR_VAR 0 2
49337: PUSH
49338: LD_VAR 0 1
49342: ST_TO_ADDR
// if value < 0 then
49343: LD_VAR 0 1
49347: PUSH
49348: LD_INT 0
49350: LESS
49351: IFFALSE 49368
// result := value * - 1 ;
49353: LD_ADDR_VAR 0 2
49357: PUSH
49358: LD_VAR 0 1
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: MUL
49367: ST_TO_ADDR
// end ;
49368: LD_VAR 0 2
49372: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49373: LD_INT 0
49375: PPUSH
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
49380: PPUSH
49381: PPUSH
49382: PPUSH
// if not unit or not building then
49383: LD_VAR 0 1
49387: NOT
49388: IFTRUE 49397
49390: PUSH
49391: LD_VAR 0 2
49395: NOT
49396: OR
49397: IFFALSE 49401
// exit ;
49399: GO 49629
// x := GetX ( building ) ;
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: LD_VAR 0 2
49410: PPUSH
49411: CALL_OW 250
49415: ST_TO_ADDR
// y := GetY ( building ) ;
49416: LD_ADDR_VAR 0 6
49420: PUSH
49421: LD_VAR 0 2
49425: PPUSH
49426: CALL_OW 251
49430: ST_TO_ADDR
// d := GetDir ( building ) ;
49431: LD_ADDR_VAR 0 8
49435: PUSH
49436: LD_VAR 0 2
49440: PPUSH
49441: CALL_OW 254
49445: ST_TO_ADDR
// r := 4 ;
49446: LD_ADDR_VAR 0 9
49450: PUSH
49451: LD_INT 4
49453: ST_TO_ADDR
// for i := 1 to 5 do
49454: LD_ADDR_VAR 0 10
49458: PUSH
49459: DOUBLE
49460: LD_INT 1
49462: DEC
49463: ST_TO_ADDR
49464: LD_INT 5
49466: PUSH
49467: FOR_TO
49468: IFFALSE 49627
// begin _x := ShiftX ( x , d , r + i ) ;
49470: LD_ADDR_VAR 0 5
49474: PUSH
49475: LD_VAR 0 4
49479: PPUSH
49480: LD_VAR 0 8
49484: PPUSH
49485: LD_VAR 0 9
49489: PUSH
49490: LD_VAR 0 10
49494: PLUS
49495: PPUSH
49496: CALL_OW 272
49500: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49501: LD_ADDR_VAR 0 7
49505: PUSH
49506: LD_VAR 0 6
49510: PPUSH
49511: LD_VAR 0 8
49515: PPUSH
49516: LD_VAR 0 9
49520: PUSH
49521: LD_VAR 0 10
49525: PLUS
49526: PPUSH
49527: CALL_OW 273
49531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49532: LD_VAR 0 5
49536: PPUSH
49537: LD_VAR 0 7
49541: PPUSH
49542: CALL_OW 488
49546: IFFALSE 49581
49548: PUSH
49549: LD_VAR 0 5
49553: PPUSH
49554: LD_VAR 0 7
49558: PPUSH
49559: CALL_OW 428
49563: PPUSH
49564: CALL_OW 247
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: IN
49579: NOT
49580: AND
49581: IFFALSE 49625
// begin ComMoveXY ( unit , _x , _y ) ;
49583: LD_VAR 0 1
49587: PPUSH
49588: LD_VAR 0 5
49592: PPUSH
49593: LD_VAR 0 7
49597: PPUSH
49598: CALL_OW 111
// result := [ _x , _y ] ;
49602: LD_ADDR_VAR 0 3
49606: PUSH
49607: LD_VAR 0 5
49611: PUSH
49612: LD_VAR 0 7
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// exit ;
49621: POP
49622: POP
49623: GO 49629
// end ; end ;
49625: GO 49467
49627: POP
49628: POP
// end ;
49629: LD_VAR 0 3
49633: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49634: LD_INT 0
49636: PPUSH
49637: PPUSH
49638: PPUSH
// result := 0 ;
49639: LD_ADDR_VAR 0 3
49643: PUSH
49644: LD_INT 0
49646: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49647: LD_VAR 0 1
49651: PUSH
49652: LD_INT 0
49654: LESS
49655: IFTRUE 49667
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: LD_INT 8
49665: GREATER
49666: OR
49667: IFTRUE 49679
49669: PUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_INT 0
49677: LESS
49678: OR
49679: IFTRUE 49691
49681: PUSH
49682: LD_VAR 0 2
49686: PUSH
49687: LD_INT 8
49689: GREATER
49690: OR
49691: IFFALSE 49695
// exit ;
49693: GO 49770
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49695: LD_ADDR_VAR 0 4
49699: PUSH
49700: LD_INT 22
49702: PUSH
49703: LD_VAR 0 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PPUSH
49712: CALL_OW 69
49716: PUSH
49717: FOR_IN
49718: IFFALSE 49768
// begin un := UnitShoot ( i ) ;
49720: LD_ADDR_VAR 0 5
49724: PUSH
49725: LD_VAR 0 4
49729: PPUSH
49730: CALL_OW 504
49734: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49735: LD_VAR 0 5
49739: PPUSH
49740: CALL_OW 255
49744: PUSH
49745: LD_VAR 0 1
49749: EQUAL
49750: IFFALSE 49766
// begin result := un ;
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: LD_VAR 0 5
49761: ST_TO_ADDR
// exit ;
49762: POP
49763: POP
49764: GO 49770
// end ; end ;
49766: GO 49717
49768: POP
49769: POP
// end ;
49770: LD_VAR 0 3
49774: RET
// export function GetCargoBay ( units ) ; begin
49775: LD_INT 0
49777: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49778: LD_ADDR_VAR 0 2
49782: PUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 34
49793: PUSH
49794: LD_INT 12
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 34
49803: PUSH
49804: LD_INT 51
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 34
49813: PUSH
49814: LD_INT 32
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 34
49823: PUSH
49824: LD_INT 89
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: PPUSH
49838: CALL_OW 72
49842: ST_TO_ADDR
// end ;
49843: LD_VAR 0 2
49847: RET
// export function Negate ( value ) ; begin
49848: LD_INT 0
49850: PPUSH
// result := not value ;
49851: LD_ADDR_VAR 0 2
49855: PUSH
49856: LD_VAR 0 1
49860: NOT
49861: ST_TO_ADDR
// end ;
49862: LD_VAR 0 2
49866: RET
// export function Inc ( value ) ; begin
49867: LD_INT 0
49869: PPUSH
// result := value + 1 ;
49870: LD_ADDR_VAR 0 2
49874: PUSH
49875: LD_VAR 0 1
49879: PUSH
49880: LD_INT 1
49882: PLUS
49883: ST_TO_ADDR
// end ;
49884: LD_VAR 0 2
49888: RET
// export function Dec ( value ) ; begin
49889: LD_INT 0
49891: PPUSH
// result := value - 1 ;
49892: LD_ADDR_VAR 0 2
49896: PUSH
49897: LD_VAR 0 1
49901: PUSH
49902: LD_INT 1
49904: MINUS
49905: ST_TO_ADDR
// end ;
49906: LD_VAR 0 2
49910: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49911: LD_INT 0
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49921: LD_VAR 0 1
49925: PPUSH
49926: LD_VAR 0 2
49930: PPUSH
49931: CALL_OW 488
49935: NOT
49936: IFTRUE 49955
49938: PUSH
49939: LD_VAR 0 3
49943: PPUSH
49944: LD_VAR 0 4
49948: PPUSH
49949: CALL_OW 488
49953: NOT
49954: OR
49955: IFFALSE 49968
// begin result := - 1 ;
49957: LD_ADDR_VAR 0 5
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: ST_TO_ADDR
// exit ;
49966: GO 50203
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49968: LD_ADDR_VAR 0 12
49972: PUSH
49973: LD_VAR 0 1
49977: PPUSH
49978: LD_VAR 0 2
49982: PPUSH
49983: LD_VAR 0 3
49987: PPUSH
49988: LD_VAR 0 4
49992: PPUSH
49993: CALL 49039 0 4
49997: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49998: LD_ADDR_VAR 0 11
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: LD_VAR 0 2
50012: PPUSH
50013: LD_VAR 0 12
50017: PUSH
50018: LD_INT 1
50020: ARRAY
50021: PPUSH
50022: LD_VAR 0 12
50026: PUSH
50027: LD_INT 2
50029: ARRAY
50030: PPUSH
50031: CALL_OW 298
50035: ST_TO_ADDR
// distance := 9999 ;
50036: LD_ADDR_VAR 0 10
50040: PUSH
50041: LD_INT 9999
50043: ST_TO_ADDR
// for i := 0 to 5 do
50044: LD_ADDR_VAR 0 6
50048: PUSH
50049: DOUBLE
50050: LD_INT 0
50052: DEC
50053: ST_TO_ADDR
50054: LD_INT 5
50056: PUSH
50057: FOR_TO
50058: IFFALSE 50201
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50060: LD_ADDR_VAR 0 7
50064: PUSH
50065: LD_VAR 0 1
50069: PPUSH
50070: LD_VAR 0 6
50074: PPUSH
50075: LD_VAR 0 11
50079: PPUSH
50080: CALL_OW 272
50084: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50085: LD_ADDR_VAR 0 8
50089: PUSH
50090: LD_VAR 0 2
50094: PPUSH
50095: LD_VAR 0 6
50099: PPUSH
50100: LD_VAR 0 11
50104: PPUSH
50105: CALL_OW 273
50109: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50110: LD_VAR 0 7
50114: PPUSH
50115: LD_VAR 0 8
50119: PPUSH
50120: CALL_OW 488
50124: NOT
50125: IFFALSE 50129
// continue ;
50127: GO 50057
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50129: LD_ADDR_VAR 0 9
50133: PUSH
50134: LD_VAR 0 12
50138: PUSH
50139: LD_INT 1
50141: ARRAY
50142: PPUSH
50143: LD_VAR 0 12
50147: PUSH
50148: LD_INT 2
50150: ARRAY
50151: PPUSH
50152: LD_VAR 0 7
50156: PPUSH
50157: LD_VAR 0 8
50161: PPUSH
50162: CALL_OW 298
50166: ST_TO_ADDR
// if tmp < distance then
50167: LD_VAR 0 9
50171: PUSH
50172: LD_VAR 0 10
50176: LESS
50177: IFFALSE 50199
// begin result := i ;
50179: LD_ADDR_VAR 0 5
50183: PUSH
50184: LD_VAR 0 6
50188: ST_TO_ADDR
// distance := tmp ;
50189: LD_ADDR_VAR 0 10
50193: PUSH
50194: LD_VAR 0 9
50198: ST_TO_ADDR
// end ; end ;
50199: GO 50057
50201: POP
50202: POP
// end ;
50203: LD_VAR 0 5
50207: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
// if not driver or not IsInUnit ( driver ) then
50212: LD_VAR 0 1
50216: NOT
50217: IFTRUE 50231
50219: PUSH
50220: LD_VAR 0 1
50224: PPUSH
50225: CALL_OW 310
50229: NOT
50230: OR
50231: IFFALSE 50235
// exit ;
50233: GO 50325
// vehicle := IsInUnit ( driver ) ;
50235: LD_ADDR_VAR 0 3
50239: PUSH
50240: LD_VAR 0 1
50244: PPUSH
50245: CALL_OW 310
50249: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50250: LD_VAR 0 1
50254: PPUSH
50255: LD_STRING \
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: PUSH
50285: LD_STRING E
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_VAR 0 3
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PPUSH
50321: CALL_OW 446
// end ;
50325: LD_VAR 0 2
50329: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50330: LD_INT 0
50332: PPUSH
50333: PPUSH
// if not driver or not IsInUnit ( driver ) then
50334: LD_VAR 0 1
50338: NOT
50339: IFTRUE 50353
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 310
50351: NOT
50352: OR
50353: IFFALSE 50357
// exit ;
50355: GO 50447
// vehicle := IsInUnit ( driver ) ;
50357: LD_ADDR_VAR 0 3
50361: PUSH
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 310
50371: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50372: LD_VAR 0 1
50376: PPUSH
50377: LD_STRING \
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: PUSH
50407: LD_STRING E
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_VAR 0 3
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PPUSH
50443: CALL_OW 447
// end ;
50447: LD_VAR 0 2
50451: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50452: LD_INT 0
50454: PPUSH
50455: PPUSH
50456: PPUSH
// tmp := [ ] ;
50457: LD_ADDR_VAR 0 5
50461: PUSH
50462: EMPTY
50463: ST_TO_ADDR
// for i in units do
50464: LD_ADDR_VAR 0 4
50468: PUSH
50469: LD_VAR 0 1
50473: PUSH
50474: FOR_IN
50475: IFFALSE 50513
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50477: LD_ADDR_VAR 0 5
50481: PUSH
50482: LD_VAR 0 5
50486: PPUSH
50487: LD_VAR 0 5
50491: PUSH
50492: LD_INT 1
50494: PLUS
50495: PPUSH
50496: LD_VAR 0 4
50500: PPUSH
50501: CALL_OW 256
50505: PPUSH
50506: CALL_OW 2
50510: ST_TO_ADDR
50511: GO 50474
50513: POP
50514: POP
// if not tmp then
50515: LD_VAR 0 5
50519: NOT
50520: IFFALSE 50524
// exit ;
50522: GO 50572
// if asc then
50524: LD_VAR 0 2
50528: IFFALSE 50552
// result := SortListByListAsc ( units , tmp ) else
50530: LD_ADDR_VAR 0 3
50534: PUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: LD_VAR 0 5
50544: PPUSH
50545: CALL_OW 76
50549: ST_TO_ADDR
50550: GO 50572
// result := SortListByListDesc ( units , tmp ) ;
50552: LD_ADDR_VAR 0 3
50556: PUSH
50557: LD_VAR 0 1
50561: PPUSH
50562: LD_VAR 0 5
50566: PPUSH
50567: CALL_OW 77
50571: ST_TO_ADDR
// end ;
50572: LD_VAR 0 3
50576: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50577: LD_INT 0
50579: PPUSH
50580: PPUSH
// task := GetTaskList ( mech ) ;
50581: LD_ADDR_VAR 0 4
50585: PUSH
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 437
50595: ST_TO_ADDR
// if not task then
50596: LD_VAR 0 4
50600: NOT
50601: IFFALSE 50605
// exit ;
50603: GO 50649
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50605: LD_ADDR_VAR 0 3
50609: PUSH
50610: LD_VAR 0 4
50614: PUSH
50615: LD_INT 1
50617: ARRAY
50618: PUSH
50619: LD_INT 1
50621: ARRAY
50622: PUSH
50623: LD_STRING r
50625: EQUAL
50626: IFFALSE 50648
50628: PUSH
50629: LD_VAR 0 4
50633: PUSH
50634: LD_INT 1
50636: ARRAY
50637: PUSH
50638: LD_INT 4
50640: ARRAY
50641: PUSH
50642: LD_VAR 0 2
50646: EQUAL
50647: AND
50648: ST_TO_ADDR
// end ;
50649: LD_VAR 0 3
50653: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50654: LD_INT 0
50656: PPUSH
// SetDir ( unit , d ) ;
50657: LD_VAR 0 1
50661: PPUSH
50662: LD_VAR 0 4
50666: PPUSH
50667: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50671: LD_ADDR_VAR 0 6
50675: PUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: LD_VAR 0 2
50685: PPUSH
50686: LD_VAR 0 3
50690: PPUSH
50691: LD_VAR 0 5
50695: PPUSH
50696: CALL_OW 48
50700: ST_TO_ADDR
// end ;
50701: LD_VAR 0 6
50705: RET
// export function ToNaturalNumber ( number ) ; begin
50706: LD_INT 0
50708: PPUSH
// result := number div 1 ;
50709: LD_ADDR_VAR 0 2
50713: PUSH
50714: LD_VAR 0 1
50718: PUSH
50719: LD_INT 1
50721: DIV
50722: ST_TO_ADDR
// if number < 0 then
50723: LD_VAR 0 1
50727: PUSH
50728: LD_INT 0
50730: LESS
50731: IFFALSE 50741
// result := 0 ;
50733: LD_ADDR_VAR 0 2
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// end ;
50741: LD_VAR 0 2
50745: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50746: LD_INT 0
50748: PPUSH
50749: PPUSH
50750: PPUSH
// if not buildings then
50751: LD_VAR 0 1
50755: NOT
50756: IFFALSE 50760
// exit ;
50758: GO 50875
// tmp := [ ] ;
50760: LD_ADDR_VAR 0 5
50764: PUSH
50765: EMPTY
50766: ST_TO_ADDR
// for b in buildings do
50767: LD_ADDR_VAR 0 4
50771: PUSH
50772: LD_VAR 0 1
50776: PUSH
50777: FOR_IN
50778: IFFALSE 50816
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50780: LD_ADDR_VAR 0 5
50784: PUSH
50785: LD_VAR 0 5
50789: PPUSH
50790: LD_VAR 0 5
50794: PUSH
50795: LD_INT 1
50797: PLUS
50798: PPUSH
50799: LD_VAR 0 4
50803: PPUSH
50804: CALL_OW 266
50808: PPUSH
50809: CALL_OW 1
50813: ST_TO_ADDR
50814: GO 50777
50816: POP
50817: POP
// if not tmp then
50818: LD_VAR 0 5
50822: NOT
50823: IFFALSE 50827
// exit ;
50825: GO 50875
// if asc then
50827: LD_VAR 0 2
50831: IFFALSE 50855
// result := SortListByListAsc ( buildings , tmp ) else
50833: LD_ADDR_VAR 0 3
50837: PUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: LD_VAR 0 5
50847: PPUSH
50848: CALL_OW 76
50852: ST_TO_ADDR
50853: GO 50875
// result := SortListByListDesc ( buildings , tmp ) ;
50855: LD_ADDR_VAR 0 3
50859: PUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: LD_VAR 0 5
50869: PPUSH
50870: CALL_OW 77
50874: ST_TO_ADDR
// end ;
50875: LD_VAR 0 3
50879: RET
// export function SortByClass ( units , class ) ; var un ; begin
50880: LD_INT 0
50882: PPUSH
50883: PPUSH
// if not units or not class then
50884: LD_VAR 0 1
50888: NOT
50889: IFTRUE 50898
50891: PUSH
50892: LD_VAR 0 2
50896: NOT
50897: OR
50898: IFFALSE 50902
// exit ;
50900: GO 50997
// result := [ ] ;
50902: LD_ADDR_VAR 0 3
50906: PUSH
50907: EMPTY
50908: ST_TO_ADDR
// for un in units do
50909: LD_ADDR_VAR 0 4
50913: PUSH
50914: LD_VAR 0 1
50918: PUSH
50919: FOR_IN
50920: IFFALSE 50995
// if GetClass ( un ) = class then
50922: LD_VAR 0 4
50926: PPUSH
50927: CALL_OW 257
50931: PUSH
50932: LD_VAR 0 2
50936: EQUAL
50937: IFFALSE 50964
// result := Insert ( result , 1 , un ) else
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_VAR 0 3
50948: PPUSH
50949: LD_INT 1
50951: PPUSH
50952: LD_VAR 0 4
50956: PPUSH
50957: CALL_OW 2
50961: ST_TO_ADDR
50962: GO 50993
// result := Replace ( result , result + 1 , un ) ;
50964: LD_ADDR_VAR 0 3
50968: PUSH
50969: LD_VAR 0 3
50973: PPUSH
50974: LD_VAR 0 3
50978: PUSH
50979: LD_INT 1
50981: PLUS
50982: PPUSH
50983: LD_VAR 0 4
50987: PPUSH
50988: CALL_OW 1
50992: ST_TO_ADDR
50993: GO 50919
50995: POP
50996: POP
// end ;
50997: LD_VAR 0 3
51001: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51002: LD_INT 0
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
51008: PPUSH
51009: PPUSH
51010: PPUSH
// result := [ ] ;
51011: LD_ADDR_VAR 0 4
51015: PUSH
51016: EMPTY
51017: ST_TO_ADDR
// if x - r < 0 then
51018: LD_VAR 0 1
51022: PUSH
51023: LD_VAR 0 3
51027: MINUS
51028: PUSH
51029: LD_INT 0
51031: LESS
51032: IFFALSE 51044
// min_x := 0 else
51034: LD_ADDR_VAR 0 8
51038: PUSH
51039: LD_INT 0
51041: ST_TO_ADDR
51042: GO 51060
// min_x := x - r ;
51044: LD_ADDR_VAR 0 8
51048: PUSH
51049: LD_VAR 0 1
51053: PUSH
51054: LD_VAR 0 3
51058: MINUS
51059: ST_TO_ADDR
// if y - r < 0 then
51060: LD_VAR 0 2
51064: PUSH
51065: LD_VAR 0 3
51069: MINUS
51070: PUSH
51071: LD_INT 0
51073: LESS
51074: IFFALSE 51086
// min_y := 0 else
51076: LD_ADDR_VAR 0 7
51080: PUSH
51081: LD_INT 0
51083: ST_TO_ADDR
51084: GO 51102
// min_y := y - r ;
51086: LD_ADDR_VAR 0 7
51090: PUSH
51091: LD_VAR 0 2
51095: PUSH
51096: LD_VAR 0 3
51100: MINUS
51101: ST_TO_ADDR
// max_x := x + r ;
51102: LD_ADDR_VAR 0 9
51106: PUSH
51107: LD_VAR 0 1
51111: PUSH
51112: LD_VAR 0 3
51116: PLUS
51117: ST_TO_ADDR
// max_y := y + r ;
51118: LD_ADDR_VAR 0 10
51122: PUSH
51123: LD_VAR 0 2
51127: PUSH
51128: LD_VAR 0 3
51132: PLUS
51133: ST_TO_ADDR
// for _x = min_x to max_x do
51134: LD_ADDR_VAR 0 5
51138: PUSH
51139: DOUBLE
51140: LD_VAR 0 8
51144: DEC
51145: ST_TO_ADDR
51146: LD_VAR 0 9
51150: PUSH
51151: FOR_TO
51152: IFFALSE 51253
// for _y = min_y to max_y do
51154: LD_ADDR_VAR 0 6
51158: PUSH
51159: DOUBLE
51160: LD_VAR 0 7
51164: DEC
51165: ST_TO_ADDR
51166: LD_VAR 0 10
51170: PUSH
51171: FOR_TO
51172: IFFALSE 51249
// begin if not ValidHex ( _x , _y ) then
51174: LD_VAR 0 5
51178: PPUSH
51179: LD_VAR 0 6
51183: PPUSH
51184: CALL_OW 488
51188: NOT
51189: IFFALSE 51193
// continue ;
51191: GO 51171
// if GetResourceTypeXY ( _x , _y ) then
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_VAR 0 6
51202: PPUSH
51203: CALL_OW 283
51207: IFFALSE 51247
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51209: LD_ADDR_VAR 0 4
51213: PUSH
51214: LD_VAR 0 4
51218: PPUSH
51219: LD_VAR 0 4
51223: PUSH
51224: LD_INT 1
51226: PLUS
51227: PPUSH
51228: LD_VAR 0 5
51232: PUSH
51233: LD_VAR 0 6
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 1
51246: ST_TO_ADDR
// end ;
51247: GO 51171
51249: POP
51250: POP
51251: GO 51151
51253: POP
51254: POP
// end ;
51255: LD_VAR 0 4
51259: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51260: LD_INT 0
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
// if not units then
51270: LD_VAR 0 1
51274: NOT
51275: IFFALSE 51279
// exit ;
51277: GO 51811
// result := UnitFilter ( units , [ f_ok ] ) ;
51279: LD_ADDR_VAR 0 3
51283: PUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: LD_INT 50
51291: PUSH
51292: EMPTY
51293: LIST
51294: PPUSH
51295: CALL_OW 72
51299: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51300: LD_ADDR_VAR 0 8
51304: PUSH
51305: LD_VAR 0 1
51309: PUSH
51310: LD_INT 1
51312: ARRAY
51313: PPUSH
51314: CALL_OW 255
51318: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51319: LD_ADDR_VAR 0 10
51323: PUSH
51324: LD_INT 29
51326: PUSH
51327: LD_INT 91
51329: PUSH
51330: LD_INT 49
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// if not result then
51338: LD_VAR 0 3
51342: NOT
51343: IFFALSE 51347
// exit ;
51345: GO 51811
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51347: LD_ADDR_VAR 0 5
51351: PUSH
51352: LD_INT 81
51354: PUSH
51355: LD_VAR 0 8
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PPUSH
51364: CALL_OW 69
51368: ST_TO_ADDR
// for i in result do
51369: LD_ADDR_VAR 0 4
51373: PUSH
51374: LD_VAR 0 3
51378: PUSH
51379: FOR_IN
51380: IFFALSE 51809
// begin tag := GetTag ( i ) + 1 ;
51382: LD_ADDR_VAR 0 9
51386: PUSH
51387: LD_VAR 0 4
51391: PPUSH
51392: CALL_OW 110
51396: PUSH
51397: LD_INT 1
51399: PLUS
51400: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51401: LD_ADDR_VAR 0 7
51405: PUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: CALL_OW 250
51415: PPUSH
51416: LD_VAR 0 4
51420: PPUSH
51421: CALL_OW 251
51425: PPUSH
51426: LD_INT 4
51428: PPUSH
51429: CALL 51002 0 3
51433: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51434: LD_VAR 0 4
51438: PPUSH
51439: CALL_OW 247
51443: PUSH
51444: LD_INT 2
51446: EQUAL
51447: IFFALSE 51459
51449: PUSH
51450: LD_VAR 0 7
51454: PUSH
51455: LD_INT 2
51457: GREATER
51458: AND
51459: IFFALSE 51479
51461: PUSH
51462: LD_VAR 0 4
51466: PPUSH
51467: CALL_OW 264
51471: PUSH
51472: LD_VAR 0 10
51476: IN
51477: NOT
51478: AND
51479: IFFALSE 51518
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51481: LD_VAR 0 4
51485: PPUSH
51486: LD_VAR 0 7
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: PPUSH
51499: LD_VAR 0 7
51503: PUSH
51504: LD_INT 1
51506: ARRAY
51507: PUSH
51508: LD_INT 2
51510: ARRAY
51511: PPUSH
51512: CALL_OW 116
51516: GO 51807
// if path > tag then
51518: LD_VAR 0 2
51522: PUSH
51523: LD_VAR 0 9
51527: GREATER
51528: IFFALSE 51736
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51530: LD_ADDR_VAR 0 6
51534: PUSH
51535: LD_VAR 0 5
51539: PPUSH
51540: LD_INT 91
51542: PUSH
51543: LD_VAR 0 4
51547: PUSH
51548: LD_INT 8
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PPUSH
51556: CALL_OW 72
51560: ST_TO_ADDR
// if nearEnemy then
51561: LD_VAR 0 6
51565: IFFALSE 51634
// begin if GetWeapon ( i ) = ru_time_lapser then
51567: LD_VAR 0 4
51571: PPUSH
51572: CALL_OW 264
51576: PUSH
51577: LD_INT 49
51579: EQUAL
51580: IFFALSE 51608
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51582: LD_VAR 0 4
51586: PPUSH
51587: LD_VAR 0 6
51591: PPUSH
51592: LD_VAR 0 4
51596: PPUSH
51597: CALL_OW 74
51601: PPUSH
51602: CALL_OW 112
51606: GO 51632
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51608: LD_VAR 0 4
51612: PPUSH
51613: LD_VAR 0 6
51617: PPUSH
51618: LD_VAR 0 4
51622: PPUSH
51623: CALL_OW 74
51627: PPUSH
51628: CALL 52892 0 2
// end else
51632: GO 51734
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51634: LD_VAR 0 4
51638: PPUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_VAR 0 9
51648: ARRAY
51649: PUSH
51650: LD_INT 1
51652: ARRAY
51653: PPUSH
51654: LD_VAR 0 2
51658: PUSH
51659: LD_VAR 0 9
51663: ARRAY
51664: PUSH
51665: LD_INT 2
51667: ARRAY
51668: PPUSH
51669: CALL_OW 297
51673: PUSH
51674: LD_INT 6
51676: GREATER
51677: IFFALSE 51720
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51679: LD_VAR 0 4
51683: PPUSH
51684: LD_VAR 0 2
51688: PUSH
51689: LD_VAR 0 9
51693: ARRAY
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: PPUSH
51699: LD_VAR 0 2
51703: PUSH
51704: LD_VAR 0 9
51708: ARRAY
51709: PUSH
51710: LD_INT 2
51712: ARRAY
51713: PPUSH
51714: CALL_OW 114
51718: GO 51734
// SetTag ( i , tag ) ;
51720: LD_VAR 0 4
51724: PPUSH
51725: LD_VAR 0 9
51729: PPUSH
51730: CALL_OW 109
// end else
51734: GO 51807
// if enemy then
51736: LD_VAR 0 5
51740: IFFALSE 51807
// begin if GetWeapon ( i ) = ru_time_lapser then
51742: LD_VAR 0 4
51746: PPUSH
51747: CALL_OW 264
51751: PUSH
51752: LD_INT 49
51754: EQUAL
51755: IFFALSE 51783
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51757: LD_VAR 0 4
51761: PPUSH
51762: LD_VAR 0 5
51766: PPUSH
51767: LD_VAR 0 4
51771: PPUSH
51772: CALL_OW 74
51776: PPUSH
51777: CALL_OW 112
51781: GO 51807
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51783: LD_VAR 0 4
51787: PPUSH
51788: LD_VAR 0 5
51792: PPUSH
51793: LD_VAR 0 4
51797: PPUSH
51798: CALL_OW 74
51802: PPUSH
51803: CALL 52892 0 2
// end ; end ;
51807: GO 51379
51809: POP
51810: POP
// end ;
51811: LD_VAR 0 3
51815: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51816: LD_INT 0
51818: PPUSH
51819: PPUSH
51820: PPUSH
// if not unit or IsInUnit ( unit ) then
51821: LD_VAR 0 1
51825: NOT
51826: IFTRUE 51839
51828: PUSH
51829: LD_VAR 0 1
51833: PPUSH
51834: CALL_OW 310
51838: OR
51839: IFFALSE 51843
// exit ;
51841: GO 51934
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51843: LD_ADDR_VAR 0 4
51847: PUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 250
51857: PPUSH
51858: LD_VAR 0 2
51862: PPUSH
51863: LD_INT 1
51865: PPUSH
51866: CALL_OW 272
51870: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51871: LD_ADDR_VAR 0 5
51875: PUSH
51876: LD_VAR 0 1
51880: PPUSH
51881: CALL_OW 251
51885: PPUSH
51886: LD_VAR 0 2
51890: PPUSH
51891: LD_INT 1
51893: PPUSH
51894: CALL_OW 273
51898: ST_TO_ADDR
// if ValidHex ( x , y ) then
51899: LD_VAR 0 4
51903: PPUSH
51904: LD_VAR 0 5
51908: PPUSH
51909: CALL_OW 488
51913: IFFALSE 51934
// ComTurnXY ( unit , x , y ) ;
51915: LD_VAR 0 1
51919: PPUSH
51920: LD_VAR 0 4
51924: PPUSH
51925: LD_VAR 0 5
51929: PPUSH
51930: CALL_OW 118
// end ;
51934: LD_VAR 0 3
51938: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51939: LD_INT 0
51941: PPUSH
51942: PPUSH
// result := false ;
51943: LD_ADDR_VAR 0 3
51947: PUSH
51948: LD_INT 0
51950: ST_TO_ADDR
// if not units then
51951: LD_VAR 0 2
51955: NOT
51956: IFFALSE 51960
// exit ;
51958: GO 52005
// for i in units do
51960: LD_ADDR_VAR 0 4
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: FOR_IN
51971: IFFALSE 52003
// if See ( side , i ) then
51973: LD_VAR 0 1
51977: PPUSH
51978: LD_VAR 0 4
51982: PPUSH
51983: CALL_OW 292
51987: IFFALSE 52001
// begin result := true ;
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: LD_INT 1
51996: ST_TO_ADDR
// exit ;
51997: POP
51998: POP
51999: GO 52005
// end ;
52001: GO 51970
52003: POP
52004: POP
// end ;
52005: LD_VAR 0 3
52009: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52010: LD_INT 0
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
// if not unit or not points then
52016: LD_VAR 0 1
52020: NOT
52021: IFTRUE 52030
52023: PUSH
52024: LD_VAR 0 2
52028: NOT
52029: OR
52030: IFFALSE 52034
// exit ;
52032: GO 52124
// dist := 99999 ;
52034: LD_ADDR_VAR 0 5
52038: PUSH
52039: LD_INT 99999
52041: ST_TO_ADDR
// for i in points do
52042: LD_ADDR_VAR 0 4
52046: PUSH
52047: LD_VAR 0 2
52051: PUSH
52052: FOR_IN
52053: IFFALSE 52122
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52055: LD_ADDR_VAR 0 6
52059: PUSH
52060: LD_VAR 0 1
52064: PPUSH
52065: LD_VAR 0 4
52069: PUSH
52070: LD_INT 1
52072: ARRAY
52073: PPUSH
52074: LD_VAR 0 4
52078: PUSH
52079: LD_INT 2
52081: ARRAY
52082: PPUSH
52083: CALL_OW 297
52087: ST_TO_ADDR
// if tmpDist < dist then
52088: LD_VAR 0 6
52092: PUSH
52093: LD_VAR 0 5
52097: LESS
52098: IFFALSE 52120
// begin result := i ;
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: LD_VAR 0 4
52109: ST_TO_ADDR
// dist := tmpDist ;
52110: LD_ADDR_VAR 0 5
52114: PUSH
52115: LD_VAR 0 6
52119: ST_TO_ADDR
// end ; end ;
52120: GO 52052
52122: POP
52123: POP
// end ;
52124: LD_VAR 0 3
52128: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52129: LD_INT 0
52131: PPUSH
// uc_side := side ;
52132: LD_ADDR_OWVAR 20
52136: PUSH
52137: LD_VAR 0 1
52141: ST_TO_ADDR
// uc_nation := 3 ;
52142: LD_ADDR_OWVAR 21
52146: PUSH
52147: LD_INT 3
52149: ST_TO_ADDR
// vc_chassis := 25 ;
52150: LD_ADDR_OWVAR 37
52154: PUSH
52155: LD_INT 25
52157: ST_TO_ADDR
// vc_engine := engine_siberite ;
52158: LD_ADDR_OWVAR 39
52162: PUSH
52163: LD_INT 3
52165: ST_TO_ADDR
// vc_control := control_computer ;
52166: LD_ADDR_OWVAR 38
52170: PUSH
52171: LD_INT 3
52173: ST_TO_ADDR
// vc_weapon := 59 ;
52174: LD_ADDR_OWVAR 40
52178: PUSH
52179: LD_INT 59
52181: ST_TO_ADDR
// result := CreateVehicle ;
52182: LD_ADDR_VAR 0 5
52186: PUSH
52187: CALL_OW 45
52191: ST_TO_ADDR
// SetDir ( result , d ) ;
52192: LD_VAR 0 5
52196: PPUSH
52197: LD_VAR 0 4
52201: PPUSH
52202: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52206: LD_VAR 0 5
52210: PPUSH
52211: LD_VAR 0 2
52215: PPUSH
52216: LD_VAR 0 3
52220: PPUSH
52221: LD_INT 0
52223: PPUSH
52224: CALL_OW 48
// end ;
52228: LD_VAR 0 5
52232: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52233: LD_INT 0
52235: PPUSH
52236: PPUSH
52237: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52238: LD_ADDR_VAR 0 2
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52261: LD_VAR 0 1
52265: NOT
52266: IFTRUE 52299
52268: PUSH
52269: LD_VAR 0 1
52273: PPUSH
52274: CALL_OW 264
52278: PUSH
52279: LD_INT 12
52281: PUSH
52282: LD_INT 51
52284: PUSH
52285: LD_INT 32
52287: PUSH
52288: LD_INT 89
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: IN
52297: NOT
52298: OR
52299: IFFALSE 52303
// exit ;
52301: GO 52401
// for i := 1 to 3 do
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: DOUBLE
52309: LD_INT 1
52311: DEC
52312: ST_TO_ADDR
52313: LD_INT 3
52315: PUSH
52316: FOR_TO
52317: IFFALSE 52399
// begin tmp := GetCargo ( cargo , i ) ;
52319: LD_ADDR_VAR 0 4
52323: PUSH
52324: LD_VAR 0 1
52328: PPUSH
52329: LD_VAR 0 3
52333: PPUSH
52334: CALL_OW 289
52338: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52339: LD_ADDR_VAR 0 2
52343: PUSH
52344: LD_VAR 0 2
52348: PPUSH
52349: LD_VAR 0 3
52353: PPUSH
52354: LD_VAR 0 4
52358: PPUSH
52359: CALL_OW 1
52363: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52364: LD_ADDR_VAR 0 2
52368: PUSH
52369: LD_VAR 0 2
52373: PPUSH
52374: LD_INT 4
52376: PPUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_INT 4
52384: ARRAY
52385: PUSH
52386: LD_VAR 0 4
52390: PLUS
52391: PPUSH
52392: CALL_OW 1
52396: ST_TO_ADDR
// end ;
52397: GO 52316
52399: POP
52400: POP
// end ;
52401: LD_VAR 0 2
52405: RET
// export function Length ( array ) ; begin
52406: LD_INT 0
52408: PPUSH
// result := array + 0 ;
52409: LD_ADDR_VAR 0 2
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_INT 0
52421: PLUS
52422: ST_TO_ADDR
// end ;
52423: LD_VAR 0 2
52427: RET
// export function PrepareArray ( array ) ; begin
52428: LD_INT 0
52430: PPUSH
// result := array diff 0 ;
52431: LD_ADDR_VAR 0 2
52435: PUSH
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 0
52443: DIFF
52444: ST_TO_ADDR
// if not result [ 1 ] then
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: NOT
52454: IFFALSE 52474
// result := Delete ( result , 1 ) ;
52456: LD_ADDR_VAR 0 2
52460: PUSH
52461: LD_VAR 0 2
52465: PPUSH
52466: LD_INT 1
52468: PPUSH
52469: CALL_OW 3
52473: ST_TO_ADDR
// end ;
52474: LD_VAR 0 2
52478: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52479: LD_INT 0
52481: PPUSH
52482: PPUSH
52483: PPUSH
52484: PPUSH
// sibRocketRange := 25 ;
52485: LD_ADDR_VAR 0 6
52489: PUSH
52490: LD_INT 25
52492: ST_TO_ADDR
// result := false ;
52493: LD_ADDR_VAR 0 4
52497: PUSH
52498: LD_INT 0
52500: ST_TO_ADDR
// for i := 0 to 5 do
52501: LD_ADDR_VAR 0 5
52505: PUSH
52506: DOUBLE
52507: LD_INT 0
52509: DEC
52510: ST_TO_ADDR
52511: LD_INT 5
52513: PUSH
52514: FOR_TO
52515: IFFALSE 52582
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52517: LD_VAR 0 1
52521: PPUSH
52522: LD_VAR 0 5
52526: PPUSH
52527: LD_VAR 0 6
52531: PPUSH
52532: CALL_OW 272
52536: PPUSH
52537: LD_VAR 0 2
52541: PPUSH
52542: LD_VAR 0 5
52546: PPUSH
52547: LD_VAR 0 6
52551: PPUSH
52552: CALL_OW 273
52556: PPUSH
52557: LD_VAR 0 3
52561: PPUSH
52562: CALL_OW 309
52566: IFFALSE 52580
// begin result := true ;
52568: LD_ADDR_VAR 0 4
52572: PUSH
52573: LD_INT 1
52575: ST_TO_ADDR
// exit ;
52576: POP
52577: POP
52578: GO 52584
// end ;
52580: GO 52514
52582: POP
52583: POP
// end ;
52584: LD_VAR 0 4
52588: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52589: LD_INT 0
52591: PPUSH
52592: PPUSH
52593: PPUSH
// if btype = b_depot then
52594: LD_VAR 0 2
52598: PUSH
52599: LD_INT 0
52601: EQUAL
52602: IFFALSE 52614
// begin result := true ;
52604: LD_ADDR_VAR 0 3
52608: PUSH
52609: LD_INT 1
52611: ST_TO_ADDR
// exit ;
52612: GO 52734
// end ; pom := GetBase ( depot ) ;
52614: LD_ADDR_VAR 0 4
52618: PUSH
52619: LD_VAR 0 1
52623: PPUSH
52624: CALL_OW 274
52628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52629: LD_ADDR_VAR 0 5
52633: PUSH
52634: LD_VAR 0 2
52638: PPUSH
52639: LD_VAR 0 1
52643: PPUSH
52644: CALL_OW 248
52648: PPUSH
52649: CALL_OW 450
52653: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_VAR 0 4
52663: PPUSH
52664: LD_INT 1
52666: PPUSH
52667: CALL_OW 275
52671: PUSH
52672: LD_VAR 0 5
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: GREATEREQUAL
52681: IFFALSE 52707
52683: PUSH
52684: LD_VAR 0 4
52688: PPUSH
52689: LD_INT 2
52691: PPUSH
52692: CALL_OW 275
52696: PUSH
52697: LD_VAR 0 5
52701: PUSH
52702: LD_INT 2
52704: ARRAY
52705: GREATEREQUAL
52706: AND
52707: IFFALSE 52733
52709: PUSH
52710: LD_VAR 0 4
52714: PPUSH
52715: LD_INT 3
52717: PPUSH
52718: CALL_OW 275
52722: PUSH
52723: LD_VAR 0 5
52727: PUSH
52728: LD_INT 3
52730: ARRAY
52731: GREATEREQUAL
52732: AND
52733: ST_TO_ADDR
// end ;
52734: LD_VAR 0 3
52738: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52739: LD_INT 0
52741: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52742: LD_VAR 0 1
52746: PPUSH
52747: LD_VAR 0 2
52751: PPUSH
52752: LD_INT 0
52754: PPUSH
52755: LD_INT 0
52757: PPUSH
52758: LD_INT 1
52760: PPUSH
52761: LD_INT 0
52763: PPUSH
52764: CALL_OW 587
// end ;
52768: LD_VAR 0 3
52772: RET
// export function CenterOnNow ( unit ) ; begin
52773: LD_INT 0
52775: PPUSH
// result := IsInUnit ( unit ) ;
52776: LD_ADDR_VAR 0 2
52780: PUSH
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 310
52790: ST_TO_ADDR
// if not result then
52791: LD_VAR 0 2
52795: NOT
52796: IFFALSE 52808
// result := unit ;
52798: LD_ADDR_VAR 0 2
52802: PUSH
52803: LD_VAR 0 1
52807: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52808: LD_VAR 0 1
52812: PPUSH
52813: CALL_OW 87
// end ;
52817: LD_VAR 0 2
52821: RET
// export function ComMoveHex ( unit , hex ) ; begin
52822: LD_INT 0
52824: PPUSH
// if not hex then
52825: LD_VAR 0 2
52829: NOT
52830: IFFALSE 52834
// exit ;
52832: GO 52887
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52834: LD_VAR 0 2
52838: PUSH
52839: LD_INT 1
52841: ARRAY
52842: PPUSH
52843: LD_VAR 0 2
52847: PUSH
52848: LD_INT 2
52850: ARRAY
52851: PPUSH
52852: CALL_OW 428
52856: IFFALSE 52860
// exit ;
52858: GO 52887
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52860: LD_VAR 0 1
52864: PPUSH
52865: LD_VAR 0 2
52869: PUSH
52870: LD_INT 1
52872: ARRAY
52873: PPUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_INT 2
52881: ARRAY
52882: PPUSH
52883: CALL_OW 111
// end ;
52887: LD_VAR 0 3
52891: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52892: LD_INT 0
52894: PPUSH
52895: PPUSH
52896: PPUSH
// if not unit or not enemy then
52897: LD_VAR 0 1
52901: NOT
52902: IFTRUE 52911
52904: PUSH
52905: LD_VAR 0 2
52909: NOT
52910: OR
52911: IFFALSE 52915
// exit ;
52913: GO 53041
// x := GetX ( enemy ) ;
52915: LD_ADDR_VAR 0 4
52919: PUSH
52920: LD_VAR 0 2
52924: PPUSH
52925: CALL_OW 250
52929: ST_TO_ADDR
// y := GetY ( enemy ) ;
52930: LD_ADDR_VAR 0 5
52934: PUSH
52935: LD_VAR 0 2
52939: PPUSH
52940: CALL_OW 251
52944: ST_TO_ADDR
// if ValidHex ( x , y ) then
52945: LD_VAR 0 4
52949: PPUSH
52950: LD_VAR 0 5
52954: PPUSH
52955: CALL_OW 488
52959: IFFALSE 53041
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52961: LD_VAR 0 2
52965: PPUSH
52966: CALL_OW 247
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: IN
52981: IFTRUE 53004
52983: PUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 255
52993: PPUSH
52994: LD_VAR 0 2
52998: PPUSH
52999: CALL_OW 292
53003: OR
53004: IFFALSE 53022
// ComAttackUnit ( unit , enemy ) else
53006: LD_VAR 0 1
53010: PPUSH
53011: LD_VAR 0 2
53015: PPUSH
53016: CALL_OW 115
53020: GO 53041
// ComAgressiveMove ( unit , x , y ) ;
53022: LD_VAR 0 1
53026: PPUSH
53027: LD_VAR 0 4
53031: PPUSH
53032: LD_VAR 0 5
53036: PPUSH
53037: CALL_OW 114
// end ;
53041: LD_VAR 0 3
53045: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53046: LD_INT 0
53048: PPUSH
53049: PPUSH
53050: PPUSH
// list := AreaToList ( area , 0 ) ;
53051: LD_ADDR_VAR 0 5
53055: PUSH
53056: LD_VAR 0 1
53060: PPUSH
53061: LD_INT 0
53063: PPUSH
53064: CALL_OW 517
53068: ST_TO_ADDR
// if not list then
53069: LD_VAR 0 5
53073: NOT
53074: IFFALSE 53078
// exit ;
53076: GO 53208
// if all then
53078: LD_VAR 0 2
53082: IFFALSE 53170
// begin for i := 1 to list [ 1 ] do
53084: LD_ADDR_VAR 0 4
53088: PUSH
53089: DOUBLE
53090: LD_INT 1
53092: DEC
53093: ST_TO_ADDR
53094: LD_VAR 0 5
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PUSH
53103: FOR_TO
53104: IFFALSE 53166
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53106: LD_ADDR_VAR 0 3
53110: PUSH
53111: LD_VAR 0 3
53115: PPUSH
53116: LD_VAR 0 3
53120: PUSH
53121: LD_INT 1
53123: PLUS
53124: PPUSH
53125: LD_VAR 0 5
53129: PUSH
53130: LD_INT 1
53132: ARRAY
53133: PUSH
53134: LD_VAR 0 4
53138: ARRAY
53139: PUSH
53140: LD_VAR 0 5
53144: PUSH
53145: LD_INT 2
53147: ARRAY
53148: PUSH
53149: LD_VAR 0 4
53153: ARRAY
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PPUSH
53159: CALL_OW 1
53163: ST_TO_ADDR
53164: GO 53103
53166: POP
53167: POP
// exit ;
53168: GO 53208
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53170: LD_ADDR_VAR 0 3
53174: PUSH
53175: LD_VAR 0 5
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: PUSH
53184: LD_INT 1
53186: ARRAY
53187: PUSH
53188: LD_VAR 0 5
53192: PUSH
53193: LD_INT 2
53195: ARRAY
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: ST_TO_ADDR
// end ;
53208: LD_VAR 0 3
53212: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53213: LD_INT 0
53215: PPUSH
53216: PPUSH
// list := AreaToList ( area , 0 ) ;
53217: LD_ADDR_VAR 0 4
53221: PUSH
53222: LD_VAR 0 1
53226: PPUSH
53227: LD_INT 0
53229: PPUSH
53230: CALL_OW 517
53234: ST_TO_ADDR
// if not list then
53235: LD_VAR 0 4
53239: NOT
53240: IFFALSE 53244
// exit ;
53242: GO 53285
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53244: LD_ADDR_VAR 0 3
53248: PUSH
53249: LD_VAR 0 4
53253: PUSH
53254: LD_INT 1
53256: ARRAY
53257: PUSH
53258: LD_INT 1
53260: ARRAY
53261: PUSH
53262: LD_VAR 0 4
53266: PUSH
53267: LD_INT 2
53269: ARRAY
53270: PUSH
53271: LD_INT 1
53273: ARRAY
53274: PUSH
53275: LD_VAR 0 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: ST_TO_ADDR
// end ;
53285: LD_VAR 0 3
53289: RET
// export function First ( array ) ; begin
53290: LD_INT 0
53292: PPUSH
// if not array then
53293: LD_VAR 0 1
53297: NOT
53298: IFFALSE 53302
// exit ;
53300: GO 53316
// result := array [ 1 ] ;
53302: LD_ADDR_VAR 0 2
53306: PUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_INT 1
53314: ARRAY
53315: ST_TO_ADDR
// end ;
53316: LD_VAR 0 2
53320: RET
// export function Last ( array ) ; begin
53321: LD_INT 0
53323: PPUSH
// if not array then
53324: LD_VAR 0 1
53328: NOT
53329: IFFALSE 53333
// exit ;
53331: GO 53349
// result := array [ array ] ;
53333: LD_ADDR_VAR 0 2
53337: PUSH
53338: LD_VAR 0 1
53342: PUSH
53343: LD_VAR 0 1
53347: ARRAY
53348: ST_TO_ADDR
// end ;
53349: LD_VAR 0 2
53353: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53354: LD_INT 0
53356: PPUSH
53357: PPUSH
// result := [ ] ;
53358: LD_ADDR_VAR 0 5
53362: PUSH
53363: EMPTY
53364: ST_TO_ADDR
// if not array then
53365: LD_VAR 0 1
53369: NOT
53370: IFFALSE 53374
// exit ;
53372: GO 53486
// for i := 1 to array do
53374: LD_ADDR_VAR 0 6
53378: PUSH
53379: DOUBLE
53380: LD_INT 1
53382: DEC
53383: ST_TO_ADDR
53384: LD_VAR 0 1
53388: PUSH
53389: FOR_TO
53390: IFFALSE 53484
// if array [ i ] [ index ] = value then
53392: LD_VAR 0 1
53396: PUSH
53397: LD_VAR 0 6
53401: ARRAY
53402: PUSH
53403: LD_VAR 0 2
53407: ARRAY
53408: PUSH
53409: LD_VAR 0 3
53413: EQUAL
53414: IFFALSE 53482
// begin if indexColumn then
53416: LD_VAR 0 4
53420: IFFALSE 53456
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53422: LD_ADDR_VAR 0 5
53426: PUSH
53427: LD_VAR 0 5
53431: PPUSH
53432: LD_VAR 0 1
53436: PUSH
53437: LD_VAR 0 6
53441: ARRAY
53442: PUSH
53443: LD_VAR 0 4
53447: ARRAY
53448: PPUSH
53449: CALL 48494 0 2
53453: ST_TO_ADDR
53454: GO 53482
// result := Join ( result , array [ i ] ) ;
53456: LD_ADDR_VAR 0 5
53460: PUSH
53461: LD_VAR 0 5
53465: PPUSH
53466: LD_VAR 0 1
53470: PUSH
53471: LD_VAR 0 6
53475: ARRAY
53476: PPUSH
53477: CALL 48494 0 2
53481: ST_TO_ADDR
// end ;
53482: GO 53389
53484: POP
53485: POP
// end ;
53486: LD_VAR 0 5
53490: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53491: LD_INT 0
53493: PPUSH
// if not vehicles or not parkingPoint then
53494: LD_VAR 0 1
53498: NOT
53499: IFTRUE 53508
53501: PUSH
53502: LD_VAR 0 2
53506: NOT
53507: OR
53508: IFFALSE 53512
// exit ;
53510: GO 53610
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53512: LD_ADDR_VAR 0 1
53516: PUSH
53517: LD_VAR 0 1
53521: PPUSH
53522: LD_INT 50
53524: PUSH
53525: EMPTY
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 92
53533: PUSH
53534: LD_VAR 0 2
53538: PUSH
53539: LD_INT 1
53541: ARRAY
53542: PUSH
53543: LD_VAR 0 2
53547: PUSH
53548: LD_INT 2
53550: ARRAY
53551: PUSH
53552: LD_INT 8
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PPUSH
53569: CALL_OW 72
53573: ST_TO_ADDR
// if not vehicles then
53574: LD_VAR 0 1
53578: NOT
53579: IFFALSE 53583
// exit ;
53581: GO 53610
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53583: LD_VAR 0 1
53587: PPUSH
53588: LD_VAR 0 2
53592: PUSH
53593: LD_INT 1
53595: ARRAY
53596: PPUSH
53597: LD_VAR 0 2
53601: PUSH
53602: LD_INT 2
53604: ARRAY
53605: PPUSH
53606: CALL_OW 111
// end ;
53610: LD_VAR 0 3
53614: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53615: LD_INT 0
53617: PPUSH
53618: PPUSH
53619: PPUSH
// if not side or not area then
53620: LD_VAR 0 1
53624: NOT
53625: IFTRUE 53634
53627: PUSH
53628: LD_VAR 0 2
53632: NOT
53633: OR
53634: IFFALSE 53638
// exit ;
53636: GO 53757
// tmp := AreaToList ( area , 0 ) ;
53638: LD_ADDR_VAR 0 5
53642: PUSH
53643: LD_VAR 0 2
53647: PPUSH
53648: LD_INT 0
53650: PPUSH
53651: CALL_OW 517
53655: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53656: LD_ADDR_VAR 0 4
53660: PUSH
53661: DOUBLE
53662: LD_INT 1
53664: DEC
53665: ST_TO_ADDR
53666: LD_VAR 0 5
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PUSH
53675: FOR_TO
53676: IFFALSE 53755
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53678: LD_VAR 0 5
53682: PUSH
53683: LD_INT 1
53685: ARRAY
53686: PUSH
53687: LD_VAR 0 4
53691: ARRAY
53692: PPUSH
53693: LD_VAR 0 5
53697: PUSH
53698: LD_INT 2
53700: ARRAY
53701: PUSH
53702: LD_VAR 0 4
53706: ARRAY
53707: PPUSH
53708: CALL_OW 351
53712: IFFALSE 53753
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53714: LD_VAR 0 5
53718: PUSH
53719: LD_INT 1
53721: ARRAY
53722: PUSH
53723: LD_VAR 0 4
53727: ARRAY
53728: PPUSH
53729: LD_VAR 0 5
53733: PUSH
53734: LD_INT 2
53736: ARRAY
53737: PUSH
53738: LD_VAR 0 4
53742: ARRAY
53743: PPUSH
53744: LD_VAR 0 1
53748: PPUSH
53749: CALL_OW 244
// end ;
53753: GO 53675
53755: POP
53756: POP
// end ;
53757: LD_VAR 0 3
53761: RET
// export function UniqueArray ( array ) ; var i ; begin
53762: LD_INT 0
53764: PPUSH
53765: PPUSH
// result := [ ] ;
53766: LD_ADDR_VAR 0 2
53770: PUSH
53771: EMPTY
53772: ST_TO_ADDR
// if not array then
53773: LD_VAR 0 1
53777: NOT
53778: IFFALSE 53782
// exit ;
53780: GO 53843
// for i := 1 to array do
53782: LD_ADDR_VAR 0 3
53786: PUSH
53787: DOUBLE
53788: LD_INT 1
53790: DEC
53791: ST_TO_ADDR
53792: LD_VAR 0 1
53796: PUSH
53797: FOR_TO
53798: IFFALSE 53841
// if not array [ i ] in result then
53800: LD_VAR 0 1
53804: PUSH
53805: LD_VAR 0 3
53809: ARRAY
53810: PUSH
53811: LD_VAR 0 2
53815: IN
53816: NOT
53817: IFFALSE 53839
// result := Join ( result , i ) ;
53819: LD_ADDR_VAR 0 2
53823: PUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: LD_VAR 0 3
53833: PPUSH
53834: CALL 48494 0 2
53838: ST_TO_ADDR
53839: GO 53797
53841: POP
53842: POP
// end ; end_of_file end_of_file
53843: LD_VAR 0 2
53847: RET
// export globalGameSaveCounter ; every 0 0$1 do
53848: GO 53850
53850: DISABLE
// begin enable ;
53851: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53852: LD_STRING updateTimer(
53854: PUSH
53855: LD_OWVAR 1
53859: STR
53860: PUSH
53861: LD_STRING );
53863: STR
53864: PPUSH
53865: CALL_OW 559
// end ;
53869: END
// every 0 0$1 do
53870: GO 53872
53872: DISABLE
// begin globalGameSaveCounter := 0 ;
53873: LD_ADDR_EXP 37
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53881: LD_STRING setGameSaveCounter(0)
53883: PPUSH
53884: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53888: LD_STRING initStreamRollete();
53890: PPUSH
53891: CALL_OW 559
// InitStreamMode ;
53895: CALL 55240 0 0
// DefineStreamItems ( false ) ;
53899: LD_INT 0
53901: PPUSH
53902: CALL 55704 0 1
// end ;
53906: END
// export function SOS_MapStart ( ) ; begin
53907: LD_INT 0
53909: PPUSH
// if streamModeActive then
53910: LD_EXP 38
53914: IFFALSE 53923
// DefineStreamItems ( true ) ;
53916: LD_INT 1
53918: PPUSH
53919: CALL 55704 0 1
// UpdateLuaVariables ( ) ;
53923: CALL 53940 0 0
// UpdateFactoryWaypoints ( ) ;
53927: CALL 68826 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53931: CALL 69078 0 0
// end ;
53935: LD_VAR 0 1
53939: RET
// function UpdateLuaVariables ( ) ; begin
53940: LD_INT 0
53942: PPUSH
// if globalGameSaveCounter then
53943: LD_EXP 37
53947: IFFALSE 53981
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53949: LD_ADDR_EXP 37
53953: PUSH
53954: LD_EXP 37
53958: PPUSH
53959: CALL 49867 0 1
53963: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53964: LD_STRING setGameSaveCounter(
53966: PUSH
53967: LD_EXP 37
53971: STR
53972: PUSH
53973: LD_STRING )
53975: STR
53976: PPUSH
53977: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53981: LD_STRING setGameDifficulty(
53983: PUSH
53984: LD_OWVAR 67
53988: STR
53989: PUSH
53990: LD_STRING )
53992: STR
53993: PPUSH
53994: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53998: LD_STRING displayDifficulty(
54000: PUSH
54001: LD_OWVAR 67
54005: STR
54006: PUSH
54007: LD_STRING )
54009: STR
54010: PPUSH
54011: CALL_OW 559
// end ;
54015: LD_VAR 0 1
54019: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54020: LD_INT 0
54022: PPUSH
// if p2 = stream_mode then
54023: LD_VAR 0 2
54027: PUSH
54028: LD_INT 100
54030: EQUAL
54031: IFFALSE 55034
// begin if not StreamModeActive then
54033: LD_EXP 38
54037: NOT
54038: IFFALSE 54048
// StreamModeActive := true ;
54040: LD_ADDR_EXP 38
54044: PUSH
54045: LD_INT 1
54047: ST_TO_ADDR
// if p3 = 0 then
54048: LD_VAR 0 3
54052: PUSH
54053: LD_INT 0
54055: EQUAL
54056: IFFALSE 54062
// InitStreamMode ;
54058: CALL 55240 0 0
// if p3 = 1 then
54062: LD_VAR 0 3
54066: PUSH
54067: LD_INT 1
54069: EQUAL
54070: IFFALSE 54080
// sRocket := true ;
54072: LD_ADDR_EXP 43
54076: PUSH
54077: LD_INT 1
54079: ST_TO_ADDR
// if p3 = 2 then
54080: LD_VAR 0 3
54084: PUSH
54085: LD_INT 2
54087: EQUAL
54088: IFFALSE 54098
// sSpeed := true ;
54090: LD_ADDR_EXP 42
54094: PUSH
54095: LD_INT 1
54097: ST_TO_ADDR
// if p3 = 3 then
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 3
54105: EQUAL
54106: IFFALSE 54116
// sEngine := true ;
54108: LD_ADDR_EXP 44
54112: PUSH
54113: LD_INT 1
54115: ST_TO_ADDR
// if p3 = 4 then
54116: LD_VAR 0 3
54120: PUSH
54121: LD_INT 4
54123: EQUAL
54124: IFFALSE 54134
// sSpec := true ;
54126: LD_ADDR_EXP 41
54130: PUSH
54131: LD_INT 1
54133: ST_TO_ADDR
// if p3 = 5 then
54134: LD_VAR 0 3
54138: PUSH
54139: LD_INT 5
54141: EQUAL
54142: IFFALSE 54152
// sLevel := true ;
54144: LD_ADDR_EXP 45
54148: PUSH
54149: LD_INT 1
54151: ST_TO_ADDR
// if p3 = 6 then
54152: LD_VAR 0 3
54156: PUSH
54157: LD_INT 6
54159: EQUAL
54160: IFFALSE 54170
// sArmoury := true ;
54162: LD_ADDR_EXP 46
54166: PUSH
54167: LD_INT 1
54169: ST_TO_ADDR
// if p3 = 7 then
54170: LD_VAR 0 3
54174: PUSH
54175: LD_INT 7
54177: EQUAL
54178: IFFALSE 54188
// sRadar := true ;
54180: LD_ADDR_EXP 47
54184: PUSH
54185: LD_INT 1
54187: ST_TO_ADDR
// if p3 = 8 then
54188: LD_VAR 0 3
54192: PUSH
54193: LD_INT 8
54195: EQUAL
54196: IFFALSE 54206
// sBunker := true ;
54198: LD_ADDR_EXP 48
54202: PUSH
54203: LD_INT 1
54205: ST_TO_ADDR
// if p3 = 9 then
54206: LD_VAR 0 3
54210: PUSH
54211: LD_INT 9
54213: EQUAL
54214: IFFALSE 54224
// sHack := true ;
54216: LD_ADDR_EXP 49
54220: PUSH
54221: LD_INT 1
54223: ST_TO_ADDR
// if p3 = 10 then
54224: LD_VAR 0 3
54228: PUSH
54229: LD_INT 10
54231: EQUAL
54232: IFFALSE 54242
// sFire := true ;
54234: LD_ADDR_EXP 50
54238: PUSH
54239: LD_INT 1
54241: ST_TO_ADDR
// if p3 = 11 then
54242: LD_VAR 0 3
54246: PUSH
54247: LD_INT 11
54249: EQUAL
54250: IFFALSE 54260
// sRefresh := true ;
54252: LD_ADDR_EXP 51
54256: PUSH
54257: LD_INT 1
54259: ST_TO_ADDR
// if p3 = 12 then
54260: LD_VAR 0 3
54264: PUSH
54265: LD_INT 12
54267: EQUAL
54268: IFFALSE 54278
// sExp := true ;
54270: LD_ADDR_EXP 52
54274: PUSH
54275: LD_INT 1
54277: ST_TO_ADDR
// if p3 = 13 then
54278: LD_VAR 0 3
54282: PUSH
54283: LD_INT 13
54285: EQUAL
54286: IFFALSE 54296
// sDepot := true ;
54288: LD_ADDR_EXP 53
54292: PUSH
54293: LD_INT 1
54295: ST_TO_ADDR
// if p3 = 14 then
54296: LD_VAR 0 3
54300: PUSH
54301: LD_INT 14
54303: EQUAL
54304: IFFALSE 54314
// sFlag := true ;
54306: LD_ADDR_EXP 54
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// if p3 = 15 then
54314: LD_VAR 0 3
54318: PUSH
54319: LD_INT 15
54321: EQUAL
54322: IFFALSE 54332
// sKamikadze := true ;
54324: LD_ADDR_EXP 62
54328: PUSH
54329: LD_INT 1
54331: ST_TO_ADDR
// if p3 = 16 then
54332: LD_VAR 0 3
54336: PUSH
54337: LD_INT 16
54339: EQUAL
54340: IFFALSE 54350
// sTroll := true ;
54342: LD_ADDR_EXP 63
54346: PUSH
54347: LD_INT 1
54349: ST_TO_ADDR
// if p3 = 17 then
54350: LD_VAR 0 3
54354: PUSH
54355: LD_INT 17
54357: EQUAL
54358: IFFALSE 54368
// sSlow := true ;
54360: LD_ADDR_EXP 64
54364: PUSH
54365: LD_INT 1
54367: ST_TO_ADDR
// if p3 = 18 then
54368: LD_VAR 0 3
54372: PUSH
54373: LD_INT 18
54375: EQUAL
54376: IFFALSE 54386
// sLack := true ;
54378: LD_ADDR_EXP 65
54382: PUSH
54383: LD_INT 1
54385: ST_TO_ADDR
// if p3 = 19 then
54386: LD_VAR 0 3
54390: PUSH
54391: LD_INT 19
54393: EQUAL
54394: IFFALSE 54404
// sTank := true ;
54396: LD_ADDR_EXP 67
54400: PUSH
54401: LD_INT 1
54403: ST_TO_ADDR
// if p3 = 20 then
54404: LD_VAR 0 3
54408: PUSH
54409: LD_INT 20
54411: EQUAL
54412: IFFALSE 54422
// sRemote := true ;
54414: LD_ADDR_EXP 68
54418: PUSH
54419: LD_INT 1
54421: ST_TO_ADDR
// if p3 = 21 then
54422: LD_VAR 0 3
54426: PUSH
54427: LD_INT 21
54429: EQUAL
54430: IFFALSE 54440
// sPowell := true ;
54432: LD_ADDR_EXP 69
54436: PUSH
54437: LD_INT 1
54439: ST_TO_ADDR
// if p3 = 22 then
54440: LD_VAR 0 3
54444: PUSH
54445: LD_INT 22
54447: EQUAL
54448: IFFALSE 54458
// sTeleport := true ;
54450: LD_ADDR_EXP 72
54454: PUSH
54455: LD_INT 1
54457: ST_TO_ADDR
// if p3 = 23 then
54458: LD_VAR 0 3
54462: PUSH
54463: LD_INT 23
54465: EQUAL
54466: IFFALSE 54476
// sOilTower := true ;
54468: LD_ADDR_EXP 74
54472: PUSH
54473: LD_INT 1
54475: ST_TO_ADDR
// if p3 = 24 then
54476: LD_VAR 0 3
54480: PUSH
54481: LD_INT 24
54483: EQUAL
54484: IFFALSE 54494
// sShovel := true ;
54486: LD_ADDR_EXP 75
54490: PUSH
54491: LD_INT 1
54493: ST_TO_ADDR
// if p3 = 25 then
54494: LD_VAR 0 3
54498: PUSH
54499: LD_INT 25
54501: EQUAL
54502: IFFALSE 54512
// sSheik := true ;
54504: LD_ADDR_EXP 76
54508: PUSH
54509: LD_INT 1
54511: ST_TO_ADDR
// if p3 = 26 then
54512: LD_VAR 0 3
54516: PUSH
54517: LD_INT 26
54519: EQUAL
54520: IFFALSE 54530
// sEarthquake := true ;
54522: LD_ADDR_EXP 78
54526: PUSH
54527: LD_INT 1
54529: ST_TO_ADDR
// if p3 = 27 then
54530: LD_VAR 0 3
54534: PUSH
54535: LD_INT 27
54537: EQUAL
54538: IFFALSE 54548
// sAI := true ;
54540: LD_ADDR_EXP 79
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// if p3 = 28 then
54548: LD_VAR 0 3
54552: PUSH
54553: LD_INT 28
54555: EQUAL
54556: IFFALSE 54566
// sCargo := true ;
54558: LD_ADDR_EXP 82
54562: PUSH
54563: LD_INT 1
54565: ST_TO_ADDR
// if p3 = 29 then
54566: LD_VAR 0 3
54570: PUSH
54571: LD_INT 29
54573: EQUAL
54574: IFFALSE 54584
// sDLaser := true ;
54576: LD_ADDR_EXP 83
54580: PUSH
54581: LD_INT 1
54583: ST_TO_ADDR
// if p3 = 30 then
54584: LD_VAR 0 3
54588: PUSH
54589: LD_INT 30
54591: EQUAL
54592: IFFALSE 54602
// sExchange := true ;
54594: LD_ADDR_EXP 84
54598: PUSH
54599: LD_INT 1
54601: ST_TO_ADDR
// if p3 = 31 then
54602: LD_VAR 0 3
54606: PUSH
54607: LD_INT 31
54609: EQUAL
54610: IFFALSE 54620
// sFac := true ;
54612: LD_ADDR_EXP 85
54616: PUSH
54617: LD_INT 1
54619: ST_TO_ADDR
// if p3 = 32 then
54620: LD_VAR 0 3
54624: PUSH
54625: LD_INT 32
54627: EQUAL
54628: IFFALSE 54638
// sPower := true ;
54630: LD_ADDR_EXP 86
54634: PUSH
54635: LD_INT 1
54637: ST_TO_ADDR
// if p3 = 33 then
54638: LD_VAR 0 3
54642: PUSH
54643: LD_INT 33
54645: EQUAL
54646: IFFALSE 54656
// sRandom := true ;
54648: LD_ADDR_EXP 87
54652: PUSH
54653: LD_INT 1
54655: ST_TO_ADDR
// if p3 = 34 then
54656: LD_VAR 0 3
54660: PUSH
54661: LD_INT 34
54663: EQUAL
54664: IFFALSE 54674
// sShield := true ;
54666: LD_ADDR_EXP 88
54670: PUSH
54671: LD_INT 1
54673: ST_TO_ADDR
// if p3 = 35 then
54674: LD_VAR 0 3
54678: PUSH
54679: LD_INT 35
54681: EQUAL
54682: IFFALSE 54692
// sTime := true ;
54684: LD_ADDR_EXP 89
54688: PUSH
54689: LD_INT 1
54691: ST_TO_ADDR
// if p3 = 36 then
54692: LD_VAR 0 3
54696: PUSH
54697: LD_INT 36
54699: EQUAL
54700: IFFALSE 54710
// sTools := true ;
54702: LD_ADDR_EXP 90
54706: PUSH
54707: LD_INT 1
54709: ST_TO_ADDR
// if p3 = 101 then
54710: LD_VAR 0 3
54714: PUSH
54715: LD_INT 101
54717: EQUAL
54718: IFFALSE 54728
// sSold := true ;
54720: LD_ADDR_EXP 55
54724: PUSH
54725: LD_INT 1
54727: ST_TO_ADDR
// if p3 = 102 then
54728: LD_VAR 0 3
54732: PUSH
54733: LD_INT 102
54735: EQUAL
54736: IFFALSE 54746
// sDiff := true ;
54738: LD_ADDR_EXP 56
54742: PUSH
54743: LD_INT 1
54745: ST_TO_ADDR
// if p3 = 103 then
54746: LD_VAR 0 3
54750: PUSH
54751: LD_INT 103
54753: EQUAL
54754: IFFALSE 54764
// sFog := true ;
54756: LD_ADDR_EXP 59
54760: PUSH
54761: LD_INT 1
54763: ST_TO_ADDR
// if p3 = 104 then
54764: LD_VAR 0 3
54768: PUSH
54769: LD_INT 104
54771: EQUAL
54772: IFFALSE 54782
// sReset := true ;
54774: LD_ADDR_EXP 60
54778: PUSH
54779: LD_INT 1
54781: ST_TO_ADDR
// if p3 = 105 then
54782: LD_VAR 0 3
54786: PUSH
54787: LD_INT 105
54789: EQUAL
54790: IFFALSE 54800
// sSun := true ;
54792: LD_ADDR_EXP 61
54796: PUSH
54797: LD_INT 1
54799: ST_TO_ADDR
// if p3 = 106 then
54800: LD_VAR 0 3
54804: PUSH
54805: LD_INT 106
54807: EQUAL
54808: IFFALSE 54818
// sTiger := true ;
54810: LD_ADDR_EXP 57
54814: PUSH
54815: LD_INT 1
54817: ST_TO_ADDR
// if p3 = 107 then
54818: LD_VAR 0 3
54822: PUSH
54823: LD_INT 107
54825: EQUAL
54826: IFFALSE 54836
// sBomb := true ;
54828: LD_ADDR_EXP 58
54832: PUSH
54833: LD_INT 1
54835: ST_TO_ADDR
// if p3 = 108 then
54836: LD_VAR 0 3
54840: PUSH
54841: LD_INT 108
54843: EQUAL
54844: IFFALSE 54854
// sWound := true ;
54846: LD_ADDR_EXP 66
54850: PUSH
54851: LD_INT 1
54853: ST_TO_ADDR
// if p3 = 109 then
54854: LD_VAR 0 3
54858: PUSH
54859: LD_INT 109
54861: EQUAL
54862: IFFALSE 54872
// sBetray := true ;
54864: LD_ADDR_EXP 70
54868: PUSH
54869: LD_INT 1
54871: ST_TO_ADDR
// if p3 = 110 then
54872: LD_VAR 0 3
54876: PUSH
54877: LD_INT 110
54879: EQUAL
54880: IFFALSE 54890
// sContamin := true ;
54882: LD_ADDR_EXP 71
54886: PUSH
54887: LD_INT 1
54889: ST_TO_ADDR
// if p3 = 111 then
54890: LD_VAR 0 3
54894: PUSH
54895: LD_INT 111
54897: EQUAL
54898: IFFALSE 54908
// sOil := true ;
54900: LD_ADDR_EXP 73
54904: PUSH
54905: LD_INT 1
54907: ST_TO_ADDR
// if p3 = 112 then
54908: LD_VAR 0 3
54912: PUSH
54913: LD_INT 112
54915: EQUAL
54916: IFFALSE 54926
// sStu := true ;
54918: LD_ADDR_EXP 77
54922: PUSH
54923: LD_INT 1
54925: ST_TO_ADDR
// if p3 = 113 then
54926: LD_VAR 0 3
54930: PUSH
54931: LD_INT 113
54933: EQUAL
54934: IFFALSE 54944
// sBazooka := true ;
54936: LD_ADDR_EXP 80
54940: PUSH
54941: LD_INT 1
54943: ST_TO_ADDR
// if p3 = 114 then
54944: LD_VAR 0 3
54948: PUSH
54949: LD_INT 114
54951: EQUAL
54952: IFFALSE 54962
// sMortar := true ;
54954: LD_ADDR_EXP 81
54958: PUSH
54959: LD_INT 1
54961: ST_TO_ADDR
// if p3 = 115 then
54962: LD_VAR 0 3
54966: PUSH
54967: LD_INT 115
54969: EQUAL
54970: IFFALSE 54980
// sRanger := true ;
54972: LD_ADDR_EXP 91
54976: PUSH
54977: LD_INT 1
54979: ST_TO_ADDR
// if p3 = 116 then
54980: LD_VAR 0 3
54984: PUSH
54985: LD_INT 116
54987: EQUAL
54988: IFFALSE 54998
// sComputer := true ;
54990: LD_ADDR_EXP 92
54994: PUSH
54995: LD_INT 1
54997: ST_TO_ADDR
// if p3 = 117 then
54998: LD_VAR 0 3
55002: PUSH
55003: LD_INT 117
55005: EQUAL
55006: IFFALSE 55016
// s30 := true ;
55008: LD_ADDR_EXP 93
55012: PUSH
55013: LD_INT 1
55015: ST_TO_ADDR
// if p3 = 118 then
55016: LD_VAR 0 3
55020: PUSH
55021: LD_INT 118
55023: EQUAL
55024: IFFALSE 55034
// s60 := true ;
55026: LD_ADDR_EXP 94
55030: PUSH
55031: LD_INT 1
55033: ST_TO_ADDR
// end ; if p2 = hack_mode then
55034: LD_VAR 0 2
55038: PUSH
55039: LD_INT 101
55041: EQUAL
55042: IFFALSE 55170
// begin case p3 of 1 :
55044: LD_VAR 0 3
55048: PUSH
55049: LD_INT 1
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55057
55055: GO 55064
55057: POP
// hHackUnlimitedResources ; 2 :
55058: CALL 67433 0 0
55062: GO 55170
55064: LD_INT 2
55066: DOUBLE
55067: EQUAL
55068: IFTRUE 55072
55070: GO 55079
55072: POP
// hHackSetLevel10 ; 3 :
55073: CALL 67566 0 0
55077: GO 55170
55079: LD_INT 3
55081: DOUBLE
55082: EQUAL
55083: IFTRUE 55087
55085: GO 55094
55087: POP
// hHackSetLevel10YourUnits ; 4 :
55088: CALL 67651 0 0
55092: GO 55170
55094: LD_INT 4
55096: DOUBLE
55097: EQUAL
55098: IFTRUE 55102
55100: GO 55109
55102: POP
// hHackInvincible ; 5 :
55103: CALL 68099 0 0
55107: GO 55170
55109: LD_INT 5
55111: DOUBLE
55112: EQUAL
55113: IFTRUE 55117
55115: GO 55124
55117: POP
// hHackInvisible ; 6 :
55118: CALL 68210 0 0
55122: GO 55170
55124: LD_INT 6
55126: DOUBLE
55127: EQUAL
55128: IFTRUE 55132
55130: GO 55139
55132: POP
// hHackChangeYourSide ; 7 :
55133: CALL 68267 0 0
55137: GO 55170
55139: LD_INT 7
55141: DOUBLE
55142: EQUAL
55143: IFTRUE 55147
55145: GO 55154
55147: POP
// hHackChangeUnitSide ; 8 :
55148: CALL 68309 0 0
55152: GO 55170
55154: LD_INT 8
55156: DOUBLE
55157: EQUAL
55158: IFTRUE 55162
55160: GO 55169
55162: POP
// hHackFog ; end ;
55163: CALL 68410 0 0
55167: GO 55170
55169: POP
// end ; if p2 = game_save_mode then
55170: LD_VAR 0 2
55174: PUSH
55175: LD_INT 102
55177: EQUAL
55178: IFFALSE 55235
// begin if p3 = 1 then
55180: LD_VAR 0 3
55184: PUSH
55185: LD_INT 1
55187: EQUAL
55188: IFFALSE 55200
// globalGameSaveCounter := p4 ;
55190: LD_ADDR_EXP 37
55194: PUSH
55195: LD_VAR 0 4
55199: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
55200: LD_VAR 0 3
55204: PUSH
55205: LD_INT 2
55207: EQUAL
55208: IFFALSE 55216
55210: PUSH
55211: LD_EXP 37
55215: AND
55216: IFFALSE 55235
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
55218: LD_STRING setGameSaveCounter(
55220: PUSH
55221: LD_EXP 37
55225: STR
55226: PUSH
55227: LD_STRING )
55229: STR
55230: PPUSH
55231: CALL_OW 559
// end ; end ;
55235: LD_VAR 0 7
55239: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
55240: LD_INT 0
55242: PPUSH
// streamModeActive := false ;
55243: LD_ADDR_EXP 38
55247: PUSH
55248: LD_INT 0
55250: ST_TO_ADDR
// normalCounter := 36 ;
55251: LD_ADDR_EXP 39
55255: PUSH
55256: LD_INT 36
55258: ST_TO_ADDR
// hardcoreCounter := 18 ;
55259: LD_ADDR_EXP 40
55263: PUSH
55264: LD_INT 18
55266: ST_TO_ADDR
// sRocket := false ;
55267: LD_ADDR_EXP 43
55271: PUSH
55272: LD_INT 0
55274: ST_TO_ADDR
// sSpeed := false ;
55275: LD_ADDR_EXP 42
55279: PUSH
55280: LD_INT 0
55282: ST_TO_ADDR
// sEngine := false ;
55283: LD_ADDR_EXP 44
55287: PUSH
55288: LD_INT 0
55290: ST_TO_ADDR
// sSpec := false ;
55291: LD_ADDR_EXP 41
55295: PUSH
55296: LD_INT 0
55298: ST_TO_ADDR
// sLevel := false ;
55299: LD_ADDR_EXP 45
55303: PUSH
55304: LD_INT 0
55306: ST_TO_ADDR
// sArmoury := false ;
55307: LD_ADDR_EXP 46
55311: PUSH
55312: LD_INT 0
55314: ST_TO_ADDR
// sRadar := false ;
55315: LD_ADDR_EXP 47
55319: PUSH
55320: LD_INT 0
55322: ST_TO_ADDR
// sBunker := false ;
55323: LD_ADDR_EXP 48
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// sHack := false ;
55331: LD_ADDR_EXP 49
55335: PUSH
55336: LD_INT 0
55338: ST_TO_ADDR
// sFire := false ;
55339: LD_ADDR_EXP 50
55343: PUSH
55344: LD_INT 0
55346: ST_TO_ADDR
// sRefresh := false ;
55347: LD_ADDR_EXP 51
55351: PUSH
55352: LD_INT 0
55354: ST_TO_ADDR
// sExp := false ;
55355: LD_ADDR_EXP 52
55359: PUSH
55360: LD_INT 0
55362: ST_TO_ADDR
// sDepot := false ;
55363: LD_ADDR_EXP 53
55367: PUSH
55368: LD_INT 0
55370: ST_TO_ADDR
// sFlag := false ;
55371: LD_ADDR_EXP 54
55375: PUSH
55376: LD_INT 0
55378: ST_TO_ADDR
// sKamikadze := false ;
55379: LD_ADDR_EXP 62
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
// sTroll := false ;
55387: LD_ADDR_EXP 63
55391: PUSH
55392: LD_INT 0
55394: ST_TO_ADDR
// sSlow := false ;
55395: LD_ADDR_EXP 64
55399: PUSH
55400: LD_INT 0
55402: ST_TO_ADDR
// sLack := false ;
55403: LD_ADDR_EXP 65
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
// sTank := false ;
55411: LD_ADDR_EXP 67
55415: PUSH
55416: LD_INT 0
55418: ST_TO_ADDR
// sRemote := false ;
55419: LD_ADDR_EXP 68
55423: PUSH
55424: LD_INT 0
55426: ST_TO_ADDR
// sPowell := false ;
55427: LD_ADDR_EXP 69
55431: PUSH
55432: LD_INT 0
55434: ST_TO_ADDR
// sTeleport := false ;
55435: LD_ADDR_EXP 72
55439: PUSH
55440: LD_INT 0
55442: ST_TO_ADDR
// sOilTower := false ;
55443: LD_ADDR_EXP 74
55447: PUSH
55448: LD_INT 0
55450: ST_TO_ADDR
// sShovel := false ;
55451: LD_ADDR_EXP 75
55455: PUSH
55456: LD_INT 0
55458: ST_TO_ADDR
// sSheik := false ;
55459: LD_ADDR_EXP 76
55463: PUSH
55464: LD_INT 0
55466: ST_TO_ADDR
// sEarthquake := false ;
55467: LD_ADDR_EXP 78
55471: PUSH
55472: LD_INT 0
55474: ST_TO_ADDR
// sAI := false ;
55475: LD_ADDR_EXP 79
55479: PUSH
55480: LD_INT 0
55482: ST_TO_ADDR
// sCargo := false ;
55483: LD_ADDR_EXP 82
55487: PUSH
55488: LD_INT 0
55490: ST_TO_ADDR
// sDLaser := false ;
55491: LD_ADDR_EXP 83
55495: PUSH
55496: LD_INT 0
55498: ST_TO_ADDR
// sExchange := false ;
55499: LD_ADDR_EXP 84
55503: PUSH
55504: LD_INT 0
55506: ST_TO_ADDR
// sFac := false ;
55507: LD_ADDR_EXP 85
55511: PUSH
55512: LD_INT 0
55514: ST_TO_ADDR
// sPower := false ;
55515: LD_ADDR_EXP 86
55519: PUSH
55520: LD_INT 0
55522: ST_TO_ADDR
// sRandom := false ;
55523: LD_ADDR_EXP 87
55527: PUSH
55528: LD_INT 0
55530: ST_TO_ADDR
// sShield := false ;
55531: LD_ADDR_EXP 88
55535: PUSH
55536: LD_INT 0
55538: ST_TO_ADDR
// sTime := false ;
55539: LD_ADDR_EXP 89
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
// sTools := false ;
55547: LD_ADDR_EXP 90
55551: PUSH
55552: LD_INT 0
55554: ST_TO_ADDR
// sSold := false ;
55555: LD_ADDR_EXP 55
55559: PUSH
55560: LD_INT 0
55562: ST_TO_ADDR
// sDiff := false ;
55563: LD_ADDR_EXP 56
55567: PUSH
55568: LD_INT 0
55570: ST_TO_ADDR
// sFog := false ;
55571: LD_ADDR_EXP 59
55575: PUSH
55576: LD_INT 0
55578: ST_TO_ADDR
// sReset := false ;
55579: LD_ADDR_EXP 60
55583: PUSH
55584: LD_INT 0
55586: ST_TO_ADDR
// sSun := false ;
55587: LD_ADDR_EXP 61
55591: PUSH
55592: LD_INT 0
55594: ST_TO_ADDR
// sTiger := false ;
55595: LD_ADDR_EXP 57
55599: PUSH
55600: LD_INT 0
55602: ST_TO_ADDR
// sBomb := false ;
55603: LD_ADDR_EXP 58
55607: PUSH
55608: LD_INT 0
55610: ST_TO_ADDR
// sWound := false ;
55611: LD_ADDR_EXP 66
55615: PUSH
55616: LD_INT 0
55618: ST_TO_ADDR
// sBetray := false ;
55619: LD_ADDR_EXP 70
55623: PUSH
55624: LD_INT 0
55626: ST_TO_ADDR
// sContamin := false ;
55627: LD_ADDR_EXP 71
55631: PUSH
55632: LD_INT 0
55634: ST_TO_ADDR
// sOil := false ;
55635: LD_ADDR_EXP 73
55639: PUSH
55640: LD_INT 0
55642: ST_TO_ADDR
// sStu := false ;
55643: LD_ADDR_EXP 77
55647: PUSH
55648: LD_INT 0
55650: ST_TO_ADDR
// sBazooka := false ;
55651: LD_ADDR_EXP 80
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// sMortar := false ;
55659: LD_ADDR_EXP 81
55663: PUSH
55664: LD_INT 0
55666: ST_TO_ADDR
// sRanger := false ;
55667: LD_ADDR_EXP 91
55671: PUSH
55672: LD_INT 0
55674: ST_TO_ADDR
// sComputer := false ;
55675: LD_ADDR_EXP 92
55679: PUSH
55680: LD_INT 0
55682: ST_TO_ADDR
// s30 := false ;
55683: LD_ADDR_EXP 93
55687: PUSH
55688: LD_INT 0
55690: ST_TO_ADDR
// s60 := false ;
55691: LD_ADDR_EXP 94
55695: PUSH
55696: LD_INT 0
55698: ST_TO_ADDR
// end ;
55699: LD_VAR 0 1
55703: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55704: LD_INT 0
55706: PPUSH
55707: PPUSH
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
// result := [ ] ;
55713: LD_ADDR_VAR 0 2
55717: PUSH
55718: EMPTY
55719: ST_TO_ADDR
// if campaign_id = 1 then
55720: LD_OWVAR 69
55724: PUSH
55725: LD_INT 1
55727: EQUAL
55728: IFFALSE 58894
// begin case mission_number of 1 :
55730: LD_OWVAR 70
55734: PUSH
55735: LD_INT 1
55737: DOUBLE
55738: EQUAL
55739: IFTRUE 55743
55741: GO 55819
55743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55744: LD_ADDR_VAR 0 2
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: LD_INT 11
55757: PUSH
55758: LD_INT 12
55760: PUSH
55761: LD_INT 15
55763: PUSH
55764: LD_INT 16
55766: PUSH
55767: LD_INT 22
55769: PUSH
55770: LD_INT 23
55772: PUSH
55773: LD_INT 26
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 101
55789: PUSH
55790: LD_INT 102
55792: PUSH
55793: LD_INT 106
55795: PUSH
55796: LD_INT 116
55798: PUSH
55799: LD_INT 117
55801: PUSH
55802: LD_INT 118
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: ST_TO_ADDR
55817: GO 58892
55819: LD_INT 2
55821: DOUBLE
55822: EQUAL
55823: IFTRUE 55827
55825: GO 55911
55827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55828: LD_ADDR_VAR 0 2
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: LD_INT 11
55841: PUSH
55842: LD_INT 12
55844: PUSH
55845: LD_INT 15
55847: PUSH
55848: LD_INT 16
55850: PUSH
55851: LD_INT 22
55853: PUSH
55854: LD_INT 23
55856: PUSH
55857: LD_INT 26
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 101
55873: PUSH
55874: LD_INT 102
55876: PUSH
55877: LD_INT 105
55879: PUSH
55880: LD_INT 106
55882: PUSH
55883: LD_INT 108
55885: PUSH
55886: LD_INT 116
55888: PUSH
55889: LD_INT 117
55891: PUSH
55892: LD_INT 118
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: ST_TO_ADDR
55909: GO 58892
55911: LD_INT 3
55913: DOUBLE
55914: EQUAL
55915: IFTRUE 55919
55917: GO 56007
55919: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55920: LD_ADDR_VAR 0 2
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 4
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: LD_INT 11
55936: PUSH
55937: LD_INT 12
55939: PUSH
55940: LD_INT 15
55942: PUSH
55943: LD_INT 16
55945: PUSH
55946: LD_INT 22
55948: PUSH
55949: LD_INT 26
55951: PUSH
55952: LD_INT 36
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 101
55969: PUSH
55970: LD_INT 102
55972: PUSH
55973: LD_INT 105
55975: PUSH
55976: LD_INT 106
55978: PUSH
55979: LD_INT 108
55981: PUSH
55982: LD_INT 116
55984: PUSH
55985: LD_INT 117
55987: PUSH
55988: LD_INT 118
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: ST_TO_ADDR
56005: GO 58892
56007: LD_INT 4
56009: DOUBLE
56010: EQUAL
56011: IFTRUE 56015
56013: GO 56111
56015: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: LD_INT 8
56032: PUSH
56033: LD_INT 11
56035: PUSH
56036: LD_INT 12
56038: PUSH
56039: LD_INT 15
56041: PUSH
56042: LD_INT 16
56044: PUSH
56045: LD_INT 22
56047: PUSH
56048: LD_INT 23
56050: PUSH
56051: LD_INT 26
56053: PUSH
56054: LD_INT 36
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 101
56073: PUSH
56074: LD_INT 102
56076: PUSH
56077: LD_INT 105
56079: PUSH
56080: LD_INT 106
56082: PUSH
56083: LD_INT 108
56085: PUSH
56086: LD_INT 116
56088: PUSH
56089: LD_INT 117
56091: PUSH
56092: LD_INT 118
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: ST_TO_ADDR
56109: GO 58892
56111: LD_INT 5
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56119
56117: GO 56231
56119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
56120: LD_ADDR_VAR 0 2
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 4
56130: PUSH
56131: LD_INT 5
56133: PUSH
56134: LD_INT 6
56136: PUSH
56137: LD_INT 8
56139: PUSH
56140: LD_INT 11
56142: PUSH
56143: LD_INT 12
56145: PUSH
56146: LD_INT 15
56148: PUSH
56149: LD_INT 16
56151: PUSH
56152: LD_INT 22
56154: PUSH
56155: LD_INT 23
56157: PUSH
56158: LD_INT 25
56160: PUSH
56161: LD_INT 26
56163: PUSH
56164: LD_INT 36
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 101
56185: PUSH
56186: LD_INT 102
56188: PUSH
56189: LD_INT 105
56191: PUSH
56192: LD_INT 106
56194: PUSH
56195: LD_INT 108
56197: PUSH
56198: LD_INT 109
56200: PUSH
56201: LD_INT 112
56203: PUSH
56204: LD_INT 116
56206: PUSH
56207: LD_INT 117
56209: PUSH
56210: LD_INT 118
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: ST_TO_ADDR
56229: GO 58892
56231: LD_INT 6
56233: DOUBLE
56234: EQUAL
56235: IFTRUE 56239
56237: GO 56371
56239: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
56240: LD_ADDR_VAR 0 2
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: LD_INT 6
56256: PUSH
56257: LD_INT 8
56259: PUSH
56260: LD_INT 11
56262: PUSH
56263: LD_INT 12
56265: PUSH
56266: LD_INT 15
56268: PUSH
56269: LD_INT 16
56271: PUSH
56272: LD_INT 20
56274: PUSH
56275: LD_INT 21
56277: PUSH
56278: LD_INT 22
56280: PUSH
56281: LD_INT 23
56283: PUSH
56284: LD_INT 25
56286: PUSH
56287: LD_INT 26
56289: PUSH
56290: LD_INT 30
56292: PUSH
56293: LD_INT 31
56295: PUSH
56296: LD_INT 32
56298: PUSH
56299: LD_INT 36
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 101
56325: PUSH
56326: LD_INT 102
56328: PUSH
56329: LD_INT 105
56331: PUSH
56332: LD_INT 106
56334: PUSH
56335: LD_INT 108
56337: PUSH
56338: LD_INT 109
56340: PUSH
56341: LD_INT 112
56343: PUSH
56344: LD_INT 116
56346: PUSH
56347: LD_INT 117
56349: PUSH
56350: LD_INT 118
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: ST_TO_ADDR
56369: GO 58892
56371: LD_INT 7
56373: DOUBLE
56374: EQUAL
56375: IFTRUE 56379
56377: GO 56491
56379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56380: LD_ADDR_VAR 0 2
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 4
56390: PUSH
56391: LD_INT 5
56393: PUSH
56394: LD_INT 7
56396: PUSH
56397: LD_INT 11
56399: PUSH
56400: LD_INT 12
56402: PUSH
56403: LD_INT 15
56405: PUSH
56406: LD_INT 16
56408: PUSH
56409: LD_INT 20
56411: PUSH
56412: LD_INT 21
56414: PUSH
56415: LD_INT 22
56417: PUSH
56418: LD_INT 23
56420: PUSH
56421: LD_INT 25
56423: PUSH
56424: LD_INT 26
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 101
56445: PUSH
56446: LD_INT 102
56448: PUSH
56449: LD_INT 103
56451: PUSH
56452: LD_INT 105
56454: PUSH
56455: LD_INT 106
56457: PUSH
56458: LD_INT 108
56460: PUSH
56461: LD_INT 112
56463: PUSH
56464: LD_INT 116
56466: PUSH
56467: LD_INT 117
56469: PUSH
56470: LD_INT 118
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: ST_TO_ADDR
56489: GO 58892
56491: LD_INT 8
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56499
56497: GO 56639
56499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56500: LD_ADDR_VAR 0 2
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: LD_INT 6
56516: PUSH
56517: LD_INT 7
56519: PUSH
56520: LD_INT 8
56522: PUSH
56523: LD_INT 11
56525: PUSH
56526: LD_INT 12
56528: PUSH
56529: LD_INT 15
56531: PUSH
56532: LD_INT 16
56534: PUSH
56535: LD_INT 20
56537: PUSH
56538: LD_INT 21
56540: PUSH
56541: LD_INT 22
56543: PUSH
56544: LD_INT 23
56546: PUSH
56547: LD_INT 25
56549: PUSH
56550: LD_INT 26
56552: PUSH
56553: LD_INT 30
56555: PUSH
56556: LD_INT 31
56558: PUSH
56559: LD_INT 32
56561: PUSH
56562: LD_INT 36
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 101
56589: PUSH
56590: LD_INT 102
56592: PUSH
56593: LD_INT 103
56595: PUSH
56596: LD_INT 105
56598: PUSH
56599: LD_INT 106
56601: PUSH
56602: LD_INT 108
56604: PUSH
56605: LD_INT 109
56607: PUSH
56608: LD_INT 112
56610: PUSH
56611: LD_INT 116
56613: PUSH
56614: LD_INT 117
56616: PUSH
56617: LD_INT 118
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: ST_TO_ADDR
56637: GO 58892
56639: LD_INT 9
56641: DOUBLE
56642: EQUAL
56643: IFTRUE 56647
56645: GO 56795
56647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56648: LD_ADDR_VAR 0 2
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: LD_INT 6
56664: PUSH
56665: LD_INT 7
56667: PUSH
56668: LD_INT 8
56670: PUSH
56671: LD_INT 11
56673: PUSH
56674: LD_INT 12
56676: PUSH
56677: LD_INT 15
56679: PUSH
56680: LD_INT 16
56682: PUSH
56683: LD_INT 20
56685: PUSH
56686: LD_INT 21
56688: PUSH
56689: LD_INT 22
56691: PUSH
56692: LD_INT 23
56694: PUSH
56695: LD_INT 25
56697: PUSH
56698: LD_INT 26
56700: PUSH
56701: LD_INT 28
56703: PUSH
56704: LD_INT 30
56706: PUSH
56707: LD_INT 31
56709: PUSH
56710: LD_INT 32
56712: PUSH
56713: LD_INT 36
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 101
56741: PUSH
56742: LD_INT 102
56744: PUSH
56745: LD_INT 103
56747: PUSH
56748: LD_INT 105
56750: PUSH
56751: LD_INT 106
56753: PUSH
56754: LD_INT 108
56756: PUSH
56757: LD_INT 109
56759: PUSH
56760: LD_INT 112
56762: PUSH
56763: LD_INT 114
56765: PUSH
56766: LD_INT 116
56768: PUSH
56769: LD_INT 117
56771: PUSH
56772: LD_INT 118
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: ST_TO_ADDR
56793: GO 58892
56795: LD_INT 10
56797: DOUBLE
56798: EQUAL
56799: IFTRUE 56803
56801: GO 56999
56803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56804: LD_ADDR_VAR 0 2
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 4
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 6
56820: PUSH
56821: LD_INT 7
56823: PUSH
56824: LD_INT 8
56826: PUSH
56827: LD_INT 9
56829: PUSH
56830: LD_INT 10
56832: PUSH
56833: LD_INT 11
56835: PUSH
56836: LD_INT 12
56838: PUSH
56839: LD_INT 13
56841: PUSH
56842: LD_INT 14
56844: PUSH
56845: LD_INT 15
56847: PUSH
56848: LD_INT 16
56850: PUSH
56851: LD_INT 17
56853: PUSH
56854: LD_INT 18
56856: PUSH
56857: LD_INT 19
56859: PUSH
56860: LD_INT 20
56862: PUSH
56863: LD_INT 21
56865: PUSH
56866: LD_INT 22
56868: PUSH
56869: LD_INT 23
56871: PUSH
56872: LD_INT 24
56874: PUSH
56875: LD_INT 25
56877: PUSH
56878: LD_INT 26
56880: PUSH
56881: LD_INT 28
56883: PUSH
56884: LD_INT 30
56886: PUSH
56887: LD_INT 31
56889: PUSH
56890: LD_INT 32
56892: PUSH
56893: LD_INT 36
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 101
56929: PUSH
56930: LD_INT 102
56932: PUSH
56933: LD_INT 103
56935: PUSH
56936: LD_INT 104
56938: PUSH
56939: LD_INT 105
56941: PUSH
56942: LD_INT 106
56944: PUSH
56945: LD_INT 107
56947: PUSH
56948: LD_INT 108
56950: PUSH
56951: LD_INT 109
56953: PUSH
56954: LD_INT 110
56956: PUSH
56957: LD_INT 111
56959: PUSH
56960: LD_INT 112
56962: PUSH
56963: LD_INT 114
56965: PUSH
56966: LD_INT 116
56968: PUSH
56969: LD_INT 117
56971: PUSH
56972: LD_INT 118
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: ST_TO_ADDR
56997: GO 58892
56999: LD_INT 11
57001: DOUBLE
57002: EQUAL
57003: IFTRUE 57007
57005: GO 57211
57007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
57008: LD_ADDR_VAR 0 2
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 5
57024: PUSH
57025: LD_INT 6
57027: PUSH
57028: LD_INT 7
57030: PUSH
57031: LD_INT 8
57033: PUSH
57034: LD_INT 9
57036: PUSH
57037: LD_INT 10
57039: PUSH
57040: LD_INT 11
57042: PUSH
57043: LD_INT 12
57045: PUSH
57046: LD_INT 13
57048: PUSH
57049: LD_INT 14
57051: PUSH
57052: LD_INT 15
57054: PUSH
57055: LD_INT 16
57057: PUSH
57058: LD_INT 17
57060: PUSH
57061: LD_INT 18
57063: PUSH
57064: LD_INT 19
57066: PUSH
57067: LD_INT 20
57069: PUSH
57070: LD_INT 21
57072: PUSH
57073: LD_INT 22
57075: PUSH
57076: LD_INT 23
57078: PUSH
57079: LD_INT 24
57081: PUSH
57082: LD_INT 25
57084: PUSH
57085: LD_INT 26
57087: PUSH
57088: LD_INT 28
57090: PUSH
57091: LD_INT 30
57093: PUSH
57094: LD_INT 31
57096: PUSH
57097: LD_INT 32
57099: PUSH
57100: LD_INT 34
57102: PUSH
57103: LD_INT 36
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 101
57141: PUSH
57142: LD_INT 102
57144: PUSH
57145: LD_INT 103
57147: PUSH
57148: LD_INT 104
57150: PUSH
57151: LD_INT 105
57153: PUSH
57154: LD_INT 106
57156: PUSH
57157: LD_INT 107
57159: PUSH
57160: LD_INT 108
57162: PUSH
57163: LD_INT 109
57165: PUSH
57166: LD_INT 110
57168: PUSH
57169: LD_INT 111
57171: PUSH
57172: LD_INT 112
57174: PUSH
57175: LD_INT 114
57177: PUSH
57178: LD_INT 116
57180: PUSH
57181: LD_INT 117
57183: PUSH
57184: LD_INT 118
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: ST_TO_ADDR
57209: GO 58892
57211: LD_INT 12
57213: DOUBLE
57214: EQUAL
57215: IFTRUE 57219
57217: GO 57439
57219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
57220: LD_ADDR_VAR 0 2
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: LD_INT 6
57242: PUSH
57243: LD_INT 7
57245: PUSH
57246: LD_INT 8
57248: PUSH
57249: LD_INT 9
57251: PUSH
57252: LD_INT 10
57254: PUSH
57255: LD_INT 11
57257: PUSH
57258: LD_INT 12
57260: PUSH
57261: LD_INT 13
57263: PUSH
57264: LD_INT 14
57266: PUSH
57267: LD_INT 15
57269: PUSH
57270: LD_INT 16
57272: PUSH
57273: LD_INT 17
57275: PUSH
57276: LD_INT 18
57278: PUSH
57279: LD_INT 19
57281: PUSH
57282: LD_INT 20
57284: PUSH
57285: LD_INT 21
57287: PUSH
57288: LD_INT 22
57290: PUSH
57291: LD_INT 23
57293: PUSH
57294: LD_INT 24
57296: PUSH
57297: LD_INT 25
57299: PUSH
57300: LD_INT 26
57302: PUSH
57303: LD_INT 27
57305: PUSH
57306: LD_INT 28
57308: PUSH
57309: LD_INT 30
57311: PUSH
57312: LD_INT 31
57314: PUSH
57315: LD_INT 32
57317: PUSH
57318: LD_INT 33
57320: PUSH
57321: LD_INT 34
57323: PUSH
57324: LD_INT 36
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 101
57365: PUSH
57366: LD_INT 102
57368: PUSH
57369: LD_INT 103
57371: PUSH
57372: LD_INT 104
57374: PUSH
57375: LD_INT 105
57377: PUSH
57378: LD_INT 106
57380: PUSH
57381: LD_INT 107
57383: PUSH
57384: LD_INT 108
57386: PUSH
57387: LD_INT 109
57389: PUSH
57390: LD_INT 110
57392: PUSH
57393: LD_INT 111
57395: PUSH
57396: LD_INT 112
57398: PUSH
57399: LD_INT 113
57401: PUSH
57402: LD_INT 114
57404: PUSH
57405: LD_INT 116
57407: PUSH
57408: LD_INT 117
57410: PUSH
57411: LD_INT 118
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: ST_TO_ADDR
57437: GO 58892
57439: LD_INT 13
57441: DOUBLE
57442: EQUAL
57443: IFTRUE 57447
57445: GO 57655
57447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57448: LD_ADDR_VAR 0 2
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: LD_INT 8
57470: PUSH
57471: LD_INT 9
57473: PUSH
57474: LD_INT 10
57476: PUSH
57477: LD_INT 11
57479: PUSH
57480: LD_INT 12
57482: PUSH
57483: LD_INT 14
57485: PUSH
57486: LD_INT 15
57488: PUSH
57489: LD_INT 16
57491: PUSH
57492: LD_INT 17
57494: PUSH
57495: LD_INT 18
57497: PUSH
57498: LD_INT 19
57500: PUSH
57501: LD_INT 20
57503: PUSH
57504: LD_INT 21
57506: PUSH
57507: LD_INT 22
57509: PUSH
57510: LD_INT 23
57512: PUSH
57513: LD_INT 24
57515: PUSH
57516: LD_INT 25
57518: PUSH
57519: LD_INT 26
57521: PUSH
57522: LD_INT 27
57524: PUSH
57525: LD_INT 28
57527: PUSH
57528: LD_INT 30
57530: PUSH
57531: LD_INT 31
57533: PUSH
57534: LD_INT 32
57536: PUSH
57537: LD_INT 33
57539: PUSH
57540: LD_INT 34
57542: PUSH
57543: LD_INT 36
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 101
57581: PUSH
57582: LD_INT 102
57584: PUSH
57585: LD_INT 103
57587: PUSH
57588: LD_INT 104
57590: PUSH
57591: LD_INT 105
57593: PUSH
57594: LD_INT 106
57596: PUSH
57597: LD_INT 107
57599: PUSH
57600: LD_INT 108
57602: PUSH
57603: LD_INT 109
57605: PUSH
57606: LD_INT 110
57608: PUSH
57609: LD_INT 111
57611: PUSH
57612: LD_INT 112
57614: PUSH
57615: LD_INT 113
57617: PUSH
57618: LD_INT 114
57620: PUSH
57621: LD_INT 116
57623: PUSH
57624: LD_INT 117
57626: PUSH
57627: LD_INT 118
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: ST_TO_ADDR
57653: GO 58892
57655: LD_INT 14
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57663
57661: GO 57887
57663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57664: LD_ADDR_VAR 0 2
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: LD_INT 5
57683: PUSH
57684: LD_INT 6
57686: PUSH
57687: LD_INT 7
57689: PUSH
57690: LD_INT 8
57692: PUSH
57693: LD_INT 9
57695: PUSH
57696: LD_INT 10
57698: PUSH
57699: LD_INT 11
57701: PUSH
57702: LD_INT 12
57704: PUSH
57705: LD_INT 13
57707: PUSH
57708: LD_INT 14
57710: PUSH
57711: LD_INT 15
57713: PUSH
57714: LD_INT 16
57716: PUSH
57717: LD_INT 17
57719: PUSH
57720: LD_INT 18
57722: PUSH
57723: LD_INT 19
57725: PUSH
57726: LD_INT 20
57728: PUSH
57729: LD_INT 21
57731: PUSH
57732: LD_INT 22
57734: PUSH
57735: LD_INT 23
57737: PUSH
57738: LD_INT 24
57740: PUSH
57741: LD_INT 25
57743: PUSH
57744: LD_INT 26
57746: PUSH
57747: LD_INT 27
57749: PUSH
57750: LD_INT 28
57752: PUSH
57753: LD_INT 29
57755: PUSH
57756: LD_INT 30
57758: PUSH
57759: LD_INT 31
57761: PUSH
57762: LD_INT 32
57764: PUSH
57765: LD_INT 33
57767: PUSH
57768: LD_INT 34
57770: PUSH
57771: LD_INT 36
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 101
57813: PUSH
57814: LD_INT 102
57816: PUSH
57817: LD_INT 103
57819: PUSH
57820: LD_INT 104
57822: PUSH
57823: LD_INT 105
57825: PUSH
57826: LD_INT 106
57828: PUSH
57829: LD_INT 107
57831: PUSH
57832: LD_INT 108
57834: PUSH
57835: LD_INT 109
57837: PUSH
57838: LD_INT 110
57840: PUSH
57841: LD_INT 111
57843: PUSH
57844: LD_INT 112
57846: PUSH
57847: LD_INT 113
57849: PUSH
57850: LD_INT 114
57852: PUSH
57853: LD_INT 116
57855: PUSH
57856: LD_INT 117
57858: PUSH
57859: LD_INT 118
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: ST_TO_ADDR
57885: GO 58892
57887: LD_INT 15
57889: DOUBLE
57890: EQUAL
57891: IFTRUE 57895
57893: GO 58119
57895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57896: LD_ADDR_VAR 0 2
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: LD_INT 5
57915: PUSH
57916: LD_INT 6
57918: PUSH
57919: LD_INT 7
57921: PUSH
57922: LD_INT 8
57924: PUSH
57925: LD_INT 9
57927: PUSH
57928: LD_INT 10
57930: PUSH
57931: LD_INT 11
57933: PUSH
57934: LD_INT 12
57936: PUSH
57937: LD_INT 13
57939: PUSH
57940: LD_INT 14
57942: PUSH
57943: LD_INT 15
57945: PUSH
57946: LD_INT 16
57948: PUSH
57949: LD_INT 17
57951: PUSH
57952: LD_INT 18
57954: PUSH
57955: LD_INT 19
57957: PUSH
57958: LD_INT 20
57960: PUSH
57961: LD_INT 21
57963: PUSH
57964: LD_INT 22
57966: PUSH
57967: LD_INT 23
57969: PUSH
57970: LD_INT 24
57972: PUSH
57973: LD_INT 25
57975: PUSH
57976: LD_INT 26
57978: PUSH
57979: LD_INT 27
57981: PUSH
57982: LD_INT 28
57984: PUSH
57985: LD_INT 29
57987: PUSH
57988: LD_INT 30
57990: PUSH
57991: LD_INT 31
57993: PUSH
57994: LD_INT 32
57996: PUSH
57997: LD_INT 33
57999: PUSH
58000: LD_INT 34
58002: PUSH
58003: LD_INT 36
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 101
58045: PUSH
58046: LD_INT 102
58048: PUSH
58049: LD_INT 103
58051: PUSH
58052: LD_INT 104
58054: PUSH
58055: LD_INT 105
58057: PUSH
58058: LD_INT 106
58060: PUSH
58061: LD_INT 107
58063: PUSH
58064: LD_INT 108
58066: PUSH
58067: LD_INT 109
58069: PUSH
58070: LD_INT 110
58072: PUSH
58073: LD_INT 111
58075: PUSH
58076: LD_INT 112
58078: PUSH
58079: LD_INT 113
58081: PUSH
58082: LD_INT 114
58084: PUSH
58085: LD_INT 116
58087: PUSH
58088: LD_INT 117
58090: PUSH
58091: LD_INT 118
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: ST_TO_ADDR
58117: GO 58892
58119: LD_INT 16
58121: DOUBLE
58122: EQUAL
58123: IFTRUE 58127
58125: GO 58263
58127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
58128: LD_ADDR_VAR 0 2
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: LD_INT 7
58144: PUSH
58145: LD_INT 11
58147: PUSH
58148: LD_INT 12
58150: PUSH
58151: LD_INT 15
58153: PUSH
58154: LD_INT 16
58156: PUSH
58157: LD_INT 20
58159: PUSH
58160: LD_INT 21
58162: PUSH
58163: LD_INT 22
58165: PUSH
58166: LD_INT 23
58168: PUSH
58169: LD_INT 25
58171: PUSH
58172: LD_INT 26
58174: PUSH
58175: LD_INT 30
58177: PUSH
58178: LD_INT 31
58180: PUSH
58181: LD_INT 32
58183: PUSH
58184: LD_INT 33
58186: PUSH
58187: LD_INT 34
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 101
58213: PUSH
58214: LD_INT 102
58216: PUSH
58217: LD_INT 103
58219: PUSH
58220: LD_INT 106
58222: PUSH
58223: LD_INT 108
58225: PUSH
58226: LD_INT 112
58228: PUSH
58229: LD_INT 113
58231: PUSH
58232: LD_INT 114
58234: PUSH
58235: LD_INT 116
58237: PUSH
58238: LD_INT 117
58240: PUSH
58241: LD_INT 118
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: ST_TO_ADDR
58261: GO 58892
58263: LD_INT 17
58265: DOUBLE
58266: EQUAL
58267: IFTRUE 58271
58269: GO 58495
58271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
58272: LD_ADDR_VAR 0 2
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: LD_INT 4
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: LD_INT 6
58294: PUSH
58295: LD_INT 7
58297: PUSH
58298: LD_INT 8
58300: PUSH
58301: LD_INT 9
58303: PUSH
58304: LD_INT 10
58306: PUSH
58307: LD_INT 11
58309: PUSH
58310: LD_INT 12
58312: PUSH
58313: LD_INT 13
58315: PUSH
58316: LD_INT 14
58318: PUSH
58319: LD_INT 15
58321: PUSH
58322: LD_INT 16
58324: PUSH
58325: LD_INT 17
58327: PUSH
58328: LD_INT 18
58330: PUSH
58331: LD_INT 19
58333: PUSH
58334: LD_INT 20
58336: PUSH
58337: LD_INT 21
58339: PUSH
58340: LD_INT 22
58342: PUSH
58343: LD_INT 23
58345: PUSH
58346: LD_INT 24
58348: PUSH
58349: LD_INT 25
58351: PUSH
58352: LD_INT 26
58354: PUSH
58355: LD_INT 27
58357: PUSH
58358: LD_INT 28
58360: PUSH
58361: LD_INT 29
58363: PUSH
58364: LD_INT 30
58366: PUSH
58367: LD_INT 31
58369: PUSH
58370: LD_INT 32
58372: PUSH
58373: LD_INT 33
58375: PUSH
58376: LD_INT 34
58378: PUSH
58379: LD_INT 36
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 101
58421: PUSH
58422: LD_INT 102
58424: PUSH
58425: LD_INT 103
58427: PUSH
58428: LD_INT 104
58430: PUSH
58431: LD_INT 105
58433: PUSH
58434: LD_INT 106
58436: PUSH
58437: LD_INT 107
58439: PUSH
58440: LD_INT 108
58442: PUSH
58443: LD_INT 109
58445: PUSH
58446: LD_INT 110
58448: PUSH
58449: LD_INT 111
58451: PUSH
58452: LD_INT 112
58454: PUSH
58455: LD_INT 113
58457: PUSH
58458: LD_INT 114
58460: PUSH
58461: LD_INT 116
58463: PUSH
58464: LD_INT 117
58466: PUSH
58467: LD_INT 118
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: ST_TO_ADDR
58493: GO 58892
58495: LD_INT 18
58497: DOUBLE
58498: EQUAL
58499: IFTRUE 58503
58501: GO 58651
58503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58504: LD_ADDR_VAR 0 2
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: LD_INT 5
58517: PUSH
58518: LD_INT 7
58520: PUSH
58521: LD_INT 11
58523: PUSH
58524: LD_INT 12
58526: PUSH
58527: LD_INT 15
58529: PUSH
58530: LD_INT 16
58532: PUSH
58533: LD_INT 20
58535: PUSH
58536: LD_INT 21
58538: PUSH
58539: LD_INT 22
58541: PUSH
58542: LD_INT 23
58544: PUSH
58545: LD_INT 25
58547: PUSH
58548: LD_INT 26
58550: PUSH
58551: LD_INT 30
58553: PUSH
58554: LD_INT 31
58556: PUSH
58557: LD_INT 32
58559: PUSH
58560: LD_INT 33
58562: PUSH
58563: LD_INT 34
58565: PUSH
58566: LD_INT 35
58568: PUSH
58569: LD_INT 36
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 101
58597: PUSH
58598: LD_INT 102
58600: PUSH
58601: LD_INT 103
58603: PUSH
58604: LD_INT 106
58606: PUSH
58607: LD_INT 108
58609: PUSH
58610: LD_INT 112
58612: PUSH
58613: LD_INT 113
58615: PUSH
58616: LD_INT 114
58618: PUSH
58619: LD_INT 115
58621: PUSH
58622: LD_INT 116
58624: PUSH
58625: LD_INT 117
58627: PUSH
58628: LD_INT 118
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: ST_TO_ADDR
58649: GO 58892
58651: LD_INT 19
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 58891
58659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58660: LD_ADDR_VAR 0 2
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: LD_INT 4
58676: PUSH
58677: LD_INT 5
58679: PUSH
58680: LD_INT 6
58682: PUSH
58683: LD_INT 7
58685: PUSH
58686: LD_INT 8
58688: PUSH
58689: LD_INT 9
58691: PUSH
58692: LD_INT 10
58694: PUSH
58695: LD_INT 11
58697: PUSH
58698: LD_INT 12
58700: PUSH
58701: LD_INT 13
58703: PUSH
58704: LD_INT 14
58706: PUSH
58707: LD_INT 15
58709: PUSH
58710: LD_INT 16
58712: PUSH
58713: LD_INT 17
58715: PUSH
58716: LD_INT 18
58718: PUSH
58719: LD_INT 19
58721: PUSH
58722: LD_INT 20
58724: PUSH
58725: LD_INT 21
58727: PUSH
58728: LD_INT 22
58730: PUSH
58731: LD_INT 23
58733: PUSH
58734: LD_INT 24
58736: PUSH
58737: LD_INT 25
58739: PUSH
58740: LD_INT 26
58742: PUSH
58743: LD_INT 27
58745: PUSH
58746: LD_INT 28
58748: PUSH
58749: LD_INT 29
58751: PUSH
58752: LD_INT 30
58754: PUSH
58755: LD_INT 31
58757: PUSH
58758: LD_INT 32
58760: PUSH
58761: LD_INT 33
58763: PUSH
58764: LD_INT 34
58766: PUSH
58767: LD_INT 35
58769: PUSH
58770: LD_INT 36
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 101
58813: PUSH
58814: LD_INT 102
58816: PUSH
58817: LD_INT 103
58819: PUSH
58820: LD_INT 104
58822: PUSH
58823: LD_INT 105
58825: PUSH
58826: LD_INT 106
58828: PUSH
58829: LD_INT 107
58831: PUSH
58832: LD_INT 108
58834: PUSH
58835: LD_INT 109
58837: PUSH
58838: LD_INT 110
58840: PUSH
58841: LD_INT 111
58843: PUSH
58844: LD_INT 112
58846: PUSH
58847: LD_INT 113
58849: PUSH
58850: LD_INT 114
58852: PUSH
58853: LD_INT 115
58855: PUSH
58856: LD_INT 116
58858: PUSH
58859: LD_INT 117
58861: PUSH
58862: LD_INT 118
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: ST_TO_ADDR
58889: GO 58892
58891: POP
// end else
58892: GO 59123
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: LD_INT 5
58913: PUSH
58914: LD_INT 6
58916: PUSH
58917: LD_INT 7
58919: PUSH
58920: LD_INT 8
58922: PUSH
58923: LD_INT 9
58925: PUSH
58926: LD_INT 10
58928: PUSH
58929: LD_INT 11
58931: PUSH
58932: LD_INT 12
58934: PUSH
58935: LD_INT 13
58937: PUSH
58938: LD_INT 14
58940: PUSH
58941: LD_INT 15
58943: PUSH
58944: LD_INT 16
58946: PUSH
58947: LD_INT 17
58949: PUSH
58950: LD_INT 18
58952: PUSH
58953: LD_INT 19
58955: PUSH
58956: LD_INT 20
58958: PUSH
58959: LD_INT 21
58961: PUSH
58962: LD_INT 22
58964: PUSH
58965: LD_INT 23
58967: PUSH
58968: LD_INT 24
58970: PUSH
58971: LD_INT 25
58973: PUSH
58974: LD_INT 26
58976: PUSH
58977: LD_INT 27
58979: PUSH
58980: LD_INT 28
58982: PUSH
58983: LD_INT 29
58985: PUSH
58986: LD_INT 30
58988: PUSH
58989: LD_INT 31
58991: PUSH
58992: LD_INT 32
58994: PUSH
58995: LD_INT 33
58997: PUSH
58998: LD_INT 34
59000: PUSH
59001: LD_INT 35
59003: PUSH
59004: LD_INT 36
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 101
59047: PUSH
59048: LD_INT 102
59050: PUSH
59051: LD_INT 103
59053: PUSH
59054: LD_INT 104
59056: PUSH
59057: LD_INT 105
59059: PUSH
59060: LD_INT 106
59062: PUSH
59063: LD_INT 107
59065: PUSH
59066: LD_INT 108
59068: PUSH
59069: LD_INT 109
59071: PUSH
59072: LD_INT 110
59074: PUSH
59075: LD_INT 111
59077: PUSH
59078: LD_INT 112
59080: PUSH
59081: LD_INT 113
59083: PUSH
59084: LD_INT 114
59086: PUSH
59087: LD_INT 115
59089: PUSH
59090: LD_INT 116
59092: PUSH
59093: LD_INT 117
59095: PUSH
59096: LD_INT 118
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// if result then
59123: LD_VAR 0 2
59127: IFFALSE 59913
// begin normal :=  ;
59129: LD_ADDR_VAR 0 5
59133: PUSH
59134: LD_STRING 
59136: ST_TO_ADDR
// hardcore :=  ;
59137: LD_ADDR_VAR 0 6
59141: PUSH
59142: LD_STRING 
59144: ST_TO_ADDR
// active :=  ;
59145: LD_ADDR_VAR 0 7
59149: PUSH
59150: LD_STRING 
59152: ST_TO_ADDR
// for i = 1 to normalCounter do
59153: LD_ADDR_VAR 0 8
59157: PUSH
59158: DOUBLE
59159: LD_INT 1
59161: DEC
59162: ST_TO_ADDR
59163: LD_EXP 39
59167: PUSH
59168: FOR_TO
59169: IFFALSE 59270
// begin tmp := 0 ;
59171: LD_ADDR_VAR 0 3
59175: PUSH
59176: LD_STRING 0
59178: ST_TO_ADDR
// if result [ 1 ] then
59179: LD_VAR 0 2
59183: PUSH
59184: LD_INT 1
59186: ARRAY
59187: IFFALSE 59252
// if result [ 1 ] [ 1 ] = i then
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PUSH
59198: LD_INT 1
59200: ARRAY
59201: PUSH
59202: LD_VAR 0 8
59206: EQUAL
59207: IFFALSE 59252
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
59209: LD_ADDR_VAR 0 2
59213: PUSH
59214: LD_VAR 0 2
59218: PPUSH
59219: LD_INT 1
59221: PPUSH
59222: LD_VAR 0 2
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PPUSH
59231: LD_INT 1
59233: PPUSH
59234: CALL_OW 3
59238: PPUSH
59239: CALL_OW 1
59243: ST_TO_ADDR
// tmp := 1 ;
59244: LD_ADDR_VAR 0 3
59248: PUSH
59249: LD_STRING 1
59251: ST_TO_ADDR
// end ; normal := normal & tmp ;
59252: LD_ADDR_VAR 0 5
59256: PUSH
59257: LD_VAR 0 5
59261: PUSH
59262: LD_VAR 0 3
59266: STR
59267: ST_TO_ADDR
// end ;
59268: GO 59168
59270: POP
59271: POP
// for i = 1 to hardcoreCounter do
59272: LD_ADDR_VAR 0 8
59276: PUSH
59277: DOUBLE
59278: LD_INT 1
59280: DEC
59281: ST_TO_ADDR
59282: LD_EXP 40
59286: PUSH
59287: FOR_TO
59288: IFFALSE 59393
// begin tmp := 0 ;
59290: LD_ADDR_VAR 0 3
59294: PUSH
59295: LD_STRING 0
59297: ST_TO_ADDR
// if result [ 2 ] then
59298: LD_VAR 0 2
59302: PUSH
59303: LD_INT 2
59305: ARRAY
59306: IFFALSE 59375
// if result [ 2 ] [ 1 ] = 100 + i then
59308: LD_VAR 0 2
59312: PUSH
59313: LD_INT 2
59315: ARRAY
59316: PUSH
59317: LD_INT 1
59319: ARRAY
59320: PUSH
59321: LD_INT 100
59323: PUSH
59324: LD_VAR 0 8
59328: PLUS
59329: EQUAL
59330: IFFALSE 59375
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
59332: LD_ADDR_VAR 0 2
59336: PUSH
59337: LD_VAR 0 2
59341: PPUSH
59342: LD_INT 2
59344: PPUSH
59345: LD_VAR 0 2
59349: PUSH
59350: LD_INT 2
59352: ARRAY
59353: PPUSH
59354: LD_INT 1
59356: PPUSH
59357: CALL_OW 3
59361: PPUSH
59362: CALL_OW 1
59366: ST_TO_ADDR
// tmp := 1 ;
59367: LD_ADDR_VAR 0 3
59371: PUSH
59372: LD_STRING 1
59374: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59375: LD_ADDR_VAR 0 6
59379: PUSH
59380: LD_VAR 0 6
59384: PUSH
59385: LD_VAR 0 3
59389: STR
59390: ST_TO_ADDR
// end ;
59391: GO 59287
59393: POP
59394: POP
// if isGameLoad then
59395: LD_VAR 0 1
59399: IFFALSE 59874
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59401: LD_ADDR_VAR 0 4
59405: PUSH
59406: LD_EXP 43
59410: PUSH
59411: LD_EXP 42
59415: PUSH
59416: LD_EXP 44
59420: PUSH
59421: LD_EXP 41
59425: PUSH
59426: LD_EXP 45
59430: PUSH
59431: LD_EXP 46
59435: PUSH
59436: LD_EXP 47
59440: PUSH
59441: LD_EXP 48
59445: PUSH
59446: LD_EXP 49
59450: PUSH
59451: LD_EXP 50
59455: PUSH
59456: LD_EXP 51
59460: PUSH
59461: LD_EXP 52
59465: PUSH
59466: LD_EXP 53
59470: PUSH
59471: LD_EXP 54
59475: PUSH
59476: LD_EXP 62
59480: PUSH
59481: LD_EXP 63
59485: PUSH
59486: LD_EXP 64
59490: PUSH
59491: LD_EXP 65
59495: PUSH
59496: LD_EXP 67
59500: PUSH
59501: LD_EXP 68
59505: PUSH
59506: LD_EXP 69
59510: PUSH
59511: LD_EXP 72
59515: PUSH
59516: LD_EXP 74
59520: PUSH
59521: LD_EXP 75
59525: PUSH
59526: LD_EXP 76
59530: PUSH
59531: LD_EXP 78
59535: PUSH
59536: LD_EXP 79
59540: PUSH
59541: LD_EXP 82
59545: PUSH
59546: LD_EXP 83
59550: PUSH
59551: LD_EXP 84
59555: PUSH
59556: LD_EXP 85
59560: PUSH
59561: LD_EXP 86
59565: PUSH
59566: LD_EXP 87
59570: PUSH
59571: LD_EXP 88
59575: PUSH
59576: LD_EXP 89
59580: PUSH
59581: LD_EXP 90
59585: PUSH
59586: LD_EXP 55
59590: PUSH
59591: LD_EXP 56
59595: PUSH
59596: LD_EXP 59
59600: PUSH
59601: LD_EXP 60
59605: PUSH
59606: LD_EXP 61
59610: PUSH
59611: LD_EXP 57
59615: PUSH
59616: LD_EXP 58
59620: PUSH
59621: LD_EXP 66
59625: PUSH
59626: LD_EXP 70
59630: PUSH
59631: LD_EXP 71
59635: PUSH
59636: LD_EXP 73
59640: PUSH
59641: LD_EXP 77
59645: PUSH
59646: LD_EXP 80
59650: PUSH
59651: LD_EXP 81
59655: PUSH
59656: LD_EXP 91
59660: PUSH
59661: LD_EXP 92
59665: PUSH
59666: LD_EXP 93
59670: PUSH
59671: LD_EXP 94
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: ST_TO_ADDR
// tmp :=  ;
59732: LD_ADDR_VAR 0 3
59736: PUSH
59737: LD_STRING 
59739: ST_TO_ADDR
// for i = 1 to normalCounter do
59740: LD_ADDR_VAR 0 8
59744: PUSH
59745: DOUBLE
59746: LD_INT 1
59748: DEC
59749: ST_TO_ADDR
59750: LD_EXP 39
59754: PUSH
59755: FOR_TO
59756: IFFALSE 59792
// begin if flags [ i ] then
59758: LD_VAR 0 4
59762: PUSH
59763: LD_VAR 0 8
59767: ARRAY
59768: IFFALSE 59790
// tmp := tmp & i & ; ;
59770: LD_ADDR_VAR 0 3
59774: PUSH
59775: LD_VAR 0 3
59779: PUSH
59780: LD_VAR 0 8
59784: STR
59785: PUSH
59786: LD_STRING ;
59788: STR
59789: ST_TO_ADDR
// end ;
59790: GO 59755
59792: POP
59793: POP
// for i = 1 to hardcoreCounter do
59794: LD_ADDR_VAR 0 8
59798: PUSH
59799: DOUBLE
59800: LD_INT 1
59802: DEC
59803: ST_TO_ADDR
59804: LD_EXP 40
59808: PUSH
59809: FOR_TO
59810: IFFALSE 59856
// begin if flags [ normalCounter + i ] then
59812: LD_VAR 0 4
59816: PUSH
59817: LD_EXP 39
59821: PUSH
59822: LD_VAR 0 8
59826: PLUS
59827: ARRAY
59828: IFFALSE 59854
// tmp := tmp & ( 100 + i ) & ; ;
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_VAR 0 3
59839: PUSH
59840: LD_INT 100
59842: PUSH
59843: LD_VAR 0 8
59847: PLUS
59848: STR
59849: PUSH
59850: LD_STRING ;
59852: STR
59853: ST_TO_ADDR
// end ;
59854: GO 59809
59856: POP
59857: POP
// if tmp then
59858: LD_VAR 0 3
59862: IFFALSE 59874
// active := tmp ;
59864: LD_ADDR_VAR 0 7
59868: PUSH
59869: LD_VAR 0 3
59873: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59874: LD_STRING getStreamItemsFromMission("
59876: PUSH
59877: LD_VAR 0 5
59881: STR
59882: PUSH
59883: LD_STRING ","
59885: STR
59886: PUSH
59887: LD_VAR 0 6
59891: STR
59892: PUSH
59893: LD_STRING ","
59895: STR
59896: PUSH
59897: LD_VAR 0 7
59901: STR
59902: PUSH
59903: LD_STRING ")
59905: STR
59906: PPUSH
59907: CALL_OW 559
// end else
59911: GO 59920
// ToLua ( getStreamItemsFromMission("","","") ) ;
59913: LD_STRING getStreamItemsFromMission("","","")
59915: PPUSH
59916: CALL_OW 559
// end ;
59920: LD_VAR 0 2
59924: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59925: LD_EXP 38
59929: IFFALSE 59937
59931: PUSH
59932: LD_EXP 43
59936: AND
59937: IFFALSE 60061
59939: GO 59941
59941: DISABLE
59942: LD_INT 0
59944: PPUSH
59945: PPUSH
// begin enable ;
59946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59947: LD_ADDR_VAR 0 2
59951: PUSH
59952: LD_INT 22
59954: PUSH
59955: LD_OWVAR 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 34
59969: PUSH
59970: LD_INT 7
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 34
59979: PUSH
59980: LD_INT 45
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 34
59989: PUSH
59990: LD_INT 28
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 34
59999: PUSH
60000: LD_INT 47
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PPUSH
60018: CALL_OW 69
60022: ST_TO_ADDR
// if not tmp then
60023: LD_VAR 0 2
60027: NOT
60028: IFFALSE 60032
// exit ;
60030: GO 60061
// for i in tmp do
60032: LD_ADDR_VAR 0 1
60036: PUSH
60037: LD_VAR 0 2
60041: PUSH
60042: FOR_IN
60043: IFFALSE 60059
// begin SetLives ( i , 0 ) ;
60045: LD_VAR 0 1
60049: PPUSH
60050: LD_INT 0
60052: PPUSH
60053: CALL_OW 234
// end ;
60057: GO 60042
60059: POP
60060: POP
// end ;
60061: PPOPN 2
60063: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
60064: LD_EXP 38
60068: IFFALSE 60076
60070: PUSH
60071: LD_EXP 44
60075: AND
60076: IFFALSE 60160
60078: GO 60080
60080: DISABLE
60081: LD_INT 0
60083: PPUSH
60084: PPUSH
// begin enable ;
60085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
60086: LD_ADDR_VAR 0 2
60090: PUSH
60091: LD_INT 22
60093: PUSH
60094: LD_OWVAR 2
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 32
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PPUSH
60117: CALL_OW 69
60121: ST_TO_ADDR
// if not tmp then
60122: LD_VAR 0 2
60126: NOT
60127: IFFALSE 60131
// exit ;
60129: GO 60160
// for i in tmp do
60131: LD_ADDR_VAR 0 1
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: FOR_IN
60142: IFFALSE 60158
// begin SetLives ( i , 0 ) ;
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_INT 0
60151: PPUSH
60152: CALL_OW 234
// end ;
60156: GO 60141
60158: POP
60159: POP
// end ;
60160: PPOPN 2
60162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
60163: LD_EXP 38
60167: IFFALSE 60175
60169: PUSH
60170: LD_EXP 41
60174: AND
60175: IFFALSE 60268
60177: GO 60179
60179: DISABLE
60180: LD_INT 0
60182: PPUSH
// begin enable ;
60183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
60184: LD_ADDR_VAR 0 1
60188: PUSH
60189: LD_INT 22
60191: PUSH
60192: LD_OWVAR 2
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 25
60206: PUSH
60207: LD_INT 5
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 25
60216: PUSH
60217: LD_INT 9
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 25
60226: PUSH
60227: LD_INT 8
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PPUSH
60244: CALL_OW 69
60248: PUSH
60249: FOR_IN
60250: IFFALSE 60266
// begin SetClass ( i , 1 ) ;
60252: LD_VAR 0 1
60256: PPUSH
60257: LD_INT 1
60259: PPUSH
60260: CALL_OW 336
// end ;
60264: GO 60249
60266: POP
60267: POP
// end ;
60268: PPOPN 1
60270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
60271: LD_EXP 38
60275: IFFALSE 60283
60277: PUSH
60278: LD_EXP 42
60282: AND
60283: IFFALSE 60295
60285: PUSH
60286: LD_OWVAR 65
60290: PUSH
60291: LD_INT 7
60293: LESS
60294: AND
60295: IFFALSE 60309
60297: GO 60299
60299: DISABLE
// begin enable ;
60300: ENABLE
// game_speed := 7 ;
60301: LD_ADDR_OWVAR 65
60305: PUSH
60306: LD_INT 7
60308: ST_TO_ADDR
// end ;
60309: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
60310: LD_EXP 38
60314: IFFALSE 60322
60316: PUSH
60317: LD_EXP 45
60321: AND
60322: IFFALSE 60524
60324: GO 60326
60326: DISABLE
60327: LD_INT 0
60329: PPUSH
60330: PPUSH
60331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60332: LD_ADDR_VAR 0 3
60336: PUSH
60337: LD_INT 81
60339: PUSH
60340: LD_OWVAR 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 21
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PPUSH
60363: CALL_OW 69
60367: ST_TO_ADDR
// if not tmp then
60368: LD_VAR 0 3
60372: NOT
60373: IFFALSE 60377
// exit ;
60375: GO 60524
// if tmp > 5 then
60377: LD_VAR 0 3
60381: PUSH
60382: LD_INT 5
60384: GREATER
60385: IFFALSE 60397
// k := 5 else
60387: LD_ADDR_VAR 0 2
60391: PUSH
60392: LD_INT 5
60394: ST_TO_ADDR
60395: GO 60407
// k := tmp ;
60397: LD_ADDR_VAR 0 2
60401: PUSH
60402: LD_VAR 0 3
60406: ST_TO_ADDR
// for i := 1 to k do
60407: LD_ADDR_VAR 0 1
60411: PUSH
60412: DOUBLE
60413: LD_INT 1
60415: DEC
60416: ST_TO_ADDR
60417: LD_VAR 0 2
60421: PUSH
60422: FOR_TO
60423: IFFALSE 60522
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60425: LD_VAR 0 3
60429: PUSH
60430: LD_VAR 0 1
60434: ARRAY
60435: PPUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 4
60443: MOD
60444: PUSH
60445: LD_INT 1
60447: PLUS
60448: PPUSH
60449: CALL_OW 259
60453: PUSH
60454: LD_INT 10
60456: LESS
60457: IFFALSE 60520
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60459: LD_VAR 0 3
60463: PUSH
60464: LD_VAR 0 1
60468: ARRAY
60469: PPUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 4
60477: MOD
60478: PUSH
60479: LD_INT 1
60481: PLUS
60482: PPUSH
60483: LD_VAR 0 3
60487: PUSH
60488: LD_VAR 0 1
60492: ARRAY
60493: PPUSH
60494: LD_VAR 0 1
60498: PUSH
60499: LD_INT 4
60501: MOD
60502: PUSH
60503: LD_INT 1
60505: PLUS
60506: PPUSH
60507: CALL_OW 259
60511: PUSH
60512: LD_INT 1
60514: PLUS
60515: PPUSH
60516: CALL_OW 237
60520: GO 60422
60522: POP
60523: POP
// end ;
60524: PPOPN 3
60526: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60527: LD_EXP 38
60531: IFFALSE 60539
60533: PUSH
60534: LD_EXP 46
60538: AND
60539: IFFALSE 60559
60541: GO 60543
60543: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60544: LD_INT 4
60546: PPUSH
60547: LD_OWVAR 2
60551: PPUSH
60552: LD_INT 0
60554: PPUSH
60555: CALL_OW 324
60559: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60560: LD_EXP 38
60564: IFFALSE 60572
60566: PUSH
60567: LD_EXP 75
60571: AND
60572: IFFALSE 60592
60574: GO 60576
60576: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60577: LD_INT 19
60579: PPUSH
60580: LD_OWVAR 2
60584: PPUSH
60585: LD_INT 0
60587: PPUSH
60588: CALL_OW 324
60592: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60593: LD_EXP 38
60597: IFFALSE 60605
60599: PUSH
60600: LD_EXP 47
60604: AND
60605: IFFALSE 60707
60607: GO 60609
60609: DISABLE
60610: LD_INT 0
60612: PPUSH
60613: PPUSH
// begin enable ;
60614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60615: LD_ADDR_VAR 0 2
60619: PUSH
60620: LD_INT 22
60622: PUSH
60623: LD_OWVAR 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 34
60637: PUSH
60638: LD_INT 11
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 34
60647: PUSH
60648: LD_INT 30
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PPUSH
60664: CALL_OW 69
60668: ST_TO_ADDR
// if not tmp then
60669: LD_VAR 0 2
60673: NOT
60674: IFFALSE 60678
// exit ;
60676: GO 60707
// for i in tmp do
60678: LD_ADDR_VAR 0 1
60682: PUSH
60683: LD_VAR 0 2
60687: PUSH
60688: FOR_IN
60689: IFFALSE 60705
// begin SetLives ( i , 0 ) ;
60691: LD_VAR 0 1
60695: PPUSH
60696: LD_INT 0
60698: PPUSH
60699: CALL_OW 234
// end ;
60703: GO 60688
60705: POP
60706: POP
// end ;
60707: PPOPN 2
60709: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60710: LD_EXP 38
60714: IFFALSE 60722
60716: PUSH
60717: LD_EXP 48
60721: AND
60722: IFFALSE 60742
60724: GO 60726
60726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60727: LD_INT 32
60729: PPUSH
60730: LD_OWVAR 2
60734: PPUSH
60735: LD_INT 0
60737: PPUSH
60738: CALL_OW 324
60742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60743: LD_EXP 38
60747: IFFALSE 60755
60749: PUSH
60750: LD_EXP 49
60754: AND
60755: IFFALSE 60938
60757: GO 60759
60759: DISABLE
60760: LD_INT 0
60762: PPUSH
60763: PPUSH
60764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60765: LD_ADDR_VAR 0 2
60769: PUSH
60770: LD_INT 22
60772: PUSH
60773: LD_OWVAR 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 33
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PPUSH
60796: CALL_OW 69
60800: ST_TO_ADDR
// if not tmp then
60801: LD_VAR 0 2
60805: NOT
60806: IFFALSE 60810
// exit ;
60808: GO 60938
// side := 0 ;
60810: LD_ADDR_VAR 0 3
60814: PUSH
60815: LD_INT 0
60817: ST_TO_ADDR
// for i := 1 to 8 do
60818: LD_ADDR_VAR 0 1
60822: PUSH
60823: DOUBLE
60824: LD_INT 1
60826: DEC
60827: ST_TO_ADDR
60828: LD_INT 8
60830: PUSH
60831: FOR_TO
60832: IFFALSE 60882
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60834: LD_OWVAR 2
60838: PUSH
60839: LD_VAR 0 1
60843: NONEQUAL
60844: IFFALSE 60866
60846: PUSH
60847: LD_OWVAR 2
60851: PPUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 81
60861: PUSH
60862: LD_INT 2
60864: EQUAL
60865: AND
60866: IFFALSE 60880
// begin side := i ;
60868: LD_ADDR_VAR 0 3
60872: PUSH
60873: LD_VAR 0 1
60877: ST_TO_ADDR
// break ;
60878: GO 60882
// end ;
60880: GO 60831
60882: POP
60883: POP
// if not side then
60884: LD_VAR 0 3
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 60938
// for i := 1 to tmp do
60893: LD_ADDR_VAR 0 1
60897: PUSH
60898: DOUBLE
60899: LD_INT 1
60901: DEC
60902: ST_TO_ADDR
60903: LD_VAR 0 2
60907: PUSH
60908: FOR_TO
60909: IFFALSE 60936
// if Prob ( 60 ) then
60911: LD_INT 60
60913: PPUSH
60914: CALL_OW 13
60918: IFFALSE 60934
// SetSide ( i , side ) ;
60920: LD_VAR 0 1
60924: PPUSH
60925: LD_VAR 0 3
60929: PPUSH
60930: CALL_OW 235
60934: GO 60908
60936: POP
60937: POP
// end ;
60938: PPOPN 3
60940: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60941: LD_EXP 38
60945: IFFALSE 60953
60947: PUSH
60948: LD_EXP 51
60952: AND
60953: IFFALSE 61072
60955: GO 60957
60957: DISABLE
60958: LD_INT 0
60960: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60961: LD_ADDR_VAR 0 1
60965: PUSH
60966: LD_INT 22
60968: PUSH
60969: LD_OWVAR 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 21
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: LD_INT 23
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 69
61014: PUSH
61015: FOR_IN
61016: IFFALSE 61070
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 257
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: IN
61046: IFFALSE 61068
// SetClass ( un , rand ( 1 , 4 ) ) ;
61048: LD_VAR 0 1
61052: PPUSH
61053: LD_INT 1
61055: PPUSH
61056: LD_INT 4
61058: PPUSH
61059: CALL_OW 12
61063: PPUSH
61064: CALL_OW 336
61068: GO 61015
61070: POP
61071: POP
// end ;
61072: PPOPN 1
61074: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
61075: LD_EXP 38
61079: IFFALSE 61087
61081: PUSH
61082: LD_EXP 50
61086: AND
61087: IFFALSE 61166
61089: GO 61091
61091: DISABLE
61092: LD_INT 0
61094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61095: LD_ADDR_VAR 0 1
61099: PUSH
61100: LD_INT 22
61102: PUSH
61103: LD_OWVAR 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 21
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PPUSH
61126: CALL_OW 69
61130: ST_TO_ADDR
// if not tmp then
61131: LD_VAR 0 1
61135: NOT
61136: IFFALSE 61140
// exit ;
61138: GO 61166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
61140: LD_VAR 0 1
61144: PUSH
61145: LD_INT 1
61147: PPUSH
61148: LD_VAR 0 1
61152: PPUSH
61153: CALL_OW 12
61157: ARRAY
61158: PPUSH
61159: LD_INT 100
61161: PPUSH
61162: CALL_OW 234
// end ;
61166: PPOPN 1
61168: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
61169: LD_EXP 38
61173: IFFALSE 61181
61175: PUSH
61176: LD_EXP 52
61180: AND
61181: IFFALSE 61279
61183: GO 61185
61185: DISABLE
61186: LD_INT 0
61188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61189: LD_ADDR_VAR 0 1
61193: PUSH
61194: LD_INT 22
61196: PUSH
61197: LD_OWVAR 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 21
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PPUSH
61220: CALL_OW 69
61224: ST_TO_ADDR
// if not tmp then
61225: LD_VAR 0 1
61229: NOT
61230: IFFALSE 61234
// exit ;
61232: GO 61279
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 1
61241: PPUSH
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 12
61251: ARRAY
61252: PPUSH
61253: LD_INT 1
61255: PPUSH
61256: LD_INT 4
61258: PPUSH
61259: CALL_OW 12
61263: PPUSH
61264: LD_INT 3000
61266: PPUSH
61267: LD_INT 9000
61269: PPUSH
61270: CALL_OW 12
61274: PPUSH
61275: CALL_OW 492
// end ;
61279: PPOPN 1
61281: END
// every 0 0$1 trigger StreamModeActive and sDepot do
61282: LD_EXP 38
61286: IFFALSE 61294
61288: PUSH
61289: LD_EXP 53
61293: AND
61294: IFFALSE 61314
61296: GO 61298
61298: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
61299: LD_INT 1
61301: PPUSH
61302: LD_OWVAR 2
61306: PPUSH
61307: LD_INT 0
61309: PPUSH
61310: CALL_OW 324
61314: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
61315: LD_EXP 38
61319: IFFALSE 61327
61321: PUSH
61322: LD_EXP 54
61326: AND
61327: IFFALSE 61410
61329: GO 61331
61331: DISABLE
61332: LD_INT 0
61334: PPUSH
61335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61336: LD_ADDR_VAR 0 2
61340: PUSH
61341: LD_INT 22
61343: PUSH
61344: LD_OWVAR 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 21
61355: PUSH
61356: LD_INT 3
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PPUSH
61367: CALL_OW 69
61371: ST_TO_ADDR
// if not tmp then
61372: LD_VAR 0 2
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61410
// for i in tmp do
61381: LD_ADDR_VAR 0 1
61385: PUSH
61386: LD_VAR 0 2
61390: PUSH
61391: FOR_IN
61392: IFFALSE 61408
// SetBLevel ( i , 10 ) ;
61394: LD_VAR 0 1
61398: PPUSH
61399: LD_INT 10
61401: PPUSH
61402: CALL_OW 241
61406: GO 61391
61408: POP
61409: POP
// end ;
61410: PPOPN 2
61412: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61413: LD_EXP 38
61417: IFFALSE 61425
61419: PUSH
61420: LD_EXP 55
61424: AND
61425: IFFALSE 61536
61427: GO 61429
61429: DISABLE
61430: LD_INT 0
61432: PPUSH
61433: PPUSH
61434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61435: LD_ADDR_VAR 0 3
61439: PUSH
61440: LD_INT 22
61442: PUSH
61443: LD_OWVAR 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 25
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PPUSH
61466: CALL_OW 69
61470: ST_TO_ADDR
// if not tmp then
61471: LD_VAR 0 3
61475: NOT
61476: IFFALSE 61480
// exit ;
61478: GO 61536
// un := tmp [ rand ( 1 , tmp ) ] ;
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: LD_VAR 0 3
61489: PUSH
61490: LD_INT 1
61492: PPUSH
61493: LD_VAR 0 3
61497: PPUSH
61498: CALL_OW 12
61502: ARRAY
61503: ST_TO_ADDR
// if Crawls ( un ) then
61504: LD_VAR 0 2
61508: PPUSH
61509: CALL_OW 318
61513: IFFALSE 61524
// ComWalk ( un ) ;
61515: LD_VAR 0 2
61519: PPUSH
61520: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61524: LD_VAR 0 2
61528: PPUSH
61529: LD_INT 5
61531: PPUSH
61532: CALL_OW 336
// end ;
61536: PPOPN 3
61538: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61539: LD_EXP 38
61543: IFFALSE 61551
61545: PUSH
61546: LD_EXP 56
61550: AND
61551: IFFALSE 61563
61553: PUSH
61554: LD_OWVAR 67
61558: PUSH
61559: LD_INT 4
61561: LESS
61562: AND
61563: IFFALSE 61582
61565: GO 61567
61567: DISABLE
// begin Difficulty := Difficulty + 1 ;
61568: LD_ADDR_OWVAR 67
61572: PUSH
61573: LD_OWVAR 67
61577: PUSH
61578: LD_INT 1
61580: PLUS
61581: ST_TO_ADDR
// end ;
61582: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61583: LD_EXP 38
61587: IFFALSE 61595
61589: PUSH
61590: LD_EXP 57
61594: AND
61595: IFFALSE 61698
61597: GO 61599
61599: DISABLE
61600: LD_INT 0
61602: PPUSH
// begin for i := 1 to 5 do
61603: LD_ADDR_VAR 0 1
61607: PUSH
61608: DOUBLE
61609: LD_INT 1
61611: DEC
61612: ST_TO_ADDR
61613: LD_INT 5
61615: PUSH
61616: FOR_TO
61617: IFFALSE 61696
// begin uc_nation := nation_nature ;
61619: LD_ADDR_OWVAR 21
61623: PUSH
61624: LD_INT 0
61626: ST_TO_ADDR
// uc_side := 0 ;
61627: LD_ADDR_OWVAR 20
61631: PUSH
61632: LD_INT 0
61634: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61635: LD_ADDR_OWVAR 29
61639: PUSH
61640: LD_INT 12
61642: PUSH
61643: LD_INT 12
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// hc_agressivity := 20 ;
61650: LD_ADDR_OWVAR 35
61654: PUSH
61655: LD_INT 20
61657: ST_TO_ADDR
// hc_class := class_tiger ;
61658: LD_ADDR_OWVAR 28
61662: PUSH
61663: LD_INT 14
61665: ST_TO_ADDR
// hc_gallery :=  ;
61666: LD_ADDR_OWVAR 33
61670: PUSH
61671: LD_STRING 
61673: ST_TO_ADDR
// hc_name :=  ;
61674: LD_ADDR_OWVAR 26
61678: PUSH
61679: LD_STRING 
61681: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61682: CALL_OW 44
61686: PPUSH
61687: LD_INT 0
61689: PPUSH
61690: CALL_OW 51
// end ;
61694: GO 61616
61696: POP
61697: POP
// end ;
61698: PPOPN 1
61700: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61701: LD_EXP 38
61705: IFFALSE 61713
61707: PUSH
61708: LD_EXP 58
61712: AND
61713: IFFALSE 61722
61715: GO 61717
61717: DISABLE
// StreamSibBomb ;
61718: CALL 61723 0 0
61722: END
// export function StreamSibBomb ; var i , x , y ; begin
61723: LD_INT 0
61725: PPUSH
61726: PPUSH
61727: PPUSH
61728: PPUSH
// result := false ;
61729: LD_ADDR_VAR 0 1
61733: PUSH
61734: LD_INT 0
61736: ST_TO_ADDR
// for i := 1 to 16 do
61737: LD_ADDR_VAR 0 2
61741: PUSH
61742: DOUBLE
61743: LD_INT 1
61745: DEC
61746: ST_TO_ADDR
61747: LD_INT 16
61749: PUSH
61750: FOR_TO
61751: IFFALSE 61950
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61753: LD_ADDR_VAR 0 3
61757: PUSH
61758: LD_INT 10
61760: PUSH
61761: LD_INT 20
61763: PUSH
61764: LD_INT 30
61766: PUSH
61767: LD_INT 40
61769: PUSH
61770: LD_INT 50
61772: PUSH
61773: LD_INT 60
61775: PUSH
61776: LD_INT 70
61778: PUSH
61779: LD_INT 80
61781: PUSH
61782: LD_INT 90
61784: PUSH
61785: LD_INT 100
61787: PUSH
61788: LD_INT 110
61790: PUSH
61791: LD_INT 120
61793: PUSH
61794: LD_INT 130
61796: PUSH
61797: LD_INT 140
61799: PUSH
61800: LD_INT 150
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PPUSH
61823: LD_INT 15
61825: PPUSH
61826: CALL_OW 12
61830: ARRAY
61831: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61832: LD_ADDR_VAR 0 4
61836: PUSH
61837: LD_INT 10
61839: PUSH
61840: LD_INT 20
61842: PUSH
61843: LD_INT 30
61845: PUSH
61846: LD_INT 40
61848: PUSH
61849: LD_INT 50
61851: PUSH
61852: LD_INT 60
61854: PUSH
61855: LD_INT 70
61857: PUSH
61858: LD_INT 80
61860: PUSH
61861: LD_INT 90
61863: PUSH
61864: LD_INT 100
61866: PUSH
61867: LD_INT 110
61869: PUSH
61870: LD_INT 120
61872: PUSH
61873: LD_INT 130
61875: PUSH
61876: LD_INT 140
61878: PUSH
61879: LD_INT 150
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PPUSH
61902: LD_INT 15
61904: PPUSH
61905: CALL_OW 12
61909: ARRAY
61910: ST_TO_ADDR
// if ValidHex ( x , y ) then
61911: LD_VAR 0 3
61915: PPUSH
61916: LD_VAR 0 4
61920: PPUSH
61921: CALL_OW 488
61925: IFFALSE 61948
// begin result := [ x , y ] ;
61927: LD_ADDR_VAR 0 1
61931: PUSH
61932: LD_VAR 0 3
61936: PUSH
61937: LD_VAR 0 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: ST_TO_ADDR
// break ;
61946: GO 61950
// end ; end ;
61948: GO 61750
61950: POP
61951: POP
// if result then
61952: LD_VAR 0 1
61956: IFFALSE 62016
// begin ToLua ( playSibBomb() ) ;
61958: LD_STRING playSibBomb()
61960: PPUSH
61961: CALL_OW 559
// wait ( 0 0$14 ) ;
61965: LD_INT 490
61967: PPUSH
61968: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61972: LD_VAR 0 1
61976: PUSH
61977: LD_INT 1
61979: ARRAY
61980: PPUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 2
61988: ARRAY
61989: PPUSH
61990: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61994: LD_VAR 0 1
61998: PUSH
61999: LD_INT 1
62001: ARRAY
62002: PPUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_INT 2
62010: ARRAY
62011: PPUSH
62012: CALL_OW 429
// end ; end ;
62016: LD_VAR 0 1
62020: RET
// every 0 0$1 trigger StreamModeActive and sReset do
62021: LD_EXP 38
62025: IFFALSE 62033
62027: PUSH
62028: LD_EXP 60
62032: AND
62033: IFFALSE 62045
62035: GO 62037
62037: DISABLE
// YouLost (  ) ;
62038: LD_STRING 
62040: PPUSH
62041: CALL_OW 104
62045: END
// every 0 0$1 trigger StreamModeActive and sFog do
62046: LD_EXP 38
62050: IFFALSE 62058
62052: PUSH
62053: LD_EXP 59
62057: AND
62058: IFFALSE 62072
62060: GO 62062
62062: DISABLE
// FogOff ( your_side ) ;
62063: LD_OWVAR 2
62067: PPUSH
62068: CALL_OW 344
62072: END
// every 0 0$1 trigger StreamModeActive and sSun do
62073: LD_EXP 38
62077: IFFALSE 62085
62079: PUSH
62080: LD_EXP 61
62084: AND
62085: IFFALSE 62113
62087: GO 62089
62089: DISABLE
// begin solar_recharge_percent := 0 ;
62090: LD_ADDR_OWVAR 79
62094: PUSH
62095: LD_INT 0
62097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
62098: LD_INT 10500
62100: PPUSH
62101: CALL_OW 67
// solar_recharge_percent := 100 ;
62105: LD_ADDR_OWVAR 79
62109: PUSH
62110: LD_INT 100
62112: ST_TO_ADDR
// end ;
62113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
62114: LD_EXP 38
62118: IFFALSE 62126
62120: PUSH
62121: LD_EXP 62
62125: AND
62126: IFFALSE 62365
62128: GO 62130
62130: DISABLE
62131: LD_INT 0
62133: PPUSH
62134: PPUSH
62135: PPUSH
// begin tmp := [ ] ;
62136: LD_ADDR_VAR 0 3
62140: PUSH
62141: EMPTY
62142: ST_TO_ADDR
// for i := 1 to 6 do
62143: LD_ADDR_VAR 0 1
62147: PUSH
62148: DOUBLE
62149: LD_INT 1
62151: DEC
62152: ST_TO_ADDR
62153: LD_INT 6
62155: PUSH
62156: FOR_TO
62157: IFFALSE 62262
// begin uc_nation := nation_nature ;
62159: LD_ADDR_OWVAR 21
62163: PUSH
62164: LD_INT 0
62166: ST_TO_ADDR
// uc_side := 0 ;
62167: LD_ADDR_OWVAR 20
62171: PUSH
62172: LD_INT 0
62174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62175: LD_ADDR_OWVAR 29
62179: PUSH
62180: LD_INT 12
62182: PUSH
62183: LD_INT 12
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: ST_TO_ADDR
// hc_agressivity := 20 ;
62190: LD_ADDR_OWVAR 35
62194: PUSH
62195: LD_INT 20
62197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
62198: LD_ADDR_OWVAR 28
62202: PUSH
62203: LD_INT 17
62205: ST_TO_ADDR
// hc_gallery :=  ;
62206: LD_ADDR_OWVAR 33
62210: PUSH
62211: LD_STRING 
62213: ST_TO_ADDR
// hc_name :=  ;
62214: LD_ADDR_OWVAR 26
62218: PUSH
62219: LD_STRING 
62221: ST_TO_ADDR
// un := CreateHuman ;
62222: LD_ADDR_VAR 0 2
62226: PUSH
62227: CALL_OW 44
62231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
62232: LD_VAR 0 2
62236: PPUSH
62237: LD_INT 1
62239: PPUSH
62240: CALL_OW 51
// tmp := tmp ^ un ;
62244: LD_ADDR_VAR 0 3
62248: PUSH
62249: LD_VAR 0 3
62253: PUSH
62254: LD_VAR 0 2
62258: ADD
62259: ST_TO_ADDR
// end ;
62260: GO 62156
62262: POP
62263: POP
// repeat wait ( 0 0$1 ) ;
62264: LD_INT 35
62266: PPUSH
62267: CALL_OW 67
// for un in tmp do
62271: LD_ADDR_VAR 0 2
62275: PUSH
62276: LD_VAR 0 3
62280: PUSH
62281: FOR_IN
62282: IFFALSE 62356
// begin if IsDead ( un ) then
62284: LD_VAR 0 2
62288: PPUSH
62289: CALL_OW 301
62293: IFFALSE 62313
// begin tmp := tmp diff un ;
62295: LD_ADDR_VAR 0 3
62299: PUSH
62300: LD_VAR 0 3
62304: PUSH
62305: LD_VAR 0 2
62309: DIFF
62310: ST_TO_ADDR
// continue ;
62311: GO 62281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
62313: LD_VAR 0 2
62317: PPUSH
62318: LD_INT 3
62320: PUSH
62321: LD_INT 22
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PPUSH
62335: CALL_OW 69
62339: PPUSH
62340: LD_VAR 0 2
62344: PPUSH
62345: CALL_OW 74
62349: PPUSH
62350: CALL_OW 115
// end ;
62354: GO 62281
62356: POP
62357: POP
// until not tmp ;
62358: LD_VAR 0 3
62362: NOT
62363: IFFALSE 62264
// end ;
62365: PPOPN 3
62367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
62368: LD_EXP 38
62372: IFFALSE 62380
62374: PUSH
62375: LD_EXP 63
62379: AND
62380: IFFALSE 62434
62382: GO 62384
62384: DISABLE
// begin ToLua ( displayTroll(); ) ;
62385: LD_STRING displayTroll();
62387: PPUSH
62388: CALL_OW 559
// wait ( 3 3$00 ) ;
62392: LD_INT 6300
62394: PPUSH
62395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62399: LD_STRING hideTroll();
62401: PPUSH
62402: CALL_OW 559
// wait ( 1 1$00 ) ;
62406: LD_INT 2100
62408: PPUSH
62409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62413: LD_STRING displayTroll();
62415: PPUSH
62416: CALL_OW 559
// wait ( 1 1$00 ) ;
62420: LD_INT 2100
62422: PPUSH
62423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62427: LD_STRING hideTroll();
62429: PPUSH
62430: CALL_OW 559
// end ;
62434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62435: LD_EXP 38
62439: IFFALSE 62447
62441: PUSH
62442: LD_EXP 64
62446: AND
62447: IFFALSE 62510
62449: GO 62451
62451: DISABLE
62452: LD_INT 0
62454: PPUSH
// begin p := 0 ;
62455: LD_ADDR_VAR 0 1
62459: PUSH
62460: LD_INT 0
62462: ST_TO_ADDR
// repeat game_speed := 1 ;
62463: LD_ADDR_OWVAR 65
62467: PUSH
62468: LD_INT 1
62470: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62471: LD_INT 35
62473: PPUSH
62474: CALL_OW 67
// p := p + 1 ;
62478: LD_ADDR_VAR 0 1
62482: PUSH
62483: LD_VAR 0 1
62487: PUSH
62488: LD_INT 1
62490: PLUS
62491: ST_TO_ADDR
// until p >= 60 ;
62492: LD_VAR 0 1
62496: PUSH
62497: LD_INT 60
62499: GREATEREQUAL
62500: IFFALSE 62463
// game_speed := 4 ;
62502: LD_ADDR_OWVAR 65
62506: PUSH
62507: LD_INT 4
62509: ST_TO_ADDR
// end ;
62510: PPOPN 1
62512: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62513: LD_EXP 38
62517: IFFALSE 62525
62519: PUSH
62520: LD_EXP 65
62524: AND
62525: IFFALSE 62671
62527: GO 62529
62529: DISABLE
62530: LD_INT 0
62532: PPUSH
62533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62534: LD_ADDR_VAR 0 1
62538: PUSH
62539: LD_INT 22
62541: PUSH
62542: LD_OWVAR 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: LD_INT 30
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 30
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PPUSH
62583: CALL_OW 69
62587: ST_TO_ADDR
// if not depot then
62588: LD_VAR 0 1
62592: NOT
62593: IFFALSE 62597
// exit ;
62595: GO 62671
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62597: LD_ADDR_VAR 0 2
62601: PUSH
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 1
62609: PPUSH
62610: LD_VAR 0 1
62614: PPUSH
62615: CALL_OW 12
62619: ARRAY
62620: PPUSH
62621: CALL_OW 274
62625: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62626: LD_VAR 0 2
62630: PPUSH
62631: LD_INT 1
62633: PPUSH
62634: LD_INT 0
62636: PPUSH
62637: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62641: LD_VAR 0 2
62645: PPUSH
62646: LD_INT 2
62648: PPUSH
62649: LD_INT 0
62651: PPUSH
62652: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62656: LD_VAR 0 2
62660: PPUSH
62661: LD_INT 3
62663: PPUSH
62664: LD_INT 0
62666: PPUSH
62667: CALL_OW 277
// end ;
62671: PPOPN 2
62673: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62674: LD_EXP 38
62678: IFFALSE 62686
62680: PUSH
62681: LD_EXP 66
62685: AND
62686: IFFALSE 62783
62688: GO 62690
62690: DISABLE
62691: LD_INT 0
62693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62694: LD_ADDR_VAR 0 1
62698: PUSH
62699: LD_INT 22
62701: PUSH
62702: LD_OWVAR 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 21
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 23
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: PPUSH
62743: CALL_OW 69
62747: ST_TO_ADDR
// if not tmp then
62748: LD_VAR 0 1
62752: NOT
62753: IFFALSE 62757
// exit ;
62755: GO 62783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62757: LD_VAR 0 1
62761: PUSH
62762: LD_INT 1
62764: PPUSH
62765: LD_VAR 0 1
62769: PPUSH
62770: CALL_OW 12
62774: ARRAY
62775: PPUSH
62776: LD_INT 200
62778: PPUSH
62779: CALL_OW 234
// end ;
62783: PPOPN 1
62785: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62786: LD_EXP 38
62790: IFFALSE 62798
62792: PUSH
62793: LD_EXP 67
62797: AND
62798: IFFALSE 62877
62800: GO 62802
62802: DISABLE
62803: LD_INT 0
62805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62806: LD_ADDR_VAR 0 1
62810: PUSH
62811: LD_INT 22
62813: PUSH
62814: LD_OWVAR 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 21
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PPUSH
62837: CALL_OW 69
62841: ST_TO_ADDR
// if not tmp then
62842: LD_VAR 0 1
62846: NOT
62847: IFFALSE 62851
// exit ;
62849: GO 62877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62851: LD_VAR 0 1
62855: PUSH
62856: LD_INT 1
62858: PPUSH
62859: LD_VAR 0 1
62863: PPUSH
62864: CALL_OW 12
62868: ARRAY
62869: PPUSH
62870: LD_INT 60
62872: PPUSH
62873: CALL_OW 234
// end ;
62877: PPOPN 1
62879: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62880: LD_EXP 38
62884: IFFALSE 62892
62886: PUSH
62887: LD_EXP 68
62891: AND
62892: IFFALSE 62991
62894: GO 62896
62896: DISABLE
62897: LD_INT 0
62899: PPUSH
62900: PPUSH
// begin enable ;
62901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62902: LD_ADDR_VAR 0 1
62906: PUSH
62907: LD_INT 22
62909: PUSH
62910: LD_OWVAR 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 61
62921: PUSH
62922: EMPTY
62923: LIST
62924: PUSH
62925: LD_INT 33
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: PPUSH
62940: CALL_OW 69
62944: ST_TO_ADDR
// if not tmp then
62945: LD_VAR 0 1
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 62991
// for i in tmp do
62954: LD_ADDR_VAR 0 2
62958: PUSH
62959: LD_VAR 0 1
62963: PUSH
62964: FOR_IN
62965: IFFALSE 62989
// if IsControledBy ( i ) then
62967: LD_VAR 0 2
62971: PPUSH
62972: CALL_OW 312
62976: IFFALSE 62987
// ComUnlink ( i ) ;
62978: LD_VAR 0 2
62982: PPUSH
62983: CALL_OW 136
62987: GO 62964
62989: POP
62990: POP
// end ;
62991: PPOPN 2
62993: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62994: LD_EXP 38
62998: IFFALSE 63006
63000: PUSH
63001: LD_EXP 69
63005: AND
63006: IFFALSE 63146
63008: GO 63010
63010: DISABLE
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
// begin ToLua ( displayPowell(); ) ;
63015: LD_STRING displayPowell();
63017: PPUSH
63018: CALL_OW 559
// uc_side := 0 ;
63022: LD_ADDR_OWVAR 20
63026: PUSH
63027: LD_INT 0
63029: ST_TO_ADDR
// uc_nation := 2 ;
63030: LD_ADDR_OWVAR 21
63034: PUSH
63035: LD_INT 2
63037: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
63038: LD_ADDR_OWVAR 37
63042: PUSH
63043: LD_INT 14
63045: ST_TO_ADDR
// vc_engine := engine_siberite ;
63046: LD_ADDR_OWVAR 39
63050: PUSH
63051: LD_INT 3
63053: ST_TO_ADDR
// vc_control := control_apeman ;
63054: LD_ADDR_OWVAR 38
63058: PUSH
63059: LD_INT 5
63061: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
63062: LD_ADDR_OWVAR 40
63066: PUSH
63067: LD_INT 29
63069: ST_TO_ADDR
// un := CreateVehicle ;
63070: LD_ADDR_VAR 0 2
63074: PUSH
63075: CALL_OW 45
63079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63080: LD_VAR 0 2
63084: PPUSH
63085: LD_INT 1
63087: PPUSH
63088: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63092: LD_INT 35
63094: PPUSH
63095: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63099: LD_VAR 0 2
63103: PPUSH
63104: LD_INT 22
63106: PUSH
63107: LD_OWVAR 2
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PPUSH
63116: CALL_OW 69
63120: PPUSH
63121: LD_VAR 0 2
63125: PPUSH
63126: CALL_OW 74
63130: PPUSH
63131: CALL_OW 115
// until IsDead ( un ) ;
63135: LD_VAR 0 2
63139: PPUSH
63140: CALL_OW 301
63144: IFFALSE 63092
// end ;
63146: PPOPN 2
63148: END
// every 0 0$1 trigger StreamModeActive and sStu do
63149: LD_EXP 38
63153: IFFALSE 63161
63155: PUSH
63156: LD_EXP 77
63160: AND
63161: IFFALSE 63177
63163: GO 63165
63165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
63166: LD_STRING displayStucuk();
63168: PPUSH
63169: CALL_OW 559
// ResetFog ;
63173: CALL_OW 335
// end ;
63177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
63178: LD_EXP 38
63182: IFFALSE 63190
63184: PUSH
63185: LD_EXP 70
63189: AND
63190: IFFALSE 63331
63192: GO 63194
63194: DISABLE
63195: LD_INT 0
63197: PPUSH
63198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_INT 22
63206: PUSH
63207: LD_OWVAR 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 21
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PPUSH
63230: CALL_OW 69
63234: ST_TO_ADDR
// if not tmp then
63235: LD_VAR 0 2
63239: NOT
63240: IFFALSE 63244
// exit ;
63242: GO 63331
// un := tmp [ rand ( 1 , tmp ) ] ;
63244: LD_ADDR_VAR 0 1
63248: PUSH
63249: LD_VAR 0 2
63253: PUSH
63254: LD_INT 1
63256: PPUSH
63257: LD_VAR 0 2
63261: PPUSH
63262: CALL_OW 12
63266: ARRAY
63267: ST_TO_ADDR
// SetSide ( un , 0 ) ;
63268: LD_VAR 0 1
63272: PPUSH
63273: LD_INT 0
63275: PPUSH
63276: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
63280: LD_VAR 0 1
63284: PPUSH
63285: LD_OWVAR 3
63289: PUSH
63290: LD_VAR 0 1
63294: DIFF
63295: PPUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 74
63305: PPUSH
63306: CALL_OW 115
// wait ( 0 0$20 ) ;
63310: LD_INT 700
63312: PPUSH
63313: CALL_OW 67
// SetSide ( un , your_side ) ;
63317: LD_VAR 0 1
63321: PPUSH
63322: LD_OWVAR 2
63326: PPUSH
63327: CALL_OW 235
// end ;
63331: PPOPN 2
63333: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
63334: LD_EXP 38
63338: IFFALSE 63346
63340: PUSH
63341: LD_EXP 71
63345: AND
63346: IFFALSE 63452
63348: GO 63350
63350: DISABLE
63351: LD_INT 0
63353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63354: LD_ADDR_VAR 0 1
63358: PUSH
63359: LD_INT 22
63361: PUSH
63362: LD_OWVAR 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: LD_INT 30
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 30
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PPUSH
63403: CALL_OW 69
63407: ST_TO_ADDR
// if not depot then
63408: LD_VAR 0 1
63412: NOT
63413: IFFALSE 63417
// exit ;
63415: GO 63452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63417: LD_VAR 0 1
63421: PUSH
63422: LD_INT 1
63424: ARRAY
63425: PPUSH
63426: CALL_OW 250
63430: PPUSH
63431: LD_VAR 0 1
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: PPUSH
63440: CALL_OW 251
63444: PPUSH
63445: LD_INT 70
63447: PPUSH
63448: CALL_OW 495
// end ;
63452: PPOPN 1
63454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63455: LD_EXP 38
63459: IFFALSE 63467
63461: PUSH
63462: LD_EXP 72
63466: AND
63467: IFFALSE 63678
63469: GO 63471
63471: DISABLE
63472: LD_INT 0
63474: PPUSH
63475: PPUSH
63476: PPUSH
63477: PPUSH
63478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63479: LD_ADDR_VAR 0 5
63483: PUSH
63484: LD_INT 22
63486: PUSH
63487: LD_OWVAR 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 21
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PPUSH
63510: CALL_OW 69
63514: ST_TO_ADDR
// if not tmp then
63515: LD_VAR 0 5
63519: NOT
63520: IFFALSE 63524
// exit ;
63522: GO 63678
// for i in tmp do
63524: LD_ADDR_VAR 0 1
63528: PUSH
63529: LD_VAR 0 5
63533: PUSH
63534: FOR_IN
63535: IFFALSE 63676
// begin d := rand ( 0 , 5 ) ;
63537: LD_ADDR_VAR 0 4
63541: PUSH
63542: LD_INT 0
63544: PPUSH
63545: LD_INT 5
63547: PPUSH
63548: CALL_OW 12
63552: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63553: LD_ADDR_VAR 0 2
63557: PUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: CALL_OW 250
63567: PPUSH
63568: LD_VAR 0 4
63572: PPUSH
63573: LD_INT 3
63575: PPUSH
63576: LD_INT 12
63578: PPUSH
63579: CALL_OW 12
63583: PPUSH
63584: CALL_OW 272
63588: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63589: LD_ADDR_VAR 0 3
63593: PUSH
63594: LD_VAR 0 1
63598: PPUSH
63599: CALL_OW 251
63603: PPUSH
63604: LD_VAR 0 4
63608: PPUSH
63609: LD_INT 3
63611: PPUSH
63612: LD_INT 12
63614: PPUSH
63615: CALL_OW 12
63619: PPUSH
63620: CALL_OW 273
63624: ST_TO_ADDR
// if ValidHex ( x , y ) then
63625: LD_VAR 0 2
63629: PPUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: CALL_OW 488
63639: IFFALSE 63674
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63641: LD_VAR 0 1
63645: PPUSH
63646: LD_VAR 0 2
63650: PPUSH
63651: LD_VAR 0 3
63655: PPUSH
63656: LD_INT 3
63658: PPUSH
63659: LD_INT 6
63661: PPUSH
63662: CALL_OW 12
63666: PPUSH
63667: LD_INT 1
63669: PPUSH
63670: CALL_OW 483
// end ;
63674: GO 63534
63676: POP
63677: POP
// end ;
63678: PPOPN 5
63680: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63681: LD_EXP 38
63685: IFFALSE 63693
63687: PUSH
63688: LD_EXP 73
63692: AND
63693: IFFALSE 63787
63695: GO 63697
63697: DISABLE
63698: LD_INT 0
63700: PPUSH
63701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63702: LD_ADDR_VAR 0 2
63706: PUSH
63707: LD_INT 22
63709: PUSH
63710: LD_OWVAR 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 32
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 21
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: PPUSH
63744: CALL_OW 69
63748: ST_TO_ADDR
// if not tmp then
63749: LD_VAR 0 2
63753: NOT
63754: IFFALSE 63758
// exit ;
63756: GO 63787
// for i in tmp do
63758: LD_ADDR_VAR 0 1
63762: PUSH
63763: LD_VAR 0 2
63767: PUSH
63768: FOR_IN
63769: IFFALSE 63785
// SetFuel ( i , 0 ) ;
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_INT 0
63778: PPUSH
63779: CALL_OW 240
63783: GO 63768
63785: POP
63786: POP
// end ;
63787: PPOPN 2
63789: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63790: LD_EXP 38
63794: IFFALSE 63802
63796: PUSH
63797: LD_EXP 74
63801: AND
63802: IFFALSE 63868
63804: GO 63806
63806: DISABLE
63807: LD_INT 0
63809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63810: LD_ADDR_VAR 0 1
63814: PUSH
63815: LD_INT 22
63817: PUSH
63818: LD_OWVAR 2
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 30
63829: PUSH
63830: LD_INT 29
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PPUSH
63841: CALL_OW 69
63845: ST_TO_ADDR
// if not tmp then
63846: LD_VAR 0 1
63850: NOT
63851: IFFALSE 63855
// exit ;
63853: GO 63868
// DestroyUnit ( tmp [ 1 ] ) ;
63855: LD_VAR 0 1
63859: PUSH
63860: LD_INT 1
63862: ARRAY
63863: PPUSH
63864: CALL_OW 65
// end ;
63868: PPOPN 1
63870: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63871: LD_EXP 38
63875: IFFALSE 63883
63877: PUSH
63878: LD_EXP 76
63882: AND
63883: IFFALSE 64012
63885: GO 63887
63887: DISABLE
63888: LD_INT 0
63890: PPUSH
// begin uc_side := 0 ;
63891: LD_ADDR_OWVAR 20
63895: PUSH
63896: LD_INT 0
63898: ST_TO_ADDR
// uc_nation := nation_arabian ;
63899: LD_ADDR_OWVAR 21
63903: PUSH
63904: LD_INT 2
63906: ST_TO_ADDR
// hc_gallery :=  ;
63907: LD_ADDR_OWVAR 33
63911: PUSH
63912: LD_STRING 
63914: ST_TO_ADDR
// hc_name :=  ;
63915: LD_ADDR_OWVAR 26
63919: PUSH
63920: LD_STRING 
63922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63923: LD_INT 1
63925: PPUSH
63926: LD_INT 11
63928: PPUSH
63929: LD_INT 10
63931: PPUSH
63932: CALL_OW 380
// un := CreateHuman ;
63936: LD_ADDR_VAR 0 1
63940: PUSH
63941: CALL_OW 44
63945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63946: LD_VAR 0 1
63950: PPUSH
63951: LD_INT 1
63953: PPUSH
63954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63958: LD_INT 35
63960: PPUSH
63961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63965: LD_VAR 0 1
63969: PPUSH
63970: LD_INT 22
63972: PUSH
63973: LD_OWVAR 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PPUSH
63982: CALL_OW 69
63986: PPUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 74
63996: PPUSH
63997: CALL_OW 115
// until IsDead ( un ) ;
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 301
64010: IFFALSE 63958
// end ;
64012: PPOPN 1
64014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
64015: LD_EXP 38
64019: IFFALSE 64027
64021: PUSH
64022: LD_EXP 78
64026: AND
64027: IFFALSE 64039
64029: GO 64031
64031: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
64032: LD_STRING earthquake(getX(game), 0, 32)
64034: PPUSH
64035: CALL_OW 559
64039: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
64040: LD_EXP 38
64044: IFFALSE 64052
64046: PUSH
64047: LD_EXP 79
64051: AND
64052: IFFALSE 64143
64054: GO 64056
64056: DISABLE
64057: LD_INT 0
64059: PPUSH
// begin enable ;
64060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
64061: LD_ADDR_VAR 0 1
64065: PUSH
64066: LD_INT 22
64068: PUSH
64069: LD_OWVAR 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 21
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 33
64090: PUSH
64091: LD_INT 3
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: PPUSH
64103: CALL_OW 69
64107: ST_TO_ADDR
// if not tmp then
64108: LD_VAR 0 1
64112: NOT
64113: IFFALSE 64117
// exit ;
64115: GO 64143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64117: LD_VAR 0 1
64121: PUSH
64122: LD_INT 1
64124: PPUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: CALL_OW 12
64134: ARRAY
64135: PPUSH
64136: LD_INT 1
64138: PPUSH
64139: CALL_OW 234
// end ;
64143: PPOPN 1
64145: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
64146: LD_EXP 38
64150: IFFALSE 64158
64152: PUSH
64153: LD_EXP 80
64157: AND
64158: IFFALSE 64299
64160: GO 64162
64162: DISABLE
64163: LD_INT 0
64165: PPUSH
64166: PPUSH
64167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64168: LD_ADDR_VAR 0 3
64172: PUSH
64173: LD_INT 22
64175: PUSH
64176: LD_OWVAR 2
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 25
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PPUSH
64199: CALL_OW 69
64203: ST_TO_ADDR
// if not tmp then
64204: LD_VAR 0 3
64208: NOT
64209: IFFALSE 64213
// exit ;
64211: GO 64299
// un := tmp [ rand ( 1 , tmp ) ] ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: LD_VAR 0 3
64222: PUSH
64223: LD_INT 1
64225: PPUSH
64226: LD_VAR 0 3
64230: PPUSH
64231: CALL_OW 12
64235: ARRAY
64236: ST_TO_ADDR
// if Crawls ( un ) then
64237: LD_VAR 0 2
64241: PPUSH
64242: CALL_OW 318
64246: IFFALSE 64257
// ComWalk ( un ) ;
64248: LD_VAR 0 2
64252: PPUSH
64253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
64257: LD_VAR 0 2
64261: PPUSH
64262: LD_INT 9
64264: PPUSH
64265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
64269: LD_INT 28
64271: PPUSH
64272: LD_OWVAR 2
64276: PPUSH
64277: LD_INT 2
64279: PPUSH
64280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
64284: LD_INT 29
64286: PPUSH
64287: LD_OWVAR 2
64291: PPUSH
64292: LD_INT 2
64294: PPUSH
64295: CALL_OW 322
// end ;
64299: PPOPN 3
64301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
64302: LD_EXP 38
64306: IFFALSE 64314
64308: PUSH
64309: LD_EXP 81
64313: AND
64314: IFFALSE 64425
64316: GO 64318
64318: DISABLE
64319: LD_INT 0
64321: PPUSH
64322: PPUSH
64323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_INT 22
64331: PUSH
64332: LD_OWVAR 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 25
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PPUSH
64355: CALL_OW 69
64359: ST_TO_ADDR
// if not tmp then
64360: LD_VAR 0 3
64364: NOT
64365: IFFALSE 64369
// exit ;
64367: GO 64425
// un := tmp [ rand ( 1 , tmp ) ] ;
64369: LD_ADDR_VAR 0 2
64373: PUSH
64374: LD_VAR 0 3
64378: PUSH
64379: LD_INT 1
64381: PPUSH
64382: LD_VAR 0 3
64386: PPUSH
64387: CALL_OW 12
64391: ARRAY
64392: ST_TO_ADDR
// if Crawls ( un ) then
64393: LD_VAR 0 2
64397: PPUSH
64398: CALL_OW 318
64402: IFFALSE 64413
// ComWalk ( un ) ;
64404: LD_VAR 0 2
64408: PPUSH
64409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64413: LD_VAR 0 2
64417: PPUSH
64418: LD_INT 8
64420: PPUSH
64421: CALL_OW 336
// end ;
64425: PPOPN 3
64427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
64428: LD_EXP 38
64432: IFFALSE 64440
64434: PUSH
64435: LD_EXP 82
64439: AND
64440: IFFALSE 64584
64442: GO 64444
64444: DISABLE
64445: LD_INT 0
64447: PPUSH
64448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64449: LD_ADDR_VAR 0 2
64453: PUSH
64454: LD_INT 22
64456: PUSH
64457: LD_OWVAR 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 21
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 34
64481: PUSH
64482: LD_INT 12
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 34
64491: PUSH
64492: LD_INT 51
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 34
64501: PUSH
64502: LD_INT 32
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: PPUSH
64520: CALL_OW 69
64524: ST_TO_ADDR
// if not tmp then
64525: LD_VAR 0 2
64529: NOT
64530: IFFALSE 64534
// exit ;
64532: GO 64584
// for i in tmp do
64534: LD_ADDR_VAR 0 1
64538: PUSH
64539: LD_VAR 0 2
64543: PUSH
64544: FOR_IN
64545: IFFALSE 64582
// if GetCargo ( i , mat_artifact ) = 0 then
64547: LD_VAR 0 1
64551: PPUSH
64552: LD_INT 4
64554: PPUSH
64555: CALL_OW 289
64559: PUSH
64560: LD_INT 0
64562: EQUAL
64563: IFFALSE 64580
// SetCargo ( i , mat_siberit , 100 ) ;
64565: LD_VAR 0 1
64569: PPUSH
64570: LD_INT 3
64572: PPUSH
64573: LD_INT 100
64575: PPUSH
64576: CALL_OW 290
64580: GO 64544
64582: POP
64583: POP
// end ;
64584: PPOPN 2
64586: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64587: LD_EXP 38
64591: IFFALSE 64599
64593: PUSH
64594: LD_EXP 83
64598: AND
64599: IFFALSE 64782
64601: GO 64603
64603: DISABLE
64604: LD_INT 0
64606: PPUSH
64607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64608: LD_ADDR_VAR 0 2
64612: PUSH
64613: LD_INT 22
64615: PUSH
64616: LD_OWVAR 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PPUSH
64625: CALL_OW 69
64629: ST_TO_ADDR
// if not tmp then
64630: LD_VAR 0 2
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 64782
// for i := 1 to 2 do
64639: LD_ADDR_VAR 0 1
64643: PUSH
64644: DOUBLE
64645: LD_INT 1
64647: DEC
64648: ST_TO_ADDR
64649: LD_INT 2
64651: PUSH
64652: FOR_TO
64653: IFFALSE 64780
// begin uc_side := your_side ;
64655: LD_ADDR_OWVAR 20
64659: PUSH
64660: LD_OWVAR 2
64664: ST_TO_ADDR
// uc_nation := nation_american ;
64665: LD_ADDR_OWVAR 21
64669: PUSH
64670: LD_INT 1
64672: ST_TO_ADDR
// vc_chassis := us_morphling ;
64673: LD_ADDR_OWVAR 37
64677: PUSH
64678: LD_INT 5
64680: ST_TO_ADDR
// vc_engine := engine_siberite ;
64681: LD_ADDR_OWVAR 39
64685: PUSH
64686: LD_INT 3
64688: ST_TO_ADDR
// vc_control := control_computer ;
64689: LD_ADDR_OWVAR 38
64693: PUSH
64694: LD_INT 3
64696: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64697: LD_ADDR_OWVAR 40
64701: PUSH
64702: LD_INT 10
64704: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 1
64712: ARRAY
64713: PPUSH
64714: CALL_OW 310
64718: NOT
64719: IFFALSE 64766
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64721: CALL_OW 45
64725: PPUSH
64726: LD_VAR 0 2
64730: PUSH
64731: LD_INT 1
64733: ARRAY
64734: PPUSH
64735: CALL_OW 250
64739: PPUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 1
64747: ARRAY
64748: PPUSH
64749: CALL_OW 251
64753: PPUSH
64754: LD_INT 12
64756: PPUSH
64757: LD_INT 1
64759: PPUSH
64760: CALL_OW 50
64764: GO 64778
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64766: CALL_OW 45
64770: PPUSH
64771: LD_INT 1
64773: PPUSH
64774: CALL_OW 51
// end ;
64778: GO 64652
64780: POP
64781: POP
// end ;
64782: PPOPN 2
64784: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64785: LD_EXP 38
64789: IFFALSE 64797
64791: PUSH
64792: LD_EXP 84
64796: AND
64797: IFFALSE 65019
64799: GO 64801
64801: DISABLE
64802: LD_INT 0
64804: PPUSH
64805: PPUSH
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64810: LD_ADDR_VAR 0 6
64814: PUSH
64815: LD_INT 22
64817: PUSH
64818: LD_OWVAR 2
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 21
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 23
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PPUSH
64859: CALL_OW 69
64863: ST_TO_ADDR
// if not tmp then
64864: LD_VAR 0 6
64868: NOT
64869: IFFALSE 64873
// exit ;
64871: GO 65019
// s1 := rand ( 1 , 4 ) ;
64873: LD_ADDR_VAR 0 2
64877: PUSH
64878: LD_INT 1
64880: PPUSH
64881: LD_INT 4
64883: PPUSH
64884: CALL_OW 12
64888: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64889: LD_ADDR_VAR 0 4
64893: PUSH
64894: LD_VAR 0 6
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PPUSH
64903: LD_VAR 0 2
64907: PPUSH
64908: CALL_OW 259
64912: ST_TO_ADDR
// if s1 = 1 then
64913: LD_VAR 0 2
64917: PUSH
64918: LD_INT 1
64920: EQUAL
64921: IFFALSE 64941
// s2 := rand ( 2 , 4 ) else
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_INT 2
64930: PPUSH
64931: LD_INT 4
64933: PPUSH
64934: CALL_OW 12
64938: ST_TO_ADDR
64939: GO 64949
// s2 := 1 ;
64941: LD_ADDR_VAR 0 3
64945: PUSH
64946: LD_INT 1
64948: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64949: LD_ADDR_VAR 0 5
64953: PUSH
64954: LD_VAR 0 6
64958: PUSH
64959: LD_INT 1
64961: ARRAY
64962: PPUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: CALL_OW 259
64972: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64973: LD_VAR 0 6
64977: PUSH
64978: LD_INT 1
64980: ARRAY
64981: PPUSH
64982: LD_VAR 0 2
64986: PPUSH
64987: LD_VAR 0 5
64991: PPUSH
64992: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64996: LD_VAR 0 6
65000: PUSH
65001: LD_INT 1
65003: ARRAY
65004: PPUSH
65005: LD_VAR 0 3
65009: PPUSH
65010: LD_VAR 0 4
65014: PPUSH
65015: CALL_OW 237
// end ;
65019: PPOPN 6
65021: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
65022: LD_EXP 38
65026: IFFALSE 65034
65028: PUSH
65029: LD_EXP 85
65033: AND
65034: IFFALSE 65113
65036: GO 65038
65038: DISABLE
65039: LD_INT 0
65041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
65042: LD_ADDR_VAR 0 1
65046: PUSH
65047: LD_INT 22
65049: PUSH
65050: LD_OWVAR 2
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 30
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PPUSH
65073: CALL_OW 69
65077: ST_TO_ADDR
// if not tmp then
65078: LD_VAR 0 1
65082: NOT
65083: IFFALSE 65087
// exit ;
65085: GO 65113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 1
65094: PPUSH
65095: LD_VAR 0 1
65099: PPUSH
65100: CALL_OW 12
65104: ARRAY
65105: PPUSH
65106: LD_INT 1
65108: PPUSH
65109: CALL_OW 234
// end ;
65113: PPOPN 1
65115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
65116: LD_EXP 38
65120: IFFALSE 65128
65122: PUSH
65123: LD_EXP 86
65127: AND
65128: IFFALSE 65240
65130: GO 65132
65132: DISABLE
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
65137: LD_ADDR_VAR 0 2
65141: PUSH
65142: LD_INT 22
65144: PUSH
65145: LD_OWVAR 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: LD_INT 30
65159: PUSH
65160: LD_INT 27
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 30
65169: PUSH
65170: LD_INT 26
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 30
65179: PUSH
65180: LD_INT 28
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PPUSH
65197: CALL_OW 69
65201: ST_TO_ADDR
// if not tmp then
65202: LD_VAR 0 2
65206: NOT
65207: IFFALSE 65211
// exit ;
65209: GO 65240
// for i in tmp do
65211: LD_ADDR_VAR 0 1
65215: PUSH
65216: LD_VAR 0 2
65220: PUSH
65221: FOR_IN
65222: IFFALSE 65238
// SetLives ( i , 1 ) ;
65224: LD_VAR 0 1
65228: PPUSH
65229: LD_INT 1
65231: PPUSH
65232: CALL_OW 234
65236: GO 65221
65238: POP
65239: POP
// end ;
65240: PPOPN 2
65242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
65243: LD_EXP 38
65247: IFFALSE 65255
65249: PUSH
65250: LD_EXP 87
65254: AND
65255: IFFALSE 65542
65257: GO 65259
65259: DISABLE
65260: LD_INT 0
65262: PPUSH
65263: PPUSH
65264: PPUSH
// begin i := rand ( 1 , 7 ) ;
65265: LD_ADDR_VAR 0 1
65269: PUSH
65270: LD_INT 1
65272: PPUSH
65273: LD_INT 7
65275: PPUSH
65276: CALL_OW 12
65280: ST_TO_ADDR
// case i of 1 :
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 1
65288: DOUBLE
65289: EQUAL
65290: IFTRUE 65294
65292: GO 65304
65294: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
65295: LD_STRING earthquake(getX(game), 0, 32)
65297: PPUSH
65298: CALL_OW 559
65302: GO 65542
65304: LD_INT 2
65306: DOUBLE
65307: EQUAL
65308: IFTRUE 65312
65310: GO 65326
65312: POP
// begin ToLua ( displayStucuk(); ) ;
65313: LD_STRING displayStucuk();
65315: PPUSH
65316: CALL_OW 559
// ResetFog ;
65320: CALL_OW 335
// end ; 3 :
65324: GO 65542
65326: LD_INT 3
65328: DOUBLE
65329: EQUAL
65330: IFTRUE 65334
65332: GO 65438
65334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65335: LD_ADDR_VAR 0 2
65339: PUSH
65340: LD_INT 22
65342: PUSH
65343: LD_OWVAR 2
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 25
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PPUSH
65366: CALL_OW 69
65370: ST_TO_ADDR
// if not tmp then
65371: LD_VAR 0 2
65375: NOT
65376: IFFALSE 65380
// exit ;
65378: GO 65542
// un := tmp [ rand ( 1 , tmp ) ] ;
65380: LD_ADDR_VAR 0 3
65384: PUSH
65385: LD_VAR 0 2
65389: PUSH
65390: LD_INT 1
65392: PPUSH
65393: LD_VAR 0 2
65397: PPUSH
65398: CALL_OW 12
65402: ARRAY
65403: ST_TO_ADDR
// if Crawls ( un ) then
65404: LD_VAR 0 3
65408: PPUSH
65409: CALL_OW 318
65413: IFFALSE 65424
// ComWalk ( un ) ;
65415: LD_VAR 0 3
65419: PPUSH
65420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65424: LD_VAR 0 3
65428: PPUSH
65429: LD_INT 8
65431: PPUSH
65432: CALL_OW 336
// end ; 4 :
65436: GO 65542
65438: LD_INT 4
65440: DOUBLE
65441: EQUAL
65442: IFTRUE 65446
65444: GO 65520
65446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65447: LD_ADDR_VAR 0 2
65451: PUSH
65452: LD_INT 22
65454: PUSH
65455: LD_OWVAR 2
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 30
65466: PUSH
65467: LD_INT 29
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PPUSH
65478: CALL_OW 69
65482: ST_TO_ADDR
// if not tmp then
65483: LD_VAR 0 2
65487: NOT
65488: IFFALSE 65492
// exit ;
65490: GO 65542
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65492: LD_VAR 0 2
65496: PUSH
65497: LD_INT 1
65499: ARRAY
65500: PPUSH
65501: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65505: LD_VAR 0 2
65509: PUSH
65510: LD_INT 1
65512: ARRAY
65513: PPUSH
65514: CALL_OW 65
// end ; 5 .. 7 :
65518: GO 65542
65520: LD_INT 5
65522: DOUBLE
65523: GREATEREQUAL
65524: IFFALSE 65532
65526: LD_INT 7
65528: DOUBLE
65529: LESSEQUAL
65530: IFTRUE 65534
65532: GO 65541
65534: POP
// StreamSibBomb ; end ;
65535: CALL 61723 0 0
65539: GO 65542
65541: POP
// end ;
65542: PPOPN 3
65544: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65545: LD_EXP 38
65549: IFFALSE 65557
65551: PUSH
65552: LD_EXP 88
65556: AND
65557: IFFALSE 65713
65559: GO 65561
65561: DISABLE
65562: LD_INT 0
65564: PPUSH
65565: PPUSH
65566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_INT 81
65574: PUSH
65575: LD_OWVAR 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 21
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 21
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PPUSH
65616: CALL_OW 69
65620: ST_TO_ADDR
// if not tmp then
65621: LD_VAR 0 2
65625: NOT
65626: IFFALSE 65630
// exit ;
65628: GO 65713
// p := 0 ;
65630: LD_ADDR_VAR 0 3
65634: PUSH
65635: LD_INT 0
65637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65638: LD_INT 35
65640: PPUSH
65641: CALL_OW 67
// p := p + 1 ;
65645: LD_ADDR_VAR 0 3
65649: PUSH
65650: LD_VAR 0 3
65654: PUSH
65655: LD_INT 1
65657: PLUS
65658: ST_TO_ADDR
// for i in tmp do
65659: LD_ADDR_VAR 0 1
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: FOR_IN
65670: IFFALSE 65701
// if GetLives ( i ) < 1000 then
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 256
65681: PUSH
65682: LD_INT 1000
65684: LESS
65685: IFFALSE 65699
// SetLives ( i , 1000 ) ;
65687: LD_VAR 0 1
65691: PPUSH
65692: LD_INT 1000
65694: PPUSH
65695: CALL_OW 234
65699: GO 65669
65701: POP
65702: POP
// until p > 20 ;
65703: LD_VAR 0 3
65707: PUSH
65708: LD_INT 20
65710: GREATER
65711: IFFALSE 65638
// end ;
65713: PPOPN 3
65715: END
// every 0 0$1 trigger StreamModeActive and sTime do
65716: LD_EXP 38
65720: IFFALSE 65728
65722: PUSH
65723: LD_EXP 89
65727: AND
65728: IFFALSE 65763
65730: GO 65732
65732: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65733: LD_INT 28
65735: PPUSH
65736: LD_OWVAR 2
65740: PPUSH
65741: LD_INT 2
65743: PPUSH
65744: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65748: LD_INT 30
65750: PPUSH
65751: LD_OWVAR 2
65755: PPUSH
65756: LD_INT 2
65758: PPUSH
65759: CALL_OW 322
// end ;
65763: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65764: LD_EXP 38
65768: IFFALSE 65776
65770: PUSH
65771: LD_EXP 90
65775: AND
65776: IFFALSE 65897
65778: GO 65780
65780: DISABLE
65781: LD_INT 0
65783: PPUSH
65784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65785: LD_ADDR_VAR 0 2
65789: PUSH
65790: LD_INT 22
65792: PUSH
65793: LD_OWVAR 2
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 21
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: LD_INT 23
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: LIST
65833: PPUSH
65834: CALL_OW 69
65838: ST_TO_ADDR
// if not tmp then
65839: LD_VAR 0 2
65843: NOT
65844: IFFALSE 65848
// exit ;
65846: GO 65897
// for i in tmp do
65848: LD_ADDR_VAR 0 1
65852: PUSH
65853: LD_VAR 0 2
65857: PUSH
65858: FOR_IN
65859: IFFALSE 65895
// begin if Crawls ( i ) then
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 318
65870: IFFALSE 65881
// ComWalk ( i ) ;
65872: LD_VAR 0 1
65876: PPUSH
65877: CALL_OW 138
// SetClass ( i , 2 ) ;
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_INT 2
65888: PPUSH
65889: CALL_OW 336
// end ;
65893: GO 65858
65895: POP
65896: POP
// end ;
65897: PPOPN 2
65899: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65900: LD_EXP 38
65904: IFFALSE 65912
65906: PUSH
65907: LD_EXP 91
65911: AND
65912: IFFALSE 66202
65914: GO 65916
65916: DISABLE
65917: LD_INT 0
65919: PPUSH
65920: PPUSH
65921: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65922: LD_OWVAR 2
65926: PPUSH
65927: LD_INT 9
65929: PPUSH
65930: LD_INT 1
65932: PPUSH
65933: LD_INT 1
65935: PPUSH
65936: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65940: LD_INT 9
65942: PPUSH
65943: LD_OWVAR 2
65947: PPUSH
65948: CALL_OW 343
// uc_side := 9 ;
65952: LD_ADDR_OWVAR 20
65956: PUSH
65957: LD_INT 9
65959: ST_TO_ADDR
// uc_nation := 2 ;
65960: LD_ADDR_OWVAR 21
65964: PUSH
65965: LD_INT 2
65967: ST_TO_ADDR
// hc_name := Dark Warrior ;
65968: LD_ADDR_OWVAR 26
65972: PUSH
65973: LD_STRING Dark Warrior
65975: ST_TO_ADDR
// hc_gallery :=  ;
65976: LD_ADDR_OWVAR 33
65980: PUSH
65981: LD_STRING 
65983: ST_TO_ADDR
// hc_noskilllimit := true ;
65984: LD_ADDR_OWVAR 76
65988: PUSH
65989: LD_INT 1
65991: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65992: LD_ADDR_OWVAR 31
65996: PUSH
65997: LD_INT 30
65999: PUSH
66000: LD_INT 30
66002: PUSH
66003: LD_INT 30
66005: PUSH
66006: LD_INT 30
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// un := CreateHuman ;
66015: LD_ADDR_VAR 0 3
66019: PUSH
66020: CALL_OW 44
66024: ST_TO_ADDR
// hc_noskilllimit := false ;
66025: LD_ADDR_OWVAR 76
66029: PUSH
66030: LD_INT 0
66032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66033: LD_VAR 0 3
66037: PPUSH
66038: LD_INT 1
66040: PPUSH
66041: CALL_OW 51
// ToLua ( playRanger() ) ;
66045: LD_STRING playRanger()
66047: PPUSH
66048: CALL_OW 559
// p := 0 ;
66052: LD_ADDR_VAR 0 2
66056: PUSH
66057: LD_INT 0
66059: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
66060: LD_INT 35
66062: PPUSH
66063: CALL_OW 67
// p := p + 1 ;
66067: LD_ADDR_VAR 0 2
66071: PUSH
66072: LD_VAR 0 2
66076: PUSH
66077: LD_INT 1
66079: PLUS
66080: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
66081: LD_VAR 0 3
66085: PPUSH
66086: CALL_OW 256
66090: PUSH
66091: LD_INT 1000
66093: LESS
66094: IFFALSE 66108
// SetLives ( un , 1000 ) ;
66096: LD_VAR 0 3
66100: PPUSH
66101: LD_INT 1000
66103: PPUSH
66104: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
66108: LD_VAR 0 3
66112: PPUSH
66113: LD_INT 81
66115: PUSH
66116: LD_OWVAR 2
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 91
66127: PUSH
66128: LD_VAR 0 3
66132: PUSH
66133: LD_INT 30
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PPUSH
66145: CALL_OW 69
66149: PPUSH
66150: LD_VAR 0 3
66154: PPUSH
66155: CALL_OW 74
66159: PPUSH
66160: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
66164: LD_VAR 0 2
66168: PUSH
66169: LD_INT 80
66171: GREATER
66172: IFTRUE 66185
66174: PUSH
66175: LD_VAR 0 3
66179: PPUSH
66180: CALL_OW 301
66184: OR
66185: IFFALSE 66060
// if un then
66187: LD_VAR 0 3
66191: IFFALSE 66202
// RemoveUnit ( un ) ;
66193: LD_VAR 0 3
66197: PPUSH
66198: CALL_OW 64
// end ;
66202: PPOPN 3
66204: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
66205: LD_EXP 92
66209: IFFALSE 66325
66211: GO 66213
66213: DISABLE
66214: LD_INT 0
66216: PPUSH
66217: PPUSH
66218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66219: LD_ADDR_VAR 0 2
66223: PUSH
66224: LD_INT 81
66226: PUSH
66227: LD_OWVAR 2
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 21
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PPUSH
66250: CALL_OW 69
66254: ST_TO_ADDR
// ToLua ( playComputer() ) ;
66255: LD_STRING playComputer()
66257: PPUSH
66258: CALL_OW 559
// if not tmp then
66262: LD_VAR 0 2
66266: NOT
66267: IFFALSE 66271
// exit ;
66269: GO 66325
// for i in tmp do
66271: LD_ADDR_VAR 0 1
66275: PUSH
66276: LD_VAR 0 2
66280: PUSH
66281: FOR_IN
66282: IFFALSE 66323
// for j := 1 to 4 do
66284: LD_ADDR_VAR 0 3
66288: PUSH
66289: DOUBLE
66290: LD_INT 1
66292: DEC
66293: ST_TO_ADDR
66294: LD_INT 4
66296: PUSH
66297: FOR_TO
66298: IFFALSE 66319
// SetSkill ( i , j , 10 ) ;
66300: LD_VAR 0 1
66304: PPUSH
66305: LD_VAR 0 3
66309: PPUSH
66310: LD_INT 10
66312: PPUSH
66313: CALL_OW 237
66317: GO 66297
66319: POP
66320: POP
66321: GO 66281
66323: POP
66324: POP
// end ;
66325: PPOPN 3
66327: END
// every 0 0$1 trigger s30 do var i , tmp ;
66328: LD_EXP 93
66332: IFFALSE 66401
66334: GO 66336
66336: DISABLE
66337: LD_INT 0
66339: PPUSH
66340: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66341: LD_ADDR_VAR 0 2
66345: PUSH
66346: LD_INT 22
66348: PUSH
66349: LD_OWVAR 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PPUSH
66358: CALL_OW 69
66362: ST_TO_ADDR
// if not tmp then
66363: LD_VAR 0 2
66367: NOT
66368: IFFALSE 66372
// exit ;
66370: GO 66401
// for i in tmp do
66372: LD_ADDR_VAR 0 1
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: FOR_IN
66383: IFFALSE 66399
// SetLives ( i , 300 ) ;
66385: LD_VAR 0 1
66389: PPUSH
66390: LD_INT 300
66392: PPUSH
66393: CALL_OW 234
66397: GO 66382
66399: POP
66400: POP
// end ;
66401: PPOPN 2
66403: END
// every 0 0$1 trigger s60 do var i , tmp ;
66404: LD_EXP 94
66408: IFFALSE 66477
66410: GO 66412
66412: DISABLE
66413: LD_INT 0
66415: PPUSH
66416: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66417: LD_ADDR_VAR 0 2
66421: PUSH
66422: LD_INT 22
66424: PUSH
66425: LD_OWVAR 2
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PPUSH
66434: CALL_OW 69
66438: ST_TO_ADDR
// if not tmp then
66439: LD_VAR 0 2
66443: NOT
66444: IFFALSE 66448
// exit ;
66446: GO 66477
// for i in tmp do
66448: LD_ADDR_VAR 0 1
66452: PUSH
66453: LD_VAR 0 2
66457: PUSH
66458: FOR_IN
66459: IFFALSE 66475
// SetLives ( i , 600 ) ;
66461: LD_VAR 0 1
66465: PPUSH
66466: LD_INT 600
66468: PPUSH
66469: CALL_OW 234
66473: GO 66458
66475: POP
66476: POP
// end ;
66477: PPOPN 2
66479: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66480: LD_INT 0
66482: PPUSH
// case cmd of 301 :
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 301
66490: DOUBLE
66491: EQUAL
66492: IFTRUE 66496
66494: GO 66528
66496: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66497: LD_VAR 0 6
66501: PPUSH
66502: LD_VAR 0 7
66506: PPUSH
66507: LD_VAR 0 8
66511: PPUSH
66512: LD_VAR 0 4
66516: PPUSH
66517: LD_VAR 0 5
66521: PPUSH
66522: CALL 67741 0 5
66526: GO 66649
66528: LD_INT 302
66530: DOUBLE
66531: EQUAL
66532: IFTRUE 66536
66534: GO 66573
66536: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66537: LD_VAR 0 6
66541: PPUSH
66542: LD_VAR 0 7
66546: PPUSH
66547: LD_VAR 0 8
66551: PPUSH
66552: LD_VAR 0 9
66556: PPUSH
66557: LD_VAR 0 4
66561: PPUSH
66562: LD_VAR 0 5
66566: PPUSH
66567: CALL 67832 0 6
66571: GO 66649
66573: LD_INT 303
66575: DOUBLE
66576: EQUAL
66577: IFTRUE 66581
66579: GO 66618
66581: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66582: LD_VAR 0 6
66586: PPUSH
66587: LD_VAR 0 7
66591: PPUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: LD_VAR 0 9
66601: PPUSH
66602: LD_VAR 0 4
66606: PPUSH
66607: LD_VAR 0 5
66611: PPUSH
66612: CALL 66654 0 6
66616: GO 66649
66618: LD_INT 304
66620: DOUBLE
66621: EQUAL
66622: IFTRUE 66626
66624: GO 66648
66626: POP
// hHackTeleport ( unit , x , y ) ; end ;
66627: LD_VAR 0 2
66631: PPUSH
66632: LD_VAR 0 4
66636: PPUSH
66637: LD_VAR 0 5
66641: PPUSH
66642: CALL 68425 0 3
66646: GO 66649
66648: POP
// end ;
66649: LD_VAR 0 12
66653: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66654: LD_INT 0
66656: PPUSH
66657: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66658: LD_VAR 0 1
66662: PUSH
66663: LD_INT 1
66665: LESS
66666: IFTRUE 66678
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 3
66676: GREATER
66677: OR
66678: IFTRUE 66696
66680: PUSH
66681: LD_VAR 0 5
66685: PPUSH
66686: LD_VAR 0 6
66690: PPUSH
66691: CALL_OW 428
66695: OR
66696: IFFALSE 66700
// exit ;
66698: GO 67428
// uc_side := your_side ;
66700: LD_ADDR_OWVAR 20
66704: PUSH
66705: LD_OWVAR 2
66709: ST_TO_ADDR
// uc_nation := nation ;
66710: LD_ADDR_OWVAR 21
66714: PUSH
66715: LD_VAR 0 1
66719: ST_TO_ADDR
// bc_level = 1 ;
66720: LD_ADDR_OWVAR 43
66724: PUSH
66725: LD_INT 1
66727: ST_TO_ADDR
// case btype of 1 :
66728: LD_VAR 0 2
66732: PUSH
66733: LD_INT 1
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66741
66739: GO 66752
66741: POP
// bc_type := b_depot ; 2 :
66742: LD_ADDR_OWVAR 42
66746: PUSH
66747: LD_INT 0
66749: ST_TO_ADDR
66750: GO 67372
66752: LD_INT 2
66754: DOUBLE
66755: EQUAL
66756: IFTRUE 66760
66758: GO 66771
66760: POP
// bc_type := b_warehouse ; 3 :
66761: LD_ADDR_OWVAR 42
66765: PUSH
66766: LD_INT 1
66768: ST_TO_ADDR
66769: GO 67372
66771: LD_INT 3
66773: DOUBLE
66774: EQUAL
66775: IFTRUE 66779
66777: GO 66790
66779: POP
// bc_type := b_lab ; 4 .. 9 :
66780: LD_ADDR_OWVAR 42
66784: PUSH
66785: LD_INT 6
66787: ST_TO_ADDR
66788: GO 67372
66790: LD_INT 4
66792: DOUBLE
66793: GREATEREQUAL
66794: IFFALSE 66802
66796: LD_INT 9
66798: DOUBLE
66799: LESSEQUAL
66800: IFTRUE 66804
66802: GO 66864
66804: POP
// begin bc_type := b_lab_half ;
66805: LD_ADDR_OWVAR 42
66809: PUSH
66810: LD_INT 7
66812: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66813: LD_ADDR_OWVAR 44
66817: PUSH
66818: LD_INT 10
66820: PUSH
66821: LD_INT 11
66823: PUSH
66824: LD_INT 12
66826: PUSH
66827: LD_INT 15
66829: PUSH
66830: LD_INT 14
66832: PUSH
66833: LD_INT 13
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: PUSH
66844: LD_VAR 0 2
66848: PUSH
66849: LD_INT 3
66851: MINUS
66852: ARRAY
66853: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66854: LD_ADDR_OWVAR 45
66858: PUSH
66859: LD_INT 9
66861: ST_TO_ADDR
// end ; 10 .. 13 :
66862: GO 67372
66864: LD_INT 10
66866: DOUBLE
66867: GREATEREQUAL
66868: IFFALSE 66876
66870: LD_INT 13
66872: DOUBLE
66873: LESSEQUAL
66874: IFTRUE 66878
66876: GO 66955
66878: POP
// begin bc_type := b_lab_full ;
66879: LD_ADDR_OWVAR 42
66883: PUSH
66884: LD_INT 8
66886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66887: LD_ADDR_OWVAR 44
66891: PUSH
66892: LD_INT 10
66894: PUSH
66895: LD_INT 12
66897: PUSH
66898: LD_INT 14
66900: PUSH
66901: LD_INT 13
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: PUSH
66910: LD_VAR 0 2
66914: PUSH
66915: LD_INT 9
66917: MINUS
66918: ARRAY
66919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66920: LD_ADDR_OWVAR 45
66924: PUSH
66925: LD_INT 11
66927: PUSH
66928: LD_INT 15
66930: PUSH
66931: LD_INT 12
66933: PUSH
66934: LD_INT 15
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: PUSH
66943: LD_VAR 0 2
66947: PUSH
66948: LD_INT 9
66950: MINUS
66951: ARRAY
66952: ST_TO_ADDR
// end ; 14 :
66953: GO 67372
66955: LD_INT 14
66957: DOUBLE
66958: EQUAL
66959: IFTRUE 66963
66961: GO 66974
66963: POP
// bc_type := b_workshop ; 15 :
66964: LD_ADDR_OWVAR 42
66968: PUSH
66969: LD_INT 2
66971: ST_TO_ADDR
66972: GO 67372
66974: LD_INT 15
66976: DOUBLE
66977: EQUAL
66978: IFTRUE 66982
66980: GO 66993
66982: POP
// bc_type := b_factory ; 16 :
66983: LD_ADDR_OWVAR 42
66987: PUSH
66988: LD_INT 3
66990: ST_TO_ADDR
66991: GO 67372
66993: LD_INT 16
66995: DOUBLE
66996: EQUAL
66997: IFTRUE 67001
66999: GO 67012
67001: POP
// bc_type := b_ext_gun ; 17 :
67002: LD_ADDR_OWVAR 42
67006: PUSH
67007: LD_INT 17
67009: ST_TO_ADDR
67010: GO 67372
67012: LD_INT 17
67014: DOUBLE
67015: EQUAL
67016: IFTRUE 67020
67018: GO 67048
67020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
67021: LD_ADDR_OWVAR 42
67025: PUSH
67026: LD_INT 19
67028: PUSH
67029: LD_INT 23
67031: PUSH
67032: LD_INT 19
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: PUSH
67040: LD_VAR 0 1
67044: ARRAY
67045: ST_TO_ADDR
67046: GO 67372
67048: LD_INT 18
67050: DOUBLE
67051: EQUAL
67052: IFTRUE 67056
67054: GO 67067
67056: POP
// bc_type := b_ext_radar ; 19 :
67057: LD_ADDR_OWVAR 42
67061: PUSH
67062: LD_INT 20
67064: ST_TO_ADDR
67065: GO 67372
67067: LD_INT 19
67069: DOUBLE
67070: EQUAL
67071: IFTRUE 67075
67073: GO 67086
67075: POP
// bc_type := b_ext_radio ; 20 :
67076: LD_ADDR_OWVAR 42
67080: PUSH
67081: LD_INT 22
67083: ST_TO_ADDR
67084: GO 67372
67086: LD_INT 20
67088: DOUBLE
67089: EQUAL
67090: IFTRUE 67094
67092: GO 67105
67094: POP
// bc_type := b_ext_siberium ; 21 :
67095: LD_ADDR_OWVAR 42
67099: PUSH
67100: LD_INT 21
67102: ST_TO_ADDR
67103: GO 67372
67105: LD_INT 21
67107: DOUBLE
67108: EQUAL
67109: IFTRUE 67113
67111: GO 67124
67113: POP
// bc_type := b_ext_computer ; 22 :
67114: LD_ADDR_OWVAR 42
67118: PUSH
67119: LD_INT 24
67121: ST_TO_ADDR
67122: GO 67372
67124: LD_INT 22
67126: DOUBLE
67127: EQUAL
67128: IFTRUE 67132
67130: GO 67143
67132: POP
// bc_type := b_ext_track ; 23 :
67133: LD_ADDR_OWVAR 42
67137: PUSH
67138: LD_INT 16
67140: ST_TO_ADDR
67141: GO 67372
67143: LD_INT 23
67145: DOUBLE
67146: EQUAL
67147: IFTRUE 67151
67149: GO 67162
67151: POP
// bc_type := b_ext_laser ; 24 :
67152: LD_ADDR_OWVAR 42
67156: PUSH
67157: LD_INT 25
67159: ST_TO_ADDR
67160: GO 67372
67162: LD_INT 24
67164: DOUBLE
67165: EQUAL
67166: IFTRUE 67170
67168: GO 67181
67170: POP
// bc_type := b_control_tower ; 25 :
67171: LD_ADDR_OWVAR 42
67175: PUSH
67176: LD_INT 36
67178: ST_TO_ADDR
67179: GO 67372
67181: LD_INT 25
67183: DOUBLE
67184: EQUAL
67185: IFTRUE 67189
67187: GO 67200
67189: POP
// bc_type := b_breastwork ; 26 :
67190: LD_ADDR_OWVAR 42
67194: PUSH
67195: LD_INT 31
67197: ST_TO_ADDR
67198: GO 67372
67200: LD_INT 26
67202: DOUBLE
67203: EQUAL
67204: IFTRUE 67208
67206: GO 67219
67208: POP
// bc_type := b_bunker ; 27 :
67209: LD_ADDR_OWVAR 42
67213: PUSH
67214: LD_INT 32
67216: ST_TO_ADDR
67217: GO 67372
67219: LD_INT 27
67221: DOUBLE
67222: EQUAL
67223: IFTRUE 67227
67225: GO 67238
67227: POP
// bc_type := b_turret ; 28 :
67228: LD_ADDR_OWVAR 42
67232: PUSH
67233: LD_INT 33
67235: ST_TO_ADDR
67236: GO 67372
67238: LD_INT 28
67240: DOUBLE
67241: EQUAL
67242: IFTRUE 67246
67244: GO 67257
67246: POP
// bc_type := b_armoury ; 29 :
67247: LD_ADDR_OWVAR 42
67251: PUSH
67252: LD_INT 4
67254: ST_TO_ADDR
67255: GO 67372
67257: LD_INT 29
67259: DOUBLE
67260: EQUAL
67261: IFTRUE 67265
67263: GO 67276
67265: POP
// bc_type := b_barracks ; 30 :
67266: LD_ADDR_OWVAR 42
67270: PUSH
67271: LD_INT 5
67273: ST_TO_ADDR
67274: GO 67372
67276: LD_INT 30
67278: DOUBLE
67279: EQUAL
67280: IFTRUE 67284
67282: GO 67295
67284: POP
// bc_type := b_solar_power ; 31 :
67285: LD_ADDR_OWVAR 42
67289: PUSH
67290: LD_INT 27
67292: ST_TO_ADDR
67293: GO 67372
67295: LD_INT 31
67297: DOUBLE
67298: EQUAL
67299: IFTRUE 67303
67301: GO 67314
67303: POP
// bc_type := b_oil_power ; 32 :
67304: LD_ADDR_OWVAR 42
67308: PUSH
67309: LD_INT 26
67311: ST_TO_ADDR
67312: GO 67372
67314: LD_INT 32
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67322
67320: GO 67333
67322: POP
// bc_type := b_siberite_power ; 33 :
67323: LD_ADDR_OWVAR 42
67327: PUSH
67328: LD_INT 28
67330: ST_TO_ADDR
67331: GO 67372
67333: LD_INT 33
67335: DOUBLE
67336: EQUAL
67337: IFTRUE 67341
67339: GO 67352
67341: POP
// bc_type := b_oil_mine ; 34 :
67342: LD_ADDR_OWVAR 42
67346: PUSH
67347: LD_INT 29
67349: ST_TO_ADDR
67350: GO 67372
67352: LD_INT 34
67354: DOUBLE
67355: EQUAL
67356: IFTRUE 67360
67358: GO 67371
67360: POP
// bc_type := b_siberite_mine ; end ;
67361: LD_ADDR_OWVAR 42
67365: PUSH
67366: LD_INT 30
67368: ST_TO_ADDR
67369: GO 67372
67371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
67372: LD_ADDR_VAR 0 8
67376: PUSH
67377: LD_VAR 0 5
67381: PPUSH
67382: LD_VAR 0 6
67386: PPUSH
67387: LD_VAR 0 3
67391: PPUSH
67392: CALL_OW 47
67396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
67397: LD_OWVAR 42
67401: PUSH
67402: LD_INT 32
67404: PUSH
67405: LD_INT 33
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: IN
67412: IFFALSE 67428
// PlaceWeaponTurret ( b , weapon ) ;
67414: LD_VAR 0 8
67418: PPUSH
67419: LD_VAR 0 4
67423: PPUSH
67424: CALL_OW 431
// end ;
67428: LD_VAR 0 7
67432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
67433: LD_INT 0
67435: PPUSH
67436: PPUSH
67437: PPUSH
67438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67439: LD_ADDR_VAR 0 4
67443: PUSH
67444: LD_INT 22
67446: PUSH
67447: LD_OWVAR 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: LD_INT 30
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 30
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PPUSH
67488: CALL_OW 69
67492: ST_TO_ADDR
// if not tmp then
67493: LD_VAR 0 4
67497: NOT
67498: IFFALSE 67502
// exit ;
67500: GO 67561
// for i in tmp do
67502: LD_ADDR_VAR 0 2
67506: PUSH
67507: LD_VAR 0 4
67511: PUSH
67512: FOR_IN
67513: IFFALSE 67559
// for j = 1 to 3 do
67515: LD_ADDR_VAR 0 3
67519: PUSH
67520: DOUBLE
67521: LD_INT 1
67523: DEC
67524: ST_TO_ADDR
67525: LD_INT 3
67527: PUSH
67528: FOR_TO
67529: IFFALSE 67555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67531: LD_VAR 0 2
67535: PPUSH
67536: CALL_OW 274
67540: PPUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: LD_INT 99999
67548: PPUSH
67549: CALL_OW 277
67553: GO 67528
67555: POP
67556: POP
67557: GO 67512
67559: POP
67560: POP
// end ;
67561: LD_VAR 0 1
67565: RET
// export function hHackSetLevel10 ; var i , j ; begin
67566: LD_INT 0
67568: PPUSH
67569: PPUSH
67570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67571: LD_ADDR_VAR 0 2
67575: PUSH
67576: LD_INT 21
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PPUSH
67586: CALL_OW 69
67590: PUSH
67591: FOR_IN
67592: IFFALSE 67644
// if IsSelected ( i ) then
67594: LD_VAR 0 2
67598: PPUSH
67599: CALL_OW 306
67603: IFFALSE 67642
// begin for j := 1 to 4 do
67605: LD_ADDR_VAR 0 3
67609: PUSH
67610: DOUBLE
67611: LD_INT 1
67613: DEC
67614: ST_TO_ADDR
67615: LD_INT 4
67617: PUSH
67618: FOR_TO
67619: IFFALSE 67640
// SetSkill ( i , j , 10 ) ;
67621: LD_VAR 0 2
67625: PPUSH
67626: LD_VAR 0 3
67630: PPUSH
67631: LD_INT 10
67633: PPUSH
67634: CALL_OW 237
67638: GO 67618
67640: POP
67641: POP
// end ;
67642: GO 67591
67644: POP
67645: POP
// end ;
67646: LD_VAR 0 1
67650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67651: LD_INT 0
67653: PPUSH
67654: PPUSH
67655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67656: LD_ADDR_VAR 0 2
67660: PUSH
67661: LD_INT 22
67663: PUSH
67664: LD_OWVAR 2
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 21
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PPUSH
67687: CALL_OW 69
67691: PUSH
67692: FOR_IN
67693: IFFALSE 67734
// begin for j := 1 to 4 do
67695: LD_ADDR_VAR 0 3
67699: PUSH
67700: DOUBLE
67701: LD_INT 1
67703: DEC
67704: ST_TO_ADDR
67705: LD_INT 4
67707: PUSH
67708: FOR_TO
67709: IFFALSE 67730
// SetSkill ( i , j , 10 ) ;
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_VAR 0 3
67720: PPUSH
67721: LD_INT 10
67723: PPUSH
67724: CALL_OW 237
67728: GO 67708
67730: POP
67731: POP
// end ;
67732: GO 67692
67734: POP
67735: POP
// end ;
67736: LD_VAR 0 1
67740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67741: LD_INT 0
67743: PPUSH
// uc_side := your_side ;
67744: LD_ADDR_OWVAR 20
67748: PUSH
67749: LD_OWVAR 2
67753: ST_TO_ADDR
// uc_nation := nation ;
67754: LD_ADDR_OWVAR 21
67758: PUSH
67759: LD_VAR 0 1
67763: ST_TO_ADDR
// InitHc ;
67764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67768: LD_INT 0
67770: PPUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: LD_VAR 0 3
67780: PPUSH
67781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67785: LD_VAR 0 4
67789: PPUSH
67790: LD_VAR 0 5
67794: PPUSH
67795: CALL_OW 428
67799: PUSH
67800: LD_INT 0
67802: EQUAL
67803: IFFALSE 67827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67805: CALL_OW 44
67809: PPUSH
67810: LD_VAR 0 4
67814: PPUSH
67815: LD_VAR 0 5
67819: PPUSH
67820: LD_INT 1
67822: PPUSH
67823: CALL_OW 48
// end ;
67827: LD_VAR 0 6
67831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67832: LD_INT 0
67834: PPUSH
67835: PPUSH
// uc_side := your_side ;
67836: LD_ADDR_OWVAR 20
67840: PUSH
67841: LD_OWVAR 2
67845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67846: LD_VAR 0 1
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: LD_INT 4
67862: PUSH
67863: LD_INT 5
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: IN
67873: IFFALSE 67885
// uc_nation := nation_american else
67875: LD_ADDR_OWVAR 21
67879: PUSH
67880: LD_INT 1
67882: ST_TO_ADDR
67883: GO 67928
// if chassis in [ 11 , 12 , 13 , 14 ] then
67885: LD_VAR 0 1
67889: PUSH
67890: LD_INT 11
67892: PUSH
67893: LD_INT 12
67895: PUSH
67896: LD_INT 13
67898: PUSH
67899: LD_INT 14
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: IN
67908: IFFALSE 67920
// uc_nation := nation_arabian else
67910: LD_ADDR_OWVAR 21
67914: PUSH
67915: LD_INT 2
67917: ST_TO_ADDR
67918: GO 67928
// uc_nation := nation_russian ;
67920: LD_ADDR_OWVAR 21
67924: PUSH
67925: LD_INT 3
67927: ST_TO_ADDR
// vc_chassis := chassis ;
67928: LD_ADDR_OWVAR 37
67932: PUSH
67933: LD_VAR 0 1
67937: ST_TO_ADDR
// vc_engine := engine ;
67938: LD_ADDR_OWVAR 39
67942: PUSH
67943: LD_VAR 0 2
67947: ST_TO_ADDR
// vc_control := control ;
67948: LD_ADDR_OWVAR 38
67952: PUSH
67953: LD_VAR 0 3
67957: ST_TO_ADDR
// vc_weapon := weapon ;
67958: LD_ADDR_OWVAR 40
67962: PUSH
67963: LD_VAR 0 4
67967: ST_TO_ADDR
// un := CreateVehicle ;
67968: LD_ADDR_VAR 0 8
67972: PUSH
67973: CALL_OW 45
67977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67978: LD_VAR 0 8
67982: PPUSH
67983: LD_INT 0
67985: PPUSH
67986: LD_INT 5
67988: PPUSH
67989: CALL_OW 12
67993: PPUSH
67994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67998: LD_VAR 0 8
68002: PPUSH
68003: LD_VAR 0 5
68007: PPUSH
68008: LD_VAR 0 6
68012: PPUSH
68013: LD_INT 1
68015: PPUSH
68016: CALL_OW 48
// end ;
68020: LD_VAR 0 7
68024: RET
// export hInvincible ; every 1 do
68025: GO 68027
68027: DISABLE
// hInvincible := [ ] ;
68028: LD_ADDR_EXP 95
68032: PUSH
68033: EMPTY
68034: ST_TO_ADDR
68035: END
// every 10 do var i ;
68036: GO 68038
68038: DISABLE
68039: LD_INT 0
68041: PPUSH
// begin enable ;
68042: ENABLE
// if not hInvincible then
68043: LD_EXP 95
68047: NOT
68048: IFFALSE 68052
// exit ;
68050: GO 68096
// for i in hInvincible do
68052: LD_ADDR_VAR 0 1
68056: PUSH
68057: LD_EXP 95
68061: PUSH
68062: FOR_IN
68063: IFFALSE 68094
// if GetLives ( i ) < 1000 then
68065: LD_VAR 0 1
68069: PPUSH
68070: CALL_OW 256
68074: PUSH
68075: LD_INT 1000
68077: LESS
68078: IFFALSE 68092
// SetLives ( i , 1000 ) ;
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_INT 1000
68087: PPUSH
68088: CALL_OW 234
68092: GO 68062
68094: POP
68095: POP
// end ;
68096: PPOPN 1
68098: END
// export function hHackInvincible ; var i ; begin
68099: LD_INT 0
68101: PPUSH
68102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
68103: LD_ADDR_VAR 0 2
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: LD_INT 21
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 21
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: PPUSH
68136: CALL_OW 69
68140: PUSH
68141: FOR_IN
68142: IFFALSE 68203
// if IsSelected ( i ) then
68144: LD_VAR 0 2
68148: PPUSH
68149: CALL_OW 306
68153: IFFALSE 68201
// begin if i in hInvincible then
68155: LD_VAR 0 2
68159: PUSH
68160: LD_EXP 95
68164: IN
68165: IFFALSE 68185
// hInvincible := hInvincible diff i else
68167: LD_ADDR_EXP 95
68171: PUSH
68172: LD_EXP 95
68176: PUSH
68177: LD_VAR 0 2
68181: DIFF
68182: ST_TO_ADDR
68183: GO 68201
// hInvincible := hInvincible union i ;
68185: LD_ADDR_EXP 95
68189: PUSH
68190: LD_EXP 95
68194: PUSH
68195: LD_VAR 0 2
68199: UNION
68200: ST_TO_ADDR
// end ;
68201: GO 68141
68203: POP
68204: POP
// end ;
68205: LD_VAR 0 1
68209: RET
// export function hHackInvisible ; var i , j ; begin
68210: LD_INT 0
68212: PPUSH
68213: PPUSH
68214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68215: LD_ADDR_VAR 0 2
68219: PUSH
68220: LD_INT 21
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PPUSH
68230: CALL_OW 69
68234: PUSH
68235: FOR_IN
68236: IFFALSE 68260
// if IsSelected ( i ) then
68238: LD_VAR 0 2
68242: PPUSH
68243: CALL_OW 306
68247: IFFALSE 68258
// ComForceInvisible ( i ) ;
68249: LD_VAR 0 2
68253: PPUSH
68254: CALL_OW 496
68258: GO 68235
68260: POP
68261: POP
// end ;
68262: LD_VAR 0 1
68266: RET
// export function hHackChangeYourSide ; begin
68267: LD_INT 0
68269: PPUSH
// if your_side = 8 then
68270: LD_OWVAR 2
68274: PUSH
68275: LD_INT 8
68277: EQUAL
68278: IFFALSE 68290
// your_side := 0 else
68280: LD_ADDR_OWVAR 2
68284: PUSH
68285: LD_INT 0
68287: ST_TO_ADDR
68288: GO 68304
// your_side := your_side + 1 ;
68290: LD_ADDR_OWVAR 2
68294: PUSH
68295: LD_OWVAR 2
68299: PUSH
68300: LD_INT 1
68302: PLUS
68303: ST_TO_ADDR
// end ;
68304: LD_VAR 0 1
68308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
68309: LD_INT 0
68311: PPUSH
68312: PPUSH
68313: PPUSH
// for i in all_units do
68314: LD_ADDR_VAR 0 2
68318: PUSH
68319: LD_OWVAR 3
68323: PUSH
68324: FOR_IN
68325: IFFALSE 68403
// if IsSelected ( i ) then
68327: LD_VAR 0 2
68331: PPUSH
68332: CALL_OW 306
68336: IFFALSE 68401
// begin j := GetSide ( i ) ;
68338: LD_ADDR_VAR 0 3
68342: PUSH
68343: LD_VAR 0 2
68347: PPUSH
68348: CALL_OW 255
68352: ST_TO_ADDR
// if j = 8 then
68353: LD_VAR 0 3
68357: PUSH
68358: LD_INT 8
68360: EQUAL
68361: IFFALSE 68373
// j := 0 else
68363: LD_ADDR_VAR 0 3
68367: PUSH
68368: LD_INT 0
68370: ST_TO_ADDR
68371: GO 68387
// j := j + 1 ;
68373: LD_ADDR_VAR 0 3
68377: PUSH
68378: LD_VAR 0 3
68382: PUSH
68383: LD_INT 1
68385: PLUS
68386: ST_TO_ADDR
// SetSide ( i , j ) ;
68387: LD_VAR 0 2
68391: PPUSH
68392: LD_VAR 0 3
68396: PPUSH
68397: CALL_OW 235
// end ;
68401: GO 68324
68403: POP
68404: POP
// end ;
68405: LD_VAR 0 1
68409: RET
// export function hHackFog ; begin
68410: LD_INT 0
68412: PPUSH
// FogOff ( true ) ;
68413: LD_INT 1
68415: PPUSH
68416: CALL_OW 344
// end ;
68420: LD_VAR 0 1
68424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
68425: LD_INT 0
68427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
68428: LD_VAR 0 1
68432: PPUSH
68433: LD_VAR 0 2
68437: PPUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: LD_INT 1
68445: PPUSH
68446: LD_INT 1
68448: PPUSH
68449: CALL_OW 483
// CenterOnXY ( x , y ) ;
68453: LD_VAR 0 2
68457: PPUSH
68458: LD_VAR 0 3
68462: PPUSH
68463: CALL_OW 84
// end ;
68467: LD_VAR 0 4
68471: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68472: LD_INT 0
68474: PPUSH
68475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68476: LD_VAR 0 1
68480: NOT
68481: IFTRUE 68500
68483: PUSH
68484: LD_VAR 0 2
68488: PPUSH
68489: LD_VAR 0 3
68493: PPUSH
68494: CALL_OW 488
68498: NOT
68499: OR
68500: IFTRUE 68535
68502: PUSH
68503: LD_VAR 0 1
68507: PPUSH
68508: CALL_OW 266
68512: PUSH
68513: LD_INT 3
68515: NONEQUAL
68516: IFFALSE 68534
68518: PUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: CALL_OW 247
68528: PUSH
68529: LD_INT 1
68531: EQUAL
68532: NOT
68533: AND
68534: OR
68535: IFFALSE 68539
// exit ;
68537: GO 68821
// if GetType ( factory ) = unit_human then
68539: LD_VAR 0 1
68543: PPUSH
68544: CALL_OW 247
68548: PUSH
68549: LD_INT 1
68551: EQUAL
68552: IFFALSE 68569
// factory := IsInUnit ( factory ) ;
68554: LD_ADDR_VAR 0 1
68558: PUSH
68559: LD_VAR 0 1
68563: PPUSH
68564: CALL_OW 310
68568: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 266
68578: PUSH
68579: LD_INT 3
68581: NONEQUAL
68582: IFFALSE 68586
// exit ;
68584: GO 68821
// for i := 1 to Count ( factoryWaypoints ) do
68586: LD_ADDR_VAR 0 5
68590: PUSH
68591: DOUBLE
68592: LD_INT 1
68594: DEC
68595: ST_TO_ADDR
68596: LD_EXP 96
68600: PPUSH
68601: CALL 12528 0 1
68605: PUSH
68606: FOR_TO
68607: IFFALSE 68769
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
68609: LD_VAR 0 2
68613: PPUSH
68614: LD_VAR 0 3
68618: PPUSH
68619: CALL_OW 428
68623: PUSH
68624: LD_EXP 96
68628: PUSH
68629: LD_VAR 0 5
68633: ARRAY
68634: PUSH
68635: LD_INT 2
68637: ARRAY
68638: EQUAL
68639: IFFALSE 68671
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68641: LD_ADDR_EXP 96
68645: PUSH
68646: LD_EXP 96
68650: PPUSH
68651: LD_VAR 0 5
68655: PPUSH
68656: CALL_OW 3
68660: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68661: CALL 68826 0 0
// exit ;
68665: POP
68666: POP
68667: GO 68821
// end else
68669: GO 68767
// if factory = factoryWaypoints [ i ] [ 2 ] then
68671: LD_VAR 0 1
68675: PUSH
68676: LD_EXP 96
68680: PUSH
68681: LD_VAR 0 5
68685: ARRAY
68686: PUSH
68687: LD_INT 2
68689: ARRAY
68690: EQUAL
68691: IFFALSE 68767
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68693: LD_ADDR_EXP 96
68697: PUSH
68698: LD_EXP 96
68702: PPUSH
68703: LD_VAR 0 5
68707: PPUSH
68708: CALL_OW 3
68712: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68713: LD_ADDR_EXP 96
68717: PUSH
68718: LD_EXP 96
68722: PPUSH
68723: LD_VAR 0 1
68727: PPUSH
68728: CALL_OW 255
68732: PUSH
68733: LD_VAR 0 1
68737: PUSH
68738: LD_VAR 0 2
68742: PUSH
68743: LD_VAR 0 3
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: PPUSH
68754: CALL 48494 0 2
68758: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68759: CALL 68826 0 0
// exit ;
68763: POP
68764: POP
68765: GO 68821
// end ; end ;
68767: GO 68606
68769: POP
68770: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68771: LD_ADDR_EXP 96
68775: PUSH
68776: LD_EXP 96
68780: PPUSH
68781: LD_VAR 0 1
68785: PPUSH
68786: CALL_OW 255
68790: PUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_VAR 0 2
68800: PUSH
68801: LD_VAR 0 3
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: PPUSH
68812: CALL 48494 0 2
68816: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68817: CALL 68826 0 0
// end ;
68821: LD_VAR 0 4
68825: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68826: LD_INT 0
68828: PPUSH
68829: PPUSH
68830: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68831: LD_STRING resetFactoryWaypoint();
68833: PPUSH
68834: CALL_OW 559
// if factoryWaypoints then
68838: LD_EXP 96
68842: IFFALSE 68963
// begin list := factoryWaypoints ;
68844: LD_ADDR_VAR 0 3
68848: PUSH
68849: LD_EXP 96
68853: ST_TO_ADDR
// for i := 1 to list do
68854: LD_ADDR_VAR 0 2
68858: PUSH
68859: DOUBLE
68860: LD_INT 1
68862: DEC
68863: ST_TO_ADDR
68864: LD_VAR 0 3
68868: PUSH
68869: FOR_TO
68870: IFFALSE 68961
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68872: LD_STRING setFactoryWaypointXY(
68874: PUSH
68875: LD_VAR 0 3
68879: PUSH
68880: LD_VAR 0 2
68884: ARRAY
68885: PUSH
68886: LD_INT 1
68888: ARRAY
68889: STR
68890: PUSH
68891: LD_STRING ,
68893: STR
68894: PUSH
68895: LD_VAR 0 3
68899: PUSH
68900: LD_VAR 0 2
68904: ARRAY
68905: PUSH
68906: LD_INT 2
68908: ARRAY
68909: STR
68910: PUSH
68911: LD_STRING ,
68913: STR
68914: PUSH
68915: LD_VAR 0 3
68919: PUSH
68920: LD_VAR 0 2
68924: ARRAY
68925: PUSH
68926: LD_INT 3
68928: ARRAY
68929: STR
68930: PUSH
68931: LD_STRING ,
68933: STR
68934: PUSH
68935: LD_VAR 0 3
68939: PUSH
68940: LD_VAR 0 2
68944: ARRAY
68945: PUSH
68946: LD_INT 4
68948: ARRAY
68949: STR
68950: PUSH
68951: LD_STRING )
68953: STR
68954: PPUSH
68955: CALL_OW 559
68959: GO 68869
68961: POP
68962: POP
// end ; end ;
68963: LD_VAR 0 1
68967: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68968: LD_INT 0
68970: PPUSH
// if HexInfo ( x , y ) = warehouse then
68971: LD_VAR 0 2
68975: PPUSH
68976: LD_VAR 0 3
68980: PPUSH
68981: CALL_OW 428
68985: PUSH
68986: LD_VAR 0 1
68990: EQUAL
68991: IFFALSE 69018
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68993: LD_ADDR_EXP 98
68997: PUSH
68998: LD_EXP 98
69002: PPUSH
69003: LD_VAR 0 1
69007: PPUSH
69008: LD_INT 0
69010: PPUSH
69011: CALL_OW 1
69015: ST_TO_ADDR
69016: GO 69069
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
69018: LD_ADDR_EXP 98
69022: PUSH
69023: LD_EXP 98
69027: PPUSH
69028: LD_VAR 0 1
69032: PPUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 255
69042: PUSH
69043: LD_VAR 0 1
69047: PUSH
69048: LD_VAR 0 2
69052: PUSH
69053: LD_VAR 0 3
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: PPUSH
69064: CALL_OW 1
69068: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
69069: CALL 69078 0 0
// end ;
69073: LD_VAR 0 4
69077: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
69078: LD_INT 0
69080: PPUSH
69081: PPUSH
69082: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
69083: LD_STRING resetWarehouseGatheringPoints();
69085: PPUSH
69086: CALL_OW 559
// if warehouseGatheringPoints then
69090: LD_EXP 98
69094: IFFALSE 69220
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
69096: LD_ADDR_VAR 0 3
69100: PUSH
69101: LD_EXP 98
69105: PPUSH
69106: CALL 52428 0 1
69110: ST_TO_ADDR
// for i := 1 to list do
69111: LD_ADDR_VAR 0 2
69115: PUSH
69116: DOUBLE
69117: LD_INT 1
69119: DEC
69120: ST_TO_ADDR
69121: LD_VAR 0 3
69125: PUSH
69126: FOR_TO
69127: IFFALSE 69218
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
69129: LD_STRING setWarehouseGatheringPointXY(
69131: PUSH
69132: LD_VAR 0 3
69136: PUSH
69137: LD_VAR 0 2
69141: ARRAY
69142: PUSH
69143: LD_INT 1
69145: ARRAY
69146: STR
69147: PUSH
69148: LD_STRING ,
69150: STR
69151: PUSH
69152: LD_VAR 0 3
69156: PUSH
69157: LD_VAR 0 2
69161: ARRAY
69162: PUSH
69163: LD_INT 2
69165: ARRAY
69166: STR
69167: PUSH
69168: LD_STRING ,
69170: STR
69171: PUSH
69172: LD_VAR 0 3
69176: PUSH
69177: LD_VAR 0 2
69181: ARRAY
69182: PUSH
69183: LD_INT 3
69185: ARRAY
69186: STR
69187: PUSH
69188: LD_STRING ,
69190: STR
69191: PUSH
69192: LD_VAR 0 3
69196: PUSH
69197: LD_VAR 0 2
69201: ARRAY
69202: PUSH
69203: LD_INT 4
69205: ARRAY
69206: STR
69207: PUSH
69208: LD_STRING )
69210: STR
69211: PPUSH
69212: CALL_OW 559
69216: GO 69126
69218: POP
69219: POP
// end ; end ;
69220: LD_VAR 0 1
69224: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
69225: LD_EXP 98
69229: IFFALSE 69924
69231: GO 69233
69233: DISABLE
69234: LD_INT 0
69236: PPUSH
69237: PPUSH
69238: PPUSH
69239: PPUSH
69240: PPUSH
69241: PPUSH
69242: PPUSH
69243: PPUSH
69244: PPUSH
// begin enable ;
69245: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
69246: LD_ADDR_VAR 0 3
69250: PUSH
69251: LD_EXP 98
69255: PPUSH
69256: CALL 52428 0 1
69260: ST_TO_ADDR
// if not list then
69261: LD_VAR 0 3
69265: NOT
69266: IFFALSE 69270
// exit ;
69268: GO 69924
// for i := 1 to list do
69270: LD_ADDR_VAR 0 1
69274: PUSH
69275: DOUBLE
69276: LD_INT 1
69278: DEC
69279: ST_TO_ADDR
69280: LD_VAR 0 3
69284: PUSH
69285: FOR_TO
69286: IFFALSE 69922
// begin depot := list [ i ] [ 2 ] ;
69288: LD_ADDR_VAR 0 8
69292: PUSH
69293: LD_VAR 0 3
69297: PUSH
69298: LD_VAR 0 1
69302: ARRAY
69303: PUSH
69304: LD_INT 2
69306: ARRAY
69307: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
69308: LD_ADDR_VAR 0 5
69312: PUSH
69313: LD_VAR 0 3
69317: PUSH
69318: LD_VAR 0 1
69322: ARRAY
69323: PUSH
69324: LD_INT 1
69326: ARRAY
69327: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
69328: LD_VAR 0 8
69332: PPUSH
69333: CALL_OW 301
69337: IFTRUE 69356
69339: PUSH
69340: LD_VAR 0 5
69344: PUSH
69345: LD_VAR 0 8
69349: PPUSH
69350: CALL_OW 255
69354: NONEQUAL
69355: OR
69356: IFFALSE 69385
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
69358: LD_ADDR_EXP 98
69362: PUSH
69363: LD_EXP 98
69367: PPUSH
69368: LD_VAR 0 8
69372: PPUSH
69373: LD_INT 0
69375: PPUSH
69376: CALL_OW 1
69380: ST_TO_ADDR
// exit ;
69381: POP
69382: POP
69383: GO 69924
// end ; x := list [ i ] [ 3 ] ;
69385: LD_ADDR_VAR 0 6
69389: PUSH
69390: LD_VAR 0 3
69394: PUSH
69395: LD_VAR 0 1
69399: ARRAY
69400: PUSH
69401: LD_INT 3
69403: ARRAY
69404: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
69405: LD_ADDR_VAR 0 7
69409: PUSH
69410: LD_VAR 0 3
69414: PUSH
69415: LD_VAR 0 1
69419: ARRAY
69420: PUSH
69421: LD_INT 4
69423: ARRAY
69424: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
69425: LD_ADDR_VAR 0 9
69429: PUSH
69430: LD_VAR 0 6
69434: PPUSH
69435: LD_VAR 0 7
69439: PPUSH
69440: LD_INT 16
69442: PPUSH
69443: CALL 51002 0 3
69447: ST_TO_ADDR
// if not cratesNearbyPoint then
69448: LD_VAR 0 9
69452: NOT
69453: IFFALSE 69459
// exit ;
69455: POP
69456: POP
69457: GO 69924
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
69459: LD_ADDR_VAR 0 4
69463: PUSH
69464: LD_INT 22
69466: PUSH
69467: LD_VAR 0 5
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: LD_INT 60
69481: PUSH
69482: EMPTY
69483: LIST
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 91
69491: PUSH
69492: LD_VAR 0 8
69496: PUSH
69497: LD_INT 6
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: LD_INT 25
69510: PUSH
69511: LD_INT 2
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 25
69520: PUSH
69521: LD_INT 16
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: PPUSH
69539: CALL_OW 69
69543: PUSH
69544: LD_VAR 0 8
69548: PPUSH
69549: CALL_OW 313
69553: PPUSH
69554: LD_INT 3
69556: PUSH
69557: LD_INT 60
69559: PUSH
69560: EMPTY
69561: LIST
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 25
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 25
69582: PUSH
69583: LD_INT 16
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PPUSH
69599: CALL_OW 72
69603: UNION
69604: ST_TO_ADDR
// if tmp then
69605: LD_VAR 0 4
69609: IFFALSE 69689
// begin tmp := ShrinkArray ( tmp , 3 ) ;
69611: LD_ADDR_VAR 0 4
69615: PUSH
69616: LD_VAR 0 4
69620: PPUSH
69621: LD_INT 3
69623: PPUSH
69624: CALL 48809 0 2
69628: ST_TO_ADDR
// for j in tmp do
69629: LD_ADDR_VAR 0 2
69633: PUSH
69634: LD_VAR 0 4
69638: PUSH
69639: FOR_IN
69640: IFFALSE 69683
// begin if IsInUnit ( j ) then
69642: LD_VAR 0 2
69646: PPUSH
69647: CALL_OW 310
69651: IFFALSE 69662
// ComExit ( j ) ;
69653: LD_VAR 0 2
69657: PPUSH
69658: CALL 48892 0 1
// AddComCollect ( j , x , y ) ;
69662: LD_VAR 0 2
69666: PPUSH
69667: LD_VAR 0 6
69671: PPUSH
69672: LD_VAR 0 7
69676: PPUSH
69677: CALL_OW 177
// end ;
69681: GO 69639
69683: POP
69684: POP
// exit ;
69685: POP
69686: POP
69687: GO 69924
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69689: LD_ADDR_VAR 0 4
69693: PUSH
69694: LD_INT 22
69696: PUSH
69697: LD_VAR 0 5
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 91
69708: PUSH
69709: LD_VAR 0 8
69713: PUSH
69714: LD_INT 8
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: LD_INT 34
69727: PUSH
69728: LD_INT 12
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 34
69737: PUSH
69738: LD_INT 51
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 34
69747: PUSH
69748: LD_INT 32
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 34
69757: PUSH
69758: LD_INT 89
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: PPUSH
69777: CALL_OW 69
69781: ST_TO_ADDR
// if tmp then
69782: LD_VAR 0 4
69786: IFFALSE 69920
// begin for j in tmp do
69788: LD_ADDR_VAR 0 2
69792: PUSH
69793: LD_VAR 0 4
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69918
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69801: LD_VAR 0 2
69805: PPUSH
69806: CALL_OW 262
69810: PUSH
69811: LD_INT 3
69813: EQUAL
69814: IFTRUE 69831
69816: PUSH
69817: LD_VAR 0 2
69821: PPUSH
69822: CALL_OW 261
69826: PUSH
69827: LD_INT 20
69829: GREATER
69830: OR
69831: IFFALSE 69845
69833: PUSH
69834: LD_VAR 0 2
69838: PPUSH
69839: CALL_OW 314
69843: NOT
69844: AND
69845: IFFALSE 69875
69847: PUSH
69848: LD_VAR 0 2
69852: PPUSH
69853: CALL_OW 263
69857: PUSH
69858: LD_INT 1
69860: NONEQUAL
69861: IFTRUE 69874
69863: PUSH
69864: LD_VAR 0 2
69868: PPUSH
69869: CALL_OW 311
69873: OR
69874: AND
69875: IFFALSE 69916
// begin ComCollect ( j , x , y ) ;
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_VAR 0 6
69886: PPUSH
69887: LD_VAR 0 7
69891: PPUSH
69892: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69896: LD_VAR 0 2
69900: PPUSH
69901: LD_VAR 0 8
69905: PPUSH
69906: CALL_OW 172
// exit ;
69910: POP
69911: POP
69912: POP
69913: POP
69914: GO 69924
// end ;
69916: GO 69798
69918: POP
69919: POP
// end ; end ;
69920: GO 69285
69922: POP
69923: POP
// end ; end_of_file
69924: PPOPN 9
69926: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69927: LD_VAR 0 1
69931: PPUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: LD_VAR 0 3
69941: PPUSH
69942: LD_VAR 0 4
69946: PPUSH
69947: LD_VAR 0 5
69951: PPUSH
69952: LD_VAR 0 6
69956: PPUSH
69957: CALL 54020 0 6
// end ;
69961: PPOPN 6
69963: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69964: LD_INT 0
69966: PPUSH
// begin if not units then
69967: LD_VAR 0 1
69971: NOT
69972: IFFALSE 69976
// exit ;
69974: GO 70010
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_VAR 0 2
69985: PPUSH
69986: LD_VAR 0 3
69990: PPUSH
69991: LD_VAR 0 4
69995: PPUSH
69996: LD_VAR 0 5
70000: PPUSH
70001: LD_VAR 0 6
70005: PPUSH
70006: CALL 76378 0 6
// end ;
70010: PPOPN 7
70012: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70013: CALL 53907 0 0
// end ; end_of_file
70017: PPOPN 1
70019: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70020: LD_VAR 0 1
70024: PUSH
70025: LD_INT 200
70027: DOUBLE
70028: GREATEREQUAL
70029: IFFALSE 70037
70031: LD_INT 299
70033: DOUBLE
70034: LESSEQUAL
70035: IFTRUE 70039
70037: GO 70071
70039: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70040: LD_VAR 0 1
70044: PPUSH
70045: LD_VAR 0 2
70049: PPUSH
70050: LD_VAR 0 3
70054: PPUSH
70055: LD_VAR 0 4
70059: PPUSH
70060: LD_VAR 0 5
70064: PPUSH
70065: CALL 70852 0 5
70069: GO 70148
70071: LD_INT 300
70073: DOUBLE
70074: GREATEREQUAL
70075: IFFALSE 70083
70077: LD_INT 399
70079: DOUBLE
70080: LESSEQUAL
70081: IFTRUE 70085
70083: GO 70147
70085: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 3
70100: PPUSH
70101: LD_VAR 0 4
70105: PPUSH
70106: LD_VAR 0 5
70110: PPUSH
70111: LD_VAR 0 6
70115: PPUSH
70116: LD_VAR 0 7
70120: PPUSH
70121: LD_VAR 0 8
70125: PPUSH
70126: LD_VAR 0 9
70130: PPUSH
70131: LD_VAR 0 10
70135: PPUSH
70136: LD_VAR 0 11
70140: PPUSH
70141: CALL 66480 0 11
70145: GO 70148
70147: POP
// end ;
70148: PPOPN 11
70150: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_VAR 0 3
70165: PPUSH
70166: LD_VAR 0 4
70170: PPUSH
70171: LD_VAR 0 5
70175: PPUSH
70176: CALL 70233 0 5
// end ; end_of_file
70180: PPOPN 5
70182: END
// export function SOS_UnitDestroyed ( un ) ; begin
70183: LD_INT 0
70185: PPUSH
// ComRadiation ( un ) ;
70186: LD_VAR 0 1
70190: PPUSH
70191: CALL 71272 0 1
// end ;
70195: LD_VAR 0 2
70199: RET
// export function SOS_UnitKamikazed ( un ) ; begin
70200: LD_INT 0
70202: PPUSH
// ComRadiation ( un ) ;
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL 71272 0 1
// end ;
70212: LD_VAR 0 2
70216: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
70217: LD_INT 0
70219: PPUSH
// end ;
70220: LD_VAR 0 4
70224: RET
// export function SOS_Command ( cmd ) ; begin
70225: LD_INT 0
70227: PPUSH
// end ;
70228: LD_VAR 0 2
70232: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
70233: LD_INT 0
70235: PPUSH
// end ;
70236: LD_VAR 0 6
70240: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
70241: LD_INT 0
70243: PPUSH
70244: PPUSH
70245: PPUSH
70246: PPUSH
// if not vehicle or not factory then
70247: LD_VAR 0 1
70251: NOT
70252: IFTRUE 70261
70254: PUSH
70255: LD_VAR 0 2
70259: NOT
70260: OR
70261: IFFALSE 70265
// exit ;
70263: GO 70847
// if not factoryWaypoints then
70265: LD_EXP 96
70269: NOT
70270: IFFALSE 70274
// exit ;
70272: GO 70847
// for i := 1 to Count ( factoryWaypoints ) do
70274: LD_ADDR_VAR 0 4
70278: PUSH
70279: DOUBLE
70280: LD_INT 1
70282: DEC
70283: ST_TO_ADDR
70284: LD_EXP 96
70288: PPUSH
70289: CALL 12528 0 1
70293: PUSH
70294: FOR_TO
70295: IFFALSE 70845
// if factoryWaypoints [ i ] [ 2 ] = factory then
70297: LD_EXP 96
70301: PUSH
70302: LD_VAR 0 4
70306: ARRAY
70307: PUSH
70308: LD_INT 2
70310: ARRAY
70311: PUSH
70312: LD_VAR 0 2
70316: EQUAL
70317: IFFALSE 70843
// begin if GetControl ( vehicle ) = control_manual then
70319: LD_VAR 0 1
70323: PPUSH
70324: CALL_OW 263
70328: PUSH
70329: LD_INT 1
70331: EQUAL
70332: IFFALSE 70696
// begin driver := IsDrivenBy ( vehicle ) ;
70334: LD_ADDR_VAR 0 5
70338: PUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 311
70348: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
70349: LD_VAR 0 5
70353: PUSH
70354: LD_EXP 97
70358: IN
70359: IFTRUE 70373
70361: PUSH
70362: LD_VAR 0 1
70366: PUSH
70367: LD_EXP 97
70371: IN
70372: OR
70373: IFFALSE 70379
// exit ;
70375: POP
70376: POP
70377: GO 70847
// if not HasTask ( driver ) then
70379: LD_VAR 0 5
70383: PPUSH
70384: CALL_OW 314
70388: NOT
70389: IFFALSE 70694
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
70391: LD_ADDR_EXP 97
70395: PUSH
70396: LD_EXP 97
70400: PPUSH
70401: LD_VAR 0 5
70405: PPUSH
70406: CALL 48494 0 2
70410: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
70411: LD_ADDR_EXP 97
70415: PUSH
70416: LD_EXP 97
70420: PPUSH
70421: LD_VAR 0 1
70425: PPUSH
70426: CALL 48494 0 2
70430: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70431: LD_ADDR_VAR 0 6
70435: PUSH
70436: LD_EXP 96
70440: PUSH
70441: LD_VAR 0 4
70445: ARRAY
70446: PUSH
70447: LD_INT 3
70449: ARRAY
70450: PPUSH
70451: LD_EXP 96
70455: PUSH
70456: LD_VAR 0 4
70460: ARRAY
70461: PUSH
70462: LD_INT 4
70464: ARRAY
70465: PPUSH
70466: CALL_OW 428
70470: ST_TO_ADDR
// if hex then
70471: LD_VAR 0 6
70475: IFFALSE 70493
// ComMoveUnit ( driver , hex ) else
70477: LD_VAR 0 5
70481: PPUSH
70482: LD_VAR 0 6
70486: PPUSH
70487: CALL_OW 112
70491: GO 70577
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
70493: LD_VAR 0 1
70497: PPUSH
70498: LD_EXP 96
70502: PUSH
70503: LD_VAR 0 4
70507: ARRAY
70508: PUSH
70509: LD_INT 3
70511: ARRAY
70512: PPUSH
70513: LD_EXP 96
70517: PUSH
70518: LD_VAR 0 4
70522: ARRAY
70523: PUSH
70524: LD_INT 4
70526: ARRAY
70527: PPUSH
70528: CALL_OW 297
70532: PUSH
70533: LD_INT 0
70535: GREATER
70536: IFFALSE 70577
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70538: LD_VAR 0 5
70542: PPUSH
70543: LD_EXP 96
70547: PUSH
70548: LD_VAR 0 4
70552: ARRAY
70553: PUSH
70554: LD_INT 3
70556: ARRAY
70557: PPUSH
70558: LD_EXP 96
70562: PUSH
70563: LD_VAR 0 4
70567: ARRAY
70568: PUSH
70569: LD_INT 4
70571: ARRAY
70572: PPUSH
70573: CALL_OW 111
// AddComExitVehicle ( driver ) ;
70577: LD_VAR 0 5
70581: PPUSH
70582: CALL_OW 181
// if Multiplayer then
70586: LD_OWVAR 4
70590: IFFALSE 70639
// begin repeat wait ( 10 ) ;
70592: LD_INT 10
70594: PPUSH
70595: CALL_OW 67
// until not IsInUnit ( driver ) ;
70599: LD_VAR 0 5
70603: PPUSH
70604: CALL_OW 310
70608: NOT
70609: IFFALSE 70592
// if not HasTask ( driver ) then
70611: LD_VAR 0 5
70615: PPUSH
70616: CALL_OW 314
70620: NOT
70621: IFFALSE 70637
// ComEnterUnit ( driver , factory ) ;
70623: LD_VAR 0 5
70627: PPUSH
70628: LD_VAR 0 2
70632: PPUSH
70633: CALL_OW 120
// end else
70637: GO 70653
// AddComEnterUnit ( driver , factory ) ;
70639: LD_VAR 0 5
70643: PPUSH
70644: LD_VAR 0 2
70648: PPUSH
70649: CALL_OW 180
// wait ( 0 0$1 ) ;
70653: LD_INT 35
70655: PPUSH
70656: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
70660: LD_ADDR_EXP 97
70664: PUSH
70665: LD_EXP 97
70669: PUSH
70670: LD_VAR 0 5
70674: DIFF
70675: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
70676: LD_ADDR_EXP 97
70680: PUSH
70681: LD_EXP 97
70685: PUSH
70686: LD_VAR 0 1
70690: DIFF
70691: ST_TO_ADDR
// break ;
70692: GO 70845
// end ; end else
70694: GO 70843
// if GetControl ( vehicle ) = control_remote then
70696: LD_VAR 0 1
70700: PPUSH
70701: CALL_OW 263
70705: PUSH
70706: LD_INT 2
70708: EQUAL
70709: IFFALSE 70795
// begin wait ( 0 0$2 ) ;
70711: LD_INT 70
70713: PPUSH
70714: CALL_OW 67
// repeat wait ( 10 ) ;
70718: LD_INT 10
70720: PPUSH
70721: CALL_OW 67
// Connect ( vehicle ) ;
70725: LD_VAR 0 1
70729: PPUSH
70730: CALL 18806 0 1
// until IsControledBy ( vehicle ) ;
70734: LD_VAR 0 1
70738: PPUSH
70739: CALL_OW 312
70743: IFFALSE 70718
// wait ( 10 ) ;
70745: LD_INT 10
70747: PPUSH
70748: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70752: LD_VAR 0 1
70756: PPUSH
70757: LD_EXP 96
70761: PUSH
70762: LD_VAR 0 4
70766: ARRAY
70767: PUSH
70768: LD_INT 3
70770: ARRAY
70771: PPUSH
70772: LD_EXP 96
70776: PUSH
70777: LD_VAR 0 4
70781: ARRAY
70782: PUSH
70783: LD_INT 4
70785: ARRAY
70786: PPUSH
70787: CALL_OW 111
// break ;
70791: GO 70845
// end else
70793: GO 70843
// begin wait ( 0 0$3 ) ;
70795: LD_INT 105
70797: PPUSH
70798: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70802: LD_VAR 0 1
70806: PPUSH
70807: LD_EXP 96
70811: PUSH
70812: LD_VAR 0 4
70816: ARRAY
70817: PUSH
70818: LD_INT 3
70820: ARRAY
70821: PPUSH
70822: LD_EXP 96
70826: PUSH
70827: LD_VAR 0 4
70831: ARRAY
70832: PUSH
70833: LD_INT 4
70835: ARRAY
70836: PPUSH
70837: CALL_OW 111
// break ;
70841: GO 70845
// end ; end ;
70843: GO 70294
70845: POP
70846: POP
// end ;
70847: LD_VAR 0 3
70851: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
70852: LD_INT 0
70854: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
70855: LD_VAR 0 1
70859: PUSH
70860: LD_INT 250
70862: EQUAL
70863: IFFALSE 70880
70865: PUSH
70866: LD_VAR 0 2
70870: PPUSH
70871: CALL_OW 264
70875: PUSH
70876: LD_INT 81
70878: EQUAL
70879: AND
70880: IFFALSE 70901
// MinerPlaceMine ( unit , x , y ) ;
70882: LD_VAR 0 2
70886: PPUSH
70887: LD_VAR 0 4
70891: PPUSH
70892: LD_VAR 0 5
70896: PPUSH
70897: CALL 74111 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70901: LD_VAR 0 1
70905: PUSH
70906: LD_INT 251
70908: EQUAL
70909: IFFALSE 70926
70911: PUSH
70912: LD_VAR 0 2
70916: PPUSH
70917: CALL_OW 264
70921: PUSH
70922: LD_INT 81
70924: EQUAL
70925: AND
70926: IFFALSE 70947
// MinerDetonateMine ( unit , x , y ) ;
70928: LD_VAR 0 2
70932: PPUSH
70933: LD_VAR 0 4
70937: PPUSH
70938: LD_VAR 0 5
70942: PPUSH
70943: CALL 74518 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 252
70954: EQUAL
70955: IFFALSE 70972
70957: PUSH
70958: LD_VAR 0 2
70962: PPUSH
70963: CALL_OW 264
70967: PUSH
70968: LD_INT 81
70970: EQUAL
70971: AND
70972: IFFALSE 70993
// MinerCreateMinefield ( unit , x , y ) ;
70974: LD_VAR 0 2
70978: PPUSH
70979: LD_VAR 0 4
70983: PPUSH
70984: LD_VAR 0 5
70988: PPUSH
70989: CALL 74750 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70993: LD_VAR 0 1
70997: PUSH
70998: LD_INT 253
71000: EQUAL
71001: IFFALSE 71018
71003: PUSH
71004: LD_VAR 0 2
71008: PPUSH
71009: CALL_OW 257
71013: PUSH
71014: LD_INT 5
71016: EQUAL
71017: AND
71018: IFFALSE 71039
// ComBinocular ( unit , x , y ) ;
71020: LD_VAR 0 2
71024: PPUSH
71025: LD_VAR 0 4
71029: PPUSH
71030: LD_VAR 0 5
71034: PPUSH
71035: CALL 75125 0 3
// if selectedUnit then
71039: LD_VAR 0 3
71043: IFFALSE 71103
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 254
71052: EQUAL
71053: IFFALSE 71070
71055: PUSH
71056: LD_VAR 0 2
71060: PPUSH
71061: CALL_OW 264
71065: PUSH
71066: LD_INT 99
71068: EQUAL
71069: AND
71070: IFFALSE 71087
71072: PUSH
71073: LD_VAR 0 3
71077: PPUSH
71078: CALL_OW 263
71082: PUSH
71083: LD_INT 3
71085: EQUAL
71086: AND
71087: IFFALSE 71103
// HackDestroyVehicle ( unit , selectedUnit ) ;
71089: LD_VAR 0 2
71093: PPUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: CALL 73393 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
71103: LD_VAR 0 1
71107: PUSH
71108: LD_INT 255
71110: EQUAL
71111: IFFALSE 71135
71113: PUSH
71114: LD_VAR 0 2
71118: PPUSH
71119: CALL_OW 264
71123: PUSH
71124: LD_INT 14
71126: PUSH
71127: LD_INT 53
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: IN
71134: AND
71135: IFFALSE 71153
71137: PUSH
71138: LD_VAR 0 4
71142: PPUSH
71143: LD_VAR 0 5
71147: PPUSH
71148: CALL_OW 488
71152: AND
71153: IFFALSE 71177
// CutTreeXYR ( unit , x , y , 12 ) ;
71155: LD_VAR 0 2
71159: PPUSH
71160: LD_VAR 0 4
71164: PPUSH
71165: LD_VAR 0 5
71169: PPUSH
71170: LD_INT 12
71172: PPUSH
71173: CALL 71368 0 4
// if cmd = 256 then
71177: LD_VAR 0 1
71181: PUSH
71182: LD_INT 256
71184: EQUAL
71185: IFFALSE 71206
// SetFactoryWaypoint ( unit , x , y ) ;
71187: LD_VAR 0 2
71191: PPUSH
71192: LD_VAR 0 4
71196: PPUSH
71197: LD_VAR 0 5
71201: PPUSH
71202: CALL 68472 0 3
// if cmd = 257 then
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 257
71213: EQUAL
71214: IFFALSE 71235
// SetWarehouseGatheringPoint ( unit , x , y ) ;
71216: LD_VAR 0 2
71220: PPUSH
71221: LD_VAR 0 4
71225: PPUSH
71226: LD_VAR 0 5
71230: PPUSH
71231: CALL 68968 0 3
// if cmd = 258 then
71235: LD_VAR 0 1
71239: PUSH
71240: LD_INT 258
71242: EQUAL
71243: IFFALSE 71267
// BurnTreeXYR ( unit , x , y , 8 ) ;
71245: LD_VAR 0 2
71249: PPUSH
71250: LD_VAR 0 4
71254: PPUSH
71255: LD_VAR 0 5
71259: PPUSH
71260: LD_INT 8
71262: PPUSH
71263: CALL 71768 0 4
// end ;
71267: LD_VAR 0 6
71271: RET
// export function ComRadiation ( un ) ; var eff ; begin
71272: LD_INT 0
71274: PPUSH
71275: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
71276: LD_VAR 0 1
71280: PPUSH
71281: CALL_OW 264
71285: PUSH
71286: LD_INT 91
71288: NONEQUAL
71289: IFFALSE 71293
// exit ;
71291: GO 71363
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71293: LD_INT 68
71295: PPUSH
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 255
71305: PPUSH
71306: CALL_OW 321
71310: PUSH
71311: LD_INT 2
71313: EQUAL
71314: IFFALSE 71326
// eff := 50 else
71316: LD_ADDR_VAR 0 3
71320: PUSH
71321: LD_INT 50
71323: ST_TO_ADDR
71324: GO 71334
// eff := 25 ;
71326: LD_ADDR_VAR 0 3
71330: PUSH
71331: LD_INT 25
71333: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 250
71343: PPUSH
71344: LD_VAR 0 1
71348: PPUSH
71349: CALL_OW 251
71353: PPUSH
71354: LD_VAR 0 3
71358: PPUSH
71359: CALL_OW 495
// end ;
71363: LD_VAR 0 2
71367: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
71368: LD_INT 0
71370: PPUSH
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
71375: PPUSH
71376: PPUSH
71377: PPUSH
71378: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
71379: LD_VAR 0 1
71383: PPUSH
71384: CALL_OW 302
71388: NOT
71389: IFTRUE 71408
71391: PUSH
71392: LD_VAR 0 2
71396: PPUSH
71397: LD_VAR 0 3
71401: PPUSH
71402: CALL_OW 488
71406: NOT
71407: OR
71408: IFTRUE 71417
71410: PUSH
71411: LD_VAR 0 4
71415: NOT
71416: OR
71417: IFFALSE 71421
// exit ;
71419: GO 71763
// list := [ ] ;
71421: LD_ADDR_VAR 0 13
71425: PUSH
71426: EMPTY
71427: ST_TO_ADDR
// if x - r < 0 then
71428: LD_VAR 0 2
71432: PUSH
71433: LD_VAR 0 4
71437: MINUS
71438: PUSH
71439: LD_INT 0
71441: LESS
71442: IFFALSE 71454
// min_x := 0 else
71444: LD_ADDR_VAR 0 7
71448: PUSH
71449: LD_INT 0
71451: ST_TO_ADDR
71452: GO 71470
// min_x := x - r ;
71454: LD_ADDR_VAR 0 7
71458: PUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_VAR 0 4
71468: MINUS
71469: ST_TO_ADDR
// if y - r < 0 then
71470: LD_VAR 0 3
71474: PUSH
71475: LD_VAR 0 4
71479: MINUS
71480: PUSH
71481: LD_INT 0
71483: LESS
71484: IFFALSE 71496
// min_y := 0 else
71486: LD_ADDR_VAR 0 8
71490: PUSH
71491: LD_INT 0
71493: ST_TO_ADDR
71494: GO 71512
// min_y := y - r ;
71496: LD_ADDR_VAR 0 8
71500: PUSH
71501: LD_VAR 0 3
71505: PUSH
71506: LD_VAR 0 4
71510: MINUS
71511: ST_TO_ADDR
// max_x := x + r ;
71512: LD_ADDR_VAR 0 9
71516: PUSH
71517: LD_VAR 0 2
71521: PUSH
71522: LD_VAR 0 4
71526: PLUS
71527: ST_TO_ADDR
// max_y := y + r ;
71528: LD_ADDR_VAR 0 10
71532: PUSH
71533: LD_VAR 0 3
71537: PUSH
71538: LD_VAR 0 4
71542: PLUS
71543: ST_TO_ADDR
// for _x = min_x to max_x do
71544: LD_ADDR_VAR 0 11
71548: PUSH
71549: DOUBLE
71550: LD_VAR 0 7
71554: DEC
71555: ST_TO_ADDR
71556: LD_VAR 0 9
71560: PUSH
71561: FOR_TO
71562: IFFALSE 71681
// for _y = min_y to max_y do
71564: LD_ADDR_VAR 0 12
71568: PUSH
71569: DOUBLE
71570: LD_VAR 0 8
71574: DEC
71575: ST_TO_ADDR
71576: LD_VAR 0 10
71580: PUSH
71581: FOR_TO
71582: IFFALSE 71677
// begin if not ValidHex ( _x , _y ) then
71584: LD_VAR 0 11
71588: PPUSH
71589: LD_VAR 0 12
71593: PPUSH
71594: CALL_OW 488
71598: NOT
71599: IFFALSE 71603
// continue ;
71601: GO 71581
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71603: LD_VAR 0 11
71607: PPUSH
71608: LD_VAR 0 12
71612: PPUSH
71613: CALL_OW 351
71617: IFFALSE 71635
71619: PUSH
71620: LD_VAR 0 11
71624: PPUSH
71625: LD_VAR 0 12
71629: PPUSH
71630: CALL_OW 554
71634: AND
71635: IFFALSE 71675
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71637: LD_ADDR_VAR 0 13
71641: PUSH
71642: LD_VAR 0 13
71646: PPUSH
71647: LD_VAR 0 13
71651: PUSH
71652: LD_INT 1
71654: PLUS
71655: PPUSH
71656: LD_VAR 0 11
71660: PUSH
71661: LD_VAR 0 12
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PPUSH
71670: CALL_OW 2
71674: ST_TO_ADDR
// end ;
71675: GO 71581
71677: POP
71678: POP
71679: GO 71561
71681: POP
71682: POP
// if not list then
71683: LD_VAR 0 13
71687: NOT
71688: IFFALSE 71692
// exit ;
71690: GO 71763
// for i in list do
71692: LD_ADDR_VAR 0 6
71696: PUSH
71697: LD_VAR 0 13
71701: PUSH
71702: FOR_IN
71703: IFFALSE 71761
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
71705: LD_VAR 0 1
71709: PPUSH
71710: LD_STRING M
71712: PUSH
71713: LD_VAR 0 6
71717: PUSH
71718: LD_INT 1
71720: ARRAY
71721: PUSH
71722: LD_VAR 0 6
71726: PUSH
71727: LD_INT 2
71729: ARRAY
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: PUSH
71752: EMPTY
71753: LIST
71754: PPUSH
71755: CALL_OW 447
71759: GO 71702
71761: POP
71762: POP
// end ;
71763: LD_VAR 0 5
71767: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
71768: LD_INT 0
71770: PPUSH
71771: PPUSH
71772: PPUSH
71773: PPUSH
71774: PPUSH
71775: PPUSH
71776: PPUSH
71777: PPUSH
71778: PPUSH
71779: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
71780: LD_VAR 0 1
71784: PPUSH
71785: CALL_OW 302
71789: NOT
71790: IFTRUE 71809
71792: PUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: LD_VAR 0 3
71802: PPUSH
71803: CALL_OW 488
71807: NOT
71808: OR
71809: IFTRUE 71818
71811: PUSH
71812: LD_VAR 0 4
71816: NOT
71817: OR
71818: IFFALSE 71822
// exit ;
71820: GO 72339
// list := [ ] ;
71822: LD_ADDR_VAR 0 13
71826: PUSH
71827: EMPTY
71828: ST_TO_ADDR
// if x - r < 0 then
71829: LD_VAR 0 2
71833: PUSH
71834: LD_VAR 0 4
71838: MINUS
71839: PUSH
71840: LD_INT 0
71842: LESS
71843: IFFALSE 71855
// min_x := 0 else
71845: LD_ADDR_VAR 0 7
71849: PUSH
71850: LD_INT 0
71852: ST_TO_ADDR
71853: GO 71871
// min_x := x - r ;
71855: LD_ADDR_VAR 0 7
71859: PUSH
71860: LD_VAR 0 2
71864: PUSH
71865: LD_VAR 0 4
71869: MINUS
71870: ST_TO_ADDR
// if y - r < 0 then
71871: LD_VAR 0 3
71875: PUSH
71876: LD_VAR 0 4
71880: MINUS
71881: PUSH
71882: LD_INT 0
71884: LESS
71885: IFFALSE 71897
// min_y := 0 else
71887: LD_ADDR_VAR 0 8
71891: PUSH
71892: LD_INT 0
71894: ST_TO_ADDR
71895: GO 71913
// min_y := y - r ;
71897: LD_ADDR_VAR 0 8
71901: PUSH
71902: LD_VAR 0 3
71906: PUSH
71907: LD_VAR 0 4
71911: MINUS
71912: ST_TO_ADDR
// max_x := x + r ;
71913: LD_ADDR_VAR 0 9
71917: PUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_VAR 0 4
71927: PLUS
71928: ST_TO_ADDR
// max_y := y + r ;
71929: LD_ADDR_VAR 0 10
71933: PUSH
71934: LD_VAR 0 3
71938: PUSH
71939: LD_VAR 0 4
71943: PLUS
71944: ST_TO_ADDR
// for _x = min_x to max_x do
71945: LD_ADDR_VAR 0 11
71949: PUSH
71950: DOUBLE
71951: LD_VAR 0 7
71955: DEC
71956: ST_TO_ADDR
71957: LD_VAR 0 9
71961: PUSH
71962: FOR_TO
71963: IFFALSE 72082
// for _y = min_y to max_y do
71965: LD_ADDR_VAR 0 12
71969: PUSH
71970: DOUBLE
71971: LD_VAR 0 8
71975: DEC
71976: ST_TO_ADDR
71977: LD_VAR 0 10
71981: PUSH
71982: FOR_TO
71983: IFFALSE 72078
// begin if not ValidHex ( _x , _y ) then
71985: LD_VAR 0 11
71989: PPUSH
71990: LD_VAR 0 12
71994: PPUSH
71995: CALL_OW 488
71999: NOT
72000: IFFALSE 72004
// continue ;
72002: GO 71982
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72004: LD_VAR 0 11
72008: PPUSH
72009: LD_VAR 0 12
72013: PPUSH
72014: CALL_OW 351
72018: IFFALSE 72036
72020: PUSH
72021: LD_VAR 0 11
72025: PPUSH
72026: LD_VAR 0 12
72030: PPUSH
72031: CALL_OW 554
72035: AND
72036: IFFALSE 72076
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72038: LD_ADDR_VAR 0 13
72042: PUSH
72043: LD_VAR 0 13
72047: PPUSH
72048: LD_VAR 0 13
72052: PUSH
72053: LD_INT 1
72055: PLUS
72056: PPUSH
72057: LD_VAR 0 11
72061: PUSH
72062: LD_VAR 0 12
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PPUSH
72071: CALL_OW 2
72075: ST_TO_ADDR
// end ;
72076: GO 71982
72078: POP
72079: POP
72080: GO 71962
72082: POP
72083: POP
// if not list then
72084: LD_VAR 0 13
72088: NOT
72089: IFFALSE 72093
// exit ;
72091: GO 72339
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
72093: LD_ADDR_VAR 0 13
72097: PUSH
72098: LD_VAR 0 1
72102: PPUSH
72103: LD_VAR 0 13
72107: PPUSH
72108: LD_INT 1
72110: PPUSH
72111: LD_INT 1
72113: PPUSH
72114: CALL 15934 0 4
72118: ST_TO_ADDR
// ComStop ( flame ) ;
72119: LD_VAR 0 1
72123: PPUSH
72124: CALL_OW 141
// for i in list do
72128: LD_ADDR_VAR 0 6
72132: PUSH
72133: LD_VAR 0 13
72137: PUSH
72138: FOR_IN
72139: IFFALSE 72170
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
72141: LD_VAR 0 1
72145: PPUSH
72146: LD_VAR 0 6
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: PPUSH
72155: LD_VAR 0 6
72159: PUSH
72160: LD_INT 2
72162: ARRAY
72163: PPUSH
72164: CALL_OW 176
72168: GO 72138
72170: POP
72171: POP
// repeat wait ( 0 0$1 ) ;
72172: LD_INT 35
72174: PPUSH
72175: CALL_OW 67
// task := GetTaskList ( flame ) ;
72179: LD_ADDR_VAR 0 14
72183: PUSH
72184: LD_VAR 0 1
72188: PPUSH
72189: CALL_OW 437
72193: ST_TO_ADDR
// if not task then
72194: LD_VAR 0 14
72198: NOT
72199: IFFALSE 72203
// exit ;
72201: GO 72339
// if task [ 1 ] [ 1 ] <> | then
72203: LD_VAR 0 14
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PUSH
72212: LD_INT 1
72214: ARRAY
72215: PUSH
72216: LD_STRING |
72218: NONEQUAL
72219: IFFALSE 72223
// exit ;
72221: GO 72339
// _x := task [ 1 ] [ 2 ] ;
72223: LD_ADDR_VAR 0 11
72227: PUSH
72228: LD_VAR 0 14
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PUSH
72237: LD_INT 2
72239: ARRAY
72240: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
72241: LD_ADDR_VAR 0 12
72245: PUSH
72246: LD_VAR 0 14
72250: PUSH
72251: LD_INT 1
72253: ARRAY
72254: PUSH
72255: LD_INT 3
72257: ARRAY
72258: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
72259: LD_VAR 0 11
72263: PPUSH
72264: LD_VAR 0 12
72268: PPUSH
72269: CALL_OW 351
72273: NOT
72274: IFTRUE 72293
72276: PUSH
72277: LD_VAR 0 11
72281: PPUSH
72282: LD_VAR 0 12
72286: PPUSH
72287: CALL_OW 554
72291: NOT
72292: OR
72293: IFFALSE 72327
// begin task := Delete ( task , 1 ) ;
72295: LD_ADDR_VAR 0 14
72299: PUSH
72300: LD_VAR 0 14
72304: PPUSH
72305: LD_INT 1
72307: PPUSH
72308: CALL_OW 3
72312: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
72313: LD_VAR 0 1
72317: PPUSH
72318: LD_VAR 0 14
72322: PPUSH
72323: CALL_OW 446
// end ; until not HasTask ( flame ) ;
72327: LD_VAR 0 1
72331: PPUSH
72332: CALL_OW 314
72336: NOT
72337: IFFALSE 72172
// end ;
72339: LD_VAR 0 5
72343: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72344: LD_EXP 100
72348: NOT
72349: IFFALSE 72399
72351: GO 72353
72353: DISABLE
// begin initHack := true ;
72354: LD_ADDR_EXP 100
72358: PUSH
72359: LD_INT 1
72361: ST_TO_ADDR
// hackTanks := [ ] ;
72362: LD_ADDR_EXP 101
72366: PUSH
72367: EMPTY
72368: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72369: LD_ADDR_EXP 102
72373: PUSH
72374: EMPTY
72375: ST_TO_ADDR
// hackLimit := 3 ;
72376: LD_ADDR_EXP 103
72380: PUSH
72381: LD_INT 3
72383: ST_TO_ADDR
// hackDist := 12 ;
72384: LD_ADDR_EXP 104
72388: PUSH
72389: LD_INT 12
72391: ST_TO_ADDR
// hackCounter := [ ] ;
72392: LD_ADDR_EXP 105
72396: PUSH
72397: EMPTY
72398: ST_TO_ADDR
// end ;
72399: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
72400: LD_EXP 100
72404: IFFALSE 72422
72406: PUSH
72407: LD_INT 34
72409: PUSH
72410: LD_INT 99
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PPUSH
72417: CALL_OW 69
72421: AND
72422: IFFALSE 72675
72424: GO 72426
72426: DISABLE
72427: LD_INT 0
72429: PPUSH
72430: PPUSH
// begin enable ;
72431: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
72432: LD_ADDR_VAR 0 1
72436: PUSH
72437: LD_INT 34
72439: PUSH
72440: LD_INT 99
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PPUSH
72447: CALL_OW 69
72451: PUSH
72452: FOR_IN
72453: IFFALSE 72673
// begin if not i in hackTanks then
72455: LD_VAR 0 1
72459: PUSH
72460: LD_EXP 101
72464: IN
72465: NOT
72466: IFFALSE 72549
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
72468: LD_ADDR_EXP 101
72472: PUSH
72473: LD_EXP 101
72477: PPUSH
72478: LD_EXP 101
72482: PUSH
72483: LD_INT 1
72485: PLUS
72486: PPUSH
72487: LD_VAR 0 1
72491: PPUSH
72492: CALL_OW 1
72496: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
72497: LD_ADDR_EXP 102
72501: PUSH
72502: LD_EXP 102
72506: PPUSH
72507: LD_EXP 102
72511: PUSH
72512: LD_INT 1
72514: PLUS
72515: PPUSH
72516: EMPTY
72517: PPUSH
72518: CALL_OW 1
72522: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
72523: LD_ADDR_EXP 105
72527: PUSH
72528: LD_EXP 105
72532: PPUSH
72533: LD_EXP 105
72537: PUSH
72538: LD_INT 1
72540: PLUS
72541: PPUSH
72542: EMPTY
72543: PPUSH
72544: CALL_OW 1
72548: ST_TO_ADDR
// end ; if not IsOk ( i ) then
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL_OW 302
72558: NOT
72559: IFFALSE 72572
// begin HackUnlinkAll ( i ) ;
72561: LD_VAR 0 1
72565: PPUSH
72566: CALL 72678 0 1
// continue ;
72570: GO 72452
// end ; HackCheckCapturedStatus ( i ) ;
72572: LD_VAR 0 1
72576: PPUSH
72577: CALL 73123 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
72581: LD_ADDR_VAR 0 2
72585: PUSH
72586: LD_INT 81
72588: PUSH
72589: LD_VAR 0 1
72593: PPUSH
72594: CALL_OW 255
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 33
72605: PUSH
72606: LD_INT 3
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 91
72615: PUSH
72616: LD_VAR 0 1
72620: PUSH
72621: LD_EXP 104
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 50
72633: PUSH
72634: EMPTY
72635: LIST
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: PPUSH
72643: CALL_OW 69
72647: ST_TO_ADDR
// if not tmp then
72648: LD_VAR 0 2
72652: NOT
72653: IFFALSE 72657
// continue ;
72655: GO 72452
// HackLink ( i , tmp ) ;
72657: LD_VAR 0 1
72661: PPUSH
72662: LD_VAR 0 2
72666: PPUSH
72667: CALL 72814 0 2
// end ;
72671: GO 72452
72673: POP
72674: POP
// end ;
72675: PPOPN 2
72677: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
72678: LD_INT 0
72680: PPUSH
72681: PPUSH
72682: PPUSH
// if not hack in hackTanks then
72683: LD_VAR 0 1
72687: PUSH
72688: LD_EXP 101
72692: IN
72693: NOT
72694: IFFALSE 72698
// exit ;
72696: GO 72809
// index := GetElementIndex ( hackTanks , hack ) ;
72698: LD_ADDR_VAR 0 4
72702: PUSH
72703: LD_EXP 101
72707: PPUSH
72708: LD_VAR 0 1
72712: PPUSH
72713: CALL 15229 0 2
72717: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72718: LD_EXP 102
72722: PUSH
72723: LD_VAR 0 4
72727: ARRAY
72728: IFFALSE 72809
// begin for i in hackTanksCaptured [ index ] do
72730: LD_ADDR_VAR 0 3
72734: PUSH
72735: LD_EXP 102
72739: PUSH
72740: LD_VAR 0 4
72744: ARRAY
72745: PUSH
72746: FOR_IN
72747: IFFALSE 72773
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
72749: LD_VAR 0 3
72753: PUSH
72754: LD_INT 1
72756: ARRAY
72757: PPUSH
72758: LD_VAR 0 3
72762: PUSH
72763: LD_INT 2
72765: ARRAY
72766: PPUSH
72767: CALL_OW 235
72771: GO 72746
72773: POP
72774: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
72775: LD_ADDR_EXP 102
72779: PUSH
72780: LD_EXP 102
72784: PPUSH
72785: LD_VAR 0 4
72789: PPUSH
72790: EMPTY
72791: PPUSH
72792: CALL_OW 1
72796: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
72797: LD_VAR 0 1
72801: PPUSH
72802: LD_INT 0
72804: PPUSH
72805: CALL_OW 505
// end ; end ;
72809: LD_VAR 0 2
72813: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
72818: PPUSH
// if not hack in hackTanks or not vehicles then
72819: LD_VAR 0 1
72823: PUSH
72824: LD_EXP 101
72828: IN
72829: NOT
72830: IFTRUE 72839
72832: PUSH
72833: LD_VAR 0 2
72837: NOT
72838: OR
72839: IFFALSE 72843
// exit ;
72841: GO 73118
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
72843: LD_ADDR_VAR 0 2
72847: PUSH
72848: LD_VAR 0 1
72852: PPUSH
72853: LD_VAR 0 2
72857: PPUSH
72858: LD_INT 1
72860: PPUSH
72861: LD_INT 1
72863: PPUSH
72864: CALL 15881 0 4
72868: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
72869: LD_ADDR_VAR 0 5
72873: PUSH
72874: LD_EXP 101
72878: PPUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: CALL 15229 0 2
72888: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
72889: LD_EXP 102
72893: PUSH
72894: LD_VAR 0 5
72898: ARRAY
72899: PUSH
72900: LD_EXP 103
72904: LESS
72905: IFFALSE 73094
// begin for i := 1 to vehicles do
72907: LD_ADDR_VAR 0 4
72911: PUSH
72912: DOUBLE
72913: LD_INT 1
72915: DEC
72916: ST_TO_ADDR
72917: LD_VAR 0 2
72921: PUSH
72922: FOR_TO
72923: IFFALSE 73092
// begin if hackTanksCaptured [ index ] = hackLimit then
72925: LD_EXP 102
72929: PUSH
72930: LD_VAR 0 5
72934: ARRAY
72935: PUSH
72936: LD_EXP 103
72940: EQUAL
72941: IFFALSE 72945
// break ;
72943: GO 73092
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
72945: LD_ADDR_EXP 105
72949: PUSH
72950: LD_EXP 105
72954: PPUSH
72955: LD_VAR 0 5
72959: PPUSH
72960: LD_EXP 105
72964: PUSH
72965: LD_VAR 0 5
72969: ARRAY
72970: PUSH
72971: LD_INT 1
72973: PLUS
72974: PPUSH
72975: CALL_OW 1
72979: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
72980: LD_ADDR_EXP 102
72984: PUSH
72985: LD_EXP 102
72989: PPUSH
72990: LD_VAR 0 5
72994: PUSH
72995: LD_EXP 102
72999: PUSH
73000: LD_VAR 0 5
73004: ARRAY
73005: PUSH
73006: LD_INT 1
73008: PLUS
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PPUSH
73014: LD_VAR 0 2
73018: PUSH
73019: LD_VAR 0 4
73023: ARRAY
73024: PUSH
73025: LD_VAR 0 2
73029: PUSH
73030: LD_VAR 0 4
73034: ARRAY
73035: PPUSH
73036: CALL_OW 255
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PPUSH
73045: CALL 15446 0 3
73049: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73050: LD_VAR 0 2
73054: PUSH
73055: LD_VAR 0 4
73059: ARRAY
73060: PPUSH
73061: LD_VAR 0 1
73065: PPUSH
73066: CALL_OW 255
73070: PPUSH
73071: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73075: LD_VAR 0 2
73079: PUSH
73080: LD_VAR 0 4
73084: ARRAY
73085: PPUSH
73086: CALL_OW 141
// end ;
73090: GO 72922
73092: POP
73093: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73094: LD_VAR 0 1
73098: PPUSH
73099: LD_EXP 102
73103: PUSH
73104: LD_VAR 0 5
73108: ARRAY
73109: PUSH
73110: LD_INT 0
73112: PLUS
73113: PPUSH
73114: CALL_OW 505
// end ;
73118: LD_VAR 0 3
73122: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73123: LD_INT 0
73125: PPUSH
73126: PPUSH
73127: PPUSH
73128: PPUSH
// if not hack in hackTanks then
73129: LD_VAR 0 1
73133: PUSH
73134: LD_EXP 101
73138: IN
73139: NOT
73140: IFFALSE 73144
// exit ;
73142: GO 73388
// index := GetElementIndex ( hackTanks , hack ) ;
73144: LD_ADDR_VAR 0 4
73148: PUSH
73149: LD_EXP 101
73153: PPUSH
73154: LD_VAR 0 1
73158: PPUSH
73159: CALL 15229 0 2
73163: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73164: LD_ADDR_VAR 0 3
73168: PUSH
73169: DOUBLE
73170: LD_EXP 102
73174: PUSH
73175: LD_VAR 0 4
73179: ARRAY
73180: INC
73181: ST_TO_ADDR
73182: LD_INT 1
73184: PUSH
73185: FOR_DOWNTO
73186: IFFALSE 73362
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73188: LD_ADDR_VAR 0 5
73192: PUSH
73193: LD_EXP 102
73197: PUSH
73198: LD_VAR 0 4
73202: ARRAY
73203: PUSH
73204: LD_VAR 0 3
73208: ARRAY
73209: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73210: LD_VAR 0 5
73214: PUSH
73215: LD_INT 1
73217: ARRAY
73218: PPUSH
73219: CALL_OW 302
73223: NOT
73224: IFTRUE 73252
73226: PUSH
73227: LD_VAR 0 5
73231: PUSH
73232: LD_INT 1
73234: ARRAY
73235: PPUSH
73236: CALL_OW 255
73240: PUSH
73241: LD_VAR 0 1
73245: PPUSH
73246: CALL_OW 255
73250: NONEQUAL
73251: OR
73252: IFFALSE 73360
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73254: LD_VAR 0 5
73258: PUSH
73259: LD_INT 1
73261: ARRAY
73262: PPUSH
73263: CALL_OW 305
73267: IFFALSE 73295
73269: PUSH
73270: LD_VAR 0 5
73274: PUSH
73275: LD_INT 1
73277: ARRAY
73278: PPUSH
73279: CALL_OW 255
73283: PUSH
73284: LD_VAR 0 1
73288: PPUSH
73289: CALL_OW 255
73293: EQUAL
73294: AND
73295: IFFALSE 73319
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73297: LD_VAR 0 5
73301: PUSH
73302: LD_INT 1
73304: ARRAY
73305: PPUSH
73306: LD_VAR 0 5
73310: PUSH
73311: LD_INT 2
73313: ARRAY
73314: PPUSH
73315: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73319: LD_ADDR_EXP 102
73323: PUSH
73324: LD_EXP 102
73328: PPUSH
73329: LD_VAR 0 4
73333: PPUSH
73334: LD_EXP 102
73338: PUSH
73339: LD_VAR 0 4
73343: ARRAY
73344: PPUSH
73345: LD_VAR 0 3
73349: PPUSH
73350: CALL_OW 3
73354: PPUSH
73355: CALL_OW 1
73359: ST_TO_ADDR
// end ; end ;
73360: GO 73185
73362: POP
73363: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73364: LD_VAR 0 1
73368: PPUSH
73369: LD_EXP 102
73373: PUSH
73374: LD_VAR 0 4
73378: ARRAY
73379: PUSH
73380: LD_INT 0
73382: PLUS
73383: PPUSH
73384: CALL_OW 505
// end ;
73388: LD_VAR 0 2
73392: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
73393: LD_INT 0
73395: PPUSH
73396: PPUSH
73397: PPUSH
73398: PPUSH
// if not hack in hackTanks then
73399: LD_VAR 0 1
73403: PUSH
73404: LD_EXP 101
73408: IN
73409: NOT
73410: IFFALSE 73414
// exit ;
73412: GO 73499
// index := GetElementIndex ( hackTanks , hack ) ;
73414: LD_ADDR_VAR 0 5
73418: PUSH
73419: LD_EXP 101
73423: PPUSH
73424: LD_VAR 0 1
73428: PPUSH
73429: CALL 15229 0 2
73433: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
73434: LD_ADDR_VAR 0 4
73438: PUSH
73439: DOUBLE
73440: LD_INT 1
73442: DEC
73443: ST_TO_ADDR
73444: LD_EXP 102
73448: PUSH
73449: LD_VAR 0 5
73453: ARRAY
73454: PUSH
73455: FOR_TO
73456: IFFALSE 73497
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
73458: LD_EXP 102
73462: PUSH
73463: LD_VAR 0 5
73467: ARRAY
73468: PUSH
73469: LD_VAR 0 4
73473: ARRAY
73474: PUSH
73475: LD_INT 1
73477: ARRAY
73478: PUSH
73479: LD_VAR 0 2
73483: EQUAL
73484: IFFALSE 73495
// KillUnit ( vehicle ) ;
73486: LD_VAR 0 2
73490: PPUSH
73491: CALL_OW 66
73495: GO 73455
73497: POP
73498: POP
// end ;
73499: LD_VAR 0 3
73503: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
73504: LD_EXP 106
73508: NOT
73509: IFFALSE 73544
73511: GO 73513
73513: DISABLE
// begin initMiner := true ;
73514: LD_ADDR_EXP 106
73518: PUSH
73519: LD_INT 1
73521: ST_TO_ADDR
// minersList := [ ] ;
73522: LD_ADDR_EXP 107
73526: PUSH
73527: EMPTY
73528: ST_TO_ADDR
// minerMinesList := [ ] ;
73529: LD_ADDR_EXP 108
73533: PUSH
73534: EMPTY
73535: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
73536: LD_ADDR_EXP 109
73540: PUSH
73541: LD_INT 6
73543: ST_TO_ADDR
// end ;
73544: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
73545: LD_EXP 106
73549: IFFALSE 73580
73551: PUSH
73552: LD_EXP 108
73556: PPUSH
73557: CALL 12528 0 1
73561: IFTRUE 73579
73563: PUSH
73564: LD_INT 34
73566: PUSH
73567: LD_INT 81
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PPUSH
73574: CALL_OW 69
73578: OR
73579: AND
73580: IFFALSE 74108
73582: GO 73584
73584: DISABLE
73585: LD_INT 0
73587: PPUSH
73588: PPUSH
73589: PPUSH
73590: PPUSH
// begin enable ;
73591: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
73592: LD_ADDR_VAR 0 1
73596: PUSH
73597: LD_INT 34
73599: PUSH
73600: LD_INT 81
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PPUSH
73607: CALL_OW 69
73611: PUSH
73612: FOR_IN
73613: IFFALSE 73685
// begin if not i in minersList then
73615: LD_VAR 0 1
73619: PUSH
73620: LD_EXP 107
73624: IN
73625: NOT
73626: IFFALSE 73683
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
73628: LD_ADDR_EXP 107
73632: PUSH
73633: LD_EXP 107
73637: PPUSH
73638: LD_EXP 107
73642: PUSH
73643: LD_INT 1
73645: PLUS
73646: PPUSH
73647: LD_VAR 0 1
73651: PPUSH
73652: CALL_OW 1
73656: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
73657: LD_ADDR_EXP 108
73661: PUSH
73662: LD_EXP 108
73666: PPUSH
73667: LD_EXP 108
73671: PUSH
73672: LD_INT 1
73674: PLUS
73675: PPUSH
73676: EMPTY
73677: PPUSH
73678: CALL_OW 1
73682: ST_TO_ADDR
// end end ;
73683: GO 73612
73685: POP
73686: POP
// for i := minerMinesList downto 1 do
73687: LD_ADDR_VAR 0 1
73691: PUSH
73692: DOUBLE
73693: LD_EXP 108
73697: INC
73698: ST_TO_ADDR
73699: LD_INT 1
73701: PUSH
73702: FOR_DOWNTO
73703: IFFALSE 74106
// begin if IsLive ( minersList [ i ] ) then
73705: LD_EXP 107
73709: PUSH
73710: LD_VAR 0 1
73714: ARRAY
73715: PPUSH
73716: CALL_OW 300
73720: IFFALSE 73753
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
73722: LD_EXP 107
73726: PUSH
73727: LD_VAR 0 1
73731: ARRAY
73732: PPUSH
73733: LD_EXP 108
73737: PUSH
73738: LD_VAR 0 1
73742: ARRAY
73743: PPUSH
73744: CALL 12528 0 1
73748: PPUSH
73749: CALL_OW 505
// if not minerMinesList [ i ] then
73753: LD_EXP 108
73757: PUSH
73758: LD_VAR 0 1
73762: ARRAY
73763: NOT
73764: IFFALSE 73768
// continue ;
73766: GO 73702
// for j := minerMinesList [ i ] downto 1 do
73768: LD_ADDR_VAR 0 2
73772: PUSH
73773: DOUBLE
73774: LD_EXP 108
73778: PUSH
73779: LD_VAR 0 1
73783: ARRAY
73784: INC
73785: ST_TO_ADDR
73786: LD_INT 1
73788: PUSH
73789: FOR_DOWNTO
73790: IFFALSE 74102
// begin side := GetSide ( minersList [ i ] ) ;
73792: LD_ADDR_VAR 0 3
73796: PUSH
73797: LD_EXP 107
73801: PUSH
73802: LD_VAR 0 1
73806: ARRAY
73807: PPUSH
73808: CALL_OW 255
73812: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) then
73813: LD_EXP 107
73817: PUSH
73818: LD_VAR 0 1
73822: ARRAY
73823: PPUSH
73824: CALL_OW 301
73828: IFFALSE 73873
// begin minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
73830: LD_ADDR_EXP 108
73834: PUSH
73835: LD_EXP 108
73839: PPUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: LD_EXP 108
73849: PUSH
73850: LD_VAR 0 1
73854: ARRAY
73855: PPUSH
73856: LD_VAR 0 2
73860: PPUSH
73861: CALL_OW 3
73865: PPUSH
73866: CALL_OW 1
73870: ST_TO_ADDR
// continue ;
73871: GO 73789
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
73873: LD_ADDR_VAR 0 4
73877: PUSH
73878: LD_EXP 108
73882: PUSH
73883: LD_VAR 0 1
73887: ARRAY
73888: PUSH
73889: LD_VAR 0 2
73893: ARRAY
73894: PUSH
73895: LD_INT 1
73897: ARRAY
73898: PPUSH
73899: LD_EXP 108
73903: PUSH
73904: LD_VAR 0 1
73908: ARRAY
73909: PUSH
73910: LD_VAR 0 2
73914: ARRAY
73915: PUSH
73916: LD_INT 2
73918: ARRAY
73919: PPUSH
73920: CALL_OW 428
73924: ST_TO_ADDR
// if not tmp then
73925: LD_VAR 0 4
73929: NOT
73930: IFFALSE 73934
// continue ;
73932: GO 73789
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
73934: LD_VAR 0 4
73938: PUSH
73939: LD_INT 81
73941: PUSH
73942: LD_VAR 0 3
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PPUSH
73951: CALL_OW 69
73955: IN
73956: IFFALSE 74006
73958: PUSH
73959: LD_EXP 108
73963: PUSH
73964: LD_VAR 0 1
73968: ARRAY
73969: PUSH
73970: LD_VAR 0 2
73974: ARRAY
73975: PUSH
73976: LD_INT 1
73978: ARRAY
73979: PPUSH
73980: LD_EXP 108
73984: PUSH
73985: LD_VAR 0 1
73989: ARRAY
73990: PUSH
73991: LD_VAR 0 2
73995: ARRAY
73996: PUSH
73997: LD_INT 2
73999: ARRAY
74000: PPUSH
74001: CALL_OW 458
74005: AND
74006: IFFALSE 74100
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74008: LD_EXP 108
74012: PUSH
74013: LD_VAR 0 1
74017: ARRAY
74018: PUSH
74019: LD_VAR 0 2
74023: ARRAY
74024: PUSH
74025: LD_INT 1
74027: ARRAY
74028: PPUSH
74029: LD_EXP 108
74033: PUSH
74034: LD_VAR 0 1
74038: ARRAY
74039: PUSH
74040: LD_VAR 0 2
74044: ARRAY
74045: PUSH
74046: LD_INT 2
74048: ARRAY
74049: PPUSH
74050: LD_VAR 0 3
74054: PPUSH
74055: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74059: LD_ADDR_EXP 108
74063: PUSH
74064: LD_EXP 108
74068: PPUSH
74069: LD_VAR 0 1
74073: PPUSH
74074: LD_EXP 108
74078: PUSH
74079: LD_VAR 0 1
74083: ARRAY
74084: PPUSH
74085: LD_VAR 0 2
74089: PPUSH
74090: CALL_OW 3
74094: PPUSH
74095: CALL_OW 1
74099: ST_TO_ADDR
// end ; end ;
74100: GO 73789
74102: POP
74103: POP
// end ;
74104: GO 73702
74106: POP
74107: POP
// end ;
74108: PPOPN 4
74110: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
74111: LD_INT 0
74113: PPUSH
74114: PPUSH
74115: PPUSH
74116: PPUSH
// result := false ;
74117: LD_ADDR_VAR 0 4
74121: PUSH
74122: LD_INT 0
74124: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74125: LD_VAR 0 1
74129: PPUSH
74130: CALL_OW 264
74134: PUSH
74135: LD_INT 81
74137: EQUAL
74138: NOT
74139: IFFALSE 74143
// exit ;
74141: GO 74513
// side := GetSide ( unit ) ;
74143: LD_ADDR_VAR 0 6
74147: PUSH
74148: LD_VAR 0 1
74152: PPUSH
74153: CALL_OW 255
74157: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
74158: LD_ADDR_VAR 0 5
74162: PUSH
74163: LD_EXP 107
74167: PPUSH
74168: LD_VAR 0 1
74172: PPUSH
74173: CALL 15229 0 2
74177: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74178: LD_EXP 108
74182: PUSH
74183: LD_VAR 0 5
74187: ARRAY
74188: PUSH
74189: LD_EXP 109
74193: GREATEREQUAL
74194: IFFALSE 74198
// exit ;
74196: GO 74513
// ComMoveXY ( unit , x , y ) ;
74198: LD_VAR 0 1
74202: PPUSH
74203: LD_VAR 0 2
74207: PPUSH
74208: LD_VAR 0 3
74212: PPUSH
74213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74217: LD_INT 35
74219: PPUSH
74220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74224: LD_VAR 0 1
74228: PPUSH
74229: LD_VAR 0 2
74233: PPUSH
74234: LD_VAR 0 3
74238: PPUSH
74239: CALL 47275 0 3
74243: NOT
74244: IFFALSE 74257
74246: PUSH
74247: LD_VAR 0 1
74251: PPUSH
74252: CALL_OW 314
74256: AND
74257: IFFALSE 74261
// exit ;
74259: GO 74513
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74261: LD_VAR 0 2
74265: PPUSH
74266: LD_VAR 0 3
74270: PPUSH
74271: CALL_OW 428
74275: PUSH
74276: LD_VAR 0 1
74280: EQUAL
74281: IFFALSE 74295
74283: PUSH
74284: LD_VAR 0 1
74288: PPUSH
74289: CALL_OW 314
74293: NOT
74294: AND
74295: IFFALSE 74217
// if MineAtPos ( x , y ) then
74297: LD_VAR 0 2
74301: PPUSH
74302: LD_VAR 0 3
74306: PPUSH
74307: CALL_OW 458
74311: IFFALSE 74315
// exit ;
74313: GO 74513
// if your_side = side then
74315: LD_OWVAR 2
74319: PUSH
74320: LD_VAR 0 6
74324: EQUAL
74325: IFFALSE 74344
// PlaySoundXY ( x , y , PlantMine ) ;
74327: LD_VAR 0 2
74331: PPUSH
74332: LD_VAR 0 3
74336: PPUSH
74337: LD_STRING PlantMine
74339: PPUSH
74340: CALL_OW 366
// repeat wait ( 1 ) ;
74344: LD_INT 1
74346: PPUSH
74347: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
74351: LD_VAR 0 2
74355: PPUSH
74356: LD_VAR 0 3
74360: PPUSH
74361: LD_VAR 0 6
74365: PPUSH
74366: LD_INT 0
74368: PPUSH
74369: CALL_OW 454
74373: IFFALSE 74344
// if MineAtPos ( x , y ) then
74375: LD_VAR 0 2
74379: PPUSH
74380: LD_VAR 0 3
74384: PPUSH
74385: CALL_OW 458
74389: IFFALSE 74505
// begin for i in minerMinesList [ index ] do
74391: LD_ADDR_VAR 0 7
74395: PUSH
74396: LD_EXP 108
74400: PUSH
74401: LD_VAR 0 5
74405: ARRAY
74406: PUSH
74407: FOR_IN
74408: IFFALSE 74450
// if i [ 1 ] = x and i [ 2 ] = y then
74410: LD_VAR 0 7
74414: PUSH
74415: LD_INT 1
74417: ARRAY
74418: PUSH
74419: LD_VAR 0 2
74423: EQUAL
74424: IFFALSE 74442
74426: PUSH
74427: LD_VAR 0 7
74431: PUSH
74432: LD_INT 2
74434: ARRAY
74435: PUSH
74436: LD_VAR 0 3
74440: EQUAL
74441: AND
74442: IFFALSE 74448
// exit ;
74444: POP
74445: POP
74446: GO 74513
74448: GO 74407
74450: POP
74451: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74452: LD_ADDR_EXP 108
74456: PUSH
74457: LD_EXP 108
74461: PPUSH
74462: LD_VAR 0 5
74466: PUSH
74467: LD_EXP 108
74471: PUSH
74472: LD_VAR 0 5
74476: ARRAY
74477: PUSH
74478: LD_INT 1
74480: PLUS
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PPUSH
74486: LD_VAR 0 2
74490: PUSH
74491: LD_VAR 0 3
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PPUSH
74500: CALL 15446 0 3
74504: ST_TO_ADDR
// end ; result := true ;
74505: LD_ADDR_VAR 0 4
74509: PUSH
74510: LD_INT 1
74512: ST_TO_ADDR
// end ;
74513: LD_VAR 0 4
74517: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74518: LD_INT 0
74520: PPUSH
74521: PPUSH
74522: PPUSH
// if not unit in minersList then
74523: LD_VAR 0 1
74527: PUSH
74528: LD_EXP 107
74532: IN
74533: NOT
74534: IFFALSE 74538
// exit ;
74536: GO 74745
// index := GetElementIndex ( minersList , unit ) ;
74538: LD_ADDR_VAR 0 6
74542: PUSH
74543: LD_EXP 107
74547: PPUSH
74548: LD_VAR 0 1
74552: PPUSH
74553: CALL 15229 0 2
74557: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74558: LD_ADDR_VAR 0 5
74562: PUSH
74563: DOUBLE
74564: LD_EXP 108
74568: PUSH
74569: LD_VAR 0 6
74573: ARRAY
74574: INC
74575: ST_TO_ADDR
74576: LD_INT 1
74578: PUSH
74579: FOR_DOWNTO
74580: IFFALSE 74743
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
74582: LD_EXP 108
74586: PUSH
74587: LD_VAR 0 6
74591: ARRAY
74592: PUSH
74593: LD_VAR 0 5
74597: ARRAY
74598: PUSH
74599: LD_INT 1
74601: ARRAY
74602: PPUSH
74603: LD_EXP 108
74607: PUSH
74608: LD_VAR 0 6
74612: ARRAY
74613: PUSH
74614: LD_VAR 0 5
74618: ARRAY
74619: PUSH
74620: LD_INT 2
74622: ARRAY
74623: PPUSH
74624: LD_VAR 0 2
74628: PPUSH
74629: LD_VAR 0 3
74633: PPUSH
74634: CALL_OW 298
74638: PUSH
74639: LD_INT 6
74641: LESS
74642: IFFALSE 74741
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74644: LD_EXP 108
74648: PUSH
74649: LD_VAR 0 6
74653: ARRAY
74654: PUSH
74655: LD_VAR 0 5
74659: ARRAY
74660: PUSH
74661: LD_INT 1
74663: ARRAY
74664: PPUSH
74665: LD_EXP 108
74669: PUSH
74670: LD_VAR 0 6
74674: ARRAY
74675: PUSH
74676: LD_VAR 0 5
74680: ARRAY
74681: PUSH
74682: LD_INT 2
74684: ARRAY
74685: PPUSH
74686: LD_VAR 0 1
74690: PPUSH
74691: CALL_OW 255
74695: PPUSH
74696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74700: LD_ADDR_EXP 108
74704: PUSH
74705: LD_EXP 108
74709: PPUSH
74710: LD_VAR 0 6
74714: PPUSH
74715: LD_EXP 108
74719: PUSH
74720: LD_VAR 0 6
74724: ARRAY
74725: PPUSH
74726: LD_VAR 0 5
74730: PPUSH
74731: CALL_OW 3
74735: PPUSH
74736: CALL_OW 1
74740: ST_TO_ADDR
// end ; end ;
74741: GO 74579
74743: POP
74744: POP
// end ;
74745: LD_VAR 0 4
74749: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
74750: LD_INT 0
74752: PPUSH
74753: PPUSH
74754: PPUSH
74755: PPUSH
74756: PPUSH
74757: PPUSH
74758: PPUSH
74759: PPUSH
74760: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
74761: LD_VAR 0 1
74765: PPUSH
74766: CALL_OW 264
74770: PUSH
74771: LD_INT 81
74773: EQUAL
74774: NOT
74775: IFTRUE 74790
74777: PUSH
74778: LD_VAR 0 1
74782: PUSH
74783: LD_EXP 107
74787: IN
74788: NOT
74789: OR
74790: IFFALSE 74794
// exit ;
74792: GO 75120
// index := GetElementIndex ( minersList , unit ) ;
74794: LD_ADDR_VAR 0 6
74798: PUSH
74799: LD_EXP 107
74803: PPUSH
74804: LD_VAR 0 1
74808: PPUSH
74809: CALL 15229 0 2
74813: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
74814: LD_ADDR_VAR 0 8
74818: PUSH
74819: LD_EXP 109
74823: PUSH
74824: LD_EXP 108
74828: PUSH
74829: LD_VAR 0 6
74833: ARRAY
74834: MINUS
74835: ST_TO_ADDR
// if not minesFreeAmount then
74836: LD_VAR 0 8
74840: NOT
74841: IFFALSE 74845
// exit ;
74843: GO 75120
// tmp := [ ] ;
74845: LD_ADDR_VAR 0 7
74849: PUSH
74850: EMPTY
74851: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
74852: LD_ADDR_VAR 0 5
74856: PUSH
74857: DOUBLE
74858: LD_INT 1
74860: DEC
74861: ST_TO_ADDR
74862: LD_VAR 0 8
74866: PUSH
74867: FOR_TO
74868: IFFALSE 75067
// begin _d := rand ( 0 , 5 ) ;
74870: LD_ADDR_VAR 0 11
74874: PUSH
74875: LD_INT 0
74877: PPUSH
74878: LD_INT 5
74880: PPUSH
74881: CALL_OW 12
74885: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
74886: LD_ADDR_VAR 0 12
74890: PUSH
74891: LD_INT 2
74893: PPUSH
74894: LD_INT 6
74896: PPUSH
74897: CALL_OW 12
74901: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
74902: LD_ADDR_VAR 0 9
74906: PUSH
74907: LD_VAR 0 2
74911: PPUSH
74912: LD_VAR 0 11
74916: PPUSH
74917: LD_VAR 0 12
74921: PPUSH
74922: CALL_OW 272
74926: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
74927: LD_ADDR_VAR 0 10
74931: PUSH
74932: LD_VAR 0 3
74936: PPUSH
74937: LD_VAR 0 11
74941: PPUSH
74942: LD_VAR 0 12
74946: PPUSH
74947: CALL_OW 273
74951: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
74952: LD_VAR 0 9
74956: PPUSH
74957: LD_VAR 0 10
74961: PPUSH
74962: CALL_OW 488
74966: IFFALSE 74990
74968: PUSH
74969: LD_VAR 0 9
74973: PUSH
74974: LD_VAR 0 10
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: PUSH
74983: LD_VAR 0 7
74987: IN
74988: NOT
74989: AND
74990: IFFALSE 75009
74992: PUSH
74993: LD_VAR 0 9
74997: PPUSH
74998: LD_VAR 0 10
75002: PPUSH
75003: CALL_OW 458
75007: NOT
75008: AND
75009: IFFALSE 75051
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75011: LD_ADDR_VAR 0 7
75015: PUSH
75016: LD_VAR 0 7
75020: PPUSH
75021: LD_VAR 0 7
75025: PUSH
75026: LD_INT 1
75028: PLUS
75029: PPUSH
75030: LD_VAR 0 9
75034: PUSH
75035: LD_VAR 0 10
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PPUSH
75044: CALL_OW 1
75048: ST_TO_ADDR
75049: GO 75065
// i := i - 1 ;
75051: LD_ADDR_VAR 0 5
75055: PUSH
75056: LD_VAR 0 5
75060: PUSH
75061: LD_INT 1
75063: MINUS
75064: ST_TO_ADDR
// end ;
75065: GO 74867
75067: POP
75068: POP
// for i in tmp do
75069: LD_ADDR_VAR 0 5
75073: PUSH
75074: LD_VAR 0 7
75078: PUSH
75079: FOR_IN
75080: IFFALSE 75118
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75082: LD_VAR 0 1
75086: PPUSH
75087: LD_VAR 0 5
75091: PUSH
75092: LD_INT 1
75094: ARRAY
75095: PPUSH
75096: LD_VAR 0 5
75100: PUSH
75101: LD_INT 2
75103: ARRAY
75104: PPUSH
75105: CALL 74111 0 3
75109: NOT
75110: IFFALSE 75116
// exit ;
75112: POP
75113: POP
75114: GO 75120
75116: GO 75079
75118: POP
75119: POP
// end ;
75120: LD_VAR 0 4
75124: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
75125: LD_INT 0
75127: PPUSH
75128: PPUSH
75129: PPUSH
75130: PPUSH
75131: PPUSH
75132: PPUSH
75133: PPUSH
75134: PPUSH
75135: PPUSH
// if GetClass ( unit ) <> class_sniper then
75136: LD_VAR 0 1
75140: PPUSH
75141: CALL_OW 257
75145: PUSH
75146: LD_INT 5
75148: NONEQUAL
75149: IFFALSE 75153
// exit ;
75151: GO 75623
// dist := 8 ;
75153: LD_ADDR_VAR 0 5
75157: PUSH
75158: LD_INT 8
75160: ST_TO_ADDR
// viewRange := 12 ;
75161: LD_ADDR_VAR 0 8
75165: PUSH
75166: LD_INT 12
75168: ST_TO_ADDR
// side := GetSide ( unit ) ;
75169: LD_ADDR_VAR 0 6
75173: PUSH
75174: LD_VAR 0 1
75178: PPUSH
75179: CALL_OW 255
75183: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75184: LD_INT 61
75186: PPUSH
75187: LD_VAR 0 6
75191: PPUSH
75192: CALL_OW 321
75196: PUSH
75197: LD_INT 2
75199: EQUAL
75200: IFFALSE 75210
// viewRange := 16 ;
75202: LD_ADDR_VAR 0 8
75206: PUSH
75207: LD_INT 16
75209: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75210: LD_VAR 0 1
75214: PPUSH
75215: LD_VAR 0 2
75219: PPUSH
75220: LD_VAR 0 3
75224: PPUSH
75225: CALL_OW 297
75229: PUSH
75230: LD_VAR 0 5
75234: GREATER
75235: IFFALSE 75314
// begin ComMoveXY ( unit , x , y ) ;
75237: LD_VAR 0 1
75241: PPUSH
75242: LD_VAR 0 2
75246: PPUSH
75247: LD_VAR 0 3
75251: PPUSH
75252: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75256: LD_INT 35
75258: PPUSH
75259: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75263: LD_VAR 0 1
75267: PPUSH
75268: LD_VAR 0 2
75272: PPUSH
75273: LD_VAR 0 3
75277: PPUSH
75278: CALL 47275 0 3
75282: NOT
75283: IFFALSE 75287
// exit ;
75285: GO 75623
// until GetDistUnitXY ( unit , x , y ) < dist ;
75287: LD_VAR 0 1
75291: PPUSH
75292: LD_VAR 0 2
75296: PPUSH
75297: LD_VAR 0 3
75301: PPUSH
75302: CALL_OW 297
75306: PUSH
75307: LD_VAR 0 5
75311: LESS
75312: IFFALSE 75256
// end ; ComTurnXY ( unit , x , y ) ;
75314: LD_VAR 0 1
75318: PPUSH
75319: LD_VAR 0 2
75323: PPUSH
75324: LD_VAR 0 3
75328: PPUSH
75329: CALL_OW 118
// repeat if Multiplayer then
75333: LD_OWVAR 4
75337: IFFALSE 75348
// wait ( 35 ) else
75339: LD_INT 35
75341: PPUSH
75342: CALL_OW 67
75346: GO 75355
// wait ( 5 ) ;
75348: LD_INT 5
75350: PPUSH
75351: CALL_OW 67
// _d := GetDir ( unit ) ;
75355: LD_ADDR_VAR 0 11
75359: PUSH
75360: LD_VAR 0 1
75364: PPUSH
75365: CALL_OW 254
75369: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
75370: LD_ADDR_VAR 0 7
75374: PUSH
75375: LD_VAR 0 1
75379: PPUSH
75380: CALL_OW 250
75384: PPUSH
75385: LD_VAR 0 1
75389: PPUSH
75390: CALL_OW 251
75394: PPUSH
75395: LD_VAR 0 2
75399: PPUSH
75400: LD_VAR 0 3
75404: PPUSH
75405: CALL 49911 0 4
75409: ST_TO_ADDR
// until dir = _d ;
75410: LD_VAR 0 7
75414: PUSH
75415: LD_VAR 0 11
75419: EQUAL
75420: IFFALSE 75333
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
75422: LD_ADDR_VAR 0 9
75426: PUSH
75427: LD_VAR 0 1
75431: PPUSH
75432: CALL_OW 250
75436: PPUSH
75437: LD_VAR 0 7
75441: PPUSH
75442: LD_VAR 0 5
75446: PPUSH
75447: CALL_OW 272
75451: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
75452: LD_ADDR_VAR 0 10
75456: PUSH
75457: LD_VAR 0 1
75461: PPUSH
75462: CALL_OW 251
75466: PPUSH
75467: LD_VAR 0 7
75471: PPUSH
75472: LD_VAR 0 5
75476: PPUSH
75477: CALL_OW 273
75481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75482: LD_VAR 0 9
75486: PPUSH
75487: LD_VAR 0 10
75491: PPUSH
75492: CALL_OW 488
75496: NOT
75497: IFFALSE 75501
// exit ;
75499: GO 75623
// ComAnimCustom ( unit , 1 ) ;
75501: LD_VAR 0 1
75505: PPUSH
75506: LD_INT 1
75508: PPUSH
75509: CALL_OW 592
// p := 0 ;
75513: LD_ADDR_VAR 0 12
75517: PUSH
75518: LD_INT 0
75520: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
75521: LD_VAR 0 9
75525: PPUSH
75526: LD_VAR 0 10
75530: PPUSH
75531: LD_VAR 0 6
75535: PPUSH
75536: LD_VAR 0 8
75540: PPUSH
75541: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
75545: LD_INT 35
75547: PPUSH
75548: CALL_OW 67
// p := Inc ( p ) ;
75552: LD_ADDR_VAR 0 12
75556: PUSH
75557: LD_VAR 0 12
75561: PPUSH
75562: CALL 49867 0 1
75566: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
75567: LD_VAR 0 12
75571: PUSH
75572: LD_INT 3
75574: EQUAL
75575: IFTRUE 75589
75577: PUSH
75578: LD_VAR 0 1
75582: PPUSH
75583: CALL_OW 302
75587: NOT
75588: OR
75589: IFTRUE 75602
75591: PUSH
75592: LD_VAR 0 1
75596: PPUSH
75597: CALL_OW 301
75601: OR
75602: IFFALSE 75545
// RemoveSeeing ( _x , _y , side ) ;
75604: LD_VAR 0 9
75608: PPUSH
75609: LD_VAR 0 10
75613: PPUSH
75614: LD_VAR 0 6
75618: PPUSH
75619: CALL_OW 331
// end ;
75623: LD_VAR 0 4
75627: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
75628: LD_INT 0
75630: PPUSH
75631: PPUSH
75632: PPUSH
75633: PPUSH
75634: PPUSH
75635: PPUSH
75636: PPUSH
75637: PPUSH
75638: PPUSH
75639: PPUSH
75640: PPUSH
// if not unit then
75641: LD_VAR 0 1
75645: NOT
75646: IFFALSE 75650
// exit ;
75648: GO 75921
// side := GetSide ( unit ) ;
75650: LD_ADDR_VAR 0 3
75654: PUSH
75655: LD_VAR 0 1
75659: PPUSH
75660: CALL_OW 255
75664: ST_TO_ADDR
// x := GetX ( unit ) ;
75665: LD_ADDR_VAR 0 5
75669: PUSH
75670: LD_VAR 0 1
75674: PPUSH
75675: CALL_OW 250
75679: ST_TO_ADDR
// y := GetY ( unit ) ;
75680: LD_ADDR_VAR 0 6
75684: PUSH
75685: LD_VAR 0 1
75689: PPUSH
75690: CALL_OW 251
75694: ST_TO_ADDR
// r := 8 ;
75695: LD_ADDR_VAR 0 4
75699: PUSH
75700: LD_INT 8
75702: ST_TO_ADDR
// if x - r < 0 then
75703: LD_VAR 0 5
75707: PUSH
75708: LD_VAR 0 4
75712: MINUS
75713: PUSH
75714: LD_INT 0
75716: LESS
75717: IFFALSE 75729
// min_x := 0 else
75719: LD_ADDR_VAR 0 7
75723: PUSH
75724: LD_INT 0
75726: ST_TO_ADDR
75727: GO 75745
// min_x := x - r ;
75729: LD_ADDR_VAR 0 7
75733: PUSH
75734: LD_VAR 0 5
75738: PUSH
75739: LD_VAR 0 4
75743: MINUS
75744: ST_TO_ADDR
// if y - r < 0 then
75745: LD_VAR 0 6
75749: PUSH
75750: LD_VAR 0 4
75754: MINUS
75755: PUSH
75756: LD_INT 0
75758: LESS
75759: IFFALSE 75771
// min_y := 0 else
75761: LD_ADDR_VAR 0 8
75765: PUSH
75766: LD_INT 0
75768: ST_TO_ADDR
75769: GO 75787
// min_y := y - r ;
75771: LD_ADDR_VAR 0 8
75775: PUSH
75776: LD_VAR 0 6
75780: PUSH
75781: LD_VAR 0 4
75785: MINUS
75786: ST_TO_ADDR
// max_x := x + r ;
75787: LD_ADDR_VAR 0 9
75791: PUSH
75792: LD_VAR 0 5
75796: PUSH
75797: LD_VAR 0 4
75801: PLUS
75802: ST_TO_ADDR
// max_y := y + r ;
75803: LD_ADDR_VAR 0 10
75807: PUSH
75808: LD_VAR 0 6
75812: PUSH
75813: LD_VAR 0 4
75817: PLUS
75818: ST_TO_ADDR
// for _x = min_x to max_x do
75819: LD_ADDR_VAR 0 11
75823: PUSH
75824: DOUBLE
75825: LD_VAR 0 7
75829: DEC
75830: ST_TO_ADDR
75831: LD_VAR 0 9
75835: PUSH
75836: FOR_TO
75837: IFFALSE 75919
// for _y = min_y to max_y do
75839: LD_ADDR_VAR 0 12
75843: PUSH
75844: DOUBLE
75845: LD_VAR 0 8
75849: DEC
75850: ST_TO_ADDR
75851: LD_VAR 0 10
75855: PUSH
75856: FOR_TO
75857: IFFALSE 75915
// begin if not ValidHex ( _x , _y ) then
75859: LD_VAR 0 11
75863: PPUSH
75864: LD_VAR 0 12
75868: PPUSH
75869: CALL_OW 488
75873: NOT
75874: IFFALSE 75878
// continue ;
75876: GO 75856
// if MineAtPos ( _x , _y ) then
75878: LD_VAR 0 11
75882: PPUSH
75883: LD_VAR 0 12
75887: PPUSH
75888: CALL_OW 458
75892: IFFALSE 75913
// ViewMineAtPos ( _x , _y , side ) ;
75894: LD_VAR 0 11
75898: PPUSH
75899: LD_VAR 0 12
75903: PPUSH
75904: LD_VAR 0 3
75908: PPUSH
75909: CALL_OW 457
// end ;
75913: GO 75856
75915: POP
75916: POP
75917: GO 75836
75919: POP
75920: POP
// end ;
75921: LD_VAR 0 2
75925: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
75926: LD_INT 0
75928: PPUSH
75929: PPUSH
75930: PPUSH
75931: PPUSH
75932: PPUSH
75933: PPUSH
// if not units then
75934: LD_VAR 0 1
75938: NOT
75939: IFFALSE 75943
// exit ;
75941: GO 76373
// scaners := [ ] ;
75943: LD_ADDR_VAR 0 6
75947: PUSH
75948: EMPTY
75949: ST_TO_ADDR
// for i in units do
75950: LD_ADDR_VAR 0 3
75954: PUSH
75955: LD_VAR 0 1
75959: PUSH
75960: FOR_IN
75961: IFFALSE 76118
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
75963: LD_VAR 0 3
75967: PPUSH
75968: CALL_OW 264
75972: PUSH
75973: LD_INT 11
75975: NONEQUAL
75976: IFTRUE 75990
75978: PUSH
75979: LD_VAR 0 3
75983: PPUSH
75984: CALL_OW 302
75988: NOT
75989: OR
75990: IFTRUE 76007
75992: PUSH
75993: LD_VAR 0 3
75997: PPUSH
75998: CALL_OW 110
76002: PUSH
76003: LD_INT 502
76005: EQUAL
76006: OR
76007: IFFALSE 76011
// continue ;
76009: GO 75960
// ComStop ( i ) ;
76011: LD_VAR 0 3
76015: PPUSH
76016: CALL_OW 141
// x := GetX ( i ) ;
76020: LD_ADDR_VAR 0 4
76024: PUSH
76025: LD_VAR 0 3
76029: PPUSH
76030: CALL_OW 250
76034: ST_TO_ADDR
// y := GetY ( i ) ;
76035: LD_ADDR_VAR 0 5
76039: PUSH
76040: LD_VAR 0 3
76044: PPUSH
76045: CALL_OW 251
76049: ST_TO_ADDR
// if GetSide ( i ) = your_side then
76050: LD_VAR 0 3
76054: PPUSH
76055: CALL_OW 255
76059: PUSH
76060: LD_OWVAR 2
76064: EQUAL
76065: IFFALSE 76084
// PlaySoundXY ( x , y , mineDetector ) ;
76067: LD_VAR 0 4
76071: PPUSH
76072: LD_VAR 0 5
76076: PPUSH
76077: LD_STRING mineDetector
76079: PPUSH
76080: CALL_OW 366
// scaners := Join ( scaners , i ) ;
76084: LD_ADDR_VAR 0 6
76088: PUSH
76089: LD_VAR 0 6
76093: PPUSH
76094: LD_VAR 0 3
76098: PPUSH
76099: CALL 48494 0 2
76103: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
76104: LD_VAR 0 3
76108: PPUSH
76109: LD_INT 502
76111: PPUSH
76112: CALL_OW 109
// end ;
76116: GO 75960
76118: POP
76119: POP
// if not scaners then
76120: LD_VAR 0 6
76124: NOT
76125: IFFALSE 76129
// exit ;
76127: GO 76373
// wait ( 3 ) ;
76129: LD_INT 3
76131: PPUSH
76132: CALL_OW 67
// timer := 6 ;
76136: LD_ADDR_VAR 0 7
76140: PUSH
76141: LD_INT 6
76143: ST_TO_ADDR
// repeat for i in scaners do
76144: LD_ADDR_VAR 0 3
76148: PUSH
76149: LD_VAR 0 6
76153: PUSH
76154: FOR_IN
76155: IFFALSE 76271
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
76157: LD_VAR 0 3
76161: PPUSH
76162: CALL_OW 302
76166: NOT
76167: IFTRUE 76180
76169: PUSH
76170: LD_VAR 0 3
76174: PPUSH
76175: CALL_OW 314
76179: OR
76180: IFTRUE 76211
76182: PUSH
76183: LD_VAR 0 3
76187: PPUSH
76188: CALL_OW 263
76192: PUSH
76193: LD_INT 1
76195: EQUAL
76196: IFFALSE 76210
76198: PUSH
76199: LD_VAR 0 3
76203: PPUSH
76204: CALL_OW 311
76208: NOT
76209: AND
76210: OR
76211: IFFALSE 76255
// begin SetUnitDisplayNumber ( i , 0 ) ;
76213: LD_VAR 0 3
76217: PPUSH
76218: LD_INT 0
76220: PPUSH
76221: CALL_OW 505
// SetTag ( i , 0 ) ;
76225: LD_VAR 0 3
76229: PPUSH
76230: LD_INT 0
76232: PPUSH
76233: CALL_OW 109
// scaners := scaners diff i ;
76237: LD_ADDR_VAR 0 6
76241: PUSH
76242: LD_VAR 0 6
76246: PUSH
76247: LD_VAR 0 3
76251: DIFF
76252: ST_TO_ADDR
// continue ;
76253: GO 76154
// end ; SetUnitDisplayNumber ( i , timer ) ;
76255: LD_VAR 0 3
76259: PPUSH
76260: LD_VAR 0 7
76264: PPUSH
76265: CALL_OW 505
// end ;
76269: GO 76154
76271: POP
76272: POP
// if not scaners then
76273: LD_VAR 0 6
76277: NOT
76278: IFFALSE 76282
// exit ;
76280: GO 76373
// timer := Dec ( timer ) ;
76282: LD_ADDR_VAR 0 7
76286: PUSH
76287: LD_VAR 0 7
76291: PPUSH
76292: CALL 49889 0 1
76296: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76297: LD_INT 35
76299: PPUSH
76300: CALL_OW 67
// until timer = 0 ;
76304: LD_VAR 0 7
76308: PUSH
76309: LD_INT 0
76311: EQUAL
76312: IFFALSE 76144
// if not scaners then
76314: LD_VAR 0 6
76318: NOT
76319: IFFALSE 76323
// exit ;
76321: GO 76373
// for i in scaners do
76323: LD_ADDR_VAR 0 3
76327: PUSH
76328: LD_VAR 0 6
76332: PUSH
76333: FOR_IN
76334: IFFALSE 76371
// begin SetUnitDisplayNumber ( i , 0 ) ;
76336: LD_VAR 0 3
76340: PPUSH
76341: LD_INT 0
76343: PPUSH
76344: CALL_OW 505
// SetTag ( i , 0 ) ;
76348: LD_VAR 0 3
76352: PPUSH
76353: LD_INT 0
76355: PPUSH
76356: CALL_OW 109
// RevealDetectorMine ( i ) ;
76360: LD_VAR 0 3
76364: PPUSH
76365: CALL 75628 0 1
// end ;
76369: GO 76333
76371: POP
76372: POP
// end ;
76373: LD_VAR 0 2
76377: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
76378: LD_INT 0
76380: PPUSH
// if p1 = mine_detector_mode then
76381: LD_VAR 0 2
76385: PUSH
76386: LD_INT 103
76388: EQUAL
76389: IFFALSE 76400
// DetectMine ( units ) ;
76391: LD_VAR 0 1
76395: PPUSH
76396: CALL 75926 0 1
// end ;
76400: LD_VAR 0 7
76404: RET
