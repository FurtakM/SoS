// on VehicleCaptured ( new , old , side , capturing_unit ) do begin display_strings := [ new , old , side , capturing_unit ] ;
   0: LD_ADDR_OWVAR 47
   4: PUSH
   5: LD_VAR 0 1
   9: PUSH
  10: LD_VAR 0 2
  14: PUSH
  15: LD_VAR 0 3
  19: PUSH
  20: LD_VAR 0 4
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: LIST
  29: LIST
  30: ST_TO_ADDR
// end ;
  31: PPOPN 4
  33: END
// every 0 0$01 do
  34: GO 36
  36: DISABLE
// begin enable ;
  37: ENABLE
// display_strings := GetTaskList ( FilterAllUnits ( [ f_class , 2 ] ) [ 1 ] ) ;
  38: LD_ADDR_OWVAR 47
  42: PUSH
  43: LD_INT 25
  45: PUSH
  46: LD_INT 2
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: PPUSH
  53: CALL_OW 69
  57: PUSH
  58: LD_INT 1
  60: ARRAY
  61: PPUSH
  62: CALL_OW 437
  66: ST_TO_ADDR
// end ;
  67: END
// export function Build ( units , btype , x , y , dir ) ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if not units then
  72: LD_VAR 0 1
  76: NOT
  77: IFFALSE 81
// exit ;
  79: GO 152
// for i in units do
  81: LD_ADDR_VAR 0 7
  85: PUSH
  86: LD_VAR 0 1
  90: PUSH
  91: FOR_IN
  92: IFFALSE 150
// SetTaskList ( i , [ [ B , x , y , 0 , btype - 1 , dir , 0 ] ] ) ;
  94: LD_VAR 0 7
  98: PPUSH
  99: LD_STRING B
 101: PUSH
 102: LD_VAR 0 3
 106: PUSH
 107: LD_VAR 0 4
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: LD_VAR 0 2
 119: PUSH
 120: LD_INT 1
 122: MINUS
 123: PUSH
 124: LD_VAR 0 5
 128: PUSH
 129: LD_INT 0
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: LIST
 140: PUSH
 141: EMPTY
 142: LIST
 143: PPUSH
 144: CALL_OW 446
 148: GO 91
 150: POP
 151: POP
// end ;
 152: LD_VAR 0 6
 156: RET
// every 1 do
 157: GO 159
 159: DISABLE
// Build ( [ a1 , a2 ] , b_lab , 29 , 40 , 0 ) ;
 160: LD_INT 8
 162: PUSH
 163: LD_INT 9
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PPUSH
 170: LD_INT 6
 172: PPUSH
 173: LD_INT 29
 175: PPUSH
 176: LD_INT 40
 178: PPUSH
 179: LD_INT 0
 181: PPUSH
 182: CALL 68 0 5
 186: END
