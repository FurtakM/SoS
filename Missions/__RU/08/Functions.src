// Prepare Hero for use
// ident - ident from start.txt - 'JMM' for example
// exist_mode
//   - false if unit not exist in save
//   - true if unit already exist in save
// class - which class will have unit after spawn, set 0 if not
// example: JMM := PrepareUnitExt('JMM', false, class_soldier);
Export Function PrepareUnitExt(ident, exist_mode, class);
var unit;
begin

   if debugMode then
      unit := NewCharacter(ident);

   if exist_mode AND NOT debugMode then
      unit := CreateCharacter(previousMissionPrefix&ident)
   else if NOT debugMode  then
      unit := NewCharacter(ident);

   if class then
      SetClass(unit, class);

   result := unit;
End;

// Summary: Before calling the SaveCharacters function, checks if the character given in the argument is OK and if it is on the side 
// Input: Character, characterStringID
// Example: ExtSaveCharacter(Burlak, 'MyBurlak');
Export Function ExtSaveCharacter(character, characterStringID, side);
begin
   if GetSide(character) = side AND NOT IsDead(character) then
      SaveCharacters(character, missionPrefix&characterStringID);
end;

// Summary: Before calling the SaveCharacters function, checks if the characters list given in the argument is OK and if it is on the side 
// Input: Characters, characterStringID
// Example: ExtSaveCharacter([FilterAllUnits...], 'MySavedTeam');
Export Function ExtSaveCharacters(characters, charactersStringID, side);
var unit, resultCharactersToSave;
begin
   resultCharactersToSave = [];

   for unit in characters do
      if GetSide(unit) = side AND NOT IsDead(unit) then
         resultCharactersToSave = resultCharactersToSave ^ unit;

   SaveCharacters(resultCharactersToSave, missionPrefix&charactersStringID);
end;


// Place units from list on area with spawnMode (materialize)
// Input: [list] units, [name] area, [bool] spawnMode
// Example: PlaceUnitsArea([Burlak, Gnyevko, Kovalyuk], SpawnArea, false);
Export Function PlaceUnitsArea(units, area, spawnMode);
var unit;
begin
   for unit in units do
      PlaceUnitArea(unit, area, spawnMode);
end;

Export function DialogRandom(characters, dialogMID, dialogFID, radio, canTalkHero);
var i, speaker, units;
begin                                       
   units = characters;

   units := units diff [Burlak, Karamazov, Petrovova, Gleb, Petrosyan, Titov, Dolgov, Lipshchin, Kirilenkova];

   if NOT units AND NOT canTalkHero then
      exit;

   if NOT units then
      units = characters diff [Burlak];

   if NOT units AND canTalkHero then
      exit;

   speaker := units[rand(1, units)];

   if radio then
   begin
      if GetSex(speaker) = sex_male then
         SayRadio(speaker, dialogMID)
      else
         SayRadio(speaker, dialogFID);
   end
   else
   begin
      if GetSex(speaker) = sex_male then
         Say(speaker, dialogMID)
      else
         Say(speaker, dialogFID);  
   end;

   result := speaker;
end;


// Remove units from list, if list is null or empty - return.
// Input: [list] units
// Example: RemoveUnits([Burlak, Gnyevko, Kovalyuk]);
Export function RemoveUnits(units);
var unit;
begin
   if NOT units then exit;

   if Heike in units then
   begin
      if GetAttitude(3, 8) = att_neutral then HeikeStatus = 1
      else HeikeStatus = 2;

      forceStopKurtAttack = true;

      SetClass(Heike, 1);
   end;

   if Kurt in units then
   begin
        if GetAttitude(3, 8) = att_neutral then KurtStatus = 1
        else begin
         KurtStatus = 2;
         KurtAttack = 1;
        end;
   end;

   for unit in units do
      RemoveUnit(unit);
end;

// Summary: Get amount from struct weaponsData buildOnTurret elements with specific value (true or false).
// Input: [bool] isBuild
// Example: GetAmountWeaponsDataBuildOnTurrent(true);
Export function GetAmountWeaponsDataBuildOnTurret(isBuild);
var i, amount;
begin
   amount = 0;

   for i := 1 to weaponsData do
      if weaponsData[i][2] = isBuild then
         amount = amount + 1;

   if isBuild then
      if amount >= 3 then
         amount = 3;

   result = amount;
end;

// Summary: Get amount from struct weaponsData buildOnVehicle elements with specific value (true or false).
// Input: [bool] isBuild
// Example: GetAmountWeaponsDataBuildOnTurrent(true);
Export function GetAmountWeaponsDataBuildOnVehicle(isBuild);
var i, amount;
begin
   amount = 0;

   for i := 1 to weaponsData do
      if weaponsData[i][3] = isBuild then
         amount = amount + 1;

   result = amount;
end;

Export function SetWeaponDataBuild(weapon, turret);
var i;
begin
    if turret then
    begin
        for i := 1 to weaponsData do
            if weaponsData[i][1] = weapon AND weaponsData[i][2] = false then
                weaponsData = ReplaceIn(weaponsData, [i, 2], true);  
    end else
    begin
      for i := 1 to weaponsData do
            if weaponsData[i][1] = weapon AND weaponsData[i][3] = false then
                weaponsData = ReplaceIn(weaponsData, [i, 3], true);     
    end;
end;

// Summary: Controller for shoot trening.
// Example: ShootTreningController;
Export function ShootTreningController;
var i, unitsInArea, unit, depots, depot, barrelsAreaList, randIndex, randPosX, randPosY, barrelsInArea;
begin
   unitsInArea = FilterUnitsInArea(ShootArea, [[f_side, 3], [f_type, unit_human], [f_ok], [f_not, [f_hastask]]]);
   depots = FilterAllUnits([[f_side, 3], [f_ok], [f_type, unit_building], [f_not, [f_constructed]], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);
   barrelsAreaList = AreaToList(BarrelsArea, 0);

   if NOT depots OR NOT unitsInArea then exit;

   depot = depots[1];

   for unit in unitsInArea do
   begin
      if NOT GetClass(unit) = class_engineer then
      begin
         ComEnterUnit(unit, depot);
         AddComChangeProfession(unit, class_engineer);
         AddComExitBuilding(unit);
      end;

      if GetCargo(unit, mat_oil) = 0 then AddComTransport(unit, depot, mat_oil);

      repeat
         wait(0$1);
      until NOT HasTask(unit);

      if GetCargo(unit, mat_oil) > 0 then
      begin
         randIndex = Rand(1, barrelsAreaList[1]);
         randPosX = barrelsAreaList[1][randIndex];
         randPosY = barrelsAreaList[2][RandIndex];

         AddComMoveXY(unit, randPosX, randPosY);
         AddComUnload(unit);
         AddComMoveXY(unit, randPosX + 2, randPosY + 2);

         repeat
            wait(0$1);
         until NOT HasTask(unit);

         barrelsInArea = GetListOfCratesInArea(ShootArea);

         for i := 1 to barrelsInArea / 2 do
         begin
            if GetDistUnitXY(unit, barrelsInArea[i], barrelsInArea[i + 1]) <= 6 then
            begin
               AddComAttackPlace(unit, barrelsInArea[i], barrelsInArea[i + 1]);

               AddExperience(unit, skill_combat, 5);
               break;
            end;

            i = i + 2;
         end;
      end;
   end;
end;

// Summary: Send unit to hunt.
// Input: [int] hunterID
// Example: GoToHunt(Burlak);
Export function GoToHunt(hunter);
var i, barracks, barrackTarget, barrackTargetCurrentHP, animals, animal;
begin

   animals = [];
   barracks = FilterAllUnits([[f_ok], [f_not, [f_constructed]], [f_or, [f_btype,b_barracks], [f_btype,b_armoury]]]);

   SetSide(hunter, 6);

   if IsInUnit(hunter) then
   begin
      if GetBType(IsInUnit(hunter) = unit_vehicle) then ComExitVehicle(hunter)
      else ComExitBuilding(hunter);   
   end;

   ComWalk(hunter);

   wait(0$1);

   if NOT GetClass(hunter) = class_soldier AND barracks then
   begin
      barrackTarget = barracks[1];
      barrackTargetCurrentHP = GetLives(barrackTarget);

      SetSide(barrackTarget, 6);
      ComEnterUnit(hunter, barrackTarget);

      repeat
         wait(0$1);
         ComEnterUnit(hunter, barrackTarget);
         SetLives(barrackTarget, barrackTargetCurrentHP);
      until IsInUnit(hunter);

      SetClass(hunter, class_soldier);
      ComExitBuilding(hunter);
      SetSide(barrackTarget, 3);

      wait(0$1);
   end;

   // Spawn animals to hunt
   for i := 1 to 3 do
   begin
      uc_side = 0;
      uc_nation = nation_nature;

      PrepareHuman(false, [class_phororhacos, class_tiger, 21][Rand(1, 3)], 0);

      hc_agressivity = 0;

      animal = CreateHuman;
      PlaceUnitArea(animal, NatureArea, false);
      animals = animals ^ animal;
   end;

   for i := 1 to animals do AddComAttackUnit(hunter, animals[i]);

   repeat
      wait(0$1);

      if GetClass(hunter) = class_soldier then
      begin
         if GetDistUnits(hunter, WantsToAttack(hunter)) < 13 then ComCrawl(hunter)
         else ComWalk(hunter);
      end;

   until NOT HasTask(hunter);

   repeat
      wait(0$1);
      ComMoveXY(hunter, GetX(Burlak), GetY(Burlak));
   until GetDistUnits(hunter, Burlak) <= 9;

   SetSide(hunter, 3);
   CenterOnUnits(hunter);

   AddExperience(hunter, skill_combat, 3000);

end;

Export function SetMashaData(vehicle);
begin
    if Masha then SetMark(Masha[1], 0);

    Masha = [vehicle, GetChassis(vehicle), GetEngine(vehicle), GetControl(vehicle), GetWeapon(vehicle)];
    ChangeMissionObjectives('MMashaDone');
    SetMark(vehicle, 1);
end;

Export function SaveBase(buildings, ident);
var i, buildingsToSave;
begin

   buildingsToSave = [];
   
   if NOT buildings then
      exit;

   for i in buildings do
   begin
      if GetBType(i) in [b_lab, b_lab_half, b_lab_full] then 
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i) ,GetDir(i) ,GetBLevel(i), GetNation(i), GetLives(i), GetLabKind(i,1), GetLabKind(i,2) ] ]
      else
      if GetBType(i) in [b_bunker, b_turret] then
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i), GetBWeapon(i)] ]
      else
      if GetBType(i) in [b_depot, b_warehouse] then
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i), GetResourceType(GetBase(i), mat_cans), GetResourceType(GetBase(i), mat_oil), GetResourceType(GetBase(i), mat_siberit)] ]
      else
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i)] ];
    end;

   SaveVariable(buildingsToSave, ident);

end;
