Export Function MissionIntro;
begin
    CenterNowOnUnits(Burlak);
    
    DialogueOn;

    SayRadio(Popov, 'DStart-Pop-1');
    Say(Burlak, 'DStart-Bur-1');

    DialogueOff;
    IngameOff; 

    ChangeMissionObjectives('MStart');   

    SaveForQuickRestart;
end;

// Escort Heike to player depot - execute in event
Export Function Dial_EscortHeike(x, y);
begin
    dial_BuildDepotBlocker = true;
    HeikeTargetX = x;
    HeikeTargetY = y;

    SayRadio(Popov, 'DHeike-Pop-1');

    wait(0$10);

    PrepareRussianEscort;
    PlaceUnitArea(Heike, RussianSpawn2Area, false);

    ComMoveXY(russianEscort, HeikeTargetX, HeikeTargetY);
    AddComMoveToArea(russianEscort, RussianSpawn2Area);
    ComMoveXY(Heike, HeikeTargetX, HeikeTargetY);    
    AddComHold(Heike);
end;

// Allow remove ally units from map
every 1 trigger GetDistUnitXY(Heike, HeikeTargetX, HeikeTargetY) <= 5 do allowExitFromMap = 1;

// Kurt dialog
every 7$0 trigger IsPlaced(Heike) AND IsOk(Heike) AND GetAttitude(3, 5) = att_friend AND HeikeCaptured do
begin
    DialogueOn;
    SayRadio(Kurt, 'DMercHelp-Kurt-1');
    Say(Burlak, 'DMercHelp-Bur-1');
    SayRadio(Kurt, 'DMercHelp-Kurt-2');
    Say(Burlak, 'DMercHelp-Bur-2');
    SayRadio(Kurt, 'DMercHelp-Kurt-3');
 
    case Query('QMerc') of
    1:begin
        Say(Burlak, 'DQrMerc#1-Bur-1');
        SayRadio(Kurt, 'DQrMerc#1-Kurt-1');

        acceptKurtOffert = true;
    end; 

    2:begin
        askCommanders = true;

        Say(Burlak, 'DQrMerc#2-Bur-1');
        SayRadio(Popov, 'DQrMerc#2-Pop-1');
        Say(Burlak, 'DQrMerc#2-Bur-2');

        acceptKurtOffert = true;
    end;   

    3: begin
        Say(Burlak, 'DQrMerc#3-Bur-1');
        KurtAttack = true;
    end;

    end;

    DialogueOff;   
end;

// Spawn Kurt and eng
every 0$1 trigger acceptKurtOffert do
begin

    PlaceUnitArea(Kurt, KurtSpawnArea, false);

    uc_side = 8;
    uc_nation = 2;

    PrepareEngineer(false, 3);
    KurtEng = CreateHuman;

    PlaceUnitArea(KurtEng, KurtSpawnArea, false);

    repeat
        wait(0$1);
        ComMoveXY([Kurt, KurtEng], GetX(Burlak), GetY(Burlak));
    until GetDistUnits(Kurt, Burlak) <= 5 OR GetDistUnits(KurtEng, Burlak) <= 5;
  
end;

// Kurt eng change side and Gensher dialog
every 0$1 trigger GetDistUnits(Kurt, Burlak) <= 5 OR GetDistUnits(KurtEng, Burlak) <= 5 do
begin
    KurtWaitingForBuildBarrack = true;

    SetSide(KurtEng, 3);
    
    wait(1$30);

    DialogueOn;
    SayRadio(Dietrich, 'DArabianRequest-Diet-1');
    Say(Burlak, 'DArabianRequest-Bur-1');
    SayRadio(Dietrich, 'DArabianRequest-Diet-2');
    DialogueOff;

    case Query('QHandOver') of
    
    1: begin
        Say(Burlak, 'DQrHandOver#1-Bur-1');
        SayRadio(Dietrich, 'DQrHandOver#1-Diet-1');

        coopWithGensher = true;

        SpawnGensherTeam;
    end;

    2: begin
        Say(Burlak, 'DQrHandOver#2-Bur-1');
        SayRadio(Dietrich, 'DQrHandOver#2-Diet-1');
        Say(Burlak, 'DQrHandOver#2-Bur-2');  
    end;

    end;
    
end;

// Kurt dialog after build barrack - execute in event
Export function Dial_UpgradeArmoury;
begin
    dial_BuildArBarrackBlocker = true;
    buildArabBarrack = true;

    if GetSide(Kurt) = 2 OR GetSide(KurtEng) = 8 then exit;

    SetSide(KurtEng, 8);
    ComStop(KurtEng);

    DialogueOn;
    Say(Kurt, 'DMercCompleted-Kurt-1');
    DialogueOff;

    canSendHeike = true;
    KurtWaitingForFreeHeike = true;
    KurtWaitingForBuildBarrack = false;
    allowExitFromMap = 3;

    if KurtCanEscape then ComMoveToArea([Kurt, KurtEng], KurtExitMapArea);
end;

// Arrive Genher units
every 0$1 trigger FilterAllUnits([[f_side, 2]]) AND NOT dial_ArriveGensherUnitsBlocker do
var veh, nearGensherUnit, maleSold, waitForKurt;
begin

    nearGensherUnit = NearestUnitToXY(UnitFilter(GensherTeam, [[f_type, unit_vehicle]]), GensherTargetX, GensherTargetY);
    maleSold = UnitsInside(nearGensherUnit[1]);

    if GetDistUnitXY(nearGensherUnit, GensherTargetX, GensherTargetY) <= 5 then
    begin
        dial_ArriveGensherUnitsBlocker = true;

        for veh in UnitFilter(GensherTeam, [[f_type, unit_vehicle]]) do
            ComExitVehicle(UnitsInside(veh)[1]);

        wait(0$1);

        SetSide(UnitFilter(GensherTeam, [[f_type, unit_vehicle]]), 3);
        CenterOnUnits(maleSold);

        DialogueOn;
        Say(maleSold, 'DHandOverCome-ASol1-1');
        Say(Kurt, 'DHandOverCome-Kurt-1');
        DialogueOff;
        
        KurtWaitingForBuildBarrack = false;

        if GetDistUnits(Kurt, UnitFilter(GensherTeam, [f_type, unit_vehicle])[1]) <= 8 OR GetSide(KurtEng) = 3 then
        begin
            KurtCanEscape = false;

            SetSide([Kurt, KurtEng], 2);
            ComStop([Kurt, KurtEng]);

            ComMoveXY([Kurt, KurtEng], GetX(maleSold), GetY(maleSold));

            waitForKurt = true;
            KurtStatus = 3;
        end else
        if GetDistUnits(Kurt, UnitFilter(GensherTeam, [f_type, unit_vehicle])[1]) > 8 then
        begin
            allowExitFromMap = 4;
            KurtStatus = 2;

            ComMoveToArea([Kurt, KurtEng], KurtExitMapArea);

            repeat
                ComAttackUnit(UnitFilter(GensherTeam, [[f_type, unit_human]]), Kurt);
                wait(0$1);    
            until GetDistUnits(NearestUnitToUnit(UnitFilter(GensherTeam, [[f_type, unit_human]]), Kurt), Kurt) <= 9 OR (NOT IsPlaced(Kurt) AND NOT IsPlaced(KurtEng));

            ComMoveToArea([Kurt, KurtEng], ExitMapArea);
            ComMoveToArea(UnitFilter(GensherTeam, [[f_type, unit_human]]), ExitMapArea);

        end;

        if waitForKurt then
        begin
            repeat
                wait(0$1);
                ComMoveXY([Kurt, KurtEng], GetX(maleSold), GetY(maleSold));
            until GetDistUnits(Kurt, maleSold) <= 2;

            allowExitFromMap = 4;

            ComMoveToArea([Kurt, KurtEng], ExitMapArea);
            ComMoveToArea(UnitFilter(GensherTeam, [[f_type, unit_human]]), ExitMapArea);
        end;


        exit;
    end;
    
    enable;
  
end;

// Gensher dialog after attack him - execute in event
export function Dial_AttackGensher;
var unit;
begin
    DialogueOn;
    SayRadio(Dietrich, 'DHandOverSpoiled-Diet-1');
    DialogueOff;

    SetAttitude(3, 2, att_enemy, true);

    for unit in UnitFilter(GensherTeam, [[f_type, unit_human]]) do
    begin
        if IsInUnit(unit) then
            ComExitVehicle(unit);

        wait(0$01);

        AddComAgressiveMove(unit, GetX(Burlak), GetY(Burlak));
    end;

    coopWithGensher = 2;

end;

// Ask for send Heike to Kurt
every 0$1 trigger canSendHeike AND IsOK(Heike) AND GetSide(Heike) = 5 do
var legionSold;
begin
    
    if IsSelected(Heike) then
    begin
        if Query('QSendHeike') = 1 then
        begin
            KurtWaitingForFreeHeike = false;

            ComMoveXY(Heike, 82, 46);

            repeat
                wait(0$1);
            until GetDistUnitXY(Heike, 82, 46) <= 5 OR IsDead(Heike);

            if NOT askCommanders then
            begin
                DialogueOn;
                SayRadio(Popov, 'DMercPopov-Pop-1');
                Say(Burlak, 'DMercPopov-Bur-1');
                SayRadio(Popov, 'DMercPopov-Pop-2');
                DialogueOff;
            end;

            uc_side = 8;
            uc_nation = 2;

            PrepareSoldier(false, 6);
            legionSold = CreateHuman;

            PlaceUnitXYR(legionSold, 26, 48, 4, false);

            repeat
                wait(0$1);
                ComMoveXY(legionSold, GetX(Heike), GetY(Heike));
            until GetDistUnits(legionSold, Heike) <= 5 OR IsDead(Heike);

            SetSide(Heike, 8);
            allowExitFromMap = 3;

            ComMoveToArea([legionSold, Heike], KurtExitMapArea);

            exit;

        end;     
    end;

    wait(0$3);

    enable;
end;

// Kurt dialog if player don't send Heike - execute in CounterManager
export function Dial_PlayerDontSendHeike;
begin
    DialogueOn;
    SayRadio(Kurt, 'DMercDeceived-Kurt-1');
    DialogueOff;

    SetAttitude(3, 8, att_enemy, true);
    KurtAttack = true;
end;

// Kurt dialog 1 if player betrayed him - execute in events
export function Dial_BetrayedKurt1;
begin
    DialogueOn;
    Say(Kurt, 'DMercDeceived-Kurt-1');
    DialogueOff;

    if IsPlaced(Kurt) then
    begin
        SetSide(KurtEng, 8);

        allowExitFromMap = 3;

        if KurtCanEscape then ComMoveToArea([Kurt, KurtEng], KurtExitMapArea);
    end;
end;

// Kurt dialog 2 if player betrayed him - execute in events
export function Dial_BetrayedKurt2;
begin
    DialogueOn;
    Say(Kurt, 'DMercAmbush-Kurt-1');
    DialogueOff;

    if IsPlaced(Kurt) then
    begin
        SetSide(KurtEng, 8);

        allowExitFromMap = 3;

        if KurtCanEscape then ComMoveToArea([Kurt, KurtEng], KurtExitMapArea);
    end;
end;

// Check player want attack Kurt eng
every 0$1 trigger GetSide(KurtEng) = 3 do
var playerUnits, unit;
begin

    playerUnits = FilterAllUnits([[f_side, 3], [f_or, [f_type, unit_human], [f_type, unit_vehicle]]]);

    for unit in playerUnits do
    begin
        if WantsToAttack(unit) = KurtEng then
        begin
            Dial_BetrayedKurt2;
            exit;    
        end;    
    end;

    if (IsDying(KurtEng) OR IsDead(KurtEng)) AND GetSide(KurtEng) = 3 then
    begin
        Dial_BetrayedKurt2;
        exit;    
    end;

    enable;

end;

// Check Kurt is no hurt
every 0$1 trigger GetAttitude(3, 8) = att_neutral AND GetLives(Kurt) <= 999 do
begin
     Dial_BetrayedKurt1;

     SetAttitude(3, 8, att_enemy, true);

end;

// Ask for shooting range trening
every 0$1 trigger buildingsToBuild <= 11 do
begin
    if NOT IsOK(Kuzmov) AND NOT IsOK(Oblukov) then exit;

    DialogueOn;

    if IsOK(Kuzmov) then Say(Kuzmov,'DFiringRange-Kuz-1')
    else Say(Oblukov,'DFiringRange-Obl-1'); 

    Say(Burlak,'DFiringRange-Bur-1'); 

    CenterOnXY(99,30);
    Wait(0$0.5);
    RevealFogArea(3, ShootArea);
    SetAreaMapShow(ShootArea, 1);

    if IsOK(Kuzmov) then Say(Kuzmov,'DFiringRange-Kuz-2') 
    else Say(Oblukov,'DFiringRange-Obl-2');

    case Query('QShootingGallery') of
        1: begin
            Say(Burlak, 'DQrShootingGallery#1-Bur-1');
            BurlakRespect = BurlakRespect + 1;
            canShootTrening = true;
        end;
        2: begin
            Say(Burlak, 'DQrShootingGallery#2-Bur-1');
            SetAreaMapShow(ShootArea, 0);
        end;

    end;

    DialogueOff;

end;

// Shoot trening
every 0$1 trigger canShootTrening do
begin
    enable;
    ShootTreningController;
end;

// Ask for hunting
every 0$1 trigger buildingsToBuild <= 7 do
var hunters, hunter;
begin
    hunters = [];

    if IsOK(Belkov) then hunters = hunters ^ Belkov;
    if IsOK(Karamazov) then hunters = hunters ^ Karamazov;
    if IsOK(Kozlov) then hunters = hunters ^ Kozlov;

    if NOT hunters then exit;

    hunter = hunters[Rand(1, hunters)];

    DialogueOn;

    case hunter of
        Belkov: Say(Belkov,'DHunting-Bel-1'); 
        Karamazov: Say(Karamazov,'DHunting-Kar-1'); 
        Kozlov: Say(Kozlov,'DHunting-Koz-1'); 
    end;

    Say(Burlak,'DHunting-Bur-1');

    case hunter of
        Belkov: Say(Belkov,'DHunting-Bel-2'); 
        Karamazov: Say(Karamazov,'DHunting-Kar-2'); 
        Kozlov: Say(Kozlov,'DHunting-Koz-2'); 
    end;
    
    DialogueOff;

    case Query('QHunting') of
        1: begin
            Say(Burlak, 'DQrHunting#1-Bur-1');
            BurlakRespect = BurlakRespect + 1;
            GoToHunt(hunter);
        end;
        2: Say(Burlak, 'DQrHunting#2-Bur-1');

    end;

    

end;

// Ask for free time
every 0$1 trigger buildingsToBuild <= 3 do
var unit, womans, men, woman, man, depots;
begin
    womans = [];
    men = [];

    if IsOK(Petrovova) then womans = womans ^ Petrovova;
    if IsOK(Kirilenkova) then womans = womans ^ Kirilenkova;
    if IsOK(Kapitsova) then womans = womans ^ Kapitsova;

    DialogueOn;

    if womans then
    begin
        case womans[Rand(1, womans)] of
            Petrovova: begin
                    Say(Petrovova,'DFreeTime-Ptr-1');
                    woman = Petrovova;
                end;
            Kirilenkova: begin
                    Say(Kirilenkova,'DFreeTime-Kir-1');
                    woman = Kirilenkova;
                end;
            Kapitsova: begin
                    Say(Kapitsova,'DFreeTime-Kap-1');
                    woman = Kapitsova;
                end;
        end;
    end;

    if IsOK(Kuzmov) then men = men ^ Kuzmov;
    if IsOK(Titov) then men = men ^ Titov;
    if IsOK(Gnyevko) then men = men ^ Gnyevko;
    if IsOK(Oblukov) then men = men ^ Oblukov;

    if men then
    begin
        case men[Rand(1, men)] of
            Kuzmov:
                begin
                    Say(Kuzmov,'DFreeTime-Kuz-1');
                    man = Kuzmov;
                end;
            Titov:
                begin
                    Say(Titov,'DFreeTime-Tit-1');
                    man = Titov;
                end;
            Gnyevko:
                begin
                    Say(Gnyevko,'DFreeTime-Gny-1');
                    man = Gnyevko;
                end;
            Oblukov:
                begin
                    Say(Oblukov,'DFreeTime-Obl-1');
                    man = Oblukov;
                end;
        end;
    end;

    DialogueOff;

    if NOT woman AND NOT man then
    begin
        DialogueOff;
        exit;
    end;

    case Query('QFreeTime') of
        1: begin
            Say(Burlak, 'DQrFreeTime#1-Bur-1');
            DialogueOff;

            BurlakRespect = BurlakRespect + 1;

            SetSide([woman, man], 6);

            for unit in [woman, man] do
                if IsInUnit(unit) then
                begin
                    if GetType(IsInUnit(unit)) = unit_vehicle then ComExitVehicle(unit)
                    else ComExitBuilding(unit);
                end;

            wait(0$1);

            ComMoveToArea([woman, man], ExitMapArea);
            allowExitFromMap = 1;

            wait(3$0);

            PlaceUnitXYR(woman, 157, 29, 3, false);
            PlaceUnitXYR(man, 157, 29, 3, false);

            SetSide([woman, man], 3);

            depots = FilterAllUnits([[f_side, 3],[[f_or, [f_btype,b_depot], [f_btype,b_warehouse]]]]);

            if depots then ComMoveXY([woman, man], GetX(depots[1]), GetY(depots[1]))
            else ComMoveXY([woman, man], GetX(Burlak), GetY(Burlak));

            CenterOnUnits([woman, man]);
            
        end;
        2: Say(Burlak, 'DQrFreeTime#2-Bur-1');

    end;

    DialogueOff;
end;

// Masha dialog
every 0$1 trigger GetAmountWeaponsDataBuildOnVehicle(false) <= 2 do
begin
    DialogueOn;

    if IsOK(Kozlov) then Say(Kozlov, 'DMasha-Koz-1')
    else DialogRandom(FilterAllUnits([[f_side, 3], [f_ok], [f_type, unit_human], [f_sex, sex_male]]), 'DMasha-Koz-1', '', false, false);

    Say(Burlak, 'DMasha2-Bur-1');

    DialogueOff;

    Query('QMasha');

    ChangeMissionObjectives('MMasha');

    canChooseMashaVehicle = true;
end;

// Computer tech reseached - execute in event
Export function Dial_ComputerTechResearched;
begin
    if IsOk(Scholtze) OR IsOK(Kapitsova) then
    begin
        DialogueOn;
        if IsOK(Scholtze) then Say(Scholtze, 'DAI-Sch-1')
        else Say(Kapitsova, 'DAI-Kap-1');

        Say(Burlak, 'DAI-Bur-1');

        if IsOK(Scholtze) then Say(Scholtze, 'DAI-Sch-2')
        else Say(Kapitsova, 'DAI-Kap-2');

        DialogueOff;
    end;

    ChangeMissionObjectives('MAI');
end;

// Teleport tech researched - execute in event
Export function Dial_TeleportTechResearched;
begin
    if IsOk(Scholtze) OR IsOK(Kapitsova) then
    begin
        DialogueOn;
        if IsOK(Scholtze) then Say(Scholtze, 'DSpontTelep-Sch-1')
        else Say(Kapitsova, 'DSpontTelep-Kap-1');

        Say(Burlak, 'DSpontTelep-Bur-1');

        if IsOK(Scholtze) then Say(Scholtze, 'DSpontTelep-Sch-2')
        else Say(Kapitsova, 'DSpontTelep-Kap-2');

        Say(Burlak, 'DSpontTelep-Bur-2');

        DialogueOff;
    end;

    ChangeMissionObjectives('MTele');
end;

// Americans attack incomming
every 0$1 trigger buildingsToBuild <= 3 AND GetAmountWeaponsDataBuildOnVehicle(false) <= 1 AND techsToResearch <= 4 do
begin
    SayRadio(Popov, 'DAmAttackStart-Pop-1');    

    if KurtStatus = 1 AND HeikeStatus = 1 then
    begin
        wait(0$10);

        DialogueOn;
        SayRadio(Heike, 'DLegionFormed-Hke-1');
        Say(Burlak, 'DLegionFormed-Bur-1');
        SayRadio(Heike, 'DLegionFormed-Hke-2');
        Say(Burlak, 'DLegionFormed-Bur-2');
        SayRadio(Heike, 'DLegionFormed-Hke-3');

        case Query('QLegion') of
            1: begin
                acceptLegionOffert = true;
                legionOffertCountdown = true;

                Say(Burlak, 'DQrLegion#1-Bur-1');
            end;
            
            2: begin
                Say(Burlak, 'DQrLegion#2-Bur-1');

                americansAttack = true;
            end;

        end;

        DialogueOff;

    end else
    begin
        americansAttack = true;
    end;
end;

// Time expired and player don't collect enough crates - start americans attacks
every 0$1 trigger legionOffertTime <= 0$00 do
begin
    legionOffertCountdown = false;
    americansAttack = true;
end;

// Check player have enought crates to paid for legion
every 0$1 trigger legionOffertCountdown do
var needCrates, depots, depot, crates;
begin
    needCrates = 50;
    crates = 0;

    depots = FilterAllUnits([[f_side, 3],[[f_or, [f_btype,b_depot], [f_btype,b_warehouse]]]]);

    for depot in depots do
    begin
        crates = GetResourceType(GetBase(depot), mat_cans);

        if crates >= needCrates then
        begin
            SetResourceType(GetBase(depot), mat_cans, crates - needCrates);
            legionOffertCountdown = false;
            paidLegionOffert = true;
            americansAttack = true;
        end;
    end;
end;

// Dialog after defence base
every 0$1 trigger currentAmWave >= americansAttackWaves AND FilterAllUnits([[f_side, 1], [f_or, [f_type, unit_human], [f_and, [f_type, unit_vehicle], [f_control, control_computer]]]]) = 0 do
begin
    DialogueOn;
    if IsOK(Belkov) then Say(Belkov, 'DAmAttackFin-Bel-1')
    else if IsOK(Belkov2) then Say(Belkov2, 'DAmAttackFin-Bel-1');
    if IsOK(Gnyevko) then Say(Gnyevko, 'DAmAttackFin-Gny-1');
    if IsOK(Titov) then Say(Titov, 'DAmAttackFin-Tit-1');
    if IsOK(Lipshchin) then Say(Lipshchin, 'DAmAttackFin-Lip-1');
    if IsOK(Karamazov) then Say(Karamazov, 'DAmAttackFin-Kar-1');
    if IsOK(Oblukov) then Say(Oblukov, 'DAmAttackFin-Obl-1');

    Say(Burlak, 'AmAttackFin-Bur-1');
    SayRadio(Popov, 'DAmAttackFin-Pop-1');
    DialogueOff;    
end;

// Finish objectives with build and research
every 0$1 trigger buildingsToBuild + (3 - GetAmountWeaponsDataBuildOnTurret(true)) = 0 do
    ChangeMissionObjectives('MBuildingsDone');

every 0$1 trigger GetAmountWeaponsDataBuildOnVehicle(false) = 0 do
    ChangeMissionObjectives('MWeaponsDone');

every 0$1 trigger techsToResearch = 0 do
    ChangeMissionObjectives('MTechnoDone');

every 0$1 trigger americansAttack AND NOT FilterAllUnits([[f_side, 1], [f_or, [f_type, unit_human], [f_and, [f_type, unit_vehicle], [f_control, control_computer]]]]) do
    ChangeMissionObjectives('MEnemyDone');

// Finish mission
{
    Conditions:
    - All buildings constructed
    - All vehs constructed
    - All techs researched
    - No enemy units
    - Masha selected
    - Build one comp veh
    - Test teleport
}

every 0$1 trigger (buildingsToBuild + (3 - GetAmountWeaponsDataBuildOnTurret(true))) = 0 AND
GetAmountWeaponsDataBuildOnVehicle(false) = 0 AND
techsToResearch = 0 AND
FilterAllUnits([[f_side, 8], [f_type, unit_human]]) = 0 AND
FilterAllUnits([[f_side, 1], [f_or, [f_type, unit_human], [f_and, [f_type, unit_vehicle], [f_control, control_computer]]]]) = 0 AND
Masha AND
IsOK(Masha[1]) AND
buildCompVehicle AND
testedTeleport do
begin
    FinishMission;
end;


// Remove units from map
every 0$1 do
var unit;
begin
    case allowExitFromMap of
    
    1: RemoveUnits(FilterUnitsInArea(ExitMapArea, [[f_side, 6]]));
    3: RemoveUnits(FilterUnitsInArea(KurtExitMapArea, [[f_side, 8]]));
    4: begin
        RemoveUnits(FilterUnitsInArea(ExitMapArea, [[f_side, 8]]));
        RemoveUnits(FilterUnitsInArea(KurtExitMapArea, [[f_side, 8]]));
        RemoveUnits(FilterUnitsInArea(ExitMapArea, [[f_side, 2]]));
    end;

    end;

    enable;
end;