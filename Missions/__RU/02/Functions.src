// Prepare Hero for use
// ident - ident from start.txt - 'JMM' for example
// exist_mode
//   - false if unit not exist in save
//   - true if unit already exist in save
// example: JMM := PrepareUnit('JMM', false);
Export Function PrepareUnitEx(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(previousMissionPrefix&ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID, radio);
var i, speaker;
begin
   characters := characters diff [Burlak, Gnyevko, Belkov, Kirilenkova];
   speaker := characters[rand(1, characters)];

   if radio then
   begin
      if GetSex(speaker) = sex_male then
         SayRadio(speaker, dialogMID)
      else
         SayRadio(speaker, dialogFID);
   end
   else
   begin
      if GetSex(speaker) = sex_male then
         Say(speaker, dialogMID)
      else
         Say(speaker, dialogFID);  
   end;

   result := speaker;
end;

// Summary: Before calling the SaveCharacters function, checks if the character given in the argument is OK and if it is on the side 
// Input: Character, characterStringID
// Example: ExtSaveCharacter(Burlak, MyBurlak);
Export Function ExtSaveCharacter(character, characterStringID, side);
begin
   if GetSide(character) = side AND IsOK(character) then
      SaveCharacters(character, missionPrefix&characterStringID);
end;

// Summary: Before calling the SaveCharacters function, checks if the characters list given in the argument is OK and if it is on the side 
// Input: Characters, characterStringID
// Example: ExtSaveCharacter([FilterAllUnits...], MySavedTeam);
Export Function ExtSaveCharacters(characters, charactersStringID, side);
var unit, resultCharactersToSave;
begin
   resultCharactersToSave = [];

   for unit in characters do
      if GetSide(unit) = side AND IsOK(unit) then
         resultCharactersToSave = resultCharactersToSave ^ unit;

   SaveCharacters(resultCharactersToSave, missionPrefix&charactersStringID);
end;

Export Function Question1(q);
var dec, q1;
begin
  dec = SelectiveQuery('QMoreInfo', q);
  case dec of
   1:begin
      Say(Burlak,'D2a-Bur-1');
      Say(Platonov,'D2a-Pla-1');
      q1 = q diff 1;
      if q1 >= 2 then
         Question1(q1);
     end;

   2:begin
      Say(Burlak,'D2b-Bur-1');
      Say(Platonov,'D2b-Pla-1');
      q1 = q diff 2;
      if q1 >=2 then
         Question1(q1);
     end;

   3:begin
      Say(Burlak,'D2c-Bur-1');
      Say(Platonov,'D2c-Pla-1');
      q1 = q diff 3;
      if q1 >=2 then
         Question1(q1);
     end;

  end;
end;

// Summary: A function for refuelling a vehicle by an engineer who takes a oil barrel from the depot and then refuels the vehicle. If any of the objects is not OK or vehicle have 100% fuel, the function exit.
// Input: Engineer, Depot, Vehicle
// Example: ExtAddComRefuel(Platonov, ru_dep, ru_veh)
Export Function ExtAddComRefuel(engineer, depot, vehicle);
var taskList;
begin
   if NOT IsOK(engineer) OR NOT IsOK(depot) OR NOT IsOK(vehicle) OR GetFuel(vehicle) = 100 OR NOT GetBType(depot) in [b_depot, b_warehouse] then
      exit;

   AddComTransport(engineer, depot, mat_oil);

   repeat
    wait(0$01);
   until Carry(engineer);

   RemoveTasks(engineer);
   SetTaskList(engineer, [['O', 0, 0, vehicle, 0, 0, 0]]);

   repeat
    wait(0$01);
   until NOT Carry(engineer);

   SetFuel(vehicle, 100);
   AddComEnterUnit(engineer, depot);
end;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout, ru_tech_list;
begin

   ru_tech_list := [48, 49, 50, 20, 1, 51, 52, 69, 39, 34, 40, 53, 71, 57, 58, 44, 32, 27, 23, 33, 59, 54, 55, 56, 63, 64, 65, 30, 31, 21, 22, 25];

  For i = 1 to ru_tech_list do
    If GetTech(ru_tech_list[i], side) = state_enabled and TechNationAvailable(ru_tech_list[i], nation) = true then AddComResearch(lab, ru_tech_list[i]);

end;

Export Function PrepareSolBun(skill, b);
var un, dir;
begin
     uc_side := GetSide(b);
     uc_nation := GetNation(b);

     PrepareHuman(false, 1, skill);
     un = CreateHuman;

     dir := GetDir(b)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, b);

     result = un;
End;


Export Function PlaceSolBun(un, b);
var dir;
begin
     dir := GetDir(b)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, b);

     result = un;
End;

// SaveVariable([GetChassis(tmp[2]),GetEngine(tmp[2]),GetControl(tmp[2]),GetWeapon(tmp[2]), GetLives(tmp[2])], '02_vehicles_1');
Export Function SaveVehicles(vehicles, ident);
var i, tmp;
begin
   tmp = [];

   if not vehicles then
      exit;

   for i in vehicles do
      tmp := Insert(tmp, 1, [GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i), GetFuel(i), GetLives(i)]);

   SaveVariable(tmp, ident);
End;

Export function SaveBase(buildings, ident);
var i, buildingsToSave;
begin

   buildingsToSave = [];
   
   if NOT buildings then
      exit;

   for i in buildings do
   begin
      if GetBType(i) in [b_lab, b_lab_half, b_lab_full] then 
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i) ,GetDir(i) ,GetBLevel(i), GetNation(i), GetLives(i), GetLabKind(i,1), GetLabKind(i,2) ] ]
      else
      if GetBType(i) in [b_bunker, b_turret] then
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i), GetBWeapon(i)] ]
      else
      if GetBType(i) in [b_depot, b_warehouse] then
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i), GetResourceType(GetBase(i), mat_cans), GetResourceType(GetBase(i), mat_oil), GetResourceType(GetBase(i), mat_siberit)] ]
      else
            buildingsToSave = buildingsToSave ^ [ [GetBType(i), GetX(i), GetY(i), GetDir(i), GetBLevel(i), GetNation(i), GetLives(i)] ];
    end;

   SaveVariable(buildingsToSave, ident);

end;

Export Function CreateBelkovTeam;
var i, unit, restRandSolds, tmp;
begin
   belkovTeam = [];

   if belkovReturn then
      belkovTeam = belkovTeam ^ Belkov;

   belkovTeam = belkovTeam ^ Belkov2;

   for unit in other_survivors do
      if IsOK(unit) AND belkovTeam < 5 then
         belkovTeam = belkovTeam ^ unit;

   
   if belkovTeam < 5 then
   begin
      restRandSolds =  5 - belkovTeam;

      for i := 1 to restRandSolds do
         for unit in UnitFilter(otherKirovUnits, [[f_class, class_soldier]]) diff Kurin do
            if NOT unit in belkovTeam then
            begin
               belkovTeam = belkovTeam ^ unit;
               otherKirovUnits = otherKirovUnits diff unit;
               break;
            end;
      
   end;

   tmp = belkovTeam diff Belkov;

   if tmp < 4 then
   begin
      for i := 1 to 4 - tmp do
      begin
         PrepareSoldier(false, rand(1, 2));

         unit = CreateHuman;

         belkovTeam = belkovTeam ^ unit;

         PlaceHumanInUnit(unit, ru2_arm2);
      end;
   end; 

   if TestCharacters('01_Kirilenkova') then
      belkovTeam = belkovTeam ^ Kirilenkova
   else
   begin
      belkovTeam = belkovTeam ^ UnitFilter(otherKirovUnits, [[f_class, class_scientistic]])[1];
      otherKirovUnits = otherKirovUnits diff UnitFilter(otherKirovUnits, [[f_class, class_scientistic]])[1];
   end;
end;

Export Function PlatonovSendSupport;
var soldsOk;
begin

   if NOT Kuklajs OR NOT IsOK(Kuklajs) then
   begin
        soldsOk = UnitFilter(platSoldiers, [f_ok]) diff Benko;

        if soldsOK then
        begin
          ComExitBuilding(soldsOK[1]);
          AddComMoveXY(soldsOK[1], 112, 96);
          SetSide(soldsOK[1], 3);
          platSoldiers = platSoldiers diff soldsOK[1];
        end;
   end;

   if NOT Benko OR NOT IsOK(Benko) then
   begin
        soldsOk = UnitFilter(platSoldiers, [f_ok]) diff Kuklajs;

        if soldsOK then
        begin
          ComExitBuilding(soldsOK[1]);
          AddComMoveXY(soldsOK[1], 112, 96);
          SetSide(soldsOK[1], 3);
          platSoldiers = platSoldiers diff soldsOK[1];
        end;
   end;

   ComExitBuilding([Kuklajs, Benko]);
   AddComMoveXY([Kuklajs, Benko], 112, 96);

   SetSide([Kuklajs, Benko], 3);
end;