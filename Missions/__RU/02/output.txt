// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// CreateNature ;
  28: CALL 16511 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6871 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4030 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4030 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4030 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4030 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4030 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4030 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4030 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5269 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4882 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4030 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4030 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4030 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareTrap ;
2882: CALL 2895 0 0
// PrepareBunkiers ;
2886: CALL 3485 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = nation_american ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// bc_level = 1 ;
3507: LD_ADDR_OWVAR 43
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// bc_type = b_breastwork ;
3515: LD_ADDR_OWVAR 42
3519: PUSH
3520: LD_INT 31
3522: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 104
3530: PPUSH
3531: LD_INT 59
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 47
3541: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3542: LD_ADDR_EXP 82
3546: PUSH
3547: LD_EXP 82
3551: PUSH
3552: LD_VAR 0 4
3556: ADD
3557: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3558: LD_EXP 59
3562: PPUSH
3563: LD_VAR 0 4
3567: PPUSH
3568: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 101
3579: PPUSH
3580: LD_INT 55
3582: PPUSH
3583: LD_INT 4
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3591: LD_ADDR_EXP 82
3595: PUSH
3596: LD_EXP 82
3600: PUSH
3601: LD_VAR 0 4
3605: ADD
3606: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3607: LD_EXP 59
3611: PPUSH
3612: LD_VAR 0 4
3616: PPUSH
3617: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 132
3628: PPUSH
3629: LD_INT 62
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 47
3639: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3640: LD_ADDR_EXP 83
3644: PUSH
3645: LD_EXP 83
3649: PUSH
3650: LD_VAR 0 4
3654: ADD
3655: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3656: LD_EXP 59
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 134
3677: PPUSH
3678: LD_INT 66
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: CALL_OW 47
3688: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3689: LD_ADDR_EXP 83
3693: PUSH
3694: LD_EXP 83
3698: PUSH
3699: LD_VAR 0 4
3703: ADD
3704: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3705: LD_EXP 59
3709: PPUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: CALL 5123 0 2
// bc_type = b_depot ;
3719: LD_ADDR_OWVAR 42
3723: PUSH
3724: LD_INT 0
3726: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3727: LD_ADDR_EXP 84
3731: PUSH
3732: LD_INT 92
3734: PPUSH
3735: LD_INT 51
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3746: LD_ADDR_EXP 85
3750: PUSH
3751: LD_INT 193
3753: ST_TO_ADDR
// amLeftEngs = [ ] ;
3754: LD_ADDR_EXP 86
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 1
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3891
// begin uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 2
3839: PPUSH
3840: LD_EXP 59
3844: PPUSH
3845: CALL_OW 380
// un = CreateHuman ;
3849: LD_ADDR_VAR 0 3
3853: PUSH
3854: CALL_OW 44
3858: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3859: LD_ADDR_EXP 86
3863: PUSH
3864: LD_EXP 86
3868: PUSH
3869: LD_VAR 0 3
3873: ADD
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_EXP 84
3884: PPUSH
3885: CALL_OW 52
// end ;
3889: GO 3799
3891: POP
3892: POP
// if Difficulty = 3 then
3893: LD_OWVAR 67
3897: PUSH
3898: LD_INT 3
3900: EQUAL
3901: IFFALSE 4025
// begin amRightEngs = [ ] ;
3903: LD_ADDR_EXP 87
3907: PUSH
3908: EMPTY
3909: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 12
3930: PUSH
3931: FOR_TO
3932: IFFALSE 4023
// begin uc_nation = 1 ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// uc_side = 1 ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_INT 1
3949: ST_TO_ADDR
// hc_gallery =  ;
3950: LD_ADDR_OWVAR 33
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// hc_name =  ;
3958: LD_ADDR_OWVAR 26
3962: PUSH
3963: LD_STRING 
3965: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3966: LD_INT 0
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_EXP 59
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 3
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3991: LD_ADDR_EXP 87
3995: PUSH
3996: LD_EXP 87
4000: PUSH
4001: LD_VAR 0 3
4005: ADD
4006: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_EXP 85
4016: PPUSH
4017: CALL_OW 52
// end ;
4021: GO 3931
4023: POP
4024: POP
// end ; end ; end_of_file
4025: LD_VAR 0 1
4029: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// if exist_mode then
4034: LD_VAR 0 2
4038: IFFALSE 4063
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_EXP 49
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 34
4060: ST_TO_ADDR
4061: GO 4078
// unit := NewCharacter ( ident ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 25
4077: ST_TO_ADDR
// result := unit ;
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_VAR 0 4
4087: ST_TO_ADDR
// end ;
4088: LD_VAR 0 3
4092: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
4097: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_VAR 0 1
4107: PUSH
4108: LD_EXP 62
4112: PUSH
4113: LD_EXP 63
4117: PUSH
4118: LD_EXP 64
4122: PUSH
4123: LD_EXP 65
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: DIFF
4134: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4135: LD_ADDR_VAR 0 7
4139: PUSH
4140: LD_VAR 0 1
4144: PUSH
4145: LD_INT 1
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 12
4157: ARRAY
4158: ST_TO_ADDR
// if radio then
4159: LD_VAR 0 4
4163: IFFALSE 4212
// begin if GetSex ( speaker ) = sex_male then
4165: LD_VAR 0 7
4169: PPUSH
4170: CALL_OW 258
4174: PUSH
4175: LD_INT 1
4177: EQUAL
4178: IFFALSE 4196
// SayRadio ( speaker , dialogMID ) else
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 94
4194: GO 4210
// SayRadio ( speaker , dialogFID ) ;
4196: LD_VAR 0 7
4200: PPUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: CALL_OW 94
// end else
4210: GO 4257
// begin if GetSex ( speaker ) = sex_male then
4212: LD_VAR 0 7
4216: PPUSH
4217: CALL_OW 258
4221: PUSH
4222: LD_INT 1
4224: EQUAL
4225: IFFALSE 4243
// Say ( speaker , dialogMID ) else
4227: LD_VAR 0 7
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: CALL_OW 88
4241: GO 4257
// Say ( speaker , dialogFID ) ;
4243: LD_VAR 0 7
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 88
// end ; result := speaker ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_VAR 0 7
4266: ST_TO_ADDR
// end ;
4267: LD_VAR 0 5
4271: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4272: LD_INT 0
4274: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 255
4284: PUSH
4285: LD_VAR 0 3
4289: EQUAL
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 302
4300: AND
4301: IFFALSE 4323
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_EXP 48
4312: PUSH
4313: LD_VAR 0 2
4317: STR
4318: PPUSH
4319: CALL_OW 38
// end ;
4323: LD_VAR 0 4
4327: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
// resultCharactersToSave = [ ] ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: EMPTY
4339: ST_TO_ADDR
// for unit in characters do
4340: LD_ADDR_VAR 0 5
4344: PUSH
4345: LD_VAR 0 1
4349: PUSH
4350: FOR_IN
4351: IFFALSE 4399
// if GetSide ( unit ) = side and IsOK ( unit ) then
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 255
4362: PUSH
4363: LD_VAR 0 3
4367: EQUAL
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 302
4378: AND
4379: IFFALSE 4397
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4381: LD_ADDR_VAR 0 6
4385: PUSH
4386: LD_VAR 0 6
4390: PUSH
4391: LD_VAR 0 5
4395: ADD
4396: ST_TO_ADDR
4397: GO 4350
4399: POP
4400: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4401: LD_VAR 0 6
4405: PPUSH
4406: LD_EXP 48
4410: PUSH
4411: LD_VAR 0 2
4415: STR
4416: PPUSH
4417: CALL_OW 38
// end ;
4421: LD_VAR 0 4
4425: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4426: LD_INT 0
4428: PPUSH
4429: PPUSH
4430: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4431: LD_ADDR_VAR 0 3
4435: PUSH
4436: LD_STRING QMoreInfo
4438: PPUSH
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL_OW 98
4448: ST_TO_ADDR
// case dec of 1 :
4449: LD_VAR 0 3
4453: PUSH
4454: LD_INT 1
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4522
4462: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4463: LD_EXP 62
4467: PPUSH
4468: LD_STRING D2a-Bur-1
4470: PPUSH
4471: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4475: LD_EXP 76
4479: PPUSH
4480: LD_STRING D2a-Pla-1
4482: PPUSH
4483: CALL_OW 88
// q1 = q diff 1 ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: DIFF
4500: ST_TO_ADDR
// if q1 >= 2 then
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 2
4508: GREATEREQUAL
4509: IFFALSE 4520
// Question1 ( q1 ) ;
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL 4426 0 1
// end ; 2 :
4520: GO 4659
4522: LD_INT 2
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4590
4530: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4531: LD_EXP 62
4535: PPUSH
4536: LD_STRING D2b-Bur-1
4538: PPUSH
4539: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4543: LD_EXP 76
4547: PPUSH
4548: LD_STRING D2b-Pla-1
4550: PPUSH
4551: CALL_OW 88
// q1 = q diff 2 ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_VAR 0 1
4564: PUSH
4565: LD_INT 2
4567: DIFF
4568: ST_TO_ADDR
// if q1 >= 2 then
4569: LD_VAR 0 4
4573: PUSH
4574: LD_INT 2
4576: GREATEREQUAL
4577: IFFALSE 4588
// Question1 ( q1 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL 4426 0 1
// end ; 3 :
4588: GO 4659
4590: LD_INT 3
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4658
4598: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4599: LD_EXP 62
4603: PPUSH
4604: LD_STRING D2c-Bur-1
4606: PPUSH
4607: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4611: LD_EXP 76
4615: PPUSH
4616: LD_STRING D2c-Pla-1
4618: PPUSH
4619: CALL_OW 88
// q1 = q diff 3 ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 3
4635: DIFF
4636: ST_TO_ADDR
// if q1 >= 2 then
4637: LD_VAR 0 4
4641: PUSH
4642: LD_INT 2
4644: GREATEREQUAL
4645: IFFALSE 4656
// Question1 ( q1 ) ;
4647: LD_VAR 0 4
4651: PPUSH
4652: CALL 4426 0 1
// end ; end ;
4656: GO 4659
4658: POP
// end ;
4659: LD_VAR 0 2
4663: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL_OW 302
4677: NOT
4678: PUSH
4679: LD_VAR 0 2
4683: PPUSH
4684: CALL_OW 302
4688: NOT
4689: OR
4690: PUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 302
4700: NOT
4701: OR
4702: PUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: CALL_OW 261
4712: PUSH
4713: LD_INT 100
4715: EQUAL
4716: OR
4717: PUSH
4718: LD_VAR 0 2
4722: PPUSH
4723: CALL_OW 266
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: IN
4738: NOT
4739: OR
4740: IFFALSE 4744
// exit ;
4742: GO 4877
// AddComTransport ( engineer , depot , mat_oil ) ;
4744: LD_VAR 0 1
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_INT 2
4756: PPUSH
4757: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4761: LD_INT 35
4763: PPUSH
4764: CALL_OW 67
// until Carry ( engineer ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL_OW 281
4777: IFFALSE 4761
// RemoveTasks ( engineer ) ;
4779: LD_VAR 0 1
4783: PPUSH
4784: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4788: LD_VAR 0 1
4792: PPUSH
4793: LD_STRING O
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: PPUSH
4828: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4832: LD_INT 35
4834: PPUSH
4835: CALL_OW 67
// until not Carry ( engineer ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: CALL_OW 281
4848: NOT
4849: IFFALSE 4832
// SetFuel ( vehicle , 100 ) ;
4851: LD_VAR 0 3
4855: PPUSH
4856: LD_INT 100
4858: PPUSH
4859: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4863: LD_VAR 0 1
4867: PPUSH
4868: LD_VAR 0 2
4872: PPUSH
4873: CALL_OW 180
// end ;
4877: LD_VAR 0 4
4881: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4882: LD_INT 0
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4889: LD_ADDR_VAR 0 8
4893: PUSH
4894: LD_INT 48
4896: PUSH
4897: LD_INT 49
4899: PUSH
4900: LD_INT 50
4902: PUSH
4903: LD_INT 20
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 51
4911: PUSH
4912: LD_INT 52
4914: PUSH
4915: LD_INT 69
4917: PUSH
4918: LD_INT 39
4920: PUSH
4921: LD_INT 34
4923: PUSH
4924: LD_INT 40
4926: PUSH
4927: LD_INT 53
4929: PUSH
4930: LD_INT 71
4932: PUSH
4933: LD_INT 57
4935: PUSH
4936: LD_INT 58
4938: PUSH
4939: LD_INT 44
4941: PUSH
4942: LD_INT 32
4944: PUSH
4945: LD_INT 27
4947: PUSH
4948: LD_INT 23
4950: PUSH
4951: LD_INT 33
4953: PUSH
4954: LD_INT 59
4956: PUSH
4957: LD_INT 54
4959: PUSH
4960: LD_INT 55
4962: PUSH
4963: LD_INT 56
4965: PUSH
4966: LD_INT 63
4968: PUSH
4969: LD_INT 64
4971: PUSH
4972: LD_INT 65
4974: PUSH
4975: LD_INT 30
4977: PUSH
4978: LD_INT 31
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 8
5038: PUSH
5039: FOR_TO
5040: IFFALSE 5116
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5042: LD_VAR 0 8
5046: PUSH
5047: LD_VAR 0 5
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 321
5062: PUSH
5063: LD_INT 1
5065: EQUAL
5066: PUSH
5067: LD_VAR 0 8
5071: PUSH
5072: LD_VAR 0 5
5076: ARRAY
5077: PPUSH
5078: LD_VAR 0 3
5082: PPUSH
5083: CALL_OW 482
5087: PUSH
5088: LD_INT 1
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5094: LD_VAR 0 2
5098: PPUSH
5099: LD_VAR 0 8
5103: PUSH
5104: LD_VAR 0 5
5108: ARRAY
5109: PPUSH
5110: CALL_OW 184
5114: GO 5039
5116: POP
5117: POP
// end ;
5118: LD_VAR 0 4
5122: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5123: LD_INT 0
5125: PPUSH
5126: PPUSH
5127: PPUSH
// uc_side := GetSide ( b ) ;
5128: LD_ADDR_OWVAR 20
5132: PUSH
5133: LD_VAR 0 2
5137: PPUSH
5138: CALL_OW 255
5142: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5143: LD_ADDR_OWVAR 21
5147: PUSH
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 248
5157: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5158: LD_INT 0
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: LD_VAR 0 1
5168: PPUSH
5169: CALL_OW 380
// un = CreateHuman ;
5173: LD_ADDR_VAR 0 4
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5183: LD_ADDR_VAR 0 5
5187: PUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: CALL_OW 254
5197: PUSH
5198: LD_INT 3
5200: MINUS
5201: ST_TO_ADDR
// if dir < 0 then
5202: LD_VAR 0 5
5206: PUSH
5207: LD_INT 0
5209: LESS
5210: IFFALSE 5226
// dir := 6 + dir ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_INT 6
5219: PUSH
5220: LD_VAR 0 5
5224: PLUS
5225: ST_TO_ADDR
// SetDir ( un , dir ) ;
5226: LD_VAR 0 4
5230: PPUSH
5231: LD_VAR 0 5
5235: PPUSH
5236: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5240: LD_VAR 0 4
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 52
// result = un ;
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_VAR 0 4
5263: ST_TO_ADDR
// end ;
5264: LD_VAR 0 3
5268: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5269: LD_INT 0
5271: PPUSH
5272: PPUSH
// dir := GetDir ( b ) - 3 ;
5273: LD_ADDR_VAR 0 4
5277: PUSH
5278: LD_VAR 0 2
5282: PPUSH
5283: CALL_OW 254
5287: PUSH
5288: LD_INT 3
5290: MINUS
5291: ST_TO_ADDR
// if dir < 0 then
5292: LD_VAR 0 4
5296: PUSH
5297: LD_INT 0
5299: LESS
5300: IFFALSE 5316
// dir := 6 + dir ;
5302: LD_ADDR_VAR 0 4
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: LD_VAR 0 4
5314: PLUS
5315: ST_TO_ADDR
// SetDir ( un , dir ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_VAR 0 4
5325: PPUSH
5326: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_VAR 0 2
5339: PPUSH
5340: CALL_OW 52
// result = un ;
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_VAR 0 1
5353: ST_TO_ADDR
// end ;
5354: LD_VAR 0 3
5358: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5359: LD_INT 0
5361: PPUSH
5362: PPUSH
5363: PPUSH
// tmp = [ ] ;
5364: LD_ADDR_VAR 0 5
5368: PUSH
5369: EMPTY
5370: ST_TO_ADDR
// if not vehicles then
5371: LD_VAR 0 1
5375: NOT
5376: IFFALSE 5380
// exit ;
5378: GO 5497
// for i in vehicles do
5380: LD_ADDR_VAR 0 4
5384: PUSH
5385: LD_VAR 0 1
5389: PUSH
5390: FOR_IN
5391: IFFALSE 5481
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5393: LD_ADDR_VAR 0 5
5397: PUSH
5398: LD_VAR 0 5
5402: PPUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_VAR 0 4
5410: PPUSH
5411: CALL_OW 265
5415: PUSH
5416: LD_VAR 0 4
5420: PPUSH
5421: CALL_OW 262
5425: PUSH
5426: LD_VAR 0 4
5430: PPUSH
5431: CALL_OW 263
5435: PUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 264
5445: PUSH
5446: LD_VAR 0 4
5450: PPUSH
5451: CALL_OW 261
5455: PUSH
5456: LD_VAR 0 4
5460: PPUSH
5461: CALL_OW 256
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PPUSH
5474: CALL_OW 2
5478: ST_TO_ADDR
5479: GO 5390
5481: POP
5482: POP
// SaveVariable ( tmp , ident ) ;
5483: LD_VAR 0 5
5487: PPUSH
5488: LD_VAR 0 2
5492: PPUSH
5493: CALL_OW 39
// end ;
5497: LD_VAR 0 3
5501: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5502: LD_INT 0
5504: PPUSH
5505: PPUSH
5506: PPUSH
// buildingsToSave = [ ] ;
5507: LD_ADDR_VAR 0 5
5511: PUSH
5512: EMPTY
5513: ST_TO_ADDR
// if not buildings then
5514: LD_VAR 0 1
5518: NOT
5519: IFFALSE 5523
// exit ;
5521: GO 6098
// for i in buildings do
5523: LD_ADDR_VAR 0 4
5527: PUSH
5528: LD_VAR 0 1
5532: PUSH
5533: FOR_IN
5534: IFFALSE 6082
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5536: LD_VAR 0 4
5540: PPUSH
5541: CALL_OW 266
5545: PUSH
5546: LD_INT 6
5548: PUSH
5549: LD_INT 7
5551: PUSH
5552: LD_INT 8
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: IN
5560: IFFALSE 5685
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5562: LD_ADDR_VAR 0 5
5566: PUSH
5567: LD_VAR 0 5
5571: PUSH
5572: LD_VAR 0 4
5576: PPUSH
5577: CALL_OW 266
5581: PUSH
5582: LD_VAR 0 4
5586: PPUSH
5587: CALL_OW 250
5591: PUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 251
5601: PUSH
5602: LD_VAR 0 4
5606: PPUSH
5607: CALL_OW 254
5611: PUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 267
5621: PUSH
5622: LD_VAR 0 4
5626: PPUSH
5627: CALL_OW 248
5631: PUSH
5632: LD_VAR 0 4
5636: PPUSH
5637: CALL_OW 256
5641: PUSH
5642: LD_VAR 0 4
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 268
5654: PUSH
5655: LD_VAR 0 4
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: CALL_OW 268
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: ADD
5682: ST_TO_ADDR
5683: GO 6080
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5685: LD_VAR 0 4
5689: PPUSH
5690: CALL_OW 266
5694: PUSH
5695: LD_INT 32
5697: PUSH
5698: LD_INT 33
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: IN
5705: IFFALSE 5813
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5707: LD_ADDR_VAR 0 5
5711: PUSH
5712: LD_VAR 0 5
5716: PUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: CALL_OW 266
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: CALL_OW 250
5736: PUSH
5737: LD_VAR 0 4
5741: PPUSH
5742: CALL_OW 251
5746: PUSH
5747: LD_VAR 0 4
5751: PPUSH
5752: CALL_OW 254
5756: PUSH
5757: LD_VAR 0 4
5761: PPUSH
5762: CALL_OW 267
5766: PUSH
5767: LD_VAR 0 4
5771: PPUSH
5772: CALL_OW 248
5776: PUSH
5777: LD_VAR 0 4
5781: PPUSH
5782: CALL_OW 256
5786: PUSH
5787: LD_VAR 0 4
5791: PPUSH
5792: CALL_OW 269
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: ADD
5810: ST_TO_ADDR
5811: GO 6080
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 266
5822: PUSH
5823: LD_INT 0
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: IN
5833: IFFALSE 5987
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5835: LD_ADDR_VAR 0 5
5839: PUSH
5840: LD_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: PPUSH
5850: CALL_OW 266
5854: PUSH
5855: LD_VAR 0 4
5859: PPUSH
5860: CALL_OW 250
5864: PUSH
5865: LD_VAR 0 4
5869: PPUSH
5870: CALL_OW 251
5874: PUSH
5875: LD_VAR 0 4
5879: PPUSH
5880: CALL_OW 254
5884: PUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 267
5894: PUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: CALL_OW 248
5904: PUSH
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 256
5914: PUSH
5915: LD_VAR 0 4
5919: PPUSH
5920: CALL_OW 274
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: CALL_OW 275
5932: PUSH
5933: LD_VAR 0 4
5937: PPUSH
5938: CALL_OW 274
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: CALL_OW 275
5950: PUSH
5951: LD_VAR 0 4
5955: PPUSH
5956: CALL_OW 274
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL_OW 275
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: ADD
5984: ST_TO_ADDR
5985: GO 6080
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: LD_VAR 0 5
5996: PUSH
5997: LD_VAR 0 4
6001: PPUSH
6002: CALL_OW 266
6006: PUSH
6007: LD_VAR 0 4
6011: PPUSH
6012: CALL_OW 250
6016: PUSH
6017: LD_VAR 0 4
6021: PPUSH
6022: CALL_OW 251
6026: PUSH
6027: LD_VAR 0 4
6031: PPUSH
6032: CALL_OW 254
6036: PUSH
6037: LD_VAR 0 4
6041: PPUSH
6042: CALL_OW 267
6046: PUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 248
6056: PUSH
6057: LD_VAR 0 4
6061: PPUSH
6062: CALL_OW 256
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: EMPTY
6077: LIST
6078: ADD
6079: ST_TO_ADDR
// end ;
6080: GO 5533
6082: POP
6083: POP
// SaveVariable ( buildingsToSave , ident ) ;
6084: LD_VAR 0 5
6088: PPUSH
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL_OW 39
// end ;
6098: LD_VAR 0 3
6102: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
6107: PPUSH
6108: PPUSH
6109: PPUSH
// belkovTeam = [ ] ;
6110: LD_ADDR_EXP 73
6114: PUSH
6115: EMPTY
6116: ST_TO_ADDR
// if belkovReturn then
6117: LD_EXP 6
6121: IFFALSE 6139
// belkovTeam = belkovTeam ^ Belkov ;
6123: LD_ADDR_EXP 73
6127: PUSH
6128: LD_EXP 73
6132: PUSH
6133: LD_EXP 64
6137: ADD
6138: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6139: LD_ADDR_EXP 73
6143: PUSH
6144: LD_EXP 73
6148: PUSH
6149: LD_EXP 68
6153: ADD
6154: ST_TO_ADDR
// for unit in other_survivors do
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: LD_EXP 66
6164: PUSH
6165: FOR_IN
6166: IFFALSE 6207
// if IsOK ( unit ) and belkovTeam < 5 then
6168: LD_VAR 0 3
6172: PPUSH
6173: CALL_OW 302
6177: PUSH
6178: LD_EXP 73
6182: PUSH
6183: LD_INT 5
6185: LESS
6186: AND
6187: IFFALSE 6205
// belkovTeam = belkovTeam ^ unit ;
6189: LD_ADDR_EXP 73
6193: PUSH
6194: LD_EXP 73
6198: PUSH
6199: LD_VAR 0 3
6203: ADD
6204: ST_TO_ADDR
6205: GO 6165
6207: POP
6208: POP
// if belkovTeam < 5 then
6209: LD_EXP 73
6213: PUSH
6214: LD_INT 5
6216: LESS
6217: IFFALSE 6343
// begin restRandSolds = 5 - belkovTeam ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 5
6226: PUSH
6227: LD_EXP 73
6231: MINUS
6232: ST_TO_ADDR
// for i := 1 to restRandSolds do
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_VAR 0 4
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6341
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: LD_EXP 69
6260: PPUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: PPUSH
6274: CALL_OW 72
6278: PUSH
6279: LD_EXP 67
6283: DIFF
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6337
// if not unit in belkovTeam then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_EXP 73
6297: IN
6298: NOT
6299: IFFALSE 6335
// begin belkovTeam = belkovTeam ^ unit ;
6301: LD_ADDR_EXP 73
6305: PUSH
6306: LD_EXP 73
6310: PUSH
6311: LD_VAR 0 3
6315: ADD
6316: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6317: LD_ADDR_EXP 69
6321: PUSH
6322: LD_EXP 69
6326: PUSH
6327: LD_VAR 0 3
6331: DIFF
6332: ST_TO_ADDR
// break ;
6333: GO 6337
// end ;
6335: GO 6285
6337: POP
6338: POP
6339: GO 6248
6341: POP
6342: POP
// end ; tmp = belkovTeam diff Belkov ;
6343: LD_ADDR_VAR 0 5
6347: PUSH
6348: LD_EXP 73
6352: PUSH
6353: LD_EXP 64
6357: DIFF
6358: ST_TO_ADDR
// if tmp < 4 then
6359: LD_VAR 0 5
6363: PUSH
6364: LD_INT 4
6366: LESS
6367: IFFALSE 6451
// begin for i := 1 to 4 - tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: DOUBLE
6375: LD_INT 1
6377: DEC
6378: ST_TO_ADDR
6379: LD_INT 4
6381: PUSH
6382: LD_VAR 0 5
6386: MINUS
6387: PUSH
6388: FOR_TO
6389: IFFALSE 6449
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6391: LD_INT 0
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: CALL_OW 12
6404: PPUSH
6405: CALL_OW 381
// unit = CreateHuman ;
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: CALL_OW 44
6418: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6419: LD_ADDR_EXP 73
6423: PUSH
6424: LD_EXP 73
6428: PUSH
6429: LD_VAR 0 3
6433: ADD
6434: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6435: LD_VAR 0 3
6439: PPUSH
6440: LD_INT 209
6442: PPUSH
6443: CALL_OW 52
// end ;
6447: GO 6388
6449: POP
6450: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6451: LD_STRING 01_Kirilenkova
6453: PPUSH
6454: CALL_OW 28
6458: IFFALSE 6478
// belkovTeam = belkovTeam ^ Kirilenkova else
6460: LD_ADDR_EXP 73
6464: PUSH
6465: LD_EXP 73
6469: PUSH
6470: LD_EXP 65
6474: ADD
6475: ST_TO_ADDR
6476: GO 6554
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6478: LD_ADDR_EXP 73
6482: PUSH
6483: LD_EXP 73
6487: PUSH
6488: LD_EXP 69
6492: PPUSH
6493: LD_INT 25
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: PPUSH
6506: CALL_OW 72
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: ADD
6515: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6516: LD_ADDR_EXP 69
6520: PUSH
6521: LD_EXP 69
6525: PUSH
6526: LD_EXP 69
6530: PPUSH
6531: LD_INT 25
6533: PUSH
6534: LD_INT 4
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: PPUSH
6544: CALL_OW 72
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: DIFF
6553: ST_TO_ADDR
// end ; end ;
6554: LD_VAR 0 1
6558: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6559: LD_INT 0
6561: PPUSH
6562: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6563: LD_EXP 78
6567: NOT
6568: PUSH
6569: LD_EXP 78
6573: PPUSH
6574: CALL_OW 302
6578: NOT
6579: OR
6580: IFFALSE 6683
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: LD_EXP 77
6591: PPUSH
6592: LD_INT 50
6594: PUSH
6595: EMPTY
6596: LIST
6597: PPUSH
6598: CALL_OW 72
6602: PUSH
6603: LD_EXP 79
6607: DIFF
6608: ST_TO_ADDR
// if soldsOK then
6609: LD_VAR 0 2
6613: IFFALSE 6683
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 1
6622: ARRAY
6623: PPUSH
6624: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6628: LD_VAR 0 2
6632: PUSH
6633: LD_INT 1
6635: ARRAY
6636: PPUSH
6637: LD_INT 112
6639: PPUSH
6640: LD_INT 96
6642: PPUSH
6643: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6647: LD_VAR 0 2
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: LD_INT 3
6658: PPUSH
6659: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6663: LD_ADDR_EXP 77
6667: PUSH
6668: LD_EXP 77
6672: PUSH
6673: LD_VAR 0 2
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: DIFF
6682: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6683: LD_EXP 79
6687: NOT
6688: PUSH
6689: LD_EXP 79
6693: PPUSH
6694: CALL_OW 302
6698: NOT
6699: OR
6700: IFFALSE 6803
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: LD_EXP 77
6711: PPUSH
6712: LD_INT 50
6714: PUSH
6715: EMPTY
6716: LIST
6717: PPUSH
6718: CALL_OW 72
6722: PUSH
6723: LD_EXP 78
6727: DIFF
6728: ST_TO_ADDR
// if soldsOK then
6729: LD_VAR 0 2
6733: IFFALSE 6803
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6735: LD_VAR 0 2
6739: PUSH
6740: LD_INT 1
6742: ARRAY
6743: PPUSH
6744: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6748: LD_VAR 0 2
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: LD_INT 112
6759: PPUSH
6760: LD_INT 96
6762: PPUSH
6763: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6783: LD_ADDR_EXP 77
6787: PUSH
6788: LD_EXP 77
6792: PUSH
6793: LD_VAR 0 2
6797: PUSH
6798: LD_INT 1
6800: ARRAY
6801: DIFF
6802: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6803: LD_EXP 78
6807: PUSH
6808: LD_EXP 79
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6821: LD_EXP 78
6825: PUSH
6826: LD_EXP 79
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: LD_INT 112
6837: PPUSH
6838: LD_INT 96
6840: PPUSH
6841: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6845: LD_EXP 78
6849: PUSH
6850: LD_EXP 79
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: CALL_OW 235
// end ; end_of_file
6866: LD_VAR 0 1
6870: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6871: LD_INT 0
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6877: LD_EXP 62
6881: PPUSH
6882: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6886: LD_EXP 62
6890: PPUSH
6891: LD_INT 163
6893: PPUSH
6894: LD_INT 108
6896: PPUSH
6897: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6901: LD_EXP 62
6905: PPUSH
6906: LD_EXP 67
6910: PPUSH
6911: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6915: LD_ADDR_VAR 0 2
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: PUSH
6949: LD_EXP 62
6953: DIFF
6954: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6955: LD_ADDR_VAR 0 4
6959: PUSH
6960: DOUBLE
6961: LD_INT 1
6963: DEC
6964: ST_TO_ADDR
6965: LD_EXP 52
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7089
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_EXP 52
6987: PUSH
6988: LD_VAR 0 4
6992: ARRAY
6993: PUSH
6994: LD_INT 1
6996: ARRAY
6997: PPUSH
6998: LD_EXP 52
7002: PUSH
7003: LD_VAR 0 4
7007: ARRAY
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: CALL_OW 73
7017: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7018: LD_VAR 0 3
7022: PPUSH
7023: LD_EXP 52
7027: PUSH
7028: LD_VAR 0 4
7032: ARRAY
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_EXP 52
7042: PUSH
7043: LD_VAR 0 4
7047: ARRAY
7048: PUSH
7049: LD_INT 2
7051: ARRAY
7052: PPUSH
7053: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7057: LD_VAR 0 3
7061: PPUSH
7062: LD_EXP 67
7066: PPUSH
7067: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_VAR 0 2
7080: PUSH
7081: LD_VAR 0 3
7085: DIFF
7086: ST_TO_ADDR
// end ;
7087: GO 6970
7089: POP
7090: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7091: LD_EXP 62
7095: PPUSH
7096: CALL_OW 87
// wait ( 0 0$1 ) ;
7100: LD_INT 35
7102: PPUSH
7103: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7107: LD_EXP 62
7111: PPUSH
7112: LD_EXP 67
7116: PPUSH
7117: CALL_OW 296
7121: PUSH
7122: LD_INT 4
7124: LESS
7125: IFFALSE 7091
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7127: LD_EXP 62
7131: PUSH
7132: LD_EXP 67
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PPUSH
7141: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7145: LD_EXP 67
7149: PPUSH
7150: LD_EXP 62
7154: PPUSH
7155: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7159: LD_EXP 67
7163: PPUSH
7164: LD_STRING D1-Kur-1
7166: PPUSH
7167: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7171: LD_EXP 62
7175: PPUSH
7176: LD_STRING D1-Bur-1
7178: PPUSH
7179: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7183: LD_EXP 67
7187: PPUSH
7188: LD_STRING D1-Kur-2
7190: PPUSH
7191: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7195: LD_EXP 62
7199: PPUSH
7200: LD_STRING D1-Bur-2
7202: PPUSH
7203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7207: LD_EXP 67
7211: PPUSH
7212: LD_STRING D1-Kur-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Gnyevko ) then
7219: LD_EXP 63
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7242
// Say ( Kurin , D1-Kur-3a ) ;
7230: LD_EXP 67
7234: PPUSH
7235: LD_STRING D1-Kur-3a
7237: PPUSH
7238: CALL_OW 88
// InGameOff ;
7242: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7246: LD_INT 22
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 21
7258: PUSH
7259: LD_INT 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PUSH
7275: LD_EXP 62
7279: PUSH
7280: LD_EXP 63
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: DIFF
7289: PPUSH
7290: LD_INT 6
7292: PPUSH
7293: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7297: LD_EXP 70
7301: PPUSH
7302: LD_INT 3
7304: PPUSH
7305: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7309: LD_INT 9
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 1
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PPUSH
7336: CALL_OW 70
7340: PUSH
7341: LD_EXP 67
7345: DIFF
7346: PPUSH
7347: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7351: LD_EXP 66
7355: PPUSH
7356: LD_INT 95
7358: PPUSH
7359: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7363: LD_EXP 64
7367: PPUSH
7368: LD_INT 95
7370: PPUSH
7371: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7375: LD_EXP 65
7379: PPUSH
7380: CALL_OW 305
7384: IFFALSE 7398
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7386: LD_EXP 65
7390: PPUSH
7391: LD_INT 83
7393: PPUSH
7394: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7398: LD_STRING 01_Gnyevko
7400: PPUSH
7401: CALL_OW 28
7405: NOT
7406: IFFALSE 7420
// SetSide ( randomMech , 3 ) ;
7408: LD_EXP 71
7412: PPUSH
7413: LD_INT 3
7415: PPUSH
7416: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7420: LD_STRING M1
7422: PPUSH
7423: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7427: LD_INT 3
7429: PPUSH
7430: LD_INT 6
7432: PPUSH
7433: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7437: LD_INT 3
7439: PPUSH
7440: LD_INT 7
7442: PPUSH
7443: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7447: LD_INT 6
7449: PPUSH
7450: LD_INT 6
7452: PPUSH
7453: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7457: LD_INT 6
7459: PPUSH
7460: LD_INT 7
7462: PPUSH
7463: CALL_OW 334
// SaveForQuickRestart ;
7467: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7471: LD_EXP 66
7475: PPUSH
7476: LD_INT 95
7478: PPUSH
7479: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7483: LD_EXP 64
7487: PPUSH
7488: LD_INT 95
7490: PPUSH
7491: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7495: LD_EXP 65
7499: PPUSH
7500: CALL_OW 305
7504: IFFALSE 7518
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7506: LD_EXP 65
7510: PPUSH
7511: LD_INT 83
7513: PPUSH
7514: CALL_OW 120
// end ;
7518: LD_VAR 0 1
7522: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7523: LD_EXP 20
7527: NOT
7528: PUSH
7529: LD_INT 20
7531: PPUSH
7532: LD_INT 22
7534: PUSH
7535: LD_INT 3
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 21
7547: PUSH
7548: LD_INT 1
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 21
7557: PUSH
7558: LD_INT 2
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 70
7578: PUSH
7579: LD_INT 0
7581: GREATER
7582: AND
7583: IFFALSE 7957
7585: GO 7587
7587: DISABLE
7588: LD_INT 0
7590: PPUSH
// begin enable ;
7591: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 20
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 2
7612: PUSH
7613: LD_INT 21
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 21
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 70
7646: PUSH
7647: FOR_IN
7648: IFFALSE 7934
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7650: LD_VAR 0 1
7654: PPUSH
7655: LD_VAR 0 1
7659: PPUSH
7660: CALL_OW 250
7664: PPUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 251
7674: PUSH
7675: LD_INT 5
7677: PLUS
7678: PPUSH
7679: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7683: LD_EXP 7
7687: NOT
7688: PUSH
7689: LD_EXP 33
7693: NOT
7694: AND
7695: IFFALSE 7758
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7697: LD_VAR 0 1
7701: PUSH
7702: LD_EXP 62
7706: NONEQUAL
7707: PUSH
7708: LD_EXP 70
7712: PPUSH
7713: CALL_OW 302
7717: AND
7718: IFFALSE 7732
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7720: LD_EXP 70
7724: PPUSH
7725: LD_STRING D1b-Kov-1
7727: PPUSH
7728: CALL_OW 88
// if unit = Burlak then
7732: LD_VAR 0 1
7736: PUSH
7737: LD_EXP 62
7741: EQUAL
7742: IFFALSE 7756
// Say ( Burlak , D1b-Bur-1 ) ;
7744: LD_EXP 62
7748: PPUSH
7749: LD_STRING D1b-Bur-1
7751: PPUSH
7752: CALL_OW 88
// end else
7756: GO 7777
// if not dialogLoopBlocker then
7758: LD_EXP 33
7762: NOT
7763: IFFALSE 7777
// Say ( Platonov , D8-Pla-1 ) ;
7765: LD_EXP 76
7769: PPUSH
7770: LD_STRING D8-Pla-1
7772: PPUSH
7773: CALL_OW 88
// if not dialogLoopBlocker then
7777: LD_EXP 33
7781: NOT
7782: IFFALSE 7792
// dialogLoopBlocker = true ;
7784: LD_ADDR_EXP 33
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7792: LD_INT 20
7794: PPUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 70
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 250
7851: PPUSH
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 251
7861: PUSH
7862: LD_INT 5
7864: PLUS
7865: PPUSH
7866: CALL_OW 111
// wait ( 0 0$1 ) ;
7870: LD_INT 35
7872: PPUSH
7873: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7877: LD_INT 20
7879: PPUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 70
7926: PUSH
7927: LD_INT 0
7929: EQUAL
7930: IFFALSE 7792
// end ;
7932: GO 7647
7934: POP
7935: POP
// if dialogLoopBlocker then
7936: LD_EXP 33
7940: IFFALSE 7957
// begin wait ( 0 0$5 ) ;
7942: LD_INT 175
7944: PPUSH
7945: CALL_OW 67
// dialogLoopBlocker = false ;
7949: LD_ADDR_EXP 33
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// end ; end ;
7957: PPOPN 1
7959: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7960: LD_EXP 19
7964: NOT
7965: PUSH
7966: LD_INT 8
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 3
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: LD_INT 21
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 21
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PPUSH
8011: CALL_OW 71
8015: PUSH
8016: LD_INT 0
8018: GREATER
8019: AND
8020: IFFALSE 8155
8022: GO 8024
8024: DISABLE
8025: LD_INT 0
8027: PPUSH
// begin enable ;
8028: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8029: LD_ADDR_VAR 0 1
8033: PUSH
8034: LD_INT 8
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 21
8052: PUSH
8053: LD_INT 1
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 21
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 71
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8138
// begin ComMoveXY ( unit , 114 , 98 ) ;
8087: LD_VAR 0 1
8091: PPUSH
8092: LD_INT 114
8094: PPUSH
8095: LD_INT 98
8097: PPUSH
8098: CALL_OW 111
// if dialogLoopBlocker then
8102: LD_EXP 33
8106: IFFALSE 8112
// exit ;
8108: POP
8109: POP
8110: GO 8155
// dialogLoopBlocker = true ;
8112: LD_ADDR_EXP 33
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8120: LD_EXP 76
8124: PPUSH
8125: LD_STRING D8-Pla-1
8127: PPUSH
8128: CALL_OW 88
// exit ;
8132: POP
8133: POP
8134: GO 8155
// end ;
8136: GO 8084
8138: POP
8139: POP
// wait ( 0 0$5 ) ;
8140: LD_INT 175
8142: PPUSH
8143: CALL_OW 67
// dialogLoopBlocker = false ;
8147: LD_ADDR_EXP 33
8151: PUSH
8152: LD_INT 0
8154: ST_TO_ADDR
// end ;
8155: PPOPN 1
8157: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8158: LD_EXP 7
8162: NOT
8163: PUSH
8164: LD_INT 9
8166: PPUSH
8167: LD_INT 22
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 21
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 70
8195: PUSH
8196: LD_INT 0
8198: GREATER
8199: AND
8200: IFFALSE 8217
8202: GO 8204
8204: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8205: LD_EXP 67
8209: PPUSH
8210: LD_STRING D1a-Kur-1
8212: PPUSH
8213: CALL_OW 88
8217: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8218: LD_EXP 7
8222: NOT
8223: PUSH
8224: LD_EXP 62
8228: PPUSH
8229: CALL_OW 302
8233: AND
8234: PUSH
8235: LD_INT 29
8237: PPUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 70
8266: PUSH
8267: LD_INT 0
8269: GREATER
8270: AND
8271: IFFALSE 8898
8273: GO 8275
8275: DISABLE
8276: LD_INT 0
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin enable ;
8283: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8284: LD_ADDR_VAR 0 2
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 21
8301: PUSH
8302: LD_INT 1
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: PUSH
8318: FOR_IN
8319: IFFALSE 8896
// if See ( 6 , unit ) then
8321: LD_INT 6
8323: PPUSH
8324: LD_VAR 0 2
8328: PPUSH
8329: CALL_OW 292
8333: IFFALSE 8894
// begin meetPlatonov = true ;
8335: LD_ADDR_EXP 7
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// InGameOn ;
8343: CALL_OW 8
// DialogueOn ;
8347: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8351: LD_ADDR_VAR 0 4
8355: PUSH
8356: LD_EXP 77
8360: PPUSH
8361: LD_INT 26
8363: PUSH
8364: LD_INT 1
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PPUSH
8371: CALL_OW 72
8375: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8376: LD_ADDR_VAR 0 4
8380: PUSH
8381: LD_VAR 0 4
8385: PUSH
8386: LD_INT 8
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 6
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 30
8411: PUSH
8412: LD_INT 31
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 3
8421: PUSH
8422: LD_INT 58
8424: PUSH
8425: EMPTY
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 70
8442: ADD
8443: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8444: LD_ADDR_VAR 0 5
8448: PUSH
8449: LD_VAR 0 4
8453: PPUSH
8454: LD_VAR 0 2
8458: PPUSH
8459: CALL_OW 74
8463: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8464: LD_VAR 0 5
8468: PPUSH
8469: CALL_OW 247
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: IFFALSE 8498
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: CALL_OW 313
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8498: LD_VAR 0 5
8502: PPUSH
8503: LD_STRING D2-RSol1-1
8505: PPUSH
8506: LD_STRING 
8508: PPUSH
8509: LD_INT 0
8511: PPUSH
8512: CALL 4093 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8516: LD_EXP 62
8520: PPUSH
8521: LD_STRING D2-Bur-1
8523: PPUSH
8524: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8528: LD_VAR 0 5
8532: PPUSH
8533: LD_STRING D2-RSol1-2
8535: PPUSH
8536: CALL_OW 88
// DialogueOff ;
8540: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8544: LD_ADDR_VAR 0 3
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 3
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 1
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 50
8571: PUSH
8572: EMPTY
8573: LIST
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL_OW 69
8584: ST_TO_ADDR
// for i := 1 to yourUnits do
8585: LD_ADDR_VAR 0 1
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_VAR 0 3
8599: PUSH
8600: FOR_TO
8601: IFFALSE 8670
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8603: LD_VAR 0 3
8607: PUSH
8608: LD_VAR 0 1
8612: ARRAY
8613: PPUSH
8614: LD_EXP 53
8618: PUSH
8619: LD_VAR 0 1
8623: ARRAY
8624: PUSH
8625: LD_INT 1
8627: ARRAY
8628: PPUSH
8629: LD_EXP 53
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: PUSH
8640: LD_INT 2
8642: ARRAY
8643: PPUSH
8644: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8648: LD_VAR 0 3
8652: PUSH
8653: LD_VAR 0 1
8657: ARRAY
8658: PPUSH
8659: LD_EXP 76
8663: PPUSH
8664: CALL_OW 179
// end ;
8668: GO 8600
8670: POP
8671: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8672: LD_EXP 62
8676: PPUSH
8677: CALL_OW 87
// wait ( 0 0$1 ) ;
8681: LD_INT 35
8683: PPUSH
8684: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8688: LD_EXP 62
8692: PPUSH
8693: LD_EXP 76
8697: PPUSH
8698: CALL_OW 296
8702: PUSH
8703: LD_INT 4
8705: LESS
8706: IFFALSE 8672
// ComTurnUnit ( Platonov , Burlak ) ;
8708: LD_EXP 76
8712: PPUSH
8713: LD_EXP 62
8717: PPUSH
8718: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8722: LD_EXP 76
8726: PPUSH
8727: LD_STRING D2-Pla-2
8729: PPUSH
8730: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8734: LD_EXP 62
8738: PPUSH
8739: LD_STRING D2-Bur-2
8741: PPUSH
8742: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8746: LD_EXP 76
8750: PPUSH
8751: LD_STRING D2-Pla-3
8753: PPUSH
8754: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8758: LD_EXP 62
8762: PPUSH
8763: LD_STRING D2-Bur-3
8765: PPUSH
8766: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8770: LD_EXP 76
8774: PPUSH
8775: LD_STRING D2-Pla-4
8777: PPUSH
8778: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8782: LD_EXP 62
8786: PPUSH
8787: LD_STRING D2-Bur-4
8789: PPUSH
8790: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8794: LD_EXP 76
8798: PPUSH
8799: LD_STRING D2-Pla-5
8801: PPUSH
8802: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8806: LD_INT 1
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PPUSH
8824: CALL 4426 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8828: LD_EXP 76
8832: PPUSH
8833: LD_STRING D3-Pla-1
8835: PPUSH
8836: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8840: LD_EXP 62
8844: PPUSH
8845: LD_STRING D3-Bur-1
8847: PPUSH
8848: CALL_OW 88
// InGameOff ;
8852: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8856: LD_STRING M2a
8858: PPUSH
8859: CALL_OW 337
// ComFree ( Platonov ) ;
8863: LD_EXP 76
8867: PPUSH
8868: CALL_OW 139
// SetSide ( beria , 3 ) ;
8872: LD_INT 106
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 235
// canExitBase = false ;
8882: LD_ADDR_EXP 19
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// exit ;
8890: POP
8891: POP
8892: GO 8898
// end ;
8894: GO 8318
8896: POP
8897: POP
// end ;
8898: PPOPN 5
8900: END
// export function Dial_LabConstructed ; begin
8901: LD_INT 0
8903: PPUSH
// labConstructed = true ;
8904: LD_ADDR_EXP 8
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// DialogueOn ;
8912: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8916: LD_EXP 62
8920: PPUSH
8921: LD_STRING D5a-Bur-1
8923: PPUSH
8924: CALL_OW 88
// if workshopConstructed then
8928: LD_EXP 9
8932: IFFALSE 8948
// Say ( Platonov , D5a-Pla-1 ) else
8934: LD_EXP 76
8938: PPUSH
8939: LD_STRING D5a-Pla-1
8941: PPUSH
8942: CALL_OW 88
8946: GO 8960
// Say ( Platonov , D5a-Pla-1a ) ;
8948: LD_EXP 76
8952: PPUSH
8953: LD_STRING D5a-Pla-1a
8955: PPUSH
8956: CALL_OW 88
// DialogueOff ;
8960: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8964: LD_STRING M2b
8966: PPUSH
8967: CALL_OW 337
// end ;
8971: LD_VAR 0 1
8975: RET
// export function Dial_WorkshopConstructed ; begin
8976: LD_INT 0
8978: PPUSH
// workshopConstructed = true ;
8979: LD_ADDR_EXP 9
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// DialogueOn ;
8987: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8991: LD_EXP 62
8995: PPUSH
8996: LD_STRING D5b-Bur-1
8998: PPUSH
8999: CALL_OW 88
// if labConstructed then
9003: LD_EXP 8
9007: IFFALSE 9023
// Say ( Platonov , D5b-Pla-1 ) else
9009: LD_EXP 76
9013: PPUSH
9014: LD_STRING D5b-Pla-1
9016: PPUSH
9017: CALL_OW 88
9021: GO 9035
// Say ( Platonov , D5b-Pla-1a ) ;
9023: LD_EXP 76
9027: PPUSH
9028: LD_STRING D5b-Pla-1a
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9039: LD_STRING M2c
9041: PPUSH
9042: CALL_OW 337
// end ;
9046: LD_VAR 0 1
9050: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9051: LD_INT 0
9053: PPUSH
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9070: LD_INT 22
9072: PUSH
9073: LD_INT 3
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PPUSH
9099: CALL_OW 141
// DialogueOn ;
9103: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9107: LD_EXP 76
9111: PPUSH
9112: LD_STRING D6-Pla-1
9114: PPUSH
9115: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9119: LD_EXP 62
9123: PPUSH
9124: LD_STRING D6-Bur-1
9126: PPUSH
9127: CALL_OW 88
// DialogueOff ;
9131: CALL_OW 7
// case GetBType ( building ) of b_lab :
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 266
9144: PUSH
9145: LD_INT 6
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9193
9153: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9154: LD_INT 106
9156: PPUSH
9157: CALL_OW 274
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: LD_INT 106
9167: PPUSH
9168: CALL_OW 274
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 275
9180: PUSH
9181: LD_EXP 54
9185: PLUS
9186: PPUSH
9187: CALL_OW 277
9191: GO 9386
9193: LD_INT 2
9195: DOUBLE
9196: EQUAL
9197: IFTRUE 9201
9199: GO 9241
9201: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9202: LD_INT 106
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 106
9215: PPUSH
9216: CALL_OW 274
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 275
9228: PUSH
9229: LD_EXP 55
9233: PLUS
9234: PPUSH
9235: CALL_OW 277
9239: GO 9386
9241: LD_INT 26
9243: DOUBLE
9244: EQUAL
9245: IFTRUE 9249
9247: GO 9289
9249: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9250: LD_INT 106
9252: PPUSH
9253: CALL_OW 274
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: LD_INT 106
9263: PPUSH
9264: CALL_OW 274
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: CALL_OW 275
9276: PUSH
9277: LD_EXP 56
9281: PLUS
9282: PPUSH
9283: CALL_OW 277
9287: GO 9386
9289: LD_INT 4
9291: DOUBLE
9292: EQUAL
9293: IFTRUE 9297
9295: GO 9337
9297: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9298: LD_INT 106
9300: PPUSH
9301: CALL_OW 274
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 106
9311: PPUSH
9312: CALL_OW 274
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 275
9324: PUSH
9325: LD_EXP 57
9329: PLUS
9330: PPUSH
9331: CALL_OW 277
9335: GO 9386
9337: LD_INT 31
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9385
9345: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9346: LD_INT 106
9348: PPUSH
9349: CALL_OW 274
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 106
9359: PPUSH
9360: CALL_OW 274
9364: PPUSH
9365: LD_INT 1
9367: PPUSH
9368: CALL_OW 275
9372: PUSH
9373: LD_EXP 58
9377: PLUS
9378: PPUSH
9379: CALL_OW 277
9383: GO 9386
9385: POP
// RemoveUnit ( building ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL_OW 64
// end ;
9395: LD_VAR 0 2
9399: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9400: LD_EXP 9
9404: PUSH
9405: LD_EXP 8
9409: AND
9410: IFFALSE 9519
9412: GO 9414
9414: DISABLE
// begin DialogueOn ;
9415: CALL_OW 6
// if engineResearched then
9419: LD_EXP 10
9423: IFFALSE 9451
// begin Say ( Burlak , D7b-Bur-1 ) ;
9425: LD_EXP 62
9429: PPUSH
9430: LD_STRING D7b-Bur-1
9432: PPUSH
9433: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9437: LD_EXP 76
9441: PPUSH
9442: LD_STRING D7b-Pla-1
9444: PPUSH
9445: CALL_OW 88
// end else
9449: GO 9475
// begin Say ( Burlak , D7a-Bur-1 ) ;
9451: LD_EXP 62
9455: PPUSH
9456: LD_STRING D7a-Bur-1
9458: PPUSH
9459: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9463: LD_EXP 76
9467: PPUSH
9468: LD_STRING D7a-Pla-1
9470: PPUSH
9471: CALL_OW 88
// end ; DialogueOff ;
9475: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9479: LD_STRING M2
9481: PPUSH
9482: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9486: LD_INT 3
9488: PPUSH
9489: LD_EXP 76
9493: PPUSH
9494: CALL_OW 250
9498: PPUSH
9499: LD_EXP 76
9503: PPUSH
9504: CALL_OW 251
9508: PPUSH
9509: LD_INT 5
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 56
// end ;
9519: END
// export function Dial_NewCrates ( x , y ) ; begin
9520: LD_INT 0
9522: PPUSH
// wait ( 0 0$18 ) ;
9523: LD_INT 630
9525: PPUSH
9526: CALL_OW 67
// if not spawnCrates then
9530: LD_EXP 21
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9570
// ComMoveXY ( Platonov , x , y ) ;
9539: LD_EXP 76
9543: PPUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_VAR 0 2
9553: PPUSH
9554: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9558: LD_EXP 76
9562: PPUSH
9563: LD_STRING D4-Pla-1
9565: PPUSH
9566: CALL_OW 88
// end ;
9570: LD_VAR 0 3
9574: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9575: LD_INT 0
9577: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9578: LD_ADDR_EXP 13
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: ST_TO_ADDR
// constructedFirstVehicle = true ;
9616: LD_ADDR_EXP 12
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// InGameOn ;
9624: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 87
// wait ( 0 0$3 ) ;
9637: LD_INT 105
9639: PPUSH
9640: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9644: LD_EXP 62
9648: PPUSH
9649: LD_STRING D9-Bur-1
9651: PPUSH
9652: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9656: LD_EXP 76
9660: PPUSH
9661: LD_EXP 13
9665: PPUSH
9666: CALL_OW 250
9670: PPUSH
9671: LD_EXP 13
9675: PPUSH
9676: CALL_OW 251
9680: PPUSH
9681: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9685: LD_INT 35
9687: PPUSH
9688: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9692: LD_EXP 76
9696: PPUSH
9697: LD_EXP 13
9701: PPUSH
9702: CALL_OW 296
9706: PUSH
9707: LD_INT 4
9709: LESS
9710: IFFALSE 9685
// ComTurnUnit ( Platonov , firstVeh ) ;
9712: LD_EXP 76
9716: PPUSH
9717: LD_EXP 13
9721: PPUSH
9722: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9726: LD_EXP 76
9730: PPUSH
9731: LD_STRING D9-Pla-1
9733: PPUSH
9734: CALL_OW 88
// InGameOff ;
9738: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9742: LD_STRING M3
9744: PPUSH
9745: CALL_OW 337
// canExitBase = true ;
9749: LD_ADDR_EXP 19
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9757: LD_EXP 76
9761: PPUSH
9762: LD_INT 112
9764: PPUSH
9765: LD_INT 97
9767: PPUSH
9768: CALL_OW 111
// end ;
9772: LD_VAR 0 2
9776: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9777: LD_EXP 13
9781: PPUSH
9782: LD_INT 9
9784: PPUSH
9785: CALL_OW 308
9789: PUSH
9790: LD_EXP 14
9794: NOT
9795: AND
9796: IFFALSE 10650
9798: GO 9800
9800: DISABLE
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
9805: PPUSH
// begin vehicleForKurin = true ;
9806: LD_ADDR_EXP 14
9810: PUSH
9811: LD_INT 1
9813: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9814: LD_ADDR_VAR 0 2
9818: PUSH
9819: LD_EXP 69
9823: PPUSH
9824: LD_INT 25
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: CALL_OW 72
9838: PUSH
9839: LD_INT 1
9841: ARRAY
9842: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9843: LD_ADDR_VAR 0 3
9847: PUSH
9848: LD_EXP 69
9852: PPUSH
9853: LD_INT 25
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 72
9867: PUSH
9868: LD_INT 1
9870: ARRAY
9871: ST_TO_ADDR
// InGameOn ;
9872: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9876: LD_EXP 67
9880: PPUSH
9881: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9885: LD_EXP 13
9889: PPUSH
9890: LD_EXP 67
9894: PPUSH
9895: CALL_OW 250
9899: PPUSH
9900: LD_EXP 67
9904: PPUSH
9905: CALL_OW 251
9909: PPUSH
9910: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9914: LD_EXP 67
9918: PPUSH
9919: LD_STRING D10-Kur-1
9921: PPUSH
9922: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9933: LD_EXP 13
9937: PPUSH
9938: LD_EXP 67
9942: PPUSH
9943: CALL_OW 250
9947: PPUSH
9948: LD_EXP 67
9952: PPUSH
9953: CALL_OW 251
9957: PPUSH
9958: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9962: LD_EXP 13
9966: PPUSH
9967: LD_EXP 67
9971: PPUSH
9972: CALL_OW 296
9976: PUSH
9977: LD_INT 9
9979: LESS
9980: IFFALSE 9926
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9982: LD_EXP 13
9986: PPUSH
9987: CALL_OW 313
9991: PPUSH
9992: CALL_OW 121
// wait ( 0 0$1 ) ;
9996: LD_INT 35
9998: PPUSH
9999: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10003: LD_EXP 13
10007: PPUSH
10008: CALL_OW 256
10012: PUSH
10013: LD_INT 1000
10015: LESS
10016: IFFALSE 10048
// begin ComExitBuilding ( mech ) ;
10018: LD_VAR 0 3
10022: PPUSH
10023: CALL_OW 122
// wait ( 0 0$1 ) ;
10027: LD_INT 35
10029: PPUSH
10030: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_EXP 13
10043: PPUSH
10044: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10048: LD_EXP 13
10052: PPUSH
10053: CALL_OW 261
10057: PUSH
10058: LD_INT 90
10060: LESS
10061: IFFALSE 10096
// begin ComExitBuilding ( eng ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 71
10086: PPUSH
10087: LD_EXP 13
10091: PPUSH
10092: CALL 4664 0 3
// end ; repeat wait ( 0 0$1 ) ;
10096: LD_INT 35
10098: PPUSH
10099: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10103: LD_EXP 13
10107: PPUSH
10108: CALL_OW 256
10112: PUSH
10113: LD_INT 1000
10115: EQUAL
10116: PUSH
10117: LD_EXP 13
10121: PPUSH
10122: CALL_OW 261
10126: PUSH
10127: LD_INT 90
10129: GREATER
10130: AND
10131: IFFALSE 10096
// if UnitsInside ( firstVeh ) then
10133: LD_EXP 13
10137: PPUSH
10138: CALL_OW 313
10142: IFFALSE 10162
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10144: LD_EXP 13
10148: PPUSH
10149: CALL_OW 313
10153: PUSH
10154: LD_INT 1
10156: ARRAY
10157: PPUSH
10158: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: LD_INT 71
10169: PPUSH
10170: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10174: LD_EXP 13
10178: PPUSH
10179: LD_INT 6
10181: PPUSH
10182: CALL_OW 235
// if belkovReturn then
10186: LD_EXP 6
10190: IFFALSE 10276
// begin if IsInUnit ( Belkov ) then
10192: LD_EXP 64
10196: PPUSH
10197: CALL_OW 310
10201: IFFALSE 10212
// ComExitBuilding ( Belkov ) ;
10203: LD_EXP 64
10207: PPUSH
10208: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10219: LD_EXP 64
10223: PPUSH
10224: LD_EXP 13
10228: PPUSH
10229: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10233: LD_EXP 64
10237: PPUSH
10238: CALL_OW 310
10242: PUSH
10243: LD_EXP 13
10247: EQUAL
10248: IFFALSE 10212
// Say ( Belkov , D10-Bel-1 ) ;
10250: LD_EXP 64
10254: PPUSH
10255: LD_STRING D10-Bel-1
10257: PPUSH
10258: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10262: LD_EXP 67
10266: PPUSH
10267: LD_STRING D10-Kur-2
10269: PPUSH
10270: CALL_OW 88
// end else
10274: GO 10402
// begin if IsInUnit ( Belkov2 ) then
10276: LD_EXP 68
10280: PPUSH
10281: CALL_OW 310
10285: IFFALSE 10296
// ComExitBuilding ( Belkov2 ) ;
10287: LD_EXP 68
10291: PPUSH
10292: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10296: LD_INT 35
10298: PPUSH
10299: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10303: LD_EXP 68
10307: PPUSH
10308: LD_EXP 13
10312: PPUSH
10313: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10317: LD_EXP 68
10321: PPUSH
10322: CALL_OW 310
10326: PUSH
10327: LD_EXP 13
10331: EQUAL
10332: IFFALSE 10296
// meetBelkovBrother = true ;
10334: LD_ADDR_EXP 4
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10342: LD_EXP 68
10346: PPUSH
10347: LD_STRING D10-Bel-1
10349: PPUSH
10350: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10354: LD_EXP 62
10358: PPUSH
10359: LD_STRING D10-Bur-1
10361: PPUSH
10362: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10366: LD_EXP 68
10370: PPUSH
10371: LD_STRING D10-Bel-2
10373: PPUSH
10374: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10378: LD_EXP 62
10382: PPUSH
10383: LD_STRING D10-Bur-2
10385: PPUSH
10386: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10390: LD_EXP 67
10394: PPUSH
10395: LD_STRING D10-Kur-2a
10397: PPUSH
10398: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10402: LD_ADDR_EXP 74
10406: PUSH
10407: EMPTY
10408: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10409: LD_ADDR_EXP 75
10413: PUSH
10414: EMPTY
10415: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10416: LD_ADDR_EXP 22
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// CreateBelkovTeam ;
10424: CALL 6103 0 0
// ComExitBuilding ( belkovTeam ) ;
10428: LD_EXP 73
10432: PPUSH
10433: CALL_OW 122
// wait ( 0 0$1 ) ;
10437: LD_INT 35
10439: PPUSH
10440: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10444: LD_ADDR_EXP 72
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_INT 6
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 21
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 69
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10482: LD_ADDR_EXP 73
10486: PUSH
10487: LD_EXP 73
10491: PUSH
10492: LD_EXP 72
10496: ADD
10497: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10498: LD_EXP 73
10502: PPUSH
10503: LD_INT 147
10505: PPUSH
10506: LD_INT 102
10508: PPUSH
10509: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10513: LD_EXP 73
10517: PPUSH
10518: LD_INT 133
10520: PPUSH
10521: LD_INT 94
10523: PPUSH
10524: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10528: LD_EXP 73
10532: PPUSH
10533: LD_INT 123
10535: PPUSH
10536: LD_INT 74
10538: PPUSH
10539: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10543: LD_EXP 73
10547: PPUSH
10548: LD_INT 111
10550: PPUSH
10551: LD_INT 48
10553: PPUSH
10554: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10558: LD_EXP 73
10562: PPUSH
10563: LD_INT 122
10565: PPUSH
10566: LD_INT 43
10568: PPUSH
10569: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10573: LD_EXP 73
10577: PPUSH
10578: LD_INT 129
10580: PPUSH
10581: LD_INT 32
10583: PPUSH
10584: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10588: LD_EXP 73
10592: PPUSH
10593: LD_INT 132
10595: PPUSH
10596: LD_INT 22
10598: PPUSH
10599: CALL_OW 171
// wait ( 0 0$8 ) ;
10603: LD_INT 280
10605: PPUSH
10606: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10610: LD_EXP 67
10614: PPUSH
10615: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10619: LD_EXP 67
10623: PPUSH
10624: LD_STRING D10-Kur-2b
10626: PPUSH
10627: CALL_OW 88
// InGameOff ;
10631: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10635: LD_STRING M4
10637: PPUSH
10638: CALL_OW 337
// backToBeria1 = true ;
10642: LD_ADDR_EXP 15
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// end ;
10650: PPOPN 3
10652: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10653: LD_INT 9
10655: PPUSH
10656: LD_INT 22
10658: PUSH
10659: LD_INT 3
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 70
10684: PUSH
10685: LD_EXP 14
10689: AND
10690: IFFALSE 10707
10692: GO 10694
10694: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10695: LD_EXP 67
10699: PPUSH
10700: LD_STRING D1a-Kur-1a
10702: PPUSH
10703: CALL_OW 88
10707: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10708: LD_EXP 22
10712: IFFALSE 11115
10714: GO 10716
10716: DISABLE
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
// begin enable ;
10721: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10722: LD_INT 10
10724: PPUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 6
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 70
10739: PUSH
10740: LD_INT 0
10742: EQUAL
10743: IFFALSE 10747
// exit ;
10745: GO 11115
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10747: LD_ADDR_VAR 0 1
10751: PUSH
10752: LD_INT 10
10754: PPUSH
10755: LD_INT 22
10757: PUSH
10758: LD_INT 6
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: FOR_IN
10771: IFFALSE 11101
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 247
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: PUSH
10787: LD_VAR 0 1
10791: PUSH
10792: LD_EXP 64
10796: EQUAL
10797: NOT
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: LD_EXP 68
10808: EQUAL
10809: NOT
10810: AND
10811: PUSH
10812: LD_VAR 0 1
10816: PUSH
10817: LD_EXP 65
10821: EQUAL
10822: NOT
10823: AND
10824: AND
10825: IFFALSE 10866
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10827: LD_ADDR_EXP 23
10831: PUSH
10832: LD_EXP 23
10836: PUSH
10837: LD_INT 1
10839: PLUS
10840: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10841: LD_ADDR_EXP 74
10845: PUSH
10846: LD_EXP 74
10850: PUSH
10851: LD_VAR 0 1
10855: ADD
10856: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 64
// end ; if unit = Kirilenkova then
10866: LD_VAR 0 1
10870: PUSH
10871: LD_EXP 65
10875: EQUAL
10876: IFFALSE 10899
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10878: LD_EXP 65
10882: PPUSH
10883: LD_STRING 02_TmpKirilenkova
10885: PPUSH
10886: CALL_OW 38
// RemoveUnit ( unit ) ;
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 64
// end ; if unit = Belkov2 then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 68
10908: EQUAL
10909: IFFALSE 10932
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10911: LD_EXP 68
10915: PPUSH
10916: LD_STRING 02_TmpBelkov2
10918: PPUSH
10919: CALL_OW 38
// RemoveUnit ( unit ) ;
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10932: LD_VAR 0 1
10936: PPUSH
10937: CALL_OW 247
10941: PUSH
10942: LD_INT 2
10944: EQUAL
10945: IFFALSE 11099
// begin driver = UnitsInside ( unit ) ;
10947: LD_ADDR_VAR 0 2
10951: PUSH
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 313
10961: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10962: LD_VAR 0 2
10966: PUSH
10967: LD_INT 1
10969: ARRAY
10970: PUSH
10971: LD_EXP 64
10975: EQUAL
10976: IFFALSE 11001
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10978: LD_EXP 64
10982: PPUSH
10983: LD_STRING 02_TmpBelkov
10985: PPUSH
10986: CALL_OW 38
// RemoveUnit ( unit ) ;
10990: LD_VAR 0 1
10994: PPUSH
10995: CALL_OW 64
// end else
10999: GO 11022
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11001: LD_EXP 68
11005: PPUSH
11006: LD_STRING 02_TmpBelkov2
11008: PPUSH
11009: CALL_OW 38
// RemoveUnit ( unit ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11022: LD_ADDR_EXP 75
11026: PUSH
11027: LD_EXP 75
11031: PUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 265
11041: PUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 262
11051: PUSH
11052: LD_VAR 0 1
11056: PPUSH
11057: CALL_OW 263
11061: PUSH
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 264
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 261
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: ADD
11089: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 64
// end ; end ;
11099: GO 10770
11101: POP
11102: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11103: LD_EXP 74
11107: PPUSH
11108: LD_STRING 02_TmpBelkovTeam
11110: PPUSH
11111: CALL_OW 38
// end ;
11115: PPOPN 2
11117: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11118: LD_INT 8
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 71
11149: PUSH
11150: LD_INT 0
11152: EQUAL
11153: PUSH
11154: LD_EXP 15
11158: AND
11159: IFFALSE 11366
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11167: LD_ADDR_VAR 0 1
11171: PUSH
11172: LD_EXP 69
11176: PPUSH
11177: LD_INT 25
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 72
11191: ST_TO_ADDR
// backToBeria1 = false ;
11192: LD_ADDR_EXP 15
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// canExitBase = false ;
11200: LD_ADDR_EXP 19
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11208: LD_EXP 76
11212: PPUSH
11213: LD_STRING D11-Pla-1
11215: PPUSH
11216: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11220: LD_INT 22
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 1
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: PUSH
11249: LD_INT 1
11251: GREATER
11252: IFFALSE 11268
// Say ( Burlak , D11-Bur-1a ) else
11254: LD_EXP 62
11258: PPUSH
11259: LD_STRING D11-Bur-1a
11261: PPUSH
11262: CALL_OW 88
11266: GO 11280
// Say ( Burlak , D11-Bur-1 ) ;
11268: LD_EXP 62
11272: PPUSH
11273: LD_STRING D11-Bur-1
11275: PPUSH
11276: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11280: LD_STRING M5
11282: PPUSH
11283: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 26
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// construcMoreVehicles = true ;
11308: LD_ADDR_EXP 17
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// spawnCrates = true ;
11316: LD_ADDR_EXP 21
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_INT 2
11340: PPUSH
11341: LD_INT 159
11343: PPUSH
11344: LD_INT 112
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11354: LD_VAR 0 1
11358: PPUSH
11359: LD_INT 71
11361: PPUSH
11362: CALL_OW 180
// end ;
11366: PPOPN 1
11368: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11369: LD_EXP 18
11373: PUSH
11374: LD_INT 22
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 21
11386: PUSH
11387: LD_INT 1
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PPUSH
11398: CALL_OW 69
11402: GREATEREQUAL
11403: IFFALSE 12531
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// begin canRemoveBelkovUnits = false ;
11412: LD_ADDR_EXP 22
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// spawnCrates = false ;
11420: LD_ADDR_EXP 21
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11428: LD_INT 22
11430: PUSH
11431: LD_INT 3
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: LD_INT 21
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: PPUSH
11475: CALL_OW 141
// InGameOn ;
11479: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11483: LD_EXP 76
11487: PPUSH
11488: CALL_OW 85
// DialogueOn ;
11492: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11496: LD_EXP 62
11500: PPUSH
11501: LD_STRING D12-Bur-1
11503: PPUSH
11504: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11508: LD_EXP 76
11512: PPUSH
11513: LD_STRING D12-Pla-1
11515: PPUSH
11516: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11520: LD_EXP 62
11524: PPUSH
11525: LD_STRING D12-Bur-2
11527: PPUSH
11528: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11532: LD_EXP 76
11536: PPUSH
11537: LD_STRING D12-Pla-2
11539: PPUSH
11540: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11544: LD_EXP 62
11548: PPUSH
11549: LD_STRING D12-Bur-3
11551: PPUSH
11552: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11556: LD_EXP 76
11560: PPUSH
11561: LD_STRING D12-Pla-3
11563: PPUSH
11564: CALL_OW 88
// DialogueOff ;
11568: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11572: LD_INT 6
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 80
// PrepareAmerican ;
11588: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11592: CALL 1132 0 0
// if IsOK ( Belkov ) then
11596: LD_EXP 64
11600: PPUSH
11601: CALL_OW 302
11605: IFFALSE 11619
// tmpBelkov = Belkov else
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_EXP 64
11616: ST_TO_ADDR
11617: GO 11629
// tmpBelkov = Belkov2 ;
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: LD_EXP 68
11628: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11629: LD_EXP 72
11633: PPUSH
11634: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11638: LD_EXP 80
11642: PPUSH
11643: LD_STRING D13-Sol1-1
11645: PPUSH
11646: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11650: LD_VAR 0 1
11654: PPUSH
11655: LD_STRING D13-Bel-1
11657: PPUSH
11658: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11662: LD_EXP 67
11666: PPUSH
11667: LD_STRING D13-Kur-1
11669: PPUSH
11670: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_STRING D13-Bel-2
11681: PPUSH
11682: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11686: LD_EXP 73
11690: PPUSH
11691: LD_INT 121
11693: PPUSH
11694: LD_INT 29
11696: PPUSH
11697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11701: LD_INT 35
11703: PPUSH
11704: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11708: LD_EXP 72
11712: PPUSH
11713: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_EXP 73
11726: PPUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 56
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: PPUSH
11752: LD_EXP 72
11756: PPUSH
11757: CALL_OW 74
11761: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11762: LD_EXP 72
11766: PPUSH
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 296
11776: PUSH
11777: LD_INT 5
11779: LESS
11780: IFFALSE 11793
// ComStop ( kirovVehicle ) else
11782: LD_EXP 72
11786: PPUSH
11787: CALL_OW 141
11791: GO 11808
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11793: LD_EXP 73
11797: PPUSH
11798: LD_INT 121
11800: PPUSH
11801: LD_INT 29
11803: PPUSH
11804: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11808: LD_EXP 73
11812: PPUSH
11813: LD_EXP 80
11817: PPUSH
11818: CALL_OW 74
11822: PPUSH
11823: LD_EXP 80
11827: PPUSH
11828: CALL_OW 296
11832: PUSH
11833: LD_INT 5
11835: LESS
11836: IFFALSE 11701
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11838: LD_EXP 72
11842: PUSH
11843: LD_EXP 80
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 87
// ComWalk ( trapTeam ) ;
11856: LD_EXP 81
11860: PPUSH
11861: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11865: LD_EXP 81
11869: PPUSH
11870: LD_EXP 72
11874: PPUSH
11875: CALL_OW 179
// ComStop ( belkovTeam ) ;
11879: LD_EXP 73
11883: PPUSH
11884: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11888: LD_EXP 73
11892: PPUSH
11893: LD_EXP 80
11897: PPUSH
11898: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11902: LD_INT 25
11904: PPUSH
11905: LD_INT 22
11907: PUSH
11908: LD_INT 1
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 21
11917: PUSH
11918: LD_INT 1
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 70
11933: PPUSH
11934: LD_INT 111
11936: PPUSH
11937: LD_INT 13
11939: PPUSH
11940: CALL_OW 171
// music_class = music_combat ;
11944: LD_ADDR_OWVAR 72
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11952: LD_INT 35
11954: PPUSH
11955: CALL_OW 67
// DialogueOn ;
11959: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11963: LD_EXP 80
11967: PPUSH
11968: LD_STRING D14-Sol1-1
11970: PPUSH
11971: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_STRING D14-Bel-1
11982: PPUSH
11983: CALL_OW 88
// DialogueOff ;
11987: CALL_OW 7
// immortalBelkovTeam = true ;
11991: LD_ADDR_EXP 24
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11999: LD_INT 6
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: LD_INT 2
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12015: LD_EXP 73
12019: PPUSH
12020: LD_INT 107
12022: PPUSH
12023: LD_INT 5
12025: PPUSH
12026: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12030: LD_EXP 72
12034: PPUSH
12035: LD_INT 107
12037: PPUSH
12038: LD_INT 5
12040: PPUSH
12041: CALL_OW 111
// wait ( 0 0$2 ) ;
12045: LD_INT 70
12047: PPUSH
12048: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12052: LD_EXP 73
12056: PPUSH
12057: LD_INT 101
12059: PPUSH
12060: LD_INT 19
12062: PPUSH
12063: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12067: LD_EXP 72
12071: PPUSH
12072: LD_INT 101
12074: PPUSH
12075: LD_INT 19
12077: PPUSH
12078: CALL_OW 111
// wait ( 0 0$2 ) ;
12082: LD_INT 70
12084: PPUSH
12085: CALL_OW 67
// immortalVehLive = 400 ;
12089: LD_ADDR_EXP 25
12093: PUSH
12094: LD_INT 400
12096: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12097: LD_EXP 72
12101: PPUSH
12102: LD_INT 500
12104: PPUSH
12105: CALL_OW 234
// wait ( 0 0$3 ) ;
12109: LD_INT 105
12111: PPUSH
12112: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12116: LD_VAR 0 1
12120: PPUSH
12121: CALL_OW 121
// wait ( 0 0$1 ) ;
12125: LD_INT 35
12127: PPUSH
12128: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12132: LD_EXP 80
12136: PPUSH
12137: LD_EXP 72
12141: PPUSH
12142: CALL_OW 120
// AddComHold ( trapTeam ) ;
12146: LD_EXP 81
12150: PPUSH
12151: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12155: LD_EXP 73
12159: PPUSH
12160: LD_INT 88
12162: PPUSH
12163: LD_INT 18
12165: PPUSH
12166: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12170: LD_INT 35
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_INT 15
12193: PPUSH
12194: CALL_OW 308
12198: IFFALSE 12170
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12200: LD_ADDR_EXP 88
12204: PUSH
12205: LD_INT 22
12207: PUSH
12208: LD_INT 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 21
12217: PUSH
12218: LD_INT 2
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 69
12233: PUSH
12234: LD_INT 1
12236: ARRAY
12237: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12238: LD_INT 28
12240: PPUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 70
12269: PPUSH
12270: LD_INT 113
12272: PPUSH
12273: LD_INT 29
12275: PPUSH
12276: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12280: LD_EXP 88
12284: PPUSH
12285: LD_INT 118
12287: PPUSH
12288: LD_INT 25
12290: PPUSH
12291: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12295: LD_VAR 0 1
12299: PPUSH
12300: LD_STRING D14-Bel-1a
12302: PPUSH
12303: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12307: LD_EXP 67
12311: PPUSH
12312: LD_STRING D14-Kur-1
12314: PPUSH
12315: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12319: LD_VAR 0 1
12323: PPUSH
12324: LD_STRING D14-Bel-2
12326: PPUSH
12327: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12331: LD_EXP 67
12335: PPUSH
12336: LD_STRING D14-Kur-2
12338: PPUSH
12339: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12343: LD_EXP 76
12347: PPUSH
12348: CALL_OW 85
// wait ( 0 0$2 ) ;
12352: LD_INT 70
12354: PPUSH
12355: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12359: LD_EXP 62
12363: PPUSH
12364: LD_STRING D14a-Bur-1
12366: PPUSH
12367: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12371: LD_EXP 76
12375: PPUSH
12376: LD_STRING D14a-Pla-1
12378: PPUSH
12379: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12383: LD_EXP 62
12387: PPUSH
12388: LD_STRING D14a-Bur-2
12390: PPUSH
12391: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12395: LD_EXP 76
12399: PPUSH
12400: LD_STRING D14a-Pla-2
12402: PPUSH
12403: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12407: LD_EXP 62
12411: PPUSH
12412: LD_STRING D14a-Bur-3
12414: PPUSH
12415: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12419: LD_EXP 76
12423: PPUSH
12424: LD_STRING D14a-Pla-3
12426: PPUSH
12427: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12431: LD_EXP 62
12435: PPUSH
12436: LD_STRING D14a-Bur-4
12438: PPUSH
12439: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12443: LD_EXP 76
12447: PPUSH
12448: LD_STRING D14a-Pla-4
12450: PPUSH
12451: CALL_OW 88
// InGameOff ;
12455: CALL_OW 9
// immortalBelkovTeam = false ;
12459: LD_ADDR_EXP 24
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// activateAMAI = true ;
12467: LD_ADDR_EXP 27
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// canExitBase = true ;
12475: LD_ADDR_EXP 19
12479: PUSH
12480: LD_INT 1
12482: ST_TO_ADDR
// canExploreMap = true ;
12483: LD_ADDR_EXP 20
12487: PUSH
12488: LD_INT 1
12490: ST_TO_ADDR
// construcMoreVehicles = false ;
12491: LD_ADDR_EXP 17
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// activateBelkovAI = true ;
12499: LD_ADDR_EXP 28
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12507: LD_STRING M6
12509: PPUSH
12510: CALL_OW 337
// music_class = 0 ;
12514: LD_ADDR_OWVAR 72
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12522: LD_EXP 81
12526: PPUSH
12527: CALL_OW 139
// end ;
12531: PPOPN 2
12533: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12534: LD_EXP 88
12538: PPUSH
12539: LD_INT 118
12541: PPUSH
12542: LD_INT 25
12544: PPUSH
12545: CALL_OW 297
12549: PUSH
12550: LD_INT 6
12552: LESS
12553: IFFALSE 12648
12555: GO 12557
12557: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12558: LD_EXP 80
12562: PPUSH
12563: CALL_OW 121
// uc_side = 1 ;
12567: LD_ADDR_OWVAR 20
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// uc_nation = 1 ;
12575: LD_ADDR_OWVAR 21
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12583: LD_INT 0
12585: PPUSH
12586: LD_EXP 59
12590: PPUSH
12591: CALL_OW 383
// amMech = CreateHuman ;
12595: LD_ADDR_EXP 89
12599: PUSH
12600: CALL_OW 44
12604: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12605: LD_EXP 89
12609: PPUSH
12610: LD_INT 27
12612: PPUSH
12613: LD_INT 0
12615: PPUSH
12616: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12620: LD_EXP 89
12624: PPUSH
12625: LD_EXP 88
12629: PPUSH
12630: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12634: LD_EXP 89
12638: PPUSH
12639: LD_EXP 88
12643: PPUSH
12644: CALL_OW 180
// end ;
12648: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12649: LD_EXP 89
12653: PPUSH
12654: CALL_OW 302
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 2
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 50
12681: PUSH
12682: EMPTY
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: AND
12695: IFFALSE 12948
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin enable ;
12703: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_INT 3
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 2
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 69
12755: PPUSH
12756: LD_EXP 89
12760: PPUSH
12761: CALL_OW 74
12765: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12766: LD_VAR 0 1
12770: PPUSH
12771: LD_EXP 89
12775: PPUSH
12776: CALL_OW 296
12780: PUSH
12781: LD_INT 13
12783: LESS
12784: IFFALSE 12837
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12786: LD_EXP 89
12790: PPUSH
12791: LD_INT 22
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 50
12813: PUSH
12814: EMPTY
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 69
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: CALL_OW 120
12835: GO 12948
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12837: LD_INT 22
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 21
12849: PUSH
12850: LD_INT 2
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: EMPTY
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: CALL_OW 256
12881: PUSH
12882: LD_INT 1000
12884: EQUAL
12885: PUSH
12886: LD_EXP 89
12890: PPUSH
12891: CALL_OW 310
12895: NOT
12896: AND
12897: IFFALSE 12948
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12899: LD_EXP 89
12903: PPUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 2
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 50
12926: PUSH
12927: EMPTY
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PPUSH
12944: CALL_OW 120
// end ; end ;
12948: PPOPN 1
12950: END
// every 0 0$1 trigger immortalBelkovTeam do
12951: LD_EXP 24
12955: IFFALSE 13042
12957: GO 12959
12959: DISABLE
// begin enable ;
12960: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
12961: LD_EXP 73
12965: PPUSH
12966: LD_INT 21
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PPUSH
12976: CALL_OW 72
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
12988: LD_EXP 73
12992: PPUSH
12993: LD_INT 21
12995: PUSH
12996: LD_INT 2
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: CALL_OW 72
13007: IFFALSE 13042
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13009: LD_EXP 73
13013: PPUSH
13014: LD_INT 21
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 72
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_EXP 25
13037: PPUSH
13038: CALL_OW 234
// end ;
13042: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13043: LD_EXP 20
13047: PUSH
13048: LD_EXP 37
13052: NOT
13053: AND
13054: PUSH
13055: LD_EXP 61
13059: PUSH
13060: LD_INT 0
13062: GREATER
13063: AND
13064: IFFALSE 13084
13066: GO 13068
13068: DISABLE
// begin enable ;
13069: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13070: LD_ADDR_EXP 61
13074: PUSH
13075: LD_EXP 61
13079: PUSH
13080: LD_INT 35
13082: MINUS
13083: ST_TO_ADDR
// end ;
13084: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13085: LD_EXP 20
13089: IFFALSE 13173
13091: GO 13093
13093: DISABLE
13094: LD_INT 0
13096: PPUSH
13097: PPUSH
// begin tmp = trapTeam ;
13098: LD_ADDR_VAR 0 2
13102: PUSH
13103: LD_EXP 81
13107: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: LD_VAR 0 2
13117: PUSH
13118: LD_EXP 80
13122: DIFF
13123: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13124: LD_ADDR_VAR 0 1
13128: PUSH
13129: DOUBLE
13130: LD_INT 1
13132: DEC
13133: ST_TO_ADDR
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13171
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13148: LD_VAR 0 2
13152: PUSH
13153: LD_VAR 0 1
13157: ARRAY
13158: PPUSH
13159: LD_INT 87
13161: PPUSH
13162: LD_INT 18
13164: PPUSH
13165: CALL_OW 114
13169: GO 13145
13171: POP
13172: POP
// end ;
13173: PPOPN 2
13175: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13176: LD_EXP 61
13180: PUSH
13181: LD_INT 70
13183: LESS
13184: PUSH
13185: LD_EXP 81
13189: AND
13190: IFFALSE 13219
13192: GO 13194
13194: DISABLE
// begin enable ;
13195: ENABLE
// activateBelkovAI = false ;
13196: LD_ADDR_EXP 28
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13204: LD_EXP 73
13208: PPUSH
13209: LD_INT 120
13211: PPUSH
13212: LD_INT 28
13214: PPUSH
13215: CALL_OW 114
// end ;
13219: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13220: LD_EXP 29
13224: NOT
13225: PUSH
13226: LD_EXP 30
13230: NOT
13231: OR
13232: PUSH
13233: LD_EXP 20
13237: AND
13238: IFFALSE 13700
13240: GO 13242
13242: DISABLE
13243: LD_INT 0
13245: PPUSH
// begin enable ;
13246: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 1
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 21
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 30
13274: PUSH
13275: LD_INT 31
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 69
13291: PUSH
13292: FOR_IN
13293: IFFALSE 13698
// begin if See ( 3 , bunker ) then
13295: LD_INT 3
13297: PPUSH
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 292
13307: IFFALSE 13696
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13309: LD_VAR 0 1
13313: PUSH
13314: LD_EXP 82
13318: IN
13319: PUSH
13320: LD_EXP 29
13324: NOT
13325: AND
13326: PUSH
13327: LD_INT 18
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: NOT
13348: AND
13349: IFFALSE 13542
// begin sawLeftBunker = true ;
13351: LD_ADDR_EXP 29
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 85
// DialogueOn ;
13368: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13372: LD_EXP 62
13376: PPUSH
13377: LD_STRING D15-Bur-1
13379: PPUSH
13380: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13384: LD_EXP 63
13388: PPUSH
13389: CALL_OW 302
13393: PUSH
13394: LD_EXP 70
13398: PPUSH
13399: CALL_OW 302
13403: OR
13404: IFFALSE 13499
// begin if IsOK ( Gnyevko ) then
13406: LD_EXP 63
13410: PPUSH
13411: CALL_OW 302
13415: IFFALSE 13429
// Say ( Gnyevko , D15-Gny-1 ) ;
13417: LD_EXP 63
13421: PPUSH
13422: LD_STRING D15-Gny-1
13424: PPUSH
13425: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13429: LD_EXP 70
13433: PPUSH
13434: CALL_OW 302
13438: IFFALSE 13452
// Say ( Kovalyuk , D15-Kov-1 ) ;
13440: LD_EXP 70
13444: PPUSH
13445: LD_STRING D15-Kov-1
13447: PPUSH
13448: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13452: LD_EXP 62
13456: PPUSH
13457: LD_STRING D15-Bur-2
13459: PPUSH
13460: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13464: LD_EXP 70
13468: PPUSH
13469: CALL_OW 302
13473: IFFALSE 13487
// Say ( Kovalyuk , D15-Kov-2 ) ;
13475: LD_EXP 70
13479: PPUSH
13480: LD_STRING D15-Kov-2
13482: PPUSH
13483: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13487: LD_EXP 62
13491: PPUSH
13492: LD_STRING D15-Bur-3
13494: PPUSH
13495: CALL_OW 88
// end ; DialogueOff ;
13499: CALL_OW 7
// if raportForPlatonov = 2 then
13503: LD_EXP 39
13507: PUSH
13508: LD_INT 2
13510: EQUAL
13511: IFFALSE 13523
// raportForPlatonov = 1 else
13513: LD_ADDR_EXP 39
13517: PUSH
13518: LD_INT 1
13520: ST_TO_ADDR
13521: GO 13531
// raportForPlatonov = 3 ;
13523: LD_ADDR_EXP 39
13527: PUSH
13528: LD_INT 3
13530: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13531: LD_STRING M7
13533: PPUSH
13534: CALL_OW 337
// exit ;
13538: POP
13539: POP
13540: GO 13700
// end ; if bunker in rightBunkers and not sawRightBunker then
13542: LD_VAR 0 1
13546: PUSH
13547: LD_EXP 83
13551: IN
13552: PUSH
13553: LD_EXP 30
13557: NOT
13558: AND
13559: IFFALSE 13696
// begin sawRightBunker = true ;
13561: LD_ADDR_EXP 30
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13569: LD_VAR 0 1
13573: PPUSH
13574: CALL_OW 85
// DialogueOn ;
13578: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13582: LD_EXP 70
13586: PPUSH
13587: CALL_OW 302
13591: IFFALSE 13660
// begin if sawLeftBunker then
13593: LD_EXP 29
13597: IFFALSE 13613
// Say ( Kovalyuk , D16-Kov-1a ) else
13599: LD_EXP 70
13603: PPUSH
13604: LD_STRING D16-Kov-1a
13606: PPUSH
13607: CALL_OW 88
13611: GO 13625
// Say ( Kovalyuk , D16-Kov-1 ) ;
13613: LD_EXP 70
13617: PPUSH
13618: LD_STRING D16-Kov-1
13620: PPUSH
13621: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13625: LD_EXP 62
13629: PPUSH
13630: LD_STRING D16-Bur-1
13632: PPUSH
13633: CALL_OW 88
// if IsOK ( Gnyevko ) then
13637: LD_EXP 63
13641: PPUSH
13642: CALL_OW 302
13646: IFFALSE 13660
// Say ( Gnyevko , D16-Gny-1 ) ;
13648: LD_EXP 63
13652: PPUSH
13653: LD_STRING D16-Gny-1
13655: PPUSH
13656: CALL_OW 88
// end ; DialogueOff ;
13660: CALL_OW 7
// if raportForPlatonov = 3 then
13664: LD_EXP 39
13668: PUSH
13669: LD_INT 3
13671: EQUAL
13672: IFFALSE 13684
// raportForPlatonov = 1 else
13674: LD_ADDR_EXP 39
13678: PUSH
13679: LD_INT 1
13681: ST_TO_ADDR
13682: GO 13692
// raportForPlatonov = 2 ;
13684: LD_ADDR_EXP 39
13688: PUSH
13689: LD_INT 2
13691: ST_TO_ADDR
// exit ;
13692: POP
13693: POP
13694: GO 13700
// end ; end ; end ;
13696: GO 13292
13698: POP
13699: POP
// end ;
13700: PPOPN 1
13702: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13703: LD_EXP 32
13707: NOT
13708: PUSH
13709: LD_EXP 83
13713: AND
13714: PUSH
13715: LD_EXP 20
13719: AND
13720: PUSH
13721: LD_EXP 70
13725: PPUSH
13726: CALL_OW 302
13730: PUSH
13731: LD_EXP 63
13735: PPUSH
13736: CALL_OW 302
13740: OR
13741: AND
13742: IFFALSE 13930
13744: GO 13746
13746: DISABLE
13747: LD_INT 0
13749: PPUSH
// begin enable ;
13750: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13751: LD_ADDR_VAR 0 1
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_INT 3
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 2
13768: PUSH
13769: LD_INT 21
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: FOR_IN
13804: IFFALSE 13928
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 320
13815: PUSH
13816: LD_EXP 83
13820: PUSH
13821: LD_INT 1
13823: ARRAY
13824: EQUAL
13825: PUSH
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 320
13835: PUSH
13836: LD_EXP 83
13840: PUSH
13841: LD_INT 2
13843: ARRAY
13844: EQUAL
13845: OR
13846: IFFALSE 13926
// begin dialogAttackRightBunkers = true ;
13848: LD_ADDR_EXP 32
13852: PUSH
13853: LD_INT 1
13855: ST_TO_ADDR
// DialogueOn ;
13856: CALL_OW 6
// if IsOK ( Gnyevko ) then
13860: LD_EXP 63
13864: PPUSH
13865: CALL_OW 302
13869: IFFALSE 13883
// Say ( Gnyevko , D16A-Gny-1 ) ;
13871: LD_EXP 63
13875: PPUSH
13876: LD_STRING D16A-Gny-1
13878: PPUSH
13879: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13883: LD_EXP 70
13887: PPUSH
13888: CALL_OW 302
13892: IFFALSE 13906
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13894: LD_EXP 70
13898: PPUSH
13899: LD_STRING D16A-Kov-1
13901: PPUSH
13902: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13906: LD_EXP 62
13910: PPUSH
13911: LD_STRING D16A-Bur-1
13913: PPUSH
13914: CALL_OW 88
// DialogueOff ;
13918: CALL_OW 7
// exit ;
13922: POP
13923: POP
13924: GO 13930
// end ; end ;
13926: GO 13803
13928: POP
13929: POP
// end ;
13930: PPOPN 1
13932: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
13933: LD_INT 18
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: PPUSH
13949: CALL_OW 70
13953: PUSH
13954: LD_EXP 29
13958: NOT
13959: AND
13960: IFFALSE 14343
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
// begin sawLeftBunker = true ;
13968: LD_ADDR_EXP 29
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// if playerGetSupport then
13976: LD_EXP 34
13980: IFFALSE 13999
// decsToChoose = [ 1 , 3 ] else
13982: LD_ADDR_VAR 0 1
13986: PUSH
13987: LD_INT 1
13989: PUSH
13990: LD_INT 3
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
13997: GO 14018
// decsToChoose = [ 1 , 2 , 3 ] ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: LD_INT 2
14009: PUSH
14010: LD_INT 3
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14018: LD_STRING QAttackBw
14020: PPUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 98
14030: PUSH
14031: LD_INT 1
14033: DOUBLE
14034: EQUAL
14035: IFTRUE 14039
14037: GO 14132
14039: POP
// begin DialogueOn ;
14040: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14044: LD_EXP 62
14048: PPUSH
14049: LD_STRING D17-Bur-1
14051: PPUSH
14052: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14056: LD_EXP 76
14060: PPUSH
14061: LD_STRING D17-Pla-1
14063: PPUSH
14064: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14068: LD_EXP 62
14072: PPUSH
14073: LD_STRING D17-Bur-2
14075: PPUSH
14076: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14080: LD_EXP 76
14084: PPUSH
14085: LD_STRING D17-Pla-2
14087: PPUSH
14088: CALL_OW 94
// DialogueOff ;
14092: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14096: LD_EXP 42
14100: PUSH
14101: LD_INT 2
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: IN
14111: NOT
14112: IFFALSE 14130
// begin initiative = 1 ;
14114: LD_ADDR_EXP 42
14118: PUSH
14119: LD_INT 1
14121: ST_TO_ADDR
// platonovOpinion = 2 ;
14122: LD_ADDR_EXP 5
14126: PUSH
14127: LD_INT 2
14129: ST_TO_ADDR
// end ; end ; 2 :
14130: GO 14273
14132: LD_INT 2
14134: DOUBLE
14135: EQUAL
14136: IFTRUE 14140
14138: GO 14245
14140: POP
// begin DialogueOn ;
14141: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14145: LD_EXP 62
14149: PPUSH
14150: LD_STRING D18-Bur-1
14152: PPUSH
14153: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14157: LD_EXP 76
14161: PPUSH
14162: LD_STRING D18-Pla-1
14164: PPUSH
14165: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14169: LD_EXP 62
14173: PPUSH
14174: LD_STRING D18-Bur-2
14176: PPUSH
14177: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14181: LD_EXP 76
14185: PPUSH
14186: LD_STRING D18-Pla-2
14188: PPUSH
14189: CALL_OW 94
// DialogueOff ;
14193: CALL_OW 7
// playerGetSupport = true ;
14197: LD_ADDR_EXP 34
14201: PUSH
14202: LD_INT 1
14204: ST_TO_ADDR
// medalForGetSupport = false ;
14205: LD_ADDR_EXP 40
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// PlatonovSendSupport ;
14213: CALL 6559 0 0
// if initiative <> 3 then
14217: LD_EXP 42
14221: PUSH
14222: LD_INT 3
14224: NONEQUAL
14225: IFFALSE 14243
// begin initiative = 1 ;
14227: LD_ADDR_EXP 42
14231: PUSH
14232: LD_INT 1
14234: ST_TO_ADDR
// platonovOpinion = 2 ;
14235: LD_ADDR_EXP 5
14239: PUSH
14240: LD_INT 2
14242: ST_TO_ADDR
// end ; end ; 3 :
14243: GO 14273
14245: LD_INT 3
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14272
14253: POP
// begin initiative = 3 ;
14254: LD_ADDR_EXP 42
14258: PUSH
14259: LD_INT 3
14261: ST_TO_ADDR
// platonovOpinion = 0 ;
14262: LD_ADDR_EXP 5
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ; end ;
14270: GO 14273
14272: POP
// if IsOK ( Gnyevko ) then
14273: LD_EXP 63
14277: PPUSH
14278: CALL_OW 302
14282: IFFALSE 14308
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14284: LD_EXP 63
14288: PPUSH
14289: LD_STRING D19-Gny-1
14291: PPUSH
14292: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14296: LD_EXP 62
14300: PPUSH
14301: LD_STRING D19-Bur-1
14303: PPUSH
14304: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14308: LD_EXP 70
14312: PPUSH
14313: CALL_OW 302
14317: IFFALSE 14343
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14319: LD_EXP 70
14323: PPUSH
14324: LD_STRING D19-Kov-1
14326: PPUSH
14327: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14331: LD_EXP 62
14335: PPUSH
14336: LD_STRING D19-Bur-2
14338: PPUSH
14339: CALL_OW 88
// end ; end ;
14343: PPOPN 1
14345: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14346: LD_EXP 31
14350: NOT
14351: PUSH
14352: LD_EXP 82
14356: AND
14357: PUSH
14358: LD_EXP 20
14362: AND
14363: PUSH
14364: LD_INT 18
14366: PPUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: PPUSH
14380: CALL_OW 70
14384: PUSH
14385: LD_INT 0
14387: EQUAL
14388: AND
14389: PUSH
14390: LD_EXP 70
14394: PPUSH
14395: CALL_OW 302
14399: PUSH
14400: LD_EXP 63
14404: PPUSH
14405: CALL_OW 302
14409: OR
14410: AND
14411: IFFALSE 14599
14413: GO 14415
14415: DISABLE
14416: LD_INT 0
14418: PPUSH
// begin enable ;
14419: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 3
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 21
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 69
14471: PUSH
14472: FOR_IN
14473: IFFALSE 14597
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 320
14484: PUSH
14485: LD_EXP 82
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 320
14504: PUSH
14505: LD_EXP 82
14509: PUSH
14510: LD_INT 2
14512: ARRAY
14513: EQUAL
14514: OR
14515: IFFALSE 14595
// begin dialogAttackLeftBunkers = true ;
14517: LD_ADDR_EXP 31
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// DialogueOn ;
14525: CALL_OW 6
// if IsOK ( Gnyevko ) then
14529: LD_EXP 63
14533: PPUSH
14534: CALL_OW 302
14538: IFFALSE 14552
// Say ( Gnyevko , D19A-Gny-1 ) ;
14540: LD_EXP 63
14544: PPUSH
14545: LD_STRING D19A-Gny-1
14547: PPUSH
14548: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14552: LD_EXP 70
14556: PPUSH
14557: CALL_OW 302
14561: IFFALSE 14575
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14563: LD_EXP 70
14567: PPUSH
14568: LD_STRING D19A-Kov-1
14570: PPUSH
14571: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14575: LD_EXP 62
14579: PPUSH
14580: LD_STRING D16A-Bur-1
14582: PPUSH
14583: CALL_OW 88
// DialogueOff ;
14587: CALL_OW 7
// exit ;
14591: POP
14592: POP
14593: GO 14599
// end ; end ;
14595: GO 14472
14597: POP
14598: POP
// end ;
14599: PPOPN 1
14601: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14602: LD_EXP 82
14606: NOT
14607: PUSH
14608: LD_INT 17
14610: PPUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 21
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 50
14643: PUSH
14644: EMPTY
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PPUSH
14653: CALL_OW 70
14657: PUSH
14658: LD_INT 0
14660: EQUAL
14661: OR
14662: PUSH
14663: LD_EXP 20
14667: AND
14668: IFFALSE 14719
14670: GO 14672
14672: DISABLE
// begin leftBunkers = [ ] ;
14673: LD_ADDR_EXP 82
14677: PUSH
14678: EMPTY
14679: ST_TO_ADDR
// DialogueOn ;
14680: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14684: LD_EXP 62
14688: PPUSH
14689: LD_STRING D20-Bur-1
14691: PPUSH
14692: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14696: LD_EXP 76
14700: PPUSH
14701: LD_STRING D20-Pla-1
14703: PPUSH
14704: CALL_OW 88
// DialogueOff ;
14708: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14712: LD_STRING M8
14714: PPUSH
14715: CALL_OW 337
// end ;
14719: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14720: LD_EXP 83
14724: NOT
14725: PUSH
14726: LD_INT 16
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 21
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 30
14751: PUSH
14752: LD_INT 31
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: PUSH
14776: LD_INT 0
14778: EQUAL
14779: OR
14780: PUSH
14781: LD_EXP 20
14785: AND
14786: IFFALSE 14830
14788: GO 14790
14790: DISABLE
// begin rightBunkers = [ ] ;
14791: LD_ADDR_EXP 83
14795: PUSH
14796: EMPTY
14797: ST_TO_ADDR
// DialogueOn ;
14798: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14802: LD_EXP 62
14806: PPUSH
14807: LD_STRING D20a-Bur-1
14809: PPUSH
14810: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14814: LD_EXP 76
14818: PPUSH
14819: LD_STRING D20a-Pla-1
14821: PPUSH
14822: CALL_OW 88
// DialogueOff ;
14826: CALL_OW 7
// end ;
14830: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14831: LD_EXP 35
14835: NOT
14836: PUSH
14837: LD_EXP 73
14841: AND
14842: IFFALSE 15337
14844: GO 14846
14846: DISABLE
14847: LD_INT 0
14849: PPUSH
14850: PPUSH
14851: PPUSH
// begin enable ;
14852: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14853: LD_ADDR_VAR 0 1
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_INT 3
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 21
14883: PUSH
14884: LD_INT 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: PUSH
14905: FOR_IN
14906: IFFALSE 15335
// for trapUnit in trapTeam do
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_EXP 81
14917: PUSH
14918: FOR_IN
14919: IFFALSE 15331
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
14921: LD_VAR 0 1
14925: PPUSH
14926: LD_VAR 0 2
14930: PPUSH
14931: CALL_OW 296
14935: PUSH
14936: LD_INT 16
14938: LESS
14939: IFFALSE 15329
// begin saveBelkovDecision = true ;
14941: LD_ADDR_EXP 35
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// if playerGetSupport then
14949: LD_EXP 34
14953: IFFALSE 14972
// decsToChoose = [ 1 , 3 ] else
14955: LD_ADDR_VAR 0 3
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
14970: GO 14991
// decsToChoose = [ 1 , 2 , 3 ] ;
14972: LD_ADDR_VAR 0 3
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
14991: LD_STRING QAttackAm
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: CALL_OW 98
15003: PUSH
15004: LD_INT 1
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15081
15012: POP
// begin DialogueOn ;
15013: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15017: LD_EXP 62
15021: PPUSH
15022: LD_STRING D21-Bur-1
15024: PPUSH
15025: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15029: LD_EXP 76
15033: PPUSH
15034: LD_STRING D21-Pla-1
15036: PPUSH
15037: CALL_OW 94
// DialogueOff ;
15041: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15045: LD_EXP 42
15049: PUSH
15050: LD_INT 2
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: IN
15060: NOT
15061: IFFALSE 15079
// begin initiative = 1 ;
15063: LD_ADDR_EXP 42
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// platonovOpinion = 2 ;
15071: LD_ADDR_EXP 5
15075: PUSH
15076: LD_INT 2
15078: ST_TO_ADDR
// end ; end ; 2 :
15079: GO 15273
15081: LD_INT 2
15083: DOUBLE
15084: EQUAL
15085: IFTRUE 15089
15087: GO 15245
15089: POP
// begin DialogueOn ;
15090: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15094: LD_EXP 62
15098: PPUSH
15099: LD_STRING D22-Bur-1
15101: PPUSH
15102: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15106: LD_EXP 34
15110: PUSH
15111: LD_EXP 82
15115: PUSH
15116: LD_INT 0
15118: EQUAL
15119: PUSH
15120: LD_EXP 83
15124: PUSH
15125: LD_INT 0
15127: EQUAL
15128: OR
15129: AND
15130: IFFALSE 15144
// Say ( Platonov , D22-Pla-1b ) ;
15132: LD_EXP 76
15136: PPUSH
15137: LD_STRING D22-Pla-1b
15139: PPUSH
15140: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15144: LD_EXP 34
15148: PUSH
15149: LD_EXP 82
15153: PUSH
15154: LD_EXP 83
15158: OR
15159: AND
15160: IFFALSE 15174
// Say ( Platonov , D22-Pla-1a ) ;
15162: LD_EXP 76
15166: PPUSH
15167: LD_STRING D22-Pla-1a
15169: PPUSH
15170: CALL_OW 88
// if not playerGetSupport then
15174: LD_EXP 34
15178: NOT
15179: IFFALSE 15213
// begin Say ( Platonov , D22-Pla-1 ) ;
15181: LD_EXP 76
15185: PPUSH
15186: LD_STRING D22-Pla-1
15188: PPUSH
15189: CALL_OW 88
// playerGetSupport = true ;
15193: LD_ADDR_EXP 34
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// medalForGetSupport = false ;
15201: LD_ADDR_EXP 40
15205: PUSH
15206: LD_INT 0
15208: ST_TO_ADDR
// PlatonovSendSupport ;
15209: CALL 6559 0 0
// end ; DialogueOff ;
15213: CALL_OW 7
// if initiative <> 3 then
15217: LD_EXP 42
15221: PUSH
15222: LD_INT 3
15224: NONEQUAL
15225: IFFALSE 15243
// begin initiative = 2 ;
15227: LD_ADDR_EXP 42
15231: PUSH
15232: LD_INT 2
15234: ST_TO_ADDR
// platonovOpinion = 1 ;
15235: LD_ADDR_EXP 5
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// end ; end ; 3 :
15243: GO 15273
15245: LD_INT 3
15247: DOUBLE
15248: EQUAL
15249: IFTRUE 15253
15251: GO 15272
15253: POP
// begin initiative = 3 ;
15254: LD_ADDR_EXP 42
15258: PUSH
15259: LD_INT 3
15261: ST_TO_ADDR
// platonovOpinion = 0 ;
15262: LD_ADDR_EXP 5
15266: PUSH
15267: LD_INT 0
15269: ST_TO_ADDR
// end ; end ;
15270: GO 15273
15272: POP
// if IsOK ( Gnyevko ) then
15273: LD_EXP 63
15277: PPUSH
15278: CALL_OW 302
15282: IFFALSE 15308
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15284: LD_EXP 63
15288: PPUSH
15289: LD_STRING D23-Gny-1
15291: PPUSH
15292: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15296: LD_EXP 62
15300: PPUSH
15301: LD_STRING D23-Bur-1
15303: PPUSH
15304: CALL_OW 88
// end ; saveBelkovObjective = true ;
15308: LD_ADDR_EXP 36
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15316: LD_STRING M9
15318: PPUSH
15319: CALL_OW 337
// exit ;
15323: POP
15324: POP
15325: POP
15326: POP
15327: GO 15337
// end ;
15329: GO 14918
15331: POP
15332: POP
15333: GO 14905
15335: POP
15336: POP
// end ;
15337: PPOPN 3
15339: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15340: LD_EXP 20
15344: PUSH
15345: LD_EXP 81
15349: NOT
15350: AND
15351: PUSH
15352: LD_EXP 37
15356: NOT
15357: AND
15358: IFFALSE 15398
15360: GO 15362
15362: DISABLE
// begin belkovSaved = true ;
15363: LD_ADDR_EXP 37
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// activateBelkovAI = false ;
15371: LD_ADDR_EXP 28
15375: PUSH
15376: LD_INT 0
15378: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15379: LD_EXP 73
15383: PPUSH
15384: LD_INT 3
15386: PPUSH
15387: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15391: LD_STRING M9a
15393: PPUSH
15394: CALL_OW 337
// end ;
15398: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15399: LD_EXP 35
15403: PUSH
15404: LD_EXP 64
15408: PPUSH
15409: CALL_OW 301
15413: PUSH
15414: LD_EXP 68
15418: PPUSH
15419: CALL_OW 301
15423: PUSH
15424: LD_EXP 64
15428: PPUSH
15429: CALL_OW 255
15433: PUSH
15434: LD_INT 6
15436: EQUAL
15437: PUSH
15438: LD_EXP 68
15442: PPUSH
15443: CALL_OW 255
15447: PUSH
15448: LD_INT 6
15450: EQUAL
15451: OR
15452: AND
15453: OR
15454: AND
15455: IFFALSE 15475
15457: GO 15459
15459: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15460: LD_STRING M9a
15462: PPUSH
15463: CALL_OW 337
// saveBelkovObjective = false ;
15467: LD_ADDR_EXP 36
15471: PUSH
15472: LD_INT 0
15474: ST_TO_ADDR
// end ;
15475: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15476: LD_EXP 37
15480: PUSH
15481: LD_EXP 62
15485: PPUSH
15486: LD_EXP 64
15490: PPUSH
15491: CALL_OW 296
15495: PUSH
15496: LD_INT 14
15498: LESS
15499: PUSH
15500: LD_EXP 6
15504: AND
15505: PUSH
15506: LD_EXP 62
15510: PPUSH
15511: LD_EXP 68
15515: PPUSH
15516: CALL_OW 296
15520: PUSH
15521: LD_INT 14
15523: LESS
15524: PUSH
15525: LD_EXP 6
15529: NOT
15530: AND
15531: OR
15532: AND
15533: IFFALSE 15829
15535: GO 15537
15537: DISABLE
// begin InGameOn ;
15538: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15542: LD_EXP 64
15546: PPUSH
15547: CALL_OW 302
15551: PUSH
15552: LD_EXP 6
15556: AND
15557: IFFALSE 15653
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15559: LD_EXP 62
15563: PUSH
15564: LD_EXP 64
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15577: LD_EXP 62
15581: PPUSH
15582: LD_EXP 64
15586: PPUSH
15587: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15591: LD_EXP 64
15595: PPUSH
15596: LD_EXP 62
15600: PPUSH
15601: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15605: LD_EXP 64
15609: PPUSH
15610: LD_STRING D24-Bel-1
15612: PPUSH
15613: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15617: LD_EXP 62
15621: PPUSH
15622: LD_STRING D24-Bur-1
15624: PPUSH
15625: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15629: LD_EXP 64
15633: PPUSH
15634: LD_STRING D24-Bel-2
15636: PPUSH
15637: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15641: LD_EXP 62
15645: PPUSH
15646: LD_STRING D24-Bur-2
15648: PPUSH
15649: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15653: LD_EXP 68
15657: PPUSH
15658: CALL_OW 302
15662: PUSH
15663: LD_EXP 6
15667: NOT
15668: AND
15669: IFFALSE 15777
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15671: LD_EXP 62
15675: PUSH
15676: LD_EXP 68
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15689: LD_EXP 62
15693: PPUSH
15694: LD_EXP 68
15698: PPUSH
15699: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15703: LD_EXP 68
15707: PPUSH
15708: LD_EXP 62
15712: PPUSH
15713: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15717: LD_EXP 68
15721: PPUSH
15722: LD_STRING D24-Bel-1
15724: PPUSH
15725: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15729: LD_EXP 62
15733: PPUSH
15734: LD_STRING D24-Bur-1
15736: PPUSH
15737: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15741: LD_EXP 62
15745: PPUSH
15746: LD_STRING D24-Bur-1a
15748: PPUSH
15749: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15753: LD_EXP 68
15757: PPUSH
15758: LD_STRING D24-Bel-2
15760: PPUSH
15761: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15765: LD_EXP 62
15769: PPUSH
15770: LD_STRING D24-Bur-2
15772: PPUSH
15773: CALL_OW 88
// end ; if captureBelkovVehicle then
15777: LD_EXP 38
15781: IFFALSE 15795
// Say ( Burlak , D24-Bur-2a ) ;
15783: LD_EXP 62
15787: PPUSH
15788: LD_STRING D24-Bur-2a
15790: PPUSH
15791: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15795: LD_EXP 76
15799: PPUSH
15800: LD_STRING D24-Pla-2
15802: PPUSH
15803: CALL_OW 94
// if leftBunkers then
15807: LD_EXP 82
15811: IFFALSE 15825
// SayRadio ( Platonov , D24-Pla-2a ) ;
15813: LD_EXP 76
15817: PPUSH
15818: LD_STRING D24-Pla-2a
15820: PPUSH
15821: CALL_OW 94
// InGameOff ;
15825: CALL_OW 9
// end ;
15829: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15830: LD_INT 22
15832: PPUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 70
15861: PUSH
15862: LD_EXP 70
15866: PPUSH
15867: CALL_OW 302
15871: PUSH
15872: LD_EXP 63
15876: PPUSH
15877: CALL_OW 302
15881: OR
15882: AND
15883: IFFALSE 15966
15885: GO 15887
15887: DISABLE
// begin DialogueOn ;
15888: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15892: LD_EXP 62
15896: PPUSH
15897: LD_STRING D26-Bur-1
15899: PPUSH
15900: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15904: LD_EXP 70
15908: PPUSH
15909: CALL_OW 302
15913: IFFALSE 15927
// Say ( Kovalyuk , D26-Kov-1 ) ;
15915: LD_EXP 70
15919: PPUSH
15920: LD_STRING D26-Kov-1
15922: PPUSH
15923: CALL_OW 88
// if IsOk ( Gnyevko ) then
15927: LD_EXP 63
15931: PPUSH
15932: CALL_OW 302
15936: IFFALSE 15950
// Say ( Gnyevko , D26-Gny-1 ) ;
15938: LD_EXP 63
15942: PPUSH
15943: LD_STRING D26-Gny-1
15945: PPUSH
15946: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
15950: LD_EXP 62
15954: PPUSH
15955: LD_STRING D26-Bur-2
15957: PPUSH
15958: CALL_OW 88
// DialogueOff ;
15962: CALL_OW 7
// end ;
15966: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
15967: LD_EXP 20
15971: PUSH
15972: LD_EXP 62
15976: PPUSH
15977: LD_INT 8
15979: PPUSH
15980: CALL_OW 308
15984: NOT
15985: PUSH
15986: LD_EXP 62
15990: PPUSH
15991: CALL_OW 310
15995: PPUSH
15996: CALL_OW 310
16000: PPUSH
16001: LD_INT 8
16003: PPUSH
16004: CALL_OW 308
16008: NOT
16009: AND
16010: AND
16011: PUSH
16012: LD_EXP 39
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: EQUAL
16021: AND
16022: IFFALSE 16036
16024: GO 16026
16026: DISABLE
// begin enable ;
16027: ENABLE
// raportForPlatonov = 0 ;
16028: LD_ADDR_EXP 39
16032: PUSH
16033: LD_INT 0
16035: ST_TO_ADDR
// end ;
16036: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16037: LD_EXP 20
16041: PUSH
16042: LD_EXP 39
16046: PUSH
16047: LD_INT 0
16049: GREATEREQUAL
16050: AND
16051: PUSH
16052: LD_EXP 16
16056: NOT
16057: AND
16058: PUSH
16059: LD_EXP 62
16063: PPUSH
16064: LD_INT 8
16066: PPUSH
16067: CALL_OW 308
16071: PUSH
16072: LD_EXP 62
16076: PPUSH
16077: CALL_OW 310
16081: PPUSH
16082: CALL_OW 310
16086: PPUSH
16087: LD_INT 8
16089: PPUSH
16090: CALL_OW 308
16094: PUSH
16095: LD_EXP 16
16099: NOT
16100: AND
16101: OR
16102: AND
16103: IFFALSE 16394
16105: GO 16107
16107: DISABLE
// begin enable ;
16108: ENABLE
// DialogueOn ;
16109: CALL_OW 6
// case raportForPlatonov of 0 :
16113: LD_EXP 39
16117: PUSH
16118: LD_INT 0
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16153
16126: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16127: LD_EXP 76
16131: PPUSH
16132: LD_STRING D25a-Pla-1
16134: PPUSH
16135: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16139: LD_EXP 62
16143: PPUSH
16144: LD_STRING D25a-Bur-1
16146: PPUSH
16147: CALL_OW 88
// end ; 1 :
16151: GO 16369
16153: LD_INT 1
16155: DOUBLE
16156: EQUAL
16157: IFTRUE 16161
16159: GO 16224
16161: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16162: LD_EXP 76
16166: PPUSH
16167: LD_STRING D25-Pla-1
16169: PPUSH
16170: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16174: LD_EXP 62
16178: PPUSH
16179: LD_STRING D25-Bur-1
16181: PPUSH
16182: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16186: LD_EXP 62
16190: PPUSH
16191: LD_STRING D25b-Bur-1
16193: PPUSH
16194: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16198: LD_EXP 76
16202: PPUSH
16203: LD_STRING D25b-Pla-1
16205: PPUSH
16206: CALL_OW 88
// playerGetSupport = true ;
16210: LD_ADDR_EXP 34
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// PlatonovSendSupport ;
16218: CALL 6559 0 0
// end ; 2 :
16222: GO 16369
16224: LD_INT 2
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16278
16232: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16233: LD_EXP 76
16237: PPUSH
16238: LD_STRING D25-Pla-1
16240: PPUSH
16241: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16245: LD_EXP 62
16249: PPUSH
16250: LD_STRING D25-Bur-1a
16252: PPUSH
16253: CALL_OW 88
// if not sawLeftBunker then
16257: LD_EXP 29
16261: NOT
16262: IFFALSE 16276
// Say ( Platonov , D25c-Pla-1 ) ;
16264: LD_EXP 76
16268: PPUSH
16269: LD_STRING D25c-Pla-1
16271: PPUSH
16272: CALL_OW 88
// end ; 3 :
16276: GO 16369
16278: LD_INT 3
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16368
16286: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16287: LD_EXP 76
16291: PPUSH
16292: LD_STRING D25-Pla-1
16294: PPUSH
16295: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16299: LD_EXP 62
16303: PPUSH
16304: LD_STRING D25a-Bur-1b
16306: PPUSH
16307: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16311: LD_EXP 62
16315: PPUSH
16316: LD_STRING D25b-Bur-1
16318: PPUSH
16319: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16323: LD_EXP 76
16327: PPUSH
16328: LD_STRING D25b-Pla-1
16330: PPUSH
16331: CALL_OW 88
// playerGetSupport = true ;
16335: LD_ADDR_EXP 34
16339: PUSH
16340: LD_INT 1
16342: ST_TO_ADDR
// PlatonovSendSupport ;
16343: CALL 6559 0 0
// if not sawRightBunker then
16347: LD_EXP 30
16351: NOT
16352: IFFALSE 16366
// Say ( Platonov , D25c-Pla-1 ) ;
16354: LD_EXP 76
16358: PPUSH
16359: LD_STRING D25c-Pla-1
16361: PPUSH
16362: CALL_OW 88
// end ; end ;
16366: GO 16369
16368: POP
// raportForPlatonov = - 1 ;
16369: LD_ADDR_EXP 39
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16378: LD_EXP 76
16382: PPUSH
16383: LD_STRING D25c-Pla-1a
16385: PPUSH
16386: CALL_OW 88
// DialogueOff ;
16390: CALL_OW 7
// end ;
16394: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16395: LD_INT 19
16397: PPUSH
16398: LD_INT 22
16400: PUSH
16401: LD_INT 3
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: PPUSH
16411: CALL_OW 70
16415: PUSH
16416: LD_INT 0
16418: GREATER
16419: IFFALSE 16439
16421: GO 16423
16423: DISABLE
// begin northMapExplored = true ;
16424: LD_ADDR_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16432: LD_STRING M10
16434: PPUSH
16435: CALL_OW 337
// end ;
16439: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16440: LD_EXP 82
16444: NOT
16445: PUSH
16446: LD_EXP 41
16450: AND
16451: PUSH
16452: LD_EXP 37
16456: PUSH
16457: LD_EXP 36
16461: NOT
16462: OR
16463: AND
16464: IFFALSE 16484
16466: GO 16468
16468: DISABLE
// begin backToBeria2 = true ;
16469: LD_ADDR_EXP 16
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16477: LD_STRING M10a
16479: PPUSH
16480: CALL_OW 337
// end ;
16484: END
// every 0 0$1 do
16485: GO 16487
16487: DISABLE
// begin enable ;
16488: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16489: LD_EXP 67
16493: PUSH
16494: LD_EXP 76
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PPUSH
16503: LD_INT 1000
16505: PPUSH
16506: CALL_OW 234
// end ; end_of_file
16510: END
// export function CreateNature ; var i , un ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: DOUBLE
16522: LD_INT 1
16524: DEC
16525: ST_TO_ADDR
16526: LD_EXP 45
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PUSH
16535: FOR_TO
16536: IFFALSE 16646
// begin uc_side = 0 ;
16538: LD_ADDR_OWVAR 20
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// uc_nation = nation_nature ;
16546: LD_ADDR_OWVAR 21
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// hc_class = class_apeman ;
16554: LD_ADDR_OWVAR 28
16558: PUSH
16559: LD_INT 12
16561: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16562: LD_ADDR_OWVAR 31
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: PUSH
16576: LD_EXP 46
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: PUSH
16585: LD_EXP 46
16589: PUSH
16590: LD_INT 3
16592: ARRAY
16593: PUSH
16594: LD_EXP 46
16598: PUSH
16599: LD_INT 4
16601: ARRAY
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16609: LD_ADDR_OWVAR 35
16613: PUSH
16614: LD_EXP 47
16618: ST_TO_ADDR
// un = CreateHuman ;
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: CALL_OW 44
16628: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16629: LD_VAR 0 3
16633: PPUSH
16634: LD_INT 21
16636: PPUSH
16637: LD_INT 0
16639: PPUSH
16640: CALL_OW 49
// end ;
16644: GO 16535
16646: POP
16647: POP
// for i := 1 to animalsAmount [ 2 ] do
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: DOUBLE
16654: LD_INT 1
16656: DEC
16657: ST_TO_ADDR
16658: LD_EXP 45
16662: PUSH
16663: LD_INT 2
16665: ARRAY
16666: PUSH
16667: FOR_TO
16668: IFFALSE 16778
// begin uc_side = 0 ;
16670: LD_ADDR_OWVAR 20
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// uc_nation = nation_nature ;
16678: LD_ADDR_OWVAR 21
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// hc_class = class_phororhacos ;
16686: LD_ADDR_OWVAR 28
16690: PUSH
16691: LD_INT 18
16693: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16694: LD_ADDR_OWVAR 31
16698: PUSH
16699: LD_EXP 46
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PUSH
16708: LD_EXP 46
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PUSH
16717: LD_EXP 46
16721: PUSH
16722: LD_INT 3
16724: ARRAY
16725: PUSH
16726: LD_EXP 46
16730: PUSH
16731: LD_INT 4
16733: ARRAY
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16741: LD_ADDR_OWVAR 35
16745: PUSH
16746: LD_EXP 47
16750: ST_TO_ADDR
// un = CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 21
16768: PPUSH
16769: LD_INT 0
16771: PPUSH
16772: CALL_OW 49
// end ;
16776: GO 16667
16778: POP
16779: POP
// for i := 1 to animalsAmount [ 3 ] do
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: DOUBLE
16786: LD_INT 1
16788: DEC
16789: ST_TO_ADDR
16790: LD_EXP 45
16794: PUSH
16795: LD_INT 3
16797: ARRAY
16798: PUSH
16799: FOR_TO
16800: IFFALSE 16910
// begin uc_side = 0 ;
16802: LD_ADDR_OWVAR 20
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// uc_nation = nation_nature ;
16810: LD_ADDR_OWVAR 21
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// hc_class = class_tiger ;
16818: LD_ADDR_OWVAR 28
16822: PUSH
16823: LD_INT 14
16825: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16826: LD_ADDR_OWVAR 31
16830: PUSH
16831: LD_EXP 46
16835: PUSH
16836: LD_INT 1
16838: ARRAY
16839: PUSH
16840: LD_EXP 46
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PUSH
16849: LD_EXP 46
16853: PUSH
16854: LD_INT 3
16856: ARRAY
16857: PUSH
16858: LD_EXP 46
16862: PUSH
16863: LD_INT 4
16865: ARRAY
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16873: LD_ADDR_OWVAR 35
16877: PUSH
16878: LD_EXP 47
16882: ST_TO_ADDR
// un = CreateHuman ;
16883: LD_ADDR_VAR 0 3
16887: PUSH
16888: CALL_OW 44
16892: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16893: LD_VAR 0 3
16897: PPUSH
16898: LD_INT 21
16900: PPUSH
16901: LD_INT 0
16903: PPUSH
16904: CALL_OW 49
// end ;
16908: GO 16799
16910: POP
16911: POP
// for i := 1 to animalsAmount [ 4 ] do
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: DOUBLE
16918: LD_INT 1
16920: DEC
16921: ST_TO_ADDR
16922: LD_EXP 45
16926: PUSH
16927: LD_INT 4
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17042
// begin uc_side = 0 ;
16934: LD_ADDR_OWVAR 20
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// uc_nation = nation_nature ;
16942: LD_ADDR_OWVAR 21
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// hc_class = 21 ;
16950: LD_ADDR_OWVAR 28
16954: PUSH
16955: LD_INT 21
16957: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16958: LD_ADDR_OWVAR 31
16962: PUSH
16963: LD_EXP 46
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PUSH
16972: LD_EXP 46
16976: PUSH
16977: LD_INT 2
16979: ARRAY
16980: PUSH
16981: LD_EXP 46
16985: PUSH
16986: LD_INT 3
16988: ARRAY
16989: PUSH
16990: LD_EXP 46
16994: PUSH
16995: LD_INT 4
16997: ARRAY
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17005: LD_ADDR_OWVAR 35
17009: PUSH
17010: LD_EXP 47
17014: ST_TO_ADDR
// un = CreateHuman ;
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: CALL_OW 44
17024: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 21
17032: PPUSH
17033: LD_INT 0
17035: PPUSH
17036: CALL_OW 49
// end ;
17040: GO 16931
17042: POP
17043: POP
// end ; end_of_file
17044: LD_VAR 0 1
17048: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17049: LD_EXP 21
17053: IFFALSE 17282
17055: GO 17057
17057: DISABLE
17058: LD_INT 0
17060: PPUSH
17061: PPUSH
17062: PPUSH
17063: PPUSH
17064: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17065: LD_ADDR_VAR 0 4
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 21
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 25
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 69
17109: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17110: LD_INT 700
17112: PPUSH
17113: CALL_OW 67
// carryCratesEngs = 0 ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
// for unit in playerEngs do
17125: LD_ADDR_VAR 0 2
17129: PUSH
17130: LD_VAR 0 4
17134: PUSH
17135: FOR_IN
17136: IFFALSE 17164
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_VAR 0 3
17147: PUSH
17148: LD_VAR 0 2
17152: PPUSH
17153: LD_INT 1
17155: PPUSH
17156: CALL_OW 289
17160: PLUS
17161: ST_TO_ADDR
17162: GO 17135
17164: POP
17165: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17166: LD_INT 106
17168: PPUSH
17169: CALL_OW 274
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 275
17181: PUSH
17182: LD_INT 50
17184: LESS
17185: PUSH
17186: LD_INT 8
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 287
17196: PUSH
17197: LD_INT 10
17199: MUL
17200: PUSH
17201: LD_INT 106
17203: PPUSH
17204: CALL_OW 274
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 275
17216: PLUS
17217: PUSH
17218: LD_VAR 0 3
17222: PLUS
17223: PUSH
17224: LD_INT 50
17226: LESS
17227: AND
17228: IFFALSE 17240
// spawnNextCrates = true else
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
17238: GO 17248
// spawnNextCrates = false ;
17240: LD_ADDR_VAR 0 5
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// if spawnNextCrates then
17248: LD_VAR 0 5
17252: IFFALSE 17275
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17254: LD_INT 1
17256: PPUSH
17257: LD_INT 5
17259: PPUSH
17260: CALL_OW 12
17264: PPUSH
17265: LD_INT 26
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: CALL_OW 55
// until not spawnCrates ;
17275: LD_EXP 21
17279: NOT
17280: IFFALSE 17065
// end ; end_of_file
17282: PPOPN 5
17284: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 266
17294: PUSH
17295: LD_INT 6
17297: EQUAL
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: LD_INT 6
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: PUSH
17328: LD_INT 1
17330: GREATER
17331: AND
17332: PUSH
17333: LD_EXP 11
17337: NOT
17338: AND
17339: IFFALSE 17350
// Dial_StopConstructAgainSameBuilding ( building ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL 9051 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 266
17359: PUSH
17360: LD_INT 2
17362: EQUAL
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 30
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PPUSH
17388: CALL_OW 69
17392: PUSH
17393: LD_INT 1
17395: GREATER
17396: AND
17397: PUSH
17398: LD_EXP 11
17402: NOT
17403: AND
17404: IFFALSE 17415
// Dial_StopConstructAgainSameBuilding ( building ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: CALL 9051 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 255
17424: PUSH
17425: LD_INT 3
17427: EQUAL
17428: PUSH
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 266
17438: PUSH
17439: LD_INT 26
17441: PUSH
17442: LD_INT 4
17444: PUSH
17445: LD_INT 31
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: IN
17453: AND
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: LD_INT 8
17462: PPUSH
17463: CALL_OW 308
17467: AND
17468: IFFALSE 17479
// Dial_StopConstructAgainSameBuilding ( building ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL 9051 0 1
// end ;
17479: PPOPN 2
17481: END
// on BuildingComplete ( building ) do var sold , platSold ;
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 255
17495: PUSH
17496: LD_INT 3
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 266
17509: PUSH
17510: LD_INT 6
17512: EQUAL
17513: AND
17514: PUSH
17515: LD_EXP 8
17519: NOT
17520: AND
17521: IFFALSE 17527
// Dial_LabConstructed ;
17523: CALL 8901 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 255
17536: PUSH
17537: LD_INT 3
17539: EQUAL
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 266
17550: PUSH
17551: LD_INT 2
17553: EQUAL
17554: AND
17555: PUSH
17556: LD_EXP 9
17560: NOT
17561: AND
17562: IFFALSE 17568
// Dial_WorkshopConstructed ;
17564: CALL 8976 0 0
// if GetSide ( building ) = 6 then
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 255
17577: PUSH
17578: LD_INT 6
17580: EQUAL
17581: IFFALSE 17792
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 266
17592: PUSH
17593: LD_INT 31
17595: EQUAL
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 9
17604: PPUSH
17605: CALL_OW 308
17609: AND
17610: IFFALSE 17661
// begin if UnitsInside ( ru2_arm2 ) then
17612: LD_INT 209
17614: PPUSH
17615: CALL_OW 313
17619: IFFALSE 17661
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17621: LD_ADDR_VAR 0 2
17625: PUSH
17626: LD_INT 209
17628: PPUSH
17629: CALL_OW 313
17633: PUSH
17634: LD_INT 1
17636: ARRAY
17637: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 31
17673: EQUAL
17674: PUSH
17675: LD_VAR 0 1
17679: PPUSH
17680: LD_INT 8
17682: PPUSH
17683: CALL_OW 308
17687: AND
17688: IFFALSE 17724
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_EXP 77
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 74
17709: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17710: LD_VAR 0 2
17714: PPUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 2
17736: EQUAL
17737: IFFALSE 17792
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17739: LD_EXP 69
17743: PPUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 72
17758: PPUSH
17759: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17763: LD_EXP 69
17767: PPUSH
17768: LD_INT 25
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: PPUSH
17783: LD_VAR 0 1
17787: PPUSH
17788: CALL_OW 180
// end ; end ; end ;
17792: PPOPN 3
17794: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17795: LD_VAR 0 1
17799: PUSH
17800: LD_INT 47
17802: EQUAL
17803: PUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 255
17813: PUSH
17814: LD_INT 3
17816: EQUAL
17817: AND
17818: IFFALSE 17828
// engineResearched = true ;
17820: LD_ADDR_EXP 10
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// if tech = tech_Tech1 then
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 48
17835: EQUAL
17836: IFFALSE 17858
// begin wait ( 0 0$5 ) ;
17838: LD_INT 175
17840: PPUSH
17841: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17845: LD_INT 83
17847: PPUSH
17848: LD_INT 1500
17850: PPUSH
17851: LD_INT 0
17853: PPUSH
17854: CALL_OW 486
// end ; end ;
17858: PPOPN 2
17860: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17861: LD_VAR 0 2
17865: PPUSH
17866: CALL_OW 255
17870: PUSH
17871: LD_OWVAR 2
17875: EQUAL
17876: PUSH
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 302
17886: AND
17887: PUSH
17888: LD_EXP 12
17892: NOT
17893: AND
17894: PUSH
17895: LD_EXP 17
17899: NOT
17900: AND
17901: IFFALSE 17912
// Dial_FirstVehConstructed ( factory ) ;
17903: LD_VAR 0 2
17907: PPUSH
17908: CALL 9575 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 255
17921: PUSH
17922: LD_OWVAR 2
17926: EQUAL
17927: PUSH
17928: LD_EXP 14
17932: NOT
17933: AND
17934: PUSH
17935: LD_EXP 13
17939: PPUSH
17940: CALL_OW 302
17944: NOT
17945: AND
17946: IFFALSE 17958
// firstVeh = vehicle ;
17948: LD_ADDR_EXP 13
17952: PUSH
17953: LD_VAR 0 1
17957: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_OWVAR 2
17972: EQUAL
17973: PUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: CALL_OW 302
17983: AND
17984: PUSH
17985: LD_EXP 17
17989: AND
17990: IFFALSE 18006
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
17992: LD_ADDR_EXP 18
17996: PUSH
17997: LD_EXP 18
18001: PUSH
18002: LD_INT 1
18004: PLUS
18005: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 255
18015: PUSH
18016: LD_OWVAR 2
18020: EQUAL
18021: PUSH
18022: LD_VAR 0 2
18026: PPUSH
18027: CALL_OW 248
18031: PUSH
18032: LD_INT 3
18034: EQUAL
18035: AND
18036: IFFALSE 18052
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18038: LD_ADDR_EXP 44
18042: PUSH
18043: LD_EXP 44
18047: PUSH
18048: LD_INT 1
18050: PLUS
18051: ST_TO_ADDR
// end ;
18052: PPOPN 2
18054: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18055: LD_EXP 19
18059: NOT
18060: PUSH
18061: LD_VAR 0 5
18065: PUSH
18066: LD_INT 1
18068: EQUAL
18069: AND
18070: IFFALSE 18086
// Dial_NewCrates ( x , y ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: CALL 9520 0 2
// end ;
18086: PPOPN 5
18088: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: LD_INT 22
18103: PUSH
18104: LD_INT 3
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 21
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PPUSH
18125: CALL_OW 69
18129: PUSH
18130: FOR_IN
18131: IFFALSE 18324
// if GetTaskList ( i ) > 0 then
18133: LD_VAR 0 2
18137: PPUSH
18138: CALL_OW 437
18142: PUSH
18143: LD_INT 0
18145: GREATER
18146: IFFALSE 18322
// for j = 1 to GetTaskList ( i ) do
18148: LD_ADDR_VAR 0 3
18152: PUSH
18153: DOUBLE
18154: LD_INT 1
18156: DEC
18157: ST_TO_ADDR
18158: LD_VAR 0 2
18162: PPUSH
18163: CALL_OW 437
18167: PUSH
18168: FOR_TO
18169: IFFALSE 18320
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18171: LD_ADDR_VAR 0 4
18175: PUSH
18176: LD_VAR 0 2
18180: PPUSH
18181: CALL_OW 437
18185: PUSH
18186: LD_VAR 0 3
18190: ARRAY
18191: PUSH
18192: LD_INT 4
18194: ARRAY
18195: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18196: LD_VAR 0 4
18200: PUSH
18201: LD_INT 71
18203: EQUAL
18204: PUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: CALL_OW 255
18214: PUSH
18215: LD_INT 6
18217: EQUAL
18218: PUSH
18219: LD_VAR 0 2
18223: PPUSH
18224: CALL_OW 437
18228: PUSH
18229: LD_VAR 0 3
18233: ARRAY
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_STRING e
18241: EQUAL
18242: AND
18243: PUSH
18244: LD_VAR 0 4
18248: PPUSH
18249: CALL_OW 247
18253: PUSH
18254: LD_INT 2
18256: EQUAL
18257: AND
18258: OR
18259: IFFALSE 18272
// SetTaskList ( i , [ ] ) ;
18261: LD_VAR 0 2
18265: PPUSH
18266: EMPTY
18267: PPUSH
18268: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18272: LD_VAR 0 4
18276: PUSH
18277: LD_INT 106
18279: EQUAL
18280: PUSH
18281: LD_VAR 0 2
18285: PPUSH
18286: CALL_OW 437
18290: PUSH
18291: LD_VAR 0 3
18295: ARRAY
18296: PUSH
18297: LD_INT 1
18299: ARRAY
18300: PUSH
18301: LD_STRING Y
18303: EQUAL
18304: AND
18305: IFFALSE 18318
// SetTaskList ( i , [ ] ) ;
18307: LD_VAR 0 2
18311: PPUSH
18312: EMPTY
18313: PPUSH
18314: CALL_OW 446
// end ;
18318: GO 18168
18320: POP
18321: POP
18322: GO 18130
18324: POP
18325: POP
// end ;
18326: PPOPN 6
18328: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 255
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: PUSH
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 247
18352: PUSH
18353: LD_INT 1
18355: EQUAL
18356: AND
18357: IFFALSE 18415
// begin if unit in amLeftEngs then
18359: LD_VAR 0 1
18363: PUSH
18364: LD_EXP 86
18368: IN
18369: IFFALSE 18387
// amLeftEngs = amLeftEngs diff unit ;
18371: LD_ADDR_EXP 86
18375: PUSH
18376: LD_EXP 86
18380: PUSH
18381: LD_VAR 0 1
18385: DIFF
18386: ST_TO_ADDR
// if unit in amRightEngs then
18387: LD_VAR 0 1
18391: PUSH
18392: LD_EXP 87
18396: IN
18397: IFFALSE 18415
// amRightEngs = amRightEngs diff unit ;
18399: LD_ADDR_EXP 87
18403: PUSH
18404: LD_EXP 87
18408: PUSH
18409: LD_VAR 0 1
18413: DIFF
18414: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 255
18424: PUSH
18425: LD_INT 6
18427: EQUAL
18428: PUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 247
18438: PUSH
18439: LD_INT 1
18441: EQUAL
18442: AND
18443: IFFALSE 18473
// if unit in belkovTeam then
18445: LD_VAR 0 1
18449: PUSH
18450: LD_EXP 73
18454: IN
18455: IFFALSE 18473
// belkovTeam = belkovTeam diff unit ;
18457: LD_ADDR_EXP 73
18461: PUSH
18462: LD_EXP 73
18466: PUSH
18467: LD_VAR 0 1
18471: DIFF
18472: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 255
18482: PUSH
18483: LD_INT 3
18485: EQUAL
18486: PUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 247
18496: PUSH
18497: LD_INT 1
18499: EQUAL
18500: AND
18501: IFFALSE 18517
// lostComradesCounter = lostComradesCounter + 1 ;
18503: LD_ADDR_EXP 43
18507: PUSH
18508: LD_EXP 43
18512: PUSH
18513: LD_INT 1
18515: PLUS
18516: ST_TO_ADDR
// if unit = Burlak then
18517: LD_VAR 0 1
18521: PUSH
18522: LD_EXP 62
18526: EQUAL
18527: IFFALSE 18533
// BurlakIsDead ;
18529: CALL 19844 0 0
// if unit = Beria then
18533: LD_VAR 0 1
18537: PUSH
18538: LD_INT 106
18540: EQUAL
18541: IFFALSE 18547
// BaseDestroyed ;
18543: CALL 19874 0 0
// if unit in platSoldiers then
18547: LD_VAR 0 1
18551: PUSH
18552: LD_EXP 77
18556: IN
18557: IFFALSE 18575
// platSoldiers = platSoldiers diff unit ;
18559: LD_ADDR_EXP 77
18563: PUSH
18564: LD_EXP 77
18568: PUSH
18569: LD_VAR 0 1
18573: DIFF
18574: ST_TO_ADDR
// end ;
18575: PPOPN 1
18577: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 255
18587: PUSH
18588: LD_INT 1
18590: EQUAL
18591: PUSH
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 247
18601: PUSH
18602: LD_INT 3
18604: EQUAL
18605: AND
18606: IFFALSE 18664
// begin if unit in leftBunkers then
18608: LD_VAR 0 1
18612: PUSH
18613: LD_EXP 82
18617: IN
18618: IFFALSE 18636
// leftBunkers = leftBunkers diff unit ;
18620: LD_ADDR_EXP 82
18624: PUSH
18625: LD_EXP 82
18629: PUSH
18630: LD_VAR 0 1
18634: DIFF
18635: ST_TO_ADDR
// if unit in rightBunkers then
18636: LD_VAR 0 1
18640: PUSH
18641: LD_EXP 83
18645: IN
18646: IFFALSE 18664
// rightBunkers = rightBunkers diff unit ;
18648: LD_ADDR_EXP 83
18652: PUSH
18653: LD_EXP 83
18657: PUSH
18658: LD_VAR 0 1
18662: DIFF
18663: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18664: LD_VAR 0 1
18668: PPUSH
18669: CALL_OW 255
18673: PUSH
18674: LD_INT 1
18676: EQUAL
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 247
18687: PUSH
18688: LD_INT 1
18690: EQUAL
18691: AND
18692: IFFALSE 18722
// if unit in trapTeam then
18694: LD_VAR 0 1
18698: PUSH
18699: LD_EXP 81
18703: IN
18704: IFFALSE 18722
// trapTeam = trapTeam diff unit ;
18706: LD_ADDR_EXP 81
18710: PUSH
18711: LD_EXP 81
18715: PUSH
18716: LD_VAR 0 1
18720: DIFF
18721: ST_TO_ADDR
// end ;
18722: PPOPN 1
18724: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18725: LD_VAR 0 3
18729: PUSH
18730: LD_INT 1
18732: EQUAL
18733: IFFALSE 18743
// captureBelkovVehicle = true ;
18735: LD_ADDR_EXP 38
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// if original_side = 6 then
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 6
18750: EQUAL
18751: IFFALSE 18795
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18753: LD_VAR 0 1
18757: PUSH
18758: LD_VAR 0 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: LD_INT 118
18769: PPUSH
18770: LD_INT 25
18772: PPUSH
18773: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18777: LD_VAR 0 1
18781: PUSH
18782: LD_VAR 0 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 139
// end ; end ;
18795: PPOPN 4
18797: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18798: LD_VAR 0 1
18802: PUSH
18803: LD_INT 3
18805: EQUAL
18806: PUSH
18807: LD_VAR 0 2
18811: PUSH
18812: LD_INT 6
18814: EQUAL
18815: AND
18816: IFFALSE 18822
// AttackComrades ;
18818: CALL 19859 0 0
// end ;
18822: PPOPN 2
18824: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 6
18832: EQUAL
18833: IFFALSE 18847
// SetSide ( building , 3 ) ;
18835: LD_VAR 0 1
18839: PPUSH
18840: LD_INT 3
18842: PPUSH
18843: CALL_OW 235
// end ; end_of_file
18847: PPOPN 3
18849: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18850: LD_EXP 16
18854: PUSH
18855: LD_INT 8
18857: PPUSH
18858: LD_INT 22
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 71
18886: PUSH
18887: LD_INT 0
18889: EQUAL
18890: AND
18891: IFFALSE 18992
18893: GO 18895
18895: DISABLE
// begin enable ;
18896: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18897: LD_EXP 36
18901: NOT
18902: PUSH
18903: LD_EXP 64
18907: PPUSH
18908: CALL_OW 302
18912: PUSH
18913: LD_EXP 68
18917: PPUSH
18918: CALL_OW 302
18922: OR
18923: AND
18924: IFFALSE 18971
// begin case Query ( QContMission ) of 1 :
18926: LD_STRING QContMission
18928: PPUSH
18929: CALL_OW 97
18933: PUSH
18934: LD_INT 1
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18949
18942: POP
// begin FinishMission ;
18943: CALL 18993 0 0
// end ; 2 :
18947: GO 18969
18949: LD_INT 2
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18968
18957: POP
// begin saveBelkovObjective = true ;
18958: LD_ADDR_EXP 36
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// end ; end ;
18966: GO 18969
18968: POP
// end else
18969: GO 18982
// if not belkovSaved then
18971: LD_EXP 37
18975: NOT
18976: IFFALSE 18982
// FinishMission ;
18978: CALL 18993 0 0
// if belkovSaved then
18982: LD_EXP 37
18986: IFFALSE 18992
// FinishMission ;
18988: CALL 18993 0 0
// end ;
18992: END
// function FinishMission ; begin
18993: LD_INT 0
18995: PPUSH
// SetRewards ;
18996: CALL 19017 0 0
// SavePlayerCharacters ;
19000: CALL 19307 0 0
// SaveGlobalVariables ;
19004: CALL 19524 0 0
// YouWin ;
19008: CALL_OW 103
// end ;
19012: LD_VAR 0 1
19016: RET
// function SetRewards ; begin
19017: LD_INT 0
19019: PPUSH
// case initiative of 1 :
19020: LD_EXP 42
19024: PUSH
19025: LD_INT 1
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19046
19033: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19034: LD_STRING Initiative
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 101
19044: GO 19091
19046: LD_INT 2
19048: DOUBLE
19049: EQUAL
19050: IFTRUE 19054
19052: GO 19068
19054: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19055: LD_STRING Initiative
19057: PPUSH
19058: LD_INT 2
19060: NEG
19061: PPUSH
19062: CALL_OW 101
19066: GO 19091
19068: LD_INT 3
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19090
19076: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19077: LD_STRING Initiative
19079: PPUSH
19080: LD_INT 1
19082: NEG
19083: PPUSH
19084: CALL_OW 101
19088: GO 19091
19090: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19091: LD_EXP 37
19095: PUSH
19096: LD_EXP 64
19100: PPUSH
19101: CALL_OW 302
19105: PUSH
19106: LD_EXP 68
19110: PPUSH
19111: CALL_OW 302
19115: OR
19116: AND
19117: IFFALSE 19129
// AddMedal ( Belkov , 1 ) ;
19119: LD_STRING Belkov
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19129: LD_EXP 37
19133: NOT
19134: PUSH
19135: LD_EXP 36
19139: NOT
19140: AND
19141: IFFALSE 19154
// AddMedal ( Belkov , - 1 ) ;
19143: LD_STRING Belkov
19145: PPUSH
19146: LD_INT 1
19148: NEG
19149: PPUSH
19150: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19154: LD_EXP 37
19158: NOT
19159: PUSH
19160: LD_EXP 36
19164: AND
19165: IFFALSE 19178
// AddMedal ( Belkov , - 2 ) ;
19167: LD_STRING Belkov
19169: PPUSH
19170: LD_INT 2
19172: NEG
19173: PPUSH
19174: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19178: LD_EXP 37
19182: PUSH
19183: LD_EXP 6
19187: PUSH
19188: LD_EXP 64
19192: PPUSH
19193: CALL_OW 301
19197: AND
19198: AND
19199: PUSH
19200: LD_EXP 6
19204: NOT
19205: PUSH
19206: LD_EXP 68
19210: PPUSH
19211: CALL_OW 301
19215: AND
19216: OR
19217: IFFALSE 19230
// AddMedal ( Belkov , - 2 ) ;
19219: LD_STRING Belkov
19221: PPUSH
19222: LD_INT 2
19224: NEG
19225: PPUSH
19226: CALL_OW 101
// if lostComradesCounter = 0 then
19230: LD_EXP 43
19234: PUSH
19235: LD_INT 0
19237: EQUAL
19238: IFFALSE 19252
// AddMedal ( NoLosses , 1 ) else
19240: LD_STRING NoLosses
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 101
19250: GO 19262
// AddMedal ( NoLosses , 0 ) ;
19252: LD_STRING NoLosses
19254: PPUSH
19255: LD_INT 0
19257: PPUSH
19258: CALL_OW 101
// GiveMedals ( Main ) ;
19262: LD_STRING Main
19264: PPUSH
19265: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19269: LD_INT 22
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PPUSH
19293: CALL_OW 69
19297: PPUSH
19298: CALL_OW 43
// end ;
19302: LD_VAR 0 1
19306: RET
// function SavePlayerCharacters ; var othersYour ; begin
19307: LD_INT 0
19309: PPUSH
19310: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19311: LD_EXP 62
19315: PPUSH
19316: LD_STRING Burlak
19318: PPUSH
19319: LD_INT 3
19321: PPUSH
19322: CALL 4272 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19326: LD_EXP 63
19330: PPUSH
19331: LD_STRING Gnyevko
19333: PPUSH
19334: LD_INT 3
19336: PPUSH
19337: CALL 4272 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19341: LD_EXP 70
19345: PPUSH
19346: LD_STRING Kovalyuk
19348: PPUSH
19349: LD_INT 3
19351: PPUSH
19352: CALL 4272 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19356: LD_EXP 64
19360: PPUSH
19361: LD_STRING Belkov
19363: PPUSH
19364: LD_INT 3
19366: PPUSH
19367: CALL 4272 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19371: LD_EXP 68
19375: PPUSH
19376: LD_STRING Belkov2
19378: PPUSH
19379: LD_INT 3
19381: PPUSH
19382: CALL 4272 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19386: LD_EXP 65
19390: PPUSH
19391: LD_STRING Kirilenkova
19393: PPUSH
19394: LD_INT 3
19396: PPUSH
19397: CALL 4272 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_INT 22
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: PUSH
19435: LD_EXP 62
19439: PUSH
19440: LD_EXP 63
19444: PUSH
19445: LD_EXP 64
19449: PUSH
19450: LD_EXP 68
19454: PUSH
19455: LD_EXP 70
19459: PUSH
19460: LD_EXP 65
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: DIFF
19473: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19474: LD_VAR 0 2
19478: PPUSH
19479: LD_STRING other_survivors
19481: PPUSH
19482: LD_INT 3
19484: PPUSH
19485: CALL 4328 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19489: LD_EXP 77
19493: PPUSH
19494: LD_STRING other_beria
19496: PPUSH
19497: LD_INT 6
19499: PPUSH
19500: CALL 4328 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19504: LD_EXP 69
19508: PPUSH
19509: LD_STRING other_kirov
19511: PPUSH
19512: LD_INT 6
19514: PPUSH
19515: CALL 4328 0 3
// end ;
19519: LD_VAR 0 1
19523: RET
// function SaveGlobalVariables ; var vehicles ; begin
19524: LD_INT 0
19526: PPUSH
19527: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_INT 3
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: EMPTY
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: PPUSH
19564: CALL_OW 69
19568: ST_TO_ADDR
// if vehicles then
19569: LD_VAR 0 2
19573: IFFALSE 19587
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19575: LD_VAR 0 2
19579: PPUSH
19580: LD_STRING 02_Vehicles_1
19582: PPUSH
19583: CALL 5359 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19587: LD_INT 8
19589: PPUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 3
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: PPUSH
19603: CALL_OW 70
19607: PPUSH
19608: LD_STRING 02_BeriaBase_2
19610: PPUSH
19611: CALL 5502 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19615: LD_INT 9
19617: PPUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 6
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PPUSH
19642: CALL_OW 70
19646: PPUSH
19647: LD_STRING 02_KirovBase_3
19649: PPUSH
19650: CALL 5502 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19654: LD_INT 22
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 21
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 50
19676: PUSH
19677: EMPTY
19678: LIST
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 95
19685: PUSH
19686: LD_INT 8
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PPUSH
19703: CALL_OW 69
19707: PPUSH
19708: LD_STRING 02_OtherBuildings_4
19710: PPUSH
19711: CALL 5502 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19715: LD_INT 22
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 50
19737: PUSH
19738: EMPTY
19739: LIST
19740: PUSH
19741: LD_INT 23
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: PPUSH
19757: CALL_OW 69
19761: PPUSH
19762: LD_STRING 02_AmericanBuildings_5
19764: PPUSH
19765: CALL 5502 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19769: LD_EXP 4
19773: PPUSH
19774: LD_STRING 02_MeetBelkovBrother_6
19776: PPUSH
19777: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19781: LD_INT 106
19783: PPUSH
19784: CALL_OW 274
19788: PPUSH
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 275
19796: PPUSH
19797: LD_STRING 02_BeriaResourceCrates_7
19799: PPUSH
19800: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19804: LD_INT 106
19806: PPUSH
19807: CALL_OW 274
19811: PPUSH
19812: LD_INT 2
19814: PPUSH
19815: CALL_OW 275
19819: PPUSH
19820: LD_STRING 02_BeriaResourceOil_8
19822: PPUSH
19823: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19827: LD_EXP 5
19831: PPUSH
19832: LD_STRING 02_PlatonovOpinion_9
19834: PPUSH
19835: CALL_OW 39
// end ; end_of_file
19839: LD_VAR 0 1
19843: RET
// export function BurlakIsDead ; begin
19844: LD_INT 0
19846: PPUSH
// YouLost ( Burlak ) ;
19847: LD_STRING Burlak
19849: PPUSH
19850: CALL_OW 104
// end ;
19854: LD_VAR 0 1
19858: RET
// export function AttackComrades ; begin
19859: LD_INT 0
19861: PPUSH
// YouLost ( SelfAttack ) ;
19862: LD_STRING SelfAttack
19864: PPUSH
19865: CALL_OW 104
// end ;
19869: LD_VAR 0 1
19873: RET
// export function BaseDestroyed ; begin
19874: LD_INT 0
19876: PPUSH
// YouLost ( Base ) ;
19877: LD_STRING Base
19879: PPUSH
19880: CALL_OW 104
// end ; end_of_file
19884: LD_VAR 0 1
19888: RET
// every 0 0$1 do var engs ;
19889: GO 19891
19891: DISABLE
19892: LD_INT 0
19894: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19895: LD_ADDR_VAR 0 1
19899: PUSH
19900: LD_EXP 69
19904: PPUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 72
19919: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 122
// wait ( 0 0$1 ) ;
19929: LD_INT 35
19931: PPUSH
19932: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 31
19943: PPUSH
19944: LD_INT 146
19946: PPUSH
19947: LD_INT 107
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
19957: LD_VAR 0 1
19961: PPUSH
19962: LD_INT 31
19964: PPUSH
19965: LD_INT 176
19967: PPUSH
19968: LD_INT 123
19970: PPUSH
19971: LD_INT 5
19973: PPUSH
19974: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_INT 31
19985: PPUSH
19986: LD_INT 170
19988: PPUSH
19989: LD_INT 102
19991: PPUSH
19992: LD_INT 4
19994: PPUSH
19995: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
19999: LD_VAR 0 1
20003: PPUSH
20004: LD_INT 31
20006: PPUSH
20007: LD_INT 173
20009: PPUSH
20010: LD_INT 105
20012: PPUSH
20013: LD_INT 4
20015: PPUSH
20016: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20020: LD_VAR 0 1
20024: PPUSH
20025: LD_INT 71
20027: PPUSH
20028: CALL_OW 180
// end ;
20032: PPOPN 1
20034: END
// every 0 0$1 trigger activateAMAI do
20035: LD_EXP 27
20039: IFFALSE 20063
20041: GO 20043
20043: DISABLE
// begin enable ;
20044: ENABLE
// RepairDamageLeftBunkers ;
20045: CALL 20064 0 0
// if Difficulty = 3 then
20049: LD_OWVAR 67
20053: PUSH
20054: LD_INT 3
20056: EQUAL
20057: IFFALSE 20063
// RepairDamageRightBunkers ;
20059: CALL 20272 0 0
// end ;
20063: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
20068: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20069: LD_EXP 86
20073: NOT
20074: PUSH
20075: LD_INT 17
20077: PPUSH
20078: LD_INT 22
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 21
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 31
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 3
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 1000
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 70
20135: PUSH
20136: LD_INT 0
20138: EQUAL
20139: OR
20140: IFFALSE 20144
// exit ;
20142: GO 20267
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20144: LD_EXP 86
20148: PPUSH
20149: LD_INT 3
20151: PUSH
20152: LD_INT 60
20154: PUSH
20155: EMPTY
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: PPUSH
20167: CALL_OW 122
// for bunker in leftBunkers do
20171: LD_ADDR_VAR 0 3
20175: PUSH
20176: LD_EXP 82
20180: PUSH
20181: FOR_IN
20182: IFFALSE 20233
// if GetLives ( bunker ) < 1000 then
20184: LD_VAR 0 3
20188: PPUSH
20189: CALL_OW 256
20193: PUSH
20194: LD_INT 1000
20196: LESS
20197: IFFALSE 20231
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20199: LD_EXP 86
20203: PPUSH
20204: LD_INT 3
20206: PUSH
20207: LD_INT 60
20209: PUSH
20210: EMPTY
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PPUSH
20217: CALL_OW 72
20221: PPUSH
20222: LD_VAR 0 3
20226: PPUSH
20227: CALL_OW 190
20231: GO 20181
20233: POP
20234: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20235: LD_EXP 86
20239: PPUSH
20240: LD_INT 3
20242: PUSH
20243: LD_INT 60
20245: PUSH
20246: EMPTY
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 72
20257: PPUSH
20258: LD_EXP 84
20262: PPUSH
20263: CALL_OW 180
// end ;
20267: LD_VAR 0 1
20271: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20272: LD_INT 0
20274: PPUSH
20275: PPUSH
20276: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20277: LD_EXP 87
20281: NOT
20282: PUSH
20283: LD_INT 16
20285: PPUSH
20286: LD_INT 22
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 21
20298: PUSH
20299: LD_INT 3
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 31
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: LD_INT 24
20321: PUSH
20322: LD_INT 1000
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 70
20343: PUSH
20344: LD_INT 0
20346: EQUAL
20347: OR
20348: IFFALSE 20352
// exit ;
20350: GO 20475
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20352: LD_EXP 87
20356: PPUSH
20357: LD_INT 3
20359: PUSH
20360: LD_INT 60
20362: PUSH
20363: EMPTY
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 72
20374: PPUSH
20375: CALL_OW 122
// for bunker in rightBunkers do
20379: LD_ADDR_VAR 0 3
20383: PUSH
20384: LD_EXP 83
20388: PUSH
20389: FOR_IN
20390: IFFALSE 20441
// if GetLives ( bunker ) < 1000 then
20392: LD_VAR 0 3
20396: PPUSH
20397: CALL_OW 256
20401: PUSH
20402: LD_INT 1000
20404: LESS
20405: IFFALSE 20439
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20407: LD_EXP 87
20411: PPUSH
20412: LD_INT 3
20414: PUSH
20415: LD_INT 60
20417: PUSH
20418: EMPTY
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 72
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: CALL_OW 190
20439: GO 20389
20441: POP
20442: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20443: LD_EXP 87
20447: PPUSH
20448: LD_INT 3
20450: PUSH
20451: LD_INT 60
20453: PUSH
20454: EMPTY
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PPUSH
20461: CALL_OW 72
20465: PPUSH
20466: LD_EXP 85
20470: PPUSH
20471: CALL_OW 180
// end ;
20475: LD_VAR 0 1
20479: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20480: LD_EXP 28
20484: PUSH
20485: LD_EXP 73
20489: AND
20490: IFFALSE 20627
20492: GO 20494
20494: DISABLE
20495: LD_INT 0
20497: PPUSH
20498: PPUSH
20499: PPUSH
// begin enable ;
20500: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20501: LD_ADDR_VAR 0 2
20505: PUSH
20506: LD_EXP 73
20510: PPUSH
20511: LD_INT 25
20513: PUSH
20514: LD_INT 4
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PPUSH
20521: CALL_OW 72
20525: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20526: LD_ADDR_VAR 0 3
20530: PUSH
20531: LD_EXP 73
20535: PPUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 24
20541: PUSH
20542: LD_INT 650
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 72
20557: ST_TO_ADDR
// if not damaged and med then
20558: LD_VAR 0 3
20562: NOT
20563: PUSH
20564: LD_VAR 0 2
20568: AND
20569: IFFALSE 20588
// ComMoveXY ( med , 83 , 17 ) else
20571: LD_VAR 0 2
20575: PPUSH
20576: LD_INT 83
20578: PPUSH
20579: LD_INT 17
20581: PPUSH
20582: CALL_OW 111
20586: GO 20627
// if med then
20588: LD_VAR 0 2
20592: IFFALSE 20627
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20594: LD_VAR 0 3
20598: PPUSH
20599: LD_INT 83
20601: PPUSH
20602: LD_INT 17
20604: PPUSH
20605: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20609: LD_VAR 0 2
20613: PPUSH
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 1
20621: ARRAY
20622: PPUSH
20623: CALL_OW 128
// end ; end ; end_of_file
20627: PPOPN 3
20629: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20630: LD_INT 22
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 23
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: PPUSH
20665: CALL_OW 69
20669: PUSH
20670: LD_INT 2
20672: EQUAL
20673: IFFALSE 20685
20675: GO 20677
20677: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20678: LD_STRING ACH_DEPOT
20680: PPUSH
20681: CALL_OW 543
20685: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20686: LD_EXP 44
20690: PUSH
20691: LD_INT 5
20693: EQUAL
20694: IFFALSE 20706
20696: GO 20698
20698: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20699: LD_STRING ACH_WORKSHOP
20701: PPUSH
20702: CALL_OW 543
20706: END
// every 1 trigger captureBelkovVehicle do
20707: LD_EXP 38
20711: IFFALSE 20723
20713: GO 20715
20715: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20716: LD_STRING ACH_RETAKE
20718: PPUSH
20719: CALL_OW 543
20723: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
20724: LD_VAR 0 1
20728: PPUSH
20729: LD_VAR 0 2
20733: PPUSH
20734: LD_VAR 0 3
20738: PPUSH
20739: LD_VAR 0 4
20743: PPUSH
20744: LD_VAR 0 5
20748: PPUSH
20749: CALL 33528 0 5
// end ;
20753: PPOPN 5
20755: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
20756: LD_VAR 0 2
20760: PUSH
20761: LD_INT 100
20763: EQUAL
20764: IFFALSE 21713
// begin if not StreamModeActive then
20766: LD_EXP 90
20770: NOT
20771: IFFALSE 20781
// StreamModeActive := true ;
20773: LD_ADDR_EXP 90
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 0 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 0
20788: EQUAL
20789: IFFALSE 20795
// InitStreamMode ;
20791: CALL 21946 0 0
// if p3 = 1 then
20795: LD_VAR 0 3
20799: PUSH
20800: LD_INT 1
20802: EQUAL
20803: IFFALSE 20813
// sRocket := true ;
20805: LD_ADDR_EXP 95
20809: PUSH
20810: LD_INT 1
20812: ST_TO_ADDR
// if p3 = 2 then
20813: LD_VAR 0 3
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: IFFALSE 20831
// sSpeed := true ;
20823: LD_ADDR_EXP 94
20827: PUSH
20828: LD_INT 1
20830: ST_TO_ADDR
// if p3 = 3 then
20831: LD_VAR 0 3
20835: PUSH
20836: LD_INT 3
20838: EQUAL
20839: IFFALSE 20849
// sEngine := true ;
20841: LD_ADDR_EXP 96
20845: PUSH
20846: LD_INT 1
20848: ST_TO_ADDR
// if p3 = 4 then
20849: LD_VAR 0 3
20853: PUSH
20854: LD_INT 4
20856: EQUAL
20857: IFFALSE 20867
// sSpec := true ;
20859: LD_ADDR_EXP 93
20863: PUSH
20864: LD_INT 1
20866: ST_TO_ADDR
// if p3 = 5 then
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 5
20874: EQUAL
20875: IFFALSE 20885
// sLevel := true ;
20877: LD_ADDR_EXP 97
20881: PUSH
20882: LD_INT 1
20884: ST_TO_ADDR
// if p3 = 6 then
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 6
20892: EQUAL
20893: IFFALSE 20903
// sArmoury := true ;
20895: LD_ADDR_EXP 98
20899: PUSH
20900: LD_INT 1
20902: ST_TO_ADDR
// if p3 = 7 then
20903: LD_VAR 0 3
20907: PUSH
20908: LD_INT 7
20910: EQUAL
20911: IFFALSE 20921
// sRadar := true ;
20913: LD_ADDR_EXP 99
20917: PUSH
20918: LD_INT 1
20920: ST_TO_ADDR
// if p3 = 8 then
20921: LD_VAR 0 3
20925: PUSH
20926: LD_INT 8
20928: EQUAL
20929: IFFALSE 20939
// sBunker := true ;
20931: LD_ADDR_EXP 100
20935: PUSH
20936: LD_INT 1
20938: ST_TO_ADDR
// if p3 = 9 then
20939: LD_VAR 0 3
20943: PUSH
20944: LD_INT 9
20946: EQUAL
20947: IFFALSE 20957
// sHack := true ;
20949: LD_ADDR_EXP 101
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// if p3 = 10 then
20957: LD_VAR 0 3
20961: PUSH
20962: LD_INT 10
20964: EQUAL
20965: IFFALSE 20975
// sFire := true ;
20967: LD_ADDR_EXP 102
20971: PUSH
20972: LD_INT 1
20974: ST_TO_ADDR
// if p3 = 11 then
20975: LD_VAR 0 3
20979: PUSH
20980: LD_INT 11
20982: EQUAL
20983: IFFALSE 20993
// sRefresh := true ;
20985: LD_ADDR_EXP 103
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// if p3 = 12 then
20993: LD_VAR 0 3
20997: PUSH
20998: LD_INT 12
21000: EQUAL
21001: IFFALSE 21011
// sExp := true ;
21003: LD_ADDR_EXP 104
21007: PUSH
21008: LD_INT 1
21010: ST_TO_ADDR
// if p3 = 13 then
21011: LD_VAR 0 3
21015: PUSH
21016: LD_INT 13
21018: EQUAL
21019: IFFALSE 21029
// sDepot := true ;
21021: LD_ADDR_EXP 105
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// if p3 = 14 then
21029: LD_VAR 0 3
21033: PUSH
21034: LD_INT 14
21036: EQUAL
21037: IFFALSE 21047
// sFlag := true ;
21039: LD_ADDR_EXP 106
21043: PUSH
21044: LD_INT 1
21046: ST_TO_ADDR
// if p3 = 15 then
21047: LD_VAR 0 3
21051: PUSH
21052: LD_INT 15
21054: EQUAL
21055: IFFALSE 21065
// sKamikadze := true ;
21057: LD_ADDR_EXP 114
21061: PUSH
21062: LD_INT 1
21064: ST_TO_ADDR
// if p3 = 16 then
21065: LD_VAR 0 3
21069: PUSH
21070: LD_INT 16
21072: EQUAL
21073: IFFALSE 21083
// sTroll := true ;
21075: LD_ADDR_EXP 115
21079: PUSH
21080: LD_INT 1
21082: ST_TO_ADDR
// if p3 = 17 then
21083: LD_VAR 0 3
21087: PUSH
21088: LD_INT 17
21090: EQUAL
21091: IFFALSE 21101
// sSlow := true ;
21093: LD_ADDR_EXP 116
21097: PUSH
21098: LD_INT 1
21100: ST_TO_ADDR
// if p3 = 18 then
21101: LD_VAR 0 3
21105: PUSH
21106: LD_INT 18
21108: EQUAL
21109: IFFALSE 21119
// sLack := true ;
21111: LD_ADDR_EXP 117
21115: PUSH
21116: LD_INT 1
21118: ST_TO_ADDR
// if p3 = 19 then
21119: LD_VAR 0 3
21123: PUSH
21124: LD_INT 19
21126: EQUAL
21127: IFFALSE 21137
// sTank := true ;
21129: LD_ADDR_EXP 119
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// if p3 = 20 then
21137: LD_VAR 0 3
21141: PUSH
21142: LD_INT 20
21144: EQUAL
21145: IFFALSE 21155
// sRemote := true ;
21147: LD_ADDR_EXP 120
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// if p3 = 21 then
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 21
21162: EQUAL
21163: IFFALSE 21173
// sPowell := true ;
21165: LD_ADDR_EXP 121
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// if p3 = 22 then
21173: LD_VAR 0 3
21177: PUSH
21178: LD_INT 22
21180: EQUAL
21181: IFFALSE 21191
// sTeleport := true ;
21183: LD_ADDR_EXP 124
21187: PUSH
21188: LD_INT 1
21190: ST_TO_ADDR
// if p3 = 23 then
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 23
21198: EQUAL
21199: IFFALSE 21209
// sOilTower := true ;
21201: LD_ADDR_EXP 126
21205: PUSH
21206: LD_INT 1
21208: ST_TO_ADDR
// if p3 = 24 then
21209: LD_VAR 0 3
21213: PUSH
21214: LD_INT 24
21216: EQUAL
21217: IFFALSE 21227
// sShovel := true ;
21219: LD_ADDR_EXP 127
21223: PUSH
21224: LD_INT 1
21226: ST_TO_ADDR
// if p3 = 25 then
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 25
21234: EQUAL
21235: IFFALSE 21245
// sSheik := true ;
21237: LD_ADDR_EXP 128
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// if p3 = 26 then
21245: LD_VAR 0 3
21249: PUSH
21250: LD_INT 26
21252: EQUAL
21253: IFFALSE 21263
// sEarthquake := true ;
21255: LD_ADDR_EXP 130
21259: PUSH
21260: LD_INT 1
21262: ST_TO_ADDR
// if p3 = 27 then
21263: LD_VAR 0 3
21267: PUSH
21268: LD_INT 27
21270: EQUAL
21271: IFFALSE 21281
// sAI := true ;
21273: LD_ADDR_EXP 131
21277: PUSH
21278: LD_INT 1
21280: ST_TO_ADDR
// if p3 = 28 then
21281: LD_VAR 0 3
21285: PUSH
21286: LD_INT 28
21288: EQUAL
21289: IFFALSE 21299
// sCargo := true ;
21291: LD_ADDR_EXP 134
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// if p3 = 29 then
21299: LD_VAR 0 3
21303: PUSH
21304: LD_INT 29
21306: EQUAL
21307: IFFALSE 21317
// sDLaser := true ;
21309: LD_ADDR_EXP 135
21313: PUSH
21314: LD_INT 1
21316: ST_TO_ADDR
// if p3 = 30 then
21317: LD_VAR 0 3
21321: PUSH
21322: LD_INT 30
21324: EQUAL
21325: IFFALSE 21335
// sExchange := true ;
21327: LD_ADDR_EXP 136
21331: PUSH
21332: LD_INT 1
21334: ST_TO_ADDR
// if p3 = 31 then
21335: LD_VAR 0 3
21339: PUSH
21340: LD_INT 31
21342: EQUAL
21343: IFFALSE 21353
// sFac := true ;
21345: LD_ADDR_EXP 137
21349: PUSH
21350: LD_INT 1
21352: ST_TO_ADDR
// if p3 = 32 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 32
21360: EQUAL
21361: IFFALSE 21371
// sPower := true ;
21363: LD_ADDR_EXP 138
21367: PUSH
21368: LD_INT 1
21370: ST_TO_ADDR
// if p3 = 33 then
21371: LD_VAR 0 3
21375: PUSH
21376: LD_INT 33
21378: EQUAL
21379: IFFALSE 21389
// sRandom := true ;
21381: LD_ADDR_EXP 139
21385: PUSH
21386: LD_INT 1
21388: ST_TO_ADDR
// if p3 = 34 then
21389: LD_VAR 0 3
21393: PUSH
21394: LD_INT 34
21396: EQUAL
21397: IFFALSE 21407
// sShield := true ;
21399: LD_ADDR_EXP 140
21403: PUSH
21404: LD_INT 1
21406: ST_TO_ADDR
// if p3 = 35 then
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 35
21414: EQUAL
21415: IFFALSE 21425
// sTime := true ;
21417: LD_ADDR_EXP 141
21421: PUSH
21422: LD_INT 1
21424: ST_TO_ADDR
// if p3 = 36 then
21425: LD_VAR 0 3
21429: PUSH
21430: LD_INT 36
21432: EQUAL
21433: IFFALSE 21443
// sTools := true ;
21435: LD_ADDR_EXP 142
21439: PUSH
21440: LD_INT 1
21442: ST_TO_ADDR
// if p3 = 101 then
21443: LD_VAR 0 3
21447: PUSH
21448: LD_INT 101
21450: EQUAL
21451: IFFALSE 21461
// sSold := true ;
21453: LD_ADDR_EXP 107
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// if p3 = 102 then
21461: LD_VAR 0 3
21465: PUSH
21466: LD_INT 102
21468: EQUAL
21469: IFFALSE 21479
// sDiff := true ;
21471: LD_ADDR_EXP 108
21475: PUSH
21476: LD_INT 1
21478: ST_TO_ADDR
// if p3 = 103 then
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 103
21486: EQUAL
21487: IFFALSE 21497
// sFog := true ;
21489: LD_ADDR_EXP 111
21493: PUSH
21494: LD_INT 1
21496: ST_TO_ADDR
// if p3 = 104 then
21497: LD_VAR 0 3
21501: PUSH
21502: LD_INT 104
21504: EQUAL
21505: IFFALSE 21515
// sReset := true ;
21507: LD_ADDR_EXP 112
21511: PUSH
21512: LD_INT 1
21514: ST_TO_ADDR
// if p3 = 105 then
21515: LD_VAR 0 3
21519: PUSH
21520: LD_INT 105
21522: EQUAL
21523: IFFALSE 21533
// sSun := true ;
21525: LD_ADDR_EXP 113
21529: PUSH
21530: LD_INT 1
21532: ST_TO_ADDR
// if p3 = 106 then
21533: LD_VAR 0 3
21537: PUSH
21538: LD_INT 106
21540: EQUAL
21541: IFFALSE 21551
// sTiger := true ;
21543: LD_ADDR_EXP 109
21547: PUSH
21548: LD_INT 1
21550: ST_TO_ADDR
// if p3 = 107 then
21551: LD_VAR 0 3
21555: PUSH
21556: LD_INT 107
21558: EQUAL
21559: IFFALSE 21569
// sBomb := true ;
21561: LD_ADDR_EXP 110
21565: PUSH
21566: LD_INT 1
21568: ST_TO_ADDR
// if p3 = 108 then
21569: LD_VAR 0 3
21573: PUSH
21574: LD_INT 108
21576: EQUAL
21577: IFFALSE 21587
// sWound := true ;
21579: LD_ADDR_EXP 118
21583: PUSH
21584: LD_INT 1
21586: ST_TO_ADDR
// if p3 = 109 then
21587: LD_VAR 0 3
21591: PUSH
21592: LD_INT 109
21594: EQUAL
21595: IFFALSE 21605
// sBetray := true ;
21597: LD_ADDR_EXP 122
21601: PUSH
21602: LD_INT 1
21604: ST_TO_ADDR
// if p3 = 110 then
21605: LD_VAR 0 3
21609: PUSH
21610: LD_INT 110
21612: EQUAL
21613: IFFALSE 21623
// sContamin := true ;
21615: LD_ADDR_EXP 123
21619: PUSH
21620: LD_INT 1
21622: ST_TO_ADDR
// if p3 = 111 then
21623: LD_VAR 0 3
21627: PUSH
21628: LD_INT 111
21630: EQUAL
21631: IFFALSE 21641
// sOil := true ;
21633: LD_ADDR_EXP 125
21637: PUSH
21638: LD_INT 1
21640: ST_TO_ADDR
// if p3 = 112 then
21641: LD_VAR 0 3
21645: PUSH
21646: LD_INT 112
21648: EQUAL
21649: IFFALSE 21659
// sStu := true ;
21651: LD_ADDR_EXP 129
21655: PUSH
21656: LD_INT 1
21658: ST_TO_ADDR
// if p3 = 113 then
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 113
21666: EQUAL
21667: IFFALSE 21677
// sBazooka := true ;
21669: LD_ADDR_EXP 132
21673: PUSH
21674: LD_INT 1
21676: ST_TO_ADDR
// if p3 = 114 then
21677: LD_VAR 0 3
21681: PUSH
21682: LD_INT 114
21684: EQUAL
21685: IFFALSE 21695
// sMortar := true ;
21687: LD_ADDR_EXP 133
21691: PUSH
21692: LD_INT 1
21694: ST_TO_ADDR
// if p3 = 115 then
21695: LD_VAR 0 3
21699: PUSH
21700: LD_INT 115
21702: EQUAL
21703: IFFALSE 21713
// sRanger := true ;
21705: LD_ADDR_EXP 143
21709: PUSH
21710: LD_INT 1
21712: ST_TO_ADDR
// end ; if p2 = 101 then
21713: LD_VAR 0 2
21717: PUSH
21718: LD_INT 101
21720: EQUAL
21721: IFFALSE 21924
// begin case p3 of 1 :
21723: LD_VAR 0 3
21727: PUSH
21728: LD_INT 1
21730: DOUBLE
21731: EQUAL
21732: IFTRUE 21736
21734: GO 21743
21736: POP
// hHackUnlimitedResources ; 2 :
21737: CALL 32018 0 0
21741: GO 21924
21743: LD_INT 2
21745: DOUBLE
21746: EQUAL
21747: IFTRUE 21751
21749: GO 21758
21751: POP
// hHackSetLevel10 ; 3 :
21752: CALL 32151 0 0
21756: GO 21924
21758: LD_INT 3
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21773
21766: POP
// hHackSetLevel10YourUnits ; 4 :
21767: CALL 32236 0 0
21771: GO 21924
21773: LD_INT 4
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21803
21781: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
21782: LD_VAR 0 4
21786: PPUSH
21787: LD_VAR 0 5
21791: PPUSH
21792: LD_VAR 0 6
21796: PPUSH
21797: CALL 32326 0 3
21801: GO 21924
21803: LD_INT 5
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21818
21811: POP
// hHackSpawnVehicle ; 6 :
21812: CALL 32387 0 0
21816: GO 21924
21818: LD_INT 6
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 21833
21826: POP
// hHackInvincible ; 7 :
21827: CALL 32933 0 0
21831: GO 21924
21833: LD_INT 7
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 21848
21841: POP
// hHackInvisible ; 8 :
21842: CALL 33044 0 0
21846: GO 21924
21848: LD_INT 8
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21863
21856: POP
// hHackChangeYourSide ; 9 :
21857: CALL 33101 0 0
21861: GO 21924
21863: LD_INT 9
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 21878
21871: POP
// hHackChangeUnitSide ; 10 :
21872: CALL 33143 0 0
21876: GO 21924
21878: LD_INT 10
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21893
21886: POP
// hHackFog ; 11 :
21887: CALL 33244 0 0
21891: GO 21924
21893: LD_INT 11
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 21908
21901: POP
// hHackApeman ; 12 :
21902: CALL 33259 0 0
21906: GO 21924
21908: LD_INT 12
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 21923
21916: POP
// hHackBoom ; end ;
21917: CALL 33344 0 0
21921: GO 21924
21923: POP
// end ; end ;
21924: PPOPN 6
21926: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21927: GO 21929
21929: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21930: LD_STRING initStreamRollete();
21932: PPUSH
21933: CALL_OW 559
// InitStreamMode ;
21937: CALL 21946 0 0
// DefineStreamItems ( ) ;
21941: CALL 22386 0 0
// end ;
21945: END
// function InitStreamMode ; begin
21946: LD_INT 0
21948: PPUSH
// streamModeActive := false ;
21949: LD_ADDR_EXP 90
21953: PUSH
21954: LD_INT 0
21956: ST_TO_ADDR
// normalCounter := 36 ;
21957: LD_ADDR_EXP 91
21961: PUSH
21962: LD_INT 36
21964: ST_TO_ADDR
// hardcoreCounter := 16 ;
21965: LD_ADDR_EXP 92
21969: PUSH
21970: LD_INT 16
21972: ST_TO_ADDR
// sRocket := false ;
21973: LD_ADDR_EXP 95
21977: PUSH
21978: LD_INT 0
21980: ST_TO_ADDR
// sSpeed := false ;
21981: LD_ADDR_EXP 94
21985: PUSH
21986: LD_INT 0
21988: ST_TO_ADDR
// sEngine := false ;
21989: LD_ADDR_EXP 96
21993: PUSH
21994: LD_INT 0
21996: ST_TO_ADDR
// sSpec := false ;
21997: LD_ADDR_EXP 93
22001: PUSH
22002: LD_INT 0
22004: ST_TO_ADDR
// sLevel := false ;
22005: LD_ADDR_EXP 97
22009: PUSH
22010: LD_INT 0
22012: ST_TO_ADDR
// sArmoury := false ;
22013: LD_ADDR_EXP 98
22017: PUSH
22018: LD_INT 0
22020: ST_TO_ADDR
// sRadar := false ;
22021: LD_ADDR_EXP 99
22025: PUSH
22026: LD_INT 0
22028: ST_TO_ADDR
// sBunker := false ;
22029: LD_ADDR_EXP 100
22033: PUSH
22034: LD_INT 0
22036: ST_TO_ADDR
// sHack := false ;
22037: LD_ADDR_EXP 101
22041: PUSH
22042: LD_INT 0
22044: ST_TO_ADDR
// sFire := false ;
22045: LD_ADDR_EXP 102
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
// sRefresh := false ;
22053: LD_ADDR_EXP 103
22057: PUSH
22058: LD_INT 0
22060: ST_TO_ADDR
// sExp := false ;
22061: LD_ADDR_EXP 104
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// sDepot := false ;
22069: LD_ADDR_EXP 105
22073: PUSH
22074: LD_INT 0
22076: ST_TO_ADDR
// sFlag := false ;
22077: LD_ADDR_EXP 106
22081: PUSH
22082: LD_INT 0
22084: ST_TO_ADDR
// sKamikadze := false ;
22085: LD_ADDR_EXP 114
22089: PUSH
22090: LD_INT 0
22092: ST_TO_ADDR
// sTroll := false ;
22093: LD_ADDR_EXP 115
22097: PUSH
22098: LD_INT 0
22100: ST_TO_ADDR
// sSlow := false ;
22101: LD_ADDR_EXP 116
22105: PUSH
22106: LD_INT 0
22108: ST_TO_ADDR
// sLack := false ;
22109: LD_ADDR_EXP 117
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
// sTank := false ;
22117: LD_ADDR_EXP 119
22121: PUSH
22122: LD_INT 0
22124: ST_TO_ADDR
// sRemote := false ;
22125: LD_ADDR_EXP 120
22129: PUSH
22130: LD_INT 0
22132: ST_TO_ADDR
// sPowell := false ;
22133: LD_ADDR_EXP 121
22137: PUSH
22138: LD_INT 0
22140: ST_TO_ADDR
// sTeleport := false ;
22141: LD_ADDR_EXP 124
22145: PUSH
22146: LD_INT 0
22148: ST_TO_ADDR
// sOilTower := false ;
22149: LD_ADDR_EXP 126
22153: PUSH
22154: LD_INT 0
22156: ST_TO_ADDR
// sShovel := false ;
22157: LD_ADDR_EXP 127
22161: PUSH
22162: LD_INT 0
22164: ST_TO_ADDR
// sSheik := false ;
22165: LD_ADDR_EXP 128
22169: PUSH
22170: LD_INT 0
22172: ST_TO_ADDR
// sEarthquake := false ;
22173: LD_ADDR_EXP 130
22177: PUSH
22178: LD_INT 0
22180: ST_TO_ADDR
// sAI := false ;
22181: LD_ADDR_EXP 131
22185: PUSH
22186: LD_INT 0
22188: ST_TO_ADDR
// sCargo := false ;
22189: LD_ADDR_EXP 134
22193: PUSH
22194: LD_INT 0
22196: ST_TO_ADDR
// sDLaser := false ;
22197: LD_ADDR_EXP 135
22201: PUSH
22202: LD_INT 0
22204: ST_TO_ADDR
// sExchange := false ;
22205: LD_ADDR_EXP 136
22209: PUSH
22210: LD_INT 0
22212: ST_TO_ADDR
// sFac := false ;
22213: LD_ADDR_EXP 137
22217: PUSH
22218: LD_INT 0
22220: ST_TO_ADDR
// sPower := false ;
22221: LD_ADDR_EXP 138
22225: PUSH
22226: LD_INT 0
22228: ST_TO_ADDR
// sRandom := false ;
22229: LD_ADDR_EXP 139
22233: PUSH
22234: LD_INT 0
22236: ST_TO_ADDR
// sShield := false ;
22237: LD_ADDR_EXP 140
22241: PUSH
22242: LD_INT 0
22244: ST_TO_ADDR
// sTime := false ;
22245: LD_ADDR_EXP 141
22249: PUSH
22250: LD_INT 0
22252: ST_TO_ADDR
// sTools := false ;
22253: LD_ADDR_EXP 142
22257: PUSH
22258: LD_INT 0
22260: ST_TO_ADDR
// sSold := false ;
22261: LD_ADDR_EXP 107
22265: PUSH
22266: LD_INT 0
22268: ST_TO_ADDR
// sDiff := false ;
22269: LD_ADDR_EXP 108
22273: PUSH
22274: LD_INT 0
22276: ST_TO_ADDR
// sFog := false ;
22277: LD_ADDR_EXP 111
22281: PUSH
22282: LD_INT 0
22284: ST_TO_ADDR
// sReset := false ;
22285: LD_ADDR_EXP 112
22289: PUSH
22290: LD_INT 0
22292: ST_TO_ADDR
// sSun := false ;
22293: LD_ADDR_EXP 113
22297: PUSH
22298: LD_INT 0
22300: ST_TO_ADDR
// sTiger := false ;
22301: LD_ADDR_EXP 109
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// sBomb := false ;
22309: LD_ADDR_EXP 110
22313: PUSH
22314: LD_INT 0
22316: ST_TO_ADDR
// sWound := false ;
22317: LD_ADDR_EXP 118
22321: PUSH
22322: LD_INT 0
22324: ST_TO_ADDR
// sBetray := false ;
22325: LD_ADDR_EXP 122
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// sContamin := false ;
22333: LD_ADDR_EXP 123
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// sOil := false ;
22341: LD_ADDR_EXP 125
22345: PUSH
22346: LD_INT 0
22348: ST_TO_ADDR
// sStu := false ;
22349: LD_ADDR_EXP 129
22353: PUSH
22354: LD_INT 0
22356: ST_TO_ADDR
// sBazooka := false ;
22357: LD_ADDR_EXP 132
22361: PUSH
22362: LD_INT 0
22364: ST_TO_ADDR
// sMortar := false ;
22365: LD_ADDR_EXP 133
22369: PUSH
22370: LD_INT 0
22372: ST_TO_ADDR
// sRanger := false ;
22373: LD_ADDR_EXP 143
22377: PUSH
22378: LD_INT 0
22380: ST_TO_ADDR
// end ;
22381: LD_VAR 0 1
22385: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
22392: PPUSH
// result := [ ] ;
22393: LD_ADDR_VAR 0 1
22397: PUSH
22398: EMPTY
22399: ST_TO_ADDR
// if campaign_id = 1 then
22400: LD_OWVAR 69
22404: PUSH
22405: LD_INT 1
22407: EQUAL
22408: IFFALSE 25346
// begin case mission_number of 1 :
22410: LD_OWVAR 70
22414: PUSH
22415: LD_INT 1
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22487
22423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22424: LD_ADDR_VAR 0 1
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 4
22434: PUSH
22435: LD_INT 11
22437: PUSH
22438: LD_INT 12
22440: PUSH
22441: LD_INT 15
22443: PUSH
22444: LD_INT 16
22446: PUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 23
22452: PUSH
22453: LD_INT 26
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 101
22469: PUSH
22470: LD_INT 102
22472: PUSH
22473: LD_INT 106
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: ST_TO_ADDR
22485: GO 25344
22487: LD_INT 2
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22567
22495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 4
22506: PUSH
22507: LD_INT 11
22509: PUSH
22510: LD_INT 12
22512: PUSH
22513: LD_INT 15
22515: PUSH
22516: LD_INT 16
22518: PUSH
22519: LD_INT 22
22521: PUSH
22522: LD_INT 23
22524: PUSH
22525: LD_INT 26
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 101
22541: PUSH
22542: LD_INT 102
22544: PUSH
22545: LD_INT 105
22547: PUSH
22548: LD_INT 106
22550: PUSH
22551: LD_INT 108
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: ST_TO_ADDR
22565: GO 25344
22567: LD_INT 3
22569: DOUBLE
22570: EQUAL
22571: IFTRUE 22575
22573: GO 22651
22575: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22576: LD_ADDR_VAR 0 1
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 4
22586: PUSH
22587: LD_INT 5
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 12
22595: PUSH
22596: LD_INT 15
22598: PUSH
22599: LD_INT 16
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 26
22607: PUSH
22608: LD_INT 36
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 101
22625: PUSH
22626: LD_INT 102
22628: PUSH
22629: LD_INT 105
22631: PUSH
22632: LD_INT 106
22634: PUSH
22635: LD_INT 108
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: ST_TO_ADDR
22649: GO 25344
22651: LD_INT 4
22653: DOUBLE
22654: EQUAL
22655: IFTRUE 22659
22657: GO 22743
22659: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22660: LD_ADDR_VAR 0 1
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 4
22670: PUSH
22671: LD_INT 5
22673: PUSH
22674: LD_INT 8
22676: PUSH
22677: LD_INT 11
22679: PUSH
22680: LD_INT 12
22682: PUSH
22683: LD_INT 15
22685: PUSH
22686: LD_INT 16
22688: PUSH
22689: LD_INT 22
22691: PUSH
22692: LD_INT 23
22694: PUSH
22695: LD_INT 26
22697: PUSH
22698: LD_INT 36
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 101
22717: PUSH
22718: LD_INT 102
22720: PUSH
22721: LD_INT 105
22723: PUSH
22724: LD_INT 106
22726: PUSH
22727: LD_INT 108
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: ST_TO_ADDR
22741: GO 25344
22743: LD_INT 5
22745: DOUBLE
22746: EQUAL
22747: IFTRUE 22751
22749: GO 22851
22751: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 4
22762: PUSH
22763: LD_INT 5
22765: PUSH
22766: LD_INT 6
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 11
22774: PUSH
22775: LD_INT 12
22777: PUSH
22778: LD_INT 15
22780: PUSH
22781: LD_INT 16
22783: PUSH
22784: LD_INT 22
22786: PUSH
22787: LD_INT 23
22789: PUSH
22790: LD_INT 25
22792: PUSH
22793: LD_INT 26
22795: PUSH
22796: LD_INT 36
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 101
22817: PUSH
22818: LD_INT 102
22820: PUSH
22821: LD_INT 105
22823: PUSH
22824: LD_INT 106
22826: PUSH
22827: LD_INT 108
22829: PUSH
22830: LD_INT 109
22832: PUSH
22833: LD_INT 112
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: ST_TO_ADDR
22849: GO 25344
22851: LD_INT 6
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 22979
22859: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22860: LD_ADDR_VAR 0 1
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 4
22870: PUSH
22871: LD_INT 5
22873: PUSH
22874: LD_INT 6
22876: PUSH
22877: LD_INT 8
22879: PUSH
22880: LD_INT 11
22882: PUSH
22883: LD_INT 12
22885: PUSH
22886: LD_INT 15
22888: PUSH
22889: LD_INT 16
22891: PUSH
22892: LD_INT 20
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 22
22900: PUSH
22901: LD_INT 23
22903: PUSH
22904: LD_INT 25
22906: PUSH
22907: LD_INT 26
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 31
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 36
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 101
22945: PUSH
22946: LD_INT 102
22948: PUSH
22949: LD_INT 105
22951: PUSH
22952: LD_INT 106
22954: PUSH
22955: LD_INT 108
22957: PUSH
22958: LD_INT 109
22960: PUSH
22961: LD_INT 112
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: ST_TO_ADDR
22977: GO 25344
22979: LD_INT 7
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 23087
22987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22988: LD_ADDR_VAR 0 1
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 4
22998: PUSH
22999: LD_INT 5
23001: PUSH
23002: LD_INT 7
23004: PUSH
23005: LD_INT 11
23007: PUSH
23008: LD_INT 12
23010: PUSH
23011: LD_INT 15
23013: PUSH
23014: LD_INT 16
23016: PUSH
23017: LD_INT 20
23019: PUSH
23020: LD_INT 21
23022: PUSH
23023: LD_INT 22
23025: PUSH
23026: LD_INT 23
23028: PUSH
23029: LD_INT 25
23031: PUSH
23032: LD_INT 26
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 101
23053: PUSH
23054: LD_INT 102
23056: PUSH
23057: LD_INT 103
23059: PUSH
23060: LD_INT 105
23062: PUSH
23063: LD_INT 106
23065: PUSH
23066: LD_INT 108
23068: PUSH
23069: LD_INT 112
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: ST_TO_ADDR
23085: GO 25344
23087: LD_INT 8
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23223
23095: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23096: LD_ADDR_VAR 0 1
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 4
23106: PUSH
23107: LD_INT 5
23109: PUSH
23110: LD_INT 6
23112: PUSH
23113: LD_INT 7
23115: PUSH
23116: LD_INT 8
23118: PUSH
23119: LD_INT 11
23121: PUSH
23122: LD_INT 12
23124: PUSH
23125: LD_INT 15
23127: PUSH
23128: LD_INT 16
23130: PUSH
23131: LD_INT 20
23133: PUSH
23134: LD_INT 21
23136: PUSH
23137: LD_INT 22
23139: PUSH
23140: LD_INT 23
23142: PUSH
23143: LD_INT 25
23145: PUSH
23146: LD_INT 26
23148: PUSH
23149: LD_INT 30
23151: PUSH
23152: LD_INT 31
23154: PUSH
23155: LD_INT 32
23157: PUSH
23158: LD_INT 36
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 101
23185: PUSH
23186: LD_INT 102
23188: PUSH
23189: LD_INT 103
23191: PUSH
23192: LD_INT 105
23194: PUSH
23195: LD_INT 106
23197: PUSH
23198: LD_INT 108
23200: PUSH
23201: LD_INT 109
23203: PUSH
23204: LD_INT 112
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: ST_TO_ADDR
23221: GO 25344
23223: LD_INT 9
23225: DOUBLE
23226: EQUAL
23227: IFTRUE 23231
23229: GO 23367
23231: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23232: LD_ADDR_VAR 0 1
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 4
23242: PUSH
23243: LD_INT 5
23245: PUSH
23246: LD_INT 6
23248: PUSH
23249: LD_INT 7
23251: PUSH
23252: LD_INT 8
23254: PUSH
23255: LD_INT 11
23257: PUSH
23258: LD_INT 12
23260: PUSH
23261: LD_INT 15
23263: PUSH
23264: LD_INT 16
23266: PUSH
23267: LD_INT 20
23269: PUSH
23270: LD_INT 21
23272: PUSH
23273: LD_INT 22
23275: PUSH
23276: LD_INT 23
23278: PUSH
23279: LD_INT 25
23281: PUSH
23282: LD_INT 26
23284: PUSH
23285: LD_INT 28
23287: PUSH
23288: LD_INT 30
23290: PUSH
23291: LD_INT 31
23293: PUSH
23294: LD_INT 32
23296: PUSH
23297: LD_INT 36
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 101
23325: PUSH
23326: LD_INT 102
23328: PUSH
23329: LD_INT 103
23331: PUSH
23332: LD_INT 105
23334: PUSH
23335: LD_INT 106
23337: PUSH
23338: LD_INT 108
23340: PUSH
23341: LD_INT 109
23343: PUSH
23344: LD_INT 112
23346: PUSH
23347: LD_INT 114
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: ST_TO_ADDR
23365: GO 25344
23367: LD_INT 10
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23559
23375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 4
23386: PUSH
23387: LD_INT 5
23389: PUSH
23390: LD_INT 6
23392: PUSH
23393: LD_INT 7
23395: PUSH
23396: LD_INT 8
23398: PUSH
23399: LD_INT 9
23401: PUSH
23402: LD_INT 10
23404: PUSH
23405: LD_INT 11
23407: PUSH
23408: LD_INT 12
23410: PUSH
23411: LD_INT 13
23413: PUSH
23414: LD_INT 14
23416: PUSH
23417: LD_INT 15
23419: PUSH
23420: LD_INT 16
23422: PUSH
23423: LD_INT 17
23425: PUSH
23426: LD_INT 18
23428: PUSH
23429: LD_INT 19
23431: PUSH
23432: LD_INT 20
23434: PUSH
23435: LD_INT 21
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_INT 23
23443: PUSH
23444: LD_INT 24
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 26
23452: PUSH
23453: LD_INT 28
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 31
23461: PUSH
23462: LD_INT 32
23464: PUSH
23465: LD_INT 36
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 101
23501: PUSH
23502: LD_INT 102
23504: PUSH
23505: LD_INT 103
23507: PUSH
23508: LD_INT 104
23510: PUSH
23511: LD_INT 105
23513: PUSH
23514: LD_INT 106
23516: PUSH
23517: LD_INT 107
23519: PUSH
23520: LD_INT 108
23522: PUSH
23523: LD_INT 109
23525: PUSH
23526: LD_INT 110
23528: PUSH
23529: LD_INT 111
23531: PUSH
23532: LD_INT 112
23534: PUSH
23535: LD_INT 114
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: ST_TO_ADDR
23557: GO 25344
23559: LD_INT 11
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23759
23567: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23568: LD_ADDR_VAR 0 1
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 3
23578: PUSH
23579: LD_INT 4
23581: PUSH
23582: LD_INT 5
23584: PUSH
23585: LD_INT 6
23587: PUSH
23588: LD_INT 7
23590: PUSH
23591: LD_INT 8
23593: PUSH
23594: LD_INT 9
23596: PUSH
23597: LD_INT 10
23599: PUSH
23600: LD_INT 11
23602: PUSH
23603: LD_INT 12
23605: PUSH
23606: LD_INT 13
23608: PUSH
23609: LD_INT 14
23611: PUSH
23612: LD_INT 15
23614: PUSH
23615: LD_INT 16
23617: PUSH
23618: LD_INT 17
23620: PUSH
23621: LD_INT 18
23623: PUSH
23624: LD_INT 19
23626: PUSH
23627: LD_INT 20
23629: PUSH
23630: LD_INT 21
23632: PUSH
23633: LD_INT 22
23635: PUSH
23636: LD_INT 23
23638: PUSH
23639: LD_INT 24
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 26
23647: PUSH
23648: LD_INT 28
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: LD_INT 31
23656: PUSH
23657: LD_INT 32
23659: PUSH
23660: LD_INT 34
23662: PUSH
23663: LD_INT 36
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 101
23701: PUSH
23702: LD_INT 102
23704: PUSH
23705: LD_INT 103
23707: PUSH
23708: LD_INT 104
23710: PUSH
23711: LD_INT 105
23713: PUSH
23714: LD_INT 106
23716: PUSH
23717: LD_INT 107
23719: PUSH
23720: LD_INT 108
23722: PUSH
23723: LD_INT 109
23725: PUSH
23726: LD_INT 110
23728: PUSH
23729: LD_INT 111
23731: PUSH
23732: LD_INT 112
23734: PUSH
23735: LD_INT 114
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: ST_TO_ADDR
23757: GO 25344
23759: LD_INT 12
23761: DOUBLE
23762: EQUAL
23763: IFTRUE 23767
23765: GO 23975
23767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23768: LD_ADDR_VAR 0 1
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 4
23784: PUSH
23785: LD_INT 5
23787: PUSH
23788: LD_INT 6
23790: PUSH
23791: LD_INT 7
23793: PUSH
23794: LD_INT 8
23796: PUSH
23797: LD_INT 9
23799: PUSH
23800: LD_INT 10
23802: PUSH
23803: LD_INT 11
23805: PUSH
23806: LD_INT 12
23808: PUSH
23809: LD_INT 13
23811: PUSH
23812: LD_INT 14
23814: PUSH
23815: LD_INT 15
23817: PUSH
23818: LD_INT 16
23820: PUSH
23821: LD_INT 17
23823: PUSH
23824: LD_INT 18
23826: PUSH
23827: LD_INT 19
23829: PUSH
23830: LD_INT 20
23832: PUSH
23833: LD_INT 21
23835: PUSH
23836: LD_INT 22
23838: PUSH
23839: LD_INT 23
23841: PUSH
23842: LD_INT 24
23844: PUSH
23845: LD_INT 25
23847: PUSH
23848: LD_INT 26
23850: PUSH
23851: LD_INT 27
23853: PUSH
23854: LD_INT 28
23856: PUSH
23857: LD_INT 30
23859: PUSH
23860: LD_INT 31
23862: PUSH
23863: LD_INT 32
23865: PUSH
23866: LD_INT 33
23868: PUSH
23869: LD_INT 34
23871: PUSH
23872: LD_INT 36
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 101
23913: PUSH
23914: LD_INT 102
23916: PUSH
23917: LD_INT 103
23919: PUSH
23920: LD_INT 104
23922: PUSH
23923: LD_INT 105
23925: PUSH
23926: LD_INT 106
23928: PUSH
23929: LD_INT 107
23931: PUSH
23932: LD_INT 108
23934: PUSH
23935: LD_INT 109
23937: PUSH
23938: LD_INT 110
23940: PUSH
23941: LD_INT 111
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 113
23949: PUSH
23950: LD_INT 114
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: ST_TO_ADDR
23973: GO 25344
23975: LD_INT 13
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 24179
23983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23984: LD_ADDR_VAR 0 1
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 3
23997: PUSH
23998: LD_INT 4
24000: PUSH
24001: LD_INT 5
24003: PUSH
24004: LD_INT 8
24006: PUSH
24007: LD_INT 9
24009: PUSH
24010: LD_INT 10
24012: PUSH
24013: LD_INT 11
24015: PUSH
24016: LD_INT 12
24018: PUSH
24019: LD_INT 14
24021: PUSH
24022: LD_INT 15
24024: PUSH
24025: LD_INT 16
24027: PUSH
24028: LD_INT 17
24030: PUSH
24031: LD_INT 18
24033: PUSH
24034: LD_INT 19
24036: PUSH
24037: LD_INT 20
24039: PUSH
24040: LD_INT 21
24042: PUSH
24043: LD_INT 22
24045: PUSH
24046: LD_INT 23
24048: PUSH
24049: LD_INT 24
24051: PUSH
24052: LD_INT 25
24054: PUSH
24055: LD_INT 26
24057: PUSH
24058: LD_INT 27
24060: PUSH
24061: LD_INT 28
24063: PUSH
24064: LD_INT 30
24066: PUSH
24067: LD_INT 31
24069: PUSH
24070: LD_INT 32
24072: PUSH
24073: LD_INT 33
24075: PUSH
24076: LD_INT 34
24078: PUSH
24079: LD_INT 36
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 101
24117: PUSH
24118: LD_INT 102
24120: PUSH
24121: LD_INT 103
24123: PUSH
24124: LD_INT 104
24126: PUSH
24127: LD_INT 105
24129: PUSH
24130: LD_INT 106
24132: PUSH
24133: LD_INT 107
24135: PUSH
24136: LD_INT 108
24138: PUSH
24139: LD_INT 109
24141: PUSH
24142: LD_INT 110
24144: PUSH
24145: LD_INT 111
24147: PUSH
24148: LD_INT 112
24150: PUSH
24151: LD_INT 113
24153: PUSH
24154: LD_INT 114
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: ST_TO_ADDR
24177: GO 25344
24179: LD_INT 14
24181: DOUBLE
24182: EQUAL
24183: IFTRUE 24187
24185: GO 24399
24187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24188: LD_ADDR_VAR 0 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 3
24201: PUSH
24202: LD_INT 4
24204: PUSH
24205: LD_INT 5
24207: PUSH
24208: LD_INT 6
24210: PUSH
24211: LD_INT 7
24213: PUSH
24214: LD_INT 8
24216: PUSH
24217: LD_INT 9
24219: PUSH
24220: LD_INT 10
24222: PUSH
24223: LD_INT 11
24225: PUSH
24226: LD_INT 12
24228: PUSH
24229: LD_INT 13
24231: PUSH
24232: LD_INT 14
24234: PUSH
24235: LD_INT 15
24237: PUSH
24238: LD_INT 16
24240: PUSH
24241: LD_INT 17
24243: PUSH
24244: LD_INT 18
24246: PUSH
24247: LD_INT 19
24249: PUSH
24250: LD_INT 20
24252: PUSH
24253: LD_INT 21
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_INT 23
24261: PUSH
24262: LD_INT 24
24264: PUSH
24265: LD_INT 25
24267: PUSH
24268: LD_INT 26
24270: PUSH
24271: LD_INT 27
24273: PUSH
24274: LD_INT 28
24276: PUSH
24277: LD_INT 29
24279: PUSH
24280: LD_INT 30
24282: PUSH
24283: LD_INT 31
24285: PUSH
24286: LD_INT 32
24288: PUSH
24289: LD_INT 33
24291: PUSH
24292: LD_INT 34
24294: PUSH
24295: LD_INT 36
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 101
24337: PUSH
24338: LD_INT 102
24340: PUSH
24341: LD_INT 103
24343: PUSH
24344: LD_INT 104
24346: PUSH
24347: LD_INT 105
24349: PUSH
24350: LD_INT 106
24352: PUSH
24353: LD_INT 107
24355: PUSH
24356: LD_INT 108
24358: PUSH
24359: LD_INT 109
24361: PUSH
24362: LD_INT 110
24364: PUSH
24365: LD_INT 111
24367: PUSH
24368: LD_INT 112
24370: PUSH
24371: LD_INT 113
24373: PUSH
24374: LD_INT 114
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: ST_TO_ADDR
24397: GO 25344
24399: LD_INT 15
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24619
24407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24408: LD_ADDR_VAR 0 1
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 3
24421: PUSH
24422: LD_INT 4
24424: PUSH
24425: LD_INT 5
24427: PUSH
24428: LD_INT 6
24430: PUSH
24431: LD_INT 7
24433: PUSH
24434: LD_INT 8
24436: PUSH
24437: LD_INT 9
24439: PUSH
24440: LD_INT 10
24442: PUSH
24443: LD_INT 11
24445: PUSH
24446: LD_INT 12
24448: PUSH
24449: LD_INT 13
24451: PUSH
24452: LD_INT 14
24454: PUSH
24455: LD_INT 15
24457: PUSH
24458: LD_INT 16
24460: PUSH
24461: LD_INT 17
24463: PUSH
24464: LD_INT 18
24466: PUSH
24467: LD_INT 19
24469: PUSH
24470: LD_INT 20
24472: PUSH
24473: LD_INT 21
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_INT 23
24481: PUSH
24482: LD_INT 24
24484: PUSH
24485: LD_INT 25
24487: PUSH
24488: LD_INT 26
24490: PUSH
24491: LD_INT 27
24493: PUSH
24494: LD_INT 28
24496: PUSH
24497: LD_INT 29
24499: PUSH
24500: LD_INT 30
24502: PUSH
24503: LD_INT 31
24505: PUSH
24506: LD_INT 32
24508: PUSH
24509: LD_INT 33
24511: PUSH
24512: LD_INT 34
24514: PUSH
24515: LD_INT 36
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 101
24557: PUSH
24558: LD_INT 102
24560: PUSH
24561: LD_INT 103
24563: PUSH
24564: LD_INT 104
24566: PUSH
24567: LD_INT 105
24569: PUSH
24570: LD_INT 106
24572: PUSH
24573: LD_INT 107
24575: PUSH
24576: LD_INT 108
24578: PUSH
24579: LD_INT 109
24581: PUSH
24582: LD_INT 110
24584: PUSH
24585: LD_INT 111
24587: PUSH
24588: LD_INT 112
24590: PUSH
24591: LD_INT 113
24593: PUSH
24594: LD_INT 114
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: ST_TO_ADDR
24617: GO 25344
24619: LD_INT 16
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24751
24627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24628: LD_ADDR_VAR 0 1
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 4
24638: PUSH
24639: LD_INT 5
24641: PUSH
24642: LD_INT 7
24644: PUSH
24645: LD_INT 11
24647: PUSH
24648: LD_INT 12
24650: PUSH
24651: LD_INT 15
24653: PUSH
24654: LD_INT 16
24656: PUSH
24657: LD_INT 20
24659: PUSH
24660: LD_INT 21
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_INT 23
24668: PUSH
24669: LD_INT 25
24671: PUSH
24672: LD_INT 26
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 31
24680: PUSH
24681: LD_INT 32
24683: PUSH
24684: LD_INT 33
24686: PUSH
24687: LD_INT 34
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 101
24713: PUSH
24714: LD_INT 102
24716: PUSH
24717: LD_INT 103
24719: PUSH
24720: LD_INT 106
24722: PUSH
24723: LD_INT 108
24725: PUSH
24726: LD_INT 112
24728: PUSH
24729: LD_INT 113
24731: PUSH
24732: LD_INT 114
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25344
24751: LD_INT 17
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24971
24759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24760: LD_ADDR_VAR 0 1
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: LD_INT 4
24776: PUSH
24777: LD_INT 5
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 7
24785: PUSH
24786: LD_INT 8
24788: PUSH
24789: LD_INT 9
24791: PUSH
24792: LD_INT 10
24794: PUSH
24795: LD_INT 11
24797: PUSH
24798: LD_INT 12
24800: PUSH
24801: LD_INT 13
24803: PUSH
24804: LD_INT 14
24806: PUSH
24807: LD_INT 15
24809: PUSH
24810: LD_INT 16
24812: PUSH
24813: LD_INT 17
24815: PUSH
24816: LD_INT 18
24818: PUSH
24819: LD_INT 19
24821: PUSH
24822: LD_INT 20
24824: PUSH
24825: LD_INT 21
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 24
24836: PUSH
24837: LD_INT 25
24839: PUSH
24840: LD_INT 26
24842: PUSH
24843: LD_INT 27
24845: PUSH
24846: LD_INT 28
24848: PUSH
24849: LD_INT 29
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 31
24857: PUSH
24858: LD_INT 32
24860: PUSH
24861: LD_INT 33
24863: PUSH
24864: LD_INT 34
24866: PUSH
24867: LD_INT 36
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 101
24909: PUSH
24910: LD_INT 102
24912: PUSH
24913: LD_INT 103
24915: PUSH
24916: LD_INT 104
24918: PUSH
24919: LD_INT 105
24921: PUSH
24922: LD_INT 106
24924: PUSH
24925: LD_INT 107
24927: PUSH
24928: LD_INT 108
24930: PUSH
24931: LD_INT 109
24933: PUSH
24934: LD_INT 110
24936: PUSH
24937: LD_INT 111
24939: PUSH
24940: LD_INT 112
24942: PUSH
24943: LD_INT 113
24945: PUSH
24946: LD_INT 114
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: ST_TO_ADDR
24969: GO 25344
24971: LD_INT 18
24973: DOUBLE
24974: EQUAL
24975: IFTRUE 24979
24977: GO 25115
24979: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: LD_INT 4
24990: PUSH
24991: LD_INT 5
24993: PUSH
24994: LD_INT 7
24996: PUSH
24997: LD_INT 11
24999: PUSH
25000: LD_INT 12
25002: PUSH
25003: LD_INT 15
25005: PUSH
25006: LD_INT 16
25008: PUSH
25009: LD_INT 20
25011: PUSH
25012: LD_INT 21
25014: PUSH
25015: LD_INT 22
25017: PUSH
25018: LD_INT 23
25020: PUSH
25021: LD_INT 25
25023: PUSH
25024: LD_INT 26
25026: PUSH
25027: LD_INT 30
25029: PUSH
25030: LD_INT 31
25032: PUSH
25033: LD_INT 32
25035: PUSH
25036: LD_INT 33
25038: PUSH
25039: LD_INT 34
25041: PUSH
25042: LD_INT 35
25044: PUSH
25045: LD_INT 36
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 101
25073: PUSH
25074: LD_INT 102
25076: PUSH
25077: LD_INT 103
25079: PUSH
25080: LD_INT 106
25082: PUSH
25083: LD_INT 108
25085: PUSH
25086: LD_INT 112
25088: PUSH
25089: LD_INT 113
25091: PUSH
25092: LD_INT 114
25094: PUSH
25095: LD_INT 115
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: ST_TO_ADDR
25113: GO 25344
25115: LD_INT 19
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 25343
25123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: LD_INT 4
25140: PUSH
25141: LD_INT 5
25143: PUSH
25144: LD_INT 6
25146: PUSH
25147: LD_INT 7
25149: PUSH
25150: LD_INT 8
25152: PUSH
25153: LD_INT 9
25155: PUSH
25156: LD_INT 10
25158: PUSH
25159: LD_INT 11
25161: PUSH
25162: LD_INT 12
25164: PUSH
25165: LD_INT 13
25167: PUSH
25168: LD_INT 14
25170: PUSH
25171: LD_INT 15
25173: PUSH
25174: LD_INT 16
25176: PUSH
25177: LD_INT 17
25179: PUSH
25180: LD_INT 18
25182: PUSH
25183: LD_INT 19
25185: PUSH
25186: LD_INT 20
25188: PUSH
25189: LD_INT 21
25191: PUSH
25192: LD_INT 22
25194: PUSH
25195: LD_INT 23
25197: PUSH
25198: LD_INT 24
25200: PUSH
25201: LD_INT 25
25203: PUSH
25204: LD_INT 26
25206: PUSH
25207: LD_INT 27
25209: PUSH
25210: LD_INT 28
25212: PUSH
25213: LD_INT 29
25215: PUSH
25216: LD_INT 30
25218: PUSH
25219: LD_INT 31
25221: PUSH
25222: LD_INT 32
25224: PUSH
25225: LD_INT 33
25227: PUSH
25228: LD_INT 34
25230: PUSH
25231: LD_INT 35
25233: PUSH
25234: LD_INT 36
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 101
25277: PUSH
25278: LD_INT 102
25280: PUSH
25281: LD_INT 103
25283: PUSH
25284: LD_INT 104
25286: PUSH
25287: LD_INT 105
25289: PUSH
25290: LD_INT 106
25292: PUSH
25293: LD_INT 107
25295: PUSH
25296: LD_INT 108
25298: PUSH
25299: LD_INT 109
25301: PUSH
25302: LD_INT 110
25304: PUSH
25305: LD_INT 111
25307: PUSH
25308: LD_INT 112
25310: PUSH
25311: LD_INT 113
25313: PUSH
25314: LD_INT 114
25316: PUSH
25317: LD_INT 115
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: ST_TO_ADDR
25341: GO 25344
25343: POP
// end else
25344: GO 25563
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25346: LD_ADDR_VAR 0 1
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 4
25362: PUSH
25363: LD_INT 5
25365: PUSH
25366: LD_INT 6
25368: PUSH
25369: LD_INT 7
25371: PUSH
25372: LD_INT 8
25374: PUSH
25375: LD_INT 9
25377: PUSH
25378: LD_INT 10
25380: PUSH
25381: LD_INT 11
25383: PUSH
25384: LD_INT 12
25386: PUSH
25387: LD_INT 13
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: LD_INT 15
25395: PUSH
25396: LD_INT 16
25398: PUSH
25399: LD_INT 17
25401: PUSH
25402: LD_INT 18
25404: PUSH
25405: LD_INT 19
25407: PUSH
25408: LD_INT 20
25410: PUSH
25411: LD_INT 21
25413: PUSH
25414: LD_INT 22
25416: PUSH
25417: LD_INT 23
25419: PUSH
25420: LD_INT 24
25422: PUSH
25423: LD_INT 25
25425: PUSH
25426: LD_INT 26
25428: PUSH
25429: LD_INT 27
25431: PUSH
25432: LD_INT 28
25434: PUSH
25435: LD_INT 29
25437: PUSH
25438: LD_INT 30
25440: PUSH
25441: LD_INT 31
25443: PUSH
25444: LD_INT 32
25446: PUSH
25447: LD_INT 33
25449: PUSH
25450: LD_INT 34
25452: PUSH
25453: LD_INT 35
25455: PUSH
25456: LD_INT 36
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 101
25499: PUSH
25500: LD_INT 102
25502: PUSH
25503: LD_INT 103
25505: PUSH
25506: LD_INT 104
25508: PUSH
25509: LD_INT 105
25511: PUSH
25512: LD_INT 106
25514: PUSH
25515: LD_INT 107
25517: PUSH
25518: LD_INT 108
25520: PUSH
25521: LD_INT 109
25523: PUSH
25524: LD_INT 110
25526: PUSH
25527: LD_INT 111
25529: PUSH
25530: LD_INT 112
25532: PUSH
25533: LD_INT 113
25535: PUSH
25536: LD_INT 114
25538: PUSH
25539: LD_INT 115
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: ST_TO_ADDR
// if result then
25563: LD_VAR 0 1
25567: IFFALSE 25856
// begin normal :=  ;
25569: LD_ADDR_VAR 0 3
25573: PUSH
25574: LD_STRING 
25576: ST_TO_ADDR
// hardcore :=  ;
25577: LD_ADDR_VAR 0 4
25581: PUSH
25582: LD_STRING 
25584: ST_TO_ADDR
// for i = 1 to normalCounter do
25585: LD_ADDR_VAR 0 5
25589: PUSH
25590: DOUBLE
25591: LD_INT 1
25593: DEC
25594: ST_TO_ADDR
25595: LD_EXP 91
25599: PUSH
25600: FOR_TO
25601: IFFALSE 25702
// begin tmp := 0 ;
25603: LD_ADDR_VAR 0 2
25607: PUSH
25608: LD_STRING 0
25610: ST_TO_ADDR
// if result [ 1 ] then
25611: LD_VAR 0 1
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: IFFALSE 25684
// if result [ 1 ] [ 1 ] = i then
25621: LD_VAR 0 1
25625: PUSH
25626: LD_INT 1
25628: ARRAY
25629: PUSH
25630: LD_INT 1
25632: ARRAY
25633: PUSH
25634: LD_VAR 0 5
25638: EQUAL
25639: IFFALSE 25684
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25641: LD_ADDR_VAR 0 1
25645: PUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: LD_VAR 0 1
25658: PUSH
25659: LD_INT 1
25661: ARRAY
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 3
25670: PPUSH
25671: CALL_OW 1
25675: ST_TO_ADDR
// tmp := 1 ;
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: LD_STRING 1
25683: ST_TO_ADDR
// end ; normal := normal & tmp ;
25684: LD_ADDR_VAR 0 3
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_VAR 0 2
25698: STR
25699: ST_TO_ADDR
// end ;
25700: GO 25600
25702: POP
25703: POP
// for i = 1 to hardcoreCounter do
25704: LD_ADDR_VAR 0 5
25708: PUSH
25709: DOUBLE
25710: LD_INT 1
25712: DEC
25713: ST_TO_ADDR
25714: LD_EXP 92
25718: PUSH
25719: FOR_TO
25720: IFFALSE 25825
// begin tmp := 0 ;
25722: LD_ADDR_VAR 0 2
25726: PUSH
25727: LD_STRING 0
25729: ST_TO_ADDR
// if result [ 2 ] then
25730: LD_VAR 0 1
25734: PUSH
25735: LD_INT 2
25737: ARRAY
25738: IFFALSE 25807
// if result [ 2 ] [ 1 ] = 100 + i then
25740: LD_VAR 0 1
25744: PUSH
25745: LD_INT 2
25747: ARRAY
25748: PUSH
25749: LD_INT 1
25751: ARRAY
25752: PUSH
25753: LD_INT 100
25755: PUSH
25756: LD_VAR 0 5
25760: PLUS
25761: EQUAL
25762: IFFALSE 25807
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: LD_INT 2
25776: PPUSH
25777: LD_VAR 0 1
25781: PUSH
25782: LD_INT 2
25784: ARRAY
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 3
25793: PPUSH
25794: CALL_OW 1
25798: ST_TO_ADDR
// tmp := 1 ;
25799: LD_ADDR_VAR 0 2
25803: PUSH
25804: LD_STRING 1
25806: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25807: LD_ADDR_VAR 0 4
25811: PUSH
25812: LD_VAR 0 4
25816: PUSH
25817: LD_VAR 0 2
25821: STR
25822: ST_TO_ADDR
// end ;
25823: GO 25719
25825: POP
25826: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25827: LD_STRING getStreamItemsFromMission("
25829: PUSH
25830: LD_VAR 0 3
25834: STR
25835: PUSH
25836: LD_STRING ","
25838: STR
25839: PUSH
25840: LD_VAR 0 4
25844: STR
25845: PUSH
25846: LD_STRING ")
25848: STR
25849: PPUSH
25850: CALL_OW 559
// end else
25854: GO 25863
// ToLua ( getStreamItemsFromMission("","") ) ;
25856: LD_STRING getStreamItemsFromMission("","")
25858: PPUSH
25859: CALL_OW 559
// end ;
25863: LD_VAR 0 1
25867: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25868: LD_EXP 90
25872: PUSH
25873: LD_EXP 95
25877: AND
25878: IFFALSE 26002
25880: GO 25882
25882: DISABLE
25883: LD_INT 0
25885: PPUSH
25886: PPUSH
// begin enable ;
25887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25888: LD_ADDR_VAR 0 2
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_OWVAR 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 34
25910: PUSH
25911: LD_INT 7
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 34
25920: PUSH
25921: LD_INT 45
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 28
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 34
25940: PUSH
25941: LD_INT 47
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: ST_TO_ADDR
// if not tmp then
25964: LD_VAR 0 2
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26002
// for i in tmp do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_VAR 0 2
25982: PUSH
25983: FOR_IN
25984: IFFALSE 26000
// begin SetLives ( i , 0 ) ;
25986: LD_VAR 0 1
25990: PPUSH
25991: LD_INT 0
25993: PPUSH
25994: CALL_OW 234
// end ;
25998: GO 25983
26000: POP
26001: POP
// end ;
26002: PPOPN 2
26004: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26005: LD_EXP 90
26009: PUSH
26010: LD_EXP 96
26014: AND
26015: IFFALSE 26099
26017: GO 26019
26019: DISABLE
26020: LD_INT 0
26022: PPUSH
26023: PPUSH
// begin enable ;
26024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: LD_INT 22
26032: PUSH
26033: LD_OWVAR 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 32
26044: PUSH
26045: LD_INT 3
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 69
26060: ST_TO_ADDR
// if not tmp then
26061: LD_VAR 0 2
26065: NOT
26066: IFFALSE 26070
// exit ;
26068: GO 26099
// for i in tmp do
26070: LD_ADDR_VAR 0 1
26074: PUSH
26075: LD_VAR 0 2
26079: PUSH
26080: FOR_IN
26081: IFFALSE 26097
// begin SetLives ( i , 0 ) ;
26083: LD_VAR 0 1
26087: PPUSH
26088: LD_INT 0
26090: PPUSH
26091: CALL_OW 234
// end ;
26095: GO 26080
26097: POP
26098: POP
// end ;
26099: PPOPN 2
26101: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26102: LD_EXP 90
26106: PUSH
26107: LD_EXP 93
26111: AND
26112: IFFALSE 26205
26114: GO 26116
26116: DISABLE
26117: LD_INT 0
26119: PPUSH
// begin enable ;
26120: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26121: LD_ADDR_VAR 0 1
26125: PUSH
26126: LD_INT 22
26128: PUSH
26129: LD_OWVAR 2
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 25
26143: PUSH
26144: LD_INT 5
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 25
26153: PUSH
26154: LD_INT 9
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 25
26163: PUSH
26164: LD_INT 8
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 69
26185: PUSH
26186: FOR_IN
26187: IFFALSE 26203
// begin SetClass ( i , 1 ) ;
26189: LD_VAR 0 1
26193: PPUSH
26194: LD_INT 1
26196: PPUSH
26197: CALL_OW 336
// end ;
26201: GO 26186
26203: POP
26204: POP
// end ;
26205: PPOPN 1
26207: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26208: LD_EXP 90
26212: PUSH
26213: LD_EXP 94
26217: AND
26218: PUSH
26219: LD_OWVAR 65
26223: PUSH
26224: LD_INT 7
26226: LESS
26227: AND
26228: IFFALSE 26242
26230: GO 26232
26232: DISABLE
// begin enable ;
26233: ENABLE
// game_speed := 7 ;
26234: LD_ADDR_OWVAR 65
26238: PUSH
26239: LD_INT 7
26241: ST_TO_ADDR
// end ;
26242: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26243: LD_EXP 90
26247: PUSH
26248: LD_EXP 97
26252: AND
26253: IFFALSE 26455
26255: GO 26257
26257: DISABLE
26258: LD_INT 0
26260: PPUSH
26261: PPUSH
26262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26263: LD_ADDR_VAR 0 3
26267: PUSH
26268: LD_INT 81
26270: PUSH
26271: LD_OWVAR 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 21
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PPUSH
26294: CALL_OW 69
26298: ST_TO_ADDR
// if not tmp then
26299: LD_VAR 0 3
26303: NOT
26304: IFFALSE 26308
// exit ;
26306: GO 26455
// if tmp > 5 then
26308: LD_VAR 0 3
26312: PUSH
26313: LD_INT 5
26315: GREATER
26316: IFFALSE 26328
// k := 5 else
26318: LD_ADDR_VAR 0 2
26322: PUSH
26323: LD_INT 5
26325: ST_TO_ADDR
26326: GO 26338
// k := tmp ;
26328: LD_ADDR_VAR 0 2
26332: PUSH
26333: LD_VAR 0 3
26337: ST_TO_ADDR
// for i := 1 to k do
26338: LD_ADDR_VAR 0 1
26342: PUSH
26343: DOUBLE
26344: LD_INT 1
26346: DEC
26347: ST_TO_ADDR
26348: LD_VAR 0 2
26352: PUSH
26353: FOR_TO
26354: IFFALSE 26453
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26356: LD_VAR 0 3
26360: PUSH
26361: LD_VAR 0 1
26365: ARRAY
26366: PPUSH
26367: LD_VAR 0 1
26371: PUSH
26372: LD_INT 4
26374: MOD
26375: PUSH
26376: LD_INT 1
26378: PLUS
26379: PPUSH
26380: CALL_OW 259
26384: PUSH
26385: LD_INT 10
26387: LESS
26388: IFFALSE 26451
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26390: LD_VAR 0 3
26394: PUSH
26395: LD_VAR 0 1
26399: ARRAY
26400: PPUSH
26401: LD_VAR 0 1
26405: PUSH
26406: LD_INT 4
26408: MOD
26409: PUSH
26410: LD_INT 1
26412: PLUS
26413: PPUSH
26414: LD_VAR 0 3
26418: PUSH
26419: LD_VAR 0 1
26423: ARRAY
26424: PPUSH
26425: LD_VAR 0 1
26429: PUSH
26430: LD_INT 4
26432: MOD
26433: PUSH
26434: LD_INT 1
26436: PLUS
26437: PPUSH
26438: CALL_OW 259
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: CALL_OW 237
26451: GO 26353
26453: POP
26454: POP
// end ;
26455: PPOPN 3
26457: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26458: LD_EXP 90
26462: PUSH
26463: LD_EXP 98
26467: AND
26468: IFFALSE 26488
26470: GO 26472
26472: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26473: LD_INT 4
26475: PPUSH
26476: LD_OWVAR 2
26480: PPUSH
26481: LD_INT 0
26483: PPUSH
26484: CALL_OW 324
26488: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26489: LD_EXP 90
26493: PUSH
26494: LD_EXP 127
26498: AND
26499: IFFALSE 26519
26501: GO 26503
26503: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26504: LD_INT 19
26506: PPUSH
26507: LD_OWVAR 2
26511: PPUSH
26512: LD_INT 0
26514: PPUSH
26515: CALL_OW 324
26519: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26520: LD_EXP 90
26524: PUSH
26525: LD_EXP 99
26529: AND
26530: IFFALSE 26632
26532: GO 26534
26534: DISABLE
26535: LD_INT 0
26537: PPUSH
26538: PPUSH
// begin enable ;
26539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: LD_INT 22
26547: PUSH
26548: LD_OWVAR 2
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 34
26562: PUSH
26563: LD_INT 11
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 34
26572: PUSH
26573: LD_INT 30
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PPUSH
26589: CALL_OW 69
26593: ST_TO_ADDR
// if not tmp then
26594: LD_VAR 0 2
26598: NOT
26599: IFFALSE 26603
// exit ;
26601: GO 26632
// for i in tmp do
26603: LD_ADDR_VAR 0 1
26607: PUSH
26608: LD_VAR 0 2
26612: PUSH
26613: FOR_IN
26614: IFFALSE 26630
// begin SetLives ( i , 0 ) ;
26616: LD_VAR 0 1
26620: PPUSH
26621: LD_INT 0
26623: PPUSH
26624: CALL_OW 234
// end ;
26628: GO 26613
26630: POP
26631: POP
// end ;
26632: PPOPN 2
26634: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26635: LD_EXP 90
26639: PUSH
26640: LD_EXP 100
26644: AND
26645: IFFALSE 26665
26647: GO 26649
26649: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26650: LD_INT 32
26652: PPUSH
26653: LD_OWVAR 2
26657: PPUSH
26658: LD_INT 0
26660: PPUSH
26661: CALL_OW 324
26665: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26666: LD_EXP 90
26670: PUSH
26671: LD_EXP 101
26675: AND
26676: IFFALSE 26857
26678: GO 26680
26680: DISABLE
26681: LD_INT 0
26683: PPUSH
26684: PPUSH
26685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26686: LD_ADDR_VAR 0 2
26690: PUSH
26691: LD_INT 22
26693: PUSH
26694: LD_OWVAR 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 33
26705: PUSH
26706: LD_INT 3
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 69
26721: ST_TO_ADDR
// if not tmp then
26722: LD_VAR 0 2
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 26857
// side := 0 ;
26731: LD_ADDR_VAR 0 3
26735: PUSH
26736: LD_INT 0
26738: ST_TO_ADDR
// for i := 1 to 8 do
26739: LD_ADDR_VAR 0 1
26743: PUSH
26744: DOUBLE
26745: LD_INT 1
26747: DEC
26748: ST_TO_ADDR
26749: LD_INT 8
26751: PUSH
26752: FOR_TO
26753: IFFALSE 26801
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26755: LD_OWVAR 2
26759: PUSH
26760: LD_VAR 0 1
26764: NONEQUAL
26765: PUSH
26766: LD_OWVAR 2
26770: PPUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 81
26780: PUSH
26781: LD_INT 2
26783: EQUAL
26784: AND
26785: IFFALSE 26799
// begin side := i ;
26787: LD_ADDR_VAR 0 3
26791: PUSH
26792: LD_VAR 0 1
26796: ST_TO_ADDR
// break ;
26797: GO 26801
// end ;
26799: GO 26752
26801: POP
26802: POP
// if not side then
26803: LD_VAR 0 3
26807: NOT
26808: IFFALSE 26812
// exit ;
26810: GO 26857
// for i := 1 to tmp do
26812: LD_ADDR_VAR 0 1
26816: PUSH
26817: DOUBLE
26818: LD_INT 1
26820: DEC
26821: ST_TO_ADDR
26822: LD_VAR 0 2
26826: PUSH
26827: FOR_TO
26828: IFFALSE 26855
// if Prob ( 60 ) then
26830: LD_INT 60
26832: PPUSH
26833: CALL_OW 13
26837: IFFALSE 26853
// SetSide ( i , side ) ;
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_VAR 0 3
26848: PPUSH
26849: CALL_OW 235
26853: GO 26827
26855: POP
26856: POP
// end ;
26857: PPOPN 3
26859: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26860: LD_EXP 90
26864: PUSH
26865: LD_EXP 103
26869: AND
26870: IFFALSE 26989
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26878: LD_ADDR_VAR 0 1
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 21
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: PUSH
26908: LD_INT 23
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 69
26931: PUSH
26932: FOR_IN
26933: IFFALSE 26987
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26935: LD_VAR 0 1
26939: PPUSH
26940: CALL_OW 257
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: LD_INT 3
26953: PUSH
26954: LD_INT 4
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: IN
26963: IFFALSE 26985
// SetClass ( un , rand ( 1 , 4 ) ) ;
26965: LD_VAR 0 1
26969: PPUSH
26970: LD_INT 1
26972: PPUSH
26973: LD_INT 4
26975: PPUSH
26976: CALL_OW 12
26980: PPUSH
26981: CALL_OW 336
26985: GO 26932
26987: POP
26988: POP
// end ;
26989: PPOPN 1
26991: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26992: LD_EXP 90
26996: PUSH
26997: LD_EXP 102
27001: AND
27002: IFFALSE 27081
27004: GO 27006
27006: DISABLE
27007: LD_INT 0
27009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27010: LD_ADDR_VAR 0 1
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_OWVAR 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 21
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: ST_TO_ADDR
// if not tmp then
27046: LD_VAR 0 1
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27055: LD_VAR 0 1
27059: PUSH
27060: LD_INT 1
27062: PPUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL_OW 12
27072: ARRAY
27073: PPUSH
27074: LD_INT 100
27076: PPUSH
27077: CALL_OW 234
// end ;
27081: PPOPN 1
27083: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27084: LD_EXP 90
27088: PUSH
27089: LD_EXP 104
27093: AND
27094: IFFALSE 27192
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_OWVAR 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 21
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PPUSH
27133: CALL_OW 69
27137: ST_TO_ADDR
// if not tmp then
27138: LD_VAR 0 1
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27192
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27147: LD_VAR 0 1
27151: PUSH
27152: LD_INT 1
27154: PPUSH
27155: LD_VAR 0 1
27159: PPUSH
27160: CALL_OW 12
27164: ARRAY
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: LD_INT 4
27171: PPUSH
27172: CALL_OW 12
27176: PPUSH
27177: LD_INT 3000
27179: PPUSH
27180: LD_INT 9000
27182: PPUSH
27183: CALL_OW 12
27187: PPUSH
27188: CALL_OW 492
// end ;
27192: PPOPN 1
27194: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27195: LD_EXP 90
27199: PUSH
27200: LD_EXP 105
27204: AND
27205: IFFALSE 27225
27207: GO 27209
27209: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27210: LD_INT 1
27212: PPUSH
27213: LD_OWVAR 2
27217: PPUSH
27218: LD_INT 0
27220: PPUSH
27221: CALL_OW 324
27225: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27226: LD_EXP 90
27230: PUSH
27231: LD_EXP 106
27235: AND
27236: IFFALSE 27319
27238: GO 27240
27240: DISABLE
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 21
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 2
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27319
// for i in tmp do
27290: LD_ADDR_VAR 0 1
27294: PUSH
27295: LD_VAR 0 2
27299: PUSH
27300: FOR_IN
27301: IFFALSE 27317
// SetBLevel ( i , 10 ) ;
27303: LD_VAR 0 1
27307: PPUSH
27308: LD_INT 10
27310: PPUSH
27311: CALL_OW 241
27315: GO 27300
27317: POP
27318: POP
// end ;
27319: PPOPN 2
27321: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27322: LD_EXP 90
27326: PUSH
27327: LD_EXP 107
27331: AND
27332: IFFALSE 27443
27334: GO 27336
27336: DISABLE
27337: LD_INT 0
27339: PPUSH
27340: PPUSH
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 25
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 3
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27443
// un := tmp [ rand ( 1 , tmp ) ] ;
27387: LD_ADDR_VAR 0 2
27391: PUSH
27392: LD_VAR 0 3
27396: PUSH
27397: LD_INT 1
27399: PPUSH
27400: LD_VAR 0 3
27404: PPUSH
27405: CALL_OW 12
27409: ARRAY
27410: ST_TO_ADDR
// if Crawls ( un ) then
27411: LD_VAR 0 2
27415: PPUSH
27416: CALL_OW 318
27420: IFFALSE 27431
// ComWalk ( un ) ;
27422: LD_VAR 0 2
27426: PPUSH
27427: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_INT 5
27438: PPUSH
27439: CALL_OW 336
// end ;
27443: PPOPN 3
27445: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27446: LD_EXP 90
27450: PUSH
27451: LD_EXP 108
27455: AND
27456: PUSH
27457: LD_OWVAR 67
27461: PUSH
27462: LD_INT 3
27464: LESS
27465: AND
27466: IFFALSE 27485
27468: GO 27470
27470: DISABLE
// Difficulty := Difficulty + 1 ;
27471: LD_ADDR_OWVAR 67
27475: PUSH
27476: LD_OWVAR 67
27480: PUSH
27481: LD_INT 1
27483: PLUS
27484: ST_TO_ADDR
27485: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27486: LD_EXP 90
27490: PUSH
27491: LD_EXP 109
27495: AND
27496: IFFALSE 27599
27498: GO 27500
27500: DISABLE
27501: LD_INT 0
27503: PPUSH
// begin for i := 1 to 5 do
27504: LD_ADDR_VAR 0 1
27508: PUSH
27509: DOUBLE
27510: LD_INT 1
27512: DEC
27513: ST_TO_ADDR
27514: LD_INT 5
27516: PUSH
27517: FOR_TO
27518: IFFALSE 27597
// begin uc_nation := nation_nature ;
27520: LD_ADDR_OWVAR 21
27524: PUSH
27525: LD_INT 0
27527: ST_TO_ADDR
// uc_side := 0 ;
27528: LD_ADDR_OWVAR 20
27532: PUSH
27533: LD_INT 0
27535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27536: LD_ADDR_OWVAR 29
27540: PUSH
27541: LD_INT 12
27543: PUSH
27544: LD_INT 12
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// hc_agressivity := 20 ;
27551: LD_ADDR_OWVAR 35
27555: PUSH
27556: LD_INT 20
27558: ST_TO_ADDR
// hc_class := class_tiger ;
27559: LD_ADDR_OWVAR 28
27563: PUSH
27564: LD_INT 14
27566: ST_TO_ADDR
// hc_gallery :=  ;
27567: LD_ADDR_OWVAR 33
27571: PUSH
27572: LD_STRING 
27574: ST_TO_ADDR
// hc_name :=  ;
27575: LD_ADDR_OWVAR 26
27579: PUSH
27580: LD_STRING 
27582: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27583: CALL_OW 44
27587: PPUSH
27588: LD_INT 0
27590: PPUSH
27591: CALL_OW 51
// end ;
27595: GO 27517
27597: POP
27598: POP
// end ;
27599: PPOPN 1
27601: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27602: LD_EXP 90
27606: PUSH
27607: LD_EXP 110
27611: AND
27612: IFFALSE 27621
27614: GO 27616
27616: DISABLE
// StreamSibBomb ;
27617: CALL 27622 0 0
27621: END
// export function StreamSibBomb ; var i , x , y ; begin
27622: LD_INT 0
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
// result := false ;
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: LD_INT 0
27635: ST_TO_ADDR
// for i := 1 to 16 do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: DOUBLE
27642: LD_INT 1
27644: DEC
27645: ST_TO_ADDR
27646: LD_INT 16
27648: PUSH
27649: FOR_TO
27650: IFFALSE 27849
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_INT 10
27659: PUSH
27660: LD_INT 20
27662: PUSH
27663: LD_INT 30
27665: PUSH
27666: LD_INT 40
27668: PUSH
27669: LD_INT 50
27671: PUSH
27672: LD_INT 60
27674: PUSH
27675: LD_INT 70
27677: PUSH
27678: LD_INT 80
27680: PUSH
27681: LD_INT 90
27683: PUSH
27684: LD_INT 100
27686: PUSH
27687: LD_INT 110
27689: PUSH
27690: LD_INT 120
27692: PUSH
27693: LD_INT 130
27695: PUSH
27696: LD_INT 140
27698: PUSH
27699: LD_INT 150
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PPUSH
27722: LD_INT 15
27724: PPUSH
27725: CALL_OW 12
27729: ARRAY
27730: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27731: LD_ADDR_VAR 0 4
27735: PUSH
27736: LD_INT 10
27738: PUSH
27739: LD_INT 20
27741: PUSH
27742: LD_INT 30
27744: PUSH
27745: LD_INT 40
27747: PUSH
27748: LD_INT 50
27750: PUSH
27751: LD_INT 60
27753: PUSH
27754: LD_INT 70
27756: PUSH
27757: LD_INT 80
27759: PUSH
27760: LD_INT 90
27762: PUSH
27763: LD_INT 100
27765: PUSH
27766: LD_INT 110
27768: PUSH
27769: LD_INT 120
27771: PUSH
27772: LD_INT 130
27774: PUSH
27775: LD_INT 140
27777: PUSH
27778: LD_INT 150
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PPUSH
27801: LD_INT 15
27803: PPUSH
27804: CALL_OW 12
27808: ARRAY
27809: ST_TO_ADDR
// if ValidHex ( x , y ) then
27810: LD_VAR 0 3
27814: PPUSH
27815: LD_VAR 0 4
27819: PPUSH
27820: CALL_OW 488
27824: IFFALSE 27847
// begin result := [ x , y ] ;
27826: LD_ADDR_VAR 0 1
27830: PUSH
27831: LD_VAR 0 3
27835: PUSH
27836: LD_VAR 0 4
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: ST_TO_ADDR
// break ;
27845: GO 27849
// end ; end ;
27847: GO 27649
27849: POP
27850: POP
// if result then
27851: LD_VAR 0 1
27855: IFFALSE 27915
// begin ToLua ( playSibBomb() ) ;
27857: LD_STRING playSibBomb()
27859: PPUSH
27860: CALL_OW 559
// wait ( 0 0$14 ) ;
27864: LD_INT 490
27866: PPUSH
27867: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27871: LD_VAR 0 1
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: LD_VAR 0 1
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27893: LD_VAR 0 1
27897: PUSH
27898: LD_INT 1
27900: ARRAY
27901: PPUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 2
27909: ARRAY
27910: PPUSH
27911: CALL_OW 429
// end ; end ;
27915: LD_VAR 0 1
27919: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27920: LD_EXP 90
27924: PUSH
27925: LD_EXP 112
27929: AND
27930: IFFALSE 27942
27932: GO 27934
27934: DISABLE
// YouLost (  ) ;
27935: LD_STRING 
27937: PPUSH
27938: CALL_OW 104
27942: END
// every 0 0$1 trigger StreamModeActive and sFog do
27943: LD_EXP 90
27947: PUSH
27948: LD_EXP 111
27952: AND
27953: IFFALSE 27967
27955: GO 27957
27957: DISABLE
// FogOff ( your_side ) ;
27958: LD_OWVAR 2
27962: PPUSH
27963: CALL_OW 344
27967: END
// every 0 0$1 trigger StreamModeActive and sSun do
27968: LD_EXP 90
27972: PUSH
27973: LD_EXP 113
27977: AND
27978: IFFALSE 28006
27980: GO 27982
27982: DISABLE
// begin solar_recharge_percent := 0 ;
27983: LD_ADDR_OWVAR 79
27987: PUSH
27988: LD_INT 0
27990: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27991: LD_INT 10500
27993: PPUSH
27994: CALL_OW 67
// solar_recharge_percent := 100 ;
27998: LD_ADDR_OWVAR 79
28002: PUSH
28003: LD_INT 100
28005: ST_TO_ADDR
// end ;
28006: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28007: LD_EXP 90
28011: PUSH
28012: LD_EXP 114
28016: AND
28017: IFFALSE 28256
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
28026: PPUSH
// begin tmp := [ ] ;
28027: LD_ADDR_VAR 0 3
28031: PUSH
28032: EMPTY
28033: ST_TO_ADDR
// for i := 1 to 6 do
28034: LD_ADDR_VAR 0 1
28038: PUSH
28039: DOUBLE
28040: LD_INT 1
28042: DEC
28043: ST_TO_ADDR
28044: LD_INT 6
28046: PUSH
28047: FOR_TO
28048: IFFALSE 28153
// begin uc_nation := nation_nature ;
28050: LD_ADDR_OWVAR 21
28054: PUSH
28055: LD_INT 0
28057: ST_TO_ADDR
// uc_side := 0 ;
28058: LD_ADDR_OWVAR 20
28062: PUSH
28063: LD_INT 0
28065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28066: LD_ADDR_OWVAR 29
28070: PUSH
28071: LD_INT 12
28073: PUSH
28074: LD_INT 12
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// hc_agressivity := 20 ;
28081: LD_ADDR_OWVAR 35
28085: PUSH
28086: LD_INT 20
28088: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28089: LD_ADDR_OWVAR 28
28093: PUSH
28094: LD_INT 17
28096: ST_TO_ADDR
// hc_gallery :=  ;
28097: LD_ADDR_OWVAR 33
28101: PUSH
28102: LD_STRING 
28104: ST_TO_ADDR
// hc_name :=  ;
28105: LD_ADDR_OWVAR 26
28109: PUSH
28110: LD_STRING 
28112: ST_TO_ADDR
// un := CreateHuman ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: CALL_OW 44
28122: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28123: LD_VAR 0 2
28127: PPUSH
28128: LD_INT 1
28130: PPUSH
28131: CALL_OW 51
// tmp := tmp ^ un ;
28135: LD_ADDR_VAR 0 3
28139: PUSH
28140: LD_VAR 0 3
28144: PUSH
28145: LD_VAR 0 2
28149: ADD
28150: ST_TO_ADDR
// end ;
28151: GO 28047
28153: POP
28154: POP
// repeat wait ( 0 0$1 ) ;
28155: LD_INT 35
28157: PPUSH
28158: CALL_OW 67
// for un in tmp do
28162: LD_ADDR_VAR 0 2
28166: PUSH
28167: LD_VAR 0 3
28171: PUSH
28172: FOR_IN
28173: IFFALSE 28247
// begin if IsDead ( un ) then
28175: LD_VAR 0 2
28179: PPUSH
28180: CALL_OW 301
28184: IFFALSE 28204
// begin tmp := tmp diff un ;
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_VAR 0 3
28195: PUSH
28196: LD_VAR 0 2
28200: DIFF
28201: ST_TO_ADDR
// continue ;
28202: GO 28172
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 22
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PPUSH
28226: CALL_OW 69
28230: PPUSH
28231: LD_VAR 0 2
28235: PPUSH
28236: CALL_OW 74
28240: PPUSH
28241: CALL_OW 115
// end ;
28245: GO 28172
28247: POP
28248: POP
// until not tmp ;
28249: LD_VAR 0 3
28253: NOT
28254: IFFALSE 28155
// end ;
28256: PPOPN 3
28258: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28259: LD_EXP 90
28263: PUSH
28264: LD_EXP 115
28268: AND
28269: IFFALSE 28323
28271: GO 28273
28273: DISABLE
// begin ToLua ( displayTroll(); ) ;
28274: LD_STRING displayTroll();
28276: PPUSH
28277: CALL_OW 559
// wait ( 3 3$00 ) ;
28281: LD_INT 6300
28283: PPUSH
28284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28288: LD_STRING hideTroll();
28290: PPUSH
28291: CALL_OW 559
// wait ( 1 1$00 ) ;
28295: LD_INT 2100
28297: PPUSH
28298: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28302: LD_STRING displayTroll();
28304: PPUSH
28305: CALL_OW 559
// wait ( 1 1$00 ) ;
28309: LD_INT 2100
28311: PPUSH
28312: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28316: LD_STRING hideTroll();
28318: PPUSH
28319: CALL_OW 559
// end ;
28323: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28324: LD_EXP 90
28328: PUSH
28329: LD_EXP 116
28333: AND
28334: IFFALSE 28397
28336: GO 28338
28338: DISABLE
28339: LD_INT 0
28341: PPUSH
// begin p := 0 ;
28342: LD_ADDR_VAR 0 1
28346: PUSH
28347: LD_INT 0
28349: ST_TO_ADDR
// repeat game_speed := 1 ;
28350: LD_ADDR_OWVAR 65
28354: PUSH
28355: LD_INT 1
28357: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28358: LD_INT 35
28360: PPUSH
28361: CALL_OW 67
// p := p + 1 ;
28365: LD_ADDR_VAR 0 1
28369: PUSH
28370: LD_VAR 0 1
28374: PUSH
28375: LD_INT 1
28377: PLUS
28378: ST_TO_ADDR
// until p >= 60 ;
28379: LD_VAR 0 1
28383: PUSH
28384: LD_INT 60
28386: GREATEREQUAL
28387: IFFALSE 28350
// game_speed := 4 ;
28389: LD_ADDR_OWVAR 65
28393: PUSH
28394: LD_INT 4
28396: ST_TO_ADDR
// end ;
28397: PPOPN 1
28399: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28400: LD_EXP 90
28404: PUSH
28405: LD_EXP 117
28409: AND
28410: IFFALSE 28556
28412: GO 28414
28414: DISABLE
28415: LD_INT 0
28417: PPUSH
28418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28419: LD_ADDR_VAR 0 1
28423: PUSH
28424: LD_INT 22
28426: PUSH
28427: LD_OWVAR 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 30
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PPUSH
28468: CALL_OW 69
28472: ST_TO_ADDR
// if not depot then
28473: LD_VAR 0 1
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28556
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28482: LD_ADDR_VAR 0 2
28486: PUSH
28487: LD_VAR 0 1
28491: PUSH
28492: LD_INT 1
28494: PPUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 12
28504: ARRAY
28505: PPUSH
28506: CALL_OW 274
28510: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28511: LD_VAR 0 2
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: LD_INT 0
28521: PPUSH
28522: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28526: LD_VAR 0 2
28530: PPUSH
28531: LD_INT 2
28533: PPUSH
28534: LD_INT 0
28536: PPUSH
28537: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28541: LD_VAR 0 2
28545: PPUSH
28546: LD_INT 3
28548: PPUSH
28549: LD_INT 0
28551: PPUSH
28552: CALL_OW 277
// end ;
28556: PPOPN 2
28558: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28559: LD_EXP 90
28563: PUSH
28564: LD_EXP 118
28568: AND
28569: IFFALSE 28666
28571: GO 28573
28573: DISABLE
28574: LD_INT 0
28576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28577: LD_ADDR_VAR 0 1
28581: PUSH
28582: LD_INT 22
28584: PUSH
28585: LD_OWVAR 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 21
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: LD_INT 23
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: ST_TO_ADDR
// if not tmp then
28631: LD_VAR 0 1
28635: NOT
28636: IFFALSE 28640
// exit ;
28638: GO 28666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28640: LD_VAR 0 1
28644: PUSH
28645: LD_INT 1
28647: PPUSH
28648: LD_VAR 0 1
28652: PPUSH
28653: CALL_OW 12
28657: ARRAY
28658: PPUSH
28659: LD_INT 200
28661: PPUSH
28662: CALL_OW 234
// end ;
28666: PPOPN 1
28668: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28669: LD_EXP 90
28673: PUSH
28674: LD_EXP 119
28678: AND
28679: IFFALSE 28758
28681: GO 28683
28683: DISABLE
28684: LD_INT 0
28686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28687: LD_ADDR_VAR 0 1
28691: PUSH
28692: LD_INT 22
28694: PUSH
28695: LD_OWVAR 2
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 21
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PPUSH
28718: CALL_OW 69
28722: ST_TO_ADDR
// if not tmp then
28723: LD_VAR 0 1
28727: NOT
28728: IFFALSE 28732
// exit ;
28730: GO 28758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28732: LD_VAR 0 1
28736: PUSH
28737: LD_INT 1
28739: PPUSH
28740: LD_VAR 0 1
28744: PPUSH
28745: CALL_OW 12
28749: ARRAY
28750: PPUSH
28751: LD_INT 60
28753: PPUSH
28754: CALL_OW 234
// end ;
28758: PPOPN 1
28760: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28761: LD_EXP 90
28765: PUSH
28766: LD_EXP 120
28770: AND
28771: IFFALSE 28870
28773: GO 28775
28775: DISABLE
28776: LD_INT 0
28778: PPUSH
28779: PPUSH
// begin enable ;
28780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28781: LD_ADDR_VAR 0 1
28785: PUSH
28786: LD_INT 22
28788: PUSH
28789: LD_OWVAR 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 61
28800: PUSH
28801: EMPTY
28802: LIST
28803: PUSH
28804: LD_INT 33
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: PPUSH
28819: CALL_OW 69
28823: ST_TO_ADDR
// if not tmp then
28824: LD_VAR 0 1
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28870
// for i in tmp do
28833: LD_ADDR_VAR 0 2
28837: PUSH
28838: LD_VAR 0 1
28842: PUSH
28843: FOR_IN
28844: IFFALSE 28868
// if IsControledBy ( i ) then
28846: LD_VAR 0 2
28850: PPUSH
28851: CALL_OW 312
28855: IFFALSE 28866
// ComUnlink ( i ) ;
28857: LD_VAR 0 2
28861: PPUSH
28862: CALL_OW 136
28866: GO 28843
28868: POP
28869: POP
// end ;
28870: PPOPN 2
28872: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28873: LD_EXP 90
28877: PUSH
28878: LD_EXP 121
28882: AND
28883: IFFALSE 29023
28885: GO 28887
28887: DISABLE
28888: LD_INT 0
28890: PPUSH
28891: PPUSH
// begin ToLua ( displayPowell(); ) ;
28892: LD_STRING displayPowell();
28894: PPUSH
28895: CALL_OW 559
// uc_side := 0 ;
28899: LD_ADDR_OWVAR 20
28903: PUSH
28904: LD_INT 0
28906: ST_TO_ADDR
// uc_nation := 2 ;
28907: LD_ADDR_OWVAR 21
28911: PUSH
28912: LD_INT 2
28914: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28915: LD_ADDR_OWVAR 37
28919: PUSH
28920: LD_INT 14
28922: ST_TO_ADDR
// vc_engine := engine_siberite ;
28923: LD_ADDR_OWVAR 39
28927: PUSH
28928: LD_INT 3
28930: ST_TO_ADDR
// vc_control := control_apeman ;
28931: LD_ADDR_OWVAR 38
28935: PUSH
28936: LD_INT 5
28938: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28939: LD_ADDR_OWVAR 40
28943: PUSH
28944: LD_INT 29
28946: ST_TO_ADDR
// un := CreateVehicle ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: CALL_OW 45
28956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28957: LD_VAR 0 2
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28969: LD_INT 35
28971: PPUSH
28972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_INT 22
28983: PUSH
28984: LD_OWVAR 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 69
28997: PPUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 74
29007: PPUSH
29008: CALL_OW 115
// until IsDead ( un ) ;
29012: LD_VAR 0 2
29016: PPUSH
29017: CALL_OW 301
29021: IFFALSE 28969
// end ;
29023: PPOPN 2
29025: END
// every 0 0$1 trigger StreamModeActive and sStu do
29026: LD_EXP 90
29030: PUSH
29031: LD_EXP 129
29035: AND
29036: IFFALSE 29052
29038: GO 29040
29040: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29041: LD_STRING displayStucuk();
29043: PPUSH
29044: CALL_OW 559
// ResetFog ;
29048: CALL_OW 335
// end ;
29052: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29053: LD_EXP 90
29057: PUSH
29058: LD_EXP 122
29062: AND
29063: IFFALSE 29204
29065: GO 29067
29067: DISABLE
29068: LD_INT 0
29070: PPUSH
29071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29072: LD_ADDR_VAR 0 2
29076: PUSH
29077: LD_INT 22
29079: PUSH
29080: LD_OWVAR 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 69
29107: ST_TO_ADDR
// if not tmp then
29108: LD_VAR 0 2
29112: NOT
29113: IFFALSE 29117
// exit ;
29115: GO 29204
// un := tmp [ rand ( 1 , tmp ) ] ;
29117: LD_ADDR_VAR 0 1
29121: PUSH
29122: LD_VAR 0 2
29126: PUSH
29127: LD_INT 1
29129: PPUSH
29130: LD_VAR 0 2
29134: PPUSH
29135: CALL_OW 12
29139: ARRAY
29140: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29141: LD_VAR 0 1
29145: PPUSH
29146: LD_INT 0
29148: PPUSH
29149: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29153: LD_VAR 0 1
29157: PPUSH
29158: LD_OWVAR 3
29162: PUSH
29163: LD_VAR 0 1
29167: DIFF
29168: PPUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: CALL_OW 74
29178: PPUSH
29179: CALL_OW 115
// wait ( 0 0$20 ) ;
29183: LD_INT 700
29185: PPUSH
29186: CALL_OW 67
// SetSide ( un , your_side ) ;
29190: LD_VAR 0 1
29194: PPUSH
29195: LD_OWVAR 2
29199: PPUSH
29200: CALL_OW 235
// end ;
29204: PPOPN 2
29206: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29207: LD_EXP 90
29211: PUSH
29212: LD_EXP 123
29216: AND
29217: IFFALSE 29323
29219: GO 29221
29221: DISABLE
29222: LD_INT 0
29224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_INT 22
29232: PUSH
29233: LD_OWVAR 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 30
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 30
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// if not depot then
29279: LD_VAR 0 1
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29323
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29288: LD_VAR 0 1
29292: PUSH
29293: LD_INT 1
29295: ARRAY
29296: PPUSH
29297: CALL_OW 250
29301: PPUSH
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 1
29309: ARRAY
29310: PPUSH
29311: CALL_OW 251
29315: PPUSH
29316: LD_INT 70
29318: PPUSH
29319: CALL_OW 495
// end ;
29323: PPOPN 1
29325: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29326: LD_EXP 90
29330: PUSH
29331: LD_EXP 124
29335: AND
29336: IFFALSE 29547
29338: GO 29340
29340: DISABLE
29341: LD_INT 0
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29348: LD_ADDR_VAR 0 5
29352: PUSH
29353: LD_INT 22
29355: PUSH
29356: LD_OWVAR 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 21
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PPUSH
29379: CALL_OW 69
29383: ST_TO_ADDR
// if not tmp then
29384: LD_VAR 0 5
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29547
// for i in tmp do
29393: LD_ADDR_VAR 0 1
29397: PUSH
29398: LD_VAR 0 5
29402: PUSH
29403: FOR_IN
29404: IFFALSE 29545
// begin d := rand ( 0 , 5 ) ;
29406: LD_ADDR_VAR 0 4
29410: PUSH
29411: LD_INT 0
29413: PPUSH
29414: LD_INT 5
29416: PPUSH
29417: CALL_OW 12
29421: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29422: LD_ADDR_VAR 0 2
29426: PUSH
29427: LD_VAR 0 1
29431: PPUSH
29432: CALL_OW 250
29436: PPUSH
29437: LD_VAR 0 4
29441: PPUSH
29442: LD_INT 3
29444: PPUSH
29445: LD_INT 12
29447: PPUSH
29448: CALL_OW 12
29452: PPUSH
29453: CALL_OW 272
29457: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29458: LD_ADDR_VAR 0 3
29462: PUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 251
29472: PPUSH
29473: LD_VAR 0 4
29477: PPUSH
29478: LD_INT 3
29480: PPUSH
29481: LD_INT 12
29483: PPUSH
29484: CALL_OW 12
29488: PPUSH
29489: CALL_OW 273
29493: ST_TO_ADDR
// if ValidHex ( x , y ) then
29494: LD_VAR 0 2
29498: PPUSH
29499: LD_VAR 0 3
29503: PPUSH
29504: CALL_OW 488
29508: IFFALSE 29543
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29510: LD_VAR 0 1
29514: PPUSH
29515: LD_VAR 0 2
29519: PPUSH
29520: LD_VAR 0 3
29524: PPUSH
29525: LD_INT 3
29527: PPUSH
29528: LD_INT 6
29530: PPUSH
29531: CALL_OW 12
29535: PPUSH
29536: LD_INT 1
29538: PPUSH
29539: CALL_OW 483
// end ;
29543: GO 29403
29545: POP
29546: POP
// end ;
29547: PPOPN 5
29549: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29550: LD_EXP 90
29554: PUSH
29555: LD_EXP 125
29559: AND
29560: IFFALSE 29654
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29569: LD_ADDR_VAR 0 2
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_OWVAR 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 32
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 21
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 69
29615: ST_TO_ADDR
// if not tmp then
29616: LD_VAR 0 2
29620: NOT
29621: IFFALSE 29625
// exit ;
29623: GO 29654
// for i in tmp do
29625: LD_ADDR_VAR 0 1
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: FOR_IN
29636: IFFALSE 29652
// SetFuel ( i , 0 ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_INT 0
29645: PPUSH
29646: CALL_OW 240
29650: GO 29635
29652: POP
29653: POP
// end ;
29654: PPOPN 2
29656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29657: LD_EXP 90
29661: PUSH
29662: LD_EXP 126
29666: AND
29667: IFFALSE 29733
29669: GO 29671
29671: DISABLE
29672: LD_INT 0
29674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29675: LD_ADDR_VAR 0 1
29679: PUSH
29680: LD_INT 22
29682: PUSH
29683: LD_OWVAR 2
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 30
29694: PUSH
29695: LD_INT 29
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PPUSH
29706: CALL_OW 69
29710: ST_TO_ADDR
// if not tmp then
29711: LD_VAR 0 1
29715: NOT
29716: IFFALSE 29720
// exit ;
29718: GO 29733
// DestroyUnit ( tmp [ 1 ] ) ;
29720: LD_VAR 0 1
29724: PUSH
29725: LD_INT 1
29727: ARRAY
29728: PPUSH
29729: CALL_OW 65
// end ;
29733: PPOPN 1
29735: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29736: LD_EXP 90
29740: PUSH
29741: LD_EXP 128
29745: AND
29746: IFFALSE 29875
29748: GO 29750
29750: DISABLE
29751: LD_INT 0
29753: PPUSH
// begin uc_side := 0 ;
29754: LD_ADDR_OWVAR 20
29758: PUSH
29759: LD_INT 0
29761: ST_TO_ADDR
// uc_nation := nation_arabian ;
29762: LD_ADDR_OWVAR 21
29766: PUSH
29767: LD_INT 2
29769: ST_TO_ADDR
// hc_gallery :=  ;
29770: LD_ADDR_OWVAR 33
29774: PUSH
29775: LD_STRING 
29777: ST_TO_ADDR
// hc_name :=  ;
29778: LD_ADDR_OWVAR 26
29782: PUSH
29783: LD_STRING 
29785: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29786: LD_INT 1
29788: PPUSH
29789: LD_INT 11
29791: PPUSH
29792: LD_INT 10
29794: PPUSH
29795: CALL_OW 380
// un := CreateHuman ;
29799: LD_ADDR_VAR 0 1
29803: PUSH
29804: CALL_OW 44
29808: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29809: LD_VAR 0 1
29813: PPUSH
29814: LD_INT 1
29816: PPUSH
29817: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29821: LD_INT 35
29823: PPUSH
29824: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29828: LD_VAR 0 1
29832: PPUSH
29833: LD_INT 22
29835: PUSH
29836: LD_OWVAR 2
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PPUSH
29845: CALL_OW 69
29849: PPUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 74
29859: PPUSH
29860: CALL_OW 115
// until IsDead ( un ) ;
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 301
29873: IFFALSE 29821
// end ;
29875: PPOPN 1
29877: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29878: LD_EXP 90
29882: PUSH
29883: LD_EXP 130
29887: AND
29888: IFFALSE 29900
29890: GO 29892
29892: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29893: LD_STRING earthquake(getX(game), 0, 32)
29895: PPUSH
29896: CALL_OW 559
29900: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29901: LD_EXP 90
29905: PUSH
29906: LD_EXP 131
29910: AND
29911: IFFALSE 30002
29913: GO 29915
29915: DISABLE
29916: LD_INT 0
29918: PPUSH
// begin enable ;
29919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29920: LD_ADDR_VAR 0 1
29924: PUSH
29925: LD_INT 22
29927: PUSH
29928: LD_OWVAR 2
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 21
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 33
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: PPUSH
29962: CALL_OW 69
29966: ST_TO_ADDR
// if not tmp then
29967: LD_VAR 0 1
29971: NOT
29972: IFFALSE 29976
// exit ;
29974: GO 30002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29976: LD_VAR 0 1
29980: PUSH
29981: LD_INT 1
29983: PPUSH
29984: LD_VAR 0 1
29988: PPUSH
29989: CALL_OW 12
29993: ARRAY
29994: PPUSH
29995: LD_INT 1
29997: PPUSH
29998: CALL_OW 234
// end ;
30002: PPOPN 1
30004: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30005: LD_EXP 90
30009: PUSH
30010: LD_EXP 132
30014: AND
30015: IFFALSE 30156
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
30023: PPUSH
30024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30025: LD_ADDR_VAR 0 3
30029: PUSH
30030: LD_INT 22
30032: PUSH
30033: LD_OWVAR 2
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 25
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PPUSH
30056: CALL_OW 69
30060: ST_TO_ADDR
// if not tmp then
30061: LD_VAR 0 3
30065: NOT
30066: IFFALSE 30070
// exit ;
30068: GO 30156
// un := tmp [ rand ( 1 , tmp ) ] ;
30070: LD_ADDR_VAR 0 2
30074: PUSH
30075: LD_VAR 0 3
30079: PUSH
30080: LD_INT 1
30082: PPUSH
30083: LD_VAR 0 3
30087: PPUSH
30088: CALL_OW 12
30092: ARRAY
30093: ST_TO_ADDR
// if Crawls ( un ) then
30094: LD_VAR 0 2
30098: PPUSH
30099: CALL_OW 318
30103: IFFALSE 30114
// ComWalk ( un ) ;
30105: LD_VAR 0 2
30109: PPUSH
30110: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30114: LD_VAR 0 2
30118: PPUSH
30119: LD_INT 9
30121: PPUSH
30122: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30126: LD_INT 28
30128: PPUSH
30129: LD_OWVAR 2
30133: PPUSH
30134: LD_INT 2
30136: PPUSH
30137: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30141: LD_INT 29
30143: PPUSH
30144: LD_OWVAR 2
30148: PPUSH
30149: LD_INT 2
30151: PPUSH
30152: CALL_OW 322
// end ;
30156: PPOPN 3
30158: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30159: LD_EXP 90
30163: PUSH
30164: LD_EXP 133
30168: AND
30169: IFFALSE 30280
30171: GO 30173
30173: DISABLE
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30179: LD_ADDR_VAR 0 3
30183: PUSH
30184: LD_INT 22
30186: PUSH
30187: LD_OWVAR 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 25
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PPUSH
30210: CALL_OW 69
30214: ST_TO_ADDR
// if not tmp then
30215: LD_VAR 0 3
30219: NOT
30220: IFFALSE 30224
// exit ;
30222: GO 30280
// un := tmp [ rand ( 1 , tmp ) ] ;
30224: LD_ADDR_VAR 0 2
30228: PUSH
30229: LD_VAR 0 3
30233: PUSH
30234: LD_INT 1
30236: PPUSH
30237: LD_VAR 0 3
30241: PPUSH
30242: CALL_OW 12
30246: ARRAY
30247: ST_TO_ADDR
// if Crawls ( un ) then
30248: LD_VAR 0 2
30252: PPUSH
30253: CALL_OW 318
30257: IFFALSE 30268
// ComWalk ( un ) ;
30259: LD_VAR 0 2
30263: PPUSH
30264: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_INT 8
30275: PPUSH
30276: CALL_OW 336
// end ;
30280: PPOPN 3
30282: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30283: LD_EXP 90
30287: PUSH
30288: LD_EXP 134
30292: AND
30293: IFFALSE 30437
30295: GO 30297
30297: DISABLE
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30302: LD_ADDR_VAR 0 2
30306: PUSH
30307: LD_INT 22
30309: PUSH
30310: LD_OWVAR 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 21
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 34
30334: PUSH
30335: LD_INT 12
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 34
30344: PUSH
30345: LD_INT 51
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 34
30354: PUSH
30355: LD_INT 32
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 69
30377: ST_TO_ADDR
// if not tmp then
30378: LD_VAR 0 2
30382: NOT
30383: IFFALSE 30387
// exit ;
30385: GO 30437
// for i in tmp do
30387: LD_ADDR_VAR 0 1
30391: PUSH
30392: LD_VAR 0 2
30396: PUSH
30397: FOR_IN
30398: IFFALSE 30435
// if GetCargo ( i , mat_artifact ) = 0 then
30400: LD_VAR 0 1
30404: PPUSH
30405: LD_INT 4
30407: PPUSH
30408: CALL_OW 289
30412: PUSH
30413: LD_INT 0
30415: EQUAL
30416: IFFALSE 30433
// SetCargo ( i , mat_siberit , 100 ) ;
30418: LD_VAR 0 1
30422: PPUSH
30423: LD_INT 3
30425: PPUSH
30426: LD_INT 100
30428: PPUSH
30429: CALL_OW 290
30433: GO 30397
30435: POP
30436: POP
// end ;
30437: PPOPN 2
30439: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30440: LD_EXP 90
30444: PUSH
30445: LD_EXP 135
30449: AND
30450: IFFALSE 30633
30452: GO 30454
30454: DISABLE
30455: LD_INT 0
30457: PPUSH
30458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30459: LD_ADDR_VAR 0 2
30463: PUSH
30464: LD_INT 22
30466: PUSH
30467: LD_OWVAR 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: CALL_OW 69
30480: ST_TO_ADDR
// if not tmp then
30481: LD_VAR 0 2
30485: NOT
30486: IFFALSE 30490
// exit ;
30488: GO 30633
// for i := 1 to 2 do
30490: LD_ADDR_VAR 0 1
30494: PUSH
30495: DOUBLE
30496: LD_INT 1
30498: DEC
30499: ST_TO_ADDR
30500: LD_INT 2
30502: PUSH
30503: FOR_TO
30504: IFFALSE 30631
// begin uc_side := your_side ;
30506: LD_ADDR_OWVAR 20
30510: PUSH
30511: LD_OWVAR 2
30515: ST_TO_ADDR
// uc_nation := nation_american ;
30516: LD_ADDR_OWVAR 21
30520: PUSH
30521: LD_INT 1
30523: ST_TO_ADDR
// vc_chassis := us_morphling ;
30524: LD_ADDR_OWVAR 37
30528: PUSH
30529: LD_INT 5
30531: ST_TO_ADDR
// vc_engine := engine_siberite ;
30532: LD_ADDR_OWVAR 39
30536: PUSH
30537: LD_INT 3
30539: ST_TO_ADDR
// vc_control := control_computer ;
30540: LD_ADDR_OWVAR 38
30544: PUSH
30545: LD_INT 3
30547: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30548: LD_ADDR_OWVAR 40
30552: PUSH
30553: LD_INT 10
30555: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30556: LD_VAR 0 2
30560: PUSH
30561: LD_INT 1
30563: ARRAY
30564: PPUSH
30565: CALL_OW 310
30569: NOT
30570: IFFALSE 30617
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30572: CALL_OW 45
30576: PPUSH
30577: LD_VAR 0 2
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 250
30590: PPUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: CALL_OW 251
30604: PPUSH
30605: LD_INT 12
30607: PPUSH
30608: LD_INT 1
30610: PPUSH
30611: CALL_OW 50
30615: GO 30629
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30617: CALL_OW 45
30621: PPUSH
30622: LD_INT 1
30624: PPUSH
30625: CALL_OW 51
// end ;
30629: GO 30503
30631: POP
30632: POP
// end ;
30633: PPOPN 2
30635: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30636: LD_EXP 90
30640: PUSH
30641: LD_EXP 136
30645: AND
30646: IFFALSE 30868
30648: GO 30650
30650: DISABLE
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30659: LD_ADDR_VAR 0 6
30663: PUSH
30664: LD_INT 22
30666: PUSH
30667: LD_OWVAR 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 21
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: LD_INT 23
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: PPUSH
30708: CALL_OW 69
30712: ST_TO_ADDR
// if not tmp then
30713: LD_VAR 0 6
30717: NOT
30718: IFFALSE 30722
// exit ;
30720: GO 30868
// s1 := rand ( 1 , 4 ) ;
30722: LD_ADDR_VAR 0 2
30726: PUSH
30727: LD_INT 1
30729: PPUSH
30730: LD_INT 4
30732: PPUSH
30733: CALL_OW 12
30737: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30738: LD_ADDR_VAR 0 4
30742: PUSH
30743: LD_VAR 0 6
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 2
30756: PPUSH
30757: CALL_OW 259
30761: ST_TO_ADDR
// if s1 = 1 then
30762: LD_VAR 0 2
30766: PUSH
30767: LD_INT 1
30769: EQUAL
30770: IFFALSE 30790
// s2 := rand ( 2 , 4 ) else
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_INT 2
30779: PPUSH
30780: LD_INT 4
30782: PPUSH
30783: CALL_OW 12
30787: ST_TO_ADDR
30788: GO 30798
// s2 := 1 ;
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: LD_INT 1
30797: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30798: LD_ADDR_VAR 0 5
30802: PUSH
30803: LD_VAR 0 6
30807: PUSH
30808: LD_INT 1
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: CALL_OW 259
30821: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30822: LD_VAR 0 6
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 5
30840: PPUSH
30841: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30845: LD_VAR 0 6
30849: PUSH
30850: LD_INT 1
30852: ARRAY
30853: PPUSH
30854: LD_VAR 0 3
30858: PPUSH
30859: LD_VAR 0 4
30863: PPUSH
30864: CALL_OW 237
// end ;
30868: PPOPN 6
30870: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30871: LD_EXP 90
30875: PUSH
30876: LD_EXP 137
30880: AND
30881: IFFALSE 30960
30883: GO 30885
30885: DISABLE
30886: LD_INT 0
30888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30889: LD_ADDR_VAR 0 1
30893: PUSH
30894: LD_INT 22
30896: PUSH
30897: LD_OWVAR 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: ST_TO_ADDR
// if not tmp then
30925: LD_VAR 0 1
30929: NOT
30930: IFFALSE 30934
// exit ;
30932: GO 30960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30934: LD_VAR 0 1
30938: PUSH
30939: LD_INT 1
30941: PPUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL_OW 12
30951: ARRAY
30952: PPUSH
30953: LD_INT 1
30955: PPUSH
30956: CALL_OW 234
// end ;
30960: PPOPN 1
30962: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30963: LD_EXP 90
30967: PUSH
30968: LD_EXP 138
30972: AND
30973: IFFALSE 31085
30975: GO 30977
30977: DISABLE
30978: LD_INT 0
30980: PPUSH
30981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30982: LD_ADDR_VAR 0 2
30986: PUSH
30987: LD_INT 22
30989: PUSH
30990: LD_OWVAR 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: LD_INT 30
31004: PUSH
31005: LD_INT 27
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 30
31014: PUSH
31015: LD_INT 26
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 30
31024: PUSH
31025: LD_INT 28
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PPUSH
31042: CALL_OW 69
31046: ST_TO_ADDR
// if not tmp then
31047: LD_VAR 0 2
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31085
// for i in tmp do
31056: LD_ADDR_VAR 0 1
31060: PUSH
31061: LD_VAR 0 2
31065: PUSH
31066: FOR_IN
31067: IFFALSE 31083
// SetLives ( i , 1 ) ;
31069: LD_VAR 0 1
31073: PPUSH
31074: LD_INT 1
31076: PPUSH
31077: CALL_OW 234
31081: GO 31066
31083: POP
31084: POP
// end ;
31085: PPOPN 2
31087: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31088: LD_EXP 90
31092: PUSH
31093: LD_EXP 139
31097: AND
31098: IFFALSE 31372
31100: GO 31102
31102: DISABLE
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
31107: PPUSH
// begin i := rand ( 1 , 7 ) ;
31108: LD_ADDR_VAR 0 1
31112: PUSH
31113: LD_INT 1
31115: PPUSH
31116: LD_INT 7
31118: PPUSH
31119: CALL_OW 12
31123: ST_TO_ADDR
// case i of 1 :
31124: LD_VAR 0 1
31128: PUSH
31129: LD_INT 1
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31147
31137: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31138: LD_STRING earthquake(getX(game), 0, 32)
31140: PPUSH
31141: CALL_OW 559
31145: GO 31372
31147: LD_INT 2
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31169
31155: POP
// begin ToLua ( displayStucuk(); ) ;
31156: LD_STRING displayStucuk();
31158: PPUSH
31159: CALL_OW 559
// ResetFog ;
31163: CALL_OW 335
// end ; 3 :
31167: GO 31372
31169: LD_INT 3
31171: DOUBLE
31172: EQUAL
31173: IFTRUE 31177
31175: GO 31281
31177: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_OWVAR 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 25
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PPUSH
31209: CALL_OW 69
31213: ST_TO_ADDR
// if not tmp then
31214: LD_VAR 0 2
31218: NOT
31219: IFFALSE 31223
// exit ;
31221: GO 31372
// un := tmp [ rand ( 1 , tmp ) ] ;
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_VAR 0 2
31232: PUSH
31233: LD_INT 1
31235: PPUSH
31236: LD_VAR 0 2
31240: PPUSH
31241: CALL_OW 12
31245: ARRAY
31246: ST_TO_ADDR
// if Crawls ( un ) then
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 318
31256: IFFALSE 31267
// ComWalk ( un ) ;
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31267: LD_VAR 0 3
31271: PPUSH
31272: LD_INT 8
31274: PPUSH
31275: CALL_OW 336
// end ; 4 :
31279: GO 31372
31281: LD_INT 4
31283: DOUBLE
31284: EQUAL
31285: IFTRUE 31289
31287: GO 31350
31289: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31290: LD_ADDR_VAR 0 2
31294: PUSH
31295: LD_INT 22
31297: PUSH
31298: LD_OWVAR 2
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 30
31309: PUSH
31310: LD_INT 29
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: ST_TO_ADDR
// if not tmp then
31326: LD_VAR 0 2
31330: NOT
31331: IFFALSE 31335
// exit ;
31333: GO 31372
// DestroyUnit ( tmp [ 1 ] ) ;
31335: LD_VAR 0 2
31339: PUSH
31340: LD_INT 1
31342: ARRAY
31343: PPUSH
31344: CALL_OW 65
// end ; 5 .. 7 :
31348: GO 31372
31350: LD_INT 5
31352: DOUBLE
31353: GREATEREQUAL
31354: IFFALSE 31362
31356: LD_INT 7
31358: DOUBLE
31359: LESSEQUAL
31360: IFTRUE 31364
31362: GO 31371
31364: POP
// StreamSibBomb ; end ;
31365: CALL 27622 0 0
31369: GO 31372
31371: POP
// end ;
31372: PPOPN 3
31374: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31375: LD_EXP 90
31379: PUSH
31380: LD_EXP 140
31384: AND
31385: IFFALSE 31541
31387: GO 31389
31389: DISABLE
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31395: LD_ADDR_VAR 0 2
31399: PUSH
31400: LD_INT 81
31402: PUSH
31403: LD_OWVAR 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 21
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 21
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: ST_TO_ADDR
// if not tmp then
31449: LD_VAR 0 2
31453: NOT
31454: IFFALSE 31458
// exit ;
31456: GO 31541
// p := 0 ;
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31466: LD_INT 35
31468: PPUSH
31469: CALL_OW 67
// p := p + 1 ;
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_VAR 0 3
31482: PUSH
31483: LD_INT 1
31485: PLUS
31486: ST_TO_ADDR
// for i in tmp do
31487: LD_ADDR_VAR 0 1
31491: PUSH
31492: LD_VAR 0 2
31496: PUSH
31497: FOR_IN
31498: IFFALSE 31529
// if GetLives ( i ) < 1000 then
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 256
31509: PUSH
31510: LD_INT 1000
31512: LESS
31513: IFFALSE 31527
// SetLives ( i , 1000 ) ;
31515: LD_VAR 0 1
31519: PPUSH
31520: LD_INT 1000
31522: PPUSH
31523: CALL_OW 234
31527: GO 31497
31529: POP
31530: POP
// until p > 20 ;
31531: LD_VAR 0 3
31535: PUSH
31536: LD_INT 20
31538: GREATER
31539: IFFALSE 31466
// end ;
31541: PPOPN 3
31543: END
// every 0 0$1 trigger StreamModeActive and sTime do
31544: LD_EXP 90
31548: PUSH
31549: LD_EXP 141
31553: AND
31554: IFFALSE 31589
31556: GO 31558
31558: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31559: LD_INT 28
31561: PPUSH
31562: LD_OWVAR 2
31566: PPUSH
31567: LD_INT 2
31569: PPUSH
31570: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31574: LD_INT 30
31576: PPUSH
31577: LD_OWVAR 2
31581: PPUSH
31582: LD_INT 2
31584: PPUSH
31585: CALL_OW 322
// end ;
31589: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31590: LD_EXP 90
31594: PUSH
31595: LD_EXP 142
31599: AND
31600: IFFALSE 31721
31602: GO 31604
31604: DISABLE
31605: LD_INT 0
31607: PPUSH
31608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31609: LD_ADDR_VAR 0 2
31613: PUSH
31614: LD_INT 22
31616: PUSH
31617: LD_OWVAR 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 21
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 3
31638: PUSH
31639: LD_INT 23
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: ST_TO_ADDR
// if not tmp then
31663: LD_VAR 0 2
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 31721
// for i in tmp do
31672: LD_ADDR_VAR 0 1
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: FOR_IN
31683: IFFALSE 31719
// begin if Crawls ( i ) then
31685: LD_VAR 0 1
31689: PPUSH
31690: CALL_OW 318
31694: IFFALSE 31705
// ComWalk ( i ) ;
31696: LD_VAR 0 1
31700: PPUSH
31701: CALL_OW 138
// SetClass ( i , 2 ) ;
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_INT 2
31712: PPUSH
31713: CALL_OW 336
// end ;
31717: GO 31682
31719: POP
31720: POP
// end ;
31721: PPOPN 2
31723: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31724: LD_EXP 90
31728: PUSH
31729: LD_EXP 143
31733: AND
31734: IFFALSE 32015
31736: GO 31738
31738: DISABLE
31739: LD_INT 0
31741: PPUSH
31742: PPUSH
31743: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31744: LD_OWVAR 2
31748: PPUSH
31749: LD_INT 9
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31762: LD_INT 9
31764: PPUSH
31765: LD_OWVAR 2
31769: PPUSH
31770: CALL_OW 343
// uc_side := 9 ;
31774: LD_ADDR_OWVAR 20
31778: PUSH
31779: LD_INT 9
31781: ST_TO_ADDR
// uc_nation := 2 ;
31782: LD_ADDR_OWVAR 21
31786: PUSH
31787: LD_INT 2
31789: ST_TO_ADDR
// hc_name := Dark Warrior ;
31790: LD_ADDR_OWVAR 26
31794: PUSH
31795: LD_STRING Dark Warrior
31797: ST_TO_ADDR
// hc_gallery :=  ;
31798: LD_ADDR_OWVAR 33
31802: PUSH
31803: LD_STRING 
31805: ST_TO_ADDR
// hc_noskilllimit := true ;
31806: LD_ADDR_OWVAR 76
31810: PUSH
31811: LD_INT 1
31813: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31814: LD_ADDR_OWVAR 31
31818: PUSH
31819: LD_INT 30
31821: PUSH
31822: LD_INT 30
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 30
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
// un := CreateHuman ;
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: CALL_OW 44
31846: ST_TO_ADDR
// hc_noskilllimit := false ;
31847: LD_ADDR_OWVAR 76
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31855: LD_VAR 0 3
31859: PPUSH
31860: LD_INT 1
31862: PPUSH
31863: CALL_OW 51
// p := 0 ;
31867: LD_ADDR_VAR 0 2
31871: PUSH
31872: LD_INT 0
31874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31875: LD_INT 35
31877: PPUSH
31878: CALL_OW 67
// p := p + 1 ;
31882: LD_ADDR_VAR 0 2
31886: PUSH
31887: LD_VAR 0 2
31891: PUSH
31892: LD_INT 1
31894: PLUS
31895: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31896: LD_VAR 0 3
31900: PPUSH
31901: CALL_OW 256
31905: PUSH
31906: LD_INT 1000
31908: LESS
31909: IFFALSE 31923
// SetLives ( un , 1000 ) ;
31911: LD_VAR 0 3
31915: PPUSH
31916: LD_INT 1000
31918: PPUSH
31919: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31923: LD_VAR 0 3
31927: PPUSH
31928: LD_INT 81
31930: PUSH
31931: LD_OWVAR 2
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 91
31942: PUSH
31943: LD_VAR 0 3
31947: PUSH
31948: LD_INT 30
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 69
31964: PPUSH
31965: LD_VAR 0 3
31969: PPUSH
31970: CALL_OW 74
31974: PPUSH
31975: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31979: LD_VAR 0 2
31983: PUSH
31984: LD_INT 60
31986: GREATER
31987: PUSH
31988: LD_VAR 0 3
31992: PPUSH
31993: CALL_OW 301
31997: OR
31998: IFFALSE 31875
// if un then
32000: LD_VAR 0 3
32004: IFFALSE 32015
// RemoveUnit ( un ) ;
32006: LD_VAR 0 3
32010: PPUSH
32011: CALL_OW 64
// end ;
32015: PPOPN 3
32017: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32024: LD_ADDR_VAR 0 4
32028: PUSH
32029: LD_INT 22
32031: PUSH
32032: LD_OWVAR 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 30
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 30
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PPUSH
32073: CALL_OW 69
32077: ST_TO_ADDR
// if not tmp then
32078: LD_VAR 0 4
32082: NOT
32083: IFFALSE 32087
// exit ;
32085: GO 32146
// for i in tmp do
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_VAR 0 4
32096: PUSH
32097: FOR_IN
32098: IFFALSE 32144
// for j = 1 to 3 do
32100: LD_ADDR_VAR 0 3
32104: PUSH
32105: DOUBLE
32106: LD_INT 1
32108: DEC
32109: ST_TO_ADDR
32110: LD_INT 3
32112: PUSH
32113: FOR_TO
32114: IFFALSE 32140
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32116: LD_VAR 0 2
32120: PPUSH
32121: CALL_OW 274
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: LD_INT 99999
32133: PPUSH
32134: CALL_OW 277
32138: GO 32113
32140: POP
32141: POP
32142: GO 32097
32144: POP
32145: POP
// end ;
32146: LD_VAR 0 1
32150: RET
// export function hHackSetLevel10 ; var i , j ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
32155: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 21
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 69
32175: PUSH
32176: FOR_IN
32177: IFFALSE 32229
// if IsSelected ( i ) then
32179: LD_VAR 0 2
32183: PPUSH
32184: CALL_OW 306
32188: IFFALSE 32227
// begin for j := 1 to 4 do
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: DOUBLE
32196: LD_INT 1
32198: DEC
32199: ST_TO_ADDR
32200: LD_INT 4
32202: PUSH
32203: FOR_TO
32204: IFFALSE 32225
// SetSkill ( i , j , 10 ) ;
32206: LD_VAR 0 2
32210: PPUSH
32211: LD_VAR 0 3
32215: PPUSH
32216: LD_INT 10
32218: PPUSH
32219: CALL_OW 237
32223: GO 32203
32225: POP
32226: POP
// end ;
32227: GO 32176
32229: POP
32230: POP
// end ;
32231: LD_VAR 0 1
32235: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32241: LD_ADDR_VAR 0 2
32245: PUSH
32246: LD_INT 22
32248: PUSH
32249: LD_OWVAR 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 21
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PPUSH
32272: CALL_OW 69
32276: PUSH
32277: FOR_IN
32278: IFFALSE 32319
// begin for j := 1 to 4 do
32280: LD_ADDR_VAR 0 3
32284: PUSH
32285: DOUBLE
32286: LD_INT 1
32288: DEC
32289: ST_TO_ADDR
32290: LD_INT 4
32292: PUSH
32293: FOR_TO
32294: IFFALSE 32315
// SetSkill ( i , j , 10 ) ;
32296: LD_VAR 0 2
32300: PPUSH
32301: LD_VAR 0 3
32305: PPUSH
32306: LD_INT 10
32308: PPUSH
32309: CALL_OW 237
32313: GO 32293
32315: POP
32316: POP
// end ;
32317: GO 32277
32319: POP
32320: POP
// end ;
32321: LD_VAR 0 1
32325: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
32326: LD_INT 0
32328: PPUSH
// uc_side := your_side ;
32329: LD_ADDR_OWVAR 20
32333: PUSH
32334: LD_OWVAR 2
32338: ST_TO_ADDR
// uc_nation := nation ;
32339: LD_ADDR_OWVAR 21
32343: PUSH
32344: LD_VAR 0 1
32348: ST_TO_ADDR
// InitHc ;
32349: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32353: LD_INT 0
32355: PPUSH
32356: LD_VAR 0 2
32360: PPUSH
32361: LD_VAR 0 3
32365: PPUSH
32366: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
32370: CALL_OW 44
32374: PPUSH
32375: LD_INT 1
32377: PPUSH
32378: CALL_OW 51
// end ;
32382: LD_VAR 0 4
32386: RET
// export function hHackSpawnVehicle ; begin
32387: LD_INT 0
32389: PPUSH
// uc_side := your_side ;
32390: LD_ADDR_OWVAR 20
32394: PUSH
32395: LD_OWVAR 2
32399: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
32400: LD_ADDR_OWVAR 21
32404: PUSH
32405: LD_INT 1
32407: PPUSH
32408: LD_INT 3
32410: PPUSH
32411: CALL_OW 12
32415: ST_TO_ADDR
// InitVc ;
32416: CALL_OW 20
// case uc_nation of 1 :
32420: LD_OWVAR 21
32424: PUSH
32425: LD_INT 1
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32433
32431: GO 32577
32433: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
32434: LD_ADDR_OWVAR 37
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PPUSH
32464: LD_INT 5
32466: PPUSH
32467: CALL_OW 12
32471: ARRAY
32472: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
32473: LD_ADDR_OWVAR 39
32477: PUSH
32478: LD_INT 1
32480: PPUSH
32481: LD_INT 3
32483: PPUSH
32484: CALL_OW 12
32488: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
32489: LD_ADDR_OWVAR 38
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PPUSH
32511: LD_INT 3
32513: PPUSH
32514: CALL_OW 12
32518: ARRAY
32519: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
32520: LD_ADDR_OWVAR 40
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: LD_INT 5
32533: PUSH
32534: LD_INT 3
32536: PUSH
32537: LD_INT 7
32539: PUSH
32540: LD_INT 8
32542: PUSH
32543: LD_INT 9
32545: PUSH
32546: LD_INT 10
32548: PUSH
32549: LD_INT 6
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PPUSH
32566: LD_INT 9
32568: PPUSH
32569: CALL_OW 12
32573: ARRAY
32574: ST_TO_ADDR
// end ; 2 :
32575: GO 32842
32577: LD_INT 2
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32585
32583: GO 32709
32585: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
32586: LD_ADDR_OWVAR 37
32590: PUSH
32591: LD_INT 11
32593: PUSH
32594: LD_INT 12
32596: PUSH
32597: LD_INT 13
32599: PUSH
32600: LD_INT 14
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PPUSH
32612: LD_INT 4
32614: PPUSH
32615: CALL_OW 12
32619: ARRAY
32620: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
32621: LD_ADDR_OWVAR 39
32625: PUSH
32626: LD_INT 1
32628: PPUSH
32629: LD_INT 3
32631: PPUSH
32632: CALL_OW 12
32636: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
32637: LD_ADDR_OWVAR 38
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 5
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PPUSH
32659: LD_INT 3
32661: PPUSH
32662: CALL_OW 12
32666: ARRAY
32667: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
32668: LD_ADDR_OWVAR 40
32672: PUSH
32673: LD_INT 24
32675: PUSH
32676: LD_INT 26
32678: PUSH
32679: LD_INT 27
32681: PUSH
32682: LD_INT 28
32684: PUSH
32685: LD_INT 29
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PPUSH
32698: LD_INT 5
32700: PPUSH
32701: CALL_OW 12
32705: ARRAY
32706: ST_TO_ADDR
// end ; 3 :
32707: GO 32842
32709: LD_INT 3
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32717
32715: GO 32841
32717: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
32718: LD_ADDR_OWVAR 37
32722: PUSH
32723: LD_INT 21
32725: PUSH
32726: LD_INT 23
32728: PUSH
32729: LD_INT 22
32731: PUSH
32732: LD_INT 24
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PPUSH
32744: LD_INT 4
32746: PPUSH
32747: CALL_OW 12
32751: ARRAY
32752: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
32753: LD_ADDR_OWVAR 39
32757: PUSH
32758: LD_INT 1
32760: PPUSH
32761: LD_INT 3
32763: PPUSH
32764: CALL_OW 12
32768: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
32769: LD_ADDR_OWVAR 38
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PPUSH
32787: LD_INT 2
32789: PPUSH
32790: CALL_OW 12
32794: ARRAY
32795: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
32796: LD_ADDR_OWVAR 40
32800: PUSH
32801: LD_INT 42
32803: PUSH
32804: LD_INT 43
32806: PUSH
32807: LD_INT 44
32809: PUSH
32810: LD_INT 46
32812: PUSH
32813: LD_INT 48
32815: PUSH
32816: LD_INT 47
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PPUSH
32830: LD_INT 6
32832: PPUSH
32833: CALL_OW 12
32837: ARRAY
32838: ST_TO_ADDR
// end ; end ;
32839: GO 32842
32841: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32842: CALL_OW 45
32846: PPUSH
32847: LD_INT 1
32849: PPUSH
32850: CALL_OW 51
// end ;
32854: LD_VAR 0 1
32858: RET
// export hInvincible ; every 1 do
32859: GO 32861
32861: DISABLE
// hInvincible := [ ] ;
32862: LD_ADDR_EXP 144
32866: PUSH
32867: EMPTY
32868: ST_TO_ADDR
32869: END
// every 10 do var i ;
32870: GO 32872
32872: DISABLE
32873: LD_INT 0
32875: PPUSH
// begin enable ;
32876: ENABLE
// if not hInvincible then
32877: LD_EXP 144
32881: NOT
32882: IFFALSE 32886
// exit ;
32884: GO 32930
// for i in hInvincible do
32886: LD_ADDR_VAR 0 1
32890: PUSH
32891: LD_EXP 144
32895: PUSH
32896: FOR_IN
32897: IFFALSE 32928
// if GetLives ( i ) < 1000 then
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 256
32908: PUSH
32909: LD_INT 1000
32911: LESS
32912: IFFALSE 32926
// SetLives ( i , 1000 ) ;
32914: LD_VAR 0 1
32918: PPUSH
32919: LD_INT 1000
32921: PPUSH
32922: CALL_OW 234
32926: GO 32896
32928: POP
32929: POP
// end ;
32930: PPOPN 1
32932: END
// export function hHackInvincible ; var i ; begin
32933: LD_INT 0
32935: PPUSH
32936: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32937: LD_ADDR_VAR 0 2
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: LD_INT 21
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: PPUSH
32970: CALL_OW 69
32974: PUSH
32975: FOR_IN
32976: IFFALSE 33037
// if IsSelected ( i ) then
32978: LD_VAR 0 2
32982: PPUSH
32983: CALL_OW 306
32987: IFFALSE 33035
// begin if i in hInvincible then
32989: LD_VAR 0 2
32993: PUSH
32994: LD_EXP 144
32998: IN
32999: IFFALSE 33019
// hInvincible := hInvincible diff i else
33001: LD_ADDR_EXP 144
33005: PUSH
33006: LD_EXP 144
33010: PUSH
33011: LD_VAR 0 2
33015: DIFF
33016: ST_TO_ADDR
33017: GO 33035
// hInvincible := hInvincible union i ;
33019: LD_ADDR_EXP 144
33023: PUSH
33024: LD_EXP 144
33028: PUSH
33029: LD_VAR 0 2
33033: UNION
33034: ST_TO_ADDR
// end ;
33035: GO 32975
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 1
33043: RET
// export function hHackInvisible ; var i , j ; begin
33044: LD_INT 0
33046: PPUSH
33047: PPUSH
33048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33049: LD_ADDR_VAR 0 2
33053: PUSH
33054: LD_INT 21
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 69
33068: PUSH
33069: FOR_IN
33070: IFFALSE 33094
// if IsSelected ( i ) then
33072: LD_VAR 0 2
33076: PPUSH
33077: CALL_OW 306
33081: IFFALSE 33092
// ComForceInvisible ( i ) ;
33083: LD_VAR 0 2
33087: PPUSH
33088: CALL_OW 496
33092: GO 33069
33094: POP
33095: POP
// end ;
33096: LD_VAR 0 1
33100: RET
// export function hHackChangeYourSide ; begin
33101: LD_INT 0
33103: PPUSH
// if your_side = 8 then
33104: LD_OWVAR 2
33108: PUSH
33109: LD_INT 8
33111: EQUAL
33112: IFFALSE 33124
// your_side := 0 else
33114: LD_ADDR_OWVAR 2
33118: PUSH
33119: LD_INT 0
33121: ST_TO_ADDR
33122: GO 33138
// your_side := your_side + 1 ;
33124: LD_ADDR_OWVAR 2
33128: PUSH
33129: LD_OWVAR 2
33133: PUSH
33134: LD_INT 1
33136: PLUS
33137: ST_TO_ADDR
// end ;
33138: LD_VAR 0 1
33142: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
33147: PPUSH
// for i in all_units do
33148: LD_ADDR_VAR 0 2
33152: PUSH
33153: LD_OWVAR 3
33157: PUSH
33158: FOR_IN
33159: IFFALSE 33237
// if IsSelected ( i ) then
33161: LD_VAR 0 2
33165: PPUSH
33166: CALL_OW 306
33170: IFFALSE 33235
// begin j := GetSide ( i ) ;
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_VAR 0 2
33181: PPUSH
33182: CALL_OW 255
33186: ST_TO_ADDR
// if j = 8 then
33187: LD_VAR 0 3
33191: PUSH
33192: LD_INT 8
33194: EQUAL
33195: IFFALSE 33207
// j := 0 else
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_INT 0
33204: ST_TO_ADDR
33205: GO 33221
// j := j + 1 ;
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_VAR 0 3
33216: PUSH
33217: LD_INT 1
33219: PLUS
33220: ST_TO_ADDR
// SetSide ( i , j ) ;
33221: LD_VAR 0 2
33225: PPUSH
33226: LD_VAR 0 3
33230: PPUSH
33231: CALL_OW 235
// end ;
33235: GO 33158
33237: POP
33238: POP
// end ;
33239: LD_VAR 0 1
33243: RET
// export function hHackFog ; begin
33244: LD_INT 0
33246: PPUSH
// FogOff ( true ) ;
33247: LD_INT 1
33249: PPUSH
33250: CALL_OW 344
// end ;
33254: LD_VAR 0 1
33258: RET
// export function hHackApeman ; begin
33259: LD_INT 0
33261: PPUSH
// uc_side := your_side ;
33262: LD_ADDR_OWVAR 20
33266: PUSH
33267: LD_OWVAR 2
33271: ST_TO_ADDR
// uc_nation := 0 ;
33272: LD_ADDR_OWVAR 21
33276: PUSH
33277: LD_INT 0
33279: ST_TO_ADDR
// hc_name :=  ;
33280: LD_ADDR_OWVAR 26
33284: PUSH
33285: LD_STRING 
33287: ST_TO_ADDR
// hc_gallery :=  ;
33288: LD_ADDR_OWVAR 33
33292: PUSH
33293: LD_STRING 
33295: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
33296: LD_ADDR_OWVAR 31
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
// hc_class := class_apeman ;
33319: LD_ADDR_OWVAR 28
33323: PUSH
33324: LD_INT 12
33326: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
33327: CALL_OW 44
33331: PPUSH
33332: LD_INT 1
33334: PPUSH
33335: CALL_OW 51
// end ;
33339: LD_VAR 0 1
33343: RET
// export function hHackBoom ; begin
33344: LD_INT 0
33346: PPUSH
// uc_side := your_side ;
33347: LD_ADDR_OWVAR 20
33351: PUSH
33352: LD_OWVAR 2
33356: ST_TO_ADDR
// uc_nation := 1 ;
33357: LD_ADDR_OWVAR 21
33361: PUSH
33362: LD_INT 1
33364: ST_TO_ADDR
// vc_chassis := us_morphling ;
33365: LD_ADDR_OWVAR 37
33369: PUSH
33370: LD_INT 5
33372: ST_TO_ADDR
// vc_engine := engine_siberite ;
33373: LD_ADDR_OWVAR 39
33377: PUSH
33378: LD_INT 3
33380: ST_TO_ADDR
// vc_control := control_computer ;
33381: LD_ADDR_OWVAR 38
33385: PUSH
33386: LD_INT 3
33388: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
33389: LD_ADDR_OWVAR 40
33393: PUSH
33394: LD_INT 8
33396: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33397: CALL_OW 45
33401: PPUSH
33402: LD_INT 1
33404: PPUSH
33405: CALL_OW 51
// end ; end_of_file
33409: LD_VAR 0 1
33413: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 264
33429: PUSH
33430: LD_EXP 155
33434: EQUAL
33435: IFFALSE 33507
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33437: LD_INT 68
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL_OW 255
33449: PPUSH
33450: CALL_OW 321
33454: PUSH
33455: LD_INT 2
33457: EQUAL
33458: IFFALSE 33470
// eff := 70 else
33460: LD_ADDR_VAR 0 4
33464: PUSH
33465: LD_INT 70
33467: ST_TO_ADDR
33468: GO 33478
// eff := 30 ;
33470: LD_ADDR_VAR 0 4
33474: PUSH
33475: LD_INT 30
33477: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33478: LD_VAR 0 1
33482: PPUSH
33483: CALL_OW 250
33487: PPUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 251
33497: PPUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 495
// end ; end ;
33507: LD_VAR 0 2
33511: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33512: LD_INT 0
33514: PPUSH
// end ;
33515: LD_VAR 0 4
33519: RET
// export function SOS_Command ( cmd ) ; begin
33520: LD_INT 0
33522: PPUSH
// end ;
33523: LD_VAR 0 2
33527: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33528: LD_INT 0
33530: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33531: LD_VAR 0 1
33535: PUSH
33536: LD_INT 254
33538: EQUAL
33539: PUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: CALL_OW 264
33549: PUSH
33550: LD_EXP 153
33554: EQUAL
33555: AND
33556: PUSH
33557: LD_VAR 0 3
33561: PPUSH
33562: CALL_OW 263
33566: PUSH
33567: LD_INT 3
33569: EQUAL
33570: AND
33571: IFFALSE 33587
// HackDestroyVehicle ( unit , selectedUnit ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 3
33582: PPUSH
33583: CALL 35096 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33587: LD_VAR 0 1
33591: PUSH
33592: LD_INT 255
33594: EQUAL
33595: PUSH
33596: LD_VAR 0 2
33600: PPUSH
33601: CALL_OW 264
33605: PUSH
33606: LD_INT 14
33608: PUSH
33609: LD_INT 53
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: IN
33616: AND
33617: PUSH
33618: LD_VAR 0 4
33622: PPUSH
33623: LD_VAR 0 5
33627: PPUSH
33628: CALL_OW 488
33632: AND
33633: IFFALSE 33657
// CutTreeXYR ( unit , x , y , 12 ) ;
33635: LD_VAR 0 2
33639: PPUSH
33640: LD_VAR 0 4
33644: PPUSH
33645: LD_VAR 0 5
33649: PPUSH
33650: LD_INT 12
33652: PPUSH
33653: CALL 33662 0 4
// end ;
33657: LD_VAR 0 6
33661: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33673: LD_VAR 0 1
33677: NOT
33678: PUSH
33679: LD_VAR 0 2
33683: PPUSH
33684: LD_VAR 0 3
33688: PPUSH
33689: CALL_OW 488
33693: NOT
33694: OR
33695: PUSH
33696: LD_VAR 0 4
33700: NOT
33701: OR
33702: IFFALSE 33706
// exit ;
33704: GO 34046
// list := [ ] ;
33706: LD_ADDR_VAR 0 13
33710: PUSH
33711: EMPTY
33712: ST_TO_ADDR
// if x - r < 0 then
33713: LD_VAR 0 2
33717: PUSH
33718: LD_VAR 0 4
33722: MINUS
33723: PUSH
33724: LD_INT 0
33726: LESS
33727: IFFALSE 33739
// min_x := 0 else
33729: LD_ADDR_VAR 0 7
33733: PUSH
33734: LD_INT 0
33736: ST_TO_ADDR
33737: GO 33755
// min_x := x - r ;
33739: LD_ADDR_VAR 0 7
33743: PUSH
33744: LD_VAR 0 2
33748: PUSH
33749: LD_VAR 0 4
33753: MINUS
33754: ST_TO_ADDR
// if y - r < 0 then
33755: LD_VAR 0 3
33759: PUSH
33760: LD_VAR 0 4
33764: MINUS
33765: PUSH
33766: LD_INT 0
33768: LESS
33769: IFFALSE 33781
// min_y := 0 else
33771: LD_ADDR_VAR 0 8
33775: PUSH
33776: LD_INT 0
33778: ST_TO_ADDR
33779: GO 33797
// min_y := y - r ;
33781: LD_ADDR_VAR 0 8
33785: PUSH
33786: LD_VAR 0 3
33790: PUSH
33791: LD_VAR 0 4
33795: MINUS
33796: ST_TO_ADDR
// max_x := x + r ;
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_VAR 0 2
33806: PUSH
33807: LD_VAR 0 4
33811: PLUS
33812: ST_TO_ADDR
// max_y := y + r ;
33813: LD_ADDR_VAR 0 10
33817: PUSH
33818: LD_VAR 0 3
33822: PUSH
33823: LD_VAR 0 4
33827: PLUS
33828: ST_TO_ADDR
// for _x = min_x to max_x do
33829: LD_ADDR_VAR 0 11
33833: PUSH
33834: DOUBLE
33835: LD_VAR 0 7
33839: DEC
33840: ST_TO_ADDR
33841: LD_VAR 0 9
33845: PUSH
33846: FOR_TO
33847: IFFALSE 33964
// for _y = min_y to max_y do
33849: LD_ADDR_VAR 0 12
33853: PUSH
33854: DOUBLE
33855: LD_VAR 0 8
33859: DEC
33860: ST_TO_ADDR
33861: LD_VAR 0 10
33865: PUSH
33866: FOR_TO
33867: IFFALSE 33960
// begin if not ValidHex ( _x , _y ) then
33869: LD_VAR 0 11
33873: PPUSH
33874: LD_VAR 0 12
33878: PPUSH
33879: CALL_OW 488
33883: NOT
33884: IFFALSE 33888
// continue ;
33886: GO 33866
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33888: LD_VAR 0 11
33892: PPUSH
33893: LD_VAR 0 12
33897: PPUSH
33898: CALL_OW 351
33902: PUSH
33903: LD_VAR 0 11
33907: PPUSH
33908: LD_VAR 0 12
33912: PPUSH
33913: CALL_OW 554
33917: AND
33918: IFFALSE 33958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33920: LD_ADDR_VAR 0 13
33924: PUSH
33925: LD_VAR 0 13
33929: PPUSH
33930: LD_VAR 0 13
33934: PUSH
33935: LD_INT 1
33937: PLUS
33938: PPUSH
33939: LD_VAR 0 11
33943: PUSH
33944: LD_VAR 0 12
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PPUSH
33953: CALL_OW 2
33957: ST_TO_ADDR
// end ;
33958: GO 33866
33960: POP
33961: POP
33962: GO 33846
33964: POP
33965: POP
// if not list then
33966: LD_VAR 0 13
33970: NOT
33971: IFFALSE 33975
// exit ;
33973: GO 34046
// for i in list do
33975: LD_ADDR_VAR 0 6
33979: PUSH
33980: LD_VAR 0 13
33984: PUSH
33985: FOR_IN
33986: IFFALSE 34044
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33988: LD_VAR 0 1
33992: PPUSH
33993: LD_STRING M
33995: PUSH
33996: LD_VAR 0 6
34000: PUSH
34001: LD_INT 1
34003: ARRAY
34004: PUSH
34005: LD_VAR 0 6
34009: PUSH
34010: LD_INT 2
34012: ARRAY
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: PPUSH
34038: CALL_OW 447
34042: GO 33985
34044: POP
34045: POP
// end ;
34046: LD_VAR 0 5
34050: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34051: LD_EXP 145
34055: NOT
34056: IFFALSE 34106
34058: GO 34060
34060: DISABLE
// begin initHack := true ;
34061: LD_ADDR_EXP 145
34065: PUSH
34066: LD_INT 1
34068: ST_TO_ADDR
// hackTanks := [ ] ;
34069: LD_ADDR_EXP 146
34073: PUSH
34074: EMPTY
34075: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34076: LD_ADDR_EXP 147
34080: PUSH
34081: EMPTY
34082: ST_TO_ADDR
// hackLimit := 3 ;
34083: LD_ADDR_EXP 148
34087: PUSH
34088: LD_INT 3
34090: ST_TO_ADDR
// hackDist := 12 ;
34091: LD_ADDR_EXP 149
34095: PUSH
34096: LD_INT 12
34098: ST_TO_ADDR
// hackCounter := [ ] ;
34099: LD_ADDR_EXP 150
34103: PUSH
34104: EMPTY
34105: ST_TO_ADDR
// end ;
34106: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34107: LD_EXP 145
34111: PUSH
34112: LD_INT 34
34114: PUSH
34115: LD_EXP 153
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PPUSH
34124: CALL_OW 69
34128: AND
34129: IFFALSE 34384
34131: GO 34133
34133: DISABLE
34134: LD_INT 0
34136: PPUSH
34137: PPUSH
// begin enable ;
34138: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34139: LD_ADDR_VAR 0 1
34143: PUSH
34144: LD_INT 34
34146: PUSH
34147: LD_EXP 153
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PPUSH
34156: CALL_OW 69
34160: PUSH
34161: FOR_IN
34162: IFFALSE 34382
// begin if not i in hackTanks then
34164: LD_VAR 0 1
34168: PUSH
34169: LD_EXP 146
34173: IN
34174: NOT
34175: IFFALSE 34258
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34177: LD_ADDR_EXP 146
34181: PUSH
34182: LD_EXP 146
34186: PPUSH
34187: LD_EXP 146
34191: PUSH
34192: LD_INT 1
34194: PLUS
34195: PPUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 1
34205: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34206: LD_ADDR_EXP 147
34210: PUSH
34211: LD_EXP 147
34215: PPUSH
34216: LD_EXP 147
34220: PUSH
34221: LD_INT 1
34223: PLUS
34224: PPUSH
34225: EMPTY
34226: PPUSH
34227: CALL_OW 1
34231: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34232: LD_ADDR_EXP 150
34236: PUSH
34237: LD_EXP 150
34241: PPUSH
34242: LD_EXP 150
34246: PUSH
34247: LD_INT 1
34249: PLUS
34250: PPUSH
34251: EMPTY
34252: PPUSH
34253: CALL_OW 1
34257: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34258: LD_VAR 0 1
34262: PPUSH
34263: CALL_OW 302
34267: NOT
34268: IFFALSE 34281
// begin HackUnlinkAll ( i ) ;
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL 34387 0 1
// continue ;
34279: GO 34161
// end ; HackCheckCapturedStatus ( i ) ;
34281: LD_VAR 0 1
34285: PPUSH
34286: CALL 34830 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34290: LD_ADDR_VAR 0 2
34294: PUSH
34295: LD_INT 81
34297: PUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 255
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 33
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 91
34324: PUSH
34325: LD_VAR 0 1
34329: PUSH
34330: LD_EXP 149
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 50
34342: PUSH
34343: EMPTY
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 69
34356: ST_TO_ADDR
// if not tmp then
34357: LD_VAR 0 2
34361: NOT
34362: IFFALSE 34366
// continue ;
34364: GO 34161
// HackLink ( i , tmp ) ;
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_VAR 0 2
34375: PPUSH
34376: CALL 34523 0 2
// end ;
34380: GO 34161
34382: POP
34383: POP
// end ;
34384: PPOPN 2
34386: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34387: LD_INT 0
34389: PPUSH
34390: PPUSH
34391: PPUSH
// if not hack in hackTanks then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_EXP 146
34401: IN
34402: NOT
34403: IFFALSE 34407
// exit ;
34405: GO 34518
// index := GetElementIndex ( hackTanks , hack ) ;
34407: LD_ADDR_VAR 0 4
34411: PUSH
34412: LD_EXP 146
34416: PPUSH
34417: LD_VAR 0 1
34421: PPUSH
34422: CALL 40074 0 2
34426: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34427: LD_EXP 147
34431: PUSH
34432: LD_VAR 0 4
34436: ARRAY
34437: IFFALSE 34518
// begin for i in hackTanksCaptured [ index ] do
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_EXP 147
34448: PUSH
34449: LD_VAR 0 4
34453: ARRAY
34454: PUSH
34455: FOR_IN
34456: IFFALSE 34482
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 1
34465: ARRAY
34466: PPUSH
34467: LD_VAR 0 3
34471: PUSH
34472: LD_INT 2
34474: ARRAY
34475: PPUSH
34476: CALL_OW 235
34480: GO 34455
34482: POP
34483: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34484: LD_ADDR_EXP 147
34488: PUSH
34489: LD_EXP 147
34493: PPUSH
34494: LD_VAR 0 4
34498: PPUSH
34499: EMPTY
34500: PPUSH
34501: CALL_OW 1
34505: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34506: LD_VAR 0 1
34510: PPUSH
34511: LD_INT 0
34513: PPUSH
34514: CALL_OW 505
// end ; end ;
34518: LD_VAR 0 2
34522: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34523: LD_INT 0
34525: PPUSH
34526: PPUSH
34527: PPUSH
// if not hack in hackTanks or not vehicles then
34528: LD_VAR 0 1
34532: PUSH
34533: LD_EXP 146
34537: IN
34538: NOT
34539: PUSH
34540: LD_VAR 0 2
34544: NOT
34545: OR
34546: IFFALSE 34550
// exit ;
34548: GO 34825
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34550: LD_ADDR_VAR 0 2
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: LD_VAR 0 2
34564: PPUSH
34565: LD_INT 1
34567: PPUSH
34568: LD_INT 1
34570: PPUSH
34571: CALL 40724 0 4
34575: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34576: LD_ADDR_VAR 0 5
34580: PUSH
34581: LD_EXP 146
34585: PPUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL 40074 0 2
34595: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34596: LD_EXP 147
34600: PUSH
34601: LD_VAR 0 5
34605: ARRAY
34606: PUSH
34607: LD_EXP 148
34611: LESS
34612: IFFALSE 34801
// begin for i := 1 to vehicles do
34614: LD_ADDR_VAR 0 4
34618: PUSH
34619: DOUBLE
34620: LD_INT 1
34622: DEC
34623: ST_TO_ADDR
34624: LD_VAR 0 2
34628: PUSH
34629: FOR_TO
34630: IFFALSE 34799
// begin if hackTanksCaptured [ index ] = hackLimit then
34632: LD_EXP 147
34636: PUSH
34637: LD_VAR 0 5
34641: ARRAY
34642: PUSH
34643: LD_EXP 148
34647: EQUAL
34648: IFFALSE 34652
// break ;
34650: GO 34799
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34652: LD_ADDR_EXP 150
34656: PUSH
34657: LD_EXP 150
34661: PPUSH
34662: LD_VAR 0 5
34666: PPUSH
34667: LD_EXP 150
34671: PUSH
34672: LD_VAR 0 5
34676: ARRAY
34677: PUSH
34678: LD_INT 1
34680: PLUS
34681: PPUSH
34682: CALL_OW 1
34686: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34687: LD_ADDR_EXP 147
34691: PUSH
34692: LD_EXP 147
34696: PPUSH
34697: LD_VAR 0 5
34701: PUSH
34702: LD_EXP 147
34706: PUSH
34707: LD_VAR 0 5
34711: ARRAY
34712: PUSH
34713: LD_INT 1
34715: PLUS
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PPUSH
34721: LD_VAR 0 2
34725: PUSH
34726: LD_VAR 0 4
34730: ARRAY
34731: PUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_VAR 0 4
34741: ARRAY
34742: PPUSH
34743: CALL_OW 255
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PPUSH
34752: CALL 40289 0 3
34756: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34757: LD_VAR 0 2
34761: PUSH
34762: LD_VAR 0 4
34766: ARRAY
34767: PPUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: CALL_OW 255
34777: PPUSH
34778: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34782: LD_VAR 0 2
34786: PUSH
34787: LD_VAR 0 4
34791: ARRAY
34792: PPUSH
34793: CALL_OW 141
// end ;
34797: GO 34629
34799: POP
34800: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34801: LD_VAR 0 1
34805: PPUSH
34806: LD_EXP 147
34810: PUSH
34811: LD_VAR 0 5
34815: ARRAY
34816: PUSH
34817: LD_INT 0
34819: PLUS
34820: PPUSH
34821: CALL_OW 505
// end ;
34825: LD_VAR 0 3
34829: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
// if not hack in hackTanks then
34836: LD_VAR 0 1
34840: PUSH
34841: LD_EXP 146
34845: IN
34846: NOT
34847: IFFALSE 34851
// exit ;
34849: GO 35091
// index := GetElementIndex ( hackTanks , hack ) ;
34851: LD_ADDR_VAR 0 4
34855: PUSH
34856: LD_EXP 146
34860: PPUSH
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL 40074 0 2
34870: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34871: LD_ADDR_VAR 0 3
34875: PUSH
34876: DOUBLE
34877: LD_EXP 147
34881: PUSH
34882: LD_VAR 0 4
34886: ARRAY
34887: INC
34888: ST_TO_ADDR
34889: LD_INT 1
34891: PUSH
34892: FOR_DOWNTO
34893: IFFALSE 35065
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34895: LD_ADDR_VAR 0 5
34899: PUSH
34900: LD_EXP 147
34904: PUSH
34905: LD_VAR 0 4
34909: ARRAY
34910: PUSH
34911: LD_VAR 0 3
34915: ARRAY
34916: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34917: LD_VAR 0 5
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: PPUSH
34926: CALL_OW 302
34930: NOT
34931: PUSH
34932: LD_VAR 0 5
34936: PUSH
34937: LD_INT 1
34939: ARRAY
34940: PPUSH
34941: CALL_OW 255
34945: PUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 255
34955: NONEQUAL
34956: OR
34957: IFFALSE 35063
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34959: LD_VAR 0 5
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PPUSH
34968: CALL_OW 305
34972: PUSH
34973: LD_VAR 0 5
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: PPUSH
34982: CALL_OW 255
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 255
34996: EQUAL
34997: AND
34998: IFFALSE 35022
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35000: LD_VAR 0 5
35004: PUSH
35005: LD_INT 1
35007: ARRAY
35008: PPUSH
35009: LD_VAR 0 5
35013: PUSH
35014: LD_INT 2
35016: ARRAY
35017: PPUSH
35018: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35022: LD_ADDR_EXP 147
35026: PUSH
35027: LD_EXP 147
35031: PPUSH
35032: LD_VAR 0 4
35036: PPUSH
35037: LD_EXP 147
35041: PUSH
35042: LD_VAR 0 4
35046: ARRAY
35047: PPUSH
35048: LD_VAR 0 3
35052: PPUSH
35053: CALL_OW 3
35057: PPUSH
35058: CALL_OW 1
35062: ST_TO_ADDR
// end ; end ;
35063: GO 34892
35065: POP
35066: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35067: LD_VAR 0 1
35071: PPUSH
35072: LD_EXP 147
35076: PUSH
35077: LD_VAR 0 4
35081: ARRAY
35082: PUSH
35083: LD_INT 0
35085: PLUS
35086: PPUSH
35087: CALL_OW 505
// end ;
35091: LD_VAR 0 2
35095: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
35100: PPUSH
35101: PPUSH
// if not hack in hackTanks then
35102: LD_VAR 0 1
35106: PUSH
35107: LD_EXP 146
35111: IN
35112: NOT
35113: IFFALSE 35117
// exit ;
35115: GO 35202
// index := GetElementIndex ( hackTanks , hack ) ;
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: LD_EXP 146
35126: PPUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL 40074 0 2
35136: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35137: LD_ADDR_VAR 0 4
35141: PUSH
35142: DOUBLE
35143: LD_INT 1
35145: DEC
35146: ST_TO_ADDR
35147: LD_EXP 147
35151: PUSH
35152: LD_VAR 0 5
35156: ARRAY
35157: PUSH
35158: FOR_TO
35159: IFFALSE 35200
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35161: LD_EXP 147
35165: PUSH
35166: LD_VAR 0 5
35170: ARRAY
35171: PUSH
35172: LD_VAR 0 4
35176: ARRAY
35177: PUSH
35178: LD_INT 1
35180: ARRAY
35181: PUSH
35182: LD_VAR 0 2
35186: EQUAL
35187: IFFALSE 35198
// KillUnit ( vehicle ) ;
35189: LD_VAR 0 2
35193: PPUSH
35194: CALL_OW 66
35198: GO 35158
35200: POP
35201: POP
// end ; end_of_file
35202: LD_VAR 0 3
35206: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
35207: LD_INT 0
35209: PPUSH
// ar_crane := 88 ;
35210: LD_ADDR_EXP 157
35214: PUSH
35215: LD_INT 88
35217: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35218: LD_ADDR_EXP 152
35222: PUSH
35223: LD_INT 89
35225: ST_TO_ADDR
// us_hack := 99 ;
35226: LD_ADDR_EXP 153
35230: PUSH
35231: LD_INT 99
35233: ST_TO_ADDR
// us_artillery := 97 ;
35234: LD_ADDR_EXP 154
35238: PUSH
35239: LD_INT 97
35241: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35242: LD_ADDR_EXP 155
35246: PUSH
35247: LD_INT 91
35249: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
35250: LD_ADDR_EXP 156
35254: PUSH
35255: LD_INT 92
35257: ST_TO_ADDR
// ru_radar := 98 ;
35258: LD_ADDR_EXP 151
35262: PUSH
35263: LD_INT 98
35265: ST_TO_ADDR
// tech_Artillery := 80 ;
35266: LD_ADDR_EXP 158
35270: PUSH
35271: LD_INT 80
35273: ST_TO_ADDR
// tech_RadMat := 81 ;
35274: LD_ADDR_EXP 159
35278: PUSH
35279: LD_INT 81
35281: ST_TO_ADDR
// tech_BasicTools := 82 ;
35282: LD_ADDR_EXP 160
35286: PUSH
35287: LD_INT 82
35289: ST_TO_ADDR
// tech_Cargo := 83 ;
35290: LD_ADDR_EXP 161
35294: PUSH
35295: LD_INT 83
35297: ST_TO_ADDR
// tech_Track := 84 ;
35298: LD_ADDR_EXP 162
35302: PUSH
35303: LD_INT 84
35305: ST_TO_ADDR
// tech_Crane := 85 ;
35306: LD_ADDR_EXP 163
35310: PUSH
35311: LD_INT 85
35313: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35314: LD_ADDR_EXP 164
35318: PUSH
35319: LD_INT 86
35321: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35322: LD_ADDR_EXP 165
35326: PUSH
35327: LD_INT 87
35329: ST_TO_ADDR
// end ;
35330: LD_VAR 0 1
35334: RET
// every 1 do
35335: GO 35337
35337: DISABLE
// InitGlobalVariables ; end_of_file
35338: CALL 35207 0 0
35342: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35343: LD_INT 0
35345: PPUSH
35346: PPUSH
// if exist_mode then
35347: LD_VAR 0 2
35351: IFFALSE 35376
// unit := CreateCharacter ( prefix & ident ) else
35353: LD_ADDR_VAR 0 5
35357: PUSH
35358: LD_VAR 0 3
35362: PUSH
35363: LD_VAR 0 1
35367: STR
35368: PPUSH
35369: CALL_OW 34
35373: ST_TO_ADDR
35374: GO 35391
// unit := NewCharacter ( ident ) ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL_OW 25
35390: ST_TO_ADDR
// result := unit ;
35391: LD_ADDR_VAR 0 4
35395: PUSH
35396: LD_VAR 0 5
35400: ST_TO_ADDR
// end ;
35401: LD_VAR 0 4
35405: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35406: LD_INT 0
35408: PPUSH
35409: PPUSH
// if not side or not nation then
35410: LD_VAR 0 1
35414: NOT
35415: PUSH
35416: LD_VAR 0 2
35420: NOT
35421: OR
35422: IFFALSE 35426
// exit ;
35424: GO 36190
// case nation of nation_american :
35426: LD_VAR 0 2
35430: PUSH
35431: LD_INT 1
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35653
35439: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_INT 35
35447: PUSH
35448: LD_INT 45
35450: PUSH
35451: LD_INT 46
35453: PUSH
35454: LD_INT 47
35456: PUSH
35457: LD_INT 82
35459: PUSH
35460: LD_INT 83
35462: PUSH
35463: LD_INT 84
35465: PUSH
35466: LD_INT 85
35468: PUSH
35469: LD_INT 86
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 6
35480: PUSH
35481: LD_INT 15
35483: PUSH
35484: LD_INT 16
35486: PUSH
35487: LD_INT 7
35489: PUSH
35490: LD_INT 12
35492: PUSH
35493: LD_INT 13
35495: PUSH
35496: LD_INT 10
35498: PUSH
35499: LD_INT 14
35501: PUSH
35502: LD_INT 20
35504: PUSH
35505: LD_INT 21
35507: PUSH
35508: LD_INT 22
35510: PUSH
35511: LD_INT 25
35513: PUSH
35514: LD_INT 32
35516: PUSH
35517: LD_INT 27
35519: PUSH
35520: LD_INT 36
35522: PUSH
35523: LD_INT 69
35525: PUSH
35526: LD_INT 39
35528: PUSH
35529: LD_INT 34
35531: PUSH
35532: LD_INT 40
35534: PUSH
35535: LD_INT 48
35537: PUSH
35538: LD_INT 49
35540: PUSH
35541: LD_INT 50
35543: PUSH
35544: LD_INT 51
35546: PUSH
35547: LD_INT 52
35549: PUSH
35550: LD_INT 53
35552: PUSH
35553: LD_INT 54
35555: PUSH
35556: LD_INT 55
35558: PUSH
35559: LD_INT 56
35561: PUSH
35562: LD_INT 57
35564: PUSH
35565: LD_INT 58
35567: PUSH
35568: LD_INT 59
35570: PUSH
35571: LD_INT 60
35573: PUSH
35574: LD_INT 61
35576: PUSH
35577: LD_INT 62
35579: PUSH
35580: LD_INT 80
35582: PUSH
35583: LD_INT 82
35585: PUSH
35586: LD_INT 83
35588: PUSH
35589: LD_INT 84
35591: PUSH
35592: LD_INT 85
35594: PUSH
35595: LD_INT 86
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
35651: GO 36114
35653: LD_INT 2
35655: DOUBLE
35656: EQUAL
35657: IFTRUE 35661
35659: GO 35883
35661: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
35662: LD_ADDR_VAR 0 4
35666: PUSH
35667: LD_INT 35
35669: PUSH
35670: LD_INT 45
35672: PUSH
35673: LD_INT 46
35675: PUSH
35676: LD_INT 47
35678: PUSH
35679: LD_INT 82
35681: PUSH
35682: LD_INT 83
35684: PUSH
35685: LD_INT 84
35687: PUSH
35688: LD_INT 85
35690: PUSH
35691: LD_INT 87
35693: PUSH
35694: LD_INT 70
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 11
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 5
35711: PUSH
35712: LD_INT 6
35714: PUSH
35715: LD_INT 15
35717: PUSH
35718: LD_INT 18
35720: PUSH
35721: LD_INT 7
35723: PUSH
35724: LD_INT 17
35726: PUSH
35727: LD_INT 8
35729: PUSH
35730: LD_INT 20
35732: PUSH
35733: LD_INT 21
35735: PUSH
35736: LD_INT 22
35738: PUSH
35739: LD_INT 72
35741: PUSH
35742: LD_INT 26
35744: PUSH
35745: LD_INT 69
35747: PUSH
35748: LD_INT 39
35750: PUSH
35751: LD_INT 40
35753: PUSH
35754: LD_INT 41
35756: PUSH
35757: LD_INT 42
35759: PUSH
35760: LD_INT 43
35762: PUSH
35763: LD_INT 48
35765: PUSH
35766: LD_INT 49
35768: PUSH
35769: LD_INT 50
35771: PUSH
35772: LD_INT 51
35774: PUSH
35775: LD_INT 52
35777: PUSH
35778: LD_INT 53
35780: PUSH
35781: LD_INT 54
35783: PUSH
35784: LD_INT 55
35786: PUSH
35787: LD_INT 56
35789: PUSH
35790: LD_INT 60
35792: PUSH
35793: LD_INT 61
35795: PUSH
35796: LD_INT 62
35798: PUSH
35799: LD_INT 66
35801: PUSH
35802: LD_INT 67
35804: PUSH
35805: LD_INT 68
35807: PUSH
35808: LD_INT 81
35810: PUSH
35811: LD_INT 82
35813: PUSH
35814: LD_INT 83
35816: PUSH
35817: LD_INT 84
35819: PUSH
35820: LD_INT 85
35822: PUSH
35823: LD_INT 87
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
35881: GO 36114
35883: LD_INT 3
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 36113
35891: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35892: LD_ADDR_VAR 0 4
35896: PUSH
35897: LD_INT 46
35899: PUSH
35900: LD_INT 47
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 82
35911: PUSH
35912: LD_INT 83
35914: PUSH
35915: LD_INT 84
35917: PUSH
35918: LD_INT 85
35920: PUSH
35921: LD_INT 86
35923: PUSH
35924: LD_INT 11
35926: PUSH
35927: LD_INT 9
35929: PUSH
35930: LD_INT 20
35932: PUSH
35933: LD_INT 19
35935: PUSH
35936: LD_INT 21
35938: PUSH
35939: LD_INT 24
35941: PUSH
35942: LD_INT 22
35944: PUSH
35945: LD_INT 25
35947: PUSH
35948: LD_INT 28
35950: PUSH
35951: LD_INT 29
35953: PUSH
35954: LD_INT 30
35956: PUSH
35957: LD_INT 31
35959: PUSH
35960: LD_INT 37
35962: PUSH
35963: LD_INT 38
35965: PUSH
35966: LD_INT 32
35968: PUSH
35969: LD_INT 27
35971: PUSH
35972: LD_INT 33
35974: PUSH
35975: LD_INT 69
35977: PUSH
35978: LD_INT 39
35980: PUSH
35981: LD_INT 34
35983: PUSH
35984: LD_INT 40
35986: PUSH
35987: LD_INT 71
35989: PUSH
35990: LD_INT 23
35992: PUSH
35993: LD_INT 44
35995: PUSH
35996: LD_INT 48
35998: PUSH
35999: LD_INT 49
36001: PUSH
36002: LD_INT 50
36004: PUSH
36005: LD_INT 51
36007: PUSH
36008: LD_INT 52
36010: PUSH
36011: LD_INT 53
36013: PUSH
36014: LD_INT 54
36016: PUSH
36017: LD_INT 55
36019: PUSH
36020: LD_INT 56
36022: PUSH
36023: LD_INT 57
36025: PUSH
36026: LD_INT 58
36028: PUSH
36029: LD_INT 59
36031: PUSH
36032: LD_INT 63
36034: PUSH
36035: LD_INT 64
36037: PUSH
36038: LD_INT 65
36040: PUSH
36041: LD_INT 82
36043: PUSH
36044: LD_INT 83
36046: PUSH
36047: LD_INT 84
36049: PUSH
36050: LD_INT 85
36052: PUSH
36053: LD_INT 86
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: ST_TO_ADDR
36111: GO 36114
36113: POP
// if state > - 1 and state < 3 then
36114: LD_VAR 0 3
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: GREATER
36123: PUSH
36124: LD_VAR 0 3
36128: PUSH
36129: LD_INT 3
36131: LESS
36132: AND
36133: IFFALSE 36190
// for i in result do
36135: LD_ADDR_VAR 0 5
36139: PUSH
36140: LD_VAR 0 4
36144: PUSH
36145: FOR_IN
36146: IFFALSE 36188
// if GetTech ( i , side ) <> state then
36148: LD_VAR 0 5
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 321
36162: PUSH
36163: LD_VAR 0 3
36167: NONEQUAL
36168: IFFALSE 36186
// result := result diff i ;
36170: LD_ADDR_VAR 0 4
36174: PUSH
36175: LD_VAR 0 4
36179: PUSH
36180: LD_VAR 0 5
36184: DIFF
36185: ST_TO_ADDR
36186: GO 36145
36188: POP
36189: POP
// end ;
36190: LD_VAR 0 4
36194: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36195: LD_INT 0
36197: PPUSH
36198: PPUSH
36199: PPUSH
// result := true ;
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 1
36207: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36208: LD_ADDR_VAR 0 5
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: CALL_OW 480
36222: ST_TO_ADDR
// if not tmp then
36223: LD_VAR 0 5
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36281
// for i in tmp do
36232: LD_ADDR_VAR 0 4
36236: PUSH
36237: LD_VAR 0 5
36241: PUSH
36242: FOR_IN
36243: IFFALSE 36279
// if GetTech ( i , side ) <> state_researched then
36245: LD_VAR 0 4
36249: PPUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 321
36259: PUSH
36260: LD_INT 2
36262: NONEQUAL
36263: IFFALSE 36277
// begin result := false ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_INT 0
36272: ST_TO_ADDR
// exit ;
36273: POP
36274: POP
36275: GO 36281
// end ;
36277: GO 36242
36279: POP
36280: POP
// end ;
36281: LD_VAR 0 3
36285: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36286: LD_INT 0
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36301: LD_VAR 0 1
36305: NOT
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 257
36316: PUSH
36317: LD_INT 9
36319: NONEQUAL
36320: OR
36321: IFFALSE 36325
// exit ;
36323: GO 36898
// side := GetSide ( unit ) ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: CALL_OW 255
36339: ST_TO_ADDR
// tech_space := tech_spacanom ;
36340: LD_ADDR_VAR 0 12
36344: PUSH
36345: LD_INT 29
36347: ST_TO_ADDR
// tech_time := tech_taurad ;
36348: LD_ADDR_VAR 0 13
36352: PUSH
36353: LD_INT 28
36355: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36356: LD_ADDR_VAR 0 11
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 310
36370: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36371: LD_VAR 0 11
36375: PPUSH
36376: CALL_OW 247
36380: PUSH
36381: LD_INT 2
36383: EQUAL
36384: IFFALSE 36388
// exit ;
36386: GO 36898
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36388: LD_ADDR_VAR 0 8
36392: PUSH
36393: LD_INT 81
36395: PUSH
36396: LD_VAR 0 9
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 21
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PPUSH
36426: CALL_OW 69
36430: ST_TO_ADDR
// if not tmp then
36431: LD_VAR 0 8
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36898
// if in_unit then
36440: LD_VAR 0 11
36444: IFFALSE 36468
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36446: LD_ADDR_VAR 0 10
36450: PUSH
36451: LD_VAR 0 8
36455: PPUSH
36456: LD_VAR 0 11
36460: PPUSH
36461: CALL_OW 74
36465: ST_TO_ADDR
36466: GO 36488
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36468: LD_ADDR_VAR 0 10
36472: PUSH
36473: LD_VAR 0 8
36477: PPUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 74
36487: ST_TO_ADDR
// if not enemy then
36488: LD_VAR 0 10
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36898
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36497: LD_VAR 0 11
36501: PUSH
36502: LD_VAR 0 11
36506: PPUSH
36507: LD_VAR 0 10
36511: PPUSH
36512: CALL_OW 296
36516: PUSH
36517: LD_INT 13
36519: GREATER
36520: AND
36521: PUSH
36522: LD_VAR 0 1
36526: PPUSH
36527: LD_VAR 0 10
36531: PPUSH
36532: CALL_OW 296
36536: PUSH
36537: LD_INT 12
36539: GREATER
36540: OR
36541: IFFALSE 36545
// exit ;
36543: GO 36898
// missile := [ 1 ] ;
36545: LD_ADDR_VAR 0 14
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36556: LD_VAR 0 9
36560: PPUSH
36561: LD_VAR 0 12
36565: PPUSH
36566: CALL_OW 325
36570: IFFALSE 36599
// missile := Insert ( missile , missile + 1 , 2 ) ;
36572: LD_ADDR_VAR 0 14
36576: PUSH
36577: LD_VAR 0 14
36581: PPUSH
36582: LD_VAR 0 14
36586: PUSH
36587: LD_INT 1
36589: PLUS
36590: PPUSH
36591: LD_INT 2
36593: PPUSH
36594: CALL_OW 2
36598: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36599: LD_VAR 0 9
36603: PPUSH
36604: LD_VAR 0 13
36608: PPUSH
36609: CALL_OW 325
36613: PUSH
36614: LD_VAR 0 10
36618: PPUSH
36619: CALL_OW 255
36623: PPUSH
36624: LD_VAR 0 13
36628: PPUSH
36629: CALL_OW 325
36633: NOT
36634: AND
36635: IFFALSE 36664
// missile := Insert ( missile , missile + 1 , 3 ) ;
36637: LD_ADDR_VAR 0 14
36641: PUSH
36642: LD_VAR 0 14
36646: PPUSH
36647: LD_VAR 0 14
36651: PUSH
36652: LD_INT 1
36654: PLUS
36655: PPUSH
36656: LD_INT 3
36658: PPUSH
36659: CALL_OW 2
36663: ST_TO_ADDR
// if missile < 2 then
36664: LD_VAR 0 14
36668: PUSH
36669: LD_INT 2
36671: LESS
36672: IFFALSE 36676
// exit ;
36674: GO 36898
// x := GetX ( enemy ) ;
36676: LD_ADDR_VAR 0 4
36680: PUSH
36681: LD_VAR 0 10
36685: PPUSH
36686: CALL_OW 250
36690: ST_TO_ADDR
// y := GetY ( enemy ) ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_VAR 0 10
36700: PPUSH
36701: CALL_OW 251
36705: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36706: LD_ADDR_VAR 0 6
36710: PUSH
36711: LD_VAR 0 4
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PPUSH
36720: LD_INT 1
36722: PPUSH
36723: CALL_OW 12
36727: PLUS
36728: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36729: LD_ADDR_VAR 0 7
36733: PUSH
36734: LD_VAR 0 5
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PPUSH
36743: LD_INT 1
36745: PPUSH
36746: CALL_OW 12
36750: PLUS
36751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36752: LD_VAR 0 6
36756: PPUSH
36757: LD_VAR 0 7
36761: PPUSH
36762: CALL_OW 488
36766: NOT
36767: IFFALSE 36789
// begin _x := x ;
36769: LD_ADDR_VAR 0 6
36773: PUSH
36774: LD_VAR 0 4
36778: ST_TO_ADDR
// _y := y ;
36779: LD_ADDR_VAR 0 7
36783: PUSH
36784: LD_VAR 0 5
36788: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36789: LD_ADDR_VAR 0 3
36793: PUSH
36794: LD_INT 1
36796: PPUSH
36797: LD_VAR 0 14
36801: PPUSH
36802: CALL_OW 12
36806: ST_TO_ADDR
// case i of 1 :
36807: LD_VAR 0 3
36811: PUSH
36812: LD_INT 1
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36837
36820: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36821: LD_VAR 0 1
36825: PPUSH
36826: LD_VAR 0 10
36830: PPUSH
36831: CALL_OW 115
36835: GO 36898
36837: LD_INT 2
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 36867
36845: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36846: LD_VAR 0 1
36850: PPUSH
36851: LD_VAR 0 6
36855: PPUSH
36856: LD_VAR 0 7
36860: PPUSH
36861: CALL_OW 153
36865: GO 36898
36867: LD_INT 3
36869: DOUBLE
36870: EQUAL
36871: IFTRUE 36875
36873: GO 36897
36875: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36876: LD_VAR 0 1
36880: PPUSH
36881: LD_VAR 0 6
36885: PPUSH
36886: LD_VAR 0 7
36890: PPUSH
36891: CALL_OW 154
36895: GO 36898
36897: POP
// end ;
36898: LD_VAR 0 2
36902: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36903: LD_INT 0
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
// if not unit or not building then
36911: LD_VAR 0 1
36915: NOT
36916: PUSH
36917: LD_VAR 0 2
36921: NOT
36922: OR
36923: IFFALSE 36927
// exit ;
36925: GO 37085
// x := GetX ( building ) ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: LD_VAR 0 2
36936: PPUSH
36937: CALL_OW 250
36941: ST_TO_ADDR
// y := GetY ( building ) ;
36942: LD_ADDR_VAR 0 6
36946: PUSH
36947: LD_VAR 0 2
36951: PPUSH
36952: CALL_OW 251
36956: ST_TO_ADDR
// for i = 0 to 5 do
36957: LD_ADDR_VAR 0 4
36961: PUSH
36962: DOUBLE
36963: LD_INT 0
36965: DEC
36966: ST_TO_ADDR
36967: LD_INT 5
36969: PUSH
36970: FOR_TO
36971: IFFALSE 37083
// begin _x := ShiftX ( x , i , 3 ) ;
36973: LD_ADDR_VAR 0 7
36977: PUSH
36978: LD_VAR 0 5
36982: PPUSH
36983: LD_VAR 0 4
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 272
36995: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36996: LD_ADDR_VAR 0 8
37000: PUSH
37001: LD_VAR 0 6
37005: PPUSH
37006: LD_VAR 0 4
37010: PPUSH
37011: LD_INT 3
37013: PPUSH
37014: CALL_OW 273
37018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37019: LD_VAR 0 7
37023: PPUSH
37024: LD_VAR 0 8
37028: PPUSH
37029: CALL_OW 488
37033: NOT
37034: IFFALSE 37038
// continue ;
37036: GO 36970
// if HexInfo ( _x , _y ) = 0 then
37038: LD_VAR 0 7
37042: PPUSH
37043: LD_VAR 0 8
37047: PPUSH
37048: CALL_OW 428
37052: PUSH
37053: LD_INT 0
37055: EQUAL
37056: IFFALSE 37081
// begin ComMoveXY ( unit , _x , _y ) ;
37058: LD_VAR 0 1
37062: PPUSH
37063: LD_VAR 0 7
37067: PPUSH
37068: LD_VAR 0 8
37072: PPUSH
37073: CALL_OW 111
// exit ;
37077: POP
37078: POP
37079: GO 37085
// end ; end ;
37081: GO 36970
37083: POP
37084: POP
// end ;
37085: LD_VAR 0 3
37089: RET
// export function ScanBase ( side , base_area ) ; begin
37090: LD_INT 0
37092: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_VAR 0 2
37102: PPUSH
37103: LD_INT 81
37105: PUSH
37106: LD_VAR 0 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PPUSH
37115: CALL_OW 70
37119: ST_TO_ADDR
// end ;
37120: LD_VAR 0 3
37124: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
// result := false ;
37131: LD_ADDR_VAR 0 2
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
// side := GetSide ( unit ) ;
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 255
37153: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37154: LD_ADDR_VAR 0 4
37158: PUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 248
37168: ST_TO_ADDR
// case nat of 1 :
37169: LD_VAR 0 4
37173: PUSH
37174: LD_INT 1
37176: DOUBLE
37177: EQUAL
37178: IFTRUE 37182
37180: GO 37193
37182: POP
// tech := tech_lassight ; 2 :
37183: LD_ADDR_VAR 0 5
37187: PUSH
37188: LD_INT 12
37190: ST_TO_ADDR
37191: GO 37232
37193: LD_INT 2
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37201
37199: GO 37212
37201: POP
// tech := tech_mortar ; 3 :
37202: LD_ADDR_VAR 0 5
37206: PUSH
37207: LD_INT 41
37209: ST_TO_ADDR
37210: GO 37232
37212: LD_INT 3
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37231
37220: POP
// tech := tech_bazooka ; end ;
37221: LD_ADDR_VAR 0 5
37225: PUSH
37226: LD_INT 44
37228: ST_TO_ADDR
37229: GO 37232
37231: POP
// if Researched ( side , tech ) then
37232: LD_VAR 0 3
37236: PPUSH
37237: LD_VAR 0 5
37241: PPUSH
37242: CALL_OW 325
37246: IFFALSE 37273
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37248: LD_ADDR_VAR 0 2
37252: PUSH
37253: LD_INT 5
37255: PUSH
37256: LD_INT 8
37258: PUSH
37259: LD_INT 9
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: PUSH
37267: LD_VAR 0 4
37271: ARRAY
37272: ST_TO_ADDR
// end ;
37273: LD_VAR 0 2
37277: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37278: LD_INT 0
37280: PPUSH
37281: PPUSH
37282: PPUSH
// if not mines then
37283: LD_VAR 0 2
37287: NOT
37288: IFFALSE 37292
// exit ;
37290: GO 37436
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37292: LD_ADDR_VAR 0 5
37296: PUSH
37297: LD_INT 81
37299: PUSH
37300: LD_VAR 0 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 21
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PPUSH
37330: CALL_OW 69
37334: ST_TO_ADDR
// for i in mines do
37335: LD_ADDR_VAR 0 4
37339: PUSH
37340: LD_VAR 0 2
37344: PUSH
37345: FOR_IN
37346: IFFALSE 37434
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37348: LD_VAR 0 4
37352: PUSH
37353: LD_INT 1
37355: ARRAY
37356: PPUSH
37357: LD_VAR 0 4
37361: PUSH
37362: LD_INT 2
37364: ARRAY
37365: PPUSH
37366: CALL_OW 458
37370: NOT
37371: IFFALSE 37375
// continue ;
37373: GO 37345
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37375: LD_VAR 0 4
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: PPUSH
37384: LD_VAR 0 4
37388: PUSH
37389: LD_INT 2
37391: ARRAY
37392: PPUSH
37393: CALL_OW 428
37397: PUSH
37398: LD_VAR 0 5
37402: IN
37403: IFFALSE 37432
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37405: LD_VAR 0 4
37409: PUSH
37410: LD_INT 1
37412: ARRAY
37413: PPUSH
37414: LD_VAR 0 4
37418: PUSH
37419: LD_INT 2
37421: ARRAY
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 456
// end ;
37432: GO 37345
37434: POP
37435: POP
// end ;
37436: LD_VAR 0 3
37440: RET
// export function Count ( array ) ; var i ; begin
37441: LD_INT 0
37443: PPUSH
37444: PPUSH
// result := 0 ;
37445: LD_ADDR_VAR 0 2
37449: PUSH
37450: LD_INT 0
37452: ST_TO_ADDR
// for i in array do
37453: LD_ADDR_VAR 0 3
37457: PUSH
37458: LD_VAR 0 1
37462: PUSH
37463: FOR_IN
37464: IFFALSE 37488
// if i then
37466: LD_VAR 0 3
37470: IFFALSE 37486
// result := result + 1 ;
37472: LD_ADDR_VAR 0 2
37476: PUSH
37477: LD_VAR 0 2
37481: PUSH
37482: LD_INT 1
37484: PLUS
37485: ST_TO_ADDR
37486: GO 37463
37488: POP
37489: POP
// end ;
37490: LD_VAR 0 2
37494: RET
// export function IsEmpty ( building ) ; begin
37495: LD_INT 0
37497: PPUSH
// if not building then
37498: LD_VAR 0 1
37502: NOT
37503: IFFALSE 37507
// exit ;
37505: GO 37550
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37507: LD_ADDR_VAR 0 2
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: LD_INT 22
37519: PUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 255
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 58
37536: PUSH
37537: EMPTY
37538: LIST
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PPUSH
37544: CALL_OW 69
37548: IN
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 2
37554: RET
// export function IsNotFull ( building ) ; begin
37555: LD_INT 0
37557: PPUSH
// if not building then
37558: LD_VAR 0 1
37562: NOT
37563: IFFALSE 37567
// exit ;
37565: GO 37586
// result := UnitsInside ( building ) < 6 ;
37567: LD_ADDR_VAR 0 2
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 313
37581: PUSH
37582: LD_INT 6
37584: LESS
37585: ST_TO_ADDR
// end ;
37586: LD_VAR 0 2
37590: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37591: LD_INT 0
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
// tmp := [ ] ;
37597: LD_ADDR_VAR 0 3
37601: PUSH
37602: EMPTY
37603: ST_TO_ADDR
// list := [ ] ;
37604: LD_ADDR_VAR 0 5
37608: PUSH
37609: EMPTY
37610: ST_TO_ADDR
// for i = 16 to 25 do
37611: LD_ADDR_VAR 0 4
37615: PUSH
37616: DOUBLE
37617: LD_INT 16
37619: DEC
37620: ST_TO_ADDR
37621: LD_INT 25
37623: PUSH
37624: FOR_TO
37625: IFFALSE 37698
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37627: LD_ADDR_VAR 0 3
37631: PUSH
37632: LD_VAR 0 3
37636: PUSH
37637: LD_INT 22
37639: PUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: CALL_OW 255
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 91
37656: PUSH
37657: LD_VAR 0 1
37661: PUSH
37662: LD_INT 6
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 30
37672: PUSH
37673: LD_VAR 0 4
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: PPUSH
37690: CALL_OW 69
37694: ADD
37695: ST_TO_ADDR
37696: GO 37624
37698: POP
37699: POP
// for i = 1 to tmp do
37700: LD_ADDR_VAR 0 4
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_VAR 0 3
37714: PUSH
37715: FOR_TO
37716: IFFALSE 37804
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37718: LD_ADDR_VAR 0 5
37722: PUSH
37723: LD_VAR 0 5
37727: PUSH
37728: LD_VAR 0 3
37732: PUSH
37733: LD_VAR 0 4
37737: ARRAY
37738: PPUSH
37739: CALL_OW 266
37743: PUSH
37744: LD_VAR 0 3
37748: PUSH
37749: LD_VAR 0 4
37753: ARRAY
37754: PPUSH
37755: CALL_OW 250
37759: PUSH
37760: LD_VAR 0 3
37764: PUSH
37765: LD_VAR 0 4
37769: ARRAY
37770: PPUSH
37771: CALL_OW 251
37775: PUSH
37776: LD_VAR 0 3
37780: PUSH
37781: LD_VAR 0 4
37785: ARRAY
37786: PPUSH
37787: CALL_OW 254
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: ADD
37801: ST_TO_ADDR
37802: GO 37715
37804: POP
37805: POP
// result := list ;
37806: LD_ADDR_VAR 0 2
37810: PUSH
37811: LD_VAR 0 5
37815: ST_TO_ADDR
// end ;
37816: LD_VAR 0 2
37820: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37821: LD_INT 0
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
// if not factory then
37830: LD_VAR 0 1
37834: NOT
37835: IFFALSE 37839
// exit ;
37837: GO 38432
// if control = control_apeman then
37839: LD_VAR 0 4
37843: PUSH
37844: LD_INT 5
37846: EQUAL
37847: IFFALSE 37956
// begin tmp := UnitsInside ( factory ) ;
37849: LD_ADDR_VAR 0 8
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 313
37863: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37864: LD_VAR 0 8
37868: PPUSH
37869: LD_INT 25
37871: PUSH
37872: LD_INT 12
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PPUSH
37879: CALL_OW 72
37883: NOT
37884: IFFALSE 37894
// control := control_manual ;
37886: LD_ADDR_VAR 0 4
37890: PUSH
37891: LD_INT 1
37893: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37894: LD_ADDR_VAR 0 8
37898: PUSH
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL 37591 0 1
37908: ST_TO_ADDR
// if tmp then
37909: LD_VAR 0 8
37913: IFFALSE 37956
// begin for i in tmp do
37915: LD_ADDR_VAR 0 7
37919: PUSH
37920: LD_VAR 0 8
37924: PUSH
37925: FOR_IN
37926: IFFALSE 37954
// if i [ 1 ] = b_ext_radio then
37928: LD_VAR 0 7
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PUSH
37937: LD_INT 22
37939: EQUAL
37940: IFFALSE 37952
// begin control := control_remote ;
37942: LD_ADDR_VAR 0 4
37946: PUSH
37947: LD_INT 2
37949: ST_TO_ADDR
// break ;
37950: GO 37954
// end ;
37952: GO 37925
37954: POP
37955: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 3
37970: PPUSH
37971: LD_VAR 0 4
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 448
37985: IFFALSE 38020
// begin result := [ chassis , engine , control , weapon ] ;
37987: LD_ADDR_VAR 0 6
37991: PUSH
37992: LD_VAR 0 2
37996: PUSH
37997: LD_VAR 0 3
38001: PUSH
38002: LD_VAR 0 4
38006: PUSH
38007: LD_VAR 0 5
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// exit ;
38018: GO 38432
// end ; _chassis := AvailableChassisList ( factory ) ;
38020: LD_ADDR_VAR 0 9
38024: PUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 475
38034: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38035: LD_ADDR_VAR 0 11
38039: PUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 476
38049: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38050: LD_ADDR_VAR 0 12
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 477
38064: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38065: LD_ADDR_VAR 0 10
38069: PUSH
38070: LD_VAR 0 1
38074: PPUSH
38075: CALL_OW 478
38079: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38080: LD_VAR 0 9
38084: NOT
38085: PUSH
38086: LD_VAR 0 11
38090: NOT
38091: OR
38092: PUSH
38093: LD_VAR 0 12
38097: NOT
38098: OR
38099: PUSH
38100: LD_VAR 0 10
38104: NOT
38105: OR
38106: IFFALSE 38141
// begin result := [ chassis , engine , control , weapon ] ;
38108: LD_ADDR_VAR 0 6
38112: PUSH
38113: LD_VAR 0 2
38117: PUSH
38118: LD_VAR 0 3
38122: PUSH
38123: LD_VAR 0 4
38127: PUSH
38128: LD_VAR 0 5
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// exit ;
38139: GO 38432
// end ; if not chassis in _chassis then
38141: LD_VAR 0 2
38145: PUSH
38146: LD_VAR 0 9
38150: IN
38151: NOT
38152: IFFALSE 38178
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38154: LD_ADDR_VAR 0 2
38158: PUSH
38159: LD_VAR 0 9
38163: PUSH
38164: LD_INT 1
38166: PPUSH
38167: LD_VAR 0 9
38171: PPUSH
38172: CALL_OW 12
38176: ARRAY
38177: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38178: LD_VAR 0 2
38182: PPUSH
38183: LD_VAR 0 3
38187: PPUSH
38188: CALL 38437 0 2
38192: NOT
38193: IFFALSE 38252
// repeat engine := _engine [ 1 ] ;
38195: LD_ADDR_VAR 0 3
38199: PUSH
38200: LD_VAR 0 11
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38209: LD_ADDR_VAR 0 11
38213: PUSH
38214: LD_VAR 0 11
38218: PPUSH
38219: LD_INT 1
38221: PPUSH
38222: CALL_OW 3
38226: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38227: LD_VAR 0 2
38231: PPUSH
38232: LD_VAR 0 3
38236: PPUSH
38237: CALL 38437 0 2
38241: PUSH
38242: LD_VAR 0 11
38246: PUSH
38247: EMPTY
38248: EQUAL
38249: OR
38250: IFFALSE 38195
// if not control in _control then
38252: LD_VAR 0 4
38256: PUSH
38257: LD_VAR 0 12
38261: IN
38262: NOT
38263: IFFALSE 38289
// control := _control [ rand ( 1 , _control ) ] ;
38265: LD_ADDR_VAR 0 4
38269: PUSH
38270: LD_VAR 0 12
38274: PUSH
38275: LD_INT 1
38277: PPUSH
38278: LD_VAR 0 12
38282: PPUSH
38283: CALL_OW 12
38287: ARRAY
38288: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38289: LD_VAR 0 2
38293: PPUSH
38294: LD_VAR 0 5
38298: PPUSH
38299: CALL 38657 0 2
38303: NOT
38304: IFFALSE 38363
// repeat weapon := _weapon [ 1 ] ;
38306: LD_ADDR_VAR 0 5
38310: PUSH
38311: LD_VAR 0 10
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38320: LD_ADDR_VAR 0 10
38324: PUSH
38325: LD_VAR 0 10
38329: PPUSH
38330: LD_INT 1
38332: PPUSH
38333: CALL_OW 3
38337: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38338: LD_VAR 0 2
38342: PPUSH
38343: LD_VAR 0 5
38347: PPUSH
38348: CALL 38657 0 2
38352: PUSH
38353: LD_VAR 0 10
38357: PUSH
38358: EMPTY
38359: EQUAL
38360: OR
38361: IFFALSE 38306
// result := [ ] ;
38363: LD_ADDR_VAR 0 6
38367: PUSH
38368: EMPTY
38369: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38370: LD_VAR 0 1
38374: PPUSH
38375: LD_VAR 0 2
38379: PPUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: LD_VAR 0 4
38389: PPUSH
38390: LD_VAR 0 5
38394: PPUSH
38395: CALL_OW 448
38399: IFFALSE 38432
// result := [ chassis , engine , control , weapon ] ;
38401: LD_ADDR_VAR 0 6
38405: PUSH
38406: LD_VAR 0 2
38410: PUSH
38411: LD_VAR 0 3
38415: PUSH
38416: LD_VAR 0 4
38420: PUSH
38421: LD_VAR 0 5
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: ST_TO_ADDR
// end ;
38432: LD_VAR 0 6
38436: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38437: LD_INT 0
38439: PPUSH
// if not chassis or not engine then
38440: LD_VAR 0 1
38444: NOT
38445: PUSH
38446: LD_VAR 0 2
38450: NOT
38451: OR
38452: IFFALSE 38456
// exit ;
38454: GO 38652
// case engine of engine_solar :
38456: LD_VAR 0 2
38460: PUSH
38461: LD_INT 2
38463: DOUBLE
38464: EQUAL
38465: IFTRUE 38469
38467: GO 38507
38469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38470: LD_ADDR_VAR 0 3
38474: PUSH
38475: LD_INT 11
38477: PUSH
38478: LD_INT 12
38480: PUSH
38481: LD_INT 13
38483: PUSH
38484: LD_INT 14
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: ST_TO_ADDR
38505: GO 38636
38507: LD_INT 1
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38515
38513: GO 38577
38515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38516: LD_ADDR_VAR 0 3
38520: PUSH
38521: LD_INT 11
38523: PUSH
38524: LD_INT 12
38526: PUSH
38527: LD_INT 13
38529: PUSH
38530: LD_INT 14
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 3
38541: PUSH
38542: LD_INT 4
38544: PUSH
38545: LD_INT 5
38547: PUSH
38548: LD_INT 21
38550: PUSH
38551: LD_INT 23
38553: PUSH
38554: LD_INT 22
38556: PUSH
38557: LD_INT 24
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: ST_TO_ADDR
38575: GO 38636
38577: LD_INT 3
38579: DOUBLE
38580: EQUAL
38581: IFTRUE 38585
38583: GO 38635
38585: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: LD_INT 13
38593: PUSH
38594: LD_INT 14
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: LD_INT 4
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: LD_INT 21
38611: PUSH
38612: LD_INT 22
38614: PUSH
38615: LD_INT 23
38617: PUSH
38618: LD_INT 24
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
38633: GO 38636
38635: POP
// result := ( chassis in result ) ;
38636: LD_ADDR_VAR 0 3
38640: PUSH
38641: LD_VAR 0 1
38645: PUSH
38646: LD_VAR 0 3
38650: IN
38651: ST_TO_ADDR
// end ;
38652: LD_VAR 0 3
38656: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38657: LD_INT 0
38659: PPUSH
// if not chassis or not weapon then
38660: LD_VAR 0 1
38664: NOT
38665: PUSH
38666: LD_VAR 0 2
38670: NOT
38671: OR
38672: IFFALSE 38676
// exit ;
38674: GO 39702
// case weapon of us_machine_gun :
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 2
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38689
38687: GO 38719
38689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 4
38706: PUSH
38707: LD_INT 5
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: ST_TO_ADDR
38717: GO 39686
38719: LD_INT 3
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38757
38727: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 3
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 5
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
38755: GO 39686
38757: LD_INT 11
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38795
38765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: LD_INT 4
38782: PUSH
38783: LD_INT 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: ST_TO_ADDR
38793: GO 39686
38795: LD_INT 4
38797: DOUBLE
38798: EQUAL
38799: IFTRUE 38803
38801: GO 38829
38803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38804: LD_ADDR_VAR 0 3
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: LD_INT 4
38817: PUSH
38818: LD_INT 5
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: ST_TO_ADDR
38827: GO 39686
38829: LD_INT 5
38831: DOUBLE
38832: EQUAL
38833: IFTRUE 38837
38835: GO 38863
38837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38838: LD_ADDR_VAR 0 3
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 3
38848: PUSH
38849: LD_INT 4
38851: PUSH
38852: LD_INT 5
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: ST_TO_ADDR
38861: GO 39686
38863: LD_INT 9
38865: DOUBLE
38866: EQUAL
38867: IFTRUE 38871
38869: GO 38897
38871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38872: LD_ADDR_VAR 0 3
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: LD_INT 4
38885: PUSH
38886: LD_INT 5
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: ST_TO_ADDR
38895: GO 39686
38897: LD_INT 7
38899: DOUBLE
38900: EQUAL
38901: IFTRUE 38905
38903: GO 38931
38905: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38906: LD_ADDR_VAR 0 3
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 3
38916: PUSH
38917: LD_INT 4
38919: PUSH
38920: LD_INT 5
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: ST_TO_ADDR
38929: GO 39686
38931: LD_INT 12
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38939
38937: GO 38965
38939: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38940: LD_ADDR_VAR 0 3
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: LD_INT 4
38953: PUSH
38954: LD_INT 5
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
38963: GO 39686
38965: LD_INT 13
38967: DOUBLE
38968: EQUAL
38969: IFTRUE 38973
38971: GO 38999
38973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38974: LD_ADDR_VAR 0 3
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 4
38987: PUSH
38988: LD_INT 5
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: ST_TO_ADDR
38997: GO 39686
38999: LD_INT 14
39001: DOUBLE
39002: EQUAL
39003: IFTRUE 39007
39005: GO 39025
39007: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39008: LD_ADDR_VAR 0 3
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: LD_INT 5
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: ST_TO_ADDR
39023: GO 39686
39025: LD_INT 6
39027: DOUBLE
39028: EQUAL
39029: IFTRUE 39033
39031: GO 39051
39033: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39034: LD_ADDR_VAR 0 3
39038: PUSH
39039: LD_INT 4
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: ST_TO_ADDR
39049: GO 39686
39051: LD_INT 10
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39059
39057: GO 39077
39059: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39060: LD_ADDR_VAR 0 3
39064: PUSH
39065: LD_INT 4
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: ST_TO_ADDR
39075: GO 39686
39077: LD_INT 22
39079: DOUBLE
39080: EQUAL
39081: IFTRUE 39085
39083: GO 39111
39085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_INT 11
39093: PUSH
39094: LD_INT 12
39096: PUSH
39097: LD_INT 13
39099: PUSH
39100: LD_INT 14
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
39109: GO 39686
39111: LD_INT 23
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39119
39117: GO 39145
39119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_INT 11
39127: PUSH
39128: LD_INT 12
39130: PUSH
39131: LD_INT 13
39133: PUSH
39134: LD_INT 14
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: ST_TO_ADDR
39143: GO 39686
39145: LD_INT 24
39147: DOUBLE
39148: EQUAL
39149: IFTRUE 39153
39151: GO 39179
39153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39154: LD_ADDR_VAR 0 3
39158: PUSH
39159: LD_INT 11
39161: PUSH
39162: LD_INT 12
39164: PUSH
39165: LD_INT 13
39167: PUSH
39168: LD_INT 14
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: ST_TO_ADDR
39177: GO 39686
39179: LD_INT 30
39181: DOUBLE
39182: EQUAL
39183: IFTRUE 39187
39185: GO 39213
39187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39188: LD_ADDR_VAR 0 3
39192: PUSH
39193: LD_INT 11
39195: PUSH
39196: LD_INT 12
39198: PUSH
39199: LD_INT 13
39201: PUSH
39202: LD_INT 14
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
39211: GO 39686
39213: LD_INT 25
39215: DOUBLE
39216: EQUAL
39217: IFTRUE 39221
39219: GO 39239
39221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_INT 13
39229: PUSH
39230: LD_INT 14
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: ST_TO_ADDR
39237: GO 39686
39239: LD_INT 27
39241: DOUBLE
39242: EQUAL
39243: IFTRUE 39247
39245: GO 39265
39247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_INT 13
39255: PUSH
39256: LD_INT 14
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: ST_TO_ADDR
39263: GO 39686
39265: LD_INT 28
39267: DOUBLE
39268: EQUAL
39269: IFTRUE 39273
39271: GO 39291
39273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39274: LD_ADDR_VAR 0 3
39278: PUSH
39279: LD_INT 13
39281: PUSH
39282: LD_INT 14
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: ST_TO_ADDR
39289: GO 39686
39291: LD_INT 29
39293: DOUBLE
39294: EQUAL
39295: IFTRUE 39299
39297: GO 39317
39299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39300: LD_ADDR_VAR 0 3
39304: PUSH
39305: LD_INT 13
39307: PUSH
39308: LD_INT 14
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: ST_TO_ADDR
39315: GO 39686
39317: LD_INT 31
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39343
39325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_INT 13
39333: PUSH
39334: LD_INT 14
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: ST_TO_ADDR
39341: GO 39686
39343: LD_INT 26
39345: DOUBLE
39346: EQUAL
39347: IFTRUE 39351
39349: GO 39369
39351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39352: LD_ADDR_VAR 0 3
39356: PUSH
39357: LD_INT 13
39359: PUSH
39360: LD_INT 14
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: ST_TO_ADDR
39367: GO 39686
39369: LD_INT 42
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39377
39375: GO 39403
39377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 21
39385: PUSH
39386: LD_INT 22
39388: PUSH
39389: LD_INT 23
39391: PUSH
39392: LD_INT 24
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: ST_TO_ADDR
39401: GO 39686
39403: LD_INT 43
39405: DOUBLE
39406: EQUAL
39407: IFTRUE 39411
39409: GO 39437
39411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39412: LD_ADDR_VAR 0 3
39416: PUSH
39417: LD_INT 21
39419: PUSH
39420: LD_INT 22
39422: PUSH
39423: LD_INT 23
39425: PUSH
39426: LD_INT 24
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
39435: GO 39686
39437: LD_INT 44
39439: DOUBLE
39440: EQUAL
39441: IFTRUE 39445
39443: GO 39471
39445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_INT 21
39453: PUSH
39454: LD_INT 22
39456: PUSH
39457: LD_INT 23
39459: PUSH
39460: LD_INT 24
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
39469: GO 39686
39471: LD_INT 45
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39505
39479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_INT 21
39487: PUSH
39488: LD_INT 22
39490: PUSH
39491: LD_INT 23
39493: PUSH
39494: LD_INT 24
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
39503: GO 39686
39505: LD_INT 49
39507: DOUBLE
39508: EQUAL
39509: IFTRUE 39513
39511: GO 39539
39513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39514: LD_ADDR_VAR 0 3
39518: PUSH
39519: LD_INT 21
39521: PUSH
39522: LD_INT 22
39524: PUSH
39525: LD_INT 23
39527: PUSH
39528: LD_INT 24
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: ST_TO_ADDR
39537: GO 39686
39539: LD_INT 51
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39547
39545: GO 39573
39547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 21
39555: PUSH
39556: LD_INT 22
39558: PUSH
39559: LD_INT 23
39561: PUSH
39562: LD_INT 24
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
39571: GO 39686
39573: LD_INT 52
39575: DOUBLE
39576: EQUAL
39577: IFTRUE 39581
39579: GO 39607
39581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39582: LD_ADDR_VAR 0 3
39586: PUSH
39587: LD_INT 21
39589: PUSH
39590: LD_INT 22
39592: PUSH
39593: LD_INT 23
39595: PUSH
39596: LD_INT 24
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
39605: GO 39686
39607: LD_INT 53
39609: DOUBLE
39610: EQUAL
39611: IFTRUE 39615
39613: GO 39633
39615: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39616: LD_ADDR_VAR 0 3
39620: PUSH
39621: LD_INT 23
39623: PUSH
39624: LD_INT 24
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: ST_TO_ADDR
39631: GO 39686
39633: LD_INT 46
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 39659
39641: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_INT 23
39649: PUSH
39650: LD_INT 24
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: ST_TO_ADDR
39657: GO 39686
39659: LD_INT 47
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 39685
39667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_INT 23
39675: PUSH
39676: LD_INT 24
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: ST_TO_ADDR
39683: GO 39686
39685: POP
// result := ( chassis in result ) ;
39686: LD_ADDR_VAR 0 3
39690: PUSH
39691: LD_VAR 0 1
39695: PUSH
39696: LD_VAR 0 3
39700: IN
39701: ST_TO_ADDR
// end ;
39702: LD_VAR 0 3
39706: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39707: LD_INT 0
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
// result := array ;
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: LD_VAR 0 1
39725: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39726: LD_VAR 0 1
39730: NOT
39731: PUSH
39732: LD_VAR 0 2
39736: NOT
39737: OR
39738: PUSH
39739: LD_VAR 0 3
39743: NOT
39744: OR
39745: PUSH
39746: LD_VAR 0 2
39750: PUSH
39751: LD_VAR 0 1
39755: GREATER
39756: OR
39757: PUSH
39758: LD_VAR 0 3
39762: PUSH
39763: LD_VAR 0 1
39767: GREATER
39768: OR
39769: IFFALSE 39773
// exit ;
39771: GO 40069
// if direction then
39773: LD_VAR 0 4
39777: IFFALSE 39841
// begin d := 1 ;
39779: LD_ADDR_VAR 0 9
39783: PUSH
39784: LD_INT 1
39786: ST_TO_ADDR
// if i_from > i_to then
39787: LD_VAR 0 2
39791: PUSH
39792: LD_VAR 0 3
39796: GREATER
39797: IFFALSE 39823
// length := ( array - i_from ) + i_to else
39799: LD_ADDR_VAR 0 11
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_VAR 0 2
39813: MINUS
39814: PUSH
39815: LD_VAR 0 3
39819: PLUS
39820: ST_TO_ADDR
39821: GO 39839
// length := i_to - i_from ;
39823: LD_ADDR_VAR 0 11
39827: PUSH
39828: LD_VAR 0 3
39832: PUSH
39833: LD_VAR 0 2
39837: MINUS
39838: ST_TO_ADDR
// end else
39839: GO 39902
// begin d := - 1 ;
39841: LD_ADDR_VAR 0 9
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: ST_TO_ADDR
// if i_from > i_to then
39850: LD_VAR 0 2
39854: PUSH
39855: LD_VAR 0 3
39859: GREATER
39860: IFFALSE 39880
// length := i_from - i_to else
39862: LD_ADDR_VAR 0 11
39866: PUSH
39867: LD_VAR 0 2
39871: PUSH
39872: LD_VAR 0 3
39876: MINUS
39877: ST_TO_ADDR
39878: GO 39902
// length := ( array - i_to ) + i_from ;
39880: LD_ADDR_VAR 0 11
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_VAR 0 3
39894: MINUS
39895: PUSH
39896: LD_VAR 0 2
39900: PLUS
39901: ST_TO_ADDR
// end ; if not length then
39902: LD_VAR 0 11
39906: NOT
39907: IFFALSE 39911
// exit ;
39909: GO 40069
// tmp := array ;
39911: LD_ADDR_VAR 0 10
39915: PUSH
39916: LD_VAR 0 1
39920: ST_TO_ADDR
// for i = 1 to length do
39921: LD_ADDR_VAR 0 6
39925: PUSH
39926: DOUBLE
39927: LD_INT 1
39929: DEC
39930: ST_TO_ADDR
39931: LD_VAR 0 11
39935: PUSH
39936: FOR_TO
39937: IFFALSE 40057
// begin for j = 1 to array do
39939: LD_ADDR_VAR 0 7
39943: PUSH
39944: DOUBLE
39945: LD_INT 1
39947: DEC
39948: ST_TO_ADDR
39949: LD_VAR 0 1
39953: PUSH
39954: FOR_TO
39955: IFFALSE 40043
// begin k := j + d ;
39957: LD_ADDR_VAR 0 8
39961: PUSH
39962: LD_VAR 0 7
39966: PUSH
39967: LD_VAR 0 9
39971: PLUS
39972: ST_TO_ADDR
// if k > array then
39973: LD_VAR 0 8
39977: PUSH
39978: LD_VAR 0 1
39982: GREATER
39983: IFFALSE 39993
// k := 1 ;
39985: LD_ADDR_VAR 0 8
39989: PUSH
39990: LD_INT 1
39992: ST_TO_ADDR
// if not k then
39993: LD_VAR 0 8
39997: NOT
39998: IFFALSE 40010
// k := array ;
40000: LD_ADDR_VAR 0 8
40004: PUSH
40005: LD_VAR 0 1
40009: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40010: LD_ADDR_VAR 0 10
40014: PUSH
40015: LD_VAR 0 10
40019: PPUSH
40020: LD_VAR 0 8
40024: PPUSH
40025: LD_VAR 0 1
40029: PUSH
40030: LD_VAR 0 7
40034: ARRAY
40035: PPUSH
40036: CALL_OW 1
40040: ST_TO_ADDR
// end ;
40041: GO 39954
40043: POP
40044: POP
// array := tmp ;
40045: LD_ADDR_VAR 0 1
40049: PUSH
40050: LD_VAR 0 10
40054: ST_TO_ADDR
// end ;
40055: GO 39936
40057: POP
40058: POP
// result := array ;
40059: LD_ADDR_VAR 0 5
40063: PUSH
40064: LD_VAR 0 1
40068: ST_TO_ADDR
// end ;
40069: LD_VAR 0 5
40073: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
// result := 0 ;
40078: LD_ADDR_VAR 0 3
40082: PUSH
40083: LD_INT 0
40085: ST_TO_ADDR
// if not array or not value in array then
40086: LD_VAR 0 1
40090: NOT
40091: PUSH
40092: LD_VAR 0 2
40096: PUSH
40097: LD_VAR 0 1
40101: IN
40102: NOT
40103: OR
40104: IFFALSE 40108
// exit ;
40106: GO 40162
// for i = 1 to array do
40108: LD_ADDR_VAR 0 4
40112: PUSH
40113: DOUBLE
40114: LD_INT 1
40116: DEC
40117: ST_TO_ADDR
40118: LD_VAR 0 1
40122: PUSH
40123: FOR_TO
40124: IFFALSE 40160
// if value = array [ i ] then
40126: LD_VAR 0 2
40130: PUSH
40131: LD_VAR 0 1
40135: PUSH
40136: LD_VAR 0 4
40140: ARRAY
40141: EQUAL
40142: IFFALSE 40158
// begin result := i ;
40144: LD_ADDR_VAR 0 3
40148: PUSH
40149: LD_VAR 0 4
40153: ST_TO_ADDR
// exit ;
40154: POP
40155: POP
40156: GO 40162
// end ;
40158: GO 40123
40160: POP
40161: POP
// end ;
40162: LD_VAR 0 3
40166: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40167: LD_INT 0
40169: PPUSH
// vc_chassis := chassis ;
40170: LD_ADDR_OWVAR 37
40174: PUSH
40175: LD_VAR 0 1
40179: ST_TO_ADDR
// vc_engine := engine ;
40180: LD_ADDR_OWVAR 39
40184: PUSH
40185: LD_VAR 0 2
40189: ST_TO_ADDR
// vc_control := control ;
40190: LD_ADDR_OWVAR 38
40194: PUSH
40195: LD_VAR 0 3
40199: ST_TO_ADDR
// vc_weapon := weapon ;
40200: LD_ADDR_OWVAR 40
40204: PUSH
40205: LD_VAR 0 4
40209: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40210: LD_ADDR_OWVAR 41
40214: PUSH
40215: LD_VAR 0 5
40219: ST_TO_ADDR
// end ;
40220: LD_VAR 0 6
40224: RET
// export function WantPlant ( unit ) ; var task ; begin
40225: LD_INT 0
40227: PPUSH
40228: PPUSH
// result := false ;
40229: LD_ADDR_VAR 0 2
40233: PUSH
40234: LD_INT 0
40236: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40237: LD_ADDR_VAR 0 3
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 437
40251: ST_TO_ADDR
// if task then
40252: LD_VAR 0 3
40256: IFFALSE 40284
// if task [ 1 ] [ 1 ] = p then
40258: LD_VAR 0 3
40262: PUSH
40263: LD_INT 1
40265: ARRAY
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: PUSH
40271: LD_STRING p
40273: EQUAL
40274: IFFALSE 40284
// result := true ;
40276: LD_ADDR_VAR 0 2
40280: PUSH
40281: LD_INT 1
40283: ST_TO_ADDR
// end ;
40284: LD_VAR 0 2
40288: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
// if pos < 1 then
40295: LD_VAR 0 2
40299: PUSH
40300: LD_INT 1
40302: LESS
40303: IFFALSE 40307
// exit ;
40305: GO 40610
// if pos = 1 then
40307: LD_VAR 0 2
40311: PUSH
40312: LD_INT 1
40314: EQUAL
40315: IFFALSE 40348
// result := Replace ( arr , pos [ 1 ] , value ) else
40317: LD_ADDR_VAR 0 4
40321: PUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: LD_VAR 0 2
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: PPUSH
40336: LD_VAR 0 3
40340: PPUSH
40341: CALL_OW 1
40345: ST_TO_ADDR
40346: GO 40610
// begin tmp := arr ;
40348: LD_ADDR_VAR 0 6
40352: PUSH
40353: LD_VAR 0 1
40357: ST_TO_ADDR
// s_arr := [ tmp ] ;
40358: LD_ADDR_VAR 0 7
40362: PUSH
40363: LD_VAR 0 6
40367: PUSH
40368: EMPTY
40369: LIST
40370: ST_TO_ADDR
// for i = 1 to pos - 1 do
40371: LD_ADDR_VAR 0 5
40375: PUSH
40376: DOUBLE
40377: LD_INT 1
40379: DEC
40380: ST_TO_ADDR
40381: LD_VAR 0 2
40385: PUSH
40386: LD_INT 1
40388: MINUS
40389: PUSH
40390: FOR_TO
40391: IFFALSE 40436
// begin tmp := tmp [ pos [ i ] ] ;
40393: LD_ADDR_VAR 0 6
40397: PUSH
40398: LD_VAR 0 6
40402: PUSH
40403: LD_VAR 0 2
40407: PUSH
40408: LD_VAR 0 5
40412: ARRAY
40413: ARRAY
40414: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40415: LD_ADDR_VAR 0 7
40419: PUSH
40420: LD_VAR 0 7
40424: PUSH
40425: LD_VAR 0 6
40429: PUSH
40430: EMPTY
40431: LIST
40432: ADD
40433: ST_TO_ADDR
// end ;
40434: GO 40390
40436: POP
40437: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40438: LD_ADDR_VAR 0 6
40442: PUSH
40443: LD_VAR 0 6
40447: PPUSH
40448: LD_VAR 0 2
40452: PUSH
40453: LD_VAR 0 2
40457: ARRAY
40458: PPUSH
40459: LD_VAR 0 3
40463: PPUSH
40464: CALL_OW 1
40468: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40469: LD_ADDR_VAR 0 7
40473: PUSH
40474: LD_VAR 0 7
40478: PPUSH
40479: LD_VAR 0 7
40483: PPUSH
40484: LD_VAR 0 6
40488: PPUSH
40489: CALL_OW 1
40493: ST_TO_ADDR
// for i = s_arr downto 2 do
40494: LD_ADDR_VAR 0 5
40498: PUSH
40499: DOUBLE
40500: LD_VAR 0 7
40504: INC
40505: ST_TO_ADDR
40506: LD_INT 2
40508: PUSH
40509: FOR_DOWNTO
40510: IFFALSE 40594
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40512: LD_ADDR_VAR 0 6
40516: PUSH
40517: LD_VAR 0 7
40521: PUSH
40522: LD_VAR 0 5
40526: PUSH
40527: LD_INT 1
40529: MINUS
40530: ARRAY
40531: PPUSH
40532: LD_VAR 0 2
40536: PUSH
40537: LD_VAR 0 5
40541: PUSH
40542: LD_INT 1
40544: MINUS
40545: ARRAY
40546: PPUSH
40547: LD_VAR 0 7
40551: PUSH
40552: LD_VAR 0 5
40556: ARRAY
40557: PPUSH
40558: CALL_OW 1
40562: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40563: LD_ADDR_VAR 0 7
40567: PUSH
40568: LD_VAR 0 7
40572: PPUSH
40573: LD_VAR 0 5
40577: PUSH
40578: LD_INT 1
40580: MINUS
40581: PPUSH
40582: LD_VAR 0 6
40586: PPUSH
40587: CALL_OW 1
40591: ST_TO_ADDR
// end ;
40592: GO 40509
40594: POP
40595: POP
// result := s_arr [ 1 ] ;
40596: LD_ADDR_VAR 0 4
40600: PUSH
40601: LD_VAR 0 7
40605: PUSH
40606: LD_INT 1
40608: ARRAY
40609: ST_TO_ADDR
// end ; end ;
40610: LD_VAR 0 4
40614: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40615: LD_INT 0
40617: PPUSH
40618: PPUSH
// if not list then
40619: LD_VAR 0 1
40623: NOT
40624: IFFALSE 40628
// exit ;
40626: GO 40719
// i := list [ pos1 ] ;
40628: LD_ADDR_VAR 0 5
40632: PUSH
40633: LD_VAR 0 1
40637: PUSH
40638: LD_VAR 0 2
40642: ARRAY
40643: ST_TO_ADDR
// if not i then
40644: LD_VAR 0 5
40648: NOT
40649: IFFALSE 40653
// exit ;
40651: GO 40719
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40653: LD_ADDR_VAR 0 1
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_VAR 0 1
40672: PUSH
40673: LD_VAR 0 3
40677: ARRAY
40678: PPUSH
40679: CALL_OW 1
40683: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40684: LD_ADDR_VAR 0 1
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: LD_VAR 0 3
40698: PPUSH
40699: LD_VAR 0 5
40703: PPUSH
40704: CALL_OW 1
40708: ST_TO_ADDR
// result := list ;
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 1
40718: ST_TO_ADDR
// end ;
40719: LD_VAR 0 4
40723: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40724: LD_INT 0
40726: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 250
40741: PPUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 251
40751: PPUSH
40752: LD_VAR 0 2
40756: PPUSH
40757: LD_VAR 0 3
40761: PPUSH
40762: LD_VAR 0 4
40766: PPUSH
40767: CALL 40777 0 5
40771: ST_TO_ADDR
// end ;
40772: LD_VAR 0 5
40776: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
// if not list then
40783: LD_VAR 0 3
40787: NOT
40788: IFFALSE 40792
// exit ;
40790: GO 41180
// result := [ ] ;
40792: LD_ADDR_VAR 0 6
40796: PUSH
40797: EMPTY
40798: ST_TO_ADDR
// for i in list do
40799: LD_ADDR_VAR 0 7
40803: PUSH
40804: LD_VAR 0 3
40808: PUSH
40809: FOR_IN
40810: IFFALSE 41012
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40812: LD_ADDR_VAR 0 9
40816: PUSH
40817: LD_VAR 0 7
40821: PPUSH
40822: LD_VAR 0 1
40826: PPUSH
40827: LD_VAR 0 2
40831: PPUSH
40832: CALL_OW 297
40836: ST_TO_ADDR
// if not result then
40837: LD_VAR 0 6
40841: NOT
40842: IFFALSE 40868
// result := [ [ i , tmp ] ] else
40844: LD_ADDR_VAR 0 6
40848: PUSH
40849: LD_VAR 0 7
40853: PUSH
40854: LD_VAR 0 9
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: ST_TO_ADDR
40866: GO 41010
// begin if result [ result ] [ 2 ] < tmp then
40868: LD_VAR 0 6
40872: PUSH
40873: LD_VAR 0 6
40877: ARRAY
40878: PUSH
40879: LD_INT 2
40881: ARRAY
40882: PUSH
40883: LD_VAR 0 9
40887: LESS
40888: IFFALSE 40930
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40890: LD_ADDR_VAR 0 6
40894: PUSH
40895: LD_VAR 0 6
40899: PPUSH
40900: LD_VAR 0 6
40904: PUSH
40905: LD_INT 1
40907: PLUS
40908: PPUSH
40909: LD_VAR 0 7
40913: PUSH
40914: LD_VAR 0 9
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PPUSH
40923: CALL_OW 2
40927: ST_TO_ADDR
40928: GO 41010
// for j = 1 to result do
40930: LD_ADDR_VAR 0 8
40934: PUSH
40935: DOUBLE
40936: LD_INT 1
40938: DEC
40939: ST_TO_ADDR
40940: LD_VAR 0 6
40944: PUSH
40945: FOR_TO
40946: IFFALSE 41008
// begin if tmp < result [ j ] [ 2 ] then
40948: LD_VAR 0 9
40952: PUSH
40953: LD_VAR 0 6
40957: PUSH
40958: LD_VAR 0 8
40962: ARRAY
40963: PUSH
40964: LD_INT 2
40966: ARRAY
40967: LESS
40968: IFFALSE 41006
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40970: LD_ADDR_VAR 0 6
40974: PUSH
40975: LD_VAR 0 6
40979: PPUSH
40980: LD_VAR 0 8
40984: PPUSH
40985: LD_VAR 0 7
40989: PUSH
40990: LD_VAR 0 9
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PPUSH
40999: CALL_OW 2
41003: ST_TO_ADDR
// break ;
41004: GO 41008
// end ; end ;
41006: GO 40945
41008: POP
41009: POP
// end ; end ;
41010: GO 40809
41012: POP
41013: POP
// if result and not asc then
41014: LD_VAR 0 6
41018: PUSH
41019: LD_VAR 0 4
41023: NOT
41024: AND
41025: IFFALSE 41100
// begin tmp := result ;
41027: LD_ADDR_VAR 0 9
41031: PUSH
41032: LD_VAR 0 6
41036: ST_TO_ADDR
// for i = tmp downto 1 do
41037: LD_ADDR_VAR 0 7
41041: PUSH
41042: DOUBLE
41043: LD_VAR 0 9
41047: INC
41048: ST_TO_ADDR
41049: LD_INT 1
41051: PUSH
41052: FOR_DOWNTO
41053: IFFALSE 41098
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41055: LD_ADDR_VAR 0 6
41059: PUSH
41060: LD_VAR 0 6
41064: PPUSH
41065: LD_VAR 0 9
41069: PUSH
41070: LD_VAR 0 7
41074: MINUS
41075: PUSH
41076: LD_INT 1
41078: PLUS
41079: PPUSH
41080: LD_VAR 0 9
41084: PUSH
41085: LD_VAR 0 7
41089: ARRAY
41090: PPUSH
41091: CALL_OW 1
41095: ST_TO_ADDR
41096: GO 41052
41098: POP
41099: POP
// end ; tmp := [ ] ;
41100: LD_ADDR_VAR 0 9
41104: PUSH
41105: EMPTY
41106: ST_TO_ADDR
// if mode then
41107: LD_VAR 0 5
41111: IFFALSE 41180
// begin for i = 1 to result do
41113: LD_ADDR_VAR 0 7
41117: PUSH
41118: DOUBLE
41119: LD_INT 1
41121: DEC
41122: ST_TO_ADDR
41123: LD_VAR 0 6
41127: PUSH
41128: FOR_TO
41129: IFFALSE 41168
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41131: LD_ADDR_VAR 0 9
41135: PUSH
41136: LD_VAR 0 9
41140: PPUSH
41141: LD_VAR 0 7
41145: PPUSH
41146: LD_VAR 0 6
41150: PUSH
41151: LD_VAR 0 7
41155: ARRAY
41156: PUSH
41157: LD_INT 1
41159: ARRAY
41160: PPUSH
41161: CALL_OW 1
41165: ST_TO_ADDR
41166: GO 41128
41168: POP
41169: POP
// result := tmp ;
41170: LD_ADDR_VAR 0 6
41174: PUSH
41175: LD_VAR 0 9
41179: ST_TO_ADDR
// end ; end ;
41180: LD_VAR 0 6
41184: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41193: LD_ADDR_VAR 0 5
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// if not x or not y then
41215: LD_VAR 0 2
41219: NOT
41220: PUSH
41221: LD_VAR 0 3
41225: NOT
41226: OR
41227: IFFALSE 41231
// exit ;
41229: GO 42877
// if not range then
41231: LD_VAR 0 4
41235: NOT
41236: IFFALSE 41246
// range := 10 ;
41238: LD_ADDR_VAR 0 4
41242: PUSH
41243: LD_INT 10
41245: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41246: LD_ADDR_VAR 0 8
41250: PUSH
41251: LD_INT 81
41253: PUSH
41254: LD_VAR 0 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 92
41265: PUSH
41266: LD_VAR 0 2
41270: PUSH
41271: LD_VAR 0 3
41275: PUSH
41276: LD_VAR 0 4
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 21
41292: PUSH
41293: LD_INT 3
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: PPUSH
41309: CALL_OW 69
41313: ST_TO_ADDR
// if not tmp then
41314: LD_VAR 0 8
41318: NOT
41319: IFFALSE 41323
// exit ;
41321: GO 42877
// for i in tmp do
41323: LD_ADDR_VAR 0 6
41327: PUSH
41328: LD_VAR 0 8
41332: PUSH
41333: FOR_IN
41334: IFFALSE 42852
// begin points := [ 0 , 0 , 0 ] ;
41336: LD_ADDR_VAR 0 9
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
// bpoints := 1 ;
41355: LD_ADDR_VAR 0 10
41359: PUSH
41360: LD_INT 1
41362: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41363: LD_VAR 0 6
41367: PPUSH
41368: CALL_OW 247
41372: PUSH
41373: LD_INT 1
41375: DOUBLE
41376: EQUAL
41377: IFTRUE 41381
41379: GO 41959
41381: POP
// begin if GetClass ( i ) = 1 then
41382: LD_VAR 0 6
41386: PPUSH
41387: CALL_OW 257
41391: PUSH
41392: LD_INT 1
41394: EQUAL
41395: IFFALSE 41416
// points := [ 10 , 5 , 3 ] ;
41397: LD_ADDR_VAR 0 9
41401: PUSH
41402: LD_INT 10
41404: PUSH
41405: LD_INT 5
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41416: LD_VAR 0 6
41420: PPUSH
41421: CALL_OW 257
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 4
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: IN
41440: IFFALSE 41461
// points := [ 3 , 2 , 1 ] ;
41442: LD_ADDR_VAR 0 9
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41461: LD_VAR 0 6
41465: PPUSH
41466: CALL_OW 257
41470: PUSH
41471: LD_INT 5
41473: EQUAL
41474: IFFALSE 41495
// points := [ 130 , 5 , 2 ] ;
41476: LD_ADDR_VAR 0 9
41480: PUSH
41481: LD_INT 130
41483: PUSH
41484: LD_INT 5
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41495: LD_VAR 0 6
41499: PPUSH
41500: CALL_OW 257
41504: PUSH
41505: LD_INT 8
41507: EQUAL
41508: IFFALSE 41529
// points := [ 35 , 35 , 30 ] ;
41510: LD_ADDR_VAR 0 9
41514: PUSH
41515: LD_INT 35
41517: PUSH
41518: LD_INT 35
41520: PUSH
41521: LD_INT 30
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41529: LD_VAR 0 6
41533: PPUSH
41534: CALL_OW 257
41538: PUSH
41539: LD_INT 9
41541: EQUAL
41542: IFFALSE 41563
// points := [ 20 , 55 , 40 ] ;
41544: LD_ADDR_VAR 0 9
41548: PUSH
41549: LD_INT 20
41551: PUSH
41552: LD_INT 55
41554: PUSH
41555: LD_INT 40
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41563: LD_VAR 0 6
41567: PPUSH
41568: CALL_OW 257
41572: PUSH
41573: LD_INT 12
41575: PUSH
41576: LD_INT 16
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: IN
41583: IFFALSE 41604
// points := [ 5 , 3 , 2 ] ;
41585: LD_ADDR_VAR 0 9
41589: PUSH
41590: LD_INT 5
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41604: LD_VAR 0 6
41608: PPUSH
41609: CALL_OW 257
41613: PUSH
41614: LD_INT 17
41616: EQUAL
41617: IFFALSE 41638
// points := [ 100 , 50 , 75 ] ;
41619: LD_ADDR_VAR 0 9
41623: PUSH
41624: LD_INT 100
41626: PUSH
41627: LD_INT 50
41629: PUSH
41630: LD_INT 75
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41638: LD_VAR 0 6
41642: PPUSH
41643: CALL_OW 257
41647: PUSH
41648: LD_INT 15
41650: EQUAL
41651: IFFALSE 41672
// points := [ 10 , 5 , 3 ] ;
41653: LD_ADDR_VAR 0 9
41657: PUSH
41658: LD_INT 10
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41672: LD_VAR 0 6
41676: PPUSH
41677: CALL_OW 257
41681: PUSH
41682: LD_INT 14
41684: EQUAL
41685: IFFALSE 41706
// points := [ 10 , 0 , 0 ] ;
41687: LD_ADDR_VAR 0 9
41691: PUSH
41692: LD_INT 10
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41706: LD_VAR 0 6
41710: PPUSH
41711: CALL_OW 257
41715: PUSH
41716: LD_INT 11
41718: EQUAL
41719: IFFALSE 41740
// points := [ 30 , 10 , 5 ] ;
41721: LD_ADDR_VAR 0 9
41725: PUSH
41726: LD_INT 30
41728: PUSH
41729: LD_INT 10
41731: PUSH
41732: LD_INT 5
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41740: LD_VAR 0 1
41744: PPUSH
41745: LD_INT 5
41747: PPUSH
41748: CALL_OW 321
41752: PUSH
41753: LD_INT 2
41755: EQUAL
41756: IFFALSE 41773
// bpoints := bpoints * 1.8 ;
41758: LD_ADDR_VAR 0 10
41762: PUSH
41763: LD_VAR 0 10
41767: PUSH
41768: LD_REAL  1.80000000000000E+0000
41771: MUL
41772: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41773: LD_VAR 0 6
41777: PPUSH
41778: CALL_OW 257
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 4
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: IN
41801: PUSH
41802: LD_VAR 0 1
41806: PPUSH
41807: LD_INT 51
41809: PPUSH
41810: CALL_OW 321
41814: PUSH
41815: LD_INT 2
41817: EQUAL
41818: AND
41819: IFFALSE 41836
// bpoints := bpoints * 1.2 ;
41821: LD_ADDR_VAR 0 10
41825: PUSH
41826: LD_VAR 0 10
41830: PUSH
41831: LD_REAL  1.20000000000000E+0000
41834: MUL
41835: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41836: LD_VAR 0 6
41840: PPUSH
41841: CALL_OW 257
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: LD_INT 7
41851: PUSH
41852: LD_INT 9
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: IN
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: LD_INT 52
41868: PPUSH
41869: CALL_OW 321
41873: PUSH
41874: LD_INT 2
41876: EQUAL
41877: AND
41878: IFFALSE 41895
// bpoints := bpoints * 1.5 ;
41880: LD_ADDR_VAR 0 10
41884: PUSH
41885: LD_VAR 0 10
41889: PUSH
41890: LD_REAL  1.50000000000000E+0000
41893: MUL
41894: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_INT 66
41902: PPUSH
41903: CALL_OW 321
41907: PUSH
41908: LD_INT 2
41910: EQUAL
41911: IFFALSE 41928
// bpoints := bpoints * 1.1 ;
41913: LD_ADDR_VAR 0 10
41917: PUSH
41918: LD_VAR 0 10
41922: PUSH
41923: LD_REAL  1.10000000000000E+0000
41926: MUL
41927: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41928: LD_ADDR_VAR 0 10
41932: PUSH
41933: LD_VAR 0 10
41937: PUSH
41938: LD_VAR 0 6
41942: PPUSH
41943: LD_INT 1
41945: PPUSH
41946: CALL_OW 259
41950: PUSH
41951: LD_REAL  1.15000000000000E+0000
41954: MUL
41955: MUL
41956: ST_TO_ADDR
// end ; unit_vehicle :
41957: GO 42781
41959: LD_INT 2
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41967
41965: GO 42769
41967: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41968: LD_VAR 0 6
41972: PPUSH
41973: CALL_OW 264
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: LD_INT 42
41983: PUSH
41984: LD_INT 24
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: IN
41992: IFFALSE 42013
// points := [ 25 , 5 , 3 ] ;
41994: LD_ADDR_VAR 0 9
41998: PUSH
41999: LD_INT 25
42001: PUSH
42002: LD_INT 5
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42013: LD_VAR 0 6
42017: PPUSH
42018: CALL_OW 264
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: LD_INT 43
42028: PUSH
42029: LD_INT 25
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: IN
42037: IFFALSE 42058
// points := [ 40 , 15 , 5 ] ;
42039: LD_ADDR_VAR 0 9
42043: PUSH
42044: LD_INT 40
42046: PUSH
42047: LD_INT 15
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42058: LD_VAR 0 6
42062: PPUSH
42063: CALL_OW 264
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 23
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: IN
42078: IFFALSE 42099
// points := [ 7 , 25 , 8 ] ;
42080: LD_ADDR_VAR 0 9
42084: PUSH
42085: LD_INT 7
42087: PUSH
42088: LD_INT 25
42090: PUSH
42091: LD_INT 8
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42099: LD_VAR 0 6
42103: PPUSH
42104: CALL_OW 264
42108: PUSH
42109: LD_INT 5
42111: PUSH
42112: LD_INT 27
42114: PUSH
42115: LD_INT 44
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: IN
42123: IFFALSE 42144
// points := [ 14 , 50 , 16 ] ;
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_INT 14
42132: PUSH
42133: LD_INT 50
42135: PUSH
42136: LD_INT 16
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42144: LD_VAR 0 6
42148: PPUSH
42149: CALL_OW 264
42153: PUSH
42154: LD_INT 6
42156: PUSH
42157: LD_INT 46
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: IN
42164: IFFALSE 42185
// points := [ 32 , 120 , 70 ] ;
42166: LD_ADDR_VAR 0 9
42170: PUSH
42171: LD_INT 32
42173: PUSH
42174: LD_INT 120
42176: PUSH
42177: LD_INT 70
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42185: LD_VAR 0 6
42189: PPUSH
42190: CALL_OW 264
42194: PUSH
42195: LD_INT 7
42197: PUSH
42198: LD_INT 28
42200: PUSH
42201: LD_INT 45
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: IN
42209: IFFALSE 42230
// points := [ 35 , 20 , 45 ] ;
42211: LD_ADDR_VAR 0 9
42215: PUSH
42216: LD_INT 35
42218: PUSH
42219: LD_INT 20
42221: PUSH
42222: LD_INT 45
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42230: LD_VAR 0 6
42234: PPUSH
42235: CALL_OW 264
42239: PUSH
42240: LD_INT 47
42242: PUSH
42243: EMPTY
42244: LIST
42245: IN
42246: IFFALSE 42267
// points := [ 67 , 45 , 75 ] ;
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: LD_INT 67
42255: PUSH
42256: LD_INT 45
42258: PUSH
42259: LD_INT 75
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42267: LD_VAR 0 6
42271: PPUSH
42272: CALL_OW 264
42276: PUSH
42277: LD_INT 26
42279: PUSH
42280: EMPTY
42281: LIST
42282: IN
42283: IFFALSE 42304
// points := [ 120 , 30 , 80 ] ;
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_INT 120
42292: PUSH
42293: LD_INT 30
42295: PUSH
42296: LD_INT 80
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42304: LD_VAR 0 6
42308: PPUSH
42309: CALL_OW 264
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: EMPTY
42318: LIST
42319: IN
42320: IFFALSE 42341
// points := [ 40 , 1 , 1 ] ;
42322: LD_ADDR_VAR 0 9
42326: PUSH
42327: LD_INT 40
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42341: LD_VAR 0 6
42345: PPUSH
42346: CALL_OW 264
42350: PUSH
42351: LD_INT 29
42353: PUSH
42354: EMPTY
42355: LIST
42356: IN
42357: IFFALSE 42378
// points := [ 70 , 200 , 400 ] ;
42359: LD_ADDR_VAR 0 9
42363: PUSH
42364: LD_INT 70
42366: PUSH
42367: LD_INT 200
42369: PUSH
42370: LD_INT 400
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42378: LD_VAR 0 6
42382: PPUSH
42383: CALL_OW 264
42387: PUSH
42388: LD_INT 14
42390: PUSH
42391: LD_INT 53
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: IN
42398: IFFALSE 42419
// points := [ 40 , 10 , 20 ] ;
42400: LD_ADDR_VAR 0 9
42404: PUSH
42405: LD_INT 40
42407: PUSH
42408: LD_INT 10
42410: PUSH
42411: LD_INT 20
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42419: LD_VAR 0 6
42423: PPUSH
42424: CALL_OW 264
42428: PUSH
42429: LD_INT 9
42431: PUSH
42432: EMPTY
42433: LIST
42434: IN
42435: IFFALSE 42456
// points := [ 5 , 70 , 20 ] ;
42437: LD_ADDR_VAR 0 9
42441: PUSH
42442: LD_INT 5
42444: PUSH
42445: LD_INT 70
42447: PUSH
42448: LD_INT 20
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42456: LD_VAR 0 6
42460: PPUSH
42461: CALL_OW 264
42465: PUSH
42466: LD_INT 10
42468: PUSH
42469: EMPTY
42470: LIST
42471: IN
42472: IFFALSE 42493
// points := [ 35 , 110 , 70 ] ;
42474: LD_ADDR_VAR 0 9
42478: PUSH
42479: LD_INT 35
42481: PUSH
42482: LD_INT 110
42484: PUSH
42485: LD_INT 70
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42493: LD_VAR 0 6
42497: PPUSH
42498: CALL_OW 265
42502: PUSH
42503: LD_INT 25
42505: EQUAL
42506: IFFALSE 42527
// points := [ 80 , 65 , 100 ] ;
42508: LD_ADDR_VAR 0 9
42512: PUSH
42513: LD_INT 80
42515: PUSH
42516: LD_INT 65
42518: PUSH
42519: LD_INT 100
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42527: LD_VAR 0 6
42531: PPUSH
42532: CALL_OW 263
42536: PUSH
42537: LD_INT 1
42539: EQUAL
42540: IFFALSE 42575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42542: LD_ADDR_VAR 0 10
42546: PUSH
42547: LD_VAR 0 10
42551: PUSH
42552: LD_VAR 0 6
42556: PPUSH
42557: CALL_OW 311
42561: PPUSH
42562: LD_INT 3
42564: PPUSH
42565: CALL_OW 259
42569: PUSH
42570: LD_INT 4
42572: MUL
42573: MUL
42574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42575: LD_VAR 0 6
42579: PPUSH
42580: CALL_OW 263
42584: PUSH
42585: LD_INT 2
42587: EQUAL
42588: IFFALSE 42639
// begin j := IsControledBy ( i ) ;
42590: LD_ADDR_VAR 0 7
42594: PUSH
42595: LD_VAR 0 6
42599: PPUSH
42600: CALL_OW 312
42604: ST_TO_ADDR
// if j then
42605: LD_VAR 0 7
42609: IFFALSE 42639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42611: LD_ADDR_VAR 0 10
42615: PUSH
42616: LD_VAR 0 10
42620: PUSH
42621: LD_VAR 0 7
42625: PPUSH
42626: LD_INT 3
42628: PPUSH
42629: CALL_OW 259
42633: PUSH
42634: LD_INT 3
42636: MUL
42637: MUL
42638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42639: LD_VAR 0 6
42643: PPUSH
42644: CALL_OW 264
42648: PUSH
42649: LD_INT 5
42651: PUSH
42652: LD_INT 6
42654: PUSH
42655: LD_INT 46
42657: PUSH
42658: LD_INT 44
42660: PUSH
42661: LD_INT 47
42663: PUSH
42664: LD_INT 45
42666: PUSH
42667: LD_INT 28
42669: PUSH
42670: LD_INT 7
42672: PUSH
42673: LD_INT 27
42675: PUSH
42676: LD_INT 29
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: IN
42691: PUSH
42692: LD_VAR 0 1
42696: PPUSH
42697: LD_INT 52
42699: PPUSH
42700: CALL_OW 321
42704: PUSH
42705: LD_INT 2
42707: EQUAL
42708: AND
42709: IFFALSE 42726
// bpoints := bpoints * 1.2 ;
42711: LD_ADDR_VAR 0 10
42715: PUSH
42716: LD_VAR 0 10
42720: PUSH
42721: LD_REAL  1.20000000000000E+0000
42724: MUL
42725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42726: LD_VAR 0 6
42730: PPUSH
42731: CALL_OW 264
42735: PUSH
42736: LD_INT 6
42738: PUSH
42739: LD_INT 46
42741: PUSH
42742: LD_INT 47
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: IN
42750: IFFALSE 42767
// bpoints := bpoints * 1.2 ;
42752: LD_ADDR_VAR 0 10
42756: PUSH
42757: LD_VAR 0 10
42761: PUSH
42762: LD_REAL  1.20000000000000E+0000
42765: MUL
42766: ST_TO_ADDR
// end ; unit_building :
42767: GO 42781
42769: LD_INT 3
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42777
42775: GO 42780
42777: POP
// ; end ;
42778: GO 42781
42780: POP
// for j = 1 to 3 do
42781: LD_ADDR_VAR 0 7
42785: PUSH
42786: DOUBLE
42787: LD_INT 1
42789: DEC
42790: ST_TO_ADDR
42791: LD_INT 3
42793: PUSH
42794: FOR_TO
42795: IFFALSE 42848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42797: LD_ADDR_VAR 0 5
42801: PUSH
42802: LD_VAR 0 5
42806: PPUSH
42807: LD_VAR 0 7
42811: PPUSH
42812: LD_VAR 0 5
42816: PUSH
42817: LD_VAR 0 7
42821: ARRAY
42822: PUSH
42823: LD_VAR 0 9
42827: PUSH
42828: LD_VAR 0 7
42832: ARRAY
42833: PUSH
42834: LD_VAR 0 10
42838: MUL
42839: PLUS
42840: PPUSH
42841: CALL_OW 1
42845: ST_TO_ADDR
42846: GO 42794
42848: POP
42849: POP
// end ;
42850: GO 41333
42852: POP
42853: POP
// result := Replace ( result , 4 , tmp ) ;
42854: LD_ADDR_VAR 0 5
42858: PUSH
42859: LD_VAR 0 5
42863: PPUSH
42864: LD_INT 4
42866: PPUSH
42867: LD_VAR 0 8
42871: PPUSH
42872: CALL_OW 1
42876: ST_TO_ADDR
// end ;
42877: LD_VAR 0 5
42881: RET
// export function DangerAtRange ( unit , range ) ; begin
42882: LD_INT 0
42884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 255
42899: PPUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 250
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 251
42919: PPUSH
42920: LD_VAR 0 2
42924: PPUSH
42925: CALL 41185 0 4
42929: ST_TO_ADDR
// end ;
42930: LD_VAR 0 3
42934: RET
// export function DangerInArea ( side , area ) ; begin
42935: LD_INT 0
42937: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42938: LD_ADDR_VAR 0 3
42942: PUSH
42943: LD_VAR 0 2
42947: PPUSH
42948: LD_INT 81
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PPUSH
42960: CALL_OW 70
42964: ST_TO_ADDR
// end ;
42965: LD_VAR 0 3
42969: RET
// export function IsExtension ( b ) ; begin
42970: LD_INT 0
42972: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42973: LD_ADDR_VAR 0 2
42977: PUSH
42978: LD_VAR 0 1
42982: PUSH
42983: LD_INT 23
42985: PUSH
42986: LD_INT 20
42988: PUSH
42989: LD_INT 22
42991: PUSH
42992: LD_INT 17
42994: PUSH
42995: LD_INT 24
42997: PUSH
42998: LD_INT 21
43000: PUSH
43001: LD_INT 19
43003: PUSH
43004: LD_INT 16
43006: PUSH
43007: LD_INT 25
43009: PUSH
43010: LD_INT 18
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: IN
43025: ST_TO_ADDR
// end ;
43026: LD_VAR 0 2
43030: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43031: LD_INT 0
43033: PPUSH
43034: PPUSH
43035: PPUSH
// result := [ ] ;
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: EMPTY
43042: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43043: LD_ADDR_VAR 0 4
43047: PUSH
43048: LD_VAR 0 2
43052: PPUSH
43053: LD_INT 21
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PPUSH
43063: CALL_OW 70
43067: ST_TO_ADDR
// if not tmp then
43068: LD_VAR 0 4
43072: NOT
43073: IFFALSE 43077
// exit ;
43075: GO 43135
// for i in tmp do
43077: LD_ADDR_VAR 0 5
43081: PUSH
43082: LD_VAR 0 4
43086: PUSH
43087: FOR_IN
43088: IFFALSE 43123
// if GetBase ( i ) <> base then
43090: LD_VAR 0 5
43094: PPUSH
43095: CALL_OW 274
43099: PUSH
43100: LD_VAR 0 1
43104: NONEQUAL
43105: IFFALSE 43121
// ComLinkToBase ( base , i ) ;
43107: LD_VAR 0 1
43111: PPUSH
43112: LD_VAR 0 5
43116: PPUSH
43117: CALL_OW 169
43121: GO 43087
43123: POP
43124: POP
// result := tmp ;
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_VAR 0 4
43134: ST_TO_ADDR
// end ;
43135: LD_VAR 0 3
43139: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43140: LD_INT 0
43142: PPUSH
43143: PPUSH
// if BuildingStatus ( b ) = bs_build then
43144: LD_VAR 0 2
43148: PPUSH
43149: CALL_OW 461
43153: PUSH
43154: LD_INT 1
43156: EQUAL
43157: IFFALSE 43217
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43159: LD_VAR 0 1
43163: PPUSH
43164: LD_STRING h
43166: PUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: CALL_OW 250
43176: PUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: CALL_OW 251
43186: PUSH
43187: LD_VAR 0 2
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: PPUSH
43213: CALL_OW 446
// end ;
43217: LD_VAR 0 3
43221: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43222: LD_INT 0
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43230: LD_VAR 0 1
43234: NOT
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 263
43245: PUSH
43246: LD_INT 2
43248: EQUAL
43249: NOT
43250: OR
43251: IFFALSE 43255
// exit ;
43253: GO 43571
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43255: LD_ADDR_VAR 0 6
43259: PUSH
43260: LD_INT 22
43262: PUSH
43263: LD_VAR 0 1
43267: PPUSH
43268: CALL_OW 255
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 30
43282: PUSH
43283: LD_INT 36
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 34
43292: PUSH
43293: LD_INT 31
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PPUSH
43309: CALL_OW 69
43313: ST_TO_ADDR
// if not tmp then
43314: LD_VAR 0 6
43318: NOT
43319: IFFALSE 43323
// exit ;
43321: GO 43571
// result := [ ] ;
43323: LD_ADDR_VAR 0 2
43327: PUSH
43328: EMPTY
43329: ST_TO_ADDR
// for i in tmp do
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_VAR 0 6
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43412
// begin t := UnitsInside ( i ) ;
43343: LD_ADDR_VAR 0 4
43347: PUSH
43348: LD_VAR 0 3
43352: PPUSH
43353: CALL_OW 313
43357: ST_TO_ADDR
// if t then
43358: LD_VAR 0 4
43362: IFFALSE 43410
// for j in t do
43364: LD_ADDR_VAR 0 7
43368: PUSH
43369: LD_VAR 0 4
43373: PUSH
43374: FOR_IN
43375: IFFALSE 43408
// result := Insert ( result , result + 1 , j ) ;
43377: LD_ADDR_VAR 0 2
43381: PUSH
43382: LD_VAR 0 2
43386: PPUSH
43387: LD_VAR 0 2
43391: PUSH
43392: LD_INT 1
43394: PLUS
43395: PPUSH
43396: LD_VAR 0 7
43400: PPUSH
43401: CALL_OW 2
43405: ST_TO_ADDR
43406: GO 43374
43408: POP
43409: POP
// end ;
43410: GO 43340
43412: POP
43413: POP
// if not result then
43414: LD_VAR 0 2
43418: NOT
43419: IFFALSE 43423
// exit ;
43421: GO 43571
// mech := result [ 1 ] ;
43423: LD_ADDR_VAR 0 5
43427: PUSH
43428: LD_VAR 0 2
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: ST_TO_ADDR
// if result > 1 then
43437: LD_VAR 0 2
43441: PUSH
43442: LD_INT 1
43444: GREATER
43445: IFFALSE 43557
// for i = 2 to result do
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: DOUBLE
43453: LD_INT 2
43455: DEC
43456: ST_TO_ADDR
43457: LD_VAR 0 2
43461: PUSH
43462: FOR_TO
43463: IFFALSE 43555
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43465: LD_ADDR_VAR 0 4
43469: PUSH
43470: LD_VAR 0 2
43474: PUSH
43475: LD_VAR 0 3
43479: ARRAY
43480: PPUSH
43481: LD_INT 3
43483: PPUSH
43484: CALL_OW 259
43488: PUSH
43489: LD_VAR 0 2
43493: PUSH
43494: LD_VAR 0 3
43498: ARRAY
43499: PPUSH
43500: CALL_OW 432
43504: MINUS
43505: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43506: LD_VAR 0 4
43510: PUSH
43511: LD_VAR 0 5
43515: PPUSH
43516: LD_INT 3
43518: PPUSH
43519: CALL_OW 259
43523: PUSH
43524: LD_VAR 0 5
43528: PPUSH
43529: CALL_OW 432
43533: MINUS
43534: GREATEREQUAL
43535: IFFALSE 43553
// mech := result [ i ] ;
43537: LD_ADDR_VAR 0 5
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: LD_VAR 0 3
43551: ARRAY
43552: ST_TO_ADDR
// end ;
43553: GO 43462
43555: POP
43556: POP
// ComLinkTo ( vehicle , mech ) ;
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_VAR 0 5
43566: PPUSH
43567: CALL_OW 135
// end ;
43571: LD_VAR 0 2
43575: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43576: LD_INT 0
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
// result := [ ] ;
43591: LD_ADDR_VAR 0 7
43595: PUSH
43596: EMPTY
43597: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43598: LD_VAR 0 1
43602: PPUSH
43603: CALL_OW 266
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: IN
43618: NOT
43619: IFFALSE 43623
// exit ;
43621: GO 45254
// if name then
43623: LD_VAR 0 3
43627: IFFALSE 43643
// SetBName ( base_dep , name ) ;
43629: LD_VAR 0 1
43633: PPUSH
43634: LD_VAR 0 3
43638: PPUSH
43639: CALL_OW 500
// base := GetBase ( base_dep ) ;
43643: LD_ADDR_VAR 0 15
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 274
43657: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43658: LD_ADDR_VAR 0 16
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 255
43672: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43673: LD_ADDR_VAR 0 17
43677: PUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 248
43687: ST_TO_ADDR
// if sources then
43688: LD_VAR 0 5
43692: IFFALSE 43739
// for i = 1 to 3 do
43694: LD_ADDR_VAR 0 8
43698: PUSH
43699: DOUBLE
43700: LD_INT 1
43702: DEC
43703: ST_TO_ADDR
43704: LD_INT 3
43706: PUSH
43707: FOR_TO
43708: IFFALSE 43737
// AddResourceType ( base , i , sources [ i ] ) ;
43710: LD_VAR 0 15
43714: PPUSH
43715: LD_VAR 0 8
43719: PPUSH
43720: LD_VAR 0 5
43724: PUSH
43725: LD_VAR 0 8
43729: ARRAY
43730: PPUSH
43731: CALL_OW 276
43735: GO 43707
43737: POP
43738: POP
// buildings := GetBaseBuildings ( base , area ) ;
43739: LD_ADDR_VAR 0 18
43743: PUSH
43744: LD_VAR 0 15
43748: PPUSH
43749: LD_VAR 0 2
43753: PPUSH
43754: CALL 43031 0 2
43758: ST_TO_ADDR
// InitHc ;
43759: CALL_OW 19
// InitUc ;
43763: CALL_OW 18
// uc_side := side ;
43767: LD_ADDR_OWVAR 20
43771: PUSH
43772: LD_VAR 0 16
43776: ST_TO_ADDR
// uc_nation := nation ;
43777: LD_ADDR_OWVAR 21
43781: PUSH
43782: LD_VAR 0 17
43786: ST_TO_ADDR
// if buildings then
43787: LD_VAR 0 18
43791: IFFALSE 45113
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43793: LD_ADDR_VAR 0 19
43797: PUSH
43798: LD_VAR 0 18
43802: PPUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 30
43808: PUSH
43809: LD_INT 29
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 30
43818: PUSH
43819: LD_INT 30
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: PPUSH
43831: CALL_OW 72
43835: ST_TO_ADDR
// if tmp then
43836: LD_VAR 0 19
43840: IFFALSE 43888
// for i in tmp do
43842: LD_ADDR_VAR 0 8
43846: PUSH
43847: LD_VAR 0 19
43851: PUSH
43852: FOR_IN
43853: IFFALSE 43886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43855: LD_VAR 0 8
43859: PPUSH
43860: CALL_OW 250
43864: PPUSH
43865: LD_VAR 0 8
43869: PPUSH
43870: CALL_OW 251
43874: PPUSH
43875: LD_VAR 0 16
43879: PPUSH
43880: CALL_OW 441
43884: GO 43852
43886: POP
43887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43888: LD_VAR 0 18
43892: PPUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 30
43898: PUSH
43899: LD_INT 32
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 30
43908: PUSH
43909: LD_INT 33
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: PPUSH
43921: CALL_OW 72
43925: IFFALSE 44013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43927: LD_ADDR_VAR 0 8
43931: PUSH
43932: LD_VAR 0 18
43936: PPUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 30
43942: PUSH
43943: LD_INT 32
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 30
43952: PUSH
43953: LD_INT 33
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: PPUSH
43965: CALL_OW 72
43969: PUSH
43970: FOR_IN
43971: IFFALSE 44011
// begin if not GetBWeapon ( i ) then
43973: LD_VAR 0 8
43977: PPUSH
43978: CALL_OW 269
43982: NOT
43983: IFFALSE 44009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43985: LD_VAR 0 8
43989: PPUSH
43990: LD_VAR 0 8
43994: PPUSH
43995: LD_VAR 0 2
43999: PPUSH
44000: CALL 45259 0 2
44004: PPUSH
44005: CALL_OW 431
// end ;
44009: GO 43970
44011: POP
44012: POP
// end ; for i = 1 to personel do
44013: LD_ADDR_VAR 0 8
44017: PUSH
44018: DOUBLE
44019: LD_INT 1
44021: DEC
44022: ST_TO_ADDR
44023: LD_VAR 0 6
44027: PUSH
44028: FOR_TO
44029: IFFALSE 45093
// begin if i > 4 then
44031: LD_VAR 0 8
44035: PUSH
44036: LD_INT 4
44038: GREATER
44039: IFFALSE 44043
// break ;
44041: GO 45093
// case i of 1 :
44043: LD_VAR 0 8
44047: PUSH
44048: LD_INT 1
44050: DOUBLE
44051: EQUAL
44052: IFTRUE 44056
44054: GO 44136
44056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44057: LD_ADDR_VAR 0 12
44061: PUSH
44062: LD_VAR 0 18
44066: PPUSH
44067: LD_INT 22
44069: PUSH
44070: LD_VAR 0 16
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 58
44081: PUSH
44082: EMPTY
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 30
44090: PUSH
44091: LD_INT 32
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 30
44100: PUSH
44101: LD_INT 4
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 30
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: PPUSH
44129: CALL_OW 72
44133: ST_TO_ADDR
44134: GO 44358
44136: LD_INT 2
44138: DOUBLE
44139: EQUAL
44140: IFTRUE 44144
44142: GO 44206
44144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44145: LD_ADDR_VAR 0 12
44149: PUSH
44150: LD_VAR 0 18
44154: PPUSH
44155: LD_INT 22
44157: PUSH
44158: LD_VAR 0 16
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 30
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 30
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PPUSH
44199: CALL_OW 72
44203: ST_TO_ADDR
44204: GO 44358
44206: LD_INT 3
44208: DOUBLE
44209: EQUAL
44210: IFTRUE 44214
44212: GO 44276
44214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44215: LD_ADDR_VAR 0 12
44219: PUSH
44220: LD_VAR 0 18
44224: PPUSH
44225: LD_INT 22
44227: PUSH
44228: LD_VAR 0 16
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 30
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 30
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PPUSH
44269: CALL_OW 72
44273: ST_TO_ADDR
44274: GO 44358
44276: LD_INT 4
44278: DOUBLE
44279: EQUAL
44280: IFTRUE 44284
44282: GO 44357
44284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44285: LD_ADDR_VAR 0 12
44289: PUSH
44290: LD_VAR 0 18
44294: PPUSH
44295: LD_INT 22
44297: PUSH
44298: LD_VAR 0 16
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 30
44312: PUSH
44313: LD_INT 6
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 30
44322: PUSH
44323: LD_INT 7
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 30
44332: PUSH
44333: LD_INT 8
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PPUSH
44350: CALL_OW 72
44354: ST_TO_ADDR
44355: GO 44358
44357: POP
// if i = 1 then
44358: LD_VAR 0 8
44362: PUSH
44363: LD_INT 1
44365: EQUAL
44366: IFFALSE 44477
// begin tmp := [ ] ;
44368: LD_ADDR_VAR 0 19
44372: PUSH
44373: EMPTY
44374: ST_TO_ADDR
// for j in f do
44375: LD_ADDR_VAR 0 9
44379: PUSH
44380: LD_VAR 0 12
44384: PUSH
44385: FOR_IN
44386: IFFALSE 44459
// if GetBType ( j ) = b_bunker then
44388: LD_VAR 0 9
44392: PPUSH
44393: CALL_OW 266
44397: PUSH
44398: LD_INT 32
44400: EQUAL
44401: IFFALSE 44428
// tmp := Insert ( tmp , 1 , j ) else
44403: LD_ADDR_VAR 0 19
44407: PUSH
44408: LD_VAR 0 19
44412: PPUSH
44413: LD_INT 1
44415: PPUSH
44416: LD_VAR 0 9
44420: PPUSH
44421: CALL_OW 2
44425: ST_TO_ADDR
44426: GO 44457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44428: LD_ADDR_VAR 0 19
44432: PUSH
44433: LD_VAR 0 19
44437: PPUSH
44438: LD_VAR 0 19
44442: PUSH
44443: LD_INT 1
44445: PLUS
44446: PPUSH
44447: LD_VAR 0 9
44451: PPUSH
44452: CALL_OW 2
44456: ST_TO_ADDR
44457: GO 44385
44459: POP
44460: POP
// if tmp then
44461: LD_VAR 0 19
44465: IFFALSE 44477
// f := tmp ;
44467: LD_ADDR_VAR 0 12
44471: PUSH
44472: LD_VAR 0 19
44476: ST_TO_ADDR
// end ; x := personel [ i ] ;
44477: LD_ADDR_VAR 0 13
44481: PUSH
44482: LD_VAR 0 6
44486: PUSH
44487: LD_VAR 0 8
44491: ARRAY
44492: ST_TO_ADDR
// if x = - 1 then
44493: LD_VAR 0 13
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: EQUAL
44502: IFFALSE 44711
// begin for j in f do
44504: LD_ADDR_VAR 0 9
44508: PUSH
44509: LD_VAR 0 12
44513: PUSH
44514: FOR_IN
44515: IFFALSE 44707
// repeat InitHc ;
44517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44521: LD_VAR 0 9
44525: PPUSH
44526: CALL_OW 266
44530: PUSH
44531: LD_INT 5
44533: EQUAL
44534: IFFALSE 44604
// begin if UnitsInside ( j ) < 3 then
44536: LD_VAR 0 9
44540: PPUSH
44541: CALL_OW 313
44545: PUSH
44546: LD_INT 3
44548: LESS
44549: IFFALSE 44585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44551: LD_INT 0
44553: PPUSH
44554: LD_INT 5
44556: PUSH
44557: LD_INT 8
44559: PUSH
44560: LD_INT 9
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: PUSH
44568: LD_VAR 0 17
44572: ARRAY
44573: PPUSH
44574: LD_VAR 0 4
44578: PPUSH
44579: CALL_OW 380
44583: GO 44602
// PrepareHuman ( false , i , skill ) ;
44585: LD_INT 0
44587: PPUSH
44588: LD_VAR 0 8
44592: PPUSH
44593: LD_VAR 0 4
44597: PPUSH
44598: CALL_OW 380
// end else
44602: GO 44621
// PrepareHuman ( false , i , skill ) ;
44604: LD_INT 0
44606: PPUSH
44607: LD_VAR 0 8
44611: PPUSH
44612: LD_VAR 0 4
44616: PPUSH
44617: CALL_OW 380
// un := CreateHuman ;
44621: LD_ADDR_VAR 0 14
44625: PUSH
44626: CALL_OW 44
44630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44631: LD_ADDR_VAR 0 7
44635: PUSH
44636: LD_VAR 0 7
44640: PPUSH
44641: LD_INT 1
44643: PPUSH
44644: LD_VAR 0 14
44648: PPUSH
44649: CALL_OW 2
44653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44654: LD_VAR 0 14
44658: PPUSH
44659: LD_VAR 0 9
44663: PPUSH
44664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44668: LD_VAR 0 9
44672: PPUSH
44673: CALL_OW 313
44677: PUSH
44678: LD_INT 6
44680: EQUAL
44681: PUSH
44682: LD_VAR 0 9
44686: PPUSH
44687: CALL_OW 266
44691: PUSH
44692: LD_INT 32
44694: PUSH
44695: LD_INT 31
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: IN
44702: OR
44703: IFFALSE 44517
44705: GO 44514
44707: POP
44708: POP
// end else
44709: GO 45091
// for j = 1 to x do
44711: LD_ADDR_VAR 0 9
44715: PUSH
44716: DOUBLE
44717: LD_INT 1
44719: DEC
44720: ST_TO_ADDR
44721: LD_VAR 0 13
44725: PUSH
44726: FOR_TO
44727: IFFALSE 45089
// begin InitHc ;
44729: CALL_OW 19
// if not f then
44733: LD_VAR 0 12
44737: NOT
44738: IFFALSE 44827
// begin PrepareHuman ( false , i , skill ) ;
44740: LD_INT 0
44742: PPUSH
44743: LD_VAR 0 8
44747: PPUSH
44748: LD_VAR 0 4
44752: PPUSH
44753: CALL_OW 380
// un := CreateHuman ;
44757: LD_ADDR_VAR 0 14
44761: PUSH
44762: CALL_OW 44
44766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44767: LD_ADDR_VAR 0 7
44771: PUSH
44772: LD_VAR 0 7
44776: PPUSH
44777: LD_INT 1
44779: PPUSH
44780: LD_VAR 0 14
44784: PPUSH
44785: CALL_OW 2
44789: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44790: LD_VAR 0 14
44794: PPUSH
44795: LD_VAR 0 1
44799: PPUSH
44800: CALL_OW 250
44804: PPUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 251
44814: PPUSH
44815: LD_INT 10
44817: PPUSH
44818: LD_INT 0
44820: PPUSH
44821: CALL_OW 50
// continue ;
44825: GO 44726
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44827: LD_VAR 0 12
44831: PUSH
44832: LD_INT 1
44834: ARRAY
44835: PPUSH
44836: CALL_OW 313
44840: PUSH
44841: LD_VAR 0 12
44845: PUSH
44846: LD_INT 1
44848: ARRAY
44849: PPUSH
44850: CALL_OW 266
44854: PUSH
44855: LD_INT 32
44857: PUSH
44858: LD_INT 31
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: IN
44865: AND
44866: PUSH
44867: LD_VAR 0 12
44871: PUSH
44872: LD_INT 1
44874: ARRAY
44875: PPUSH
44876: CALL_OW 313
44880: PUSH
44881: LD_INT 6
44883: EQUAL
44884: OR
44885: IFFALSE 44905
// f := Delete ( f , 1 ) ;
44887: LD_ADDR_VAR 0 12
44891: PUSH
44892: LD_VAR 0 12
44896: PPUSH
44897: LD_INT 1
44899: PPUSH
44900: CALL_OW 3
44904: ST_TO_ADDR
// if not f then
44905: LD_VAR 0 12
44909: NOT
44910: IFFALSE 44928
// begin x := x + 2 ;
44912: LD_ADDR_VAR 0 13
44916: PUSH
44917: LD_VAR 0 13
44921: PUSH
44922: LD_INT 2
44924: PLUS
44925: ST_TO_ADDR
// continue ;
44926: GO 44726
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44928: LD_VAR 0 12
44932: PUSH
44933: LD_INT 1
44935: ARRAY
44936: PPUSH
44937: CALL_OW 266
44941: PUSH
44942: LD_INT 5
44944: EQUAL
44945: IFFALSE 45019
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44947: LD_VAR 0 12
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: PPUSH
44956: CALL_OW 313
44960: PUSH
44961: LD_INT 3
44963: LESS
44964: IFFALSE 45000
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44966: LD_INT 0
44968: PPUSH
44969: LD_INT 5
44971: PUSH
44972: LD_INT 8
44974: PUSH
44975: LD_INT 9
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_VAR 0 17
44987: ARRAY
44988: PPUSH
44989: LD_VAR 0 4
44993: PPUSH
44994: CALL_OW 380
44998: GO 45017
// PrepareHuman ( false , i , skill ) ;
45000: LD_INT 0
45002: PPUSH
45003: LD_VAR 0 8
45007: PPUSH
45008: LD_VAR 0 4
45012: PPUSH
45013: CALL_OW 380
// end else
45017: GO 45036
// PrepareHuman ( false , i , skill ) ;
45019: LD_INT 0
45021: PPUSH
45022: LD_VAR 0 8
45026: PPUSH
45027: LD_VAR 0 4
45031: PPUSH
45032: CALL_OW 380
// un := CreateHuman ;
45036: LD_ADDR_VAR 0 14
45040: PUSH
45041: CALL_OW 44
45045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45046: LD_ADDR_VAR 0 7
45050: PUSH
45051: LD_VAR 0 7
45055: PPUSH
45056: LD_INT 1
45058: PPUSH
45059: LD_VAR 0 14
45063: PPUSH
45064: CALL_OW 2
45068: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45069: LD_VAR 0 14
45073: PPUSH
45074: LD_VAR 0 12
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PPUSH
45083: CALL_OW 52
// end ;
45087: GO 44726
45089: POP
45090: POP
// end ;
45091: GO 44028
45093: POP
45094: POP
// result := result ^ buildings ;
45095: LD_ADDR_VAR 0 7
45099: PUSH
45100: LD_VAR 0 7
45104: PUSH
45105: LD_VAR 0 18
45109: ADD
45110: ST_TO_ADDR
// end else
45111: GO 45254
// begin for i = 1 to personel do
45113: LD_ADDR_VAR 0 8
45117: PUSH
45118: DOUBLE
45119: LD_INT 1
45121: DEC
45122: ST_TO_ADDR
45123: LD_VAR 0 6
45127: PUSH
45128: FOR_TO
45129: IFFALSE 45252
// begin if i > 4 then
45131: LD_VAR 0 8
45135: PUSH
45136: LD_INT 4
45138: GREATER
45139: IFFALSE 45143
// break ;
45141: GO 45252
// x := personel [ i ] ;
45143: LD_ADDR_VAR 0 13
45147: PUSH
45148: LD_VAR 0 6
45152: PUSH
45153: LD_VAR 0 8
45157: ARRAY
45158: ST_TO_ADDR
// if x = - 1 then
45159: LD_VAR 0 13
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: EQUAL
45168: IFFALSE 45172
// continue ;
45170: GO 45128
// PrepareHuman ( false , i , skill ) ;
45172: LD_INT 0
45174: PPUSH
45175: LD_VAR 0 8
45179: PPUSH
45180: LD_VAR 0 4
45184: PPUSH
45185: CALL_OW 380
// un := CreateHuman ;
45189: LD_ADDR_VAR 0 14
45193: PUSH
45194: CALL_OW 44
45198: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45199: LD_VAR 0 14
45203: PPUSH
45204: LD_VAR 0 1
45208: PPUSH
45209: CALL_OW 250
45213: PPUSH
45214: LD_VAR 0 1
45218: PPUSH
45219: CALL_OW 251
45223: PPUSH
45224: LD_INT 10
45226: PPUSH
45227: LD_INT 0
45229: PPUSH
45230: CALL_OW 50
// result := result ^ un ;
45234: LD_ADDR_VAR 0 7
45238: PUSH
45239: LD_VAR 0 7
45243: PUSH
45244: LD_VAR 0 14
45248: ADD
45249: ST_TO_ADDR
// end ;
45250: GO 45128
45252: POP
45253: POP
// end ; end ;
45254: LD_VAR 0 7
45258: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45259: LD_INT 0
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
// result := false ;
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: LD_INT 0
45284: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45285: LD_VAR 0 1
45289: NOT
45290: PUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: CALL_OW 266
45300: PUSH
45301: LD_INT 32
45303: PUSH
45304: LD_INT 33
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: IN
45311: NOT
45312: OR
45313: IFFALSE 45317
// exit ;
45315: GO 46453
// nat := GetNation ( tower ) ;
45317: LD_ADDR_VAR 0 12
45321: PUSH
45322: LD_VAR 0 1
45326: PPUSH
45327: CALL_OW 248
45331: ST_TO_ADDR
// side := GetSide ( tower ) ;
45332: LD_ADDR_VAR 0 16
45336: PUSH
45337: LD_VAR 0 1
45341: PPUSH
45342: CALL_OW 255
45346: ST_TO_ADDR
// x := GetX ( tower ) ;
45347: LD_ADDR_VAR 0 10
45351: PUSH
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 250
45361: ST_TO_ADDR
// y := GetY ( tower ) ;
45362: LD_ADDR_VAR 0 11
45366: PUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 251
45376: ST_TO_ADDR
// if not x or not y then
45377: LD_VAR 0 10
45381: NOT
45382: PUSH
45383: LD_VAR 0 11
45387: NOT
45388: OR
45389: IFFALSE 45393
// exit ;
45391: GO 46453
// weapon := 0 ;
45393: LD_ADDR_VAR 0 18
45397: PUSH
45398: LD_INT 0
45400: ST_TO_ADDR
// fac_list := [ ] ;
45401: LD_ADDR_VAR 0 17
45405: PUSH
45406: EMPTY
45407: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45408: LD_ADDR_VAR 0 6
45412: PUSH
45413: LD_VAR 0 1
45417: PPUSH
45418: CALL_OW 274
45422: PPUSH
45423: LD_VAR 0 2
45427: PPUSH
45428: CALL 43031 0 2
45432: PPUSH
45433: LD_INT 30
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PPUSH
45443: CALL_OW 72
45447: ST_TO_ADDR
// if not factories then
45448: LD_VAR 0 6
45452: NOT
45453: IFFALSE 45457
// exit ;
45455: GO 46453
// for i in factories do
45457: LD_ADDR_VAR 0 8
45461: PUSH
45462: LD_VAR 0 6
45466: PUSH
45467: FOR_IN
45468: IFFALSE 45493
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45470: LD_ADDR_VAR 0 17
45474: PUSH
45475: LD_VAR 0 17
45479: PUSH
45480: LD_VAR 0 8
45484: PPUSH
45485: CALL_OW 478
45489: UNION
45490: ST_TO_ADDR
45491: GO 45467
45493: POP
45494: POP
// if not fac_list then
45495: LD_VAR 0 17
45499: NOT
45500: IFFALSE 45504
// exit ;
45502: GO 46453
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45504: LD_ADDR_VAR 0 5
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: LD_INT 9
45517: PUSH
45518: LD_INT 10
45520: PUSH
45521: LD_INT 6
45523: PUSH
45524: LD_INT 7
45526: PUSH
45527: LD_INT 11
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 27
45541: PUSH
45542: LD_INT 28
45544: PUSH
45545: LD_INT 26
45547: PUSH
45548: LD_INT 30
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 43
45559: PUSH
45560: LD_INT 44
45562: PUSH
45563: LD_INT 46
45565: PUSH
45566: LD_INT 45
45568: PUSH
45569: LD_INT 47
45571: PUSH
45572: LD_INT 49
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: LD_VAR 0 12
45592: ARRAY
45593: ST_TO_ADDR
// for i in list do
45594: LD_ADDR_VAR 0 8
45598: PUSH
45599: LD_VAR 0 5
45603: PUSH
45604: FOR_IN
45605: IFFALSE 45638
// if not i in fac_list then
45607: LD_VAR 0 8
45611: PUSH
45612: LD_VAR 0 17
45616: IN
45617: NOT
45618: IFFALSE 45636
// list := list diff i ;
45620: LD_ADDR_VAR 0 5
45624: PUSH
45625: LD_VAR 0 5
45629: PUSH
45630: LD_VAR 0 8
45634: DIFF
45635: ST_TO_ADDR
45636: GO 45604
45638: POP
45639: POP
// if not list then
45640: LD_VAR 0 5
45644: NOT
45645: IFFALSE 45649
// exit ;
45647: GO 46453
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45649: LD_VAR 0 12
45653: PUSH
45654: LD_INT 3
45656: EQUAL
45657: PUSH
45658: LD_INT 49
45660: PUSH
45661: LD_VAR 0 5
45665: IN
45666: AND
45667: PUSH
45668: LD_INT 31
45670: PPUSH
45671: LD_VAR 0 16
45675: PPUSH
45676: CALL_OW 321
45680: PUSH
45681: LD_INT 2
45683: EQUAL
45684: AND
45685: IFFALSE 45745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45687: LD_INT 22
45689: PUSH
45690: LD_VAR 0 16
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 35
45701: PUSH
45702: LD_INT 49
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 91
45711: PUSH
45712: LD_VAR 0 1
45716: PUSH
45717: LD_INT 10
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: PPUSH
45730: CALL_OW 69
45734: NOT
45735: IFFALSE 45745
// weapon := ru_time_lapser ;
45737: LD_ADDR_VAR 0 18
45741: PUSH
45742: LD_INT 49
45744: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45745: LD_VAR 0 12
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: IN
45760: PUSH
45761: LD_INT 11
45763: PUSH
45764: LD_VAR 0 5
45768: IN
45769: PUSH
45770: LD_INT 30
45772: PUSH
45773: LD_VAR 0 5
45777: IN
45778: OR
45779: AND
45780: PUSH
45781: LD_INT 6
45783: PPUSH
45784: LD_VAR 0 16
45788: PPUSH
45789: CALL_OW 321
45793: PUSH
45794: LD_INT 2
45796: EQUAL
45797: AND
45798: IFFALSE 45963
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45800: LD_INT 22
45802: PUSH
45803: LD_VAR 0 16
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 35
45817: PUSH
45818: LD_INT 11
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 35
45827: PUSH
45828: LD_INT 30
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 91
45842: PUSH
45843: LD_VAR 0 1
45847: PUSH
45848: LD_INT 18
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: PPUSH
45861: CALL_OW 69
45865: NOT
45866: PUSH
45867: LD_INT 22
45869: PUSH
45870: LD_VAR 0 16
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 30
45884: PUSH
45885: LD_INT 32
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 30
45894: PUSH
45895: LD_INT 33
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 91
45909: PUSH
45910: LD_VAR 0 1
45914: PUSH
45915: LD_INT 12
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: PPUSH
45931: CALL_OW 69
45935: PUSH
45936: LD_INT 2
45938: GREATER
45939: AND
45940: IFFALSE 45963
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45942: LD_ADDR_VAR 0 18
45946: PUSH
45947: LD_INT 11
45949: PUSH
45950: LD_INT 30
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_VAR 0 12
45961: ARRAY
45962: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45963: LD_VAR 0 18
45967: NOT
45968: PUSH
45969: LD_INT 40
45971: PPUSH
45972: LD_VAR 0 16
45976: PPUSH
45977: CALL_OW 321
45981: PUSH
45982: LD_INT 2
45984: EQUAL
45985: AND
45986: PUSH
45987: LD_INT 7
45989: PUSH
45990: LD_VAR 0 5
45994: IN
45995: PUSH
45996: LD_INT 28
45998: PUSH
45999: LD_VAR 0 5
46003: IN
46004: OR
46005: PUSH
46006: LD_INT 45
46008: PUSH
46009: LD_VAR 0 5
46013: IN
46014: OR
46015: AND
46016: IFFALSE 46270
// begin hex := GetHexInfo ( x , y ) ;
46018: LD_ADDR_VAR 0 4
46022: PUSH
46023: LD_VAR 0 10
46027: PPUSH
46028: LD_VAR 0 11
46032: PPUSH
46033: CALL_OW 546
46037: ST_TO_ADDR
// if hex [ 1 ] then
46038: LD_VAR 0 4
46042: PUSH
46043: LD_INT 1
46045: ARRAY
46046: IFFALSE 46050
// exit ;
46048: GO 46453
// height := hex [ 2 ] ;
46050: LD_ADDR_VAR 0 15
46054: PUSH
46055: LD_VAR 0 4
46059: PUSH
46060: LD_INT 2
46062: ARRAY
46063: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46064: LD_ADDR_VAR 0 14
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 5
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// for i in tmp do
46087: LD_ADDR_VAR 0 8
46091: PUSH
46092: LD_VAR 0 14
46096: PUSH
46097: FOR_IN
46098: IFFALSE 46268
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46100: LD_ADDR_VAR 0 9
46104: PUSH
46105: LD_VAR 0 10
46109: PPUSH
46110: LD_VAR 0 8
46114: PPUSH
46115: LD_INT 5
46117: PPUSH
46118: CALL_OW 272
46122: PUSH
46123: LD_VAR 0 11
46127: PPUSH
46128: LD_VAR 0 8
46132: PPUSH
46133: LD_INT 5
46135: PPUSH
46136: CALL_OW 273
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46145: LD_VAR 0 9
46149: PUSH
46150: LD_INT 1
46152: ARRAY
46153: PPUSH
46154: LD_VAR 0 9
46158: PUSH
46159: LD_INT 2
46161: ARRAY
46162: PPUSH
46163: CALL_OW 488
46167: IFFALSE 46266
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46169: LD_ADDR_VAR 0 4
46173: PUSH
46174: LD_VAR 0 9
46178: PUSH
46179: LD_INT 1
46181: ARRAY
46182: PPUSH
46183: LD_VAR 0 9
46187: PUSH
46188: LD_INT 2
46190: ARRAY
46191: PPUSH
46192: CALL_OW 546
46196: ST_TO_ADDR
// if hex [ 1 ] then
46197: LD_VAR 0 4
46201: PUSH
46202: LD_INT 1
46204: ARRAY
46205: IFFALSE 46209
// continue ;
46207: GO 46097
// h := hex [ 2 ] ;
46209: LD_ADDR_VAR 0 13
46213: PUSH
46214: LD_VAR 0 4
46218: PUSH
46219: LD_INT 2
46221: ARRAY
46222: ST_TO_ADDR
// if h + 7 < height then
46223: LD_VAR 0 13
46227: PUSH
46228: LD_INT 7
46230: PLUS
46231: PUSH
46232: LD_VAR 0 15
46236: LESS
46237: IFFALSE 46266
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46239: LD_ADDR_VAR 0 18
46243: PUSH
46244: LD_INT 7
46246: PUSH
46247: LD_INT 28
46249: PUSH
46250: LD_INT 45
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: PUSH
46258: LD_VAR 0 12
46262: ARRAY
46263: ST_TO_ADDR
// break ;
46264: GO 46268
// end ; end ; end ;
46266: GO 46097
46268: POP
46269: POP
// end ; if not weapon then
46270: LD_VAR 0 18
46274: NOT
46275: IFFALSE 46335
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46277: LD_ADDR_VAR 0 5
46281: PUSH
46282: LD_VAR 0 5
46286: PUSH
46287: LD_INT 11
46289: PUSH
46290: LD_INT 30
46292: PUSH
46293: LD_INT 49
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: DIFF
46301: ST_TO_ADDR
// if not list then
46302: LD_VAR 0 5
46306: NOT
46307: IFFALSE 46311
// exit ;
46309: GO 46453
// weapon := list [ rand ( 1 , list ) ] ;
46311: LD_ADDR_VAR 0 18
46315: PUSH
46316: LD_VAR 0 5
46320: PUSH
46321: LD_INT 1
46323: PPUSH
46324: LD_VAR 0 5
46328: PPUSH
46329: CALL_OW 12
46333: ARRAY
46334: ST_TO_ADDR
// end ; if weapon then
46335: LD_VAR 0 18
46339: IFFALSE 46453
// begin tmp := CostOfWeapon ( weapon ) ;
46341: LD_ADDR_VAR 0 14
46345: PUSH
46346: LD_VAR 0 18
46350: PPUSH
46351: CALL_OW 451
46355: ST_TO_ADDR
// j := GetBase ( tower ) ;
46356: LD_ADDR_VAR 0 9
46360: PUSH
46361: LD_VAR 0 1
46365: PPUSH
46366: CALL_OW 274
46370: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46371: LD_VAR 0 9
46375: PPUSH
46376: LD_INT 1
46378: PPUSH
46379: CALL_OW 275
46383: PUSH
46384: LD_VAR 0 14
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: GREATEREQUAL
46393: PUSH
46394: LD_VAR 0 9
46398: PPUSH
46399: LD_INT 2
46401: PPUSH
46402: CALL_OW 275
46406: PUSH
46407: LD_VAR 0 14
46411: PUSH
46412: LD_INT 2
46414: ARRAY
46415: GREATEREQUAL
46416: AND
46417: PUSH
46418: LD_VAR 0 9
46422: PPUSH
46423: LD_INT 3
46425: PPUSH
46426: CALL_OW 275
46430: PUSH
46431: LD_VAR 0 14
46435: PUSH
46436: LD_INT 3
46438: ARRAY
46439: GREATEREQUAL
46440: AND
46441: IFFALSE 46453
// result := weapon ;
46443: LD_ADDR_VAR 0 3
46447: PUSH
46448: LD_VAR 0 18
46452: ST_TO_ADDR
// end ; end ;
46453: LD_VAR 0 3
46457: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46458: LD_INT 0
46460: PPUSH
46461: PPUSH
// result := true ;
46462: LD_ADDR_VAR 0 3
46466: PUSH
46467: LD_INT 1
46469: ST_TO_ADDR
// if array1 = array2 then
46470: LD_VAR 0 1
46474: PUSH
46475: LD_VAR 0 2
46479: EQUAL
46480: IFFALSE 46540
// begin for i = 1 to array1 do
46482: LD_ADDR_VAR 0 4
46486: PUSH
46487: DOUBLE
46488: LD_INT 1
46490: DEC
46491: ST_TO_ADDR
46492: LD_VAR 0 1
46496: PUSH
46497: FOR_TO
46498: IFFALSE 46536
// if array1 [ i ] <> array2 [ i ] then
46500: LD_VAR 0 1
46504: PUSH
46505: LD_VAR 0 4
46509: ARRAY
46510: PUSH
46511: LD_VAR 0 2
46515: PUSH
46516: LD_VAR 0 4
46520: ARRAY
46521: NONEQUAL
46522: IFFALSE 46534
// begin result := false ;
46524: LD_ADDR_VAR 0 3
46528: PUSH
46529: LD_INT 0
46531: ST_TO_ADDR
// break ;
46532: GO 46536
// end ;
46534: GO 46497
46536: POP
46537: POP
// end else
46538: GO 46548
// result := false ;
46540: LD_ADDR_VAR 0 3
46544: PUSH
46545: LD_INT 0
46547: ST_TO_ADDR
// end ;
46548: LD_VAR 0 3
46552: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46553: LD_INT 0
46555: PPUSH
46556: PPUSH
46557: PPUSH
// pom := GetBase ( fac ) ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: CALL_OW 274
46572: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46573: LD_ADDR_VAR 0 4
46577: PUSH
46578: LD_VAR 0 2
46582: PUSH
46583: LD_INT 1
46585: ARRAY
46586: PPUSH
46587: LD_VAR 0 2
46591: PUSH
46592: LD_INT 2
46594: ARRAY
46595: PPUSH
46596: LD_VAR 0 2
46600: PUSH
46601: LD_INT 3
46603: ARRAY
46604: PPUSH
46605: LD_VAR 0 2
46609: PUSH
46610: LD_INT 4
46612: ARRAY
46613: PPUSH
46614: CALL_OW 449
46618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46619: LD_ADDR_VAR 0 3
46623: PUSH
46624: LD_VAR 0 5
46628: PPUSH
46629: LD_INT 1
46631: PPUSH
46632: CALL_OW 275
46636: PUSH
46637: LD_VAR 0 4
46641: PUSH
46642: LD_INT 1
46644: ARRAY
46645: GREATEREQUAL
46646: PUSH
46647: LD_VAR 0 5
46651: PPUSH
46652: LD_INT 2
46654: PPUSH
46655: CALL_OW 275
46659: PUSH
46660: LD_VAR 0 4
46664: PUSH
46665: LD_INT 2
46667: ARRAY
46668: GREATEREQUAL
46669: AND
46670: PUSH
46671: LD_VAR 0 5
46675: PPUSH
46676: LD_INT 3
46678: PPUSH
46679: CALL_OW 275
46683: PUSH
46684: LD_VAR 0 4
46688: PUSH
46689: LD_INT 3
46691: ARRAY
46692: GREATEREQUAL
46693: AND
46694: ST_TO_ADDR
// end ;
46695: LD_VAR 0 3
46699: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46700: LD_INT 0
46702: PPUSH
46703: PPUSH
46704: PPUSH
46705: PPUSH
// pom := GetBase ( building ) ;
46706: LD_ADDR_VAR 0 3
46710: PUSH
46711: LD_VAR 0 1
46715: PPUSH
46716: CALL_OW 274
46720: ST_TO_ADDR
// if not pom then
46721: LD_VAR 0 3
46725: NOT
46726: IFFALSE 46730
// exit ;
46728: GO 46900
// btype := GetBType ( building ) ;
46730: LD_ADDR_VAR 0 5
46734: PUSH
46735: LD_VAR 0 1
46739: PPUSH
46740: CALL_OW 266
46744: ST_TO_ADDR
// if btype = b_armoury then
46745: LD_VAR 0 5
46749: PUSH
46750: LD_INT 4
46752: EQUAL
46753: IFFALSE 46763
// btype := b_barracks ;
46755: LD_ADDR_VAR 0 5
46759: PUSH
46760: LD_INT 5
46762: ST_TO_ADDR
// if btype = b_depot then
46763: LD_VAR 0 5
46767: PUSH
46768: LD_INT 0
46770: EQUAL
46771: IFFALSE 46781
// btype := b_warehouse ;
46773: LD_ADDR_VAR 0 5
46777: PUSH
46778: LD_INT 1
46780: ST_TO_ADDR
// if btype = b_workshop then
46781: LD_VAR 0 5
46785: PUSH
46786: LD_INT 2
46788: EQUAL
46789: IFFALSE 46799
// btype := b_factory ;
46791: LD_ADDR_VAR 0 5
46795: PUSH
46796: LD_INT 3
46798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46799: LD_ADDR_VAR 0 4
46803: PUSH
46804: LD_VAR 0 5
46808: PPUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: CALL_OW 248
46818: PPUSH
46819: CALL_OW 450
46823: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46824: LD_ADDR_VAR 0 2
46828: PUSH
46829: LD_VAR 0 3
46833: PPUSH
46834: LD_INT 1
46836: PPUSH
46837: CALL_OW 275
46841: PUSH
46842: LD_VAR 0 4
46846: PUSH
46847: LD_INT 1
46849: ARRAY
46850: GREATEREQUAL
46851: PUSH
46852: LD_VAR 0 3
46856: PPUSH
46857: LD_INT 2
46859: PPUSH
46860: CALL_OW 275
46864: PUSH
46865: LD_VAR 0 4
46869: PUSH
46870: LD_INT 2
46872: ARRAY
46873: GREATEREQUAL
46874: AND
46875: PUSH
46876: LD_VAR 0 3
46880: PPUSH
46881: LD_INT 3
46883: PPUSH
46884: CALL_OW 275
46888: PUSH
46889: LD_VAR 0 4
46893: PUSH
46894: LD_INT 3
46896: ARRAY
46897: GREATEREQUAL
46898: AND
46899: ST_TO_ADDR
// end ;
46900: LD_VAR 0 2
46904: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46905: LD_INT 0
46907: PPUSH
46908: PPUSH
46909: PPUSH
// pom := GetBase ( building ) ;
46910: LD_ADDR_VAR 0 4
46914: PUSH
46915: LD_VAR 0 1
46919: PPUSH
46920: CALL_OW 274
46924: ST_TO_ADDR
// if not pom then
46925: LD_VAR 0 4
46929: NOT
46930: IFFALSE 46934
// exit ;
46932: GO 47035
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_VAR 0 2
46943: PPUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: CALL_OW 248
46953: PPUSH
46954: CALL_OW 450
46958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46959: LD_ADDR_VAR 0 3
46963: PUSH
46964: LD_VAR 0 4
46968: PPUSH
46969: LD_INT 1
46971: PPUSH
46972: CALL_OW 275
46976: PUSH
46977: LD_VAR 0 5
46981: PUSH
46982: LD_INT 1
46984: ARRAY
46985: GREATEREQUAL
46986: PUSH
46987: LD_VAR 0 4
46991: PPUSH
46992: LD_INT 2
46994: PPUSH
46995: CALL_OW 275
46999: PUSH
47000: LD_VAR 0 5
47004: PUSH
47005: LD_INT 2
47007: ARRAY
47008: GREATEREQUAL
47009: AND
47010: PUSH
47011: LD_VAR 0 4
47015: PPUSH
47016: LD_INT 3
47018: PPUSH
47019: CALL_OW 275
47023: PUSH
47024: LD_VAR 0 5
47028: PUSH
47029: LD_INT 3
47031: ARRAY
47032: GREATEREQUAL
47033: AND
47034: ST_TO_ADDR
// end ;
47035: LD_VAR 0 3
47039: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47040: LD_INT 0
47042: PPUSH
47043: PPUSH
47044: PPUSH
47045: PPUSH
47046: PPUSH
47047: PPUSH
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
// result := false ;
47052: LD_ADDR_VAR 0 6
47056: PUSH
47057: LD_INT 0
47059: ST_TO_ADDR
// if not base or not btype or not x or not y then
47060: LD_VAR 0 1
47064: NOT
47065: PUSH
47066: LD_VAR 0 2
47070: NOT
47071: OR
47072: PUSH
47073: LD_VAR 0 3
47077: NOT
47078: OR
47079: PUSH
47080: LD_VAR 0 4
47084: NOT
47085: OR
47086: IFFALSE 47090
// exit ;
47088: GO 47699
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47090: LD_ADDR_VAR 0 12
47094: PUSH
47095: LD_VAR 0 2
47099: PPUSH
47100: LD_VAR 0 3
47104: PPUSH
47105: LD_VAR 0 4
47109: PPUSH
47110: LD_VAR 0 5
47114: PPUSH
47115: LD_VAR 0 1
47119: PUSH
47120: LD_INT 1
47122: ARRAY
47123: PPUSH
47124: CALL_OW 248
47128: PPUSH
47129: LD_INT 0
47131: PPUSH
47132: CALL 48536 0 6
47136: ST_TO_ADDR
// if not hexes then
47137: LD_VAR 0 12
47141: NOT
47142: IFFALSE 47146
// exit ;
47144: GO 47699
// for i = 1 to hexes do
47146: LD_ADDR_VAR 0 7
47150: PUSH
47151: DOUBLE
47152: LD_INT 1
47154: DEC
47155: ST_TO_ADDR
47156: LD_VAR 0 12
47160: PUSH
47161: FOR_TO
47162: IFFALSE 47697
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47164: LD_ADDR_VAR 0 11
47168: PUSH
47169: LD_VAR 0 12
47173: PUSH
47174: LD_VAR 0 7
47178: ARRAY
47179: PUSH
47180: LD_INT 1
47182: ARRAY
47183: PPUSH
47184: LD_VAR 0 12
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PUSH
47195: LD_INT 2
47197: ARRAY
47198: PPUSH
47199: CALL_OW 428
47203: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47204: LD_VAR 0 12
47208: PUSH
47209: LD_VAR 0 7
47213: ARRAY
47214: PUSH
47215: LD_INT 1
47217: ARRAY
47218: PPUSH
47219: LD_VAR 0 12
47223: PUSH
47224: LD_VAR 0 7
47228: ARRAY
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: PPUSH
47234: CALL_OW 351
47238: PUSH
47239: LD_VAR 0 12
47243: PUSH
47244: LD_VAR 0 7
47248: ARRAY
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: LD_VAR 0 12
47258: PUSH
47259: LD_VAR 0 7
47263: ARRAY
47264: PUSH
47265: LD_INT 2
47267: ARRAY
47268: PPUSH
47269: CALL_OW 488
47273: NOT
47274: OR
47275: PUSH
47276: LD_VAR 0 11
47280: PPUSH
47281: CALL_OW 247
47285: PUSH
47286: LD_INT 3
47288: EQUAL
47289: OR
47290: IFFALSE 47296
// exit ;
47292: POP
47293: POP
47294: GO 47699
// if not tmp or not tmp in base then
47296: LD_VAR 0 11
47300: NOT
47301: PUSH
47302: LD_VAR 0 11
47306: PUSH
47307: LD_VAR 0 1
47311: IN
47312: NOT
47313: OR
47314: IFFALSE 47318
// continue ;
47316: GO 47161
// result := true ;
47318: LD_ADDR_VAR 0 6
47322: PUSH
47323: LD_INT 1
47325: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47326: LD_ADDR_VAR 0 15
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: LD_INT 22
47338: PUSH
47339: LD_VAR 0 11
47343: PPUSH
47344: CALL_OW 255
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 30
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 30
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PPUSH
47385: CALL_OW 72
47389: ST_TO_ADDR
// if dep then
47390: LD_VAR 0 15
47394: IFFALSE 47530
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47396: LD_ADDR_VAR 0 14
47400: PUSH
47401: LD_VAR 0 15
47405: PUSH
47406: LD_INT 1
47408: ARRAY
47409: PPUSH
47410: CALL_OW 250
47414: PPUSH
47415: LD_VAR 0 15
47419: PUSH
47420: LD_INT 1
47422: ARRAY
47423: PPUSH
47424: CALL_OW 254
47428: PPUSH
47429: LD_INT 5
47431: PPUSH
47432: CALL_OW 272
47436: PUSH
47437: LD_VAR 0 15
47441: PUSH
47442: LD_INT 1
47444: ARRAY
47445: PPUSH
47446: CALL_OW 251
47450: PPUSH
47451: LD_VAR 0 15
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: PPUSH
47460: CALL_OW 254
47464: PPUSH
47465: LD_INT 5
47467: PPUSH
47468: CALL_OW 273
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47477: LD_VAR 0 14
47481: PUSH
47482: LD_INT 1
47484: ARRAY
47485: PPUSH
47486: LD_VAR 0 14
47490: PUSH
47491: LD_INT 2
47493: ARRAY
47494: PPUSH
47495: CALL_OW 488
47499: IFFALSE 47530
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47501: LD_VAR 0 11
47505: PPUSH
47506: LD_VAR 0 14
47510: PUSH
47511: LD_INT 1
47513: ARRAY
47514: PPUSH
47515: LD_VAR 0 14
47519: PUSH
47520: LD_INT 2
47522: ARRAY
47523: PPUSH
47524: CALL_OW 111
// continue ;
47528: GO 47161
// end ; end ; r := GetDir ( tmp ) ;
47530: LD_ADDR_VAR 0 13
47534: PUSH
47535: LD_VAR 0 11
47539: PPUSH
47540: CALL_OW 254
47544: ST_TO_ADDR
// if r = 5 then
47545: LD_VAR 0 13
47549: PUSH
47550: LD_INT 5
47552: EQUAL
47553: IFFALSE 47563
// r := 0 ;
47555: LD_ADDR_VAR 0 13
47559: PUSH
47560: LD_INT 0
47562: ST_TO_ADDR
// for j = r to 5 do
47563: LD_ADDR_VAR 0 8
47567: PUSH
47568: DOUBLE
47569: LD_VAR 0 13
47573: DEC
47574: ST_TO_ADDR
47575: LD_INT 5
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47693
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47581: LD_ADDR_VAR 0 9
47585: PUSH
47586: LD_VAR 0 11
47590: PPUSH
47591: CALL_OW 250
47595: PPUSH
47596: LD_VAR 0 8
47600: PPUSH
47601: LD_INT 2
47603: PPUSH
47604: CALL_OW 272
47608: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47609: LD_ADDR_VAR 0 10
47613: PUSH
47614: LD_VAR 0 11
47618: PPUSH
47619: CALL_OW 251
47623: PPUSH
47624: LD_VAR 0 8
47628: PPUSH
47629: LD_INT 2
47631: PPUSH
47632: CALL_OW 273
47636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47637: LD_VAR 0 9
47641: PPUSH
47642: LD_VAR 0 10
47646: PPUSH
47647: CALL_OW 488
47651: PUSH
47652: LD_VAR 0 9
47656: PPUSH
47657: LD_VAR 0 10
47661: PPUSH
47662: CALL_OW 428
47666: NOT
47667: AND
47668: IFFALSE 47691
// begin ComMoveXY ( tmp , _x , _y ) ;
47670: LD_VAR 0 11
47674: PPUSH
47675: LD_VAR 0 9
47679: PPUSH
47680: LD_VAR 0 10
47684: PPUSH
47685: CALL_OW 111
// break ;
47689: GO 47693
// end ; end ;
47691: GO 47578
47693: POP
47694: POP
// end ;
47695: GO 47161
47697: POP
47698: POP
// end ;
47699: LD_VAR 0 6
47703: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
47704: LD_INT 0
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
// result := false ;
47716: LD_ADDR_VAR 0 6
47720: PUSH
47721: LD_INT 0
47723: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47724: LD_VAR 0 1
47728: NOT
47729: PUSH
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 266
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: IN
47750: NOT
47751: OR
47752: PUSH
47753: LD_VAR 0 2
47757: NOT
47758: OR
47759: PUSH
47760: LD_VAR 0 5
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: LD_INT 4
47779: PUSH
47780: LD_INT 5
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: IN
47791: NOT
47792: OR
47793: PUSH
47794: LD_VAR 0 3
47798: PPUSH
47799: LD_VAR 0 4
47803: PPUSH
47804: CALL_OW 488
47808: NOT
47809: OR
47810: IFFALSE 47814
// exit ;
47812: GO 48531
// pom := GetBase ( depot ) ;
47814: LD_ADDR_VAR 0 10
47818: PUSH
47819: LD_VAR 0 1
47823: PPUSH
47824: CALL_OW 274
47828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47829: LD_ADDR_VAR 0 11
47833: PUSH
47834: LD_VAR 0 2
47838: PPUSH
47839: LD_VAR 0 1
47843: PPUSH
47844: CALL_OW 248
47848: PPUSH
47849: CALL_OW 450
47853: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47854: LD_VAR 0 10
47858: PPUSH
47859: LD_INT 1
47861: PPUSH
47862: CALL_OW 275
47866: PUSH
47867: LD_VAR 0 11
47871: PUSH
47872: LD_INT 1
47874: ARRAY
47875: GREATEREQUAL
47876: PUSH
47877: LD_VAR 0 10
47881: PPUSH
47882: LD_INT 2
47884: PPUSH
47885: CALL_OW 275
47889: PUSH
47890: LD_VAR 0 11
47894: PUSH
47895: LD_INT 2
47897: ARRAY
47898: GREATEREQUAL
47899: AND
47900: PUSH
47901: LD_VAR 0 10
47905: PPUSH
47906: LD_INT 3
47908: PPUSH
47909: CALL_OW 275
47913: PUSH
47914: LD_VAR 0 11
47918: PUSH
47919: LD_INT 3
47921: ARRAY
47922: GREATEREQUAL
47923: AND
47924: NOT
47925: IFFALSE 47929
// exit ;
47927: GO 48531
// if GetBType ( depot ) = b_depot then
47929: LD_VAR 0 1
47933: PPUSH
47934: CALL_OW 266
47938: PUSH
47939: LD_INT 0
47941: EQUAL
47942: IFFALSE 47954
// dist := 28 else
47944: LD_ADDR_VAR 0 14
47948: PUSH
47949: LD_INT 28
47951: ST_TO_ADDR
47952: GO 47962
// dist := 36 ;
47954: LD_ADDR_VAR 0 14
47958: PUSH
47959: LD_INT 36
47961: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47962: LD_VAR 0 1
47966: PPUSH
47967: LD_VAR 0 3
47971: PPUSH
47972: LD_VAR 0 4
47976: PPUSH
47977: CALL_OW 297
47981: PUSH
47982: LD_VAR 0 14
47986: GREATER
47987: IFFALSE 47991
// exit ;
47989: GO 48531
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47991: LD_ADDR_VAR 0 12
47995: PUSH
47996: LD_VAR 0 2
48000: PPUSH
48001: LD_VAR 0 3
48005: PPUSH
48006: LD_VAR 0 4
48010: PPUSH
48011: LD_VAR 0 5
48015: PPUSH
48016: LD_VAR 0 1
48020: PPUSH
48021: CALL_OW 248
48025: PPUSH
48026: LD_INT 0
48028: PPUSH
48029: CALL 48536 0 6
48033: ST_TO_ADDR
// if not hexes then
48034: LD_VAR 0 12
48038: NOT
48039: IFFALSE 48043
// exit ;
48041: GO 48531
// hex := GetHexInfo ( x , y ) ;
48043: LD_ADDR_VAR 0 15
48047: PUSH
48048: LD_VAR 0 3
48052: PPUSH
48053: LD_VAR 0 4
48057: PPUSH
48058: CALL_OW 546
48062: ST_TO_ADDR
// if hex [ 1 ] then
48063: LD_VAR 0 15
48067: PUSH
48068: LD_INT 1
48070: ARRAY
48071: IFFALSE 48075
// exit ;
48073: GO 48531
// height := hex [ 2 ] ;
48075: LD_ADDR_VAR 0 13
48079: PUSH
48080: LD_VAR 0 15
48084: PUSH
48085: LD_INT 2
48087: ARRAY
48088: ST_TO_ADDR
// for i = 1 to hexes do
48089: LD_ADDR_VAR 0 7
48093: PUSH
48094: DOUBLE
48095: LD_INT 1
48097: DEC
48098: ST_TO_ADDR
48099: LD_VAR 0 12
48103: PUSH
48104: FOR_TO
48105: IFFALSE 48435
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48107: LD_VAR 0 12
48111: PUSH
48112: LD_VAR 0 7
48116: ARRAY
48117: PUSH
48118: LD_INT 1
48120: ARRAY
48121: PPUSH
48122: LD_VAR 0 12
48126: PUSH
48127: LD_VAR 0 7
48131: ARRAY
48132: PUSH
48133: LD_INT 2
48135: ARRAY
48136: PPUSH
48137: CALL_OW 488
48141: NOT
48142: PUSH
48143: LD_VAR 0 12
48147: PUSH
48148: LD_VAR 0 7
48152: ARRAY
48153: PUSH
48154: LD_INT 1
48156: ARRAY
48157: PPUSH
48158: LD_VAR 0 12
48162: PUSH
48163: LD_VAR 0 7
48167: ARRAY
48168: PUSH
48169: LD_INT 2
48171: ARRAY
48172: PPUSH
48173: CALL_OW 428
48177: PUSH
48178: LD_INT 0
48180: GREATER
48181: OR
48182: PUSH
48183: LD_VAR 0 12
48187: PUSH
48188: LD_VAR 0 7
48192: ARRAY
48193: PUSH
48194: LD_INT 1
48196: ARRAY
48197: PPUSH
48198: LD_VAR 0 12
48202: PUSH
48203: LD_VAR 0 7
48207: ARRAY
48208: PUSH
48209: LD_INT 2
48211: ARRAY
48212: PPUSH
48213: CALL_OW 351
48217: OR
48218: IFFALSE 48224
// exit ;
48220: POP
48221: POP
48222: GO 48531
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48224: LD_ADDR_VAR 0 8
48228: PUSH
48229: LD_VAR 0 12
48233: PUSH
48234: LD_VAR 0 7
48238: ARRAY
48239: PUSH
48240: LD_INT 1
48242: ARRAY
48243: PPUSH
48244: LD_VAR 0 12
48248: PUSH
48249: LD_VAR 0 7
48253: ARRAY
48254: PUSH
48255: LD_INT 2
48257: ARRAY
48258: PPUSH
48259: CALL_OW 546
48263: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48264: LD_VAR 0 8
48268: PUSH
48269: LD_INT 1
48271: ARRAY
48272: PUSH
48273: LD_VAR 0 8
48277: PUSH
48278: LD_INT 2
48280: ARRAY
48281: PUSH
48282: LD_VAR 0 13
48286: PUSH
48287: LD_INT 2
48289: PLUS
48290: GREATER
48291: OR
48292: PUSH
48293: LD_VAR 0 8
48297: PUSH
48298: LD_INT 2
48300: ARRAY
48301: PUSH
48302: LD_VAR 0 13
48306: PUSH
48307: LD_INT 2
48309: MINUS
48310: LESS
48311: OR
48312: PUSH
48313: LD_VAR 0 8
48317: PUSH
48318: LD_INT 3
48320: ARRAY
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 8
48327: PUSH
48328: LD_INT 9
48330: PUSH
48331: LD_INT 10
48333: PUSH
48334: LD_INT 11
48336: PUSH
48337: LD_INT 12
48339: PUSH
48340: LD_INT 13
48342: PUSH
48343: LD_INT 16
48345: PUSH
48346: LD_INT 17
48348: PUSH
48349: LD_INT 18
48351: PUSH
48352: LD_INT 19
48354: PUSH
48355: LD_INT 20
48357: PUSH
48358: LD_INT 21
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: IN
48376: NOT
48377: OR
48378: PUSH
48379: LD_VAR 0 8
48383: PUSH
48384: LD_INT 5
48386: ARRAY
48387: NOT
48388: OR
48389: PUSH
48390: LD_VAR 0 8
48394: PUSH
48395: LD_INT 6
48397: ARRAY
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 7
48407: PUSH
48408: LD_INT 9
48410: PUSH
48411: LD_INT 10
48413: PUSH
48414: LD_INT 11
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: IN
48425: NOT
48426: OR
48427: IFFALSE 48433
// exit ;
48429: POP
48430: POP
48431: GO 48531
// end ;
48433: GO 48104
48435: POP
48436: POP
// side := GetSide ( depot ) ;
48437: LD_ADDR_VAR 0 9
48441: PUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 255
48451: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48452: LD_VAR 0 9
48456: PPUSH
48457: LD_VAR 0 3
48461: PPUSH
48462: LD_VAR 0 4
48466: PPUSH
48467: LD_INT 20
48469: PPUSH
48470: CALL 41185 0 4
48474: PUSH
48475: LD_INT 4
48477: ARRAY
48478: IFFALSE 48482
// exit ;
48480: GO 48531
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48482: LD_VAR 0 2
48486: PUSH
48487: LD_INT 29
48489: PUSH
48490: LD_INT 30
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: IN
48497: PUSH
48498: LD_VAR 0 3
48502: PPUSH
48503: LD_VAR 0 4
48507: PPUSH
48508: LD_VAR 0 9
48512: PPUSH
48513: CALL_OW 440
48517: NOT
48518: AND
48519: IFFALSE 48523
// exit ;
48521: GO 48531
// result := true ;
48523: LD_ADDR_VAR 0 6
48527: PUSH
48528: LD_INT 1
48530: ST_TO_ADDR
// end ;
48531: LD_VAR 0 6
48535: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
48549: PPUSH
48550: PPUSH
48551: PPUSH
48552: PPUSH
48553: PPUSH
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
// result = [ ] ;
48596: LD_ADDR_VAR 0 7
48600: PUSH
48601: EMPTY
48602: ST_TO_ADDR
// temp_list = [ ] ;
48603: LD_ADDR_VAR 0 9
48607: PUSH
48608: EMPTY
48609: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48610: LD_VAR 0 4
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 4
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: IN
48641: NOT
48642: PUSH
48643: LD_VAR 0 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: IN
48658: PUSH
48659: LD_VAR 0 5
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: IN
48678: NOT
48679: AND
48680: OR
48681: IFFALSE 48685
// exit ;
48683: GO 67076
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48685: LD_VAR 0 1
48689: PUSH
48690: LD_INT 6
48692: PUSH
48693: LD_INT 7
48695: PUSH
48696: LD_INT 8
48698: PUSH
48699: LD_INT 13
48701: PUSH
48702: LD_INT 12
48704: PUSH
48705: LD_INT 15
48707: PUSH
48708: LD_INT 11
48710: PUSH
48711: LD_INT 14
48713: PUSH
48714: LD_INT 10
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: IN
48728: IFFALSE 48738
// btype = b_lab ;
48730: LD_ADDR_VAR 0 1
48734: PUSH
48735: LD_INT 6
48737: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48738: LD_VAR 0 6
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: IN
48757: NOT
48758: PUSH
48759: LD_VAR 0 1
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 6
48778: PUSH
48779: LD_INT 36
48781: PUSH
48782: LD_INT 4
48784: PUSH
48785: LD_INT 5
48787: PUSH
48788: LD_INT 31
48790: PUSH
48791: LD_INT 32
48793: PUSH
48794: LD_INT 33
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: IN
48810: NOT
48811: PUSH
48812: LD_VAR 0 6
48816: PUSH
48817: LD_INT 1
48819: EQUAL
48820: AND
48821: OR
48822: PUSH
48823: LD_VAR 0 1
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: IN
48838: NOT
48839: PUSH
48840: LD_VAR 0 6
48844: PUSH
48845: LD_INT 2
48847: EQUAL
48848: AND
48849: OR
48850: IFFALSE 48860
// mode = 0 ;
48852: LD_ADDR_VAR 0 6
48856: PUSH
48857: LD_INT 0
48859: ST_TO_ADDR
// case mode of 0 :
48860: LD_VAR 0 6
48864: PUSH
48865: LD_INT 0
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 60326
48873: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48874: LD_ADDR_VAR 0 11
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49067: LD_ADDR_VAR 0 12
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49263: LD_ADDR_VAR 0 13
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49462: LD_ADDR_VAR 0 14
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 3
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49658: LD_ADDR_VAR 0 15
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49851: LD_ADDR_VAR 0 16
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50044: LD_ADDR_VAR 0 17
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50274: LD_ADDR_VAR 0 18
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50504: LD_ADDR_VAR 0 19
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50734: LD_ADDR_VAR 0 20
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50964: LD_ADDR_VAR 0 21
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51194: LD_ADDR_VAR 0 22
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51424: LD_ADDR_VAR 0 23
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51704: LD_ADDR_VAR 0 24
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51980: LD_ADDR_VAR 0 25
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52254: LD_ADDR_VAR 0 26
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52530: LD_ADDR_VAR 0 27
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52810: LD_ADDR_VAR 0 28
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53092: LD_ADDR_VAR 0 29
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53371: LD_ADDR_VAR 0 30
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53649: LD_ADDR_VAR 0 31
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53927: LD_ADDR_VAR 0 32
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54205: LD_ADDR_VAR 0 33
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54484: LD_ADDR_VAR 0 34
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54764: LD_ADDR_VAR 0 35
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54876: LD_ADDR_VAR 0 36
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54988: LD_ADDR_VAR 0 37
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55100: LD_ADDR_VAR 0 38
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55212: LD_ADDR_VAR 0 39
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55324: LD_ADDR_VAR 0 40
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55436: LD_ADDR_VAR 0 41
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: NEG
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55786: LD_ADDR_VAR 0 42
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56136: LD_ADDR_VAR 0 43
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56484: LD_ADDR_VAR 0 44
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56834: LD_ADDR_VAR 0 45
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57184: LD_ADDR_VAR 0 46
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57532: LD_ADDR_VAR 0 47
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57683: LD_ADDR_VAR 0 48
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57830: LD_ADDR_VAR 0 49
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57974: LD_ADDR_VAR 0 50
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58118: LD_ADDR_VAR 0 51
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58265: LD_ADDR_VAR 0 52
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58416: LD_ADDR_VAR 0 53
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58646: LD_ADDR_VAR 0 54
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58876: LD_ADDR_VAR 0 55
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59106: LD_ADDR_VAR 0 56
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59336: LD_ADDR_VAR 0 57
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59566: LD_ADDR_VAR 0 58
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59796: LD_ADDR_VAR 0 59
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59884: LD_ADDR_VAR 0 60
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59972: LD_ADDR_VAR 0 61
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60060: LD_ADDR_VAR 0 62
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60148: LD_ADDR_VAR 0 63
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60236: LD_ADDR_VAR 0 64
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// end ; 1 :
60324: GO 66221
60326: LD_INT 1
60328: DOUBLE
60329: EQUAL
60330: IFTRUE 60334
60332: GO 62957
60334: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60335: LD_ADDR_VAR 0 11
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60379: LD_ADDR_VAR 0 12
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60420: LD_ADDR_VAR 0 13
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60460: LD_ADDR_VAR 0 14
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60501: LD_ADDR_VAR 0 15
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60545: LD_ADDR_VAR 0 16
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60591: LD_ADDR_VAR 0 17
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60635: LD_ADDR_VAR 0 18
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 3
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60676: LD_ADDR_VAR 0 19
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60716: LD_ADDR_VAR 0 20
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60757: LD_ADDR_VAR 0 21
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60801: LD_ADDR_VAR 0 22
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60847: LD_ADDR_VAR 0 23
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 3
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60891: LD_ADDR_VAR 0 24
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 4
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60932: LD_ADDR_VAR 0 25
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 4
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60972: LD_ADDR_VAR 0 26
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61013: LD_ADDR_VAR 0 27
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61057: LD_ADDR_VAR 0 28
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 4
61088: NEG
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61103: LD_ADDR_VAR 0 29
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 4
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 5
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 6
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 6
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 5
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61258: LD_ADDR_VAR 0 30
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 5
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 5
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 6
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 6
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61401: LD_ADDR_VAR 0 31
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: LD_INT 4
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 5
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 5
61478: PUSH
61479: LD_INT 5
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: LD_INT 5
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 6
61498: PUSH
61499: LD_INT 5
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 6
61508: PUSH
61509: LD_INT 6
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 5
61518: PUSH
61519: LD_INT 6
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61540: LD_ADDR_VAR 0 32
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 4
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: LD_INT 4
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 6
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 6
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61683: LD_ADDR_VAR 0 33
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 5
61769: NEG
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 5
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 6
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 6
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61838: LD_ADDR_VAR 0 34
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 3
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 4
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 4
61905: NEG
61906: PUSH
61907: LD_INT 4
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: NEG
61918: PUSH
61919: LD_INT 5
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 5
61929: NEG
61930: PUSH
61931: LD_INT 4
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 5
61941: NEG
61942: PUSH
61943: LD_INT 5
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 5
61953: NEG
61954: PUSH
61955: LD_INT 6
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 6
61965: NEG
61966: PUSH
61967: LD_INT 5
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 6
61977: NEG
61978: PUSH
61979: LD_INT 6
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62001: LD_ADDR_VAR 0 41
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62045: LD_ADDR_VAR 0 42
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62086: LD_ADDR_VAR 0 43
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62126: LD_ADDR_VAR 0 44
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62167: LD_ADDR_VAR 0 45
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62211: LD_ADDR_VAR 0 46
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62257: LD_ADDR_VAR 0 47
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62290: LD_ADDR_VAR 0 48
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62321: LD_ADDR_VAR 0 49
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62350: LD_ADDR_VAR 0 50
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62379: LD_ADDR_VAR 0 51
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62410: LD_ADDR_VAR 0 52
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62443: LD_ADDR_VAR 0 53
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62487: LD_ADDR_VAR 0 54
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62528: LD_ADDR_VAR 0 55
62532: PUSH
62533: LD_INT 3
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 3
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62568: LD_ADDR_VAR 0 56
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62609: LD_ADDR_VAR 0 57
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62653: LD_ADDR_VAR 0 58
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 3
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62699: LD_ADDR_VAR 0 59
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62743: LD_ADDR_VAR 0 60
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62784: LD_ADDR_VAR 0 61
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62824: LD_ADDR_VAR 0 62
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62865: LD_ADDR_VAR 0 63
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62909: LD_ADDR_VAR 0 64
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// end ; 2 :
62955: GO 66221
62957: LD_INT 2
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62965
62963: GO 66220
62965: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62966: LD_ADDR_VAR 0 29
62970: PUSH
62971: LD_INT 4
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 4
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 5
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 5
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 4
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: LD_INT 2
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 5
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 4
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 4
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 4
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 4
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 4
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 4
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: LD_INT 5
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 5
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 4
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 5
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 4
63316: NEG
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 4
63328: NEG
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 4
63351: NEG
63352: PUSH
63353: LD_INT 4
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 4
63363: NEG
63364: PUSH
63365: LD_INT 5
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 3
63375: NEG
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 4
63399: NEG
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 5
63411: NEG
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 5
63423: NEG
63424: PUSH
63425: LD_INT 5
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 3
63435: NEG
63436: PUSH
63437: LD_INT 5
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 5
63447: NEG
63448: PUSH
63449: LD_INT 3
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63504: LD_ADDR_VAR 0 30
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: LD_INT 4
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 4
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 5
63531: PUSH
63532: LD_INT 4
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: LD_INT 5
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: PUSH
63552: LD_INT 5
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 5
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: LD_INT 5
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 4
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 4
63694: NEG
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 5
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 5
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 5
63773: NEG
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 3
63796: NEG
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: NEG
63809: PUSH
63810: LD_INT 4
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: LD_INT 3
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 4
63868: NEG
63869: PUSH
63870: LD_INT 4
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: LD_INT 4
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 4
63892: NEG
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 4
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 5
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 4
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 4
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 5
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 3
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 5
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64051: LD_ADDR_VAR 0 31
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: LD_INT 4
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 4
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: LD_INT 5
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 5
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: NEG
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: NEG
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 4
64207: NEG
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 4
64218: NEG
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 4
64230: NEG
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 4
64253: NEG
64254: PUSH
64255: LD_INT 4
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 4
64265: NEG
64266: PUSH
64267: LD_INT 5
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 3
64289: NEG
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 4
64301: NEG
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 5
64313: NEG
64314: PUSH
64315: LD_INT 4
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 5
64325: NEG
64326: PUSH
64327: LD_INT 5
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: LD_INT 5
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 5
64349: NEG
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 4
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: LD_INT 4
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 4
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 4
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 5
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 4
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 5
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64601: LD_ADDR_VAR 0 32
64605: PUSH
64606: LD_INT 4
64608: NEG
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 4
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 4
64653: NEG
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 5
64664: NEG
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 5
64675: NEG
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 5
64687: NEG
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: NEG
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 4
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 4
64770: NEG
64771: PUSH
64772: LD_INT 3
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 4
64782: NEG
64783: PUSH
64784: LD_INT 4
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 4
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 4
64806: NEG
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 4
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 5
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 4
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 4
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 5
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 3
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 5
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 3
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: LD_INT 2
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 4
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 4
65023: PUSH
65024: LD_INT 3
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 5
65033: PUSH
65034: LD_INT 4
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 5
65043: PUSH
65044: LD_INT 5
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: LD_INT 4
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 5
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 5
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65148: LD_ADDR_VAR 0 33
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: LD_INT 4
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 4
65167: NEG
65168: PUSH
65169: LD_INT 5
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 4
65203: NEG
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 5
65215: NEG
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 5
65227: NEG
65228: PUSH
65229: LD_INT 5
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 5
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 5
65251: NEG
65252: PUSH
65253: LD_INT 3
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 4
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 4
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 4
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 5
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 5
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 4
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 5
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 4
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 4
65488: PUSH
65489: LD_INT 4
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: LD_INT 4
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 4
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 4
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 4
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 4
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: LD_INT 5
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 5
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 2
65630: NEG
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65686: LD_ADDR_VAR 0 34
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 4
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 5
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 4
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 4
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 5
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 3
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: LD_INT 5
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 4
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 4
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 4
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 5
65908: PUSH
65909: LD_INT 4
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 5
65918: PUSH
65919: LD_INT 5
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 4
65928: PUSH
65929: LD_INT 5
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 5
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: LD_INT 5
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 4
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: LD_INT 4
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 4
66071: NEG
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 4
66082: NEG
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 3
66094: NEG
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 4
66116: NEG
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 5
66127: NEG
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 5
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: LD_INT 2
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 3
66162: NEG
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// end ; end ;
66218: GO 66221
66220: POP
// case btype of b_depot , b_warehouse :
66221: LD_VAR 0 1
66225: PUSH
66226: LD_INT 0
66228: DOUBLE
66229: EQUAL
66230: IFTRUE 66240
66232: LD_INT 1
66234: DOUBLE
66235: EQUAL
66236: IFTRUE 66240
66238: GO 66441
66240: POP
// case nation of nation_american :
66241: LD_VAR 0 5
66245: PUSH
66246: LD_INT 1
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66254
66252: GO 66310
66254: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
66255: LD_ADDR_VAR 0 9
66259: PUSH
66260: LD_VAR 0 11
66264: PUSH
66265: LD_VAR 0 12
66269: PUSH
66270: LD_VAR 0 13
66274: PUSH
66275: LD_VAR 0 14
66279: PUSH
66280: LD_VAR 0 15
66284: PUSH
66285: LD_VAR 0 16
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: LD_VAR 0 4
66302: PUSH
66303: LD_INT 1
66305: PLUS
66306: ARRAY
66307: ST_TO_ADDR
66308: GO 66439
66310: LD_INT 2
66312: DOUBLE
66313: EQUAL
66314: IFTRUE 66318
66316: GO 66374
66318: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
66319: LD_ADDR_VAR 0 9
66323: PUSH
66324: LD_VAR 0 17
66328: PUSH
66329: LD_VAR 0 18
66333: PUSH
66334: LD_VAR 0 19
66338: PUSH
66339: LD_VAR 0 20
66343: PUSH
66344: LD_VAR 0 21
66348: PUSH
66349: LD_VAR 0 22
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: PUSH
66362: LD_VAR 0 4
66366: PUSH
66367: LD_INT 1
66369: PLUS
66370: ARRAY
66371: ST_TO_ADDR
66372: GO 66439
66374: LD_INT 3
66376: DOUBLE
66377: EQUAL
66378: IFTRUE 66382
66380: GO 66438
66382: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66383: LD_ADDR_VAR 0 9
66387: PUSH
66388: LD_VAR 0 23
66392: PUSH
66393: LD_VAR 0 24
66397: PUSH
66398: LD_VAR 0 25
66402: PUSH
66403: LD_VAR 0 26
66407: PUSH
66408: LD_VAR 0 27
66412: PUSH
66413: LD_VAR 0 28
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: PUSH
66426: LD_VAR 0 4
66430: PUSH
66431: LD_INT 1
66433: PLUS
66434: ARRAY
66435: ST_TO_ADDR
66436: GO 66439
66438: POP
66439: GO 66994
66441: LD_INT 2
66443: DOUBLE
66444: EQUAL
66445: IFTRUE 66455
66447: LD_INT 3
66449: DOUBLE
66450: EQUAL
66451: IFTRUE 66455
66453: GO 66511
66455: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66456: LD_ADDR_VAR 0 9
66460: PUSH
66461: LD_VAR 0 29
66465: PUSH
66466: LD_VAR 0 30
66470: PUSH
66471: LD_VAR 0 31
66475: PUSH
66476: LD_VAR 0 32
66480: PUSH
66481: LD_VAR 0 33
66485: PUSH
66486: LD_VAR 0 34
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: PUSH
66499: LD_VAR 0 4
66503: PUSH
66504: LD_INT 1
66506: PLUS
66507: ARRAY
66508: ST_TO_ADDR
66509: GO 66994
66511: LD_INT 16
66513: DOUBLE
66514: EQUAL
66515: IFTRUE 66573
66517: LD_INT 17
66519: DOUBLE
66520: EQUAL
66521: IFTRUE 66573
66523: LD_INT 18
66525: DOUBLE
66526: EQUAL
66527: IFTRUE 66573
66529: LD_INT 19
66531: DOUBLE
66532: EQUAL
66533: IFTRUE 66573
66535: LD_INT 22
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66573
66541: LD_INT 20
66543: DOUBLE
66544: EQUAL
66545: IFTRUE 66573
66547: LD_INT 21
66549: DOUBLE
66550: EQUAL
66551: IFTRUE 66573
66553: LD_INT 23
66555: DOUBLE
66556: EQUAL
66557: IFTRUE 66573
66559: LD_INT 24
66561: DOUBLE
66562: EQUAL
66563: IFTRUE 66573
66565: LD_INT 25
66567: DOUBLE
66568: EQUAL
66569: IFTRUE 66573
66571: GO 66629
66573: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66574: LD_ADDR_VAR 0 9
66578: PUSH
66579: LD_VAR 0 35
66583: PUSH
66584: LD_VAR 0 36
66588: PUSH
66589: LD_VAR 0 37
66593: PUSH
66594: LD_VAR 0 38
66598: PUSH
66599: LD_VAR 0 39
66603: PUSH
66604: LD_VAR 0 40
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: PUSH
66617: LD_VAR 0 4
66621: PUSH
66622: LD_INT 1
66624: PLUS
66625: ARRAY
66626: ST_TO_ADDR
66627: GO 66994
66629: LD_INT 6
66631: DOUBLE
66632: EQUAL
66633: IFTRUE 66685
66635: LD_INT 7
66637: DOUBLE
66638: EQUAL
66639: IFTRUE 66685
66641: LD_INT 8
66643: DOUBLE
66644: EQUAL
66645: IFTRUE 66685
66647: LD_INT 13
66649: DOUBLE
66650: EQUAL
66651: IFTRUE 66685
66653: LD_INT 12
66655: DOUBLE
66656: EQUAL
66657: IFTRUE 66685
66659: LD_INT 15
66661: DOUBLE
66662: EQUAL
66663: IFTRUE 66685
66665: LD_INT 11
66667: DOUBLE
66668: EQUAL
66669: IFTRUE 66685
66671: LD_INT 14
66673: DOUBLE
66674: EQUAL
66675: IFTRUE 66685
66677: LD_INT 10
66679: DOUBLE
66680: EQUAL
66681: IFTRUE 66685
66683: GO 66741
66685: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
66686: LD_ADDR_VAR 0 9
66690: PUSH
66691: LD_VAR 0 41
66695: PUSH
66696: LD_VAR 0 42
66700: PUSH
66701: LD_VAR 0 43
66705: PUSH
66706: LD_VAR 0 44
66710: PUSH
66711: LD_VAR 0 45
66715: PUSH
66716: LD_VAR 0 46
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 4
66733: PUSH
66734: LD_INT 1
66736: PLUS
66737: ARRAY
66738: ST_TO_ADDR
66739: GO 66994
66741: LD_INT 36
66743: DOUBLE
66744: EQUAL
66745: IFTRUE 66749
66747: GO 66805
66749: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66750: LD_ADDR_VAR 0 9
66754: PUSH
66755: LD_VAR 0 47
66759: PUSH
66760: LD_VAR 0 48
66764: PUSH
66765: LD_VAR 0 49
66769: PUSH
66770: LD_VAR 0 50
66774: PUSH
66775: LD_VAR 0 51
66779: PUSH
66780: LD_VAR 0 52
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 4
66797: PUSH
66798: LD_INT 1
66800: PLUS
66801: ARRAY
66802: ST_TO_ADDR
66803: GO 66994
66805: LD_INT 4
66807: DOUBLE
66808: EQUAL
66809: IFTRUE 66831
66811: LD_INT 5
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66831
66817: LD_INT 34
66819: DOUBLE
66820: EQUAL
66821: IFTRUE 66831
66823: LD_INT 37
66825: DOUBLE
66826: EQUAL
66827: IFTRUE 66831
66829: GO 66887
66831: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66832: LD_ADDR_VAR 0 9
66836: PUSH
66837: LD_VAR 0 53
66841: PUSH
66842: LD_VAR 0 54
66846: PUSH
66847: LD_VAR 0 55
66851: PUSH
66852: LD_VAR 0 56
66856: PUSH
66857: LD_VAR 0 57
66861: PUSH
66862: LD_VAR 0 58
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: PUSH
66875: LD_VAR 0 4
66879: PUSH
66880: LD_INT 1
66882: PLUS
66883: ARRAY
66884: ST_TO_ADDR
66885: GO 66994
66887: LD_INT 31
66889: DOUBLE
66890: EQUAL
66891: IFTRUE 66937
66893: LD_INT 32
66895: DOUBLE
66896: EQUAL
66897: IFTRUE 66937
66899: LD_INT 33
66901: DOUBLE
66902: EQUAL
66903: IFTRUE 66937
66905: LD_INT 27
66907: DOUBLE
66908: EQUAL
66909: IFTRUE 66937
66911: LD_INT 26
66913: DOUBLE
66914: EQUAL
66915: IFTRUE 66937
66917: LD_INT 28
66919: DOUBLE
66920: EQUAL
66921: IFTRUE 66937
66923: LD_INT 29
66925: DOUBLE
66926: EQUAL
66927: IFTRUE 66937
66929: LD_INT 30
66931: DOUBLE
66932: EQUAL
66933: IFTRUE 66937
66935: GO 66993
66937: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
66938: LD_ADDR_VAR 0 9
66942: PUSH
66943: LD_VAR 0 59
66947: PUSH
66948: LD_VAR 0 60
66952: PUSH
66953: LD_VAR 0 61
66957: PUSH
66958: LD_VAR 0 62
66962: PUSH
66963: LD_VAR 0 63
66967: PUSH
66968: LD_VAR 0 64
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: PUSH
66981: LD_VAR 0 4
66985: PUSH
66986: LD_INT 1
66988: PLUS
66989: ARRAY
66990: ST_TO_ADDR
66991: GO 66994
66993: POP
// temp_list2 = [ ] ;
66994: LD_ADDR_VAR 0 10
66998: PUSH
66999: EMPTY
67000: ST_TO_ADDR
// for i in temp_list do
67001: LD_ADDR_VAR 0 8
67005: PUSH
67006: LD_VAR 0 9
67010: PUSH
67011: FOR_IN
67012: IFFALSE 67064
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67014: LD_ADDR_VAR 0 10
67018: PUSH
67019: LD_VAR 0 10
67023: PUSH
67024: LD_VAR 0 8
67028: PUSH
67029: LD_INT 1
67031: ARRAY
67032: PUSH
67033: LD_VAR 0 2
67037: PLUS
67038: PUSH
67039: LD_VAR 0 8
67043: PUSH
67044: LD_INT 2
67046: ARRAY
67047: PUSH
67048: LD_VAR 0 3
67052: PLUS
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: ADD
67061: ST_TO_ADDR
67062: GO 67011
67064: POP
67065: POP
// result = temp_list2 ;
67066: LD_ADDR_VAR 0 7
67070: PUSH
67071: LD_VAR 0 10
67075: ST_TO_ADDR
// end ;
67076: LD_VAR 0 7
67080: RET
// export function EnemyInRange ( unit , dist ) ; begin
67081: LD_INT 0
67083: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67084: LD_ADDR_VAR 0 3
67088: PUSH
67089: LD_VAR 0 1
67093: PPUSH
67094: CALL_OW 255
67098: PPUSH
67099: LD_VAR 0 1
67103: PPUSH
67104: CALL_OW 250
67108: PPUSH
67109: LD_VAR 0 1
67113: PPUSH
67114: CALL_OW 251
67118: PPUSH
67119: LD_VAR 0 2
67123: PPUSH
67124: CALL 41185 0 4
67128: PUSH
67129: LD_INT 4
67131: ARRAY
67132: ST_TO_ADDR
// end ;
67133: LD_VAR 0 3
67137: RET
// export function PlayerSeeMe ( unit ) ; begin
67138: LD_INT 0
67140: PPUSH
// result := See ( your_side , unit ) ;
67141: LD_ADDR_VAR 0 2
67145: PUSH
67146: LD_OWVAR 2
67150: PPUSH
67151: LD_VAR 0 1
67155: PPUSH
67156: CALL_OW 292
67160: ST_TO_ADDR
// end ;
67161: LD_VAR 0 2
67165: RET
// export function ReverseDir ( unit ) ; begin
67166: LD_INT 0
67168: PPUSH
// if not unit then
67169: LD_VAR 0 1
67173: NOT
67174: IFFALSE 67178
// exit ;
67176: GO 67201
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67178: LD_ADDR_VAR 0 2
67182: PUSH
67183: LD_VAR 0 1
67187: PPUSH
67188: CALL_OW 254
67192: PUSH
67193: LD_INT 3
67195: PLUS
67196: PUSH
67197: LD_INT 6
67199: MOD
67200: ST_TO_ADDR
// end ;
67201: LD_VAR 0 2
67205: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67206: LD_INT 0
67208: PPUSH
67209: PPUSH
67210: PPUSH
67211: PPUSH
67212: PPUSH
// if not hexes then
67213: LD_VAR 0 2
67217: NOT
67218: IFFALSE 67222
// exit ;
67220: GO 67370
// dist := 9999 ;
67222: LD_ADDR_VAR 0 5
67226: PUSH
67227: LD_INT 9999
67229: ST_TO_ADDR
// for i = 1 to hexes do
67230: LD_ADDR_VAR 0 4
67234: PUSH
67235: DOUBLE
67236: LD_INT 1
67238: DEC
67239: ST_TO_ADDR
67240: LD_VAR 0 2
67244: PUSH
67245: FOR_TO
67246: IFFALSE 67358
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67248: LD_VAR 0 1
67252: PPUSH
67253: LD_VAR 0 2
67257: PUSH
67258: LD_VAR 0 4
67262: ARRAY
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: PPUSH
67268: LD_VAR 0 2
67272: PUSH
67273: LD_VAR 0 4
67277: ARRAY
67278: PUSH
67279: LD_INT 2
67281: ARRAY
67282: PPUSH
67283: CALL_OW 297
67287: PUSH
67288: LD_VAR 0 5
67292: LESS
67293: IFFALSE 67356
// begin hex := hexes [ i ] ;
67295: LD_ADDR_VAR 0 7
67299: PUSH
67300: LD_VAR 0 2
67304: PUSH
67305: LD_VAR 0 4
67309: ARRAY
67310: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67311: LD_ADDR_VAR 0 5
67315: PUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_VAR 0 4
67330: ARRAY
67331: PUSH
67332: LD_INT 1
67334: ARRAY
67335: PPUSH
67336: LD_VAR 0 2
67340: PUSH
67341: LD_VAR 0 4
67345: ARRAY
67346: PUSH
67347: LD_INT 2
67349: ARRAY
67350: PPUSH
67351: CALL_OW 297
67355: ST_TO_ADDR
// end ; end ;
67356: GO 67245
67358: POP
67359: POP
// result := hex ;
67360: LD_ADDR_VAR 0 3
67364: PUSH
67365: LD_VAR 0 7
67369: ST_TO_ADDR
// end ;
67370: LD_VAR 0 3
67374: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67379: LD_VAR 0 1
67383: NOT
67384: PUSH
67385: LD_VAR 0 1
67389: PUSH
67390: LD_INT 21
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 23
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PPUSH
67414: CALL_OW 69
67418: IN
67419: NOT
67420: OR
67421: IFFALSE 67425
// exit ;
67423: GO 67472
// for i = 1 to 3 do
67425: LD_ADDR_VAR 0 3
67429: PUSH
67430: DOUBLE
67431: LD_INT 1
67433: DEC
67434: ST_TO_ADDR
67435: LD_INT 3
67437: PUSH
67438: FOR_TO
67439: IFFALSE 67470
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67441: LD_VAR 0 1
67445: PPUSH
67446: CALL_OW 250
67450: PPUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 251
67460: PPUSH
67461: LD_INT 1
67463: PPUSH
67464: CALL_OW 453
67468: GO 67438
67470: POP
67471: POP
// end ;
67472: LD_VAR 0 2
67476: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67477: LD_INT 0
67479: PPUSH
67480: PPUSH
67481: PPUSH
67482: PPUSH
67483: PPUSH
67484: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67485: LD_VAR 0 1
67489: NOT
67490: PUSH
67491: LD_VAR 0 2
67495: NOT
67496: OR
67497: PUSH
67498: LD_VAR 0 1
67502: PPUSH
67503: CALL_OW 314
67507: OR
67508: IFFALSE 67512
// exit ;
67510: GO 67953
// x := GetX ( enemy_unit ) ;
67512: LD_ADDR_VAR 0 7
67516: PUSH
67517: LD_VAR 0 2
67521: PPUSH
67522: CALL_OW 250
67526: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67527: LD_ADDR_VAR 0 8
67531: PUSH
67532: LD_VAR 0 2
67536: PPUSH
67537: CALL_OW 251
67541: ST_TO_ADDR
// if not x or not y then
67542: LD_VAR 0 7
67546: NOT
67547: PUSH
67548: LD_VAR 0 8
67552: NOT
67553: OR
67554: IFFALSE 67558
// exit ;
67556: GO 67953
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67558: LD_ADDR_VAR 0 6
67562: PUSH
67563: LD_VAR 0 7
67567: PPUSH
67568: LD_INT 0
67570: PPUSH
67571: LD_INT 4
67573: PPUSH
67574: CALL_OW 272
67578: PUSH
67579: LD_VAR 0 8
67583: PPUSH
67584: LD_INT 0
67586: PPUSH
67587: LD_INT 4
67589: PPUSH
67590: CALL_OW 273
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_VAR 0 7
67603: PPUSH
67604: LD_INT 1
67606: PPUSH
67607: LD_INT 4
67609: PPUSH
67610: CALL_OW 272
67614: PUSH
67615: LD_VAR 0 8
67619: PPUSH
67620: LD_INT 1
67622: PPUSH
67623: LD_INT 4
67625: PPUSH
67626: CALL_OW 273
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_VAR 0 7
67639: PPUSH
67640: LD_INT 2
67642: PPUSH
67643: LD_INT 4
67645: PPUSH
67646: CALL_OW 272
67650: PUSH
67651: LD_VAR 0 8
67655: PPUSH
67656: LD_INT 2
67658: PPUSH
67659: LD_INT 4
67661: PPUSH
67662: CALL_OW 273
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_VAR 0 7
67675: PPUSH
67676: LD_INT 3
67678: PPUSH
67679: LD_INT 4
67681: PPUSH
67682: CALL_OW 272
67686: PUSH
67687: LD_VAR 0 8
67691: PPUSH
67692: LD_INT 3
67694: PPUSH
67695: LD_INT 4
67697: PPUSH
67698: CALL_OW 273
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_VAR 0 7
67711: PPUSH
67712: LD_INT 4
67714: PPUSH
67715: LD_INT 4
67717: PPUSH
67718: CALL_OW 272
67722: PUSH
67723: LD_VAR 0 8
67727: PPUSH
67728: LD_INT 4
67730: PPUSH
67731: LD_INT 4
67733: PPUSH
67734: CALL_OW 273
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_VAR 0 7
67747: PPUSH
67748: LD_INT 5
67750: PPUSH
67751: LD_INT 4
67753: PPUSH
67754: CALL_OW 272
67758: PUSH
67759: LD_VAR 0 8
67763: PPUSH
67764: LD_INT 5
67766: PPUSH
67767: LD_INT 4
67769: PPUSH
67770: CALL_OW 273
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: ST_TO_ADDR
// for i = tmp downto 1 do
67787: LD_ADDR_VAR 0 4
67791: PUSH
67792: DOUBLE
67793: LD_VAR 0 6
67797: INC
67798: ST_TO_ADDR
67799: LD_INT 1
67801: PUSH
67802: FOR_DOWNTO
67803: IFFALSE 67904
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67805: LD_VAR 0 6
67809: PUSH
67810: LD_VAR 0 4
67814: ARRAY
67815: PUSH
67816: LD_INT 1
67818: ARRAY
67819: PPUSH
67820: LD_VAR 0 6
67824: PUSH
67825: LD_VAR 0 4
67829: ARRAY
67830: PUSH
67831: LD_INT 2
67833: ARRAY
67834: PPUSH
67835: CALL_OW 488
67839: NOT
67840: PUSH
67841: LD_VAR 0 6
67845: PUSH
67846: LD_VAR 0 4
67850: ARRAY
67851: PUSH
67852: LD_INT 1
67854: ARRAY
67855: PPUSH
67856: LD_VAR 0 6
67860: PUSH
67861: LD_VAR 0 4
67865: ARRAY
67866: PUSH
67867: LD_INT 2
67869: ARRAY
67870: PPUSH
67871: CALL_OW 428
67875: PUSH
67876: LD_INT 0
67878: NONEQUAL
67879: OR
67880: IFFALSE 67902
// tmp := Delete ( tmp , i ) ;
67882: LD_ADDR_VAR 0 6
67886: PUSH
67887: LD_VAR 0 6
67891: PPUSH
67892: LD_VAR 0 4
67896: PPUSH
67897: CALL_OW 3
67901: ST_TO_ADDR
67902: GO 67802
67904: POP
67905: POP
// j := GetClosestHex ( unit , tmp ) ;
67906: LD_ADDR_VAR 0 5
67910: PUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: LD_VAR 0 6
67920: PPUSH
67921: CALL 67206 0 2
67925: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67926: LD_VAR 0 1
67930: PPUSH
67931: LD_VAR 0 5
67935: PUSH
67936: LD_INT 1
67938: ARRAY
67939: PPUSH
67940: LD_VAR 0 5
67944: PUSH
67945: LD_INT 2
67947: ARRAY
67948: PPUSH
67949: CALL_OW 111
// end ;
67953: LD_VAR 0 3
67957: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67958: LD_INT 0
67960: PPUSH
67961: PPUSH
67962: PPUSH
// uc_side = 0 ;
67963: LD_ADDR_OWVAR 20
67967: PUSH
67968: LD_INT 0
67970: ST_TO_ADDR
// uc_nation = 0 ;
67971: LD_ADDR_OWVAR 21
67975: PUSH
67976: LD_INT 0
67978: ST_TO_ADDR
// InitHc ;
67979: CALL_OW 19
// InitVc ;
67983: CALL_OW 20
// if mastodonts then
67987: LD_VAR 0 6
67991: IFFALSE 68058
// for i = 1 to mastodonts do
67993: LD_ADDR_VAR 0 11
67997: PUSH
67998: DOUBLE
67999: LD_INT 1
68001: DEC
68002: ST_TO_ADDR
68003: LD_VAR 0 6
68007: PUSH
68008: FOR_TO
68009: IFFALSE 68056
// begin vc_chassis := 31 ;
68011: LD_ADDR_OWVAR 37
68015: PUSH
68016: LD_INT 31
68018: ST_TO_ADDR
// vc_control := control_rider ;
68019: LD_ADDR_OWVAR 38
68023: PUSH
68024: LD_INT 4
68026: ST_TO_ADDR
// animal := CreateVehicle ;
68027: LD_ADDR_VAR 0 12
68031: PUSH
68032: CALL_OW 45
68036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68037: LD_VAR 0 12
68041: PPUSH
68042: LD_VAR 0 8
68046: PPUSH
68047: LD_INT 0
68049: PPUSH
68050: CALL 70127 0 3
// end ;
68054: GO 68008
68056: POP
68057: POP
// if horses then
68058: LD_VAR 0 5
68062: IFFALSE 68129
// for i = 1 to horses do
68064: LD_ADDR_VAR 0 11
68068: PUSH
68069: DOUBLE
68070: LD_INT 1
68072: DEC
68073: ST_TO_ADDR
68074: LD_VAR 0 5
68078: PUSH
68079: FOR_TO
68080: IFFALSE 68127
// begin hc_class := 21 ;
68082: LD_ADDR_OWVAR 28
68086: PUSH
68087: LD_INT 21
68089: ST_TO_ADDR
// hc_gallery :=  ;
68090: LD_ADDR_OWVAR 33
68094: PUSH
68095: LD_STRING 
68097: ST_TO_ADDR
// animal := CreateHuman ;
68098: LD_ADDR_VAR 0 12
68102: PUSH
68103: CALL_OW 44
68107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68108: LD_VAR 0 12
68112: PPUSH
68113: LD_VAR 0 8
68117: PPUSH
68118: LD_INT 0
68120: PPUSH
68121: CALL 70127 0 3
// end ;
68125: GO 68079
68127: POP
68128: POP
// if birds then
68129: LD_VAR 0 1
68133: IFFALSE 68200
// for i = 1 to birds do
68135: LD_ADDR_VAR 0 11
68139: PUSH
68140: DOUBLE
68141: LD_INT 1
68143: DEC
68144: ST_TO_ADDR
68145: LD_VAR 0 1
68149: PUSH
68150: FOR_TO
68151: IFFALSE 68198
// begin hc_class = 18 ;
68153: LD_ADDR_OWVAR 28
68157: PUSH
68158: LD_INT 18
68160: ST_TO_ADDR
// hc_gallery =  ;
68161: LD_ADDR_OWVAR 33
68165: PUSH
68166: LD_STRING 
68168: ST_TO_ADDR
// animal := CreateHuman ;
68169: LD_ADDR_VAR 0 12
68173: PUSH
68174: CALL_OW 44
68178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68179: LD_VAR 0 12
68183: PPUSH
68184: LD_VAR 0 8
68188: PPUSH
68189: LD_INT 0
68191: PPUSH
68192: CALL 70127 0 3
// end ;
68196: GO 68150
68198: POP
68199: POP
// if tigers then
68200: LD_VAR 0 2
68204: IFFALSE 68288
// for i = 1 to tigers do
68206: LD_ADDR_VAR 0 11
68210: PUSH
68211: DOUBLE
68212: LD_INT 1
68214: DEC
68215: ST_TO_ADDR
68216: LD_VAR 0 2
68220: PUSH
68221: FOR_TO
68222: IFFALSE 68286
// begin hc_class = class_tiger ;
68224: LD_ADDR_OWVAR 28
68228: PUSH
68229: LD_INT 14
68231: ST_TO_ADDR
// hc_gallery =  ;
68232: LD_ADDR_OWVAR 33
68236: PUSH
68237: LD_STRING 
68239: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68240: LD_ADDR_OWVAR 35
68244: PUSH
68245: LD_INT 7
68247: NEG
68248: PPUSH
68249: LD_INT 7
68251: PPUSH
68252: CALL_OW 12
68256: ST_TO_ADDR
// animal := CreateHuman ;
68257: LD_ADDR_VAR 0 12
68261: PUSH
68262: CALL_OW 44
68266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68267: LD_VAR 0 12
68271: PPUSH
68272: LD_VAR 0 8
68276: PPUSH
68277: LD_INT 0
68279: PPUSH
68280: CALL 70127 0 3
// end ;
68284: GO 68221
68286: POP
68287: POP
// if apemans then
68288: LD_VAR 0 3
68292: IFFALSE 68415
// for i = 1 to apemans do
68294: LD_ADDR_VAR 0 11
68298: PUSH
68299: DOUBLE
68300: LD_INT 1
68302: DEC
68303: ST_TO_ADDR
68304: LD_VAR 0 3
68308: PUSH
68309: FOR_TO
68310: IFFALSE 68413
// begin hc_class = class_apeman ;
68312: LD_ADDR_OWVAR 28
68316: PUSH
68317: LD_INT 12
68319: ST_TO_ADDR
// hc_gallery =  ;
68320: LD_ADDR_OWVAR 33
68324: PUSH
68325: LD_STRING 
68327: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68328: LD_ADDR_OWVAR 35
68332: PUSH
68333: LD_INT 5
68335: NEG
68336: PPUSH
68337: LD_INT 5
68339: PPUSH
68340: CALL_OW 12
68344: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68345: LD_ADDR_OWVAR 31
68349: PUSH
68350: LD_INT 1
68352: PPUSH
68353: LD_INT 3
68355: PPUSH
68356: CALL_OW 12
68360: PUSH
68361: LD_INT 1
68363: PPUSH
68364: LD_INT 3
68366: PPUSH
68367: CALL_OW 12
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// animal := CreateHuman ;
68384: LD_ADDR_VAR 0 12
68388: PUSH
68389: CALL_OW 44
68393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68394: LD_VAR 0 12
68398: PPUSH
68399: LD_VAR 0 8
68403: PPUSH
68404: LD_INT 0
68406: PPUSH
68407: CALL 70127 0 3
// end ;
68411: GO 68309
68413: POP
68414: POP
// if enchidnas then
68415: LD_VAR 0 4
68419: IFFALSE 68486
// for i = 1 to enchidnas do
68421: LD_ADDR_VAR 0 11
68425: PUSH
68426: DOUBLE
68427: LD_INT 1
68429: DEC
68430: ST_TO_ADDR
68431: LD_VAR 0 4
68435: PUSH
68436: FOR_TO
68437: IFFALSE 68484
// begin hc_class = 13 ;
68439: LD_ADDR_OWVAR 28
68443: PUSH
68444: LD_INT 13
68446: ST_TO_ADDR
// hc_gallery =  ;
68447: LD_ADDR_OWVAR 33
68451: PUSH
68452: LD_STRING 
68454: ST_TO_ADDR
// animal := CreateHuman ;
68455: LD_ADDR_VAR 0 12
68459: PUSH
68460: CALL_OW 44
68464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68465: LD_VAR 0 12
68469: PPUSH
68470: LD_VAR 0 8
68474: PPUSH
68475: LD_INT 0
68477: PPUSH
68478: CALL 70127 0 3
// end ;
68482: GO 68436
68484: POP
68485: POP
// if fishes then
68486: LD_VAR 0 7
68490: IFFALSE 68557
// for i = 1 to fishes do
68492: LD_ADDR_VAR 0 11
68496: PUSH
68497: DOUBLE
68498: LD_INT 1
68500: DEC
68501: ST_TO_ADDR
68502: LD_VAR 0 7
68506: PUSH
68507: FOR_TO
68508: IFFALSE 68555
// begin hc_class = 20 ;
68510: LD_ADDR_OWVAR 28
68514: PUSH
68515: LD_INT 20
68517: ST_TO_ADDR
// hc_gallery =  ;
68518: LD_ADDR_OWVAR 33
68522: PUSH
68523: LD_STRING 
68525: ST_TO_ADDR
// animal := CreateHuman ;
68526: LD_ADDR_VAR 0 12
68530: PUSH
68531: CALL_OW 44
68535: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68536: LD_VAR 0 12
68540: PPUSH
68541: LD_VAR 0 9
68545: PPUSH
68546: LD_INT 0
68548: PPUSH
68549: CALL 70127 0 3
// end ;
68553: GO 68507
68555: POP
68556: POP
// end ;
68557: LD_VAR 0 10
68561: RET
// export function WantHeal ( sci , unit ) ; begin
68562: LD_INT 0
68564: PPUSH
// if GetTaskList ( sci ) > 0 then
68565: LD_VAR 0 1
68569: PPUSH
68570: CALL_OW 437
68574: PUSH
68575: LD_INT 0
68577: GREATER
68578: IFFALSE 68648
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68580: LD_VAR 0 1
68584: PPUSH
68585: CALL_OW 437
68589: PUSH
68590: LD_INT 1
68592: ARRAY
68593: PUSH
68594: LD_INT 1
68596: ARRAY
68597: PUSH
68598: LD_STRING l
68600: EQUAL
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 437
68611: PUSH
68612: LD_INT 1
68614: ARRAY
68615: PUSH
68616: LD_INT 4
68618: ARRAY
68619: PUSH
68620: LD_VAR 0 2
68624: EQUAL
68625: AND
68626: IFFALSE 68638
// result := true else
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: LD_INT 1
68635: ST_TO_ADDR
68636: GO 68646
// result := false ;
68638: LD_ADDR_VAR 0 3
68642: PUSH
68643: LD_INT 0
68645: ST_TO_ADDR
// end else
68646: GO 68656
// result := false ;
68648: LD_ADDR_VAR 0 3
68652: PUSH
68653: LD_INT 0
68655: ST_TO_ADDR
// end ;
68656: LD_VAR 0 3
68660: RET
// export function HealTarget ( sci ) ; begin
68661: LD_INT 0
68663: PPUSH
// if not sci then
68664: LD_VAR 0 1
68668: NOT
68669: IFFALSE 68673
// exit ;
68671: GO 68738
// result := 0 ;
68673: LD_ADDR_VAR 0 2
68677: PUSH
68678: LD_INT 0
68680: ST_TO_ADDR
// if GetTaskList ( sci ) then
68681: LD_VAR 0 1
68685: PPUSH
68686: CALL_OW 437
68690: IFFALSE 68738
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68692: LD_VAR 0 1
68696: PPUSH
68697: CALL_OW 437
68701: PUSH
68702: LD_INT 1
68704: ARRAY
68705: PUSH
68706: LD_INT 1
68708: ARRAY
68709: PUSH
68710: LD_STRING l
68712: EQUAL
68713: IFFALSE 68738
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68715: LD_ADDR_VAR 0 2
68719: PUSH
68720: LD_VAR 0 1
68724: PPUSH
68725: CALL_OW 437
68729: PUSH
68730: LD_INT 1
68732: ARRAY
68733: PUSH
68734: LD_INT 4
68736: ARRAY
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
68748: PPUSH
// if not base_units then
68749: LD_VAR 0 1
68753: NOT
68754: IFFALSE 68758
// exit ;
68756: GO 68845
// result := false ;
68758: LD_ADDR_VAR 0 2
68762: PUSH
68763: LD_INT 0
68765: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68766: LD_ADDR_VAR 0 5
68770: PUSH
68771: LD_VAR 0 1
68775: PPUSH
68776: LD_INT 21
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PPUSH
68786: CALL_OW 72
68790: ST_TO_ADDR
// if not tmp then
68791: LD_VAR 0 5
68795: NOT
68796: IFFALSE 68800
// exit ;
68798: GO 68845
// for i in tmp do
68800: LD_ADDR_VAR 0 3
68804: PUSH
68805: LD_VAR 0 5
68809: PUSH
68810: FOR_IN
68811: IFFALSE 68843
// begin result := EnemyInRange ( i , 22 ) ;
68813: LD_ADDR_VAR 0 2
68817: PUSH
68818: LD_VAR 0 3
68822: PPUSH
68823: LD_INT 22
68825: PPUSH
68826: CALL 67081 0 2
68830: ST_TO_ADDR
// if result then
68831: LD_VAR 0 2
68835: IFFALSE 68841
// exit ;
68837: POP
68838: POP
68839: GO 68845
// end ;
68841: GO 68810
68843: POP
68844: POP
// end ;
68845: LD_VAR 0 2
68849: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68850: LD_INT 0
68852: PPUSH
68853: PPUSH
// if not units then
68854: LD_VAR 0 1
68858: NOT
68859: IFFALSE 68863
// exit ;
68861: GO 68933
// result := [ ] ;
68863: LD_ADDR_VAR 0 3
68867: PUSH
68868: EMPTY
68869: ST_TO_ADDR
// for i in units do
68870: LD_ADDR_VAR 0 4
68874: PUSH
68875: LD_VAR 0 1
68879: PUSH
68880: FOR_IN
68881: IFFALSE 68931
// if GetTag ( i ) = tag then
68883: LD_VAR 0 4
68887: PPUSH
68888: CALL_OW 110
68892: PUSH
68893: LD_VAR 0 2
68897: EQUAL
68898: IFFALSE 68929
// result := Insert ( result , result + 1 , i ) ;
68900: LD_ADDR_VAR 0 3
68904: PUSH
68905: LD_VAR 0 3
68909: PPUSH
68910: LD_VAR 0 3
68914: PUSH
68915: LD_INT 1
68917: PLUS
68918: PPUSH
68919: LD_VAR 0 4
68923: PPUSH
68924: CALL_OW 2
68928: ST_TO_ADDR
68929: GO 68880
68931: POP
68932: POP
// end ;
68933: LD_VAR 0 3
68937: RET
// export function IsDriver ( un ) ; begin
68938: LD_INT 0
68940: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68941: LD_ADDR_VAR 0 2
68945: PUSH
68946: LD_VAR 0 1
68950: PUSH
68951: LD_INT 55
68953: PUSH
68954: EMPTY
68955: LIST
68956: PPUSH
68957: CALL_OW 69
68961: IN
68962: ST_TO_ADDR
// end ;
68963: LD_VAR 0 2
68967: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68968: LD_INT 0
68970: PPUSH
68971: PPUSH
// list := [ ] ;
68972: LD_ADDR_VAR 0 5
68976: PUSH
68977: EMPTY
68978: ST_TO_ADDR
// case d of 0 :
68979: LD_VAR 0 3
68983: PUSH
68984: LD_INT 0
68986: DOUBLE
68987: EQUAL
68988: IFTRUE 68992
68990: GO 69125
68992: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68993: LD_ADDR_VAR 0 5
68997: PUSH
68998: LD_VAR 0 1
69002: PUSH
69003: LD_INT 4
69005: MINUS
69006: PUSH
69007: LD_VAR 0 2
69011: PUSH
69012: LD_INT 4
69014: MINUS
69015: PUSH
69016: LD_INT 2
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: PUSH
69024: LD_VAR 0 1
69028: PUSH
69029: LD_INT 3
69031: MINUS
69032: PUSH
69033: LD_VAR 0 2
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: PUSH
69046: LD_VAR 0 1
69050: PUSH
69051: LD_INT 4
69053: PLUS
69054: PUSH
69055: LD_VAR 0 2
69059: PUSH
69060: LD_INT 4
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: PUSH
69068: LD_VAR 0 1
69072: PUSH
69073: LD_INT 3
69075: PLUS
69076: PUSH
69077: LD_VAR 0 2
69081: PUSH
69082: LD_INT 3
69084: PLUS
69085: PUSH
69086: LD_INT 5
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: LIST
69093: PUSH
69094: LD_VAR 0 1
69098: PUSH
69099: LD_VAR 0 2
69103: PUSH
69104: LD_INT 4
69106: PLUS
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// end ; 1 :
69123: GO 69823
69125: LD_INT 1
69127: DOUBLE
69128: EQUAL
69129: IFTRUE 69133
69131: GO 69266
69133: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69134: LD_ADDR_VAR 0 5
69138: PUSH
69139: LD_VAR 0 1
69143: PUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_INT 4
69151: MINUS
69152: PUSH
69153: LD_INT 3
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: LIST
69160: PUSH
69161: LD_VAR 0 1
69165: PUSH
69166: LD_INT 3
69168: MINUS
69169: PUSH
69170: LD_VAR 0 2
69174: PUSH
69175: LD_INT 3
69177: MINUS
69178: PUSH
69179: LD_INT 2
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: LIST
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: LD_INT 4
69194: MINUS
69195: PUSH
69196: LD_VAR 0 2
69200: PUSH
69201: LD_INT 1
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: LIST
69208: PUSH
69209: LD_VAR 0 1
69213: PUSH
69214: LD_VAR 0 2
69218: PUSH
69219: LD_INT 3
69221: PLUS
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: LIST
69230: PUSH
69231: LD_VAR 0 1
69235: PUSH
69236: LD_INT 4
69238: PLUS
69239: PUSH
69240: LD_VAR 0 2
69244: PUSH
69245: LD_INT 4
69247: PLUS
69248: PUSH
69249: LD_INT 5
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: LIST
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// end ; 2 :
69264: GO 69823
69266: LD_INT 2
69268: DOUBLE
69269: EQUAL
69270: IFTRUE 69274
69272: GO 69403
69274: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69275: LD_ADDR_VAR 0 5
69279: PUSH
69280: LD_VAR 0 1
69284: PUSH
69285: LD_VAR 0 2
69289: PUSH
69290: LD_INT 3
69292: MINUS
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: PUSH
69302: LD_VAR 0 1
69306: PUSH
69307: LD_INT 4
69309: PLUS
69310: PUSH
69311: LD_VAR 0 2
69315: PUSH
69316: LD_INT 4
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: PUSH
69324: LD_VAR 0 1
69328: PUSH
69329: LD_VAR 0 2
69333: PUSH
69334: LD_INT 4
69336: PLUS
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: PUSH
69346: LD_VAR 0 1
69350: PUSH
69351: LD_INT 3
69353: MINUS
69354: PUSH
69355: LD_VAR 0 2
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: LIST
69367: PUSH
69368: LD_VAR 0 1
69372: PUSH
69373: LD_INT 4
69375: MINUS
69376: PUSH
69377: LD_VAR 0 2
69381: PUSH
69382: LD_INT 4
69384: MINUS
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: ST_TO_ADDR
// end ; 3 :
69401: GO 69823
69403: LD_INT 3
69405: DOUBLE
69406: EQUAL
69407: IFTRUE 69411
69409: GO 69544
69411: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69412: LD_ADDR_VAR 0 5
69416: PUSH
69417: LD_VAR 0 1
69421: PUSH
69422: LD_INT 3
69424: PLUS
69425: PUSH
69426: LD_VAR 0 2
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: PUSH
69439: LD_VAR 0 1
69443: PUSH
69444: LD_INT 4
69446: PLUS
69447: PUSH
69448: LD_VAR 0 2
69452: PUSH
69453: LD_INT 4
69455: PLUS
69456: PUSH
69457: LD_INT 5
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: PUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_INT 4
69472: MINUS
69473: PUSH
69474: LD_VAR 0 2
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: PUSH
69487: LD_VAR 0 1
69491: PUSH
69492: LD_VAR 0 2
69496: PUSH
69497: LD_INT 4
69499: MINUS
69500: PUSH
69501: LD_INT 3
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: LIST
69508: PUSH
69509: LD_VAR 0 1
69513: PUSH
69514: LD_INT 3
69516: MINUS
69517: PUSH
69518: LD_VAR 0 2
69522: PUSH
69523: LD_INT 3
69525: MINUS
69526: PUSH
69527: LD_INT 2
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: LIST
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: ST_TO_ADDR
// end ; 4 :
69542: GO 69823
69544: LD_INT 4
69546: DOUBLE
69547: EQUAL
69548: IFTRUE 69552
69550: GO 69685
69552: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69553: LD_ADDR_VAR 0 5
69557: PUSH
69558: LD_VAR 0 1
69562: PUSH
69563: LD_VAR 0 2
69567: PUSH
69568: LD_INT 4
69570: PLUS
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: LD_VAR 0 1
69584: PUSH
69585: LD_INT 3
69587: PLUS
69588: PUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_INT 3
69596: PLUS
69597: PUSH
69598: LD_INT 5
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: PUSH
69606: LD_VAR 0 1
69610: PUSH
69611: LD_INT 4
69613: PLUS
69614: PUSH
69615: LD_VAR 0 2
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: LD_VAR 0 1
69632: PUSH
69633: LD_VAR 0 2
69637: PUSH
69638: LD_INT 3
69640: MINUS
69641: PUSH
69642: LD_INT 3
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: LIST
69649: PUSH
69650: LD_VAR 0 1
69654: PUSH
69655: LD_INT 4
69657: MINUS
69658: PUSH
69659: LD_VAR 0 2
69663: PUSH
69664: LD_INT 4
69666: MINUS
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: ST_TO_ADDR
// end ; 5 :
69683: GO 69823
69685: LD_INT 5
69687: DOUBLE
69688: EQUAL
69689: IFTRUE 69693
69691: GO 69822
69693: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69694: LD_ADDR_VAR 0 5
69698: PUSH
69699: LD_VAR 0 1
69703: PUSH
69704: LD_INT 4
69706: MINUS
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: LIST
69720: PUSH
69721: LD_VAR 0 1
69725: PUSH
69726: LD_VAR 0 2
69730: PUSH
69731: LD_INT 4
69733: MINUS
69734: PUSH
69735: LD_INT 3
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: PUSH
69743: LD_VAR 0 1
69747: PUSH
69748: LD_INT 4
69750: PLUS
69751: PUSH
69752: LD_VAR 0 2
69756: PUSH
69757: LD_INT 4
69759: PLUS
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: PUSH
69769: LD_VAR 0 1
69773: PUSH
69774: LD_INT 3
69776: PLUS
69777: PUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: LD_VAR 0 2
69800: PUSH
69801: LD_INT 3
69803: PLUS
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: LIST
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: ST_TO_ADDR
// end ; end ;
69820: GO 69823
69822: POP
// result := list ;
69823: LD_ADDR_VAR 0 4
69827: PUSH
69828: LD_VAR 0 5
69832: ST_TO_ADDR
// end ;
69833: LD_VAR 0 4
69837: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69838: LD_INT 0
69840: PPUSH
69841: PPUSH
69842: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69843: LD_VAR 0 1
69847: NOT
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: LD_INT 2
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: IN
69872: NOT
69873: OR
69874: IFFALSE 69878
// exit ;
69876: GO 69970
// tmp := [ ] ;
69878: LD_ADDR_VAR 0 5
69882: PUSH
69883: EMPTY
69884: ST_TO_ADDR
// for i in units do
69885: LD_ADDR_VAR 0 4
69889: PUSH
69890: LD_VAR 0 1
69894: PUSH
69895: FOR_IN
69896: IFFALSE 69939
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69898: LD_ADDR_VAR 0 5
69902: PUSH
69903: LD_VAR 0 5
69907: PPUSH
69908: LD_VAR 0 5
69912: PUSH
69913: LD_INT 1
69915: PLUS
69916: PPUSH
69917: LD_VAR 0 4
69921: PPUSH
69922: LD_VAR 0 2
69926: PPUSH
69927: CALL_OW 259
69931: PPUSH
69932: CALL_OW 2
69936: ST_TO_ADDR
69937: GO 69895
69939: POP
69940: POP
// if not tmp then
69941: LD_VAR 0 5
69945: NOT
69946: IFFALSE 69950
// exit ;
69948: GO 69970
// result := SortListByListDesc ( units , tmp ) ;
69950: LD_ADDR_VAR 0 3
69954: PUSH
69955: LD_VAR 0 1
69959: PPUSH
69960: LD_VAR 0 5
69964: PPUSH
69965: CALL_OW 77
69969: ST_TO_ADDR
// end ;
69970: LD_VAR 0 3
69974: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69975: LD_INT 0
69977: PPUSH
69978: PPUSH
69979: PPUSH
// x := GetX ( building ) ;
69980: LD_ADDR_VAR 0 4
69984: PUSH
69985: LD_VAR 0 2
69989: PPUSH
69990: CALL_OW 250
69994: ST_TO_ADDR
// y := GetY ( building ) ;
69995: LD_ADDR_VAR 0 5
69999: PUSH
70000: LD_VAR 0 2
70004: PPUSH
70005: CALL_OW 251
70009: ST_TO_ADDR
// if GetTaskList ( unit ) then
70010: LD_VAR 0 1
70014: PPUSH
70015: CALL_OW 437
70019: IFFALSE 70114
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70021: LD_STRING e
70023: PUSH
70024: LD_VAR 0 1
70028: PPUSH
70029: CALL_OW 437
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PUSH
70038: LD_INT 1
70040: ARRAY
70041: EQUAL
70042: PUSH
70043: LD_VAR 0 4
70047: PUSH
70048: LD_VAR 0 1
70052: PPUSH
70053: CALL_OW 437
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: PUSH
70062: LD_INT 2
70064: ARRAY
70065: EQUAL
70066: AND
70067: PUSH
70068: LD_VAR 0 5
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: CALL_OW 437
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PUSH
70087: LD_INT 3
70089: ARRAY
70090: EQUAL
70091: AND
70092: IFFALSE 70104
// result := true else
70094: LD_ADDR_VAR 0 3
70098: PUSH
70099: LD_INT 1
70101: ST_TO_ADDR
70102: GO 70112
// result := false ;
70104: LD_ADDR_VAR 0 3
70108: PUSH
70109: LD_INT 0
70111: ST_TO_ADDR
// end else
70112: GO 70122
// result := false ;
70114: LD_ADDR_VAR 0 3
70118: PUSH
70119: LD_INT 0
70121: ST_TO_ADDR
// end ;
70122: LD_VAR 0 3
70126: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70127: LD_INT 0
70129: PPUSH
70130: PPUSH
70131: PPUSH
70132: PPUSH
// if not unit or not area then
70133: LD_VAR 0 1
70137: NOT
70138: PUSH
70139: LD_VAR 0 2
70143: NOT
70144: OR
70145: IFFALSE 70149
// exit ;
70147: GO 70313
// tmp := AreaToList ( area , i ) ;
70149: LD_ADDR_VAR 0 6
70153: PUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: LD_VAR 0 5
70163: PPUSH
70164: CALL_OW 517
70168: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70169: LD_ADDR_VAR 0 5
70173: PUSH
70174: DOUBLE
70175: LD_INT 1
70177: DEC
70178: ST_TO_ADDR
70179: LD_VAR 0 6
70183: PUSH
70184: LD_INT 1
70186: ARRAY
70187: PUSH
70188: FOR_TO
70189: IFFALSE 70311
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70191: LD_ADDR_VAR 0 7
70195: PUSH
70196: LD_VAR 0 6
70200: PUSH
70201: LD_INT 1
70203: ARRAY
70204: PUSH
70205: LD_VAR 0 5
70209: ARRAY
70210: PUSH
70211: LD_VAR 0 6
70215: PUSH
70216: LD_INT 2
70218: ARRAY
70219: PUSH
70220: LD_VAR 0 5
70224: ARRAY
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70230: LD_VAR 0 7
70234: PUSH
70235: LD_INT 1
70237: ARRAY
70238: PPUSH
70239: LD_VAR 0 7
70243: PUSH
70244: LD_INT 2
70246: ARRAY
70247: PPUSH
70248: CALL_OW 428
70252: PUSH
70253: LD_INT 0
70255: EQUAL
70256: IFFALSE 70309
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70258: LD_VAR 0 1
70262: PPUSH
70263: LD_VAR 0 7
70267: PUSH
70268: LD_INT 1
70270: ARRAY
70271: PPUSH
70272: LD_VAR 0 7
70276: PUSH
70277: LD_INT 2
70279: ARRAY
70280: PPUSH
70281: LD_VAR 0 3
70285: PPUSH
70286: CALL_OW 48
// result := IsPlaced ( unit ) ;
70290: LD_ADDR_VAR 0 4
70294: PUSH
70295: LD_VAR 0 1
70299: PPUSH
70300: CALL_OW 305
70304: ST_TO_ADDR
// exit ;
70305: POP
70306: POP
70307: GO 70313
// end ; end ;
70309: GO 70188
70311: POP
70312: POP
// end ;
70313: LD_VAR 0 4
70317: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70318: LD_INT 0
70320: PPUSH
70321: PPUSH
70322: PPUSH
// if not side or side > 8 then
70323: LD_VAR 0 1
70327: NOT
70328: PUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 8
70336: GREATER
70337: OR
70338: IFFALSE 70342
// exit ;
70340: GO 70529
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70342: LD_ADDR_VAR 0 4
70346: PUSH
70347: LD_INT 22
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 21
70361: PUSH
70362: LD_INT 3
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PPUSH
70373: CALL_OW 69
70377: ST_TO_ADDR
// if not tmp then
70378: LD_VAR 0 4
70382: NOT
70383: IFFALSE 70387
// exit ;
70385: GO 70529
// enable_addtolog := true ;
70387: LD_ADDR_OWVAR 81
70391: PUSH
70392: LD_INT 1
70394: ST_TO_ADDR
// AddToLog ( [ ) ;
70395: LD_STRING [
70397: PPUSH
70398: CALL_OW 561
// for i in tmp do
70402: LD_ADDR_VAR 0 3
70406: PUSH
70407: LD_VAR 0 4
70411: PUSH
70412: FOR_IN
70413: IFFALSE 70520
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70415: LD_STRING [
70417: PUSH
70418: LD_VAR 0 3
70422: PPUSH
70423: CALL_OW 266
70427: STR
70428: PUSH
70429: LD_STRING , 
70431: STR
70432: PUSH
70433: LD_VAR 0 3
70437: PPUSH
70438: CALL_OW 250
70442: STR
70443: PUSH
70444: LD_STRING , 
70446: STR
70447: PUSH
70448: LD_VAR 0 3
70452: PPUSH
70453: CALL_OW 251
70457: STR
70458: PUSH
70459: LD_STRING , 
70461: STR
70462: PUSH
70463: LD_VAR 0 3
70467: PPUSH
70468: CALL_OW 254
70472: STR
70473: PUSH
70474: LD_STRING , 
70476: STR
70477: PUSH
70478: LD_VAR 0 3
70482: PPUSH
70483: LD_INT 1
70485: PPUSH
70486: CALL_OW 268
70490: STR
70491: PUSH
70492: LD_STRING , 
70494: STR
70495: PUSH
70496: LD_VAR 0 3
70500: PPUSH
70501: LD_INT 2
70503: PPUSH
70504: CALL_OW 268
70508: STR
70509: PUSH
70510: LD_STRING ],
70512: STR
70513: PPUSH
70514: CALL_OW 561
// end ;
70518: GO 70412
70520: POP
70521: POP
// AddToLog ( ]; ) ;
70522: LD_STRING ];
70524: PPUSH
70525: CALL_OW 561
// end ;
70529: LD_VAR 0 2
70533: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70534: LD_INT 0
70536: PPUSH
70537: PPUSH
70538: PPUSH
70539: PPUSH
70540: PPUSH
// if not area or not rate or not max then
70541: LD_VAR 0 1
70545: NOT
70546: PUSH
70547: LD_VAR 0 2
70551: NOT
70552: OR
70553: PUSH
70554: LD_VAR 0 4
70558: NOT
70559: OR
70560: IFFALSE 70564
// exit ;
70562: GO 70756
// while 1 do
70564: LD_INT 1
70566: IFFALSE 70756
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70568: LD_ADDR_VAR 0 9
70572: PUSH
70573: LD_VAR 0 1
70577: PPUSH
70578: LD_INT 1
70580: PPUSH
70581: CALL_OW 287
70585: PUSH
70586: LD_INT 10
70588: MUL
70589: ST_TO_ADDR
// r := rate / 10 ;
70590: LD_ADDR_VAR 0 7
70594: PUSH
70595: LD_VAR 0 2
70599: PUSH
70600: LD_INT 10
70602: DIVREAL
70603: ST_TO_ADDR
// time := 1 1$00 ;
70604: LD_ADDR_VAR 0 8
70608: PUSH
70609: LD_INT 2100
70611: ST_TO_ADDR
// if amount < min then
70612: LD_VAR 0 9
70616: PUSH
70617: LD_VAR 0 3
70621: LESS
70622: IFFALSE 70640
// r := r * 2 else
70624: LD_ADDR_VAR 0 7
70628: PUSH
70629: LD_VAR 0 7
70633: PUSH
70634: LD_INT 2
70636: MUL
70637: ST_TO_ADDR
70638: GO 70666
// if amount > max then
70640: LD_VAR 0 9
70644: PUSH
70645: LD_VAR 0 4
70649: GREATER
70650: IFFALSE 70666
// r := r / 2 ;
70652: LD_ADDR_VAR 0 7
70656: PUSH
70657: LD_VAR 0 7
70661: PUSH
70662: LD_INT 2
70664: DIVREAL
70665: ST_TO_ADDR
// time := time / r ;
70666: LD_ADDR_VAR 0 8
70670: PUSH
70671: LD_VAR 0 8
70675: PUSH
70676: LD_VAR 0 7
70680: DIVREAL
70681: ST_TO_ADDR
// if time < 0 then
70682: LD_VAR 0 8
70686: PUSH
70687: LD_INT 0
70689: LESS
70690: IFFALSE 70707
// time := time * - 1 ;
70692: LD_ADDR_VAR 0 8
70696: PUSH
70697: LD_VAR 0 8
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: MUL
70706: ST_TO_ADDR
// wait ( time ) ;
70707: LD_VAR 0 8
70711: PPUSH
70712: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70716: LD_INT 35
70718: PPUSH
70719: LD_INT 875
70721: PPUSH
70722: CALL_OW 12
70726: PPUSH
70727: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70731: LD_INT 1
70733: PPUSH
70734: LD_INT 5
70736: PPUSH
70737: CALL_OW 12
70741: PPUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_INT 1
70749: PPUSH
70750: CALL_OW 55
// end ;
70754: GO 70564
// end ;
70756: LD_VAR 0 5
70760: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70761: LD_INT 0
70763: PPUSH
70764: PPUSH
70765: PPUSH
70766: PPUSH
70767: PPUSH
70768: PPUSH
70769: PPUSH
70770: PPUSH
// if not turrets or not factories then
70771: LD_VAR 0 1
70775: NOT
70776: PUSH
70777: LD_VAR 0 2
70781: NOT
70782: OR
70783: IFFALSE 70787
// exit ;
70785: GO 71094
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70787: LD_ADDR_VAR 0 10
70791: PUSH
70792: LD_INT 5
70794: PUSH
70795: LD_INT 6
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: LD_INT 4
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: LD_INT 5
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 24
70829: PUSH
70830: LD_INT 25
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 23
70839: PUSH
70840: LD_INT 27
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 42
70853: PUSH
70854: LD_INT 43
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 44
70863: PUSH
70864: LD_INT 46
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 45
70873: PUSH
70874: LD_INT 47
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: ST_TO_ADDR
// result := [ ] ;
70891: LD_ADDR_VAR 0 3
70895: PUSH
70896: EMPTY
70897: ST_TO_ADDR
// for i in turrets do
70898: LD_ADDR_VAR 0 4
70902: PUSH
70903: LD_VAR 0 1
70907: PUSH
70908: FOR_IN
70909: IFFALSE 71092
// begin nat := GetNation ( i ) ;
70911: LD_ADDR_VAR 0 7
70915: PUSH
70916: LD_VAR 0 4
70920: PPUSH
70921: CALL_OW 248
70925: ST_TO_ADDR
// weapon := 0 ;
70926: LD_ADDR_VAR 0 8
70930: PUSH
70931: LD_INT 0
70933: ST_TO_ADDR
// if not nat then
70934: LD_VAR 0 7
70938: NOT
70939: IFFALSE 70943
// continue ;
70941: GO 70908
// for j in list [ nat ] do
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: LD_VAR 0 10
70952: PUSH
70953: LD_VAR 0 7
70957: ARRAY
70958: PUSH
70959: FOR_IN
70960: IFFALSE 71001
// if GetBWeapon ( i ) = j [ 1 ] then
70962: LD_VAR 0 4
70966: PPUSH
70967: CALL_OW 269
70971: PUSH
70972: LD_VAR 0 5
70976: PUSH
70977: LD_INT 1
70979: ARRAY
70980: EQUAL
70981: IFFALSE 70999
// begin weapon := j [ 2 ] ;
70983: LD_ADDR_VAR 0 8
70987: PUSH
70988: LD_VAR 0 5
70992: PUSH
70993: LD_INT 2
70995: ARRAY
70996: ST_TO_ADDR
// break ;
70997: GO 71001
// end ;
70999: GO 70959
71001: POP
71002: POP
// if not weapon then
71003: LD_VAR 0 8
71007: NOT
71008: IFFALSE 71012
// continue ;
71010: GO 70908
// for k in factories do
71012: LD_ADDR_VAR 0 6
71016: PUSH
71017: LD_VAR 0 2
71021: PUSH
71022: FOR_IN
71023: IFFALSE 71088
// begin weapons := AvailableWeaponList ( k ) ;
71025: LD_ADDR_VAR 0 9
71029: PUSH
71030: LD_VAR 0 6
71034: PPUSH
71035: CALL_OW 478
71039: ST_TO_ADDR
// if not weapons then
71040: LD_VAR 0 9
71044: NOT
71045: IFFALSE 71049
// continue ;
71047: GO 71022
// if weapon in weapons then
71049: LD_VAR 0 8
71053: PUSH
71054: LD_VAR 0 9
71058: IN
71059: IFFALSE 71086
// begin result := [ i , weapon ] ;
71061: LD_ADDR_VAR 0 3
71065: PUSH
71066: LD_VAR 0 4
71070: PUSH
71071: LD_VAR 0 8
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: ST_TO_ADDR
// exit ;
71080: POP
71081: POP
71082: POP
71083: POP
71084: GO 71094
// end ; end ;
71086: GO 71022
71088: POP
71089: POP
// end ;
71090: GO 70908
71092: POP
71093: POP
// end ;
71094: LD_VAR 0 3
71098: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71099: LD_INT 0
71101: PPUSH
// if not side or side > 8 then
71102: LD_VAR 0 3
71106: NOT
71107: PUSH
71108: LD_VAR 0 3
71112: PUSH
71113: LD_INT 8
71115: GREATER
71116: OR
71117: IFFALSE 71121
// exit ;
71119: GO 71180
// if not range then
71121: LD_VAR 0 4
71125: NOT
71126: IFFALSE 71137
// range := - 12 ;
71128: LD_ADDR_VAR 0 4
71132: PUSH
71133: LD_INT 12
71135: NEG
71136: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71137: LD_VAR 0 1
71141: PPUSH
71142: LD_VAR 0 2
71146: PPUSH
71147: LD_VAR 0 3
71151: PPUSH
71152: LD_VAR 0 4
71156: PPUSH
71157: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71161: LD_VAR 0 1
71165: PPUSH
71166: LD_VAR 0 2
71170: PPUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: CALL_OW 331
// end ;
71180: LD_VAR 0 5
71184: RET
// export function Video ( mode ) ; begin
71185: LD_INT 0
71187: PPUSH
// ingame_video = mode ;
71188: LD_ADDR_OWVAR 52
71192: PUSH
71193: LD_VAR 0 1
71197: ST_TO_ADDR
// interface_hidden = mode ;
71198: LD_ADDR_OWVAR 54
71202: PUSH
71203: LD_VAR 0 1
71207: ST_TO_ADDR
// end ;
71208: LD_VAR 0 2
71212: RET
// export function Join ( array , element ) ; begin
71213: LD_INT 0
71215: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71216: LD_ADDR_VAR 0 3
71220: PUSH
71221: LD_VAR 0 1
71225: PPUSH
71226: LD_VAR 0 1
71230: PUSH
71231: LD_INT 1
71233: PLUS
71234: PPUSH
71235: LD_VAR 0 2
71239: PPUSH
71240: CALL_OW 1
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 3
71249: RET
// export function JoinUnion ( array , element ) ; begin
71250: LD_INT 0
71252: PPUSH
// result := array union element ;
71253: LD_ADDR_VAR 0 3
71257: PUSH
71258: LD_VAR 0 1
71262: PUSH
71263: LD_VAR 0 2
71267: UNION
71268: ST_TO_ADDR
// end ;
71269: LD_VAR 0 3
71273: RET
// export function GetBehemoths ( side ) ; begin
71274: LD_INT 0
71276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71277: LD_ADDR_VAR 0 2
71281: PUSH
71282: LD_INT 22
71284: PUSH
71285: LD_VAR 0 1
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 31
71296: PUSH
71297: LD_INT 25
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PPUSH
71308: CALL_OW 69
71312: ST_TO_ADDR
// end ;
71313: LD_VAR 0 2
71317: RET
// export function Shuffle ( array ) ; var i , index ; begin
71318: LD_INT 0
71320: PPUSH
71321: PPUSH
71322: PPUSH
// result := [ ] ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: EMPTY
71329: ST_TO_ADDR
// if not array then
71330: LD_VAR 0 1
71334: NOT
71335: IFFALSE 71339
// exit ;
71337: GO 71438
// Randomize ;
71339: CALL_OW 10
// for i = array downto 1 do
71343: LD_ADDR_VAR 0 3
71347: PUSH
71348: DOUBLE
71349: LD_VAR 0 1
71353: INC
71354: ST_TO_ADDR
71355: LD_INT 1
71357: PUSH
71358: FOR_DOWNTO
71359: IFFALSE 71436
// begin index := rand ( 1 , array ) ;
71361: LD_ADDR_VAR 0 4
71365: PUSH
71366: LD_INT 1
71368: PPUSH
71369: LD_VAR 0 1
71373: PPUSH
71374: CALL_OW 12
71378: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71379: LD_ADDR_VAR 0 2
71383: PUSH
71384: LD_VAR 0 2
71388: PPUSH
71389: LD_VAR 0 2
71393: PUSH
71394: LD_INT 1
71396: PLUS
71397: PPUSH
71398: LD_VAR 0 1
71402: PUSH
71403: LD_VAR 0 4
71407: ARRAY
71408: PPUSH
71409: CALL_OW 2
71413: ST_TO_ADDR
// array := Delete ( array , index ) ;
71414: LD_ADDR_VAR 0 1
71418: PUSH
71419: LD_VAR 0 1
71423: PPUSH
71424: LD_VAR 0 4
71428: PPUSH
71429: CALL_OW 3
71433: ST_TO_ADDR
// end ;
71434: GO 71358
71436: POP
71437: POP
// end ;
71438: LD_VAR 0 2
71442: RET
// export function GetBaseMaterials ( base ) ; begin
71443: LD_INT 0
71445: PPUSH
// result := [ 0 , 0 , 0 ] ;
71446: LD_ADDR_VAR 0 2
71450: PUSH
71451: LD_INT 0
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: ST_TO_ADDR
// if not base then
71465: LD_VAR 0 1
71469: NOT
71470: IFFALSE 71474
// exit ;
71472: GO 71523
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71474: LD_ADDR_VAR 0 2
71478: PUSH
71479: LD_VAR 0 1
71483: PPUSH
71484: LD_INT 1
71486: PPUSH
71487: CALL_OW 275
71491: PUSH
71492: LD_VAR 0 1
71496: PPUSH
71497: LD_INT 2
71499: PPUSH
71500: CALL_OW 275
71504: PUSH
71505: LD_VAR 0 1
71509: PPUSH
71510: LD_INT 3
71512: PPUSH
71513: CALL_OW 275
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 2
71527: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
// result := array ;
71532: LD_ADDR_VAR 0 3
71536: PUSH
71537: LD_VAR 0 1
71541: ST_TO_ADDR
// if size > 0 then
71542: LD_VAR 0 2
71546: PUSH
71547: LD_INT 0
71549: GREATER
71550: IFFALSE 71596
// for i := array downto size do
71552: LD_ADDR_VAR 0 4
71556: PUSH
71557: DOUBLE
71558: LD_VAR 0 1
71562: INC
71563: ST_TO_ADDR
71564: LD_VAR 0 2
71568: PUSH
71569: FOR_DOWNTO
71570: IFFALSE 71594
// result := Delete ( result , result ) ;
71572: LD_ADDR_VAR 0 3
71576: PUSH
71577: LD_VAR 0 3
71581: PPUSH
71582: LD_VAR 0 3
71586: PPUSH
71587: CALL_OW 3
71591: ST_TO_ADDR
71592: GO 71569
71594: POP
71595: POP
// end ;
71596: LD_VAR 0 3
71600: RET
// export function ComExit ( unit ) ; var tmp ; begin
71601: LD_INT 0
71603: PPUSH
71604: PPUSH
// if not IsInUnit ( unit ) then
71605: LD_VAR 0 1
71609: PPUSH
71610: CALL_OW 310
71614: NOT
71615: IFFALSE 71619
// exit ;
71617: GO 71679
// tmp := IsInUnit ( unit ) ;
71619: LD_ADDR_VAR 0 3
71623: PUSH
71624: LD_VAR 0 1
71628: PPUSH
71629: CALL_OW 310
71633: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71634: LD_VAR 0 3
71638: PPUSH
71639: CALL_OW 247
71643: PUSH
71644: LD_INT 2
71646: EQUAL
71647: IFFALSE 71660
// ComExitVehicle ( unit ) else
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 121
71658: GO 71669
// ComExitBuilding ( unit ) ;
71660: LD_VAR 0 1
71664: PPUSH
71665: CALL_OW 122
// result := tmp ;
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_VAR 0 3
71678: ST_TO_ADDR
// end ;
71679: LD_VAR 0 2
71683: RET
// export function ResetHc ; begin
71684: LD_INT 0
71686: PPUSH
// InitHc ;
71687: CALL_OW 19
// hc_importance := 0 ;
71691: LD_ADDR_OWVAR 32
71695: PUSH
71696: LD_INT 0
71698: ST_TO_ADDR
// end ;
71699: LD_VAR 0 1
71703: RET
